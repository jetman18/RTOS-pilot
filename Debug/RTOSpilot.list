
RTOSpilot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ef8  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c0  080150e8  080150e8  000160e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080158a8  080158a8  000170e0  2**0
                  CONTENTS
  4 .ARM          00000008  080158a8  080158a8  000168a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080158b0  080158b0  000170e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080158b0  080158b0  000168b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080158b4  080158b4  000168b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e0  20000000  080158b8  00017000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d30  200000e0  08015998  000170e0  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20002e10  08015998  00017e10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000170e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b791  00000000  00000000  00017109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007620  00000000  00000000  0004289a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023d8  00000000  00000000  00049ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b8b  00000000  00000000  0004c298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024ddd  00000000  00000000  0004de23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000359b9  00000000  00000000  00072c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3198  00000000  00000000  000a85b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017b751  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b54  00000000  00000000  0017b794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001852e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000e0 	.word	0x200000e0
 800020c:	00000000 	.word	0x00000000
 8000210:	080150d0 	.word	0x080150d0

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000e4 	.word	0x200000e4
 800022c:	080150d0 	.word	0x080150d0

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dc6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	@ 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	@ 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	@ 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_fcmpun>:
 8001100:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001104:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001108:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800110c:	d102      	bne.n	8001114 <__aeabi_fcmpun+0x14>
 800110e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001112:	d108      	bne.n	8001126 <__aeabi_fcmpun+0x26>
 8001114:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001118:	d102      	bne.n	8001120 <__aeabi_fcmpun+0x20>
 800111a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800111e:	d102      	bne.n	8001126 <__aeabi_fcmpun+0x26>
 8001120:	f04f 0000 	mov.w	r0, #0
 8001124:	4770      	bx	lr
 8001126:	f04f 0001 	mov.w	r0, #1
 800112a:	4770      	bx	lr

0800112c <__aeabi_f2iz>:
 800112c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001130:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001134:	d30f      	bcc.n	8001156 <__aeabi_f2iz+0x2a>
 8001136:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800113a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800113e:	d90d      	bls.n	800115c <__aeabi_f2iz+0x30>
 8001140:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001144:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001148:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800114c:	fa23 f002 	lsr.w	r0, r3, r2
 8001150:	bf18      	it	ne
 8001152:	4240      	negne	r0, r0
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr
 800115c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001160:	d101      	bne.n	8001166 <__aeabi_f2iz+0x3a>
 8001162:	0242      	lsls	r2, r0, #9
 8001164:	d105      	bne.n	8001172 <__aeabi_f2iz+0x46>
 8001166:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800116a:	bf08      	it	eq
 800116c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001170:	4770      	bx	lr
 8001172:	f04f 0000 	mov.w	r0, #0
 8001176:	4770      	bx	lr

08001178 <__aeabi_f2uiz>:
 8001178:	0042      	lsls	r2, r0, #1
 800117a:	d20e      	bcs.n	800119a <__aeabi_f2uiz+0x22>
 800117c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001180:	d30b      	bcc.n	800119a <__aeabi_f2uiz+0x22>
 8001182:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001186:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800118a:	d409      	bmi.n	80011a0 <__aeabi_f2uiz+0x28>
 800118c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001190:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001194:	fa23 f002 	lsr.w	r0, r3, r2
 8001198:	4770      	bx	lr
 800119a:	f04f 0000 	mov.w	r0, #0
 800119e:	4770      	bx	lr
 80011a0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011a4:	d101      	bne.n	80011aa <__aeabi_f2uiz+0x32>
 80011a6:	0242      	lsls	r2, r0, #9
 80011a8:	d102      	bne.n	80011b0 <__aeabi_f2uiz+0x38>
 80011aa:	f04f 30ff 	mov.w	r0, #4294967295
 80011ae:	4770      	bx	lr
 80011b0:	f04f 0000 	mov.w	r0, #0
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop

080011b8 <__aeabi_ldivmod>:
 80011b8:	b97b      	cbnz	r3, 80011da <__aeabi_ldivmod+0x22>
 80011ba:	b972      	cbnz	r2, 80011da <__aeabi_ldivmod+0x22>
 80011bc:	2900      	cmp	r1, #0
 80011be:	bfbe      	ittt	lt
 80011c0:	2000      	movlt	r0, #0
 80011c2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80011c6:	e006      	blt.n	80011d6 <__aeabi_ldivmod+0x1e>
 80011c8:	bf08      	it	eq
 80011ca:	2800      	cmpeq	r0, #0
 80011cc:	bf1c      	itt	ne
 80011ce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80011d2:	f04f 30ff 	movne.w	r0, #4294967295
 80011d6:	f000 b99b 	b.w	8001510 <__aeabi_idiv0>
 80011da:	f1ad 0c08 	sub.w	ip, sp, #8
 80011de:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011e2:	2900      	cmp	r1, #0
 80011e4:	db09      	blt.n	80011fa <__aeabi_ldivmod+0x42>
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	db1a      	blt.n	8001220 <__aeabi_ldivmod+0x68>
 80011ea:	f000 f835 	bl	8001258 <__udivmoddi4>
 80011ee:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011f6:	b004      	add	sp, #16
 80011f8:	4770      	bx	lr
 80011fa:	4240      	negs	r0, r0
 80011fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001200:	2b00      	cmp	r3, #0
 8001202:	db1b      	blt.n	800123c <__aeabi_ldivmod+0x84>
 8001204:	f000 f828 	bl	8001258 <__udivmoddi4>
 8001208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800120c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001210:	b004      	add	sp, #16
 8001212:	4240      	negs	r0, r0
 8001214:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001218:	4252      	negs	r2, r2
 800121a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800121e:	4770      	bx	lr
 8001220:	4252      	negs	r2, r2
 8001222:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001226:	f000 f817 	bl	8001258 <__udivmoddi4>
 800122a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800122e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001232:	b004      	add	sp, #16
 8001234:	4240      	negs	r0, r0
 8001236:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800123a:	4770      	bx	lr
 800123c:	4252      	negs	r2, r2
 800123e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001242:	f000 f809 	bl	8001258 <__udivmoddi4>
 8001246:	f8dd e004 	ldr.w	lr, [sp, #4]
 800124a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800124e:	b004      	add	sp, #16
 8001250:	4252      	negs	r2, r2
 8001252:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001256:	4770      	bx	lr

08001258 <__udivmoddi4>:
 8001258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800125c:	9d08      	ldr	r5, [sp, #32]
 800125e:	460c      	mov	r4, r1
 8001260:	2b00      	cmp	r3, #0
 8001262:	d14e      	bne.n	8001302 <__udivmoddi4+0xaa>
 8001264:	4694      	mov	ip, r2
 8001266:	458c      	cmp	ip, r1
 8001268:	4686      	mov	lr, r0
 800126a:	fab2 f282 	clz	r2, r2
 800126e:	d962      	bls.n	8001336 <__udivmoddi4+0xde>
 8001270:	b14a      	cbz	r2, 8001286 <__udivmoddi4+0x2e>
 8001272:	f1c2 0320 	rsb	r3, r2, #32
 8001276:	4091      	lsls	r1, r2
 8001278:	fa20 f303 	lsr.w	r3, r0, r3
 800127c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001280:	4319      	orrs	r1, r3
 8001282:	fa00 fe02 	lsl.w	lr, r0, r2
 8001286:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800128a:	fbb1 f4f7 	udiv	r4, r1, r7
 800128e:	fb07 1114 	mls	r1, r7, r4, r1
 8001292:	fa1f f68c 	uxth.w	r6, ip
 8001296:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800129a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800129e:	fb04 f106 	mul.w	r1, r4, r6
 80012a2:	4299      	cmp	r1, r3
 80012a4:	d90a      	bls.n	80012bc <__udivmoddi4+0x64>
 80012a6:	eb1c 0303 	adds.w	r3, ip, r3
 80012aa:	f104 30ff 	add.w	r0, r4, #4294967295
 80012ae:	f080 8110 	bcs.w	80014d2 <__udivmoddi4+0x27a>
 80012b2:	4299      	cmp	r1, r3
 80012b4:	f240 810d 	bls.w	80014d2 <__udivmoddi4+0x27a>
 80012b8:	3c02      	subs	r4, #2
 80012ba:	4463      	add	r3, ip
 80012bc:	1a59      	subs	r1, r3, r1
 80012be:	fbb1 f0f7 	udiv	r0, r1, r7
 80012c2:	fb07 1110 	mls	r1, r7, r0, r1
 80012c6:	fb00 f606 	mul.w	r6, r0, r6
 80012ca:	fa1f f38e 	uxth.w	r3, lr
 80012ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012d2:	429e      	cmp	r6, r3
 80012d4:	d90a      	bls.n	80012ec <__udivmoddi4+0x94>
 80012d6:	eb1c 0303 	adds.w	r3, ip, r3
 80012da:	f100 31ff 	add.w	r1, r0, #4294967295
 80012de:	f080 80fa 	bcs.w	80014d6 <__udivmoddi4+0x27e>
 80012e2:	429e      	cmp	r6, r3
 80012e4:	f240 80f7 	bls.w	80014d6 <__udivmoddi4+0x27e>
 80012e8:	4463      	add	r3, ip
 80012ea:	3802      	subs	r0, #2
 80012ec:	2100      	movs	r1, #0
 80012ee:	1b9b      	subs	r3, r3, r6
 80012f0:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80012f4:	b11d      	cbz	r5, 80012fe <__udivmoddi4+0xa6>
 80012f6:	40d3      	lsrs	r3, r2
 80012f8:	2200      	movs	r2, #0
 80012fa:	e9c5 3200 	strd	r3, r2, [r5]
 80012fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001302:	428b      	cmp	r3, r1
 8001304:	d905      	bls.n	8001312 <__udivmoddi4+0xba>
 8001306:	b10d      	cbz	r5, 800130c <__udivmoddi4+0xb4>
 8001308:	e9c5 0100 	strd	r0, r1, [r5]
 800130c:	2100      	movs	r1, #0
 800130e:	4608      	mov	r0, r1
 8001310:	e7f5      	b.n	80012fe <__udivmoddi4+0xa6>
 8001312:	fab3 f183 	clz	r1, r3
 8001316:	2900      	cmp	r1, #0
 8001318:	d146      	bne.n	80013a8 <__udivmoddi4+0x150>
 800131a:	42a3      	cmp	r3, r4
 800131c:	d302      	bcc.n	8001324 <__udivmoddi4+0xcc>
 800131e:	4290      	cmp	r0, r2
 8001320:	f0c0 80ee 	bcc.w	8001500 <__udivmoddi4+0x2a8>
 8001324:	1a86      	subs	r6, r0, r2
 8001326:	eb64 0303 	sbc.w	r3, r4, r3
 800132a:	2001      	movs	r0, #1
 800132c:	2d00      	cmp	r5, #0
 800132e:	d0e6      	beq.n	80012fe <__udivmoddi4+0xa6>
 8001330:	e9c5 6300 	strd	r6, r3, [r5]
 8001334:	e7e3      	b.n	80012fe <__udivmoddi4+0xa6>
 8001336:	2a00      	cmp	r2, #0
 8001338:	f040 808f 	bne.w	800145a <__udivmoddi4+0x202>
 800133c:	eba1 040c 	sub.w	r4, r1, ip
 8001340:	2101      	movs	r1, #1
 8001342:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001346:	fa1f f78c 	uxth.w	r7, ip
 800134a:	fbb4 f6f8 	udiv	r6, r4, r8
 800134e:	fb08 4416 	mls	r4, r8, r6, r4
 8001352:	fb07 f006 	mul.w	r0, r7, r6
 8001356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800135a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800135e:	4298      	cmp	r0, r3
 8001360:	d908      	bls.n	8001374 <__udivmoddi4+0x11c>
 8001362:	eb1c 0303 	adds.w	r3, ip, r3
 8001366:	f106 34ff 	add.w	r4, r6, #4294967295
 800136a:	d202      	bcs.n	8001372 <__udivmoddi4+0x11a>
 800136c:	4298      	cmp	r0, r3
 800136e:	f200 80cb 	bhi.w	8001508 <__udivmoddi4+0x2b0>
 8001372:	4626      	mov	r6, r4
 8001374:	1a1c      	subs	r4, r3, r0
 8001376:	fbb4 f0f8 	udiv	r0, r4, r8
 800137a:	fb08 4410 	mls	r4, r8, r0, r4
 800137e:	fb00 f707 	mul.w	r7, r0, r7
 8001382:	fa1f f38e 	uxth.w	r3, lr
 8001386:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800138a:	429f      	cmp	r7, r3
 800138c:	d908      	bls.n	80013a0 <__udivmoddi4+0x148>
 800138e:	eb1c 0303 	adds.w	r3, ip, r3
 8001392:	f100 34ff 	add.w	r4, r0, #4294967295
 8001396:	d202      	bcs.n	800139e <__udivmoddi4+0x146>
 8001398:	429f      	cmp	r7, r3
 800139a:	f200 80ae 	bhi.w	80014fa <__udivmoddi4+0x2a2>
 800139e:	4620      	mov	r0, r4
 80013a0:	1bdb      	subs	r3, r3, r7
 80013a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80013a6:	e7a5      	b.n	80012f4 <__udivmoddi4+0x9c>
 80013a8:	f1c1 0720 	rsb	r7, r1, #32
 80013ac:	408b      	lsls	r3, r1
 80013ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80013b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80013b6:	fa24 f607 	lsr.w	r6, r4, r7
 80013ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013be:	fbb6 f8f9 	udiv	r8, r6, r9
 80013c2:	fa1f fe8c 	uxth.w	lr, ip
 80013c6:	fb09 6618 	mls	r6, r9, r8, r6
 80013ca:	fa20 f307 	lsr.w	r3, r0, r7
 80013ce:	408c      	lsls	r4, r1
 80013d0:	fa00 fa01 	lsl.w	sl, r0, r1
 80013d4:	fb08 f00e 	mul.w	r0, r8, lr
 80013d8:	431c      	orrs	r4, r3
 80013da:	0c23      	lsrs	r3, r4, #16
 80013dc:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80013e0:	4298      	cmp	r0, r3
 80013e2:	fa02 f201 	lsl.w	r2, r2, r1
 80013e6:	d90a      	bls.n	80013fe <__udivmoddi4+0x1a6>
 80013e8:	eb1c 0303 	adds.w	r3, ip, r3
 80013ec:	f108 36ff 	add.w	r6, r8, #4294967295
 80013f0:	f080 8081 	bcs.w	80014f6 <__udivmoddi4+0x29e>
 80013f4:	4298      	cmp	r0, r3
 80013f6:	d97e      	bls.n	80014f6 <__udivmoddi4+0x29e>
 80013f8:	f1a8 0802 	sub.w	r8, r8, #2
 80013fc:	4463      	add	r3, ip
 80013fe:	1a1e      	subs	r6, r3, r0
 8001400:	fbb6 f3f9 	udiv	r3, r6, r9
 8001404:	fb09 6613 	mls	r6, r9, r3, r6
 8001408:	fb03 fe0e 	mul.w	lr, r3, lr
 800140c:	b2a4      	uxth	r4, r4
 800140e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001412:	45a6      	cmp	lr, r4
 8001414:	d908      	bls.n	8001428 <__udivmoddi4+0x1d0>
 8001416:	eb1c 0404 	adds.w	r4, ip, r4
 800141a:	f103 30ff 	add.w	r0, r3, #4294967295
 800141e:	d266      	bcs.n	80014ee <__udivmoddi4+0x296>
 8001420:	45a6      	cmp	lr, r4
 8001422:	d964      	bls.n	80014ee <__udivmoddi4+0x296>
 8001424:	3b02      	subs	r3, #2
 8001426:	4464      	add	r4, ip
 8001428:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800142c:	fba0 8302 	umull	r8, r3, r0, r2
 8001430:	eba4 040e 	sub.w	r4, r4, lr
 8001434:	429c      	cmp	r4, r3
 8001436:	46c6      	mov	lr, r8
 8001438:	461e      	mov	r6, r3
 800143a:	d350      	bcc.n	80014de <__udivmoddi4+0x286>
 800143c:	d04d      	beq.n	80014da <__udivmoddi4+0x282>
 800143e:	b155      	cbz	r5, 8001456 <__udivmoddi4+0x1fe>
 8001440:	ebba 030e 	subs.w	r3, sl, lr
 8001444:	eb64 0406 	sbc.w	r4, r4, r6
 8001448:	fa04 f707 	lsl.w	r7, r4, r7
 800144c:	40cb      	lsrs	r3, r1
 800144e:	431f      	orrs	r7, r3
 8001450:	40cc      	lsrs	r4, r1
 8001452:	e9c5 7400 	strd	r7, r4, [r5]
 8001456:	2100      	movs	r1, #0
 8001458:	e751      	b.n	80012fe <__udivmoddi4+0xa6>
 800145a:	fa0c fc02 	lsl.w	ip, ip, r2
 800145e:	f1c2 0320 	rsb	r3, r2, #32
 8001462:	40d9      	lsrs	r1, r3
 8001464:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001468:	fa20 f303 	lsr.w	r3, r0, r3
 800146c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001470:	fbb1 f0f8 	udiv	r0, r1, r8
 8001474:	fb08 1110 	mls	r1, r8, r0, r1
 8001478:	4094      	lsls	r4, r2
 800147a:	431c      	orrs	r4, r3
 800147c:	fa1f f78c 	uxth.w	r7, ip
 8001480:	0c23      	lsrs	r3, r4, #16
 8001482:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001486:	fb00 f107 	mul.w	r1, r0, r7
 800148a:	4299      	cmp	r1, r3
 800148c:	d908      	bls.n	80014a0 <__udivmoddi4+0x248>
 800148e:	eb1c 0303 	adds.w	r3, ip, r3
 8001492:	f100 36ff 	add.w	r6, r0, #4294967295
 8001496:	d22c      	bcs.n	80014f2 <__udivmoddi4+0x29a>
 8001498:	4299      	cmp	r1, r3
 800149a:	d92a      	bls.n	80014f2 <__udivmoddi4+0x29a>
 800149c:	3802      	subs	r0, #2
 800149e:	4463      	add	r3, ip
 80014a0:	1a5b      	subs	r3, r3, r1
 80014a2:	fbb3 f1f8 	udiv	r1, r3, r8
 80014a6:	fb08 3311 	mls	r3, r8, r1, r3
 80014aa:	b2a4      	uxth	r4, r4
 80014ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80014b0:	fb01 f307 	mul.w	r3, r1, r7
 80014b4:	42a3      	cmp	r3, r4
 80014b6:	d908      	bls.n	80014ca <__udivmoddi4+0x272>
 80014b8:	eb1c 0404 	adds.w	r4, ip, r4
 80014bc:	f101 36ff 	add.w	r6, r1, #4294967295
 80014c0:	d213      	bcs.n	80014ea <__udivmoddi4+0x292>
 80014c2:	42a3      	cmp	r3, r4
 80014c4:	d911      	bls.n	80014ea <__udivmoddi4+0x292>
 80014c6:	3902      	subs	r1, #2
 80014c8:	4464      	add	r4, ip
 80014ca:	1ae4      	subs	r4, r4, r3
 80014cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80014d0:	e73b      	b.n	800134a <__udivmoddi4+0xf2>
 80014d2:	4604      	mov	r4, r0
 80014d4:	e6f2      	b.n	80012bc <__udivmoddi4+0x64>
 80014d6:	4608      	mov	r0, r1
 80014d8:	e708      	b.n	80012ec <__udivmoddi4+0x94>
 80014da:	45c2      	cmp	sl, r8
 80014dc:	d2af      	bcs.n	800143e <__udivmoddi4+0x1e6>
 80014de:	ebb8 0e02 	subs.w	lr, r8, r2
 80014e2:	eb63 060c 	sbc.w	r6, r3, ip
 80014e6:	3801      	subs	r0, #1
 80014e8:	e7a9      	b.n	800143e <__udivmoddi4+0x1e6>
 80014ea:	4631      	mov	r1, r6
 80014ec:	e7ed      	b.n	80014ca <__udivmoddi4+0x272>
 80014ee:	4603      	mov	r3, r0
 80014f0:	e79a      	b.n	8001428 <__udivmoddi4+0x1d0>
 80014f2:	4630      	mov	r0, r6
 80014f4:	e7d4      	b.n	80014a0 <__udivmoddi4+0x248>
 80014f6:	46b0      	mov	r8, r6
 80014f8:	e781      	b.n	80013fe <__udivmoddi4+0x1a6>
 80014fa:	4463      	add	r3, ip
 80014fc:	3802      	subs	r0, #2
 80014fe:	e74f      	b.n	80013a0 <__udivmoddi4+0x148>
 8001500:	4606      	mov	r6, r0
 8001502:	4623      	mov	r3, r4
 8001504:	4608      	mov	r0, r1
 8001506:	e711      	b.n	800132c <__udivmoddi4+0xd4>
 8001508:	3e02      	subs	r6, #2
 800150a:	4463      	add	r3, ip
 800150c:	e732      	b.n	8001374 <__udivmoddi4+0x11c>
 800150e:	bf00      	nop

08001510 <__aeabi_idiv0>:
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop

08001514 <bmp280_init_default_params>:
#define BMP280_RESET_VALUE     0xB6


BMP280_HandleTypedef devv;

void bmp280_init_default_params() {
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
	devv.params.mode = BMP280_MODE_NORMAL;
 8001518:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <bmp280_init_default_params+0x34>)
 800151a:	2203      	movs	r2, #3
 800151c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	devv.params.filter = BMP280_FILTER_16;
 8001520:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <bmp280_init_default_params+0x34>)
 8001522:	2204      	movs	r2, #4
 8001524:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	devv.params.oversampling_pressure = BMP280_ULTRA_HIGH_RES;
 8001528:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <bmp280_init_default_params+0x34>)
 800152a:	2205      	movs	r2, #5
 800152c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	devv.params.oversampling_temperature = BMP280_ULTRA_HIGH_RES;
 8001530:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <bmp280_init_default_params+0x34>)
 8001532:	2205      	movs	r2, #5
 8001534:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	devv.params.standby = BMP280_STANDBY_05;
 8001538:	4b03      	ldr	r3, [pc, #12]	@ (8001548 <bmp280_init_default_params+0x34>)
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	200000fc 	.word	0x200000fc

0800154c <read_register16>:

static bool read_register16(uint8_t addr, uint16_t *value) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af04      	add	r7, sp, #16
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	71fb      	strb	r3, [r7, #7]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (devv.addr << 1);
 8001558:	4b13      	ldr	r3, [pc, #76]	@ (80015a8 <read_register16+0x5c>)
 800155a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Read(devv.i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001560:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <read_register16+0x5c>)
 8001562:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	b29a      	uxth	r2, r3
 8001568:	89f9      	ldrh	r1, [r7, #14]
 800156a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800156e:	9302      	str	r3, [sp, #8]
 8001570:	2302      	movs	r3, #2
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	2301      	movs	r3, #1
 800157c:	f007 fb58 	bl	8008c30 <HAL_I2C_Mem_Read>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10b      	bne.n	800159e <read_register16+0x52>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001586:	7b7b      	ldrb	r3, [r7, #13]
 8001588:	021b      	lsls	r3, r3, #8
 800158a:	b21a      	sxth	r2, r3
 800158c:	7b3b      	ldrb	r3, [r7, #12]
 800158e:	b21b      	sxth	r3, r3
 8001590:	4313      	orrs	r3, r2
 8001592:	b21b      	sxth	r3, r3
 8001594:	b29a      	uxth	r2, r3
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	801a      	strh	r2, [r3, #0]
		return true;
 800159a:	2301      	movs	r3, #1
 800159c:	e000      	b.n	80015a0 <read_register16+0x54>
	} else
		return false;
 800159e:	2300      	movs	r3, #0

}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200000fc 	.word	0x200000fc

080015ac <read_data>:

static inline int read_data(uint8_t addr, uint8_t *value,
		uint8_t len) {
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b089      	sub	sp, #36	@ 0x24
 80015b0:	af04      	add	r7, sp, #16
 80015b2:	4603      	mov	r3, r0
 80015b4:	6039      	str	r1, [r7, #0]
 80015b6:	71fb      	strb	r3, [r7, #7]
 80015b8:	4613      	mov	r3, r2
 80015ba:	71bb      	strb	r3, [r7, #6]
	uint16_t tx_buff;
	tx_buff = (devv.addr << 1);
 80015bc:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <read_data+0x4c>)
 80015be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	81fb      	strh	r3, [r7, #14]
	if (HAL_I2C_Mem_Read(devv.i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80015c4:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <read_data+0x4c>)
 80015c6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	79bb      	ldrb	r3, [r7, #6]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	89f9      	ldrh	r1, [r7, #14]
 80015d2:	f241 3488 	movw	r4, #5000	@ 0x1388
 80015d6:	9402      	str	r4, [sp, #8]
 80015d8:	9301      	str	r3, [sp, #4]
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	2301      	movs	r3, #1
 80015e0:	f007 fb26 	bl	8008c30 <HAL_I2C_Mem_Read>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <read_data+0x42>
		return 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e000      	b.n	80015f0 <read_data+0x44>
	else
		return 1;
 80015ee:	2301      	movs	r3, #1

}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd90      	pop	{r4, r7, pc}
 80015f8:	200000fc 	.word	0x200000fc

080015fc <read_calibration_data>:

static bool read_calibration_data() {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0

	if (read_register16(0x88, &devv.dig_T1)
 8001600:	492c      	ldr	r1, [pc, #176]	@ (80016b4 <read_calibration_data+0xb8>)
 8001602:	2088      	movs	r0, #136	@ 0x88
 8001604:	f7ff ffa2 	bl	800154c <read_register16>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d04e      	beq.n	80016ac <read_calibration_data+0xb0>
			&& read_register16(0x8a, (uint16_t *) &devv.dig_T2)
 800160e:	492a      	ldr	r1, [pc, #168]	@ (80016b8 <read_calibration_data+0xbc>)
 8001610:	208a      	movs	r0, #138	@ 0x8a
 8001612:	f7ff ff9b 	bl	800154c <read_register16>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d047      	beq.n	80016ac <read_calibration_data+0xb0>
			&& read_register16(0x8c, (uint16_t *) &devv.dig_T3)
 800161c:	4927      	ldr	r1, [pc, #156]	@ (80016bc <read_calibration_data+0xc0>)
 800161e:	208c      	movs	r0, #140	@ 0x8c
 8001620:	f7ff ff94 	bl	800154c <read_register16>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d040      	beq.n	80016ac <read_calibration_data+0xb0>
			&& read_register16(0x8e, &devv.dig_P1)
 800162a:	4925      	ldr	r1, [pc, #148]	@ (80016c0 <read_calibration_data+0xc4>)
 800162c:	208e      	movs	r0, #142	@ 0x8e
 800162e:	f7ff ff8d 	bl	800154c <read_register16>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d039      	beq.n	80016ac <read_calibration_data+0xb0>
			&& read_register16(0x90, (uint16_t *) &devv.dig_P2)
 8001638:	4922      	ldr	r1, [pc, #136]	@ (80016c4 <read_calibration_data+0xc8>)
 800163a:	2090      	movs	r0, #144	@ 0x90
 800163c:	f7ff ff86 	bl	800154c <read_register16>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d032      	beq.n	80016ac <read_calibration_data+0xb0>
			&& read_register16(0x92, (uint16_t *) &devv.dig_P3)
 8001646:	4920      	ldr	r1, [pc, #128]	@ (80016c8 <read_calibration_data+0xcc>)
 8001648:	2092      	movs	r0, #146	@ 0x92
 800164a:	f7ff ff7f 	bl	800154c <read_register16>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d02b      	beq.n	80016ac <read_calibration_data+0xb0>
			&& read_register16(0x94, (uint16_t *) &devv.dig_P4)
 8001654:	491d      	ldr	r1, [pc, #116]	@ (80016cc <read_calibration_data+0xd0>)
 8001656:	2094      	movs	r0, #148	@ 0x94
 8001658:	f7ff ff78 	bl	800154c <read_register16>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d024      	beq.n	80016ac <read_calibration_data+0xb0>
			&& read_register16(0x96, (uint16_t *) &devv.dig_P5)
 8001662:	491b      	ldr	r1, [pc, #108]	@ (80016d0 <read_calibration_data+0xd4>)
 8001664:	2096      	movs	r0, #150	@ 0x96
 8001666:	f7ff ff71 	bl	800154c <read_register16>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d01d      	beq.n	80016ac <read_calibration_data+0xb0>
			&& read_register16(0x98, (uint16_t *) &devv.dig_P6)
 8001670:	4918      	ldr	r1, [pc, #96]	@ (80016d4 <read_calibration_data+0xd8>)
 8001672:	2098      	movs	r0, #152	@ 0x98
 8001674:	f7ff ff6a 	bl	800154c <read_register16>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d016      	beq.n	80016ac <read_calibration_data+0xb0>
			&& read_register16(0x9a, (uint16_t *) &devv.dig_P7)
 800167e:	4916      	ldr	r1, [pc, #88]	@ (80016d8 <read_calibration_data+0xdc>)
 8001680:	209a      	movs	r0, #154	@ 0x9a
 8001682:	f7ff ff63 	bl	800154c <read_register16>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00f      	beq.n	80016ac <read_calibration_data+0xb0>
			&& read_register16(0x9c, (uint16_t *) &devv.dig_P8)
 800168c:	4913      	ldr	r1, [pc, #76]	@ (80016dc <read_calibration_data+0xe0>)
 800168e:	209c      	movs	r0, #156	@ 0x9c
 8001690:	f7ff ff5c 	bl	800154c <read_register16>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d008      	beq.n	80016ac <read_calibration_data+0xb0>
			&& read_register16(0x9e,(uint16_t *) &devv.dig_P9))
 800169a:	4911      	ldr	r1, [pc, #68]	@ (80016e0 <read_calibration_data+0xe4>)
 800169c:	209e      	movs	r0, #158	@ 0x9e
 800169e:	f7ff ff55 	bl	800154c <read_register16>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <read_calibration_data+0xb0>
			{

		return true;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e000      	b.n	80016ae <read_calibration_data+0xb2>
	}

	return false;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200000fc 	.word	0x200000fc
 80016b8:	200000fe 	.word	0x200000fe
 80016bc:	20000100 	.word	0x20000100
 80016c0:	20000102 	.word	0x20000102
 80016c4:	20000104 	.word	0x20000104
 80016c8:	20000106 	.word	0x20000106
 80016cc:	20000108 	.word	0x20000108
 80016d0:	2000010a 	.word	0x2000010a
 80016d4:	2000010c 	.word	0x2000010c
 80016d8:	2000010e 	.word	0x2000010e
 80016dc:	20000110 	.word	0x20000110
 80016e0:	20000112 	.word	0x20000112

080016e4 <write_register8>:


static int write_register8(uint8_t addr, uint8_t value) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af04      	add	r7, sp, #16
 80016ea:	4603      	mov	r3, r0
 80016ec:	460a      	mov	r2, r1
 80016ee:	71fb      	strb	r3, [r7, #7]
 80016f0:	4613      	mov	r3, r2
 80016f2:	71bb      	strb	r3, [r7, #6]
	uint16_t tx_buff;

	tx_buff = (devv.addr << 1);
 80016f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001730 <write_register8+0x4c>)
 80016f6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(devv.i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80016fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <write_register8+0x4c>)
 80016fe:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	b29a      	uxth	r2, r3
 8001704:	89f9      	ldrh	r1, [r7, #14]
 8001706:	f242 7310 	movw	r3, #10000	@ 0x2710
 800170a:	9302      	str	r3, [sp, #8]
 800170c:	2301      	movs	r3, #1
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	1dbb      	adds	r3, r7, #6
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2301      	movs	r3, #1
 8001716:	f007 f991 	bl	8008a3c <HAL_I2C_Mem_Write>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <write_register8+0x40>
		return false;
 8001720:	2300      	movs	r3, #0
 8001722:	e000      	b.n	8001726 <write_register8+0x42>
	else
		return true;
 8001724:	2301      	movs	r3, #1
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200000fc 	.word	0x200000fc

08001734 <bmp280_init>:

bool bmp280_init(I2C_HandleTypeDef* i2c) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

    devv.addr = BMP280_I2C_ADDRESS_0;
 800173c:	4b49      	ldr	r3, [pc, #292]	@ (8001864 <bmp280_init+0x130>)
 800173e:	2276      	movs	r2, #118	@ 0x76
 8001740:	849a      	strh	r2, [r3, #36]	@ 0x24
	devv.i2c  = i2c;
 8001742:	4a48      	ldr	r2, [pc, #288]	@ (8001864 <bmp280_init+0x130>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6293      	str	r3, [r2, #40]	@ 0x28
	bmp280_init_default_params();
 8001748:	f7ff fee4 	bl	8001514 <bmp280_init_default_params>

	if (devv.addr != BMP280_I2C_ADDRESS_0
 800174c:	4b45      	ldr	r3, [pc, #276]	@ (8001864 <bmp280_init+0x130>)
 800174e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001750:	2b76      	cmp	r3, #118	@ 0x76
 8001752:	d005      	beq.n	8001760 <bmp280_init+0x2c>
			&& devv.addr != BMP280_I2C_ADDRESS_1) {
 8001754:	4b43      	ldr	r3, [pc, #268]	@ (8001864 <bmp280_init+0x130>)
 8001756:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001758:	2b77      	cmp	r3, #119	@ 0x77
 800175a:	d001      	beq.n	8001760 <bmp280_init+0x2c>

		return false;
 800175c:	2300      	movs	r3, #0
 800175e:	e07d      	b.n	800185c <bmp280_init+0x128>
	}

	if (read_data(BMP280_REG_ID,&devv.id, 1)) {
 8001760:	2201      	movs	r2, #1
 8001762:	4941      	ldr	r1, [pc, #260]	@ (8001868 <bmp280_init+0x134>)
 8001764:	20d0      	movs	r0, #208	@ 0xd0
 8001766:	f7ff ff21 	bl	80015ac <read_data>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <bmp280_init+0x40>
		return false;
 8001770:	2300      	movs	r3, #0
 8001772:	e073      	b.n	800185c <bmp280_init+0x128>
	}

	if (devv.id != BMP280_CHIP_ID && devv.id != BME280_CHIP_ID) {
 8001774:	4b3b      	ldr	r3, [pc, #236]	@ (8001864 <bmp280_init+0x130>)
 8001776:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800177a:	2b58      	cmp	r3, #88	@ 0x58
 800177c:	d006      	beq.n	800178c <bmp280_init+0x58>
 800177e:	4b39      	ldr	r3, [pc, #228]	@ (8001864 <bmp280_init+0x130>)
 8001780:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001784:	2b60      	cmp	r3, #96	@ 0x60
 8001786:	d001      	beq.n	800178c <bmp280_init+0x58>

		return false;
 8001788:	2300      	movs	r3, #0
 800178a:	e067      	b.n	800185c <bmp280_init+0x128>
	}

	// Soft reset.
	if (write_register8( BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800178c:	21b6      	movs	r1, #182	@ 0xb6
 800178e:	20e0      	movs	r0, #224	@ 0xe0
 8001790:	f7ff ffa8 	bl	80016e4 <write_register8>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <bmp280_init+0x6a>
		return false;
 800179a:	2300      	movs	r3, #0
 800179c:	e05e      	b.n	800185c <bmp280_init+0x128>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(BMP280_REG_STATUS, &status, 1)&& (status & 1) == 0)
 800179e:	f107 030d 	add.w	r3, r7, #13
 80017a2:	2201      	movs	r2, #1
 80017a4:	4619      	mov	r1, r3
 80017a6:	20f3      	movs	r0, #243	@ 0xf3
 80017a8:	f7ff ff00 	bl	80015ac <read_data>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f5      	bne.n	800179e <bmp280_init+0x6a>
 80017b2:	7b7b      	ldrb	r3, [r7, #13]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1f0      	bne.n	800179e <bmp280_init+0x6a>
			break;
	}

	if (!read_calibration_data()) {
 80017bc:	f7ff ff1e 	bl	80015fc <read_calibration_data>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f083 0301 	eor.w	r3, r3, #1
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d100      	bne.n	80017ce <bmp280_init+0x9a>
 80017cc:	e001      	b.n	80017d2 <bmp280_init+0x9e>
		return false;
 80017ce:	2300      	movs	r3, #0
 80017d0:	e044      	b.n	800185c <bmp280_init+0x128>
	}

	if (devv.id == BME280_CHIP_ID ) {
 80017d2:	4b24      	ldr	r3, [pc, #144]	@ (8001864 <bmp280_init+0x130>)
 80017d4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80017d8:	2b60      	cmp	r3, #96	@ 0x60
 80017da:	d101      	bne.n	80017e0 <bmp280_init+0xac>
		return false;
 80017dc:	2300      	movs	r3, #0
 80017de:	e03d      	b.n	800185c <bmp280_init+0x128>
	}

	uint8_t config = (devv.params.standby << 5) | (devv.params.filter << 2);
 80017e0:	4b20      	ldr	r3, [pc, #128]	@ (8001864 <bmp280_init+0x130>)
 80017e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017e6:	015b      	lsls	r3, r3, #5
 80017e8:	b25a      	sxtb	r2, r3
 80017ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001864 <bmp280_init+0x130>)
 80017ec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	4313      	orrs	r3, r2
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	73fb      	strb	r3, [r7, #15]
	if (write_register8(BMP280_REG_CONFIG, config)) {
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	4619      	mov	r1, r3
 80017fe:	20f5      	movs	r0, #245	@ 0xf5
 8001800:	f7ff ff70 	bl	80016e4 <write_register8>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <bmp280_init+0xda>
		return false;
 800180a:	2300      	movs	r3, #0
 800180c:	e026      	b.n	800185c <bmp280_init+0x128>
	}

	if (devv.params.mode == BMP280_MODE_FORCED) {
 800180e:	4b15      	ldr	r3, [pc, #84]	@ (8001864 <bmp280_init+0x130>)
 8001810:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001814:	2b01      	cmp	r3, #1
 8001816:	d103      	bne.n	8001820 <bmp280_init+0xec>
		devv.params.mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001818:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <bmp280_init+0x130>)
 800181a:	2200      	movs	r2, #0
 800181c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	}

	uint8_t ctrl = (devv.params.oversampling_temperature << 5)
 8001820:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <bmp280_init+0x130>)
 8001822:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001826:	015b      	lsls	r3, r3, #5
			| (devv.params.oversampling_pressure << 2) | (devv.params.mode);
 8001828:	b25a      	sxtb	r2, r3
 800182a:	4b0e      	ldr	r3, [pc, #56]	@ (8001864 <bmp280_init+0x130>)
 800182c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	b25b      	sxtb	r3, r3
 8001834:	4313      	orrs	r3, r2
 8001836:	b25a      	sxtb	r2, r3
 8001838:	4b0a      	ldr	r3, [pc, #40]	@ (8001864 <bmp280_init+0x130>)
 800183a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800183e:	b25b      	sxtb	r3, r3
 8001840:	4313      	orrs	r3, r2
 8001842:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (devv.params.oversampling_temperature << 5)
 8001844:	73bb      	strb	r3, [r7, #14]

	if (write_register8(BMP280_REG_CTRL, ctrl)) {
 8001846:	7bbb      	ldrb	r3, [r7, #14]
 8001848:	4619      	mov	r1, r3
 800184a:	20f4      	movs	r0, #244	@ 0xf4
 800184c:	f7ff ff4a 	bl	80016e4 <write_register8>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <bmp280_init+0x126>
		return false;
 8001856:	2300      	movs	r3, #0
 8001858:	e000      	b.n	800185c <bmp280_init+0x128>
	}

	return true;
 800185a:	2301      	movs	r3, #1
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	200000fc 	.word	0x200000fc
 8001868:	2000012d 	.word	0x2000012d

0800186c <compensate_temperature>:
/**
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(int32_t adc_temp, int32_t *fine_temp) {
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) devv.dig_T1 << 1)))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	10da      	asrs	r2, r3, #3
 800187a:	4b18      	ldr	r3, [pc, #96]	@ (80018dc <compensate_temperature+0x70>)
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	1ad3      	subs	r3, r2, r3
			* (int32_t) devv.dig_T2) >> 11;
 8001882:	4a16      	ldr	r2, [pc, #88]	@ (80018dc <compensate_temperature+0x70>)
 8001884:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001888:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) devv.dig_T1 << 1)))
 800188c:	12db      	asrs	r3, r3, #11
 800188e:	60fb      	str	r3, [r7, #12]
	var2 = (((((adc_temp >> 4) - (int32_t) devv.dig_T1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	111b      	asrs	r3, r3, #4
 8001894:	4a11      	ldr	r2, [pc, #68]	@ (80018dc <compensate_temperature+0x70>)
 8001896:	8812      	ldrh	r2, [r2, #0]
 8001898:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) devv.dig_T1)) >> 12)
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	1112      	asrs	r2, r2, #4
 800189e:	490f      	ldr	r1, [pc, #60]	@ (80018dc <compensate_temperature+0x70>)
 80018a0:	8809      	ldrh	r1, [r1, #0]
 80018a2:	1a52      	subs	r2, r2, r1
 80018a4:	fb02 f303 	mul.w	r3, r2, r3
 80018a8:	131b      	asrs	r3, r3, #12
			* (int32_t) devv.dig_T3) >> 14;
 80018aa:	4a0c      	ldr	r2, [pc, #48]	@ (80018dc <compensate_temperature+0x70>)
 80018ac:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80018b0:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) devv.dig_T1)
 80018b4:	139b      	asrs	r3, r3, #14
 80018b6:	60bb      	str	r3, [r7, #8]

	*fine_temp = var1 + var2;
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	441a      	add	r2, r3
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	3380      	adds	r3, #128	@ 0x80
 80018ce:	121b      	asrs	r3, r3, #8
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	200000fc 	.word	0x200000fc

080018e0 <compensate_pressure>:
/**
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static  uint32_t compensate_pressure(int32_t adc_press,int32_t fine_temp) {
 80018e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018e4:	b0cc      	sub	sp, #304	@ 0x130
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 80018ec:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80018f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80018f4:	17da      	asrs	r2, r3, #31
 80018f6:	461c      	mov	r4, r3
 80018f8:	4615      	mov	r5, r2
 80018fa:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80018fe:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001902:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) devv.dig_P6;
 8001906:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800190a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800190e:	fb03 f102 	mul.w	r1, r3, r2
 8001912:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001916:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800191a:	fb02 f303 	mul.w	r3, r2, r3
 800191e:	18ca      	adds	r2, r1, r3
 8001920:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001924:	fba3 8903 	umull	r8, r9, r3, r3
 8001928:	eb02 0309 	add.w	r3, r2, r9
 800192c:	4699      	mov	r9, r3
 800192e:	4b9f      	ldr	r3, [pc, #636]	@ (8001bac <compensate_pressure+0x2cc>)
 8001930:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001934:	b21b      	sxth	r3, r3
 8001936:	17da      	asrs	r2, r3, #31
 8001938:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800193c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001940:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001944:	4603      	mov	r3, r0
 8001946:	fb03 f209 	mul.w	r2, r3, r9
 800194a:	460b      	mov	r3, r1
 800194c:	fb08 f303 	mul.w	r3, r8, r3
 8001950:	4413      	add	r3, r2
 8001952:	4602      	mov	r2, r0
 8001954:	fba8 2102 	umull	r2, r1, r8, r2
 8001958:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 800195c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001960:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001964:	4413      	add	r3, r2
 8001966:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800196a:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 800196e:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8001972:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) devv.dig_P5) << 17);
 8001976:	4b8d      	ldr	r3, [pc, #564]	@ (8001bac <compensate_pressure+0x2cc>)
 8001978:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800197c:	b21b      	sxth	r3, r3
 800197e:	17da      	asrs	r2, r3, #31
 8001980:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001984:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001988:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800198c:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001990:	462a      	mov	r2, r5
 8001992:	fb02 f203 	mul.w	r2, r2, r3
 8001996:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800199a:	4621      	mov	r1, r4
 800199c:	fb01 f303 	mul.w	r3, r1, r3
 80019a0:	441a      	add	r2, r3
 80019a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80019a6:	4621      	mov	r1, r4
 80019a8:	fba3 3101 	umull	r3, r1, r3, r1
 80019ac:	f8c7 110c 	str.w	r1, [r7, #268]	@ 0x10c
 80019b0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80019b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80019b8:	18d3      	adds	r3, r2, r3
 80019ba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80019be:	f04f 0000 	mov.w	r0, #0
 80019c2:	f04f 0100 	mov.w	r1, #0
 80019c6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 80019ca:	462b      	mov	r3, r5
 80019cc:	0459      	lsls	r1, r3, #17
 80019ce:	4622      	mov	r2, r4
 80019d0:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80019d4:	4623      	mov	r3, r4
 80019d6:	0458      	lsls	r0, r3, #17
 80019d8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80019dc:	1814      	adds	r4, r2, r0
 80019de:	64bc      	str	r4, [r7, #72]	@ 0x48
 80019e0:	414b      	adcs	r3, r1
 80019e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019e4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 80019e8:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) devv.dig_P4) << 35);
 80019ec:	4b6f      	ldr	r3, [pc, #444]	@ (8001bac <compensate_pressure+0x2cc>)
 80019ee:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80019f2:	b21b      	sxth	r3, r3
 80019f4:	17da      	asrs	r2, r3, #31
 80019f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80019fa:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80019fe:	f04f 0000 	mov.w	r0, #0
 8001a02:	f04f 0100 	mov.w	r1, #0
 8001a06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a0a:	00d9      	lsls	r1, r3, #3
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001a12:	1814      	adds	r4, r2, r0
 8001a14:	643c      	str	r4, [r7, #64]	@ 0x40
 8001a16:	414b      	adcs	r3, r1
 8001a18:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a1a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001a1e:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) devv.dig_P3) >> 8)
 8001a22:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001a26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001a2a:	fb03 f102 	mul.w	r1, r3, r2
 8001a2e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001a32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001a36:	fb02 f303 	mul.w	r3, r2, r3
 8001a3a:	18ca      	adds	r2, r1, r3
 8001a3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001a40:	fba3 3103 	umull	r3, r1, r3, r3
 8001a44:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 8001a48:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001a50:	18d3      	adds	r3, r2, r3
 8001a52:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001a56:	4b55      	ldr	r3, [pc, #340]	@ (8001bac <compensate_pressure+0x2cc>)
 8001a58:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	17da      	asrs	r2, r3, #31
 8001a60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001a64:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001a68:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8001a6c:	4622      	mov	r2, r4
 8001a6e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8001a72:	4641      	mov	r1, r8
 8001a74:	fb01 f202 	mul.w	r2, r1, r2
 8001a78:	464d      	mov	r5, r9
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	4621      	mov	r1, r4
 8001a7e:	4603      	mov	r3, r0
 8001a80:	fb03 f305 	mul.w	r3, r3, r5
 8001a84:	4413      	add	r3, r2
 8001a86:	4602      	mov	r2, r0
 8001a88:	4641      	mov	r1, r8
 8001a8a:	fba2 2101 	umull	r2, r1, r2, r1
 8001a8e:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 8001a92:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8001a96:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001aa0:	f04f 0000 	mov.w	r0, #0
 8001aa4:	f04f 0100 	mov.w	r1, #0
 8001aa8:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001aac:	4623      	mov	r3, r4
 8001aae:	0a18      	lsrs	r0, r3, #8
 8001ab0:	462a      	mov	r2, r5
 8001ab2:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001ab6:	462b      	mov	r3, r5
 8001ab8:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) devv.dig_P2) << 12);
 8001aba:	4b3c      	ldr	r3, [pc, #240]	@ (8001bac <compensate_pressure+0x2cc>)
 8001abc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ac0:	b21b      	sxth	r3, r3
 8001ac2:	17da      	asrs	r2, r3, #31
 8001ac4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001ac8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001acc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001ad0:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001ad4:	464a      	mov	r2, r9
 8001ad6:	fb02 f203 	mul.w	r2, r2, r3
 8001ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001ade:	4644      	mov	r4, r8
 8001ae0:	fb04 f303 	mul.w	r3, r4, r3
 8001ae4:	441a      	add	r2, r3
 8001ae6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001aea:	4644      	mov	r4, r8
 8001aec:	fba3 3404 	umull	r3, r4, r3, r4
 8001af0:	f8c7 40f4 	str.w	r4, [r7, #244]	@ 0xf4
 8001af4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001afc:	18d3      	adds	r3, r2, r3
 8001afe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8001b0e:	464c      	mov	r4, r9
 8001b10:	0323      	lsls	r3, r4, #12
 8001b12:	46c4      	mov	ip, r8
 8001b14:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001b18:	4644      	mov	r4, r8
 8001b1a:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) devv.dig_P3) >> 8)
 8001b1c:	1884      	adds	r4, r0, r2
 8001b1e:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001b20:	eb41 0303 	adc.w	r3, r1, r3
 8001b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b26:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001b2a:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) devv.dig_P1) >> 33;
 8001b2e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001b32:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001b36:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8001b3a:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8001b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bac <compensate_pressure+0x2cc>)
 8001b40:	88db      	ldrh	r3, [r3, #6]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	2200      	movs	r2, #0
 8001b46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001b4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001b4e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8001b52:	4622      	mov	r2, r4
 8001b54:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001b58:	4641      	mov	r1, r8
 8001b5a:	fb01 f202 	mul.w	r2, r1, r2
 8001b5e:	464d      	mov	r5, r9
 8001b60:	4618      	mov	r0, r3
 8001b62:	4621      	mov	r1, r4
 8001b64:	4603      	mov	r3, r0
 8001b66:	fb03 f305 	mul.w	r3, r3, r5
 8001b6a:	4413      	add	r3, r2
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	4641      	mov	r1, r8
 8001b70:	fba2 2101 	umull	r2, r1, r2, r1
 8001b74:	f8c7 10ec 	str.w	r1, [r7, #236]	@ 0xec
 8001b78:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001b7c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001b80:	4413      	add	r3, r2
 8001b82:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001b92:	4629      	mov	r1, r5
 8001b94:	104a      	asrs	r2, r1, #1
 8001b96:	4629      	mov	r1, r5
 8001b98:	17cb      	asrs	r3, r1, #31
 8001b9a:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 8001b9e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	d104      	bne.n	8001bb0 <compensate_pressure+0x2d0>
		return 0;  // avoid exception caused by division by zero
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e15d      	b.n	8001e66 <compensate_pressure+0x586>
 8001baa:	bf00      	nop
 8001bac:	200000fc 	.word	0x200000fc
	}

	p = 1048576 - adc_press;
 8001bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001bb4:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001bb8:	17da      	asrs	r2, r3, #31
 8001bba:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bbc:	637a      	str	r2, [r7, #52]	@ 0x34
 8001bbe:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001bc2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001bc6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001bca:	105b      	asrs	r3, r3, #1
 8001bcc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001bd0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001bd4:	07db      	lsls	r3, r3, #31
 8001bd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001bda:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001bde:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001be2:	4604      	mov	r4, r0
 8001be4:	1aa4      	subs	r4, r4, r2
 8001be6:	f8c7 4080 	str.w	r4, [r7, #128]	@ 0x80
 8001bea:	eb61 0303 	sbc.w	r3, r1, r3
 8001bee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001bf2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001bf6:	4622      	mov	r2, r4
 8001bf8:	462b      	mov	r3, r5
 8001bfa:	1891      	adds	r1, r2, r2
 8001bfc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001bfe:	415b      	adcs	r3, r3
 8001c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c06:	4621      	mov	r1, r4
 8001c08:	1851      	adds	r1, r2, r1
 8001c0a:	6239      	str	r1, [r7, #32]
 8001c0c:	4629      	mov	r1, r5
 8001c0e:	414b      	adcs	r3, r1
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c1e:	4649      	mov	r1, r9
 8001c20:	018b      	lsls	r3, r1, #6
 8001c22:	4641      	mov	r1, r8
 8001c24:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c28:	4641      	mov	r1, r8
 8001c2a:	018a      	lsls	r2, r1, #6
 8001c2c:	4641      	mov	r1, r8
 8001c2e:	1889      	adds	r1, r1, r2
 8001c30:	61b9      	str	r1, [r7, #24]
 8001c32:	4649      	mov	r1, r9
 8001c34:	eb43 0101 	adc.w	r1, r3, r1
 8001c38:	61f9      	str	r1, [r7, #28]
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001c46:	4649      	mov	r1, r9
 8001c48:	008b      	lsls	r3, r1, #2
 8001c4a:	46c4      	mov	ip, r8
 8001c4c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001c50:	4641      	mov	r1, r8
 8001c52:	008a      	lsls	r2, r1, #2
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	4603      	mov	r3, r0
 8001c5a:	4622      	mov	r2, r4
 8001c5c:	189b      	adds	r3, r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	460b      	mov	r3, r1
 8001c62:	462a      	mov	r2, r5
 8001c64:	eb42 0303 	adc.w	r3, r2, r3
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001c76:	4649      	mov	r1, r9
 8001c78:	008b      	lsls	r3, r1, #2
 8001c7a:	46c4      	mov	ip, r8
 8001c7c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001c80:	4641      	mov	r1, r8
 8001c82:	008a      	lsls	r2, r1, #2
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	4603      	mov	r3, r0
 8001c8a:	4622      	mov	r2, r4
 8001c8c:	189b      	adds	r3, r3, r2
 8001c8e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001c90:	462b      	mov	r3, r5
 8001c92:	460a      	mov	r2, r1
 8001c94:	eb42 0303 	adc.w	r3, r2, r3
 8001c98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001c9a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001c9e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001ca2:	f7ff fa89 	bl	80011b8 <__aeabi_ldivmod>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) devv.dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001cae:	4b71      	ldr	r3, [pc, #452]	@ (8001e74 <compensate_pressure+0x594>)
 8001cb0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001cb4:	b21b      	sxth	r3, r3
 8001cb6:	17da      	asrs	r2, r3, #31
 8001cb8:	673b      	str	r3, [r7, #112]	@ 0x70
 8001cba:	677a      	str	r2, [r7, #116]	@ 0x74
 8001cbc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001cc0:	f04f 0000 	mov.w	r0, #0
 8001cc4:	f04f 0100 	mov.w	r1, #0
 8001cc8:	0b50      	lsrs	r0, r2, #13
 8001cca:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001cce:	1359      	asrs	r1, r3, #13
 8001cd0:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001cd4:	462b      	mov	r3, r5
 8001cd6:	fb00 f203 	mul.w	r2, r0, r3
 8001cda:	4623      	mov	r3, r4
 8001cdc:	fb03 f301 	mul.w	r3, r3, r1
 8001ce0:	4413      	add	r3, r2
 8001ce2:	4622      	mov	r2, r4
 8001ce4:	fba2 2100 	umull	r2, r1, r2, r0
 8001ce8:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8001cec:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001cf0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001cfa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001cfe:	f04f 0000 	mov.w	r0, #0
 8001d02:	f04f 0100 	mov.w	r1, #0
 8001d06:	0b50      	lsrs	r0, r2, #13
 8001d08:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d0c:	1359      	asrs	r1, r3, #13
 8001d0e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001d12:	462b      	mov	r3, r5
 8001d14:	fb00 f203 	mul.w	r2, r0, r3
 8001d18:	4623      	mov	r3, r4
 8001d1a:	fb03 f301 	mul.w	r3, r3, r1
 8001d1e:	4413      	add	r3, r2
 8001d20:	4622      	mov	r2, r4
 8001d22:	fba2 2100 	umull	r2, r1, r2, r0
 8001d26:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8001d2a:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001d2e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001d32:	4413      	add	r3, r2
 8001d34:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	f04f 0300 	mov.w	r3, #0
 8001d40:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001d44:	4621      	mov	r1, r4
 8001d46:	0e4a      	lsrs	r2, r1, #25
 8001d48:	4620      	mov	r0, r4
 8001d4a:	4629      	mov	r1, r5
 8001d4c:	460c      	mov	r4, r1
 8001d4e:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001d52:	164b      	asrs	r3, r1, #25
 8001d54:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) devv.dig_P8 * p) >> 19;
 8001d58:	4b46      	ldr	r3, [pc, #280]	@ (8001e74 <compensate_pressure+0x594>)
 8001d5a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d5e:	b21b      	sxth	r3, r3
 8001d60:	17da      	asrs	r2, r3, #31
 8001d62:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001d64:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001d66:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001d6a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001d6e:	462a      	mov	r2, r5
 8001d70:	fb02 f203 	mul.w	r2, r2, r3
 8001d74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001d78:	4621      	mov	r1, r4
 8001d7a:	fb01 f303 	mul.w	r3, r1, r3
 8001d7e:	441a      	add	r2, r3
 8001d80:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001d84:	4621      	mov	r1, r4
 8001d86:	fba3 3101 	umull	r3, r1, r3, r1
 8001d8a:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8001d8e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001d92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001d96:	18d3      	adds	r3, r2, r3
 8001d98:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001da8:	4621      	mov	r1, r4
 8001daa:	0cca      	lsrs	r2, r1, #19
 8001dac:	4620      	mov	r0, r4
 8001dae:	4629      	mov	r1, r5
 8001db0:	460c      	mov	r4, r1
 8001db2:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001db6:	14cb      	asrs	r3, r1, #19
 8001db8:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) devv.dig_P7 << 4);
 8001dbc:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8001dc0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001dc4:	1884      	adds	r4, r0, r2
 8001dc6:	663c      	str	r4, [r7, #96]	@ 0x60
 8001dc8:	eb41 0303 	adc.w	r3, r1, r3
 8001dcc:	667b      	str	r3, [r7, #100]	@ 0x64
 8001dce:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001dd2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001dd6:	4621      	mov	r1, r4
 8001dd8:	1889      	adds	r1, r1, r2
 8001dda:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001ddc:	4629      	mov	r1, r5
 8001dde:	eb43 0101 	adc.w	r1, r3, r1
 8001de2:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8001de4:	f04f 0000 	mov.w	r0, #0
 8001de8:	f04f 0100 	mov.w	r1, #0
 8001dec:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001df0:	4623      	mov	r3, r4
 8001df2:	0a18      	lsrs	r0, r3, #8
 8001df4:	462a      	mov	r2, r5
 8001df6:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001dfa:	462b      	mov	r3, r5
 8001dfc:	1219      	asrs	r1, r3, #8
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8001e74 <compensate_pressure+0x594>)
 8001e00:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001e04:	b21b      	sxth	r3, r3
 8001e06:	17da      	asrs	r2, r3, #31
 8001e08:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e0a:	657a      	str	r2, [r7, #84]	@ 0x54
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001e18:	464c      	mov	r4, r9
 8001e1a:	0123      	lsls	r3, r4, #4
 8001e1c:	46c4      	mov	ip, r8
 8001e1e:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001e22:	4644      	mov	r4, r8
 8001e24:	0122      	lsls	r2, r4, #4
 8001e26:	1884      	adds	r4, r0, r2
 8001e28:	60bc      	str	r4, [r7, #8]
 8001e2a:	eb41 0303 	adc.w	r3, r1, r3
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001e34:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p/256;
 8001e38:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	da07      	bge.n	8001e50 <compensate_pressure+0x570>
 8001e40:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	f143 0300 	adc.w	r3, r3, #0
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e50:	f04f 0000 	mov.w	r0, #0
 8001e54:	f04f 0100 	mov.w	r1, #0
 8001e58:	0a10      	lsrs	r0, r2, #8
 8001e5a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001e5e:	1219      	asrs	r1, r3, #8
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4613      	mov	r3, r2
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e72:	bf00      	nop
 8001e74:	200000fc 	.word	0x200000fc

08001e78 <bmp280_read_fixed>:


int32_t bmp280_read_fixed(){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
	static int32_t temperature;
	static int32_t pressure;

	uint8_t data[3];

	if (read_data(0xf7, data,3)) {
 8001e7e:	463b      	mov	r3, r7
 8001e80:	2203      	movs	r2, #3
 8001e82:	4619      	mov	r1, r3
 8001e84:	20f7      	movs	r0, #247	@ 0xf7
 8001e86:	f7ff fb91 	bl	80015ac <read_data>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <bmp280_read_fixed+0x1c>
		return false;
 8001e90:	2300      	movs	r3, #0
 8001e92:	e073      	b.n	8001f7c <bmp280_read_fixed+0x104>
	}
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001e94:	783b      	ldrb	r3, [r7, #0]
 8001e96:	031a      	lsls	r2, r3, #12
 8001e98:	787b      	ldrb	r3, [r7, #1]
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	78ba      	ldrb	r2, [r7, #2]
 8001ea0:	0912      	lsrs	r2, r2, #4
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	4a3c      	ldr	r2, [pc, #240]	@ (8001f98 <bmp280_read_fixed+0x120>)
 8001ea8:	6013      	str	r3, [r2, #0]

	if (read_data(0xfA, data,3)) {
 8001eaa:	463b      	mov	r3, r7
 8001eac:	2203      	movs	r2, #3
 8001eae:	4619      	mov	r1, r3
 8001eb0:	20fa      	movs	r0, #250	@ 0xfa
 8001eb2:	f7ff fb7b 	bl	80015ac <read_data>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <bmp280_read_fixed+0x48>
		return false;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	e05d      	b.n	8001f7c <bmp280_read_fixed+0x104>
	}
	adc_temp = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001ec0:	783b      	ldrb	r3, [r7, #0]
 8001ec2:	031a      	lsls	r2, r3, #12
 8001ec4:	787b      	ldrb	r3, [r7, #1]
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	78ba      	ldrb	r2, [r7, #2]
 8001ecc:	0912      	lsrs	r2, r2, #4
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	4a32      	ldr	r2, [pc, #200]	@ (8001f9c <bmp280_read_fixed+0x124>)
 8001ed4:	6013      	str	r3, [r2, #0]
    temperature = compensate_temperature(adc_temp, &fine_temp);
 8001ed6:	4b31      	ldr	r3, [pc, #196]	@ (8001f9c <bmp280_read_fixed+0x124>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4931      	ldr	r1, [pc, #196]	@ (8001fa0 <bmp280_read_fixed+0x128>)
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff fcc5 	bl	800186c <compensate_temperature>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	4a2f      	ldr	r2, [pc, #188]	@ (8001fa4 <bmp280_read_fixed+0x12c>)
 8001ee6:	6013      	str	r3, [r2, #0]
	pressure = compensate_pressure(adc_pressure, fine_temp);
 8001ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f98 <bmp280_read_fixed+0x120>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a2c      	ldr	r2, [pc, #176]	@ (8001fa0 <bmp280_read_fixed+0x128>)
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fcf4 	bl	80018e0 <compensate_pressure>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	461a      	mov	r2, r3
 8001efc:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa8 <bmp280_read_fixed+0x130>)
 8001efe:	601a      	str	r2, [r3, #0]
	int32_t bmp280_altitude =((44330 * (1.0 - powf((float)pressure/102416,0.1903))))*100 - 100000;// cm
 8001f00:	4b29      	ldr	r3, [pc, #164]	@ (8001fa8 <bmp280_read_fixed+0x130>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe fee1 	bl	8000ccc <__aeabi_i2f>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	4927      	ldr	r1, [pc, #156]	@ (8001fac <bmp280_read_fixed+0x134>)
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe ffe4 	bl	8000edc <__aeabi_fdiv>
 8001f14:	4603      	mov	r3, r0
 8001f16:	4926      	ldr	r1, [pc, #152]	@ (8001fb0 <bmp280_read_fixed+0x138>)
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f012 fb57 	bl	80145cc <powf>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe fae9 	bl	80004f8 <__aeabi_f2d>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	f04f 0000 	mov.w	r0, #0
 8001f2e:	4921      	ldr	r1, [pc, #132]	@ (8001fb4 <bmp280_read_fixed+0x13c>)
 8001f30:	f7fe f982 	bl	8000238 <__aeabi_dsub>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4610      	mov	r0, r2
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	a312      	add	r3, pc, #72	@ (adr r3, 8001f88 <bmp280_read_fixed+0x110>)
 8001f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f42:	f7fe fb31 	bl	80005a8 <__aeabi_dmul>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	4b19      	ldr	r3, [pc, #100]	@ (8001fb8 <bmp280_read_fixed+0x140>)
 8001f54:	f7fe fb28 	bl	80005a8 <__aeabi_dmul>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	a30b      	add	r3, pc, #44	@ (adr r3, 8001f90 <bmp280_read_fixed+0x118>)
 8001f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f66:	f7fe f967 	bl	8000238 <__aeabi_dsub>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4619      	mov	r1, r3
 8001f72:	f7fe fdc9 	bl	8000b08 <__aeabi_d2iz>
 8001f76:	4603      	mov	r3, r0
 8001f78:	607b      	str	r3, [r7, #4]
	return bmp280_altitude;
 8001f7a:	687b      	ldr	r3, [r7, #4]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	f3af 8000 	nop.w
 8001f88:	00000000 	.word	0x00000000
 8001f8c:	40e5a540 	.word	0x40e5a540
 8001f90:	00000000 	.word	0x00000000
 8001f94:	40f86a00 	.word	0x40f86a00
 8001f98:	20000130 	.word	0x20000130
 8001f9c:	20000134 	.word	0x20000134
 8001fa0:	20000138 	.word	0x20000138
 8001fa4:	2000013c 	.word	0x2000013c
 8001fa8:	20000140 	.word	0x20000140
 8001fac:	47c80800 	.word	0x47c80800
 8001fb0:	3e42de01 	.word	0x3e42de01
 8001fb4:	3ff00000 	.word	0x3ff00000
 8001fb8:	40590000 	.word	0x40590000

08001fbc <ibus_init>:


static void ibusDataReceive(uint8_t c);

void ibus_init(UART_HandleTypeDef *uartt)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
    ibusChannelData[0] = 1500;
 8001fc4:	4b12      	ldr	r3, [pc, #72]	@ (8002010 <ibus_init+0x54>)
 8001fc6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001fca:	601a      	str	r2, [r3, #0]
    ibusChannelData[1] = 1500;
 8001fcc:	4b10      	ldr	r3, [pc, #64]	@ (8002010 <ibus_init+0x54>)
 8001fce:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001fd2:	605a      	str	r2, [r3, #4]
    for(int i = 2;i < IBUS_MAX_CHANNEL ; i++){
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	e008      	b.n	8001fec <ibus_init+0x30>
      ibusChannelData[i] = 1000;
 8001fda:	4a0d      	ldr	r2, [pc, #52]	@ (8002010 <ibus_init+0x54>)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fe2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 2;i < IBUS_MAX_CHANNEL ; i++){
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2b0d      	cmp	r3, #13
 8001ff0:	ddf3      	ble.n	8001fda <ibus_init+0x1e>
    }
	uart = uartt;
 8001ff2:	4a08      	ldr	r2, [pc, #32]	@ (8002014 <ibus_init+0x58>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6013      	str	r3, [r2, #0]
#ifdef DMA_MODE
    is_receive_cpl = 0;
	HAL_UART_Receive_DMA(uart,buffer_dma,2*IBUS_BUFFSIZE);
#else 
	HAL_UART_Receive_IT(uart, &rx_buff,1);
 8001ff8:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <ibus_init+0x58>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	4906      	ldr	r1, [pc, #24]	@ (8002018 <ibus_init+0x5c>)
 8002000:	4618      	mov	r0, r3
 8002002:	f00a fb20 	bl	800c646 <HAL_UART_Receive_IT>
#endif
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000148 	.word	0x20000148
 8002014:	200001a4 	.word	0x200001a4
 8002018:	200001a0 	.word	0x200001a0

0800201c <ibus_uart_port>:

UART_HandleTypeDef *ibus_uart_port(){
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
   return uart;
 8002020:	4b02      	ldr	r3, [pc, #8]	@ (800202c <ibus_uart_port+0x10>)
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr
 800202c:	200001a4 	.word	0x200001a4

08002030 <ibus_calback>:

   ibusFrameComplete();
#endif
}

void ibus_calback(){
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0

#ifdef DMA_MODE
	is_receive_cpl = 1;
#else 
	ibusDataReceive(rx_buff);
 8002034:	4b06      	ldr	r3, [pc, #24]	@ (8002050 <ibus_calback+0x20>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f000 f80d 	bl	8002058 <ibusDataReceive>
    HAL_UART_Receive_IT(uart, &rx_buff,1);
 800203e:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <ibus_calback+0x24>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2201      	movs	r2, #1
 8002044:	4902      	ldr	r1, [pc, #8]	@ (8002050 <ibus_calback+0x20>)
 8002046:	4618      	mov	r0, r3
 8002048:	f00a fafd 	bl	800c646 <HAL_UART_Receive_IT>
#endif

}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}
 8002050:	200001a0 	.word	0x200001a0
 8002054:	200001a4 	.word	0x200001a4

08002058 <ibusDataReceive>:

static void ibusDataReceive(uint8_t c)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
    uint32_t ibusTime;
    static uint32_t ibusTimeLast;
    static uint8_t ibusFramePosition;

    ibusTime = micros();
 8002062:	4b1b      	ldr	r3, [pc, #108]	@ (80020d0 <ibusDataReceive+0x78>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800206a:	4b1a      	ldr	r3, [pc, #104]	@ (80020d4 <ibusDataReceive+0x7c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4413      	add	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]

    if ((ibusTime - ibusTimeLast) > 3000)
 8002072:	4b19      	ldr	r3, [pc, #100]	@ (80020d8 <ibusDataReceive+0x80>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800207e:	4293      	cmp	r3, r2
 8002080:	d902      	bls.n	8002088 <ibusDataReceive+0x30>
        ibusFramePosition = 0;
 8002082:	4b16      	ldr	r3, [pc, #88]	@ (80020dc <ibusDataReceive+0x84>)
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]

    ibusTimeLast = ibusTime;
 8002088:	4a13      	ldr	r2, [pc, #76]	@ (80020d8 <ibusDataReceive+0x80>)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6013      	str	r3, [r2, #0]

    if (ibusFramePosition == 0 && c != IBUS_SYNCBYTE)
 800208e:	4b13      	ldr	r3, [pc, #76]	@ (80020dc <ibusDataReceive+0x84>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d102      	bne.n	800209c <ibusDataReceive+0x44>
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	2b20      	cmp	r3, #32
 800209a:	d114      	bne.n	80020c6 <ibusDataReceive+0x6e>
        return;

    ibus[ibusFramePosition] = (uint8_t)c;
 800209c:	4b0f      	ldr	r3, [pc, #60]	@ (80020dc <ibusDataReceive+0x84>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	4619      	mov	r1, r3
 80020a2:	4a0f      	ldr	r2, [pc, #60]	@ (80020e0 <ibusDataReceive+0x88>)
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	5453      	strb	r3, [r2, r1]

    if (ibusFramePosition == IBUS_BUFFSIZE - 1) {
 80020a8:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <ibusDataReceive+0x84>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b1f      	cmp	r3, #31
 80020ae:	d103      	bne.n	80020b8 <ibusDataReceive+0x60>
        ibusFrameDone = TRUE;
 80020b0:	4b0c      	ldr	r3, [pc, #48]	@ (80020e4 <ibusDataReceive+0x8c>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	e007      	b.n	80020c8 <ibusDataReceive+0x70>
    } else {
        ibusFramePosition++;
 80020b8:	4b08      	ldr	r3, [pc, #32]	@ (80020dc <ibusDataReceive+0x84>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	3301      	adds	r3, #1
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <ibusDataReceive+0x84>)
 80020c2:	701a      	strb	r2, [r3, #0]
 80020c4:	e000      	b.n	80020c8 <ibusDataReceive+0x70>
        return;
 80020c6:	bf00      	nop
    }
}
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr
 80020d0:	200005dc 	.word	0x200005dc
 80020d4:	200005e0 	.word	0x200005e0
 80020d8:	200001a8 	.word	0x200001a8
 80020dc:	200001ac 	.word	0x200001ac
 80020e0:	20000180 	.word	0x20000180
 80020e4:	20000144 	.word	0x20000144

080020e8 <ibusFrameComplete>:

int ibusFrameComplete(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
	
    uint8_t i;
    uint16_t chksum, rxsum;

    if (ibusFrameDone) {
 80020ee:	4b63      	ldr	r3, [pc, #396]	@ (800227c <ibusFrameComplete+0x194>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 80bb 	beq.w	800226e <ibusFrameComplete+0x186>
        ibusFrameDone = FALSE;
 80020f8:	4b60      	ldr	r3, [pc, #384]	@ (800227c <ibusFrameComplete+0x194>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]

        chksum = 0xFFFF;
 80020fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002102:	81bb      	strh	r3, [r7, #12]

        for (i = 0; i < 30; i++)
 8002104:	2300      	movs	r3, #0
 8002106:	73fb      	strb	r3, [r7, #15]
 8002108:	e009      	b.n	800211e <ibusFrameComplete+0x36>
            chksum -= ibus[i];
 800210a:	7bfb      	ldrb	r3, [r7, #15]
 800210c:	4a5c      	ldr	r2, [pc, #368]	@ (8002280 <ibusFrameComplete+0x198>)
 800210e:	5cd3      	ldrb	r3, [r2, r3]
 8002110:	461a      	mov	r2, r3
 8002112:	89bb      	ldrh	r3, [r7, #12]
 8002114:	1a9b      	subs	r3, r3, r2
 8002116:	81bb      	strh	r3, [r7, #12]
        for (i = 0; i < 30; i++)
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	3301      	adds	r3, #1
 800211c:	73fb      	strb	r3, [r7, #15]
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	2b1d      	cmp	r3, #29
 8002122:	d9f2      	bls.n	800210a <ibusFrameComplete+0x22>

        rxsum = ibus[30] + (ibus[31] << 8);
 8002124:	4b56      	ldr	r3, [pc, #344]	@ (8002280 <ibusFrameComplete+0x198>)
 8002126:	7f9b      	ldrb	r3, [r3, #30]
 8002128:	461a      	mov	r2, r3
 800212a:	4b55      	ldr	r3, [pc, #340]	@ (8002280 <ibusFrameComplete+0x198>)
 800212c:	7fdb      	ldrb	r3, [r3, #31]
 800212e:	021b      	lsls	r3, r3, #8
 8002130:	b29b      	uxth	r3, r3
 8002132:	4413      	add	r3, r2
 8002134:	80fb      	strh	r3, [r7, #6]

        if (chksum == rxsum) {
 8002136:	89ba      	ldrh	r2, [r7, #12]
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	429a      	cmp	r2, r3
 800213c:	f040 8097 	bne.w	800226e <ibusFrameComplete+0x186>
            ibusChannelData[0] = (ibus[ 3] << 8) + ibus[ 2];
 8002140:	4b4f      	ldr	r3, [pc, #316]	@ (8002280 <ibusFrameComplete+0x198>)
 8002142:	78db      	ldrb	r3, [r3, #3]
 8002144:	021b      	lsls	r3, r3, #8
 8002146:	4a4e      	ldr	r2, [pc, #312]	@ (8002280 <ibusFrameComplete+0x198>)
 8002148:	7892      	ldrb	r2, [r2, #2]
 800214a:	4413      	add	r3, r2
 800214c:	461a      	mov	r2, r3
 800214e:	4b4d      	ldr	r3, [pc, #308]	@ (8002284 <ibusFrameComplete+0x19c>)
 8002150:	601a      	str	r2, [r3, #0]
            ibusChannelData[1] = (ibus[ 5] << 8) + ibus[ 4];
 8002152:	4b4b      	ldr	r3, [pc, #300]	@ (8002280 <ibusFrameComplete+0x198>)
 8002154:	795b      	ldrb	r3, [r3, #5]
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	4a49      	ldr	r2, [pc, #292]	@ (8002280 <ibusFrameComplete+0x198>)
 800215a:	7912      	ldrb	r2, [r2, #4]
 800215c:	4413      	add	r3, r2
 800215e:	461a      	mov	r2, r3
 8002160:	4b48      	ldr	r3, [pc, #288]	@ (8002284 <ibusFrameComplete+0x19c>)
 8002162:	605a      	str	r2, [r3, #4]
            ibusChannelData[2] = (ibus[ 7] << 8) + ibus[ 6];
 8002164:	4b46      	ldr	r3, [pc, #280]	@ (8002280 <ibusFrameComplete+0x198>)
 8002166:	79db      	ldrb	r3, [r3, #7]
 8002168:	021b      	lsls	r3, r3, #8
 800216a:	4a45      	ldr	r2, [pc, #276]	@ (8002280 <ibusFrameComplete+0x198>)
 800216c:	7992      	ldrb	r2, [r2, #6]
 800216e:	4413      	add	r3, r2
 8002170:	461a      	mov	r2, r3
 8002172:	4b44      	ldr	r3, [pc, #272]	@ (8002284 <ibusFrameComplete+0x19c>)
 8002174:	609a      	str	r2, [r3, #8]
            ibusChannelData[3] = (ibus[ 9] << 8) + ibus[ 8];
 8002176:	4b42      	ldr	r3, [pc, #264]	@ (8002280 <ibusFrameComplete+0x198>)
 8002178:	7a5b      	ldrb	r3, [r3, #9]
 800217a:	021b      	lsls	r3, r3, #8
 800217c:	4a40      	ldr	r2, [pc, #256]	@ (8002280 <ibusFrameComplete+0x198>)
 800217e:	7a12      	ldrb	r2, [r2, #8]
 8002180:	4413      	add	r3, r2
 8002182:	461a      	mov	r2, r3
 8002184:	4b3f      	ldr	r3, [pc, #252]	@ (8002284 <ibusFrameComplete+0x19c>)
 8002186:	60da      	str	r2, [r3, #12]
            ibusChannelData[4] = (ibus[11] << 8) + ibus[10];
 8002188:	4b3d      	ldr	r3, [pc, #244]	@ (8002280 <ibusFrameComplete+0x198>)
 800218a:	7adb      	ldrb	r3, [r3, #11]
 800218c:	021b      	lsls	r3, r3, #8
 800218e:	4a3c      	ldr	r2, [pc, #240]	@ (8002280 <ibusFrameComplete+0x198>)
 8002190:	7a92      	ldrb	r2, [r2, #10]
 8002192:	4413      	add	r3, r2
 8002194:	461a      	mov	r2, r3
 8002196:	4b3b      	ldr	r3, [pc, #236]	@ (8002284 <ibusFrameComplete+0x19c>)
 8002198:	611a      	str	r2, [r3, #16]
            ibusChannelData[5] = (ibus[13] << 8) + ibus[12];
 800219a:	4b39      	ldr	r3, [pc, #228]	@ (8002280 <ibusFrameComplete+0x198>)
 800219c:	7b5b      	ldrb	r3, [r3, #13]
 800219e:	021b      	lsls	r3, r3, #8
 80021a0:	4a37      	ldr	r2, [pc, #220]	@ (8002280 <ibusFrameComplete+0x198>)
 80021a2:	7b12      	ldrb	r2, [r2, #12]
 80021a4:	4413      	add	r3, r2
 80021a6:	461a      	mov	r2, r3
 80021a8:	4b36      	ldr	r3, [pc, #216]	@ (8002284 <ibusFrameComplete+0x19c>)
 80021aa:	615a      	str	r2, [r3, #20]
            ibusChannelData[6] = (ibus[15] << 8) + ibus[14];
 80021ac:	4b34      	ldr	r3, [pc, #208]	@ (8002280 <ibusFrameComplete+0x198>)
 80021ae:	7bdb      	ldrb	r3, [r3, #15]
 80021b0:	021b      	lsls	r3, r3, #8
 80021b2:	4a33      	ldr	r2, [pc, #204]	@ (8002280 <ibusFrameComplete+0x198>)
 80021b4:	7b92      	ldrb	r2, [r2, #14]
 80021b6:	4413      	add	r3, r2
 80021b8:	461a      	mov	r2, r3
 80021ba:	4b32      	ldr	r3, [pc, #200]	@ (8002284 <ibusFrameComplete+0x19c>)
 80021bc:	619a      	str	r2, [r3, #24]
            ibusChannelData[7] = (ibus[17] << 8) + ibus[16];
 80021be:	4b30      	ldr	r3, [pc, #192]	@ (8002280 <ibusFrameComplete+0x198>)
 80021c0:	7c5b      	ldrb	r3, [r3, #17]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	4a2e      	ldr	r2, [pc, #184]	@ (8002280 <ibusFrameComplete+0x198>)
 80021c6:	7c12      	ldrb	r2, [r2, #16]
 80021c8:	4413      	add	r3, r2
 80021ca:	461a      	mov	r2, r3
 80021cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002284 <ibusFrameComplete+0x19c>)
 80021ce:	61da      	str	r2, [r3, #28]
			ibusChannelData[8] = (ibus[19] << 8) + ibus[18];
 80021d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002280 <ibusFrameComplete+0x198>)
 80021d2:	7cdb      	ldrb	r3, [r3, #19]
 80021d4:	021b      	lsls	r3, r3, #8
 80021d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002280 <ibusFrameComplete+0x198>)
 80021d8:	7c92      	ldrb	r2, [r2, #18]
 80021da:	4413      	add	r3, r2
 80021dc:	461a      	mov	r2, r3
 80021de:	4b29      	ldr	r3, [pc, #164]	@ (8002284 <ibusFrameComplete+0x19c>)
 80021e0:	621a      	str	r2, [r3, #32]
            ibusChannelData[9] = (ibus[21] << 8) + ibus[20];
 80021e2:	4b27      	ldr	r3, [pc, #156]	@ (8002280 <ibusFrameComplete+0x198>)
 80021e4:	7d5b      	ldrb	r3, [r3, #21]
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	4a25      	ldr	r2, [pc, #148]	@ (8002280 <ibusFrameComplete+0x198>)
 80021ea:	7d12      	ldrb	r2, [r2, #20]
 80021ec:	4413      	add	r3, r2
 80021ee:	461a      	mov	r2, r3
 80021f0:	4b24      	ldr	r3, [pc, #144]	@ (8002284 <ibusFrameComplete+0x19c>)
 80021f2:	625a      	str	r2, [r3, #36]	@ 0x24
            ibusChannelData[10] = (ibus[23] << 8) + ibus[22];
 80021f4:	4b22      	ldr	r3, [pc, #136]	@ (8002280 <ibusFrameComplete+0x198>)
 80021f6:	7ddb      	ldrb	r3, [r3, #23]
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	4a21      	ldr	r2, [pc, #132]	@ (8002280 <ibusFrameComplete+0x198>)
 80021fc:	7d92      	ldrb	r2, [r2, #22]
 80021fe:	4413      	add	r3, r2
 8002200:	461a      	mov	r2, r3
 8002202:	4b20      	ldr	r3, [pc, #128]	@ (8002284 <ibusFrameComplete+0x19c>)
 8002204:	629a      	str	r2, [r3, #40]	@ 0x28
			ibusChannelData[11] = (ibus[25] << 8) + ibus[24];
 8002206:	4b1e      	ldr	r3, [pc, #120]	@ (8002280 <ibusFrameComplete+0x198>)
 8002208:	7e5b      	ldrb	r3, [r3, #25]
 800220a:	021b      	lsls	r3, r3, #8
 800220c:	4a1c      	ldr	r2, [pc, #112]	@ (8002280 <ibusFrameComplete+0x198>)
 800220e:	7e12      	ldrb	r2, [r2, #24]
 8002210:	4413      	add	r3, r2
 8002212:	461a      	mov	r2, r3
 8002214:	4b1b      	ldr	r3, [pc, #108]	@ (8002284 <ibusFrameComplete+0x19c>)
 8002216:	62da      	str	r2, [r3, #44]	@ 0x2c
			ibusChannelData[12] = (ibus[27] << 8) + ibus[26];
 8002218:	4b19      	ldr	r3, [pc, #100]	@ (8002280 <ibusFrameComplete+0x198>)
 800221a:	7edb      	ldrb	r3, [r3, #27]
 800221c:	021b      	lsls	r3, r3, #8
 800221e:	4a18      	ldr	r2, [pc, #96]	@ (8002280 <ibusFrameComplete+0x198>)
 8002220:	7e92      	ldrb	r2, [r2, #26]
 8002222:	4413      	add	r3, r2
 8002224:	461a      	mov	r2, r3
 8002226:	4b17      	ldr	r3, [pc, #92]	@ (8002284 <ibusFrameComplete+0x19c>)
 8002228:	631a      	str	r2, [r3, #48]	@ 0x30
			ibusChannelData[13] = (ibus[29] << 8) + ibus[28];
 800222a:	4b15      	ldr	r3, [pc, #84]	@ (8002280 <ibusFrameComplete+0x198>)
 800222c:	7f5b      	ldrb	r3, [r3, #29]
 800222e:	021b      	lsls	r3, r3, #8
 8002230:	4a13      	ldr	r2, [pc, #76]	@ (8002280 <ibusFrameComplete+0x198>)
 8002232:	7f12      	ldrb	r2, [r2, #28]
 8002234:	4413      	add	r3, r2
 8002236:	461a      	mov	r2, r3
 8002238:	4b12      	ldr	r3, [pc, #72]	@ (8002284 <ibusFrameComplete+0x19c>)
 800223a:	635a      	str	r2, [r3, #52]	@ 0x34
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 800223c:	2300      	movs	r3, #0
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	e010      	b.n	8002264 <ibusFrameComplete+0x17c>
			    if(ibusChannelData[i] > 2100){
 8002242:	4a10      	ldr	r2, [pc, #64]	@ (8002284 <ibusFrameComplete+0x19c>)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224a:	f640 0234 	movw	r2, #2100	@ 0x834
 800224e:	4293      	cmp	r3, r2
 8002250:	d905      	bls.n	800225e <ibusFrameComplete+0x176>
				    ibusChannelData[i] = 1000;
 8002252:	4a0c      	ldr	r2, [pc, #48]	@ (8002284 <ibusFrameComplete+0x19c>)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800225a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	3301      	adds	r3, #1
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b0d      	cmp	r3, #13
 8002268:	ddeb      	ble.n	8002242 <ibusFrameComplete+0x15a>
				}
			}
            return TRUE;
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <ibusFrameComplete+0x188>
        }
    }
    return FALSE;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000144 	.word	0x20000144
 8002280:	20000180 	.word	0x20000180
 8002284:	20000148 	.word	0x20000148

08002288 <mpu6050Connection>:

/* Check mpu6050 connection
 * return 1 -> not connected
 * return 0 -> connected
 */ 
int8_t mpu6050Connection(){
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
    isConnected = HAL_I2C_IsDeviceReady(i2c,IMU_DEV_ADDRES, 3, 5);
 800228c:	4b07      	ldr	r3, [pc, #28]	@ (80022ac <mpu6050Connection+0x24>)
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	2305      	movs	r3, #5
 8002292:	2203      	movs	r2, #3
 8002294:	21d0      	movs	r1, #208	@ 0xd0
 8002296:	f006 ff33 	bl	8009100 <HAL_I2C_IsDeviceReady>
 800229a:	4603      	mov	r3, r0
 800229c:	b25a      	sxtb	r2, r3
 800229e:	4b04      	ldr	r3, [pc, #16]	@ (80022b0 <mpu6050Connection+0x28>)
 80022a0:	701a      	strb	r2, [r3, #0]
    return isConnected;
 80022a2:	4b03      	ldr	r3, [pc, #12]	@ (80022b0 <mpu6050Connection+0x28>)
 80022a4:	f993 3000 	ldrsb.w	r3, [r3]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	200001b0 	.word	0x200001b0
 80022b0:	200001b4 	.word	0x200001b4

080022b4 <mpu6050_init>:
}

/* configuration mpu6050*/


int8_t mpu6050_init(I2C_HandleTypeDef *hi2c){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af02      	add	r7, sp, #8
 80022ba:	6078      	str	r0, [r7, #4]
	data[1] = (uint8_t)(ACC_2G<<3);
    SPI_write(&data,2);
	return 0;
#endif
#ifdef I2C
  i2c = hi2c;	
 80022bc:	4a25      	ldr	r2, [pc, #148]	@ (8002354 <mpu6050_init+0xa0>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6013      	str	r3, [r2, #0]
	int8_t k = mpu6050Connection();
 80022c2:	f7ff ffe1 	bl	8002288 <mpu6050Connection>
 80022c6:	4603      	mov	r3, r0
 80022c8:	73fb      	strb	r3, [r7, #15]
	if(!k){
 80022ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d13a      	bne.n	8002348 <mpu6050_init+0x94>
		uint8_t buffer[6];	
		buffer[0] = MPU_RA_PWR_MGMT_1; 
 80022d2:	236b      	movs	r3, #107	@ 0x6b
 80022d4:	723b      	strb	r3, [r7, #8]
		buffer[1] = RESET_REG;
 80022d6:	2300      	movs	r3, #0
 80022d8:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 80022da:	4b1e      	ldr	r3, [pc, #120]	@ (8002354 <mpu6050_init+0xa0>)
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	f107 0208 	add.w	r2, r7, #8
 80022e2:	2301      	movs	r3, #1
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	2302      	movs	r3, #2
 80022e8:	21d0      	movs	r1, #208	@ 0xd0
 80022ea:	f006 f83d 	bl	8008368 <HAL_I2C_Master_Transmit>
		
		//buffer[0] = CONFIGURATION;
		//buffer[1] = (HZ_5<<0);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);

		buffer[0] = GYRO_REG_CONFIG;
 80022ee:	231b      	movs	r3, #27
 80022f0:	723b      	strb	r3, [r7, #8]
		buffer[1] = (GYRO_1000dps<<3);
 80022f2:	2310      	movs	r3, #16
 80022f4:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 80022f6:	4b17      	ldr	r3, [pc, #92]	@ (8002354 <mpu6050_init+0xa0>)
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	f107 0208 	add.w	r2, r7, #8
 80022fe:	2301      	movs	r3, #1
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	2302      	movs	r3, #2
 8002304:	21d0      	movs	r1, #208	@ 0xd0
 8002306:	f006 f82f 	bl	8008368 <HAL_I2C_Master_Transmit>

		buffer[0] = ACC_REG_CONFIG;
 800230a:	231c      	movs	r3, #28
 800230c:	723b      	strb	r3, [r7, #8]
		buffer[1] = (ACC_16G<<3);
 800230e:	2318      	movs	r3, #24
 8002310:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8002312:	4b10      	ldr	r3, [pc, #64]	@ (8002354 <mpu6050_init+0xa0>)
 8002314:	6818      	ldr	r0, [r3, #0]
 8002316:	f107 0208 	add.w	r2, r7, #8
 800231a:	2301      	movs	r3, #1
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	2302      	movs	r3, #2
 8002320:	21d0      	movs	r1, #208	@ 0xd0
 8002322:	f006 f821 	bl	8008368 <HAL_I2C_Master_Transmit>
		//buffer[1] &= ~(1<<5);
		//buffer[1] |= (1<<5);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
		
		// set aux i2c pass through mode 
		buffer[0] = INT_PIN_CFG;
 8002326:	2337      	movs	r3, #55	@ 0x37
 8002328:	723b      	strb	r3, [r7, #8]
		buffer[1] |= (1<<1);
 800232a:	7a7b      	ldrb	r3, [r7, #9]
 800232c:	f043 0302 	orr.w	r3, r3, #2
 8002330:	b2db      	uxtb	r3, r3
 8002332:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8002334:	4b07      	ldr	r3, [pc, #28]	@ (8002354 <mpu6050_init+0xa0>)
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	f107 0208 	add.w	r2, r7, #8
 800233c:	2301      	movs	r3, #1
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2302      	movs	r3, #2
 8002342:	21d0      	movs	r1, #208	@ 0xd0
 8002344:	f006 f810 	bl	8008368 <HAL_I2C_Master_Transmit>

	}
	return k;
 8002348:	f997 300f 	ldrsb.w	r3, [r7, #15]
#endif

}
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	200001b0 	.word	0x200001b0

08002358 <mpu6050_gyro_get_raw>:
/* Gyro get raw data (Lbs/s)
 * x - rate
 * y - rate
 * z - rate   
 */
void mpu6050_gyro_get_raw(axis3_t *raw){
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af02      	add	r7, sp, #8
 800235e:	6078      	str	r0, [r7, #4]
	  uint8_t buffe[6];
	  buffe[0] = (uint8_t)GYRO_DATA_REG;
 8002360:	2343      	movs	r3, #67	@ 0x43
 8002362:	723b      	strb	r3, [r7, #8]

#ifdef I2C
	  HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 8002364:	4b19      	ldr	r3, [pc, #100]	@ (80023cc <mpu6050_gyro_get_raw+0x74>)
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	f107 0208 	add.w	r2, r7, #8
 800236c:	2301      	movs	r3, #1
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	2301      	movs	r3, #1
 8002372:	21d0      	movs	r1, #208	@ 0xd0
 8002374:	f005 fff8 	bl	8008368 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 8002378:	4b14      	ldr	r3, [pc, #80]	@ (80023cc <mpu6050_gyro_get_raw+0x74>)
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	f107 0208 	add.w	r2, r7, #8
 8002380:	2301      	movs	r3, #1
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	2306      	movs	r3, #6
 8002386:	21d0      	movs	r1, #208	@ 0xd0
 8002388:	f006 f8ec 	bl	8008564 <HAL_I2C_Master_Receive>
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_RESET);
	  HAL_SPI_Transmit(&SPI_PORT,&buffe[0],1,1);
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
#endif
	  raw->x = (int16_t)buffe[0]<<8|buffe[1];
 800238c:	7a3b      	ldrb	r3, [r7, #8]
 800238e:	021b      	lsls	r3, r3, #8
 8002390:	b21a      	sxth	r2, r3
 8002392:	7a7b      	ldrb	r3, [r7, #9]
 8002394:	b21b      	sxth	r3, r3
 8002396:	4313      	orrs	r3, r2
 8002398:	b21a      	sxth	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	801a      	strh	r2, [r3, #0]
	  raw->y = (int16_t)buffe[2]<<8|buffe[3];
 800239e:	7abb      	ldrb	r3, [r7, #10]
 80023a0:	021b      	lsls	r3, r3, #8
 80023a2:	b21a      	sxth	r2, r3
 80023a4:	7afb      	ldrb	r3, [r7, #11]
 80023a6:	b21b      	sxth	r3, r3
 80023a8:	4313      	orrs	r3, r2
 80023aa:	b21a      	sxth	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	805a      	strh	r2, [r3, #2]
	  raw->z = (int16_t)buffe[4]<<8|buffe[5];
 80023b0:	7b3b      	ldrb	r3, [r7, #12]
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	b21a      	sxth	r2, r3
 80023b6:	7b7b      	ldrb	r3, [r7, #13]
 80023b8:	b21b      	sxth	r3, r3
 80023ba:	4313      	orrs	r3, r2
 80023bc:	b21a      	sxth	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	809a      	strh	r2, [r3, #4]
	}
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	200001b0 	.word	0x200001b0

080023d0 <mpu6050_acc_get_raw>:
/* Acc get raw data
	*  x - axis
	*  y - axis
	*  z - axis   
	*/
void mpu6050_acc_get_raw(axis3_t *k){
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	6078      	str	r0, [r7, #4]
	axis3_t p_val =*k;
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	f107 0310 	add.w	r3, r7, #16
 80023de:	6810      	ldr	r0, [r2, #0]
 80023e0:	6018      	str	r0, [r3, #0]
 80023e2:	8892      	ldrh	r2, [r2, #4]
 80023e4:	809a      	strh	r2, [r3, #4]
	uint8_t buffe[6];
	buffe[0] = (uint8_t)ACC_DATA_REG;
 80023e6:	233b      	movs	r3, #59	@ 0x3b
 80023e8:	723b      	strb	r3, [r7, #8]
#ifdef I2C
	HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 80023ea:	4b19      	ldr	r3, [pc, #100]	@ (8002450 <mpu6050_acc_get_raw+0x80>)
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	f107 0208 	add.w	r2, r7, #8
 80023f2:	2301      	movs	r3, #1
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	2301      	movs	r3, #1
 80023f8:	21d0      	movs	r1, #208	@ 0xd0
 80023fa:	f005 ffb5 	bl	8008368 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 80023fe:	4b14      	ldr	r3, [pc, #80]	@ (8002450 <mpu6050_acc_get_raw+0x80>)
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	f107 0208 	add.w	r2, r7, #8
 8002406:	2301      	movs	r3, #1
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	2306      	movs	r3, #6
 800240c:	21d0      	movs	r1, #208	@ 0xd0
 800240e:	f006 f8a9 	bl	8008564 <HAL_I2C_Master_Receive>
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
*/
      SPI_read(buffe[0],buffe,14);
#endif
	  k->x = (int16_t)buffe[0]<<8|buffe[1];
 8002412:	7a3b      	ldrb	r3, [r7, #8]
 8002414:	021b      	lsls	r3, r3, #8
 8002416:	b21a      	sxth	r2, r3
 8002418:	7a7b      	ldrb	r3, [r7, #9]
 800241a:	b21b      	sxth	r3, r3
 800241c:	4313      	orrs	r3, r2
 800241e:	b21a      	sxth	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	801a      	strh	r2, [r3, #0]
	  k->y = (int16_t)buffe[2]<<8|buffe[3];
 8002424:	7abb      	ldrb	r3, [r7, #10]
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	b21a      	sxth	r2, r3
 800242a:	7afb      	ldrb	r3, [r7, #11]
 800242c:	b21b      	sxth	r3, r3
 800242e:	4313      	orrs	r3, r2
 8002430:	b21a      	sxth	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	805a      	strh	r2, [r3, #2]
	  k->z = (int16_t)buffe[4]<<8|buffe[5];
 8002436:	7b3b      	ldrb	r3, [r7, #12]
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	b21a      	sxth	r2, r3
 800243c:	7b7b      	ldrb	r3, [r7, #13]
 800243e:	b21b      	sxth	r3, r3
 8002440:	4313      	orrs	r3, r2
 8002442:	b21a      	sxth	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	809a      	strh	r2, [r3, #4]
}
 8002448:	bf00      	nop
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200001b0 	.word	0x200001b0

08002454 <qmc5883_init>:
#include "../Lib/axis.h"

const uint8_t qmc_addres = (0x0d<<1);
static I2C_HandleTypeDef *qmc_i2cport;

void qmc5883_init(I2C_HandleTypeDef *i2cport){
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af02      	add	r7, sp, #8
 800245a:	6078      	str	r0, [r7, #4]
	qmc_i2cport = i2cport;
 800245c:	4a12      	ldr	r2, [pc, #72]	@ (80024a8 <qmc5883_init+0x54>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6013      	str	r3, [r2, #0]
    uint8_t buf[2];
    buf[0]=0x0b;
 8002462:	230b      	movs	r3, #11
 8002464:	733b      	strb	r3, [r7, #12]
    buf[1]=0X01;
 8002466:	2301      	movs	r3, #1
 8002468:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 800246a:	4b0f      	ldr	r3, [pc, #60]	@ (80024a8 <qmc5883_init+0x54>)
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	231a      	movs	r3, #26
 8002470:	4619      	mov	r1, r3
 8002472:	f107 020c 	add.w	r2, r7, #12
 8002476:	2301      	movs	r3, #1
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	2302      	movs	r3, #2
 800247c:	f005 ff74 	bl	8008368 <HAL_I2C_Master_Transmit>
    buf[0]=0x09;
 8002480:	2309      	movs	r3, #9
 8002482:	733b      	strb	r3, [r7, #12]
    buf[1]=0X1D;
 8002484:	231d      	movs	r3, #29
 8002486:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 8002488:	4b07      	ldr	r3, [pc, #28]	@ (80024a8 <qmc5883_init+0x54>)
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	231a      	movs	r3, #26
 800248e:	4619      	mov	r1, r3
 8002490:	f107 020c 	add.w	r2, r7, #12
 8002494:	2301      	movs	r3, #1
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	2302      	movs	r3, #2
 800249a:	f005 ff65 	bl	8008368 <HAL_I2C_Master_Transmit>
}
 800249e:	bf00      	nop
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	200001b8 	.word	0x200001b8

080024ac <qmc_get_raw>:

void qmc_get_raw(axis3_t *axis){
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af04      	add	r7, sp, #16
 80024b2:	6078      	str	r0, [r7, #4]
	  uint8_t buf[6]={0};
 80024b4:	2300      	movs	r3, #0
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	2300      	movs	r3, #0
 80024ba:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Mem_Read(qmc_i2cport,qmc_addres,0x00,1,buf,6,1);
 80024bc:	4b16      	ldr	r3, [pc, #88]	@ (8002518 <qmc_get_raw+0x6c>)
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	231a      	movs	r3, #26
 80024c2:	4619      	mov	r1, r3
 80024c4:	2301      	movs	r3, #1
 80024c6:	9302      	str	r3, [sp, #8]
 80024c8:	2306      	movs	r3, #6
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	f107 0308 	add.w	r3, r7, #8
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	2301      	movs	r3, #1
 80024d4:	2200      	movs	r2, #0
 80024d6:	f006 fbab 	bl	8008c30 <HAL_I2C_Mem_Read>
	  axis->x=((int16_t)buf[1]<<8|buf[0]) ;
 80024da:	7a7b      	ldrb	r3, [r7, #9]
 80024dc:	021b      	lsls	r3, r3, #8
 80024de:	b21a      	sxth	r2, r3
 80024e0:	7a3b      	ldrb	r3, [r7, #8]
 80024e2:	b21b      	sxth	r3, r3
 80024e4:	4313      	orrs	r3, r2
 80024e6:	b21a      	sxth	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	801a      	strh	r2, [r3, #0]
	  axis->y=((int16_t)buf[3]<<8|buf[2]);
 80024ec:	7afb      	ldrb	r3, [r7, #11]
 80024ee:	021b      	lsls	r3, r3, #8
 80024f0:	b21a      	sxth	r2, r3
 80024f2:	7abb      	ldrb	r3, [r7, #10]
 80024f4:	b21b      	sxth	r3, r3
 80024f6:	4313      	orrs	r3, r2
 80024f8:	b21a      	sxth	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	805a      	strh	r2, [r3, #2]
	  axis->z=((int16_t)buf[5]<<8|buf[4]);
 80024fe:	7b7b      	ldrb	r3, [r7, #13]
 8002500:	021b      	lsls	r3, r3, #8
 8002502:	b21a      	sxth	r2, r3
 8002504:	7b3b      	ldrb	r3, [r7, #12]
 8002506:	b21b      	sxth	r3, r3
 8002508:	4313      	orrs	r3, r2
 800250a:	b21a      	sxth	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	809a      	strh	r2, [r3, #4]
}
 8002510:	bf00      	nop
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	200001b8 	.word	0x200001b8

0800251c <baro_init>:
//#define MS5611

int8_t baro_calib;
int32_t alt_offset;

void baro_init(){
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
    baro_calib = FALSE;
 8002522:	4b0e      	ldr	r3, [pc, #56]	@ (800255c <baro_init+0x40>)
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
    alt_offset = 0;
 8002528:	4b0d      	ldr	r3, [pc, #52]	@ (8002560 <baro_init+0x44>)
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
#ifdef BMP280
    bmp280_init(&hi2c2);
 800252e:	480d      	ldr	r0, [pc, #52]	@ (8002564 <baro_init+0x48>)
 8002530:	f7ff f900 	bl	8001734 <bmp280_init>
    for(int i=0; i< 100; i++){
 8002534:	2300      	movs	r3, #0
 8002536:	607b      	str	r3, [r7, #4]
 8002538:	e007      	b.n	800254a <baro_init+0x2e>
    	bmp280_read_fixed();
 800253a:	f7ff fc9d 	bl	8001e78 <bmp280_read_fixed>
    	HAL_Delay(5);
 800253e:	2005      	movs	r0, #5
 8002540:	f004 fe6a 	bl	8007218 <HAL_Delay>
    for(int i=0; i< 100; i++){
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3301      	adds	r3, #1
 8002548:	607b      	str	r3, [r7, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b63      	cmp	r3, #99	@ 0x63
 800254e:	ddf4      	ble.n	800253a <baro_init+0x1e>
    }
#elif MS5611
    ms5611_init(&hi2c2);
#endif
}
 8002550:	bf00      	nop
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	200001bc 	.word	0x200001bc
 8002560:	200001c0 	.word	0x200001c0
 8002564:	200008d0 	.word	0x200008d0

08002568 <baro_zero_calibrate>:


void baro_zero_calibrate(){
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
    int32_t altitude = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	607b      	str	r3, [r7, #4]
    static int16_t count = 0;
#ifdef BMP280
    altitude = bmp280_read_fixed();
 8002572:	f7ff fc81 	bl	8001e78 <bmp280_read_fixed>
 8002576:	6078      	str	r0, [r7, #4]
#elif MS5611
    altitude = ms5611_read_fixed();
#endif
    alt_offset += altitude;
 8002578:	4b13      	ldr	r3, [pc, #76]	@ (80025c8 <baro_zero_calibrate+0x60>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4413      	add	r3, r2
 8002580:	4a11      	ldr	r2, [pc, #68]	@ (80025c8 <baro_zero_calibrate+0x60>)
 8002582:	6013      	str	r3, [r2, #0]
    count ++;
 8002584:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <baro_zero_calibrate+0x64>)
 8002586:	f9b3 3000 	ldrsh.w	r3, [r3]
 800258a:	b29b      	uxth	r3, r3
 800258c:	3301      	adds	r3, #1
 800258e:	b29b      	uxth	r3, r3
 8002590:	b21a      	sxth	r2, r3
 8002592:	4b0e      	ldr	r3, [pc, #56]	@ (80025cc <baro_zero_calibrate+0x64>)
 8002594:	801a      	strh	r2, [r3, #0]
    if(count > 100){
 8002596:	4b0d      	ldr	r3, [pc, #52]	@ (80025cc <baro_zero_calibrate+0x64>)
 8002598:	f9b3 3000 	ldrsh.w	r3, [r3]
 800259c:	2b64      	cmp	r3, #100	@ 0x64
 800259e:	dd0f      	ble.n	80025c0 <baro_zero_calibrate+0x58>
        alt_offset /= 100;
 80025a0:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <baro_zero_calibrate+0x60>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a0a      	ldr	r2, [pc, #40]	@ (80025d0 <baro_zero_calibrate+0x68>)
 80025a6:	fb82 1203 	smull	r1, r2, r2, r3
 80025aa:	1152      	asrs	r2, r2, #5
 80025ac:	17db      	asrs	r3, r3, #31
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	4a05      	ldr	r2, [pc, #20]	@ (80025c8 <baro_zero_calibrate+0x60>)
 80025b2:	6013      	str	r3, [r2, #0]
        baro_calib = TRUE;
 80025b4:	4b07      	ldr	r3, [pc, #28]	@ (80025d4 <baro_zero_calibrate+0x6c>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	701a      	strb	r2, [r3, #0]
        count = 101;
 80025ba:	4b04      	ldr	r3, [pc, #16]	@ (80025cc <baro_zero_calibrate+0x64>)
 80025bc:	2265      	movs	r2, #101	@ 0x65
 80025be:	801a      	strh	r2, [r3, #0]
    }
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	200001c0 	.word	0x200001c0
 80025cc:	200001c4 	.word	0x200001c4
 80025d0:	51eb851f 	.word	0x51eb851f
 80025d4:	200001bc 	.word	0x200001bc

080025d8 <is_baro_calibration>:

int8_t is_baro_calibration(){
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
      return baro_calib;
 80025dc:	4b03      	ldr	r3, [pc, #12]	@ (80025ec <is_baro_calibration+0x14>)
 80025de:	f993 3000 	ldrsb.w	r3, [r3]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	200001bc 	.word	0x200001bc

080025f0 <baro_get_altitude>:

int32_t baro_get_altitude(){
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
     if(baro_calib){
 80025f6:	4b09      	ldr	r3, [pc, #36]	@ (800261c <baro_get_altitude+0x2c>)
 80025f8:	f993 3000 	ldrsb.w	r3, [r3]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <baro_get_altitude+0x22>
        int32_t alt = bmp280_read_fixed() - alt_offset;
 8002600:	f7ff fc3a 	bl	8001e78 <bmp280_read_fixed>
 8002604:	4602      	mov	r2, r0
 8002606:	4b06      	ldr	r3, [pc, #24]	@ (8002620 <baro_get_altitude+0x30>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	607b      	str	r3, [r7, #4]
        return alt;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	e000      	b.n	8002614 <baro_get_altitude+0x24>
     }
     return 0;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	200001bc 	.word	0x200001bc
 8002620:	200001c0 	.word	0x200001c0

08002624 <black_box_init>:
int32_t puts_state;

/*
 * init black box
 */
void black_box_init(){
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
	fs.file = &SDFile;
 8002628:	4b13      	ldr	r3, [pc, #76]	@ (8002678 <black_box_init+0x54>)
 800262a:	4a14      	ldr	r2, [pc, #80]	@ (800267c <black_box_init+0x58>)
 800262c:	605a      	str	r2, [r3, #4]
    SDFile.fs->id = 1;
 800262e:	4b13      	ldr	r3, [pc, #76]	@ (800267c <black_box_init+0x58>)
 8002630:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002634:	2201      	movs	r2, #1
 8002636:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
    SDFile.id = 1;
 800263a:	4b10      	ldr	r3, [pc, #64]	@ (800267c <black_box_init+0x58>)
 800263c:	2201      	movs	r2, #1
 800263e:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
    mount_state = f_mount(&SDFatFS,"",1);
 8002642:	2201      	movs	r2, #1
 8002644:	490e      	ldr	r1, [pc, #56]	@ (8002680 <black_box_init+0x5c>)
 8002646:	480f      	ldr	r0, [pc, #60]	@ (8002684 <black_box_init+0x60>)
 8002648:	f00d feee 	bl	8010428 <f_mount>
 800264c:	4603      	mov	r3, r0
 800264e:	461a      	mov	r2, r3
 8002650:	4b0d      	ldr	r3, [pc, #52]	@ (8002688 <black_box_init+0x64>)
 8002652:	701a      	strb	r2, [r3, #0]
    open_state = f_open(&SDFile,"flight.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8002654:	2213      	movs	r2, #19
 8002656:	490d      	ldr	r1, [pc, #52]	@ (800268c <black_box_init+0x68>)
 8002658:	4808      	ldr	r0, [pc, #32]	@ (800267c <black_box_init+0x58>)
 800265a:	f00d ff4d 	bl	80104f8 <f_open>
 800265e:	4603      	mov	r3, r0
 8002660:	461a      	mov	r2, r3
 8002662:	4b0b      	ldr	r3, [pc, #44]	@ (8002690 <black_box_init+0x6c>)
 8002664:	701a      	strb	r2, [r3, #0]
    f_lseek (&SDFile,SDFile.fsize);
 8002666:	4b05      	ldr	r3, [pc, #20]	@ (800267c <black_box_init+0x58>)
 8002668:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800266c:	4619      	mov	r1, r3
 800266e:	4803      	ldr	r0, [pc, #12]	@ (800267c <black_box_init+0x58>)
 8002670:	f00e fc8b 	bl	8010f8a <f_lseek>
}
 8002674:	bf00      	nop
 8002676:	bd80      	pop	{r7, pc}
 8002678:	200001c8 	.word	0x200001c8
 800267c:	200010e4 	.word	0x200010e4
 8002680:	080150e8 	.word	0x080150e8
 8002684:	20000eb0 	.word	0x20000eb0
 8002688:	200003d4 	.word	0x200003d4
 800268c:	080150ec 	.word	0x080150ec
 8002690:	200003d5 	.word	0x200003d5

08002694 <black_box_pack_int>:
    fs.buffer_index += index;
}



void black_box_pack_int(int val){
 8002694:	b580      	push	{r7, lr}
 8002696:	b08c      	sub	sp, #48	@ 0x30
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]

	fs.indexx=0;
 800269c:	4b48      	ldr	r3, [pc, #288]	@ (80027c0 <black_box_pack_int+0x12c>)
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
	int len_str;
	int val_ = val;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	617b      	str	r3, [r7, #20]
	char str_[11];
	memset(str_,0,11);
 80026a6:	f107 0308 	add.w	r3, r7, #8
 80026aa:	220b      	movs	r2, #11
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f011 ff16 	bl	80144e0 <memset>
	if(val != 0){
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d02a      	beq.n	8002710 <black_box_pack_int+0x7c>
		val = abs(val);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	bfb8      	it	lt
 80026c0:	425b      	neglt	r3, r3
 80026c2:	607b      	str	r3, [r7, #4]
		len_str = intToStr(val,str_,0);
 80026c4:	f107 0308 	add.w	r3, r7, #8
 80026c8:	2200      	movs	r2, #0
 80026ca:	4619      	mov	r1, r3
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f91b 	bl	8002908 <intToStr>
 80026d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if(val_ < 0){
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	da2a      	bge.n	8002730 <black_box_pack_int+0x9c>
			for(int i = len_str; i > 0; i--){
 80026da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026de:	e00e      	b.n	80026fe <black_box_pack_int+0x6a>
				str_[i] = str_[i - 1];
 80026e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e2:	3b01      	subs	r3, #1
 80026e4:	3330      	adds	r3, #48	@ 0x30
 80026e6:	443b      	add	r3, r7
 80026e8:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 80026ec:	f107 0208 	add.w	r2, r7, #8
 80026f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f2:	4413      	add	r3, r2
 80026f4:	460a      	mov	r2, r1
 80026f6:	701a      	strb	r2, [r3, #0]
			for(int i = len_str; i > 0; i--){
 80026f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026fa:	3b01      	subs	r3, #1
 80026fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002700:	2b00      	cmp	r3, #0
 8002702:	dced      	bgt.n	80026e0 <black_box_pack_int+0x4c>
			}
			len_str ++;
 8002704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002706:	3301      	adds	r3, #1
 8002708:	62fb      	str	r3, [r7, #44]	@ 0x2c
			str_[0] = '-';
 800270a:	232d      	movs	r3, #45	@ 0x2d
 800270c:	723b      	strb	r3, [r7, #8]
 800270e:	e00f      	b.n	8002730 <black_box_pack_int+0x9c>
		}
	}
	else{
	   fs.buffer[fs.buffer_index] ='0';
 8002710:	4b2b      	ldr	r3, [pc, #172]	@ (80027c0 <black_box_pack_int+0x12c>)
 8002712:	891b      	ldrh	r3, [r3, #8]
 8002714:	461a      	mov	r2, r3
 8002716:	4b2a      	ldr	r3, [pc, #168]	@ (80027c0 <black_box_pack_int+0x12c>)
 8002718:	4413      	add	r3, r2
 800271a:	2230      	movs	r2, #48	@ 0x30
 800271c:	729a      	strb	r2, [r3, #10]
	   len_str = 1;
 800271e:	2301      	movs	r3, #1
 8002720:	62fb      	str	r3, [r7, #44]	@ 0x2c
	   fs.buffer_index ++;
 8002722:	4b27      	ldr	r3, [pc, #156]	@ (80027c0 <black_box_pack_int+0x12c>)
 8002724:	891b      	ldrh	r3, [r3, #8]
 8002726:	3301      	adds	r3, #1
 8002728:	b29a      	uxth	r2, r3
 800272a:	4b25      	ldr	r3, [pc, #148]	@ (80027c0 <black_box_pack_int+0x12c>)
 800272c:	811a      	strh	r2, [r3, #8]
 800272e:	e044      	b.n	80027ba <black_box_pack_int+0x126>
		return;
	}
	// copy str to buffer
	int str_idx = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	627b      	str	r3, [r7, #36]	@ 0x24
	int index_flag;
	int max_index = fs.buffer_index + len_str;
 8002734:	4b22      	ldr	r3, [pc, #136]	@ (80027c0 <black_box_pack_int+0x12c>)
 8002736:	891b      	ldrh	r3, [r3, #8]
 8002738:	461a      	mov	r2, r3
 800273a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800273c:	4413      	add	r3, r2
 800273e:	61fb      	str	r3, [r7, #28]
	if(max_index <=  MAX_BUFFER_SIZE){
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002746:	dc08      	bgt.n	800275a <black_box_pack_int+0xc6>
		max_index = fs.buffer_index + len_str;
 8002748:	4b1d      	ldr	r3, [pc, #116]	@ (80027c0 <black_box_pack_int+0x12c>)
 800274a:	891b      	ldrh	r3, [r3, #8]
 800274c:	461a      	mov	r2, r3
 800274e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002750:	4413      	add	r3, r2
 8002752:	61fb      	str	r3, [r7, #28]
		index_flag = 1;
 8002754:	2301      	movs	r3, #1
 8002756:	623b      	str	r3, [r7, #32]
 8002758:	e004      	b.n	8002764 <black_box_pack_int+0xd0>
	}
	else{
		max_index = MAX_BUFFER_SIZE;
 800275a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800275e:	61fb      	str	r3, [r7, #28]
		index_flag = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	623b      	str	r3, [r7, #32]
	}
	for(int j = fs.buffer_index ; j < max_index; j++ ){
 8002764:	4b16      	ldr	r3, [pc, #88]	@ (80027c0 <black_box_pack_int+0x12c>)
 8002766:	891b      	ldrh	r3, [r3, #8]
 8002768:	61bb      	str	r3, [r7, #24]
 800276a:	e00f      	b.n	800278c <black_box_pack_int+0xf8>
			fs.buffer[j] = str_[str_idx ++];
 800276c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	627a      	str	r2, [r7, #36]	@ 0x24
 8002772:	3330      	adds	r3, #48	@ 0x30
 8002774:	443b      	add	r3, r7
 8002776:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 800277a:	4a11      	ldr	r2, [pc, #68]	@ (80027c0 <black_box_pack_int+0x12c>)
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	4413      	add	r3, r2
 8002780:	330a      	adds	r3, #10
 8002782:	460a      	mov	r2, r1
 8002784:	701a      	strb	r2, [r3, #0]
	for(int j = fs.buffer_index ; j < max_index; j++ ){
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	3301      	adds	r3, #1
 800278a:	61bb      	str	r3, [r7, #24]
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	429a      	cmp	r2, r3
 8002792:	dbeb      	blt.n	800276c <black_box_pack_int+0xd8>
	}
	
	if(index_flag){
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d008      	beq.n	80027ac <black_box_pack_int+0x118>
		fs.buffer_index += len_str;
 800279a:	4b09      	ldr	r3, [pc, #36]	@ (80027c0 <black_box_pack_int+0x12c>)
 800279c:	891a      	ldrh	r2, [r3, #8]
 800279e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	4413      	add	r3, r2
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	4b06      	ldr	r3, [pc, #24]	@ (80027c0 <black_box_pack_int+0x12c>)
 80027a8:	811a      	strh	r2, [r3, #8]
 80027aa:	e006      	b.n	80027ba <black_box_pack_int+0x126>
	}
	else{
		fs.buffer_index += MAX_BUFFER_SIZE;
 80027ac:	4b04      	ldr	r3, [pc, #16]	@ (80027c0 <black_box_pack_int+0x12c>)
 80027ae:	891b      	ldrh	r3, [r3, #8]
 80027b0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	4b02      	ldr	r3, [pc, #8]	@ (80027c0 <black_box_pack_int+0x12c>)
 80027b8:	811a      	strh	r2, [r3, #8]
	}
}
 80027ba:	3730      	adds	r7, #48	@ 0x30
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	200001c8 	.word	0x200001c8

080027c4 <black_box_pack_str>:


void black_box_pack_str(char *c){
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]

    int i = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 80027d0:	e01c      	b.n	800280c <black_box_pack_str+0x48>
        if((fs.buffer_index + i) > MAX_BUFFER_SIZE){
 80027d2:	4b17      	ldr	r3, [pc, #92]	@ (8002830 <black_box_pack_str+0x6c>)
 80027d4:	891b      	ldrh	r3, [r3, #8]
 80027d6:	461a      	mov	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4413      	add	r3, r2
 80027dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027e0:	dd04      	ble.n	80027ec <black_box_pack_str+0x28>
                fs.buffer_index = MAX_BUFFER_SIZE;
 80027e2:	4b13      	ldr	r3, [pc, #76]	@ (8002830 <black_box_pack_str+0x6c>)
 80027e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027e8:	811a      	strh	r2, [r3, #8]
                return;
 80027ea:	e01d      	b.n	8002828 <black_box_pack_str+0x64>
        }
        fs.buffer[fs.buffer_index + i] = c[i];
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	441a      	add	r2, r3
 80027f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002830 <black_box_pack_str+0x6c>)
 80027f4:	891b      	ldrh	r3, [r3, #8]
 80027f6:	4619      	mov	r1, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	440b      	add	r3, r1
 80027fc:	7811      	ldrb	r1, [r2, #0]
 80027fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002830 <black_box_pack_str+0x6c>)
 8002800:	4413      	add	r3, r2
 8002802:	460a      	mov	r2, r1
 8002804:	729a      	strb	r2, [r3, #10]
        i ++;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	3301      	adds	r3, #1
 800280a:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	4413      	add	r3, r2
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1dc      	bne.n	80027d2 <black_box_pack_str+0xe>
    }
    fs.buffer_index += i;
 8002818:	4b05      	ldr	r3, [pc, #20]	@ (8002830 <black_box_pack_str+0x6c>)
 800281a:	891a      	ldrh	r2, [r3, #8]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	b29b      	uxth	r3, r3
 8002820:	4413      	add	r3, r2
 8002822:	b29a      	uxth	r2, r3
 8002824:	4b02      	ldr	r3, [pc, #8]	@ (8002830 <black_box_pack_str+0x6c>)
 8002826:	811a      	strh	r2, [r3, #8]
}
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	200001c8 	.word	0x200001c8

08002834 <black_box_pack_char>:

void black_box_pack_char(char c){
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
    fs.buffer[fs.buffer_index ] = c;
 800283e:	4b09      	ldr	r3, [pc, #36]	@ (8002864 <black_box_pack_char+0x30>)
 8002840:	891b      	ldrh	r3, [r3, #8]
 8002842:	461a      	mov	r2, r3
 8002844:	4b07      	ldr	r3, [pc, #28]	@ (8002864 <black_box_pack_char+0x30>)
 8002846:	4413      	add	r3, r2
 8002848:	79fa      	ldrb	r2, [r7, #7]
 800284a:	729a      	strb	r2, [r3, #10]
    fs.buffer_index ++;
 800284c:	4b05      	ldr	r3, [pc, #20]	@ (8002864 <black_box_pack_char+0x30>)
 800284e:	891b      	ldrh	r3, [r3, #8]
 8002850:	3301      	adds	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	4b03      	ldr	r3, [pc, #12]	@ (8002864 <black_box_pack_char+0x30>)
 8002856:	811a      	strh	r2, [r3, #8]
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	200001c8 	.word	0x200001c8

08002868 <black_box_load>:



void black_box_load()
 {
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
	  puts_state = f_puts(fs.buffer,fs.file);
 800286c:	4b0c      	ldr	r3, [pc, #48]	@ (80028a0 <black_box_load+0x38>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4619      	mov	r1, r3
 8002872:	480c      	ldr	r0, [pc, #48]	@ (80028a4 <black_box_load+0x3c>)
 8002874:	f00e fe95 	bl	80115a2 <f_puts>
 8002878:	4603      	mov	r3, r0
 800287a:	4a0b      	ldr	r2, [pc, #44]	@ (80028a8 <black_box_load+0x40>)
 800287c:	6013      	str	r3, [r2, #0]
      f_sync(fs.file);
 800287e:	4b08      	ldr	r3, [pc, #32]	@ (80028a0 <black_box_load+0x38>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	4618      	mov	r0, r3
 8002884:	f00e fab8 	bl	8010df8 <f_sync>
      memset(fs.buffer,0,MAX_BUFFER_SIZE);
 8002888:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800288c:	2100      	movs	r1, #0
 800288e:	4805      	ldr	r0, [pc, #20]	@ (80028a4 <black_box_load+0x3c>)
 8002890:	f011 fe26 	bl	80144e0 <memset>
      fs.buffer_index = 0;
 8002894:	4b02      	ldr	r3, [pc, #8]	@ (80028a0 <black_box_load+0x38>)
 8002896:	2200      	movs	r2, #0
 8002898:	811a      	strh	r2, [r3, #8]
 }
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	200001c8 	.word	0x200001c8
 80028a4:	200001d2 	.word	0x200001d2
 80028a8:	200003d8 	.word	0x200003d8

080028ac <reverse>:




static void reverse( char *str, int len)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	3b01      	subs	r3, #1
 80028be:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80028c0:	e018      	b.n	80028f4 <reverse+0x48>
        temp = str[i];
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	4413      	add	r3, r2
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	441a      	add	r2, r3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	440b      	add	r3, r1
 80028d8:	7812      	ldrb	r2, [r2, #0]
 80028da:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	701a      	strb	r2, [r3, #0]
        i++;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	3301      	adds	r3, #1
 80028ec:	617b      	str	r3, [r7, #20]
        j--;
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	3b01      	subs	r3, #1
 80028f2:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	dbe2      	blt.n	80028c2 <reverse+0x16>
    }
}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <intToStr>:

 static int intToStr(int x,  char *str, int d)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
    while (x) {
 8002914:	e01f      	b.n	8002956 <intToStr+0x4e>
        str[fs.indexx++] = (x % 10) + '0';
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4b1e      	ldr	r3, [pc, #120]	@ (8002994 <intToStr+0x8c>)
 800291a:	fb83 1302 	smull	r1, r3, r3, r2
 800291e:	1099      	asrs	r1, r3, #2
 8002920:	17d3      	asrs	r3, r2, #31
 8002922:	1ac9      	subs	r1, r1, r3
 8002924:	460b      	mov	r3, r1
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	1ad1      	subs	r1, r2, r3
 800292e:	b2ca      	uxtb	r2, r1
 8002930:	4b19      	ldr	r3, [pc, #100]	@ (8002998 <intToStr+0x90>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	1c59      	adds	r1, r3, #1
 8002936:	4818      	ldr	r0, [pc, #96]	@ (8002998 <intToStr+0x90>)
 8002938:	6001      	str	r1, [r0, #0]
 800293a:	4619      	mov	r1, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	440b      	add	r3, r1
 8002940:	3230      	adds	r2, #48	@ 0x30
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4a12      	ldr	r2, [pc, #72]	@ (8002994 <intToStr+0x8c>)
 800294a:	fb82 1203 	smull	r1, r2, r2, r3
 800294e:	1092      	asrs	r2, r2, #2
 8002950:	17db      	asrs	r3, r3, #31
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	60fb      	str	r3, [r7, #12]
    while (x) {
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1dc      	bne.n	8002916 <intToStr+0xe>
    }

    while (fs.indexx < d)
 800295c:	e009      	b.n	8002972 <intToStr+0x6a>
        str[fs.indexx++] = '0';
 800295e:	4b0e      	ldr	r3, [pc, #56]	@ (8002998 <intToStr+0x90>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	490c      	ldr	r1, [pc, #48]	@ (8002998 <intToStr+0x90>)
 8002966:	600a      	str	r2, [r1, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	4413      	add	r3, r2
 800296e:	2230      	movs	r2, #48	@ 0x30
 8002970:	701a      	strb	r2, [r3, #0]
    while (fs.indexx < d)
 8002972:	4b09      	ldr	r3, [pc, #36]	@ (8002998 <intToStr+0x90>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	429a      	cmp	r2, r3
 800297a:	dcf0      	bgt.n	800295e <intToStr+0x56>
    reverse(str,fs.indexx);
 800297c:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <intToStr+0x90>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4619      	mov	r1, r3
 8002982:	68b8      	ldr	r0, [r7, #8]
 8002984:	f7ff ff92 	bl	80028ac <reverse>
    return fs.indexx;
 8002988:	4b03      	ldr	r3, [pc, #12]	@ (8002998 <intToStr+0x90>)
 800298a:	681b      	ldr	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	66666667 	.word	0x66666667
 8002998:	200001c8 	.word	0x200001c8

0800299c <compassInit>:
int8_t file_open;


/*  Init compass
 */
void compassInit(){
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  calibrate_value.scale_factor_axis[X] = 1.0f;
 80029a0:	4b17      	ldr	r3, [pc, #92]	@ (8002a00 <compassInit+0x64>)
 80029a2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80029a6:	60da      	str	r2, [r3, #12]
  calibrate_value.scale_factor_axis[Y] = 1.0f;
 80029a8:	4b15      	ldr	r3, [pc, #84]	@ (8002a00 <compassInit+0x64>)
 80029aa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80029ae:	611a      	str	r2, [r3, #16]
  calibrate_value.scale_factor_axis[Z] = 1.0f;
 80029b0:	4b13      	ldr	r3, [pc, #76]	@ (8002a00 <compassInit+0x64>)
 80029b2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80029b6:	615a      	str	r2, [r3, #20]

  calibrate_value.hard_iron_calibrate_value[X] = 0;
 80029b8:	4b11      	ldr	r3, [pc, #68]	@ (8002a00 <compassInit+0x64>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
  calibrate_value.hard_iron_calibrate_value[Y] = 0;
 80029be:	4b10      	ldr	r3, [pc, #64]	@ (8002a00 <compassInit+0x64>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	605a      	str	r2, [r3, #4]
  calibrate_value.hard_iron_calibrate_value[Z] = 0;
 80029c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a00 <compassInit+0x64>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	609a      	str	r2, [r3, #8]
	
  //file_open = black_box_create_file(&calib_file,file_name);
	 
 // epprom init
  AT24Cxx_init(&device_array, 0x00, &hi2c2);
 80029ca:	4a0e      	ldr	r2, [pc, #56]	@ (8002a04 <compassInit+0x68>)
 80029cc:	2100      	movs	r1, #0
 80029ce:	480e      	ldr	r0, [pc, #56]	@ (8002a08 <compassInit+0x6c>)
 80029d0:	f003 fb5c 	bl	800608c <AT24Cxx_init>
  AT24Cxx_add_dev(&device_array, 0x01, &hi2c2);
 80029d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002a04 <compassInit+0x68>)
 80029d6:	2101      	movs	r1, #1
 80029d8:	480b      	ldr	r0, [pc, #44]	@ (8002a08 <compassInit+0x6c>)
 80029da:	f003 fb97 	bl	800610c <AT24Cxx_add_dev>

  // init sensor
#ifdef QMC5883
  qmc5883_init(&hi2c1);
 80029de:	480b      	ldr	r0, [pc, #44]	@ (8002a0c <compassInit+0x70>)
 80029e0:	f7ff fd38 	bl	8002454 <qmc5883_init>
#else
  hmc5883_init(&hi2c2);
#endif
  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){
 80029e4:	2120      	movs	r1, #32
 80029e6:	480a      	ldr	r0, [pc, #40]	@ (8002a10 <compassInit+0x74>)
 80029e8:	f005 fb32 	bl	8008050 <HAL_GPIO_ReadPin>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <compassInit+0x5c>
      compass_calibrate();
 80029f2:	f000 f8f3 	bl	8002bdc <compass_calibrate>
  }
  else{
      read_calibrate_file();
  }
}
 80029f6:	e001      	b.n	80029fc <compassInit+0x60>
      read_calibrate_file();
 80029f8:	f000 f87c 	bl	8002af4 <read_calibrate_file>
}
 80029fc:	bf00      	nop
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20000404 	.word	0x20000404
 8002a04:	200008d0 	.word	0x200008d0
 8002a08:	200003e0 	.word	0x200003e0
 8002a0c:	2000087c 	.word	0x2000087c
 8002a10:	40010c00 	.word	0x40010c00

08002a14 <compass_get>:

void compass_get(axis3_t *out){
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	axis3_t as;
#ifdef QMC5883
         qmc_get_raw(&as);
 8002a1c:	f107 0308 	add.w	r3, r7, #8
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff fd43 	bl	80024ac <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
    // calibrate ouput
	out->x = (as.x - calibrate_value.hard_iron_calibrate_value[X]);
 8002a26:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	4b30      	ldr	r3, [pc, #192]	@ (8002af0 <compass_get+0xdc>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	b21a      	sxth	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	801a      	strh	r2, [r3, #0]
	out->y = (as.y - calibrate_value.hard_iron_calibrate_value[Y]);
 8002a3c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	4b2b      	ldr	r3, [pc, #172]	@ (8002af0 <compass_get+0xdc>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	b21a      	sxth	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	805a      	strh	r2, [r3, #2]
	out->z = (as.z - calibrate_value.hard_iron_calibrate_value[Z]);
 8002a52:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	4b25      	ldr	r3, [pc, #148]	@ (8002af0 <compass_get+0xdc>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	b21a      	sxth	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	809a      	strh	r2, [r3, #4]

    out->x *= calibrate_value.scale_factor_axis[X];
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe f92c 	bl	8000ccc <__aeabi_i2f>
 8002a74:	4602      	mov	r2, r0
 8002a76:	4b1e      	ldr	r3, [pc, #120]	@ (8002af0 <compass_get+0xdc>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	f7fe f979 	bl	8000d74 <__aeabi_fmul>
 8002a82:	4603      	mov	r3, r0
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fe fb51 	bl	800112c <__aeabi_f2iz>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	b21a      	sxth	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	801a      	strh	r2, [r3, #0]
    out->y *= calibrate_value.scale_factor_axis[Y];
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fe f917 	bl	8000ccc <__aeabi_i2f>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	4b13      	ldr	r3, [pc, #76]	@ (8002af0 <compass_get+0xdc>)
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	f7fe f964 	bl	8000d74 <__aeabi_fmul>
 8002aac:	4603      	mov	r3, r0
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe fb3c 	bl	800112c <__aeabi_f2iz>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	b21a      	sxth	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	805a      	strh	r2, [r3, #2]
    out->z *= calibrate_value.scale_factor_axis[Z];
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe f902 	bl	8000ccc <__aeabi_i2f>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	4b09      	ldr	r3, [pc, #36]	@ (8002af0 <compass_get+0xdc>)
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	f7fe f94f 	bl	8000d74 <__aeabi_fmul>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fe fb27 	bl	800112c <__aeabi_f2iz>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	b21a      	sxth	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	809a      	strh	r2, [r3, #4]
}
 8002ae6:	bf00      	nop
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20000404 	.word	0x20000404

08002af4 <read_calibrate_file>:

/* read calibrate data from eprrom
 * 
 */

void read_calibrate_file(){
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
	int32_t sum_all = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	607b      	str	r3, [r7, #4]
    AT24Cxx_read_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_value,0x0010,sizeof(cali_mag_t));
 8002afe:	4b33      	ldr	r3, [pc, #204]	@ (8002bcc <read_calibrate_file+0xd8>)
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	231c      	movs	r3, #28
 8002b04:	2210      	movs	r2, #16
 8002b06:	4932      	ldr	r1, [pc, #200]	@ (8002bd0 <read_calibrate_file+0xdc>)
 8002b08:	f003 fc59 	bl	80063be <AT24Cxx_read_byte_buffer>
   	sum_all += calibrate_value.scale_factor_axis[X];
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7fe f8dd 	bl	8000ccc <__aeabi_i2f>
 8002b12:	4602      	mov	r2, r0
 8002b14:	4b2e      	ldr	r3, [pc, #184]	@ (8002bd0 <read_calibrate_file+0xdc>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	f7fe f822 	bl	8000b64 <__addsf3>
 8002b20:	4603      	mov	r3, r0
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fe fb02 	bl	800112c <__aeabi_f2iz>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Y];
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7fe f8cd 	bl	8000ccc <__aeabi_i2f>
 8002b32:	4602      	mov	r2, r0
 8002b34:	4b26      	ldr	r3, [pc, #152]	@ (8002bd0 <read_calibrate_file+0xdc>)
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	f7fe f812 	bl	8000b64 <__addsf3>
 8002b40:	4603      	mov	r3, r0
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe faf2 	bl	800112c <__aeabi_f2iz>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Z];
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f7fe f8bd 	bl	8000ccc <__aeabi_i2f>
 8002b52:	4602      	mov	r2, r0
 8002b54:	4b1e      	ldr	r3, [pc, #120]	@ (8002bd0 <read_calibrate_file+0xdc>)
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	f7fe f802 	bl	8000b64 <__addsf3>
 8002b60:	4603      	mov	r3, r0
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fe fae2 	bl	800112c <__aeabi_f2iz>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	607b      	str	r3, [r7, #4]

    sum_all += (int)calibrate_value.hard_iron_calibrate_value[X];
 8002b6c:	4b18      	ldr	r3, [pc, #96]	@ (8002bd0 <read_calibrate_file+0xdc>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	4413      	add	r3, r2
 8002b74:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Y];
 8002b76:	4b16      	ldr	r3, [pc, #88]	@ (8002bd0 <read_calibrate_file+0xdc>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Z];
 8002b80:	4b13      	ldr	r3, [pc, #76]	@ (8002bd0 <read_calibrate_file+0xdc>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	4413      	add	r3, r2
 8002b88:	607b      	str	r3, [r7, #4]

    if(ABS(sum_all - (int)calibrate_value.sum_all_value) > 40){
 8002b8a:	4b11      	ldr	r3, [pc, #68]	@ (8002bd0 <read_calibrate_file+0xdc>)
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	bfb8      	it	lt
 8002b9a:	425b      	neglt	r3, r3
 8002b9c:	2b28      	cmp	r3, #40	@ 0x28
 8002b9e:	dd11      	ble.n	8002bc4 <read_calibrate_file+0xd0>
      while(1){
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002ba0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002ba4:	480b      	ldr	r0, [pc, #44]	@ (8002bd4 <read_calibrate_file+0xe0>)
 8002ba6:	f005 fa82 	bl	80080ae <HAL_GPIO_TogglePin>
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002baa:	2120      	movs	r1, #32
 8002bac:	480a      	ldr	r0, [pc, #40]	@ (8002bd8 <read_calibrate_file+0xe4>)
 8002bae:	f005 fa7e 	bl	80080ae <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8002bb2:	2110      	movs	r1, #16
 8002bb4:	4808      	ldr	r0, [pc, #32]	@ (8002bd8 <read_calibrate_file+0xe4>)
 8002bb6:	f005 fa7a 	bl	80080ae <HAL_GPIO_TogglePin>
       HAL_Delay(50); // 10 Hz loop
 8002bba:	2032      	movs	r0, #50	@ 0x32
 8002bbc:	f004 fb2c 	bl	8007218 <HAL_Delay>
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002bc0:	bf00      	nop
 8002bc2:	e7ed      	b.n	8002ba0 <read_calibrate_file+0xac>
      }
    }
}
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	200003e0 	.word	0x200003e0
 8002bd0:	20000404 	.word	0x20000404
 8002bd4:	40011000 	.word	0x40011000
 8002bd8:	40010800 	.word	0x40010800

08002bdc <compass_calibrate>:


/* Calibrate function
 * write calibrate value to sd card
 */
static void compass_calibrate(){
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b095      	sub	sp, #84	@ 0x54
 8002be0:	af00      	add	r7, sp, #0
    int16_t max_val[] = {-32767,-32767,-32767};
 8002be2:	4a9f      	ldr	r2, [pc, #636]	@ (8002e60 <compass_calibrate+0x284>)
 8002be4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002be8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bec:	6018      	str	r0, [r3, #0]
 8002bee:	3304      	adds	r3, #4
 8002bf0:	8019      	strh	r1, [r3, #0]
    int16_t min_val[] = {32767, 32767, 32767};
 8002bf2:	4a9c      	ldr	r2, [pc, #624]	@ (8002e64 <compass_calibrate+0x288>)
 8002bf4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002bf8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bfc:	6018      	str	r0, [r3, #0]
 8002bfe:	3304      	adds	r3, #4
 8002c00:	8019      	strh	r1, [r3, #0]
    uint8_t fist_data = TRUE;
 8002c02:	2301      	movs	r3, #1
 8002c04:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    cali_mag_t calibrate_temp;
    ignore_data = 0;
 8002c08:	4b97      	ldr	r3, [pc, #604]	@ (8002e68 <compass_calibrate+0x28c>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	801a      	strh	r2, [r3, #0]
    int16_t last_axis[3];
    axis3_t as;

	while(!file_open){
 8002c0e:	e0b5      	b.n	8002d7c <compass_calibrate+0x1a0>
 // read data from sensor
#ifdef QMC5883
         qmc_get_raw(&as);
 8002c10:	1d3b      	adds	r3, r7, #4
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fc4a 	bl	80024ac <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
        if(fist_data){
 8002c18:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00c      	beq.n	8002c3a <compass_calibrate+0x5e>
          last_axis[X] = as.x;
 8002c20:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c24:	81bb      	strh	r3, [r7, #12]
          last_axis[Y] = as.y;
 8002c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c2a:	81fb      	strh	r3, [r7, #14]
          last_axis[Z] = as.z;
 8002c2c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002c30:	823b      	strh	r3, [r7, #16]
          fist_data = FALSE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          continue;
 8002c38:	e0a0      	b.n	8002d7c <compass_calibrate+0x1a0>
        }
        int16_t delta_x_ = as.x -  last_axis[X];
 8002c3a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        int16_t delta_y_ = as.y -  last_axis[Y];
 8002c4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
        int16_t delta_z_ = as.z -  last_axis[Z];
 8002c62:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        // ignore wrong value and set to zero
        int16_t ckec = sqrt(sq(delta_x_) + sq(delta_y_) + sq(delta_z_));
 8002c76:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002c7a:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	@ 0x4a
 8002c7e:	fb03 f202 	mul.w	r2, r3, r2
 8002c82:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 8002c86:	f9b7 1048 	ldrsh.w	r1, [r7, #72]	@ 0x48
 8002c8a:	fb01 f303 	mul.w	r3, r1, r3
 8002c8e:	441a      	add	r2, r3
 8002c90:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002c94:	f9b7 1046 	ldrsh.w	r1, [r7, #70]	@ 0x46
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fd fc18 	bl	80004d4 <__aeabi_i2d>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	f011 fc6a 	bl	8014584 <sqrt>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f7fd ff26 	bl	8000b08 <__aeabi_d2iz>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
        if(ckec > max_change){
 8002cc2:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002cc6:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	dd09      	ble.n	8002ce2 <compass_calibrate+0x106>
            fist_data = TRUE; 
 8002cce:	2301      	movs	r3, #1
 8002cd0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            ignore_data ++;
 8002cd4:	4b64      	ldr	r3, [pc, #400]	@ (8002e68 <compass_calibrate+0x28c>)
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	4b62      	ldr	r3, [pc, #392]	@ (8002e68 <compass_calibrate+0x28c>)
 8002cde:	801a      	strh	r2, [r3, #0]
            continue;
 8002ce0:	e04c      	b.n	8002d7c <compass_calibrate+0x1a0>
        }
        last_axis[X] = as.x;
 8002ce2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ce6:	81bb      	strh	r3, [r7, #12]
        last_axis[Y] = as.y;
 8002ce8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cec:	81fb      	strh	r3, [r7, #14]
        last_axis[Z] = as.z;
 8002cee:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002cf2:	823b      	strh	r3, [r7, #16]
        // get max value each axis
        if(as.x > max_val[X]) max_val[X] = as.x;
 8002cf4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002cf8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	dd02      	ble.n	8002d06 <compass_calibrate+0x12a>
 8002d00:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002d04:	873b      	strh	r3, [r7, #56]	@ 0x38
        if(as.y > max_val[Y]) max_val[Y] = as.y;
 8002d06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d0a:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	dd02      	ble.n	8002d18 <compass_calibrate+0x13c>
 8002d12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d16:	877b      	strh	r3, [r7, #58]	@ 0x3a
        if(as.z > max_val[Z]) max_val[Z] = as.z;
 8002d18:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002d1c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8002d20:	429a      	cmp	r2, r3
 8002d22:	dd02      	ble.n	8002d2a <compass_calibrate+0x14e>
 8002d24:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002d28:	87bb      	strh	r3, [r7, #60]	@ 0x3c

        // min value
        if(as.x < min_val[X]) min_val[X] = as.x;
 8002d2a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002d2e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002d32:	429a      	cmp	r2, r3
 8002d34:	da02      	bge.n	8002d3c <compass_calibrate+0x160>
 8002d36:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002d3a:	863b      	strh	r3, [r7, #48]	@ 0x30
        if(as.y < min_val[Y]) min_val[Y] = as.y;
 8002d3c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d40:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002d44:	429a      	cmp	r2, r3
 8002d46:	da02      	bge.n	8002d4e <compass_calibrate+0x172>
 8002d48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d4c:	867b      	strh	r3, [r7, #50]	@ 0x32
        if(as.z < min_val[Z]) min_val[Z] = as.z;
 8002d4e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002d52:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8002d56:	429a      	cmp	r2, r3
 8002d58:	da02      	bge.n	8002d60 <compass_calibrate+0x184>
 8002d5a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002d5e:	86bb      	strh	r3, [r7, #52]	@ 0x34
        black_box_pack_str(&calib_file,"\n");
		
		black_box_load(&calib_file);
        black_box_sync(&calib_file);
        */
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8002d60:	2110      	movs	r1, #16
 8002d62:	4842      	ldr	r0, [pc, #264]	@ (8002e6c <compass_calibrate+0x290>)
 8002d64:	f005 f9a3 	bl	80080ae <HAL_GPIO_TogglePin>
        HAL_Delay(20); // 10 Hz loop
 8002d68:	2014      	movs	r0, #20
 8002d6a:	f004 fa55 	bl	8007218 <HAL_Delay>

       if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5) == 0){
 8002d6e:	2120      	movs	r1, #32
 8002d70:	483f      	ldr	r0, [pc, #252]	@ (8002e70 <compass_calibrate+0x294>)
 8002d72:	f005 f96d 	bl	8008050 <HAL_GPIO_ReadPin>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d006      	beq.n	8002d8a <compass_calibrate+0x1ae>
	while(!file_open){
 8002d7c:	4b3d      	ldr	r3, [pc, #244]	@ (8002e74 <compass_calibrate+0x298>)
 8002d7e:	f993 3000 	ldrsb.w	r3, [r3]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f43f af44 	beq.w	8002c10 <compass_calibrate+0x34>
 8002d88:	e000      	b.n	8002d8c <compass_calibrate+0x1b0>
              break;
 8002d8a:	bf00      	nop
          }
	  }

    // check all min value is negative sign
    if(min_val[X] > 0 || min_val[Y] > 0 || min_val[Z] > 0){
 8002d8c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	dc02      	bgt.n	8002d9a <compass_calibrate+0x1be>
 8002d94:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002d98:	2b00      	cmp	r3, #0
          // error
    }
    // check all max value is positive sign
    if(max_val[X] < 0 || max_val[Y] < 0 || max_val[Z] < 0){
 8002d9a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	db02      	blt.n	8002da8 <compass_calibrate+0x1cc>
 8002da2:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8002da6:	2b00      	cmp	r3, #0
          // error
    }
    // calibrate value for each axis
    calibrate_temp.hard_iron_calibrate_value[X] = (int)(max_val[X] + min_val[X])/2;
 8002da8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8002dac:	461a      	mov	r2, r3
 8002dae:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002db2:	4413      	add	r3, r2
 8002db4:	0fda      	lsrs	r2, r3, #31
 8002db6:	4413      	add	r3, r2
 8002db8:	105b      	asrs	r3, r3, #1
 8002dba:	617b      	str	r3, [r7, #20]
    calibrate_temp.hard_iron_calibrate_value[Y] = (int)(max_val[Y] + min_val[Y])/2;
 8002dbc:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002dc6:	4413      	add	r3, r2
 8002dc8:	0fda      	lsrs	r2, r3, #31
 8002dca:	4413      	add	r3, r2
 8002dcc:	105b      	asrs	r3, r3, #1
 8002dce:	61bb      	str	r3, [r7, #24]
    calibrate_temp.hard_iron_calibrate_value[Z] = (int)(max_val[Z] + min_val[Z])/2;
 8002dd0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8002dda:	4413      	add	r3, r2
 8002ddc:	0fda      	lsrs	r2, r3, #31
 8002dde:	4413      	add	r3, r2
 8002de0:	105b      	asrs	r3, r3, #1
 8002de2:	61fb      	str	r3, [r7, #28]

    // calculate scale factor for each axis
    int16_t x_ = abs(max_val[X]) + abs(min_val[X]);
 8002de4:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	bfb8      	it	lt
 8002dec:	425b      	neglt	r3, r3
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bfb8      	it	lt
 8002df8:	425b      	neglt	r3, r3
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    int16_t y_ = abs(max_val[Y]) + abs(min_val[Y]);
 8002e04:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	bfb8      	it	lt
 8002e0c:	425b      	neglt	r3, r3
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	bfb8      	it	lt
 8002e18:	425b      	neglt	r3, r3
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    int16_t z_ = abs(max_val[Z]) + abs(min_val[Z]);
 8002e24:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	bfb8      	it	lt
 8002e2c:	425b      	neglt	r3, r3
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bfb8      	it	lt
 8002e38:	425b      	neglt	r3, r3
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    // get largest value
    int16_t max_value = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    if(x_ > y_)
 8002e48:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 8002e4c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8002e50:	429a      	cmp	r2, r3
 8002e52:	dd11      	ble.n	8002e78 <compass_calibrate+0x29c>
        max_value = x_;
 8002e54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002e58:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8002e5c:	e010      	b.n	8002e80 <compass_calibrate+0x2a4>
 8002e5e:	bf00      	nop
 8002e60:	080150f8 	.word	0x080150f8
 8002e64:	08015100 	.word	0x08015100
 8002e68:	200003dc 	.word	0x200003dc
 8002e6c:	40010800 	.word	0x40010800
 8002e70:	40010c00 	.word	0x40010c00
 8002e74:	20000420 	.word	0x20000420
    else
        max_value = y_;
 8002e78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002e7c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    if(max_value < z_)
 8002e80:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	@ 0x4c
 8002e84:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	da02      	bge.n	8002e92 <compass_calibrate+0x2b6>
        max_value = z_;
 8002e8c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002e8e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

    // caculate scale
    calibrate_temp.scale_factor_axis[X] = (float)x_/max_value;
 8002e92:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd ff18 	bl	8000ccc <__aeabi_i2f>
 8002e9c:	4604      	mov	r4, r0
 8002e9e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fd ff12 	bl	8000ccc <__aeabi_i2f>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4620      	mov	r0, r4
 8002eae:	f7fe f815 	bl	8000edc <__aeabi_fdiv>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	623b      	str	r3, [r7, #32]
    calibrate_temp.scale_factor_axis[Y] = (float)y_/max_value;
 8002eb6:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fd ff06 	bl	8000ccc <__aeabi_i2f>
 8002ec0:	4604      	mov	r4, r0
 8002ec2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd ff00 	bl	8000ccc <__aeabi_i2f>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	f7fe f803 	bl	8000edc <__aeabi_fdiv>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    calibrate_temp.scale_factor_axis[Z] = (float)z_/max_value;
 8002eda:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fd fef4 	bl	8000ccc <__aeabi_i2f>
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fd feee 	bl	8000ccc <__aeabi_i2f>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	f7fd fff1 	bl	8000edc <__aeabi_fdiv>
 8002efa:	4603      	mov	r3, r0
 8002efc:	62bb      	str	r3, [r7, #40]	@ 0x28

    calibrate_temp.sum_all_value = 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	62fb      	str	r3, [r7, #44]	@ 0x2c

	calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[X];
 8002f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7fd fee1 	bl	8000ccc <__aeabi_i2f>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4610      	mov	r0, r2
 8002f12:	f7fd fe27 	bl	8000b64 <__addsf3>
 8002f16:	4603      	mov	r3, r0
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fe f907 	bl	800112c <__aeabi_f2iz>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Y];
 8002f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fd fed1 	bl	8000ccc <__aeabi_i2f>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4610      	mov	r0, r2
 8002f32:	f7fd fe17 	bl	8000b64 <__addsf3>
 8002f36:	4603      	mov	r3, r0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fe f8f7 	bl	800112c <__aeabi_f2iz>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Z];
 8002f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fd fec1 	bl	8000ccc <__aeabi_i2f>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4610      	mov	r0, r2
 8002f52:	f7fd fe07 	bl	8000b64 <__addsf3>
 8002f56:	4603      	mov	r3, r0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe f8e7 	bl	800112c <__aeabi_f2iz>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	62fb      	str	r3, [r7, #44]	@ 0x2c

    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[X];
 8002f62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	4413      	add	r3, r2
 8002f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Y];
 8002f6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	4413      	add	r3, r2
 8002f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Z];
 8002f72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	4413      	add	r3, r2
 8002f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // write data to eprrom
    AT24Cxx_write_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_temp, 0x0010, sizeof(cali_mag_t));
 8002f7a:	4b09      	ldr	r3, [pc, #36]	@ (8002fa0 <compass_calibrate+0x3c4>)
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	f107 0114 	add.w	r1, r7, #20
 8002f82:	231c      	movs	r3, #28
 8002f84:	2210      	movs	r2, #16
 8002f86:	f003 f918 	bl	80061ba <AT24Cxx_write_byte_buffer>
  
   // black_box_load(&calib_file);
   // black_box_close(&calib_file);
	
	while(1){
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002f8a:	2120      	movs	r1, #32
 8002f8c:	4805      	ldr	r0, [pc, #20]	@ (8002fa4 <compass_calibrate+0x3c8>)
 8002f8e:	f005 f88e 	bl	80080ae <HAL_GPIO_TogglePin>
      HAL_Delay(1000); // 10 Hz loop
 8002f92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f96:	f004 f93f 	bl	8007218 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002f9a:	bf00      	nop
 8002f9c:	e7f5      	b.n	8002f8a <compass_calibrate+0x3ae>
 8002f9e:	bf00      	nop
 8002fa0:	200003e0 	.word	0x200003e0
 8002fa4:	40010800 	.word	0x40010800

08002fa8 <gps_init>:

/*  
 * Init function 
 */
void gps_init(UART_HandleTypeDef *uart,uint32_t baudrate)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
    offset_alt = 0;
 8002fb2:	4b2b      	ldr	r3, [pc, #172]	@ (8003060 <gps_init+0xb8>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
    gps_alt_zero_calibrate = FALSE;
 8002fb8:	4b2a      	ldr	r3, [pc, #168]	@ (8003064 <gps_init+0xbc>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	701a      	strb	r2, [r3, #0]
	_gpsUartPort = uart;
 8002fbe:	4a2a      	ldr	r2, [pc, #168]	@ (8003068 <gps_init+0xc0>)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6013      	str	r3, [r2, #0]
    _gps.timer_ = millis();
 8002fc4:	4b29      	ldr	r3, [pc, #164]	@ (800306c <gps_init+0xc4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fcc:	4b28      	ldr	r3, [pc, #160]	@ (8003070 <gps_init+0xc8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	4a28      	ldr	r2, [pc, #160]	@ (8003074 <gps_init+0xcc>)
 8002fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd8:	099b      	lsrs	r3, r3, #6
 8002fda:	4a27      	ldr	r2, [pc, #156]	@ (8003078 <gps_init+0xd0>)
 8002fdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    // reset all viriables
    _payload_length = 0;
 8002fde:	4b27      	ldr	r3, [pc, #156]	@ (800307c <gps_init+0xd4>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	801a      	strh	r2, [r3, #0]
    _payload_counter = 0;
 8002fe4:	4b26      	ldr	r3, [pc, #152]	@ (8003080 <gps_init+0xd8>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	801a      	strh	r2, [r3, #0]
    _msg_id = 0;
 8002fea:	4b26      	ldr	r3, [pc, #152]	@ (8003084 <gps_init+0xdc>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	701a      	strb	r2, [r3, #0]
    // set baudrate
    _gpsUartPort->Init.BaudRate = baudrate;
 8002ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8003068 <gps_init+0xc0>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(_gpsUartPort);
 8002ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8003068 <gps_init+0xc0>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f009 fa4f 	bl	800c4a0 <HAL_UART_Init>
    HAL_Delay(2);
 8003002:	2002      	movs	r0, #2
 8003004:	f004 f908 	bl	8007218 <HAL_Delay>
    /* disable NMEA */
    HAL_UART_Transmit(_gpsUartPort,disable_NMEA_MSG,sizeof(disable_NMEA_MSG),1000);
 8003008:	4b17      	ldr	r3, [pc, #92]	@ (8003068 <gps_init+0xc0>)
 800300a:	6818      	ldr	r0, [r3, #0]
 800300c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003010:	224d      	movs	r2, #77	@ 0x4d
 8003012:	491d      	ldr	r1, [pc, #116]	@ (8003088 <gps_init+0xe0>)
 8003014:	f009 fa94 	bl	800c540 <HAL_UART_Transmit>
    HAL_Delay(2);
 8003018:	2002      	movs	r0, #2
 800301a:	f004 f8fd 	bl	8007218 <HAL_Delay>

    /* enable UBX */
    HAL_UART_Transmit(_gpsUartPort,enable_UBX_MSG,sizeof(enable_UBX_MSG),1000);
 800301e:	4b12      	ldr	r3, [pc, #72]	@ (8003068 <gps_init+0xc0>)
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003026:	222c      	movs	r2, #44	@ 0x2c
 8003028:	4918      	ldr	r1, [pc, #96]	@ (800308c <gps_init+0xe4>)
 800302a:	f009 fa89 	bl	800c540 <HAL_UART_Transmit>
    HAL_Delay(2);
 800302e:	2002      	movs	r0, #2
 8003030:	f004 f8f2 	bl	8007218 <HAL_Delay>

     /* set 10hz rate */
    HAL_UART_Transmit(_gpsUartPort,set_rate_10hz,sizeof(set_rate_10hz),1000);
 8003034:	4b0c      	ldr	r3, [pc, #48]	@ (8003068 <gps_init+0xc0>)
 8003036:	6818      	ldr	r0, [r3, #0]
 8003038:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800303c:	220e      	movs	r2, #14
 800303e:	4914      	ldr	r1, [pc, #80]	@ (8003090 <gps_init+0xe8>)
 8003040:	f009 fa7e 	bl	800c540 <HAL_UART_Transmit>
    HAL_Delay(2);
 8003044:	2002      	movs	r0, #2
 8003046:	f004 f8e7 	bl	8007218 <HAL_Delay>
    
     /* enable SBAS */
    //HAL_UART_Transmit(_gpsUartPort,ubloxSbas,sizeof(ubloxSbas),1000);
    //HAL_Delay(2);
    // read gps using interrup
	HAL_UART_Receive_IT(_gpsUartPort, &_char,ONE_BYTE);
 800304a:	4b07      	ldr	r3, [pc, #28]	@ (8003068 <gps_init+0xc0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2201      	movs	r2, #1
 8003050:	4910      	ldr	r1, [pc, #64]	@ (8003094 <gps_init+0xec>)
 8003052:	4618      	mov	r0, r3
 8003054:	f009 faf7 	bl	800c646 <HAL_UART_Receive_IT>
}
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	20000474 	.word	0x20000474
 8003064:	20000478 	.word	0x20000478
 8003068:	20000460 	.word	0x20000460
 800306c:	200005dc 	.word	0x200005dc
 8003070:	200005e0 	.word	0x200005e0
 8003074:	10624dd3 	.word	0x10624dd3
 8003078:	20000424 	.word	0x20000424
 800307c:	2000046e 	.word	0x2000046e
 8003080:	20000470 	.word	0x20000470
 8003084:	2000046c 	.word	0x2000046c
 8003088:	08015274 	.word	0x08015274
 800308c:	080152c4 	.word	0x080152c4
 8003090:	080152f0 	.word	0x080152f0
 8003094:	20000464 	.word	0x20000464

08003098 <gps_uart_port>:

UART_HandleTypeDef *gps_uart_port(){
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
    return _gpsUartPort;
 800309c:	4b02      	ldr	r3, [pc, #8]	@ (80030a8 <gps_uart_port+0x10>)
 800309e:	681b      	ldr	r3, [r3, #0]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr
 80030a8:	20000460 	.word	0x20000460

080030ac <gps_callback>:

}

uint32_t gps_interrupt_count;
void gps_callback()
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
   // parse data
   gps_interrupt_count++;
 80030b0:	4b09      	ldr	r3, [pc, #36]	@ (80030d8 <gps_callback+0x2c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3301      	adds	r3, #1
 80030b6:	4a08      	ldr	r2, [pc, #32]	@ (80030d8 <gps_callback+0x2c>)
 80030b8:	6013      	str	r3, [r2, #0]
   newdata(_char);
 80030ba:	4b08      	ldr	r3, [pc, #32]	@ (80030dc <gps_callback+0x30>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 f8e8 	bl	8003294 <newdata>
   HAL_UART_Receive_IT(_gpsUartPort, &_char,ONE_BYTE);
 80030c4:	4b06      	ldr	r3, [pc, #24]	@ (80030e0 <gps_callback+0x34>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2201      	movs	r2, #1
 80030ca:	4904      	ldr	r1, [pc, #16]	@ (80030dc <gps_callback+0x30>)
 80030cc:	4618      	mov	r0, r3
 80030ce:	f009 faba 	bl	800c646 <HAL_UART_Receive_IT>
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20000544 	.word	0x20000544
 80030dc:	20000464 	.word	0x20000464
 80030e0:	20000460 	.word	0x20000460

080030e4 <parse_msg>:
        *ck_b += *ck_a;
        data++;
    }
}
*/
static uint8_t parse_msg(){
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
    static uint8_t _new_speed;
    //static uint8_t next_fix;
    static uint32_t lastPosUpdateTime;
    static uint8_t _new_position;
    static uint8_t gps_cali_count = 0;
    switch (_msg_id) {
 80030e8:	4b5d      	ldr	r3, [pc, #372]	@ (8003260 <parse_msg+0x17c>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b30      	cmp	r3, #48	@ 0x30
 80030ee:	f000 809d 	beq.w	800322c <parse_msg+0x148>
 80030f2:	2b30      	cmp	r3, #48	@ 0x30
 80030f4:	f300 8098 	bgt.w	8003228 <parse_msg+0x144>
 80030f8:	2b12      	cmp	r3, #18
 80030fa:	d071      	beq.n	80031e0 <parse_msg+0xfc>
 80030fc:	2b12      	cmp	r3, #18
 80030fe:	f300 8093 	bgt.w	8003228 <parse_msg+0x144>
 8003102:	2b02      	cmp	r3, #2
 8003104:	d002      	beq.n	800310c <parse_msg+0x28>
 8003106:	2b03      	cmp	r3, #3
 8003108:	d064      	beq.n	80031d4 <parse_msg+0xf0>
 800310a:	e08d      	b.n	8003228 <parse_msg+0x144>
        case MSG_POSLLH:
            _gps.position[LON] = _buffer.posllh.longitude;
 800310c:	4b55      	ldr	r3, [pc, #340]	@ (8003264 <parse_msg+0x180>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	4a55      	ldr	r2, [pc, #340]	@ (8003268 <parse_msg+0x184>)
 8003112:	6013      	str	r3, [r2, #0]
            _gps.position[LAT] = _buffer.posllh.latitude;
 8003114:	4b53      	ldr	r3, [pc, #332]	@ (8003264 <parse_msg+0x180>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	4a53      	ldr	r2, [pc, #332]	@ (8003268 <parse_msg+0x184>)
 800311a:	6053      	str	r3, [r2, #4]
            if(gps_alt_zero_calibrate == FALSE){
 800311c:	4b53      	ldr	r3, [pc, #332]	@ (800326c <parse_msg+0x188>)
 800311e:	f993 3000 	ldrsb.w	r3, [r3]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d115      	bne.n	8003152 <parse_msg+0x6e>
                if(gps_cali_count < 20){
 8003126:	4b52      	ldr	r3, [pc, #328]	@ (8003270 <parse_msg+0x18c>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b13      	cmp	r3, #19
 800312c:	d80d      	bhi.n	800314a <parse_msg+0x66>
                    offset_alt += _buffer.posllh.altitude_msl;
 800312e:	4b4d      	ldr	r3, [pc, #308]	@ (8003264 <parse_msg+0x180>)
 8003130:	691a      	ldr	r2, [r3, #16]
 8003132:	4b50      	ldr	r3, [pc, #320]	@ (8003274 <parse_msg+0x190>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4413      	add	r3, r2
 8003138:	4a4e      	ldr	r2, [pc, #312]	@ (8003274 <parse_msg+0x190>)
 800313a:	6013      	str	r3, [r2, #0]
                    gps_cali_count ++;
 800313c:	4b4c      	ldr	r3, [pc, #304]	@ (8003270 <parse_msg+0x18c>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	3301      	adds	r3, #1
 8003142:	b2da      	uxtb	r2, r3
 8003144:	4b4a      	ldr	r3, [pc, #296]	@ (8003270 <parse_msg+0x18c>)
 8003146:	701a      	strb	r2, [r3, #0]
 8003148:	e010      	b.n	800316c <parse_msg+0x88>
                }
                else{
                    gps_alt_zero_calibrate = TRUE;
 800314a:	4b48      	ldr	r3, [pc, #288]	@ (800326c <parse_msg+0x188>)
 800314c:	2201      	movs	r2, #1
 800314e:	701a      	strb	r2, [r3, #0]
 8003150:	e00c      	b.n	800316c <parse_msg+0x88>
                }
            }
            else{
               _gps.altitude_mgl = _buffer.posllh.altitude_msl - offset_alt/20; 
 8003152:	4b44      	ldr	r3, [pc, #272]	@ (8003264 <parse_msg+0x180>)
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	4b47      	ldr	r3, [pc, #284]	@ (8003274 <parse_msg+0x190>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4947      	ldr	r1, [pc, #284]	@ (8003278 <parse_msg+0x194>)
 800315c:	fb81 0103 	smull	r0, r1, r1, r3
 8003160:	10c9      	asrs	r1, r1, #3
 8003162:	17db      	asrs	r3, r3, #31
 8003164:	1a5b      	subs	r3, r3, r1
 8003166:	4413      	add	r3, r2
 8003168:	4a3f      	ldr	r2, [pc, #252]	@ (8003268 <parse_msg+0x184>)
 800316a:	6353      	str	r3, [r2, #52]	@ 0x34
            }
            _gps.altitude_msl = _buffer.posllh.altitude_msl - offset_alt; 
 800316c:	4b3d      	ldr	r3, [pc, #244]	@ (8003264 <parse_msg+0x180>)
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	4b40      	ldr	r3, [pc, #256]	@ (8003274 <parse_msg+0x190>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	4a3c      	ldr	r2, [pc, #240]	@ (8003268 <parse_msg+0x184>)
 8003178:	6313      	str	r3, [r2, #48]	@ 0x30
            _gps.horizontalAccuracy = _buffer.posllh.horizontal_accuracy;
 800317a:	4b3a      	ldr	r3, [pc, #232]	@ (8003264 <parse_msg+0x180>)
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	4a3a      	ldr	r2, [pc, #232]	@ (8003268 <parse_msg+0x184>)
 8003180:	6213      	str	r3, [r2, #32]
            _gps.VerticalAccuracy = _buffer.posllh.vertical_accuracy;
 8003182:	4b38      	ldr	r3, [pc, #224]	@ (8003264 <parse_msg+0x180>)
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	4a38      	ldr	r2, [pc, #224]	@ (8003268 <parse_msg+0x184>)
 8003188:	6253      	str	r3, [r2, #36]	@ 0x24
            /* time update position */
            if(lastPosUpdateTime == 0){
 800318a:	4b3c      	ldr	r3, [pc, #240]	@ (800327c <parse_msg+0x198>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d04e      	beq.n	8003230 <parse_msg+0x14c>
                break;
                lastPosUpdateTime = millis();
            }
            _gps.posUpdateTime = millis() - lastPosUpdateTime;
 8003192:	4b3b      	ldr	r3, [pc, #236]	@ (8003280 <parse_msg+0x19c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800319a:	4b3a      	ldr	r3, [pc, #232]	@ (8003284 <parse_msg+0x1a0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4413      	add	r3, r2
 80031a0:	4a39      	ldr	r2, [pc, #228]	@ (8003288 <parse_msg+0x1a4>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	099a      	lsrs	r2, r3, #6
 80031a8:	4b34      	ldr	r3, [pc, #208]	@ (800327c <parse_msg+0x198>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	4a2e      	ldr	r2, [pc, #184]	@ (8003268 <parse_msg+0x184>)
 80031b0:	6293      	str	r3, [r2, #40]	@ 0x28
            lastPosUpdateTime = millis();
 80031b2:	4b33      	ldr	r3, [pc, #204]	@ (8003280 <parse_msg+0x19c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031ba:	4b32      	ldr	r3, [pc, #200]	@ (8003284 <parse_msg+0x1a0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4413      	add	r3, r2
 80031c0:	4a31      	ldr	r2, [pc, #196]	@ (8003288 <parse_msg+0x1a4>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	099b      	lsrs	r3, r3, #6
 80031c8:	4a2c      	ldr	r2, [pc, #176]	@ (800327c <parse_msg+0x198>)
 80031ca:	6013      	str	r3, [r2, #0]
            /* flag set */
            _new_position = TRUE;
 80031cc:	4b2f      	ldr	r3, [pc, #188]	@ (800328c <parse_msg+0x1a8>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	701a      	strb	r2, [r3, #0]
            break;
 80031d2:	e02e      	b.n	8003232 <parse_msg+0x14e>
        case MSG_STATUS:
            //next_fix = (_buffer.status.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.status.fix_type == FIX_3D);
            //if (!next_fix)
            //    _gps.fix = FALSE;
            _gps.fix = _buffer.status.fix_type;
 80031d4:	4b23      	ldr	r3, [pc, #140]	@ (8003264 <parse_msg+0x180>)
 80031d6:	791a      	ldrb	r2, [r3, #4]
 80031d8:	4b23      	ldr	r3, [pc, #140]	@ (8003268 <parse_msg+0x184>)
 80031da:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            break;
 80031de:	e028      	b.n	8003232 <parse_msg+0x14e>
            _gps.fix = _buffer.solution.fix_type; --------------------------------------------------------------------------------------
            _gps.numSat = _buffer.solution.satellites; -------------------------------------------------------------------------------------
            break;
        */
        case MSG_VELNED:
            _gps.velocity[LAT] = _buffer.velned.ned_north;
 80031e0:	4b20      	ldr	r3, [pc, #128]	@ (8003264 <parse_msg+0x180>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	4a20      	ldr	r2, [pc, #128]	@ (8003268 <parse_msg+0x184>)
 80031e6:	60d3      	str	r3, [r2, #12]
            _gps.velocity[LON] = _buffer.velned.ned_east;
 80031e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003264 <parse_msg+0x180>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4a1e      	ldr	r2, [pc, #120]	@ (8003268 <parse_msg+0x184>)
 80031ee:	6093      	str	r3, [r2, #8]
            _gps.velocity[DOWN] = _buffer.velned.ned_down;
 80031f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003264 <parse_msg+0x180>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003268 <parse_msg+0x184>)
 80031f6:	6113      	str	r3, [r2, #16]
            _gps.Gspeed = _buffer.velned.speed_2d;
 80031f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003264 <parse_msg+0x180>)
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	461a      	mov	r2, r3
 80031fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003268 <parse_msg+0x184>)
 8003200:	615a      	str	r2, [r3, #20]
            _gps.ground_course = _buffer.velned.heading_2d;
 8003202:	4b18      	ldr	r3, [pc, #96]	@ (8003264 <parse_msg+0x180>)
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	b29a      	uxth	r2, r3
 8003208:	4b17      	ldr	r3, [pc, #92]	@ (8003268 <parse_msg+0x184>)
 800320a:	871a      	strh	r2, [r3, #56]	@ 0x38
            _gps.speedAccuracy = _buffer.velned.speed_accuracy;
 800320c:	4b15      	ldr	r3, [pc, #84]	@ (8003264 <parse_msg+0x180>)
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	461a      	mov	r2, r3
 8003212:	4b15      	ldr	r3, [pc, #84]	@ (8003268 <parse_msg+0x184>)
 8003214:	619a      	str	r2, [r3, #24]
            _gps.headingAccuracy = _buffer.velned.heading_accuracy;
 8003216:	4b13      	ldr	r3, [pc, #76]	@ (8003264 <parse_msg+0x180>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	461a      	mov	r2, r3
 800321c:	4b12      	ldr	r3, [pc, #72]	@ (8003268 <parse_msg+0x184>)
 800321e:	61da      	str	r2, [r3, #28]
            _new_speed = TRUE;
 8003220:	4b1b      	ldr	r3, [pc, #108]	@ (8003290 <parse_msg+0x1ac>)
 8003222:	2201      	movs	r2, #1
 8003224:	701a      	strb	r2, [r3, #0]
            break;
 8003226:	e004      	b.n	8003232 <parse_msg+0x14e>
            svinfo_rate[0] = svinfo_rate[1];
            svinfo_rate[1] = millis();
            */
            break;
        default:
            return FALSE;
 8003228:	2300      	movs	r3, #0
 800322a:	e014      	b.n	8003256 <parse_msg+0x172>
            break;
 800322c:	bf00      	nop
 800322e:	e000      	b.n	8003232 <parse_msg+0x14e>
                break;
 8003230:	bf00      	nop
    }
    if (_new_position && _new_speed) {
 8003232:	4b16      	ldr	r3, [pc, #88]	@ (800328c <parse_msg+0x1a8>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00c      	beq.n	8003254 <parse_msg+0x170>
 800323a:	4b15      	ldr	r3, [pc, #84]	@ (8003290 <parse_msg+0x1ac>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <parse_msg+0x170>
        _new_speed = _new_position = FALSE;
 8003242:	4b12      	ldr	r3, [pc, #72]	@ (800328c <parse_msg+0x1a8>)
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]
 8003248:	4b10      	ldr	r3, [pc, #64]	@ (800328c <parse_msg+0x1a8>)
 800324a:	781a      	ldrb	r2, [r3, #0]
 800324c:	4b10      	ldr	r3, [pc, #64]	@ (8003290 <parse_msg+0x1ac>)
 800324e:	701a      	strb	r2, [r3, #0]
        return TRUE;
 8003250:	2301      	movs	r3, #1
 8003252:	e000      	b.n	8003256 <parse_msg+0x172>
    }
    return FALSE;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	2000046c 	.word	0x2000046c
 8003264:	2000047c 	.word	0x2000047c
 8003268:	20000424 	.word	0x20000424
 800326c:	20000478 	.word	0x20000478
 8003270:	20000548 	.word	0x20000548
 8003274:	20000474 	.word	0x20000474
 8003278:	66666667 	.word	0x66666667
 800327c:	2000054c 	.word	0x2000054c
 8003280:	200005dc 	.word	0x200005dc
 8003284:	200005e0 	.word	0x200005e0
 8003288:	10624dd3 	.word	0x10624dd3
 800328c:	20000550 	.word	0x20000550
 8003290:	20000551 	.word	0x20000551

08003294 <newdata>:

int parse_ok;
static uint8_t newdata(uint8_t data){
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	71fb      	strb	r3, [r7, #7]
    uint8_t parsed = FALSE;
 800329e:	2300      	movs	r3, #0
 80032a0:	73fb      	strb	r3, [r7, #15]
    static uint8_t _ck_a;
    static uint8_t _ck_b;
    static uint8_t _step = 0;
    static uint32_t current_time_ms = 0;
    switch (_step) {
 80032a2:	4b85      	ldr	r3, [pc, #532]	@ (80034b8 <newdata+0x224>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	f200 8100 	bhi.w	80034ac <newdata+0x218>
 80032ac:	a201      	add	r2, pc, #4	@ (adr r2, 80032b4 <newdata+0x20>)
 80032ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b2:	bf00      	nop
 80032b4:	080032d9 	.word	0x080032d9
 80032b8:	080032ef 	.word	0x080032ef
 80032bc:	08003303 	.word	0x08003303
 80032c0:	0800331f 	.word	0x0800331f
 80032c4:	08003351 	.word	0x08003351
 80032c8:	08003385 	.word	0x08003385
 80032cc:	080033df 	.word	0x080033df
 80032d0:	08003437 	.word	0x08003437
 80032d4:	08003455 	.word	0x08003455
        case 0: // Sync char 1 (0xB5)
            if (PREAMBLE1 == data)
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	2bb5      	cmp	r3, #181	@ 0xb5
 80032dc:	f040 80df 	bne.w	800349e <newdata+0x20a>
                _step++;
 80032e0:	4b75      	ldr	r3, [pc, #468]	@ (80034b8 <newdata+0x224>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	3301      	adds	r3, #1
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	4b73      	ldr	r3, [pc, #460]	@ (80034b8 <newdata+0x224>)
 80032ea:	701a      	strb	r2, [r3, #0]
            break;
 80032ec:	e0d7      	b.n	800349e <newdata+0x20a>
        case 1: // Sync char 2 (0x62)
            if (PREAMBLE2 == data) {
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	2b62      	cmp	r3, #98	@ 0x62
 80032f2:	d106      	bne.n	8003302 <newdata+0x6e>
                _step++;
 80032f4:	4b70      	ldr	r3, [pc, #448]	@ (80034b8 <newdata+0x224>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	3301      	adds	r3, #1
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	4b6e      	ldr	r3, [pc, #440]	@ (80034b8 <newdata+0x224>)
 80032fe:	701a      	strb	r2, [r3, #0]
                break;
 8003300:	e0d4      	b.n	80034ac <newdata+0x218>
            }
        case 2: // Class
            _step++;
 8003302:	4b6d      	ldr	r3, [pc, #436]	@ (80034b8 <newdata+0x224>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	3301      	adds	r3, #1
 8003308:	b2da      	uxtb	r2, r3
 800330a:	4b6b      	ldr	r3, [pc, #428]	@ (80034b8 <newdata+0x224>)
 800330c:	701a      	strb	r2, [r3, #0]
            _ck_b = _ck_a = data;  
 800330e:	4a6b      	ldr	r2, [pc, #428]	@ (80034bc <newdata+0x228>)
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	7013      	strb	r3, [r2, #0]
 8003314:	4b69      	ldr	r3, [pc, #420]	@ (80034bc <newdata+0x228>)
 8003316:	781a      	ldrb	r2, [r3, #0]
 8003318:	4b69      	ldr	r3, [pc, #420]	@ (80034c0 <newdata+0x22c>)
 800331a:	701a      	strb	r2, [r3, #0]
            break;
 800331c:	e0c6      	b.n	80034ac <newdata+0x218>
        case 3: // ID
            _step++;
 800331e:	4b66      	ldr	r3, [pc, #408]	@ (80034b8 <newdata+0x224>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	3301      	adds	r3, #1
 8003324:	b2da      	uxtb	r2, r3
 8003326:	4b64      	ldr	r3, [pc, #400]	@ (80034b8 <newdata+0x224>)
 8003328:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 800332a:	4b64      	ldr	r3, [pc, #400]	@ (80034bc <newdata+0x228>)
 800332c:	781a      	ldrb	r2, [r3, #0]
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	4413      	add	r3, r2
 8003332:	b2da      	uxtb	r2, r3
 8003334:	4b61      	ldr	r3, [pc, #388]	@ (80034bc <newdata+0x228>)
 8003336:	701a      	strb	r2, [r3, #0]
 8003338:	4b60      	ldr	r3, [pc, #384]	@ (80034bc <newdata+0x228>)
 800333a:	781a      	ldrb	r2, [r3, #0]
 800333c:	4b60      	ldr	r3, [pc, #384]	@ (80034c0 <newdata+0x22c>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	4413      	add	r3, r2
 8003342:	b2da      	uxtb	r2, r3
 8003344:	4b5e      	ldr	r3, [pc, #376]	@ (80034c0 <newdata+0x22c>)
 8003346:	701a      	strb	r2, [r3, #0]
            _msg_id = data;
 8003348:	4a5e      	ldr	r2, [pc, #376]	@ (80034c4 <newdata+0x230>)
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	7013      	strb	r3, [r2, #0]
            break;
 800334e:	e0ad      	b.n	80034ac <newdata+0x218>
        case 4: 
            _step++;
 8003350:	4b59      	ldr	r3, [pc, #356]	@ (80034b8 <newdata+0x224>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	3301      	adds	r3, #1
 8003356:	b2da      	uxtb	r2, r3
 8003358:	4b57      	ldr	r3, [pc, #348]	@ (80034b8 <newdata+0x224>)
 800335a:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 800335c:	4b57      	ldr	r3, [pc, #348]	@ (80034bc <newdata+0x228>)
 800335e:	781a      	ldrb	r2, [r3, #0]
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	4413      	add	r3, r2
 8003364:	b2da      	uxtb	r2, r3
 8003366:	4b55      	ldr	r3, [pc, #340]	@ (80034bc <newdata+0x228>)
 8003368:	701a      	strb	r2, [r3, #0]
 800336a:	4b54      	ldr	r3, [pc, #336]	@ (80034bc <newdata+0x228>)
 800336c:	781a      	ldrb	r2, [r3, #0]
 800336e:	4b54      	ldr	r3, [pc, #336]	@ (80034c0 <newdata+0x22c>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	4413      	add	r3, r2
 8003374:	b2da      	uxtb	r2, r3
 8003376:	4b52      	ldr	r3, [pc, #328]	@ (80034c0 <newdata+0x22c>)
 8003378:	701a      	strb	r2, [r3, #0]
            _payload_length = data; 
 800337a:	79fb      	ldrb	r3, [r7, #7]
 800337c:	b29a      	uxth	r2, r3
 800337e:	4b52      	ldr	r3, [pc, #328]	@ (80034c8 <newdata+0x234>)
 8003380:	801a      	strh	r2, [r3, #0]
            break;
 8003382:	e093      	b.n	80034ac <newdata+0x218>
        case 5: 
            _step++;
 8003384:	4b4c      	ldr	r3, [pc, #304]	@ (80034b8 <newdata+0x224>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	3301      	adds	r3, #1
 800338a:	b2da      	uxtb	r2, r3
 800338c:	4b4a      	ldr	r3, [pc, #296]	@ (80034b8 <newdata+0x224>)
 800338e:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);      
 8003390:	4b4a      	ldr	r3, [pc, #296]	@ (80034bc <newdata+0x228>)
 8003392:	781a      	ldrb	r2, [r3, #0]
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	4413      	add	r3, r2
 8003398:	b2da      	uxtb	r2, r3
 800339a:	4b48      	ldr	r3, [pc, #288]	@ (80034bc <newdata+0x228>)
 800339c:	701a      	strb	r2, [r3, #0]
 800339e:	4b47      	ldr	r3, [pc, #284]	@ (80034bc <newdata+0x228>)
 80033a0:	781a      	ldrb	r2, [r3, #0]
 80033a2:	4b47      	ldr	r3, [pc, #284]	@ (80034c0 <newdata+0x22c>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	4413      	add	r3, r2
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	4b45      	ldr	r3, [pc, #276]	@ (80034c0 <newdata+0x22c>)
 80033ac:	701a      	strb	r2, [r3, #0]
            _payload_length += (uint16_t)(data << 8);
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	021b      	lsls	r3, r3, #8
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	4b44      	ldr	r3, [pc, #272]	@ (80034c8 <newdata+0x234>)
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	4413      	add	r3, r2
 80033bc:	b29a      	uxth	r2, r3
 80033be:	4b42      	ldr	r3, [pc, #264]	@ (80034c8 <newdata+0x234>)
 80033c0:	801a      	strh	r2, [r3, #0]
            if (_payload_length > UBLOX_BUFFER_SIZE) {
 80033c2:	4b41      	ldr	r3, [pc, #260]	@ (80034c8 <newdata+0x234>)
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	2bc8      	cmp	r3, #200	@ 0xc8
 80033c8:	d905      	bls.n	80033d6 <newdata+0x142>
                _payload_length = 0;
 80033ca:	4b3f      	ldr	r3, [pc, #252]	@ (80034c8 <newdata+0x234>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	801a      	strh	r2, [r3, #0]
                _step = 0;
 80033d0:	4b39      	ldr	r3, [pc, #228]	@ (80034b8 <newdata+0x224>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	701a      	strb	r2, [r3, #0]
            }
            _payload_counter = 0;   
 80033d6:	4b3d      	ldr	r3, [pc, #244]	@ (80034cc <newdata+0x238>)
 80033d8:	2200      	movs	r2, #0
 80033da:	801a      	strh	r2, [r3, #0]
            break;
 80033dc:	e066      	b.n	80034ac <newdata+0x218>
        case 6:
            _ck_b += (_ck_a += data);     
 80033de:	4b37      	ldr	r3, [pc, #220]	@ (80034bc <newdata+0x228>)
 80033e0:	781a      	ldrb	r2, [r3, #0]
 80033e2:	79fb      	ldrb	r3, [r7, #7]
 80033e4:	4413      	add	r3, r2
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	4b34      	ldr	r3, [pc, #208]	@ (80034bc <newdata+0x228>)
 80033ea:	701a      	strb	r2, [r3, #0]
 80033ec:	4b33      	ldr	r3, [pc, #204]	@ (80034bc <newdata+0x228>)
 80033ee:	781a      	ldrb	r2, [r3, #0]
 80033f0:	4b33      	ldr	r3, [pc, #204]	@ (80034c0 <newdata+0x22c>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	4413      	add	r3, r2
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	4b31      	ldr	r3, [pc, #196]	@ (80034c0 <newdata+0x22c>)
 80033fa:	701a      	strb	r2, [r3, #0]
            if (_payload_counter < UBLOX_BUFFER_SIZE) {
 80033fc:	4b33      	ldr	r3, [pc, #204]	@ (80034cc <newdata+0x238>)
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	2bc7      	cmp	r3, #199	@ 0xc7
 8003402:	d805      	bhi.n	8003410 <newdata+0x17c>
                _buffer.bytes[_payload_counter] = data;
 8003404:	4b31      	ldr	r3, [pc, #196]	@ (80034cc <newdata+0x238>)
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	4619      	mov	r1, r3
 800340a:	4a31      	ldr	r2, [pc, #196]	@ (80034d0 <newdata+0x23c>)
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	5453      	strb	r3, [r2, r1]
            }
            if (++_payload_counter == _payload_length)
 8003410:	4b2e      	ldr	r3, [pc, #184]	@ (80034cc <newdata+0x238>)
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	3301      	adds	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	4b2c      	ldr	r3, [pc, #176]	@ (80034cc <newdata+0x238>)
 800341a:	801a      	strh	r2, [r3, #0]
 800341c:	4b2b      	ldr	r3, [pc, #172]	@ (80034cc <newdata+0x238>)
 800341e:	881a      	ldrh	r2, [r3, #0]
 8003420:	4b29      	ldr	r3, [pc, #164]	@ (80034c8 <newdata+0x234>)
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d13c      	bne.n	80034a2 <newdata+0x20e>
                _step++;
 8003428:	4b23      	ldr	r3, [pc, #140]	@ (80034b8 <newdata+0x224>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	3301      	adds	r3, #1
 800342e:	b2da      	uxtb	r2, r3
 8003430:	4b21      	ldr	r3, [pc, #132]	@ (80034b8 <newdata+0x224>)
 8003432:	701a      	strb	r2, [r3, #0]
            break;
 8003434:	e035      	b.n	80034a2 <newdata+0x20e>
        case 7:
            _step++;
 8003436:	4b20      	ldr	r3, [pc, #128]	@ (80034b8 <newdata+0x224>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	3301      	adds	r3, #1
 800343c:	b2da      	uxtb	r2, r3
 800343e:	4b1e      	ldr	r3, [pc, #120]	@ (80034b8 <newdata+0x224>)
 8003440:	701a      	strb	r2, [r3, #0]
            if (_ck_a != data)
 8003442:	4b1e      	ldr	r3, [pc, #120]	@ (80034bc <newdata+0x228>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	79fa      	ldrb	r2, [r7, #7]
 8003448:	429a      	cmp	r2, r3
 800344a:	d02c      	beq.n	80034a6 <newdata+0x212>
                _step = 0;         
 800344c:	4b1a      	ldr	r3, [pc, #104]	@ (80034b8 <newdata+0x224>)
 800344e:	2200      	movs	r2, #0
 8003450:	701a      	strb	r2, [r3, #0]
            break;
 8003452:	e028      	b.n	80034a6 <newdata+0x212>
        case 8:
            _step = 0;
 8003454:	4b18      	ldr	r3, [pc, #96]	@ (80034b8 <newdata+0x224>)
 8003456:	2200      	movs	r2, #0
 8003458:	701a      	strb	r2, [r3, #0]
            if (_ck_b != data)
 800345a:	4b19      	ldr	r3, [pc, #100]	@ (80034c0 <newdata+0x22c>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	79fa      	ldrb	r2, [r7, #7]
 8003460:	429a      	cmp	r2, r3
 8003462:	d122      	bne.n	80034aa <newdata+0x216>
                break;   
			 _therad_read_time_ms = micros() - current_time_ms;
 8003464:	4b1b      	ldr	r3, [pc, #108]	@ (80034d4 <newdata+0x240>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800346c:	4b1a      	ldr	r3, [pc, #104]	@ (80034d8 <newdata+0x244>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	441a      	add	r2, r3
 8003472:	4b1a      	ldr	r3, [pc, #104]	@ (80034dc <newdata+0x248>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	4a19      	ldr	r2, [pc, #100]	@ (80034e0 <newdata+0x24c>)
 800347a:	6013      	str	r3, [r2, #0]
			 current_time_ms = micros();
 800347c:	4b15      	ldr	r3, [pc, #84]	@ (80034d4 <newdata+0x240>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003484:	4b14      	ldr	r3, [pc, #80]	@ (80034d8 <newdata+0x244>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4413      	add	r3, r2
 800348a:	4a14      	ldr	r2, [pc, #80]	@ (80034dc <newdata+0x248>)
 800348c:	6013      	str	r3, [r2, #0]
            if (parse_msg())
 800348e:	f7ff fe29 	bl	80030e4 <parse_msg>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d009      	beq.n	80034ac <newdata+0x218>
            {
                parsed = TRUE;
 8003498:	2301      	movs	r3, #1
 800349a:	73fb      	strb	r3, [r7, #15]
 800349c:	e006      	b.n	80034ac <newdata+0x218>
            break;
 800349e:	bf00      	nop
 80034a0:	e004      	b.n	80034ac <newdata+0x218>
            break;
 80034a2:	bf00      	nop
 80034a4:	e002      	b.n	80034ac <newdata+0x218>
            break;
 80034a6:	bf00      	nop
 80034a8:	e000      	b.n	80034ac <newdata+0x218>
                break;   
 80034aa:	bf00      	nop
            }
    } 
    return parsed;
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20000552 	.word	0x20000552
 80034bc:	20000553 	.word	0x20000553
 80034c0:	20000554 	.word	0x20000554
 80034c4:	2000046c 	.word	0x2000046c
 80034c8:	2000046e 	.word	0x2000046e
 80034cc:	20000470 	.word	0x20000470
 80034d0:	2000047c 	.word	0x2000047c
 80034d4:	200005dc 	.word	0x200005dc
 80034d8:	200005e0 	.word	0x200005e0
 80034dc:	20000558 	.word	0x20000558
 80034e0:	20000468 	.word	0x20000468

080034e4 <imu_calibrate>:
  .gyr_lsb = 32.8f
};


static int32_t store_gyro[3];
void imu_calibrate(int16_t *offsx,int16_t *offsy,int16_t *offsz){
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
	axis3_t gyro_;
	integralFBx = 0;
 80034f0:	4b32      	ldr	r3, [pc, #200]	@ (80035bc <imu_calibrate+0xd8>)
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
	integralFBy = 0;
 80034f8:	4b31      	ldr	r3, [pc, #196]	@ (80035c0 <imu_calibrate+0xdc>)
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
	integralFBz = 0;
 8003500:	4b30      	ldr	r3, [pc, #192]	@ (80035c4 <imu_calibrate+0xe0>)
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
	for(int i = 0;i < OFFSET_CYCLE; i++){
 8003508:	2300      	movs	r3, #0
 800350a:	61fb      	str	r3, [r7, #28]
 800350c:	e01f      	b.n	800354e <imu_calibrate+0x6a>
		mpu6050_gyro_get_raw(&gyro_);
 800350e:	f107 0314 	add.w	r3, r7, #20
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe ff20 	bl	8002358 <mpu6050_gyro_get_raw>
		store_gyro[X] += gyro_.x;
 8003518:	4b2b      	ldr	r3, [pc, #172]	@ (80035c8 <imu_calibrate+0xe4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003520:	4413      	add	r3, r2
 8003522:	4a29      	ldr	r2, [pc, #164]	@ (80035c8 <imu_calibrate+0xe4>)
 8003524:	6013      	str	r3, [r2, #0]
    	store_gyro[Y] += gyro_.y;
 8003526:	4b28      	ldr	r3, [pc, #160]	@ (80035c8 <imu_calibrate+0xe4>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800352e:	4413      	add	r3, r2
 8003530:	4a25      	ldr	r2, [pc, #148]	@ (80035c8 <imu_calibrate+0xe4>)
 8003532:	6053      	str	r3, [r2, #4]
    	store_gyro[Z] += gyro_.z;
 8003534:	4b24      	ldr	r3, [pc, #144]	@ (80035c8 <imu_calibrate+0xe4>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800353c:	4413      	add	r3, r2
 800353e:	4a22      	ldr	r2, [pc, #136]	@ (80035c8 <imu_calibrate+0xe4>)
 8003540:	6093      	str	r3, [r2, #8]
		HAL_Delay(1); // delay 1 ms
 8003542:	2001      	movs	r0, #1
 8003544:	f003 fe68 	bl	8007218 <HAL_Delay>
	for(int i = 0;i < OFFSET_CYCLE; i++){
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	3301      	adds	r3, #1
 800354c:	61fb      	str	r3, [r7, #28]
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003554:	dbdb      	blt.n	800350e <imu_calibrate+0x2a>
	}
	*offsx = store_gyro[X] / OFFSET_CYCLE;
 8003556:	4b1c      	ldr	r3, [pc, #112]	@ (80035c8 <imu_calibrate+0xe4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1c      	ldr	r2, [pc, #112]	@ (80035cc <imu_calibrate+0xe8>)
 800355c:	fb82 1203 	smull	r1, r2, r2, r3
 8003560:	1192      	asrs	r2, r2, #6
 8003562:	17db      	asrs	r3, r3, #31
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	b21a      	sxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	801a      	strh	r2, [r3, #0]
	*offsy = store_gyro[Y] / OFFSET_CYCLE;
 800356c:	4b16      	ldr	r3, [pc, #88]	@ (80035c8 <imu_calibrate+0xe4>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	4a16      	ldr	r2, [pc, #88]	@ (80035cc <imu_calibrate+0xe8>)
 8003572:	fb82 1203 	smull	r1, r2, r2, r3
 8003576:	1192      	asrs	r2, r2, #6
 8003578:	17db      	asrs	r3, r3, #31
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	b21a      	sxth	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	801a      	strh	r2, [r3, #0]
	*offsz = store_gyro[Z] / OFFSET_CYCLE;
 8003582:	4b11      	ldr	r3, [pc, #68]	@ (80035c8 <imu_calibrate+0xe4>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	4a11      	ldr	r2, [pc, #68]	@ (80035cc <imu_calibrate+0xe8>)
 8003588:	fb82 1203 	smull	r1, r2, r2, r3
 800358c:	1192      	asrs	r2, r2, #6
 800358e:	17db      	asrs	r3, r3, #31
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	b21a      	sxth	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	801a      	strh	r2, [r3, #0]
	init_us = millis();
 8003598:	4b0d      	ldr	r3, [pc, #52]	@ (80035d0 <imu_calibrate+0xec>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035a0:	4b0c      	ldr	r3, [pc, #48]	@ (80035d4 <imu_calibrate+0xf0>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4413      	add	r3, r2
 80035a6:	4a09      	ldr	r2, [pc, #36]	@ (80035cc <imu_calibrate+0xe8>)
 80035a8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ac:	099b      	lsrs	r3, r3, #6
 80035ae:	4a0a      	ldr	r2, [pc, #40]	@ (80035d8 <imu_calibrate+0xf4>)
 80035b0:	6013      	str	r3, [r2, #0]
}
 80035b2:	bf00      	nop
 80035b4:	3720      	adds	r7, #32
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	20000574 	.word	0x20000574
 80035c0:	20000578 	.word	0x20000578
 80035c4:	2000057c 	.word	0x2000057c
 80035c8:	200005c0 	.word	0x200005c0
 80035cc:	10624dd3 	.word	0x10624dd3
 80035d0:	200005dc 	.word	0x200005dc
 80035d4:	200005e0 	.word	0x200005e0
 80035d8:	200005bc 	.word	0x200005bc

080035dc <update_ahrs>:
	m->roll   = atan2_approx(-acc.x, (1/invSqrt_(acc.y * acc.y + acc.z * acc.z)))*180/M_PIf;
}

static int8_t reset_state = 1;
// mahony filter
void update_ahrs(int16_t gx_, int16_t gy_, int16_t gz_, int16_t accx_, int16_t accy_, int16_t accz_,int16_t magx,int16_t magy,int16_t magz,uint32_t micros){
 80035dc:	b5b0      	push	{r4, r5, r7, lr}
 80035de:	b0a8      	sub	sp, #160	@ 0xa0
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4604      	mov	r4, r0
 80035e4:	4608      	mov	r0, r1
 80035e6:	4611      	mov	r1, r2
 80035e8:	461a      	mov	r2, r3
 80035ea:	4623      	mov	r3, r4
 80035ec:	80fb      	strh	r3, [r7, #6]
 80035ee:	4603      	mov	r3, r0
 80035f0:	80bb      	strh	r3, [r7, #4]
 80035f2:	460b      	mov	r3, r1
 80035f4:	807b      	strh	r3, [r7, #2]
 80035f6:	4613      	mov	r3, r2
 80035f8:	803b      	strh	r3, [r7, #0]
    float vx, vy, vz;
    float emz,wx,wy;
    float mx,my,mz,hx,hy,bx,bz;

    static uint32_t last_time_us;
    float dt = (micros - last_time_us)*(1e-6f);
 80035fa:	4bb2      	ldr	r3, [pc, #712]	@ (80038c4 <update_ahrs+0x2e8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	4618      	mov	r0, r3
 8003606:	f7fd fb5d 	bl	8000cc4 <__aeabi_ui2f>
 800360a:	4603      	mov	r3, r0
 800360c:	49ae      	ldr	r1, [pc, #696]	@ (80038c8 <update_ahrs+0x2ec>)
 800360e:	4618      	mov	r0, r3
 8003610:	f7fd fbb0 	bl	8000d74 <__aeabi_fmul>
 8003614:	4603      	mov	r3, r0
 8003616:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    last_time_us = micros;
 800361a:	4aaa      	ldr	r2, [pc, #680]	@ (80038c4 <update_ahrs+0x2e8>)
 800361c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003620:	6013      	str	r3, [r2, #0]

	gx = (gx_/config.gyr_lsb) * RAD;
 8003622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003626:	4618      	mov	r0, r3
 8003628:	f7fd fb50 	bl	8000ccc <__aeabi_i2f>
 800362c:	4602      	mov	r2, r0
 800362e:	4ba7      	ldr	r3, [pc, #668]	@ (80038cc <update_ahrs+0x2f0>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	4619      	mov	r1, r3
 8003634:	4610      	mov	r0, r2
 8003636:	f7fd fc51 	bl	8000edc <__aeabi_fdiv>
 800363a:	4603      	mov	r3, r0
 800363c:	49a4      	ldr	r1, [pc, #656]	@ (80038d0 <update_ahrs+0x2f4>)
 800363e:	4618      	mov	r0, r3
 8003640:	f7fd fb98 	bl	8000d74 <__aeabi_fmul>
 8003644:	4603      	mov	r3, r0
 8003646:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	gy = (gy_/config.gyr_lsb) * RAD;
 800364a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800364e:	4618      	mov	r0, r3
 8003650:	f7fd fb3c 	bl	8000ccc <__aeabi_i2f>
 8003654:	4602      	mov	r2, r0
 8003656:	4b9d      	ldr	r3, [pc, #628]	@ (80038cc <update_ahrs+0x2f0>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	4619      	mov	r1, r3
 800365c:	4610      	mov	r0, r2
 800365e:	f7fd fc3d 	bl	8000edc <__aeabi_fdiv>
 8003662:	4603      	mov	r3, r0
 8003664:	499a      	ldr	r1, [pc, #616]	@ (80038d0 <update_ahrs+0x2f4>)
 8003666:	4618      	mov	r0, r3
 8003668:	f7fd fb84 	bl	8000d74 <__aeabi_fmul>
 800366c:	4603      	mov	r3, r0
 800366e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	gz = (gz_/config.gyr_lsb) * RAD;
 8003672:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003676:	4618      	mov	r0, r3
 8003678:	f7fd fb28 	bl	8000ccc <__aeabi_i2f>
 800367c:	4602      	mov	r2, r0
 800367e:	4b93      	ldr	r3, [pc, #588]	@ (80038cc <update_ahrs+0x2f0>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	4619      	mov	r1, r3
 8003684:	4610      	mov	r0, r2
 8003686:	f7fd fc29 	bl	8000edc <__aeabi_fdiv>
 800368a:	4603      	mov	r3, r0
 800368c:	4990      	ldr	r1, [pc, #576]	@ (80038d0 <update_ahrs+0x2f4>)
 800368e:	4618      	mov	r0, r3
 8003690:	f7fd fb70 	bl	8000d74 <__aeabi_fmul>
 8003694:	4603      	mov	r3, r0
 8003696:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	if(!((accx_ == 0) && (accy_ == 0) && ( accz_ == 0))) {
 800369a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d108      	bne.n	80036b4 <update_ahrs+0xd8>
 80036a2:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d104      	bne.n	80036b4 <update_ahrs+0xd8>
 80036aa:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 825d 	beq.w	8003b6e <update_ahrs+0x592>
		norm = invSqrt_(accx_ * accx_ + accy_ * accy_ + accz_ * accz_);
 80036b4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80036b8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80036bc:	fb03 f202 	mul.w	r2, r3, r2
 80036c0:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80036c4:	f9b7 10b0 	ldrsh.w	r1, [r7, #176]	@ 0xb0
 80036c8:	fb01 f303 	mul.w	r3, r1, r3
 80036cc:	441a      	add	r2, r3
 80036ce:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 80036d2:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	@ 0xb4
 80036d6:	fb01 f303 	mul.w	r3, r1, r3
 80036da:	4413      	add	r3, r2
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fd faf5 	bl	8000ccc <__aeabi_i2f>
 80036e2:	4603      	mov	r3, r0
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 ff47 	bl	8004578 <invSqrt_>
 80036ea:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
		acc_x = (float)accx_ * norm;
 80036ee:	f9b7 3000 	ldrsh.w	r3, [r7]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fd faea 	bl	8000ccc <__aeabi_i2f>
 80036f8:	4603      	mov	r3, r0
 80036fa:	4619      	mov	r1, r3
 80036fc:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003700:	f7fd fb38 	bl	8000d74 <__aeabi_fmul>
 8003704:	4603      	mov	r3, r0
 8003706:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		acc_y = (float)accy_ * norm;
 800370a:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 800370e:	4618      	mov	r0, r3
 8003710:	f7fd fadc 	bl	8000ccc <__aeabi_i2f>
 8003714:	4603      	mov	r3, r0
 8003716:	4619      	mov	r1, r3
 8003718:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800371c:	f7fd fb2a 	bl	8000d74 <__aeabi_fmul>
 8003720:	4603      	mov	r3, r0
 8003722:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		acc_z = (float)accz_ * norm;
 8003726:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 800372a:	4618      	mov	r0, r3
 800372c:	f7fd face 	bl	8000ccc <__aeabi_i2f>
 8003730:	4603      	mov	r3, r0
 8003732:	4619      	mov	r1, r3
 8003734:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003738:	f7fd fb1c 	bl	8000d74 <__aeabi_fmul>
 800373c:	4603      	mov	r3, r0
 800373e:	67fb      	str	r3, [r7, #124]	@ 0x7c

		if(reset_state){
 8003740:	4b64      	ldr	r3, [pc, #400]	@ (80038d4 <update_ahrs+0x2f8>)
 8003742:	f993 3000 	ldrsb.w	r3, [r3]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00d      	beq.n	8003766 <update_ahrs+0x18a>
			dcm[0][2] = acc_x;
 800374a:	4a63      	ldr	r2, [pc, #396]	@ (80038d8 <update_ahrs+0x2fc>)
 800374c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003750:	6093      	str	r3, [r2, #8]
			dcm[1][2] = acc_y;
 8003752:	4a61      	ldr	r2, [pc, #388]	@ (80038d8 <update_ahrs+0x2fc>)
 8003754:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003758:	6153      	str	r3, [r2, #20]
			dcm[2][2] = acc_z;
 800375a:	4a5f      	ldr	r2, [pc, #380]	@ (80038d8 <update_ahrs+0x2fc>)
 800375c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800375e:	6213      	str	r3, [r2, #32]
			reset_state = 0;
 8003760:	4b5c      	ldr	r3, [pc, #368]	@ (80038d4 <update_ahrs+0x2f8>)
 8003762:	2200      	movs	r2, #0
 8003764:	701a      	strb	r2, [r3, #0]
		}

        if(USE_MAG){
			norm = invSqrt_(magx * magx + magy * magy + magz * magz);
 8003766:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	@ 0xb8
 800376a:	f9b7 20b8 	ldrsh.w	r2, [r7, #184]	@ 0xb8
 800376e:	fb03 f202 	mul.w	r2, r3, r2
 8003772:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 8003776:	f9b7 10bc 	ldrsh.w	r1, [r7, #188]	@ 0xbc
 800377a:	fb01 f303 	mul.w	r3, r1, r3
 800377e:	441a      	add	r2, r3
 8003780:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 8003784:	f9b7 10c0 	ldrsh.w	r1, [r7, #192]	@ 0xc0
 8003788:	fb01 f303 	mul.w	r3, r1, r3
 800378c:	4413      	add	r3, r2
 800378e:	4618      	mov	r0, r3
 8003790:	f7fd fa9c 	bl	8000ccc <__aeabi_i2f>
 8003794:	4603      	mov	r3, r0
 8003796:	4618      	mov	r0, r3
 8003798:	f000 feee 	bl	8004578 <invSqrt_>
 800379c:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
			mx = magx * norm;
 80037a0:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	@ 0xb8
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fd fa91 	bl	8000ccc <__aeabi_i2f>
 80037aa:	4603      	mov	r3, r0
 80037ac:	4619      	mov	r1, r3
 80037ae:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80037b2:	f7fd fadf 	bl	8000d74 <__aeabi_fmul>
 80037b6:	4603      	mov	r3, r0
 80037b8:	67bb      	str	r3, [r7, #120]	@ 0x78
			my = magy * norm;
 80037ba:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fd fa84 	bl	8000ccc <__aeabi_i2f>
 80037c4:	4603      	mov	r3, r0
 80037c6:	4619      	mov	r1, r3
 80037c8:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80037cc:	f7fd fad2 	bl	8000d74 <__aeabi_fmul>
 80037d0:	4603      	mov	r3, r0
 80037d2:	677b      	str	r3, [r7, #116]	@ 0x74
			mz = magz * norm;
 80037d4:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 80037d8:	4618      	mov	r0, r3
 80037da:	f7fd fa77 	bl	8000ccc <__aeabi_i2f>
 80037de:	4603      	mov	r3, r0
 80037e0:	4619      	mov	r1, r3
 80037e2:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80037e6:	f7fd fac5 	bl	8000d74 <__aeabi_fmul>
 80037ea:	4603      	mov	r3, r0
 80037ec:	673b      	str	r3, [r7, #112]	@ 0x70

			hx = mx * dcm[0][0] + my * dcm[1][0] + mz * dcm[2][0];
 80037ee:	4b3a      	ldr	r3, [pc, #232]	@ (80038d8 <update_ahrs+0x2fc>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fd fabd 	bl	8000d74 <__aeabi_fmul>
 80037fa:	4603      	mov	r3, r0
 80037fc:	461c      	mov	r4, r3
 80037fe:	4b36      	ldr	r3, [pc, #216]	@ (80038d8 <update_ahrs+0x2fc>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003804:	4618      	mov	r0, r3
 8003806:	f7fd fab5 	bl	8000d74 <__aeabi_fmul>
 800380a:	4603      	mov	r3, r0
 800380c:	4619      	mov	r1, r3
 800380e:	4620      	mov	r0, r4
 8003810:	f7fd f9a8 	bl	8000b64 <__addsf3>
 8003814:	4603      	mov	r3, r0
 8003816:	461c      	mov	r4, r3
 8003818:	4b2f      	ldr	r3, [pc, #188]	@ (80038d8 <update_ahrs+0x2fc>)
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800381e:	4618      	mov	r0, r3
 8003820:	f7fd faa8 	bl	8000d74 <__aeabi_fmul>
 8003824:	4603      	mov	r3, r0
 8003826:	4619      	mov	r1, r3
 8003828:	4620      	mov	r0, r4
 800382a:	f7fd f99b 	bl	8000b64 <__addsf3>
 800382e:	4603      	mov	r3, r0
 8003830:	66fb      	str	r3, [r7, #108]	@ 0x6c
			hy = mx * dcm[0][1] + my * dcm[1][1] + mz * dcm[2][1];
 8003832:	4b29      	ldr	r3, [pc, #164]	@ (80038d8 <update_ahrs+0x2fc>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8003838:	4618      	mov	r0, r3
 800383a:	f7fd fa9b 	bl	8000d74 <__aeabi_fmul>
 800383e:	4603      	mov	r3, r0
 8003840:	461c      	mov	r4, r3
 8003842:	4b25      	ldr	r3, [pc, #148]	@ (80038d8 <update_ahrs+0x2fc>)
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003848:	4618      	mov	r0, r3
 800384a:	f7fd fa93 	bl	8000d74 <__aeabi_fmul>
 800384e:	4603      	mov	r3, r0
 8003850:	4619      	mov	r1, r3
 8003852:	4620      	mov	r0, r4
 8003854:	f7fd f986 	bl	8000b64 <__addsf3>
 8003858:	4603      	mov	r3, r0
 800385a:	461c      	mov	r4, r3
 800385c:	4b1e      	ldr	r3, [pc, #120]	@ (80038d8 <update_ahrs+0x2fc>)
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8003862:	4618      	mov	r0, r3
 8003864:	f7fd fa86 	bl	8000d74 <__aeabi_fmul>
 8003868:	4603      	mov	r3, r0
 800386a:	4619      	mov	r1, r3
 800386c:	4620      	mov	r0, r4
 800386e:	f7fd f979 	bl	8000b64 <__addsf3>
 8003872:	4603      	mov	r3, r0
 8003874:	66bb      	str	r3, [r7, #104]	@ 0x68
			bz = mx * dcm[0][2] + my * dcm[1][2] + mz * dcm[2][2];
 8003876:	4b18      	ldr	r3, [pc, #96]	@ (80038d8 <update_ahrs+0x2fc>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800387c:	4618      	mov	r0, r3
 800387e:	f7fd fa79 	bl	8000d74 <__aeabi_fmul>
 8003882:	4603      	mov	r3, r0
 8003884:	461c      	mov	r4, r3
 8003886:	4b14      	ldr	r3, [pc, #80]	@ (80038d8 <update_ahrs+0x2fc>)
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800388c:	4618      	mov	r0, r3
 800388e:	f7fd fa71 	bl	8000d74 <__aeabi_fmul>
 8003892:	4603      	mov	r3, r0
 8003894:	4619      	mov	r1, r3
 8003896:	4620      	mov	r0, r4
 8003898:	f7fd f964 	bl	8000b64 <__addsf3>
 800389c:	4603      	mov	r3, r0
 800389e:	461c      	mov	r4, r3
 80038a0:	4b0d      	ldr	r3, [pc, #52]	@ (80038d8 <update_ahrs+0x2fc>)
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fd fa64 	bl	8000d74 <__aeabi_fmul>
 80038ac:	4603      	mov	r3, r0
 80038ae:	4619      	mov	r1, r3
 80038b0:	4620      	mov	r0, r4
 80038b2:	f7fd f957 	bl	8000b64 <__addsf3>
 80038b6:	4603      	mov	r3, r0
 80038b8:	667b      	str	r3, [r7, #100]	@ 0x64

			bx = sqrtf(hx * hx + hy * hy);
 80038ba:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80038bc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80038be:	f7fd fa59 	bl	8000d74 <__aeabi_fmul>
 80038c2:	e00b      	b.n	80038dc <update_ahrs+0x300>
 80038c4:	200005cc 	.word	0x200005cc
 80038c8:	358637bd 	.word	0x358637bd
 80038cc:	20000008 	.word	0x20000008
 80038d0:	3c8efa35 	.word	0x3c8efa35
 80038d4:	20000014 	.word	0x20000014
 80038d8:	20000598 	.word	0x20000598
 80038dc:	4603      	mov	r3, r0
 80038de:	461c      	mov	r4, r3
 80038e0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80038e2:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80038e4:	f7fd fa46 	bl	8000d74 <__aeabi_fmul>
 80038e8:	4603      	mov	r3, r0
 80038ea:	4619      	mov	r1, r3
 80038ec:	4620      	mov	r0, r4
 80038ee:	f7fd f939 	bl	8000b64 <__addsf3>
 80038f2:	4603      	mov	r3, r0
 80038f4:	4618      	mov	r0, r3
 80038f6:	f010 feb6 	bl	8014666 <sqrtf>
 80038fa:	6638      	str	r0, [r7, #96]	@ 0x60

			wx = bx * dcm[0][0] + bz * dcm[0][2];
 80038fc:	4b75      	ldr	r3, [pc, #468]	@ (8003ad4 <update_ahrs+0x4f8>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8003902:	4618      	mov	r0, r3
 8003904:	f7fd fa36 	bl	8000d74 <__aeabi_fmul>
 8003908:	4603      	mov	r3, r0
 800390a:	461c      	mov	r4, r3
 800390c:	4b71      	ldr	r3, [pc, #452]	@ (8003ad4 <update_ahrs+0x4f8>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003912:	4618      	mov	r0, r3
 8003914:	f7fd fa2e 	bl	8000d74 <__aeabi_fmul>
 8003918:	4603      	mov	r3, r0
 800391a:	4619      	mov	r1, r3
 800391c:	4620      	mov	r0, r4
 800391e:	f7fd f921 	bl	8000b64 <__addsf3>
 8003922:	4603      	mov	r3, r0
 8003924:	65fb      	str	r3, [r7, #92]	@ 0x5c
			wy = bx * dcm[1][0] + bz * dcm[1][2];
 8003926:	4b6b      	ldr	r3, [pc, #428]	@ (8003ad4 <update_ahrs+0x4f8>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800392c:	4618      	mov	r0, r3
 800392e:	f7fd fa21 	bl	8000d74 <__aeabi_fmul>
 8003932:	4603      	mov	r3, r0
 8003934:	461c      	mov	r4, r3
 8003936:	4b67      	ldr	r3, [pc, #412]	@ (8003ad4 <update_ahrs+0x4f8>)
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800393c:	4618      	mov	r0, r3
 800393e:	f7fd fa19 	bl	8000d74 <__aeabi_fmul>
 8003942:	4603      	mov	r3, r0
 8003944:	4619      	mov	r1, r3
 8003946:	4620      	mov	r0, r4
 8003948:	f7fd f90c 	bl	8000b64 <__addsf3>
 800394c:	4603      	mov	r3, r0
 800394e:	65bb      	str	r3, [r7, #88]	@ 0x58
			emz = mx * wy - my * wx;
 8003950:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003952:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8003954:	f7fd fa0e 	bl	8000d74 <__aeabi_fmul>
 8003958:	4603      	mov	r3, r0
 800395a:	461c      	mov	r4, r3
 800395c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800395e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8003960:	f7fd fa08 	bl	8000d74 <__aeabi_fmul>
 8003964:	4603      	mov	r3, r0
 8003966:	4619      	mov	r1, r3
 8003968:	4620      	mov	r0, r4
 800396a:	f7fd f8f9 	bl	8000b60 <__aeabi_fsub>
 800396e:	4603      	mov	r3, r0
 8003970:	657b      	str	r3, [r7, #84]	@ 0x54
		}
		else{
			emz = 0.0f;
		}

		vx = dcm[0][2];
 8003972:	4b58      	ldr	r3, [pc, #352]	@ (8003ad4 <update_ahrs+0x4f8>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	653b      	str	r3, [r7, #80]	@ 0x50
		vy = dcm[1][2];
 8003978:	4b56      	ldr	r3, [pc, #344]	@ (8003ad4 <update_ahrs+0x4f8>)
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		vz = dcm[2][2];
 800397e:	4b55      	ldr	r3, [pc, #340]	@ (8003ad4 <update_ahrs+0x4f8>)
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	64bb      	str	r3, [r7, #72]	@ 0x48

		ex = acc_y * vz - acc_z * vy;
 8003984:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003986:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800398a:	f7fd f9f3 	bl	8000d74 <__aeabi_fmul>
 800398e:	4603      	mov	r3, r0
 8003990:	461c      	mov	r4, r3
 8003992:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003994:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8003996:	f7fd f9ed 	bl	8000d74 <__aeabi_fmul>
 800399a:	4603      	mov	r3, r0
 800399c:	4619      	mov	r1, r3
 800399e:	4620      	mov	r0, r4
 80039a0:	f7fd f8de 	bl	8000b60 <__aeabi_fsub>
 80039a4:	4603      	mov	r3, r0
 80039a6:	647b      	str	r3, [r7, #68]	@ 0x44
		ey = acc_z * vx - acc_x * vz;
 80039a8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80039aa:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80039ac:	f7fd f9e2 	bl	8000d74 <__aeabi_fmul>
 80039b0:	4603      	mov	r3, r0
 80039b2:	461c      	mov	r4, r3
 80039b4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80039b6:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80039ba:	f7fd f9db 	bl	8000d74 <__aeabi_fmul>
 80039be:	4603      	mov	r3, r0
 80039c0:	4619      	mov	r1, r3
 80039c2:	4620      	mov	r0, r4
 80039c4:	f7fd f8cc 	bl	8000b60 <__aeabi_fsub>
 80039c8:	4603      	mov	r3, r0
 80039ca:	643b      	str	r3, [r7, #64]	@ 0x40
		ez = acc_x * vy - acc_y * vx;
 80039cc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80039ce:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80039d2:	f7fd f9cf 	bl	8000d74 <__aeabi_fmul>
 80039d6:	4603      	mov	r3, r0
 80039d8:	461c      	mov	r4, r3
 80039da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80039dc:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80039e0:	f7fd f9c8 	bl	8000d74 <__aeabi_fmul>
 80039e4:	4603      	mov	r3, r0
 80039e6:	4619      	mov	r1, r3
 80039e8:	4620      	mov	r0, r4
 80039ea:	f7fd f8b9 	bl	8000b60 <__aeabi_fsub>
 80039ee:	4603      	mov	r3, r0
 80039f0:	63fb      	str	r3, [r7, #60]	@ 0x3c

		if( Ki_imu  > 0.0f) {
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	f04f 0100 	mov.w	r1, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fd fb76 	bl	80010ec <__aeabi_fcmpgt>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d06e      	beq.n	8003ae4 <update_ahrs+0x508>
			integralFBx +=  Ki_imu  * ex * dt;
 8003a06:	f04f 0300 	mov.w	r3, #0
 8003a0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fd f9b1 	bl	8000d74 <__aeabi_fmul>
 8003a12:	4603      	mov	r3, r0
 8003a14:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fd f9ab 	bl	8000d74 <__aeabi_fmul>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	461a      	mov	r2, r3
 8003a22:	4b2d      	ldr	r3, [pc, #180]	@ (8003ad8 <update_ahrs+0x4fc>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4619      	mov	r1, r3
 8003a28:	4610      	mov	r0, r2
 8003a2a:	f7fd f89b 	bl	8000b64 <__addsf3>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	461a      	mov	r2, r3
 8003a32:	4b29      	ldr	r3, [pc, #164]	@ (8003ad8 <update_ahrs+0x4fc>)
 8003a34:	601a      	str	r2, [r3, #0]
			integralFBy +=  Ki_imu  * ey * dt;
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fd f999 	bl	8000d74 <__aeabi_fmul>
 8003a42:	4603      	mov	r3, r0
 8003a44:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fd f993 	bl	8000d74 <__aeabi_fmul>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	461a      	mov	r2, r3
 8003a52:	4b22      	ldr	r3, [pc, #136]	@ (8003adc <update_ahrs+0x500>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4619      	mov	r1, r3
 8003a58:	4610      	mov	r0, r2
 8003a5a:	f7fd f883 	bl	8000b64 <__addsf3>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	461a      	mov	r2, r3
 8003a62:	4b1e      	ldr	r3, [pc, #120]	@ (8003adc <update_ahrs+0x500>)
 8003a64:	601a      	str	r2, [r3, #0]
			integralFBz +=  Ki_imu  * ez * dt;
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fd f981 	bl	8000d74 <__aeabi_fmul>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fd f97b 	bl	8000d74 <__aeabi_fmul>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	461a      	mov	r2, r3
 8003a82:	4b17      	ldr	r3, [pc, #92]	@ (8003ae0 <update_ahrs+0x504>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4619      	mov	r1, r3
 8003a88:	4610      	mov	r0, r2
 8003a8a:	f7fd f86b 	bl	8000b64 <__addsf3>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	461a      	mov	r2, r3
 8003a92:	4b13      	ldr	r3, [pc, #76]	@ (8003ae0 <update_ahrs+0x504>)
 8003a94:	601a      	str	r2, [r3, #0]
			gx += integralFBx;
 8003a96:	4b10      	ldr	r3, [pc, #64]	@ (8003ad8 <update_ahrs+0x4fc>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003aa0:	f7fd f860 	bl	8000b64 <__addsf3>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
			gy += integralFBy;
 8003aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8003adc <update_ahrs+0x500>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4619      	mov	r1, r3
 8003ab0:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003ab4:	f7fd f856 	bl	8000b64 <__addsf3>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			gz += integralFBz;
 8003abe:	4b08      	ldr	r3, [pc, #32]	@ (8003ae0 <update_ahrs+0x504>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003ac8:	f7fd f84c 	bl	8000b64 <__addsf3>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003ad2:	e013      	b.n	8003afc <update_ahrs+0x520>
 8003ad4:	20000598 	.word	0x20000598
 8003ad8:	20000574 	.word	0x20000574
 8003adc:	20000578 	.word	0x20000578
 8003ae0:	2000057c 	.word	0x2000057c
		} else {
			integralFBx = 0.0f;
 8003ae4:	4ba4      	ldr	r3, [pc, #656]	@ (8003d78 <update_ahrs+0x79c>)
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8003aec:	4ba3      	ldr	r3, [pc, #652]	@ (8003d7c <update_ahrs+0x7a0>)
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8003af4:	4ba2      	ldr	r3, [pc, #648]	@ (8003d80 <update_ahrs+0x7a4>)
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
		}

		gx += Kp_imu * ex;
 8003afc:	4ba1      	ldr	r3, [pc, #644]	@ (8003d84 <update_ahrs+0x7a8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fd f936 	bl	8000d74 <__aeabi_fmul>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003b10:	f7fd f828 	bl	8000b64 <__addsf3>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		gy += Kp_imu * ey;
 8003b1a:	4b9a      	ldr	r3, [pc, #616]	@ (8003d84 <update_ahrs+0x7a8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fd f927 	bl	8000d74 <__aeabi_fmul>
 8003b26:	4603      	mov	r3, r0
 8003b28:	4619      	mov	r1, r3
 8003b2a:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003b2e:	f7fd f819 	bl	8000b64 <__addsf3>
 8003b32:	4603      	mov	r3, r0
 8003b34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		gz += Kp_imu * ez + emz * Kp_mag;
 8003b38:	4b92      	ldr	r3, [pc, #584]	@ (8003d84 <update_ahrs+0x7a8>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fd f918 	bl	8000d74 <__aeabi_fmul>
 8003b44:	4603      	mov	r3, r0
 8003b46:	461c      	mov	r4, r3
 8003b48:	4b8f      	ldr	r3, [pc, #572]	@ (8003d88 <update_ahrs+0x7ac>)
 8003b4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fd f911 	bl	8000d74 <__aeabi_fmul>
 8003b52:	4603      	mov	r3, r0
 8003b54:	4619      	mov	r1, r3
 8003b56:	4620      	mov	r0, r4
 8003b58:	f7fd f804 	bl	8000b64 <__addsf3>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	4619      	mov	r1, r3
 8003b60:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003b64:	f7fc fffe 	bl	8000b64 <__addsf3>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	}

	gx *= (0.5f * dt);
 8003b6e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003b72:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8003b76:	f7fd f8fd 	bl	8000d74 <__aeabi_fmul>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003b82:	f7fd f8f7 	bl	8000d74 <__aeabi_fmul>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	gy *= (0.5f * dt);
 8003b8c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003b90:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8003b94:	f7fd f8ee 	bl	8000d74 <__aeabi_fmul>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003ba0:	f7fd f8e8 	bl	8000d74 <__aeabi_fmul>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	gz *= (0.5f * dt);
 8003baa:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003bae:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8003bb2:	f7fd f8df 	bl	8000d74 <__aeabi_fmul>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	4619      	mov	r1, r3
 8003bba:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003bbe:	f7fd f8d9 	bl	8000d74 <__aeabi_fmul>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	q0 += (-q1 * gx - q2 * gy - q3 * gz);
 8003bc8:	4b70      	ldr	r3, [pc, #448]	@ (8003d8c <update_ahrs+0x7b0>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003bd0:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7fd f8cd 	bl	8000d74 <__aeabi_fmul>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	461c      	mov	r4, r3
 8003bde:	4b6c      	ldr	r3, [pc, #432]	@ (8003d90 <update_ahrs+0x7b4>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fd f8c4 	bl	8000d74 <__aeabi_fmul>
 8003bec:	4603      	mov	r3, r0
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	f7fc ffb5 	bl	8000b60 <__aeabi_fsub>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	461c      	mov	r4, r3
 8003bfa:	4b66      	ldr	r3, [pc, #408]	@ (8003d94 <update_ahrs+0x7b8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fd f8b6 	bl	8000d74 <__aeabi_fmul>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	f7fc ffa7 	bl	8000b60 <__aeabi_fsub>
 8003c12:	4603      	mov	r3, r0
 8003c14:	461a      	mov	r2, r3
 8003c16:	4b60      	ldr	r3, [pc, #384]	@ (8003d98 <update_ahrs+0x7bc>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	f7fc ffa1 	bl	8000b64 <__addsf3>
 8003c22:	4603      	mov	r3, r0
 8003c24:	461a      	mov	r2, r3
 8003c26:	4b5c      	ldr	r3, [pc, #368]	@ (8003d98 <update_ahrs+0x7bc>)
 8003c28:	601a      	str	r2, [r3, #0]
	q1 += ( q0 * gx + q2 * gz - q3 * gy);
 8003c2a:	4b5b      	ldr	r3, [pc, #364]	@ (8003d98 <update_ahrs+0x7bc>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fd f89e 	bl	8000d74 <__aeabi_fmul>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	461c      	mov	r4, r3
 8003c3c:	4b54      	ldr	r3, [pc, #336]	@ (8003d90 <update_ahrs+0x7b4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fd f895 	bl	8000d74 <__aeabi_fmul>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4620      	mov	r0, r4
 8003c50:	f7fc ff88 	bl	8000b64 <__addsf3>
 8003c54:	4603      	mov	r3, r0
 8003c56:	461c      	mov	r4, r3
 8003c58:	4b4e      	ldr	r3, [pc, #312]	@ (8003d94 <update_ahrs+0x7b8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fd f887 	bl	8000d74 <__aeabi_fmul>
 8003c66:	4603      	mov	r3, r0
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f7fc ff78 	bl	8000b60 <__aeabi_fsub>
 8003c70:	4603      	mov	r3, r0
 8003c72:	461a      	mov	r2, r3
 8003c74:	4b45      	ldr	r3, [pc, #276]	@ (8003d8c <update_ahrs+0x7b0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	f7fc ff72 	bl	8000b64 <__addsf3>
 8003c80:	4603      	mov	r3, r0
 8003c82:	461a      	mov	r2, r3
 8003c84:	4b41      	ldr	r3, [pc, #260]	@ (8003d8c <update_ahrs+0x7b0>)
 8003c86:	601a      	str	r2, [r3, #0]
	q2 += ( q0 * gy - q1 * gz + q3 * gx);
 8003c88:	4b43      	ldr	r3, [pc, #268]	@ (8003d98 <update_ahrs+0x7bc>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7fd f86f 	bl	8000d74 <__aeabi_fmul>
 8003c96:	4603      	mov	r3, r0
 8003c98:	461c      	mov	r4, r3
 8003c9a:	4b3c      	ldr	r3, [pc, #240]	@ (8003d8c <update_ahrs+0x7b0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fd f866 	bl	8000d74 <__aeabi_fmul>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	4619      	mov	r1, r3
 8003cac:	4620      	mov	r0, r4
 8003cae:	f7fc ff57 	bl	8000b60 <__aeabi_fsub>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	461c      	mov	r4, r3
 8003cb6:	4b37      	ldr	r3, [pc, #220]	@ (8003d94 <update_ahrs+0x7b8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fd f858 	bl	8000d74 <__aeabi_fmul>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f7fc ff4b 	bl	8000b64 <__addsf3>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8003d90 <update_ahrs+0x7b4>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4610      	mov	r0, r2
 8003cda:	f7fc ff43 	bl	8000b64 <__addsf3>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4b2b      	ldr	r3, [pc, #172]	@ (8003d90 <update_ahrs+0x7b4>)
 8003ce4:	601a      	str	r2, [r3, #0]
	q3 += ( q0 * gz + q1 * gy - q2 * gx);
 8003ce6:	4b2c      	ldr	r3, [pc, #176]	@ (8003d98 <update_ahrs+0x7bc>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fd f840 	bl	8000d74 <__aeabi_fmul>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	461c      	mov	r4, r3
 8003cf8:	4b24      	ldr	r3, [pc, #144]	@ (8003d8c <update_ahrs+0x7b0>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fd f837 	bl	8000d74 <__aeabi_fmul>
 8003d06:	4603      	mov	r3, r0
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	f7fc ff2a 	bl	8000b64 <__addsf3>
 8003d10:	4603      	mov	r3, r0
 8003d12:	461c      	mov	r4, r3
 8003d14:	4b1e      	ldr	r3, [pc, #120]	@ (8003d90 <update_ahrs+0x7b4>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fd f829 	bl	8000d74 <__aeabi_fmul>
 8003d22:	4603      	mov	r3, r0
 8003d24:	4619      	mov	r1, r3
 8003d26:	4620      	mov	r0, r4
 8003d28:	f7fc ff1a 	bl	8000b60 <__aeabi_fsub>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	461a      	mov	r2, r3
 8003d30:	4b18      	ldr	r3, [pc, #96]	@ (8003d94 <update_ahrs+0x7b8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4619      	mov	r1, r3
 8003d36:	4610      	mov	r0, r2
 8003d38:	f7fc ff14 	bl	8000b64 <__addsf3>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	461a      	mov	r2, r3
 8003d40:	4b14      	ldr	r3, [pc, #80]	@ (8003d94 <update_ahrs+0x7b8>)
 8003d42:	601a      	str	r2, [r3, #0]

	norm = invSqrt_(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8003d44:	4b14      	ldr	r3, [pc, #80]	@ (8003d98 <update_ahrs+0x7bc>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a13      	ldr	r2, [pc, #76]	@ (8003d98 <update_ahrs+0x7bc>)
 8003d4a:	6812      	ldr	r2, [r2, #0]
 8003d4c:	4611      	mov	r1, r2
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fd f810 	bl	8000d74 <__aeabi_fmul>
 8003d54:	4603      	mov	r3, r0
 8003d56:	461c      	mov	r4, r3
 8003d58:	4b0c      	ldr	r3, [pc, #48]	@ (8003d8c <update_ahrs+0x7b0>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8003d8c <update_ahrs+0x7b0>)
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	4611      	mov	r1, r2
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fd f806 	bl	8000d74 <__aeabi_fmul>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	f7fc fef9 	bl	8000b64 <__addsf3>
 8003d72:	4603      	mov	r3, r0
 8003d74:	461c      	mov	r4, r3
 8003d76:	e011      	b.n	8003d9c <update_ahrs+0x7c0>
 8003d78:	20000574 	.word	0x20000574
 8003d7c:	20000578 	.word	0x20000578
 8003d80:	2000057c 	.word	0x2000057c
 8003d84:	20000000 	.word	0x20000000
 8003d88:	40a00000 	.word	0x40a00000
 8003d8c:	2000058c 	.word	0x2000058c
 8003d90:	20000590 	.word	0x20000590
 8003d94:	20000594 	.word	0x20000594
 8003d98:	20000004 	.word	0x20000004
 8003d9c:	4b96      	ldr	r3, [pc, #600]	@ (8003ff8 <update_ahrs+0xa1c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a95      	ldr	r2, [pc, #596]	@ (8003ff8 <update_ahrs+0xa1c>)
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	4611      	mov	r1, r2
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fc ffe4 	bl	8000d74 <__aeabi_fmul>
 8003dac:	4603      	mov	r3, r0
 8003dae:	4619      	mov	r1, r3
 8003db0:	4620      	mov	r0, r4
 8003db2:	f7fc fed7 	bl	8000b64 <__addsf3>
 8003db6:	4603      	mov	r3, r0
 8003db8:	461c      	mov	r4, r3
 8003dba:	4b90      	ldr	r3, [pc, #576]	@ (8003ffc <update_ahrs+0xa20>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a8f      	ldr	r2, [pc, #572]	@ (8003ffc <update_ahrs+0xa20>)
 8003dc0:	6812      	ldr	r2, [r2, #0]
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fc ffd5 	bl	8000d74 <__aeabi_fmul>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4620      	mov	r0, r4
 8003dd0:	f7fc fec8 	bl	8000b64 <__addsf3>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 fbce 	bl	8004578 <invSqrt_>
 8003ddc:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	q0 *= norm;
 8003de0:	4b87      	ldr	r3, [pc, #540]	@ (8004000 <update_ahrs+0xa24>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fc ffc3 	bl	8000d74 <__aeabi_fmul>
 8003dee:	4603      	mov	r3, r0
 8003df0:	461a      	mov	r2, r3
 8003df2:	4b83      	ldr	r3, [pc, #524]	@ (8004000 <update_ahrs+0xa24>)
 8003df4:	601a      	str	r2, [r3, #0]
	q1 *= norm;
 8003df6:	4b83      	ldr	r3, [pc, #524]	@ (8004004 <update_ahrs+0xa28>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fc ffb8 	bl	8000d74 <__aeabi_fmul>
 8003e04:	4603      	mov	r3, r0
 8003e06:	461a      	mov	r2, r3
 8003e08:	4b7e      	ldr	r3, [pc, #504]	@ (8004004 <update_ahrs+0xa28>)
 8003e0a:	601a      	str	r2, [r3, #0]
	q2 *= norm;
 8003e0c:	4b7a      	ldr	r3, [pc, #488]	@ (8003ff8 <update_ahrs+0xa1c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fc ffad 	bl	8000d74 <__aeabi_fmul>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4b76      	ldr	r3, [pc, #472]	@ (8003ff8 <update_ahrs+0xa1c>)
 8003e20:	601a      	str	r2, [r3, #0]
	q3 *= norm;
 8003e22:	4b76      	ldr	r3, [pc, #472]	@ (8003ffc <update_ahrs+0xa20>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fc ffa2 	bl	8000d74 <__aeabi_fmul>
 8003e30:	4603      	mov	r3, r0
 8003e32:	461a      	mov	r2, r3
 8003e34:	4b71      	ldr	r3, [pc, #452]	@ (8003ffc <update_ahrs+0xa20>)
 8003e36:	601a      	str	r2, [r3, #0]
	
	float q0q1 = q0*q1;
 8003e38:	4b71      	ldr	r3, [pc, #452]	@ (8004000 <update_ahrs+0xa24>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a71      	ldr	r2, [pc, #452]	@ (8004004 <update_ahrs+0xa28>)
 8003e3e:	6812      	ldr	r2, [r2, #0]
 8003e40:	4611      	mov	r1, r2
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fc ff96 	bl	8000d74 <__aeabi_fmul>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
	float q0q2 = q0*q2;
 8003e4c:	4b6c      	ldr	r3, [pc, #432]	@ (8004000 <update_ahrs+0xa24>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a69      	ldr	r2, [pc, #420]	@ (8003ff8 <update_ahrs+0xa1c>)
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	4611      	mov	r1, r2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fc ff8c 	bl	8000d74 <__aeabi_fmul>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	637b      	str	r3, [r7, #52]	@ 0x34
	float q0q3 = q0*q3;
 8003e60:	4b67      	ldr	r3, [pc, #412]	@ (8004000 <update_ahrs+0xa24>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a65      	ldr	r2, [pc, #404]	@ (8003ffc <update_ahrs+0xa20>)
 8003e66:	6812      	ldr	r2, [r2, #0]
 8003e68:	4611      	mov	r1, r2
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fc ff82 	bl	8000d74 <__aeabi_fmul>
 8003e70:	4603      	mov	r3, r0
 8003e72:	633b      	str	r3, [r7, #48]	@ 0x30
	float q1q1 = q1*q1;
 8003e74:	4b63      	ldr	r3, [pc, #396]	@ (8004004 <update_ahrs+0xa28>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a62      	ldr	r2, [pc, #392]	@ (8004004 <update_ahrs+0xa28>)
 8003e7a:	6812      	ldr	r2, [r2, #0]
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fc ff78 	bl	8000d74 <__aeabi_fmul>
 8003e84:	4603      	mov	r3, r0
 8003e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float q1q2 = q1*q2;
 8003e88:	4b5e      	ldr	r3, [pc, #376]	@ (8004004 <update_ahrs+0xa28>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a5a      	ldr	r2, [pc, #360]	@ (8003ff8 <update_ahrs+0xa1c>)
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	4611      	mov	r1, r2
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fc ff6e 	bl	8000d74 <__aeabi_fmul>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
	float q1q3 = q1*q3;
 8003e9c:	4b59      	ldr	r3, [pc, #356]	@ (8004004 <update_ahrs+0xa28>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a56      	ldr	r2, [pc, #344]	@ (8003ffc <update_ahrs+0xa20>)
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	4611      	mov	r1, r2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fc ff64 	bl	8000d74 <__aeabi_fmul>
 8003eac:	4603      	mov	r3, r0
 8003eae:	627b      	str	r3, [r7, #36]	@ 0x24
	float q2q2 = q2*q2;
 8003eb0:	4b51      	ldr	r3, [pc, #324]	@ (8003ff8 <update_ahrs+0xa1c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a50      	ldr	r2, [pc, #320]	@ (8003ff8 <update_ahrs+0xa1c>)
 8003eb6:	6812      	ldr	r2, [r2, #0]
 8003eb8:	4611      	mov	r1, r2
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fc ff5a 	bl	8000d74 <__aeabi_fmul>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	623b      	str	r3, [r7, #32]
	float q2q3 = q2*q3;
 8003ec4:	4b4c      	ldr	r3, [pc, #304]	@ (8003ff8 <update_ahrs+0xa1c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a4c      	ldr	r2, [pc, #304]	@ (8003ffc <update_ahrs+0xa20>)
 8003eca:	6812      	ldr	r2, [r2, #0]
 8003ecc:	4611      	mov	r1, r2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fc ff50 	bl	8000d74 <__aeabi_fmul>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	61fb      	str	r3, [r7, #28]
	float q3q3 = q3*q3;
 8003ed8:	4b48      	ldr	r3, [pc, #288]	@ (8003ffc <update_ahrs+0xa20>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a47      	ldr	r2, [pc, #284]	@ (8003ffc <update_ahrs+0xa20>)
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	4611      	mov	r1, r2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fc ff46 	bl	8000d74 <__aeabi_fmul>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	61bb      	str	r3, [r7, #24]

	// Quaternion to Rotation matrix
	dcm[0][0] = 2.0f*(0.5f - q2q2  - q3q3);
 8003eec:	6a39      	ldr	r1, [r7, #32]
 8003eee:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8003ef2:	f7fc fe35 	bl	8000b60 <__aeabi_fsub>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	69b9      	ldr	r1, [r7, #24]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fc fe30 	bl	8000b60 <__aeabi_fsub>
 8003f00:	4603      	mov	r3, r0
 8003f02:	4619      	mov	r1, r3
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7fc fe2d 	bl	8000b64 <__addsf3>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8004008 <update_ahrs+0xa2c>)
 8003f10:	601a      	str	r2, [r3, #0]
	dcm[1][0] = 2.0f*(q1q2 - q0q3);
 8003f12:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f16:	f7fc fe23 	bl	8000b60 <__aeabi_fsub>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fc fe20 	bl	8000b64 <__addsf3>
 8003f24:	4603      	mov	r3, r0
 8003f26:	461a      	mov	r2, r3
 8003f28:	4b37      	ldr	r3, [pc, #220]	@ (8004008 <update_ahrs+0xa2c>)
 8003f2a:	60da      	str	r2, [r3, #12]
	dcm[2][0] = 2.0f*(q1q3 + q0q2);
 8003f2c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003f2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f30:	f7fc fe18 	bl	8000b64 <__addsf3>
 8003f34:	4603      	mov	r3, r0
 8003f36:	4619      	mov	r1, r3
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7fc fe13 	bl	8000b64 <__addsf3>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	461a      	mov	r2, r3
 8003f42:	4b31      	ldr	r3, [pc, #196]	@ (8004008 <update_ahrs+0xa2c>)
 8003f44:	619a      	str	r2, [r3, #24]
	dcm[0][1] = 2.0f*(q1q2 + q0q3);
 8003f46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f4a:	f7fc fe0b 	bl	8000b64 <__addsf3>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	4619      	mov	r1, r3
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fc fe06 	bl	8000b64 <__addsf3>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8004008 <update_ahrs+0xa2c>)
 8003f5e:	605a      	str	r2, [r3, #4]
	dcm[1][1] = 2.0f*(0.5f - q1q1 - q3q3);
 8003f60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f62:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8003f66:	f7fc fdfb 	bl	8000b60 <__aeabi_fsub>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	69b9      	ldr	r1, [r7, #24]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fc fdf6 	bl	8000b60 <__aeabi_fsub>
 8003f74:	4603      	mov	r3, r0
 8003f76:	4619      	mov	r1, r3
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fc fdf3 	bl	8000b64 <__addsf3>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	461a      	mov	r2, r3
 8003f82:	4b21      	ldr	r3, [pc, #132]	@ (8004008 <update_ahrs+0xa2c>)
 8003f84:	611a      	str	r2, [r3, #16]
	dcm[2][1] = 2.0f*(q2q3 - q0q1);
 8003f86:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f88:	69f8      	ldr	r0, [r7, #28]
 8003f8a:	f7fc fde9 	bl	8000b60 <__aeabi_fsub>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	4619      	mov	r1, r3
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fc fde6 	bl	8000b64 <__addsf3>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8004008 <update_ahrs+0xa2c>)
 8003f9e:	61da      	str	r2, [r3, #28]
	dcm[0][2] = 2.0f*(q1q3 - q0q2);
 8003fa0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003fa2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003fa4:	f7fc fddc 	bl	8000b60 <__aeabi_fsub>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	4619      	mov	r1, r3
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fc fdd9 	bl	8000b64 <__addsf3>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4b14      	ldr	r3, [pc, #80]	@ (8004008 <update_ahrs+0xa2c>)
 8003fb8:	609a      	str	r2, [r3, #8]
	dcm[1][2] = 2.0f*(q2q3 + q0q1);
 8003fba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003fbc:	69f8      	ldr	r0, [r7, #28]
 8003fbe:	f7fc fdd1 	bl	8000b64 <__addsf3>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fc fdcc 	bl	8000b64 <__addsf3>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	461a      	mov	r2, r3
 8003fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8004008 <update_ahrs+0xa2c>)
 8003fd2:	615a      	str	r2, [r3, #20]
	dcm[2][2] = 2.0f*(0.5f - q1q1 - q2q2);
 8003fd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fd6:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8003fda:	f7fc fdc1 	bl	8000b60 <__aeabi_fsub>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	6a39      	ldr	r1, [r7, #32]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fc fdbc 	bl	8000b60 <__aeabi_fsub>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	4619      	mov	r1, r3
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fc fdb9 	bl	8000b64 <__addsf3>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	e009      	b.n	800400c <update_ahrs+0xa30>
 8003ff8:	20000590 	.word	0x20000590
 8003ffc:	20000594 	.word	0x20000594
 8004000:	20000004 	.word	0x20000004
 8004004:	2000058c 	.word	0x2000058c
 8004008:	20000598 	.word	0x20000598
 800400c:	4ba3      	ldr	r3, [pc, #652]	@ (800429c <update_ahrs+0xcc0>)
 800400e:	621a      	str	r2, [r3, #32]
	
    // Rotate acceleration from Body frame to earth frame
	int16_t acc_Eframex = dcm[0][0]*accx_ + dcm[1][0]*accy_ + dcm[2][0]*accz_;
 8004010:	4ba2      	ldr	r3, [pc, #648]	@ (800429c <update_ahrs+0xcc0>)
 8004012:	681c      	ldr	r4, [r3, #0]
 8004014:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004018:	4618      	mov	r0, r3
 800401a:	f7fc fe57 	bl	8000ccc <__aeabi_i2f>
 800401e:	4603      	mov	r3, r0
 8004020:	4619      	mov	r1, r3
 8004022:	4620      	mov	r0, r4
 8004024:	f7fc fea6 	bl	8000d74 <__aeabi_fmul>
 8004028:	4603      	mov	r3, r0
 800402a:	461d      	mov	r5, r3
 800402c:	4b9b      	ldr	r3, [pc, #620]	@ (800429c <update_ahrs+0xcc0>)
 800402e:	68dc      	ldr	r4, [r3, #12]
 8004030:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8004034:	4618      	mov	r0, r3
 8004036:	f7fc fe49 	bl	8000ccc <__aeabi_i2f>
 800403a:	4603      	mov	r3, r0
 800403c:	4619      	mov	r1, r3
 800403e:	4620      	mov	r0, r4
 8004040:	f7fc fe98 	bl	8000d74 <__aeabi_fmul>
 8004044:	4603      	mov	r3, r0
 8004046:	4619      	mov	r1, r3
 8004048:	4628      	mov	r0, r5
 800404a:	f7fc fd8b 	bl	8000b64 <__addsf3>
 800404e:	4603      	mov	r3, r0
 8004050:	461d      	mov	r5, r3
 8004052:	4b92      	ldr	r3, [pc, #584]	@ (800429c <update_ahrs+0xcc0>)
 8004054:	699c      	ldr	r4, [r3, #24]
 8004056:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 800405a:	4618      	mov	r0, r3
 800405c:	f7fc fe36 	bl	8000ccc <__aeabi_i2f>
 8004060:	4603      	mov	r3, r0
 8004062:	4619      	mov	r1, r3
 8004064:	4620      	mov	r0, r4
 8004066:	f7fc fe85 	bl	8000d74 <__aeabi_fmul>
 800406a:	4603      	mov	r3, r0
 800406c:	4619      	mov	r1, r3
 800406e:	4628      	mov	r0, r5
 8004070:	f7fc fd78 	bl	8000b64 <__addsf3>
 8004074:	4603      	mov	r3, r0
 8004076:	4618      	mov	r0, r3
 8004078:	f7fd f858 	bl	800112c <__aeabi_f2iz>
 800407c:	4603      	mov	r3, r0
 800407e:	82fb      	strh	r3, [r7, #22]
	int16_t acc_Eframey = dcm[0][1]*accx_ + dcm[1][1]*accy_ + dcm[2][1]*accz_;
 8004080:	4b86      	ldr	r3, [pc, #536]	@ (800429c <update_ahrs+0xcc0>)
 8004082:	685c      	ldr	r4, [r3, #4]
 8004084:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004088:	4618      	mov	r0, r3
 800408a:	f7fc fe1f 	bl	8000ccc <__aeabi_i2f>
 800408e:	4603      	mov	r3, r0
 8004090:	4619      	mov	r1, r3
 8004092:	4620      	mov	r0, r4
 8004094:	f7fc fe6e 	bl	8000d74 <__aeabi_fmul>
 8004098:	4603      	mov	r3, r0
 800409a:	461d      	mov	r5, r3
 800409c:	4b7f      	ldr	r3, [pc, #508]	@ (800429c <update_ahrs+0xcc0>)
 800409e:	691c      	ldr	r4, [r3, #16]
 80040a0:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fc fe11 	bl	8000ccc <__aeabi_i2f>
 80040aa:	4603      	mov	r3, r0
 80040ac:	4619      	mov	r1, r3
 80040ae:	4620      	mov	r0, r4
 80040b0:	f7fc fe60 	bl	8000d74 <__aeabi_fmul>
 80040b4:	4603      	mov	r3, r0
 80040b6:	4619      	mov	r1, r3
 80040b8:	4628      	mov	r0, r5
 80040ba:	f7fc fd53 	bl	8000b64 <__addsf3>
 80040be:	4603      	mov	r3, r0
 80040c0:	461d      	mov	r5, r3
 80040c2:	4b76      	ldr	r3, [pc, #472]	@ (800429c <update_ahrs+0xcc0>)
 80040c4:	69dc      	ldr	r4, [r3, #28]
 80040c6:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fc fdfe 	bl	8000ccc <__aeabi_i2f>
 80040d0:	4603      	mov	r3, r0
 80040d2:	4619      	mov	r1, r3
 80040d4:	4620      	mov	r0, r4
 80040d6:	f7fc fe4d 	bl	8000d74 <__aeabi_fmul>
 80040da:	4603      	mov	r3, r0
 80040dc:	4619      	mov	r1, r3
 80040de:	4628      	mov	r0, r5
 80040e0:	f7fc fd40 	bl	8000b64 <__addsf3>
 80040e4:	4603      	mov	r3, r0
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fd f820 	bl	800112c <__aeabi_f2iz>
 80040ec:	4603      	mov	r3, r0
 80040ee:	82bb      	strh	r3, [r7, #20]
	int16_t acc_Eframez = dcm[0][2]*accx_ + dcm[1][2]*accy_ + dcm[2][2]*accz_;
 80040f0:	4b6a      	ldr	r3, [pc, #424]	@ (800429c <update_ahrs+0xcc0>)
 80040f2:	689c      	ldr	r4, [r3, #8]
 80040f4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fc fde7 	bl	8000ccc <__aeabi_i2f>
 80040fe:	4603      	mov	r3, r0
 8004100:	4619      	mov	r1, r3
 8004102:	4620      	mov	r0, r4
 8004104:	f7fc fe36 	bl	8000d74 <__aeabi_fmul>
 8004108:	4603      	mov	r3, r0
 800410a:	461d      	mov	r5, r3
 800410c:	4b63      	ldr	r3, [pc, #396]	@ (800429c <update_ahrs+0xcc0>)
 800410e:	695c      	ldr	r4, [r3, #20]
 8004110:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8004114:	4618      	mov	r0, r3
 8004116:	f7fc fdd9 	bl	8000ccc <__aeabi_i2f>
 800411a:	4603      	mov	r3, r0
 800411c:	4619      	mov	r1, r3
 800411e:	4620      	mov	r0, r4
 8004120:	f7fc fe28 	bl	8000d74 <__aeabi_fmul>
 8004124:	4603      	mov	r3, r0
 8004126:	4619      	mov	r1, r3
 8004128:	4628      	mov	r0, r5
 800412a:	f7fc fd1b 	bl	8000b64 <__addsf3>
 800412e:	4603      	mov	r3, r0
 8004130:	461d      	mov	r5, r3
 8004132:	4b5a      	ldr	r3, [pc, #360]	@ (800429c <update_ahrs+0xcc0>)
 8004134:	6a1c      	ldr	r4, [r3, #32]
 8004136:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 800413a:	4618      	mov	r0, r3
 800413c:	f7fc fdc6 	bl	8000ccc <__aeabi_i2f>
 8004140:	4603      	mov	r3, r0
 8004142:	4619      	mov	r1, r3
 8004144:	4620      	mov	r0, r4
 8004146:	f7fc fe15 	bl	8000d74 <__aeabi_fmul>
 800414a:	4603      	mov	r3, r0
 800414c:	4619      	mov	r1, r3
 800414e:	4628      	mov	r0, r5
 8004150:	f7fc fd08 	bl	8000b64 <__addsf3>
 8004154:	4603      	mov	r3, r0
 8004156:	4618      	mov	r0, r3
 8004158:	f7fc ffe8 	bl	800112c <__aeabi_f2iz>
 800415c:	4603      	mov	r3, r0
 800415e:	827b      	strh	r3, [r7, #18]
	acc_Eframez -= 2000;
 8004160:	8a7b      	ldrh	r3, [r7, #18]
 8004162:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8004166:	b29b      	uxth	r3, r3
 8004168:	827b      	strh	r3, [r7, #18]


	const float accTrueScale = 9.81f/2000.0f; // 2048
 800416a:	4b4d      	ldr	r3, [pc, #308]	@ (80042a0 <update_ahrs+0xcc4>)
 800416c:	60fb      	str	r3, [r7, #12]
	acc_Eframe[X] = acc_Eframex*accTrueScale;
 800416e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004172:	4618      	mov	r0, r3
 8004174:	f7fc fdaa 	bl	8000ccc <__aeabi_i2f>
 8004178:	4603      	mov	r3, r0
 800417a:	68f9      	ldr	r1, [r7, #12]
 800417c:	4618      	mov	r0, r3
 800417e:	f7fc fdf9 	bl	8000d74 <__aeabi_fmul>
 8004182:	4603      	mov	r3, r0
 8004184:	461a      	mov	r2, r3
 8004186:	4b47      	ldr	r3, [pc, #284]	@ (80042a4 <update_ahrs+0xcc8>)
 8004188:	601a      	str	r2, [r3, #0]
	acc_Eframe[Y] = acc_Eframey*accTrueScale;
 800418a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800418e:	4618      	mov	r0, r3
 8004190:	f7fc fd9c 	bl	8000ccc <__aeabi_i2f>
 8004194:	4603      	mov	r3, r0
 8004196:	68f9      	ldr	r1, [r7, #12]
 8004198:	4618      	mov	r0, r3
 800419a:	f7fc fdeb 	bl	8000d74 <__aeabi_fmul>
 800419e:	4603      	mov	r3, r0
 80041a0:	461a      	mov	r2, r3
 80041a2:	4b40      	ldr	r3, [pc, #256]	@ (80042a4 <update_ahrs+0xcc8>)
 80041a4:	605a      	str	r2, [r3, #4]
	acc_Eframe[Z] = acc_Eframez*accTrueScale;
 80041a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fc fd8e 	bl	8000ccc <__aeabi_i2f>
 80041b0:	4603      	mov	r3, r0
 80041b2:	68f9      	ldr	r1, [r7, #12]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fc fddd 	bl	8000d74 <__aeabi_fmul>
 80041ba:	4603      	mov	r3, r0
 80041bc:	461a      	mov	r2, r3
 80041be:	4b39      	ldr	r3, [pc, #228]	@ (80042a4 <update_ahrs+0xcc8>)
 80041c0:	609a      	str	r2, [r3, #8]

	acc_Eframe[X] = fapplyDeadband(acc_Eframe[X],0.02);
 80041c2:	4b38      	ldr	r3, [pc, #224]	@ (80042a4 <update_ahrs+0xcc8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4938      	ldr	r1, [pc, #224]	@ (80042a8 <update_ahrs+0xccc>)
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 f9ab 	bl	8004524 <fapplyDeadband>
 80041ce:	4603      	mov	r3, r0
 80041d0:	4a34      	ldr	r2, [pc, #208]	@ (80042a4 <update_ahrs+0xcc8>)
 80041d2:	6013      	str	r3, [r2, #0]
	acc_Eframe[Y] = fapplyDeadband(acc_Eframe[Y],0.02);
 80041d4:	4b33      	ldr	r3, [pc, #204]	@ (80042a4 <update_ahrs+0xcc8>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	4933      	ldr	r1, [pc, #204]	@ (80042a8 <update_ahrs+0xccc>)
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 f9a2 	bl	8004524 <fapplyDeadband>
 80041e0:	4603      	mov	r3, r0
 80041e2:	4a30      	ldr	r2, [pc, #192]	@ (80042a4 <update_ahrs+0xcc8>)
 80041e4:	6053      	str	r3, [r2, #4]
	acc_Eframe[Z] = fapplyDeadband(acc_Eframe[Z],0.02);
 80041e6:	4b2f      	ldr	r3, [pc, #188]	@ (80042a4 <update_ahrs+0xcc8>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	492f      	ldr	r1, [pc, #188]	@ (80042a8 <update_ahrs+0xccc>)
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 f999 	bl	8004524 <fapplyDeadband>
 80041f2:	4603      	mov	r3, r0
 80041f4:	4a2b      	ldr	r2, [pc, #172]	@ (80042a4 <update_ahrs+0xcc8>)
 80041f6:	6093      	str	r3, [r2, #8]

    if(millis() - init_us < 5000){
 80041f8:	4b2c      	ldr	r3, [pc, #176]	@ (80042ac <update_ahrs+0xcd0>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004200:	4b2b      	ldr	r3, [pc, #172]	@ (80042b0 <update_ahrs+0xcd4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4413      	add	r3, r2
 8004206:	4a2b      	ldr	r2, [pc, #172]	@ (80042b4 <update_ahrs+0xcd8>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	099a      	lsrs	r2, r3, #6
 800420e:	4b2a      	ldr	r3, [pc, #168]	@ (80042b8 <update_ahrs+0xcdc>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	f241 3287 	movw	r2, #4999	@ 0x1387
 8004218:	4293      	cmp	r3, r2
 800421a:	d80b      	bhi.n	8004234 <update_ahrs+0xc58>
    	acc_Eframe[X] = 0;
 800421c:	4b21      	ldr	r3, [pc, #132]	@ (80042a4 <update_ahrs+0xcc8>)
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	601a      	str	r2, [r3, #0]
    	acc_Eframe[Y] = 0;
 8004224:	4b1f      	ldr	r3, [pc, #124]	@ (80042a4 <update_ahrs+0xcc8>)
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	605a      	str	r2, [r3, #4]
    	acc_Eframe[Z] = 0;
 800422c:	4b1d      	ldr	r3, [pc, #116]	@ (80042a4 <update_ahrs+0xcc8>)
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	609a      	str	r2, [r3, #8]

	//position_test += velocity_test*0.01f + 0.5* acc_Eframe[Z]* 0.01f * 0.01f;

	//velocity_test += acc_Eframe[Z]*0.01f;

	AHRS.pitch = -atan2_approx(-dcm[0][2],sqrtf(1 - dcm[0][2]*dcm[0][2]))*DEG;
 8004234:	4b19      	ldr	r3, [pc, #100]	@ (800429c <update_ahrs+0xcc0>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 800423c:	4b17      	ldr	r3, [pc, #92]	@ (800429c <update_ahrs+0xcc0>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	4a16      	ldr	r2, [pc, #88]	@ (800429c <update_ahrs+0xcc0>)
 8004242:	6892      	ldr	r2, [r2, #8]
 8004244:	4611      	mov	r1, r2
 8004246:	4618      	mov	r0, r3
 8004248:	f7fc fd94 	bl	8000d74 <__aeabi_fmul>
 800424c:	4603      	mov	r3, r0
 800424e:	4619      	mov	r1, r3
 8004250:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004254:	f7fc fc84 	bl	8000b60 <__aeabi_fsub>
 8004258:	4603      	mov	r3, r0
 800425a:	4618      	mov	r0, r3
 800425c:	f010 fa03 	bl	8014666 <sqrtf>
 8004260:	4603      	mov	r3, r0
 8004262:	4619      	mov	r1, r3
 8004264:	4620      	mov	r0, r4
 8004266:	f000 f89d 	bl	80043a4 <atan2_approx>
 800426a:	4603      	mov	r3, r0
 800426c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004270:	4912      	ldr	r1, [pc, #72]	@ (80042bc <update_ahrs+0xce0>)
 8004272:	4618      	mov	r0, r3
 8004274:	f7fc fd7e 	bl	8000d74 <__aeabi_fmul>
 8004278:	4603      	mov	r3, r0
 800427a:	461a      	mov	r2, r3
 800427c:	4b10      	ldr	r3, [pc, #64]	@ (80042c0 <update_ahrs+0xce4>)
 800427e:	605a      	str	r2, [r3, #4]
	AHRS.roll = -atan2_approx(-dcm[1][2],dcm[2][2])*DEG;
 8004280:	4b06      	ldr	r3, [pc, #24]	@ (800429c <update_ahrs+0xcc0>)
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004288:	4a04      	ldr	r2, [pc, #16]	@ (800429c <update_ahrs+0xcc0>)
 800428a:	6a12      	ldr	r2, [r2, #32]
 800428c:	4611      	mov	r1, r2
 800428e:	4618      	mov	r0, r3
 8004290:	f000 f888 	bl	80043a4 <atan2_approx>
 8004294:	4603      	mov	r3, r0
 8004296:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800429a:	e013      	b.n	80042c4 <update_ahrs+0xce8>
 800429c:	20000598 	.word	0x20000598
 80042a0:	3ba0ba20 	.word	0x3ba0ba20
 80042a4:	20000580 	.word	0x20000580
 80042a8:	3ca3d70a 	.word	0x3ca3d70a
 80042ac:	200005dc 	.word	0x200005dc
 80042b0:	200005e0 	.word	0x200005e0
 80042b4:	10624dd3 	.word	0x10624dd3
 80042b8:	200005bc 	.word	0x200005bc
 80042bc:	42652ee0 	.word	0x42652ee0
 80042c0:	2000055c 	.word	0x2000055c
 80042c4:	4932      	ldr	r1, [pc, #200]	@ (8004390 <update_ahrs+0xdb4>)
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fc fd54 	bl	8000d74 <__aeabi_fmul>
 80042cc:	4603      	mov	r3, r0
 80042ce:	461a      	mov	r2, r3
 80042d0:	4b30      	ldr	r3, [pc, #192]	@ (8004394 <update_ahrs+0xdb8>)
 80042d2:	601a      	str	r2, [r3, #0]
	float yaw_ = -atan2_approx(dcm[0][1],dcm[0][0])*DEG;
 80042d4:	4b30      	ldr	r3, [pc, #192]	@ (8004398 <update_ahrs+0xdbc>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	4a2f      	ldr	r2, [pc, #188]	@ (8004398 <update_ahrs+0xdbc>)
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	4611      	mov	r1, r2
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 f860 	bl	80043a4 <atan2_approx>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80042ea:	4929      	ldr	r1, [pc, #164]	@ (8004390 <update_ahrs+0xdb4>)
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fc fd41 	bl	8000d74 <__aeabi_fmul>
 80042f2:	4603      	mov	r3, r0
 80042f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	if(yaw_ < 0){
 80042f8:	f04f 0100 	mov.w	r1, #0
 80042fc:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8004300:	f7fc fed6 	bl	80010b0 <__aeabi_fcmplt>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d007      	beq.n	800431a <update_ahrs+0xd3e>
		 yaw_ = 360 + yaw_;
 800430a:	4924      	ldr	r1, [pc, #144]	@ (800439c <update_ahrs+0xdc0>)
 800430c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8004310:	f7fc fc28 	bl	8000b64 <__addsf3>
 8004314:	4603      	mov	r3, r0
 8004316:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	}
	AHRS.yaw =  yaw_;
 800431a:	4a1e      	ldr	r2, [pc, #120]	@ (8004394 <update_ahrs+0xdb8>)
 800431c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004320:	6093      	str	r3, [r2, #8]
	AHRS.roll_rate  = gx_/config.gyr_lsb;
 8004322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004326:	4618      	mov	r0, r3
 8004328:	f7fc fcd0 	bl	8000ccc <__aeabi_i2f>
 800432c:	4602      	mov	r2, r0
 800432e:	4b1c      	ldr	r3, [pc, #112]	@ (80043a0 <update_ahrs+0xdc4>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	4619      	mov	r1, r3
 8004334:	4610      	mov	r0, r2
 8004336:	f7fc fdd1 	bl	8000edc <__aeabi_fdiv>
 800433a:	4603      	mov	r3, r0
 800433c:	461a      	mov	r2, r3
 800433e:	4b15      	ldr	r3, [pc, #84]	@ (8004394 <update_ahrs+0xdb8>)
 8004340:	60da      	str	r2, [r3, #12]
	AHRS.pitch_rate = -gy_/config.gyr_lsb;
 8004342:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004346:	425b      	negs	r3, r3
 8004348:	4618      	mov	r0, r3
 800434a:	f7fc fcbf 	bl	8000ccc <__aeabi_i2f>
 800434e:	4602      	mov	r2, r0
 8004350:	4b13      	ldr	r3, [pc, #76]	@ (80043a0 <update_ahrs+0xdc4>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	4619      	mov	r1, r3
 8004356:	4610      	mov	r0, r2
 8004358:	f7fc fdc0 	bl	8000edc <__aeabi_fdiv>
 800435c:	4603      	mov	r3, r0
 800435e:	461a      	mov	r2, r3
 8004360:	4b0c      	ldr	r3, [pc, #48]	@ (8004394 <update_ahrs+0xdb8>)
 8004362:	611a      	str	r2, [r3, #16]
	AHRS.yaw_rate   = -gz_/config.gyr_lsb;
 8004364:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004368:	425b      	negs	r3, r3
 800436a:	4618      	mov	r0, r3
 800436c:	f7fc fcae 	bl	8000ccc <__aeabi_i2f>
 8004370:	4602      	mov	r2, r0
 8004372:	4b0b      	ldr	r3, [pc, #44]	@ (80043a0 <update_ahrs+0xdc4>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	4619      	mov	r1, r3
 8004378:	4610      	mov	r0, r2
 800437a:	f7fc fdaf 	bl	8000edc <__aeabi_fdiv>
 800437e:	4603      	mov	r3, r0
 8004380:	461a      	mov	r2, r3
 8004382:	4b04      	ldr	r3, [pc, #16]	@ (8004394 <update_ahrs+0xdb8>)
 8004384:	615a      	str	r2, [r3, #20]

}
 8004386:	bf00      	nop
 8004388:	37a0      	adds	r7, #160	@ 0xa0
 800438a:	46bd      	mov	sp, r7
 800438c:	bdb0      	pop	{r4, r5, r7, pc}
 800438e:	bf00      	nop
 8004390:	42652ee0 	.word	0x42652ee0
 8004394:	2000055c 	.word	0x2000055c
 8004398:	20000598 	.word	0x20000598
 800439c:	43b40000 	.word	0x43b40000
 80043a0:	20000008 	.word	0x20000008

080043a4 <atan2_approx>:
// Initial implementation by Crashpilot1000 (https://github.com/Crashpilot1000/HarakiriWebstore1/blob/396715f73c6fcf859e0db0f34e12fe44bace6483/src/mw.c#L1292)
// Polynomial coefficients by Andor (http://www.dsprelated.com/showthread/comp.dsp/21872-1.php) optimized by Ledvinap to save one multiplication
// Max absolute error 0,000027 degree
// atan2_approx maximum absolute error = 7.152557e-07 rads (4.098114e-05 degree)
float atan2_approx(float y, float x)
{
 80043a4:	b590      	push	{r4, r7, lr}
 80043a6:	b08b      	sub	sp, #44	@ 0x2c
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043b4:	623b      	str	r3, [r7, #32]
    absY = fabsf(y);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043bc:	61fb      	str	r3, [r7, #28]
    res  = MAX(absX, absY);
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	61bb      	str	r3, [r7, #24]
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	6979      	ldr	r1, [r7, #20]
 80043c8:	69b8      	ldr	r0, [r7, #24]
 80043ca:	f7fc fe8f 	bl	80010ec <__aeabi_fcmpgt>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <atan2_approx+0x34>
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	e000      	b.n	80043da <atan2_approx+0x36>
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	627b      	str	r3, [r7, #36]	@ 0x24
    if (res) res = MIN(absX, absY) / res;
 80043dc:	f04f 0100 	mov.w	r1, #0
 80043e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80043e2:	f7fc fe5b 	bl	800109c <__aeabi_fcmpeq>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d114      	bne.n	8004416 <atan2_approx+0x72>
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	613b      	str	r3, [r7, #16]
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	68f9      	ldr	r1, [r7, #12]
 80043f6:	6938      	ldr	r0, [r7, #16]
 80043f8:	f7fc fe5a 	bl	80010b0 <__aeabi_fcmplt>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <atan2_approx+0x62>
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	e000      	b.n	8004408 <atan2_approx+0x64>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800440a:	4618      	mov	r0, r3
 800440c:	f7fc fd66 	bl	8000edc <__aeabi_fdiv>
 8004410:	4603      	mov	r3, r0
 8004412:	627b      	str	r3, [r7, #36]	@ 0x24
 8004414:	e002      	b.n	800441c <atan2_approx+0x78>
    else res = 0.0f;
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	627b      	str	r3, [r7, #36]	@ 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 800441c:	4938      	ldr	r1, [pc, #224]	@ (8004500 <atan2_approx+0x15c>)
 800441e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004420:	f7fc fca8 	bl	8000d74 <__aeabi_fmul>
 8004424:	4603      	mov	r3, r0
 8004426:	4937      	ldr	r1, [pc, #220]	@ (8004504 <atan2_approx+0x160>)
 8004428:	4618      	mov	r0, r3
 800442a:	f7fc fb99 	bl	8000b60 <__aeabi_fsub>
 800442e:	4603      	mov	r3, r0
 8004430:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004432:	4618      	mov	r0, r3
 8004434:	f7fc fc9e 	bl	8000d74 <__aeabi_fmul>
 8004438:	4603      	mov	r3, r0
 800443a:	4933      	ldr	r1, [pc, #204]	@ (8004508 <atan2_approx+0x164>)
 800443c:	4618      	mov	r0, r3
 800443e:	f7fc fb8f 	bl	8000b60 <__aeabi_fsub>
 8004442:	4603      	mov	r3, r0
 8004444:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004446:	4618      	mov	r0, r3
 8004448:	f7fc fc94 	bl	8000d74 <__aeabi_fmul>
 800444c:	4603      	mov	r3, r0
 800444e:	492f      	ldr	r1, [pc, #188]	@ (800450c <atan2_approx+0x168>)
 8004450:	4618      	mov	r0, r3
 8004452:	f7fc fb85 	bl	8000b60 <__aeabi_fsub>
 8004456:	4603      	mov	r3, r0
 8004458:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800445a:	4618      	mov	r0, r3
 800445c:	f7fc fc8a 	bl	8000d74 <__aeabi_fmul>
 8004460:	4603      	mov	r3, r0
 8004462:	492b      	ldr	r1, [pc, #172]	@ (8004510 <atan2_approx+0x16c>)
 8004464:	4618      	mov	r0, r3
 8004466:	f7fc fb7b 	bl	8000b60 <__aeabi_fsub>
 800446a:	4603      	mov	r3, r0
 800446c:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8004470:	4928      	ldr	r1, [pc, #160]	@ (8004514 <atan2_approx+0x170>)
 8004472:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004474:	f7fc fc7e 	bl	8000d74 <__aeabi_fmul>
 8004478:	4603      	mov	r3, r0
 800447a:	4927      	ldr	r1, [pc, #156]	@ (8004518 <atan2_approx+0x174>)
 800447c:	4618      	mov	r0, r3
 800447e:	f7fc fb71 	bl	8000b64 <__addsf3>
 8004482:	4603      	mov	r3, r0
 8004484:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004486:	4618      	mov	r0, r3
 8004488:	f7fc fc74 	bl	8000d74 <__aeabi_fmul>
 800448c:	4603      	mov	r3, r0
 800448e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004492:	4618      	mov	r0, r3
 8004494:	f7fc fb66 	bl	8000b64 <__addsf3>
 8004498:	4603      	mov	r3, r0
 800449a:	4619      	mov	r1, r3
 800449c:	4620      	mov	r0, r4
 800449e:	f7fc fd1d 	bl	8000edc <__aeabi_fdiv>
 80044a2:	4603      	mov	r3, r0
 80044a4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 80044a6:	6a39      	ldr	r1, [r7, #32]
 80044a8:	69f8      	ldr	r0, [r7, #28]
 80044aa:	f7fc fe1f 	bl	80010ec <__aeabi_fcmpgt>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <atan2_approx+0x11c>
 80044b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044b6:	4819      	ldr	r0, [pc, #100]	@ (800451c <atan2_approx+0x178>)
 80044b8:	f7fc fb52 	bl	8000b60 <__aeabi_fsub>
 80044bc:	4603      	mov	r3, r0
 80044be:	627b      	str	r3, [r7, #36]	@ 0x24
    if (x < 0) res = M_PIf - res;
 80044c0:	f04f 0100 	mov.w	r1, #0
 80044c4:	6838      	ldr	r0, [r7, #0]
 80044c6:	f7fc fdf3 	bl	80010b0 <__aeabi_fcmplt>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d005      	beq.n	80044dc <atan2_approx+0x138>
 80044d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044d2:	4813      	ldr	r0, [pc, #76]	@ (8004520 <atan2_approx+0x17c>)
 80044d4:	f7fc fb44 	bl	8000b60 <__aeabi_fsub>
 80044d8:	4603      	mov	r3, r0
 80044da:	627b      	str	r3, [r7, #36]	@ 0x24
    if (y < 0) res = -res;
 80044dc:	f04f 0100 	mov.w	r1, #0
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7fc fde5 	bl	80010b0 <__aeabi_fcmplt>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <atan2_approx+0x150>
 80044ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ee:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80044f2:	627b      	str	r3, [r7, #36]	@ 0x24
    return res;
 80044f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	372c      	adds	r7, #44	@ 0x2c
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd90      	pop	{r4, r7, pc}
 80044fe:	bf00      	nop
 8004500:	3d4e0939 	.word	0x3d4e0939
 8004504:	3e9eb5e3 	.word	0x3e9eb5e3
 8004508:	3e16fa88 	.word	0x3e16fa88
 800450c:	3f7ffe45 	.word	0x3f7ffe45
 8004510:	34a8dfa7 	.word	0x34a8dfa7
 8004514:	3f24fb99 	.word	0x3f24fb99
 8004518:	3e16a269 	.word	0x3e16a269
 800451c:	3fc90fdb 	.word	0x3fc90fdb
 8004520:	40490fdb 	.word	0x40490fdb

08004524 <fapplyDeadband>:

    return value >= 0 ? value - deadband : value + deadband;
}

float fapplyDeadband(const float value, const float deadband)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
    if (fabsf(value) < deadband) {
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004534:	4619      	mov	r1, r3
 8004536:	6838      	ldr	r0, [r7, #0]
 8004538:	f7fc fdd8 	bl	80010ec <__aeabi_fcmpgt>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <fapplyDeadband+0x24>
        return 0;
 8004542:	f04f 0300 	mov.w	r3, #0
 8004546:	e012      	b.n	800456e <fapplyDeadband+0x4a>
    }

    return value >= 0 ? value - deadband : value + deadband;
 8004548:	f04f 0100 	mov.w	r1, #0
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7fc fdc3 	bl	80010d8 <__aeabi_fcmpge>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <fapplyDeadband+0x40>
 8004558:	6839      	ldr	r1, [r7, #0]
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fc fb00 	bl	8000b60 <__aeabi_fsub>
 8004560:	4603      	mov	r3, r0
 8004562:	e004      	b.n	800456e <fapplyDeadband+0x4a>
 8004564:	6839      	ldr	r1, [r7, #0]
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fc fafc 	bl	8000b64 <__addsf3>
 800456c:	4603      	mov	r3, r0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <invSqrt_>:
    return (num << 12) / den;
}


float invSqrt_(float x)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 8004580:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7fc fbf5 	bl	8000d74 <__aeabi_fmul>
 800458a:	4603      	mov	r3, r0
 800458c:	617b      	str	r3, [r7, #20]
	float y = x;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8004592:	f107 0310 	add.w	r3, r7, #16
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	105a      	asrs	r2, r3, #1
 800459e:	4b13      	ldr	r3, [pc, #76]	@ (80045ec <invSqrt_+0x74>)
 80045a0:	1a9b      	subs	r3, r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80045a4:	f107 030c 	add.w	r3, r7, #12
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	6979      	ldr	r1, [r7, #20]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fc fbdf 	bl	8000d74 <__aeabi_fmul>
 80045b6:	4603      	mov	r3, r0
 80045b8:	461a      	mov	r2, r3
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	4619      	mov	r1, r3
 80045be:	4610      	mov	r0, r2
 80045c0:	f7fc fbd8 	bl	8000d74 <__aeabi_fmul>
 80045c4:	4603      	mov	r3, r0
 80045c6:	4619      	mov	r1, r3
 80045c8:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 80045cc:	f7fc fac8 	bl	8000b60 <__aeabi_fsub>
 80045d0:	4603      	mov	r3, r0
 80045d2:	461a      	mov	r2, r3
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	4619      	mov	r1, r3
 80045d8:	4610      	mov	r0, r2
 80045da:	f7fc fbcb 	bl	8000d74 <__aeabi_fmul>
 80045de:	4603      	mov	r3, r0
 80045e0:	613b      	str	r3, [r7, #16]
	//y = y * (1.5f - (halfx * y * y));
	return y;
 80045e2:	693b      	ldr	r3, [r7, #16]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	5f3759df 	.word	0x5f3759df

080045f0 <pid_init>:
#include "filter.h"
#include "maths.h"
#include "timer.h"
#include "string.h"

void pid_init(pid_t  *pid_in,float kp, float ki, float kd,float f_cut_err, float f_cut_D, float maxI){
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	603b      	str	r3, [r7, #0]
  memset(pid_in,0,sizeof(pid_t));
 80045fe:	222c      	movs	r2, #44	@ 0x2c
 8004600:	2100      	movs	r1, #0
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f00f ff6c 	bl	80144e0 <memset>
  pid_in->err = 0.0f;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f04f 0200 	mov.w	r2, #0
 800460e:	601a      	str	r2, [r3, #0]
  pid_in->err_fcut = f_cut_err;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	605a      	str	r2, [r3, #4]
  pid_in->kp = kp;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	609a      	str	r2, [r3, #8]
  pid_in->ki = ki;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	60da      	str	r2, [r3, #12]
  pid_in->kd = kd;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	611a      	str	r2, [r3, #16]
  pid_in->f_cut_D = f_cut_D;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	69fa      	ldr	r2, [r7, #28]
 800462c:	625a      	str	r2, [r3, #36]	@ 0x24
  pid_in->I_range = maxI;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a3a      	ldr	r2, [r7, #32]
 8004632:	621a      	str	r2, [r3, #32]
  pid_in->last_input = 0;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	619a      	str	r2, [r3, #24]
  pid_in->D_filted = 0;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	61da      	str	r2, [r3, #28]
  pid_in->init = 1;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 800464c:	bf00      	nop
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <constrain>:
int16_t qPercent(fix12_t q);
int16_t qMultiply(fix12_t q, int16_t input);
fix12_t qConstruct(int16_t num, int16_t den);

static int constrain(int amt, int low, int high)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	429a      	cmp	r2, r3
 8004666:	da01      	bge.n	800466c <constrain+0x18>
        return low;
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	e006      	b.n	800467a <constrain+0x26>
    else if (amt > high)
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	429a      	cmp	r2, r3
 8004672:	dd01      	ble.n	8004678 <constrain+0x24>
        return high;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	e000      	b.n	800467a <constrain+0x26>
    else
        return amt;
 8004678:	68fb      	ldr	r3, [r7, #12]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr

08004684 <initPWM>:
uint8_t pwm_lock_status;

/*
 * init pwm 
 */
void initPWM(TIM_HandleTypeDef *htim){
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
	htimm = htim;
 800468c:	4a1c      	ldr	r2, [pc, #112]	@ (8004700 <initPWM+0x7c>)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6013      	str	r3, [r2, #0]
	pr_status = 1;
 8004692:	4b1c      	ldr	r3, [pc, #112]	@ (8004704 <initPWM+0x80>)
 8004694:	2201      	movs	r2, #1
 8004696:	701a      	strb	r2, [r3, #0]
	pwm_lock_status = 0;
 8004698:	4b1b      	ldr	r3, [pc, #108]	@ (8004708 <initPWM+0x84>)
 800469a:	2200      	movs	r2, #0
 800469c:	701a      	strb	r2, [r3, #0]
	pwm_last_update_ms= 0;
 800469e:	4b1b      	ldr	r3, [pc, #108]	@ (800470c <initPWM+0x88>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(htim,ch1);
 80046a4:	2100      	movs	r1, #0
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f007 f82c 	bl	800b704 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch2);
 80046ac:	2104      	movs	r1, #4
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f007 f828 	bl	800b704 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch3);
 80046b4:	2108      	movs	r1, #8
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f007 f824 	bl	800b704 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(htim,ch4);
	__HAL_TIM_SetAutoreload(htimm,PWM_RELOAD_AFFTER);
 80046bc:	4b10      	ldr	r3, [pc, #64]	@ (8004700 <initPWM+0x7c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80046c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80046c8:	4b0d      	ldr	r3, [pc, #52]	@ (8004700 <initPWM+0x7c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f242 7210 	movw	r2, #10000	@ 0x2710
 80046d0:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SetCompare (htimm,ch1,1000);
 80046d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004700 <initPWM+0x7c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80046dc:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SetCompare (htimm,ch2,1500);
 80046de:	4b08      	ldr	r3, [pc, #32]	@ (8004700 <initPWM+0x7c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80046e8:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SetCompare (htimm,ch3,1500);
 80046ea:	4b05      	ldr	r3, [pc, #20]	@ (8004700 <initPWM+0x7c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80046f4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80046f6:	bf00      	nop
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	200005d0 	.word	0x200005d0
 8004704:	200005d8 	.word	0x200005d8
 8004708:	200005d9 	.word	0x200005d9
 800470c:	200005d4 	.word	0x200005d4

08004710 <writePwm>:


void writePwm(uint32_t Channel,int16_t dulty,int8_t invert)
{     if( invert){
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	460b      	mov	r3, r1
 800471a:	807b      	strh	r3, [r7, #2]
 800471c:	4613      	mov	r3, r2
 800471e:	707b      	strb	r3, [r7, #1]
 8004720:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d009      	beq.n	800473c <writePwm+0x2c>
	    dulty -= 1000;
 8004728:	887b      	ldrh	r3, [r7, #2]
 800472a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800472e:	b29b      	uxth	r3, r3
 8004730:	807b      	strh	r3, [r7, #2]
	    dulty  = 2000 - dulty; 
 8004732:	887b      	ldrh	r3, [r7, #2]
 8004734:	f5c3 63fa 	rsb	r3, r3, #2000	@ 0x7d0
 8004738:	b29b      	uxth	r3, r3
 800473a:	807b      	strh	r3, [r7, #2]
      }
	  dulty = constrain(dulty,1000,2000);
 800473c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004740:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004744:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff ff83 	bl	8004654 <constrain>
 800474e:	4603      	mov	r3, r0
 8004750:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d106      	bne.n	8004766 <writePwm+0x56>
 8004758:	4b12      	ldr	r3, [pc, #72]	@ (80047a4 <writePwm+0x94>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004762:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8004764:	e019      	b.n	800479a <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b04      	cmp	r3, #4
 800476a:	d106      	bne.n	800477a <writePwm+0x6a>
 800476c:	4b0d      	ldr	r3, [pc, #52]	@ (80047a4 <writePwm+0x94>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004776:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004778:	e00f      	b.n	800479a <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b08      	cmp	r3, #8
 800477e:	d106      	bne.n	800478e <writePwm+0x7e>
 8004780:	4b08      	ldr	r3, [pc, #32]	@ (80047a4 <writePwm+0x94>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800478a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800478c:	e005      	b.n	800479a <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 800478e:	4b05      	ldr	r3, [pc, #20]	@ (80047a4 <writePwm+0x94>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004798:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800479a:	bf00      	nop
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	200005d0 	.word	0x200005d0

080047a8 <write_pwm_ctrl>:

void write_pwm_ctrl(uint16_t throtlle,uint16_t servoL,uint16_t servoR){
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	4603      	mov	r3, r0
 80047b0:	80fb      	strh	r3, [r7, #6]
 80047b2:	460b      	mov	r3, r1
 80047b4:	80bb      	strh	r3, [r7, #4]
 80047b6:	4613      	mov	r3, r2
 80047b8:	807b      	strh	r3, [r7, #2]
      if(pr_status || pwm_lock_status){
 80047ba:	4b17      	ldr	r3, [pc, #92]	@ (8004818 <write_pwm_ctrl+0x70>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d103      	bne.n	80047ca <write_pwm_ctrl+0x22>
 80047c2:	4b16      	ldr	r3, [pc, #88]	@ (800481c <write_pwm_ctrl+0x74>)
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d008      	beq.n	80047dc <write_pwm_ctrl+0x34>
           pwm_last_update_ms = HAL_GetTick();
 80047ca:	f002 fd1b 	bl	8007204 <HAL_GetTick>
 80047ce:	4603      	mov	r3, r0
 80047d0:	4a13      	ldr	r2, [pc, #76]	@ (8004820 <write_pwm_ctrl+0x78>)
 80047d2:	6013      	str	r3, [r2, #0]
		   pr_status = 0;
 80047d4:	4b10      	ldr	r3, [pc, #64]	@ (8004818 <write_pwm_ctrl+0x70>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	701a      	strb	r2, [r3, #0]
		   return;
 80047da:	e019      	b.n	8004810 <write_pwm_ctrl+0x68>
	  }
	 writePwm(TIM_CHANNEL_1,throtlle,INVERT);
 80047dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047e0:	2201      	movs	r2, #1
 80047e2:	4619      	mov	r1, r3
 80047e4:	2000      	movs	r0, #0
 80047e6:	f7ff ff93 	bl	8004710 <writePwm>
     writePwm(TIM_CHANNEL_2,servoL,INVERT);
 80047ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	4619      	mov	r1, r3
 80047f2:	2004      	movs	r0, #4
 80047f4:	f7ff ff8c 	bl	8004710 <writePwm>
     writePwm(TIM_CHANNEL_3,servoR,NOT_INVERT);
 80047f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80047fc:	2200      	movs	r2, #0
 80047fe:	4619      	mov	r1, r3
 8004800:	2008      	movs	r0, #8
 8004802:	f7ff ff85 	bl	8004710 <writePwm>
	pwm_last_update_ms = HAL_GetTick();
 8004806:	f002 fcfd 	bl	8007204 <HAL_GetTick>
 800480a:	4603      	mov	r3, r0
 800480c:	4a04      	ldr	r2, [pc, #16]	@ (8004820 <write_pwm_ctrl+0x78>)
 800480e:	6013      	str	r3, [r2, #0]
}
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	200005d8 	.word	0x200005d8
 800481c:	200005d9 	.word	0x200005d9
 8004820:	200005d4 	.word	0x200005d4

08004824 <timer_start>:
  boottime.sec   = setoverFlow(sec_L,59);
  boottime.min   = setoverFlow((sec_L/60),59);
  boottime.hour  = setoverFlow((sec_L/3600),23);
}

void timer_start(TIM_HandleTypeDef *htimz){
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
	htimmz = htimz;
 800482c:	4a05      	ldr	r2, [pc, #20]	@ (8004844 <timer_start+0x20>)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htimmz);
 8004832:	4b04      	ldr	r3, [pc, #16]	@ (8004844 <timer_start+0x20>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f006 feac 	bl	800b594 <HAL_TIM_Base_Start_IT>
}
 800483c:	bf00      	nop
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	200005dc 	.word	0x200005dc

08004848 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800484e:	4b0c      	ldr	r3, [pc, #48]	@ (8004880 <MX_DMA_Init+0x38>)
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	4a0b      	ldr	r2, [pc, #44]	@ (8004880 <MX_DMA_Init+0x38>)
 8004854:	f043 0301 	orr.w	r3, r3, #1
 8004858:	6153      	str	r3, [r2, #20]
 800485a:	4b09      	ldr	r3, [pc, #36]	@ (8004880 <MX_DMA_Init+0x38>)
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	607b      	str	r3, [r7, #4]
 8004864:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8004866:	2200      	movs	r2, #0
 8004868:	2105      	movs	r1, #5
 800486a:	200e      	movs	r0, #14
 800486c:	f002 fdad 	bl	80073ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004870:	200e      	movs	r0, #14
 8004872:	f002 fdc6 	bl	8007402 <HAL_NVIC_EnableIRQ>

}
 8004876:	bf00      	nop
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40021000 	.word	0x40021000

08004884 <HAL_UART_RxCpltCallback>:
#include "../flight/plane.h"

// IQR function
//----------------------------------IQR--Handler-----------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
    if(huart == ibus_uart_port())
 800488c:	f7fd fbc6 	bl	800201c <ibus_uart_port>
 8004890:	4602      	mov	r2, r0
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4293      	cmp	r3, r2
 8004896:	d102      	bne.n	800489e <HAL_UART_RxCpltCallback+0x1a>
	{
		ibus_calback();
 8004898:	f7fd fbca 	bl	8002030 <ibus_calback>
    }
    else if(huart == gps_uart_port()){
        gps_callback();
    }
}
 800489c:	e007      	b.n	80048ae <HAL_UART_RxCpltCallback+0x2a>
    else if(huart == gps_uart_port()){
 800489e:	f7fe fbfb 	bl	8003098 <gps_uart_port>
 80048a2:	4602      	mov	r2, r0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d101      	bne.n	80048ae <HAL_UART_RxCpltCallback+0x2a>
        gps_callback();
 80048aa:	f7fe fbff 	bl	80030ac <gps_callback>
}
 80048ae:	bf00      	nop
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
	...

080048b8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
    if(huart == &huart1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a04      	ldr	r2, [pc, #16]	@ (80048d4 <HAL_UART_TxCpltCallback+0x1c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d101      	bne.n	80048cc <HAL_UART_TxCpltCallback+0x14>
	{
		mavlink_tx_cpl_callback();
 80048c8:	f002 fc68 	bl	800719c <mavlink_tx_cpl_callback>
    }
}
 80048cc:	bf00      	nop
 80048ce:	3708      	adds	r7, #8
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	20000a84 	.word	0x20000a84

080048d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4a06      	ldr	r2, [pc, #24]	@ (8004900 <vApplicationGetIdleTaskMemory+0x28>)
 80048e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	4a05      	ldr	r2, [pc, #20]	@ (8004904 <vApplicationGetIdleTaskMemory+0x2c>)
 80048ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2280      	movs	r2, #128	@ 0x80
 80048f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80048f6:	bf00      	nop
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bc80      	pop	{r7}
 80048fe:	4770      	bx	lr
 8004900:	200005f8 	.word	0x200005f8
 8004904:	2000064c 	.word	0x2000064c

08004908 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8004908:	b5b0      	push	{r4, r5, r7, lr}
 800490a:	b0a4      	sub	sp, #144	@ 0x90
 800490c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	 timer_start(&htim7);
 800490e:	4832      	ldr	r0, [pc, #200]	@ (80049d8 <MX_FREERTOS_Init+0xd0>)
 8004910:	f7ff ff88 	bl	8004824 <timer_start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task1 */
  osThreadDef(task1, ahrs_task, osPriorityHigh, 0, 200);
 8004914:	4b31      	ldr	r3, [pc, #196]	@ (80049dc <MX_FREERTOS_Init+0xd4>)
 8004916:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 800491a:	461d      	mov	r5, r3
 800491c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800491e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004920:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004924:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 8004928:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800492c:	2100      	movs	r1, #0
 800492e:	4618      	mov	r0, r3
 8004930:	f00d f89b 	bl	8011a6a <osThreadCreate>
 8004934:	4603      	mov	r3, r0
 8004936:	4a2a      	ldr	r2, [pc, #168]	@ (80049e0 <MX_FREERTOS_Init+0xd8>)
 8004938:	6013      	str	r3, [r2, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, blackbox, osPriorityLow, 0, 512);
 800493a:	4b2a      	ldr	r3, [pc, #168]	@ (80049e4 <MX_FREERTOS_Init+0xdc>)
 800493c:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8004940:	461d      	mov	r5, r3
 8004942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004946:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800494a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 800494e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004952:	2100      	movs	r1, #0
 8004954:	4618      	mov	r0, r3
 8004956:	f00d f888 	bl	8011a6a <osThreadCreate>
 800495a:	4603      	mov	r3, r0
 800495c:	4a22      	ldr	r2, [pc, #136]	@ (80049e8 <MX_FREERTOS_Init+0xe0>)
 800495e:	6013      	str	r3, [r2, #0]

  /* definition and creation of task3 */
  osThreadDef(task3, led_indicate, osPriorityLow, 0, 128);
 8004960:	4b22      	ldr	r3, [pc, #136]	@ (80049ec <MX_FREERTOS_Init+0xe4>)
 8004962:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8004966:	461d      	mov	r5, r3
 8004968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800496a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800496c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004970:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task3Handle = osThreadCreate(osThread(task3), NULL);
 8004974:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004978:	2100      	movs	r1, #0
 800497a:	4618      	mov	r0, r3
 800497c:	f00d f875 	bl	8011a6a <osThreadCreate>
 8004980:	4603      	mov	r3, r0
 8004982:	4a1b      	ldr	r2, [pc, #108]	@ (80049f0 <MX_FREERTOS_Init+0xe8>)
 8004984:	6013      	str	r3, [r2, #0]

  /* definition and creation of task4 */
  osThreadDef(task4, read_sensor, osPriorityRealtime, 0, 128);
 8004986:	4b1b      	ldr	r3, [pc, #108]	@ (80049f4 <MX_FREERTOS_Init+0xec>)
 8004988:	f107 0420 	add.w	r4, r7, #32
 800498c:	461d      	mov	r5, r3
 800498e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004992:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004996:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task4Handle = osThreadCreate(osThread(task4), NULL);
 800499a:	f107 0320 	add.w	r3, r7, #32
 800499e:	2100      	movs	r1, #0
 80049a0:	4618      	mov	r0, r3
 80049a2:	f00d f862 	bl	8011a6a <osThreadCreate>
 80049a6:	4603      	mov	r3, r0
 80049a8:	4a13      	ldr	r2, [pc, #76]	@ (80049f8 <MX_FREERTOS_Init+0xf0>)
 80049aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of task5 */
  osThreadDef(task5, mavlinkOSD, osPriorityNormal, 0, 128);
 80049ac:	4b13      	ldr	r3, [pc, #76]	@ (80049fc <MX_FREERTOS_Init+0xf4>)
 80049ae:	1d3c      	adds	r4, r7, #4
 80049b0:	461d      	mov	r5, r3
 80049b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80049ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task5Handle = osThreadCreate(osThread(task5), NULL);
 80049be:	1d3b      	adds	r3, r7, #4
 80049c0:	2100      	movs	r1, #0
 80049c2:	4618      	mov	r0, r3
 80049c4:	f00d f851 	bl	8011a6a <osThreadCreate>
 80049c8:	4603      	mov	r3, r0
 80049ca:	4a0d      	ldr	r2, [pc, #52]	@ (8004a00 <MX_FREERTOS_Init+0xf8>)
 80049cc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80049ce:	bf00      	nop
 80049d0:	3790      	adds	r7, #144	@ 0x90
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bdb0      	pop	{r4, r5, r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20000a3c 	.word	0x20000a3c
 80049dc:	08015110 	.word	0x08015110
 80049e0:	200005e4 	.word	0x200005e4
 80049e4:	08015134 	.word	0x08015134
 80049e8:	200005e8 	.word	0x200005e8
 80049ec:	08015158 	.word	0x08015158
 80049f0:	200005ec 	.word	0x200005ec
 80049f4:	0801517c 	.word	0x0801517c
 80049f8:	200005f0 	.word	0x200005f0
 80049fc:	080151a0 	.word	0x080151a0
 8004a00:	200005f4 	.word	0x200005f4

08004a04 <ahrs_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ahrs_task */
void ahrs_task(void const * argument)
{
 8004a04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a08:	b08b      	sub	sp, #44	@ 0x2c
 8004a0a:	af06      	add	r7, sp, #24
 8004a0c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ahrs_task */
	ibus_init(&huart2);
 8004a0e:	4834      	ldr	r0, [pc, #208]	@ (8004ae0 <ahrs_task+0xdc>)
 8004a10:	f7fd fad4 	bl	8001fbc <ibus_init>
	gps_init(&huart3,115200);
 8004a14:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8004a18:	4832      	ldr	r0, [pc, #200]	@ (8004ae4 <ahrs_task+0xe0>)
 8004a1a:	f7fe fac5 	bl	8002fa8 <gps_init>
	attitude_ctrl_init();
 8004a1e:	f001 fd5d 	bl	80064dc <attitude_ctrl_init>
	initPWM(&htim3);
 8004a22:	4831      	ldr	r0, [pc, #196]	@ (8004ae8 <ahrs_task+0xe4>)
 8004a24:	f7ff fe2e 	bl	8004684 <initPWM>
    baro_init();
 8004a28:	f7fd fd78 	bl	800251c <baro_init>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10; // 100 hz loop
 8004a2c:	230a      	movs	r3, #10
 8004a2e:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 8004a30:	f00e fb2c 	bl	801308c <xTaskGetTickCount>
 8004a34:	4603      	mov	r3, r0
 8004a36:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4); // for debug
	//timer_calculate_boottime();
    if(is_baro_calibration() == FALSE){
 8004a38:	f7fd fdce 	bl	80025d8 <is_baro_calibration>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <ahrs_task+0x42>
		baro_zero_calibrate();
 8004a42:	f7fd fd91 	bl	8002568 <baro_zero_calibrate>
	}
    alt_baro = baro_get_altitude();
 8004a46:	f7fd fdd3 	bl	80025f0 <baro_get_altitude>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	4a27      	ldr	r2, [pc, #156]	@ (8004aec <ahrs_task+0xe8>)
 8004a4e:	6013      	str	r3, [r2, #0]
    ibusFrameComplete();
 8004a50:	f7fd fb4a 	bl	80020e8 <ibusFrameComplete>
    update_ahrs(gyro_imu[0],gyro_imu[1],gyro_imu[2],acc_imu[0],acc_imu[1],acc_imu[2],mag_raw[0],mag_raw[1],mag_raw[2],micros());
 8004a54:	4b26      	ldr	r3, [pc, #152]	@ (8004af0 <ahrs_task+0xec>)
 8004a56:	f9b3 c000 	ldrsh.w	ip, [r3]
 8004a5a:	4b25      	ldr	r3, [pc, #148]	@ (8004af0 <ahrs_task+0xec>)
 8004a5c:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8004a60:	4b23      	ldr	r3, [pc, #140]	@ (8004af0 <ahrs_task+0xec>)
 8004a62:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 8004a66:	4b23      	ldr	r3, [pc, #140]	@ (8004af4 <ahrs_task+0xf0>)
 8004a68:	f9b3 9000 	ldrsh.w	r9, [r3]
 8004a6c:	4b21      	ldr	r3, [pc, #132]	@ (8004af4 <ahrs_task+0xf0>)
 8004a6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004a72:	4a20      	ldr	r2, [pc, #128]	@ (8004af4 <ahrs_task+0xf0>)
 8004a74:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8004a78:	491f      	ldr	r1, [pc, #124]	@ (8004af8 <ahrs_task+0xf4>)
 8004a7a:	f9b1 1000 	ldrsh.w	r1, [r1]
 8004a7e:	481e      	ldr	r0, [pc, #120]	@ (8004af8 <ahrs_task+0xf4>)
 8004a80:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8004a84:	4c1c      	ldr	r4, [pc, #112]	@ (8004af8 <ahrs_task+0xf4>)
 8004a86:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 8004a8a:	4d1c      	ldr	r5, [pc, #112]	@ (8004afc <ahrs_task+0xf8>)
 8004a8c:	682d      	ldr	r5, [r5, #0]
 8004a8e:	682d      	ldr	r5, [r5, #0]
 8004a90:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8004a92:	4d1b      	ldr	r5, [pc, #108]	@ (8004b00 <ahrs_task+0xfc>)
 8004a94:	682d      	ldr	r5, [r5, #0]
 8004a96:	4435      	add	r5, r6
 8004a98:	9505      	str	r5, [sp, #20]
 8004a9a:	9404      	str	r4, [sp, #16]
 8004a9c:	9003      	str	r0, [sp, #12]
 8004a9e:	9102      	str	r1, [sp, #8]
 8004aa0:	9201      	str	r2, [sp, #4]
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	464b      	mov	r3, r9
 8004aa6:	4642      	mov	r2, r8
 8004aa8:	4671      	mov	r1, lr
 8004aaa:	4660      	mov	r0, ip
 8004aac:	f7fe fd96 	bl	80035dc <update_ahrs>
    attitude_ctrl(micros());
 8004ab0:	4b12      	ldr	r3, [pc, #72]	@ (8004afc <ahrs_task+0xf8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ab8:	4b11      	ldr	r3, [pc, #68]	@ (8004b00 <ahrs_task+0xfc>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4413      	add	r3, r2
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f001 fd9a 	bl	80065f8 <attitude_ctrl>

    //vTaskSuspend(NULL);
    vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8004ac4:	f107 0308 	add.w	r3, r7, #8
 8004ac8:	68f9      	ldr	r1, [r7, #12]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f00e f91a 	bl	8012d04 <vTaskDelayUntil>
#ifdef STACK_DEBUG
    stack_task_ahrs = uxTaskGetStackHighWaterMark( NULL );
 8004ad0:	2000      	movs	r0, #0
 8004ad2:	f00e fdb5 	bl	8013640 <uxTaskGetStackHighWaterMark>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	4b0a      	ldr	r3, [pc, #40]	@ (8004b04 <ahrs_task+0x100>)
 8004adc:	801a      	strh	r2, [r3, #0]
    if(is_baro_calibration() == FALSE){
 8004ade:	e7ab      	b.n	8004a38 <ahrs_task+0x34>
 8004ae0:	20000acc 	.word	0x20000acc
 8004ae4:	20000b14 	.word	0x20000b14
 8004ae8:	200009f4 	.word	0x200009f4
 8004aec:	20000858 	.word	0x20000858
 8004af0:	2000085c 	.word	0x2000085c
 8004af4:	20000864 	.word	0x20000864
 8004af8:	2000086c 	.word	0x2000086c
 8004afc:	200005dc 	.word	0x200005dc
 8004b00:	200005e0 	.word	0x200005e0
 8004b04:	2000084c 	.word	0x2000084c

08004b08 <blackbox>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blackbox */
void blackbox(void const * argument)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08a      	sub	sp, #40	@ 0x28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blackbox */

	//vTaskSuspend(NULL);
	black_box_init();
 8004b10:	f7fd fd88 	bl	8002624 <black_box_init>
	black_box_reset = TRUE;
 8004b14:	4bc0      	ldr	r3, [pc, #768]	@ (8004e18 <blackbox+0x310>)
 8004b16:	2201      	movs	r2, #1
 8004b18:	701a      	strb	r2, [r3, #0]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 100;  // 25 ms
 8004b1a:	2364      	movs	r3, #100	@ 0x64
 8004b1c:	627b      	str	r3, [r7, #36]	@ 0x24
	xLastWakeTime = xTaskGetTickCount();
 8004b1e:	f00e fab5 	bl	801308c <xTaskGetTickCount>
 8004b22:	4603      	mov	r3, r0
 8004b24:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	static uint32_t start_time_ms;
    if(ibusChannelData[CH5] > CHANNEL_HIGH ){
 8004b26:	4bbd      	ldr	r3, [pc, #756]	@ (8004e1c <blackbox+0x314>)
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	f240 81bb 	bls.w	8004eaa <blackbox+0x3a2>
		if(black_box_reset){
 8004b34:	4bb8      	ldr	r3, [pc, #736]	@ (8004e18 <blackbox+0x310>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d012      	beq.n	8004b62 <blackbox+0x5a>
			black_box_pack_str("----------------------------new data----------------------------------------------------------------\n");
 8004b3c:	48b8      	ldr	r0, [pc, #736]	@ (8004e20 <blackbox+0x318>)
 8004b3e:	f7fd fe41 	bl	80027c4 <black_box_pack_str>
			black_box_reset = FALSE;
 8004b42:	4bb5      	ldr	r3, [pc, #724]	@ (8004e18 <blackbox+0x310>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]
			start_time_ms = millis();
 8004b48:	4bb6      	ldr	r3, [pc, #728]	@ (8004e24 <blackbox+0x31c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b50:	4bb5      	ldr	r3, [pc, #724]	@ (8004e28 <blackbox+0x320>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4413      	add	r3, r2
 8004b56:	4ab5      	ldr	r2, [pc, #724]	@ (8004e2c <blackbox+0x324>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	099b      	lsrs	r3, r3, #6
 8004b5e:	4ab4      	ldr	r2, [pc, #720]	@ (8004e30 <blackbox+0x328>)
 8004b60:	6013      	str	r3, [r2, #0]
		}
		uint32_t time_ms =  millis() - start_time_ms;
 8004b62:	4bb0      	ldr	r3, [pc, #704]	@ (8004e24 <blackbox+0x31c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b6a:	4baf      	ldr	r3, [pc, #700]	@ (8004e28 <blackbox+0x320>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4413      	add	r3, r2
 8004b70:	4aae      	ldr	r2, [pc, #696]	@ (8004e2c <blackbox+0x324>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	099a      	lsrs	r2, r3, #6
 8004b78:	4bad      	ldr	r3, [pc, #692]	@ (8004e30 <blackbox+0x328>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	623b      	str	r3, [r7, #32]
		// control thortle 0 -> 100%
		int throtle = ((int)ibusChannelData[CH3] - 1000)*0.1;
 8004b80:	4ba6      	ldr	r3, [pc, #664]	@ (8004e1c <blackbox+0x314>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7fb fca3 	bl	80004d4 <__aeabi_i2d>
 8004b8e:	a3a0      	add	r3, pc, #640	@ (adr r3, 8004e10 <blackbox+0x308>)
 8004b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b94:	f7fb fd08 	bl	80005a8 <__aeabi_dmul>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	f7fb ffb2 	bl	8000b08 <__aeabi_d2iz>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	61fb      	str	r3, [r7, #28]

		// tx signal 0 -> 100 %
		int srri = ((int)ibusChannelData[CH11] - 1000)*0.1;
 8004ba8:	4b9c      	ldr	r3, [pc, #624]	@ (8004e1c <blackbox+0x314>)
 8004baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bac:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7fb fc8f 	bl	80004d4 <__aeabi_i2d>
 8004bb6:	a396      	add	r3, pc, #600	@ (adr r3, 8004e10 <blackbox+0x308>)
 8004bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbc:	f7fb fcf4 	bl	80005a8 <__aeabi_dmul>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	f7fb ff9e 	bl	8000b08 <__aeabi_d2iz>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	61bb      	str	r3, [r7, #24]

		/*** write time  ***/
		black_box_pack_int(time_ms);
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fd fd5e 	bl	8002694 <black_box_pack_int>
		black_box_pack_char(' ');
 8004bd8:	2020      	movs	r0, #32
 8004bda:	f7fd fe2b 	bl	8002834 <black_box_pack_char>

		/*---- control parameters ---*/
		black_box_pack_int((int)servoL);
 8004bde:	4b95      	ldr	r3, [pc, #596]	@ (8004e34 <blackbox+0x32c>)
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fd fd56 	bl	8002694 <black_box_pack_int>
		black_box_pack_char(' ');
 8004be8:	2020      	movs	r0, #32
 8004bea:	f7fd fe23 	bl	8002834 <black_box_pack_char>
		black_box_pack_int((int)servoR);
 8004bee:	4b92      	ldr	r3, [pc, #584]	@ (8004e38 <blackbox+0x330>)
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fd fd4e 	bl	8002694 <black_box_pack_int>
		black_box_pack_char(' ');
 8004bf8:	2020      	movs	r0, #32
 8004bfa:	f7fd fe1b 	bl	8002834 <black_box_pack_char>
		black_box_pack_int(throtle);
 8004bfe:	69f8      	ldr	r0, [r7, #28]
 8004c00:	f7fd fd48 	bl	8002694 <black_box_pack_int>
		black_box_pack_char(' ');
 8004c04:	2020      	movs	r0, #32
 8004c06:	f7fd fe15 	bl	8002834 <black_box_pack_char>
		black_box_pack_int(srri);
 8004c0a:	69b8      	ldr	r0, [r7, #24]
 8004c0c:	f7fd fd42 	bl	8002694 <black_box_pack_int>
		black_box_pack_char(' ');
 8004c10:	2020      	movs	r0, #32
 8004c12:	f7fd fe0f 	bl	8002834 <black_box_pack_char>

		/*----- atitude ---------------------*/
		black_box_pack_int((int)(AHRS.roll*100));
 8004c16:	4b89      	ldr	r3, [pc, #548]	@ (8004e3c <blackbox+0x334>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4989      	ldr	r1, [pc, #548]	@ (8004e40 <blackbox+0x338>)
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fc f8a9 	bl	8000d74 <__aeabi_fmul>
 8004c22:	4603      	mov	r3, r0
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fc fa81 	bl	800112c <__aeabi_f2iz>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fd fd31 	bl	8002694 <black_box_pack_int>
		black_box_pack_char(' ');
 8004c32:	2020      	movs	r0, #32
 8004c34:	f7fd fdfe 	bl	8002834 <black_box_pack_char>
		black_box_pack_int((int)(roll_desired*100));
 8004c38:	4b82      	ldr	r3, [pc, #520]	@ (8004e44 <blackbox+0x33c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4980      	ldr	r1, [pc, #512]	@ (8004e40 <blackbox+0x338>)
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fc f898 	bl	8000d74 <__aeabi_fmul>
 8004c44:	4603      	mov	r3, r0
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fc fa70 	bl	800112c <__aeabi_f2iz>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fd fd20 	bl	8002694 <black_box_pack_int>
		black_box_pack_char(' ');
 8004c54:	2020      	movs	r0, #32
 8004c56:	f7fd fded 	bl	8002834 <black_box_pack_char>
		black_box_pack_int((int)(AHRS.pitch*100));// cm
 8004c5a:	4b78      	ldr	r3, [pc, #480]	@ (8004e3c <blackbox+0x334>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	4978      	ldr	r1, [pc, #480]	@ (8004e40 <blackbox+0x338>)
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fc f887 	bl	8000d74 <__aeabi_fmul>
 8004c66:	4603      	mov	r3, r0
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fc fa5f 	bl	800112c <__aeabi_f2iz>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7fd fd0f 	bl	8002694 <black_box_pack_int>
		black_box_pack_char(' ');
 8004c76:	2020      	movs	r0, #32
 8004c78:	f7fd fddc 	bl	8002834 <black_box_pack_char>
		black_box_pack_int((int)(pitch_desired*100));
 8004c7c:	4b72      	ldr	r3, [pc, #456]	@ (8004e48 <blackbox+0x340>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	496f      	ldr	r1, [pc, #444]	@ (8004e40 <blackbox+0x338>)
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fc f876 	bl	8000d74 <__aeabi_fmul>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fc fa4e 	bl	800112c <__aeabi_f2iz>
 8004c90:	4603      	mov	r3, r0
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fd fcfe 	bl	8002694 <black_box_pack_int>
		black_box_pack_char(' ');
 8004c98:	2020      	movs	r0, #32
 8004c9a:	f7fd fdcb 	bl	8002834 <black_box_pack_char>
		black_box_pack_int((int)(AHRS.yaw*100));
 8004c9e:	4b67      	ldr	r3, [pc, #412]	@ (8004e3c <blackbox+0x334>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	4967      	ldr	r1, [pc, #412]	@ (8004e40 <blackbox+0x338>)
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7fc f865 	bl	8000d74 <__aeabi_fmul>
 8004caa:	4603      	mov	r3, r0
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fc fa3d 	bl	800112c <__aeabi_f2iz>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fd fced 	bl	8002694 <black_box_pack_int>
		black_box_pack_char(' ');
 8004cba:	2020      	movs	r0, #32
 8004cbc:	f7fd fdba 	bl	8002834 <black_box_pack_char>
		black_box_pack_int((int)(AHRS.yaw_rate*100));
 8004cc0:	4b5e      	ldr	r3, [pc, #376]	@ (8004e3c <blackbox+0x334>)
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	495e      	ldr	r1, [pc, #376]	@ (8004e40 <blackbox+0x338>)
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fc f854 	bl	8000d74 <__aeabi_fmul>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fc fa2c 	bl	800112c <__aeabi_f2iz>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fd fcdc 	bl	8002694 <black_box_pack_int>
		black_box_pack_char(' ');
 8004cdc:	2020      	movs	r0, #32
 8004cde:	f7fd fda9 	bl	8002834 <black_box_pack_char>

		/*------- GPS ----------------------*/
		int16_t vx = _gps.velocity[0];  // cm/s
 8004ce2:	4b5a      	ldr	r3, [pc, #360]	@ (8004e4c <blackbox+0x344>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	82fb      	strh	r3, [r7, #22]
		int16_t vy = _gps.velocity[1];  // cm/s
 8004ce8:	4b58      	ldr	r3, [pc, #352]	@ (8004e4c <blackbox+0x344>)
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	82bb      	strh	r3, [r7, #20]
		int16_t vz = _gps.velocity[2];  // cm/s
 8004cee:	4b57      	ldr	r3, [pc, #348]	@ (8004e4c <blackbox+0x344>)
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	827b      	strh	r3, [r7, #18]
		int32_t ground_speed = sqrt(sq(vx) + sq(vy)) ;
 8004cf4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004cf8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004cfc:	fb03 f202 	mul.w	r2, r3, r2
 8004d00:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004d04:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8004d08:	fb01 f303 	mul.w	r3, r1, r3
 8004d0c:	4413      	add	r3, r2
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fb fbe0 	bl	80004d4 <__aeabi_i2d>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4610      	mov	r0, r2
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	f00f fc32 	bl	8014584 <sqrt>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4610      	mov	r0, r2
 8004d26:	4619      	mov	r1, r3
 8004d28:	f7fb feee 	bl	8000b08 <__aeabi_d2iz>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	60fb      	str	r3, [r7, #12]

		black_box_pack_int(_gps.position[0]);
 8004d30:	4b46      	ldr	r3, [pc, #280]	@ (8004e4c <blackbox+0x344>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fd fcad 	bl	8002694 <black_box_pack_int>
		black_box_pack_char(' ');
 8004d3a:	2020      	movs	r0, #32
 8004d3c:	f7fd fd7a 	bl	8002834 <black_box_pack_char>
		black_box_pack_int(_gps.position[1]);
 8004d40:	4b42      	ldr	r3, [pc, #264]	@ (8004e4c <blackbox+0x344>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fd fca5 	bl	8002694 <black_box_pack_int>
		black_box_pack_char(' ');
 8004d4a:	2020      	movs	r0, #32
 8004d4c:	f7fd fd72 	bl	8002834 <black_box_pack_char>
		black_box_pack_int(_gps.altitude_msl);
 8004d50:	4b3e      	ldr	r3, [pc, #248]	@ (8004e4c <blackbox+0x344>)
 8004d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fd fc9d 	bl	8002694 <black_box_pack_int>
		black_box_pack_char(' ');
 8004d5a:	2020      	movs	r0, #32
 8004d5c:	f7fd fd6a 	bl	8002834 <black_box_pack_char>
		black_box_pack_int(_gps.altitude_mgl);
 8004d60:	4b3a      	ldr	r3, [pc, #232]	@ (8004e4c <blackbox+0x344>)
 8004d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fd fc95 	bl	8002694 <black_box_pack_int>
		black_box_pack_char(' ');
 8004d6a:	2020      	movs	r0, #32
 8004d6c:	f7fd fd62 	bl	8002834 <black_box_pack_char>
		black_box_pack_int(_gps.numSat);
 8004d70:	4b36      	ldr	r3, [pc, #216]	@ (8004e4c <blackbox+0x344>)
 8004d72:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fd fc8c 	bl	8002694 <black_box_pack_int>
		black_box_pack_char(' ');
 8004d7c:	2020      	movs	r0, #32
 8004d7e:	f7fd fd59 	bl	8002834 <black_box_pack_char>
		black_box_pack_int(_gps.fix);
 8004d82:	4b32      	ldr	r3, [pc, #200]	@ (8004e4c <blackbox+0x344>)
 8004d84:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7fd fc83 	bl	8002694 <black_box_pack_int>
		black_box_pack_char(' ');
 8004d8e:	2020      	movs	r0, #32
 8004d90:	f7fd fd50 	bl	8002834 <black_box_pack_char>
		black_box_pack_int(ground_speed);
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f7fd fc7d 	bl	8002694 <black_box_pack_int>
		black_box_pack_char(' ');
 8004d9a:	2020      	movs	r0, #32
 8004d9c:	f7fd fd4a 	bl	8002834 <black_box_pack_char>
		black_box_pack_int(vz);
 8004da0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fd fc75 	bl	8002694 <black_box_pack_int>

		/*---- estimate ---------------------------*/
		black_box_pack_char(' ');
 8004daa:	2020      	movs	r0, #32
 8004dac:	f7fd fd42 	bl	8002834 <black_box_pack_char>
		black_box_pack_int((int)(alt_estimate*100)); //cm
 8004db0:	4b27      	ldr	r3, [pc, #156]	@ (8004e50 <blackbox+0x348>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4922      	ldr	r1, [pc, #136]	@ (8004e40 <blackbox+0x338>)
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fb ffdc 	bl	8000d74 <__aeabi_fmul>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fc f9b4 	bl	800112c <__aeabi_f2iz>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fd fc64 	bl	8002694 <black_box_pack_int>
		black_box_pack_char(' ');
 8004dcc:	2020      	movs	r0, #32
 8004dce:	f7fd fd31 	bl	8002834 <black_box_pack_char>
		black_box_pack_int((int)(climb_rate*100));   // cm/s
 8004dd2:	4b20      	ldr	r3, [pc, #128]	@ (8004e54 <blackbox+0x34c>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	491a      	ldr	r1, [pc, #104]	@ (8004e40 <blackbox+0x338>)
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fb ffcb 	bl	8000d74 <__aeabi_fmul>
 8004dde:	4603      	mov	r3, r0
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fc f9a3 	bl	800112c <__aeabi_f2iz>
 8004de6:	4603      	mov	r3, r0
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fd fc53 	bl	8002694 <black_box_pack_int>
		black_box_pack_char(' ');
 8004dee:	2020      	movs	r0, #32
 8004df0:	f7fd fd20 	bl	8002834 <black_box_pack_char>
		black_box_pack_int(alt_baro);   // cm
 8004df4:	4b18      	ldr	r3, [pc, #96]	@ (8004e58 <blackbox+0x350>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7fd fc4b 	bl	8002694 <black_box_pack_int>
		black_box_pack_char(' ');
 8004dfe:	2020      	movs	r0, #32
 8004e00:	f7fd fd18 	bl	8002834 <black_box_pack_char>
		black_box_pack_int((int)(velocity_abs*100));   // cm
 8004e04:	4b15      	ldr	r3, [pc, #84]	@ (8004e5c <blackbox+0x354>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	490d      	ldr	r1, [pc, #52]	@ (8004e40 <blackbox+0x338>)
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	e028      	b.n	8004e60 <blackbox+0x358>
 8004e0e:	bf00      	nop
 8004e10:	9999999a 	.word	0x9999999a
 8004e14:	3fb99999 	.word	0x3fb99999
 8004e18:	20000872 	.word	0x20000872
 8004e1c:	20000148 	.word	0x20000148
 8004e20:	080151bc 	.word	0x080151bc
 8004e24:	200005dc 	.word	0x200005dc
 8004e28:	200005e0 	.word	0x200005e0
 8004e2c:	10624dd3 	.word	0x10624dd3
 8004e30:	20000878 	.word	0x20000878
 8004e34:	20000ba8 	.word	0x20000ba8
 8004e38:	20000baa 	.word	0x20000baa
 8004e3c:	2000055c 	.word	0x2000055c
 8004e40:	42c80000 	.word	0x42c80000
 8004e44:	20000ba0 	.word	0x20000ba0
 8004e48:	20000ba4 	.word	0x20000ba4
 8004e4c:	20000424 	.word	0x20000424
 8004e50:	20000c80 	.word	0x20000c80
 8004e54:	20000c84 	.word	0x20000c84
 8004e58:	20000858 	.word	0x20000858
 8004e5c:	20000c88 	.word	0x20000c88
 8004e60:	f7fb ff88 	bl	8000d74 <__aeabi_fmul>
 8004e64:	4603      	mov	r3, r0
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fc f960 	bl	800112c <__aeabi_f2iz>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fd fc10 	bl	8002694 <black_box_pack_int>

		black_box_pack_char(' ');
 8004e74:	2020      	movs	r0, #32
 8004e76:	f7fd fcdd 	bl	8002834 <black_box_pack_char>
		black_box_pack_int((int)(pid_velo_scale*1000));   // cm
 8004e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ef4 <blackbox+0x3ec>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	491e      	ldr	r1, [pc, #120]	@ (8004ef8 <blackbox+0x3f0>)
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fb ff77 	bl	8000d74 <__aeabi_fmul>
 8004e86:	4603      	mov	r3, r0
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fc f94f 	bl	800112c <__aeabi_f2iz>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fd fbff 	bl	8002694 <black_box_pack_int>

		/*----- end line && load data to sd card- -----*/
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8004e96:	2110      	movs	r1, #16
 8004e98:	4818      	ldr	r0, [pc, #96]	@ (8004efc <blackbox+0x3f4>)
 8004e9a:	f003 f908 	bl	80080ae <HAL_GPIO_TogglePin>
		//sdcard_fsize = black_box_get_file_size();
		black_box_pack_char('\n');
 8004e9e:	200a      	movs	r0, #10
 8004ea0:	f7fd fcc8 	bl	8002834 <black_box_pack_char>
		black_box_load();
 8004ea4:	f7fd fce0 	bl	8002868 <black_box_load>
 8004ea8:	e007      	b.n	8004eba <blackbox+0x3b2>
    }else{
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_RESET);
 8004eaa:	2200      	movs	r2, #0
 8004eac:	2110      	movs	r1, #16
 8004eae:	4813      	ldr	r0, [pc, #76]	@ (8004efc <blackbox+0x3f4>)
 8004eb0:	f003 f8e5 	bl	800807e <HAL_GPIO_WritePin>
    	black_box_reset = TRUE;
 8004eb4:	4b12      	ldr	r3, [pc, #72]	@ (8004f00 <blackbox+0x3f8>)
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	701a      	strb	r2, [r3, #0]
    }
    /* if error init again */
	if(puts_state == -1){
 8004eba:	4b12      	ldr	r3, [pc, #72]	@ (8004f04 <blackbox+0x3fc>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec2:	d109      	bne.n	8004ed8 <blackbox+0x3d0>
	   error_count ++;
 8004ec4:	4b10      	ldr	r3, [pc, #64]	@ (8004f08 <blackbox+0x400>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	4a0f      	ldr	r2, [pc, #60]	@ (8004f08 <blackbox+0x400>)
 8004ecc:	6013      	str	r3, [r2, #0]
	   //HAL_SD_Init(&hsd);
	   HAL_SD_InitCard(&hsd);
 8004ece:	480f      	ldr	r0, [pc, #60]	@ (8004f0c <blackbox+0x404>)
 8004ed0:	f005 fbb8 	bl	800a644 <HAL_SD_InitCard>
	   black_box_init();
 8004ed4:	f7fd fba6 	bl	8002624 <black_box_init>
	 }

	vTaskDelayUntil( &xLastWakeTime, xFrequency);
 8004ed8:	f107 0308 	add.w	r3, r7, #8
 8004edc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f00d ff10 	bl	8012d04 <vTaskDelayUntil>
#ifdef STACK_DEBUG
    stack_task_blackbox = uxTaskGetStackHighWaterMark( NULL );
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	f00e fbab 	bl	8013640 <uxTaskGetStackHighWaterMark>
 8004eea:	4603      	mov	r3, r0
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	4b08      	ldr	r3, [pc, #32]	@ (8004f10 <blackbox+0x408>)
 8004ef0:	801a      	strh	r2, [r3, #0]
  {
 8004ef2:	e618      	b.n	8004b26 <blackbox+0x1e>
 8004ef4:	20000c78 	.word	0x20000c78
 8004ef8:	447a0000 	.word	0x447a0000
 8004efc:	40010800 	.word	0x40010800
 8004f00:	20000872 	.word	0x20000872
 8004f04:	200003d8 	.word	0x200003d8
 8004f08:	20000874 	.word	0x20000874
 8004f0c:	20000924 	.word	0x20000924
 8004f10:	20000854 	.word	0x20000854

08004f14 <led_indicate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_indicate */
void led_indicate(void const * argument)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
		delay = 500;
		vTaskSuspend(task2Handle);
	}
	*/
	if(_gps.fix > 1){
 8004f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f50 <led_indicate+0x3c>)
 8004f1e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d903      	bls.n	8004f2e <led_indicate+0x1a>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8004f26:	2120      	movs	r1, #32
 8004f28:	480a      	ldr	r0, [pc, #40]	@ (8004f54 <led_indicate+0x40>)
 8004f2a:	f003 f8c0 	bl	80080ae <HAL_GPIO_TogglePin>
	}
#ifdef STACK_DEBUG
	stack_task_led = uxTaskGetStackHighWaterMark( NULL );
 8004f2e:	2000      	movs	r0, #0
 8004f30:	f00e fb86 	bl	8013640 <uxTaskGetStackHighWaterMark>
 8004f34:	4603      	mov	r3, r0
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	4b07      	ldr	r3, [pc, #28]	@ (8004f58 <led_indicate+0x44>)
 8004f3a:	801a      	strh	r2, [r3, #0]
#endif
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8004f3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004f40:	4806      	ldr	r0, [pc, #24]	@ (8004f5c <led_indicate+0x48>)
 8004f42:	f003 f8b4 	bl	80080ae <HAL_GPIO_TogglePin>
    osDelay(1000);
 8004f46:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f4a:	f00c fdda 	bl	8011b02 <osDelay>
	if(_gps.fix > 1){
 8004f4e:	e7e5      	b.n	8004f1c <led_indicate+0x8>
 8004f50:	20000424 	.word	0x20000424
 8004f54:	40010800 	.word	0x40010800
 8004f58:	2000084e 	.word	0x2000084e
 8004f5c:	40011000 	.word	0x40011000

08004f60 <read_sensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_sensor */
void read_sensor(void const * argument)
{
 8004f60:	b5b0      	push	{r4, r5, r7, lr}
 8004f62:	b08e      	sub	sp, #56	@ 0x38
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN read_sensor */
  /* Infinite loop */
	int16_t gyso_offset[3] = {0,0,0};
 8004f68:	2300      	movs	r3, #0
 8004f6a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004f70:	2300      	movs	r3, #0
 8004f72:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	axis3_t raw;
	uint8_t sample_count = 0;
 8004f74:	2300      	movs	r3, #0
 8004f76:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	int32_t gyro_add[3] = {0,0,0};
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	617b      	str	r3, [r7, #20]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61bb      	str	r3, [r7, #24]
 8004f82:	2300      	movs	r3, #0
 8004f84:	61fb      	str	r3, [r7, #28]
	uint8_t first_loop = 1;
 8004f86:	2301      	movs	r3, #1
 8004f88:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	compassInit();
 8004f8c:	f7fd fd06 	bl	800299c <compassInit>
	mpu6050_init(&hi2c2);
 8004f90:	488f      	ldr	r0, [pc, #572]	@ (80051d0 <read_sensor+0x270>)
 8004f92:	f7fd f98f 	bl	80022b4 <mpu6050_init>
	HAL_Delay(2000);
 8004f96:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004f9a:	f002 f93d 	bl	8007218 <HAL_Delay>
	imu_calibrate(&gyso_offset[0],&gyso_offset[1],&gyso_offset[2]);
 8004f9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004fa2:	1d1a      	adds	r2, r3, #4
 8004fa4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004fa8:	1c99      	adds	r1, r3, #2
 8004faa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fe fa98 	bl	80034e4 <imu_calibrate>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 2;
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	633b      	str	r3, [r7, #48]	@ 0x30
	xLastWakeTime = xTaskGetTickCount();
 8004fb8:	f00e f868 	bl	801308c <xTaskGetTickCount>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	613b      	str	r3, [r7, #16]

	for(;;)
	{
		mpu6050_gyro_get_raw(&raw);
 8004fc0:	f107 0320 	add.w	r3, r7, #32
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7fd f9c7 	bl	8002358 <mpu6050_gyro_get_raw>
		gyro_add[0] += (raw.x - gyso_offset[0]);
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8004fd6:	1acb      	subs	r3, r1, r3
 8004fd8:	4413      	add	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]
		gyro_add[1] += (raw.y - gyso_offset[1]);
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8004fe8:	1acb      	subs	r3, r1, r3
 8004fea:	4413      	add	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
		gyro_add[2] += (raw.z - gyso_offset[2]);
 8004fee:	69fa      	ldr	r2, [r7, #28]
 8004ff0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8004ffa:	1acb      	subs	r3, r1, r3
 8004ffc:	4413      	add	r3, r2
 8004ffe:	61fb      	str	r3, [r7, #28]
		sample_count ++;
 8005000:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005004:	3301      	adds	r3, #1
 8005006:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if(sample_count >= 5){
 800500a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800500e:	2b04      	cmp	r3, #4
 8005010:	d937      	bls.n	8005082 <read_sensor+0x122>
		   axis3_t mag;
		   compass_get(&mag);
 8005012:	f107 0308 	add.w	r3, r7, #8
 8005016:	4618      	mov	r0, r3
 8005018:	f7fd fcfc 	bl	8002a14 <compass_get>
		   mag_raw[0] = mag.x;
 800501c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005020:	4b6c      	ldr	r3, [pc, #432]	@ (80051d4 <read_sensor+0x274>)
 8005022:	801a      	strh	r2, [r3, #0]
		   mag_raw[1] = mag.y;
 8005024:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005028:	4b6a      	ldr	r3, [pc, #424]	@ (80051d4 <read_sensor+0x274>)
 800502a:	805a      	strh	r2, [r3, #2]
		   mag_raw[2] = mag.z;
 800502c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005030:	4b68      	ldr	r3, [pc, #416]	@ (80051d4 <read_sensor+0x274>)
 8005032:	809a      	strh	r2, [r3, #4]

		   gyro_imu[0] = (int16_t)(gyro_add[0]/5);
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	4a68      	ldr	r2, [pc, #416]	@ (80051d8 <read_sensor+0x278>)
 8005038:	fb82 1203 	smull	r1, r2, r2, r3
 800503c:	1052      	asrs	r2, r2, #1
 800503e:	17db      	asrs	r3, r3, #31
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	b21a      	sxth	r2, r3
 8005044:	4b65      	ldr	r3, [pc, #404]	@ (80051dc <read_sensor+0x27c>)
 8005046:	801a      	strh	r2, [r3, #0]
		   gyro_imu[1] = (int16_t)(gyro_add[1]/5);
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	4a63      	ldr	r2, [pc, #396]	@ (80051d8 <read_sensor+0x278>)
 800504c:	fb82 1203 	smull	r1, r2, r2, r3
 8005050:	1052      	asrs	r2, r2, #1
 8005052:	17db      	asrs	r3, r3, #31
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	b21a      	sxth	r2, r3
 8005058:	4b60      	ldr	r3, [pc, #384]	@ (80051dc <read_sensor+0x27c>)
 800505a:	805a      	strh	r2, [r3, #2]
		   gyro_imu[2] = (int16_t)(gyro_add[2]/5);
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	4a5e      	ldr	r2, [pc, #376]	@ (80051d8 <read_sensor+0x278>)
 8005060:	fb82 1203 	smull	r1, r2, r2, r3
 8005064:	1052      	asrs	r2, r2, #1
 8005066:	17db      	asrs	r3, r3, #31
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	b21a      	sxth	r2, r3
 800506c:	4b5b      	ldr	r3, [pc, #364]	@ (80051dc <read_sensor+0x27c>)
 800506e:	809a      	strh	r2, [r3, #4]
		   gyro_add[0] = 0;
 8005070:	2300      	movs	r3, #0
 8005072:	617b      	str	r3, [r7, #20]
		   gyro_add[1] = 0;
 8005074:	2300      	movs	r3, #0
 8005076:	61bb      	str	r3, [r7, #24]
		   gyro_add[2] = 0;
 8005078:	2300      	movs	r3, #0
 800507a:	61fb      	str	r3, [r7, #28]
		   sample_count = 0;
 800507c:	2300      	movs	r3, #0
 800507e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		   //vTaskResume(task1Handle);
		}

		raw.x = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	843b      	strh	r3, [r7, #32]
		raw.y = 0;
 8005086:	2300      	movs	r3, #0
 8005088:	847b      	strh	r3, [r7, #34]	@ 0x22
		raw.z = 0;
 800508a:	2300      	movs	r3, #0
 800508c:	84bb      	strh	r3, [r7, #36]	@ 0x24

		mpu6050_acc_get_raw(&raw);
 800508e:	f107 0320 	add.w	r3, r7, #32
 8005092:	4618      	mov	r0, r3
 8005094:	f7fd f99c 	bl	80023d0 <mpu6050_acc_get_raw>
		if(first_loop){
 8005098:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00e      	beq.n	80050be <read_sensor+0x15e>
			acc_imu[0] = raw.x;
 80050a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80050a4:	4b4e      	ldr	r3, [pc, #312]	@ (80051e0 <read_sensor+0x280>)
 80050a6:	801a      	strh	r2, [r3, #0]
			acc_imu[1] = raw.y;
 80050a8:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 80050ac:	4b4c      	ldr	r3, [pc, #304]	@ (80051e0 <read_sensor+0x280>)
 80050ae:	805a      	strh	r2, [r3, #2]
			acc_imu[2] = raw.z;
 80050b0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80050b4:	4b4a      	ldr	r3, [pc, #296]	@ (80051e0 <read_sensor+0x280>)
 80050b6:	809a      	strh	r2, [r3, #4]
			first_loop = 0;
 80050b8:	2300      	movs	r3, #0
 80050ba:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		}
		// low pass filter
		acc_imu[0] += 0.1*(raw.x - acc_imu[0]);
 80050be:	4b48      	ldr	r3, [pc, #288]	@ (80051e0 <read_sensor+0x280>)
 80050c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7fb fa05 	bl	80004d4 <__aeabi_i2d>
 80050ca:	4604      	mov	r4, r0
 80050cc:	460d      	mov	r5, r1
 80050ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80050d2:	461a      	mov	r2, r3
 80050d4:	4b42      	ldr	r3, [pc, #264]	@ (80051e0 <read_sensor+0x280>)
 80050d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fb f9f9 	bl	80004d4 <__aeabi_i2d>
 80050e2:	a339      	add	r3, pc, #228	@ (adr r3, 80051c8 <read_sensor+0x268>)
 80050e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e8:	f7fb fa5e 	bl	80005a8 <__aeabi_dmul>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	4620      	mov	r0, r4
 80050f2:	4629      	mov	r1, r5
 80050f4:	f7fb f8a2 	bl	800023c <__adddf3>
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	4610      	mov	r0, r2
 80050fe:	4619      	mov	r1, r3
 8005100:	f7fb fd02 	bl	8000b08 <__aeabi_d2iz>
 8005104:	4603      	mov	r3, r0
 8005106:	b21a      	sxth	r2, r3
 8005108:	4b35      	ldr	r3, [pc, #212]	@ (80051e0 <read_sensor+0x280>)
 800510a:	801a      	strh	r2, [r3, #0]
		acc_imu[1] += 0.1*(raw.y - acc_imu[1]);
 800510c:	4b34      	ldr	r3, [pc, #208]	@ (80051e0 <read_sensor+0x280>)
 800510e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005112:	4618      	mov	r0, r3
 8005114:	f7fb f9de 	bl	80004d4 <__aeabi_i2d>
 8005118:	4604      	mov	r4, r0
 800511a:	460d      	mov	r5, r1
 800511c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8005120:	461a      	mov	r2, r3
 8005122:	4b2f      	ldr	r3, [pc, #188]	@ (80051e0 <read_sensor+0x280>)
 8005124:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	4618      	mov	r0, r3
 800512c:	f7fb f9d2 	bl	80004d4 <__aeabi_i2d>
 8005130:	a325      	add	r3, pc, #148	@ (adr r3, 80051c8 <read_sensor+0x268>)
 8005132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005136:	f7fb fa37 	bl	80005a8 <__aeabi_dmul>
 800513a:	4602      	mov	r2, r0
 800513c:	460b      	mov	r3, r1
 800513e:	4620      	mov	r0, r4
 8005140:	4629      	mov	r1, r5
 8005142:	f7fb f87b 	bl	800023c <__adddf3>
 8005146:	4602      	mov	r2, r0
 8005148:	460b      	mov	r3, r1
 800514a:	4610      	mov	r0, r2
 800514c:	4619      	mov	r1, r3
 800514e:	f7fb fcdb 	bl	8000b08 <__aeabi_d2iz>
 8005152:	4603      	mov	r3, r0
 8005154:	b21a      	sxth	r2, r3
 8005156:	4b22      	ldr	r3, [pc, #136]	@ (80051e0 <read_sensor+0x280>)
 8005158:	805a      	strh	r2, [r3, #2]
		acc_imu[2] += 0.1*(raw.z - acc_imu[2]);
 800515a:	4b21      	ldr	r3, [pc, #132]	@ (80051e0 <read_sensor+0x280>)
 800515c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005160:	4618      	mov	r0, r3
 8005162:	f7fb f9b7 	bl	80004d4 <__aeabi_i2d>
 8005166:	4604      	mov	r4, r0
 8005168:	460d      	mov	r5, r1
 800516a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800516e:	461a      	mov	r2, r3
 8005170:	4b1b      	ldr	r3, [pc, #108]	@ (80051e0 <read_sensor+0x280>)
 8005172:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	4618      	mov	r0, r3
 800517a:	f7fb f9ab 	bl	80004d4 <__aeabi_i2d>
 800517e:	a312      	add	r3, pc, #72	@ (adr r3, 80051c8 <read_sensor+0x268>)
 8005180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005184:	f7fb fa10 	bl	80005a8 <__aeabi_dmul>
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	4620      	mov	r0, r4
 800518e:	4629      	mov	r1, r5
 8005190:	f7fb f854 	bl	800023c <__adddf3>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	4610      	mov	r0, r2
 800519a:	4619      	mov	r1, r3
 800519c:	f7fb fcb4 	bl	8000b08 <__aeabi_d2iz>
 80051a0:	4603      	mov	r3, r0
 80051a2:	b21a      	sxth	r2, r3
 80051a4:	4b0e      	ldr	r3, [pc, #56]	@ (80051e0 <read_sensor+0x280>)
 80051a6:	809a      	strh	r2, [r3, #4]
#ifdef STACK_DEBUG
	    stack_task_sensor = uxTaskGetStackHighWaterMark( NULL );
 80051a8:	2000      	movs	r0, #0
 80051aa:	f00e fa49 	bl	8013640 <uxTaskGetStackHighWaterMark>
 80051ae:	4603      	mov	r3, r0
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	4b0c      	ldr	r3, [pc, #48]	@ (80051e4 <read_sensor+0x284>)
 80051b4:	801a      	strh	r2, [r3, #0]
#endif
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 80051b6:	f107 0310 	add.w	r3, r7, #16
 80051ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80051bc:	4618      	mov	r0, r3
 80051be:	f00d fda1 	bl	8012d04 <vTaskDelayUntil>
		mpu6050_gyro_get_raw(&raw);
 80051c2:	e6fd      	b.n	8004fc0 <read_sensor+0x60>
 80051c4:	f3af 8000 	nop.w
 80051c8:	9999999a 	.word	0x9999999a
 80051cc:	3fb99999 	.word	0x3fb99999
 80051d0:	200008d0 	.word	0x200008d0
 80051d4:	2000086c 	.word	0x2000086c
 80051d8:	66666667 	.word	0x66666667
 80051dc:	2000085c 	.word	0x2000085c
 80051e0:	20000864 	.word	0x20000864
 80051e4:	20000850 	.word	0x20000850

080051e8 <mavlinkOSD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_mavlinkOSD */
void mavlinkOSD(void const * argument)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN mavlinkOSD */
	mavlinkInit(1,1,&huart1,57600);
 80051f0:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 80051f4:	4a0d      	ldr	r2, [pc, #52]	@ (800522c <mavlinkOSD+0x44>)
 80051f6:	2101      	movs	r1, #1
 80051f8:	2001      	movs	r0, #1
 80051fa:	f001 fe7d 	bl	8006ef8 <mavlinkInit>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50;  // 25 ms
 80051fe:	2332      	movs	r3, #50	@ 0x32
 8005200:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 8005202:	f00d ff43 	bl	801308c <xTaskGetTickCount>
 8005206:	4603      	mov	r3, r0
 8005208:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	mavlink_osd();
 800520a:	f001 feab 	bl	8006f64 <mavlink_osd>
	//mavlink_send_heartbeat();
	vTaskDelayUntil( &xLastWakeTime, xFrequency);
 800520e:	f107 0308 	add.w	r3, r7, #8
 8005212:	68f9      	ldr	r1, [r7, #12]
 8005214:	4618      	mov	r0, r3
 8005216:	f00d fd75 	bl	8012d04 <vTaskDelayUntil>
#ifdef STACK_DEBUG
    stack_task_mavOSD = uxTaskGetStackHighWaterMark( NULL );
 800521a:	2000      	movs	r0, #0
 800521c:	f00e fa10 	bl	8013640 <uxTaskGetStackHighWaterMark>
 8005220:	4603      	mov	r3, r0
 8005222:	b29a      	uxth	r2, r3
 8005224:	4b02      	ldr	r3, [pc, #8]	@ (8005230 <mavlinkOSD+0x48>)
 8005226:	801a      	strh	r2, [r3, #0]
	mavlink_osd();
 8005228:	bf00      	nop
 800522a:	e7ee      	b.n	800520a <mavlinkOSD+0x22>
 800522c:	20000a84 	.word	0x20000a84
 8005230:	20000852 	.word	0x20000852

08005234 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800523a:	f107 0310 	add.w	r3, r7, #16
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	605a      	str	r2, [r3, #4]
 8005244:	609a      	str	r2, [r3, #8]
 8005246:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005248:	4b46      	ldr	r3, [pc, #280]	@ (8005364 <MX_GPIO_Init+0x130>)
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	4a45      	ldr	r2, [pc, #276]	@ (8005364 <MX_GPIO_Init+0x130>)
 800524e:	f043 0310 	orr.w	r3, r3, #16
 8005252:	6193      	str	r3, [r2, #24]
 8005254:	4b43      	ldr	r3, [pc, #268]	@ (8005364 <MX_GPIO_Init+0x130>)
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	f003 0310 	and.w	r3, r3, #16
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005260:	4b40      	ldr	r3, [pc, #256]	@ (8005364 <MX_GPIO_Init+0x130>)
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	4a3f      	ldr	r2, [pc, #252]	@ (8005364 <MX_GPIO_Init+0x130>)
 8005266:	f043 0304 	orr.w	r3, r3, #4
 800526a:	6193      	str	r3, [r2, #24]
 800526c:	4b3d      	ldr	r3, [pc, #244]	@ (8005364 <MX_GPIO_Init+0x130>)
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	60bb      	str	r3, [r7, #8]
 8005276:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005278:	4b3a      	ldr	r3, [pc, #232]	@ (8005364 <MX_GPIO_Init+0x130>)
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	4a39      	ldr	r2, [pc, #228]	@ (8005364 <MX_GPIO_Init+0x130>)
 800527e:	f043 0308 	orr.w	r3, r3, #8
 8005282:	6193      	str	r3, [r2, #24]
 8005284:	4b37      	ldr	r3, [pc, #220]	@ (8005364 <MX_GPIO_Init+0x130>)
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	f003 0308 	and.w	r3, r3, #8
 800528c:	607b      	str	r3, [r7, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005290:	4b34      	ldr	r3, [pc, #208]	@ (8005364 <MX_GPIO_Init+0x130>)
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	4a33      	ldr	r2, [pc, #204]	@ (8005364 <MX_GPIO_Init+0x130>)
 8005296:	f043 0320 	orr.w	r3, r3, #32
 800529a:	6193      	str	r3, [r2, #24]
 800529c:	4b31      	ldr	r3, [pc, #196]	@ (8005364 <MX_GPIO_Init+0x130>)
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	f003 0320 	and.w	r3, r3, #32
 80052a4:	603b      	str	r3, [r7, #0]
 80052a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80052a8:	2200      	movs	r2, #0
 80052aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80052ae:	482e      	ldr	r0, [pc, #184]	@ (8005368 <MX_GPIO_Init+0x134>)
 80052b0:	f002 fee5 	bl	800807e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80052b4:	2200      	movs	r2, #0
 80052b6:	2130      	movs	r1, #48	@ 0x30
 80052b8:	482c      	ldr	r0, [pc, #176]	@ (800536c <MX_GPIO_Init+0x138>)
 80052ba:	f002 fee0 	bl	800807e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80052be:	2200      	movs	r2, #0
 80052c0:	21c0      	movs	r1, #192	@ 0xc0
 80052c2:	482b      	ldr	r0, [pc, #172]	@ (8005370 <MX_GPIO_Init+0x13c>)
 80052c4:	f002 fedb 	bl	800807e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80052c8:	2200      	movs	r2, #0
 80052ca:	2118      	movs	r1, #24
 80052cc:	4829      	ldr	r0, [pc, #164]	@ (8005374 <MX_GPIO_Init+0x140>)
 80052ce:	f002 fed6 	bl	800807e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80052d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80052d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052d8:	2301      	movs	r3, #1
 80052da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052dc:	2300      	movs	r3, #0
 80052de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052e0:	2302      	movs	r3, #2
 80052e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052e4:	f107 0310 	add.w	r3, r7, #16
 80052e8:	4619      	mov	r1, r3
 80052ea:	481f      	ldr	r0, [pc, #124]	@ (8005368 <MX_GPIO_Init+0x134>)
 80052ec:	f002 fd1c 	bl	8007d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80052f0:	2330      	movs	r3, #48	@ 0x30
 80052f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052f4:	2301      	movs	r3, #1
 80052f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f8:	2300      	movs	r3, #0
 80052fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052fc:	2302      	movs	r3, #2
 80052fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005300:	f107 0310 	add.w	r3, r7, #16
 8005304:	4619      	mov	r1, r3
 8005306:	4819      	ldr	r0, [pc, #100]	@ (800536c <MX_GPIO_Init+0x138>)
 8005308:	f002 fd0e 	bl	8007d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800530c:	23c0      	movs	r3, #192	@ 0xc0
 800530e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005310:	2301      	movs	r3, #1
 8005312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005314:	2300      	movs	r3, #0
 8005316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005318:	2302      	movs	r3, #2
 800531a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800531c:	f107 0310 	add.w	r3, r7, #16
 8005320:	4619      	mov	r1, r3
 8005322:	4813      	ldr	r0, [pc, #76]	@ (8005370 <MX_GPIO_Init+0x13c>)
 8005324:	f002 fd00 	bl	8007d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8005328:	2318      	movs	r3, #24
 800532a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800532c:	2301      	movs	r3, #1
 800532e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005330:	2300      	movs	r3, #0
 8005332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005334:	2302      	movs	r3, #2
 8005336:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005338:	f107 0310 	add.w	r3, r7, #16
 800533c:	4619      	mov	r1, r3
 800533e:	480d      	ldr	r0, [pc, #52]	@ (8005374 <MX_GPIO_Init+0x140>)
 8005340:	f002 fcf2 	bl	8007d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005344:	2320      	movs	r3, #32
 8005346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005348:	2300      	movs	r3, #0
 800534a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800534c:	2302      	movs	r3, #2
 800534e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005350:	f107 0310 	add.w	r3, r7, #16
 8005354:	4619      	mov	r1, r3
 8005356:	4807      	ldr	r0, [pc, #28]	@ (8005374 <MX_GPIO_Init+0x140>)
 8005358:	f002 fce6 	bl	8007d28 <HAL_GPIO_Init>

}
 800535c:	bf00      	nop
 800535e:	3720      	adds	r7, #32
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	40021000 	.word	0x40021000
 8005368:	40011000 	.word	0x40011000
 800536c:	40010800 	.word	0x40010800
 8005370:	40011400 	.word	0x40011400
 8005374:	40010c00 	.word	0x40010c00

08005378 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800537c:	4b12      	ldr	r3, [pc, #72]	@ (80053c8 <MX_I2C1_Init+0x50>)
 800537e:	4a13      	ldr	r2, [pc, #76]	@ (80053cc <MX_I2C1_Init+0x54>)
 8005380:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005382:	4b11      	ldr	r3, [pc, #68]	@ (80053c8 <MX_I2C1_Init+0x50>)
 8005384:	4a12      	ldr	r2, [pc, #72]	@ (80053d0 <MX_I2C1_Init+0x58>)
 8005386:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005388:	4b0f      	ldr	r3, [pc, #60]	@ (80053c8 <MX_I2C1_Init+0x50>)
 800538a:	2200      	movs	r2, #0
 800538c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800538e:	4b0e      	ldr	r3, [pc, #56]	@ (80053c8 <MX_I2C1_Init+0x50>)
 8005390:	2200      	movs	r2, #0
 8005392:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005394:	4b0c      	ldr	r3, [pc, #48]	@ (80053c8 <MX_I2C1_Init+0x50>)
 8005396:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800539a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800539c:	4b0a      	ldr	r3, [pc, #40]	@ (80053c8 <MX_I2C1_Init+0x50>)
 800539e:	2200      	movs	r2, #0
 80053a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80053a2:	4b09      	ldr	r3, [pc, #36]	@ (80053c8 <MX_I2C1_Init+0x50>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80053a8:	4b07      	ldr	r3, [pc, #28]	@ (80053c8 <MX_I2C1_Init+0x50>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80053ae:	4b06      	ldr	r3, [pc, #24]	@ (80053c8 <MX_I2C1_Init+0x50>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80053b4:	4804      	ldr	r0, [pc, #16]	@ (80053c8 <MX_I2C1_Init+0x50>)
 80053b6:	f002 fe93 	bl	80080e0 <HAL_I2C_Init>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80053c0:	f000 f92a 	bl	8005618 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80053c4:	bf00      	nop
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	2000087c 	.word	0x2000087c
 80053cc:	40005400 	.word	0x40005400
 80053d0:	00061a80 	.word	0x00061a80

080053d4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80053d8:	4b12      	ldr	r3, [pc, #72]	@ (8005424 <MX_I2C2_Init+0x50>)
 80053da:	4a13      	ldr	r2, [pc, #76]	@ (8005428 <MX_I2C2_Init+0x54>)
 80053dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80053de:	4b11      	ldr	r3, [pc, #68]	@ (8005424 <MX_I2C2_Init+0x50>)
 80053e0:	4a12      	ldr	r2, [pc, #72]	@ (800542c <MX_I2C2_Init+0x58>)
 80053e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80053e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005424 <MX_I2C2_Init+0x50>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80053ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005424 <MX_I2C2_Init+0x50>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80053f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005424 <MX_I2C2_Init+0x50>)
 80053f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80053f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80053f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005424 <MX_I2C2_Init+0x50>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80053fe:	4b09      	ldr	r3, [pc, #36]	@ (8005424 <MX_I2C2_Init+0x50>)
 8005400:	2200      	movs	r2, #0
 8005402:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005404:	4b07      	ldr	r3, [pc, #28]	@ (8005424 <MX_I2C2_Init+0x50>)
 8005406:	2200      	movs	r2, #0
 8005408:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800540a:	4b06      	ldr	r3, [pc, #24]	@ (8005424 <MX_I2C2_Init+0x50>)
 800540c:	2200      	movs	r2, #0
 800540e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005410:	4804      	ldr	r0, [pc, #16]	@ (8005424 <MX_I2C2_Init+0x50>)
 8005412:	f002 fe65 	bl	80080e0 <HAL_I2C_Init>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800541c:	f000 f8fc 	bl	8005618 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005420:	bf00      	nop
 8005422:	bd80      	pop	{r7, pc}
 8005424:	200008d0 	.word	0x200008d0
 8005428:	40005800 	.word	0x40005800
 800542c:	00061a80 	.word	0x00061a80

08005430 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b08a      	sub	sp, #40	@ 0x28
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005438:	f107 0318 	add.w	r3, r7, #24
 800543c:	2200      	movs	r2, #0
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	605a      	str	r2, [r3, #4]
 8005442:	609a      	str	r2, [r3, #8]
 8005444:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a2b      	ldr	r2, [pc, #172]	@ (80054f8 <HAL_I2C_MspInit+0xc8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d124      	bne.n	800549a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005450:	4b2a      	ldr	r3, [pc, #168]	@ (80054fc <HAL_I2C_MspInit+0xcc>)
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	4a29      	ldr	r2, [pc, #164]	@ (80054fc <HAL_I2C_MspInit+0xcc>)
 8005456:	f043 0308 	orr.w	r3, r3, #8
 800545a:	6193      	str	r3, [r2, #24]
 800545c:	4b27      	ldr	r3, [pc, #156]	@ (80054fc <HAL_I2C_MspInit+0xcc>)
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	f003 0308 	and.w	r3, r3, #8
 8005464:	617b      	str	r3, [r7, #20]
 8005466:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005468:	23c0      	movs	r3, #192	@ 0xc0
 800546a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800546c:	2312      	movs	r3, #18
 800546e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005470:	2303      	movs	r3, #3
 8005472:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005474:	f107 0318 	add.w	r3, r7, #24
 8005478:	4619      	mov	r1, r3
 800547a:	4821      	ldr	r0, [pc, #132]	@ (8005500 <HAL_I2C_MspInit+0xd0>)
 800547c:	f002 fc54 	bl	8007d28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005480:	4b1e      	ldr	r3, [pc, #120]	@ (80054fc <HAL_I2C_MspInit+0xcc>)
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	4a1d      	ldr	r2, [pc, #116]	@ (80054fc <HAL_I2C_MspInit+0xcc>)
 8005486:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800548a:	61d3      	str	r3, [r2, #28]
 800548c:	4b1b      	ldr	r3, [pc, #108]	@ (80054fc <HAL_I2C_MspInit+0xcc>)
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005494:	613b      	str	r3, [r7, #16]
 8005496:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8005498:	e029      	b.n	80054ee <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a19      	ldr	r2, [pc, #100]	@ (8005504 <HAL_I2C_MspInit+0xd4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d124      	bne.n	80054ee <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054a4:	4b15      	ldr	r3, [pc, #84]	@ (80054fc <HAL_I2C_MspInit+0xcc>)
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	4a14      	ldr	r2, [pc, #80]	@ (80054fc <HAL_I2C_MspInit+0xcc>)
 80054aa:	f043 0308 	orr.w	r3, r3, #8
 80054ae:	6193      	str	r3, [r2, #24]
 80054b0:	4b12      	ldr	r3, [pc, #72]	@ (80054fc <HAL_I2C_MspInit+0xcc>)
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	60fb      	str	r3, [r7, #12]
 80054ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80054bc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80054c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80054c2:	2312      	movs	r3, #18
 80054c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80054c6:	2303      	movs	r3, #3
 80054c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054ca:	f107 0318 	add.w	r3, r7, #24
 80054ce:	4619      	mov	r1, r3
 80054d0:	480b      	ldr	r0, [pc, #44]	@ (8005500 <HAL_I2C_MspInit+0xd0>)
 80054d2:	f002 fc29 	bl	8007d28 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80054d6:	4b09      	ldr	r3, [pc, #36]	@ (80054fc <HAL_I2C_MspInit+0xcc>)
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	4a08      	ldr	r2, [pc, #32]	@ (80054fc <HAL_I2C_MspInit+0xcc>)
 80054dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80054e0:	61d3      	str	r3, [r2, #28]
 80054e2:	4b06      	ldr	r3, [pc, #24]	@ (80054fc <HAL_I2C_MspInit+0xcc>)
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ea:	60bb      	str	r3, [r7, #8]
 80054ec:	68bb      	ldr	r3, [r7, #8]
}
 80054ee:	bf00      	nop
 80054f0:	3728      	adds	r7, #40	@ 0x28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	40005400 	.word	0x40005400
 80054fc:	40021000 	.word	0x40021000
 8005500:	40010c00 	.word	0x40010c00
 8005504:	40005800 	.word	0x40005800

08005508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800550c:	f001 fe52 	bl	80071b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005510:	f000 f81c 	bl	800554c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005514:	f7ff fe8e 	bl	8005234 <MX_GPIO_Init>
  MX_DMA_Init();
 8005518:	f7ff f996 	bl	8004848 <MX_DMA_Init>
  MX_I2C1_Init();
 800551c:	f7ff ff2c 	bl	8005378 <MX_I2C1_Init>
  MX_I2C2_Init();
 8005520:	f7ff ff58 	bl	80053d4 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005524:	f000 f87e 	bl	8005624 <MX_SDIO_SD_Init>
  MX_TIM7_Init();
 8005528:	f000 fad6 	bl	8005ad8 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 800552c:	f000 fb98 	bl	8005c60 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8005530:	f000 fbc0 	bl	8005cb4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8005534:	f000 fbe8 	bl	8005d08 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8005538:	f000 fa42 	bl	80059c0 <MX_TIM3_Init>
  MX_FATFS_Init();
 800553c:	f008 fc88 	bl	800de50 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8005540:	f7ff f9e2 	bl	8004908 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8005544:	f00c fa8a 	bl	8011a5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005548:	bf00      	nop
 800554a:	e7fd      	b.n	8005548 <main+0x40>

0800554c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b090      	sub	sp, #64	@ 0x40
 8005550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005552:	f107 0318 	add.w	r3, r7, #24
 8005556:	2228      	movs	r2, #40	@ 0x28
 8005558:	2100      	movs	r1, #0
 800555a:	4618      	mov	r0, r3
 800555c:	f00e ffc0 	bl	80144e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005560:	1d3b      	adds	r3, r7, #4
 8005562:	2200      	movs	r2, #0
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	605a      	str	r2, [r3, #4]
 8005568:	609a      	str	r2, [r3, #8]
 800556a:	60da      	str	r2, [r3, #12]
 800556c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800556e:	2301      	movs	r3, #1
 8005570:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005572:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005576:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005578:	2300      	movs	r3, #0
 800557a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800557c:	2301      	movs	r3, #1
 800557e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005580:	2302      	movs	r3, #2
 8005582:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005584:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005588:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800558a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800558e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005590:	f107 0318 	add.w	r3, r7, #24
 8005594:	4618      	mov	r0, r3
 8005596:	f004 fbe5 	bl	8009d64 <HAL_RCC_OscConfig>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80055a0:	f000 f83a 	bl	8005618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80055a4:	230f      	movs	r3, #15
 80055a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80055a8:	2302      	movs	r3, #2
 80055aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80055ac:	2300      	movs	r3, #0
 80055ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80055b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80055b6:	2300      	movs	r3, #0
 80055b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80055ba:	1d3b      	adds	r3, r7, #4
 80055bc:	2102      	movs	r1, #2
 80055be:	4618      	mov	r0, r3
 80055c0:	f004 fe52 	bl	800a268 <HAL_RCC_ClockConfig>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80055ca:	f000 f825 	bl	8005618 <Error_Handler>
  }
}
 80055ce:	bf00      	nop
 80055d0:	3740      	adds	r7, #64	@ 0x40
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
	...

080055d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055e8:	d102      	bne.n	80055f0 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80055ea:	f001 fdf9 	bl	80071e0 <HAL_IncTick>
  else if(htim->Instance == TIM7){
	  TIMER_CALLBACK();
  }

  /* USER CODE END Callback 1 */
}
 80055ee:	e00b      	b.n	8005608 <HAL_TIM_PeriodElapsedCallback+0x30>
  else if(htim->Instance == TIM7){
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a06      	ldr	r2, [pc, #24]	@ (8005610 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d106      	bne.n	8005608 <HAL_TIM_PeriodElapsedCallback+0x30>
	  TIMER_CALLBACK();
 80055fa:	4b06      	ldr	r3, [pc, #24]	@ (8005614 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8005602:	33ff      	adds	r3, #255	@ 0xff
 8005604:	4a03      	ldr	r2, [pc, #12]	@ (8005614 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8005606:	6013      	str	r3, [r2, #0]
}
 8005608:	bf00      	nop
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40001400 	.word	0x40001400
 8005614:	200005e0 	.word	0x200005e0

08005618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800561c:	b672      	cpsid	i
}
 800561e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005620:	bf00      	nop
 8005622:	e7fd      	b.n	8005620 <Error_Handler+0x8>

08005624 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8005628:	4b0e      	ldr	r3, [pc, #56]	@ (8005664 <MX_SDIO_SD_Init+0x40>)
 800562a:	4a0f      	ldr	r2, [pc, #60]	@ (8005668 <MX_SDIO_SD_Init+0x44>)
 800562c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800562e:	4b0d      	ldr	r3, [pc, #52]	@ (8005664 <MX_SDIO_SD_Init+0x40>)
 8005630:	2200      	movs	r2, #0
 8005632:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8005634:	4b0b      	ldr	r3, [pc, #44]	@ (8005664 <MX_SDIO_SD_Init+0x40>)
 8005636:	2200      	movs	r2, #0
 8005638:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800563a:	4b0a      	ldr	r3, [pc, #40]	@ (8005664 <MX_SDIO_SD_Init+0x40>)
 800563c:	2200      	movs	r2, #0
 800563e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8005640:	4b08      	ldr	r3, [pc, #32]	@ (8005664 <MX_SDIO_SD_Init+0x40>)
 8005642:	2200      	movs	r2, #0
 8005644:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005646:	4b07      	ldr	r3, [pc, #28]	@ (8005664 <MX_SDIO_SD_Init+0x40>)
 8005648:	2200      	movs	r2, #0
 800564a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 255;
 800564c:	4b05      	ldr	r3, [pc, #20]	@ (8005664 <MX_SDIO_SD_Init+0x40>)
 800564e:	22ff      	movs	r2, #255	@ 0xff
 8005650:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.ClockDiv = 255;
 8005652:	4b04      	ldr	r3, [pc, #16]	@ (8005664 <MX_SDIO_SD_Init+0x40>)
 8005654:	22ff      	movs	r2, #255	@ 0xff
 8005656:	619a      	str	r2, [r3, #24]
  HAL_SD_Init(&hsd);
 8005658:	4802      	ldr	r0, [pc, #8]	@ (8005664 <MX_SDIO_SD_Init+0x40>)
 800565a:	f004 ffc3 	bl	800a5e4 <HAL_SD_Init>
  /* USER CODE END SDIO_Init 2 */

}
 800565e:	bf00      	nop
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	20000924 	.word	0x20000924
 8005668:	40018000 	.word	0x40018000

0800566c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b08a      	sub	sp, #40	@ 0x28
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005674:	f107 0318 	add.w	r3, r7, #24
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]
 800567c:	605a      	str	r2, [r3, #4]
 800567e:	609a      	str	r2, [r3, #8]
 8005680:	60da      	str	r2, [r3, #12]
  if(sdHandle->Instance==SDIO)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a22      	ldr	r2, [pc, #136]	@ (8005710 <HAL_SD_MspInit+0xa4>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d13c      	bne.n	8005706 <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800568c:	4b21      	ldr	r3, [pc, #132]	@ (8005714 <HAL_SD_MspInit+0xa8>)
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	4a20      	ldr	r2, [pc, #128]	@ (8005714 <HAL_SD_MspInit+0xa8>)
 8005692:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005696:	6153      	str	r3, [r2, #20]
 8005698:	4b1e      	ldr	r3, [pc, #120]	@ (8005714 <HAL_SD_MspInit+0xa8>)
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056a0:	617b      	str	r3, [r7, #20]
 80056a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80056a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005714 <HAL_SD_MspInit+0xa8>)
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	4a1a      	ldr	r2, [pc, #104]	@ (8005714 <HAL_SD_MspInit+0xa8>)
 80056aa:	f043 0310 	orr.w	r3, r3, #16
 80056ae:	6193      	str	r3, [r2, #24]
 80056b0:	4b18      	ldr	r3, [pc, #96]	@ (8005714 <HAL_SD_MspInit+0xa8>)
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	f003 0310 	and.w	r3, r3, #16
 80056b8:	613b      	str	r3, [r7, #16]
 80056ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80056bc:	4b15      	ldr	r3, [pc, #84]	@ (8005714 <HAL_SD_MspInit+0xa8>)
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	4a14      	ldr	r2, [pc, #80]	@ (8005714 <HAL_SD_MspInit+0xa8>)
 80056c2:	f043 0320 	orr.w	r3, r3, #32
 80056c6:	6193      	str	r3, [r2, #24]
 80056c8:	4b12      	ldr	r3, [pc, #72]	@ (8005714 <HAL_SD_MspInit+0xa8>)
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	f003 0320 	and.w	r3, r3, #32
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80056d4:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 80056d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056da:	2302      	movs	r3, #2
 80056dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80056de:	2303      	movs	r3, #3
 80056e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056e2:	f107 0318 	add.w	r3, r7, #24
 80056e6:	4619      	mov	r1, r3
 80056e8:	480b      	ldr	r0, [pc, #44]	@ (8005718 <HAL_SD_MspInit+0xac>)
 80056ea:	f002 fb1d 	bl	8007d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80056ee:	2304      	movs	r3, #4
 80056f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056f2:	2302      	movs	r3, #2
 80056f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80056f6:	2303      	movs	r3, #3
 80056f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80056fa:	f107 0318 	add.w	r3, r7, #24
 80056fe:	4619      	mov	r1, r3
 8005700:	4806      	ldr	r0, [pc, #24]	@ (800571c <HAL_SD_MspInit+0xb0>)
 8005702:	f002 fb11 	bl	8007d28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8005706:	bf00      	nop
 8005708:	3728      	adds	r7, #40	@ 0x28
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	40018000 	.word	0x40018000
 8005714:	40021000 	.word	0x40021000
 8005718:	40011000 	.word	0x40011000
 800571c:	40011400 	.word	0x40011400

08005720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005726:	4b18      	ldr	r3, [pc, #96]	@ (8005788 <HAL_MspInit+0x68>)
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	4a17      	ldr	r2, [pc, #92]	@ (8005788 <HAL_MspInit+0x68>)
 800572c:	f043 0301 	orr.w	r3, r3, #1
 8005730:	6193      	str	r3, [r2, #24]
 8005732:	4b15      	ldr	r3, [pc, #84]	@ (8005788 <HAL_MspInit+0x68>)
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	60bb      	str	r3, [r7, #8]
 800573c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800573e:	4b12      	ldr	r3, [pc, #72]	@ (8005788 <HAL_MspInit+0x68>)
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	4a11      	ldr	r2, [pc, #68]	@ (8005788 <HAL_MspInit+0x68>)
 8005744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005748:	61d3      	str	r3, [r2, #28]
 800574a:	4b0f      	ldr	r3, [pc, #60]	@ (8005788 <HAL_MspInit+0x68>)
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005752:	607b      	str	r3, [r7, #4]
 8005754:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005756:	2200      	movs	r2, #0
 8005758:	210f      	movs	r1, #15
 800575a:	f06f 0001 	mvn.w	r0, #1
 800575e:	f001 fe34 	bl	80073ca <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005762:	4b0a      	ldr	r3, [pc, #40]	@ (800578c <HAL_MspInit+0x6c>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	4a04      	ldr	r2, [pc, #16]	@ (800578c <HAL_MspInit+0x6c>)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800577e:	bf00      	nop
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	40021000 	.word	0x40021000
 800578c:	40010000 	.word	0x40010000

08005790 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b08e      	sub	sp, #56	@ 0x38
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80057a6:	4b34      	ldr	r3, [pc, #208]	@ (8005878 <HAL_InitTick+0xe8>)
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	4a33      	ldr	r2, [pc, #204]	@ (8005878 <HAL_InitTick+0xe8>)
 80057ac:	f043 0301 	orr.w	r3, r3, #1
 80057b0:	61d3      	str	r3, [r2, #28]
 80057b2:	4b31      	ldr	r3, [pc, #196]	@ (8005878 <HAL_InitTick+0xe8>)
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80057be:	f107 0210 	add.w	r2, r7, #16
 80057c2:	f107 0314 	add.w	r3, r7, #20
 80057c6:	4611      	mov	r1, r2
 80057c8:	4618      	mov	r0, r3
 80057ca:	f004 febd 	bl	800a548 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80057d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d103      	bne.n	80057e0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80057d8:	f004 fe8e 	bl	800a4f8 <HAL_RCC_GetPCLK1Freq>
 80057dc:	6378      	str	r0, [r7, #52]	@ 0x34
 80057de:	e004      	b.n	80057ea <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80057e0:	f004 fe8a 	bl	800a4f8 <HAL_RCC_GetPCLK1Freq>
 80057e4:	4603      	mov	r3, r0
 80057e6:	005b      	lsls	r3, r3, #1
 80057e8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80057ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ec:	4a23      	ldr	r2, [pc, #140]	@ (800587c <HAL_InitTick+0xec>)
 80057ee:	fba2 2303 	umull	r2, r3, r2, r3
 80057f2:	0c9b      	lsrs	r3, r3, #18
 80057f4:	3b01      	subs	r3, #1
 80057f6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80057f8:	4b21      	ldr	r3, [pc, #132]	@ (8005880 <HAL_InitTick+0xf0>)
 80057fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80057fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8005800:	4b1f      	ldr	r3, [pc, #124]	@ (8005880 <HAL_InitTick+0xf0>)
 8005802:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005806:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8005808:	4a1d      	ldr	r2, [pc, #116]	@ (8005880 <HAL_InitTick+0xf0>)
 800580a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800580e:	4b1c      	ldr	r3, [pc, #112]	@ (8005880 <HAL_InitTick+0xf0>)
 8005810:	2200      	movs	r2, #0
 8005812:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005814:	4b1a      	ldr	r3, [pc, #104]	@ (8005880 <HAL_InitTick+0xf0>)
 8005816:	2200      	movs	r2, #0
 8005818:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800581a:	4b19      	ldr	r3, [pc, #100]	@ (8005880 <HAL_InitTick+0xf0>)
 800581c:	2200      	movs	r2, #0
 800581e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8005820:	4817      	ldr	r0, [pc, #92]	@ (8005880 <HAL_InitTick+0xf0>)
 8005822:	f005 fe67 	bl	800b4f4 <HAL_TIM_Base_Init>
 8005826:	4603      	mov	r3, r0
 8005828:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800582c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005830:	2b00      	cmp	r3, #0
 8005832:	d11b      	bne.n	800586c <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8005834:	4812      	ldr	r0, [pc, #72]	@ (8005880 <HAL_InitTick+0xf0>)
 8005836:	f005 fead 	bl	800b594 <HAL_TIM_Base_Start_IT>
 800583a:	4603      	mov	r3, r0
 800583c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8005840:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005844:	2b00      	cmp	r3, #0
 8005846:	d111      	bne.n	800586c <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005848:	201c      	movs	r0, #28
 800584a:	f001 fdda 	bl	8007402 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b0f      	cmp	r3, #15
 8005852:	d808      	bhi.n	8005866 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8005854:	2200      	movs	r2, #0
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	201c      	movs	r0, #28
 800585a:	f001 fdb6 	bl	80073ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800585e:	4a09      	ldr	r2, [pc, #36]	@ (8005884 <HAL_InitTick+0xf4>)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6013      	str	r3, [r2, #0]
 8005864:	e002      	b.n	800586c <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800586c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8005870:	4618      	mov	r0, r3
 8005872:	3738      	adds	r7, #56	@ 0x38
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40021000 	.word	0x40021000
 800587c:	431bde83 	.word	0x431bde83
 8005880:	200009a8 	.word	0x200009a8
 8005884:	20000068 	.word	0x20000068

08005888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800588c:	bf00      	nop
 800588e:	e7fd      	b.n	800588c <NMI_Handler+0x4>

08005890 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005890:	b480      	push	{r7}
 8005892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005894:	bf00      	nop
 8005896:	e7fd      	b.n	8005894 <HardFault_Handler+0x4>

08005898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800589c:	bf00      	nop
 800589e:	e7fd      	b.n	800589c <MemManage_Handler+0x4>

080058a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80058a4:	bf00      	nop
 80058a6:	e7fd      	b.n	80058a4 <BusFault_Handler+0x4>

080058a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80058ac:	bf00      	nop
 80058ae:	e7fd      	b.n	80058ac <UsageFault_Handler+0x4>

080058b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80058b4:	bf00      	nop
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bc80      	pop	{r7}
 80058ba:	4770      	bx	lr

080058bc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80058c0:	4802      	ldr	r0, [pc, #8]	@ (80058cc <DMA1_Channel4_IRQHandler+0x10>)
 80058c2:	f001 ffc7 	bl	8007854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80058c6:	bf00      	nop
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	20000b5c 	.word	0x20000b5c

080058d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80058d4:	4802      	ldr	r0, [pc, #8]	@ (80058e0 <TIM2_IRQHandler+0x10>)
 80058d6:	f005 ffcf 	bl	800b878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80058da:	bf00      	nop
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	200009a8 	.word	0x200009a8

080058e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80058e8:	4802      	ldr	r0, [pc, #8]	@ (80058f4 <TIM3_IRQHandler+0x10>)
 80058ea:	f005 ffc5 	bl	800b878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80058ee:	bf00      	nop
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	200009f4 	.word	0x200009f4

080058f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80058fc:	4802      	ldr	r0, [pc, #8]	@ (8005908 <USART1_IRQHandler+0x10>)
 80058fe:	f006 ff37 	bl	800c770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005902:	bf00      	nop
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	20000a84 	.word	0x20000a84

0800590c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005910:	4802      	ldr	r0, [pc, #8]	@ (800591c <USART2_IRQHandler+0x10>)
 8005912:	f006 ff2d 	bl	800c770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005916:	bf00      	nop
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	20000acc 	.word	0x20000acc

08005920 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005924:	4802      	ldr	r0, [pc, #8]	@ (8005930 <USART3_IRQHandler+0x10>)
 8005926:	f006 ff23 	bl	800c770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800592a:	bf00      	nop
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000b14 	.word	0x20000b14

08005934 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005938:	4802      	ldr	r0, [pc, #8]	@ (8005944 <TIM7_IRQHandler+0x10>)
 800593a:	f005 ff9d 	bl	800b878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800593e:	bf00      	nop
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	20000a3c 	.word	0x20000a3c

08005948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005950:	4a14      	ldr	r2, [pc, #80]	@ (80059a4 <_sbrk+0x5c>)
 8005952:	4b15      	ldr	r3, [pc, #84]	@ (80059a8 <_sbrk+0x60>)
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800595c:	4b13      	ldr	r3, [pc, #76]	@ (80059ac <_sbrk+0x64>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d102      	bne.n	800596a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005964:	4b11      	ldr	r3, [pc, #68]	@ (80059ac <_sbrk+0x64>)
 8005966:	4a12      	ldr	r2, [pc, #72]	@ (80059b0 <_sbrk+0x68>)
 8005968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800596a:	4b10      	ldr	r3, [pc, #64]	@ (80059ac <_sbrk+0x64>)
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4413      	add	r3, r2
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	429a      	cmp	r2, r3
 8005976:	d207      	bcs.n	8005988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005978:	f00e fdca 	bl	8014510 <__errno>
 800597c:	4603      	mov	r3, r0
 800597e:	220c      	movs	r2, #12
 8005980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005982:	f04f 33ff 	mov.w	r3, #4294967295
 8005986:	e009      	b.n	800599c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005988:	4b08      	ldr	r3, [pc, #32]	@ (80059ac <_sbrk+0x64>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800598e:	4b07      	ldr	r3, [pc, #28]	@ (80059ac <_sbrk+0x64>)
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4413      	add	r3, r2
 8005996:	4a05      	ldr	r2, [pc, #20]	@ (80059ac <_sbrk+0x64>)
 8005998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800599a:	68fb      	ldr	r3, [r7, #12]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3718      	adds	r7, #24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	2000c000 	.word	0x2000c000
 80059a8:	00004000 	.word	0x00004000
 80059ac:	200009f0 	.word	0x200009f0
 80059b0:	20002e10 	.word	0x20002e10

080059b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80059b4:	b480      	push	{r7}
 80059b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80059b8:	bf00      	nop
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bc80      	pop	{r7}
 80059be:	4770      	bx	lr

080059c0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08e      	sub	sp, #56	@ 0x38
 80059c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80059c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80059ca:	2200      	movs	r2, #0
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	605a      	str	r2, [r3, #4]
 80059d0:	609a      	str	r2, [r3, #8]
 80059d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059d4:	f107 0320 	add.w	r3, r7, #32
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80059de:	1d3b      	adds	r3, r7, #4
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	605a      	str	r2, [r3, #4]
 80059e6:	609a      	str	r2, [r3, #8]
 80059e8:	60da      	str	r2, [r3, #12]
 80059ea:	611a      	str	r2, [r3, #16]
 80059ec:	615a      	str	r2, [r3, #20]
 80059ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80059f0:	4b37      	ldr	r3, [pc, #220]	@ (8005ad0 <MX_TIM3_Init+0x110>)
 80059f2:	4a38      	ldr	r2, [pc, #224]	@ (8005ad4 <MX_TIM3_Init+0x114>)
 80059f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80059f6:	4b36      	ldr	r3, [pc, #216]	@ (8005ad0 <MX_TIM3_Init+0x110>)
 80059f8:	2247      	movs	r2, #71	@ 0x47
 80059fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059fc:	4b34      	ldr	r3, [pc, #208]	@ (8005ad0 <MX_TIM3_Init+0x110>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005a02:	4b33      	ldr	r3, [pc, #204]	@ (8005ad0 <MX_TIM3_Init+0x110>)
 8005a04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005a08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a0a:	4b31      	ldr	r3, [pc, #196]	@ (8005ad0 <MX_TIM3_Init+0x110>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005a10:	4b2f      	ldr	r3, [pc, #188]	@ (8005ad0 <MX_TIM3_Init+0x110>)
 8005a12:	2280      	movs	r2, #128	@ 0x80
 8005a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005a16:	482e      	ldr	r0, [pc, #184]	@ (8005ad0 <MX_TIM3_Init+0x110>)
 8005a18:	f005 fd6c 	bl	800b4f4 <HAL_TIM_Base_Init>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8005a22:	f7ff fdf9 	bl	8005618 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005a2c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005a30:	4619      	mov	r1, r3
 8005a32:	4827      	ldr	r0, [pc, #156]	@ (8005ad0 <MX_TIM3_Init+0x110>)
 8005a34:	f006 f8ea 	bl	800bc0c <HAL_TIM_ConfigClockSource>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8005a3e:	f7ff fdeb 	bl	8005618 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005a42:	4823      	ldr	r0, [pc, #140]	@ (8005ad0 <MX_TIM3_Init+0x110>)
 8005a44:	f005 fe06 	bl	800b654 <HAL_TIM_PWM_Init>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005a4e:	f7ff fde3 	bl	8005618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a52:	2300      	movs	r3, #0
 8005a54:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a56:	2300      	movs	r3, #0
 8005a58:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005a5a:	f107 0320 	add.w	r3, r7, #32
 8005a5e:	4619      	mov	r1, r3
 8005a60:	481b      	ldr	r0, [pc, #108]	@ (8005ad0 <MX_TIM3_Init+0x110>)
 8005a62:	f006 fc9f 	bl	800c3a4 <HAL_TIMEx_MasterConfigSynchronization>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005a6c:	f7ff fdd4 	bl	8005618 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a70:	2360      	movs	r3, #96	@ 0x60
 8005a72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005a74:	2300      	movs	r3, #0
 8005a76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005a80:	1d3b      	adds	r3, r7, #4
 8005a82:	2200      	movs	r2, #0
 8005a84:	4619      	mov	r1, r3
 8005a86:	4812      	ldr	r0, [pc, #72]	@ (8005ad0 <MX_TIM3_Init+0x110>)
 8005a88:	f005 fffe 	bl	800ba88 <HAL_TIM_PWM_ConfigChannel>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8005a92:	f7ff fdc1 	bl	8005618 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005a96:	1d3b      	adds	r3, r7, #4
 8005a98:	2204      	movs	r2, #4
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	480c      	ldr	r0, [pc, #48]	@ (8005ad0 <MX_TIM3_Init+0x110>)
 8005a9e:	f005 fff3 	bl	800ba88 <HAL_TIM_PWM_ConfigChannel>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8005aa8:	f7ff fdb6 	bl	8005618 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005aac:	1d3b      	adds	r3, r7, #4
 8005aae:	2208      	movs	r2, #8
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4807      	ldr	r0, [pc, #28]	@ (8005ad0 <MX_TIM3_Init+0x110>)
 8005ab4:	f005 ffe8 	bl	800ba88 <HAL_TIM_PWM_ConfigChannel>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8005abe:	f7ff fdab 	bl	8005618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005ac2:	4803      	ldr	r0, [pc, #12]	@ (8005ad0 <MX_TIM3_Init+0x110>)
 8005ac4:	f000 f880 	bl	8005bc8 <HAL_TIM_MspPostInit>

}
 8005ac8:	bf00      	nop
 8005aca:	3738      	adds	r7, #56	@ 0x38
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	200009f4 	.word	0x200009f4
 8005ad4:	40000400 	.word	0x40000400

08005ad8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ade:	463b      	mov	r3, r7
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005ae6:	4b15      	ldr	r3, [pc, #84]	@ (8005b3c <MX_TIM7_Init+0x64>)
 8005ae8:	4a15      	ldr	r2, [pc, #84]	@ (8005b40 <MX_TIM7_Init+0x68>)
 8005aea:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8005aec:	4b13      	ldr	r3, [pc, #76]	@ (8005b3c <MX_TIM7_Init+0x64>)
 8005aee:	2247      	movs	r2, #71	@ 0x47
 8005af0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005af2:	4b12      	ldr	r3, [pc, #72]	@ (8005b3c <MX_TIM7_Init+0x64>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8005af8:	4b10      	ldr	r3, [pc, #64]	@ (8005b3c <MX_TIM7_Init+0x64>)
 8005afa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005afe:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005b00:	4b0e      	ldr	r3, [pc, #56]	@ (8005b3c <MX_TIM7_Init+0x64>)
 8005b02:	2280      	movs	r2, #128	@ 0x80
 8005b04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005b06:	480d      	ldr	r0, [pc, #52]	@ (8005b3c <MX_TIM7_Init+0x64>)
 8005b08:	f005 fcf4 	bl	800b4f4 <HAL_TIM_Base_Init>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8005b12:	f7ff fd81 	bl	8005618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b16:	2300      	movs	r3, #0
 8005b18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005b1e:	463b      	mov	r3, r7
 8005b20:	4619      	mov	r1, r3
 8005b22:	4806      	ldr	r0, [pc, #24]	@ (8005b3c <MX_TIM7_Init+0x64>)
 8005b24:	f006 fc3e 	bl	800c3a4 <HAL_TIMEx_MasterConfigSynchronization>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8005b2e:	f7ff fd73 	bl	8005618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005b32:	bf00      	nop
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	20000a3c 	.word	0x20000a3c
 8005b40:	40001400 	.word	0x40001400

08005b44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a1a      	ldr	r2, [pc, #104]	@ (8005bbc <HAL_TIM_Base_MspInit+0x78>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d114      	bne.n	8005b80 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005b56:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc0 <HAL_TIM_Base_MspInit+0x7c>)
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	4a19      	ldr	r2, [pc, #100]	@ (8005bc0 <HAL_TIM_Base_MspInit+0x7c>)
 8005b5c:	f043 0302 	orr.w	r3, r3, #2
 8005b60:	61d3      	str	r3, [r2, #28]
 8005b62:	4b17      	ldr	r3, [pc, #92]	@ (8005bc0 <HAL_TIM_Base_MspInit+0x7c>)
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005b6e:	2200      	movs	r2, #0
 8005b70:	2105      	movs	r1, #5
 8005b72:	201d      	movs	r0, #29
 8005b74:	f001 fc29 	bl	80073ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005b78:	201d      	movs	r0, #29
 8005b7a:	f001 fc42 	bl	8007402 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8005b7e:	e018      	b.n	8005bb2 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a0f      	ldr	r2, [pc, #60]	@ (8005bc4 <HAL_TIM_Base_MspInit+0x80>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d113      	bne.n	8005bb2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc0 <HAL_TIM_Base_MspInit+0x7c>)
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8005bc0 <HAL_TIM_Base_MspInit+0x7c>)
 8005b90:	f043 0320 	orr.w	r3, r3, #32
 8005b94:	61d3      	str	r3, [r2, #28]
 8005b96:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc0 <HAL_TIM_Base_MspInit+0x7c>)
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	f003 0320 	and.w	r3, r3, #32
 8005b9e:	60bb      	str	r3, [r7, #8]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2105      	movs	r1, #5
 8005ba6:	2037      	movs	r0, #55	@ 0x37
 8005ba8:	f001 fc0f 	bl	80073ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005bac:	2037      	movs	r0, #55	@ 0x37
 8005bae:	f001 fc28 	bl	8007402 <HAL_NVIC_EnableIRQ>
}
 8005bb2:	bf00      	nop
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	40000400 	.word	0x40000400
 8005bc0:	40021000 	.word	0x40021000
 8005bc4:	40001400 	.word	0x40001400

08005bc8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b088      	sub	sp, #32
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bd0:	f107 0310 	add.w	r3, r7, #16
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	605a      	str	r2, [r3, #4]
 8005bda:	609a      	str	r2, [r3, #8]
 8005bdc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a1b      	ldr	r2, [pc, #108]	@ (8005c50 <HAL_TIM_MspPostInit+0x88>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d12f      	bne.n	8005c48 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005be8:	4b1a      	ldr	r3, [pc, #104]	@ (8005c54 <HAL_TIM_MspPostInit+0x8c>)
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	4a19      	ldr	r2, [pc, #100]	@ (8005c54 <HAL_TIM_MspPostInit+0x8c>)
 8005bee:	f043 0304 	orr.w	r3, r3, #4
 8005bf2:	6193      	str	r3, [r2, #24]
 8005bf4:	4b17      	ldr	r3, [pc, #92]	@ (8005c54 <HAL_TIM_MspPostInit+0x8c>)
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	f003 0304 	and.w	r3, r3, #4
 8005bfc:	60fb      	str	r3, [r7, #12]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c00:	4b14      	ldr	r3, [pc, #80]	@ (8005c54 <HAL_TIM_MspPostInit+0x8c>)
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	4a13      	ldr	r2, [pc, #76]	@ (8005c54 <HAL_TIM_MspPostInit+0x8c>)
 8005c06:	f043 0308 	orr.w	r3, r3, #8
 8005c0a:	6193      	str	r3, [r2, #24]
 8005c0c:	4b11      	ldr	r3, [pc, #68]	@ (8005c54 <HAL_TIM_MspPostInit+0x8c>)
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	f003 0308 	and.w	r3, r3, #8
 8005c14:	60bb      	str	r3, [r7, #8]
 8005c16:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005c18:	23c0      	movs	r3, #192	@ 0xc0
 8005c1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c20:	2302      	movs	r3, #2
 8005c22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c24:	f107 0310 	add.w	r3, r7, #16
 8005c28:	4619      	mov	r1, r3
 8005c2a:	480b      	ldr	r0, [pc, #44]	@ (8005c58 <HAL_TIM_MspPostInit+0x90>)
 8005c2c:	f002 f87c 	bl	8007d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005c30:	2301      	movs	r3, #1
 8005c32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c34:	2302      	movs	r3, #2
 8005c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c38:	2302      	movs	r3, #2
 8005c3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c3c:	f107 0310 	add.w	r3, r7, #16
 8005c40:	4619      	mov	r1, r3
 8005c42:	4806      	ldr	r0, [pc, #24]	@ (8005c5c <HAL_TIM_MspPostInit+0x94>)
 8005c44:	f002 f870 	bl	8007d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005c48:	bf00      	nop
 8005c4a:	3720      	adds	r7, #32
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	40000400 	.word	0x40000400
 8005c54:	40021000 	.word	0x40021000
 8005c58:	40010800 	.word	0x40010800
 8005c5c:	40010c00 	.word	0x40010c00

08005c60 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005c64:	4b11      	ldr	r3, [pc, #68]	@ (8005cac <MX_USART1_UART_Init+0x4c>)
 8005c66:	4a12      	ldr	r2, [pc, #72]	@ (8005cb0 <MX_USART1_UART_Init+0x50>)
 8005c68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005c6a:	4b10      	ldr	r3, [pc, #64]	@ (8005cac <MX_USART1_UART_Init+0x4c>)
 8005c6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005c70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005c72:	4b0e      	ldr	r3, [pc, #56]	@ (8005cac <MX_USART1_UART_Init+0x4c>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005c78:	4b0c      	ldr	r3, [pc, #48]	@ (8005cac <MX_USART1_UART_Init+0x4c>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8005cac <MX_USART1_UART_Init+0x4c>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005c84:	4b09      	ldr	r3, [pc, #36]	@ (8005cac <MX_USART1_UART_Init+0x4c>)
 8005c86:	220c      	movs	r2, #12
 8005c88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c8a:	4b08      	ldr	r3, [pc, #32]	@ (8005cac <MX_USART1_UART_Init+0x4c>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c90:	4b06      	ldr	r3, [pc, #24]	@ (8005cac <MX_USART1_UART_Init+0x4c>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005c96:	4805      	ldr	r0, [pc, #20]	@ (8005cac <MX_USART1_UART_Init+0x4c>)
 8005c98:	f006 fc02 	bl	800c4a0 <HAL_UART_Init>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005ca2:	f7ff fcb9 	bl	8005618 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005ca6:	bf00      	nop
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	20000a84 	.word	0x20000a84
 8005cb0:	40013800 	.word	0x40013800

08005cb4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005cb8:	4b11      	ldr	r3, [pc, #68]	@ (8005d00 <MX_USART2_UART_Init+0x4c>)
 8005cba:	4a12      	ldr	r2, [pc, #72]	@ (8005d04 <MX_USART2_UART_Init+0x50>)
 8005cbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005cbe:	4b10      	ldr	r3, [pc, #64]	@ (8005d00 <MX_USART2_UART_Init+0x4c>)
 8005cc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005cc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8005d00 <MX_USART2_UART_Init+0x4c>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8005d00 <MX_USART2_UART_Init+0x4c>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8005d00 <MX_USART2_UART_Init+0x4c>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005cd8:	4b09      	ldr	r3, [pc, #36]	@ (8005d00 <MX_USART2_UART_Init+0x4c>)
 8005cda:	220c      	movs	r2, #12
 8005cdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005cde:	4b08      	ldr	r3, [pc, #32]	@ (8005d00 <MX_USART2_UART_Init+0x4c>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ce4:	4b06      	ldr	r3, [pc, #24]	@ (8005d00 <MX_USART2_UART_Init+0x4c>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005cea:	4805      	ldr	r0, [pc, #20]	@ (8005d00 <MX_USART2_UART_Init+0x4c>)
 8005cec:	f006 fbd8 	bl	800c4a0 <HAL_UART_Init>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005cf6:	f7ff fc8f 	bl	8005618 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005cfa:	bf00      	nop
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	20000acc 	.word	0x20000acc
 8005d04:	40004400 	.word	0x40004400

08005d08 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005d0c:	4b11      	ldr	r3, [pc, #68]	@ (8005d54 <MX_USART3_UART_Init+0x4c>)
 8005d0e:	4a12      	ldr	r2, [pc, #72]	@ (8005d58 <MX_USART3_UART_Init+0x50>)
 8005d10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8005d12:	4b10      	ldr	r3, [pc, #64]	@ (8005d54 <MX_USART3_UART_Init+0x4c>)
 8005d14:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8005d18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8005d54 <MX_USART3_UART_Init+0x4c>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005d20:	4b0c      	ldr	r3, [pc, #48]	@ (8005d54 <MX_USART3_UART_Init+0x4c>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005d26:	4b0b      	ldr	r3, [pc, #44]	@ (8005d54 <MX_USART3_UART_Init+0x4c>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005d2c:	4b09      	ldr	r3, [pc, #36]	@ (8005d54 <MX_USART3_UART_Init+0x4c>)
 8005d2e:	220c      	movs	r2, #12
 8005d30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d32:	4b08      	ldr	r3, [pc, #32]	@ (8005d54 <MX_USART3_UART_Init+0x4c>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d38:	4b06      	ldr	r3, [pc, #24]	@ (8005d54 <MX_USART3_UART_Init+0x4c>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005d3e:	4805      	ldr	r0, [pc, #20]	@ (8005d54 <MX_USART3_UART_Init+0x4c>)
 8005d40:	f006 fbae 	bl	800c4a0 <HAL_UART_Init>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005d4a:	f7ff fc65 	bl	8005618 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005d4e:	bf00      	nop
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	20000b14 	.word	0x20000b14
 8005d58:	40004800 	.word	0x40004800

08005d5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08e      	sub	sp, #56	@ 0x38
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	605a      	str	r2, [r3, #4]
 8005d6e:	609a      	str	r2, [r3, #8]
 8005d70:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a7c      	ldr	r2, [pc, #496]	@ (8005f68 <HAL_UART_MspInit+0x20c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d161      	bne.n	8005e40 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005d7c:	4b7b      	ldr	r3, [pc, #492]	@ (8005f6c <HAL_UART_MspInit+0x210>)
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	4a7a      	ldr	r2, [pc, #488]	@ (8005f6c <HAL_UART_MspInit+0x210>)
 8005d82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d86:	6193      	str	r3, [r2, #24]
 8005d88:	4b78      	ldr	r3, [pc, #480]	@ (8005f6c <HAL_UART_MspInit+0x210>)
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d90:	623b      	str	r3, [r7, #32]
 8005d92:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d94:	4b75      	ldr	r3, [pc, #468]	@ (8005f6c <HAL_UART_MspInit+0x210>)
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	4a74      	ldr	r2, [pc, #464]	@ (8005f6c <HAL_UART_MspInit+0x210>)
 8005d9a:	f043 0304 	orr.w	r3, r3, #4
 8005d9e:	6193      	str	r3, [r2, #24]
 8005da0:	4b72      	ldr	r3, [pc, #456]	@ (8005f6c <HAL_UART_MspInit+0x210>)
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	f003 0304 	and.w	r3, r3, #4
 8005da8:	61fb      	str	r3, [r7, #28]
 8005daa:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005dac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005db0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005db2:	2302      	movs	r3, #2
 8005db4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005db6:	2303      	movs	r3, #3
 8005db8:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	486b      	ldr	r0, [pc, #428]	@ (8005f70 <HAL_UART_MspInit+0x214>)
 8005dc2:	f001 ffb1 	bl	8007d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005dc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005dca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4865      	ldr	r0, [pc, #404]	@ (8005f70 <HAL_UART_MspInit+0x214>)
 8005ddc:	f001 ffa4 	bl	8007d28 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8005de0:	4b64      	ldr	r3, [pc, #400]	@ (8005f74 <HAL_UART_MspInit+0x218>)
 8005de2:	4a65      	ldr	r2, [pc, #404]	@ (8005f78 <HAL_UART_MspInit+0x21c>)
 8005de4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005de6:	4b63      	ldr	r3, [pc, #396]	@ (8005f74 <HAL_UART_MspInit+0x218>)
 8005de8:	2210      	movs	r2, #16
 8005dea:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005dec:	4b61      	ldr	r3, [pc, #388]	@ (8005f74 <HAL_UART_MspInit+0x218>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005df2:	4b60      	ldr	r3, [pc, #384]	@ (8005f74 <HAL_UART_MspInit+0x218>)
 8005df4:	2280      	movs	r2, #128	@ 0x80
 8005df6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005df8:	4b5e      	ldr	r3, [pc, #376]	@ (8005f74 <HAL_UART_MspInit+0x218>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005dfe:	4b5d      	ldr	r3, [pc, #372]	@ (8005f74 <HAL_UART_MspInit+0x218>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005e04:	4b5b      	ldr	r3, [pc, #364]	@ (8005f74 <HAL_UART_MspInit+0x218>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005e0a:	4b5a      	ldr	r3, [pc, #360]	@ (8005f74 <HAL_UART_MspInit+0x218>)
 8005e0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005e10:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005e12:	4858      	ldr	r0, [pc, #352]	@ (8005f74 <HAL_UART_MspInit+0x218>)
 8005e14:	f001 fb04 	bl	8007420 <HAL_DMA_Init>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8005e1e:	f7ff fbfb 	bl	8005618 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a53      	ldr	r2, [pc, #332]	@ (8005f74 <HAL_UART_MspInit+0x218>)
 8005e26:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e28:	4a52      	ldr	r2, [pc, #328]	@ (8005f74 <HAL_UART_MspInit+0x218>)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005e2e:	2200      	movs	r2, #0
 8005e30:	2105      	movs	r1, #5
 8005e32:	2025      	movs	r0, #37	@ 0x25
 8005e34:	f001 fac9 	bl	80073ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005e38:	2025      	movs	r0, #37	@ 0x25
 8005e3a:	f001 fae2 	bl	8007402 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005e3e:	e08e      	b.n	8005f5e <HAL_UART_MspInit+0x202>
  else if(uartHandle->Instance==USART2)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a4d      	ldr	r2, [pc, #308]	@ (8005f7c <HAL_UART_MspInit+0x220>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d138      	bne.n	8005ebc <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005e4a:	4b48      	ldr	r3, [pc, #288]	@ (8005f6c <HAL_UART_MspInit+0x210>)
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	4a47      	ldr	r2, [pc, #284]	@ (8005f6c <HAL_UART_MspInit+0x210>)
 8005e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e54:	61d3      	str	r3, [r2, #28]
 8005e56:	4b45      	ldr	r3, [pc, #276]	@ (8005f6c <HAL_UART_MspInit+0x210>)
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e5e:	61bb      	str	r3, [r7, #24]
 8005e60:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e62:	4b42      	ldr	r3, [pc, #264]	@ (8005f6c <HAL_UART_MspInit+0x210>)
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	4a41      	ldr	r2, [pc, #260]	@ (8005f6c <HAL_UART_MspInit+0x210>)
 8005e68:	f043 0304 	orr.w	r3, r3, #4
 8005e6c:	6193      	str	r3, [r2, #24]
 8005e6e:	4b3f      	ldr	r3, [pc, #252]	@ (8005f6c <HAL_UART_MspInit+0x210>)
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	f003 0304 	and.w	r3, r3, #4
 8005e76:	617b      	str	r3, [r7, #20]
 8005e78:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005e7a:	2304      	movs	r3, #4
 8005e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e7e:	2302      	movs	r3, #2
 8005e80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e82:	2303      	movs	r3, #3
 8005e84:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	4838      	ldr	r0, [pc, #224]	@ (8005f70 <HAL_UART_MspInit+0x214>)
 8005e8e:	f001 ff4b 	bl	8007d28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005e92:	2308      	movs	r3, #8
 8005e94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e96:	2300      	movs	r3, #0
 8005e98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	4832      	ldr	r0, [pc, #200]	@ (8005f70 <HAL_UART_MspInit+0x214>)
 8005ea6:	f001 ff3f 	bl	8007d28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005eaa:	2200      	movs	r2, #0
 8005eac:	2105      	movs	r1, #5
 8005eae:	2026      	movs	r0, #38	@ 0x26
 8005eb0:	f001 fa8b 	bl	80073ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005eb4:	2026      	movs	r0, #38	@ 0x26
 8005eb6:	f001 faa4 	bl	8007402 <HAL_NVIC_EnableIRQ>
}
 8005eba:	e050      	b.n	8005f5e <HAL_UART_MspInit+0x202>
  else if(uartHandle->Instance==USART3)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a2f      	ldr	r2, [pc, #188]	@ (8005f80 <HAL_UART_MspInit+0x224>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d14b      	bne.n	8005f5e <HAL_UART_MspInit+0x202>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005ec6:	4b29      	ldr	r3, [pc, #164]	@ (8005f6c <HAL_UART_MspInit+0x210>)
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	4a28      	ldr	r2, [pc, #160]	@ (8005f6c <HAL_UART_MspInit+0x210>)
 8005ecc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ed0:	61d3      	str	r3, [r2, #28]
 8005ed2:	4b26      	ldr	r3, [pc, #152]	@ (8005f6c <HAL_UART_MspInit+0x210>)
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005eda:	613b      	str	r3, [r7, #16]
 8005edc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ede:	4b23      	ldr	r3, [pc, #140]	@ (8005f6c <HAL_UART_MspInit+0x210>)
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	4a22      	ldr	r2, [pc, #136]	@ (8005f6c <HAL_UART_MspInit+0x210>)
 8005ee4:	f043 0320 	orr.w	r3, r3, #32
 8005ee8:	6193      	str	r3, [r2, #24]
 8005eea:	4b20      	ldr	r3, [pc, #128]	@ (8005f6c <HAL_UART_MspInit+0x210>)
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	f003 0320 	and.w	r3, r3, #32
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005ef6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005efa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005efc:	2302      	movs	r3, #2
 8005efe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f00:	2303      	movs	r3, #3
 8005f02:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f08:	4619      	mov	r1, r3
 8005f0a:	481e      	ldr	r0, [pc, #120]	@ (8005f84 <HAL_UART_MspInit+0x228>)
 8005f0c:	f001 ff0c 	bl	8007d28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005f10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f16:	2300      	movs	r3, #0
 8005f18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f22:	4619      	mov	r1, r3
 8005f24:	4817      	ldr	r0, [pc, #92]	@ (8005f84 <HAL_UART_MspInit+0x228>)
 8005f26:	f001 feff 	bl	8007d28 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_ENABLE();
 8005f2a:	4b17      	ldr	r3, [pc, #92]	@ (8005f88 <HAL_UART_MspInit+0x22c>)
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f32:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005f36:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f3a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8005f3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f42:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8005f46:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f48:	4a0f      	ldr	r2, [pc, #60]	@ (8005f88 <HAL_UART_MspInit+0x22c>)
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f4c:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005f4e:	2200      	movs	r2, #0
 8005f50:	2105      	movs	r1, #5
 8005f52:	2027      	movs	r0, #39	@ 0x27
 8005f54:	f001 fa39 	bl	80073ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005f58:	2027      	movs	r0, #39	@ 0x27
 8005f5a:	f001 fa52 	bl	8007402 <HAL_NVIC_EnableIRQ>
}
 8005f5e:	bf00      	nop
 8005f60:	3738      	adds	r7, #56	@ 0x38
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	40013800 	.word	0x40013800
 8005f6c:	40021000 	.word	0x40021000
 8005f70:	40010800 	.word	0x40010800
 8005f74:	20000b5c 	.word	0x20000b5c
 8005f78:	40020044 	.word	0x40020044
 8005f7c:	40004400 	.word	0x40004400
 8005f80:	40004800 	.word	0x40004800
 8005f84:	40011400 	.word	0x40011400
 8005f88:	40010000 	.word	0x40010000

08005f8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005f8c:	f7ff fd12 	bl	80059b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f90:	480b      	ldr	r0, [pc, #44]	@ (8005fc0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005f92:	490c      	ldr	r1, [pc, #48]	@ (8005fc4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005f94:	4a0c      	ldr	r2, [pc, #48]	@ (8005fc8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f98:	e002      	b.n	8005fa0 <LoopCopyDataInit>

08005f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f9e:	3304      	adds	r3, #4

08005fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005fa4:	d3f9      	bcc.n	8005f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005fa6:	4a09      	ldr	r2, [pc, #36]	@ (8005fcc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005fa8:	4c09      	ldr	r4, [pc, #36]	@ (8005fd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005fac:	e001      	b.n	8005fb2 <LoopFillZerobss>

08005fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005fb0:	3204      	adds	r2, #4

08005fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005fb4:	d3fb      	bcc.n	8005fae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005fb6:	f00e fab1 	bl	801451c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005fba:	f7ff faa5 	bl	8005508 <main>
  bx lr
 8005fbe:	4770      	bx	lr
  ldr r0, =_sdata
 8005fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005fc4:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8005fc8:	080158b8 	.word	0x080158b8
  ldr r2, =_sbss
 8005fcc:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8005fd0:	20002e10 	.word	0x20002e10

08005fd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005fd4:	e7fe      	b.n	8005fd4 <ADC1_2_IRQHandler>
	...

08005fd8 <AT24Cxx_get_max_addr>:
#include <stdio.h>

#include "AT24Cxx_stm32_hal.h"

uint16_t AT24Cxx_get_max_addr ( AT24Cxx_device_t* dev )
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	791b      	ldrb	r3, [r3, #4]
 8005fe4:	2b05      	cmp	r3, #5
 8005fe6:	d820      	bhi.n	800602a <AT24Cxx_get_max_addr+0x52>
 8005fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff0 <AT24Cxx_get_max_addr+0x18>)
 8005fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fee:	bf00      	nop
 8005ff0:	08006009 	.word	0x08006009
 8005ff4:	0800600d 	.word	0x0800600d
 8005ff8:	08006013 	.word	0x08006013
 8005ffc:	08006019 	.word	0x08006019
 8006000:	0800601f 	.word	0x0800601f
 8006004:	08006025 	.word	0x08006025
	case AT24C01:
		return AT24C01_MAX_ADDR;
 8006008:	237f      	movs	r3, #127	@ 0x7f
 800600a:	e00f      	b.n	800602c <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C32:
		return AT24C32_MAX_ADDR;
 800600c:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8006010:	e00c      	b.n	800602c <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C64:
		return AT24C64_MAX_ADDR;
 8006012:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8006016:	e009      	b.n	800602c <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C128:
		return AT24C128_MAX_ADDR;
 8006018:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 800601c:	e006      	b.n	800602c <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C256:
		return AT24C256_MAX_ADDR;
 800601e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8006022:	e003      	b.n	800602c <AT24Cxx_get_max_addr+0x54>
		break;
		//not supported yet, will overflow
	case AT24C512:
		return AT24C512_MAX_ADDR;
 8006024:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006028:	e000      	b.n	800602c <AT24Cxx_get_max_addr+0x54>
		break;
	default:
		return 0;
 800602a:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 800602c:	4618      	mov	r0, r3
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	bc80      	pop	{r7}
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop

08006038 <AT24Cxx_get_pg_size>:

uint16_t AT24Cxx_get_pg_size ( AT24Cxx_device_t* dev )
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	791b      	ldrb	r3, [r3, #4]
 8006044:	2b05      	cmp	r3, #5
 8006046:	d81b      	bhi.n	8006080 <AT24Cxx_get_pg_size+0x48>
 8006048:	a201      	add	r2, pc, #4	@ (adr r2, 8006050 <AT24Cxx_get_pg_size+0x18>)
 800604a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604e:	bf00      	nop
 8006050:	08006069 	.word	0x08006069
 8006054:	0800606d 	.word	0x0800606d
 8006058:	08006071 	.word	0x08006071
 800605c:	08006075 	.word	0x08006075
 8006060:	08006079 	.word	0x08006079
 8006064:	0800607d 	.word	0x0800607d
	case AT24C01:
		return AT24C01_PG_SIZE;
 8006068:	2308      	movs	r3, #8
 800606a:	e00a      	b.n	8006082 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C32:
		return AT24C32_PG_SIZE;
 800606c:	2320      	movs	r3, #32
 800606e:	e008      	b.n	8006082 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C64:
		return AT24C64_PG_SIZE;
 8006070:	2320      	movs	r3, #32
 8006072:	e006      	b.n	8006082 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C128:
		return AT24C128_PG_SIZE;
 8006074:	2340      	movs	r3, #64	@ 0x40
 8006076:	e004      	b.n	8006082 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C256:
		return AT24C256_PG_SIZE;
 8006078:	2340      	movs	r3, #64	@ 0x40
 800607a:	e002      	b.n	8006082 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C512:
		//not supported yet, will overflow
		return AT24C512_PG_SIZE;
 800607c:	2380      	movs	r3, #128	@ 0x80
 800607e:	e000      	b.n	8006082 <AT24Cxx_get_pg_size+0x4a>
		break;
	default:
		return 0;
 8006080:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 8006082:	4618      	mov	r0, r3
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	bc80      	pop	{r7}
 800608a:	4770      	bx	lr

0800608c <AT24Cxx_init>:

AT24Cxx_ERR_TypeDef AT24Cxx_init( AT24Cxx_devices_t* devices, 
	uint8_t init_dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	460b      	mov	r3, r1
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	72fb      	strb	r3, [r7, #11]
	//adds first device to AT32Cxx_devices array
	//further devices should be added by calling AT24Cxx_add_dev()
	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 800609a:	2114      	movs	r1, #20
 800609c:	2001      	movs	r0, #1
 800609e:	f00e f955 	bl	801434c <calloc>
 80060a2:	4603      	mov	r3, r0
 80060a4:	613b      	str	r3, [r7, #16]
	if ( at == NULL )
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d102      	bne.n	80060b2 <AT24Cxx_init+0x26>
		return at_init_err;
 80060ac:	f04f 33ff 	mov.w	r3, #4294967295
 80060b0:	e028      	b.n	8006104 <AT24Cxx_init+0x78>

	for(uint8_t i = 0; i < 8; i++)
 80060b2:	2300      	movs	r3, #0
 80060b4:	75fb      	strb	r3, [r7, #23]
 80060b6:	e007      	b.n	80060c8 <AT24Cxx_init+0x3c>
			devices->devices[i] = 0x00;
 80060b8:	7dfa      	ldrb	r2, [r7, #23]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2100      	movs	r1, #0
 80060be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i = 0; i < 8; i++)
 80060c2:	7dfb      	ldrb	r3, [r7, #23]
 80060c4:	3301      	adds	r3, #1
 80060c6:	75fb      	strb	r3, [r7, #23]
 80060c8:	7dfb      	ldrb	r3, [r7, #23]
 80060ca:	2b07      	cmp	r3, #7
 80060cc:	d9f4      	bls.n	80060b8 <AT24Cxx_init+0x2c>

	at->dev_addr = init_dev_addr;
 80060ce:	7afb      	ldrb	r3, [r7, #11]
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	2200      	movs	r2, #0
 80060da:	60da      	str	r2, [r3, #12]
	at->prev_dev = NULL;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	2200      	movs	r2, #0
 80060e0:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	2205      	movs	r2, #5
 80060e6:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	2201      	movs	r2, #1
 80060f2:	721a      	strb	r2, [r3, #8]
	devices->dev_count = 1;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[0] = at;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	601a      	str	r2, [r3, #0]

	return at_ok;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3718      	adds	r7, #24
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <AT24Cxx_add_dev>:

AT24Cxx_ERR_TypeDef AT24Cxx_add_dev( AT24Cxx_devices_t* devices, 
	uint8_t dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	460b      	mov	r3, r1
 8006116:	607a      	str	r2, [r7, #4]
 8006118:	72fb      	strb	r3, [r7, #11]
	if(devices->dev_count == 0 || devices->dev_count > 8)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d004      	beq.n	800612e <AT24Cxx_add_dev+0x22>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f893 3020 	ldrb.w	r3, [r3, #32]
 800612a:	2b08      	cmp	r3, #8
 800612c:	d902      	bls.n	8006134 <AT24Cxx_add_dev+0x28>
		return at_add_dev_err;
 800612e:	f06f 0301 	mvn.w	r3, #1
 8006132:	e03e      	b.n	80061b2 <AT24Cxx_add_dev+0xa6>

	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 8006134:	2114      	movs	r1, #20
 8006136:	2001      	movs	r0, #1
 8006138:	f00e f908 	bl	801434c <calloc>
 800613c:	4603      	mov	r3, r0
 800613e:	617b      	str	r3, [r7, #20]
	if ( at == NULL )
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d102      	bne.n	800614c <AT24Cxx_add_dev+0x40>
		return at_add_dev_err;
 8006146:	f06f 0301 	mvn.w	r3, #1
 800614a:	e032      	b.n	80061b2 <AT24Cxx_add_dev+0xa6>

	at->dev_addr = dev_addr;
 800614c:	7afb      	ldrb	r3, [r7, #11]
 800614e:	b29a      	uxth	r2, r3
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	2200      	movs	r2, #0
 8006158:	60da      	str	r2, [r3, #12]
	at->prev_dev = devices->devices[devices->dev_count-1];
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006160:	1e5a      	subs	r2, r3, #1
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	2205      	movs	r2, #5
 8006170:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	2201      	movs	r2, #1
 800617c:	721a      	strb	r2, [r3, #8]
	devices->dev_count++;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006184:	3301      	adds	r3, #1
 8006186:	b2da      	uxtb	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[devices->dev_count-1] = at;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006194:	1e5a      	subs	r2, r3, #1
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6979      	ldr	r1, [r7, #20]
 800619a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	//update previous device's next device
	devices->devices[devices->dev_count-2]->next_dev = at;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061a4:	1e9a      	subs	r2, r3, #2
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	60da      	str	r2, [r3, #12]
	return at_ok;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3718      	adds	r7, #24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <AT24Cxx_write_byte_buffer>:
	return at_w_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_write_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 80061ba:	b5b0      	push	{r4, r5, r7, lr}
 80061bc:	b08a      	sub	sp, #40	@ 0x28
 80061be:	af04      	add	r7, sp, #16
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	60b9      	str	r1, [r7, #8]
 80061c4:	4611      	mov	r1, r2
 80061c6:	461a      	mov	r2, r3
 80061c8:	460b      	mov	r3, r1
 80061ca:	80fb      	strh	r3, [r7, #6]
 80061cc:	4613      	mov	r3, r2
 80061ce:	80bb      	strh	r3, [r7, #4]
	//TODO checks

	uint8_t page_size = AT24Cxx_get_pg_size(dev);
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f7ff ff31 	bl	8006038 <AT24Cxx_get_pg_size>
 80061d6:	4603      	mov	r3, r0
 80061d8:	75bb      	strb	r3, [r7, #22]

	uint8_t page_remaining = page_size - mem_addr % page_size;
 80061da:	88fb      	ldrh	r3, [r7, #6]
 80061dc:	7dba      	ldrb	r2, [r7, #22]
 80061de:	fb93 f1f2 	sdiv	r1, r3, r2
 80061e2:	fb01 f202 	mul.w	r2, r1, r2
 80061e6:	1a9b      	subs	r3, r3, r2
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	7dba      	ldrb	r2, [r7, #22]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	757b      	strb	r3, [r7, #21]

	uint8_t page_writes = (buf_length - page_remaining) / page_size;
 80061f0:	88ba      	ldrh	r2, [r7, #4]
 80061f2:	7d7b      	ldrb	r3, [r7, #21]
 80061f4:	1ad2      	subs	r2, r2, r3
 80061f6:	7dbb      	ldrb	r3, [r7, #22]
 80061f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80061fc:	753b      	strb	r3, [r7, #20]
	uint8_t remainder_writes = (buf_length - page_remaining) % page_size;
 80061fe:	88ba      	ldrh	r2, [r7, #4]
 8006200:	7d7b      	ldrb	r3, [r7, #21]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	7dba      	ldrb	r2, [r7, #22]
 8006206:	fb93 f1f2 	sdiv	r1, r3, r2
 800620a:	fb01 f202 	mul.w	r2, r1, r2
 800620e:	1a9b      	subs	r3, r3, r2
 8006210:	74fb      	strb	r3, [r7, #19]

	//finish first page
	if((mem_addr + page_remaining) > 0x00 &&
 8006212:	88fa      	ldrh	r2, [r7, #6]
 8006214:	7d7b      	ldrb	r3, [r7, #21]
 8006216:	4413      	add	r3, r2
 8006218:	2b00      	cmp	r3, #0
 800621a:	dd23      	ble.n	8006264 <AT24Cxx_write_byte_buffer+0xaa>
		(mem_addr + page_remaining) < AT24Cxx_get_max_addr(dev)){
 800621c:	88fa      	ldrh	r2, [r7, #6]
 800621e:	7d7b      	ldrb	r3, [r7, #21]
 8006220:	18d4      	adds	r4, r2, r3
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f7ff fed8 	bl	8005fd8 <AT24Cxx_get_max_addr>
 8006228:	4603      	mov	r3, r0
	if((mem_addr + page_remaining) > 0x00 &&
 800622a:	429c      	cmp	r4, r3
 800622c:	da1a      	bge.n	8006264 <AT24Cxx_write_byte_buffer+0xaa>

		while(HAL_I2C_Mem_Write(dev->dev_port,
 800622e:	bf00      	nop
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	88db      	ldrh	r3, [r3, #6]
 8006238:	005b      	lsls	r3, r3, #1
 800623a:	b21b      	sxth	r3, r3
 800623c:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8006240:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Write(dev->dev_port,
 8006242:	b299      	uxth	r1, r3
 8006244:	7d7b      	ldrb	r3, [r7, #21]
 8006246:	b29b      	uxth	r3, r3
 8006248:	88fa      	ldrh	r2, [r7, #6]
 800624a:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 800624e:	9402      	str	r4, [sp, #8]
 8006250:	9301      	str	r3, [sp, #4]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	2310      	movs	r3, #16
 8006258:	f002 fbf0 	bl	8008a3c <HAL_I2C_Mem_Write>
 800625c:	4603      	mov	r3, r0
				(uint16_t) mem_addr,
				I2C_MEMADD_SIZE_16BIT,
				data_buf,
				page_remaining,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1e6      	bne.n	8006230 <AT24Cxx_write_byte_buffer+0x76>
	if((mem_addr + page_remaining) > 0x00 &&
 8006262:	e002      	b.n	800626a <AT24Cxx_write_byte_buffer+0xb0>
	}else return at_w_bytes_err;
 8006264:	f06f 0304 	mvn.w	r3, #4
 8006268:	e0a5      	b.n	80063b6 <AT24Cxx_write_byte_buffer+0x1fc>

	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 800626a:	2300      	movs	r3, #0
 800626c:	75fb      	strb	r3, [r7, #23]
 800626e:	e04e      	b.n	800630e <AT24Cxx_write_byte_buffer+0x154>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8006270:	88fa      	ldrh	r2, [r7, #6]
 8006272:	7d7b      	ldrb	r3, [r7, #21]
 8006274:	441a      	add	r2, r3
 8006276:	7dfb      	ldrb	r3, [r7, #23]
 8006278:	7db9      	ldrb	r1, [r7, #22]
 800627a:	fb01 f303 	mul.w	r3, r1, r3
 800627e:	4413      	add	r3, r2
 8006280:	2b00      	cmp	r3, #0
 8006282:	dd3e      	ble.n	8006302 <AT24Cxx_write_byte_buffer+0x148>
			(mem_addr + page_remaining + (current_page * page_size)) < AT24Cxx_get_max_addr(dev)){
 8006284:	88fa      	ldrh	r2, [r7, #6]
 8006286:	7d7b      	ldrb	r3, [r7, #21]
 8006288:	441a      	add	r2, r3
 800628a:	7dfb      	ldrb	r3, [r7, #23]
 800628c:	7db9      	ldrb	r1, [r7, #22]
 800628e:	fb01 f303 	mul.w	r3, r1, r3
 8006292:	18d4      	adds	r4, r2, r3
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f7ff fe9f 	bl	8005fd8 <AT24Cxx_get_max_addr>
 800629a:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 800629c:	429c      	cmp	r4, r3
 800629e:	da30      	bge.n	8006302 <AT24Cxx_write_byte_buffer+0x148>

				while(HAL_I2C_Mem_Write(dev->dev_port,
 80062a0:	bf00      	nop
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6818      	ldr	r0, [r3, #0]
					AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	88db      	ldrh	r3, [r3, #6]
 80062aa:	005b      	lsls	r3, r3, #1
 80062ac:	b21b      	sxth	r3, r3
 80062ae:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80062b2:	b21b      	sxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 80062b4:	b29c      	uxth	r4, r3
					(uint16_t) mem_addr + page_remaining + (current_page * page_size),
 80062b6:	7d7b      	ldrb	r3, [r7, #21]
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	88fb      	ldrh	r3, [r7, #6]
 80062bc:	4413      	add	r3, r2
 80062be:	b29a      	uxth	r2, r3
 80062c0:	7dfb      	ldrb	r3, [r7, #23]
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	7db9      	ldrb	r1, [r7, #22]
 80062c6:	b289      	uxth	r1, r1
 80062c8:	fb01 f303 	mul.w	r3, r1, r3
 80062cc:	b29b      	uxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 80062ce:	4413      	add	r3, r2
 80062d0:	b29d      	uxth	r5, r3
					I2C_MEMADD_SIZE_16BIT,
					data_buf + page_remaining + (current_page * page_size),
 80062d2:	7d7b      	ldrb	r3, [r7, #21]
 80062d4:	7dfa      	ldrb	r2, [r7, #23]
 80062d6:	7db9      	ldrb	r1, [r7, #22]
 80062d8:	fb01 f202 	mul.w	r2, r1, r2
 80062dc:	4413      	add	r3, r2
				while(HAL_I2C_Mem_Write(dev->dev_port,
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	4413      	add	r3, r2
 80062e2:	7dba      	ldrb	r2, [r7, #22]
 80062e4:	b292      	uxth	r2, r2
 80062e6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80062ea:	9102      	str	r1, [sp, #8]
 80062ec:	9201      	str	r2, [sp, #4]
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	2310      	movs	r3, #16
 80062f2:	462a      	mov	r2, r5
 80062f4:	4621      	mov	r1, r4
 80062f6:	f002 fba1 	bl	8008a3c <HAL_I2C_Mem_Write>
 80062fa:	4603      	mov	r3, r0
					page_size,
					AT24Cxx_I2C_TIMOUT) != HAL_OK);
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1d0      	bne.n	80062a2 <AT24Cxx_write_byte_buffer+0xe8>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8006300:	e002      	b.n	8006308 <AT24Cxx_write_byte_buffer+0x14e>
		}else return at_w_bytes_err;
 8006302:	f06f 0304 	mvn.w	r3, #4
 8006306:	e056      	b.n	80063b6 <AT24Cxx_write_byte_buffer+0x1fc>
	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 8006308:	7dfb      	ldrb	r3, [r7, #23]
 800630a:	3301      	adds	r3, #1
 800630c:	75fb      	strb	r3, [r7, #23]
 800630e:	7dfa      	ldrb	r2, [r7, #23]
 8006310:	7d3b      	ldrb	r3, [r7, #20]
 8006312:	429a      	cmp	r2, r3
 8006314:	d3ac      	bcc.n	8006270 <AT24Cxx_write_byte_buffer+0xb6>
	}

	if(remainder_writes){
 8006316:	7cfb      	ldrb	r3, [r7, #19]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d04b      	beq.n	80063b4 <AT24Cxx_write_byte_buffer+0x1fa>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 800631c:	88fa      	ldrh	r2, [r7, #6]
 800631e:	7d7b      	ldrb	r3, [r7, #21]
 8006320:	441a      	add	r2, r3
 8006322:	7d3b      	ldrb	r3, [r7, #20]
 8006324:	7db9      	ldrb	r1, [r7, #22]
 8006326:	fb01 f303 	mul.w	r3, r1, r3
 800632a:	4413      	add	r3, r2
 800632c:	2b00      	cmp	r3, #0
 800632e:	dd3e      	ble.n	80063ae <AT24Cxx_write_byte_buffer+0x1f4>
			(mem_addr + page_remaining + (page_writes * page_size)) < AT24Cxx_get_max_addr(dev)){
 8006330:	88fa      	ldrh	r2, [r7, #6]
 8006332:	7d7b      	ldrb	r3, [r7, #21]
 8006334:	441a      	add	r2, r3
 8006336:	7d3b      	ldrb	r3, [r7, #20]
 8006338:	7db9      	ldrb	r1, [r7, #22]
 800633a:	fb01 f303 	mul.w	r3, r1, r3
 800633e:	18d4      	adds	r4, r2, r3
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f7ff fe49 	bl	8005fd8 <AT24Cxx_get_max_addr>
 8006346:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8006348:	429c      	cmp	r4, r3
 800634a:	da30      	bge.n	80063ae <AT24Cxx_write_byte_buffer+0x1f4>

			while(HAL_I2C_Mem_Write(dev->dev_port,
 800634c:	bf00      	nop
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	88db      	ldrh	r3, [r3, #6]
 8006356:	005b      	lsls	r3, r3, #1
 8006358:	b21b      	sxth	r3, r3
 800635a:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800635e:	b21b      	sxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 8006360:	b29c      	uxth	r4, r3
				(uint16_t) mem_addr + page_remaining + (page_writes * page_size),
 8006362:	7d7b      	ldrb	r3, [r7, #21]
 8006364:	b29a      	uxth	r2, r3
 8006366:	88fb      	ldrh	r3, [r7, #6]
 8006368:	4413      	add	r3, r2
 800636a:	b29a      	uxth	r2, r3
 800636c:	7d3b      	ldrb	r3, [r7, #20]
 800636e:	b29b      	uxth	r3, r3
 8006370:	7db9      	ldrb	r1, [r7, #22]
 8006372:	b289      	uxth	r1, r1
 8006374:	fb01 f303 	mul.w	r3, r1, r3
 8006378:	b29b      	uxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 800637a:	4413      	add	r3, r2
 800637c:	b29d      	uxth	r5, r3
				I2C_MEMADD_SIZE_16BIT,
				data_buf + page_remaining + (page_writes * page_size),
 800637e:	7d7b      	ldrb	r3, [r7, #21]
 8006380:	7d3a      	ldrb	r2, [r7, #20]
 8006382:	7db9      	ldrb	r1, [r7, #22]
 8006384:	fb01 f202 	mul.w	r2, r1, r2
 8006388:	4413      	add	r3, r2
			while(HAL_I2C_Mem_Write(dev->dev_port,
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	4413      	add	r3, r2
 800638e:	7cfa      	ldrb	r2, [r7, #19]
 8006390:	b292      	uxth	r2, r2
 8006392:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006396:	9102      	str	r1, [sp, #8]
 8006398:	9201      	str	r2, [sp, #4]
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	2310      	movs	r3, #16
 800639e:	462a      	mov	r2, r5
 80063a0:	4621      	mov	r1, r4
 80063a2:	f002 fb4b 	bl	8008a3c <HAL_I2C_Mem_Write>
 80063a6:	4603      	mov	r3, r0
				remainder_writes,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1d0      	bne.n	800634e <AT24Cxx_write_byte_buffer+0x194>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 80063ac:	e002      	b.n	80063b4 <AT24Cxx_write_byte_buffer+0x1fa>
		}else return at_w_bytes_err;
 80063ae:	f06f 0304 	mvn.w	r3, #4
 80063b2:	e000      	b.n	80063b6 <AT24Cxx_write_byte_buffer+0x1fc>
	}

	return at_ok;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bdb0      	pop	{r4, r5, r7, pc}

080063be <AT24Cxx_read_byte_buffer>:
	return at_r_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_read_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b088      	sub	sp, #32
 80063c2:	af04      	add	r7, sp, #16
 80063c4:	60f8      	str	r0, [r7, #12]
 80063c6:	60b9      	str	r1, [r7, #8]
 80063c8:	4611      	mov	r1, r2
 80063ca:	461a      	mov	r2, r3
 80063cc:	460b      	mov	r3, r1
 80063ce:	80fb      	strh	r3, [r7, #6]
 80063d0:	4613      	mov	r3, r2
 80063d2:	80bb      	strh	r3, [r7, #4]
	if(mem_addr > 0x00 && mem_addr < AT24Cxx_get_max_addr(dev)){
 80063d4:	88fb      	ldrh	r3, [r7, #6]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d022      	beq.n	8006420 <AT24Cxx_read_byte_buffer+0x62>
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f7ff fdfc 	bl	8005fd8 <AT24Cxx_get_max_addr>
 80063e0:	4603      	mov	r3, r0
 80063e2:	461a      	mov	r2, r3
 80063e4:	88fb      	ldrh	r3, [r7, #6]
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d21a      	bcs.n	8006420 <AT24Cxx_read_byte_buffer+0x62>
		while(HAL_I2C_Mem_Read(dev->dev_port,
 80063ea:	bf00      	nop
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_R | (dev->dev_addr << 1) ,
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	88db      	ldrh	r3, [r3, #6]
 80063f4:	005b      	lsls	r3, r3, #1
 80063f6:	b21b      	sxth	r3, r3
 80063f8:	f043 03a1 	orr.w	r3, r3, #161	@ 0xa1
 80063fc:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Read(dev->dev_port,
 80063fe:	b299      	uxth	r1, r3
 8006400:	88fa      	ldrh	r2, [r7, #6]
 8006402:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006406:	9302      	str	r3, [sp, #8]
 8006408:	88bb      	ldrh	r3, [r7, #4]
 800640a:	9301      	str	r3, [sp, #4]
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	2310      	movs	r3, #16
 8006412:	f002 fc0d 	bl	8008c30 <HAL_I2C_Mem_Read>
 8006416:	4603      	mov	r3, r0
				(uint16_t) mem_addr, I2C_MEMADD_SIZE_16BIT, data_buf, buf_length,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1e7      	bne.n	80063ec <AT24Cxx_read_byte_buffer+0x2e>
		return at_ok;
 800641c:	2300      	movs	r3, #0
 800641e:	e001      	b.n	8006424 <AT24Cxx_read_byte_buffer+0x66>
	}
	return at_r_bytes_err;
 8006420:	f06f 0306 	mvn.w	r3, #6
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <constrain>:
int16_t qPercent(fix12_t q);
int16_t qMultiply(fix12_t q, int16_t input);
fix12_t qConstruct(int16_t num, int16_t den);

static int constrain(int amt, int low, int high)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	429a      	cmp	r2, r3
 800643e:	da01      	bge.n	8006444 <constrain+0x18>
        return low;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	e006      	b.n	8006452 <constrain+0x26>
    else if (amt > high)
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	429a      	cmp	r2, r3
 800644a:	dd01      	ble.n	8006450 <constrain+0x24>
        return high;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	e000      	b.n	8006452 <constrain+0x26>
    else
        return amt;
 8006450:	68fb      	ldr	r3, [r7, #12]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	bc80      	pop	{r7}
 800645a:	4770      	bx	lr

0800645c <constrainf>:

static inline float constrainf(float amt, float low, float high)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f7fa fe20 	bl	80010b0 <__aeabi_fcmplt>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <constrainf+0x1e>
        return low;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	e009      	b.n	800648e <constrainf+0x32>
    else if (amt > high)
 800647a:	6879      	ldr	r1, [r7, #4]
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f7fa fe35 	bl	80010ec <__aeabi_fcmpgt>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <constrainf+0x30>
        return high;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	e000      	b.n	800648e <constrainf+0x32>
    else
        return amt;
 800648c:	68fb      	ldr	r3, [r7, #12]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
	...

08006498 <pt1FilterGain>:
//#include "scheduler.h"
#include"maths.h"
#include"math.h"

// 1oder
static inline float pt1FilterGain(float f_cut, float dT){
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
    float RC = 1 / (2 * M_PIf * f_cut);
 80064a2:	490d      	ldr	r1, [pc, #52]	@ (80064d8 <pt1FilterGain+0x40>)
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7fa fc65 	bl	8000d74 <__aeabi_fmul>
 80064aa:	4603      	mov	r3, r0
 80064ac:	4619      	mov	r1, r3
 80064ae:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80064b2:	f7fa fd13 	bl	8000edc <__aeabi_fdiv>
 80064b6:	4603      	mov	r3, r0
 80064b8:	60fb      	str	r3, [r7, #12]
    return dT/ (RC + dT);
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f7fa fb51 	bl	8000b64 <__addsf3>
 80064c2:	4603      	mov	r3, r0
 80064c4:	4619      	mov	r1, r3
 80064c6:	6838      	ldr	r0, [r7, #0]
 80064c8:	f7fa fd08 	bl	8000edc <__aeabi_fdiv>
 80064cc:	4603      	mov	r3, r0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	40c90fdb 	.word	0x40c90fdb

080064dc <attitude_ctrl_init>:
float pid_velo_scale;

/*
 *  init pid controller
 **/
void attitude_ctrl_init(){
 80064dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064e0:	b085      	sub	sp, #20
 80064e2:	af04      	add	r7, sp, #16

   speed_filter_reset = TRUE;
 80064e4:	4b3b      	ldr	r3, [pc, #236]	@ (80065d4 <attitude_ctrl_init+0xf8>)
 80064e6:	2201      	movs	r2, #1
 80064e8:	701a      	strb	r2, [r3, #0]
   ab_speed_filted = 0.0f;
 80064ea:	4b3b      	ldr	r3, [pc, #236]	@ (80065d8 <attitude_ctrl_init+0xfc>)
 80064ec:	f04f 0200 	mov.w	r2, #0
 80064f0:	601a      	str	r2, [r3, #0]
   // init pid 
   pid_init(&roll_angle_pid, pid_file_1.roll_angle_Kp,0,0,10,0,0);
 80064f2:	4b3a      	ldr	r3, [pc, #232]	@ (80065dc <attitude_ctrl_init+0x100>)
 80064f4:	6919      	ldr	r1, [r3, #16]
 80064f6:	f04f 0300 	mov.w	r3, #0
 80064fa:	9302      	str	r3, [sp, #8]
 80064fc:	f04f 0300 	mov.w	r3, #0
 8006500:	9301      	str	r3, [sp, #4]
 8006502:	4b37      	ldr	r3, [pc, #220]	@ (80065e0 <attitude_ctrl_init+0x104>)
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	f04f 0300 	mov.w	r3, #0
 800650a:	f04f 0200 	mov.w	r2, #0
 800650e:	4835      	ldr	r0, [pc, #212]	@ (80065e4 <attitude_ctrl_init+0x108>)
 8006510:	f7fe f86e 	bl	80045f0 <pid_init>
   pid_init(&roll_rate_pid, pid_file_1.roll_rate_Kp, pid_file_1.roll_rate_Ki, pid_file_1.roll_rate_Kd,
 8006514:	4b31      	ldr	r3, [pc, #196]	@ (80065dc <attitude_ctrl_init+0x100>)
 8006516:	695c      	ldr	r4, [r3, #20]
 8006518:	4b30      	ldr	r3, [pc, #192]	@ (80065dc <attitude_ctrl_init+0x100>)
 800651a:	699d      	ldr	r5, [r3, #24]
 800651c:	4b2f      	ldr	r3, [pc, #188]	@ (80065dc <attitude_ctrl_init+0x100>)
 800651e:	69de      	ldr	r6, [r3, #28]
            pid_file_1.roll_fcut_err  , pid_file_1.roll_f_cut_rate_D, pid_file_1.roll_max_I);
 8006520:	4b2e      	ldr	r3, [pc, #184]	@ (80065dc <attitude_ctrl_init+0x100>)
 8006522:	7b1b      	ldrb	r3, [r3, #12]
   pid_init(&roll_rate_pid, pid_file_1.roll_rate_Kp, pid_file_1.roll_rate_Ki, pid_file_1.roll_rate_Kd,
 8006524:	4618      	mov	r0, r3
 8006526:	f7fa fbcd 	bl	8000cc4 <__aeabi_ui2f>
 800652a:	4680      	mov	r8, r0
            pid_file_1.roll_fcut_err  , pid_file_1.roll_f_cut_rate_D, pid_file_1.roll_max_I);
 800652c:	4b2b      	ldr	r3, [pc, #172]	@ (80065dc <attitude_ctrl_init+0x100>)
 800652e:	f993 3020 	ldrsb.w	r3, [r3, #32]
   pid_init(&roll_rate_pid, pid_file_1.roll_rate_Kp, pid_file_1.roll_rate_Ki, pid_file_1.roll_rate_Kd,
 8006532:	4618      	mov	r0, r3
 8006534:	f7fa fbca 	bl	8000ccc <__aeabi_i2f>
 8006538:	4681      	mov	r9, r0
            pid_file_1.roll_fcut_err  , pid_file_1.roll_f_cut_rate_D, pid_file_1.roll_max_I);
 800653a:	4b28      	ldr	r3, [pc, #160]	@ (80065dc <attitude_ctrl_init+0x100>)
 800653c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
   pid_init(&roll_rate_pid, pid_file_1.roll_rate_Kp, pid_file_1.roll_rate_Ki, pid_file_1.roll_rate_Kd,
 8006540:	4618      	mov	r0, r3
 8006542:	f7fa fbc3 	bl	8000ccc <__aeabi_i2f>
 8006546:	4603      	mov	r3, r0
 8006548:	9302      	str	r3, [sp, #8]
 800654a:	f8cd 9004 	str.w	r9, [sp, #4]
 800654e:	f8cd 8000 	str.w	r8, [sp]
 8006552:	4633      	mov	r3, r6
 8006554:	462a      	mov	r2, r5
 8006556:	4621      	mov	r1, r4
 8006558:	4823      	ldr	r0, [pc, #140]	@ (80065e8 <attitude_ctrl_init+0x10c>)
 800655a:	f7fe f849 	bl	80045f0 <pid_init>

   pid_init(&pitch_angle_pid, pid_file_1.pitch_angle_Kp,0,0,10,0,0);
 800655e:	4b1f      	ldr	r3, [pc, #124]	@ (80065dc <attitude_ctrl_init+0x100>)
 8006560:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006562:	f04f 0300 	mov.w	r3, #0
 8006566:	9302      	str	r3, [sp, #8]
 8006568:	f04f 0300 	mov.w	r3, #0
 800656c:	9301      	str	r3, [sp, #4]
 800656e:	4b1c      	ldr	r3, [pc, #112]	@ (80065e0 <attitude_ctrl_init+0x104>)
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	f04f 0300 	mov.w	r3, #0
 8006576:	f04f 0200 	mov.w	r2, #0
 800657a:	481c      	ldr	r0, [pc, #112]	@ (80065ec <attitude_ctrl_init+0x110>)
 800657c:	f7fe f838 	bl	80045f0 <pid_init>
   pid_init(&pitch_rate_pid,pid_file_1.pitch_rate_Kp,pid_file_1.pitch_rate_Ki,pid_file_1.pitch_rate_Kd,
 8006580:	4b16      	ldr	r3, [pc, #88]	@ (80065dc <attitude_ctrl_init+0x100>)
 8006582:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8006584:	4b15      	ldr	r3, [pc, #84]	@ (80065dc <attitude_ctrl_init+0x100>)
 8006586:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8006588:	4b14      	ldr	r3, [pc, #80]	@ (80065dc <attitude_ctrl_init+0x100>)
 800658a:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
            pid_file_1.roll_fcut_err,  pid_file_1.pitch_f_cut_rate_D,pid_file_1.pitch_max_I);
 800658c:	4b13      	ldr	r3, [pc, #76]	@ (80065dc <attitude_ctrl_init+0x100>)
 800658e:	7b1b      	ldrb	r3, [r3, #12]
   pid_init(&pitch_rate_pid,pid_file_1.pitch_rate_Kp,pid_file_1.pitch_rate_Ki,pid_file_1.pitch_rate_Kd,
 8006590:	4618      	mov	r0, r3
 8006592:	f7fa fb97 	bl	8000cc4 <__aeabi_ui2f>
 8006596:	4680      	mov	r8, r0
            pid_file_1.roll_fcut_err,  pid_file_1.pitch_f_cut_rate_D,pid_file_1.pitch_max_I);
 8006598:	4b10      	ldr	r3, [pc, #64]	@ (80065dc <attitude_ctrl_init+0x100>)
 800659a:	f993 3044 	ldrsb.w	r3, [r3, #68]	@ 0x44
   pid_init(&pitch_rate_pid,pid_file_1.pitch_rate_Kp,pid_file_1.pitch_rate_Ki,pid_file_1.pitch_rate_Kd,
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fa fb94 	bl	8000ccc <__aeabi_i2f>
 80065a4:	4681      	mov	r9, r0
            pid_file_1.roll_fcut_err,  pid_file_1.pitch_f_cut_rate_D,pid_file_1.pitch_max_I);
 80065a6:	4b0d      	ldr	r3, [pc, #52]	@ (80065dc <attitude_ctrl_init+0x100>)
 80065a8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
   pid_init(&pitch_rate_pid,pid_file_1.pitch_rate_Kp,pid_file_1.pitch_rate_Ki,pid_file_1.pitch_rate_Kd,
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fa fb8d 	bl	8000ccc <__aeabi_i2f>
 80065b2:	4603      	mov	r3, r0
 80065b4:	9302      	str	r3, [sp, #8]
 80065b6:	f8cd 9004 	str.w	r9, [sp, #4]
 80065ba:	f8cd 8000 	str.w	r8, [sp]
 80065be:	4633      	mov	r3, r6
 80065c0:	462a      	mov	r2, r5
 80065c2:	4621      	mov	r1, r4
 80065c4:	480a      	ldr	r0, [pc, #40]	@ (80065f0 <attitude_ctrl_init+0x114>)
 80065c6:	f7fe f813 	bl	80045f0 <pid_init>
}
 80065ca:	bf00      	nop
 80065cc:	3704      	adds	r7, #4
 80065ce:	46bd      	mov	sp, r7
 80065d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065d4:	20000bac 	.word	0x20000bac
 80065d8:	20000c74 	.word	0x20000c74
 80065dc:	2000001c 	.word	0x2000001c
 80065e0:	41200000 	.word	0x41200000
 80065e4:	20000c08 	.word	0x20000c08
 80065e8:	20000bb0 	.word	0x20000bb0
 80065ec:	20000c34 	.word	0x20000c34
 80065f0:	20000bdc 	.word	0x20000bdc
 80065f4:	00000000 	.word	0x00000000

080065f8 <attitude_ctrl>:

void attitude_ctrl(const uint32_t micros){
 80065f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80065fc:	b090      	sub	sp, #64	@ 0x40
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
    static uint32_t last_time_us; 
    float dt = (micros - last_time_us)*(1e-6f);
 8006602:	4b98      	ldr	r3, [pc, #608]	@ (8006864 <attitude_ctrl+0x26c>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	4618      	mov	r0, r3
 800660c:	f7fa fb5a 	bl	8000cc4 <__aeabi_ui2f>
 8006610:	4603      	mov	r3, r0
 8006612:	4995      	ldr	r1, [pc, #596]	@ (8006868 <attitude_ctrl+0x270>)
 8006614:	4618      	mov	r0, r3
 8006616:	f7fa fbad 	bl	8000d74 <__aeabi_fmul>
 800661a:	4603      	mov	r3, r0
 800661c:	61fb      	str	r3, [r7, #28]
    last_time_us = micros;
 800661e:	4a91      	ldr	r2, [pc, #580]	@ (8006864 <attitude_ctrl+0x26c>)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6013      	str	r3, [r2, #0]
    if(dt < 0 || dt > MAX_WAIT_TIME){
 8006624:	f04f 0100 	mov.w	r1, #0
 8006628:	69f8      	ldr	r0, [r7, #28]
 800662a:	f7fa fd41 	bl	80010b0 <__aeabi_fcmplt>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	f040 821a 	bne.w	8006a6a <attitude_ctrl+0x472>
 8006636:	498d      	ldr	r1, [pc, #564]	@ (800686c <attitude_ctrl+0x274>)
 8006638:	69f8      	ldr	r0, [r7, #28]
 800663a:	f7fa fd57 	bl	80010ec <__aeabi_fcmpgt>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	f040 8212 	bne.w	8006a6a <attitude_ctrl+0x472>
        return;
    }

    const float roll_rate_measurement = AHRS.roll_rate;
 8006646:	4b8a      	ldr	r3, [pc, #552]	@ (8006870 <attitude_ctrl+0x278>)
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	61bb      	str	r3, [r7, #24]
    const float pitch_rate_measurement = AHRS.pitch_rate;
 800664c:	4b88      	ldr	r3, [pc, #544]	@ (8006870 <attitude_ctrl+0x278>)
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	617b      	str	r3, [r7, #20]

    const float roll_measurement = AHRS.roll;
 8006652:	4b87      	ldr	r3, [pc, #540]	@ (8006870 <attitude_ctrl+0x278>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	613b      	str	r3, [r7, #16]
    const float pitch_measurement = AHRS.pitch;
 8006658:	4b85      	ldr	r3, [pc, #532]	@ (8006870 <attitude_ctrl+0x278>)
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	60fb      	str	r3, [r7, #12]
    static float pitch_pid_smooth = 0.0f;
    
    /* calculate roll && pitch desired
    */

	if(ibusChannelData[CH9] > CHANNEL_HIGH ){
 800665e:	4b85      	ldr	r3, [pc, #532]	@ (8006874 <attitude_ctrl+0x27c>)
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8006666:	4293      	cmp	r3, r2
 8006668:	d920      	bls.n	80066ac <attitude_ctrl+0xb4>
		roll_pid_rc_gain = ((int)ibusChannelData[CH7] - 1000)*0.002f;
 800666a:	4b82      	ldr	r3, [pc, #520]	@ (8006874 <attitude_ctrl+0x27c>)
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8006672:	4618      	mov	r0, r3
 8006674:	f7fa fb2a 	bl	8000ccc <__aeabi_i2f>
 8006678:	4603      	mov	r3, r0
 800667a:	497f      	ldr	r1, [pc, #508]	@ (8006878 <attitude_ctrl+0x280>)
 800667c:	4618      	mov	r0, r3
 800667e:	f7fa fb79 	bl	8000d74 <__aeabi_fmul>
 8006682:	4603      	mov	r3, r0
 8006684:	461a      	mov	r2, r3
 8006686:	4b7d      	ldr	r3, [pc, #500]	@ (800687c <attitude_ctrl+0x284>)
 8006688:	601a      	str	r2, [r3, #0]
		roll_trim = ((int)ibusChannelData[CH8] - 1500)*-0.1f;
 800668a:	4b7a      	ldr	r3, [pc, #488]	@ (8006874 <attitude_ctrl+0x27c>)
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8006692:	4618      	mov	r0, r3
 8006694:	f7fa fb1a 	bl	8000ccc <__aeabi_i2f>
 8006698:	4603      	mov	r3, r0
 800669a:	4979      	ldr	r1, [pc, #484]	@ (8006880 <attitude_ctrl+0x288>)
 800669c:	4618      	mov	r0, r3
 800669e:	f7fa fb69 	bl	8000d74 <__aeabi_fmul>
 80066a2:	4603      	mov	r3, r0
 80066a4:	461a      	mov	r2, r3
 80066a6:	4b77      	ldr	r3, [pc, #476]	@ (8006884 <attitude_ctrl+0x28c>)
 80066a8:	601a      	str	r2, [r3, #0]
 80066aa:	e01f      	b.n	80066ec <attitude_ctrl+0xf4>
	}else{
		pitch_pid_rc_gain = ((int)ibusChannelData[CH7] - 1000)*0.002f;
 80066ac:	4b71      	ldr	r3, [pc, #452]	@ (8006874 <attitude_ctrl+0x27c>)
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7fa fb09 	bl	8000ccc <__aeabi_i2f>
 80066ba:	4603      	mov	r3, r0
 80066bc:	496e      	ldr	r1, [pc, #440]	@ (8006878 <attitude_ctrl+0x280>)
 80066be:	4618      	mov	r0, r3
 80066c0:	f7fa fb58 	bl	8000d74 <__aeabi_fmul>
 80066c4:	4603      	mov	r3, r0
 80066c6:	461a      	mov	r2, r3
 80066c8:	4b6f      	ldr	r3, [pc, #444]	@ (8006888 <attitude_ctrl+0x290>)
 80066ca:	601a      	str	r2, [r3, #0]
		pitch_trim = ((int)ibusChannelData[CH8] - 1500)*-0.1f;
 80066cc:	4b69      	ldr	r3, [pc, #420]	@ (8006874 <attitude_ctrl+0x27c>)
 80066ce:	69db      	ldr	r3, [r3, #28]
 80066d0:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7fa faf9 	bl	8000ccc <__aeabi_i2f>
 80066da:	4603      	mov	r3, r0
 80066dc:	4968      	ldr	r1, [pc, #416]	@ (8006880 <attitude_ctrl+0x288>)
 80066de:	4618      	mov	r0, r3
 80066e0:	f7fa fb48 	bl	8000d74 <__aeabi_fmul>
 80066e4:	4603      	mov	r3, r0
 80066e6:	461a      	mov	r2, r3
 80066e8:	4b68      	ldr	r3, [pc, #416]	@ (800688c <attitude_ctrl+0x294>)
 80066ea:	601a      	str	r2, [r3, #0]
	}

    roll_desired = ((int)ibusChannelData[0] - 1500)*0.15f    + roll_trim;   /*  -50 <-  -> +50  */
 80066ec:	4b61      	ldr	r3, [pc, #388]	@ (8006874 <attitude_ctrl+0x27c>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7fa fae9 	bl	8000ccc <__aeabi_i2f>
 80066fa:	4603      	mov	r3, r0
 80066fc:	4964      	ldr	r1, [pc, #400]	@ (8006890 <attitude_ctrl+0x298>)
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fa fb38 	bl	8000d74 <__aeabi_fmul>
 8006704:	4603      	mov	r3, r0
 8006706:	461a      	mov	r2, r3
 8006708:	4b5e      	ldr	r3, [pc, #376]	@ (8006884 <attitude_ctrl+0x28c>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4619      	mov	r1, r3
 800670e:	4610      	mov	r0, r2
 8006710:	f7fa fa28 	bl	8000b64 <__addsf3>
 8006714:	4603      	mov	r3, r0
 8006716:	461a      	mov	r2, r3
 8006718:	4b5e      	ldr	r3, [pc, #376]	@ (8006894 <attitude_ctrl+0x29c>)
 800671a:	601a      	str	r2, [r3, #0]
	pitch_desired = ((int)ibusChannelData[1] - 1500)*-0.15f + pitch_trim ;/*  -75 <-  -> +75  */
 800671c:	4b55      	ldr	r3, [pc, #340]	@ (8006874 <attitude_ctrl+0x27c>)
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8006724:	4618      	mov	r0, r3
 8006726:	f7fa fad1 	bl	8000ccc <__aeabi_i2f>
 800672a:	4603      	mov	r3, r0
 800672c:	495a      	ldr	r1, [pc, #360]	@ (8006898 <attitude_ctrl+0x2a0>)
 800672e:	4618      	mov	r0, r3
 8006730:	f7fa fb20 	bl	8000d74 <__aeabi_fmul>
 8006734:	4603      	mov	r3, r0
 8006736:	461a      	mov	r2, r3
 8006738:	4b54      	ldr	r3, [pc, #336]	@ (800688c <attitude_ctrl+0x294>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4619      	mov	r1, r3
 800673e:	4610      	mov	r0, r2
 8006740:	f7fa fa10 	bl	8000b64 <__addsf3>
 8006744:	4603      	mov	r3, r0
 8006746:	461a      	mov	r2, r3
 8006748:	4b54      	ldr	r3, [pc, #336]	@ (800689c <attitude_ctrl+0x2a4>)
 800674a:	601a      	str	r2, [r3, #0]

    /*---- pid scale with velocity  -----*/
    if(_gps.fix > 1){
 800674c:	4b54      	ldr	r3, [pc, #336]	@ (80068a0 <attitude_ctrl+0x2a8>)
 800674e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8006752:	2b01      	cmp	r3, #1
 8006754:	f240 80b8 	bls.w	80068c8 <attitude_ctrl+0x2d0>
        float vn = (float)_gps.velocity[0]/100;  // m
 8006758:	4b51      	ldr	r3, [pc, #324]	@ (80068a0 <attitude_ctrl+0x2a8>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	4618      	mov	r0, r3
 800675e:	f7fa fab5 	bl	8000ccc <__aeabi_i2f>
 8006762:	4603      	mov	r3, r0
 8006764:	494f      	ldr	r1, [pc, #316]	@ (80068a4 <attitude_ctrl+0x2ac>)
 8006766:	4618      	mov	r0, r3
 8006768:	f7fa fbb8 	bl	8000edc <__aeabi_fdiv>
 800676c:	4603      	mov	r3, r0
 800676e:	62bb      	str	r3, [r7, #40]	@ 0x28
        float ve = (float)_gps.velocity[1]/100;  // m
 8006770:	4b4b      	ldr	r3, [pc, #300]	@ (80068a0 <attitude_ctrl+0x2a8>)
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	4618      	mov	r0, r3
 8006776:	f7fa faa9 	bl	8000ccc <__aeabi_i2f>
 800677a:	4603      	mov	r3, r0
 800677c:	4949      	ldr	r1, [pc, #292]	@ (80068a4 <attitude_ctrl+0x2ac>)
 800677e:	4618      	mov	r0, r3
 8006780:	f7fa fbac 	bl	8000edc <__aeabi_fdiv>
 8006784:	4603      	mov	r3, r0
 8006786:	627b      	str	r3, [r7, #36]	@ 0x24
        //float vd = (float)_gps.velocity[2]/100;  // m

        float absolute_velocity = sqrtf(sq(vn) + sq(ve));// + sq(vd));
 8006788:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800678a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800678c:	f7fa faf2 	bl	8000d74 <__aeabi_fmul>
 8006790:	4603      	mov	r3, r0
 8006792:	461c      	mov	r4, r3
 8006794:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006796:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006798:	f7fa faec 	bl	8000d74 <__aeabi_fmul>
 800679c:	4603      	mov	r3, r0
 800679e:	4619      	mov	r1, r3
 80067a0:	4620      	mov	r0, r4
 80067a2:	f7fa f9df 	bl	8000b64 <__addsf3>
 80067a6:	4603      	mov	r3, r0
 80067a8:	4618      	mov	r0, r3
 80067aa:	f00d ff5c 	bl	8014666 <sqrtf>
 80067ae:	6238      	str	r0, [r7, #32]
        absolute_velocity = constrainf(absolute_velocity,0,MAX_SPEED); 
 80067b0:	4a3d      	ldr	r2, [pc, #244]	@ (80068a8 <attitude_ctrl+0x2b0>)
 80067b2:	f04f 0100 	mov.w	r1, #0
 80067b6:	6a38      	ldr	r0, [r7, #32]
 80067b8:	f7ff fe50 	bl	800645c <constrainf>
 80067bc:	6238      	str	r0, [r7, #32]
        if(speed_filter_reset){
 80067be:	4b3b      	ldr	r3, [pc, #236]	@ (80068ac <attitude_ctrl+0x2b4>)
 80067c0:	f993 3000 	ldrsb.w	r3, [r3]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d005      	beq.n	80067d4 <attitude_ctrl+0x1dc>
            ab_speed_filted = absolute_velocity;
 80067c8:	4a39      	ldr	r2, [pc, #228]	@ (80068b0 <attitude_ctrl+0x2b8>)
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	6013      	str	r3, [r2, #0]
            speed_filter_reset = FALSE;
 80067ce:	4b37      	ldr	r3, [pc, #220]	@ (80068ac <attitude_ctrl+0x2b4>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	701a      	strb	r2, [r3, #0]
        }
        ab_speed_filted += pt1FilterGain(10,dt)*(absolute_velocity - ab_speed_filted);
 80067d4:	69f9      	ldr	r1, [r7, #28]
 80067d6:	4837      	ldr	r0, [pc, #220]	@ (80068b4 <attitude_ctrl+0x2bc>)
 80067d8:	f7ff fe5e 	bl	8006498 <pt1FilterGain>
 80067dc:	4604      	mov	r4, r0
 80067de:	4b34      	ldr	r3, [pc, #208]	@ (80068b0 <attitude_ctrl+0x2b8>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4619      	mov	r1, r3
 80067e4:	6a38      	ldr	r0, [r7, #32]
 80067e6:	f7fa f9bb 	bl	8000b60 <__aeabi_fsub>
 80067ea:	4603      	mov	r3, r0
 80067ec:	4619      	mov	r1, r3
 80067ee:	4620      	mov	r0, r4
 80067f0:	f7fa fac0 	bl	8000d74 <__aeabi_fmul>
 80067f4:	4603      	mov	r3, r0
 80067f6:	461a      	mov	r2, r3
 80067f8:	4b2d      	ldr	r3, [pc, #180]	@ (80068b0 <attitude_ctrl+0x2b8>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4619      	mov	r1, r3
 80067fe:	4610      	mov	r0, r2
 8006800:	f7fa f9b0 	bl	8000b64 <__addsf3>
 8006804:	4603      	mov	r3, r0
 8006806:	461a      	mov	r2, r3
 8006808:	4b29      	ldr	r3, [pc, #164]	@ (80068b0 <attitude_ctrl+0x2b8>)
 800680a:	601a      	str	r2, [r3, #0]
        float speed_temp = constrainf(ab_speed_filted,MINIMUN_SPEED,MAXIMUN_SPEED);
 800680c:	4b28      	ldr	r3, [pc, #160]	@ (80068b0 <attitude_ctrl+0x2b8>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a29      	ldr	r2, [pc, #164]	@ (80068b8 <attitude_ctrl+0x2c0>)
 8006812:	492a      	ldr	r1, [pc, #168]	@ (80068bc <attitude_ctrl+0x2c4>)
 8006814:	4618      	mov	r0, r3
 8006816:	f7ff fe21 	bl	800645c <constrainf>
 800681a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        pid_velo_scale = (float)MINIMUN_SPEED/((float)MINIMUN_SPEED + sq(speed_temp - MINIMUN_SPEED)*0.04f);
 800681c:	4927      	ldr	r1, [pc, #156]	@ (80068bc <attitude_ctrl+0x2c4>)
 800681e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006820:	f7fa f99e 	bl	8000b60 <__aeabi_fsub>
 8006824:	4603      	mov	r3, r0
 8006826:	461c      	mov	r4, r3
 8006828:	4924      	ldr	r1, [pc, #144]	@ (80068bc <attitude_ctrl+0x2c4>)
 800682a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800682c:	f7fa f998 	bl	8000b60 <__aeabi_fsub>
 8006830:	4603      	mov	r3, r0
 8006832:	4619      	mov	r1, r3
 8006834:	4620      	mov	r0, r4
 8006836:	f7fa fa9d 	bl	8000d74 <__aeabi_fmul>
 800683a:	4603      	mov	r3, r0
 800683c:	4920      	ldr	r1, [pc, #128]	@ (80068c0 <attitude_ctrl+0x2c8>)
 800683e:	4618      	mov	r0, r3
 8006840:	f7fa fa98 	bl	8000d74 <__aeabi_fmul>
 8006844:	4603      	mov	r3, r0
 8006846:	491d      	ldr	r1, [pc, #116]	@ (80068bc <attitude_ctrl+0x2c4>)
 8006848:	4618      	mov	r0, r3
 800684a:	f7fa f98b 	bl	8000b64 <__addsf3>
 800684e:	4603      	mov	r3, r0
 8006850:	4619      	mov	r1, r3
 8006852:	481a      	ldr	r0, [pc, #104]	@ (80068bc <attitude_ctrl+0x2c4>)
 8006854:	f7fa fb42 	bl	8000edc <__aeabi_fdiv>
 8006858:	4603      	mov	r3, r0
 800685a:	461a      	mov	r2, r3
 800685c:	4b19      	ldr	r3, [pc, #100]	@ (80068c4 <attitude_ctrl+0x2cc>)
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	e043      	b.n	80068ea <attitude_ctrl+0x2f2>
 8006862:	bf00      	nop
 8006864:	20000c7c 	.word	0x20000c7c
 8006868:	358637bd 	.word	0x358637bd
 800686c:	3dcccccd 	.word	0x3dcccccd
 8006870:	2000055c 	.word	0x2000055c
 8006874:	20000148 	.word	0x20000148
 8006878:	3b03126f 	.word	0x3b03126f
 800687c:	20000c64 	.word	0x20000c64
 8006880:	bdcccccd 	.word	0xbdcccccd
 8006884:	20000c6c 	.word	0x20000c6c
 8006888:	20000c68 	.word	0x20000c68
 800688c:	20000c70 	.word	0x20000c70
 8006890:	3e19999a 	.word	0x3e19999a
 8006894:	20000ba0 	.word	0x20000ba0
 8006898:	be19999a 	.word	0xbe19999a
 800689c:	20000ba4 	.word	0x20000ba4
 80068a0:	20000424 	.word	0x20000424
 80068a4:	42c80000 	.word	0x42c80000
 80068a8:	41f00000 	.word	0x41f00000
 80068ac:	20000bac 	.word	0x20000bac
 80068b0:	20000c74 	.word	0x20000c74
 80068b4:	41200000 	.word	0x41200000
 80068b8:	42040000 	.word	0x42040000
 80068bc:	41400000 	.word	0x41400000
 80068c0:	3d23d70a 	.word	0x3d23d70a
 80068c4:	20000c78 	.word	0x20000c78
    }
    else{
        speed_filter_reset = TRUE;
 80068c8:	4b6d      	ldr	r3, [pc, #436]	@ (8006a80 <attitude_ctrl+0x488>)
 80068ca:	2201      	movs	r2, #1
 80068cc:	701a      	strb	r2, [r3, #0]
    	if(ibusChannelData[CH6] > CHANNEL_HIGH){
 80068ce:	4b6d      	ldr	r3, [pc, #436]	@ (8006a84 <attitude_ctrl+0x48c>)
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d904      	bls.n	80068e4 <attitude_ctrl+0x2ec>
    		pid_velo_scale = 1;
 80068da:	4b6b      	ldr	r3, [pc, #428]	@ (8006a88 <attitude_ctrl+0x490>)
 80068dc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80068e0:	601a      	str	r2, [r3, #0]
 80068e2:	e002      	b.n	80068ea <attitude_ctrl+0x2f2>
    	}else{
    		pid_velo_scale = 0.4f;
 80068e4:	4b68      	ldr	r3, [pc, #416]	@ (8006a88 <attitude_ctrl+0x490>)
 80068e6:	4a69      	ldr	r2, [pc, #420]	@ (8006a8c <attitude_ctrl+0x494>)
 80068e8:	601a      	str	r2, [r3, #0]
    	}
    }

    const float pid_roll_vel_scale  = constrainf(pid_velo_scale,MIN_PID_SPEED_SCALE,MAX_PID_SPEED_SCALE);
 80068ea:	4b67      	ldr	r3, [pc, #412]	@ (8006a88 <attitude_ctrl+0x490>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80068f2:	4966      	ldr	r1, [pc, #408]	@ (8006a8c <attitude_ctrl+0x494>)
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7ff fdb1 	bl	800645c <constrainf>
 80068fa:	63b8      	str	r0, [r7, #56]	@ 0x38
    const float pid_pitch_vel_scale = constrainf(pid_velo_scale,MIN_PID_SPEED_SCALE + 0.2,MAX_PID_SPEED_SCALE);
 80068fc:	4b62      	ldr	r3, [pc, #392]	@ (8006a88 <attitude_ctrl+0x490>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006904:	4962      	ldr	r1, [pc, #392]	@ (8006a90 <attitude_ctrl+0x498>)
 8006906:	4618      	mov	r0, r3
 8006908:	f7ff fda8 	bl	800645c <constrainf>
 800690c:	6378      	str	r0, [r7, #52]	@ 0x34
		}
        
    }
    // manual mode
    else{
        int s1 = 1500 - ibusChannelData[CH1];
 800690e:	4b5d      	ldr	r3, [pc, #372]	@ (8006a84 <attitude_ctrl+0x48c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8006916:	3304      	adds	r3, #4
 8006918:	633b      	str	r3, [r7, #48]	@ 0x30
        int s2 = 1500 - ibusChannelData[CH2];
 800691a:	4b5a      	ldr	r3, [pc, #360]	@ (8006a84 <attitude_ctrl+0x48c>)
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8006922:	3304      	adds	r3, #4
 8006924:	62fb      	str	r3, [r7, #44]	@ 0x2c

        smooth_ch1 += 0.8*(s1*0.5 - smooth_ch1);
 8006926:	4b5b      	ldr	r3, [pc, #364]	@ (8006a94 <attitude_ctrl+0x49c>)
 8006928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800692c:	4618      	mov	r0, r3
 800692e:	f7f9 fdd1 	bl	80004d4 <__aeabi_i2d>
 8006932:	4604      	mov	r4, r0
 8006934:	460d      	mov	r5, r1
 8006936:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006938:	f7f9 fdcc 	bl	80004d4 <__aeabi_i2d>
 800693c:	f04f 0200 	mov.w	r2, #0
 8006940:	4b55      	ldr	r3, [pc, #340]	@ (8006a98 <attitude_ctrl+0x4a0>)
 8006942:	f7f9 fe31 	bl	80005a8 <__aeabi_dmul>
 8006946:	4602      	mov	r2, r0
 8006948:	460b      	mov	r3, r1
 800694a:	4690      	mov	r8, r2
 800694c:	4699      	mov	r9, r3
 800694e:	4b51      	ldr	r3, [pc, #324]	@ (8006a94 <attitude_ctrl+0x49c>)
 8006950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006954:	4618      	mov	r0, r3
 8006956:	f7f9 fdbd 	bl	80004d4 <__aeabi_i2d>
 800695a:	4602      	mov	r2, r0
 800695c:	460b      	mov	r3, r1
 800695e:	4640      	mov	r0, r8
 8006960:	4649      	mov	r1, r9
 8006962:	f7f9 fc69 	bl	8000238 <__aeabi_dsub>
 8006966:	4602      	mov	r2, r0
 8006968:	460b      	mov	r3, r1
 800696a:	4610      	mov	r0, r2
 800696c:	4619      	mov	r1, r3
 800696e:	a342      	add	r3, pc, #264	@ (adr r3, 8006a78 <attitude_ctrl+0x480>)
 8006970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006974:	f7f9 fe18 	bl	80005a8 <__aeabi_dmul>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	4620      	mov	r0, r4
 800697e:	4629      	mov	r1, r5
 8006980:	f7f9 fc5c 	bl	800023c <__adddf3>
 8006984:	4602      	mov	r2, r0
 8006986:	460b      	mov	r3, r1
 8006988:	4610      	mov	r0, r2
 800698a:	4619      	mov	r1, r3
 800698c:	f7fa f8bc 	bl	8000b08 <__aeabi_d2iz>
 8006990:	4603      	mov	r3, r0
 8006992:	b21a      	sxth	r2, r3
 8006994:	4b3f      	ldr	r3, [pc, #252]	@ (8006a94 <attitude_ctrl+0x49c>)
 8006996:	801a      	strh	r2, [r3, #0]
        smooth_ch2 += 0.8*(s2 - smooth_ch2);
 8006998:	4b40      	ldr	r3, [pc, #256]	@ (8006a9c <attitude_ctrl+0x4a4>)
 800699a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800699e:	4618      	mov	r0, r3
 80069a0:	f7f9 fd98 	bl	80004d4 <__aeabi_i2d>
 80069a4:	4604      	mov	r4, r0
 80069a6:	460d      	mov	r5, r1
 80069a8:	4b3c      	ldr	r3, [pc, #240]	@ (8006a9c <attitude_ctrl+0x4a4>)
 80069aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069ae:	461a      	mov	r2, r3
 80069b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b2:	1a9b      	subs	r3, r3, r2
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7f9 fd8d 	bl	80004d4 <__aeabi_i2d>
 80069ba:	a32f      	add	r3, pc, #188	@ (adr r3, 8006a78 <attitude_ctrl+0x480>)
 80069bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c0:	f7f9 fdf2 	bl	80005a8 <__aeabi_dmul>
 80069c4:	4602      	mov	r2, r0
 80069c6:	460b      	mov	r3, r1
 80069c8:	4620      	mov	r0, r4
 80069ca:	4629      	mov	r1, r5
 80069cc:	f7f9 fc36 	bl	800023c <__adddf3>
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	4610      	mov	r0, r2
 80069d6:	4619      	mov	r1, r3
 80069d8:	f7fa f896 	bl	8000b08 <__aeabi_d2iz>
 80069dc:	4603      	mov	r3, r0
 80069de:	b21a      	sxth	r2, r3
 80069e0:	4b2e      	ldr	r3, [pc, #184]	@ (8006a9c <attitude_ctrl+0x4a4>)
 80069e2:	801a      	strh	r2, [r3, #0]
            
        servoL = 1500 + smooth_ch1 + smooth_ch2;
 80069e4:	4b2b      	ldr	r3, [pc, #172]	@ (8006a94 <attitude_ctrl+0x49c>)
 80069e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	4b2b      	ldr	r3, [pc, #172]	@ (8006a9c <attitude_ctrl+0x4a4>)
 80069ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	4413      	add	r3, r2
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	4b28      	ldr	r3, [pc, #160]	@ (8006aa0 <attitude_ctrl+0x4a8>)
 8006a00:	801a      	strh	r2, [r3, #0]
        servoR = 1500 - smooth_ch1 + smooth_ch2;
 8006a02:	4b26      	ldr	r3, [pc, #152]	@ (8006a9c <attitude_ctrl+0x4a4>)
 8006a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	4b22      	ldr	r3, [pc, #136]	@ (8006a94 <attitude_ctrl+0x49c>)
 8006a0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	4b21      	ldr	r3, [pc, #132]	@ (8006aa4 <attitude_ctrl+0x4ac>)
 8006a1e:	801a      	strh	r2, [r3, #0]
        
    }

    servoL = constrain(servoL,SERVO_MIN_PWM,SERVO_MAX_PWM);
 8006a20:	4b1f      	ldr	r3, [pc, #124]	@ (8006aa0 <attitude_ctrl+0x4a8>)
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006a28:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7ff fcfd 	bl	800642c <constrain>
 8006a32:	4603      	mov	r3, r0
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	4b1a      	ldr	r3, [pc, #104]	@ (8006aa0 <attitude_ctrl+0x4a8>)
 8006a38:	801a      	strh	r2, [r3, #0]
    servoR = constrain(servoR,SERVO_MIN_PWM,SERVO_MAX_PWM);
 8006a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8006aa4 <attitude_ctrl+0x4ac>)
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006a42:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7ff fcf0 	bl	800642c <constrain>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	4b14      	ldr	r3, [pc, #80]	@ (8006aa4 <attitude_ctrl+0x4ac>)
 8006a52:	801a      	strh	r2, [r3, #0]
    write_pwm_ctrl(ibusChannelData[CH3],servoL,servoR);
 8006a54:	4b0b      	ldr	r3, [pc, #44]	@ (8006a84 <attitude_ctrl+0x48c>)
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	4a11      	ldr	r2, [pc, #68]	@ (8006aa0 <attitude_ctrl+0x4a8>)
 8006a5c:	8811      	ldrh	r1, [r2, #0]
 8006a5e:	4a11      	ldr	r2, [pc, #68]	@ (8006aa4 <attitude_ctrl+0x4ac>)
 8006a60:	8812      	ldrh	r2, [r2, #0]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fd fea0 	bl	80047a8 <write_pwm_ctrl>
 8006a68:	e000      	b.n	8006a6c <attitude_ctrl+0x474>
        return;
 8006a6a:	bf00      	nop

}
 8006a6c:	3740      	adds	r7, #64	@ 0x40
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006a74:	f3af 8000 	nop.w
 8006a78:	9999999a 	.word	0x9999999a
 8006a7c:	3fe99999 	.word	0x3fe99999
 8006a80:	20000bac 	.word	0x20000bac
 8006a84:	20000148 	.word	0x20000148
 8006a88:	20000c78 	.word	0x20000c78
 8006a8c:	3ecccccd 	.word	0x3ecccccd
 8006a90:	3f19999a 	.word	0x3f19999a
 8006a94:	20000c60 	.word	0x20000c60
 8006a98:	3fe00000 	.word	0x3fe00000
 8006a9c:	20000c62 	.word	0x20000c62
 8006aa0:	20000ba8 	.word	0x20000ba8
 8006aa4:	20000baa 	.word	0x20000baa

08006aa8 <mapI>:
}


#define Feq2Sec(F) (1.0f/F)

static int32_t mapI(int val, int min_in,int max_in,int min_out, int max_out){
 8006aa8:	b480      	push	{r7}
 8006aaa:	b087      	sub	sp, #28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
 8006ab4:	603b      	str	r3, [r7, #0]
   int out = (val - min_in)*(max_out - min_out)/(max_in - min_in);
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	6a39      	ldr	r1, [r7, #32]
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	1a8a      	subs	r2, r1, r2
 8006ac2:	fb03 f202 	mul.w	r2, r3, r2
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	1acb      	subs	r3, r1, r3
 8006acc:	fb92 f3f3 	sdiv	r3, r2, r3
 8006ad0:	617b      	str	r3, [r7, #20]
}
 8006ad2:	bf00      	nop
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	371c      	adds	r7, #28
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bc80      	pop	{r7}
 8006adc:	4770      	bx	lr

08006ade <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b085      	sub	sp, #20
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	6039      	str	r1, [r7, #0]
 8006ae8:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	79fb      	ldrb	r3, [r7, #7]
 8006af2:	4053      	eors	r3, r2
 8006af4:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8006af6:	7bfb      	ldrb	r3, [r7, #15]
 8006af8:	011b      	lsls	r3, r3, #4
 8006afa:	b25a      	sxtb	r2, r3
 8006afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b00:	4053      	eors	r3, r2
 8006b02:	b25b      	sxtb	r3, r3
 8006b04:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	0a1b      	lsrs	r3, r3, #8
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	b21a      	sxth	r2, r3
 8006b10:	7bfb      	ldrb	r3, [r7, #15]
 8006b12:	021b      	lsls	r3, r3, #8
 8006b14:	b21b      	sxth	r3, r3
 8006b16:	4053      	eors	r3, r2
 8006b18:	b21a      	sxth	r2, r3
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
 8006b1c:	00db      	lsls	r3, r3, #3
 8006b1e:	b21b      	sxth	r3, r3
 8006b20:	4053      	eors	r3, r2
 8006b22:	b21a      	sxth	r2, r3
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
 8006b26:	091b      	lsrs	r3, r3, #4
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	b21b      	sxth	r3, r3
 8006b2c:	4053      	eors	r3, r2
 8006b2e:	b21b      	sxth	r3, r3
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	801a      	strh	r2, [r3, #0]
}
 8006b36:	bf00      	nop
 8006b38:	3714      	adds	r7, #20
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bc80      	pop	{r7}
 8006b3e:	4770      	bx	lr

08006b40 <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006b4e:	801a      	strh	r2, [r3, #0]
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bc80      	pop	{r7}
 8006b58:	4770      	bx	lr

08006b5a <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	460b      	mov	r3, r1
 8006b64:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8006b66:	f107 030e 	add.w	r3, r7, #14
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7ff ffe8 	bl	8006b40 <crc_init>
	while (length--) {
 8006b70:	e009      	b.n	8006b86 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	607a      	str	r2, [r7, #4]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	f107 020e 	add.w	r2, r7, #14
 8006b7e:	4611      	mov	r1, r2
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7ff ffac 	bl	8006ade <crc_accumulate>
	while (length--) {
 8006b86:	887b      	ldrh	r3, [r7, #2]
 8006b88:	1e5a      	subs	r2, r3, #1
 8006b8a:	807a      	strh	r2, [r7, #2]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1f0      	bne.n	8006b72 <crc_calculate+0x18>
        }
        return crcTmp;
 8006b90:	89fb      	ldrh	r3, [r7, #14]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b086      	sub	sp, #24
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	60f8      	str	r0, [r7, #12]
 8006ba2:	60b9      	str	r1, [r7, #8]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	617b      	str	r3, [r7, #20]
	while (length--) {
 8006bac:	e007      	b.n	8006bbe <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	1c5a      	adds	r2, r3, #1
 8006bb2:	617a      	str	r2, [r7, #20]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	68f9      	ldr	r1, [r7, #12]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7ff ff90 	bl	8006ade <crc_accumulate>
	while (length--) {
 8006bbe:	88fb      	ldrh	r3, [r7, #6]
 8006bc0:	1e5a      	subs	r2, r3, #1
 8006bc2:	80fa      	strh	r2, [r7, #6]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1f2      	bne.n	8006bae <crc_accumulate_buffer+0x14>
        }
}
 8006bc8:	bf00      	nop
 8006bca:	bf00      	nop
 8006bcc:	3718      	adds	r7, #24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
	...

08006bd4 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	4603      	mov	r3, r0
 8006bdc:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8006bde:	79fa      	ldrb	r2, [r7, #7]
 8006be0:	4613      	mov	r3, r2
 8006be2:	005b      	lsls	r3, r3, #1
 8006be4:	4413      	add	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4a03      	ldr	r2, [pc, #12]	@ (8006bf8 <mavlink_get_channel_status+0x24>)
 8006bea:	4413      	add	r3, r2
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bc80      	pop	{r7}
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	20000e70 	.word	0x20000e70

08006bfc <mavlink_finalize_message_chan>:
						      uint8_t chan, uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						      uint8_t chan, uint8_t length)
#endif
{
 8006bfc:	b590      	push	{r4, r7, lr}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	4608      	mov	r0, r1
 8006c06:	4611      	mov	r1, r2
 8006c08:	461a      	mov	r2, r3
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	70fb      	strb	r3, [r7, #3]
 8006c0e:	460b      	mov	r3, r1
 8006c10:	70bb      	strb	r3, [r7, #2]
 8006c12:	4613      	mov	r3, r2
 8006c14:	707b      	strb	r3, [r7, #1]
	// This code part is the same for all messages;
	msg->magic = MAVLINK_STX;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	22fe      	movs	r2, #254	@ 0xfe
 8006c1a:	709a      	strb	r2, [r3, #2]
	msg->len = length;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	7e3a      	ldrb	r2, [r7, #24]
 8006c20:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	78fa      	ldrb	r2, [r7, #3]
 8006c26:	715a      	strb	r2, [r3, #5]
	msg->compid = component_id;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	78ba      	ldrb	r2, [r7, #2]
 8006c2c:	719a      	strb	r2, [r3, #6]
	// One sequence number per component
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 8006c2e:	787b      	ldrb	r3, [r7, #1]
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7ff ffcf 	bl	8006bd4 <mavlink_get_channel_status>
 8006c36:	4603      	mov	r3, r0
 8006c38:	799a      	ldrb	r2, [r3, #6]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	711a      	strb	r2, [r3, #4]
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 8006c3e:	787b      	ldrb	r3, [r7, #1]
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7ff ffc7 	bl	8006bd4 <mavlink_get_channel_status>
 8006c46:	4603      	mov	r3, r0
 8006c48:	799c      	ldrb	r4, [r3, #6]
 8006c4a:	787b      	ldrb	r3, [r7, #1]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff ffc1 	bl	8006bd4 <mavlink_get_channel_status>
 8006c52:	4603      	mov	r3, r0
 8006c54:	1c62      	adds	r2, r4, #1
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	719a      	strb	r2, [r3, #6]
	msg->checksum = crc_calculate(((const uint8_t*)(msg)) + 3, MAVLINK_CORE_HEADER_LEN);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	3303      	adds	r3, #3
 8006c5e:	2105      	movs	r1, #5
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7ff ff7a 	bl	8006b5a <crc_calculate>
 8006c66:	4603      	mov	r3, r0
 8006c68:	461a      	mov	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	801a      	strh	r2, [r3, #0]
	crc_accumulate_buffer(&msg->checksum, _MAV_PAYLOAD(msg), msg->len);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f103 0108 	add.w	r1, r3, #8
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	78db      	ldrb	r3, [r3, #3]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f7ff ff8d 	bl	8006b9a <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &msg->checksum);
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	7f3b      	ldrb	r3, [r7, #28]
 8006c84:	4611      	mov	r1, r2
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7ff ff29 	bl	8006ade <crc_accumulate>
#endif
	mavlink_ck_a(msg) = (uint8_t)(msg->checksum & 0xFF);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	b299      	uxth	r1, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	3308      	adds	r3, #8
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	78d2      	ldrb	r2, [r2, #3]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	b2ca      	uxtb	r2, r1
 8006c9e:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(msg->checksum >> 8);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	881b      	ldrh	r3, [r3, #0]
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	0a1b      	lsrs	r3, r3, #8
 8006ca8:	b299      	uxth	r1, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f103 0208 	add.w	r2, r3, #8
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	78db      	ldrb	r3, [r3, #3]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	4413      	add	r3, r2
 8006cb8:	b2ca      	uxtb	r2, r1
 8006cba:	701a      	strb	r2, [r3, #0]

	return length + MAVLINK_NUM_NON_PAYLOAD_BYTES;
 8006cbc:	7e3b      	ldrb	r3, [r7, #24]
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	3308      	adds	r3, #8
 8006cc2:	b29b      	uxth	r3, r3
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd90      	pop	{r4, r7, pc}

08006ccc <mavlink_finalize_message>:
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
#if MAVLINK_CRC_EXTRA
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t length, uint8_t crc_extra)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af02      	add	r7, sp, #8
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	4608      	mov	r0, r1
 8006cd6:	4611      	mov	r1, r2
 8006cd8:	461a      	mov	r2, r3
 8006cda:	4603      	mov	r3, r0
 8006cdc:	70fb      	strb	r3, [r7, #3]
 8006cde:	460b      	mov	r3, r1
 8006ce0:	70bb      	strb	r3, [r7, #2]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	707b      	strb	r3, [r7, #1]
	return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, length, crc_extra);
 8006ce6:	78ba      	ldrb	r2, [r7, #2]
 8006ce8:	78f9      	ldrb	r1, [r7, #3]
 8006cea:	7c3b      	ldrb	r3, [r7, #16]
 8006cec:	9301      	str	r3, [sp, #4]
 8006cee:	787b      	ldrb	r3, [r7, #1]
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f7ff ff81 	bl	8006bfc <mavlink_finalize_message_chan>
 8006cfa:	4603      	mov	r3, r0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buffer, const mavlink_message_t *msg)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
	memcpy(buffer, (const uint8_t *)&msg->magic, MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	1c99      	adds	r1, r3, #2
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	78db      	ldrb	r3, [r3, #3]
 8006d16:	3306      	adds	r3, #6
 8006d18:	461a      	mov	r2, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f00d fc24 	bl	8014568 <memcpy>

	uint8_t *ck = buffer + (MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	78db      	ldrb	r3, [r3, #3]
 8006d24:	3306      	adds	r3, #6
 8006d26:	461a      	mov	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]

	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	881b      	ldrh	r3, [r3, #0]
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	b2da      	uxtb	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	0a1b      	lsrs	r3, r3, #8
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	3301      	adds	r3, #1
 8006d48:	b2d2      	uxtb	r2, r2
 8006d4a:	701a      	strb	r2, [r3, #0]

	return MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)msg->len;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	78db      	ldrb	r3, [r3, #3]
 8006d50:	3308      	adds	r3, #8
 8006d52:	b29b      	uxth	r3, r3
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <mavlink_msg_heartbeat_pack>:
 * @param system_status System status flag, see MAV_STATE ENUM
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b088      	sub	sp, #32
 8006d60:	af02      	add	r7, sp, #8
 8006d62:	603a      	str	r2, [r7, #0]
 8006d64:	461a      	mov	r2, r3
 8006d66:	4603      	mov	r3, r0
 8006d68:	71fb      	strb	r3, [r7, #7]
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	71bb      	strb	r3, [r7, #6]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	717b      	strb	r3, [r7, #5]
	_mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
	mavlink_heartbeat_t packet;
	packet.custom_mode = custom_mode;
 8006d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d74:	60fb      	str	r3, [r7, #12]
	packet.type = type;
 8006d76:	797b      	ldrb	r3, [r7, #5]
 8006d78:	743b      	strb	r3, [r7, #16]
	packet.autopilot = autopilot;
 8006d7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d7e:	747b      	strb	r3, [r7, #17]
	packet.base_mode = base_mode;
 8006d80:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006d84:	74bb      	strb	r3, [r7, #18]
	packet.system_status = system_status;
 8006d86:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006d8a:	74fb      	strb	r3, [r7, #19]
	packet.mavlink_version = 3;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	3308      	adds	r3, #8
 8006d94:	f107 010c 	add.w	r1, r7, #12
 8006d98:	2209      	movs	r2, #9
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f00d fbe4 	bl	8014568 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	2200      	movs	r2, #0
 8006da4:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 8006da6:	79ba      	ldrb	r2, [r7, #6]
 8006da8:	79f9      	ldrb	r1, [r7, #7]
 8006daa:	2332      	movs	r3, #50	@ 0x32
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	2309      	movs	r3, #9
 8006db0:	6838      	ldr	r0, [r7, #0]
 8006db2:	f7ff ff8b 	bl	8006ccc <mavlink_finalize_message>
 8006db6:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#endif
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <mavlink_msg_attitude_pack>:
 * @param yawspeed Yaw angular speed (rad/s)
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_attitude_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint32_t time_boot_ms, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b08e      	sub	sp, #56	@ 0x38
 8006dc4:	af02      	add	r7, sp, #8
 8006dc6:	60ba      	str	r2, [r7, #8]
 8006dc8:	607b      	str	r3, [r7, #4]
 8006dca:	4603      	mov	r3, r0
 8006dcc:	73fb      	strb	r3, [r7, #15]
 8006dce:	460b      	mov	r3, r1
 8006dd0:	73bb      	strb	r3, [r7, #14]
	_mav_put_float(buf, 24, yawspeed);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_ATTITUDE_LEN);
#else
	mavlink_attitude_t packet;
	packet.time_boot_ms = time_boot_ms;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	617b      	str	r3, [r7, #20]
	packet.roll = roll;
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd8:	61bb      	str	r3, [r7, #24]
	packet.pitch = pitch;
 8006dda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ddc:	61fb      	str	r3, [r7, #28]
	packet.yaw = yaw;
 8006dde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006de0:	623b      	str	r3, [r7, #32]
	packet.rollspeed = rollspeed;
 8006de2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006de4:	627b      	str	r3, [r7, #36]	@ 0x24
	packet.pitchspeed = pitchspeed;
 8006de6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006de8:	62bb      	str	r3, [r7, #40]	@ 0x28
	packet.yawspeed = yawspeed;
 8006dea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dec:	62fb      	str	r3, [r7, #44]	@ 0x2c

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_ATTITUDE_LEN);
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	3308      	adds	r3, #8
 8006df2:	f107 0114 	add.w	r1, r7, #20
 8006df6:	221c      	movs	r2, #28
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f00d fbb5 	bl	8014568 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_ATTITUDE;
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	221e      	movs	r2, #30
 8006e02:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_ATTITUDE_LEN, MAVLINK_MSG_ID_ATTITUDE_CRC);
 8006e04:	7bba      	ldrb	r2, [r7, #14]
 8006e06:	7bf9      	ldrb	r1, [r7, #15]
 8006e08:	2327      	movs	r3, #39	@ 0x27
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	231c      	movs	r3, #28
 8006e0e:	68b8      	ldr	r0, [r7, #8]
 8006e10:	f7ff ff5c 	bl	8006ccc <mavlink_finalize_message>
 8006e14:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_ATTITUDE_LEN);
#endif
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3730      	adds	r7, #48	@ 0x30
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <mavlink_msg_rc_channels_raw_pack>:
 * @param rssi Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_rc_channels_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint32_t time_boot_ms, uint8_t port, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint8_t rssi)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b08c      	sub	sp, #48	@ 0x30
 8006e22:	af02      	add	r7, sp, #8
 8006e24:	60ba      	str	r2, [r7, #8]
 8006e26:	607b      	str	r3, [r7, #4]
 8006e28:	4603      	mov	r3, r0
 8006e2a:	73fb      	strb	r3, [r7, #15]
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	73bb      	strb	r3, [r7, #14]
	_mav_put_uint8_t(buf, 21, rssi);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#else
	mavlink_rc_channels_raw_t packet;
	packet.time_boot_ms = time_boot_ms;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	613b      	str	r3, [r7, #16]
	packet.chan1_raw = chan1_raw;
 8006e34:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006e36:	82bb      	strh	r3, [r7, #20]
	packet.chan2_raw = chan2_raw;
 8006e38:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006e3a:	82fb      	strh	r3, [r7, #22]
	packet.chan3_raw = chan3_raw;
 8006e3c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006e3e:	833b      	strh	r3, [r7, #24]
	packet.chan4_raw = chan4_raw;
 8006e40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006e44:	837b      	strh	r3, [r7, #26]
	packet.chan5_raw = chan5_raw;
 8006e46:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006e4a:	83bb      	strh	r3, [r7, #28]
	packet.chan6_raw = chan6_raw;
 8006e4c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006e50:	83fb      	strh	r3, [r7, #30]
	packet.chan7_raw = chan7_raw;
 8006e52:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006e56:	843b      	strh	r3, [r7, #32]
	packet.chan8_raw = chan8_raw;
 8006e58:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006e5c:	847b      	strh	r3, [r7, #34]	@ 0x22
	packet.port = port;
 8006e5e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006e62:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	packet.rssi = rssi;
 8006e66:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8006e6a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	3308      	adds	r3, #8
 8006e72:	f107 0110 	add.w	r1, r7, #16
 8006e76:	2216      	movs	r2, #22
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f00d fb75 	bl	8014568 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_RC_CHANNELS_RAW;
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	2223      	movs	r2, #35	@ 0x23
 8006e82:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN, MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC);
 8006e84:	7bba      	ldrb	r2, [r7, #14]
 8006e86:	7bf9      	ldrb	r1, [r7, #15]
 8006e88:	23f4      	movs	r3, #244	@ 0xf4
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	2316      	movs	r3, #22
 8006e8e:	68b8      	ldr	r0, [r7, #8]
 8006e90:	f7ff ff1c 	bl	8006ccc <mavlink_finalize_message>
 8006e94:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#endif
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3728      	adds	r7, #40	@ 0x28
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <mavlink_msg_vfr_hud_pack>:
 * @param climb Current climb rate in meters/second
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_vfr_hud_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b08c      	sub	sp, #48	@ 0x30
 8006ea2:	af02      	add	r7, sp, #8
 8006ea4:	60ba      	str	r2, [r7, #8]
 8006ea6:	607b      	str	r3, [r7, #4]
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	73fb      	strb	r3, [r7, #15]
 8006eac:	460b      	mov	r3, r1
 8006eae:	73bb      	strb	r3, [r7, #14]
	_mav_put_uint16_t(buf, 18, throttle);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_VFR_HUD_LEN);
#else
	mavlink_vfr_hud_t packet;
	packet.airspeed = airspeed;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	617b      	str	r3, [r7, #20]
	packet.groundspeed = groundspeed;
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb6:	61bb      	str	r3, [r7, #24]
	packet.alt = alt;
 8006eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eba:	61fb      	str	r3, [r7, #28]
	packet.climb = climb;
 8006ebc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ebe:	623b      	str	r3, [r7, #32]
	packet.heading = heading;
 8006ec0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006ec2:	84bb      	strh	r3, [r7, #36]	@ 0x24
	packet.throttle = throttle;
 8006ec4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006ec6:	84fb      	strh	r3, [r7, #38]	@ 0x26

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_VFR_HUD_LEN);
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	3308      	adds	r3, #8
 8006ecc:	f107 0114 	add.w	r1, r7, #20
 8006ed0:	2214      	movs	r2, #20
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f00d fb48 	bl	8014568 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_VFR_HUD;
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	224a      	movs	r2, #74	@ 0x4a
 8006edc:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
 8006ede:	7bba      	ldrb	r2, [r7, #14]
 8006ee0:	7bf9      	ldrb	r1, [r7, #15]
 8006ee2:	2314      	movs	r3, #20
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	2314      	movs	r3, #20
 8006ee8:	68b8      	ldr	r0, [r7, #8]
 8006eea:	f7ff feef 	bl	8006ccc <mavlink_finalize_message>
 8006eee:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_VFR_HUD_LEN);
#endif
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3728      	adds	r7, #40	@ 0x28
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <mavlinkInit>:
static int isTxcpl;
uint32_t send_time_us;

extern float v_estimate;

void mavlinkInit(uint8_t syss_id, uint8_t comm_id,UART_HandleTypeDef *uartt,uint32_t baudrate){
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60ba      	str	r2, [r7, #8]
 8006f00:	607b      	str	r3, [r7, #4]
 8006f02:	4603      	mov	r3, r0
 8006f04:	73fb      	strb	r3, [r7, #15]
 8006f06:	460b      	mov	r3, r1
 8006f08:	73bb      	strb	r3, [r7, #14]
    isTxcpl = 1;
 8006f0a:	4b10      	ldr	r3, [pc, #64]	@ (8006f4c <mavlinkInit+0x54>)
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	601a      	str	r2, [r3, #0]
    index_ =0;
 8006f10:	4b0f      	ldr	r3, [pc, #60]	@ (8006f50 <mavlinkInit+0x58>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	701a      	strb	r2, [r3, #0]
	sys_id  = syss_id;
 8006f16:	4a0f      	ldr	r2, [pc, #60]	@ (8006f54 <mavlinkInit+0x5c>)
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
 8006f1a:	7013      	strb	r3, [r2, #0]
    com_id  = comm_id;
 8006f1c:	4a0e      	ldr	r2, [pc, #56]	@ (8006f58 <mavlinkInit+0x60>)
 8006f1e:	7bbb      	ldrb	r3, [r7, #14]
 8006f20:	7013      	strb	r3, [r2, #0]
	uart = uartt;
 8006f22:	4a0e      	ldr	r2, [pc, #56]	@ (8006f5c <mavlinkInit+0x64>)
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	6013      	str	r3, [r2, #0]
    uartt->Init.BaudRate = baudrate;
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(uartt);
 8006f2e:	68b8      	ldr	r0, [r7, #8]
 8006f30:	f005 fab6 	bl	800c4a0 <HAL_UART_Init>
	HAL_UART_Receive_IT(uart, &data,1);
 8006f34:	4b09      	ldr	r3, [pc, #36]	@ (8006f5c <mavlinkInit+0x64>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	4909      	ldr	r1, [pc, #36]	@ (8006f60 <mavlinkInit+0x68>)
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f005 fb82 	bl	800c646 <HAL_UART_Receive_IT>
}
 8006f42:	bf00      	nop
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	20000e6c 	.word	0x20000e6c
 8006f50:	20000d9d 	.word	0x20000d9d
 8006f54:	20000d9e 	.word	0x20000d9e
 8006f58:	20000d9f 	.word	0x20000d9f
 8006f5c:	20000da0 	.word	0x20000da0
 8006f60:	20000d9c 	.word	0x20000d9c

08006f64 <mavlink_osd>:
*   Attitude
*   GPS 
*   RC signal
*   heartbeat
*/
void mavlink_osd(){
 8006f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f66:	b093      	sub	sp, #76	@ 0x4c
 8006f68:	af0a      	add	r7, sp, #40	@ 0x28
	static uint8_t count_ = 0;
	static uint8_t count2_ = 0;
	if(isTxcpl)
 8006f6a:	4b7c      	ldr	r3, [pc, #496]	@ (800715c <mavlink_osd+0x1f8>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f000 80ef 	beq.w	8007152 <mavlink_osd+0x1ee>
	{
		switch (count_)
 8006f74:	4b7a      	ldr	r3, [pc, #488]	@ (8007160 <mavlink_osd+0x1fc>)
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d071      	beq.n	8007060 <mavlink_osd+0xfc>
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	f300 80d8 	bgt.w	8007132 <mavlink_osd+0x1ce>
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d002      	beq.n	8006f8c <mavlink_osd+0x28>
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d02f      	beq.n	8006fea <mavlink_osd+0x86>
 8006f8a:	e0d2      	b.n	8007132 <mavlink_osd+0x1ce>
		{
		// fast display
		case 0:  
			mavlink_msg_attitude_pack(sys_id,com_id,&msg,0,AHRS.roll*RAD,AHRS.pitch*RAD,0,0,0,0);
 8006f8c:	4b75      	ldr	r3, [pc, #468]	@ (8007164 <mavlink_osd+0x200>)
 8006f8e:	781c      	ldrb	r4, [r3, #0]
 8006f90:	4b75      	ldr	r3, [pc, #468]	@ (8007168 <mavlink_osd+0x204>)
 8006f92:	781d      	ldrb	r5, [r3, #0]
 8006f94:	4b75      	ldr	r3, [pc, #468]	@ (800716c <mavlink_osd+0x208>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4975      	ldr	r1, [pc, #468]	@ (8007170 <mavlink_osd+0x20c>)
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7f9 feea 	bl	8000d74 <__aeabi_fmul>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	461e      	mov	r6, r3
 8006fa4:	4b71      	ldr	r3, [pc, #452]	@ (800716c <mavlink_osd+0x208>)
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	4971      	ldr	r1, [pc, #452]	@ (8007170 <mavlink_osd+0x20c>)
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7f9 fee2 	bl	8000d74 <__aeabi_fmul>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f04f 0300 	mov.w	r3, #0
 8006fb8:	9305      	str	r3, [sp, #20]
 8006fba:	f04f 0300 	mov.w	r3, #0
 8006fbe:	9304      	str	r3, [sp, #16]
 8006fc0:	f04f 0300 	mov.w	r3, #0
 8006fc4:	9303      	str	r3, [sp, #12]
 8006fc6:	f04f 0300 	mov.w	r3, #0
 8006fca:	9302      	str	r3, [sp, #8]
 8006fcc:	9201      	str	r2, [sp, #4]
 8006fce:	9600      	str	r6, [sp, #0]
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	4a68      	ldr	r2, [pc, #416]	@ (8007174 <mavlink_osd+0x210>)
 8006fd4:	4629      	mov	r1, r5
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f7ff fef2 	bl	8006dc0 <mavlink_msg_attitude_pack>
			count_ ++;
 8006fdc:	4b60      	ldr	r3, [pc, #384]	@ (8007160 <mavlink_osd+0x1fc>)
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	4b5e      	ldr	r3, [pc, #376]	@ (8007160 <mavlink_osd+0x1fc>)
 8006fe6:	701a      	strb	r2, [r3, #0]
			break;
 8006fe8:	e0a3      	b.n	8007132 <mavlink_osd+0x1ce>
		case 1:  
			float airspeed = 314;    // osd in km/h
 8006fea:	4b63      	ldr	r3, [pc, #396]	@ (8007178 <mavlink_osd+0x214>)
 8006fec:	61bb      	str	r3, [r7, #24]
			float groundspeed = 57;  // osd in km/h
 8006fee:	4b63      	ldr	r3, [pc, #396]	@ (800717c <mavlink_osd+0x218>)
 8006ff0:	617b      	str	r3, [r7, #20]
			uint16_t throttle = (ibusChannelData[CH3] - 1000)*0.1f;
 8006ff2:	4b63      	ldr	r3, [pc, #396]	@ (8007180 <mavlink_osd+0x21c>)
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7f9 fe62 	bl	8000cc4 <__aeabi_ui2f>
 8007000:	4603      	mov	r3, r0
 8007002:	4960      	ldr	r1, [pc, #384]	@ (8007184 <mavlink_osd+0x220>)
 8007004:	4618      	mov	r0, r3
 8007006:	f7f9 feb5 	bl	8000d74 <__aeabi_fmul>
 800700a:	4603      	mov	r3, r0
 800700c:	4618      	mov	r0, r3
 800700e:	f7fa f8b3 	bl	8001178 <__aeabi_f2uiz>
 8007012:	4603      	mov	r3, r0
 8007014:	827b      	strh	r3, [r7, #18]
			float alt = 333;
 8007016:	4b5c      	ldr	r3, [pc, #368]	@ (8007188 <mavlink_osd+0x224>)
 8007018:	60fb      	str	r3, [r7, #12]
			float climb = 5;
 800701a:	4b5c      	ldr	r3, [pc, #368]	@ (800718c <mavlink_osd+0x228>)
 800701c:	60bb      	str	r3, [r7, #8]
			mavlink_msg_vfr_hud_pack(sys_id,com_id,&msg,
 800701e:	4b51      	ldr	r3, [pc, #324]	@ (8007164 <mavlink_osd+0x200>)
 8007020:	781c      	ldrb	r4, [r3, #0]
 8007022:	4b51      	ldr	r3, [pc, #324]	@ (8007168 <mavlink_osd+0x204>)
 8007024:	781d      	ldrb	r5, [r3, #0]
						airspeed, groundspeed,AHRS.yaw, throttle,alt, climb);
 8007026:	4b51      	ldr	r3, [pc, #324]	@ (800716c <mavlink_osd+0x208>)
 8007028:	689b      	ldr	r3, [r3, #8]
			mavlink_msg_vfr_hud_pack(sys_id,com_id,&msg,
 800702a:	4618      	mov	r0, r3
 800702c:	f7fa f87e 	bl	800112c <__aeabi_f2iz>
 8007030:	4603      	mov	r3, r0
 8007032:	b21b      	sxth	r3, r3
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	9204      	str	r2, [sp, #16]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	9203      	str	r2, [sp, #12]
 800703c:	8a7a      	ldrh	r2, [r7, #18]
 800703e:	9202      	str	r2, [sp, #8]
 8007040:	9301      	str	r3, [sp, #4]
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	4a4a      	ldr	r2, [pc, #296]	@ (8007174 <mavlink_osd+0x210>)
 800704a:	4629      	mov	r1, r5
 800704c:	4620      	mov	r0, r4
 800704e:	f7ff ff26 	bl	8006e9e <mavlink_msg_vfr_hud_pack>
			count_ ++;
 8007052:	4b43      	ldr	r3, [pc, #268]	@ (8007160 <mavlink_osd+0x1fc>)
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	3301      	adds	r3, #1
 8007058:	b2da      	uxtb	r2, r3
 800705a:	4b41      	ldr	r3, [pc, #260]	@ (8007160 <mavlink_osd+0x1fc>)
 800705c:	701a      	strb	r2, [r3, #0]
			break;
 800705e:	e068      	b.n	8007132 <mavlink_osd+0x1ce>
		case 2:
			switch (count2_)
 8007060:	4b4b      	ldr	r3, [pc, #300]	@ (8007190 <mavlink_osd+0x22c>)
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	2b02      	cmp	r3, #2
 8007066:	d046      	beq.n	80070f6 <mavlink_osd+0x192>
 8007068:	2b02      	cmp	r3, #2
 800706a:	dc5f      	bgt.n	800712c <mavlink_osd+0x1c8>
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <mavlink_osd+0x112>
 8007070:	2b01      	cmp	r3, #1
 8007072:	d007      	beq.n	8007084 <mavlink_osd+0x120>
 8007074:	e05a      	b.n	800712c <mavlink_osd+0x1c8>
			{
			case 0:
				//mavlink_msg_gps_raw_int_pack(sys_id,com_id,&msg,
				//						0, _gps.fix,_gps.position[0],_gps.position[1],1200,
				//						1 , 1 , 2200,0 ,abs(v_estimate));
				count2_ ++;
 8007076:	4b46      	ldr	r3, [pc, #280]	@ (8007190 <mavlink_osd+0x22c>)
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	3301      	adds	r3, #1
 800707c:	b2da      	uxtb	r2, r3
 800707e:	4b44      	ldr	r3, [pc, #272]	@ (8007190 <mavlink_osd+0x22c>)
 8007080:	701a      	strb	r2, [r3, #0]

				break;
 8007082:	e053      	b.n	800712c <mavlink_osd+0x1c8>
			case 1:
			    uint8_t rssi = mapI(ibusChannelData[CH11],1000,2000,0,255);
 8007084:	4b3e      	ldr	r3, [pc, #248]	@ (8007180 <mavlink_osd+0x21c>)
 8007086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007088:	4618      	mov	r0, r3
 800708a:	23ff      	movs	r3, #255	@ 0xff
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	2300      	movs	r3, #0
 8007090:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8007094:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007098:	f7ff fd06 	bl	8006aa8 <mapI>
 800709c:	4603      	mov	r3, r0
 800709e:	773b      	strb	r3, [r7, #28]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 80070a0:	4b30      	ldr	r3, [pc, #192]	@ (8007164 <mavlink_osd+0x200>)
 80070a2:	781c      	ldrb	r4, [r3, #0]
 80070a4:	4b30      	ldr	r3, [pc, #192]	@ (8007168 <mavlink_osd+0x204>)
 80070a6:	781d      	ldrb	r5, [r3, #0]
						0,0,ibusChannelData[CH4],ibusChannelData[CH7],ibusChannelData[CH8], 
 80070a8:	4b35      	ldr	r3, [pc, #212]	@ (8007180 <mavlink_osd+0x21c>)
 80070aa:	68db      	ldr	r3, [r3, #12]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 80070ac:	b29b      	uxth	r3, r3
						0,0,ibusChannelData[CH4],ibusChannelData[CH7],ibusChannelData[CH8], 
 80070ae:	4a34      	ldr	r2, [pc, #208]	@ (8007180 <mavlink_osd+0x21c>)
 80070b0:	6992      	ldr	r2, [r2, #24]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 80070b2:	b292      	uxth	r2, r2
						0,0,ibusChannelData[CH4],ibusChannelData[CH7],ibusChannelData[CH8], 
 80070b4:	4932      	ldr	r1, [pc, #200]	@ (8007180 <mavlink_osd+0x21c>)
 80070b6:	69c9      	ldr	r1, [r1, #28]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 80070b8:	b289      	uxth	r1, r1
 80070ba:	7f38      	ldrb	r0, [r7, #28]
 80070bc:	9009      	str	r0, [sp, #36]	@ 0x24
 80070be:	2000      	movs	r0, #0
 80070c0:	9008      	str	r0, [sp, #32]
 80070c2:	2000      	movs	r0, #0
 80070c4:	9007      	str	r0, [sp, #28]
 80070c6:	2000      	movs	r0, #0
 80070c8:	9006      	str	r0, [sp, #24]
 80070ca:	2000      	movs	r0, #0
 80070cc:	9005      	str	r0, [sp, #20]
 80070ce:	2000      	movs	r0, #0
 80070d0:	9004      	str	r0, [sp, #16]
 80070d2:	9103      	str	r1, [sp, #12]
 80070d4:	9202      	str	r2, [sp, #8]
 80070d6:	9301      	str	r3, [sp, #4]
 80070d8:	2300      	movs	r3, #0
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	2300      	movs	r3, #0
 80070de:	4a25      	ldr	r2, [pc, #148]	@ (8007174 <mavlink_osd+0x210>)
 80070e0:	4629      	mov	r1, r5
 80070e2:	4620      	mov	r0, r4
 80070e4:	f7ff fe9b 	bl	8006e1e <mavlink_msg_rc_channels_raw_pack>
						0,0,0,
						0,0,rssi);
				count2_ ++;
 80070e8:	4b29      	ldr	r3, [pc, #164]	@ (8007190 <mavlink_osd+0x22c>)
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	3301      	adds	r3, #1
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	4b27      	ldr	r3, [pc, #156]	@ (8007190 <mavlink_osd+0x22c>)
 80070f2:	701a      	strb	r2, [r3, #0]
				break;
 80070f4:	e01a      	b.n	800712c <mavlink_osd+0x1c8>
			case 2: // send heartbeat
				uint8_t type = MAV_TYPE_FIXED_WING;
 80070f6:	2301      	movs	r3, #1
 80070f8:	77fb      	strb	r3, [r7, #31]
				uint8_t autopilot = MAV_AUTOPILOT_GENERIC;
 80070fa:	2300      	movs	r3, #0
 80070fc:	77bb      	strb	r3, [r7, #30]
				uint8_t base_mode = MAV_MODE_FLAG_TEST_ENABLED;
 80070fe:	2302      	movs	r3, #2
 8007100:	777b      	strb	r3, [r7, #29]
				mavlink_msg_heartbeat_pack(sys_id,com_id,&msg,type,autopilot,base_mode,base_mode, MAV_STATE_UNINIT);
 8007102:	4b18      	ldr	r3, [pc, #96]	@ (8007164 <mavlink_osd+0x200>)
 8007104:	7818      	ldrb	r0, [r3, #0]
 8007106:	4b18      	ldr	r3, [pc, #96]	@ (8007168 <mavlink_osd+0x204>)
 8007108:	7819      	ldrb	r1, [r3, #0]
 800710a:	7f7b      	ldrb	r3, [r7, #29]
 800710c:	7ffa      	ldrb	r2, [r7, #31]
 800710e:	2400      	movs	r4, #0
 8007110:	9403      	str	r4, [sp, #12]
 8007112:	9302      	str	r3, [sp, #8]
 8007114:	7f7b      	ldrb	r3, [r7, #29]
 8007116:	9301      	str	r3, [sp, #4]
 8007118:	7fbb      	ldrb	r3, [r7, #30]
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	4613      	mov	r3, r2
 800711e:	4a15      	ldr	r2, [pc, #84]	@ (8007174 <mavlink_osd+0x210>)
 8007120:	f7ff fe1c 	bl	8006d5c <mavlink_msg_heartbeat_pack>
				count2_ = 0;
 8007124:	4b1a      	ldr	r3, [pc, #104]	@ (8007190 <mavlink_osd+0x22c>)
 8007126:	2200      	movs	r2, #0
 8007128:	701a      	strb	r2, [r3, #0]
				break;
 800712a:	bf00      	nop
				                                     0,q,0,0,0,thrust);
		        count2_ = 0;
				break;
			*/
			}
			count_ = 0;
 800712c:	4b0c      	ldr	r3, [pc, #48]	@ (8007160 <mavlink_osd+0x1fc>)
 800712e:	2200      	movs	r2, #0
 8007130:	701a      	strb	r2, [r3, #0]
		}
		uint16_t len_data = mavlink_msg_to_send_buffer(buffer__,&msg);
 8007132:	4910      	ldr	r1, [pc, #64]	@ (8007174 <mavlink_osd+0x210>)
 8007134:	4817      	ldr	r0, [pc, #92]	@ (8007194 <mavlink_osd+0x230>)
 8007136:	f7ff fde5 	bl	8006d04 <mavlink_msg_to_send_buffer>
 800713a:	4603      	mov	r3, r0
 800713c:	80fb      	strh	r3, [r7, #6]
	    HAL_UART_Transmit_DMA(uart,buffer__,len_data);
 800713e:	4b16      	ldr	r3, [pc, #88]	@ (8007198 <mavlink_osd+0x234>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	88fa      	ldrh	r2, [r7, #6]
 8007144:	4913      	ldr	r1, [pc, #76]	@ (8007194 <mavlink_osd+0x230>)
 8007146:	4618      	mov	r0, r3
 8007148:	f005 faa2 	bl	800c690 <HAL_UART_Transmit_DMA>
	    isTxcpl = 0;
 800714c:	4b03      	ldr	r3, [pc, #12]	@ (800715c <mavlink_osd+0x1f8>)
 800714e:	2200      	movs	r2, #0
 8007150:	601a      	str	r2, [r3, #0]
	}
}
 8007152:	bf00      	nop
 8007154:	3724      	adds	r7, #36	@ 0x24
 8007156:	46bd      	mov	sp, r7
 8007158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800715a:	bf00      	nop
 800715c:	20000e6c 	.word	0x20000e6c
 8007160:	20000ea0 	.word	0x20000ea0
 8007164:	20000d9e 	.word	0x20000d9e
 8007168:	20000d9f 	.word	0x20000d9f
 800716c:	2000055c 	.word	0x2000055c
 8007170:	3c8efa35 	.word	0x3c8efa35
 8007174:	20000c8c 	.word	0x20000c8c
 8007178:	439d0000 	.word	0x439d0000
 800717c:	42640000 	.word	0x42640000
 8007180:	20000148 	.word	0x20000148
 8007184:	3dcccccd 	.word	0x3dcccccd
 8007188:	43a68000 	.word	0x43a68000
 800718c:	40a00000 	.word	0x40a00000
 8007190:	20000ea1 	.word	0x20000ea1
 8007194:	20000da4 	.word	0x20000da4
 8007198:	20000da0 	.word	0x20000da0

0800719c <mavlink_tx_cpl_callback>:
/*
 * 
 */
uint32_t temp;
void mavlink_tx_cpl_callback()
{   
 800719c:	b480      	push	{r7}
 800719e:	af00      	add	r7, sp, #0
	//send_time_us = millis() - temp;
	//temp = millis();
	isTxcpl = 1;
 80071a0:	4b03      	ldr	r3, [pc, #12]	@ (80071b0 <mavlink_tx_cpl_callback+0x14>)
 80071a2:	2201      	movs	r2, #1
 80071a4:	601a      	str	r2, [r3, #0]
}
 80071a6:	bf00      	nop
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bc80      	pop	{r7}
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	20000e6c 	.word	0x20000e6c

080071b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80071b8:	4b08      	ldr	r3, [pc, #32]	@ (80071dc <HAL_Init+0x28>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a07      	ldr	r2, [pc, #28]	@ (80071dc <HAL_Init+0x28>)
 80071be:	f043 0310 	orr.w	r3, r3, #16
 80071c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80071c4:	2003      	movs	r0, #3
 80071c6:	f000 f8f5 	bl	80073b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80071ca:	200f      	movs	r0, #15
 80071cc:	f7fe fae0 	bl	8005790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80071d0:	f7fe faa6 	bl	8005720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	40022000 	.word	0x40022000

080071e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80071e0:	b480      	push	{r7}
 80071e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80071e4:	4b05      	ldr	r3, [pc, #20]	@ (80071fc <HAL_IncTick+0x1c>)
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	461a      	mov	r2, r3
 80071ea:	4b05      	ldr	r3, [pc, #20]	@ (8007200 <HAL_IncTick+0x20>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4413      	add	r3, r2
 80071f0:	4a03      	ldr	r2, [pc, #12]	@ (8007200 <HAL_IncTick+0x20>)
 80071f2:	6013      	str	r3, [r2, #0]
}
 80071f4:	bf00      	nop
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bc80      	pop	{r7}
 80071fa:	4770      	bx	lr
 80071fc:	2000006c 	.word	0x2000006c
 8007200:	20000ea4 	.word	0x20000ea4

08007204 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007204:	b480      	push	{r7}
 8007206:	af00      	add	r7, sp, #0
  return uwTick;
 8007208:	4b02      	ldr	r3, [pc, #8]	@ (8007214 <HAL_GetTick+0x10>)
 800720a:	681b      	ldr	r3, [r3, #0]
}
 800720c:	4618      	mov	r0, r3
 800720e:	46bd      	mov	sp, r7
 8007210:	bc80      	pop	{r7}
 8007212:	4770      	bx	lr
 8007214:	20000ea4 	.word	0x20000ea4

08007218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007220:	f7ff fff0 	bl	8007204 <HAL_GetTick>
 8007224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007230:	d005      	beq.n	800723e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007232:	4b0a      	ldr	r3, [pc, #40]	@ (800725c <HAL_Delay+0x44>)
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	461a      	mov	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4413      	add	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800723e:	bf00      	nop
 8007240:	f7ff ffe0 	bl	8007204 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	429a      	cmp	r2, r3
 800724e:	d8f7      	bhi.n	8007240 <HAL_Delay+0x28>
  {
  }
}
 8007250:	bf00      	nop
 8007252:	bf00      	nop
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	2000006c 	.word	0x2000006c

08007260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f003 0307 	and.w	r3, r3, #7
 800726e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007270:	4b0c      	ldr	r3, [pc, #48]	@ (80072a4 <__NVIC_SetPriorityGrouping+0x44>)
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800727c:	4013      	ands	r3, r2
 800727e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007288:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800728c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007292:	4a04      	ldr	r2, [pc, #16]	@ (80072a4 <__NVIC_SetPriorityGrouping+0x44>)
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	60d3      	str	r3, [r2, #12]
}
 8007298:	bf00      	nop
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	bc80      	pop	{r7}
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	e000ed00 	.word	0xe000ed00

080072a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80072a8:	b480      	push	{r7}
 80072aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80072ac:	4b04      	ldr	r3, [pc, #16]	@ (80072c0 <__NVIC_GetPriorityGrouping+0x18>)
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	0a1b      	lsrs	r3, r3, #8
 80072b2:	f003 0307 	and.w	r3, r3, #7
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bc80      	pop	{r7}
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	e000ed00 	.word	0xe000ed00

080072c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	4603      	mov	r3, r0
 80072cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	db0b      	blt.n	80072ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072d6:	79fb      	ldrb	r3, [r7, #7]
 80072d8:	f003 021f 	and.w	r2, r3, #31
 80072dc:	4906      	ldr	r1, [pc, #24]	@ (80072f8 <__NVIC_EnableIRQ+0x34>)
 80072de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072e2:	095b      	lsrs	r3, r3, #5
 80072e4:	2001      	movs	r0, #1
 80072e6:	fa00 f202 	lsl.w	r2, r0, r2
 80072ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80072ee:	bf00      	nop
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bc80      	pop	{r7}
 80072f6:	4770      	bx	lr
 80072f8:	e000e100 	.word	0xe000e100

080072fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	4603      	mov	r3, r0
 8007304:	6039      	str	r1, [r7, #0]
 8007306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800730c:	2b00      	cmp	r3, #0
 800730e:	db0a      	blt.n	8007326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	b2da      	uxtb	r2, r3
 8007314:	490c      	ldr	r1, [pc, #48]	@ (8007348 <__NVIC_SetPriority+0x4c>)
 8007316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800731a:	0112      	lsls	r2, r2, #4
 800731c:	b2d2      	uxtb	r2, r2
 800731e:	440b      	add	r3, r1
 8007320:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007324:	e00a      	b.n	800733c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	b2da      	uxtb	r2, r3
 800732a:	4908      	ldr	r1, [pc, #32]	@ (800734c <__NVIC_SetPriority+0x50>)
 800732c:	79fb      	ldrb	r3, [r7, #7]
 800732e:	f003 030f 	and.w	r3, r3, #15
 8007332:	3b04      	subs	r3, #4
 8007334:	0112      	lsls	r2, r2, #4
 8007336:	b2d2      	uxtb	r2, r2
 8007338:	440b      	add	r3, r1
 800733a:	761a      	strb	r2, [r3, #24]
}
 800733c:	bf00      	nop
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	bc80      	pop	{r7}
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	e000e100 	.word	0xe000e100
 800734c:	e000ed00 	.word	0xe000ed00

08007350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007350:	b480      	push	{r7}
 8007352:	b089      	sub	sp, #36	@ 0x24
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f003 0307 	and.w	r3, r3, #7
 8007362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	f1c3 0307 	rsb	r3, r3, #7
 800736a:	2b04      	cmp	r3, #4
 800736c:	bf28      	it	cs
 800736e:	2304      	movcs	r3, #4
 8007370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	3304      	adds	r3, #4
 8007376:	2b06      	cmp	r3, #6
 8007378:	d902      	bls.n	8007380 <NVIC_EncodePriority+0x30>
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	3b03      	subs	r3, #3
 800737e:	e000      	b.n	8007382 <NVIC_EncodePriority+0x32>
 8007380:	2300      	movs	r3, #0
 8007382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007384:	f04f 32ff 	mov.w	r2, #4294967295
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	fa02 f303 	lsl.w	r3, r2, r3
 800738e:	43da      	mvns	r2, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	401a      	ands	r2, r3
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007398:	f04f 31ff 	mov.w	r1, #4294967295
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	fa01 f303 	lsl.w	r3, r1, r3
 80073a2:	43d9      	mvns	r1, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073a8:	4313      	orrs	r3, r2
         );
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3724      	adds	r7, #36	@ 0x24
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bc80      	pop	{r7}
 80073b2:	4770      	bx	lr

080073b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f7ff ff4f 	bl	8007260 <__NVIC_SetPriorityGrouping>
}
 80073c2:	bf00      	nop
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b086      	sub	sp, #24
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	4603      	mov	r3, r0
 80073d2:	60b9      	str	r1, [r7, #8]
 80073d4:	607a      	str	r2, [r7, #4]
 80073d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80073d8:	2300      	movs	r3, #0
 80073da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80073dc:	f7ff ff64 	bl	80072a8 <__NVIC_GetPriorityGrouping>
 80073e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	68b9      	ldr	r1, [r7, #8]
 80073e6:	6978      	ldr	r0, [r7, #20]
 80073e8:	f7ff ffb2 	bl	8007350 <NVIC_EncodePriority>
 80073ec:	4602      	mov	r2, r0
 80073ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073f2:	4611      	mov	r1, r2
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff ff81 	bl	80072fc <__NVIC_SetPriority>
}
 80073fa:	bf00      	nop
 80073fc:	3718      	adds	r7, #24
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b082      	sub	sp, #8
 8007406:	af00      	add	r7, sp, #0
 8007408:	4603      	mov	r3, r0
 800740a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800740c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007410:	4618      	mov	r0, r3
 8007412:	f7ff ff57 	bl	80072c4 <__NVIC_EnableIRQ>
}
 8007416:	bf00      	nop
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
	...

08007420 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007428:	2300      	movs	r3, #0
 800742a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e059      	b.n	80074ea <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	461a      	mov	r2, r3
 800743c:	4b2d      	ldr	r3, [pc, #180]	@ (80074f4 <HAL_DMA_Init+0xd4>)
 800743e:	429a      	cmp	r2, r3
 8007440:	d80f      	bhi.n	8007462 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	461a      	mov	r2, r3
 8007448:	4b2b      	ldr	r3, [pc, #172]	@ (80074f8 <HAL_DMA_Init+0xd8>)
 800744a:	4413      	add	r3, r2
 800744c:	4a2b      	ldr	r2, [pc, #172]	@ (80074fc <HAL_DMA_Init+0xdc>)
 800744e:	fba2 2303 	umull	r2, r3, r2, r3
 8007452:	091b      	lsrs	r3, r3, #4
 8007454:	009a      	lsls	r2, r3, #2
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a28      	ldr	r2, [pc, #160]	@ (8007500 <HAL_DMA_Init+0xe0>)
 800745e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007460:	e00e      	b.n	8007480 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	461a      	mov	r2, r3
 8007468:	4b26      	ldr	r3, [pc, #152]	@ (8007504 <HAL_DMA_Init+0xe4>)
 800746a:	4413      	add	r3, r2
 800746c:	4a23      	ldr	r2, [pc, #140]	@ (80074fc <HAL_DMA_Init+0xdc>)
 800746e:	fba2 2303 	umull	r2, r3, r2, r3
 8007472:	091b      	lsrs	r3, r3, #4
 8007474:	009a      	lsls	r2, r3, #2
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a22      	ldr	r2, [pc, #136]	@ (8007508 <HAL_DMA_Init+0xe8>)
 800747e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2202      	movs	r2, #2
 8007484:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8007496:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800749a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80074a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80074bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	69db      	ldr	r3, [r3, #28]
 80074c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3714      	adds	r7, #20
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bc80      	pop	{r7}
 80074f2:	4770      	bx	lr
 80074f4:	40020407 	.word	0x40020407
 80074f8:	bffdfff8 	.word	0xbffdfff8
 80074fc:	cccccccd 	.word	0xcccccccd
 8007500:	40020000 	.word	0x40020000
 8007504:	bffdfbf8 	.word	0xbffdfbf8
 8007508:	40020400 	.word	0x40020400

0800750c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
 8007518:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800751a:	2300      	movs	r3, #0
 800751c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d101      	bne.n	800752c <HAL_DMA_Start_IT+0x20>
 8007528:	2302      	movs	r3, #2
 800752a:	e04b      	b.n	80075c4 <HAL_DMA_Start_IT+0xb8>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800753a:	b2db      	uxtb	r3, r3
 800753c:	2b01      	cmp	r3, #1
 800753e:	d13a      	bne.n	80075b6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2202      	movs	r2, #2
 8007544:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f022 0201 	bic.w	r2, r2, #1
 800755c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	68b9      	ldr	r1, [r7, #8]
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 fbb1 	bl	8007ccc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756e:	2b00      	cmp	r3, #0
 8007570:	d008      	beq.n	8007584 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f042 020e 	orr.w	r2, r2, #14
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	e00f      	b.n	80075a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f022 0204 	bic.w	r2, r2, #4
 8007592:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f042 020a 	orr.w	r2, r2, #10
 80075a2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f042 0201 	orr.w	r2, r2, #1
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	e005      	b.n	80075c2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80075be:	2302      	movs	r3, #2
 80075c0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80075c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3718      	adds	r7, #24
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d008      	beq.n	80075f6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2204      	movs	r2, #4
 80075e8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e020      	b.n	8007638 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f022 020e 	bic.w	r2, r2, #14
 8007604:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f022 0201 	bic.w	r2, r2, #1
 8007614:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800761e:	2101      	movs	r1, #1
 8007620:	fa01 f202 	lsl.w	r2, r1, r2
 8007624:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8007636:	7bfb      	ldrb	r3, [r7, #15]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3714      	adds	r7, #20
 800763c:	46bd      	mov	sp, r7
 800763e:	bc80      	pop	{r7}
 8007640:	4770      	bx	lr
	...

08007644 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800764c:	2300      	movs	r3, #0
 800764e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007656:	b2db      	uxtb	r3, r3
 8007658:	2b02      	cmp	r3, #2
 800765a:	d005      	beq.n	8007668 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2204      	movs	r2, #4
 8007660:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	73fb      	strb	r3, [r7, #15]
 8007666:	e0d6      	b.n	8007816 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f022 020e 	bic.w	r2, r2, #14
 8007676:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f022 0201 	bic.w	r2, r2, #1
 8007686:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	461a      	mov	r2, r3
 800768e:	4b64      	ldr	r3, [pc, #400]	@ (8007820 <HAL_DMA_Abort_IT+0x1dc>)
 8007690:	429a      	cmp	r2, r3
 8007692:	d958      	bls.n	8007746 <HAL_DMA_Abort_IT+0x102>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a62      	ldr	r2, [pc, #392]	@ (8007824 <HAL_DMA_Abort_IT+0x1e0>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d04f      	beq.n	800773e <HAL_DMA_Abort_IT+0xfa>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a61      	ldr	r2, [pc, #388]	@ (8007828 <HAL_DMA_Abort_IT+0x1e4>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d048      	beq.n	800773a <HAL_DMA_Abort_IT+0xf6>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a5f      	ldr	r2, [pc, #380]	@ (800782c <HAL_DMA_Abort_IT+0x1e8>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d040      	beq.n	8007734 <HAL_DMA_Abort_IT+0xf0>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a5e      	ldr	r2, [pc, #376]	@ (8007830 <HAL_DMA_Abort_IT+0x1ec>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d038      	beq.n	800772e <HAL_DMA_Abort_IT+0xea>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a5c      	ldr	r2, [pc, #368]	@ (8007834 <HAL_DMA_Abort_IT+0x1f0>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d030      	beq.n	8007728 <HAL_DMA_Abort_IT+0xe4>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a5b      	ldr	r2, [pc, #364]	@ (8007838 <HAL_DMA_Abort_IT+0x1f4>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d028      	beq.n	8007722 <HAL_DMA_Abort_IT+0xde>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a52      	ldr	r2, [pc, #328]	@ (8007820 <HAL_DMA_Abort_IT+0x1dc>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d020      	beq.n	800771c <HAL_DMA_Abort_IT+0xd8>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a57      	ldr	r2, [pc, #348]	@ (800783c <HAL_DMA_Abort_IT+0x1f8>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d019      	beq.n	8007718 <HAL_DMA_Abort_IT+0xd4>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a55      	ldr	r2, [pc, #340]	@ (8007840 <HAL_DMA_Abort_IT+0x1fc>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d012      	beq.n	8007714 <HAL_DMA_Abort_IT+0xd0>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a54      	ldr	r2, [pc, #336]	@ (8007844 <HAL_DMA_Abort_IT+0x200>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d00a      	beq.n	800770e <HAL_DMA_Abort_IT+0xca>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a52      	ldr	r2, [pc, #328]	@ (8007848 <HAL_DMA_Abort_IT+0x204>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d102      	bne.n	8007708 <HAL_DMA_Abort_IT+0xc4>
 8007702:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007706:	e01b      	b.n	8007740 <HAL_DMA_Abort_IT+0xfc>
 8007708:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800770c:	e018      	b.n	8007740 <HAL_DMA_Abort_IT+0xfc>
 800770e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007712:	e015      	b.n	8007740 <HAL_DMA_Abort_IT+0xfc>
 8007714:	2310      	movs	r3, #16
 8007716:	e013      	b.n	8007740 <HAL_DMA_Abort_IT+0xfc>
 8007718:	2301      	movs	r3, #1
 800771a:	e011      	b.n	8007740 <HAL_DMA_Abort_IT+0xfc>
 800771c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007720:	e00e      	b.n	8007740 <HAL_DMA_Abort_IT+0xfc>
 8007722:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007726:	e00b      	b.n	8007740 <HAL_DMA_Abort_IT+0xfc>
 8007728:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800772c:	e008      	b.n	8007740 <HAL_DMA_Abort_IT+0xfc>
 800772e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007732:	e005      	b.n	8007740 <HAL_DMA_Abort_IT+0xfc>
 8007734:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007738:	e002      	b.n	8007740 <HAL_DMA_Abort_IT+0xfc>
 800773a:	2310      	movs	r3, #16
 800773c:	e000      	b.n	8007740 <HAL_DMA_Abort_IT+0xfc>
 800773e:	2301      	movs	r3, #1
 8007740:	4a42      	ldr	r2, [pc, #264]	@ (800784c <HAL_DMA_Abort_IT+0x208>)
 8007742:	6053      	str	r3, [r2, #4]
 8007744:	e057      	b.n	80077f6 <HAL_DMA_Abort_IT+0x1b2>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a36      	ldr	r2, [pc, #216]	@ (8007824 <HAL_DMA_Abort_IT+0x1e0>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d04f      	beq.n	80077f0 <HAL_DMA_Abort_IT+0x1ac>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a34      	ldr	r2, [pc, #208]	@ (8007828 <HAL_DMA_Abort_IT+0x1e4>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d048      	beq.n	80077ec <HAL_DMA_Abort_IT+0x1a8>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a33      	ldr	r2, [pc, #204]	@ (800782c <HAL_DMA_Abort_IT+0x1e8>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d040      	beq.n	80077e6 <HAL_DMA_Abort_IT+0x1a2>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a31      	ldr	r2, [pc, #196]	@ (8007830 <HAL_DMA_Abort_IT+0x1ec>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d038      	beq.n	80077e0 <HAL_DMA_Abort_IT+0x19c>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a30      	ldr	r2, [pc, #192]	@ (8007834 <HAL_DMA_Abort_IT+0x1f0>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d030      	beq.n	80077da <HAL_DMA_Abort_IT+0x196>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a2e      	ldr	r2, [pc, #184]	@ (8007838 <HAL_DMA_Abort_IT+0x1f4>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d028      	beq.n	80077d4 <HAL_DMA_Abort_IT+0x190>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a26      	ldr	r2, [pc, #152]	@ (8007820 <HAL_DMA_Abort_IT+0x1dc>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d020      	beq.n	80077ce <HAL_DMA_Abort_IT+0x18a>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a2a      	ldr	r2, [pc, #168]	@ (800783c <HAL_DMA_Abort_IT+0x1f8>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d019      	beq.n	80077ca <HAL_DMA_Abort_IT+0x186>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a29      	ldr	r2, [pc, #164]	@ (8007840 <HAL_DMA_Abort_IT+0x1fc>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d012      	beq.n	80077c6 <HAL_DMA_Abort_IT+0x182>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a27      	ldr	r2, [pc, #156]	@ (8007844 <HAL_DMA_Abort_IT+0x200>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d00a      	beq.n	80077c0 <HAL_DMA_Abort_IT+0x17c>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a26      	ldr	r2, [pc, #152]	@ (8007848 <HAL_DMA_Abort_IT+0x204>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d102      	bne.n	80077ba <HAL_DMA_Abort_IT+0x176>
 80077b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80077b8:	e01b      	b.n	80077f2 <HAL_DMA_Abort_IT+0x1ae>
 80077ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80077be:	e018      	b.n	80077f2 <HAL_DMA_Abort_IT+0x1ae>
 80077c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80077c4:	e015      	b.n	80077f2 <HAL_DMA_Abort_IT+0x1ae>
 80077c6:	2310      	movs	r3, #16
 80077c8:	e013      	b.n	80077f2 <HAL_DMA_Abort_IT+0x1ae>
 80077ca:	2301      	movs	r3, #1
 80077cc:	e011      	b.n	80077f2 <HAL_DMA_Abort_IT+0x1ae>
 80077ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80077d2:	e00e      	b.n	80077f2 <HAL_DMA_Abort_IT+0x1ae>
 80077d4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80077d8:	e00b      	b.n	80077f2 <HAL_DMA_Abort_IT+0x1ae>
 80077da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80077de:	e008      	b.n	80077f2 <HAL_DMA_Abort_IT+0x1ae>
 80077e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80077e4:	e005      	b.n	80077f2 <HAL_DMA_Abort_IT+0x1ae>
 80077e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80077ea:	e002      	b.n	80077f2 <HAL_DMA_Abort_IT+0x1ae>
 80077ec:	2310      	movs	r3, #16
 80077ee:	e000      	b.n	80077f2 <HAL_DMA_Abort_IT+0x1ae>
 80077f0:	2301      	movs	r3, #1
 80077f2:	4a17      	ldr	r2, [pc, #92]	@ (8007850 <HAL_DMA_Abort_IT+0x20c>)
 80077f4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800780a:	2b00      	cmp	r3, #0
 800780c:	d003      	beq.n	8007816 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	4798      	blx	r3
    } 
  }
  return status;
 8007816:	7bfb      	ldrb	r3, [r7, #15]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	40020080 	.word	0x40020080
 8007824:	40020008 	.word	0x40020008
 8007828:	4002001c 	.word	0x4002001c
 800782c:	40020030 	.word	0x40020030
 8007830:	40020044 	.word	0x40020044
 8007834:	40020058 	.word	0x40020058
 8007838:	4002006c 	.word	0x4002006c
 800783c:	40020408 	.word	0x40020408
 8007840:	4002041c 	.word	0x4002041c
 8007844:	40020430 	.word	0x40020430
 8007848:	40020444 	.word	0x40020444
 800784c:	40020400 	.word	0x40020400
 8007850:	40020000 	.word	0x40020000

08007854 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007870:	2204      	movs	r2, #4
 8007872:	409a      	lsls	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	4013      	ands	r3, r2
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 80f1 	beq.w	8007a60 <HAL_DMA_IRQHandler+0x20c>
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	f003 0304 	and.w	r3, r3, #4
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 80eb 	beq.w	8007a60 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0320 	and.w	r3, r3, #32
 8007894:	2b00      	cmp	r3, #0
 8007896:	d107      	bne.n	80078a8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f022 0204 	bic.w	r2, r2, #4
 80078a6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	461a      	mov	r2, r3
 80078ae:	4b5f      	ldr	r3, [pc, #380]	@ (8007a2c <HAL_DMA_IRQHandler+0x1d8>)
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d958      	bls.n	8007966 <HAL_DMA_IRQHandler+0x112>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a5d      	ldr	r2, [pc, #372]	@ (8007a30 <HAL_DMA_IRQHandler+0x1dc>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d04f      	beq.n	800795e <HAL_DMA_IRQHandler+0x10a>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a5c      	ldr	r2, [pc, #368]	@ (8007a34 <HAL_DMA_IRQHandler+0x1e0>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d048      	beq.n	800795a <HAL_DMA_IRQHandler+0x106>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a5a      	ldr	r2, [pc, #360]	@ (8007a38 <HAL_DMA_IRQHandler+0x1e4>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d040      	beq.n	8007954 <HAL_DMA_IRQHandler+0x100>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a59      	ldr	r2, [pc, #356]	@ (8007a3c <HAL_DMA_IRQHandler+0x1e8>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d038      	beq.n	800794e <HAL_DMA_IRQHandler+0xfa>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a57      	ldr	r2, [pc, #348]	@ (8007a40 <HAL_DMA_IRQHandler+0x1ec>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d030      	beq.n	8007948 <HAL_DMA_IRQHandler+0xf4>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a56      	ldr	r2, [pc, #344]	@ (8007a44 <HAL_DMA_IRQHandler+0x1f0>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d028      	beq.n	8007942 <HAL_DMA_IRQHandler+0xee>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a4d      	ldr	r2, [pc, #308]	@ (8007a2c <HAL_DMA_IRQHandler+0x1d8>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d020      	beq.n	800793c <HAL_DMA_IRQHandler+0xe8>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a52      	ldr	r2, [pc, #328]	@ (8007a48 <HAL_DMA_IRQHandler+0x1f4>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d019      	beq.n	8007938 <HAL_DMA_IRQHandler+0xe4>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a50      	ldr	r2, [pc, #320]	@ (8007a4c <HAL_DMA_IRQHandler+0x1f8>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d012      	beq.n	8007934 <HAL_DMA_IRQHandler+0xe0>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a4f      	ldr	r2, [pc, #316]	@ (8007a50 <HAL_DMA_IRQHandler+0x1fc>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d00a      	beq.n	800792e <HAL_DMA_IRQHandler+0xda>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a4d      	ldr	r2, [pc, #308]	@ (8007a54 <HAL_DMA_IRQHandler+0x200>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d102      	bne.n	8007928 <HAL_DMA_IRQHandler+0xd4>
 8007922:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007926:	e01b      	b.n	8007960 <HAL_DMA_IRQHandler+0x10c>
 8007928:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800792c:	e018      	b.n	8007960 <HAL_DMA_IRQHandler+0x10c>
 800792e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007932:	e015      	b.n	8007960 <HAL_DMA_IRQHandler+0x10c>
 8007934:	2340      	movs	r3, #64	@ 0x40
 8007936:	e013      	b.n	8007960 <HAL_DMA_IRQHandler+0x10c>
 8007938:	2304      	movs	r3, #4
 800793a:	e011      	b.n	8007960 <HAL_DMA_IRQHandler+0x10c>
 800793c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007940:	e00e      	b.n	8007960 <HAL_DMA_IRQHandler+0x10c>
 8007942:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007946:	e00b      	b.n	8007960 <HAL_DMA_IRQHandler+0x10c>
 8007948:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800794c:	e008      	b.n	8007960 <HAL_DMA_IRQHandler+0x10c>
 800794e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007952:	e005      	b.n	8007960 <HAL_DMA_IRQHandler+0x10c>
 8007954:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007958:	e002      	b.n	8007960 <HAL_DMA_IRQHandler+0x10c>
 800795a:	2340      	movs	r3, #64	@ 0x40
 800795c:	e000      	b.n	8007960 <HAL_DMA_IRQHandler+0x10c>
 800795e:	2304      	movs	r3, #4
 8007960:	4a3d      	ldr	r2, [pc, #244]	@ (8007a58 <HAL_DMA_IRQHandler+0x204>)
 8007962:	6053      	str	r3, [r2, #4]
 8007964:	e057      	b.n	8007a16 <HAL_DMA_IRQHandler+0x1c2>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a31      	ldr	r2, [pc, #196]	@ (8007a30 <HAL_DMA_IRQHandler+0x1dc>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d04f      	beq.n	8007a10 <HAL_DMA_IRQHandler+0x1bc>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a2f      	ldr	r2, [pc, #188]	@ (8007a34 <HAL_DMA_IRQHandler+0x1e0>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d048      	beq.n	8007a0c <HAL_DMA_IRQHandler+0x1b8>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a2e      	ldr	r2, [pc, #184]	@ (8007a38 <HAL_DMA_IRQHandler+0x1e4>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d040      	beq.n	8007a06 <HAL_DMA_IRQHandler+0x1b2>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a2c      	ldr	r2, [pc, #176]	@ (8007a3c <HAL_DMA_IRQHandler+0x1e8>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d038      	beq.n	8007a00 <HAL_DMA_IRQHandler+0x1ac>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a2b      	ldr	r2, [pc, #172]	@ (8007a40 <HAL_DMA_IRQHandler+0x1ec>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d030      	beq.n	80079fa <HAL_DMA_IRQHandler+0x1a6>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a29      	ldr	r2, [pc, #164]	@ (8007a44 <HAL_DMA_IRQHandler+0x1f0>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d028      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x1a0>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a21      	ldr	r2, [pc, #132]	@ (8007a2c <HAL_DMA_IRQHandler+0x1d8>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d020      	beq.n	80079ee <HAL_DMA_IRQHandler+0x19a>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a25      	ldr	r2, [pc, #148]	@ (8007a48 <HAL_DMA_IRQHandler+0x1f4>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d019      	beq.n	80079ea <HAL_DMA_IRQHandler+0x196>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a24      	ldr	r2, [pc, #144]	@ (8007a4c <HAL_DMA_IRQHandler+0x1f8>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d012      	beq.n	80079e6 <HAL_DMA_IRQHandler+0x192>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a22      	ldr	r2, [pc, #136]	@ (8007a50 <HAL_DMA_IRQHandler+0x1fc>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d00a      	beq.n	80079e0 <HAL_DMA_IRQHandler+0x18c>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a21      	ldr	r2, [pc, #132]	@ (8007a54 <HAL_DMA_IRQHandler+0x200>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d102      	bne.n	80079da <HAL_DMA_IRQHandler+0x186>
 80079d4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80079d8:	e01b      	b.n	8007a12 <HAL_DMA_IRQHandler+0x1be>
 80079da:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80079de:	e018      	b.n	8007a12 <HAL_DMA_IRQHandler+0x1be>
 80079e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079e4:	e015      	b.n	8007a12 <HAL_DMA_IRQHandler+0x1be>
 80079e6:	2340      	movs	r3, #64	@ 0x40
 80079e8:	e013      	b.n	8007a12 <HAL_DMA_IRQHandler+0x1be>
 80079ea:	2304      	movs	r3, #4
 80079ec:	e011      	b.n	8007a12 <HAL_DMA_IRQHandler+0x1be>
 80079ee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80079f2:	e00e      	b.n	8007a12 <HAL_DMA_IRQHandler+0x1be>
 80079f4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80079f8:	e00b      	b.n	8007a12 <HAL_DMA_IRQHandler+0x1be>
 80079fa:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80079fe:	e008      	b.n	8007a12 <HAL_DMA_IRQHandler+0x1be>
 8007a00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007a04:	e005      	b.n	8007a12 <HAL_DMA_IRQHandler+0x1be>
 8007a06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a0a:	e002      	b.n	8007a12 <HAL_DMA_IRQHandler+0x1be>
 8007a0c:	2340      	movs	r3, #64	@ 0x40
 8007a0e:	e000      	b.n	8007a12 <HAL_DMA_IRQHandler+0x1be>
 8007a10:	2304      	movs	r3, #4
 8007a12:	4a12      	ldr	r2, [pc, #72]	@ (8007a5c <HAL_DMA_IRQHandler+0x208>)
 8007a14:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f000 8136 	beq.w	8007c8c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8007a28:	e130      	b.n	8007c8c <HAL_DMA_IRQHandler+0x438>
 8007a2a:	bf00      	nop
 8007a2c:	40020080 	.word	0x40020080
 8007a30:	40020008 	.word	0x40020008
 8007a34:	4002001c 	.word	0x4002001c
 8007a38:	40020030 	.word	0x40020030
 8007a3c:	40020044 	.word	0x40020044
 8007a40:	40020058 	.word	0x40020058
 8007a44:	4002006c 	.word	0x4002006c
 8007a48:	40020408 	.word	0x40020408
 8007a4c:	4002041c 	.word	0x4002041c
 8007a50:	40020430 	.word	0x40020430
 8007a54:	40020444 	.word	0x40020444
 8007a58:	40020400 	.word	0x40020400
 8007a5c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a64:	2202      	movs	r2, #2
 8007a66:	409a      	lsls	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 80dd 	beq.w	8007c2c <HAL_DMA_IRQHandler+0x3d8>
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	f003 0302 	and.w	r3, r3, #2
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f000 80d7 	beq.w	8007c2c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 0320 	and.w	r3, r3, #32
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10b      	bne.n	8007aa4 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f022 020a 	bic.w	r2, r2, #10
 8007a9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	4b7b      	ldr	r3, [pc, #492]	@ (8007c98 <HAL_DMA_IRQHandler+0x444>)
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d958      	bls.n	8007b62 <HAL_DMA_IRQHandler+0x30e>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a79      	ldr	r2, [pc, #484]	@ (8007c9c <HAL_DMA_IRQHandler+0x448>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d04f      	beq.n	8007b5a <HAL_DMA_IRQHandler+0x306>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a78      	ldr	r2, [pc, #480]	@ (8007ca0 <HAL_DMA_IRQHandler+0x44c>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d048      	beq.n	8007b56 <HAL_DMA_IRQHandler+0x302>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a76      	ldr	r2, [pc, #472]	@ (8007ca4 <HAL_DMA_IRQHandler+0x450>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d040      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x2fc>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a75      	ldr	r2, [pc, #468]	@ (8007ca8 <HAL_DMA_IRQHandler+0x454>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d038      	beq.n	8007b4a <HAL_DMA_IRQHandler+0x2f6>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a73      	ldr	r2, [pc, #460]	@ (8007cac <HAL_DMA_IRQHandler+0x458>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d030      	beq.n	8007b44 <HAL_DMA_IRQHandler+0x2f0>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a72      	ldr	r2, [pc, #456]	@ (8007cb0 <HAL_DMA_IRQHandler+0x45c>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d028      	beq.n	8007b3e <HAL_DMA_IRQHandler+0x2ea>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a69      	ldr	r2, [pc, #420]	@ (8007c98 <HAL_DMA_IRQHandler+0x444>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d020      	beq.n	8007b38 <HAL_DMA_IRQHandler+0x2e4>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a6e      	ldr	r2, [pc, #440]	@ (8007cb4 <HAL_DMA_IRQHandler+0x460>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d019      	beq.n	8007b34 <HAL_DMA_IRQHandler+0x2e0>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a6c      	ldr	r2, [pc, #432]	@ (8007cb8 <HAL_DMA_IRQHandler+0x464>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d012      	beq.n	8007b30 <HAL_DMA_IRQHandler+0x2dc>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a6b      	ldr	r2, [pc, #428]	@ (8007cbc <HAL_DMA_IRQHandler+0x468>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d00a      	beq.n	8007b2a <HAL_DMA_IRQHandler+0x2d6>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a69      	ldr	r2, [pc, #420]	@ (8007cc0 <HAL_DMA_IRQHandler+0x46c>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d102      	bne.n	8007b24 <HAL_DMA_IRQHandler+0x2d0>
 8007b1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007b22:	e01b      	b.n	8007b5c <HAL_DMA_IRQHandler+0x308>
 8007b24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007b28:	e018      	b.n	8007b5c <HAL_DMA_IRQHandler+0x308>
 8007b2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b2e:	e015      	b.n	8007b5c <HAL_DMA_IRQHandler+0x308>
 8007b30:	2320      	movs	r3, #32
 8007b32:	e013      	b.n	8007b5c <HAL_DMA_IRQHandler+0x308>
 8007b34:	2302      	movs	r3, #2
 8007b36:	e011      	b.n	8007b5c <HAL_DMA_IRQHandler+0x308>
 8007b38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b3c:	e00e      	b.n	8007b5c <HAL_DMA_IRQHandler+0x308>
 8007b3e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007b42:	e00b      	b.n	8007b5c <HAL_DMA_IRQHandler+0x308>
 8007b44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007b48:	e008      	b.n	8007b5c <HAL_DMA_IRQHandler+0x308>
 8007b4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007b4e:	e005      	b.n	8007b5c <HAL_DMA_IRQHandler+0x308>
 8007b50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b54:	e002      	b.n	8007b5c <HAL_DMA_IRQHandler+0x308>
 8007b56:	2320      	movs	r3, #32
 8007b58:	e000      	b.n	8007b5c <HAL_DMA_IRQHandler+0x308>
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	4a59      	ldr	r2, [pc, #356]	@ (8007cc4 <HAL_DMA_IRQHandler+0x470>)
 8007b5e:	6053      	str	r3, [r2, #4]
 8007b60:	e057      	b.n	8007c12 <HAL_DMA_IRQHandler+0x3be>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a4d      	ldr	r2, [pc, #308]	@ (8007c9c <HAL_DMA_IRQHandler+0x448>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d04f      	beq.n	8007c0c <HAL_DMA_IRQHandler+0x3b8>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a4b      	ldr	r2, [pc, #300]	@ (8007ca0 <HAL_DMA_IRQHandler+0x44c>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d048      	beq.n	8007c08 <HAL_DMA_IRQHandler+0x3b4>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a4a      	ldr	r2, [pc, #296]	@ (8007ca4 <HAL_DMA_IRQHandler+0x450>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d040      	beq.n	8007c02 <HAL_DMA_IRQHandler+0x3ae>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a48      	ldr	r2, [pc, #288]	@ (8007ca8 <HAL_DMA_IRQHandler+0x454>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d038      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x3a8>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a47      	ldr	r2, [pc, #284]	@ (8007cac <HAL_DMA_IRQHandler+0x458>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d030      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0x3a2>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a45      	ldr	r2, [pc, #276]	@ (8007cb0 <HAL_DMA_IRQHandler+0x45c>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d028      	beq.n	8007bf0 <HAL_DMA_IRQHandler+0x39c>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a3d      	ldr	r2, [pc, #244]	@ (8007c98 <HAL_DMA_IRQHandler+0x444>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d020      	beq.n	8007bea <HAL_DMA_IRQHandler+0x396>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a41      	ldr	r2, [pc, #260]	@ (8007cb4 <HAL_DMA_IRQHandler+0x460>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d019      	beq.n	8007be6 <HAL_DMA_IRQHandler+0x392>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a40      	ldr	r2, [pc, #256]	@ (8007cb8 <HAL_DMA_IRQHandler+0x464>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d012      	beq.n	8007be2 <HAL_DMA_IRQHandler+0x38e>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a3e      	ldr	r2, [pc, #248]	@ (8007cbc <HAL_DMA_IRQHandler+0x468>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d00a      	beq.n	8007bdc <HAL_DMA_IRQHandler+0x388>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a3d      	ldr	r2, [pc, #244]	@ (8007cc0 <HAL_DMA_IRQHandler+0x46c>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d102      	bne.n	8007bd6 <HAL_DMA_IRQHandler+0x382>
 8007bd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007bd4:	e01b      	b.n	8007c0e <HAL_DMA_IRQHandler+0x3ba>
 8007bd6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007bda:	e018      	b.n	8007c0e <HAL_DMA_IRQHandler+0x3ba>
 8007bdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007be0:	e015      	b.n	8007c0e <HAL_DMA_IRQHandler+0x3ba>
 8007be2:	2320      	movs	r3, #32
 8007be4:	e013      	b.n	8007c0e <HAL_DMA_IRQHandler+0x3ba>
 8007be6:	2302      	movs	r3, #2
 8007be8:	e011      	b.n	8007c0e <HAL_DMA_IRQHandler+0x3ba>
 8007bea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007bee:	e00e      	b.n	8007c0e <HAL_DMA_IRQHandler+0x3ba>
 8007bf0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007bf4:	e00b      	b.n	8007c0e <HAL_DMA_IRQHandler+0x3ba>
 8007bf6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007bfa:	e008      	b.n	8007c0e <HAL_DMA_IRQHandler+0x3ba>
 8007bfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007c00:	e005      	b.n	8007c0e <HAL_DMA_IRQHandler+0x3ba>
 8007c02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c06:	e002      	b.n	8007c0e <HAL_DMA_IRQHandler+0x3ba>
 8007c08:	2320      	movs	r3, #32
 8007c0a:	e000      	b.n	8007c0e <HAL_DMA_IRQHandler+0x3ba>
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	4a2e      	ldr	r2, [pc, #184]	@ (8007cc8 <HAL_DMA_IRQHandler+0x474>)
 8007c10:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d034      	beq.n	8007c8c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007c2a:	e02f      	b.n	8007c8c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c30:	2208      	movs	r2, #8
 8007c32:	409a      	lsls	r2, r3
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	4013      	ands	r3, r2
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d028      	beq.n	8007c8e <HAL_DMA_IRQHandler+0x43a>
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	f003 0308 	and.w	r3, r3, #8
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d023      	beq.n	8007c8e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f022 020e 	bic.w	r2, r2, #14
 8007c54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c5e:	2101      	movs	r1, #1
 8007c60:	fa01 f202 	lsl.w	r2, r1, r2
 8007c64:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d004      	beq.n	8007c8e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	4798      	blx	r3
    }
  }
  return;
 8007c8c:	bf00      	nop
 8007c8e:	bf00      	nop
}
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	40020080 	.word	0x40020080
 8007c9c:	40020008 	.word	0x40020008
 8007ca0:	4002001c 	.word	0x4002001c
 8007ca4:	40020030 	.word	0x40020030
 8007ca8:	40020044 	.word	0x40020044
 8007cac:	40020058 	.word	0x40020058
 8007cb0:	4002006c 	.word	0x4002006c
 8007cb4:	40020408 	.word	0x40020408
 8007cb8:	4002041c 	.word	0x4002041c
 8007cbc:	40020430 	.word	0x40020430
 8007cc0:	40020444 	.word	0x40020444
 8007cc4:	40020400 	.word	0x40020400
 8007cc8:	40020000 	.word	0x40020000

08007ccc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
 8007cd8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ce2:	2101      	movs	r1, #1
 8007ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8007ce8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	683a      	ldr	r2, [r7, #0]
 8007cf0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	2b10      	cmp	r3, #16
 8007cf8:	d108      	bne.n	8007d0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007d0a:	e007      	b.n	8007d1c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	60da      	str	r2, [r3, #12]
}
 8007d1c:	bf00      	nop
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bc80      	pop	{r7}
 8007d24:	4770      	bx	lr
	...

08007d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b08b      	sub	sp, #44	@ 0x2c
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007d32:	2300      	movs	r3, #0
 8007d34:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007d36:	2300      	movs	r3, #0
 8007d38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007d3a:	e179      	b.n	8008030 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d40:	fa02 f303 	lsl.w	r3, r2, r3
 8007d44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	69fa      	ldr	r2, [r7, #28]
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007d50:	69ba      	ldr	r2, [r7, #24]
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	f040 8168 	bne.w	800802a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	4a96      	ldr	r2, [pc, #600]	@ (8007fb8 <HAL_GPIO_Init+0x290>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d05e      	beq.n	8007e22 <HAL_GPIO_Init+0xfa>
 8007d64:	4a94      	ldr	r2, [pc, #592]	@ (8007fb8 <HAL_GPIO_Init+0x290>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d875      	bhi.n	8007e56 <HAL_GPIO_Init+0x12e>
 8007d6a:	4a94      	ldr	r2, [pc, #592]	@ (8007fbc <HAL_GPIO_Init+0x294>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d058      	beq.n	8007e22 <HAL_GPIO_Init+0xfa>
 8007d70:	4a92      	ldr	r2, [pc, #584]	@ (8007fbc <HAL_GPIO_Init+0x294>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d86f      	bhi.n	8007e56 <HAL_GPIO_Init+0x12e>
 8007d76:	4a92      	ldr	r2, [pc, #584]	@ (8007fc0 <HAL_GPIO_Init+0x298>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d052      	beq.n	8007e22 <HAL_GPIO_Init+0xfa>
 8007d7c:	4a90      	ldr	r2, [pc, #576]	@ (8007fc0 <HAL_GPIO_Init+0x298>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d869      	bhi.n	8007e56 <HAL_GPIO_Init+0x12e>
 8007d82:	4a90      	ldr	r2, [pc, #576]	@ (8007fc4 <HAL_GPIO_Init+0x29c>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d04c      	beq.n	8007e22 <HAL_GPIO_Init+0xfa>
 8007d88:	4a8e      	ldr	r2, [pc, #568]	@ (8007fc4 <HAL_GPIO_Init+0x29c>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d863      	bhi.n	8007e56 <HAL_GPIO_Init+0x12e>
 8007d8e:	4a8e      	ldr	r2, [pc, #568]	@ (8007fc8 <HAL_GPIO_Init+0x2a0>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d046      	beq.n	8007e22 <HAL_GPIO_Init+0xfa>
 8007d94:	4a8c      	ldr	r2, [pc, #560]	@ (8007fc8 <HAL_GPIO_Init+0x2a0>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d85d      	bhi.n	8007e56 <HAL_GPIO_Init+0x12e>
 8007d9a:	2b12      	cmp	r3, #18
 8007d9c:	d82a      	bhi.n	8007df4 <HAL_GPIO_Init+0xcc>
 8007d9e:	2b12      	cmp	r3, #18
 8007da0:	d859      	bhi.n	8007e56 <HAL_GPIO_Init+0x12e>
 8007da2:	a201      	add	r2, pc, #4	@ (adr r2, 8007da8 <HAL_GPIO_Init+0x80>)
 8007da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da8:	08007e23 	.word	0x08007e23
 8007dac:	08007dfd 	.word	0x08007dfd
 8007db0:	08007e0f 	.word	0x08007e0f
 8007db4:	08007e51 	.word	0x08007e51
 8007db8:	08007e57 	.word	0x08007e57
 8007dbc:	08007e57 	.word	0x08007e57
 8007dc0:	08007e57 	.word	0x08007e57
 8007dc4:	08007e57 	.word	0x08007e57
 8007dc8:	08007e57 	.word	0x08007e57
 8007dcc:	08007e57 	.word	0x08007e57
 8007dd0:	08007e57 	.word	0x08007e57
 8007dd4:	08007e57 	.word	0x08007e57
 8007dd8:	08007e57 	.word	0x08007e57
 8007ddc:	08007e57 	.word	0x08007e57
 8007de0:	08007e57 	.word	0x08007e57
 8007de4:	08007e57 	.word	0x08007e57
 8007de8:	08007e57 	.word	0x08007e57
 8007dec:	08007e05 	.word	0x08007e05
 8007df0:	08007e19 	.word	0x08007e19
 8007df4:	4a75      	ldr	r2, [pc, #468]	@ (8007fcc <HAL_GPIO_Init+0x2a4>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d013      	beq.n	8007e22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007dfa:	e02c      	b.n	8007e56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	623b      	str	r3, [r7, #32]
          break;
 8007e02:	e029      	b.n	8007e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	3304      	adds	r3, #4
 8007e0a:	623b      	str	r3, [r7, #32]
          break;
 8007e0c:	e024      	b.n	8007e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	3308      	adds	r3, #8
 8007e14:	623b      	str	r3, [r7, #32]
          break;
 8007e16:	e01f      	b.n	8007e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	330c      	adds	r3, #12
 8007e1e:	623b      	str	r3, [r7, #32]
          break;
 8007e20:	e01a      	b.n	8007e58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d102      	bne.n	8007e30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007e2a:	2304      	movs	r3, #4
 8007e2c:	623b      	str	r3, [r7, #32]
          break;
 8007e2e:	e013      	b.n	8007e58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d105      	bne.n	8007e44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007e38:	2308      	movs	r3, #8
 8007e3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	69fa      	ldr	r2, [r7, #28]
 8007e40:	611a      	str	r2, [r3, #16]
          break;
 8007e42:	e009      	b.n	8007e58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007e44:	2308      	movs	r3, #8
 8007e46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	69fa      	ldr	r2, [r7, #28]
 8007e4c:	615a      	str	r2, [r3, #20]
          break;
 8007e4e:	e003      	b.n	8007e58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007e50:	2300      	movs	r3, #0
 8007e52:	623b      	str	r3, [r7, #32]
          break;
 8007e54:	e000      	b.n	8007e58 <HAL_GPIO_Init+0x130>
          break;
 8007e56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	2bff      	cmp	r3, #255	@ 0xff
 8007e5c:	d801      	bhi.n	8007e62 <HAL_GPIO_Init+0x13a>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	e001      	b.n	8007e66 <HAL_GPIO_Init+0x13e>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	3304      	adds	r3, #4
 8007e66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	2bff      	cmp	r3, #255	@ 0xff
 8007e6c:	d802      	bhi.n	8007e74 <HAL_GPIO_Init+0x14c>
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	e002      	b.n	8007e7a <HAL_GPIO_Init+0x152>
 8007e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e76:	3b08      	subs	r3, #8
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	210f      	movs	r1, #15
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	fa01 f303 	lsl.w	r3, r1, r3
 8007e88:	43db      	mvns	r3, r3
 8007e8a:	401a      	ands	r2, r3
 8007e8c:	6a39      	ldr	r1, [r7, #32]
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	fa01 f303 	lsl.w	r3, r1, r3
 8007e94:	431a      	orrs	r2, r3
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f000 80c1 	beq.w	800802a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007ea8:	4b49      	ldr	r3, [pc, #292]	@ (8007fd0 <HAL_GPIO_Init+0x2a8>)
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	4a48      	ldr	r2, [pc, #288]	@ (8007fd0 <HAL_GPIO_Init+0x2a8>)
 8007eae:	f043 0301 	orr.w	r3, r3, #1
 8007eb2:	6193      	str	r3, [r2, #24]
 8007eb4:	4b46      	ldr	r3, [pc, #280]	@ (8007fd0 <HAL_GPIO_Init+0x2a8>)
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	f003 0301 	and.w	r3, r3, #1
 8007ebc:	60bb      	str	r3, [r7, #8]
 8007ebe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007ec0:	4a44      	ldr	r2, [pc, #272]	@ (8007fd4 <HAL_GPIO_Init+0x2ac>)
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec4:	089b      	lsrs	r3, r3, #2
 8007ec6:	3302      	adds	r3, #2
 8007ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ecc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed0:	f003 0303 	and.w	r3, r3, #3
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	220f      	movs	r2, #15
 8007ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8007edc:	43db      	mvns	r3, r3
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a3c      	ldr	r2, [pc, #240]	@ (8007fd8 <HAL_GPIO_Init+0x2b0>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d01f      	beq.n	8007f2c <HAL_GPIO_Init+0x204>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a3b      	ldr	r2, [pc, #236]	@ (8007fdc <HAL_GPIO_Init+0x2b4>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d019      	beq.n	8007f28 <HAL_GPIO_Init+0x200>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a3a      	ldr	r2, [pc, #232]	@ (8007fe0 <HAL_GPIO_Init+0x2b8>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d013      	beq.n	8007f24 <HAL_GPIO_Init+0x1fc>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a39      	ldr	r2, [pc, #228]	@ (8007fe4 <HAL_GPIO_Init+0x2bc>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d00d      	beq.n	8007f20 <HAL_GPIO_Init+0x1f8>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a38      	ldr	r2, [pc, #224]	@ (8007fe8 <HAL_GPIO_Init+0x2c0>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d007      	beq.n	8007f1c <HAL_GPIO_Init+0x1f4>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a37      	ldr	r2, [pc, #220]	@ (8007fec <HAL_GPIO_Init+0x2c4>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d101      	bne.n	8007f18 <HAL_GPIO_Init+0x1f0>
 8007f14:	2305      	movs	r3, #5
 8007f16:	e00a      	b.n	8007f2e <HAL_GPIO_Init+0x206>
 8007f18:	2306      	movs	r3, #6
 8007f1a:	e008      	b.n	8007f2e <HAL_GPIO_Init+0x206>
 8007f1c:	2304      	movs	r3, #4
 8007f1e:	e006      	b.n	8007f2e <HAL_GPIO_Init+0x206>
 8007f20:	2303      	movs	r3, #3
 8007f22:	e004      	b.n	8007f2e <HAL_GPIO_Init+0x206>
 8007f24:	2302      	movs	r3, #2
 8007f26:	e002      	b.n	8007f2e <HAL_GPIO_Init+0x206>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e000      	b.n	8007f2e <HAL_GPIO_Init+0x206>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f30:	f002 0203 	and.w	r2, r2, #3
 8007f34:	0092      	lsls	r2, r2, #2
 8007f36:	4093      	lsls	r3, r2
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007f3e:	4925      	ldr	r1, [pc, #148]	@ (8007fd4 <HAL_GPIO_Init+0x2ac>)
 8007f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f42:	089b      	lsrs	r3, r3, #2
 8007f44:	3302      	adds	r3, #2
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d006      	beq.n	8007f66 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007f58:	4b25      	ldr	r3, [pc, #148]	@ (8007ff0 <HAL_GPIO_Init+0x2c8>)
 8007f5a:	689a      	ldr	r2, [r3, #8]
 8007f5c:	4924      	ldr	r1, [pc, #144]	@ (8007ff0 <HAL_GPIO_Init+0x2c8>)
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	608b      	str	r3, [r1, #8]
 8007f64:	e006      	b.n	8007f74 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007f66:	4b22      	ldr	r3, [pc, #136]	@ (8007ff0 <HAL_GPIO_Init+0x2c8>)
 8007f68:	689a      	ldr	r2, [r3, #8]
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	43db      	mvns	r3, r3
 8007f6e:	4920      	ldr	r1, [pc, #128]	@ (8007ff0 <HAL_GPIO_Init+0x2c8>)
 8007f70:	4013      	ands	r3, r2
 8007f72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d006      	beq.n	8007f8e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007f80:	4b1b      	ldr	r3, [pc, #108]	@ (8007ff0 <HAL_GPIO_Init+0x2c8>)
 8007f82:	68da      	ldr	r2, [r3, #12]
 8007f84:	491a      	ldr	r1, [pc, #104]	@ (8007ff0 <HAL_GPIO_Init+0x2c8>)
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	60cb      	str	r3, [r1, #12]
 8007f8c:	e006      	b.n	8007f9c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007f8e:	4b18      	ldr	r3, [pc, #96]	@ (8007ff0 <HAL_GPIO_Init+0x2c8>)
 8007f90:	68da      	ldr	r2, [r3, #12]
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	43db      	mvns	r3, r3
 8007f96:	4916      	ldr	r1, [pc, #88]	@ (8007ff0 <HAL_GPIO_Init+0x2c8>)
 8007f98:	4013      	ands	r3, r2
 8007f9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d025      	beq.n	8007ff4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007fa8:	4b11      	ldr	r3, [pc, #68]	@ (8007ff0 <HAL_GPIO_Init+0x2c8>)
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	4910      	ldr	r1, [pc, #64]	@ (8007ff0 <HAL_GPIO_Init+0x2c8>)
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	604b      	str	r3, [r1, #4]
 8007fb4:	e025      	b.n	8008002 <HAL_GPIO_Init+0x2da>
 8007fb6:	bf00      	nop
 8007fb8:	10320000 	.word	0x10320000
 8007fbc:	10310000 	.word	0x10310000
 8007fc0:	10220000 	.word	0x10220000
 8007fc4:	10210000 	.word	0x10210000
 8007fc8:	10120000 	.word	0x10120000
 8007fcc:	10110000 	.word	0x10110000
 8007fd0:	40021000 	.word	0x40021000
 8007fd4:	40010000 	.word	0x40010000
 8007fd8:	40010800 	.word	0x40010800
 8007fdc:	40010c00 	.word	0x40010c00
 8007fe0:	40011000 	.word	0x40011000
 8007fe4:	40011400 	.word	0x40011400
 8007fe8:	40011800 	.word	0x40011800
 8007fec:	40011c00 	.word	0x40011c00
 8007ff0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007ff4:	4b15      	ldr	r3, [pc, #84]	@ (800804c <HAL_GPIO_Init+0x324>)
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	43db      	mvns	r3, r3
 8007ffc:	4913      	ldr	r1, [pc, #76]	@ (800804c <HAL_GPIO_Init+0x324>)
 8007ffe:	4013      	ands	r3, r2
 8008000:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d006      	beq.n	800801c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800800e:	4b0f      	ldr	r3, [pc, #60]	@ (800804c <HAL_GPIO_Init+0x324>)
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	490e      	ldr	r1, [pc, #56]	@ (800804c <HAL_GPIO_Init+0x324>)
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	4313      	orrs	r3, r2
 8008018:	600b      	str	r3, [r1, #0]
 800801a:	e006      	b.n	800802a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800801c:	4b0b      	ldr	r3, [pc, #44]	@ (800804c <HAL_GPIO_Init+0x324>)
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	43db      	mvns	r3, r3
 8008024:	4909      	ldr	r1, [pc, #36]	@ (800804c <HAL_GPIO_Init+0x324>)
 8008026:	4013      	ands	r3, r2
 8008028:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800802a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802c:	3301      	adds	r3, #1
 800802e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008036:	fa22 f303 	lsr.w	r3, r2, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	f47f ae7e 	bne.w	8007d3c <HAL_GPIO_Init+0x14>
  }
}
 8008040:	bf00      	nop
 8008042:	bf00      	nop
 8008044:	372c      	adds	r7, #44	@ 0x2c
 8008046:	46bd      	mov	sp, r7
 8008048:	bc80      	pop	{r7}
 800804a:	4770      	bx	lr
 800804c:	40010400 	.word	0x40010400

08008050 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	460b      	mov	r3, r1
 800805a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689a      	ldr	r2, [r3, #8]
 8008060:	887b      	ldrh	r3, [r7, #2]
 8008062:	4013      	ands	r3, r2
 8008064:	2b00      	cmp	r3, #0
 8008066:	d002      	beq.n	800806e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008068:	2301      	movs	r3, #1
 800806a:	73fb      	strb	r3, [r7, #15]
 800806c:	e001      	b.n	8008072 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800806e:	2300      	movs	r3, #0
 8008070:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008072:	7bfb      	ldrb	r3, [r7, #15]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3714      	adds	r7, #20
 8008078:	46bd      	mov	sp, r7
 800807a:	bc80      	pop	{r7}
 800807c:	4770      	bx	lr

0800807e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800807e:	b480      	push	{r7}
 8008080:	b083      	sub	sp, #12
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	460b      	mov	r3, r1
 8008088:	807b      	strh	r3, [r7, #2]
 800808a:	4613      	mov	r3, r2
 800808c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800808e:	787b      	ldrb	r3, [r7, #1]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d003      	beq.n	800809c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008094:	887a      	ldrh	r2, [r7, #2]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800809a:	e003      	b.n	80080a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800809c:	887b      	ldrh	r3, [r7, #2]
 800809e:	041a      	lsls	r2, r3, #16
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	611a      	str	r2, [r3, #16]
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bc80      	pop	{r7}
 80080ac:	4770      	bx	lr

080080ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80080ae:	b480      	push	{r7}
 80080b0:	b085      	sub	sp, #20
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
 80080b6:	460b      	mov	r3, r1
 80080b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80080c0:	887a      	ldrh	r2, [r7, #2]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	4013      	ands	r3, r2
 80080c6:	041a      	lsls	r2, r3, #16
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	43d9      	mvns	r1, r3
 80080cc:	887b      	ldrh	r3, [r7, #2]
 80080ce:	400b      	ands	r3, r1
 80080d0:	431a      	orrs	r2, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	611a      	str	r2, [r3, #16]
}
 80080d6:	bf00      	nop
 80080d8:	3714      	adds	r7, #20
 80080da:	46bd      	mov	sp, r7
 80080dc:	bc80      	pop	{r7}
 80080de:	4770      	bx	lr

080080e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d101      	bne.n	80080f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e12b      	b.n	800834a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d106      	bne.n	800810c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f7fd f992 	bl	8005430 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2224      	movs	r2, #36	@ 0x24
 8008110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f022 0201 	bic.w	r2, r2, #1
 8008122:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008132:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008142:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008144:	f002 f9d8 	bl	800a4f8 <HAL_RCC_GetPCLK1Freq>
 8008148:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	4a81      	ldr	r2, [pc, #516]	@ (8008354 <HAL_I2C_Init+0x274>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d807      	bhi.n	8008164 <HAL_I2C_Init+0x84>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	4a80      	ldr	r2, [pc, #512]	@ (8008358 <HAL_I2C_Init+0x278>)
 8008158:	4293      	cmp	r3, r2
 800815a:	bf94      	ite	ls
 800815c:	2301      	movls	r3, #1
 800815e:	2300      	movhi	r3, #0
 8008160:	b2db      	uxtb	r3, r3
 8008162:	e006      	b.n	8008172 <HAL_I2C_Init+0x92>
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	4a7d      	ldr	r2, [pc, #500]	@ (800835c <HAL_I2C_Init+0x27c>)
 8008168:	4293      	cmp	r3, r2
 800816a:	bf94      	ite	ls
 800816c:	2301      	movls	r3, #1
 800816e:	2300      	movhi	r3, #0
 8008170:	b2db      	uxtb	r3, r3
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	e0e7      	b.n	800834a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	4a78      	ldr	r2, [pc, #480]	@ (8008360 <HAL_I2C_Init+0x280>)
 800817e:	fba2 2303 	umull	r2, r3, r2, r3
 8008182:	0c9b      	lsrs	r3, r3, #18
 8008184:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	430a      	orrs	r2, r1
 8008198:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	6a1b      	ldr	r3, [r3, #32]
 80081a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	4a6a      	ldr	r2, [pc, #424]	@ (8008354 <HAL_I2C_Init+0x274>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d802      	bhi.n	80081b4 <HAL_I2C_Init+0xd4>
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	3301      	adds	r3, #1
 80081b2:	e009      	b.n	80081c8 <HAL_I2C_Init+0xe8>
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80081ba:	fb02 f303 	mul.w	r3, r2, r3
 80081be:	4a69      	ldr	r2, [pc, #420]	@ (8008364 <HAL_I2C_Init+0x284>)
 80081c0:	fba2 2303 	umull	r2, r3, r2, r3
 80081c4:	099b      	lsrs	r3, r3, #6
 80081c6:	3301      	adds	r3, #1
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	6812      	ldr	r2, [r2, #0]
 80081cc:	430b      	orrs	r3, r1
 80081ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	69db      	ldr	r3, [r3, #28]
 80081d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80081da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	495c      	ldr	r1, [pc, #368]	@ (8008354 <HAL_I2C_Init+0x274>)
 80081e4:	428b      	cmp	r3, r1
 80081e6:	d819      	bhi.n	800821c <HAL_I2C_Init+0x13c>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	1e59      	subs	r1, r3, #1
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	005b      	lsls	r3, r3, #1
 80081f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80081f6:	1c59      	adds	r1, r3, #1
 80081f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80081fc:	400b      	ands	r3, r1
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00a      	beq.n	8008218 <HAL_I2C_Init+0x138>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	1e59      	subs	r1, r3, #1
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	005b      	lsls	r3, r3, #1
 800820c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008210:	3301      	adds	r3, #1
 8008212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008216:	e051      	b.n	80082bc <HAL_I2C_Init+0x1dc>
 8008218:	2304      	movs	r3, #4
 800821a:	e04f      	b.n	80082bc <HAL_I2C_Init+0x1dc>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d111      	bne.n	8008248 <HAL_I2C_Init+0x168>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	1e58      	subs	r0, r3, #1
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6859      	ldr	r1, [r3, #4]
 800822c:	460b      	mov	r3, r1
 800822e:	005b      	lsls	r3, r3, #1
 8008230:	440b      	add	r3, r1
 8008232:	fbb0 f3f3 	udiv	r3, r0, r3
 8008236:	3301      	adds	r3, #1
 8008238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800823c:	2b00      	cmp	r3, #0
 800823e:	bf0c      	ite	eq
 8008240:	2301      	moveq	r3, #1
 8008242:	2300      	movne	r3, #0
 8008244:	b2db      	uxtb	r3, r3
 8008246:	e012      	b.n	800826e <HAL_I2C_Init+0x18e>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	1e58      	subs	r0, r3, #1
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6859      	ldr	r1, [r3, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	440b      	add	r3, r1
 8008256:	0099      	lsls	r1, r3, #2
 8008258:	440b      	add	r3, r1
 800825a:	fbb0 f3f3 	udiv	r3, r0, r3
 800825e:	3301      	adds	r3, #1
 8008260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008264:	2b00      	cmp	r3, #0
 8008266:	bf0c      	ite	eq
 8008268:	2301      	moveq	r3, #1
 800826a:	2300      	movne	r3, #0
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b00      	cmp	r3, #0
 8008270:	d001      	beq.n	8008276 <HAL_I2C_Init+0x196>
 8008272:	2301      	movs	r3, #1
 8008274:	e022      	b.n	80082bc <HAL_I2C_Init+0x1dc>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10e      	bne.n	800829c <HAL_I2C_Init+0x1bc>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	1e58      	subs	r0, r3, #1
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6859      	ldr	r1, [r3, #4]
 8008286:	460b      	mov	r3, r1
 8008288:	005b      	lsls	r3, r3, #1
 800828a:	440b      	add	r3, r1
 800828c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008290:	3301      	adds	r3, #1
 8008292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008296:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800829a:	e00f      	b.n	80082bc <HAL_I2C_Init+0x1dc>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	1e58      	subs	r0, r3, #1
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6859      	ldr	r1, [r3, #4]
 80082a4:	460b      	mov	r3, r1
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	440b      	add	r3, r1
 80082aa:	0099      	lsls	r1, r3, #2
 80082ac:	440b      	add	r3, r1
 80082ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80082b2:	3301      	adds	r3, #1
 80082b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80082bc:	6879      	ldr	r1, [r7, #4]
 80082be:	6809      	ldr	r1, [r1, #0]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	69da      	ldr	r2, [r3, #28]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a1b      	ldr	r3, [r3, #32]
 80082d6:	431a      	orrs	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	430a      	orrs	r2, r1
 80082de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80082ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	6911      	ldr	r1, [r2, #16]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	68d2      	ldr	r2, [r2, #12]
 80082f6:	4311      	orrs	r1, r2
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	6812      	ldr	r2, [r2, #0]
 80082fc:	430b      	orrs	r3, r1
 80082fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	695a      	ldr	r2, [r3, #20]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	699b      	ldr	r3, [r3, #24]
 8008312:	431a      	orrs	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	430a      	orrs	r2, r1
 800831a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f042 0201 	orr.w	r2, r2, #1
 800832a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2220      	movs	r2, #32
 8008336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	000186a0 	.word	0x000186a0
 8008358:	001e847f 	.word	0x001e847f
 800835c:	003d08ff 	.word	0x003d08ff
 8008360:	431bde83 	.word	0x431bde83
 8008364:	10624dd3 	.word	0x10624dd3

08008368 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b088      	sub	sp, #32
 800836c:	af02      	add	r7, sp, #8
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	607a      	str	r2, [r7, #4]
 8008372:	461a      	mov	r2, r3
 8008374:	460b      	mov	r3, r1
 8008376:	817b      	strh	r3, [r7, #10]
 8008378:	4613      	mov	r3, r2
 800837a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800837c:	f7fe ff42 	bl	8007204 <HAL_GetTick>
 8008380:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b20      	cmp	r3, #32
 800838c:	f040 80e0 	bne.w	8008550 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	2319      	movs	r3, #25
 8008396:	2201      	movs	r2, #1
 8008398:	4970      	ldr	r1, [pc, #448]	@ (800855c <HAL_I2C_Master_Transmit+0x1f4>)
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f001 faac 	bl	80098f8 <I2C_WaitOnFlagUntilTimeout>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d001      	beq.n	80083aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80083a6:	2302      	movs	r3, #2
 80083a8:	e0d3      	b.n	8008552 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d101      	bne.n	80083b8 <HAL_I2C_Master_Transmit+0x50>
 80083b4:	2302      	movs	r3, #2
 80083b6:	e0cc      	b.n	8008552 <HAL_I2C_Master_Transmit+0x1ea>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d007      	beq.n	80083de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f042 0201 	orr.w	r2, r2, #1
 80083dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80083ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2221      	movs	r2, #33	@ 0x21
 80083f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2210      	movs	r2, #16
 80083fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	893a      	ldrh	r2, [r7, #8]
 800840e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008414:	b29a      	uxth	r2, r3
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	4a50      	ldr	r2, [pc, #320]	@ (8008560 <HAL_I2C_Master_Transmit+0x1f8>)
 800841e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008420:	8979      	ldrh	r1, [r7, #10]
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	6a3a      	ldr	r2, [r7, #32]
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f000 ff98 	bl	800935c <I2C_MasterRequestWrite>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e08d      	b.n	8008552 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008436:	2300      	movs	r3, #0
 8008438:	613b      	str	r3, [r7, #16]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	695b      	ldr	r3, [r3, #20]
 8008440:	613b      	str	r3, [r7, #16]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	613b      	str	r3, [r7, #16]
 800844a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800844c:	e066      	b.n	800851c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	6a39      	ldr	r1, [r7, #32]
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f001 fb6a 	bl	8009b2c <I2C_WaitOnTXEFlagUntilTimeout>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00d      	beq.n	800847a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008462:	2b04      	cmp	r3, #4
 8008464:	d107      	bne.n	8008476 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008474:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e06b      	b.n	8008552 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800847e:	781a      	ldrb	r2, [r3, #0]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800848a:	1c5a      	adds	r2, r3, #1
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008494:	b29b      	uxth	r3, r3
 8008496:	3b01      	subs	r3, #1
 8008498:	b29a      	uxth	r2, r3
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084a2:	3b01      	subs	r3, #1
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	695b      	ldr	r3, [r3, #20]
 80084b0:	f003 0304 	and.w	r3, r3, #4
 80084b4:	2b04      	cmp	r3, #4
 80084b6:	d11b      	bne.n	80084f0 <HAL_I2C_Master_Transmit+0x188>
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d017      	beq.n	80084f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c4:	781a      	ldrb	r2, [r3, #0]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084d0:	1c5a      	adds	r2, r3, #1
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084da:	b29b      	uxth	r3, r3
 80084dc:	3b01      	subs	r3, #1
 80084de:	b29a      	uxth	r2, r3
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084e8:	3b01      	subs	r3, #1
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084f0:	697a      	ldr	r2, [r7, #20]
 80084f2:	6a39      	ldr	r1, [r7, #32]
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f001 fb61 	bl	8009bbc <I2C_WaitOnBTFFlagUntilTimeout>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00d      	beq.n	800851c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008504:	2b04      	cmp	r3, #4
 8008506:	d107      	bne.n	8008518 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008516:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e01a      	b.n	8008552 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008520:	2b00      	cmp	r3, #0
 8008522:	d194      	bne.n	800844e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2220      	movs	r2, #32
 8008538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800854c:	2300      	movs	r3, #0
 800854e:	e000      	b.n	8008552 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008550:	2302      	movs	r3, #2
  }
}
 8008552:	4618      	mov	r0, r3
 8008554:	3718      	adds	r7, #24
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	00100002 	.word	0x00100002
 8008560:	ffff0000 	.word	0xffff0000

08008564 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b08c      	sub	sp, #48	@ 0x30
 8008568:	af02      	add	r7, sp, #8
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	607a      	str	r2, [r7, #4]
 800856e:	461a      	mov	r2, r3
 8008570:	460b      	mov	r3, r1
 8008572:	817b      	strh	r3, [r7, #10]
 8008574:	4613      	mov	r3, r2
 8008576:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8008578:	2300      	movs	r3, #0
 800857a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800857c:	f7fe fe42 	bl	8007204 <HAL_GetTick>
 8008580:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008588:	b2db      	uxtb	r3, r3
 800858a:	2b20      	cmp	r3, #32
 800858c:	f040 824b 	bne.w	8008a26 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	2319      	movs	r3, #25
 8008596:	2201      	movs	r2, #1
 8008598:	497f      	ldr	r1, [pc, #508]	@ (8008798 <HAL_I2C_Master_Receive+0x234>)
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f001 f9ac 	bl	80098f8 <I2C_WaitOnFlagUntilTimeout>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d001      	beq.n	80085aa <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80085a6:	2302      	movs	r3, #2
 80085a8:	e23e      	b.n	8008a28 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d101      	bne.n	80085b8 <HAL_I2C_Master_Receive+0x54>
 80085b4:	2302      	movs	r3, #2
 80085b6:	e237      	b.n	8008a28 <HAL_I2C_Master_Receive+0x4c4>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d007      	beq.n	80085de <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f042 0201 	orr.w	r2, r2, #1
 80085dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80085ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2222      	movs	r2, #34	@ 0x22
 80085f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2210      	movs	r2, #16
 80085fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	893a      	ldrh	r2, [r7, #8]
 800860e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008614:	b29a      	uxth	r2, r3
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	4a5f      	ldr	r2, [pc, #380]	@ (800879c <HAL_I2C_Master_Receive+0x238>)
 800861e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008620:	8979      	ldrh	r1, [r7, #10]
 8008622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	f000 ff1a 	bl	8009460 <I2C_MasterRequestRead>
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d001      	beq.n	8008636 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e1f8      	b.n	8008a28 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800863a:	2b00      	cmp	r3, #0
 800863c:	d113      	bne.n	8008666 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800863e:	2300      	movs	r3, #0
 8008640:	61fb      	str	r3, [r7, #28]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	695b      	ldr	r3, [r3, #20]
 8008648:	61fb      	str	r3, [r7, #28]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	61fb      	str	r3, [r7, #28]
 8008652:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	e1cc      	b.n	8008a00 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800866a:	2b01      	cmp	r3, #1
 800866c:	d11e      	bne.n	80086ac <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800867c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800867e:	b672      	cpsid	i
}
 8008680:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008682:	2300      	movs	r3, #0
 8008684:	61bb      	str	r3, [r7, #24]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	695b      	ldr	r3, [r3, #20]
 800868c:	61bb      	str	r3, [r7, #24]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	699b      	ldr	r3, [r3, #24]
 8008694:	61bb      	str	r3, [r7, #24]
 8008696:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80086a8:	b662      	cpsie	i
}
 80086aa:	e035      	b.n	8008718 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d11e      	bne.n	80086f2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80086c4:	b672      	cpsid	i
}
 80086c6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086c8:	2300      	movs	r3, #0
 80086ca:	617b      	str	r3, [r7, #20]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	695b      	ldr	r3, [r3, #20]
 80086d2:	617b      	str	r3, [r7, #20]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	617b      	str	r3, [r7, #20]
 80086dc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80086ee:	b662      	cpsie	i
}
 80086f0:	e012      	b.n	8008718 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008700:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008702:	2300      	movs	r3, #0
 8008704:	613b      	str	r3, [r7, #16]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	695b      	ldr	r3, [r3, #20]
 800870c:	613b      	str	r3, [r7, #16]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	613b      	str	r3, [r7, #16]
 8008716:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8008718:	e172      	b.n	8008a00 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800871e:	2b03      	cmp	r3, #3
 8008720:	f200 811f 	bhi.w	8008962 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008728:	2b01      	cmp	r3, #1
 800872a:	d123      	bne.n	8008774 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800872c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800872e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f001 fa8b 	bl	8009c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d001      	beq.n	8008740 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	e173      	b.n	8008a28 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	691a      	ldr	r2, [r3, #16]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800874a:	b2d2      	uxtb	r2, r2
 800874c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008752:	1c5a      	adds	r2, r3, #1
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800875c:	3b01      	subs	r3, #1
 800875e:	b29a      	uxth	r2, r3
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008768:	b29b      	uxth	r3, r3
 800876a:	3b01      	subs	r3, #1
 800876c:	b29a      	uxth	r2, r3
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008772:	e145      	b.n	8008a00 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008778:	2b02      	cmp	r3, #2
 800877a:	d152      	bne.n	8008822 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800877c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008782:	2200      	movs	r2, #0
 8008784:	4906      	ldr	r1, [pc, #24]	@ (80087a0 <HAL_I2C_Master_Receive+0x23c>)
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f001 f8b6 	bl	80098f8 <I2C_WaitOnFlagUntilTimeout>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d008      	beq.n	80087a4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e148      	b.n	8008a28 <HAL_I2C_Master_Receive+0x4c4>
 8008796:	bf00      	nop
 8008798:	00100002 	.word	0x00100002
 800879c:	ffff0000 	.word	0xffff0000
 80087a0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80087a4:	b672      	cpsid	i
}
 80087a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80087b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	691a      	ldr	r2, [r3, #16]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087c2:	b2d2      	uxtb	r2, r2
 80087c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ca:	1c5a      	adds	r2, r3, #1
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087d4:	3b01      	subs	r3, #1
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	3b01      	subs	r3, #1
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80087ea:	b662      	cpsie	i
}
 80087ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	691a      	ldr	r2, [r3, #16]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f8:	b2d2      	uxtb	r2, r2
 80087fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008800:	1c5a      	adds	r2, r3, #1
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800880a:	3b01      	subs	r3, #1
 800880c:	b29a      	uxth	r2, r3
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008816:	b29b      	uxth	r3, r3
 8008818:	3b01      	subs	r3, #1
 800881a:	b29a      	uxth	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008820:	e0ee      	b.n	8008a00 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008828:	2200      	movs	r2, #0
 800882a:	4981      	ldr	r1, [pc, #516]	@ (8008a30 <HAL_I2C_Master_Receive+0x4cc>)
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f001 f863 	bl	80098f8 <I2C_WaitOnFlagUntilTimeout>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d001      	beq.n	800883c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e0f5      	b.n	8008a28 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800884a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800884c:	b672      	cpsid	i
}
 800884e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	691a      	ldr	r2, [r3, #16]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800885a:	b2d2      	uxtb	r2, r2
 800885c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008862:	1c5a      	adds	r2, r3, #1
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800886c:	3b01      	subs	r3, #1
 800886e:	b29a      	uxth	r2, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008878:	b29b      	uxth	r3, r3
 800887a:	3b01      	subs	r3, #1
 800887c:	b29a      	uxth	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008882:	4b6c      	ldr	r3, [pc, #432]	@ (8008a34 <HAL_I2C_Master_Receive+0x4d0>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	08db      	lsrs	r3, r3, #3
 8008888:	4a6b      	ldr	r2, [pc, #428]	@ (8008a38 <HAL_I2C_Master_Receive+0x4d4>)
 800888a:	fba2 2303 	umull	r2, r3, r2, r3
 800888e:	0a1a      	lsrs	r2, r3, #8
 8008890:	4613      	mov	r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4413      	add	r3, r2
 8008896:	00da      	lsls	r2, r3, #3
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800889c:	6a3b      	ldr	r3, [r7, #32]
 800889e:	3b01      	subs	r3, #1
 80088a0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80088a2:	6a3b      	ldr	r3, [r7, #32]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d118      	bne.n	80088da <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2220      	movs	r2, #32
 80088b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c2:	f043 0220 	orr.w	r2, r3, #32
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80088ca:	b662      	cpsie	i
}
 80088cc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e0a6      	b.n	8008a28 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	695b      	ldr	r3, [r3, #20]
 80088e0:	f003 0304 	and.w	r3, r3, #4
 80088e4:	2b04      	cmp	r3, #4
 80088e6:	d1d9      	bne.n	800889c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	691a      	ldr	r2, [r3, #16]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008902:	b2d2      	uxtb	r2, r2
 8008904:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800890a:	1c5a      	adds	r2, r3, #1
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008914:	3b01      	subs	r3, #1
 8008916:	b29a      	uxth	r2, r3
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008920:	b29b      	uxth	r3, r3
 8008922:	3b01      	subs	r3, #1
 8008924:	b29a      	uxth	r2, r3
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800892a:	b662      	cpsie	i
}
 800892c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	691a      	ldr	r2, [r3, #16]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008938:	b2d2      	uxtb	r2, r2
 800893a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008940:	1c5a      	adds	r2, r3, #1
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800894a:	3b01      	subs	r3, #1
 800894c:	b29a      	uxth	r2, r3
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008956:	b29b      	uxth	r3, r3
 8008958:	3b01      	subs	r3, #1
 800895a:	b29a      	uxth	r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008960:	e04e      	b.n	8008a00 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008964:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f001 f970 	bl	8009c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e058      	b.n	8008a28 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	691a      	ldr	r2, [r3, #16]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008980:	b2d2      	uxtb	r2, r2
 8008982:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008988:	1c5a      	adds	r2, r3, #1
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008992:	3b01      	subs	r3, #1
 8008994:	b29a      	uxth	r2, r3
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800899e:	b29b      	uxth	r3, r3
 80089a0:	3b01      	subs	r3, #1
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	695b      	ldr	r3, [r3, #20]
 80089ae:	f003 0304 	and.w	r3, r3, #4
 80089b2:	2b04      	cmp	r3, #4
 80089b4:	d124      	bne.n	8008a00 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089ba:	2b03      	cmp	r3, #3
 80089bc:	d107      	bne.n	80089ce <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089cc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	691a      	ldr	r2, [r3, #16]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d8:	b2d2      	uxtb	r2, r2
 80089da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089e0:	1c5a      	adds	r2, r3, #1
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089ea:	3b01      	subs	r3, #1
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	3b01      	subs	r3, #1
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f47f ae88 	bne.w	800871a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2220      	movs	r2, #32
 8008a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008a22:	2300      	movs	r3, #0
 8008a24:	e000      	b.n	8008a28 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8008a26:	2302      	movs	r3, #2
  }
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3728      	adds	r7, #40	@ 0x28
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	00010004 	.word	0x00010004
 8008a34:	20000018 	.word	0x20000018
 8008a38:	14f8b589 	.word	0x14f8b589

08008a3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b088      	sub	sp, #32
 8008a40:	af02      	add	r7, sp, #8
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	4608      	mov	r0, r1
 8008a46:	4611      	mov	r1, r2
 8008a48:	461a      	mov	r2, r3
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	817b      	strh	r3, [r7, #10]
 8008a4e:	460b      	mov	r3, r1
 8008a50:	813b      	strh	r3, [r7, #8]
 8008a52:	4613      	mov	r3, r2
 8008a54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008a56:	f7fe fbd5 	bl	8007204 <HAL_GetTick>
 8008a5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	2b20      	cmp	r3, #32
 8008a66:	f040 80d9 	bne.w	8008c1c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	2319      	movs	r3, #25
 8008a70:	2201      	movs	r2, #1
 8008a72:	496d      	ldr	r1, [pc, #436]	@ (8008c28 <HAL_I2C_Mem_Write+0x1ec>)
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f000 ff3f 	bl	80098f8 <I2C_WaitOnFlagUntilTimeout>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d001      	beq.n	8008a84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008a80:	2302      	movs	r3, #2
 8008a82:	e0cc      	b.n	8008c1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d101      	bne.n	8008a92 <HAL_I2C_Mem_Write+0x56>
 8008a8e:	2302      	movs	r3, #2
 8008a90:	e0c5      	b.n	8008c1e <HAL_I2C_Mem_Write+0x1e2>
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 0301 	and.w	r3, r3, #1
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d007      	beq.n	8008ab8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f042 0201 	orr.w	r2, r2, #1
 8008ab6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008ac6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2221      	movs	r2, #33	@ 0x21
 8008acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2240      	movs	r2, #64	@ 0x40
 8008ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6a3a      	ldr	r2, [r7, #32]
 8008ae2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008ae8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	4a4d      	ldr	r2, [pc, #308]	@ (8008c2c <HAL_I2C_Mem_Write+0x1f0>)
 8008af8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008afa:	88f8      	ldrh	r0, [r7, #6]
 8008afc:	893a      	ldrh	r2, [r7, #8]
 8008afe:	8979      	ldrh	r1, [r7, #10]
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	9301      	str	r3, [sp, #4]
 8008b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b06:	9300      	str	r3, [sp, #0]
 8008b08:	4603      	mov	r3, r0
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f000 fd76 	bl	80095fc <I2C_RequestMemoryWrite>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d052      	beq.n	8008bbc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e081      	b.n	8008c1e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b1a:	697a      	ldr	r2, [r7, #20]
 8008b1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f001 f804 	bl	8009b2c <I2C_WaitOnTXEFlagUntilTimeout>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00d      	beq.n	8008b46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b2e:	2b04      	cmp	r3, #4
 8008b30:	d107      	bne.n	8008b42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	e06b      	b.n	8008c1e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b4a:	781a      	ldrb	r2, [r3, #0]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b56:	1c5a      	adds	r2, r3, #1
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b60:	3b01      	subs	r3, #1
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	695b      	ldr	r3, [r3, #20]
 8008b7c:	f003 0304 	and.w	r3, r3, #4
 8008b80:	2b04      	cmp	r3, #4
 8008b82:	d11b      	bne.n	8008bbc <HAL_I2C_Mem_Write+0x180>
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d017      	beq.n	8008bbc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b90:	781a      	ldrb	r2, [r3, #0]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b9c:	1c5a      	adds	r2, r3, #1
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	b29a      	uxth	r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1aa      	bne.n	8008b1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bc4:	697a      	ldr	r2, [r7, #20]
 8008bc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f000 fff7 	bl	8009bbc <I2C_WaitOnBTFFlagUntilTimeout>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00d      	beq.n	8008bf0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd8:	2b04      	cmp	r3, #4
 8008bda:	d107      	bne.n	8008bec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008bea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e016      	b.n	8008c1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008bfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2220      	movs	r2, #32
 8008c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	e000      	b.n	8008c1e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008c1c:	2302      	movs	r3, #2
  }
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3718      	adds	r7, #24
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	00100002 	.word	0x00100002
 8008c2c:	ffff0000 	.word	0xffff0000

08008c30 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b08c      	sub	sp, #48	@ 0x30
 8008c34:	af02      	add	r7, sp, #8
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	4608      	mov	r0, r1
 8008c3a:	4611      	mov	r1, r2
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	4603      	mov	r3, r0
 8008c40:	817b      	strh	r3, [r7, #10]
 8008c42:	460b      	mov	r3, r1
 8008c44:	813b      	strh	r3, [r7, #8]
 8008c46:	4613      	mov	r3, r2
 8008c48:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008c4e:	f7fe fad9 	bl	8007204 <HAL_GetTick>
 8008c52:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	2b20      	cmp	r3, #32
 8008c5e:	f040 8244 	bne.w	80090ea <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c64:	9300      	str	r3, [sp, #0]
 8008c66:	2319      	movs	r3, #25
 8008c68:	2201      	movs	r2, #1
 8008c6a:	4982      	ldr	r1, [pc, #520]	@ (8008e74 <HAL_I2C_Mem_Read+0x244>)
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f000 fe43 	bl	80098f8 <I2C_WaitOnFlagUntilTimeout>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d001      	beq.n	8008c7c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8008c78:	2302      	movs	r3, #2
 8008c7a:	e237      	b.n	80090ec <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d101      	bne.n	8008c8a <HAL_I2C_Mem_Read+0x5a>
 8008c86:	2302      	movs	r3, #2
 8008c88:	e230      	b.n	80090ec <HAL_I2C_Mem_Read+0x4bc>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 0301 	and.w	r3, r3, #1
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d007      	beq.n	8008cb0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f042 0201 	orr.w	r2, r2, #1
 8008cae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008cbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2222      	movs	r2, #34	@ 0x22
 8008cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2240      	movs	r2, #64	@ 0x40
 8008ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008ce0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	4a62      	ldr	r2, [pc, #392]	@ (8008e78 <HAL_I2C_Mem_Read+0x248>)
 8008cf0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008cf2:	88f8      	ldrh	r0, [r7, #6]
 8008cf4:	893a      	ldrh	r2, [r7, #8]
 8008cf6:	8979      	ldrh	r1, [r7, #10]
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cfa:	9301      	str	r3, [sp, #4]
 8008cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	4603      	mov	r3, r0
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f000 fd10 	bl	8009728 <I2C_RequestMemoryRead>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d001      	beq.n	8008d12 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e1ec      	b.n	80090ec <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d113      	bne.n	8008d42 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	61fb      	str	r3, [r7, #28]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	695b      	ldr	r3, [r3, #20]
 8008d24:	61fb      	str	r3, [r7, #28]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	61fb      	str	r3, [r7, #28]
 8008d2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	e1c0      	b.n	80090c4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d11e      	bne.n	8008d88 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d5a:	b672      	cpsid	i
}
 8008d5c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d5e:	2300      	movs	r3, #0
 8008d60:	61bb      	str	r3, [r7, #24]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	695b      	ldr	r3, [r3, #20]
 8008d68:	61bb      	str	r3, [r7, #24]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	699b      	ldr	r3, [r3, #24]
 8008d70:	61bb      	str	r3, [r7, #24]
 8008d72:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008d84:	b662      	cpsie	i
}
 8008d86:	e035      	b.n	8008df4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d11e      	bne.n	8008dce <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008da0:	b672      	cpsid	i
}
 8008da2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008da4:	2300      	movs	r3, #0
 8008da6:	617b      	str	r3, [r7, #20]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	695b      	ldr	r3, [r3, #20]
 8008dae:	617b      	str	r3, [r7, #20]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	617b      	str	r3, [r7, #20]
 8008db8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008dc8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008dca:	b662      	cpsie	i
}
 8008dcc:	e012      	b.n	8008df4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008ddc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dde:	2300      	movs	r3, #0
 8008de0:	613b      	str	r3, [r7, #16]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	695b      	ldr	r3, [r3, #20]
 8008de8:	613b      	str	r3, [r7, #16]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	613b      	str	r3, [r7, #16]
 8008df2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8008df4:	e166      	b.n	80090c4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008dfa:	2b03      	cmp	r3, #3
 8008dfc:	f200 811f 	bhi.w	800903e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d123      	bne.n	8008e50 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e0a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f000 ff1d 	bl	8009c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e167      	b.n	80090ec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	691a      	ldr	r2, [r3, #16]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e26:	b2d2      	uxtb	r2, r2
 8008e28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e2e:	1c5a      	adds	r2, r3, #1
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	3b01      	subs	r3, #1
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008e4e:	e139      	b.n	80090c4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d152      	bne.n	8008efe <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e5e:	2200      	movs	r2, #0
 8008e60:	4906      	ldr	r1, [pc, #24]	@ (8008e7c <HAL_I2C_Mem_Read+0x24c>)
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	f000 fd48 	bl	80098f8 <I2C_WaitOnFlagUntilTimeout>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d008      	beq.n	8008e80 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e13c      	b.n	80090ec <HAL_I2C_Mem_Read+0x4bc>
 8008e72:	bf00      	nop
 8008e74:	00100002 	.word	0x00100002
 8008e78:	ffff0000 	.word	0xffff0000
 8008e7c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8008e80:	b672      	cpsid	i
}
 8008e82:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	691a      	ldr	r2, [r3, #16]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e9e:	b2d2      	uxtb	r2, r2
 8008ea0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ea6:	1c5a      	adds	r2, r3, #1
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008ec6:	b662      	cpsie	i
}
 8008ec8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	691a      	ldr	r2, [r3, #16]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed4:	b2d2      	uxtb	r2, r2
 8008ed6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008edc:	1c5a      	adds	r2, r3, #1
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008efc:	e0e2      	b.n	80090c4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f00:	9300      	str	r3, [sp, #0]
 8008f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f04:	2200      	movs	r2, #0
 8008f06:	497b      	ldr	r1, [pc, #492]	@ (80090f4 <HAL_I2C_Mem_Read+0x4c4>)
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f000 fcf5 	bl	80098f8 <I2C_WaitOnFlagUntilTimeout>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d001      	beq.n	8008f18 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	e0e9      	b.n	80090ec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008f28:	b672      	cpsid	i
}
 8008f2a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	691a      	ldr	r2, [r3, #16]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f36:	b2d2      	uxtb	r2, r2
 8008f38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f3e:	1c5a      	adds	r2, r3, #1
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	3b01      	subs	r3, #1
 8008f58:	b29a      	uxth	r2, r3
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008f5e:	4b66      	ldr	r3, [pc, #408]	@ (80090f8 <HAL_I2C_Mem_Read+0x4c8>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	08db      	lsrs	r3, r3, #3
 8008f64:	4a65      	ldr	r2, [pc, #404]	@ (80090fc <HAL_I2C_Mem_Read+0x4cc>)
 8008f66:	fba2 2303 	umull	r2, r3, r2, r3
 8008f6a:	0a1a      	lsrs	r2, r3, #8
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	4413      	add	r3, r2
 8008f72:	00da      	lsls	r2, r3, #3
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8008f78:	6a3b      	ldr	r3, [r7, #32]
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8008f7e:	6a3b      	ldr	r3, [r7, #32]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d118      	bne.n	8008fb6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2220      	movs	r2, #32
 8008f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f9e:	f043 0220 	orr.w	r2, r3, #32
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8008fa6:	b662      	cpsie	i
}
 8008fa8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e09a      	b.n	80090ec <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	695b      	ldr	r3, [r3, #20]
 8008fbc:	f003 0304 	and.w	r3, r3, #4
 8008fc0:	2b04      	cmp	r3, #4
 8008fc2:	d1d9      	bne.n	8008f78 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008fd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	691a      	ldr	r2, [r3, #16]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fde:	b2d2      	uxtb	r2, r2
 8008fe0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe6:	1c5a      	adds	r2, r3, #1
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	3b01      	subs	r3, #1
 8009000:	b29a      	uxth	r2, r3
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009006:	b662      	cpsie	i
}
 8009008:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	691a      	ldr	r2, [r3, #16]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009014:	b2d2      	uxtb	r2, r2
 8009016:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800901c:	1c5a      	adds	r2, r3, #1
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009026:	3b01      	subs	r3, #1
 8009028:	b29a      	uxth	r2, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009032:	b29b      	uxth	r3, r3
 8009034:	3b01      	subs	r3, #1
 8009036:	b29a      	uxth	r2, r3
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800903c:	e042      	b.n	80090c4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800903e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009040:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f000 fe02 	bl	8009c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d001      	beq.n	8009052 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e04c      	b.n	80090ec <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	691a      	ldr	r2, [r3, #16]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800905c:	b2d2      	uxtb	r2, r2
 800905e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009064:	1c5a      	adds	r2, r3, #1
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800906e:	3b01      	subs	r3, #1
 8009070:	b29a      	uxth	r2, r3
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800907a:	b29b      	uxth	r3, r3
 800907c:	3b01      	subs	r3, #1
 800907e:	b29a      	uxth	r2, r3
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	695b      	ldr	r3, [r3, #20]
 800908a:	f003 0304 	and.w	r3, r3, #4
 800908e:	2b04      	cmp	r3, #4
 8009090:	d118      	bne.n	80090c4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	691a      	ldr	r2, [r3, #16]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800909c:	b2d2      	uxtb	r2, r2
 800909e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090a4:	1c5a      	adds	r2, r3, #1
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090ae:	3b01      	subs	r3, #1
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	3b01      	subs	r3, #1
 80090be:	b29a      	uxth	r2, r3
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f47f ae94 	bne.w	8008df6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2220      	movs	r2, #32
 80090d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	e000      	b.n	80090ec <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80090ea:	2302      	movs	r3, #2
  }
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3728      	adds	r7, #40	@ 0x28
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	00010004 	.word	0x00010004
 80090f8:	20000018 	.word	0x20000018
 80090fc:	14f8b589 	.word	0x14f8b589

08009100 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b08a      	sub	sp, #40	@ 0x28
 8009104:	af02      	add	r7, sp, #8
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	607a      	str	r2, [r7, #4]
 800910a:	603b      	str	r3, [r7, #0]
 800910c:	460b      	mov	r3, r1
 800910e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8009110:	f7fe f878 	bl	8007204 <HAL_GetTick>
 8009114:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8009116:	2300      	movs	r3, #0
 8009118:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009120:	b2db      	uxtb	r3, r3
 8009122:	2b20      	cmp	r3, #32
 8009124:	f040 8111 	bne.w	800934a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	2319      	movs	r3, #25
 800912e:	2201      	movs	r2, #1
 8009130:	4988      	ldr	r1, [pc, #544]	@ (8009354 <HAL_I2C_IsDeviceReady+0x254>)
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f000 fbe0 	bl	80098f8 <I2C_WaitOnFlagUntilTimeout>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800913e:	2302      	movs	r3, #2
 8009140:	e104      	b.n	800934c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009148:	2b01      	cmp	r3, #1
 800914a:	d101      	bne.n	8009150 <HAL_I2C_IsDeviceReady+0x50>
 800914c:	2302      	movs	r3, #2
 800914e:	e0fd      	b.n	800934c <HAL_I2C_IsDeviceReady+0x24c>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f003 0301 	and.w	r3, r3, #1
 8009162:	2b01      	cmp	r3, #1
 8009164:	d007      	beq.n	8009176 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f042 0201 	orr.w	r2, r2, #1
 8009174:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009184:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2224      	movs	r2, #36	@ 0x24
 800918a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	4a70      	ldr	r2, [pc, #448]	@ (8009358 <HAL_I2C_IsDeviceReady+0x258>)
 8009198:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80091a8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	9300      	str	r3, [sp, #0]
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f000 fb9e 	bl	80098f8 <I2C_WaitOnFlagUntilTimeout>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00d      	beq.n	80091de <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091d0:	d103      	bne.n	80091da <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091d8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80091da:	2303      	movs	r3, #3
 80091dc:	e0b6      	b.n	800934c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80091de:	897b      	ldrh	r3, [r7, #10]
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	461a      	mov	r2, r3
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80091ec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80091ee:	f7fe f809 	bl	8007204 <HAL_GetTick>
 80091f2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	f003 0302 	and.w	r3, r3, #2
 80091fe:	2b02      	cmp	r3, #2
 8009200:	bf0c      	ite	eq
 8009202:	2301      	moveq	r3, #1
 8009204:	2300      	movne	r3, #0
 8009206:	b2db      	uxtb	r3, r3
 8009208:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	695b      	ldr	r3, [r3, #20]
 8009210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009214:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009218:	bf0c      	ite	eq
 800921a:	2301      	moveq	r3, #1
 800921c:	2300      	movne	r3, #0
 800921e:	b2db      	uxtb	r3, r3
 8009220:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009222:	e025      	b.n	8009270 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009224:	f7fd ffee 	bl	8007204 <HAL_GetTick>
 8009228:	4602      	mov	r2, r0
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	683a      	ldr	r2, [r7, #0]
 8009230:	429a      	cmp	r2, r3
 8009232:	d302      	bcc.n	800923a <HAL_I2C_IsDeviceReady+0x13a>
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d103      	bne.n	8009242 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	22a0      	movs	r2, #160	@ 0xa0
 800923e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	695b      	ldr	r3, [r3, #20]
 8009248:	f003 0302 	and.w	r3, r3, #2
 800924c:	2b02      	cmp	r3, #2
 800924e:	bf0c      	ite	eq
 8009250:	2301      	moveq	r3, #1
 8009252:	2300      	movne	r3, #0
 8009254:	b2db      	uxtb	r3, r3
 8009256:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	695b      	ldr	r3, [r3, #20]
 800925e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009266:	bf0c      	ite	eq
 8009268:	2301      	moveq	r3, #1
 800926a:	2300      	movne	r3, #0
 800926c:	b2db      	uxtb	r3, r3
 800926e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009276:	b2db      	uxtb	r3, r3
 8009278:	2ba0      	cmp	r3, #160	@ 0xa0
 800927a:	d005      	beq.n	8009288 <HAL_I2C_IsDeviceReady+0x188>
 800927c:	7dfb      	ldrb	r3, [r7, #23]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d102      	bne.n	8009288 <HAL_I2C_IsDeviceReady+0x188>
 8009282:	7dbb      	ldrb	r3, [r7, #22]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d0cd      	beq.n	8009224 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2220      	movs	r2, #32
 800928c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	f003 0302 	and.w	r3, r3, #2
 800929a:	2b02      	cmp	r3, #2
 800929c:	d129      	bne.n	80092f2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092ac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092ae:	2300      	movs	r3, #0
 80092b0:	613b      	str	r3, [r7, #16]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	695b      	ldr	r3, [r3, #20]
 80092b8:	613b      	str	r3, [r7, #16]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	699b      	ldr	r3, [r3, #24]
 80092c0:	613b      	str	r3, [r7, #16]
 80092c2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	9300      	str	r3, [sp, #0]
 80092c8:	2319      	movs	r3, #25
 80092ca:	2201      	movs	r2, #1
 80092cc:	4921      	ldr	r1, [pc, #132]	@ (8009354 <HAL_I2C_IsDeviceReady+0x254>)
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	f000 fb12 	bl	80098f8 <I2C_WaitOnFlagUntilTimeout>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d001      	beq.n	80092de <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	e036      	b.n	800934c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2220      	movs	r2, #32
 80092e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	e02c      	b.n	800934c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009300:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800930a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	2319      	movs	r3, #25
 8009312:	2201      	movs	r2, #1
 8009314:	490f      	ldr	r1, [pc, #60]	@ (8009354 <HAL_I2C_IsDeviceReady+0x254>)
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f000 faee 	bl	80098f8 <I2C_WaitOnFlagUntilTimeout>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	e012      	b.n	800934c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	3301      	adds	r3, #1
 800932a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800932c:	69ba      	ldr	r2, [r7, #24]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	429a      	cmp	r2, r3
 8009332:	f4ff af32 	bcc.w	800919a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2220      	movs	r2, #32
 800933a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2200      	movs	r2, #0
 8009342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e000      	b.n	800934c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800934a:	2302      	movs	r3, #2
  }
}
 800934c:	4618      	mov	r0, r3
 800934e:	3720      	adds	r7, #32
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	00100002 	.word	0x00100002
 8009358:	ffff0000 	.word	0xffff0000

0800935c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b088      	sub	sp, #32
 8009360:	af02      	add	r7, sp, #8
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	607a      	str	r2, [r7, #4]
 8009366:	603b      	str	r3, [r7, #0]
 8009368:	460b      	mov	r3, r1
 800936a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009370:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	2b08      	cmp	r3, #8
 8009376:	d006      	beq.n	8009386 <I2C_MasterRequestWrite+0x2a>
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	2b01      	cmp	r3, #1
 800937c:	d003      	beq.n	8009386 <I2C_MasterRequestWrite+0x2a>
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009384:	d108      	bne.n	8009398 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009394:	601a      	str	r2, [r3, #0]
 8009396:	e00b      	b.n	80093b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800939c:	2b12      	cmp	r3, #18
 800939e:	d107      	bne.n	80093b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80093ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	9300      	str	r3, [sp, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f000 fa9b 	bl	80098f8 <I2C_WaitOnFlagUntilTimeout>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00d      	beq.n	80093e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093d6:	d103      	bne.n	80093e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	e035      	b.n	8009450 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80093ec:	d108      	bne.n	8009400 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80093ee:	897b      	ldrh	r3, [r7, #10]
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	461a      	mov	r2, r3
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80093fc:	611a      	str	r2, [r3, #16]
 80093fe:	e01b      	b.n	8009438 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009400:	897b      	ldrh	r3, [r7, #10]
 8009402:	11db      	asrs	r3, r3, #7
 8009404:	b2db      	uxtb	r3, r3
 8009406:	f003 0306 	and.w	r3, r3, #6
 800940a:	b2db      	uxtb	r3, r3
 800940c:	f063 030f 	orn	r3, r3, #15
 8009410:	b2da      	uxtb	r2, r3
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	490e      	ldr	r1, [pc, #56]	@ (8009458 <I2C_MasterRequestWrite+0xfc>)
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	f000 fae4 	bl	80099ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d001      	beq.n	800942e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	e010      	b.n	8009450 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800942e:	897b      	ldrh	r3, [r7, #10]
 8009430:	b2da      	uxtb	r2, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	4907      	ldr	r1, [pc, #28]	@ (800945c <I2C_MasterRequestWrite+0x100>)
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f000 fad4 	bl	80099ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d001      	beq.n	800944e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	e000      	b.n	8009450 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3718      	adds	r7, #24
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	00010008 	.word	0x00010008
 800945c:	00010002 	.word	0x00010002

08009460 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b088      	sub	sp, #32
 8009464:	af02      	add	r7, sp, #8
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	607a      	str	r2, [r7, #4]
 800946a:	603b      	str	r3, [r7, #0]
 800946c:	460b      	mov	r3, r1
 800946e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009474:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009484:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	2b08      	cmp	r3, #8
 800948a:	d006      	beq.n	800949a <I2C_MasterRequestRead+0x3a>
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	2b01      	cmp	r3, #1
 8009490:	d003      	beq.n	800949a <I2C_MasterRequestRead+0x3a>
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009498:	d108      	bne.n	80094ac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80094a8:	601a      	str	r2, [r3, #0]
 80094aa:	e00b      	b.n	80094c4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094b0:	2b11      	cmp	r3, #17
 80094b2:	d107      	bne.n	80094c4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80094c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	9300      	str	r3, [sp, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f000 fa11 	bl	80098f8 <I2C_WaitOnFlagUntilTimeout>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00d      	beq.n	80094f8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094ea:	d103      	bne.n	80094f4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80094f4:	2303      	movs	r3, #3
 80094f6:	e079      	b.n	80095ec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	691b      	ldr	r3, [r3, #16]
 80094fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009500:	d108      	bne.n	8009514 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009502:	897b      	ldrh	r3, [r7, #10]
 8009504:	b2db      	uxtb	r3, r3
 8009506:	f043 0301 	orr.w	r3, r3, #1
 800950a:	b2da      	uxtb	r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	611a      	str	r2, [r3, #16]
 8009512:	e05f      	b.n	80095d4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009514:	897b      	ldrh	r3, [r7, #10]
 8009516:	11db      	asrs	r3, r3, #7
 8009518:	b2db      	uxtb	r3, r3
 800951a:	f003 0306 	and.w	r3, r3, #6
 800951e:	b2db      	uxtb	r3, r3
 8009520:	f063 030f 	orn	r3, r3, #15
 8009524:	b2da      	uxtb	r2, r3
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	4930      	ldr	r1, [pc, #192]	@ (80095f4 <I2C_MasterRequestRead+0x194>)
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	f000 fa5a 	bl	80099ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	e054      	b.n	80095ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009542:	897b      	ldrh	r3, [r7, #10]
 8009544:	b2da      	uxtb	r2, r3
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	4929      	ldr	r1, [pc, #164]	@ (80095f8 <I2C_MasterRequestRead+0x198>)
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f000 fa4a 	bl	80099ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e044      	b.n	80095ec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009562:	2300      	movs	r3, #0
 8009564:	613b      	str	r3, [r7, #16]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	695b      	ldr	r3, [r3, #20]
 800956c:	613b      	str	r3, [r7, #16]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	699b      	ldr	r3, [r3, #24]
 8009574:	613b      	str	r3, [r7, #16]
 8009576:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009586:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	9300      	str	r3, [sp, #0]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f000 f9af 	bl	80098f8 <I2C_WaitOnFlagUntilTimeout>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00d      	beq.n	80095bc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095ae:	d103      	bne.n	80095b8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80095b6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80095b8:	2303      	movs	r3, #3
 80095ba:	e017      	b.n	80095ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80095bc:	897b      	ldrh	r3, [r7, #10]
 80095be:	11db      	asrs	r3, r3, #7
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	f003 0306 	and.w	r3, r3, #6
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	f063 030e 	orn	r3, r3, #14
 80095cc:	b2da      	uxtb	r2, r3
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	4907      	ldr	r1, [pc, #28]	@ (80095f8 <I2C_MasterRequestRead+0x198>)
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f000 fa06 	bl	80099ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e000      	b.n	80095ec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80095ea:	2300      	movs	r3, #0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3718      	adds	r7, #24
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	00010008 	.word	0x00010008
 80095f8:	00010002 	.word	0x00010002

080095fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b088      	sub	sp, #32
 8009600:	af02      	add	r7, sp, #8
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	4608      	mov	r0, r1
 8009606:	4611      	mov	r1, r2
 8009608:	461a      	mov	r2, r3
 800960a:	4603      	mov	r3, r0
 800960c:	817b      	strh	r3, [r7, #10]
 800960e:	460b      	mov	r3, r1
 8009610:	813b      	strh	r3, [r7, #8]
 8009612:	4613      	mov	r3, r2
 8009614:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009624:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009628:	9300      	str	r3, [sp, #0]
 800962a:	6a3b      	ldr	r3, [r7, #32]
 800962c:	2200      	movs	r2, #0
 800962e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f000 f960 	bl	80098f8 <I2C_WaitOnFlagUntilTimeout>
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00d      	beq.n	800965a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009648:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800964c:	d103      	bne.n	8009656 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009654:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009656:	2303      	movs	r3, #3
 8009658:	e05f      	b.n	800971a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800965a:	897b      	ldrh	r3, [r7, #10]
 800965c:	b2db      	uxtb	r3, r3
 800965e:	461a      	mov	r2, r3
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009668:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800966a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966c:	6a3a      	ldr	r2, [r7, #32]
 800966e:	492d      	ldr	r1, [pc, #180]	@ (8009724 <I2C_RequestMemoryWrite+0x128>)
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f000 f9bb 	bl	80099ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d001      	beq.n	8009680 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	e04c      	b.n	800971a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009680:	2300      	movs	r3, #0
 8009682:	617b      	str	r3, [r7, #20]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	695b      	ldr	r3, [r3, #20]
 800968a:	617b      	str	r3, [r7, #20]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	617b      	str	r3, [r7, #20]
 8009694:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009698:	6a39      	ldr	r1, [r7, #32]
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f000 fa46 	bl	8009b2c <I2C_WaitOnTXEFlagUntilTimeout>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00d      	beq.n	80096c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096aa:	2b04      	cmp	r3, #4
 80096ac:	d107      	bne.n	80096be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80096bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	e02b      	b.n	800971a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80096c2:	88fb      	ldrh	r3, [r7, #6]
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d105      	bne.n	80096d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80096c8:	893b      	ldrh	r3, [r7, #8]
 80096ca:	b2da      	uxtb	r2, r3
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	611a      	str	r2, [r3, #16]
 80096d2:	e021      	b.n	8009718 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80096d4:	893b      	ldrh	r3, [r7, #8]
 80096d6:	0a1b      	lsrs	r3, r3, #8
 80096d8:	b29b      	uxth	r3, r3
 80096da:	b2da      	uxtb	r2, r3
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096e4:	6a39      	ldr	r1, [r7, #32]
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	f000 fa20 	bl	8009b2c <I2C_WaitOnTXEFlagUntilTimeout>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00d      	beq.n	800970e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096f6:	2b04      	cmp	r3, #4
 80096f8:	d107      	bne.n	800970a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009708:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	e005      	b.n	800971a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800970e:	893b      	ldrh	r3, [r7, #8]
 8009710:	b2da      	uxtb	r2, r3
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3718      	adds	r7, #24
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	00010002 	.word	0x00010002

08009728 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b088      	sub	sp, #32
 800972c:	af02      	add	r7, sp, #8
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	4608      	mov	r0, r1
 8009732:	4611      	mov	r1, r2
 8009734:	461a      	mov	r2, r3
 8009736:	4603      	mov	r3, r0
 8009738:	817b      	strh	r3, [r7, #10]
 800973a:	460b      	mov	r3, r1
 800973c:	813b      	strh	r3, [r7, #8]
 800973e:	4613      	mov	r3, r2
 8009740:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009750:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009760:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009764:	9300      	str	r3, [sp, #0]
 8009766:	6a3b      	ldr	r3, [r7, #32]
 8009768:	2200      	movs	r2, #0
 800976a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f000 f8c2 	bl	80098f8 <I2C_WaitOnFlagUntilTimeout>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00d      	beq.n	8009796 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009784:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009788:	d103      	bne.n	8009792 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009790:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009792:	2303      	movs	r3, #3
 8009794:	e0aa      	b.n	80098ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009796:	897b      	ldrh	r3, [r7, #10]
 8009798:	b2db      	uxtb	r3, r3
 800979a:	461a      	mov	r2, r3
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80097a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80097a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a8:	6a3a      	ldr	r2, [r7, #32]
 80097aa:	4952      	ldr	r1, [pc, #328]	@ (80098f4 <I2C_RequestMemoryRead+0x1cc>)
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f000 f91d 	bl	80099ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d001      	beq.n	80097bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	e097      	b.n	80098ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097bc:	2300      	movs	r3, #0
 80097be:	617b      	str	r3, [r7, #20]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	695b      	ldr	r3, [r3, #20]
 80097c6:	617b      	str	r3, [r7, #20]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	699b      	ldr	r3, [r3, #24]
 80097ce:	617b      	str	r3, [r7, #20]
 80097d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80097d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097d4:	6a39      	ldr	r1, [r7, #32]
 80097d6:	68f8      	ldr	r0, [r7, #12]
 80097d8:	f000 f9a8 	bl	8009b2c <I2C_WaitOnTXEFlagUntilTimeout>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00d      	beq.n	80097fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097e6:	2b04      	cmp	r3, #4
 80097e8:	d107      	bne.n	80097fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80097f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	e076      	b.n	80098ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80097fe:	88fb      	ldrh	r3, [r7, #6]
 8009800:	2b01      	cmp	r3, #1
 8009802:	d105      	bne.n	8009810 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009804:	893b      	ldrh	r3, [r7, #8]
 8009806:	b2da      	uxtb	r2, r3
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	611a      	str	r2, [r3, #16]
 800980e:	e021      	b.n	8009854 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009810:	893b      	ldrh	r3, [r7, #8]
 8009812:	0a1b      	lsrs	r3, r3, #8
 8009814:	b29b      	uxth	r3, r3
 8009816:	b2da      	uxtb	r2, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800981e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009820:	6a39      	ldr	r1, [r7, #32]
 8009822:	68f8      	ldr	r0, [r7, #12]
 8009824:	f000 f982 	bl	8009b2c <I2C_WaitOnTXEFlagUntilTimeout>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00d      	beq.n	800984a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009832:	2b04      	cmp	r3, #4
 8009834:	d107      	bne.n	8009846 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009844:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	e050      	b.n	80098ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800984a:	893b      	ldrh	r3, [r7, #8]
 800984c:	b2da      	uxtb	r2, r3
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009856:	6a39      	ldr	r1, [r7, #32]
 8009858:	68f8      	ldr	r0, [r7, #12]
 800985a:	f000 f967 	bl	8009b2c <I2C_WaitOnTXEFlagUntilTimeout>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00d      	beq.n	8009880 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009868:	2b04      	cmp	r3, #4
 800986a:	d107      	bne.n	800987c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800987a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	e035      	b.n	80098ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800988e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009892:	9300      	str	r3, [sp, #0]
 8009894:	6a3b      	ldr	r3, [r7, #32]
 8009896:	2200      	movs	r2, #0
 8009898:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f000 f82b 	bl	80098f8 <I2C_WaitOnFlagUntilTimeout>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00d      	beq.n	80098c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098b6:	d103      	bne.n	80098c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80098c0:	2303      	movs	r3, #3
 80098c2:	e013      	b.n	80098ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80098c4:	897b      	ldrh	r3, [r7, #10]
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	f043 0301 	orr.w	r3, r3, #1
 80098cc:	b2da      	uxtb	r2, r3
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80098d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d6:	6a3a      	ldr	r2, [r7, #32]
 80098d8:	4906      	ldr	r1, [pc, #24]	@ (80098f4 <I2C_RequestMemoryRead+0x1cc>)
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f000 f886 	bl	80099ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d001      	beq.n	80098ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	e000      	b.n	80098ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3718      	adds	r7, #24
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	00010002 	.word	0x00010002

080098f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	603b      	str	r3, [r7, #0]
 8009904:	4613      	mov	r3, r2
 8009906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009908:	e048      	b.n	800999c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009910:	d044      	beq.n	800999c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009912:	f7fd fc77 	bl	8007204 <HAL_GetTick>
 8009916:	4602      	mov	r2, r0
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	1ad3      	subs	r3, r2, r3
 800991c:	683a      	ldr	r2, [r7, #0]
 800991e:	429a      	cmp	r2, r3
 8009920:	d302      	bcc.n	8009928 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d139      	bne.n	800999c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	0c1b      	lsrs	r3, r3, #16
 800992c:	b2db      	uxtb	r3, r3
 800992e:	2b01      	cmp	r3, #1
 8009930:	d10d      	bne.n	800994e <I2C_WaitOnFlagUntilTimeout+0x56>
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	695b      	ldr	r3, [r3, #20]
 8009938:	43da      	mvns	r2, r3
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	4013      	ands	r3, r2
 800993e:	b29b      	uxth	r3, r3
 8009940:	2b00      	cmp	r3, #0
 8009942:	bf0c      	ite	eq
 8009944:	2301      	moveq	r3, #1
 8009946:	2300      	movne	r3, #0
 8009948:	b2db      	uxtb	r3, r3
 800994a:	461a      	mov	r2, r3
 800994c:	e00c      	b.n	8009968 <I2C_WaitOnFlagUntilTimeout+0x70>
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	699b      	ldr	r3, [r3, #24]
 8009954:	43da      	mvns	r2, r3
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	4013      	ands	r3, r2
 800995a:	b29b      	uxth	r3, r3
 800995c:	2b00      	cmp	r3, #0
 800995e:	bf0c      	ite	eq
 8009960:	2301      	moveq	r3, #1
 8009962:	2300      	movne	r3, #0
 8009964:	b2db      	uxtb	r3, r3
 8009966:	461a      	mov	r2, r3
 8009968:	79fb      	ldrb	r3, [r7, #7]
 800996a:	429a      	cmp	r2, r3
 800996c:	d116      	bne.n	800999c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2200      	movs	r2, #0
 8009972:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2220      	movs	r2, #32
 8009978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2200      	movs	r2, #0
 8009980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009988:	f043 0220 	orr.w	r2, r3, #32
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2200      	movs	r2, #0
 8009994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	e023      	b.n	80099e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	0c1b      	lsrs	r3, r3, #16
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d10d      	bne.n	80099c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	695b      	ldr	r3, [r3, #20]
 80099ac:	43da      	mvns	r2, r3
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	4013      	ands	r3, r2
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	bf0c      	ite	eq
 80099b8:	2301      	moveq	r3, #1
 80099ba:	2300      	movne	r3, #0
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	461a      	mov	r2, r3
 80099c0:	e00c      	b.n	80099dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	699b      	ldr	r3, [r3, #24]
 80099c8:	43da      	mvns	r2, r3
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	4013      	ands	r3, r2
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	bf0c      	ite	eq
 80099d4:	2301      	moveq	r3, #1
 80099d6:	2300      	movne	r3, #0
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	461a      	mov	r2, r3
 80099dc:	79fb      	ldrb	r3, [r7, #7]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d093      	beq.n	800990a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3710      	adds	r7, #16
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]
 80099f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80099fa:	e071      	b.n	8009ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	695b      	ldr	r3, [r3, #20]
 8009a02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a0a:	d123      	bne.n	8009a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a1a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009a24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2220      	movs	r2, #32
 8009a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a40:	f043 0204 	orr.w	r2, r3, #4
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009a50:	2301      	movs	r3, #1
 8009a52:	e067      	b.n	8009b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a5a:	d041      	beq.n	8009ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a5c:	f7fd fbd2 	bl	8007204 <HAL_GetTick>
 8009a60:	4602      	mov	r2, r0
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	1ad3      	subs	r3, r2, r3
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d302      	bcc.n	8009a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d136      	bne.n	8009ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	0c1b      	lsrs	r3, r3, #16
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d10c      	bne.n	8009a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	695b      	ldr	r3, [r3, #20]
 8009a82:	43da      	mvns	r2, r3
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	4013      	ands	r3, r2
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	bf14      	ite	ne
 8009a8e:	2301      	movne	r3, #1
 8009a90:	2300      	moveq	r3, #0
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	e00b      	b.n	8009aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	699b      	ldr	r3, [r3, #24]
 8009a9c:	43da      	mvns	r2, r3
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	4013      	ands	r3, r2
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	bf14      	ite	ne
 8009aa8:	2301      	movne	r3, #1
 8009aaa:	2300      	moveq	r3, #0
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d016      	beq.n	8009ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2220      	movs	r2, #32
 8009abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009acc:	f043 0220 	orr.w	r2, r3, #32
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	e021      	b.n	8009b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	0c1b      	lsrs	r3, r3, #16
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d10c      	bne.n	8009b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	695b      	ldr	r3, [r3, #20]
 8009af0:	43da      	mvns	r2, r3
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	4013      	ands	r3, r2
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	bf14      	ite	ne
 8009afc:	2301      	movne	r3, #1
 8009afe:	2300      	moveq	r3, #0
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	e00b      	b.n	8009b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	699b      	ldr	r3, [r3, #24]
 8009b0a:	43da      	mvns	r2, r3
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	4013      	ands	r3, r2
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	bf14      	ite	ne
 8009b16:	2301      	movne	r3, #1
 8009b18:	2300      	moveq	r3, #0
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f47f af6d 	bne.w	80099fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b38:	e034      	b.n	8009ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f000 f8e3 	bl	8009d06 <I2C_IsAcknowledgeFailed>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d001      	beq.n	8009b4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	e034      	b.n	8009bb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b50:	d028      	beq.n	8009ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b52:	f7fd fb57 	bl	8007204 <HAL_GetTick>
 8009b56:	4602      	mov	r2, r0
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	1ad3      	subs	r3, r2, r3
 8009b5c:	68ba      	ldr	r2, [r7, #8]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d302      	bcc.n	8009b68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d11d      	bne.n	8009ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	695b      	ldr	r3, [r3, #20]
 8009b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b72:	2b80      	cmp	r3, #128	@ 0x80
 8009b74:	d016      	beq.n	8009ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2220      	movs	r2, #32
 8009b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b90:	f043 0220 	orr.w	r2, r3, #32
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e007      	b.n	8009bb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	695b      	ldr	r3, [r3, #20]
 8009baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bae:	2b80      	cmp	r3, #128	@ 0x80
 8009bb0:	d1c3      	bne.n	8009b3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009bb2:	2300      	movs	r3, #0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009bc8:	e034      	b.n	8009c34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	f000 f89b 	bl	8009d06 <I2C_IsAcknowledgeFailed>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d001      	beq.n	8009bda <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e034      	b.n	8009c44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be0:	d028      	beq.n	8009c34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009be2:	f7fd fb0f 	bl	8007204 <HAL_GetTick>
 8009be6:	4602      	mov	r2, r0
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	1ad3      	subs	r3, r2, r3
 8009bec:	68ba      	ldr	r2, [r7, #8]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d302      	bcc.n	8009bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d11d      	bne.n	8009c34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	695b      	ldr	r3, [r3, #20]
 8009bfe:	f003 0304 	and.w	r3, r3, #4
 8009c02:	2b04      	cmp	r3, #4
 8009c04:	d016      	beq.n	8009c34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2220      	movs	r2, #32
 8009c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c20:	f043 0220 	orr.w	r2, r3, #32
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	e007      	b.n	8009c44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	695b      	ldr	r3, [r3, #20]
 8009c3a:	f003 0304 	and.w	r3, r3, #4
 8009c3e:	2b04      	cmp	r3, #4
 8009c40:	d1c3      	bne.n	8009bca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009c42:	2300      	movs	r3, #0
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3710      	adds	r7, #16
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009c58:	e049      	b.n	8009cee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	695b      	ldr	r3, [r3, #20]
 8009c60:	f003 0310 	and.w	r3, r3, #16
 8009c64:	2b10      	cmp	r3, #16
 8009c66:	d119      	bne.n	8009c9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f06f 0210 	mvn.w	r2, #16
 8009c70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2200      	movs	r2, #0
 8009c76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2220      	movs	r2, #32
 8009c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e030      	b.n	8009cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c9c:	f7fd fab2 	bl	8007204 <HAL_GetTick>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	1ad3      	subs	r3, r2, r3
 8009ca6:	68ba      	ldr	r2, [r7, #8]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d302      	bcc.n	8009cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d11d      	bne.n	8009cee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	695b      	ldr	r3, [r3, #20]
 8009cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cbc:	2b40      	cmp	r3, #64	@ 0x40
 8009cbe:	d016      	beq.n	8009cee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2220      	movs	r2, #32
 8009cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cda:	f043 0220 	orr.w	r2, r3, #32
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	e007      	b.n	8009cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	695b      	ldr	r3, [r3, #20]
 8009cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cf8:	2b40      	cmp	r3, #64	@ 0x40
 8009cfa:	d1ae      	bne.n	8009c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009d06:	b480      	push	{r7}
 8009d08:	b083      	sub	sp, #12
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	695b      	ldr	r3, [r3, #20]
 8009d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d1c:	d11b      	bne.n	8009d56 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009d26:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2220      	movs	r2, #32
 8009d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d42:	f043 0204 	orr.w	r2, r3, #4
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	e000      	b.n	8009d58 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009d56:	2300      	movs	r3, #0
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bc80      	pop	{r7}
 8009d60:	4770      	bx	lr
	...

08009d64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b086      	sub	sp, #24
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d101      	bne.n	8009d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	e272      	b.n	800a25c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f003 0301 	and.w	r3, r3, #1
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	f000 8087 	beq.w	8009e92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009d84:	4b92      	ldr	r3, [pc, #584]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	f003 030c 	and.w	r3, r3, #12
 8009d8c:	2b04      	cmp	r3, #4
 8009d8e:	d00c      	beq.n	8009daa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009d90:	4b8f      	ldr	r3, [pc, #572]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	f003 030c 	and.w	r3, r3, #12
 8009d98:	2b08      	cmp	r3, #8
 8009d9a:	d112      	bne.n	8009dc2 <HAL_RCC_OscConfig+0x5e>
 8009d9c:	4b8c      	ldr	r3, [pc, #560]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009da8:	d10b      	bne.n	8009dc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009daa:	4b89      	ldr	r3, [pc, #548]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d06c      	beq.n	8009e90 <HAL_RCC_OscConfig+0x12c>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d168      	bne.n	8009e90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e24c      	b.n	800a25c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dca:	d106      	bne.n	8009dda <HAL_RCC_OscConfig+0x76>
 8009dcc:	4b80      	ldr	r3, [pc, #512]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a7f      	ldr	r2, [pc, #508]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009dd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009dd6:	6013      	str	r3, [r2, #0]
 8009dd8:	e02e      	b.n	8009e38 <HAL_RCC_OscConfig+0xd4>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d10c      	bne.n	8009dfc <HAL_RCC_OscConfig+0x98>
 8009de2:	4b7b      	ldr	r3, [pc, #492]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a7a      	ldr	r2, [pc, #488]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009de8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009dec:	6013      	str	r3, [r2, #0]
 8009dee:	4b78      	ldr	r3, [pc, #480]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a77      	ldr	r2, [pc, #476]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009df4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009df8:	6013      	str	r3, [r2, #0]
 8009dfa:	e01d      	b.n	8009e38 <HAL_RCC_OscConfig+0xd4>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009e04:	d10c      	bne.n	8009e20 <HAL_RCC_OscConfig+0xbc>
 8009e06:	4b72      	ldr	r3, [pc, #456]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a71      	ldr	r2, [pc, #452]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009e0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009e10:	6013      	str	r3, [r2, #0]
 8009e12:	4b6f      	ldr	r3, [pc, #444]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a6e      	ldr	r2, [pc, #440]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e1c:	6013      	str	r3, [r2, #0]
 8009e1e:	e00b      	b.n	8009e38 <HAL_RCC_OscConfig+0xd4>
 8009e20:	4b6b      	ldr	r3, [pc, #428]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a6a      	ldr	r2, [pc, #424]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009e26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e2a:	6013      	str	r3, [r2, #0]
 8009e2c:	4b68      	ldr	r3, [pc, #416]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a67      	ldr	r2, [pc, #412]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009e32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009e36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d013      	beq.n	8009e68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e40:	f7fd f9e0 	bl	8007204 <HAL_GetTick>
 8009e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e46:	e008      	b.n	8009e5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e48:	f7fd f9dc 	bl	8007204 <HAL_GetTick>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	1ad3      	subs	r3, r2, r3
 8009e52:	2b64      	cmp	r3, #100	@ 0x64
 8009e54:	d901      	bls.n	8009e5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009e56:	2303      	movs	r3, #3
 8009e58:	e200      	b.n	800a25c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e5a:	4b5d      	ldr	r3, [pc, #372]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d0f0      	beq.n	8009e48 <HAL_RCC_OscConfig+0xe4>
 8009e66:	e014      	b.n	8009e92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e68:	f7fd f9cc 	bl	8007204 <HAL_GetTick>
 8009e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009e6e:	e008      	b.n	8009e82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e70:	f7fd f9c8 	bl	8007204 <HAL_GetTick>
 8009e74:	4602      	mov	r2, r0
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	1ad3      	subs	r3, r2, r3
 8009e7a:	2b64      	cmp	r3, #100	@ 0x64
 8009e7c:	d901      	bls.n	8009e82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009e7e:	2303      	movs	r3, #3
 8009e80:	e1ec      	b.n	800a25c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009e82:	4b53      	ldr	r3, [pc, #332]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d1f0      	bne.n	8009e70 <HAL_RCC_OscConfig+0x10c>
 8009e8e:	e000      	b.n	8009e92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f003 0302 	and.w	r3, r3, #2
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d063      	beq.n	8009f66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009e9e:	4b4c      	ldr	r3, [pc, #304]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	f003 030c 	and.w	r3, r3, #12
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00b      	beq.n	8009ec2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009eaa:	4b49      	ldr	r3, [pc, #292]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	f003 030c 	and.w	r3, r3, #12
 8009eb2:	2b08      	cmp	r3, #8
 8009eb4:	d11c      	bne.n	8009ef0 <HAL_RCC_OscConfig+0x18c>
 8009eb6:	4b46      	ldr	r3, [pc, #280]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d116      	bne.n	8009ef0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009ec2:	4b43      	ldr	r3, [pc, #268]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f003 0302 	and.w	r3, r3, #2
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d005      	beq.n	8009eda <HAL_RCC_OscConfig+0x176>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d001      	beq.n	8009eda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e1c0      	b.n	800a25c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009eda:	4b3d      	ldr	r3, [pc, #244]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	695b      	ldr	r3, [r3, #20]
 8009ee6:	00db      	lsls	r3, r3, #3
 8009ee8:	4939      	ldr	r1, [pc, #228]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009eea:	4313      	orrs	r3, r2
 8009eec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009eee:	e03a      	b.n	8009f66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	691b      	ldr	r3, [r3, #16]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d020      	beq.n	8009f3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009ef8:	4b36      	ldr	r3, [pc, #216]	@ (8009fd4 <HAL_RCC_OscConfig+0x270>)
 8009efa:	2201      	movs	r2, #1
 8009efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009efe:	f7fd f981 	bl	8007204 <HAL_GetTick>
 8009f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f04:	e008      	b.n	8009f18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f06:	f7fd f97d 	bl	8007204 <HAL_GetTick>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	1ad3      	subs	r3, r2, r3
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	d901      	bls.n	8009f18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8009f14:	2303      	movs	r3, #3
 8009f16:	e1a1      	b.n	800a25c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f18:	4b2d      	ldr	r3, [pc, #180]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 0302 	and.w	r3, r3, #2
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d0f0      	beq.n	8009f06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f24:	4b2a      	ldr	r3, [pc, #168]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	695b      	ldr	r3, [r3, #20]
 8009f30:	00db      	lsls	r3, r3, #3
 8009f32:	4927      	ldr	r1, [pc, #156]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009f34:	4313      	orrs	r3, r2
 8009f36:	600b      	str	r3, [r1, #0]
 8009f38:	e015      	b.n	8009f66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f3a:	4b26      	ldr	r3, [pc, #152]	@ (8009fd4 <HAL_RCC_OscConfig+0x270>)
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f40:	f7fd f960 	bl	8007204 <HAL_GetTick>
 8009f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f46:	e008      	b.n	8009f5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f48:	f7fd f95c 	bl	8007204 <HAL_GetTick>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	1ad3      	subs	r3, r2, r3
 8009f52:	2b02      	cmp	r3, #2
 8009f54:	d901      	bls.n	8009f5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8009f56:	2303      	movs	r3, #3
 8009f58:	e180      	b.n	800a25c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f003 0302 	and.w	r3, r3, #2
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1f0      	bne.n	8009f48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f003 0308 	and.w	r3, r3, #8
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d03a      	beq.n	8009fe8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	699b      	ldr	r3, [r3, #24]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d019      	beq.n	8009fae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009f7a:	4b17      	ldr	r3, [pc, #92]	@ (8009fd8 <HAL_RCC_OscConfig+0x274>)
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009f80:	f7fd f940 	bl	8007204 <HAL_GetTick>
 8009f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f86:	e008      	b.n	8009f9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f88:	f7fd f93c 	bl	8007204 <HAL_GetTick>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	2b02      	cmp	r3, #2
 8009f94:	d901      	bls.n	8009f9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8009f96:	2303      	movs	r3, #3
 8009f98:	e160      	b.n	800a25c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8009fd0 <HAL_RCC_OscConfig+0x26c>)
 8009f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f9e:	f003 0302 	and.w	r3, r3, #2
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d0f0      	beq.n	8009f88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8009fa6:	2001      	movs	r0, #1
 8009fa8:	f000 fafe 	bl	800a5a8 <RCC_Delay>
 8009fac:	e01c      	b.n	8009fe8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009fae:	4b0a      	ldr	r3, [pc, #40]	@ (8009fd8 <HAL_RCC_OscConfig+0x274>)
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009fb4:	f7fd f926 	bl	8007204 <HAL_GetTick>
 8009fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009fba:	e00f      	b.n	8009fdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009fbc:	f7fd f922 	bl	8007204 <HAL_GetTick>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	1ad3      	subs	r3, r2, r3
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d908      	bls.n	8009fdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	e146      	b.n	800a25c <HAL_RCC_OscConfig+0x4f8>
 8009fce:	bf00      	nop
 8009fd0:	40021000 	.word	0x40021000
 8009fd4:	42420000 	.word	0x42420000
 8009fd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009fdc:	4b92      	ldr	r3, [pc, #584]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 8009fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fe0:	f003 0302 	and.w	r3, r3, #2
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d1e9      	bne.n	8009fbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f003 0304 	and.w	r3, r3, #4
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f000 80a6 	beq.w	800a142 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ffa:	4b8b      	ldr	r3, [pc, #556]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 8009ffc:	69db      	ldr	r3, [r3, #28]
 8009ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a002:	2b00      	cmp	r3, #0
 800a004:	d10d      	bne.n	800a022 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a006:	4b88      	ldr	r3, [pc, #544]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a008:	69db      	ldr	r3, [r3, #28]
 800a00a:	4a87      	ldr	r2, [pc, #540]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a00c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a010:	61d3      	str	r3, [r2, #28]
 800a012:	4b85      	ldr	r3, [pc, #532]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a014:	69db      	ldr	r3, [r3, #28]
 800a016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a01a:	60bb      	str	r3, [r7, #8]
 800a01c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a01e:	2301      	movs	r3, #1
 800a020:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a022:	4b82      	ldr	r3, [pc, #520]	@ (800a22c <HAL_RCC_OscConfig+0x4c8>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d118      	bne.n	800a060 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a02e:	4b7f      	ldr	r3, [pc, #508]	@ (800a22c <HAL_RCC_OscConfig+0x4c8>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a7e      	ldr	r2, [pc, #504]	@ (800a22c <HAL_RCC_OscConfig+0x4c8>)
 800a034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a03a:	f7fd f8e3 	bl	8007204 <HAL_GetTick>
 800a03e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a040:	e008      	b.n	800a054 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a042:	f7fd f8df 	bl	8007204 <HAL_GetTick>
 800a046:	4602      	mov	r2, r0
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	1ad3      	subs	r3, r2, r3
 800a04c:	2b64      	cmp	r3, #100	@ 0x64
 800a04e:	d901      	bls.n	800a054 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a050:	2303      	movs	r3, #3
 800a052:	e103      	b.n	800a25c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a054:	4b75      	ldr	r3, [pc, #468]	@ (800a22c <HAL_RCC_OscConfig+0x4c8>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d0f0      	beq.n	800a042 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	2b01      	cmp	r3, #1
 800a066:	d106      	bne.n	800a076 <HAL_RCC_OscConfig+0x312>
 800a068:	4b6f      	ldr	r3, [pc, #444]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a06a:	6a1b      	ldr	r3, [r3, #32]
 800a06c:	4a6e      	ldr	r2, [pc, #440]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a06e:	f043 0301 	orr.w	r3, r3, #1
 800a072:	6213      	str	r3, [r2, #32]
 800a074:	e02d      	b.n	800a0d2 <HAL_RCC_OscConfig+0x36e>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d10c      	bne.n	800a098 <HAL_RCC_OscConfig+0x334>
 800a07e:	4b6a      	ldr	r3, [pc, #424]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a080:	6a1b      	ldr	r3, [r3, #32]
 800a082:	4a69      	ldr	r2, [pc, #420]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a084:	f023 0301 	bic.w	r3, r3, #1
 800a088:	6213      	str	r3, [r2, #32]
 800a08a:	4b67      	ldr	r3, [pc, #412]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a08c:	6a1b      	ldr	r3, [r3, #32]
 800a08e:	4a66      	ldr	r2, [pc, #408]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a090:	f023 0304 	bic.w	r3, r3, #4
 800a094:	6213      	str	r3, [r2, #32]
 800a096:	e01c      	b.n	800a0d2 <HAL_RCC_OscConfig+0x36e>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	2b05      	cmp	r3, #5
 800a09e:	d10c      	bne.n	800a0ba <HAL_RCC_OscConfig+0x356>
 800a0a0:	4b61      	ldr	r3, [pc, #388]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a0a2:	6a1b      	ldr	r3, [r3, #32]
 800a0a4:	4a60      	ldr	r2, [pc, #384]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a0a6:	f043 0304 	orr.w	r3, r3, #4
 800a0aa:	6213      	str	r3, [r2, #32]
 800a0ac:	4b5e      	ldr	r3, [pc, #376]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a0ae:	6a1b      	ldr	r3, [r3, #32]
 800a0b0:	4a5d      	ldr	r2, [pc, #372]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a0b2:	f043 0301 	orr.w	r3, r3, #1
 800a0b6:	6213      	str	r3, [r2, #32]
 800a0b8:	e00b      	b.n	800a0d2 <HAL_RCC_OscConfig+0x36e>
 800a0ba:	4b5b      	ldr	r3, [pc, #364]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	4a5a      	ldr	r2, [pc, #360]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a0c0:	f023 0301 	bic.w	r3, r3, #1
 800a0c4:	6213      	str	r3, [r2, #32]
 800a0c6:	4b58      	ldr	r3, [pc, #352]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	4a57      	ldr	r2, [pc, #348]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a0cc:	f023 0304 	bic.w	r3, r3, #4
 800a0d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d015      	beq.n	800a106 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a0da:	f7fd f893 	bl	8007204 <HAL_GetTick>
 800a0de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a0e0:	e00a      	b.n	800a0f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0e2:	f7fd f88f 	bl	8007204 <HAL_GetTick>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	1ad3      	subs	r3, r2, r3
 800a0ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d901      	bls.n	800a0f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a0f4:	2303      	movs	r3, #3
 800a0f6:	e0b1      	b.n	800a25c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a0f8:	4b4b      	ldr	r3, [pc, #300]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a0fa:	6a1b      	ldr	r3, [r3, #32]
 800a0fc:	f003 0302 	and.w	r3, r3, #2
 800a100:	2b00      	cmp	r3, #0
 800a102:	d0ee      	beq.n	800a0e2 <HAL_RCC_OscConfig+0x37e>
 800a104:	e014      	b.n	800a130 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a106:	f7fd f87d 	bl	8007204 <HAL_GetTick>
 800a10a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a10c:	e00a      	b.n	800a124 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a10e:	f7fd f879 	bl	8007204 <HAL_GetTick>
 800a112:	4602      	mov	r2, r0
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d901      	bls.n	800a124 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a120:	2303      	movs	r3, #3
 800a122:	e09b      	b.n	800a25c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a124:	4b40      	ldr	r3, [pc, #256]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a126:	6a1b      	ldr	r3, [r3, #32]
 800a128:	f003 0302 	and.w	r3, r3, #2
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1ee      	bne.n	800a10e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a130:	7dfb      	ldrb	r3, [r7, #23]
 800a132:	2b01      	cmp	r3, #1
 800a134:	d105      	bne.n	800a142 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a136:	4b3c      	ldr	r3, [pc, #240]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a138:	69db      	ldr	r3, [r3, #28]
 800a13a:	4a3b      	ldr	r2, [pc, #236]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a13c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a140:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	69db      	ldr	r3, [r3, #28]
 800a146:	2b00      	cmp	r3, #0
 800a148:	f000 8087 	beq.w	800a25a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a14c:	4b36      	ldr	r3, [pc, #216]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	f003 030c 	and.w	r3, r3, #12
 800a154:	2b08      	cmp	r3, #8
 800a156:	d061      	beq.n	800a21c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	69db      	ldr	r3, [r3, #28]
 800a15c:	2b02      	cmp	r3, #2
 800a15e:	d146      	bne.n	800a1ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a160:	4b33      	ldr	r3, [pc, #204]	@ (800a230 <HAL_RCC_OscConfig+0x4cc>)
 800a162:	2200      	movs	r2, #0
 800a164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a166:	f7fd f84d 	bl	8007204 <HAL_GetTick>
 800a16a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a16c:	e008      	b.n	800a180 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a16e:	f7fd f849 	bl	8007204 <HAL_GetTick>
 800a172:	4602      	mov	r2, r0
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	1ad3      	subs	r3, r2, r3
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d901      	bls.n	800a180 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a17c:	2303      	movs	r3, #3
 800a17e:	e06d      	b.n	800a25c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a180:	4b29      	ldr	r3, [pc, #164]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1f0      	bne.n	800a16e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6a1b      	ldr	r3, [r3, #32]
 800a190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a194:	d108      	bne.n	800a1a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a196:	4b24      	ldr	r3, [pc, #144]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	689b      	ldr	r3, [r3, #8]
 800a1a2:	4921      	ldr	r1, [pc, #132]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a1a8:	4b1f      	ldr	r3, [pc, #124]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a19      	ldr	r1, [r3, #32]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1b8:	430b      	orrs	r3, r1
 800a1ba:	491b      	ldr	r1, [pc, #108]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a1c0:	4b1b      	ldr	r3, [pc, #108]	@ (800a230 <HAL_RCC_OscConfig+0x4cc>)
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1c6:	f7fd f81d 	bl	8007204 <HAL_GetTick>
 800a1ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a1cc:	e008      	b.n	800a1e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1ce:	f7fd f819 	bl	8007204 <HAL_GetTick>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	1ad3      	subs	r3, r2, r3
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d901      	bls.n	800a1e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a1dc:	2303      	movs	r3, #3
 800a1de:	e03d      	b.n	800a25c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a1e0:	4b11      	ldr	r3, [pc, #68]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d0f0      	beq.n	800a1ce <HAL_RCC_OscConfig+0x46a>
 800a1ec:	e035      	b.n	800a25a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1ee:	4b10      	ldr	r3, [pc, #64]	@ (800a230 <HAL_RCC_OscConfig+0x4cc>)
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1f4:	f7fd f806 	bl	8007204 <HAL_GetTick>
 800a1f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a1fa:	e008      	b.n	800a20e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1fc:	f7fd f802 	bl	8007204 <HAL_GetTick>
 800a200:	4602      	mov	r2, r0
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	1ad3      	subs	r3, r2, r3
 800a206:	2b02      	cmp	r3, #2
 800a208:	d901      	bls.n	800a20e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a20a:	2303      	movs	r3, #3
 800a20c:	e026      	b.n	800a25c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a20e:	4b06      	ldr	r3, [pc, #24]	@ (800a228 <HAL_RCC_OscConfig+0x4c4>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1f0      	bne.n	800a1fc <HAL_RCC_OscConfig+0x498>
 800a21a:	e01e      	b.n	800a25a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	69db      	ldr	r3, [r3, #28]
 800a220:	2b01      	cmp	r3, #1
 800a222:	d107      	bne.n	800a234 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a224:	2301      	movs	r3, #1
 800a226:	e019      	b.n	800a25c <HAL_RCC_OscConfig+0x4f8>
 800a228:	40021000 	.word	0x40021000
 800a22c:	40007000 	.word	0x40007000
 800a230:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a234:	4b0b      	ldr	r3, [pc, #44]	@ (800a264 <HAL_RCC_OscConfig+0x500>)
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6a1b      	ldr	r3, [r3, #32]
 800a244:	429a      	cmp	r2, r3
 800a246:	d106      	bne.n	800a256 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a252:	429a      	cmp	r2, r3
 800a254:	d001      	beq.n	800a25a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	e000      	b.n	800a25c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a25a:	2300      	movs	r3, #0
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3718      	adds	r7, #24
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	40021000 	.word	0x40021000

0800a268 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d101      	bne.n	800a27c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a278:	2301      	movs	r3, #1
 800a27a:	e0d0      	b.n	800a41e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a27c:	4b6a      	ldr	r3, [pc, #424]	@ (800a428 <HAL_RCC_ClockConfig+0x1c0>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 0307 	and.w	r3, r3, #7
 800a284:	683a      	ldr	r2, [r7, #0]
 800a286:	429a      	cmp	r2, r3
 800a288:	d910      	bls.n	800a2ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a28a:	4b67      	ldr	r3, [pc, #412]	@ (800a428 <HAL_RCC_ClockConfig+0x1c0>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f023 0207 	bic.w	r2, r3, #7
 800a292:	4965      	ldr	r1, [pc, #404]	@ (800a428 <HAL_RCC_ClockConfig+0x1c0>)
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	4313      	orrs	r3, r2
 800a298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a29a:	4b63      	ldr	r3, [pc, #396]	@ (800a428 <HAL_RCC_ClockConfig+0x1c0>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f003 0307 	and.w	r3, r3, #7
 800a2a2:	683a      	ldr	r2, [r7, #0]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d001      	beq.n	800a2ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	e0b8      	b.n	800a41e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f003 0302 	and.w	r3, r3, #2
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d020      	beq.n	800a2fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 0304 	and.w	r3, r3, #4
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d005      	beq.n	800a2d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a2c4:	4b59      	ldr	r3, [pc, #356]	@ (800a42c <HAL_RCC_ClockConfig+0x1c4>)
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	4a58      	ldr	r2, [pc, #352]	@ (800a42c <HAL_RCC_ClockConfig+0x1c4>)
 800a2ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a2ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f003 0308 	and.w	r3, r3, #8
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d005      	beq.n	800a2e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a2dc:	4b53      	ldr	r3, [pc, #332]	@ (800a42c <HAL_RCC_ClockConfig+0x1c4>)
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	4a52      	ldr	r2, [pc, #328]	@ (800a42c <HAL_RCC_ClockConfig+0x1c4>)
 800a2e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800a2e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a2e8:	4b50      	ldr	r3, [pc, #320]	@ (800a42c <HAL_RCC_ClockConfig+0x1c4>)
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	494d      	ldr	r1, [pc, #308]	@ (800a42c <HAL_RCC_ClockConfig+0x1c4>)
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f003 0301 	and.w	r3, r3, #1
 800a302:	2b00      	cmp	r3, #0
 800a304:	d040      	beq.n	800a388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d107      	bne.n	800a31e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a30e:	4b47      	ldr	r3, [pc, #284]	@ (800a42c <HAL_RCC_ClockConfig+0x1c4>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a316:	2b00      	cmp	r3, #0
 800a318:	d115      	bne.n	800a346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	e07f      	b.n	800a41e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	2b02      	cmp	r3, #2
 800a324:	d107      	bne.n	800a336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a326:	4b41      	ldr	r3, [pc, #260]	@ (800a42c <HAL_RCC_ClockConfig+0x1c4>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d109      	bne.n	800a346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	e073      	b.n	800a41e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a336:	4b3d      	ldr	r3, [pc, #244]	@ (800a42c <HAL_RCC_ClockConfig+0x1c4>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f003 0302 	and.w	r3, r3, #2
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d101      	bne.n	800a346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	e06b      	b.n	800a41e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a346:	4b39      	ldr	r3, [pc, #228]	@ (800a42c <HAL_RCC_ClockConfig+0x1c4>)
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	f023 0203 	bic.w	r2, r3, #3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	4936      	ldr	r1, [pc, #216]	@ (800a42c <HAL_RCC_ClockConfig+0x1c4>)
 800a354:	4313      	orrs	r3, r2
 800a356:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a358:	f7fc ff54 	bl	8007204 <HAL_GetTick>
 800a35c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a35e:	e00a      	b.n	800a376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a360:	f7fc ff50 	bl	8007204 <HAL_GetTick>
 800a364:	4602      	mov	r2, r0
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a36e:	4293      	cmp	r3, r2
 800a370:	d901      	bls.n	800a376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a372:	2303      	movs	r3, #3
 800a374:	e053      	b.n	800a41e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a376:	4b2d      	ldr	r3, [pc, #180]	@ (800a42c <HAL_RCC_ClockConfig+0x1c4>)
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	f003 020c 	and.w	r2, r3, #12
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	429a      	cmp	r2, r3
 800a386:	d1eb      	bne.n	800a360 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a388:	4b27      	ldr	r3, [pc, #156]	@ (800a428 <HAL_RCC_ClockConfig+0x1c0>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f003 0307 	and.w	r3, r3, #7
 800a390:	683a      	ldr	r2, [r7, #0]
 800a392:	429a      	cmp	r2, r3
 800a394:	d210      	bcs.n	800a3b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a396:	4b24      	ldr	r3, [pc, #144]	@ (800a428 <HAL_RCC_ClockConfig+0x1c0>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f023 0207 	bic.w	r2, r3, #7
 800a39e:	4922      	ldr	r1, [pc, #136]	@ (800a428 <HAL_RCC_ClockConfig+0x1c0>)
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3a6:	4b20      	ldr	r3, [pc, #128]	@ (800a428 <HAL_RCC_ClockConfig+0x1c0>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f003 0307 	and.w	r3, r3, #7
 800a3ae:	683a      	ldr	r2, [r7, #0]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d001      	beq.n	800a3b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e032      	b.n	800a41e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 0304 	and.w	r3, r3, #4
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d008      	beq.n	800a3d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a3c4:	4b19      	ldr	r3, [pc, #100]	@ (800a42c <HAL_RCC_ClockConfig+0x1c4>)
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	4916      	ldr	r1, [pc, #88]	@ (800a42c <HAL_RCC_ClockConfig+0x1c4>)
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f003 0308 	and.w	r3, r3, #8
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d009      	beq.n	800a3f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a3e2:	4b12      	ldr	r3, [pc, #72]	@ (800a42c <HAL_RCC_ClockConfig+0x1c4>)
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	00db      	lsls	r3, r3, #3
 800a3f0:	490e      	ldr	r1, [pc, #56]	@ (800a42c <HAL_RCC_ClockConfig+0x1c4>)
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a3f6:	f000 f821 	bl	800a43c <HAL_RCC_GetSysClockFreq>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	4b0b      	ldr	r3, [pc, #44]	@ (800a42c <HAL_RCC_ClockConfig+0x1c4>)
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	091b      	lsrs	r3, r3, #4
 800a402:	f003 030f 	and.w	r3, r3, #15
 800a406:	490a      	ldr	r1, [pc, #40]	@ (800a430 <HAL_RCC_ClockConfig+0x1c8>)
 800a408:	5ccb      	ldrb	r3, [r1, r3]
 800a40a:	fa22 f303 	lsr.w	r3, r2, r3
 800a40e:	4a09      	ldr	r2, [pc, #36]	@ (800a434 <HAL_RCC_ClockConfig+0x1cc>)
 800a410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a412:	4b09      	ldr	r3, [pc, #36]	@ (800a438 <HAL_RCC_ClockConfig+0x1d0>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4618      	mov	r0, r3
 800a418:	f7fb f9ba 	bl	8005790 <HAL_InitTick>

  return HAL_OK;
 800a41c:	2300      	movs	r3, #0
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	40022000 	.word	0x40022000
 800a42c:	40021000 	.word	0x40021000
 800a430:	08015300 	.word	0x08015300
 800a434:	20000018 	.word	0x20000018
 800a438:	20000068 	.word	0x20000068

0800a43c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b087      	sub	sp, #28
 800a440:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a442:	2300      	movs	r3, #0
 800a444:	60fb      	str	r3, [r7, #12]
 800a446:	2300      	movs	r3, #0
 800a448:	60bb      	str	r3, [r7, #8]
 800a44a:	2300      	movs	r3, #0
 800a44c:	617b      	str	r3, [r7, #20]
 800a44e:	2300      	movs	r3, #0
 800a450:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a452:	2300      	movs	r3, #0
 800a454:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a456:	4b1e      	ldr	r3, [pc, #120]	@ (800a4d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f003 030c 	and.w	r3, r3, #12
 800a462:	2b04      	cmp	r3, #4
 800a464:	d002      	beq.n	800a46c <HAL_RCC_GetSysClockFreq+0x30>
 800a466:	2b08      	cmp	r3, #8
 800a468:	d003      	beq.n	800a472 <HAL_RCC_GetSysClockFreq+0x36>
 800a46a:	e027      	b.n	800a4bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a46c:	4b19      	ldr	r3, [pc, #100]	@ (800a4d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800a46e:	613b      	str	r3, [r7, #16]
      break;
 800a470:	e027      	b.n	800a4c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	0c9b      	lsrs	r3, r3, #18
 800a476:	f003 030f 	and.w	r3, r3, #15
 800a47a:	4a17      	ldr	r2, [pc, #92]	@ (800a4d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a47c:	5cd3      	ldrb	r3, [r2, r3]
 800a47e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a486:	2b00      	cmp	r3, #0
 800a488:	d010      	beq.n	800a4ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a48a:	4b11      	ldr	r3, [pc, #68]	@ (800a4d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	0c5b      	lsrs	r3, r3, #17
 800a490:	f003 0301 	and.w	r3, r3, #1
 800a494:	4a11      	ldr	r2, [pc, #68]	@ (800a4dc <HAL_RCC_GetSysClockFreq+0xa0>)
 800a496:	5cd3      	ldrb	r3, [r2, r3]
 800a498:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4a0d      	ldr	r2, [pc, #52]	@ (800a4d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800a49e:	fb03 f202 	mul.w	r2, r3, r2
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4a8:	617b      	str	r3, [r7, #20]
 800a4aa:	e004      	b.n	800a4b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4a0c      	ldr	r2, [pc, #48]	@ (800a4e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800a4b0:	fb02 f303 	mul.w	r3, r2, r3
 800a4b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	613b      	str	r3, [r7, #16]
      break;
 800a4ba:	e002      	b.n	800a4c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a4bc:	4b05      	ldr	r3, [pc, #20]	@ (800a4d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800a4be:	613b      	str	r3, [r7, #16]
      break;
 800a4c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a4c2:	693b      	ldr	r3, [r7, #16]
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	371c      	adds	r7, #28
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bc80      	pop	{r7}
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	40021000 	.word	0x40021000
 800a4d4:	007a1200 	.word	0x007a1200
 800a4d8:	08015318 	.word	0x08015318
 800a4dc:	08015328 	.word	0x08015328
 800a4e0:	003d0900 	.word	0x003d0900

0800a4e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a4e8:	4b02      	ldr	r3, [pc, #8]	@ (800a4f4 <HAL_RCC_GetHCLKFreq+0x10>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bc80      	pop	{r7}
 800a4f2:	4770      	bx	lr
 800a4f4:	20000018 	.word	0x20000018

0800a4f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a4fc:	f7ff fff2 	bl	800a4e4 <HAL_RCC_GetHCLKFreq>
 800a500:	4602      	mov	r2, r0
 800a502:	4b05      	ldr	r3, [pc, #20]	@ (800a518 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	0a1b      	lsrs	r3, r3, #8
 800a508:	f003 0307 	and.w	r3, r3, #7
 800a50c:	4903      	ldr	r1, [pc, #12]	@ (800a51c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a50e:	5ccb      	ldrb	r3, [r1, r3]
 800a510:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a514:	4618      	mov	r0, r3
 800a516:	bd80      	pop	{r7, pc}
 800a518:	40021000 	.word	0x40021000
 800a51c:	08015310 	.word	0x08015310

0800a520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a524:	f7ff ffde 	bl	800a4e4 <HAL_RCC_GetHCLKFreq>
 800a528:	4602      	mov	r2, r0
 800a52a:	4b05      	ldr	r3, [pc, #20]	@ (800a540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	0adb      	lsrs	r3, r3, #11
 800a530:	f003 0307 	and.w	r3, r3, #7
 800a534:	4903      	ldr	r1, [pc, #12]	@ (800a544 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a536:	5ccb      	ldrb	r3, [r1, r3]
 800a538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	40021000 	.word	0x40021000
 800a544:	08015310 	.word	0x08015310

0800a548 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	220f      	movs	r2, #15
 800a556:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a558:	4b11      	ldr	r3, [pc, #68]	@ (800a5a0 <HAL_RCC_GetClockConfig+0x58>)
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	f003 0203 	and.w	r2, r3, #3
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a564:	4b0e      	ldr	r3, [pc, #56]	@ (800a5a0 <HAL_RCC_GetClockConfig+0x58>)
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a570:	4b0b      	ldr	r3, [pc, #44]	@ (800a5a0 <HAL_RCC_GetClockConfig+0x58>)
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a57c:	4b08      	ldr	r3, [pc, #32]	@ (800a5a0 <HAL_RCC_GetClockConfig+0x58>)
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	08db      	lsrs	r3, r3, #3
 800a582:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a58a:	4b06      	ldr	r3, [pc, #24]	@ (800a5a4 <HAL_RCC_GetClockConfig+0x5c>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f003 0207 	and.w	r2, r3, #7
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800a596:	bf00      	nop
 800a598:	370c      	adds	r7, #12
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bc80      	pop	{r7}
 800a59e:	4770      	bx	lr
 800a5a0:	40021000 	.word	0x40021000
 800a5a4:	40022000 	.word	0x40022000

0800a5a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b085      	sub	sp, #20
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a5b0:	4b0a      	ldr	r3, [pc, #40]	@ (800a5dc <RCC_Delay+0x34>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a0a      	ldr	r2, [pc, #40]	@ (800a5e0 <RCC_Delay+0x38>)
 800a5b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a5ba:	0a5b      	lsrs	r3, r3, #9
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	fb02 f303 	mul.w	r3, r2, r3
 800a5c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a5c4:	bf00      	nop
  }
  while (Delay --);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	1e5a      	subs	r2, r3, #1
 800a5ca:	60fa      	str	r2, [r7, #12]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d1f9      	bne.n	800a5c4 <RCC_Delay+0x1c>
}
 800a5d0:	bf00      	nop
 800a5d2:	bf00      	nop
 800a5d4:	3714      	adds	r7, #20
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bc80      	pop	{r7}
 800a5da:	4770      	bx	lr
 800a5dc:	20000018 	.word	0x20000018
 800a5e0:	10624dd3 	.word	0x10624dd3

0800a5e4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d101      	bne.n	800a5f6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e022      	b.n	800a63c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d105      	bne.n	800a60e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f7fb f82f 	bl	800566c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2203      	movs	r2, #3
 800a612:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 f814 	bl	800a644 <HAL_SD_InitCard>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d001      	beq.n	800a626 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	e00a      	b.n	800a63c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2201      	movs	r2, #1
 800a636:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3708      	adds	r7, #8
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a644:	b5b0      	push	{r4, r5, r7, lr}
 800a646:	b08e      	sub	sp, #56	@ 0x38
 800a648:	af04      	add	r7, sp, #16
 800a64a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a64c:	2300      	movs	r3, #0
 800a64e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a650:	2300      	movs	r3, #0
 800a652:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a654:	2300      	movs	r3, #0
 800a656:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a658:	2300      	movs	r3, #0
 800a65a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a65c:	2300      	movs	r3, #0
 800a65e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a660:	2376      	movs	r3, #118	@ 0x76
 800a662:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681d      	ldr	r5, [r3, #0]
 800a668:	466c      	mov	r4, sp
 800a66a:	f107 0314 	add.w	r3, r7, #20
 800a66e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a672:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a676:	f107 0308 	add.w	r3, r7, #8
 800a67a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a67c:	4628      	mov	r0, r5
 800a67e:	f002 fec3 	bl	800d408 <SDIO_Init>
 800a682:	4603      	mov	r3, r0
 800a684:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800a688:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d001      	beq.n	800a694 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	e04f      	b.n	800a734 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a694:	4b29      	ldr	r3, [pc, #164]	@ (800a73c <HAL_SD_InitCard+0xf8>)
 800a696:	2200      	movs	r2, #0
 800a698:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f002 fef8 	bl	800d494 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a6a4:	4b25      	ldr	r3, [pc, #148]	@ (800a73c <HAL_SD_InitCard+0xf8>)
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800a6aa:	2002      	movs	r0, #2
 800a6ac:	f7fc fdb4 	bl	8007218 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 fe69 	bl	800b388 <SD_PowerON>
 800a6b6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a6b8:	6a3b      	ldr	r3, [r7, #32]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00b      	beq.n	800a6d6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6ca:	6a3b      	ldr	r3, [r7, #32]
 800a6cc:	431a      	orrs	r2, r3
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e02e      	b.n	800a734 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 fd87 	bl	800b1ea <SD_InitCard>
 800a6dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a6de:	6a3b      	ldr	r3, [r7, #32]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d00b      	beq.n	800a6fc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6f0:	6a3b      	ldr	r3, [r7, #32]
 800a6f2:	431a      	orrs	r2, r3
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e01b      	b.n	800a734 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a704:	4618      	mov	r0, r3
 800a706:	f002 ff51 	bl	800d5ac <SDMMC_CmdBlockLength>
 800a70a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a70c:	6a3b      	ldr	r3, [r7, #32]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d00f      	beq.n	800a732 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a0a      	ldr	r2, [pc, #40]	@ (800a740 <HAL_SD_InitCard+0xfc>)
 800a718:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a71e:	6a3b      	ldr	r3, [r7, #32]
 800a720:	431a      	orrs	r2, r3
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2201      	movs	r2, #1
 800a72a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a72e:	2301      	movs	r3, #1
 800a730:	e000      	b.n	800a734 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800a732:	2300      	movs	r3, #0
}
 800a734:	4618      	mov	r0, r3
 800a736:	3728      	adds	r7, #40	@ 0x28
 800a738:	46bd      	mov	sp, r7
 800a73a:	bdb0      	pop	{r4, r5, r7, pc}
 800a73c:	423000a0 	.word	0x423000a0
 800a740:	004005ff 	.word	0x004005ff

0800a744 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b092      	sub	sp, #72	@ 0x48
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	607a      	str	r2, [r7, #4]
 800a750:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a752:	f7fc fd57 	bl	8007204 <HAL_GetTick>
 800a756:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d107      	bne.n	800a776 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a76a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a772:	2301      	movs	r3, #1
 800a774:	e1bd      	b.n	800aaf2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a77c:	b2db      	uxtb	r3, r3
 800a77e:	2b01      	cmp	r3, #1
 800a780:	f040 81b0 	bne.w	800aae4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2200      	movs	r2, #0
 800a788:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a78a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	441a      	add	r2, r3
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a794:	429a      	cmp	r2, r3
 800a796:	d907      	bls.n	800a7a8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a79c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	e1a4      	b.n	800aaf2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2203      	movs	r2, #3
 800a7ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d002      	beq.n	800a7c6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800a7c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c2:	025b      	lsls	r3, r3, #9
 800a7c4:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a7c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7ca:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	025b      	lsls	r3, r3, #9
 800a7d0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a7d2:	2390      	movs	r3, #144	@ 0x90
 800a7d4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a7d6:	2302      	movs	r3, #2
 800a7d8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f107 0214 	add.w	r2, r7, #20
 800a7ea:	4611      	mov	r1, r2
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f002 feb2 	bl	800d556 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d90a      	bls.n	800a80e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2202      	movs	r2, #2
 800a7fc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a804:	4618      	mov	r0, r3
 800a806:	f002 ff15 	bl	800d634 <SDMMC_CmdReadMultiBlock>
 800a80a:	6478      	str	r0, [r7, #68]	@ 0x44
 800a80c:	e009      	b.n	800a822 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2201      	movs	r2, #1
 800a812:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a81a:	4618      	mov	r0, r3
 800a81c:	f002 fee8 	bl	800d5f0 <SDMMC_CmdReadSingleBlock>
 800a820:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a822:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a824:	2b00      	cmp	r3, #0
 800a826:	d012      	beq.n	800a84e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a7a      	ldr	r2, [pc, #488]	@ (800aa18 <HAL_SD_ReadBlocks+0x2d4>)
 800a82e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a836:	431a      	orrs	r2, r3
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2201      	movs	r2, #1
 800a840:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2200      	movs	r2, #0
 800a848:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	e151      	b.n	800aaf2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a852:	e061      	b.n	800a918 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a85a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d03c      	beq.n	800a8dc <HAL_SD_ReadBlocks+0x198>
 800a862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a864:	2b00      	cmp	r3, #0
 800a866:	d039      	beq.n	800a8dc <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800a868:	2300      	movs	r3, #0
 800a86a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a86c:	e033      	b.n	800a8d6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4618      	mov	r0, r3
 800a874:	f002 fdf2 	bl	800d45c <SDIO_ReadFIFO>
 800a878:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800a87a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a87c:	b2da      	uxtb	r2, r3
 800a87e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a880:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a884:	3301      	adds	r3, #1
 800a886:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a88a:	3b01      	subs	r3, #1
 800a88c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a88e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a890:	0a1b      	lsrs	r3, r3, #8
 800a892:	b2da      	uxtb	r2, r3
 800a894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a896:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a89a:	3301      	adds	r3, #1
 800a89c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a89e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a6:	0c1b      	lsrs	r3, r3, #16
 800a8a8:	b2da      	uxtb	r2, r3
 800a8aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8ac:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a8ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a8b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8b6:	3b01      	subs	r3, #1
 800a8b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a8ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8bc:	0e1b      	lsrs	r3, r3, #24
 800a8be:	b2da      	uxtb	r2, r3
 800a8c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8c2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a8c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a8ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8cc:	3b01      	subs	r3, #1
 800a8ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800a8d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8d8:	2b07      	cmp	r3, #7
 800a8da:	d9c8      	bls.n	800a86e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a8dc:	f7fc fc92 	bl	8007204 <HAL_GetTick>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e4:	1ad3      	subs	r3, r2, r3
 800a8e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d902      	bls.n	800a8f2 <HAL_SD_ReadBlocks+0x1ae>
 800a8ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d112      	bne.n	800a918 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a48      	ldr	r2, [pc, #288]	@ (800aa18 <HAL_SD_ReadBlocks+0x2d4>)
 800a8f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8fe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2201      	movs	r2, #1
 800a90a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2200      	movs	r2, #0
 800a912:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800a914:	2303      	movs	r3, #3
 800a916:	e0ec      	b.n	800aaf2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a91e:	f240 332a 	movw	r3, #810	@ 0x32a
 800a922:	4013      	ands	r3, r2
 800a924:	2b00      	cmp	r3, #0
 800a926:	d095      	beq.n	800a854 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a92e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a932:	2b00      	cmp	r3, #0
 800a934:	d022      	beq.n	800a97c <HAL_SD_ReadBlocks+0x238>
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d91f      	bls.n	800a97c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a940:	2b03      	cmp	r3, #3
 800a942:	d01b      	beq.n	800a97c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4618      	mov	r0, r3
 800a94a:	f002 fed9 	bl	800d700 <SDMMC_CmdStopTransfer>
 800a94e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a950:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a952:	2b00      	cmp	r3, #0
 800a954:	d012      	beq.n	800a97c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a2f      	ldr	r2, [pc, #188]	@ (800aa18 <HAL_SD_ReadBlocks+0x2d4>)
 800a95c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a962:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a964:	431a      	orrs	r2, r3
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2201      	movs	r2, #1
 800a96e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2200      	movs	r2, #0
 800a976:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800a978:	2301      	movs	r3, #1
 800a97a:	e0ba      	b.n	800aaf2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a982:	f003 0308 	and.w	r3, r3, #8
 800a986:	2b00      	cmp	r3, #0
 800a988:	d012      	beq.n	800a9b0 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a22      	ldr	r2, [pc, #136]	@ (800aa18 <HAL_SD_ReadBlocks+0x2d4>)
 800a990:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a996:	f043 0208 	orr.w	r2, r3, #8
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e0a0      	b.n	800aaf2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9b6:	f003 0302 	and.w	r3, r3, #2
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d012      	beq.n	800a9e4 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a15      	ldr	r2, [pc, #84]	@ (800aa18 <HAL_SD_ReadBlocks+0x2d4>)
 800a9c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9ca:	f043 0202 	orr.w	r2, r3, #2
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e086      	b.n	800aaf2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9ea:	f003 0320 	and.w	r3, r3, #32
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d063      	beq.n	800aaba <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a08      	ldr	r2, [pc, #32]	@ (800aa18 <HAL_SD_ReadBlocks+0x2d4>)
 800a9f8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9fe:	f043 0220 	orr.w	r2, r3, #32
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2201      	movs	r2, #1
 800aa0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2200      	movs	r2, #0
 800aa12:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800aa14:	2301      	movs	r3, #1
 800aa16:	e06c      	b.n	800aaf2 <HAL_SD_ReadBlocks+0x3ae>
 800aa18:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4618      	mov	r0, r3
 800aa22:	f002 fd1b 	bl	800d45c <SDIO_ReadFIFO>
 800aa26:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800aa28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa2e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800aa30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa32:	3301      	adds	r3, #1
 800aa34:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800aa36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa38:	3b01      	subs	r3, #1
 800aa3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800aa3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa3e:	0a1b      	lsrs	r3, r3, #8
 800aa40:	b2da      	uxtb	r2, r3
 800aa42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa44:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800aa46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa48:	3301      	adds	r3, #1
 800aa4a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800aa4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800aa52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa54:	0c1b      	lsrs	r3, r3, #16
 800aa56:	b2da      	uxtb	r2, r3
 800aa58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa5a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800aa5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa5e:	3301      	adds	r3, #1
 800aa60:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800aa62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa64:	3b01      	subs	r3, #1
 800aa66:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800aa68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa6a:	0e1b      	lsrs	r3, r3, #24
 800aa6c:	b2da      	uxtb	r2, r3
 800aa6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa70:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800aa72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa74:	3301      	adds	r3, #1
 800aa76:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800aa78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800aa7e:	f7fc fbc1 	bl	8007204 <HAL_GetTick>
 800aa82:	4602      	mov	r2, r0
 800aa84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa86:	1ad3      	subs	r3, r2, r3
 800aa88:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d902      	bls.n	800aa94 <HAL_SD_ReadBlocks+0x350>
 800aa8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d112      	bne.n	800aaba <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a18      	ldr	r2, [pc, #96]	@ (800aafc <HAL_SD_ReadBlocks+0x3b8>)
 800aa9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaa0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2200      	movs	r2, #0
 800aab4:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800aab6:	2301      	movs	r3, #1
 800aab8:	e01b      	b.n	800aaf2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aac0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d002      	beq.n	800aace <HAL_SD_ReadBlocks+0x38a>
 800aac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1a6      	bne.n	800aa1c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f240 523a 	movw	r2, #1338	@ 0x53a
 800aad6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800aae0:	2300      	movs	r3, #0
 800aae2:	e006      	b.n	800aaf2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aae8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800aaf0:	2301      	movs	r3, #1
  }
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3748      	adds	r7, #72	@ 0x48
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	004005ff 	.word	0x004005ff

0800ab00 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b092      	sub	sp, #72	@ 0x48
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	60b9      	str	r1, [r7, #8]
 800ab0a:	607a      	str	r2, [r7, #4]
 800ab0c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ab0e:	f7fc fb79 	bl	8007204 <HAL_GetTick>
 800ab12:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d107      	bne.n	800ab32 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab26:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e166      	b.n	800ae00 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	f040 8159 	bne.w	800adf2 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2200      	movs	r2, #0
 800ab44:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ab46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	441a      	add	r2, r3
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d907      	bls.n	800ab64 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab58:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800ab60:	2301      	movs	r3, #1
 800ab62:	e14d      	b.n	800ae00 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2203      	movs	r2, #3
 800ab68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2200      	movs	r2, #0
 800ab72:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d002      	beq.n	800ab82 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800ab7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab7e:	025b      	lsls	r3, r3, #9
 800ab80:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ab82:	f04f 33ff 	mov.w	r3, #4294967295
 800ab86:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	025b      	lsls	r3, r3, #9
 800ab8c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ab8e:	2390      	movs	r3, #144	@ 0x90
 800ab90:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800ab92:	2300      	movs	r3, #0
 800ab94:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ab96:	2300      	movs	r3, #0
 800ab98:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f107 0218 	add.w	r2, r7, #24
 800aba6:	4611      	mov	r1, r2
 800aba8:	4618      	mov	r0, r3
 800abaa:	f002 fcd4 	bl	800d556 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d90a      	bls.n	800abca <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2220      	movs	r2, #32
 800abb8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800abc0:	4618      	mov	r0, r3
 800abc2:	f002 fd7b 	bl	800d6bc <SDMMC_CmdWriteMultiBlock>
 800abc6:	6478      	str	r0, [r7, #68]	@ 0x44
 800abc8:	e009      	b.n	800abde <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2210      	movs	r2, #16
 800abce:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800abd6:	4618      	mov	r0, r3
 800abd8:	f002 fd4e 	bl	800d678 <SDMMC_CmdWriteSingleBlock>
 800abdc:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800abde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d012      	beq.n	800ac0a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a87      	ldr	r2, [pc, #540]	@ (800ae08 <HAL_SD_WriteBlocks+0x308>)
 800abea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abf2:	431a      	orrs	r2, r3
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2201      	movs	r2, #1
 800abfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2200      	movs	r2, #0
 800ac04:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800ac06:	2301      	movs	r3, #1
 800ac08:	e0fa      	b.n	800ae00 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800ac0a:	69fb      	ldr	r3, [r7, #28]
 800ac0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800ac0e:	e065      	b.n	800acdc <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d040      	beq.n	800aca0 <HAL_SD_WriteBlocks+0x1a0>
 800ac1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d03d      	beq.n	800aca0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800ac24:	2300      	movs	r3, #0
 800ac26:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac28:	e037      	b.n	800ac9a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800ac2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ac30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac32:	3301      	adds	r3, #1
 800ac34:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800ac36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac38:	3b01      	subs	r3, #1
 800ac3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800ac3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	021a      	lsls	r2, r3, #8
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	4313      	orrs	r3, r2
 800ac46:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ac48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800ac4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac50:	3b01      	subs	r3, #1
 800ac52:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800ac54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	041a      	lsls	r2, r3, #16
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ac60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac62:	3301      	adds	r3, #1
 800ac64:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800ac66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac68:	3b01      	subs	r3, #1
 800ac6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800ac6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	061a      	lsls	r2, r3, #24
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	4313      	orrs	r3, r2
 800ac76:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800ac78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800ac7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac80:	3b01      	subs	r3, #1
 800ac82:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f107 0214 	add.w	r2, r7, #20
 800ac8c:	4611      	mov	r1, r2
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f002 fbf0 	bl	800d474 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800ac94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac96:	3301      	adds	r3, #1
 800ac98:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac9c:	2b07      	cmp	r3, #7
 800ac9e:	d9c4      	bls.n	800ac2a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800aca0:	f7fc fab0 	bl	8007204 <HAL_GetTick>
 800aca4:	4602      	mov	r2, r0
 800aca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca8:	1ad3      	subs	r3, r2, r3
 800acaa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800acac:	429a      	cmp	r2, r3
 800acae:	d902      	bls.n	800acb6 <HAL_SD_WriteBlocks+0x1b6>
 800acb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d112      	bne.n	800acdc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a53      	ldr	r2, [pc, #332]	@ (800ae08 <HAL_SD_WriteBlocks+0x308>)
 800acbc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800acc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800acc4:	431a      	orrs	r2, r3
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2201      	movs	r2, #1
 800acce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800acd8:	2303      	movs	r3, #3
 800acda:	e091      	b.n	800ae00 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ace2:	f240 331a 	movw	r3, #794	@ 0x31a
 800ace6:	4013      	ands	r3, r2
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d091      	beq.n	800ac10 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d022      	beq.n	800ad40 <HAL_SD_WriteBlocks+0x240>
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d91f      	bls.n	800ad40 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad04:	2b03      	cmp	r3, #3
 800ad06:	d01b      	beq.n	800ad40 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f002 fcf7 	bl	800d700 <SDMMC_CmdStopTransfer>
 800ad12:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800ad14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d012      	beq.n	800ad40 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a3a      	ldr	r2, [pc, #232]	@ (800ae08 <HAL_SD_WriteBlocks+0x308>)
 800ad20:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad28:	431a      	orrs	r2, r3
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2201      	movs	r2, #1
 800ad32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	e05f      	b.n	800ae00 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad46:	f003 0308 	and.w	r3, r3, #8
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d012      	beq.n	800ad74 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a2d      	ldr	r2, [pc, #180]	@ (800ae08 <HAL_SD_WriteBlocks+0x308>)
 800ad54:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad5a:	f043 0208 	orr.w	r2, r3, #8
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2201      	movs	r2, #1
 800ad66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800ad70:	2301      	movs	r3, #1
 800ad72:	e045      	b.n	800ae00 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad7a:	f003 0302 	and.w	r3, r3, #2
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d012      	beq.n	800ada8 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a20      	ldr	r2, [pc, #128]	@ (800ae08 <HAL_SD_WriteBlocks+0x308>)
 800ad88:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad8e:	f043 0202 	orr.w	r2, r3, #2
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2201      	movs	r2, #1
 800ad9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2200      	movs	r2, #0
 800ada2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	e02b      	b.n	800ae00 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adae:	f003 0310 	and.w	r3, r3, #16
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d012      	beq.n	800addc <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a13      	ldr	r2, [pc, #76]	@ (800ae08 <HAL_SD_WriteBlocks+0x308>)
 800adbc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adc2:	f043 0210 	orr.w	r2, r3, #16
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2201      	movs	r2, #1
 800adce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2200      	movs	r2, #0
 800add6:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	e011      	b.n	800ae00 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f240 523a 	movw	r2, #1338	@ 0x53a
 800ade4:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2201      	movs	r2, #1
 800adea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800adee:	2300      	movs	r3, #0
 800adf0:	e006      	b.n	800ae00 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adf6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800adfe:	2301      	movs	r3, #1
  }
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3748      	adds	r7, #72	@ 0x48
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	004005ff 	.word	0x004005ff

0800ae0c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae1a:	0f9b      	lsrs	r3, r3, #30
 800ae1c:	b2da      	uxtb	r2, r3
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae26:	0e9b      	lsrs	r3, r3, #26
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	f003 030f 	and.w	r3, r3, #15
 800ae2e:	b2da      	uxtb	r2, r3
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae38:	0e1b      	lsrs	r3, r3, #24
 800ae3a:	b2db      	uxtb	r3, r3
 800ae3c:	f003 0303 	and.w	r3, r3, #3
 800ae40:	b2da      	uxtb	r2, r3
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae4a:	0c1b      	lsrs	r3, r3, #16
 800ae4c:	b2da      	uxtb	r2, r3
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae56:	0a1b      	lsrs	r3, r3, #8
 800ae58:	b2da      	uxtb	r2, r3
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae62:	b2da      	uxtb	r2, r3
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae6c:	0d1b      	lsrs	r3, r3, #20
 800ae6e:	b29a      	uxth	r2, r3
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae78:	0c1b      	lsrs	r3, r3, #16
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	f003 030f 	and.w	r3, r3, #15
 800ae80:	b2da      	uxtb	r2, r3
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae8a:	0bdb      	lsrs	r3, r3, #15
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	f003 0301 	and.w	r3, r3, #1
 800ae92:	b2da      	uxtb	r2, r3
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae9c:	0b9b      	lsrs	r3, r3, #14
 800ae9e:	b2db      	uxtb	r3, r3
 800aea0:	f003 0301 	and.w	r3, r3, #1
 800aea4:	b2da      	uxtb	r2, r3
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aeae:	0b5b      	lsrs	r3, r3, #13
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	f003 0301 	and.w	r3, r3, #1
 800aeb6:	b2da      	uxtb	r2, r3
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aec0:	0b1b      	lsrs	r3, r3, #12
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	f003 0301 	and.w	r3, r3, #1
 800aec8:	b2da      	uxtb	r2, r3
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	2200      	movs	r2, #0
 800aed2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d163      	bne.n	800afa4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aee0:	009a      	lsls	r2, r3, #2
 800aee2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800aee6:	4013      	ands	r3, r2
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800aeec:	0f92      	lsrs	r2, r2, #30
 800aeee:	431a      	orrs	r2, r3
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aef8:	0edb      	lsrs	r3, r3, #27
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	f003 0307 	and.w	r3, r3, #7
 800af00:	b2da      	uxtb	r2, r3
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af0a:	0e1b      	lsrs	r3, r3, #24
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	f003 0307 	and.w	r3, r3, #7
 800af12:	b2da      	uxtb	r2, r3
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af1c:	0d5b      	lsrs	r3, r3, #21
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	f003 0307 	and.w	r3, r3, #7
 800af24:	b2da      	uxtb	r2, r3
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af2e:	0c9b      	lsrs	r3, r3, #18
 800af30:	b2db      	uxtb	r3, r3
 800af32:	f003 0307 	and.w	r3, r3, #7
 800af36:	b2da      	uxtb	r2, r3
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af40:	0bdb      	lsrs	r3, r3, #15
 800af42:	b2db      	uxtb	r3, r3
 800af44:	f003 0307 	and.w	r3, r3, #7
 800af48:	b2da      	uxtb	r2, r3
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	1c5a      	adds	r2, r3, #1
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	7e1b      	ldrb	r3, [r3, #24]
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	f003 0307 	and.w	r3, r3, #7
 800af62:	3302      	adds	r3, #2
 800af64:	2201      	movs	r2, #1
 800af66:	fa02 f303 	lsl.w	r3, r2, r3
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800af6e:	fb03 f202 	mul.w	r2, r3, r2
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	7a1b      	ldrb	r3, [r3, #8]
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	f003 030f 	and.w	r3, r3, #15
 800af80:	2201      	movs	r2, #1
 800af82:	409a      	lsls	r2, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800af90:	0a52      	lsrs	r2, r2, #9
 800af92:	fb03 f202 	mul.w	r2, r3, r2
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800afa0:	661a      	str	r2, [r3, #96]	@ 0x60
 800afa2:	e031      	b.n	800b008 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d11d      	bne.n	800afe8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800afb0:	041b      	lsls	r3, r3, #16
 800afb2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afba:	0c1b      	lsrs	r3, r3, #16
 800afbc:	431a      	orrs	r2, r3
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	691b      	ldr	r3, [r3, #16]
 800afc6:	3301      	adds	r3, #1
 800afc8:	029a      	lsls	r2, r3, #10
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800afdc:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	661a      	str	r2, [r3, #96]	@ 0x60
 800afe6:	e00f      	b.n	800b008 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a58      	ldr	r2, [pc, #352]	@ (800b150 <HAL_SD_GetCardCSD+0x344>)
 800afee:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aff4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2201      	movs	r2, #1
 800b000:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b004:	2301      	movs	r3, #1
 800b006:	e09d      	b.n	800b144 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b00c:	0b9b      	lsrs	r3, r3, #14
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	f003 0301 	and.w	r3, r3, #1
 800b014:	b2da      	uxtb	r2, r3
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b01e:	09db      	lsrs	r3, r3, #7
 800b020:	b2db      	uxtb	r3, r3
 800b022:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b026:	b2da      	uxtb	r2, r3
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b030:	b2db      	uxtb	r3, r3
 800b032:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b036:	b2da      	uxtb	r2, r3
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b040:	0fdb      	lsrs	r3, r3, #31
 800b042:	b2da      	uxtb	r2, r3
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b04c:	0f5b      	lsrs	r3, r3, #29
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	f003 0303 	and.w	r3, r3, #3
 800b054:	b2da      	uxtb	r2, r3
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b05e:	0e9b      	lsrs	r3, r3, #26
 800b060:	b2db      	uxtb	r3, r3
 800b062:	f003 0307 	and.w	r3, r3, #7
 800b066:	b2da      	uxtb	r2, r3
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b070:	0d9b      	lsrs	r3, r3, #22
 800b072:	b2db      	uxtb	r3, r3
 800b074:	f003 030f 	and.w	r3, r3, #15
 800b078:	b2da      	uxtb	r2, r3
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b082:	0d5b      	lsrs	r3, r3, #21
 800b084:	b2db      	uxtb	r3, r3
 800b086:	f003 0301 	and.w	r3, r3, #1
 800b08a:	b2da      	uxtb	r2, r3
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	2200      	movs	r2, #0
 800b096:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b09e:	0c1b      	lsrs	r3, r3, #16
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	f003 0301 	and.w	r3, r3, #1
 800b0a6:	b2da      	uxtb	r2, r3
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0b2:	0bdb      	lsrs	r3, r3, #15
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	f003 0301 	and.w	r3, r3, #1
 800b0ba:	b2da      	uxtb	r2, r3
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0c6:	0b9b      	lsrs	r3, r3, #14
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	f003 0301 	and.w	r3, r3, #1
 800b0ce:	b2da      	uxtb	r2, r3
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0da:	0b5b      	lsrs	r3, r3, #13
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	f003 0301 	and.w	r3, r3, #1
 800b0e2:	b2da      	uxtb	r2, r3
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0ee:	0b1b      	lsrs	r3, r3, #12
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	f003 0301 	and.w	r3, r3, #1
 800b0f6:	b2da      	uxtb	r2, r3
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b102:	0a9b      	lsrs	r3, r3, #10
 800b104:	b2db      	uxtb	r3, r3
 800b106:	f003 0303 	and.w	r3, r3, #3
 800b10a:	b2da      	uxtb	r2, r3
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b116:	0a1b      	lsrs	r3, r3, #8
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	f003 0303 	and.w	r3, r3, #3
 800b11e:	b2da      	uxtb	r2, r3
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b12a:	085b      	lsrs	r3, r3, #1
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b132:	b2da      	uxtb	r2, r3
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	2201      	movs	r2, #1
 800b13e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800b142:	2300      	movs	r3, #0
}
 800b144:	4618      	mov	r0, r3
 800b146:	370c      	adds	r7, #12
 800b148:	46bd      	mov	sp, r7
 800b14a:	bc80      	pop	{r7}
 800b14c:	4770      	bx	lr
 800b14e:	bf00      	nop
 800b150:	004005ff 	.word	0x004005ff

0800b154 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b19e:	2300      	movs	r3, #0
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bc80      	pop	{r7}
 800b1a8:	4770      	bx	lr

0800b1aa <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b086      	sub	sp, #24
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b1b6:	f107 030c 	add.w	r3, r7, #12
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 f971 	bl	800b4a4 <SD_SendStatus>
 800b1c2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d005      	beq.n	800b1d6 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	431a      	orrs	r2, r3
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	0a5b      	lsrs	r3, r3, #9
 800b1da:	f003 030f 	and.w	r3, r3, #15
 800b1de:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b1e0:	693b      	ldr	r3, [r7, #16]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3718      	adds	r7, #24
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b1ea:	b5b0      	push	{r4, r5, r7, lr}
 800b1ec:	b094      	sub	sp, #80	@ 0x50
 800b1ee:	af04      	add	r7, sp, #16
 800b1f0:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f002 f957 	bl	800d4ae <SDIO_GetPowerState>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	d102      	bne.n	800b20c <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b206:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800b20a:	e0b8      	b.n	800b37e <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b210:	2b03      	cmp	r3, #3
 800b212:	d02f      	beq.n	800b274 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4618      	mov	r0, r3
 800b21a:	f002 fb38 	bl	800d88e <SDMMC_CmdSendCID>
 800b21e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b222:	2b00      	cmp	r3, #0
 800b224:	d001      	beq.n	800b22a <SD_InitCard+0x40>
    {
      return errorstate;
 800b226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b228:	e0a9      	b.n	800b37e <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	2100      	movs	r1, #0
 800b230:	4618      	mov	r0, r3
 800b232:	f002 f97e 	bl	800d532 <SDIO_GetResponse>
 800b236:	4602      	mov	r2, r0
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	2104      	movs	r1, #4
 800b242:	4618      	mov	r0, r3
 800b244:	f002 f975 	bl	800d532 <SDIO_GetResponse>
 800b248:	4602      	mov	r2, r0
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2108      	movs	r1, #8
 800b254:	4618      	mov	r0, r3
 800b256:	f002 f96c 	bl	800d532 <SDIO_GetResponse>
 800b25a:	4602      	mov	r2, r0
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	210c      	movs	r1, #12
 800b266:	4618      	mov	r0, r3
 800b268:	f002 f963 	bl	800d532 <SDIO_GetResponse>
 800b26c:	4602      	mov	r2, r0
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b278:	2b03      	cmp	r3, #3
 800b27a:	d00d      	beq.n	800b298 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f107 020e 	add.w	r2, r7, #14
 800b284:	4611      	mov	r1, r2
 800b286:	4618      	mov	r0, r3
 800b288:	f002 fb3e 	bl	800d908 <SDMMC_CmdSetRelAdd>
 800b28c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b28e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b290:	2b00      	cmp	r3, #0
 800b292:	d001      	beq.n	800b298 <SD_InitCard+0xae>
    {
      return errorstate;
 800b294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b296:	e072      	b.n	800b37e <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b29c:	2b03      	cmp	r3, #3
 800b29e:	d036      	beq.n	800b30e <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b2a0:	89fb      	ldrh	r3, [r7, #14]
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2b0:	041b      	lsls	r3, r3, #16
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	4610      	mov	r0, r2
 800b2b6:	f002 fb08 	bl	800d8ca <SDMMC_CmdSendCSD>
 800b2ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b2bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d001      	beq.n	800b2c6 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b2c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2c4:	e05b      	b.n	800b37e <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2100      	movs	r1, #0
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f002 f930 	bl	800d532 <SDIO_GetResponse>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2104      	movs	r1, #4
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f002 f927 	bl	800d532 <SDIO_GetResponse>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2108      	movs	r1, #8
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f002 f91e 	bl	800d532 <SDIO_GetResponse>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	210c      	movs	r1, #12
 800b302:	4618      	mov	r0, r3
 800b304:	f002 f915 	bl	800d532 <SDIO_GetResponse>
 800b308:	4602      	mov	r2, r0
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	2104      	movs	r1, #4
 800b314:	4618      	mov	r0, r3
 800b316:	f002 f90c 	bl	800d532 <SDIO_GetResponse>
 800b31a:	4603      	mov	r3, r0
 800b31c:	0d1a      	lsrs	r2, r3, #20
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b322:	f107 0310 	add.w	r3, r7, #16
 800b326:	4619      	mov	r1, r3
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f7ff fd6f 	bl	800ae0c <HAL_SD_GetCardCSD>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d002      	beq.n	800b33a <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b334:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b338:	e021      	b.n	800b37e <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6819      	ldr	r1, [r3, #0]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b342:	041b      	lsls	r3, r3, #16
 800b344:	2200      	movs	r2, #0
 800b346:	461c      	mov	r4, r3
 800b348:	4615      	mov	r5, r2
 800b34a:	4622      	mov	r2, r4
 800b34c:	462b      	mov	r3, r5
 800b34e:	4608      	mov	r0, r1
 800b350:	f002 f9f8 	bl	800d744 <SDMMC_CmdSelDesel>
 800b354:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d001      	beq.n	800b360 <SD_InitCard+0x176>
  {
    return errorstate;
 800b35c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b35e:	e00e      	b.n	800b37e <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681d      	ldr	r5, [r3, #0]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	466c      	mov	r4, sp
 800b368:	f103 0210 	add.w	r2, r3, #16
 800b36c:	ca07      	ldmia	r2, {r0, r1, r2}
 800b36e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b372:	3304      	adds	r3, #4
 800b374:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b376:	4628      	mov	r0, r5
 800b378:	f002 f846 	bl	800d408 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3740      	adds	r7, #64	@ 0x40
 800b382:	46bd      	mov	sp, r7
 800b384:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b388 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b086      	sub	sp, #24
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b390:	2300      	movs	r3, #0
 800b392:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b394:	2300      	movs	r3, #0
 800b396:	617b      	str	r3, [r7, #20]
 800b398:	2300      	movs	r3, #0
 800b39a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f002 f9f2 	bl	800d78a <SDMMC_CmdGoIdleState>
 800b3a6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d001      	beq.n	800b3b2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	e072      	b.n	800b498 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f002 fa05 	bl	800d7c6 <SDMMC_CmdOperCond>
 800b3bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00d      	beq.n	800b3e0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f002 f9db 	bl	800d78a <SDMMC_CmdGoIdleState>
 800b3d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d004      	beq.n	800b3e6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	e05b      	b.n	800b498 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d137      	bne.n	800b45e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	2100      	movs	r1, #0
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f002 fa05 	bl	800d804 <SDMMC_CmdAppCommand>
 800b3fa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d02d      	beq.n	800b45e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b402:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b406:	e047      	b.n	800b498 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2100      	movs	r1, #0
 800b40e:	4618      	mov	r0, r3
 800b410:	f002 f9f8 	bl	800d804 <SDMMC_CmdAppCommand>
 800b414:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d001      	beq.n	800b420 <SD_PowerON+0x98>
    {
      return errorstate;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	e03b      	b.n	800b498 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	491e      	ldr	r1, [pc, #120]	@ (800b4a0 <SD_PowerON+0x118>)
 800b426:	4618      	mov	r0, r3
 800b428:	f002 fa0e 	bl	800d848 <SDMMC_CmdAppOperCommand>
 800b42c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d002      	beq.n	800b43a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b434:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b438:	e02e      	b.n	800b498 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	2100      	movs	r1, #0
 800b440:	4618      	mov	r0, r3
 800b442:	f002 f876 	bl	800d532 <SDIO_GetResponse>
 800b446:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	0fdb      	lsrs	r3, r3, #31
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d101      	bne.n	800b454 <SD_PowerON+0xcc>
 800b450:	2301      	movs	r3, #1
 800b452:	e000      	b.n	800b456 <SD_PowerON+0xce>
 800b454:	2300      	movs	r3, #0
 800b456:	613b      	str	r3, [r7, #16]

    count++;
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	3301      	adds	r3, #1
 800b45c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b464:	4293      	cmp	r3, r2
 800b466:	d802      	bhi.n	800b46e <SD_PowerON+0xe6>
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d0cc      	beq.n	800b408 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b474:	4293      	cmp	r3, r2
 800b476:	d902      	bls.n	800b47e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b478:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b47c:	e00c      	b.n	800b498 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b484:	2b00      	cmp	r3, #0
 800b486:	d003      	beq.n	800b490 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2201      	movs	r2, #1
 800b48c:	645a      	str	r2, [r3, #68]	@ 0x44
 800b48e:	e002      	b.n	800b496 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b496:	2300      	movs	r3, #0
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3718      	adds	r7, #24
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	c1100000 	.word	0xc1100000

0800b4a4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d102      	bne.n	800b4ba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b4b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b4b8:	e018      	b.n	800b4ec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4c2:	041b      	lsls	r3, r3, #16
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	4610      	mov	r0, r2
 800b4c8:	f002 fa3f 	bl	800d94a <SDMMC_CmdSendStatus>
 800b4cc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d001      	beq.n	800b4d8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	e009      	b.n	800b4ec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2100      	movs	r1, #0
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f002 f827 	bl	800d532 <SDIO_GetResponse>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b4ea:	2300      	movs	r3, #0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3710      	adds	r7, #16
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d101      	bne.n	800b506 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b502:	2301      	movs	r3, #1
 800b504:	e041      	b.n	800b58a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d106      	bne.n	800b520 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f7fa fb12 	bl	8005b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2202      	movs	r2, #2
 800b524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	3304      	adds	r3, #4
 800b530:	4619      	mov	r1, r3
 800b532:	4610      	mov	r0, r2
 800b534:	f000 fc56 	bl	800bde4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2201      	movs	r2, #1
 800b53c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2201      	movs	r2, #1
 800b544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2201      	movs	r2, #1
 800b54c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2201      	movs	r2, #1
 800b554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2201      	movs	r2, #1
 800b55c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2201      	movs	r2, #1
 800b564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2201      	movs	r2, #1
 800b56c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2201      	movs	r2, #1
 800b574:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2201      	movs	r2, #1
 800b584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3708      	adds	r7, #8
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
	...

0800b594 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d001      	beq.n	800b5ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	e044      	b.n	800b636 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2202      	movs	r2, #2
 800b5b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	68da      	ldr	r2, [r3, #12]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f042 0201 	orr.w	r2, r2, #1
 800b5c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a1d      	ldr	r2, [pc, #116]	@ (800b640 <HAL_TIM_Base_Start_IT+0xac>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d018      	beq.n	800b600 <HAL_TIM_Base_Start_IT+0x6c>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4a1c      	ldr	r2, [pc, #112]	@ (800b644 <HAL_TIM_Base_Start_IT+0xb0>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d013      	beq.n	800b600 <HAL_TIM_Base_Start_IT+0x6c>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5e0:	d00e      	beq.n	800b600 <HAL_TIM_Base_Start_IT+0x6c>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a18      	ldr	r2, [pc, #96]	@ (800b648 <HAL_TIM_Base_Start_IT+0xb4>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d009      	beq.n	800b600 <HAL_TIM_Base_Start_IT+0x6c>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a16      	ldr	r2, [pc, #88]	@ (800b64c <HAL_TIM_Base_Start_IT+0xb8>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d004      	beq.n	800b600 <HAL_TIM_Base_Start_IT+0x6c>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a15      	ldr	r2, [pc, #84]	@ (800b650 <HAL_TIM_Base_Start_IT+0xbc>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d111      	bne.n	800b624 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	689b      	ldr	r3, [r3, #8]
 800b606:	f003 0307 	and.w	r3, r3, #7
 800b60a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2b06      	cmp	r3, #6
 800b610:	d010      	beq.n	800b634 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f042 0201 	orr.w	r2, r2, #1
 800b620:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b622:	e007      	b.n	800b634 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f042 0201 	orr.w	r2, r2, #1
 800b632:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b634:	2300      	movs	r3, #0
}
 800b636:	4618      	mov	r0, r3
 800b638:	3714      	adds	r7, #20
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bc80      	pop	{r7}
 800b63e:	4770      	bx	lr
 800b640:	40012c00 	.word	0x40012c00
 800b644:	40013400 	.word	0x40013400
 800b648:	40000400 	.word	0x40000400
 800b64c:	40000800 	.word	0x40000800
 800b650:	40000c00 	.word	0x40000c00

0800b654 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d101      	bne.n	800b666 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b662:	2301      	movs	r3, #1
 800b664:	e041      	b.n	800b6ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b66c:	b2db      	uxtb	r3, r3
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d106      	bne.n	800b680 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2200      	movs	r2, #0
 800b676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 f839 	bl	800b6f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2202      	movs	r2, #2
 800b684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	3304      	adds	r3, #4
 800b690:	4619      	mov	r1, r3
 800b692:	4610      	mov	r0, r2
 800b694:	f000 fba6 	bl	800bde4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2201      	movs	r2, #1
 800b69c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b6e8:	2300      	movs	r3, #0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3708      	adds	r7, #8
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}

0800b6f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b6f2:	b480      	push	{r7}
 800b6f4:	b083      	sub	sp, #12
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b6fa:	bf00      	nop
 800b6fc:	370c      	adds	r7, #12
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bc80      	pop	{r7}
 800b702:	4770      	bx	lr

0800b704 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d109      	bne.n	800b728 <HAL_TIM_PWM_Start+0x24>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	bf14      	ite	ne
 800b720:	2301      	movne	r3, #1
 800b722:	2300      	moveq	r3, #0
 800b724:	b2db      	uxtb	r3, r3
 800b726:	e022      	b.n	800b76e <HAL_TIM_PWM_Start+0x6a>
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	2b04      	cmp	r3, #4
 800b72c:	d109      	bne.n	800b742 <HAL_TIM_PWM_Start+0x3e>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b734:	b2db      	uxtb	r3, r3
 800b736:	2b01      	cmp	r3, #1
 800b738:	bf14      	ite	ne
 800b73a:	2301      	movne	r3, #1
 800b73c:	2300      	moveq	r3, #0
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	e015      	b.n	800b76e <HAL_TIM_PWM_Start+0x6a>
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	2b08      	cmp	r3, #8
 800b746:	d109      	bne.n	800b75c <HAL_TIM_PWM_Start+0x58>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b74e:	b2db      	uxtb	r3, r3
 800b750:	2b01      	cmp	r3, #1
 800b752:	bf14      	ite	ne
 800b754:	2301      	movne	r3, #1
 800b756:	2300      	moveq	r3, #0
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	e008      	b.n	800b76e <HAL_TIM_PWM_Start+0x6a>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b762:	b2db      	uxtb	r3, r3
 800b764:	2b01      	cmp	r3, #1
 800b766:	bf14      	ite	ne
 800b768:	2301      	movne	r3, #1
 800b76a:	2300      	moveq	r3, #0
 800b76c:	b2db      	uxtb	r3, r3
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d001      	beq.n	800b776 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b772:	2301      	movs	r3, #1
 800b774:	e072      	b.n	800b85c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d104      	bne.n	800b786 <HAL_TIM_PWM_Start+0x82>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2202      	movs	r2, #2
 800b780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b784:	e013      	b.n	800b7ae <HAL_TIM_PWM_Start+0xaa>
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	2b04      	cmp	r3, #4
 800b78a:	d104      	bne.n	800b796 <HAL_TIM_PWM_Start+0x92>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2202      	movs	r2, #2
 800b790:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b794:	e00b      	b.n	800b7ae <HAL_TIM_PWM_Start+0xaa>
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	2b08      	cmp	r3, #8
 800b79a:	d104      	bne.n	800b7a6 <HAL_TIM_PWM_Start+0xa2>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2202      	movs	r2, #2
 800b7a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b7a4:	e003      	b.n	800b7ae <HAL_TIM_PWM_Start+0xaa>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2202      	movs	r2, #2
 800b7aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	6839      	ldr	r1, [r7, #0]
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f000 fdd0 	bl	800c35c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4a28      	ldr	r2, [pc, #160]	@ (800b864 <HAL_TIM_PWM_Start+0x160>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d004      	beq.n	800b7d0 <HAL_TIM_PWM_Start+0xcc>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4a27      	ldr	r2, [pc, #156]	@ (800b868 <HAL_TIM_PWM_Start+0x164>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d101      	bne.n	800b7d4 <HAL_TIM_PWM_Start+0xd0>
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	e000      	b.n	800b7d6 <HAL_TIM_PWM_Start+0xd2>
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d007      	beq.n	800b7ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b7e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4a1d      	ldr	r2, [pc, #116]	@ (800b864 <HAL_TIM_PWM_Start+0x160>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d018      	beq.n	800b826 <HAL_TIM_PWM_Start+0x122>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4a1b      	ldr	r2, [pc, #108]	@ (800b868 <HAL_TIM_PWM_Start+0x164>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d013      	beq.n	800b826 <HAL_TIM_PWM_Start+0x122>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b806:	d00e      	beq.n	800b826 <HAL_TIM_PWM_Start+0x122>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4a17      	ldr	r2, [pc, #92]	@ (800b86c <HAL_TIM_PWM_Start+0x168>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d009      	beq.n	800b826 <HAL_TIM_PWM_Start+0x122>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4a16      	ldr	r2, [pc, #88]	@ (800b870 <HAL_TIM_PWM_Start+0x16c>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d004      	beq.n	800b826 <HAL_TIM_PWM_Start+0x122>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a14      	ldr	r2, [pc, #80]	@ (800b874 <HAL_TIM_PWM_Start+0x170>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d111      	bne.n	800b84a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	f003 0307 	and.w	r3, r3, #7
 800b830:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2b06      	cmp	r3, #6
 800b836:	d010      	beq.n	800b85a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f042 0201 	orr.w	r2, r2, #1
 800b846:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b848:	e007      	b.n	800b85a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f042 0201 	orr.w	r2, r2, #1
 800b858:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b85a:	2300      	movs	r3, #0
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3710      	adds	r7, #16
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}
 800b864:	40012c00 	.word	0x40012c00
 800b868:	40013400 	.word	0x40013400
 800b86c:	40000400 	.word	0x40000400
 800b870:	40000800 	.word	0x40000800
 800b874:	40000c00 	.word	0x40000c00

0800b878 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	691b      	ldr	r3, [r3, #16]
 800b886:	f003 0302 	and.w	r3, r3, #2
 800b88a:	2b02      	cmp	r3, #2
 800b88c:	d122      	bne.n	800b8d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	68db      	ldr	r3, [r3, #12]
 800b894:	f003 0302 	and.w	r3, r3, #2
 800b898:	2b02      	cmp	r3, #2
 800b89a:	d11b      	bne.n	800b8d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f06f 0202 	mvn.w	r2, #2
 800b8a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	699b      	ldr	r3, [r3, #24]
 800b8b2:	f003 0303 	and.w	r3, r3, #3
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d003      	beq.n	800b8c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 fa76 	bl	800bdac <HAL_TIM_IC_CaptureCallback>
 800b8c0:	e005      	b.n	800b8ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 fa69 	bl	800bd9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 fa78 	bl	800bdbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	691b      	ldr	r3, [r3, #16]
 800b8da:	f003 0304 	and.w	r3, r3, #4
 800b8de:	2b04      	cmp	r3, #4
 800b8e0:	d122      	bne.n	800b928 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	68db      	ldr	r3, [r3, #12]
 800b8e8:	f003 0304 	and.w	r3, r3, #4
 800b8ec:	2b04      	cmp	r3, #4
 800b8ee:	d11b      	bne.n	800b928 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f06f 0204 	mvn.w	r2, #4
 800b8f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2202      	movs	r2, #2
 800b8fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	699b      	ldr	r3, [r3, #24]
 800b906:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d003      	beq.n	800b916 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 fa4c 	bl	800bdac <HAL_TIM_IC_CaptureCallback>
 800b914:	e005      	b.n	800b922 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 fa3f 	bl	800bd9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 fa4e 	bl	800bdbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	f003 0308 	and.w	r3, r3, #8
 800b932:	2b08      	cmp	r3, #8
 800b934:	d122      	bne.n	800b97c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	f003 0308 	and.w	r3, r3, #8
 800b940:	2b08      	cmp	r3, #8
 800b942:	d11b      	bne.n	800b97c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f06f 0208 	mvn.w	r2, #8
 800b94c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2204      	movs	r2, #4
 800b952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	69db      	ldr	r3, [r3, #28]
 800b95a:	f003 0303 	and.w	r3, r3, #3
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d003      	beq.n	800b96a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 fa22 	bl	800bdac <HAL_TIM_IC_CaptureCallback>
 800b968:	e005      	b.n	800b976 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 fa15 	bl	800bd9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 fa24 	bl	800bdbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	691b      	ldr	r3, [r3, #16]
 800b982:	f003 0310 	and.w	r3, r3, #16
 800b986:	2b10      	cmp	r3, #16
 800b988:	d122      	bne.n	800b9d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	f003 0310 	and.w	r3, r3, #16
 800b994:	2b10      	cmp	r3, #16
 800b996:	d11b      	bne.n	800b9d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f06f 0210 	mvn.w	r2, #16
 800b9a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2208      	movs	r2, #8
 800b9a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	69db      	ldr	r3, [r3, #28]
 800b9ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d003      	beq.n	800b9be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 f9f8 	bl	800bdac <HAL_TIM_IC_CaptureCallback>
 800b9bc:	e005      	b.n	800b9ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 f9eb 	bl	800bd9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 f9fa 	bl	800bdbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	691b      	ldr	r3, [r3, #16]
 800b9d6:	f003 0301 	and.w	r3, r3, #1
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d10e      	bne.n	800b9fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	f003 0301 	and.w	r3, r3, #1
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d107      	bne.n	800b9fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f06f 0201 	mvn.w	r2, #1
 800b9f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f7f9 fdee 	bl	80055d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	691b      	ldr	r3, [r3, #16]
 800ba02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba06:	2b80      	cmp	r3, #128	@ 0x80
 800ba08:	d10e      	bne.n	800ba28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba14:	2b80      	cmp	r3, #128	@ 0x80
 800ba16:	d107      	bne.n	800ba28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800ba20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 fd33 	bl	800c48e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	691b      	ldr	r3, [r3, #16]
 800ba2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba32:	2b40      	cmp	r3, #64	@ 0x40
 800ba34:	d10e      	bne.n	800ba54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	68db      	ldr	r3, [r3, #12]
 800ba3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba40:	2b40      	cmp	r3, #64	@ 0x40
 800ba42:	d107      	bne.n	800ba54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ba4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 f9be 	bl	800bdd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	691b      	ldr	r3, [r3, #16]
 800ba5a:	f003 0320 	and.w	r3, r3, #32
 800ba5e:	2b20      	cmp	r3, #32
 800ba60:	d10e      	bne.n	800ba80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	f003 0320 	and.w	r3, r3, #32
 800ba6c:	2b20      	cmp	r3, #32
 800ba6e:	d107      	bne.n	800ba80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f06f 0220 	mvn.w	r2, #32
 800ba78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 fcfe 	bl	800c47c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ba80:	bf00      	nop
 800ba82:	3708      	adds	r7, #8
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b086      	sub	sp, #24
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba94:	2300      	movs	r3, #0
 800ba96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d101      	bne.n	800baa6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800baa2:	2302      	movs	r3, #2
 800baa4:	e0ae      	b.n	800bc04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2201      	movs	r2, #1
 800baaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2b0c      	cmp	r3, #12
 800bab2:	f200 809f 	bhi.w	800bbf4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800bab6:	a201      	add	r2, pc, #4	@ (adr r2, 800babc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800babc:	0800baf1 	.word	0x0800baf1
 800bac0:	0800bbf5 	.word	0x0800bbf5
 800bac4:	0800bbf5 	.word	0x0800bbf5
 800bac8:	0800bbf5 	.word	0x0800bbf5
 800bacc:	0800bb31 	.word	0x0800bb31
 800bad0:	0800bbf5 	.word	0x0800bbf5
 800bad4:	0800bbf5 	.word	0x0800bbf5
 800bad8:	0800bbf5 	.word	0x0800bbf5
 800badc:	0800bb73 	.word	0x0800bb73
 800bae0:	0800bbf5 	.word	0x0800bbf5
 800bae4:	0800bbf5 	.word	0x0800bbf5
 800bae8:	0800bbf5 	.word	0x0800bbf5
 800baec:	0800bbb3 	.word	0x0800bbb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	68b9      	ldr	r1, [r7, #8]
 800baf6:	4618      	mov	r0, r3
 800baf8:	f000 f9ee 	bl	800bed8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	699a      	ldr	r2, [r3, #24]
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f042 0208 	orr.w	r2, r2, #8
 800bb0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	699a      	ldr	r2, [r3, #24]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f022 0204 	bic.w	r2, r2, #4
 800bb1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	6999      	ldr	r1, [r3, #24]
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	691a      	ldr	r2, [r3, #16]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	430a      	orrs	r2, r1
 800bb2c:	619a      	str	r2, [r3, #24]
      break;
 800bb2e:	e064      	b.n	800bbfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	68b9      	ldr	r1, [r7, #8]
 800bb36:	4618      	mov	r0, r3
 800bb38:	f000 fa3e 	bl	800bfb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	699a      	ldr	r2, [r3, #24]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bb4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	699a      	ldr	r2, [r3, #24]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bb5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	6999      	ldr	r1, [r3, #24]
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	691b      	ldr	r3, [r3, #16]
 800bb66:	021a      	lsls	r2, r3, #8
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	430a      	orrs	r2, r1
 800bb6e:	619a      	str	r2, [r3, #24]
      break;
 800bb70:	e043      	b.n	800bbfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	68b9      	ldr	r1, [r7, #8]
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f000 fa91 	bl	800c0a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	69da      	ldr	r2, [r3, #28]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f042 0208 	orr.w	r2, r2, #8
 800bb8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	69da      	ldr	r2, [r3, #28]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f022 0204 	bic.w	r2, r2, #4
 800bb9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	69d9      	ldr	r1, [r3, #28]
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	691a      	ldr	r2, [r3, #16]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	430a      	orrs	r2, r1
 800bbae:	61da      	str	r2, [r3, #28]
      break;
 800bbb0:	e023      	b.n	800bbfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	68b9      	ldr	r1, [r7, #8]
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f000 fae5 	bl	800c188 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	69da      	ldr	r2, [r3, #28]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bbcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	69da      	ldr	r2, [r3, #28]
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bbdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	69d9      	ldr	r1, [r3, #28]
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	691b      	ldr	r3, [r3, #16]
 800bbe8:	021a      	lsls	r2, r3, #8
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	430a      	orrs	r2, r1
 800bbf0:	61da      	str	r2, [r3, #28]
      break;
 800bbf2:	e002      	b.n	800bbfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	75fb      	strb	r3, [r7, #23]
      break;
 800bbf8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bc02:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3718      	adds	r7, #24
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc16:	2300      	movs	r3, #0
 800bc18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d101      	bne.n	800bc28 <HAL_TIM_ConfigClockSource+0x1c>
 800bc24:	2302      	movs	r3, #2
 800bc26:	e0b4      	b.n	800bd92 <HAL_TIM_ConfigClockSource+0x186>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2202      	movs	r2, #2
 800bc34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	689b      	ldr	r3, [r3, #8]
 800bc3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bc46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bc4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	68ba      	ldr	r2, [r7, #8]
 800bc56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc60:	d03e      	beq.n	800bce0 <HAL_TIM_ConfigClockSource+0xd4>
 800bc62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc66:	f200 8087 	bhi.w	800bd78 <HAL_TIM_ConfigClockSource+0x16c>
 800bc6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc6e:	f000 8086 	beq.w	800bd7e <HAL_TIM_ConfigClockSource+0x172>
 800bc72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc76:	d87f      	bhi.n	800bd78 <HAL_TIM_ConfigClockSource+0x16c>
 800bc78:	2b70      	cmp	r3, #112	@ 0x70
 800bc7a:	d01a      	beq.n	800bcb2 <HAL_TIM_ConfigClockSource+0xa6>
 800bc7c:	2b70      	cmp	r3, #112	@ 0x70
 800bc7e:	d87b      	bhi.n	800bd78 <HAL_TIM_ConfigClockSource+0x16c>
 800bc80:	2b60      	cmp	r3, #96	@ 0x60
 800bc82:	d050      	beq.n	800bd26 <HAL_TIM_ConfigClockSource+0x11a>
 800bc84:	2b60      	cmp	r3, #96	@ 0x60
 800bc86:	d877      	bhi.n	800bd78 <HAL_TIM_ConfigClockSource+0x16c>
 800bc88:	2b50      	cmp	r3, #80	@ 0x50
 800bc8a:	d03c      	beq.n	800bd06 <HAL_TIM_ConfigClockSource+0xfa>
 800bc8c:	2b50      	cmp	r3, #80	@ 0x50
 800bc8e:	d873      	bhi.n	800bd78 <HAL_TIM_ConfigClockSource+0x16c>
 800bc90:	2b40      	cmp	r3, #64	@ 0x40
 800bc92:	d058      	beq.n	800bd46 <HAL_TIM_ConfigClockSource+0x13a>
 800bc94:	2b40      	cmp	r3, #64	@ 0x40
 800bc96:	d86f      	bhi.n	800bd78 <HAL_TIM_ConfigClockSource+0x16c>
 800bc98:	2b30      	cmp	r3, #48	@ 0x30
 800bc9a:	d064      	beq.n	800bd66 <HAL_TIM_ConfigClockSource+0x15a>
 800bc9c:	2b30      	cmp	r3, #48	@ 0x30
 800bc9e:	d86b      	bhi.n	800bd78 <HAL_TIM_ConfigClockSource+0x16c>
 800bca0:	2b20      	cmp	r3, #32
 800bca2:	d060      	beq.n	800bd66 <HAL_TIM_ConfigClockSource+0x15a>
 800bca4:	2b20      	cmp	r3, #32
 800bca6:	d867      	bhi.n	800bd78 <HAL_TIM_ConfigClockSource+0x16c>
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d05c      	beq.n	800bd66 <HAL_TIM_ConfigClockSource+0x15a>
 800bcac:	2b10      	cmp	r3, #16
 800bcae:	d05a      	beq.n	800bd66 <HAL_TIM_ConfigClockSource+0x15a>
 800bcb0:	e062      	b.n	800bd78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bcc2:	f000 fb2c 	bl	800c31e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	689b      	ldr	r3, [r3, #8]
 800bccc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bcd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	68ba      	ldr	r2, [r7, #8]
 800bcdc:	609a      	str	r2, [r3, #8]
      break;
 800bcde:	e04f      	b.n	800bd80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bcf0:	f000 fb15 	bl	800c31e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	689a      	ldr	r2, [r3, #8]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bd02:	609a      	str	r2, [r3, #8]
      break;
 800bd04:	e03c      	b.n	800bd80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd12:	461a      	mov	r2, r3
 800bd14:	f000 fa8c 	bl	800c230 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2150      	movs	r1, #80	@ 0x50
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f000 fae3 	bl	800c2ea <TIM_ITRx_SetConfig>
      break;
 800bd24:	e02c      	b.n	800bd80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd32:	461a      	mov	r2, r3
 800bd34:	f000 faaa 	bl	800c28c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	2160      	movs	r1, #96	@ 0x60
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f000 fad3 	bl	800c2ea <TIM_ITRx_SetConfig>
      break;
 800bd44:	e01c      	b.n	800bd80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd52:	461a      	mov	r2, r3
 800bd54:	f000 fa6c 	bl	800c230 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2140      	movs	r1, #64	@ 0x40
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f000 fac3 	bl	800c2ea <TIM_ITRx_SetConfig>
      break;
 800bd64:	e00c      	b.n	800bd80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4619      	mov	r1, r3
 800bd70:	4610      	mov	r0, r2
 800bd72:	f000 faba 	bl	800c2ea <TIM_ITRx_SetConfig>
      break;
 800bd76:	e003      	b.n	800bd80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	73fb      	strb	r3, [r7, #15]
      break;
 800bd7c:	e000      	b.n	800bd80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bd7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2201      	movs	r2, #1
 800bd84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bd90:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}

0800bd9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd9a:	b480      	push	{r7}
 800bd9c:	b083      	sub	sp, #12
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bda2:	bf00      	nop
 800bda4:	370c      	adds	r7, #12
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bc80      	pop	{r7}
 800bdaa:	4770      	bx	lr

0800bdac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bdb4:	bf00      	nop
 800bdb6:	370c      	adds	r7, #12
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bc80      	pop	{r7}
 800bdbc:	4770      	bx	lr

0800bdbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bdbe:	b480      	push	{r7}
 800bdc0:	b083      	sub	sp, #12
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bdc6:	bf00      	nop
 800bdc8:	370c      	adds	r7, #12
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bc80      	pop	{r7}
 800bdce:	4770      	bx	lr

0800bdd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bdd8:	bf00      	nop
 800bdda:	370c      	adds	r7, #12
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bc80      	pop	{r7}
 800bde0:	4770      	bx	lr
	...

0800bde4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b085      	sub	sp, #20
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	4a33      	ldr	r2, [pc, #204]	@ (800bec4 <TIM_Base_SetConfig+0xe0>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d013      	beq.n	800be24 <TIM_Base_SetConfig+0x40>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	4a32      	ldr	r2, [pc, #200]	@ (800bec8 <TIM_Base_SetConfig+0xe4>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d00f      	beq.n	800be24 <TIM_Base_SetConfig+0x40>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be0a:	d00b      	beq.n	800be24 <TIM_Base_SetConfig+0x40>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	4a2f      	ldr	r2, [pc, #188]	@ (800becc <TIM_Base_SetConfig+0xe8>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d007      	beq.n	800be24 <TIM_Base_SetConfig+0x40>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	4a2e      	ldr	r2, [pc, #184]	@ (800bed0 <TIM_Base_SetConfig+0xec>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d003      	beq.n	800be24 <TIM_Base_SetConfig+0x40>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	4a2d      	ldr	r2, [pc, #180]	@ (800bed4 <TIM_Base_SetConfig+0xf0>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d108      	bne.n	800be36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	685b      	ldr	r3, [r3, #4]
 800be30:	68fa      	ldr	r2, [r7, #12]
 800be32:	4313      	orrs	r3, r2
 800be34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	4a22      	ldr	r2, [pc, #136]	@ (800bec4 <TIM_Base_SetConfig+0xe0>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d013      	beq.n	800be66 <TIM_Base_SetConfig+0x82>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4a21      	ldr	r2, [pc, #132]	@ (800bec8 <TIM_Base_SetConfig+0xe4>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d00f      	beq.n	800be66 <TIM_Base_SetConfig+0x82>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be4c:	d00b      	beq.n	800be66 <TIM_Base_SetConfig+0x82>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	4a1e      	ldr	r2, [pc, #120]	@ (800becc <TIM_Base_SetConfig+0xe8>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d007      	beq.n	800be66 <TIM_Base_SetConfig+0x82>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	4a1d      	ldr	r2, [pc, #116]	@ (800bed0 <TIM_Base_SetConfig+0xec>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d003      	beq.n	800be66 <TIM_Base_SetConfig+0x82>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	4a1c      	ldr	r2, [pc, #112]	@ (800bed4 <TIM_Base_SetConfig+0xf0>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d108      	bne.n	800be78 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	68db      	ldr	r3, [r3, #12]
 800be72:	68fa      	ldr	r2, [r7, #12]
 800be74:	4313      	orrs	r3, r2
 800be76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	695b      	ldr	r3, [r3, #20]
 800be82:	4313      	orrs	r3, r2
 800be84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	68fa      	ldr	r2, [r7, #12]
 800be8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	689a      	ldr	r2, [r3, #8]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	681a      	ldr	r2, [r3, #0]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	4a09      	ldr	r2, [pc, #36]	@ (800bec4 <TIM_Base_SetConfig+0xe0>)
 800bea0:	4293      	cmp	r3, r2
 800bea2:	d003      	beq.n	800beac <TIM_Base_SetConfig+0xc8>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	4a08      	ldr	r2, [pc, #32]	@ (800bec8 <TIM_Base_SetConfig+0xe4>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d103      	bne.n	800beb4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	691a      	ldr	r2, [r3, #16]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2201      	movs	r2, #1
 800beb8:	615a      	str	r2, [r3, #20]
}
 800beba:	bf00      	nop
 800bebc:	3714      	adds	r7, #20
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bc80      	pop	{r7}
 800bec2:	4770      	bx	lr
 800bec4:	40012c00 	.word	0x40012c00
 800bec8:	40013400 	.word	0x40013400
 800becc:	40000400 	.word	0x40000400
 800bed0:	40000800 	.word	0x40000800
 800bed4:	40000c00 	.word	0x40000c00

0800bed8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bed8:	b480      	push	{r7}
 800beda:	b087      	sub	sp, #28
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6a1b      	ldr	r3, [r3, #32]
 800bee6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6a1b      	ldr	r3, [r3, #32]
 800beec:	f023 0201 	bic.w	r2, r3, #1
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	699b      	ldr	r3, [r3, #24]
 800befe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f023 0303 	bic.w	r3, r3, #3
 800bf0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	68fa      	ldr	r2, [r7, #12]
 800bf16:	4313      	orrs	r3, r2
 800bf18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	f023 0302 	bic.w	r3, r3, #2
 800bf20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	689b      	ldr	r3, [r3, #8]
 800bf26:	697a      	ldr	r2, [r7, #20]
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	4a20      	ldr	r2, [pc, #128]	@ (800bfb0 <TIM_OC1_SetConfig+0xd8>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d003      	beq.n	800bf3c <TIM_OC1_SetConfig+0x64>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	4a1f      	ldr	r2, [pc, #124]	@ (800bfb4 <TIM_OC1_SetConfig+0xdc>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d10c      	bne.n	800bf56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	f023 0308 	bic.w	r3, r3, #8
 800bf42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	68db      	ldr	r3, [r3, #12]
 800bf48:	697a      	ldr	r2, [r7, #20]
 800bf4a:	4313      	orrs	r3, r2
 800bf4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	f023 0304 	bic.w	r3, r3, #4
 800bf54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	4a15      	ldr	r2, [pc, #84]	@ (800bfb0 <TIM_OC1_SetConfig+0xd8>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d003      	beq.n	800bf66 <TIM_OC1_SetConfig+0x8e>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	4a14      	ldr	r2, [pc, #80]	@ (800bfb4 <TIM_OC1_SetConfig+0xdc>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d111      	bne.n	800bf8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bf6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bf74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	695b      	ldr	r3, [r3, #20]
 800bf7a:	693a      	ldr	r2, [r7, #16]
 800bf7c:	4313      	orrs	r3, r2
 800bf7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	699b      	ldr	r3, [r3, #24]
 800bf84:	693a      	ldr	r2, [r7, #16]
 800bf86:	4313      	orrs	r3, r2
 800bf88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	693a      	ldr	r2, [r7, #16]
 800bf8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	68fa      	ldr	r2, [r7, #12]
 800bf94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	685a      	ldr	r2, [r3, #4]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	697a      	ldr	r2, [r7, #20]
 800bfa2:	621a      	str	r2, [r3, #32]
}
 800bfa4:	bf00      	nop
 800bfa6:	371c      	adds	r7, #28
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bc80      	pop	{r7}
 800bfac:	4770      	bx	lr
 800bfae:	bf00      	nop
 800bfb0:	40012c00 	.word	0x40012c00
 800bfb4:	40013400 	.word	0x40013400

0800bfb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b087      	sub	sp, #28
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6a1b      	ldr	r3, [r3, #32]
 800bfc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6a1b      	ldr	r3, [r3, #32]
 800bfcc:	f023 0210 	bic.w	r2, r3, #16
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	685b      	ldr	r3, [r3, #4]
 800bfd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	699b      	ldr	r3, [r3, #24]
 800bfde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bfe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bfee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	021b      	lsls	r3, r3, #8
 800bff6:	68fa      	ldr	r2, [r7, #12]
 800bff8:	4313      	orrs	r3, r2
 800bffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	f023 0320 	bic.w	r3, r3, #32
 800c002:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	689b      	ldr	r3, [r3, #8]
 800c008:	011b      	lsls	r3, r3, #4
 800c00a:	697a      	ldr	r2, [r7, #20]
 800c00c:	4313      	orrs	r3, r2
 800c00e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	4a21      	ldr	r2, [pc, #132]	@ (800c098 <TIM_OC2_SetConfig+0xe0>)
 800c014:	4293      	cmp	r3, r2
 800c016:	d003      	beq.n	800c020 <TIM_OC2_SetConfig+0x68>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	4a20      	ldr	r2, [pc, #128]	@ (800c09c <TIM_OC2_SetConfig+0xe4>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d10d      	bne.n	800c03c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	68db      	ldr	r3, [r3, #12]
 800c02c:	011b      	lsls	r3, r3, #4
 800c02e:	697a      	ldr	r2, [r7, #20]
 800c030:	4313      	orrs	r3, r2
 800c032:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c03a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	4a16      	ldr	r2, [pc, #88]	@ (800c098 <TIM_OC2_SetConfig+0xe0>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d003      	beq.n	800c04c <TIM_OC2_SetConfig+0x94>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4a15      	ldr	r2, [pc, #84]	@ (800c09c <TIM_OC2_SetConfig+0xe4>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d113      	bne.n	800c074 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c052:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c05a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	695b      	ldr	r3, [r3, #20]
 800c060:	009b      	lsls	r3, r3, #2
 800c062:	693a      	ldr	r2, [r7, #16]
 800c064:	4313      	orrs	r3, r2
 800c066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	699b      	ldr	r3, [r3, #24]
 800c06c:	009b      	lsls	r3, r3, #2
 800c06e:	693a      	ldr	r2, [r7, #16]
 800c070:	4313      	orrs	r3, r2
 800c072:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	693a      	ldr	r2, [r7, #16]
 800c078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	68fa      	ldr	r2, [r7, #12]
 800c07e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	685a      	ldr	r2, [r3, #4]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	697a      	ldr	r2, [r7, #20]
 800c08c:	621a      	str	r2, [r3, #32]
}
 800c08e:	bf00      	nop
 800c090:	371c      	adds	r7, #28
 800c092:	46bd      	mov	sp, r7
 800c094:	bc80      	pop	{r7}
 800c096:	4770      	bx	lr
 800c098:	40012c00 	.word	0x40012c00
 800c09c:	40013400 	.word	0x40013400

0800c0a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b087      	sub	sp, #28
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6a1b      	ldr	r3, [r3, #32]
 800c0ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6a1b      	ldr	r3, [r3, #32]
 800c0b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	69db      	ldr	r3, [r3, #28]
 800c0c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f023 0303 	bic.w	r3, r3, #3
 800c0d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	68fa      	ldr	r2, [r7, #12]
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c0e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	689b      	ldr	r3, [r3, #8]
 800c0ee:	021b      	lsls	r3, r3, #8
 800c0f0:	697a      	ldr	r2, [r7, #20]
 800c0f2:	4313      	orrs	r3, r2
 800c0f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4a21      	ldr	r2, [pc, #132]	@ (800c180 <TIM_OC3_SetConfig+0xe0>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d003      	beq.n	800c106 <TIM_OC3_SetConfig+0x66>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	4a20      	ldr	r2, [pc, #128]	@ (800c184 <TIM_OC3_SetConfig+0xe4>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d10d      	bne.n	800c122 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c10c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	68db      	ldr	r3, [r3, #12]
 800c112:	021b      	lsls	r3, r3, #8
 800c114:	697a      	ldr	r2, [r7, #20]
 800c116:	4313      	orrs	r3, r2
 800c118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	4a16      	ldr	r2, [pc, #88]	@ (800c180 <TIM_OC3_SetConfig+0xe0>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d003      	beq.n	800c132 <TIM_OC3_SetConfig+0x92>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	4a15      	ldr	r2, [pc, #84]	@ (800c184 <TIM_OC3_SetConfig+0xe4>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d113      	bne.n	800c15a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	695b      	ldr	r3, [r3, #20]
 800c146:	011b      	lsls	r3, r3, #4
 800c148:	693a      	ldr	r2, [r7, #16]
 800c14a:	4313      	orrs	r3, r2
 800c14c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	699b      	ldr	r3, [r3, #24]
 800c152:	011b      	lsls	r3, r3, #4
 800c154:	693a      	ldr	r2, [r7, #16]
 800c156:	4313      	orrs	r3, r2
 800c158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	693a      	ldr	r2, [r7, #16]
 800c15e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	68fa      	ldr	r2, [r7, #12]
 800c164:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	685a      	ldr	r2, [r3, #4]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	697a      	ldr	r2, [r7, #20]
 800c172:	621a      	str	r2, [r3, #32]
}
 800c174:	bf00      	nop
 800c176:	371c      	adds	r7, #28
 800c178:	46bd      	mov	sp, r7
 800c17a:	bc80      	pop	{r7}
 800c17c:	4770      	bx	lr
 800c17e:	bf00      	nop
 800c180:	40012c00 	.word	0x40012c00
 800c184:	40013400 	.word	0x40013400

0800c188 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c188:	b480      	push	{r7}
 800c18a:	b087      	sub	sp, #28
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6a1b      	ldr	r3, [r3, #32]
 800c196:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6a1b      	ldr	r3, [r3, #32]
 800c19c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	69db      	ldr	r3, [r3, #28]
 800c1ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c1b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c1be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	021b      	lsls	r3, r3, #8
 800c1c6:	68fa      	ldr	r2, [r7, #12]
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c1d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	689b      	ldr	r3, [r3, #8]
 800c1d8:	031b      	lsls	r3, r3, #12
 800c1da:	693a      	ldr	r2, [r7, #16]
 800c1dc:	4313      	orrs	r3, r2
 800c1de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	4a11      	ldr	r2, [pc, #68]	@ (800c228 <TIM_OC4_SetConfig+0xa0>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d003      	beq.n	800c1f0 <TIM_OC4_SetConfig+0x68>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	4a10      	ldr	r2, [pc, #64]	@ (800c22c <TIM_OC4_SetConfig+0xa4>)
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d109      	bne.n	800c204 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c1f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	695b      	ldr	r3, [r3, #20]
 800c1fc:	019b      	lsls	r3, r3, #6
 800c1fe:	697a      	ldr	r2, [r7, #20]
 800c200:	4313      	orrs	r3, r2
 800c202:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	697a      	ldr	r2, [r7, #20]
 800c208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	68fa      	ldr	r2, [r7, #12]
 800c20e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	685a      	ldr	r2, [r3, #4]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	693a      	ldr	r2, [r7, #16]
 800c21c:	621a      	str	r2, [r3, #32]
}
 800c21e:	bf00      	nop
 800c220:	371c      	adds	r7, #28
 800c222:	46bd      	mov	sp, r7
 800c224:	bc80      	pop	{r7}
 800c226:	4770      	bx	lr
 800c228:	40012c00 	.word	0x40012c00
 800c22c:	40013400 	.word	0x40013400

0800c230 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c230:	b480      	push	{r7}
 800c232:	b087      	sub	sp, #28
 800c234:	af00      	add	r7, sp, #0
 800c236:	60f8      	str	r0, [r7, #12]
 800c238:	60b9      	str	r1, [r7, #8]
 800c23a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	6a1b      	ldr	r3, [r3, #32]
 800c240:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	6a1b      	ldr	r3, [r3, #32]
 800c246:	f023 0201 	bic.w	r2, r3, #1
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	699b      	ldr	r3, [r3, #24]
 800c252:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c25a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	011b      	lsls	r3, r3, #4
 800c260:	693a      	ldr	r2, [r7, #16]
 800c262:	4313      	orrs	r3, r2
 800c264:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	f023 030a 	bic.w	r3, r3, #10
 800c26c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c26e:	697a      	ldr	r2, [r7, #20]
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	4313      	orrs	r3, r2
 800c274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	693a      	ldr	r2, [r7, #16]
 800c27a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	697a      	ldr	r2, [r7, #20]
 800c280:	621a      	str	r2, [r3, #32]
}
 800c282:	bf00      	nop
 800c284:	371c      	adds	r7, #28
 800c286:	46bd      	mov	sp, r7
 800c288:	bc80      	pop	{r7}
 800c28a:	4770      	bx	lr

0800c28c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b087      	sub	sp, #28
 800c290:	af00      	add	r7, sp, #0
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	60b9      	str	r1, [r7, #8]
 800c296:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6a1b      	ldr	r3, [r3, #32]
 800c29c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	6a1b      	ldr	r3, [r3, #32]
 800c2a2:	f023 0210 	bic.w	r2, r3, #16
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	699b      	ldr	r3, [r3, #24]
 800c2ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c2b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	031b      	lsls	r3, r3, #12
 800c2bc:	693a      	ldr	r2, [r7, #16]
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c2c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	011b      	lsls	r3, r3, #4
 800c2ce:	697a      	ldr	r2, [r7, #20]
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	693a      	ldr	r2, [r7, #16]
 800c2d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	697a      	ldr	r2, [r7, #20]
 800c2de:	621a      	str	r2, [r3, #32]
}
 800c2e0:	bf00      	nop
 800c2e2:	371c      	adds	r7, #28
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bc80      	pop	{r7}
 800c2e8:	4770      	bx	lr

0800c2ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c2ea:	b480      	push	{r7}
 800c2ec:	b085      	sub	sp, #20
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
 800c2f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	689b      	ldr	r3, [r3, #8]
 800c2f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c300:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c302:	683a      	ldr	r2, [r7, #0]
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	4313      	orrs	r3, r2
 800c308:	f043 0307 	orr.w	r3, r3, #7
 800c30c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	68fa      	ldr	r2, [r7, #12]
 800c312:	609a      	str	r2, [r3, #8]
}
 800c314:	bf00      	nop
 800c316:	3714      	adds	r7, #20
 800c318:	46bd      	mov	sp, r7
 800c31a:	bc80      	pop	{r7}
 800c31c:	4770      	bx	lr

0800c31e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c31e:	b480      	push	{r7}
 800c320:	b087      	sub	sp, #28
 800c322:	af00      	add	r7, sp, #0
 800c324:	60f8      	str	r0, [r7, #12]
 800c326:	60b9      	str	r1, [r7, #8]
 800c328:	607a      	str	r2, [r7, #4]
 800c32a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	689b      	ldr	r3, [r3, #8]
 800c330:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c338:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	021a      	lsls	r2, r3, #8
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	431a      	orrs	r2, r3
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	4313      	orrs	r3, r2
 800c346:	697a      	ldr	r2, [r7, #20]
 800c348:	4313      	orrs	r3, r2
 800c34a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	697a      	ldr	r2, [r7, #20]
 800c350:	609a      	str	r2, [r3, #8]
}
 800c352:	bf00      	nop
 800c354:	371c      	adds	r7, #28
 800c356:	46bd      	mov	sp, r7
 800c358:	bc80      	pop	{r7}
 800c35a:	4770      	bx	lr

0800c35c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b087      	sub	sp, #28
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	f003 031f 	and.w	r3, r3, #31
 800c36e:	2201      	movs	r2, #1
 800c370:	fa02 f303 	lsl.w	r3, r2, r3
 800c374:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	6a1a      	ldr	r2, [r3, #32]
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	43db      	mvns	r3, r3
 800c37e:	401a      	ands	r2, r3
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	6a1a      	ldr	r2, [r3, #32]
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	f003 031f 	and.w	r3, r3, #31
 800c38e:	6879      	ldr	r1, [r7, #4]
 800c390:	fa01 f303 	lsl.w	r3, r1, r3
 800c394:	431a      	orrs	r2, r3
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	621a      	str	r2, [r3, #32]
}
 800c39a:	bf00      	nop
 800c39c:	371c      	adds	r7, #28
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bc80      	pop	{r7}
 800c3a2:	4770      	bx	lr

0800c3a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b085      	sub	sp, #20
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	d101      	bne.n	800c3bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c3b8:	2302      	movs	r3, #2
 800c3ba:	e050      	b.n	800c45e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2201      	movs	r2, #1
 800c3c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2202      	movs	r2, #2
 800c3c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	689b      	ldr	r3, [r3, #8]
 800c3da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	68fa      	ldr	r2, [r7, #12]
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	68fa      	ldr	r2, [r7, #12]
 800c3f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4a1b      	ldr	r2, [pc, #108]	@ (800c468 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d018      	beq.n	800c432 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4a19      	ldr	r2, [pc, #100]	@ (800c46c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c406:	4293      	cmp	r3, r2
 800c408:	d013      	beq.n	800c432 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c412:	d00e      	beq.n	800c432 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a15      	ldr	r2, [pc, #84]	@ (800c470 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d009      	beq.n	800c432 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a14      	ldr	r2, [pc, #80]	@ (800c474 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d004      	beq.n	800c432 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a12      	ldr	r2, [pc, #72]	@ (800c478 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d10c      	bne.n	800c44c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c438:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	68ba      	ldr	r2, [r7, #8]
 800c440:	4313      	orrs	r3, r2
 800c442:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	68ba      	ldr	r2, [r7, #8]
 800c44a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2201      	movs	r2, #1
 800c450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2200      	movs	r2, #0
 800c458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c45c:	2300      	movs	r3, #0
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3714      	adds	r7, #20
 800c462:	46bd      	mov	sp, r7
 800c464:	bc80      	pop	{r7}
 800c466:	4770      	bx	lr
 800c468:	40012c00 	.word	0x40012c00
 800c46c:	40013400 	.word	0x40013400
 800c470:	40000400 	.word	0x40000400
 800c474:	40000800 	.word	0x40000800
 800c478:	40000c00 	.word	0x40000c00

0800c47c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c47c:	b480      	push	{r7}
 800c47e:	b083      	sub	sp, #12
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c484:	bf00      	nop
 800c486:	370c      	adds	r7, #12
 800c488:	46bd      	mov	sp, r7
 800c48a:	bc80      	pop	{r7}
 800c48c:	4770      	bx	lr

0800c48e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c48e:	b480      	push	{r7}
 800c490:	b083      	sub	sp, #12
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c496:	bf00      	nop
 800c498:	370c      	adds	r7, #12
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bc80      	pop	{r7}
 800c49e:	4770      	bx	lr

0800c4a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d101      	bne.n	800c4b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	e042      	b.n	800c538 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c4b8:	b2db      	uxtb	r3, r3
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d106      	bne.n	800c4cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f7f9 fc48 	bl	8005d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2224      	movs	r2, #36	@ 0x24
 800c4d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	68da      	ldr	r2, [r3, #12]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c4e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f000 ff01 	bl	800d2ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	691a      	ldr	r2, [r3, #16]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c4f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	695a      	ldr	r2, [r3, #20]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c508:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	68da      	ldr	r2, [r3, #12]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c518:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2200      	movs	r2, #0
 800c51e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2220      	movs	r2, #32
 800c524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2220      	movs	r2, #32
 800c52c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2200      	movs	r2, #0
 800c534:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c536:	2300      	movs	r3, #0
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3708      	adds	r7, #8
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b08a      	sub	sp, #40	@ 0x28
 800c544:	af02      	add	r7, sp, #8
 800c546:	60f8      	str	r0, [r7, #12]
 800c548:	60b9      	str	r1, [r7, #8]
 800c54a:	603b      	str	r3, [r7, #0]
 800c54c:	4613      	mov	r3, r2
 800c54e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c550:	2300      	movs	r3, #0
 800c552:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c55a:	b2db      	uxtb	r3, r3
 800c55c:	2b20      	cmp	r3, #32
 800c55e:	d16d      	bne.n	800c63c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d002      	beq.n	800c56c <HAL_UART_Transmit+0x2c>
 800c566:	88fb      	ldrh	r3, [r7, #6]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d101      	bne.n	800c570 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c56c:	2301      	movs	r3, #1
 800c56e:	e066      	b.n	800c63e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2200      	movs	r2, #0
 800c574:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2221      	movs	r2, #33	@ 0x21
 800c57a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c57e:	f7fa fe41 	bl	8007204 <HAL_GetTick>
 800c582:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	88fa      	ldrh	r2, [r7, #6]
 800c588:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	88fa      	ldrh	r2, [r7, #6]
 800c58e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	689b      	ldr	r3, [r3, #8]
 800c594:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c598:	d108      	bne.n	800c5ac <HAL_UART_Transmit+0x6c>
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	691b      	ldr	r3, [r3, #16]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d104      	bne.n	800c5ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	61bb      	str	r3, [r7, #24]
 800c5aa:	e003      	b.n	800c5b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c5b4:	e02a      	b.n	800c60c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	9300      	str	r3, [sp, #0]
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	2180      	movs	r1, #128	@ 0x80
 800c5c0:	68f8      	ldr	r0, [r7, #12]
 800c5c2:	f000 fc29 	bl	800ce18 <UART_WaitOnFlagUntilTimeout>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d001      	beq.n	800c5d0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800c5cc:	2303      	movs	r3, #3
 800c5ce:	e036      	b.n	800c63e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800c5d0:	69fb      	ldr	r3, [r7, #28]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d10b      	bne.n	800c5ee <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	881b      	ldrh	r3, [r3, #0]
 800c5da:	461a      	mov	r2, r3
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c5e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c5e6:	69bb      	ldr	r3, [r7, #24]
 800c5e8:	3302      	adds	r3, #2
 800c5ea:	61bb      	str	r3, [r7, #24]
 800c5ec:	e007      	b.n	800c5fe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c5ee:	69fb      	ldr	r3, [r7, #28]
 800c5f0:	781a      	ldrb	r2, [r3, #0]
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c5f8:	69fb      	ldr	r3, [r7, #28]
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c602:	b29b      	uxth	r3, r3
 800c604:	3b01      	subs	r3, #1
 800c606:	b29a      	uxth	r2, r3
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c610:	b29b      	uxth	r3, r3
 800c612:	2b00      	cmp	r3, #0
 800c614:	d1cf      	bne.n	800c5b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	9300      	str	r3, [sp, #0]
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	2200      	movs	r2, #0
 800c61e:	2140      	movs	r1, #64	@ 0x40
 800c620:	68f8      	ldr	r0, [r7, #12]
 800c622:	f000 fbf9 	bl	800ce18 <UART_WaitOnFlagUntilTimeout>
 800c626:	4603      	mov	r3, r0
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d001      	beq.n	800c630 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800c62c:	2303      	movs	r3, #3
 800c62e:	e006      	b.n	800c63e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2220      	movs	r2, #32
 800c634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800c638:	2300      	movs	r3, #0
 800c63a:	e000      	b.n	800c63e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800c63c:	2302      	movs	r3, #2
  }
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3720      	adds	r7, #32
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}

0800c646 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c646:	b580      	push	{r7, lr}
 800c648:	b084      	sub	sp, #16
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	60f8      	str	r0, [r7, #12]
 800c64e:	60b9      	str	r1, [r7, #8]
 800c650:	4613      	mov	r3, r2
 800c652:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	2b20      	cmp	r3, #32
 800c65e:	d112      	bne.n	800c686 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d002      	beq.n	800c66c <HAL_UART_Receive_IT+0x26>
 800c666:	88fb      	ldrh	r3, [r7, #6]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d101      	bne.n	800c670 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c66c:	2301      	movs	r3, #1
 800c66e:	e00b      	b.n	800c688 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2200      	movs	r2, #0
 800c674:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c676:	88fb      	ldrh	r3, [r7, #6]
 800c678:	461a      	mov	r2, r3
 800c67a:	68b9      	ldr	r1, [r7, #8]
 800c67c:	68f8      	ldr	r0, [r7, #12]
 800c67e:	f000 fc39 	bl	800cef4 <UART_Start_Receive_IT>
 800c682:	4603      	mov	r3, r0
 800c684:	e000      	b.n	800c688 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c686:	2302      	movs	r3, #2
  }
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3710      	adds	r7, #16
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b08c      	sub	sp, #48	@ 0x30
 800c694:	af00      	add	r7, sp, #0
 800c696:	60f8      	str	r0, [r7, #12]
 800c698:	60b9      	str	r1, [r7, #8]
 800c69a:	4613      	mov	r3, r2
 800c69c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c6a4:	b2db      	uxtb	r3, r3
 800c6a6:	2b20      	cmp	r3, #32
 800c6a8:	d156      	bne.n	800c758 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d002      	beq.n	800c6b6 <HAL_UART_Transmit_DMA+0x26>
 800c6b0:	88fb      	ldrh	r3, [r7, #6]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d101      	bne.n	800c6ba <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	e04f      	b.n	800c75a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800c6ba:	68ba      	ldr	r2, [r7, #8]
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	88fa      	ldrh	r2, [r7, #6]
 800c6c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	88fa      	ldrh	r2, [r7, #6]
 800c6ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	2221      	movs	r2, #33	@ 0x21
 800c6d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6de:	4a21      	ldr	r2, [pc, #132]	@ (800c764 <HAL_UART_Transmit_DMA+0xd4>)
 800c6e0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6e6:	4a20      	ldr	r2, [pc, #128]	@ (800c768 <HAL_UART_Transmit_DMA+0xd8>)
 800c6e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6ee:	4a1f      	ldr	r2, [pc, #124]	@ (800c76c <HAL_UART_Transmit_DMA+0xdc>)
 800c6f0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800c6fa:	f107 0308 	add.w	r3, r7, #8
 800c6fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800c704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c706:	6819      	ldr	r1, [r3, #0]
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	3304      	adds	r3, #4
 800c70e:	461a      	mov	r2, r3
 800c710:	88fb      	ldrh	r3, [r7, #6]
 800c712:	f7fa fefb 	bl	800750c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c71e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	3314      	adds	r3, #20
 800c726:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c728:	69bb      	ldr	r3, [r7, #24]
 800c72a:	e853 3f00 	ldrex	r3, [r3]
 800c72e:	617b      	str	r3, [r7, #20]
   return(result);
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c736:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	3314      	adds	r3, #20
 800c73e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c740:	627a      	str	r2, [r7, #36]	@ 0x24
 800c742:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c744:	6a39      	ldr	r1, [r7, #32]
 800c746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c748:	e841 2300 	strex	r3, r2, [r1]
 800c74c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d1e5      	bne.n	800c720 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800c754:	2300      	movs	r3, #0
 800c756:	e000      	b.n	800c75a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800c758:	2302      	movs	r3, #2
  }
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3730      	adds	r7, #48	@ 0x30
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
 800c762:	bf00      	nop
 800c764:	0800cccf 	.word	0x0800cccf
 800c768:	0800cd69 	.word	0x0800cd69
 800c76c:	0800cd85 	.word	0x0800cd85

0800c770 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b0ba      	sub	sp, #232	@ 0xe8
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	68db      	ldr	r3, [r3, #12]
 800c788:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	695b      	ldr	r3, [r3, #20]
 800c792:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c796:	2300      	movs	r3, #0
 800c798:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c79c:	2300      	movs	r3, #0
 800c79e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c7a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7a6:	f003 030f 	and.w	r3, r3, #15
 800c7aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c7ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d10f      	bne.n	800c7d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c7b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7ba:	f003 0320 	and.w	r3, r3, #32
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d009      	beq.n	800c7d6 <HAL_UART_IRQHandler+0x66>
 800c7c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7c6:	f003 0320 	and.w	r3, r3, #32
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d003      	beq.n	800c7d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f000 fccd 	bl	800d16e <UART_Receive_IT>
      return;
 800c7d4:	e25b      	b.n	800cc8e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c7d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	f000 80de 	beq.w	800c99c <HAL_UART_IRQHandler+0x22c>
 800c7e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7e4:	f003 0301 	and.w	r3, r3, #1
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d106      	bne.n	800c7fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c7ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	f000 80d1 	beq.w	800c99c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c7fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7fe:	f003 0301 	and.w	r3, r3, #1
 800c802:	2b00      	cmp	r3, #0
 800c804:	d00b      	beq.n	800c81e <HAL_UART_IRQHandler+0xae>
 800c806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c80a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d005      	beq.n	800c81e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c816:	f043 0201 	orr.w	r2, r3, #1
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c81e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c822:	f003 0304 	and.w	r3, r3, #4
 800c826:	2b00      	cmp	r3, #0
 800c828:	d00b      	beq.n	800c842 <HAL_UART_IRQHandler+0xd2>
 800c82a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c82e:	f003 0301 	and.w	r3, r3, #1
 800c832:	2b00      	cmp	r3, #0
 800c834:	d005      	beq.n	800c842 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c83a:	f043 0202 	orr.w	r2, r3, #2
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c846:	f003 0302 	and.w	r3, r3, #2
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d00b      	beq.n	800c866 <HAL_UART_IRQHandler+0xf6>
 800c84e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c852:	f003 0301 	and.w	r3, r3, #1
 800c856:	2b00      	cmp	r3, #0
 800c858:	d005      	beq.n	800c866 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c85e:	f043 0204 	orr.w	r2, r3, #4
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c86a:	f003 0308 	and.w	r3, r3, #8
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d011      	beq.n	800c896 <HAL_UART_IRQHandler+0x126>
 800c872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c876:	f003 0320 	and.w	r3, r3, #32
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d105      	bne.n	800c88a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c87e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c882:	f003 0301 	and.w	r3, r3, #1
 800c886:	2b00      	cmp	r3, #0
 800c888:	d005      	beq.n	800c896 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c88e:	f043 0208 	orr.w	r2, r3, #8
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	f000 81f2 	beq.w	800cc84 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c8a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8a4:	f003 0320 	and.w	r3, r3, #32
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d008      	beq.n	800c8be <HAL_UART_IRQHandler+0x14e>
 800c8ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c8b0:	f003 0320 	and.w	r3, r3, #32
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d002      	beq.n	800c8be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 fc58 	bl	800d16e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	695b      	ldr	r3, [r3, #20]
 800c8c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	bf14      	ite	ne
 800c8cc:	2301      	movne	r3, #1
 800c8ce:	2300      	moveq	r3, #0
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8da:	f003 0308 	and.w	r3, r3, #8
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d103      	bne.n	800c8ea <HAL_UART_IRQHandler+0x17a>
 800c8e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d04f      	beq.n	800c98a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 fb62 	bl	800cfb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	695b      	ldr	r3, [r3, #20]
 800c8f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d041      	beq.n	800c982 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	3314      	adds	r3, #20
 800c904:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c908:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c90c:	e853 3f00 	ldrex	r3, [r3]
 800c910:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c914:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c918:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c91c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	3314      	adds	r3, #20
 800c926:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c92a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c92e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c932:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c936:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c93a:	e841 2300 	strex	r3, r2, [r1]
 800c93e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c942:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c946:	2b00      	cmp	r3, #0
 800c948:	d1d9      	bne.n	800c8fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d013      	beq.n	800c97a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c956:	4a7e      	ldr	r2, [pc, #504]	@ (800cb50 <HAL_UART_IRQHandler+0x3e0>)
 800c958:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c95e:	4618      	mov	r0, r3
 800c960:	f7fa fe70 	bl	8007644 <HAL_DMA_Abort_IT>
 800c964:	4603      	mov	r3, r0
 800c966:	2b00      	cmp	r3, #0
 800c968:	d016      	beq.n	800c998 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c96e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c974:	4610      	mov	r0, r2
 800c976:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c978:	e00e      	b.n	800c998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f000 f993 	bl	800cca6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c980:	e00a      	b.n	800c998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f000 f98f 	bl	800cca6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c988:	e006      	b.n	800c998 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f000 f98b 	bl	800cca6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2200      	movs	r2, #0
 800c994:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c996:	e175      	b.n	800cc84 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c998:	bf00      	nop
    return;
 800c99a:	e173      	b.n	800cc84 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	f040 814f 	bne.w	800cc44 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c9a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9aa:	f003 0310 	and.w	r3, r3, #16
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	f000 8148 	beq.w	800cc44 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c9b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c9b8:	f003 0310 	and.w	r3, r3, #16
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	f000 8141 	beq.w	800cc44 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	60bb      	str	r3, [r7, #8]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	60bb      	str	r3, [r7, #8]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	60bb      	str	r3, [r7, #8]
 800c9d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	695b      	ldr	r3, [r3, #20]
 800c9de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	f000 80b6 	beq.w	800cb54 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	685b      	ldr	r3, [r3, #4]
 800c9f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c9f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	f000 8145 	beq.w	800cc88 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ca02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ca06:	429a      	cmp	r2, r3
 800ca08:	f080 813e 	bcs.w	800cc88 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ca12:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca18:	699b      	ldr	r3, [r3, #24]
 800ca1a:	2b20      	cmp	r3, #32
 800ca1c:	f000 8088 	beq.w	800cb30 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	330c      	adds	r3, #12
 800ca26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ca2e:	e853 3f00 	ldrex	r3, [r3]
 800ca32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ca36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ca3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ca3e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	330c      	adds	r3, #12
 800ca48:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800ca4c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ca50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca54:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ca58:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ca5c:	e841 2300 	strex	r3, r2, [r1]
 800ca60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ca64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d1d9      	bne.n	800ca20 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	3314      	adds	r3, #20
 800ca72:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ca76:	e853 3f00 	ldrex	r3, [r3]
 800ca7a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ca7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ca7e:	f023 0301 	bic.w	r3, r3, #1
 800ca82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	3314      	adds	r3, #20
 800ca8c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ca90:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ca94:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca96:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ca98:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ca9c:	e841 2300 	strex	r3, r2, [r1]
 800caa0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800caa2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d1e1      	bne.n	800ca6c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	3314      	adds	r3, #20
 800caae:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cab0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cab2:	e853 3f00 	ldrex	r3, [r3]
 800cab6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cab8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800caba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cabe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	3314      	adds	r3, #20
 800cac8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cacc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cace:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cad0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cad2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cad4:	e841 2300 	strex	r3, r2, [r1]
 800cad8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cada:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d1e3      	bne.n	800caa8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2220      	movs	r2, #32
 800cae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2200      	movs	r2, #0
 800caec:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	330c      	adds	r3, #12
 800caf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800caf8:	e853 3f00 	ldrex	r3, [r3]
 800cafc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cafe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb00:	f023 0310 	bic.w	r3, r3, #16
 800cb04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	330c      	adds	r3, #12
 800cb0e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800cb12:	65ba      	str	r2, [r7, #88]	@ 0x58
 800cb14:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cb18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cb1a:	e841 2300 	strex	r3, r2, [r1]
 800cb1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cb20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d1e3      	bne.n	800caee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7fa fd4e 	bl	80075cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2202      	movs	r2, #2
 800cb34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	1ad3      	subs	r3, r2, r3
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	4619      	mov	r1, r3
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f000 f8b6 	bl	800ccb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cb4c:	e09c      	b.n	800cc88 <HAL_UART_IRQHandler+0x518>
 800cb4e:	bf00      	nop
 800cb50:	0800d079 	.word	0x0800d079
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cb5c:	b29b      	uxth	r3, r3
 800cb5e:	1ad3      	subs	r3, r2, r3
 800cb60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cb68:	b29b      	uxth	r3, r3
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	f000 808e 	beq.w	800cc8c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800cb70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	f000 8089 	beq.w	800cc8c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	330c      	adds	r3, #12
 800cb80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb84:	e853 3f00 	ldrex	r3, [r3]
 800cb88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cb8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	330c      	adds	r3, #12
 800cb9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800cb9e:	647a      	str	r2, [r7, #68]	@ 0x44
 800cba0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cba2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cba4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cba6:	e841 2300 	strex	r3, r2, [r1]
 800cbaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cbac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d1e3      	bne.n	800cb7a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	3314      	adds	r3, #20
 800cbb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbbc:	e853 3f00 	ldrex	r3, [r3]
 800cbc0:	623b      	str	r3, [r7, #32]
   return(result);
 800cbc2:	6a3b      	ldr	r3, [r7, #32]
 800cbc4:	f023 0301 	bic.w	r3, r3, #1
 800cbc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	3314      	adds	r3, #20
 800cbd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cbd6:	633a      	str	r2, [r7, #48]	@ 0x30
 800cbd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cbdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbde:	e841 2300 	strex	r3, r2, [r1]
 800cbe2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cbe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d1e3      	bne.n	800cbb2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2220      	movs	r2, #32
 800cbee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	330c      	adds	r3, #12
 800cbfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	e853 3f00 	ldrex	r3, [r3]
 800cc06:	60fb      	str	r3, [r7, #12]
   return(result);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f023 0310 	bic.w	r3, r3, #16
 800cc0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	330c      	adds	r3, #12
 800cc18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800cc1c:	61fa      	str	r2, [r7, #28]
 800cc1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc20:	69b9      	ldr	r1, [r7, #24]
 800cc22:	69fa      	ldr	r2, [r7, #28]
 800cc24:	e841 2300 	strex	r3, r2, [r1]
 800cc28:	617b      	str	r3, [r7, #20]
   return(result);
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d1e3      	bne.n	800cbf8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2202      	movs	r2, #2
 800cc34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cc36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f000 f83b 	bl	800ccb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cc42:	e023      	b.n	800cc8c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cc44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d009      	beq.n	800cc64 <HAL_UART_IRQHandler+0x4f4>
 800cc50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d003      	beq.n	800cc64 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f000 fa1f 	bl	800d0a0 <UART_Transmit_IT>
    return;
 800cc62:	e014      	b.n	800cc8e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cc64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d00e      	beq.n	800cc8e <HAL_UART_IRQHandler+0x51e>
 800cc70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d008      	beq.n	800cc8e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f000 fa5e 	bl	800d13e <UART_EndTransmit_IT>
    return;
 800cc82:	e004      	b.n	800cc8e <HAL_UART_IRQHandler+0x51e>
    return;
 800cc84:	bf00      	nop
 800cc86:	e002      	b.n	800cc8e <HAL_UART_IRQHandler+0x51e>
      return;
 800cc88:	bf00      	nop
 800cc8a:	e000      	b.n	800cc8e <HAL_UART_IRQHandler+0x51e>
      return;
 800cc8c:	bf00      	nop
  }
}
 800cc8e:	37e8      	adds	r7, #232	@ 0xe8
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b083      	sub	sp, #12
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800cc9c:	bf00      	nop
 800cc9e:	370c      	adds	r7, #12
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bc80      	pop	{r7}
 800cca4:	4770      	bx	lr

0800cca6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cca6:	b480      	push	{r7}
 800cca8:	b083      	sub	sp, #12
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ccae:	bf00      	nop
 800ccb0:	370c      	adds	r7, #12
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bc80      	pop	{r7}
 800ccb6:	4770      	bx	lr

0800ccb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b083      	sub	sp, #12
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	460b      	mov	r3, r1
 800ccc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ccc4:	bf00      	nop
 800ccc6:	370c      	adds	r7, #12
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bc80      	pop	{r7}
 800cccc:	4770      	bx	lr

0800ccce <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ccce:	b580      	push	{r7, lr}
 800ccd0:	b090      	sub	sp, #64	@ 0x40
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f003 0320 	and.w	r3, r3, #32
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d137      	bne.n	800cd5a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800ccea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccec:	2200      	movs	r2, #0
 800ccee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ccf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	3314      	adds	r3, #20
 800ccf6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccfa:	e853 3f00 	ldrex	r3, [r3]
 800ccfe:	623b      	str	r3, [r7, #32]
   return(result);
 800cd00:	6a3b      	ldr	r3, [r7, #32]
 800cd02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cd06:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cd08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	3314      	adds	r3, #20
 800cd0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd10:	633a      	str	r2, [r7, #48]	@ 0x30
 800cd12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd18:	e841 2300 	strex	r3, r2, [r1]
 800cd1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d1e5      	bne.n	800ccf0 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cd24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	330c      	adds	r3, #12
 800cd2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	e853 3f00 	ldrex	r3, [r3]
 800cd32:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	330c      	adds	r3, #12
 800cd42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd44:	61fa      	str	r2, [r7, #28]
 800cd46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd48:	69b9      	ldr	r1, [r7, #24]
 800cd4a:	69fa      	ldr	r2, [r7, #28]
 800cd4c:	e841 2300 	strex	r3, r2, [r1]
 800cd50:	617b      	str	r3, [r7, #20]
   return(result);
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d1e5      	bne.n	800cd24 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cd58:	e002      	b.n	800cd60 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800cd5a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cd5c:	f7f7 fdac 	bl	80048b8 <HAL_UART_TxCpltCallback>
}
 800cd60:	bf00      	nop
 800cd62:	3740      	adds	r7, #64	@ 0x40
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b084      	sub	sp, #16
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd74:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800cd76:	68f8      	ldr	r0, [r7, #12]
 800cd78:	f7ff ff8c 	bl	800cc94 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd7c:	bf00      	nop
 800cd7e:	3710      	adds	r7, #16
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd94:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	695b      	ldr	r3, [r3, #20]
 800cd9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	bf14      	ite	ne
 800cda4:	2301      	movne	r3, #1
 800cda6:	2300      	moveq	r3, #0
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	2b21      	cmp	r3, #33	@ 0x21
 800cdb6:	d108      	bne.n	800cdca <UART_DMAError+0x46>
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d005      	beq.n	800cdca <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800cdc4:	68b8      	ldr	r0, [r7, #8]
 800cdc6:	f000 f8ce 	bl	800cf66 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	695b      	ldr	r3, [r3, #20]
 800cdd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	bf14      	ite	ne
 800cdd8:	2301      	movne	r3, #1
 800cdda:	2300      	moveq	r3, #0
 800cddc:	b2db      	uxtb	r3, r3
 800cdde:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cde6:	b2db      	uxtb	r3, r3
 800cde8:	2b22      	cmp	r3, #34	@ 0x22
 800cdea:	d108      	bne.n	800cdfe <UART_DMAError+0x7a>
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d005      	beq.n	800cdfe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800cdf8:	68b8      	ldr	r0, [r7, #8]
 800cdfa:	f000 f8db 	bl	800cfb4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce02:	f043 0210 	orr.w	r2, r3, #16
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ce0a:	68b8      	ldr	r0, [r7, #8]
 800ce0c:	f7ff ff4b 	bl	800cca6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce10:	bf00      	nop
 800ce12:	3710      	adds	r7, #16
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}

0800ce18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b090      	sub	sp, #64	@ 0x40
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	60f8      	str	r0, [r7, #12]
 800ce20:	60b9      	str	r1, [r7, #8]
 800ce22:	603b      	str	r3, [r7, #0]
 800ce24:	4613      	mov	r3, r2
 800ce26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce28:	e050      	b.n	800cecc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce30:	d04c      	beq.n	800cecc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ce32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d007      	beq.n	800ce48 <UART_WaitOnFlagUntilTimeout+0x30>
 800ce38:	f7fa f9e4 	bl	8007204 <HAL_GetTick>
 800ce3c:	4602      	mov	r2, r0
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	1ad3      	subs	r3, r2, r3
 800ce42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d241      	bcs.n	800cecc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	330c      	adds	r3, #12
 800ce4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce52:	e853 3f00 	ldrex	r3, [r3]
 800ce56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ce58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce5a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800ce5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	330c      	adds	r3, #12
 800ce66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ce68:	637a      	str	r2, [r7, #52]	@ 0x34
 800ce6a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ce6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ce70:	e841 2300 	strex	r3, r2, [r1]
 800ce74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ce76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d1e5      	bne.n	800ce48 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	3314      	adds	r3, #20
 800ce82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	e853 3f00 	ldrex	r3, [r3]
 800ce8a:	613b      	str	r3, [r7, #16]
   return(result);
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	f023 0301 	bic.w	r3, r3, #1
 800ce92:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	3314      	adds	r3, #20
 800ce9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ce9c:	623a      	str	r2, [r7, #32]
 800ce9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cea0:	69f9      	ldr	r1, [r7, #28]
 800cea2:	6a3a      	ldr	r2, [r7, #32]
 800cea4:	e841 2300 	strex	r3, r2, [r1]
 800cea8:	61bb      	str	r3, [r7, #24]
   return(result);
 800ceaa:	69bb      	ldr	r3, [r7, #24]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d1e5      	bne.n	800ce7c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2220      	movs	r2, #32
 800ceb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	2220      	movs	r2, #32
 800cebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2200      	movs	r2, #0
 800cec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800cec8:	2303      	movs	r3, #3
 800ceca:	e00f      	b.n	800ceec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	681a      	ldr	r2, [r3, #0]
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	4013      	ands	r3, r2
 800ced6:	68ba      	ldr	r2, [r7, #8]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	bf0c      	ite	eq
 800cedc:	2301      	moveq	r3, #1
 800cede:	2300      	movne	r3, #0
 800cee0:	b2db      	uxtb	r3, r3
 800cee2:	461a      	mov	r2, r3
 800cee4:	79fb      	ldrb	r3, [r7, #7]
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d09f      	beq.n	800ce2a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ceea:	2300      	movs	r3, #0
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3740      	adds	r7, #64	@ 0x40
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cef4:	b480      	push	{r7}
 800cef6:	b085      	sub	sp, #20
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	60f8      	str	r0, [r7, #12]
 800cefc:	60b9      	str	r1, [r7, #8]
 800cefe:	4613      	mov	r3, r2
 800cf00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	68ba      	ldr	r2, [r7, #8]
 800cf06:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	88fa      	ldrh	r2, [r7, #6]
 800cf0c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	88fa      	ldrh	r2, [r7, #6]
 800cf12:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2200      	movs	r2, #0
 800cf18:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2222      	movs	r2, #34	@ 0x22
 800cf1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	691b      	ldr	r3, [r3, #16]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d007      	beq.n	800cf3a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	68da      	ldr	r2, [r3, #12]
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cf38:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	695a      	ldr	r2, [r3, #20]
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f042 0201 	orr.w	r2, r2, #1
 800cf48:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	68da      	ldr	r2, [r3, #12]
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	f042 0220 	orr.w	r2, r2, #32
 800cf58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cf5a:	2300      	movs	r3, #0
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3714      	adds	r7, #20
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bc80      	pop	{r7}
 800cf64:	4770      	bx	lr

0800cf66 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cf66:	b480      	push	{r7}
 800cf68:	b089      	sub	sp, #36	@ 0x24
 800cf6a:	af00      	add	r7, sp, #0
 800cf6c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	330c      	adds	r3, #12
 800cf74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	e853 3f00 	ldrex	r3, [r3]
 800cf7c:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cf84:	61fb      	str	r3, [r7, #28]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	330c      	adds	r3, #12
 800cf8c:	69fa      	ldr	r2, [r7, #28]
 800cf8e:	61ba      	str	r2, [r7, #24]
 800cf90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf92:	6979      	ldr	r1, [r7, #20]
 800cf94:	69ba      	ldr	r2, [r7, #24]
 800cf96:	e841 2300 	strex	r3, r2, [r1]
 800cf9a:	613b      	str	r3, [r7, #16]
   return(result);
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d1e5      	bne.n	800cf6e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2220      	movs	r2, #32
 800cfa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800cfaa:	bf00      	nop
 800cfac:	3724      	adds	r7, #36	@ 0x24
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bc80      	pop	{r7}
 800cfb2:	4770      	bx	lr

0800cfb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b095      	sub	sp, #84	@ 0x54
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	330c      	adds	r3, #12
 800cfc2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfc6:	e853 3f00 	ldrex	r3, [r3]
 800cfca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cfcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cfd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	330c      	adds	r3, #12
 800cfda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cfdc:	643a      	str	r2, [r7, #64]	@ 0x40
 800cfde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfe0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cfe2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cfe4:	e841 2300 	strex	r3, r2, [r1]
 800cfe8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cfea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d1e5      	bne.n	800cfbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	3314      	adds	r3, #20
 800cff6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cff8:	6a3b      	ldr	r3, [r7, #32]
 800cffa:	e853 3f00 	ldrex	r3, [r3]
 800cffe:	61fb      	str	r3, [r7, #28]
   return(result);
 800d000:	69fb      	ldr	r3, [r7, #28]
 800d002:	f023 0301 	bic.w	r3, r3, #1
 800d006:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	3314      	adds	r3, #20
 800d00e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d010:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d012:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d014:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d016:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d018:	e841 2300 	strex	r3, r2, [r1]
 800d01c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d020:	2b00      	cmp	r3, #0
 800d022:	d1e5      	bne.n	800cff0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d119      	bne.n	800d060 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	330c      	adds	r3, #12
 800d032:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	e853 3f00 	ldrex	r3, [r3]
 800d03a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	f023 0310 	bic.w	r3, r3, #16
 800d042:	647b      	str	r3, [r7, #68]	@ 0x44
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	330c      	adds	r3, #12
 800d04a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d04c:	61ba      	str	r2, [r7, #24]
 800d04e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d050:	6979      	ldr	r1, [r7, #20]
 800d052:	69ba      	ldr	r2, [r7, #24]
 800d054:	e841 2300 	strex	r3, r2, [r1]
 800d058:	613b      	str	r3, [r7, #16]
   return(result);
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d1e5      	bne.n	800d02c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2220      	movs	r2, #32
 800d064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2200      	movs	r2, #0
 800d06c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d06e:	bf00      	nop
 800d070:	3754      	adds	r7, #84	@ 0x54
 800d072:	46bd      	mov	sp, r7
 800d074:	bc80      	pop	{r7}
 800d076:	4770      	bx	lr

0800d078 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b084      	sub	sp, #16
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d084:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	2200      	movs	r2, #0
 800d08a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	2200      	movs	r2, #0
 800d090:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d092:	68f8      	ldr	r0, [r7, #12]
 800d094:	f7ff fe07 	bl	800cca6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d098:	bf00      	nop
 800d09a:	3710      	adds	r7, #16
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b085      	sub	sp, #20
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d0ae:	b2db      	uxtb	r3, r3
 800d0b0:	2b21      	cmp	r3, #33	@ 0x21
 800d0b2:	d13e      	bne.n	800d132 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	689b      	ldr	r3, [r3, #8]
 800d0b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d0bc:	d114      	bne.n	800d0e8 <UART_Transmit_IT+0x48>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	691b      	ldr	r3, [r3, #16]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d110      	bne.n	800d0e8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6a1b      	ldr	r3, [r3, #32]
 800d0ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	881b      	ldrh	r3, [r3, #0]
 800d0d0:	461a      	mov	r2, r3
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d0da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6a1b      	ldr	r3, [r3, #32]
 800d0e0:	1c9a      	adds	r2, r3, #2
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	621a      	str	r2, [r3, #32]
 800d0e6:	e008      	b.n	800d0fa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6a1b      	ldr	r3, [r3, #32]
 800d0ec:	1c59      	adds	r1, r3, #1
 800d0ee:	687a      	ldr	r2, [r7, #4]
 800d0f0:	6211      	str	r1, [r2, #32]
 800d0f2:	781a      	ldrb	r2, [r3, #0]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d0fe:	b29b      	uxth	r3, r3
 800d100:	3b01      	subs	r3, #1
 800d102:	b29b      	uxth	r3, r3
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	4619      	mov	r1, r3
 800d108:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d10f      	bne.n	800d12e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	68da      	ldr	r2, [r3, #12]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d11c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	68da      	ldr	r2, [r3, #12]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d12c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d12e:	2300      	movs	r3, #0
 800d130:	e000      	b.n	800d134 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d132:	2302      	movs	r3, #2
  }
}
 800d134:	4618      	mov	r0, r3
 800d136:	3714      	adds	r7, #20
 800d138:	46bd      	mov	sp, r7
 800d13a:	bc80      	pop	{r7}
 800d13c:	4770      	bx	lr

0800d13e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d13e:	b580      	push	{r7, lr}
 800d140:	b082      	sub	sp, #8
 800d142:	af00      	add	r7, sp, #0
 800d144:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	68da      	ldr	r2, [r3, #12]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d154:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2220      	movs	r2, #32
 800d15a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f7f7 fbaa 	bl	80048b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d164:	2300      	movs	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3708      	adds	r7, #8
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}

0800d16e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d16e:	b580      	push	{r7, lr}
 800d170:	b08c      	sub	sp, #48	@ 0x30
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d17c:	b2db      	uxtb	r3, r3
 800d17e:	2b22      	cmp	r3, #34	@ 0x22
 800d180:	f040 80ae 	bne.w	800d2e0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	689b      	ldr	r3, [r3, #8]
 800d188:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d18c:	d117      	bne.n	800d1be <UART_Receive_IT+0x50>
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	691b      	ldr	r3, [r3, #16]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d113      	bne.n	800d1be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d196:	2300      	movs	r3, #0
 800d198:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d19e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	685b      	ldr	r3, [r3, #4]
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1ac:	b29a      	uxth	r2, r3
 800d1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1b6:	1c9a      	adds	r2, r3, #2
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	629a      	str	r2, [r3, #40]	@ 0x28
 800d1bc:	e026      	b.n	800d20c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	689b      	ldr	r3, [r3, #8]
 800d1cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d1d0:	d007      	beq.n	800d1e2 <UART_Receive_IT+0x74>
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	689b      	ldr	r3, [r3, #8]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d10a      	bne.n	800d1f0 <UART_Receive_IT+0x82>
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	691b      	ldr	r3, [r3, #16]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d106      	bne.n	800d1f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	b2da      	uxtb	r2, r3
 800d1ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ec:	701a      	strb	r2, [r3, #0]
 800d1ee:	e008      	b.n	800d202 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d1fc:	b2da      	uxtb	r2, r3
 800d1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d200:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d206:	1c5a      	adds	r2, r3, #1
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d210:	b29b      	uxth	r3, r3
 800d212:	3b01      	subs	r3, #1
 800d214:	b29b      	uxth	r3, r3
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	4619      	mov	r1, r3
 800d21a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d15d      	bne.n	800d2dc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	68da      	ldr	r2, [r3, #12]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f022 0220 	bic.w	r2, r2, #32
 800d22e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	68da      	ldr	r2, [r3, #12]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d23e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	695a      	ldr	r2, [r3, #20]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	f022 0201 	bic.w	r2, r2, #1
 800d24e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2220      	movs	r2, #32
 800d254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2200      	movs	r2, #0
 800d25c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d262:	2b01      	cmp	r3, #1
 800d264:	d135      	bne.n	800d2d2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2200      	movs	r2, #0
 800d26a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	330c      	adds	r3, #12
 800d272:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	e853 3f00 	ldrex	r3, [r3]
 800d27a:	613b      	str	r3, [r7, #16]
   return(result);
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	f023 0310 	bic.w	r3, r3, #16
 800d282:	627b      	str	r3, [r7, #36]	@ 0x24
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	330c      	adds	r3, #12
 800d28a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d28c:	623a      	str	r2, [r7, #32]
 800d28e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d290:	69f9      	ldr	r1, [r7, #28]
 800d292:	6a3a      	ldr	r2, [r7, #32]
 800d294:	e841 2300 	strex	r3, r2, [r1]
 800d298:	61bb      	str	r3, [r7, #24]
   return(result);
 800d29a:	69bb      	ldr	r3, [r7, #24]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d1e5      	bne.n	800d26c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f003 0310 	and.w	r3, r3, #16
 800d2aa:	2b10      	cmp	r3, #16
 800d2ac:	d10a      	bne.n	800d2c4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	60fb      	str	r3, [r7, #12]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	60fb      	str	r3, [r7, #12]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	60fb      	str	r3, [r7, #12]
 800d2c2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f7ff fcf4 	bl	800ccb8 <HAL_UARTEx_RxEventCallback>
 800d2d0:	e002      	b.n	800d2d8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f7f7 fad6 	bl	8004884 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	e002      	b.n	800d2e2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	e000      	b.n	800d2e2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d2e0:	2302      	movs	r3, #2
  }
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3730      	adds	r7, #48	@ 0x30
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
	...

0800d2ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	691b      	ldr	r3, [r3, #16]
 800d2fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	68da      	ldr	r2, [r3, #12]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	430a      	orrs	r2, r1
 800d308:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	689a      	ldr	r2, [r3, #8]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	691b      	ldr	r3, [r3, #16]
 800d312:	431a      	orrs	r2, r3
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	695b      	ldr	r3, [r3, #20]
 800d318:	4313      	orrs	r3, r2
 800d31a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	68db      	ldr	r3, [r3, #12]
 800d322:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800d326:	f023 030c 	bic.w	r3, r3, #12
 800d32a:	687a      	ldr	r2, [r7, #4]
 800d32c:	6812      	ldr	r2, [r2, #0]
 800d32e:	68b9      	ldr	r1, [r7, #8]
 800d330:	430b      	orrs	r3, r1
 800d332:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	695b      	ldr	r3, [r3, #20]
 800d33a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	699a      	ldr	r2, [r3, #24]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	430a      	orrs	r2, r1
 800d348:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	4a2c      	ldr	r2, [pc, #176]	@ (800d400 <UART_SetConfig+0x114>)
 800d350:	4293      	cmp	r3, r2
 800d352:	d103      	bne.n	800d35c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800d354:	f7fd f8e4 	bl	800a520 <HAL_RCC_GetPCLK2Freq>
 800d358:	60f8      	str	r0, [r7, #12]
 800d35a:	e002      	b.n	800d362 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800d35c:	f7fd f8cc 	bl	800a4f8 <HAL_RCC_GetPCLK1Freq>
 800d360:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d362:	68fa      	ldr	r2, [r7, #12]
 800d364:	4613      	mov	r3, r2
 800d366:	009b      	lsls	r3, r3, #2
 800d368:	4413      	add	r3, r2
 800d36a:	009a      	lsls	r2, r3, #2
 800d36c:	441a      	add	r2, r3
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	685b      	ldr	r3, [r3, #4]
 800d372:	009b      	lsls	r3, r3, #2
 800d374:	fbb2 f3f3 	udiv	r3, r2, r3
 800d378:	4a22      	ldr	r2, [pc, #136]	@ (800d404 <UART_SetConfig+0x118>)
 800d37a:	fba2 2303 	umull	r2, r3, r2, r3
 800d37e:	095b      	lsrs	r3, r3, #5
 800d380:	0119      	lsls	r1, r3, #4
 800d382:	68fa      	ldr	r2, [r7, #12]
 800d384:	4613      	mov	r3, r2
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	4413      	add	r3, r2
 800d38a:	009a      	lsls	r2, r3, #2
 800d38c:	441a      	add	r2, r3
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	009b      	lsls	r3, r3, #2
 800d394:	fbb2 f2f3 	udiv	r2, r2, r3
 800d398:	4b1a      	ldr	r3, [pc, #104]	@ (800d404 <UART_SetConfig+0x118>)
 800d39a:	fba3 0302 	umull	r0, r3, r3, r2
 800d39e:	095b      	lsrs	r3, r3, #5
 800d3a0:	2064      	movs	r0, #100	@ 0x64
 800d3a2:	fb00 f303 	mul.w	r3, r0, r3
 800d3a6:	1ad3      	subs	r3, r2, r3
 800d3a8:	011b      	lsls	r3, r3, #4
 800d3aa:	3332      	adds	r3, #50	@ 0x32
 800d3ac:	4a15      	ldr	r2, [pc, #84]	@ (800d404 <UART_SetConfig+0x118>)
 800d3ae:	fba2 2303 	umull	r2, r3, r2, r3
 800d3b2:	095b      	lsrs	r3, r3, #5
 800d3b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d3b8:	4419      	add	r1, r3
 800d3ba:	68fa      	ldr	r2, [r7, #12]
 800d3bc:	4613      	mov	r3, r2
 800d3be:	009b      	lsls	r3, r3, #2
 800d3c0:	4413      	add	r3, r2
 800d3c2:	009a      	lsls	r2, r3, #2
 800d3c4:	441a      	add	r2, r3
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	685b      	ldr	r3, [r3, #4]
 800d3ca:	009b      	lsls	r3, r3, #2
 800d3cc:	fbb2 f2f3 	udiv	r2, r2, r3
 800d3d0:	4b0c      	ldr	r3, [pc, #48]	@ (800d404 <UART_SetConfig+0x118>)
 800d3d2:	fba3 0302 	umull	r0, r3, r3, r2
 800d3d6:	095b      	lsrs	r3, r3, #5
 800d3d8:	2064      	movs	r0, #100	@ 0x64
 800d3da:	fb00 f303 	mul.w	r3, r0, r3
 800d3de:	1ad3      	subs	r3, r2, r3
 800d3e0:	011b      	lsls	r3, r3, #4
 800d3e2:	3332      	adds	r3, #50	@ 0x32
 800d3e4:	4a07      	ldr	r2, [pc, #28]	@ (800d404 <UART_SetConfig+0x118>)
 800d3e6:	fba2 2303 	umull	r2, r3, r2, r3
 800d3ea:	095b      	lsrs	r3, r3, #5
 800d3ec:	f003 020f 	and.w	r2, r3, #15
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	440a      	add	r2, r1
 800d3f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800d3f8:	bf00      	nop
 800d3fa:	3710      	adds	r7, #16
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}
 800d400:	40013800 	.word	0x40013800
 800d404:	51eb851f 	.word	0x51eb851f

0800d408 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d408:	b084      	sub	sp, #16
 800d40a:	b480      	push	{r7}
 800d40c:	b085      	sub	sp, #20
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
 800d412:	f107 001c 	add.w	r0, r7, #28
 800d416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d41a:	2300      	movs	r3, #0
 800d41c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d41e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d420:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d422:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800d426:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800d42a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d42c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800d42e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800d432:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d434:	68fa      	ldr	r2, [r7, #12]
 800d436:	4313      	orrs	r3, r2
 800d438:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800d442:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d446:	68fa      	ldr	r2, [r7, #12]
 800d448:	431a      	orrs	r2, r3
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d44e:	2300      	movs	r3, #0
}
 800d450:	4618      	mov	r0, r3
 800d452:	3714      	adds	r7, #20
 800d454:	46bd      	mov	sp, r7
 800d456:	bc80      	pop	{r7}
 800d458:	b004      	add	sp, #16
 800d45a:	4770      	bx	lr

0800d45c <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b083      	sub	sp, #12
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	370c      	adds	r7, #12
 800d46e:	46bd      	mov	sp, r7
 800d470:	bc80      	pop	{r7}
 800d472:	4770      	bx	lr

0800d474 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d474:	b480      	push	{r7}
 800d476:	b083      	sub	sp, #12
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800d488:	2300      	movs	r3, #0
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	370c      	adds	r7, #12
 800d48e:	46bd      	mov	sp, r7
 800d490:	bc80      	pop	{r7}
 800d492:	4770      	bx	lr

0800d494 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d494:	b480      	push	{r7}
 800d496:	b083      	sub	sp, #12
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2203      	movs	r2, #3
 800d4a0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d4a2:	2300      	movs	r3, #0
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	370c      	adds	r7, #12
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bc80      	pop	{r7}
 800d4ac:	4770      	bx	lr

0800d4ae <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d4ae:	b480      	push	{r7}
 800d4b0:	b083      	sub	sp, #12
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	f003 0303 	and.w	r3, r3, #3
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	370c      	adds	r7, #12
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bc80      	pop	{r7}
 800d4c6:	4770      	bx	lr

0800d4c8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b085      	sub	sp, #20
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
 800d4d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	681a      	ldr	r2, [r3, #0]
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d4e6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d4ec:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d4f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d4f4:	68fa      	ldr	r2, [r7, #12]
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	68db      	ldr	r3, [r3, #12]
 800d4fe:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800d502:	f023 030f 	bic.w	r3, r3, #15
 800d506:	68fa      	ldr	r2, [r7, #12]
 800d508:	431a      	orrs	r2, r3
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d50e:	2300      	movs	r3, #0
}
 800d510:	4618      	mov	r0, r3
 800d512:	3714      	adds	r7, #20
 800d514:	46bd      	mov	sp, r7
 800d516:	bc80      	pop	{r7}
 800d518:	4770      	bx	lr

0800d51a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d51a:	b480      	push	{r7}
 800d51c:	b083      	sub	sp, #12
 800d51e:	af00      	add	r7, sp, #0
 800d520:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	691b      	ldr	r3, [r3, #16]
 800d526:	b2db      	uxtb	r3, r3
}
 800d528:	4618      	mov	r0, r3
 800d52a:	370c      	adds	r7, #12
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bc80      	pop	{r7}
 800d530:	4770      	bx	lr

0800d532 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d532:	b480      	push	{r7}
 800d534:	b085      	sub	sp, #20
 800d536:	af00      	add	r7, sp, #0
 800d538:	6078      	str	r0, [r7, #4]
 800d53a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	3314      	adds	r3, #20
 800d540:	461a      	mov	r2, r3
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	4413      	add	r3, r2
 800d546:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	681b      	ldr	r3, [r3, #0]
}  
 800d54c:	4618      	mov	r0, r3
 800d54e:	3714      	adds	r7, #20
 800d550:	46bd      	mov	sp, r7
 800d552:	bc80      	pop	{r7}
 800d554:	4770      	bx	lr

0800d556 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d556:	b480      	push	{r7}
 800d558:	b085      	sub	sp, #20
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	6078      	str	r0, [r7, #4]
 800d55e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d560:	2300      	movs	r3, #0
 800d562:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	681a      	ldr	r2, [r3, #0]
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	685a      	ldr	r2, [r3, #4]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d57c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d582:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d588:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d58a:	68fa      	ldr	r2, [r7, #12]
 800d58c:	4313      	orrs	r3, r2
 800d58e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d594:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	431a      	orrs	r2, r3
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d5a0:	2300      	movs	r3, #0

}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3714      	adds	r7, #20
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bc80      	pop	{r7}
 800d5aa:	4770      	bx	lr

0800d5ac <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b088      	sub	sp, #32
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d5ba:	2310      	movs	r3, #16
 800d5bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d5be:	2340      	movs	r3, #64	@ 0x40
 800d5c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d5c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d5cc:	f107 0308 	add.w	r3, r7, #8
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	6878      	ldr	r0, [r7, #4]
 800d5d4:	f7ff ff78 	bl	800d4c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d5d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5dc:	2110      	movs	r1, #16
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f000 f9d6 	bl	800d990 <SDMMC_GetCmdResp1>
 800d5e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5e6:	69fb      	ldr	r3, [r7, #28]
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3720      	adds	r7, #32
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}

0800d5f0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b088      	sub	sp, #32
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d5fe:	2311      	movs	r3, #17
 800d600:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d602:	2340      	movs	r3, #64	@ 0x40
 800d604:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d606:	2300      	movs	r3, #0
 800d608:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d60a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d60e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d610:	f107 0308 	add.w	r3, r7, #8
 800d614:	4619      	mov	r1, r3
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f7ff ff56 	bl	800d4c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d61c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d620:	2111      	movs	r1, #17
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f000 f9b4 	bl	800d990 <SDMMC_GetCmdResp1>
 800d628:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d62a:	69fb      	ldr	r3, [r7, #28]
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3720      	adds	r7, #32
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b088      	sub	sp, #32
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d642:	2312      	movs	r3, #18
 800d644:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d646:	2340      	movs	r3, #64	@ 0x40
 800d648:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d64a:	2300      	movs	r3, #0
 800d64c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d64e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d652:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d654:	f107 0308 	add.w	r3, r7, #8
 800d658:	4619      	mov	r1, r3
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f7ff ff34 	bl	800d4c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d660:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d664:	2112      	movs	r1, #18
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 f992 	bl	800d990 <SDMMC_GetCmdResp1>
 800d66c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d66e:	69fb      	ldr	r3, [r7, #28]
}
 800d670:	4618      	mov	r0, r3
 800d672:	3720      	adds	r7, #32
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}

0800d678 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b088      	sub	sp, #32
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
 800d680:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d686:	2318      	movs	r3, #24
 800d688:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d68a:	2340      	movs	r3, #64	@ 0x40
 800d68c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d68e:	2300      	movs	r3, #0
 800d690:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d692:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d696:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d698:	f107 0308 	add.w	r3, r7, #8
 800d69c:	4619      	mov	r1, r3
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f7ff ff12 	bl	800d4c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d6a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d6a8:	2118      	movs	r1, #24
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f000 f970 	bl	800d990 <SDMMC_GetCmdResp1>
 800d6b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6b2:	69fb      	ldr	r3, [r7, #28]
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3720      	adds	r7, #32
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b088      	sub	sp, #32
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d6ca:	2319      	movs	r3, #25
 800d6cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d6ce:	2340      	movs	r3, #64	@ 0x40
 800d6d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d6d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d6da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d6dc:	f107 0308 	add.w	r3, r7, #8
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f7ff fef0 	bl	800d4c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d6e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d6ec:	2119      	movs	r1, #25
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f000 f94e 	bl	800d990 <SDMMC_GetCmdResp1>
 800d6f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6f6:	69fb      	ldr	r3, [r7, #28]
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3720      	adds	r7, #32
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}

0800d700 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b088      	sub	sp, #32
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d708:	2300      	movs	r3, #0
 800d70a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d70c:	230c      	movs	r3, #12
 800d70e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d710:	2340      	movs	r3, #64	@ 0x40
 800d712:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d714:	2300      	movs	r3, #0
 800d716:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d718:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d71c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d71e:	f107 0308 	add.w	r3, r7, #8
 800d722:	4619      	mov	r1, r3
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f7ff fecf 	bl	800d4c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d72a:	4a05      	ldr	r2, [pc, #20]	@ (800d740 <SDMMC_CmdStopTransfer+0x40>)
 800d72c:	210c      	movs	r1, #12
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 f92e 	bl	800d990 <SDMMC_GetCmdResp1>
 800d734:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d736:	69fb      	ldr	r3, [r7, #28]
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3720      	adds	r7, #32
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	05f5e100 	.word	0x05f5e100

0800d744 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b08a      	sub	sp, #40	@ 0x28
 800d748:	af00      	add	r7, sp, #0
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d754:	2307      	movs	r3, #7
 800d756:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d758:	2340      	movs	r3, #64	@ 0x40
 800d75a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d75c:	2300      	movs	r3, #0
 800d75e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d760:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d764:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d766:	f107 0310 	add.w	r3, r7, #16
 800d76a:	4619      	mov	r1, r3
 800d76c:	68f8      	ldr	r0, [r7, #12]
 800d76e:	f7ff feab 	bl	800d4c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d772:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d776:	2107      	movs	r1, #7
 800d778:	68f8      	ldr	r0, [r7, #12]
 800d77a:	f000 f909 	bl	800d990 <SDMMC_GetCmdResp1>
 800d77e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800d780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d782:	4618      	mov	r0, r3
 800d784:	3728      	adds	r7, #40	@ 0x28
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}

0800d78a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d78a:	b580      	push	{r7, lr}
 800d78c:	b088      	sub	sp, #32
 800d78e:	af00      	add	r7, sp, #0
 800d790:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d792:	2300      	movs	r3, #0
 800d794:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d796:	2300      	movs	r3, #0
 800d798:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d79a:	2300      	movs	r3, #0
 800d79c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d7a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d7a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d7a8:	f107 0308 	add.w	r3, r7, #8
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f7ff fe8a 	bl	800d4c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f000 fb21 	bl	800ddfc <SDMMC_GetCmdError>
 800d7ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7bc:	69fb      	ldr	r3, [r7, #28]
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3720      	adds	r7, #32
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}

0800d7c6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d7c6:	b580      	push	{r7, lr}
 800d7c8:	b088      	sub	sp, #32
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d7ce:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d7d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d7d4:	2308      	movs	r3, #8
 800d7d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d7d8:	2340      	movs	r3, #64	@ 0x40
 800d7da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d7dc:	2300      	movs	r3, #0
 800d7de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d7e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d7e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d7e6:	f107 0308 	add.w	r3, r7, #8
 800d7ea:	4619      	mov	r1, r3
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f7ff fe6b 	bl	800d4c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f000 fab4 	bl	800dd60 <SDMMC_GetCmdResp7>
 800d7f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7fa:	69fb      	ldr	r3, [r7, #28]
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3720      	adds	r7, #32
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}

0800d804 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b088      	sub	sp, #32
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
 800d80c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d812:	2337      	movs	r3, #55	@ 0x37
 800d814:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d816:	2340      	movs	r3, #64	@ 0x40
 800d818:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d81a:	2300      	movs	r3, #0
 800d81c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d81e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d822:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d824:	f107 0308 	add.w	r3, r7, #8
 800d828:	4619      	mov	r1, r3
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f7ff fe4c 	bl	800d4c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d830:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d834:	2137      	movs	r1, #55	@ 0x37
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f000 f8aa 	bl	800d990 <SDMMC_GetCmdResp1>
 800d83c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d83e:	69fb      	ldr	r3, [r7, #28]
}
 800d840:	4618      	mov	r0, r3
 800d842:	3720      	adds	r7, #32
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b088      	sub	sp, #32
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d858:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d85c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d85e:	2329      	movs	r3, #41	@ 0x29
 800d860:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d862:	2340      	movs	r3, #64	@ 0x40
 800d864:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d866:	2300      	movs	r3, #0
 800d868:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d86a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d86e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d870:	f107 0308 	add.w	r3, r7, #8
 800d874:	4619      	mov	r1, r3
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f7ff fe26 	bl	800d4c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f000 f9bd 	bl	800dbfc <SDMMC_GetCmdResp3>
 800d882:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d884:	69fb      	ldr	r3, [r7, #28]
}
 800d886:	4618      	mov	r0, r3
 800d888:	3720      	adds	r7, #32
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}

0800d88e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d88e:	b580      	push	{r7, lr}
 800d890:	b088      	sub	sp, #32
 800d892:	af00      	add	r7, sp, #0
 800d894:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d896:	2300      	movs	r3, #0
 800d898:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d89a:	2302      	movs	r3, #2
 800d89c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d89e:	23c0      	movs	r3, #192	@ 0xc0
 800d8a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d8a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d8aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d8ac:	f107 0308 	add.w	r3, r7, #8
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f7ff fe08 	bl	800d4c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f000 f957 	bl	800db6c <SDMMC_GetCmdResp2>
 800d8be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8c0:	69fb      	ldr	r3, [r7, #28]
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3720      	adds	r7, #32
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}

0800d8ca <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d8ca:	b580      	push	{r7, lr}
 800d8cc:	b088      	sub	sp, #32
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	6078      	str	r0, [r7, #4]
 800d8d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d8d8:	2309      	movs	r3, #9
 800d8da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d8dc:	23c0      	movs	r3, #192	@ 0xc0
 800d8de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d8e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d8e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d8ea:	f107 0308 	add.w	r3, r7, #8
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f7ff fde9 	bl	800d4c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f000 f938 	bl	800db6c <SDMMC_GetCmdResp2>
 800d8fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8fe:	69fb      	ldr	r3, [r7, #28]
}
 800d900:	4618      	mov	r0, r3
 800d902:	3720      	adds	r7, #32
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b088      	sub	sp, #32
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d912:	2300      	movs	r3, #0
 800d914:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d916:	2303      	movs	r3, #3
 800d918:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d91a:	2340      	movs	r3, #64	@ 0x40
 800d91c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d91e:	2300      	movs	r3, #0
 800d920:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d922:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d926:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d928:	f107 0308 	add.w	r3, r7, #8
 800d92c:	4619      	mov	r1, r3
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f7ff fdca 	bl	800d4c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d934:	683a      	ldr	r2, [r7, #0]
 800d936:	2103      	movs	r1, #3
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f000 f99b 	bl	800dc74 <SDMMC_GetCmdResp6>
 800d93e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d940:	69fb      	ldr	r3, [r7, #28]
}
 800d942:	4618      	mov	r0, r3
 800d944:	3720      	adds	r7, #32
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}

0800d94a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d94a:	b580      	push	{r7, lr}
 800d94c:	b088      	sub	sp, #32
 800d94e:	af00      	add	r7, sp, #0
 800d950:	6078      	str	r0, [r7, #4]
 800d952:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d958:	230d      	movs	r3, #13
 800d95a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d95c:	2340      	movs	r3, #64	@ 0x40
 800d95e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d960:	2300      	movs	r3, #0
 800d962:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d964:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d968:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d96a:	f107 0308 	add.w	r3, r7, #8
 800d96e:	4619      	mov	r1, r3
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f7ff fda9 	bl	800d4c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d97a:	210d      	movs	r1, #13
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f000 f807 	bl	800d990 <SDMMC_GetCmdResp1>
 800d982:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d984:	69fb      	ldr	r3, [r7, #28]
}
 800d986:	4618      	mov	r0, r3
 800d988:	3720      	adds	r7, #32
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
	...

0800d990 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b088      	sub	sp, #32
 800d994:	af00      	add	r7, sp, #0
 800d996:	60f8      	str	r0, [r7, #12]
 800d998:	460b      	mov	r3, r1
 800d99a:	607a      	str	r2, [r7, #4]
 800d99c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d99e:	4b70      	ldr	r3, [pc, #448]	@ (800db60 <SDMMC_GetCmdResp1+0x1d0>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	4a70      	ldr	r2, [pc, #448]	@ (800db64 <SDMMC_GetCmdResp1+0x1d4>)
 800d9a4:	fba2 2303 	umull	r2, r3, r2, r3
 800d9a8:	0a5a      	lsrs	r2, r3, #9
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	fb02 f303 	mul.w	r3, r2, r3
 800d9b0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d9b2:	69fb      	ldr	r3, [r7, #28]
 800d9b4:	1e5a      	subs	r2, r3, #1
 800d9b6:	61fa      	str	r2, [r7, #28]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d102      	bne.n	800d9c2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d9bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d9c0:	e0c9      	b.n	800db56 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9c6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d9c8:	69bb      	ldr	r3, [r7, #24]
 800d9ca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d0ef      	beq.n	800d9b2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d9d2:	69bb      	ldr	r3, [r7, #24]
 800d9d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d1ea      	bne.n	800d9b2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9e0:	f003 0304 	and.w	r3, r3, #4
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d004      	beq.n	800d9f2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	2204      	movs	r2, #4
 800d9ec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d9ee:	2304      	movs	r3, #4
 800d9f0:	e0b1      	b.n	800db56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9f6:	f003 0301 	and.w	r3, r3, #1
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d004      	beq.n	800da08 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	2201      	movs	r2, #1
 800da02:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da04:	2301      	movs	r3, #1
 800da06:	e0a6      	b.n	800db56 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	22c5      	movs	r2, #197	@ 0xc5
 800da0c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800da0e:	68f8      	ldr	r0, [r7, #12]
 800da10:	f7ff fd83 	bl	800d51a <SDIO_GetCommandResponse>
 800da14:	4603      	mov	r3, r0
 800da16:	461a      	mov	r2, r3
 800da18:	7afb      	ldrb	r3, [r7, #11]
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d001      	beq.n	800da22 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da1e:	2301      	movs	r3, #1
 800da20:	e099      	b.n	800db56 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800da22:	2100      	movs	r1, #0
 800da24:	68f8      	ldr	r0, [r7, #12]
 800da26:	f7ff fd84 	bl	800d532 <SDIO_GetResponse>
 800da2a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800da2c:	697a      	ldr	r2, [r7, #20]
 800da2e:	4b4e      	ldr	r3, [pc, #312]	@ (800db68 <SDMMC_GetCmdResp1+0x1d8>)
 800da30:	4013      	ands	r3, r2
 800da32:	2b00      	cmp	r3, #0
 800da34:	d101      	bne.n	800da3a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800da36:	2300      	movs	r3, #0
 800da38:	e08d      	b.n	800db56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	da02      	bge.n	800da46 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800da40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800da44:	e087      	b.n	800db56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d001      	beq.n	800da54 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800da50:	2340      	movs	r3, #64	@ 0x40
 800da52:	e080      	b.n	800db56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d001      	beq.n	800da62 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800da5e:	2380      	movs	r3, #128	@ 0x80
 800da60:	e079      	b.n	800db56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d002      	beq.n	800da72 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800da6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800da70:	e071      	b.n	800db56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d002      	beq.n	800da82 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800da7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800da80:	e069      	b.n	800db56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d002      	beq.n	800da92 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800da8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da90:	e061      	b.n	800db56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d002      	beq.n	800daa2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800da9c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800daa0:	e059      	b.n	800db56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d002      	beq.n	800dab2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800daac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dab0:	e051      	b.n	800db56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d002      	beq.n	800dac2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dabc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dac0:	e049      	b.n	800db56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d002      	beq.n	800dad2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dacc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800dad0:	e041      	b.n	800db56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d002      	beq.n	800dae2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800dadc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dae0:	e039      	b.n	800db56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d002      	beq.n	800daf2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800daec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800daf0:	e031      	b.n	800db56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d002      	beq.n	800db02 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dafc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800db00:	e029      	b.n	800db56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d002      	beq.n	800db12 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800db0c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800db10:	e021      	b.n	800db56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d002      	beq.n	800db22 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800db1c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800db20:	e019      	b.n	800db56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d002      	beq.n	800db32 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800db2c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800db30:	e011      	b.n	800db56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d002      	beq.n	800db42 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800db3c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800db40:	e009      	b.n	800db56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	f003 0308 	and.w	r3, r3, #8
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d002      	beq.n	800db52 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800db4c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800db50:	e001      	b.n	800db56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800db52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800db56:	4618      	mov	r0, r3
 800db58:	3720      	adds	r7, #32
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}
 800db5e:	bf00      	nop
 800db60:	20000018 	.word	0x20000018
 800db64:	10624dd3 	.word	0x10624dd3
 800db68:	fdffe008 	.word	0xfdffe008

0800db6c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800db6c:	b480      	push	{r7}
 800db6e:	b085      	sub	sp, #20
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800db74:	4b1f      	ldr	r3, [pc, #124]	@ (800dbf4 <SDMMC_GetCmdResp2+0x88>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4a1f      	ldr	r2, [pc, #124]	@ (800dbf8 <SDMMC_GetCmdResp2+0x8c>)
 800db7a:	fba2 2303 	umull	r2, r3, r2, r3
 800db7e:	0a5b      	lsrs	r3, r3, #9
 800db80:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db84:	fb02 f303 	mul.w	r3, r2, r3
 800db88:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	1e5a      	subs	r2, r3, #1
 800db8e:	60fa      	str	r2, [r7, #12]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d102      	bne.n	800db9a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db94:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800db98:	e026      	b.n	800dbe8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db9e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d0ef      	beq.n	800db8a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d1ea      	bne.n	800db8a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbb8:	f003 0304 	and.w	r3, r3, #4
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d004      	beq.n	800dbca <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2204      	movs	r2, #4
 800dbc4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dbc6:	2304      	movs	r3, #4
 800dbc8:	e00e      	b.n	800dbe8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbce:	f003 0301 	and.w	r3, r3, #1
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d004      	beq.n	800dbe0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2201      	movs	r2, #1
 800dbda:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbdc:	2301      	movs	r3, #1
 800dbde:	e003      	b.n	800dbe8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	22c5      	movs	r2, #197	@ 0xc5
 800dbe4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800dbe6:	2300      	movs	r3, #0
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3714      	adds	r7, #20
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bc80      	pop	{r7}
 800dbf0:	4770      	bx	lr
 800dbf2:	bf00      	nop
 800dbf4:	20000018 	.word	0x20000018
 800dbf8:	10624dd3 	.word	0x10624dd3

0800dbfc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800dbfc:	b480      	push	{r7}
 800dbfe:	b085      	sub	sp, #20
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc04:	4b19      	ldr	r3, [pc, #100]	@ (800dc6c <SDMMC_GetCmdResp3+0x70>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	4a19      	ldr	r2, [pc, #100]	@ (800dc70 <SDMMC_GetCmdResp3+0x74>)
 800dc0a:	fba2 2303 	umull	r2, r3, r2, r3
 800dc0e:	0a5b      	lsrs	r3, r3, #9
 800dc10:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc14:	fb02 f303 	mul.w	r3, r2, r3
 800dc18:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	1e5a      	subs	r2, r3, #1
 800dc1e:	60fa      	str	r2, [r7, #12]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d102      	bne.n	800dc2a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc24:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dc28:	e01b      	b.n	800dc62 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc2e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d0ef      	beq.n	800dc1a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d1ea      	bne.n	800dc1a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc48:	f003 0304 	and.w	r3, r3, #4
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d004      	beq.n	800dc5a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2204      	movs	r2, #4
 800dc54:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc56:	2304      	movs	r3, #4
 800dc58:	e003      	b.n	800dc62 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	22c5      	movs	r2, #197	@ 0xc5
 800dc5e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dc60:	2300      	movs	r3, #0
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	3714      	adds	r7, #20
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bc80      	pop	{r7}
 800dc6a:	4770      	bx	lr
 800dc6c:	20000018 	.word	0x20000018
 800dc70:	10624dd3 	.word	0x10624dd3

0800dc74 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b088      	sub	sp, #32
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	460b      	mov	r3, r1
 800dc7e:	607a      	str	r2, [r7, #4]
 800dc80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc82:	4b35      	ldr	r3, [pc, #212]	@ (800dd58 <SDMMC_GetCmdResp6+0xe4>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4a35      	ldr	r2, [pc, #212]	@ (800dd5c <SDMMC_GetCmdResp6+0xe8>)
 800dc88:	fba2 2303 	umull	r2, r3, r2, r3
 800dc8c:	0a5b      	lsrs	r3, r3, #9
 800dc8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc92:	fb02 f303 	mul.w	r3, r2, r3
 800dc96:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800dc98:	69fb      	ldr	r3, [r7, #28]
 800dc9a:	1e5a      	subs	r2, r3, #1
 800dc9c:	61fa      	str	r2, [r7, #28]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d102      	bne.n	800dca8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dca2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dca6:	e052      	b.n	800dd4e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcac:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dcae:	69bb      	ldr	r3, [r7, #24]
 800dcb0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d0ef      	beq.n	800dc98 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dcb8:	69bb      	ldr	r3, [r7, #24]
 800dcba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d1ea      	bne.n	800dc98 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcc6:	f003 0304 	and.w	r3, r3, #4
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d004      	beq.n	800dcd8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	2204      	movs	r2, #4
 800dcd2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dcd4:	2304      	movs	r3, #4
 800dcd6:	e03a      	b.n	800dd4e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcdc:	f003 0301 	and.w	r3, r3, #1
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d004      	beq.n	800dcee <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2201      	movs	r2, #1
 800dce8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dcea:	2301      	movs	r3, #1
 800dcec:	e02f      	b.n	800dd4e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800dcee:	68f8      	ldr	r0, [r7, #12]
 800dcf0:	f7ff fc13 	bl	800d51a <SDIO_GetCommandResponse>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	7afb      	ldrb	r3, [r7, #11]
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d001      	beq.n	800dd02 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dcfe:	2301      	movs	r3, #1
 800dd00:	e025      	b.n	800dd4e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	22c5      	movs	r2, #197	@ 0xc5
 800dd06:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800dd08:	2100      	movs	r1, #0
 800dd0a:	68f8      	ldr	r0, [r7, #12]
 800dd0c:	f7ff fc11 	bl	800d532 <SDIO_GetResponse>
 800dd10:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d106      	bne.n	800dd2a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	0c1b      	lsrs	r3, r3, #16
 800dd20:	b29a      	uxth	r2, r3
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800dd26:	2300      	movs	r3, #0
 800dd28:	e011      	b.n	800dd4e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d002      	beq.n	800dd3a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dd34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dd38:	e009      	b.n	800dd4e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d002      	beq.n	800dd4a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dd44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dd48:	e001      	b.n	800dd4e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dd4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3720      	adds	r7, #32
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}
 800dd56:	bf00      	nop
 800dd58:	20000018 	.word	0x20000018
 800dd5c:	10624dd3 	.word	0x10624dd3

0800dd60 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800dd60:	b480      	push	{r7}
 800dd62:	b085      	sub	sp, #20
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd68:	4b22      	ldr	r3, [pc, #136]	@ (800ddf4 <SDMMC_GetCmdResp7+0x94>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	4a22      	ldr	r2, [pc, #136]	@ (800ddf8 <SDMMC_GetCmdResp7+0x98>)
 800dd6e:	fba2 2303 	umull	r2, r3, r2, r3
 800dd72:	0a5b      	lsrs	r3, r3, #9
 800dd74:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd78:	fb02 f303 	mul.w	r3, r2, r3
 800dd7c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	1e5a      	subs	r2, r3, #1
 800dd82:	60fa      	str	r2, [r7, #12]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d102      	bne.n	800dd8e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd88:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dd8c:	e02c      	b.n	800dde8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd92:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d0ef      	beq.n	800dd7e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d1ea      	bne.n	800dd7e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ddac:	f003 0304 	and.w	r3, r3, #4
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d004      	beq.n	800ddbe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2204      	movs	r2, #4
 800ddb8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ddba:	2304      	movs	r3, #4
 800ddbc:	e014      	b.n	800dde8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ddc2:	f003 0301 	and.w	r3, r3, #1
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d004      	beq.n	800ddd4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2201      	movs	r2, #1
 800ddce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	e009      	b.n	800dde8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ddd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d002      	beq.n	800dde6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2240      	movs	r2, #64	@ 0x40
 800dde4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dde6:	2300      	movs	r3, #0
  
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3714      	adds	r7, #20
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bc80      	pop	{r7}
 800ddf0:	4770      	bx	lr
 800ddf2:	bf00      	nop
 800ddf4:	20000018 	.word	0x20000018
 800ddf8:	10624dd3 	.word	0x10624dd3

0800ddfc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	b085      	sub	sp, #20
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800de04:	4b10      	ldr	r3, [pc, #64]	@ (800de48 <SDMMC_GetCmdError+0x4c>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4a10      	ldr	r2, [pc, #64]	@ (800de4c <SDMMC_GetCmdError+0x50>)
 800de0a:	fba2 2303 	umull	r2, r3, r2, r3
 800de0e:	0a5b      	lsrs	r3, r3, #9
 800de10:	f241 3288 	movw	r2, #5000	@ 0x1388
 800de14:	fb02 f303 	mul.w	r3, r2, r3
 800de18:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	1e5a      	subs	r2, r3, #1
 800de1e:	60fa      	str	r2, [r7, #12]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d102      	bne.n	800de2a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800de24:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800de28:	e009      	b.n	800de3e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de32:	2b00      	cmp	r3, #0
 800de34:	d0f1      	beq.n	800de1a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	22c5      	movs	r2, #197	@ 0xc5
 800de3a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800de3c:	2300      	movs	r3, #0
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3714      	adds	r7, #20
 800de42:	46bd      	mov	sp, r7
 800de44:	bc80      	pop	{r7}
 800de46:	4770      	bx	lr
 800de48:	20000018 	.word	0x20000018
 800de4c:	10624dd3 	.word	0x10624dd3

0800de50 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800de54:	4904      	ldr	r1, [pc, #16]	@ (800de68 <MX_FATFS_Init+0x18>)
 800de56:	4805      	ldr	r0, [pc, #20]	@ (800de6c <MX_FATFS_Init+0x1c>)
 800de58:	f003 fc26 	bl	80116a8 <FATFS_LinkDriver>
 800de5c:	4603      	mov	r3, r0
 800de5e:	461a      	mov	r2, r3
 800de60:	4b03      	ldr	r3, [pc, #12]	@ (800de70 <MX_FATFS_Init+0x20>)
 800de62:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800de64:	bf00      	nop
 800de66:	bd80      	pop	{r7, pc}
 800de68:	20000eac 	.word	0x20000eac
 800de6c:	080153bc 	.word	0x080153bc
 800de70:	20000ea8 	.word	0x20000ea8

0800de74 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800de74:	b480      	push	{r7}
 800de76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800de78:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bc80      	pop	{r7}
 800de80:	4770      	bx	lr
	...

0800de84 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b082      	sub	sp, #8
 800de88:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800de8a:	2300      	movs	r3, #0
 800de8c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800de8e:	f000 f86b 	bl	800df68 <BSP_SD_IsDetected>
 800de92:	4603      	mov	r3, r0
 800de94:	2b01      	cmp	r3, #1
 800de96:	d001      	beq.n	800de9c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800de98:	2301      	movs	r3, #1
 800de9a:	e005      	b.n	800dea8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800de9c:	4804      	ldr	r0, [pc, #16]	@ (800deb0 <BSP_SD_Init+0x2c>)
 800de9e:	f7fc fba1 	bl	800a5e4 <HAL_SD_Init>
 800dea2:	4603      	mov	r3, r0
 800dea4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800dea6:	79fb      	ldrb	r3, [r7, #7]
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3708      	adds	r7, #8
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}
 800deb0:	20000924 	.word	0x20000924

0800deb4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b088      	sub	sp, #32
 800deb8:	af02      	add	r7, sp, #8
 800deba:	60f8      	str	r0, [r7, #12]
 800debc:	60b9      	str	r1, [r7, #8]
 800debe:	607a      	str	r2, [r7, #4]
 800dec0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800dec2:	2300      	movs	r3, #0
 800dec4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	9300      	str	r3, [sp, #0]
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	68ba      	ldr	r2, [r7, #8]
 800dece:	68f9      	ldr	r1, [r7, #12]
 800ded0:	4806      	ldr	r0, [pc, #24]	@ (800deec <BSP_SD_ReadBlocks+0x38>)
 800ded2:	f7fc fc37 	bl	800a744 <HAL_SD_ReadBlocks>
 800ded6:	4603      	mov	r3, r0
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d001      	beq.n	800dee0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800dedc:	2301      	movs	r3, #1
 800dede:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dee0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3718      	adds	r7, #24
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop
 800deec:	20000924 	.word	0x20000924

0800def0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b088      	sub	sp, #32
 800def4:	af02      	add	r7, sp, #8
 800def6:	60f8      	str	r0, [r7, #12]
 800def8:	60b9      	str	r1, [r7, #8]
 800defa:	607a      	str	r2, [r7, #4]
 800defc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800defe:	2300      	movs	r3, #0
 800df00:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	9300      	str	r3, [sp, #0]
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	68ba      	ldr	r2, [r7, #8]
 800df0a:	68f9      	ldr	r1, [r7, #12]
 800df0c:	4806      	ldr	r0, [pc, #24]	@ (800df28 <BSP_SD_WriteBlocks+0x38>)
 800df0e:	f7fc fdf7 	bl	800ab00 <HAL_SD_WriteBlocks>
 800df12:	4603      	mov	r3, r0
 800df14:	2b00      	cmp	r3, #0
 800df16:	d001      	beq.n	800df1c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800df18:	2301      	movs	r3, #1
 800df1a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800df1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3718      	adds	r7, #24
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}
 800df26:	bf00      	nop
 800df28:	20000924 	.word	0x20000924

0800df2c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800df30:	4805      	ldr	r0, [pc, #20]	@ (800df48 <BSP_SD_GetCardState+0x1c>)
 800df32:	f7fd f93a 	bl	800b1aa <HAL_SD_GetCardState>
 800df36:	4603      	mov	r3, r0
 800df38:	2b04      	cmp	r3, #4
 800df3a:	bf14      	ite	ne
 800df3c:	2301      	movne	r3, #1
 800df3e:	2300      	moveq	r3, #0
 800df40:	b2db      	uxtb	r3, r3
}
 800df42:	4618      	mov	r0, r3
 800df44:	bd80      	pop	{r7, pc}
 800df46:	bf00      	nop
 800df48:	20000924 	.word	0x20000924

0800df4c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b082      	sub	sp, #8
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800df54:	6879      	ldr	r1, [r7, #4]
 800df56:	4803      	ldr	r0, [pc, #12]	@ (800df64 <BSP_SD_GetCardInfo+0x18>)
 800df58:	f7fd f8fc 	bl	800b154 <HAL_SD_GetCardInfo>
}
 800df5c:	bf00      	nop
 800df5e:	3708      	adds	r7, #8
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}
 800df64:	20000924 	.word	0x20000924

0800df68 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800df68:	b480      	push	{r7}
 800df6a:	b083      	sub	sp, #12
 800df6c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800df6e:	2301      	movs	r3, #1
 800df70:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800df72:	79fb      	ldrb	r3, [r7, #7]
 800df74:	b2db      	uxtb	r3, r3
}
 800df76:	4618      	mov	r0, r3
 800df78:	370c      	adds	r7, #12
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bc80      	pop	{r7}
 800df7e:	4770      	bx	lr

0800df80 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b084      	sub	sp, #16
 800df84:	af00      	add	r7, sp, #0
 800df86:	4603      	mov	r3, r0
 800df88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800df8a:	79fb      	ldrb	r3, [r7, #7]
 800df8c:	4a08      	ldr	r2, [pc, #32]	@ (800dfb0 <disk_status+0x30>)
 800df8e:	009b      	lsls	r3, r3, #2
 800df90:	4413      	add	r3, r2
 800df92:	685b      	ldr	r3, [r3, #4]
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	79fa      	ldrb	r2, [r7, #7]
 800df98:	4905      	ldr	r1, [pc, #20]	@ (800dfb0 <disk_status+0x30>)
 800df9a:	440a      	add	r2, r1
 800df9c:	7a12      	ldrb	r2, [r2, #8]
 800df9e:	4610      	mov	r0, r2
 800dfa0:	4798      	blx	r3
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800dfa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3710      	adds	r7, #16
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}
 800dfb0:	20001330 	.word	0x20001330

0800dfb4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b084      	sub	sp, #16
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	4603      	mov	r3, r0
 800dfbc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800dfc2:	79fb      	ldrb	r3, [r7, #7]
 800dfc4:	4a0d      	ldr	r2, [pc, #52]	@ (800dffc <disk_initialize+0x48>)
 800dfc6:	5cd3      	ldrb	r3, [r2, r3]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d111      	bne.n	800dff0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800dfcc:	79fb      	ldrb	r3, [r7, #7]
 800dfce:	4a0b      	ldr	r2, [pc, #44]	@ (800dffc <disk_initialize+0x48>)
 800dfd0:	2101      	movs	r1, #1
 800dfd2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800dfd4:	79fb      	ldrb	r3, [r7, #7]
 800dfd6:	4a09      	ldr	r2, [pc, #36]	@ (800dffc <disk_initialize+0x48>)
 800dfd8:	009b      	lsls	r3, r3, #2
 800dfda:	4413      	add	r3, r2
 800dfdc:	685b      	ldr	r3, [r3, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	79fa      	ldrb	r2, [r7, #7]
 800dfe2:	4906      	ldr	r1, [pc, #24]	@ (800dffc <disk_initialize+0x48>)
 800dfe4:	440a      	add	r2, r1
 800dfe6:	7a12      	ldrb	r2, [r2, #8]
 800dfe8:	4610      	mov	r0, r2
 800dfea:	4798      	blx	r3
 800dfec:	4603      	mov	r3, r0
 800dfee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800dff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3710      	adds	r7, #16
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}
 800dffa:	bf00      	nop
 800dffc:	20001330 	.word	0x20001330

0800e000 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e000:	b590      	push	{r4, r7, lr}
 800e002:	b087      	sub	sp, #28
 800e004:	af00      	add	r7, sp, #0
 800e006:	60b9      	str	r1, [r7, #8]
 800e008:	607a      	str	r2, [r7, #4]
 800e00a:	603b      	str	r3, [r7, #0]
 800e00c:	4603      	mov	r3, r0
 800e00e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e010:	7bfb      	ldrb	r3, [r7, #15]
 800e012:	4a0a      	ldr	r2, [pc, #40]	@ (800e03c <disk_read+0x3c>)
 800e014:	009b      	lsls	r3, r3, #2
 800e016:	4413      	add	r3, r2
 800e018:	685b      	ldr	r3, [r3, #4]
 800e01a:	689c      	ldr	r4, [r3, #8]
 800e01c:	7bfb      	ldrb	r3, [r7, #15]
 800e01e:	4a07      	ldr	r2, [pc, #28]	@ (800e03c <disk_read+0x3c>)
 800e020:	4413      	add	r3, r2
 800e022:	7a18      	ldrb	r0, [r3, #8]
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	687a      	ldr	r2, [r7, #4]
 800e028:	68b9      	ldr	r1, [r7, #8]
 800e02a:	47a0      	blx	r4
 800e02c:	4603      	mov	r3, r0
 800e02e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e030:	7dfb      	ldrb	r3, [r7, #23]
}
 800e032:	4618      	mov	r0, r3
 800e034:	371c      	adds	r7, #28
 800e036:	46bd      	mov	sp, r7
 800e038:	bd90      	pop	{r4, r7, pc}
 800e03a:	bf00      	nop
 800e03c:	20001330 	.word	0x20001330

0800e040 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e040:	b590      	push	{r4, r7, lr}
 800e042:	b087      	sub	sp, #28
 800e044:	af00      	add	r7, sp, #0
 800e046:	60b9      	str	r1, [r7, #8]
 800e048:	607a      	str	r2, [r7, #4]
 800e04a:	603b      	str	r3, [r7, #0]
 800e04c:	4603      	mov	r3, r0
 800e04e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e050:	7bfb      	ldrb	r3, [r7, #15]
 800e052:	4a0a      	ldr	r2, [pc, #40]	@ (800e07c <disk_write+0x3c>)
 800e054:	009b      	lsls	r3, r3, #2
 800e056:	4413      	add	r3, r2
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	68dc      	ldr	r4, [r3, #12]
 800e05c:	7bfb      	ldrb	r3, [r7, #15]
 800e05e:	4a07      	ldr	r2, [pc, #28]	@ (800e07c <disk_write+0x3c>)
 800e060:	4413      	add	r3, r2
 800e062:	7a18      	ldrb	r0, [r3, #8]
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	687a      	ldr	r2, [r7, #4]
 800e068:	68b9      	ldr	r1, [r7, #8]
 800e06a:	47a0      	blx	r4
 800e06c:	4603      	mov	r3, r0
 800e06e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e070:	7dfb      	ldrb	r3, [r7, #23]
}
 800e072:	4618      	mov	r0, r3
 800e074:	371c      	adds	r7, #28
 800e076:	46bd      	mov	sp, r7
 800e078:	bd90      	pop	{r4, r7, pc}
 800e07a:	bf00      	nop
 800e07c:	20001330 	.word	0x20001330

0800e080 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b084      	sub	sp, #16
 800e084:	af00      	add	r7, sp, #0
 800e086:	4603      	mov	r3, r0
 800e088:	603a      	str	r2, [r7, #0]
 800e08a:	71fb      	strb	r3, [r7, #7]
 800e08c:	460b      	mov	r3, r1
 800e08e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e090:	79fb      	ldrb	r3, [r7, #7]
 800e092:	4a09      	ldr	r2, [pc, #36]	@ (800e0b8 <disk_ioctl+0x38>)
 800e094:	009b      	lsls	r3, r3, #2
 800e096:	4413      	add	r3, r2
 800e098:	685b      	ldr	r3, [r3, #4]
 800e09a:	691b      	ldr	r3, [r3, #16]
 800e09c:	79fa      	ldrb	r2, [r7, #7]
 800e09e:	4906      	ldr	r1, [pc, #24]	@ (800e0b8 <disk_ioctl+0x38>)
 800e0a0:	440a      	add	r2, r1
 800e0a2:	7a10      	ldrb	r0, [r2, #8]
 800e0a4:	79b9      	ldrb	r1, [r7, #6]
 800e0a6:	683a      	ldr	r2, [r7, #0]
 800e0a8:	4798      	blx	r3
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	73fb      	strb	r3, [r7, #15]
  return res;
 800e0ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	3710      	adds	r7, #16
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}
 800e0b8:	20001330 	.word	0x20001330

0800e0bc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e0bc:	b480      	push	{r7}
 800e0be:	b087      	sub	sp, #28
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	60f8      	str	r0, [r7, #12]
 800e0c4:	60b9      	str	r1, [r7, #8]
 800e0c6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800e0d0:	e007      	b.n	800e0e2 <mem_cpy+0x26>
		*d++ = *s++;
 800e0d2:	693a      	ldr	r2, [r7, #16]
 800e0d4:	1c53      	adds	r3, r2, #1
 800e0d6:	613b      	str	r3, [r7, #16]
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	1c59      	adds	r1, r3, #1
 800e0dc:	6179      	str	r1, [r7, #20]
 800e0de:	7812      	ldrb	r2, [r2, #0]
 800e0e0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	1e5a      	subs	r2, r3, #1
 800e0e6:	607a      	str	r2, [r7, #4]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d1f2      	bne.n	800e0d2 <mem_cpy+0x16>
}
 800e0ec:	bf00      	nop
 800e0ee:	bf00      	nop
 800e0f0:	371c      	adds	r7, #28
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bc80      	pop	{r7}
 800e0f6:	4770      	bx	lr

0800e0f8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e0f8:	b480      	push	{r7}
 800e0fa:	b087      	sub	sp, #28
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	60f8      	str	r0, [r7, #12]
 800e100:	60b9      	str	r1, [r7, #8]
 800e102:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800e108:	e005      	b.n	800e116 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	1c5a      	adds	r2, r3, #1
 800e10e:	617a      	str	r2, [r7, #20]
 800e110:	68ba      	ldr	r2, [r7, #8]
 800e112:	b2d2      	uxtb	r2, r2
 800e114:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	1e5a      	subs	r2, r3, #1
 800e11a:	607a      	str	r2, [r7, #4]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d1f4      	bne.n	800e10a <mem_set+0x12>
}
 800e120:	bf00      	nop
 800e122:	bf00      	nop
 800e124:	371c      	adds	r7, #28
 800e126:	46bd      	mov	sp, r7
 800e128:	bc80      	pop	{r7}
 800e12a:	4770      	bx	lr

0800e12c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800e12c:	b480      	push	{r7}
 800e12e:	b089      	sub	sp, #36	@ 0x24
 800e130:	af00      	add	r7, sp, #0
 800e132:	60f8      	str	r0, [r7, #12]
 800e134:	60b9      	str	r1, [r7, #8]
 800e136:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	61fb      	str	r3, [r7, #28]
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e140:	2300      	movs	r3, #0
 800e142:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800e144:	bf00      	nop
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	1e5a      	subs	r2, r3, #1
 800e14a:	607a      	str	r2, [r7, #4]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d00d      	beq.n	800e16c <mem_cmp+0x40>
 800e150:	69fb      	ldr	r3, [r7, #28]
 800e152:	1c5a      	adds	r2, r3, #1
 800e154:	61fa      	str	r2, [r7, #28]
 800e156:	781b      	ldrb	r3, [r3, #0]
 800e158:	4619      	mov	r1, r3
 800e15a:	69bb      	ldr	r3, [r7, #24]
 800e15c:	1c5a      	adds	r2, r3, #1
 800e15e:	61ba      	str	r2, [r7, #24]
 800e160:	781b      	ldrb	r3, [r3, #0]
 800e162:	1acb      	subs	r3, r1, r3
 800e164:	617b      	str	r3, [r7, #20]
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d0ec      	beq.n	800e146 <mem_cmp+0x1a>
	return r;
 800e16c:	697b      	ldr	r3, [r7, #20]
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3724      	adds	r7, #36	@ 0x24
 800e172:	46bd      	mov	sp, r7
 800e174:	bc80      	pop	{r7}
 800e176:	4770      	bx	lr

0800e178 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800e178:	b480      	push	{r7}
 800e17a:	b083      	sub	sp, #12
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e182:	e002      	b.n	800e18a <chk_chr+0x12>
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	3301      	adds	r3, #1
 800e188:	607b      	str	r3, [r7, #4]
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	781b      	ldrb	r3, [r3, #0]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d005      	beq.n	800e19e <chk_chr+0x26>
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	461a      	mov	r2, r3
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	4293      	cmp	r3, r2
 800e19c:	d1f2      	bne.n	800e184 <chk_chr+0xc>
	return *str;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	781b      	ldrb	r3, [r3, #0]
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	370c      	adds	r7, #12
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bc80      	pop	{r7}
 800e1aa:	4770      	bx	lr

0800e1ac <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f003 fc06 	bl	80119cc <ff_req_grant>
 800e1c0:	4603      	mov	r3, r0
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3708      	adds	r7, #8
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}

0800e1ca <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800e1ca:	b580      	push	{r7, lr}
 800e1cc:	b082      	sub	sp, #8
 800e1ce:	af00      	add	r7, sp, #0
 800e1d0:	6078      	str	r0, [r7, #4]
 800e1d2:	460b      	mov	r3, r1
 800e1d4:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d011      	beq.n	800e200 <unlock_fs+0x36>
 800e1dc:	78fb      	ldrb	r3, [r7, #3]
 800e1de:	2b0c      	cmp	r3, #12
 800e1e0:	d00e      	beq.n	800e200 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 800e1e2:	78fb      	ldrb	r3, [r7, #3]
 800e1e4:	2b0b      	cmp	r3, #11
 800e1e6:	d00b      	beq.n	800e200 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 800e1e8:	78fb      	ldrb	r3, [r7, #3]
 800e1ea:	2b09      	cmp	r3, #9
 800e1ec:	d008      	beq.n	800e200 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 800e1ee:	78fb      	ldrb	r3, [r7, #3]
 800e1f0:	2b0f      	cmp	r3, #15
 800e1f2:	d005      	beq.n	800e200 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f003 fbfb 	bl	80119f6 <ff_rel_grant>
	}
}
 800e200:	bf00      	nop
 800e202:	3708      	adds	r7, #8
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}

0800e208 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e208:	b480      	push	{r7}
 800e20a:	b085      	sub	sp, #20
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e212:	2300      	movs	r3, #0
 800e214:	60bb      	str	r3, [r7, #8]
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	60fb      	str	r3, [r7, #12]
 800e21a:	e038      	b.n	800e28e <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800e21c:	492f      	ldr	r1, [pc, #188]	@ (800e2dc <chk_lock+0xd4>)
 800e21e:	68fa      	ldr	r2, [r7, #12]
 800e220:	4613      	mov	r3, r2
 800e222:	005b      	lsls	r3, r3, #1
 800e224:	4413      	add	r3, r2
 800e226:	009b      	lsls	r3, r3, #2
 800e228:	440b      	add	r3, r1
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d029      	beq.n	800e284 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800e230:	492a      	ldr	r1, [pc, #168]	@ (800e2dc <chk_lock+0xd4>)
 800e232:	68fa      	ldr	r2, [r7, #12]
 800e234:	4613      	mov	r3, r2
 800e236:	005b      	lsls	r3, r3, #1
 800e238:	4413      	add	r3, r2
 800e23a:	009b      	lsls	r3, r3, #2
 800e23c:	440b      	add	r3, r1
 800e23e:	681a      	ldr	r2, [r3, #0]
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e246:	429a      	cmp	r2, r3
 800e248:	d11e      	bne.n	800e288 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800e24a:	4924      	ldr	r1, [pc, #144]	@ (800e2dc <chk_lock+0xd4>)
 800e24c:	68fa      	ldr	r2, [r7, #12]
 800e24e:	4613      	mov	r3, r2
 800e250:	005b      	lsls	r3, r3, #1
 800e252:	4413      	add	r3, r2
 800e254:	009b      	lsls	r3, r3, #2
 800e256:	440b      	add	r3, r1
 800e258:	3304      	adds	r3, #4
 800e25a:	681a      	ldr	r2, [r3, #0]
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800e262:	429a      	cmp	r2, r3
 800e264:	d110      	bne.n	800e288 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800e266:	491d      	ldr	r1, [pc, #116]	@ (800e2dc <chk_lock+0xd4>)
 800e268:	68fa      	ldr	r2, [r7, #12]
 800e26a:	4613      	mov	r3, r2
 800e26c:	005b      	lsls	r3, r3, #1
 800e26e:	4413      	add	r3, r2
 800e270:	009b      	lsls	r3, r3, #2
 800e272:	440b      	add	r3, r1
 800e274:	3308      	adds	r3, #8
 800e276:	881a      	ldrh	r2, [r3, #0]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
				Files[i].clu == dp->sclust &&
 800e27e:	429a      	cmp	r2, r3
 800e280:	d102      	bne.n	800e288 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800e282:	e007      	b.n	800e294 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800e284:	2301      	movs	r3, #1
 800e286:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	3301      	adds	r3, #1
 800e28c:	60fb      	str	r3, [r7, #12]
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	2b01      	cmp	r3, #1
 800e292:	d9c3      	bls.n	800e21c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	2b02      	cmp	r3, #2
 800e298:	d109      	bne.n	800e2ae <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d102      	bne.n	800e2a6 <chk_lock+0x9e>
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	2b02      	cmp	r3, #2
 800e2a4:	d101      	bne.n	800e2aa <chk_lock+0xa2>
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	e013      	b.n	800e2d2 <chk_lock+0xca>
 800e2aa:	2312      	movs	r3, #18
 800e2ac:	e011      	b.n	800e2d2 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d10b      	bne.n	800e2cc <chk_lock+0xc4>
 800e2b4:	4909      	ldr	r1, [pc, #36]	@ (800e2dc <chk_lock+0xd4>)
 800e2b6:	68fa      	ldr	r2, [r7, #12]
 800e2b8:	4613      	mov	r3, r2
 800e2ba:	005b      	lsls	r3, r3, #1
 800e2bc:	4413      	add	r3, r2
 800e2be:	009b      	lsls	r3, r3, #2
 800e2c0:	440b      	add	r3, r1
 800e2c2:	330a      	adds	r3, #10
 800e2c4:	881b      	ldrh	r3, [r3, #0]
 800e2c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e2ca:	d101      	bne.n	800e2d0 <chk_lock+0xc8>
 800e2cc:	2310      	movs	r3, #16
 800e2ce:	e000      	b.n	800e2d2 <chk_lock+0xca>
 800e2d0:	2300      	movs	r3, #0
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	3714      	adds	r7, #20
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bc80      	pop	{r7}
 800e2da:	4770      	bx	lr
 800e2dc:	20001318 	.word	0x20001318

0800e2e0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e2e0:	b480      	push	{r7}
 800e2e2:	b083      	sub	sp, #12
 800e2e4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	607b      	str	r3, [r7, #4]
 800e2ea:	e002      	b.n	800e2f2 <enq_lock+0x12>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	3301      	adds	r3, #1
 800e2f0:	607b      	str	r3, [r7, #4]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	d809      	bhi.n	800e30c <enq_lock+0x2c>
 800e2f8:	490a      	ldr	r1, [pc, #40]	@ (800e324 <enq_lock+0x44>)
 800e2fa:	687a      	ldr	r2, [r7, #4]
 800e2fc:	4613      	mov	r3, r2
 800e2fe:	005b      	lsls	r3, r3, #1
 800e300:	4413      	add	r3, r2
 800e302:	009b      	lsls	r3, r3, #2
 800e304:	440b      	add	r3, r1
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d1ef      	bne.n	800e2ec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2b02      	cmp	r3, #2
 800e310:	bf14      	ite	ne
 800e312:	2301      	movne	r3, #1
 800e314:	2300      	moveq	r3, #0
 800e316:	b2db      	uxtb	r3, r3
}
 800e318:	4618      	mov	r0, r3
 800e31a:	370c      	adds	r7, #12
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bc80      	pop	{r7}
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop
 800e324:	20001318 	.word	0x20001318

0800e328 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e328:	b480      	push	{r7}
 800e32a:	b085      	sub	sp, #20
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e332:	2300      	movs	r3, #0
 800e334:	60fb      	str	r3, [r7, #12]
 800e336:	e02b      	b.n	800e390 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800e338:	4955      	ldr	r1, [pc, #340]	@ (800e490 <inc_lock+0x168>)
 800e33a:	68fa      	ldr	r2, [r7, #12]
 800e33c:	4613      	mov	r3, r2
 800e33e:	005b      	lsls	r3, r3, #1
 800e340:	4413      	add	r3, r2
 800e342:	009b      	lsls	r3, r3, #2
 800e344:	440b      	add	r3, r1
 800e346:	681a      	ldr	r2, [r3, #0]
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e34e:	429a      	cmp	r2, r3
 800e350:	d11b      	bne.n	800e38a <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800e352:	494f      	ldr	r1, [pc, #316]	@ (800e490 <inc_lock+0x168>)
 800e354:	68fa      	ldr	r2, [r7, #12]
 800e356:	4613      	mov	r3, r2
 800e358:	005b      	lsls	r3, r3, #1
 800e35a:	4413      	add	r3, r2
 800e35c:	009b      	lsls	r3, r3, #2
 800e35e:	440b      	add	r3, r1
 800e360:	3304      	adds	r3, #4
 800e362:	681a      	ldr	r2, [r3, #0]
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
		if (Files[i].fs == dp->fs &&
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d10d      	bne.n	800e38a <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800e36e:	4948      	ldr	r1, [pc, #288]	@ (800e490 <inc_lock+0x168>)
 800e370:	68fa      	ldr	r2, [r7, #12]
 800e372:	4613      	mov	r3, r2
 800e374:	005b      	lsls	r3, r3, #1
 800e376:	4413      	add	r3, r2
 800e378:	009b      	lsls	r3, r3, #2
 800e37a:	440b      	add	r3, r1
 800e37c:	3308      	adds	r3, #8
 800e37e:	881a      	ldrh	r2, [r3, #0]
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
			Files[i].clu == dp->sclust &&
 800e386:	429a      	cmp	r2, r3
 800e388:	d006      	beq.n	800e398 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	3301      	adds	r3, #1
 800e38e:	60fb      	str	r3, [r7, #12]
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2b01      	cmp	r3, #1
 800e394:	d9d0      	bls.n	800e338 <inc_lock+0x10>
 800e396:	e000      	b.n	800e39a <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800e398:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2b02      	cmp	r3, #2
 800e39e:	d145      	bne.n	800e42c <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	60fb      	str	r3, [r7, #12]
 800e3a4:	e002      	b.n	800e3ac <inc_lock+0x84>
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	3301      	adds	r3, #1
 800e3aa:	60fb      	str	r3, [r7, #12]
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2b01      	cmp	r3, #1
 800e3b0:	d809      	bhi.n	800e3c6 <inc_lock+0x9e>
 800e3b2:	4937      	ldr	r1, [pc, #220]	@ (800e490 <inc_lock+0x168>)
 800e3b4:	68fa      	ldr	r2, [r7, #12]
 800e3b6:	4613      	mov	r3, r2
 800e3b8:	005b      	lsls	r3, r3, #1
 800e3ba:	4413      	add	r3, r2
 800e3bc:	009b      	lsls	r3, r3, #2
 800e3be:	440b      	add	r3, r1
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d1ef      	bne.n	800e3a6 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	2b02      	cmp	r3, #2
 800e3ca:	d101      	bne.n	800e3d0 <inc_lock+0xa8>
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	e05a      	b.n	800e486 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
 800e3d6:	482e      	ldr	r0, [pc, #184]	@ (800e490 <inc_lock+0x168>)
 800e3d8:	68fa      	ldr	r2, [r7, #12]
 800e3da:	4613      	mov	r3, r2
 800e3dc:	005b      	lsls	r3, r3, #1
 800e3de:	4413      	add	r3, r2
 800e3e0:	009b      	lsls	r3, r3, #2
 800e3e2:	4403      	add	r3, r0
 800e3e4:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 800e3ec:	4828      	ldr	r0, [pc, #160]	@ (800e490 <inc_lock+0x168>)
 800e3ee:	68fa      	ldr	r2, [r7, #12]
 800e3f0:	4613      	mov	r3, r2
 800e3f2:	005b      	lsls	r3, r3, #1
 800e3f4:	4413      	add	r3, r2
 800e3f6:	009b      	lsls	r3, r3, #2
 800e3f8:	4403      	add	r3, r0
 800e3fa:	3304      	adds	r3, #4
 800e3fc:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f8b3 0206 	ldrh.w	r0, [r3, #518]	@ 0x206
 800e404:	4922      	ldr	r1, [pc, #136]	@ (800e490 <inc_lock+0x168>)
 800e406:	68fa      	ldr	r2, [r7, #12]
 800e408:	4613      	mov	r3, r2
 800e40a:	005b      	lsls	r3, r3, #1
 800e40c:	4413      	add	r3, r2
 800e40e:	009b      	lsls	r3, r3, #2
 800e410:	440b      	add	r3, r1
 800e412:	3308      	adds	r3, #8
 800e414:	4602      	mov	r2, r0
 800e416:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800e418:	491d      	ldr	r1, [pc, #116]	@ (800e490 <inc_lock+0x168>)
 800e41a:	68fa      	ldr	r2, [r7, #12]
 800e41c:	4613      	mov	r3, r2
 800e41e:	005b      	lsls	r3, r3, #1
 800e420:	4413      	add	r3, r2
 800e422:	009b      	lsls	r3, r3, #2
 800e424:	440b      	add	r3, r1
 800e426:	330a      	adds	r3, #10
 800e428:	2200      	movs	r2, #0
 800e42a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d00c      	beq.n	800e44c <inc_lock+0x124>
 800e432:	4917      	ldr	r1, [pc, #92]	@ (800e490 <inc_lock+0x168>)
 800e434:	68fa      	ldr	r2, [r7, #12]
 800e436:	4613      	mov	r3, r2
 800e438:	005b      	lsls	r3, r3, #1
 800e43a:	4413      	add	r3, r2
 800e43c:	009b      	lsls	r3, r3, #2
 800e43e:	440b      	add	r3, r1
 800e440:	330a      	adds	r3, #10
 800e442:	881b      	ldrh	r3, [r3, #0]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d001      	beq.n	800e44c <inc_lock+0x124>
 800e448:	2300      	movs	r3, #0
 800e44a:	e01c      	b.n	800e486 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d10b      	bne.n	800e46a <inc_lock+0x142>
 800e452:	490f      	ldr	r1, [pc, #60]	@ (800e490 <inc_lock+0x168>)
 800e454:	68fa      	ldr	r2, [r7, #12]
 800e456:	4613      	mov	r3, r2
 800e458:	005b      	lsls	r3, r3, #1
 800e45a:	4413      	add	r3, r2
 800e45c:	009b      	lsls	r3, r3, #2
 800e45e:	440b      	add	r3, r1
 800e460:	330a      	adds	r3, #10
 800e462:	881b      	ldrh	r3, [r3, #0]
 800e464:	3301      	adds	r3, #1
 800e466:	b299      	uxth	r1, r3
 800e468:	e001      	b.n	800e46e <inc_lock+0x146>
 800e46a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e46e:	4808      	ldr	r0, [pc, #32]	@ (800e490 <inc_lock+0x168>)
 800e470:	68fa      	ldr	r2, [r7, #12]
 800e472:	4613      	mov	r3, r2
 800e474:	005b      	lsls	r3, r3, #1
 800e476:	4413      	add	r3, r2
 800e478:	009b      	lsls	r3, r3, #2
 800e47a:	4403      	add	r3, r0
 800e47c:	330a      	adds	r3, #10
 800e47e:	460a      	mov	r2, r1
 800e480:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	3301      	adds	r3, #1
}
 800e486:	4618      	mov	r0, r3
 800e488:	3714      	adds	r7, #20
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bc80      	pop	{r7}
 800e48e:	4770      	bx	lr
 800e490:	20001318 	.word	0x20001318

0800e494 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e494:	b480      	push	{r7}
 800e496:	b085      	sub	sp, #20
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e49c:	2300      	movs	r3, #0
 800e49e:	60fb      	str	r3, [r7, #12]
 800e4a0:	e016      	b.n	800e4d0 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e4a2:	4910      	ldr	r1, [pc, #64]	@ (800e4e4 <clear_lock+0x50>)
 800e4a4:	68fa      	ldr	r2, [r7, #12]
 800e4a6:	4613      	mov	r3, r2
 800e4a8:	005b      	lsls	r3, r3, #1
 800e4aa:	4413      	add	r3, r2
 800e4ac:	009b      	lsls	r3, r3, #2
 800e4ae:	440b      	add	r3, r1
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	687a      	ldr	r2, [r7, #4]
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d108      	bne.n	800e4ca <clear_lock+0x36>
 800e4b8:	490a      	ldr	r1, [pc, #40]	@ (800e4e4 <clear_lock+0x50>)
 800e4ba:	68fa      	ldr	r2, [r7, #12]
 800e4bc:	4613      	mov	r3, r2
 800e4be:	005b      	lsls	r3, r3, #1
 800e4c0:	4413      	add	r3, r2
 800e4c2:	009b      	lsls	r3, r3, #2
 800e4c4:	440b      	add	r3, r1
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	60fb      	str	r3, [r7, #12]
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	2b01      	cmp	r3, #1
 800e4d4:	d9e5      	bls.n	800e4a2 <clear_lock+0xe>
	}
}
 800e4d6:	bf00      	nop
 800e4d8:	bf00      	nop
 800e4da:	3714      	adds	r7, #20
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bc80      	pop	{r7}
 800e4e0:	4770      	bx	lr
 800e4e2:	bf00      	nop
 800e4e4:	20001318 	.word	0x20001318

0800e4e8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b086      	sub	sp, #24
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d038      	beq.n	800e570 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 800e504:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800e50c:	6879      	ldr	r1, [r7, #4]
 800e50e:	2301      	movs	r3, #1
 800e510:	697a      	ldr	r2, [r7, #20]
 800e512:	f7ff fd95 	bl	800e040 <disk_write>
 800e516:	4603      	mov	r3, r0
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d002      	beq.n	800e522 <sync_window+0x3a>
			res = FR_DISK_ERR;
 800e51c:	2301      	movs	r3, #1
 800e51e:	73fb      	strb	r3, [r7, #15]
 800e520:	e026      	b.n	800e570 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2200      	movs	r2, #0
 800e526:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800e530:	697a      	ldr	r2, [r7, #20]
 800e532:	1ad2      	subs	r2, r2, r3
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d218      	bcs.n	800e570 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800e544:	613b      	str	r3, [r7, #16]
 800e546:	e010      	b.n	800e56a <sync_window+0x82>
					wsect += fs->fsize;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800e54e:	697a      	ldr	r2, [r7, #20]
 800e550:	4413      	add	r3, r2
 800e552:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800e55a:	6879      	ldr	r1, [r7, #4]
 800e55c:	2301      	movs	r3, #1
 800e55e:	697a      	ldr	r2, [r7, #20]
 800e560:	f7ff fd6e 	bl	800e040 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e564:	693b      	ldr	r3, [r7, #16]
 800e566:	3b01      	subs	r3, #1
 800e568:	613b      	str	r3, [r7, #16]
 800e56a:	693b      	ldr	r3, [r7, #16]
 800e56c:	2b01      	cmp	r3, #1
 800e56e:	d8eb      	bhi.n	800e548 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800e570:	7bfb      	ldrb	r3, [r7, #15]
}
 800e572:	4618      	mov	r0, r3
 800e574:	3718      	adds	r7, #24
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}

0800e57a <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800e57a:	b580      	push	{r7, lr}
 800e57c:	b084      	sub	sp, #16
 800e57e:	af00      	add	r7, sp, #0
 800e580:	6078      	str	r0, [r7, #4]
 800e582:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e584:	2300      	movs	r3, #0
 800e586:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 800e58e:	683a      	ldr	r2, [r7, #0]
 800e590:	429a      	cmp	r2, r3
 800e592:	d01b      	beq.n	800e5cc <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f7ff ffa7 	bl	800e4e8 <sync_window>
 800e59a:	4603      	mov	r3, r0
 800e59c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e59e:	7bfb      	ldrb	r3, [r7, #15]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d113      	bne.n	800e5cc <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800e5aa:	6879      	ldr	r1, [r7, #4]
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	683a      	ldr	r2, [r7, #0]
 800e5b0:	f7ff fd26 	bl	800e000 <disk_read>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d004      	beq.n	800e5c4 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e5ba:	f04f 33ff 	mov.w	r3, #4294967295
 800e5be:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e5c0:	2301      	movs	r3, #1
 800e5c2:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	683a      	ldr	r2, [r7, #0]
 800e5c8:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
		}
	}
	return res;
 800e5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3710      	adds	r7, #16
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}

0800e5d6 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800e5d6:	b580      	push	{r7, lr}
 800e5d8:	b084      	sub	sp, #16
 800e5da:	af00      	add	r7, sp, #0
 800e5dc:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f7ff ff82 	bl	800e4e8 <sync_window>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e5e8:	7bfb      	ldrb	r3, [r7, #15]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	f040 809b 	bne.w	800e726 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e5f6:	2b03      	cmp	r3, #3
 800e5f8:	f040 8088 	bne.w	800e70c <sync_fs+0x136>
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800e602:	2b01      	cmp	r3, #1
 800e604:	f040 8082 	bne.w	800e70c <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e60e:	2100      	movs	r1, #0
 800e610:	4618      	mov	r0, r3
 800e612:	f7ff fd71 	bl	800e0f8 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2255      	movs	r2, #85	@ 0x55
 800e61a:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	22aa      	movs	r2, #170	@ 0xaa
 800e622:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2252      	movs	r2, #82	@ 0x52
 800e62a:	701a      	strb	r2, [r3, #0]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2252      	movs	r2, #82	@ 0x52
 800e630:	705a      	strb	r2, [r3, #1]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2261      	movs	r2, #97	@ 0x61
 800e636:	709a      	strb	r2, [r3, #2]
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2241      	movs	r2, #65	@ 0x41
 800e63c:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2272      	movs	r2, #114	@ 0x72
 800e642:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2272      	movs	r2, #114	@ 0x72
 800e64a:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2241      	movs	r2, #65	@ 0x41
 800e652:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2261      	movs	r2, #97	@ 0x61
 800e65a:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e664:	b2da      	uxtb	r2, r3
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e672:	b29b      	uxth	r3, r3
 800e674:	0a1b      	lsrs	r3, r3, #8
 800e676:	b29b      	uxth	r3, r3
 800e678:	b2da      	uxtb	r2, r3
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e686:	0c1b      	lsrs	r3, r3, #16
 800e688:	b2da      	uxtb	r2, r3
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e696:	0e1b      	lsrs	r3, r3, #24
 800e698:	b2da      	uxtb	r2, r3
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e6a6:	b2da      	uxtb	r2, r3
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e6b4:	b29b      	uxth	r3, r3
 800e6b6:	0a1b      	lsrs	r3, r3, #8
 800e6b8:	b29b      	uxth	r3, r3
 800e6ba:	b2da      	uxtb	r2, r3
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e6c8:	0c1b      	lsrs	r3, r3, #16
 800e6ca:	b2da      	uxtb	r2, r3
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e6d8:	0e1b      	lsrs	r3, r3, #24
 800e6da:	b2da      	uxtb	r2, r3
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800e6e8:	1c5a      	adds	r2, r3, #1
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800e6f6:	6879      	ldr	r1, [r7, #4]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 800e6fe:	2301      	movs	r3, #1
 800e700:	f7ff fc9e 	bl	800e040 <disk_write>
			fs->fsi_flag = 0;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2200      	movs	r2, #0
 800e708:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800e712:	2200      	movs	r2, #0
 800e714:	2100      	movs	r1, #0
 800e716:	4618      	mov	r0, r3
 800e718:	f7ff fcb2 	bl	800e080 <disk_ioctl>
 800e71c:	4603      	mov	r3, r0
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d001      	beq.n	800e726 <sync_fs+0x150>
			res = FR_DISK_ERR;
 800e722:	2301      	movs	r3, #1
 800e724:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e726:	7bfb      	ldrb	r3, [r7, #15]
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3710      	adds	r7, #16
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e730:	b480      	push	{r7}
 800e732:	b083      	sub	sp, #12
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	3b02      	subs	r3, #2
 800e73e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e746:	3b02      	subs	r3, #2
 800e748:	683a      	ldr	r2, [r7, #0]
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d301      	bcc.n	800e752 <clust2sect+0x22>
 800e74e:	2300      	movs	r3, #0
 800e750:	e00a      	b.n	800e768 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800e758:	461a      	mov	r2, r3
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	fb03 f202 	mul.w	r2, r3, r2
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800e766:	4413      	add	r3, r2
}
 800e768:	4618      	mov	r0, r3
 800e76a:	370c      	adds	r7, #12
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bc80      	pop	{r7}
 800e770:	4770      	bx	lr

0800e772 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800e772:	b580      	push	{r7, lr}
 800e774:	b086      	sub	sp, #24
 800e776:	af00      	add	r7, sp, #0
 800e778:	6078      	str	r0, [r7, #4]
 800e77a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	2b01      	cmp	r3, #1
 800e780:	d905      	bls.n	800e78e <get_fat+0x1c>
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e788:	683a      	ldr	r2, [r7, #0]
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d302      	bcc.n	800e794 <get_fat+0x22>
		val = 1;	/* Internal error */
 800e78e:	2301      	movs	r3, #1
 800e790:	617b      	str	r3, [r7, #20]
 800e792:	e0a2      	b.n	800e8da <get_fat+0x168>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e794:	f04f 33ff 	mov.w	r3, #4294967295
 800e798:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e7a0:	2b03      	cmp	r3, #3
 800e7a2:	d067      	beq.n	800e874 <get_fat+0x102>
 800e7a4:	2b03      	cmp	r3, #3
 800e7a6:	f300 808e 	bgt.w	800e8c6 <get_fat+0x154>
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d002      	beq.n	800e7b4 <get_fat+0x42>
 800e7ae:	2b02      	cmp	r3, #2
 800e7b0:	d03f      	beq.n	800e832 <get_fat+0xc0>
 800e7b2:	e088      	b.n	800e8c6 <get_fat+0x154>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	60fb      	str	r3, [r7, #12]
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	085b      	lsrs	r3, r3, #1
 800e7bc:	68fa      	ldr	r2, [r7, #12]
 800e7be:	4413      	add	r3, r2
 800e7c0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	0a5b      	lsrs	r3, r3, #9
 800e7cc:	4413      	add	r3, r2
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f7ff fed2 	bl	800e57a <move_window>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d177      	bne.n	800e8cc <get_fat+0x15a>
			wc = fs->win.d8[bc++ % SS(fs)];
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	1c5a      	adds	r2, r3, #1
 800e7e0:	60fa      	str	r2, [r7, #12]
 800e7e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7e6:	687a      	ldr	r2, [r7, #4]
 800e7e8:	5cd3      	ldrb	r3, [r2, r3]
 800e7ea:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	0a5b      	lsrs	r3, r3, #9
 800e7f6:	4413      	add	r3, r2
 800e7f8:	4619      	mov	r1, r3
 800e7fa:	6878      	ldr	r0, [r7, #4]
 800e7fc:	f7ff febd 	bl	800e57a <move_window>
 800e800:	4603      	mov	r3, r0
 800e802:	2b00      	cmp	r3, #0
 800e804:	d164      	bne.n	800e8d0 <get_fat+0x15e>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e80c:	687a      	ldr	r2, [r7, #4]
 800e80e:	5cd3      	ldrb	r3, [r2, r3]
 800e810:	021b      	lsls	r3, r3, #8
 800e812:	68ba      	ldr	r2, [r7, #8]
 800e814:	4313      	orrs	r3, r2
 800e816:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	f003 0301 	and.w	r3, r3, #1
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d002      	beq.n	800e828 <get_fat+0xb6>
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	091b      	lsrs	r3, r3, #4
 800e826:	e002      	b.n	800e82e <get_fat+0xbc>
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e82e:	617b      	str	r3, [r7, #20]
			break;
 800e830:	e053      	b.n	800e8da <get_fat+0x168>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	0a1b      	lsrs	r3, r3, #8
 800e83c:	4413      	add	r3, r2
 800e83e:	4619      	mov	r1, r3
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f7ff fe9a 	bl	800e57a <move_window>
 800e846:	4603      	mov	r3, r0
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d143      	bne.n	800e8d4 <get_fat+0x162>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	005b      	lsls	r3, r3, #1
 800e850:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e854:	687a      	ldr	r2, [r7, #4]
 800e856:	4413      	add	r3, r2
 800e858:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	3301      	adds	r3, #1
 800e85e:	781b      	ldrb	r3, [r3, #0]
 800e860:	021b      	lsls	r3, r3, #8
 800e862:	b21a      	sxth	r2, r3
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	b21b      	sxth	r3, r3
 800e86a:	4313      	orrs	r3, r2
 800e86c:	b21b      	sxth	r3, r3
 800e86e:	b29b      	uxth	r3, r3
 800e870:	617b      	str	r3, [r7, #20]
			break;
 800e872:	e032      	b.n	800e8da <get_fat+0x168>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	09db      	lsrs	r3, r3, #7
 800e87e:	4413      	add	r3, r2
 800e880:	4619      	mov	r1, r3
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f7ff fe79 	bl	800e57a <move_window>
 800e888:	4603      	mov	r3, r0
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d124      	bne.n	800e8d8 <get_fat+0x166>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	009b      	lsls	r3, r3, #2
 800e892:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e896:	687a      	ldr	r2, [r7, #4]
 800e898:	4413      	add	r3, r2
 800e89a:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	3303      	adds	r3, #3
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	061a      	lsls	r2, r3, #24
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	3302      	adds	r3, #2
 800e8a8:	781b      	ldrb	r3, [r3, #0]
 800e8aa:	041b      	lsls	r3, r3, #16
 800e8ac:	431a      	orrs	r2, r3
 800e8ae:	693b      	ldr	r3, [r7, #16]
 800e8b0:	3301      	adds	r3, #1
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	021b      	lsls	r3, r3, #8
 800e8b6:	4313      	orrs	r3, r2
 800e8b8:	693a      	ldr	r2, [r7, #16]
 800e8ba:	7812      	ldrb	r2, [r2, #0]
 800e8bc:	4313      	orrs	r3, r2
 800e8be:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800e8c2:	617b      	str	r3, [r7, #20]
			break;
 800e8c4:	e009      	b.n	800e8da <get_fat+0x168>

		default:
			val = 1;	/* Internal error */
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	617b      	str	r3, [r7, #20]
 800e8ca:	e006      	b.n	800e8da <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e8cc:	bf00      	nop
 800e8ce:	e004      	b.n	800e8da <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e8d0:	bf00      	nop
 800e8d2:	e002      	b.n	800e8da <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e8d4:	bf00      	nop
 800e8d6:	e000      	b.n	800e8da <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e8d8:	bf00      	nop
		}
	}

	return val;
 800e8da:	697b      	ldr	r3, [r7, #20]
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3718      	adds	r7, #24
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b088      	sub	sp, #32
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	60f8      	str	r0, [r7, #12]
 800e8ec:	60b9      	str	r1, [r7, #8]
 800e8ee:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	2b01      	cmp	r3, #1
 800e8f4:	d905      	bls.n	800e902 <put_fat+0x1e>
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e8fc:	68ba      	ldr	r2, [r7, #8]
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d302      	bcc.n	800e908 <put_fat+0x24>
		res = FR_INT_ERR;
 800e902:	2302      	movs	r3, #2
 800e904:	77fb      	strb	r3, [r7, #31]
 800e906:	e0f6      	b.n	800eaf6 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e90e:	2b03      	cmp	r3, #3
 800e910:	f000 809e 	beq.w	800ea50 <put_fat+0x16c>
 800e914:	2b03      	cmp	r3, #3
 800e916:	f300 80e4 	bgt.w	800eae2 <put_fat+0x1fe>
 800e91a:	2b01      	cmp	r3, #1
 800e91c:	d002      	beq.n	800e924 <put_fat+0x40>
 800e91e:	2b02      	cmp	r3, #2
 800e920:	d06f      	beq.n	800ea02 <put_fat+0x11e>
 800e922:	e0de      	b.n	800eae2 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	617b      	str	r3, [r7, #20]
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	085b      	lsrs	r3, r3, #1
 800e92c:	697a      	ldr	r2, [r7, #20]
 800e92e:	4413      	add	r3, r2
 800e930:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	0a5b      	lsrs	r3, r3, #9
 800e93c:	4413      	add	r3, r2
 800e93e:	4619      	mov	r1, r3
 800e940:	68f8      	ldr	r0, [r7, #12]
 800e942:	f7ff fe1a 	bl	800e57a <move_window>
 800e946:	4603      	mov	r3, r0
 800e948:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e94a:	7ffb      	ldrb	r3, [r7, #31]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	f040 80cb 	bne.w	800eae8 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	1c5a      	adds	r2, r3, #1
 800e956:	617a      	str	r2, [r7, #20]
 800e958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e95c:	68fa      	ldr	r2, [r7, #12]
 800e95e:	4413      	add	r3, r2
 800e960:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	f003 0301 	and.w	r3, r3, #1
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d00d      	beq.n	800e988 <put_fat+0xa4>
 800e96c:	69bb      	ldr	r3, [r7, #24]
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	b25b      	sxtb	r3, r3
 800e972:	f003 030f 	and.w	r3, r3, #15
 800e976:	b25a      	sxtb	r2, r3
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	b2db      	uxtb	r3, r3
 800e97c:	011b      	lsls	r3, r3, #4
 800e97e:	b25b      	sxtb	r3, r3
 800e980:	4313      	orrs	r3, r2
 800e982:	b25b      	sxtb	r3, r3
 800e984:	b2db      	uxtb	r3, r3
 800e986:	e001      	b.n	800e98c <put_fat+0xa8>
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	b2db      	uxtb	r3, r3
 800e98c:	69ba      	ldr	r2, [r7, #24]
 800e98e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2201      	movs	r2, #1
 800e994:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800e99e:	697b      	ldr	r3, [r7, #20]
 800e9a0:	0a5b      	lsrs	r3, r3, #9
 800e9a2:	4413      	add	r3, r2
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	68f8      	ldr	r0, [r7, #12]
 800e9a8:	f7ff fde7 	bl	800e57a <move_window>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e9b0:	7ffb      	ldrb	r3, [r7, #31]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	f040 809a 	bne.w	800eaec <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9be:	68fa      	ldr	r2, [r7, #12]
 800e9c0:	4413      	add	r3, r2
 800e9c2:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e9c4:	68bb      	ldr	r3, [r7, #8]
 800e9c6:	f003 0301 	and.w	r3, r3, #1
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d003      	beq.n	800e9d6 <put_fat+0xf2>
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	091b      	lsrs	r3, r3, #4
 800e9d2:	b2db      	uxtb	r3, r3
 800e9d4:	e00e      	b.n	800e9f4 <put_fat+0x110>
 800e9d6:	69bb      	ldr	r3, [r7, #24]
 800e9d8:	781b      	ldrb	r3, [r3, #0]
 800e9da:	b25b      	sxtb	r3, r3
 800e9dc:	f023 030f 	bic.w	r3, r3, #15
 800e9e0:	b25a      	sxtb	r2, r3
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	0a1b      	lsrs	r3, r3, #8
 800e9e6:	b25b      	sxtb	r3, r3
 800e9e8:	f003 030f 	and.w	r3, r3, #15
 800e9ec:	b25b      	sxtb	r3, r3
 800e9ee:	4313      	orrs	r3, r2
 800e9f0:	b25b      	sxtb	r3, r3
 800e9f2:	b2db      	uxtb	r3, r3
 800e9f4:	69ba      	ldr	r2, [r7, #24]
 800e9f6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800ea00:	e079      	b.n	800eaf6 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	0a1b      	lsrs	r3, r3, #8
 800ea0c:	4413      	add	r3, r2
 800ea0e:	4619      	mov	r1, r3
 800ea10:	68f8      	ldr	r0, [r7, #12]
 800ea12:	f7ff fdb2 	bl	800e57a <move_window>
 800ea16:	4603      	mov	r3, r0
 800ea18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ea1a:	7ffb      	ldrb	r3, [r7, #31]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d167      	bne.n	800eaf0 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	005b      	lsls	r3, r3, #1
 800ea24:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ea28:	68fa      	ldr	r2, [r7, #12]
 800ea2a:	4413      	add	r3, r2
 800ea2c:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	b2da      	uxtb	r2, r3
 800ea32:	69bb      	ldr	r3, [r7, #24]
 800ea34:	701a      	strb	r2, [r3, #0]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	b29b      	uxth	r3, r3
 800ea3a:	0a1b      	lsrs	r3, r3, #8
 800ea3c:	b29a      	uxth	r2, r3
 800ea3e:	69bb      	ldr	r3, [r7, #24]
 800ea40:	3301      	adds	r3, #1
 800ea42:	b2d2      	uxtb	r2, r2
 800ea44:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	2201      	movs	r2, #1
 800ea4a:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800ea4e:	e052      	b.n	800eaf6 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	09db      	lsrs	r3, r3, #7
 800ea5a:	4413      	add	r3, r2
 800ea5c:	4619      	mov	r1, r3
 800ea5e:	68f8      	ldr	r0, [r7, #12]
 800ea60:	f7ff fd8b 	bl	800e57a <move_window>
 800ea64:	4603      	mov	r3, r0
 800ea66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ea68:	7ffb      	ldrb	r3, [r7, #31]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d142      	bne.n	800eaf4 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	009b      	lsls	r3, r3, #2
 800ea72:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ea76:	68fa      	ldr	r2, [r7, #12]
 800ea78:	4413      	add	r3, r2
 800ea7a:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800ea7c:	69bb      	ldr	r3, [r7, #24]
 800ea7e:	3303      	adds	r3, #3
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	061a      	lsls	r2, r3, #24
 800ea84:	69bb      	ldr	r3, [r7, #24]
 800ea86:	3302      	adds	r3, #2
 800ea88:	781b      	ldrb	r3, [r3, #0]
 800ea8a:	041b      	lsls	r3, r3, #16
 800ea8c:	431a      	orrs	r2, r3
 800ea8e:	69bb      	ldr	r3, [r7, #24]
 800ea90:	3301      	adds	r3, #1
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	021b      	lsls	r3, r3, #8
 800ea96:	4313      	orrs	r3, r2
 800ea98:	69ba      	ldr	r2, [r7, #24]
 800ea9a:	7812      	ldrb	r2, [r2, #0]
 800ea9c:	4313      	orrs	r3, r2
 800ea9e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800eaa2:	687a      	ldr	r2, [r7, #4]
 800eaa4:	4313      	orrs	r3, r2
 800eaa6:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	b2da      	uxtb	r2, r3
 800eaac:	69bb      	ldr	r3, [r7, #24]
 800eaae:	701a      	strb	r2, [r3, #0]
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	b29b      	uxth	r3, r3
 800eab4:	0a1b      	lsrs	r3, r3, #8
 800eab6:	b29a      	uxth	r2, r3
 800eab8:	69bb      	ldr	r3, [r7, #24]
 800eaba:	3301      	adds	r3, #1
 800eabc:	b2d2      	uxtb	r2, r2
 800eabe:	701a      	strb	r2, [r3, #0]
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	0c1a      	lsrs	r2, r3, #16
 800eac4:	69bb      	ldr	r3, [r7, #24]
 800eac6:	3302      	adds	r3, #2
 800eac8:	b2d2      	uxtb	r2, r2
 800eaca:	701a      	strb	r2, [r3, #0]
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	0e1a      	lsrs	r2, r3, #24
 800ead0:	69bb      	ldr	r3, [r7, #24]
 800ead2:	3303      	adds	r3, #3
 800ead4:	b2d2      	uxtb	r2, r2
 800ead6:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2201      	movs	r2, #1
 800eadc:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800eae0:	e009      	b.n	800eaf6 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800eae2:	2302      	movs	r3, #2
 800eae4:	77fb      	strb	r3, [r7, #31]
 800eae6:	e006      	b.n	800eaf6 <put_fat+0x212>
			if (res != FR_OK) break;
 800eae8:	bf00      	nop
 800eaea:	e004      	b.n	800eaf6 <put_fat+0x212>
			if (res != FR_OK) break;
 800eaec:	bf00      	nop
 800eaee:	e002      	b.n	800eaf6 <put_fat+0x212>
			if (res != FR_OK) break;
 800eaf0:	bf00      	nop
 800eaf2:	e000      	b.n	800eaf6 <put_fat+0x212>
			if (res != FR_OK) break;
 800eaf4:	bf00      	nop
		}
	}

	return res;
 800eaf6:	7ffb      	ldrb	r3, [r7, #31]
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3720      	adds	r7, #32
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b084      	sub	sp, #16
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
 800eb08:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	2b01      	cmp	r3, #1
 800eb0e:	d905      	bls.n	800eb1c <remove_chain+0x1c>
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800eb16:	683a      	ldr	r2, [r7, #0]
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d302      	bcc.n	800eb22 <remove_chain+0x22>
		res = FR_INT_ERR;
 800eb1c:	2302      	movs	r3, #2
 800eb1e:	73fb      	strb	r3, [r7, #15]
 800eb20:	e043      	b.n	800ebaa <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800eb22:	2300      	movs	r3, #0
 800eb24:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800eb26:	e036      	b.n	800eb96 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800eb28:	6839      	ldr	r1, [r7, #0]
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f7ff fe21 	bl	800e772 <get_fat>
 800eb30:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d035      	beq.n	800eba4 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	2b01      	cmp	r3, #1
 800eb3c:	d102      	bne.n	800eb44 <remove_chain+0x44>
 800eb3e:	2302      	movs	r3, #2
 800eb40:	73fb      	strb	r3, [r7, #15]
 800eb42:	e032      	b.n	800ebaa <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb4a:	d102      	bne.n	800eb52 <remove_chain+0x52>
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	73fb      	strb	r3, [r7, #15]
 800eb50:	e02b      	b.n	800ebaa <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800eb52:	2200      	movs	r2, #0
 800eb54:	6839      	ldr	r1, [r7, #0]
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f7ff fec4 	bl	800e8e4 <put_fat>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800eb60:	7bfb      	ldrb	r3, [r7, #15]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d120      	bne.n	800eba8 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800eb6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb70:	d00f      	beq.n	800eb92 <remove_chain+0x92>
				fs->free_clust++;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800eb78:	1c5a      	adds	r2, r3, #1
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				fs->fsi_flag |= 1;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800eb86:	f043 0301 	orr.w	r3, r3, #1
 800eb8a:	b2da      	uxtb	r2, r3
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800eb9c:	683a      	ldr	r2, [r7, #0]
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	d3c2      	bcc.n	800eb28 <remove_chain+0x28>
 800eba2:	e002      	b.n	800ebaa <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800eba4:	bf00      	nop
 800eba6:	e000      	b.n	800ebaa <remove_chain+0xaa>
			if (res != FR_OK) break;
 800eba8:	bf00      	nop
		}
	}

	return res;
 800ebaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3710      	adds	r7, #16
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}

0800ebb4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b086      	sub	sp, #24
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
 800ebbc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d10f      	bne.n	800ebe4 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ebca:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d005      	beq.n	800ebde <create_chain+0x2a>
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ebd8:	693a      	ldr	r2, [r7, #16]
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d31c      	bcc.n	800ec18 <create_chain+0x64>
 800ebde:	2301      	movs	r3, #1
 800ebe0:	613b      	str	r3, [r7, #16]
 800ebe2:	e019      	b.n	800ec18 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800ebe4:	6839      	ldr	r1, [r7, #0]
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f7ff fdc3 	bl	800e772 <get_fat>
 800ebec:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	2b01      	cmp	r3, #1
 800ebf2:	d801      	bhi.n	800ebf8 <create_chain+0x44>
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	e076      	b.n	800ece6 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebfe:	d101      	bne.n	800ec04 <create_chain+0x50>
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	e070      	b.n	800ece6 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ec0a:	68ba      	ldr	r2, [r7, #8]
 800ec0c:	429a      	cmp	r2, r3
 800ec0e:	d201      	bcs.n	800ec14 <create_chain+0x60>
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	e068      	b.n	800ece6 <create_chain+0x132>
		scl = clst;
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	3301      	adds	r3, #1
 800ec20:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ec28:	697a      	ldr	r2, [r7, #20]
 800ec2a:	429a      	cmp	r2, r3
 800ec2c:	d307      	bcc.n	800ec3e <create_chain+0x8a>
			ncl = 2;
 800ec2e:	2302      	movs	r3, #2
 800ec30:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800ec32:	697a      	ldr	r2, [r7, #20]
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	429a      	cmp	r2, r3
 800ec38:	d901      	bls.n	800ec3e <create_chain+0x8a>
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	e053      	b.n	800ece6 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800ec3e:	6979      	ldr	r1, [r7, #20]
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f7ff fd96 	bl	800e772 <get_fat>
 800ec46:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d00e      	beq.n	800ec6c <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec54:	d002      	beq.n	800ec5c <create_chain+0xa8>
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	2b01      	cmp	r3, #1
 800ec5a:	d101      	bne.n	800ec60 <create_chain+0xac>
			return cs;
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	e042      	b.n	800ece6 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800ec60:	697a      	ldr	r2, [r7, #20]
 800ec62:	693b      	ldr	r3, [r7, #16]
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d1d9      	bne.n	800ec1c <create_chain+0x68>
 800ec68:	2300      	movs	r3, #0
 800ec6a:	e03c      	b.n	800ece6 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800ec6c:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800ec6e:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 800ec72:	6979      	ldr	r1, [r7, #20]
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f7ff fe35 	bl	800e8e4 <put_fat>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800ec7e:	7bfb      	ldrb	r3, [r7, #15]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d109      	bne.n	800ec98 <create_chain+0xe4>
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d006      	beq.n	800ec98 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800ec8a:	697a      	ldr	r2, [r7, #20]
 800ec8c:	6839      	ldr	r1, [r7, #0]
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	f7ff fe28 	bl	800e8e4 <put_fat>
 800ec94:	4603      	mov	r3, r0
 800ec96:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800ec98:	7bfb      	ldrb	r3, [r7, #15]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d11a      	bne.n	800ecd4 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	697a      	ldr	r2, [r7, #20]
 800eca2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ecac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecb0:	d018      	beq.n	800ece4 <create_chain+0x130>
			fs->free_clust--;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ecb8:	1e5a      	subs	r2, r3, #1
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
			fs->fsi_flag |= 1;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800ecc6:	f043 0301 	orr.w	r3, r3, #1
 800ecca:	b2da      	uxtb	r2, r3
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
 800ecd2:	e007      	b.n	800ece4 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800ecd4:	7bfb      	ldrb	r3, [r7, #15]
 800ecd6:	2b01      	cmp	r3, #1
 800ecd8:	d102      	bne.n	800ece0 <create_chain+0x12c>
 800ecda:	f04f 33ff 	mov.w	r3, #4294967295
 800ecde:	e000      	b.n	800ece2 <create_chain+0x12e>
 800ece0:	2301      	movs	r3, #1
 800ece2:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800ece4:	697b      	ldr	r3, [r7, #20]
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	3718      	adds	r7, #24
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}

0800ecee <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800ecee:	b480      	push	{r7}
 800ecf0:	b087      	sub	sp, #28
 800ecf2:	af00      	add	r7, sp, #0
 800ecf4:	6078      	str	r0, [r7, #4]
 800ecf6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800ecfe:	3304      	adds	r3, #4
 800ed00:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	0a5b      	lsrs	r3, r3, #9
 800ed06:	687a      	ldr	r2, [r7, #4]
 800ed08:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 800ed0c:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800ed10:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed14:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	1d1a      	adds	r2, r3, #4
 800ed1a:	613a      	str	r2, [r7, #16]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d101      	bne.n	800ed2a <clmt_clust+0x3c>
 800ed26:	2300      	movs	r3, #0
 800ed28:	e010      	b.n	800ed4c <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800ed2a:	697a      	ldr	r2, [r7, #20]
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	429a      	cmp	r2, r3
 800ed30:	d307      	bcc.n	800ed42 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800ed32:	697a      	ldr	r2, [r7, #20]
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	1ad3      	subs	r3, r2, r3
 800ed38:	617b      	str	r3, [r7, #20]
 800ed3a:	693b      	ldr	r3, [r7, #16]
 800ed3c:	3304      	adds	r3, #4
 800ed3e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ed40:	e7e9      	b.n	800ed16 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800ed42:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	681a      	ldr	r2, [r3, #0]
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	4413      	add	r3, r2
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	371c      	adds	r7, #28
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bc80      	pop	{r7}
 800ed54:	4770      	bx	lr

0800ed56 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800ed56:	b580      	push	{r7, lr}
 800ed58:	b086      	sub	sp, #24
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	6078      	str	r0, [r7, #4]
 800ed5e:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	b29a      	uxth	r2, r3
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800ed70:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	2b01      	cmp	r3, #1
 800ed76:	d007      	beq.n	800ed88 <dir_sdi+0x32>
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ed7e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ed82:	697a      	ldr	r2, [r7, #20]
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d301      	bcc.n	800ed8c <dir_sdi+0x36>
		return FR_INT_ERR;
 800ed88:	2302      	movs	r3, #2
 800ed8a:	e074      	b.n	800ee76 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d10c      	bne.n	800edac <dir_sdi+0x56>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ed98:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ed9c:	2b03      	cmp	r3, #3
 800ed9e:	d105      	bne.n	800edac <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800eda6:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800edaa:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d111      	bne.n	800edd6 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800edb8:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800edbc:	461a      	mov	r2, r3
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	4293      	cmp	r3, r2
 800edc2:	d301      	bcc.n	800edc8 <dir_sdi+0x72>
			return FR_INT_ERR;
 800edc4:	2302      	movs	r3, #2
 800edc6:	e056      	b.n	800ee76 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800edce:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800edd2:	613b      	str	r3, [r7, #16]
 800edd4:	e032      	b.n	800ee3c <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800eddc:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800ede0:	011b      	lsls	r3, r3, #4
 800ede2:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800ede4:	e01e      	b.n	800ee24 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800edec:	6979      	ldr	r1, [r7, #20]
 800edee:	4618      	mov	r0, r3
 800edf0:	f7ff fcbf 	bl	800e772 <get_fat>
 800edf4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edfc:	d101      	bne.n	800ee02 <dir_sdi+0xac>
 800edfe:	2301      	movs	r3, #1
 800ee00:	e039      	b.n	800ee76 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	2b01      	cmp	r3, #1
 800ee06:	d907      	bls.n	800ee18 <dir_sdi+0xc2>
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ee0e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ee12:	697a      	ldr	r2, [r7, #20]
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d301      	bcc.n	800ee1c <dir_sdi+0xc6>
				return FR_INT_ERR;
 800ee18:	2302      	movs	r3, #2
 800ee1a:	e02c      	b.n	800ee76 <dir_sdi+0x120>
			idx -= ic;
 800ee1c:	683a      	ldr	r2, [r7, #0]
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	1ad3      	subs	r3, r2, r3
 800ee22:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800ee24:	683a      	ldr	r2, [r7, #0]
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	d2dc      	bcs.n	800ede6 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ee32:	6979      	ldr	r1, [r7, #20]
 800ee34:	4618      	mov	r0, r3
 800ee36:	f7ff fc7b 	bl	800e730 <clust2sect>
 800ee3a:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	697a      	ldr	r2, [r7, #20]
 800ee40:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	if (!sect) return FR_INT_ERR;
 800ee44:	693b      	ldr	r3, [r7, #16]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d101      	bne.n	800ee4e <dir_sdi+0xf8>
 800ee4a:	2302      	movs	r3, #2
 800ee4c:	e013      	b.n	800ee76 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	091a      	lsrs	r2, r3, #4
 800ee52:	693b      	ldr	r3, [r7, #16]
 800ee54:	441a      	add	r2, r3
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ee62:	461a      	mov	r2, r3
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	f003 030f 	and.w	r3, r3, #15
 800ee6a:	015b      	lsls	r3, r3, #5
 800ee6c:	441a      	add	r2, r3
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 800ee74:	2300      	movs	r3, #0
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	3718      	adds	r7, #24
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}

0800ee7e <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ee7e:	b590      	push	{r4, r7, lr}
 800ee80:	b087      	sub	sp, #28
 800ee82:	af00      	add	r7, sp, #0
 800ee84:	6078      	str	r0, [r7, #4]
 800ee86:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 800ee8e:	3301      	adds	r3, #1
 800ee90:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	b29b      	uxth	r3, r3
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d004      	beq.n	800eea4 <dir_next+0x26>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d101      	bne.n	800eea8 <dir_next+0x2a>
		return FR_NO_FILE;
 800eea4:	2304      	movs	r3, #4
 800eea6:	e0dd      	b.n	800f064 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	f003 030f 	and.w	r3, r3, #15
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	f040 80c6 	bne.w	800f040 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800eeba:	1c5a      	adds	r2, r3, #1
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

		if (!dp->clust) {		/* Static table */
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d10b      	bne.n	800eee4 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800eed2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800eed6:	461a      	mov	r2, r3
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	4293      	cmp	r3, r2
 800eedc:	f0c0 80b0 	bcc.w	800f040 <dir_next+0x1c2>
				return FR_NO_FILE;
 800eee0:	2304      	movs	r3, #4
 800eee2:	e0bf      	b.n	800f064 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	091b      	lsrs	r3, r3, #4
 800eee8:	687a      	ldr	r2, [r7, #4]
 800eeea:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 800eeee:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800eef2:	3a01      	subs	r2, #1
 800eef4:	4013      	ands	r3, r2
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	f040 80a2 	bne.w	800f040 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800ef08:	4619      	mov	r1, r3
 800ef0a:	4610      	mov	r0, r2
 800ef0c:	f7ff fc31 	bl	800e772 <get_fat>
 800ef10:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	2b01      	cmp	r3, #1
 800ef16:	d801      	bhi.n	800ef1c <dir_next+0x9e>
 800ef18:	2302      	movs	r3, #2
 800ef1a:	e0a3      	b.n	800f064 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800ef1c:	697b      	ldr	r3, [r7, #20]
 800ef1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef22:	d101      	bne.n	800ef28 <dir_next+0xaa>
 800ef24:	2301      	movs	r3, #1
 800ef26:	e09d      	b.n	800f064 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ef2e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ef32:	697a      	ldr	r2, [r7, #20]
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d374      	bcc.n	800f022 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d101      	bne.n	800ef42 <dir_next+0xc4>
 800ef3e:	2304      	movs	r3, #4
 800ef40:	e090      	b.n	800f064 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800ef4e:	4619      	mov	r1, r3
 800ef50:	4610      	mov	r0, r2
 800ef52:	f7ff fe2f 	bl	800ebb4 <create_chain>
 800ef56:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d101      	bne.n	800ef62 <dir_next+0xe4>
 800ef5e:	2307      	movs	r3, #7
 800ef60:	e080      	b.n	800f064 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	2b01      	cmp	r3, #1
 800ef66:	d101      	bne.n	800ef6c <dir_next+0xee>
 800ef68:	2302      	movs	r3, #2
 800ef6a:	e07b      	b.n	800f064 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef72:	d101      	bne.n	800ef78 <dir_next+0xfa>
 800ef74:	2301      	movs	r3, #1
 800ef76:	e075      	b.n	800f064 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f7ff fab2 	bl	800e4e8 <sync_window>
 800ef84:	4603      	mov	r3, r0
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d001      	beq.n	800ef8e <dir_next+0x110>
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	e06a      	b.n	800f064 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ef94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ef98:	2100      	movs	r1, #0
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7ff f8ac 	bl	800e0f8 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
 800efac:	6979      	ldr	r1, [r7, #20]
 800efae:	4610      	mov	r0, r2
 800efb0:	f7ff fbbe 	bl	800e730 <clust2sect>
 800efb4:	4603      	mov	r3, r0
 800efb6:	f8c4 3230 	str.w	r3, [r4, #560]	@ 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800efba:	2300      	movs	r3, #0
 800efbc:	613b      	str	r3, [r7, #16]
 800efbe:	e01b      	b.n	800eff8 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800efc6:	2201      	movs	r2, #1
 800efc8:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800efd2:	4618      	mov	r0, r3
 800efd4:	f7ff fa88 	bl	800e4e8 <sync_window>
 800efd8:	4603      	mov	r3, r0
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d001      	beq.n	800efe2 <dir_next+0x164>
 800efde:	2301      	movs	r3, #1
 800efe0:	e040      	b.n	800f064 <dir_next+0x1e6>
						dp->fs->winsect++;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800efe8:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 800efec:	3201      	adds	r2, #1
 800efee:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	3301      	adds	r3, #1
 800eff6:	613b      	str	r3, [r7, #16]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800effe:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800f002:	461a      	mov	r2, r3
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	4293      	cmp	r3, r2
 800f008:	d3da      	bcc.n	800efc0 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f010:	f8d3 1230 	ldr.w	r1, [r3, #560]	@ 0x230
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f01a:	693a      	ldr	r2, [r7, #16]
 800f01c:	1a8a      	subs	r2, r1, r2
 800f01e:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	697a      	ldr	r2, [r7, #20]
 800f026:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f030:	6979      	ldr	r1, [r7, #20]
 800f032:	4618      	mov	r0, r3
 800f034:	f7ff fb7c 	bl	800e730 <clust2sect>
 800f038:	4602      	mov	r2, r0
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	b29a      	uxth	r2, r3
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f050:	461a      	mov	r2, r3
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	f003 030f 	and.w	r3, r3, #15
 800f058:	015b      	lsls	r3, r3, #5
 800f05a:	441a      	add	r2, r3
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 800f062:	2300      	movs	r3, #0
}
 800f064:	4618      	mov	r0, r3
 800f066:	371c      	adds	r7, #28
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd90      	pop	{r4, r7, pc}

0800f06c <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b084      	sub	sp, #16
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
 800f074:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800f076:	2100      	movs	r1, #0
 800f078:	6878      	ldr	r0, [r7, #4]
 800f07a:	f7ff fe6c 	bl	800ed56 <dir_sdi>
 800f07e:	4603      	mov	r3, r0
 800f080:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f082:	7bfb      	ldrb	r3, [r7, #15]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d131      	bne.n	800f0ec <dir_alloc+0x80>
		n = 0;
 800f088:	2300      	movs	r3, #0
 800f08a:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f098:	4619      	mov	r1, r3
 800f09a:	4610      	mov	r0, r2
 800f09c:	f7ff fa6d 	bl	800e57a <move_window>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800f0a4:	7bfb      	ldrb	r3, [r7, #15]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d11f      	bne.n	800f0ea <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f0b0:	781b      	ldrb	r3, [r3, #0]
 800f0b2:	2be5      	cmp	r3, #229	@ 0xe5
 800f0b4:	d005      	beq.n	800f0c2 <dir_alloc+0x56>
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f0bc:	781b      	ldrb	r3, [r3, #0]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d107      	bne.n	800f0d2 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	3301      	adds	r3, #1
 800f0c6:	60bb      	str	r3, [r7, #8]
 800f0c8:	68ba      	ldr	r2, [r7, #8]
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	d102      	bne.n	800f0d6 <dir_alloc+0x6a>
 800f0d0:	e00c      	b.n	800f0ec <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800f0d6:	2101      	movs	r1, #1
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f7ff fed0 	bl	800ee7e <dir_next>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800f0e2:	7bfb      	ldrb	r3, [r7, #15]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d0d1      	beq.n	800f08c <dir_alloc+0x20>
 800f0e8:	e000      	b.n	800f0ec <dir_alloc+0x80>
			if (res != FR_OK) break;
 800f0ea:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f0ec:	7bfb      	ldrb	r3, [r7, #15]
 800f0ee:	2b04      	cmp	r3, #4
 800f0f0:	d101      	bne.n	800f0f6 <dir_alloc+0x8a>
 800f0f2:	2307      	movs	r3, #7
 800f0f4:	73fb      	strb	r3, [r7, #15]
	return res;
 800f0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	3710      	adds	r7, #16
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}

0800f100 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800f100:	b480      	push	{r7}
 800f102:	b085      	sub	sp, #20
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	331b      	adds	r3, #27
 800f10e:	781b      	ldrb	r3, [r3, #0]
 800f110:	021b      	lsls	r3, r3, #8
 800f112:	b21a      	sxth	r2, r3
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	331a      	adds	r3, #26
 800f118:	781b      	ldrb	r3, [r3, #0]
 800f11a:	b21b      	sxth	r3, r3
 800f11c:	4313      	orrs	r3, r2
 800f11e:	b21b      	sxth	r3, r3
 800f120:	b29b      	uxth	r3, r3
 800f122:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f12a:	2b03      	cmp	r3, #3
 800f12c:	d10f      	bne.n	800f14e <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	3315      	adds	r3, #21
 800f132:	781b      	ldrb	r3, [r3, #0]
 800f134:	021b      	lsls	r3, r3, #8
 800f136:	b21a      	sxth	r2, r3
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	3314      	adds	r3, #20
 800f13c:	781b      	ldrb	r3, [r3, #0]
 800f13e:	b21b      	sxth	r3, r3
 800f140:	4313      	orrs	r3, r2
 800f142:	b21b      	sxth	r3, r3
 800f144:	b29b      	uxth	r3, r3
 800f146:	041b      	lsls	r3, r3, #16
 800f148:	68fa      	ldr	r2, [r7, #12]
 800f14a:	4313      	orrs	r3, r2
 800f14c:	60fb      	str	r3, [r7, #12]

	return cl;
 800f14e:	68fb      	ldr	r3, [r7, #12]
}
 800f150:	4618      	mov	r0, r3
 800f152:	3714      	adds	r7, #20
 800f154:	46bd      	mov	sp, r7
 800f156:	bc80      	pop	{r7}
 800f158:	4770      	bx	lr

0800f15a <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800f15a:	b480      	push	{r7}
 800f15c:	b083      	sub	sp, #12
 800f15e:	af00      	add	r7, sp, #0
 800f160:	6078      	str	r0, [r7, #4]
 800f162:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	331a      	adds	r3, #26
 800f168:	683a      	ldr	r2, [r7, #0]
 800f16a:	b2d2      	uxtb	r2, r2
 800f16c:	701a      	strb	r2, [r3, #0]
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	b29b      	uxth	r3, r3
 800f172:	0a1b      	lsrs	r3, r3, #8
 800f174:	b29a      	uxth	r2, r3
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	331b      	adds	r3, #27
 800f17a:	b2d2      	uxtb	r2, r2
 800f17c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	0c1a      	lsrs	r2, r3, #16
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	3314      	adds	r3, #20
 800f186:	b2d2      	uxtb	r2, r2
 800f188:	701a      	strb	r2, [r3, #0]
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	0c1b      	lsrs	r3, r3, #16
 800f18e:	b29b      	uxth	r3, r3
 800f190:	0a1b      	lsrs	r3, r3, #8
 800f192:	b29a      	uxth	r2, r3
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	3315      	adds	r3, #21
 800f198:	b2d2      	uxtb	r2, r2
 800f19a:	701a      	strb	r2, [r3, #0]
}
 800f19c:	bf00      	nop
 800f19e:	370c      	adds	r7, #12
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bc80      	pop	{r7}
 800f1a4:	4770      	bx	lr
	...

0800f1a8 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b086      	sub	sp, #24
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	781b      	ldrb	r3, [r3, #0]
 800f1b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f1ba:	1e5a      	subs	r2, r3, #1
 800f1bc:	4613      	mov	r3, r2
 800f1be:	005b      	lsls	r3, r3, #1
 800f1c0:	4413      	add	r3, r2
 800f1c2:	009b      	lsls	r3, r3, #2
 800f1c4:	4413      	add	r3, r2
 800f1c6:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	613b      	str	r3, [r7, #16]
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800f1d0:	4a2b      	ldr	r2, [pc, #172]	@ (800f280 <cmp_lfn+0xd8>)
 800f1d2:	693b      	ldr	r3, [r7, #16]
 800f1d4:	4413      	add	r3, r2
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	3301      	adds	r3, #1
 800f1da:	683a      	ldr	r2, [r7, #0]
 800f1dc:	4413      	add	r3, r2
 800f1de:	781b      	ldrb	r3, [r3, #0]
 800f1e0:	021b      	lsls	r3, r3, #8
 800f1e2:	b21a      	sxth	r2, r3
 800f1e4:	4926      	ldr	r1, [pc, #152]	@ (800f280 <cmp_lfn+0xd8>)
 800f1e6:	693b      	ldr	r3, [r7, #16]
 800f1e8:	440b      	add	r3, r1
 800f1ea:	781b      	ldrb	r3, [r3, #0]
 800f1ec:	4619      	mov	r1, r3
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	440b      	add	r3, r1
 800f1f2:	781b      	ldrb	r3, [r3, #0]
 800f1f4:	b21b      	sxth	r3, r3
 800f1f6:	4313      	orrs	r3, r2
 800f1f8:	b21b      	sxth	r3, r3
 800f1fa:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800f1fc:	89fb      	ldrh	r3, [r7, #14]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d019      	beq.n	800f236 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800f202:	89bb      	ldrh	r3, [r7, #12]
 800f204:	4618      	mov	r0, r3
 800f206:	f002 fb87 	bl	8011918 <ff_wtoupper>
 800f20a:	4603      	mov	r3, r0
 800f20c:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	2bfe      	cmp	r3, #254	@ 0xfe
 800f212:	d80e      	bhi.n	800f232 <cmp_lfn+0x8a>
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	1c5a      	adds	r2, r3, #1
 800f218:	617a      	str	r2, [r7, #20]
 800f21a:	005b      	lsls	r3, r3, #1
 800f21c:	687a      	ldr	r2, [r7, #4]
 800f21e:	4413      	add	r3, r2
 800f220:	881b      	ldrh	r3, [r3, #0]
 800f222:	4618      	mov	r0, r3
 800f224:	f002 fb78 	bl	8011918 <ff_wtoupper>
 800f228:	4603      	mov	r3, r0
 800f22a:	461a      	mov	r2, r3
 800f22c:	89fb      	ldrh	r3, [r7, #14]
 800f22e:	4293      	cmp	r3, r2
 800f230:	d008      	beq.n	800f244 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800f232:	2300      	movs	r3, #0
 800f234:	e01f      	b.n	800f276 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800f236:	89bb      	ldrh	r3, [r7, #12]
 800f238:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f23c:	4293      	cmp	r3, r2
 800f23e:	d001      	beq.n	800f244 <cmp_lfn+0x9c>
 800f240:	2300      	movs	r3, #0
 800f242:	e018      	b.n	800f276 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	3301      	adds	r3, #1
 800f248:	613b      	str	r3, [r7, #16]
 800f24a:	693b      	ldr	r3, [r7, #16]
 800f24c:	2b0c      	cmp	r3, #12
 800f24e:	d9bf      	bls.n	800f1d0 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	781b      	ldrb	r3, [r3, #0]
 800f254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d00b      	beq.n	800f274 <cmp_lfn+0xcc>
 800f25c:	89fb      	ldrh	r3, [r7, #14]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d008      	beq.n	800f274 <cmp_lfn+0xcc>
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	005b      	lsls	r3, r3, #1
 800f266:	687a      	ldr	r2, [r7, #4]
 800f268:	4413      	add	r3, r2
 800f26a:	881b      	ldrh	r3, [r3, #0]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d001      	beq.n	800f274 <cmp_lfn+0xcc>
		return 0;
 800f270:	2300      	movs	r3, #0
 800f272:	e000      	b.n	800f276 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800f274:	2301      	movs	r3, #1
}
 800f276:	4618      	mov	r0, r3
 800f278:	3718      	adds	r7, #24
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}
 800f27e:	bf00      	nop
 800f280:	080153ac 	.word	0x080153ac

0800f284 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800f284:	b480      	push	{r7}
 800f286:	b089      	sub	sp, #36	@ 0x24
 800f288:	af00      	add	r7, sp, #0
 800f28a:	60f8      	str	r0, [r7, #12]
 800f28c:	60b9      	str	r1, [r7, #8]
 800f28e:	4611      	mov	r1, r2
 800f290:	461a      	mov	r2, r3
 800f292:	460b      	mov	r3, r1
 800f294:	71fb      	strb	r3, [r7, #7]
 800f296:	4613      	mov	r3, r2
 800f298:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800f29a:	68bb      	ldr	r3, [r7, #8]
 800f29c:	330d      	adds	r3, #13
 800f29e:	79ba      	ldrb	r2, [r7, #6]
 800f2a0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	330b      	adds	r3, #11
 800f2a6:	220f      	movs	r2, #15
 800f2a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	330c      	adds	r3, #12
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	331a      	adds	r3, #26
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	701a      	strb	r2, [r3, #0]
 800f2ba:	68bb      	ldr	r3, [r7, #8]
 800f2bc:	331b      	adds	r3, #27
 800f2be:	2200      	movs	r2, #0
 800f2c0:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800f2c2:	79fb      	ldrb	r3, [r7, #7]
 800f2c4:	1e5a      	subs	r2, r3, #1
 800f2c6:	4613      	mov	r3, r2
 800f2c8:	005b      	lsls	r3, r3, #1
 800f2ca:	4413      	add	r3, r2
 800f2cc:	009b      	lsls	r3, r3, #2
 800f2ce:	4413      	add	r3, r2
 800f2d0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	82fb      	strh	r3, [r7, #22]
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800f2da:	8afb      	ldrh	r3, [r7, #22]
 800f2dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f2e0:	4293      	cmp	r3, r2
 800f2e2:	d007      	beq.n	800f2f4 <fit_lfn+0x70>
 800f2e4:	69fb      	ldr	r3, [r7, #28]
 800f2e6:	1c5a      	adds	r2, r3, #1
 800f2e8:	61fa      	str	r2, [r7, #28]
 800f2ea:	005b      	lsls	r3, r3, #1
 800f2ec:	68fa      	ldr	r2, [r7, #12]
 800f2ee:	4413      	add	r3, r2
 800f2f0:	881b      	ldrh	r3, [r3, #0]
 800f2f2:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800f2f4:	4a1c      	ldr	r2, [pc, #112]	@ (800f368 <fit_lfn+0xe4>)
 800f2f6:	69bb      	ldr	r3, [r7, #24]
 800f2f8:	4413      	add	r3, r2
 800f2fa:	781b      	ldrb	r3, [r3, #0]
 800f2fc:	461a      	mov	r2, r3
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	4413      	add	r3, r2
 800f302:	8afa      	ldrh	r2, [r7, #22]
 800f304:	b2d2      	uxtb	r2, r2
 800f306:	701a      	strb	r2, [r3, #0]
 800f308:	8afb      	ldrh	r3, [r7, #22]
 800f30a:	0a1b      	lsrs	r3, r3, #8
 800f30c:	b299      	uxth	r1, r3
 800f30e:	4a16      	ldr	r2, [pc, #88]	@ (800f368 <fit_lfn+0xe4>)
 800f310:	69bb      	ldr	r3, [r7, #24]
 800f312:	4413      	add	r3, r2
 800f314:	781b      	ldrb	r3, [r3, #0]
 800f316:	3301      	adds	r3, #1
 800f318:	68ba      	ldr	r2, [r7, #8]
 800f31a:	4413      	add	r3, r2
 800f31c:	b2ca      	uxtb	r2, r1
 800f31e:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800f320:	8afb      	ldrh	r3, [r7, #22]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d102      	bne.n	800f32c <fit_lfn+0xa8>
 800f326:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f32a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800f32c:	69bb      	ldr	r3, [r7, #24]
 800f32e:	3301      	adds	r3, #1
 800f330:	61bb      	str	r3, [r7, #24]
 800f332:	69bb      	ldr	r3, [r7, #24]
 800f334:	2b0c      	cmp	r3, #12
 800f336:	d9d0      	bls.n	800f2da <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800f338:	8afb      	ldrh	r3, [r7, #22]
 800f33a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f33e:	4293      	cmp	r3, r2
 800f340:	d006      	beq.n	800f350 <fit_lfn+0xcc>
 800f342:	69fb      	ldr	r3, [r7, #28]
 800f344:	005b      	lsls	r3, r3, #1
 800f346:	68fa      	ldr	r2, [r7, #12]
 800f348:	4413      	add	r3, r2
 800f34a:	881b      	ldrh	r3, [r3, #0]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d103      	bne.n	800f358 <fit_lfn+0xd4>
 800f350:	79fb      	ldrb	r3, [r7, #7]
 800f352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f356:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	79fa      	ldrb	r2, [r7, #7]
 800f35c:	701a      	strb	r2, [r3, #0]
}
 800f35e:	bf00      	nop
 800f360:	3724      	adds	r7, #36	@ 0x24
 800f362:	46bd      	mov	sp, r7
 800f364:	bc80      	pop	{r7}
 800f366:	4770      	bx	lr
 800f368:	080153ac 	.word	0x080153ac

0800f36c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b08c      	sub	sp, #48	@ 0x30
 800f370:	af00      	add	r7, sp, #0
 800f372:	60f8      	str	r0, [r7, #12]
 800f374:	60b9      	str	r1, [r7, #8]
 800f376:	607a      	str	r2, [r7, #4]
 800f378:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800f37a:	220b      	movs	r2, #11
 800f37c:	68b9      	ldr	r1, [r7, #8]
 800f37e:	68f8      	ldr	r0, [r7, #12]
 800f380:	f7fe fe9c 	bl	800e0bc <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	2b05      	cmp	r3, #5
 800f388:	d92b      	bls.n	800f3e2 <gen_numname+0x76>
		sr = seq;
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800f38e:	e022      	b.n	800f3d6 <gen_numname+0x6a>
			wc = *lfn++;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	1c9a      	adds	r2, r3, #2
 800f394:	607a      	str	r2, [r7, #4]
 800f396:	881b      	ldrh	r3, [r3, #0]
 800f398:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800f39a:	2300      	movs	r3, #0
 800f39c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f39e:	e017      	b.n	800f3d0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800f3a0:	69fb      	ldr	r3, [r7, #28]
 800f3a2:	005a      	lsls	r2, r3, #1
 800f3a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f3a6:	f003 0301 	and.w	r3, r3, #1
 800f3aa:	4413      	add	r3, r2
 800f3ac:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800f3ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f3b0:	085b      	lsrs	r3, r3, #1
 800f3b2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800f3b4:	69fb      	ldr	r3, [r7, #28]
 800f3b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d005      	beq.n	800f3ca <gen_numname+0x5e>
 800f3be:	69fb      	ldr	r3, [r7, #28]
 800f3c0:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800f3c4:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800f3c8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800f3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3cc:	3301      	adds	r3, #1
 800f3ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f3d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3d2:	2b0f      	cmp	r3, #15
 800f3d4:	d9e4      	bls.n	800f3a0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	881b      	ldrh	r3, [r3, #0]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d1d8      	bne.n	800f390 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800f3de:	69fb      	ldr	r3, [r7, #28]
 800f3e0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800f3e2:	2307      	movs	r3, #7
 800f3e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	b2db      	uxtb	r3, r3
 800f3ea:	f003 030f 	and.w	r3, r3, #15
 800f3ee:	b2db      	uxtb	r3, r3
 800f3f0:	3330      	adds	r3, #48	@ 0x30
 800f3f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800f3f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f3fa:	2b39      	cmp	r3, #57	@ 0x39
 800f3fc:	d904      	bls.n	800f408 <gen_numname+0x9c>
 800f3fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f402:	3307      	adds	r3, #7
 800f404:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800f408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f40a:	1e5a      	subs	r2, r3, #1
 800f40c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800f40e:	3330      	adds	r3, #48	@ 0x30
 800f410:	443b      	add	r3, r7
 800f412:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800f416:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	091b      	lsrs	r3, r3, #4
 800f41e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d1df      	bne.n	800f3e6 <gen_numname+0x7a>
	ns[i] = '~';
 800f426:	f107 0214 	add.w	r2, r7, #20
 800f42a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f42c:	4413      	add	r3, r2
 800f42e:	227e      	movs	r2, #126	@ 0x7e
 800f430:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800f432:	2300      	movs	r3, #0
 800f434:	627b      	str	r3, [r7, #36]	@ 0x24
 800f436:	e002      	b.n	800f43e <gen_numname+0xd2>
 800f438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f43a:	3301      	adds	r3, #1
 800f43c:	627b      	str	r3, [r7, #36]	@ 0x24
 800f43e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f442:	429a      	cmp	r2, r3
 800f444:	d205      	bcs.n	800f452 <gen_numname+0xe6>
 800f446:	68fa      	ldr	r2, [r7, #12]
 800f448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f44a:	4413      	add	r3, r2
 800f44c:	781b      	ldrb	r3, [r3, #0]
 800f44e:	2b20      	cmp	r3, #32
 800f450:	d1f2      	bne.n	800f438 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800f452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f454:	2b07      	cmp	r3, #7
 800f456:	d807      	bhi.n	800f468 <gen_numname+0xfc>
 800f458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f45a:	1c5a      	adds	r2, r3, #1
 800f45c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800f45e:	3330      	adds	r3, #48	@ 0x30
 800f460:	443b      	add	r3, r7
 800f462:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f466:	e000      	b.n	800f46a <gen_numname+0xfe>
 800f468:	2120      	movs	r1, #32
 800f46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f46c:	1c5a      	adds	r2, r3, #1
 800f46e:	627a      	str	r2, [r7, #36]	@ 0x24
 800f470:	68fa      	ldr	r2, [r7, #12]
 800f472:	4413      	add	r3, r2
 800f474:	460a      	mov	r2, r1
 800f476:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f47a:	2b07      	cmp	r3, #7
 800f47c:	d9e9      	bls.n	800f452 <gen_numname+0xe6>
}
 800f47e:	bf00      	nop
 800f480:	bf00      	nop
 800f482:	3730      	adds	r7, #48	@ 0x30
 800f484:	46bd      	mov	sp, r7
 800f486:	bd80      	pop	{r7, pc}

0800f488 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f488:	b480      	push	{r7}
 800f48a:	b085      	sub	sp, #20
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f490:	2300      	movs	r3, #0
 800f492:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f494:	230b      	movs	r3, #11
 800f496:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800f498:	7bfb      	ldrb	r3, [r7, #15]
 800f49a:	b2da      	uxtb	r2, r3
 800f49c:	0852      	lsrs	r2, r2, #1
 800f49e:	01db      	lsls	r3, r3, #7
 800f4a0:	4313      	orrs	r3, r2
 800f4a2:	b2da      	uxtb	r2, r3
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	1c59      	adds	r1, r3, #1
 800f4a8:	6079      	str	r1, [r7, #4]
 800f4aa:	781b      	ldrb	r3, [r3, #0]
 800f4ac:	4413      	add	r3, r2
 800f4ae:	73fb      	strb	r3, [r7, #15]
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	3b01      	subs	r3, #1
 800f4b4:	60bb      	str	r3, [r7, #8]
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d1ed      	bne.n	800f498 <sum_sfn+0x10>
	return sum;
 800f4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3714      	adds	r7, #20
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bc80      	pop	{r7}
 800f4c6:	4770      	bx	lr

0800f4c8 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b086      	sub	sp, #24
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f4d0:	2100      	movs	r1, #0
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f7ff fc3f 	bl	800ed56 <dir_sdi>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f4dc:	7dfb      	ldrb	r3, [r7, #23]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d001      	beq.n	800f4e6 <dir_find+0x1e>
 800f4e2:	7dfb      	ldrb	r3, [r7, #23]
 800f4e4:	e0ac      	b.n	800f640 <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800f4e6:	23ff      	movs	r3, #255	@ 0xff
 800f4e8:	753b      	strb	r3, [r7, #20]
 800f4ea:	7d3b      	ldrb	r3, [r7, #20]
 800f4ec:	757b      	strb	r3, [r7, #21]
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f4f4:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f504:	4619      	mov	r1, r3
 800f506:	4610      	mov	r0, r2
 800f508:	f7ff f837 	bl	800e57a <move_window>
 800f50c:	4603      	mov	r3, r0
 800f50e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f510:	7dfb      	ldrb	r3, [r7, #23]
 800f512:	2b00      	cmp	r3, #0
 800f514:	f040 808e 	bne.w	800f634 <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f51e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800f520:	693b      	ldr	r3, [r7, #16]
 800f522:	781b      	ldrb	r3, [r3, #0]
 800f524:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f526:	7dbb      	ldrb	r3, [r7, #22]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d102      	bne.n	800f532 <dir_find+0x6a>
 800f52c:	2304      	movs	r3, #4
 800f52e:	75fb      	strb	r3, [r7, #23]
 800f530:	e085      	b.n	800f63e <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800f532:	693b      	ldr	r3, [r7, #16]
 800f534:	330b      	adds	r3, #11
 800f536:	781b      	ldrb	r3, [r3, #0]
 800f538:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f53c:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f53e:	7dbb      	ldrb	r3, [r7, #22]
 800f540:	2be5      	cmp	r3, #229	@ 0xe5
 800f542:	d007      	beq.n	800f554 <dir_find+0x8c>
 800f544:	7bfb      	ldrb	r3, [r7, #15]
 800f546:	f003 0308 	and.w	r3, r3, #8
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d00a      	beq.n	800f564 <dir_find+0x9c>
 800f54e:	7bfb      	ldrb	r3, [r7, #15]
 800f550:	2b0f      	cmp	r3, #15
 800f552:	d007      	beq.n	800f564 <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800f554:	23ff      	movs	r3, #255	@ 0xff
 800f556:	757b      	strb	r3, [r7, #21]
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f55e:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
 800f562:	e05c      	b.n	800f61e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f564:	7bfb      	ldrb	r3, [r7, #15]
 800f566:	2b0f      	cmp	r3, #15
 800f568:	d133      	bne.n	800f5d2 <dir_find+0x10a>
				if (dp->lfn) {
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800f570:	2b00      	cmp	r3, #0
 800f572:	d054      	beq.n	800f61e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f574:	7dbb      	ldrb	r3, [r7, #22]
 800f576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d00e      	beq.n	800f59c <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 800f57e:	693b      	ldr	r3, [r7, #16]
 800f580:	7b5b      	ldrb	r3, [r3, #13]
 800f582:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800f584:	7dbb      	ldrb	r3, [r7, #22]
 800f586:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f58a:	75bb      	strb	r3, [r7, #22]
 800f58c:	7dbb      	ldrb	r3, [r7, #22]
 800f58e:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800f59c:	7dba      	ldrb	r2, [r7, #22]
 800f59e:	7d7b      	ldrb	r3, [r7, #21]
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	d113      	bne.n	800f5cc <dir_find+0x104>
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	330d      	adds	r3, #13
 800f5a8:	781b      	ldrb	r3, [r3, #0]
 800f5aa:	7d3a      	ldrb	r2, [r7, #20]
 800f5ac:	429a      	cmp	r2, r3
 800f5ae:	d10d      	bne.n	800f5cc <dir_find+0x104>
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800f5b6:	6939      	ldr	r1, [r7, #16]
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7ff fdf5 	bl	800f1a8 <cmp_lfn>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d003      	beq.n	800f5cc <dir_find+0x104>
 800f5c4:	7d7b      	ldrb	r3, [r7, #21]
 800f5c6:	3b01      	subs	r3, #1
 800f5c8:	b2db      	uxtb	r3, r3
 800f5ca:	e000      	b.n	800f5ce <dir_find+0x106>
 800f5cc:	23ff      	movs	r3, #255	@ 0xff
 800f5ce:	757b      	strb	r3, [r7, #21]
 800f5d0:	e025      	b.n	800f61e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800f5d2:	7d7b      	ldrb	r3, [r7, #21]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d107      	bne.n	800f5e8 <dir_find+0x120>
 800f5d8:	6938      	ldr	r0, [r7, #16]
 800f5da:	f7ff ff55 	bl	800f488 <sum_sfn>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	461a      	mov	r2, r3
 800f5e2:	7d3b      	ldrb	r3, [r7, #20]
 800f5e4:	4293      	cmp	r3, r2
 800f5e6:	d027      	beq.n	800f638 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f5ee:	330b      	adds	r3, #11
 800f5f0:	781b      	ldrb	r3, [r3, #0]
 800f5f2:	f003 0301 	and.w	r3, r3, #1
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d10a      	bne.n	800f610 <dir_find+0x148>
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f600:	220b      	movs	r2, #11
 800f602:	4619      	mov	r1, r3
 800f604:	6938      	ldr	r0, [r7, #16]
 800f606:	f7fe fd91 	bl	800e12c <mem_cmp>
 800f60a:	4603      	mov	r3, r0
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d015      	beq.n	800f63c <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800f610:	23ff      	movs	r3, #255	@ 0xff
 800f612:	757b      	strb	r3, [r7, #21]
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f61a:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800f61e:	2100      	movs	r1, #0
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f7ff fc2c 	bl	800ee7e <dir_next>
 800f626:	4603      	mov	r3, r0
 800f628:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f62a:	7dfb      	ldrb	r3, [r7, #23]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	f43f af63 	beq.w	800f4f8 <dir_find+0x30>
 800f632:	e004      	b.n	800f63e <dir_find+0x176>
		if (res != FR_OK) break;
 800f634:	bf00      	nop
 800f636:	e002      	b.n	800f63e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800f638:	bf00      	nop
 800f63a:	e000      	b.n	800f63e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800f63c:	bf00      	nop

	return res;
 800f63e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f640:	4618      	mov	r0, r3
 800f642:	3718      	adds	r7, #24
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}

0800f648 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b08c      	sub	sp, #48	@ 0x30
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f656:	623b      	str	r3, [r7, #32]
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800f65e:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800f660:	f107 030c 	add.w	r3, r7, #12
 800f664:	220c      	movs	r2, #12
 800f666:	6a39      	ldr	r1, [r7, #32]
 800f668:	4618      	mov	r0, r3
 800f66a:	f7fe fd27 	bl	800e0bc <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f66e:	7dfb      	ldrb	r3, [r7, #23]
 800f670:	f003 0301 	and.w	r3, r3, #1
 800f674:	2b00      	cmp	r3, #0
 800f676:	d037      	beq.n	800f6e8 <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800f678:	6a3b      	ldr	r3, [r7, #32]
 800f67a:	330b      	adds	r3, #11
 800f67c:	2200      	movs	r2, #0
 800f67e:	701a      	strb	r2, [r3, #0]
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2200      	movs	r2, #0
 800f684:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
		for (n = 1; n < 100; n++) {
 800f688:	2301      	movs	r3, #1
 800f68a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f68c:	e013      	b.n	800f6b6 <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800f68e:	f107 010c 	add.w	r1, r7, #12
 800f692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f694:	69fa      	ldr	r2, [r7, #28]
 800f696:	6a38      	ldr	r0, [r7, #32]
 800f698:	f7ff fe68 	bl	800f36c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	f7ff ff13 	bl	800f4c8 <dir_find>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800f6a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d106      	bne.n	800f6be <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 800f6b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6b8:	2b63      	cmp	r3, #99	@ 0x63
 800f6ba:	d9e8      	bls.n	800f68e <dir_register+0x46>
 800f6bc:	e000      	b.n	800f6c0 <dir_register+0x78>
			if (res != FR_OK) break;
 800f6be:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f6c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6c2:	2b64      	cmp	r3, #100	@ 0x64
 800f6c4:	d101      	bne.n	800f6ca <dir_register+0x82>
 800f6c6:	2307      	movs	r3, #7
 800f6c8:	e0c5      	b.n	800f856 <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f6ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f6ce:	2b04      	cmp	r3, #4
 800f6d0:	d002      	beq.n	800f6d8 <dir_register+0x90>
 800f6d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f6d6:	e0be      	b.n	800f856 <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800f6d8:	6a3b      	ldr	r3, [r7, #32]
 800f6da:	330b      	adds	r3, #11
 800f6dc:	7dfa      	ldrb	r2, [r7, #23]
 800f6de:	701a      	strb	r2, [r3, #0]
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	69fa      	ldr	r2, [r7, #28]
 800f6e4:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800f6e8:	7dfb      	ldrb	r3, [r7, #23]
 800f6ea:	f003 0302 	and.w	r3, r3, #2
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d014      	beq.n	800f71c <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f6f6:	e002      	b.n	800f6fe <dir_register+0xb6>
 800f6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6fa:	3301      	adds	r3, #1
 800f6fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f700:	005b      	lsls	r3, r3, #1
 800f702:	69fa      	ldr	r2, [r7, #28]
 800f704:	4413      	add	r3, r2
 800f706:	881b      	ldrh	r3, [r3, #0]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d1f5      	bne.n	800f6f8 <dir_register+0xb0>
		nent = (n + 25) / 13;
 800f70c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f70e:	3319      	adds	r3, #25
 800f710:	4a53      	ldr	r2, [pc, #332]	@ (800f860 <dir_register+0x218>)
 800f712:	fba2 2303 	umull	r2, r3, r2, r3
 800f716:	089b      	lsrs	r3, r3, #2
 800f718:	627b      	str	r3, [r7, #36]	@ 0x24
 800f71a:	e001      	b.n	800f720 <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800f71c:	2301      	movs	r3, #1
 800f71e:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f720:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f7ff fca2 	bl	800f06c <dir_alloc>
 800f728:	4603      	mov	r3, r0
 800f72a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f72e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f732:	2b00      	cmp	r3, #0
 800f734:	d153      	bne.n	800f7de <dir_register+0x196>
 800f736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f738:	3b01      	subs	r3, #1
 800f73a:	627b      	str	r3, [r7, #36]	@ 0x24
 800f73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d04d      	beq.n	800f7de <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 800f748:	461a      	mov	r2, r3
 800f74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f74c:	1ad3      	subs	r3, r2, r3
 800f74e:	4619      	mov	r1, r3
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f7ff fb00 	bl	800ed56 <dir_sdi>
 800f756:	4603      	mov	r3, r0
 800f758:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800f75c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f760:	2b00      	cmp	r3, #0
 800f762:	d13c      	bne.n	800f7de <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7ff fe8c 	bl	800f488 <sum_sfn>
 800f770:	4603      	mov	r3, r0
 800f772:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f780:	4619      	mov	r1, r3
 800f782:	4610      	mov	r0, r2
 800f784:	f7fe fef9 	bl	800e57a <move_window>
 800f788:	4603      	mov	r3, r0
 800f78a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800f78e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f792:	2b00      	cmp	r3, #0
 800f794:	d122      	bne.n	800f7dc <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f8d3 1214 	ldr.w	r1, [r3, #532]	@ 0x214
 800f7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7a4:	b2da      	uxtb	r2, r3
 800f7a6:	7efb      	ldrb	r3, [r7, #27]
 800f7a8:	f7ff fd6c 	bl	800f284 <fit_lfn>
				dp->fs->wflag = 1;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f7b2:	2201      	movs	r2, #1
 800f7b4:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = dir_next(dp, 0);	/* Next entry */
 800f7b8:	2100      	movs	r1, #0
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f7ff fb5f 	bl	800ee7e <dir_next>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800f7c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d107      	bne.n	800f7de <dir_register+0x196>
 800f7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7d0:	3b01      	subs	r3, #1
 800f7d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800f7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d1cc      	bne.n	800f774 <dir_register+0x12c>
 800f7da:	e000      	b.n	800f7de <dir_register+0x196>
				if (res != FR_OK) break;
 800f7dc:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800f7de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d135      	bne.n	800f852 <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f7f2:	4619      	mov	r1, r3
 800f7f4:	4610      	mov	r0, r2
 800f7f6:	f7fe fec0 	bl	800e57a <move_window>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800f800:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f804:	2b00      	cmp	r3, #0
 800f806:	d124      	bne.n	800f852 <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f80e:	2220      	movs	r2, #32
 800f810:	2100      	movs	r1, #0
 800f812:	4618      	mov	r0, r3
 800f814:	f7fe fc70 	bl	800e0f8 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	f8d3 0214 	ldr.w	r0, [r3, #532]	@ 0x214
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f824:	220b      	movs	r2, #11
 800f826:	4619      	mov	r1, r3
 800f828:	f7fe fc48 	bl	800e0bc <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f832:	330b      	adds	r3, #11
 800f834:	781a      	ldrb	r2, [r3, #0]
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f83c:	330c      	adds	r3, #12
 800f83e:	f002 0218 	and.w	r2, r2, #24
 800f842:	b2d2      	uxtb	r2, r2
 800f844:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f84c:	2201      	movs	r2, #1
 800f84e:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		}
	}

	return res;
 800f852:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f856:	4618      	mov	r0, r3
 800f858:	3730      	adds	r7, #48	@ 0x30
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd80      	pop	{r7, pc}
 800f85e:	bf00      	nop
 800f860:	4ec4ec4f 	.word	0x4ec4ec4f

0800f864 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b08a      	sub	sp, #40	@ 0x28
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
 800f86c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	613b      	str	r3, [r7, #16]
 800f874:	e002      	b.n	800f87c <create_name+0x18>
 800f876:	693b      	ldr	r3, [r7, #16]
 800f878:	3301      	adds	r3, #1
 800f87a:	613b      	str	r3, [r7, #16]
 800f87c:	693b      	ldr	r3, [r7, #16]
 800f87e:	781b      	ldrb	r3, [r3, #0]
 800f880:	2b2f      	cmp	r3, #47	@ 0x2f
 800f882:	d0f8      	beq.n	800f876 <create_name+0x12>
 800f884:	693b      	ldr	r3, [r7, #16]
 800f886:	781b      	ldrb	r3, [r3, #0]
 800f888:	2b5c      	cmp	r3, #92	@ 0x5c
 800f88a:	d0f4      	beq.n	800f876 <create_name+0x12>
	lfn = dp->lfn;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800f892:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800f894:	2300      	movs	r3, #0
 800f896:	617b      	str	r3, [r7, #20]
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f89c:	69bb      	ldr	r3, [r7, #24]
 800f89e:	1c5a      	adds	r2, r3, #1
 800f8a0:	61ba      	str	r2, [r7, #24]
 800f8a2:	693a      	ldr	r2, [r7, #16]
 800f8a4:	4413      	add	r3, r2
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800f8aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f8ac:	2b1f      	cmp	r3, #31
 800f8ae:	d92f      	bls.n	800f910 <create_name+0xac>
 800f8b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f8b2:	2b2f      	cmp	r3, #47	@ 0x2f
 800f8b4:	d02c      	beq.n	800f910 <create_name+0xac>
 800f8b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f8b8:	2b5c      	cmp	r3, #92	@ 0x5c
 800f8ba:	d029      	beq.n	800f910 <create_name+0xac>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	2bfe      	cmp	r3, #254	@ 0xfe
 800f8c0:	d901      	bls.n	800f8c6 <create_name+0x62>
			return FR_INVALID_NAME;
 800f8c2:	2306      	movs	r3, #6
 800f8c4:	e182      	b.n	800fbcc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f8c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f8c8:	b2db      	uxtb	r3, r3
 800f8ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f8cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f8ce:	2101      	movs	r1, #1
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f001 ffe7 	bl	80118a4 <ff_convert>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f8da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d101      	bne.n	800f8e4 <create_name+0x80>
 800f8e0:	2306      	movs	r3, #6
 800f8e2:	e173      	b.n	800fbcc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800f8e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f8e6:	2b7f      	cmp	r3, #127	@ 0x7f
 800f8e8:	d809      	bhi.n	800f8fe <create_name+0x9a>
 800f8ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f8ec:	4619      	mov	r1, r3
 800f8ee:	488e      	ldr	r0, [pc, #568]	@ (800fb28 <create_name+0x2c4>)
 800f8f0:	f7fe fc42 	bl	800e178 <chk_chr>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d001      	beq.n	800f8fe <create_name+0x9a>
			return FR_INVALID_NAME;
 800f8fa:	2306      	movs	r3, #6
 800f8fc:	e166      	b.n	800fbcc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800f8fe:	697b      	ldr	r3, [r7, #20]
 800f900:	1c5a      	adds	r2, r3, #1
 800f902:	617a      	str	r2, [r7, #20]
 800f904:	005b      	lsls	r3, r3, #1
 800f906:	68fa      	ldr	r2, [r7, #12]
 800f908:	4413      	add	r3, r2
 800f90a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f90c:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f90e:	e7c5      	b.n	800f89c <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f910:	693a      	ldr	r2, [r7, #16]
 800f912:	69bb      	ldr	r3, [r7, #24]
 800f914:	441a      	add	r2, r3
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800f91a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f91c:	2b1f      	cmp	r3, #31
 800f91e:	d801      	bhi.n	800f924 <create_name+0xc0>
 800f920:	2304      	movs	r3, #4
 800f922:	e000      	b.n	800f926 <create_name+0xc2>
 800f924:	2300      	movs	r3, #0
 800f926:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800f92a:	e011      	b.n	800f950 <create_name+0xec>
		w = lfn[di - 1];
 800f92c:	697b      	ldr	r3, [r7, #20]
 800f92e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800f932:	3b01      	subs	r3, #1
 800f934:	005b      	lsls	r3, r3, #1
 800f936:	68fa      	ldr	r2, [r7, #12]
 800f938:	4413      	add	r3, r2
 800f93a:	881b      	ldrh	r3, [r3, #0]
 800f93c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800f93e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f940:	2b20      	cmp	r3, #32
 800f942:	d002      	beq.n	800f94a <create_name+0xe6>
 800f944:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f946:	2b2e      	cmp	r3, #46	@ 0x2e
 800f948:	d106      	bne.n	800f958 <create_name+0xf4>
		di--;
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	3b01      	subs	r3, #1
 800f94e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d1ea      	bne.n	800f92c <create_name+0xc8>
 800f956:	e000      	b.n	800f95a <create_name+0xf6>
		if (w != ' ' && w != '.') break;
 800f958:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d101      	bne.n	800f964 <create_name+0x100>
 800f960:	2306      	movs	r3, #6
 800f962:	e133      	b.n	800fbcc <create_name+0x368>

	lfn[di] = 0;						/* LFN is created */
 800f964:	697b      	ldr	r3, [r7, #20]
 800f966:	005b      	lsls	r3, r3, #1
 800f968:	68fa      	ldr	r2, [r7, #12]
 800f96a:	4413      	add	r3, r2
 800f96c:	2200      	movs	r2, #0
 800f96e:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f976:	220b      	movs	r2, #11
 800f978:	2120      	movs	r1, #32
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7fe fbbc 	bl	800e0f8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f980:	2300      	movs	r3, #0
 800f982:	61bb      	str	r3, [r7, #24]
 800f984:	e002      	b.n	800f98c <create_name+0x128>
 800f986:	69bb      	ldr	r3, [r7, #24]
 800f988:	3301      	adds	r3, #1
 800f98a:	61bb      	str	r3, [r7, #24]
 800f98c:	69bb      	ldr	r3, [r7, #24]
 800f98e:	005b      	lsls	r3, r3, #1
 800f990:	68fa      	ldr	r2, [r7, #12]
 800f992:	4413      	add	r3, r2
 800f994:	881b      	ldrh	r3, [r3, #0]
 800f996:	2b20      	cmp	r3, #32
 800f998:	d0f5      	beq.n	800f986 <create_name+0x122>
 800f99a:	69bb      	ldr	r3, [r7, #24]
 800f99c:	005b      	lsls	r3, r3, #1
 800f99e:	68fa      	ldr	r2, [r7, #12]
 800f9a0:	4413      	add	r3, r2
 800f9a2:	881b      	ldrh	r3, [r3, #0]
 800f9a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800f9a6:	d0ee      	beq.n	800f986 <create_name+0x122>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f9a8:	69bb      	ldr	r3, [r7, #24]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d009      	beq.n	800f9c2 <create_name+0x15e>
 800f9ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f9b2:	f043 0303 	orr.w	r3, r3, #3
 800f9b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f9ba:	e002      	b.n	800f9c2 <create_name+0x15e>
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	3b01      	subs	r3, #1
 800f9c0:	617b      	str	r3, [r7, #20]
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d009      	beq.n	800f9dc <create_name+0x178>
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800f9ce:	3b01      	subs	r3, #1
 800f9d0:	005b      	lsls	r3, r3, #1
 800f9d2:	68fa      	ldr	r2, [r7, #12]
 800f9d4:	4413      	add	r3, r2
 800f9d6:	881b      	ldrh	r3, [r3, #0]
 800f9d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800f9da:	d1ef      	bne.n	800f9bc <create_name+0x158>

	b = i = 0; ni = 8;
 800f9dc:	2300      	movs	r3, #0
 800f9de:	623b      	str	r3, [r7, #32]
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f9e6:	2308      	movs	r3, #8
 800f9e8:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f9ea:	69bb      	ldr	r3, [r7, #24]
 800f9ec:	1c5a      	adds	r2, r3, #1
 800f9ee:	61ba      	str	r2, [r7, #24]
 800f9f0:	005b      	lsls	r3, r3, #1
 800f9f2:	68fa      	ldr	r2, [r7, #12]
 800f9f4:	4413      	add	r3, r2
 800f9f6:	881b      	ldrh	r3, [r3, #0]
 800f9f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f9fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	f000 8090 	beq.w	800fb22 <create_name+0x2be>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800fa02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fa04:	2b20      	cmp	r3, #32
 800fa06:	d006      	beq.n	800fa16 <create_name+0x1b2>
 800fa08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fa0a:	2b2e      	cmp	r3, #46	@ 0x2e
 800fa0c:	d10a      	bne.n	800fa24 <create_name+0x1c0>
 800fa0e:	69ba      	ldr	r2, [r7, #24]
 800fa10:	697b      	ldr	r3, [r7, #20]
 800fa12:	429a      	cmp	r2, r3
 800fa14:	d006      	beq.n	800fa24 <create_name+0x1c0>
			cf |= NS_LOSS | NS_LFN; continue;
 800fa16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fa1a:	f043 0303 	orr.w	r3, r3, #3
 800fa1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fa22:	e07d      	b.n	800fb20 <create_name+0x2bc>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800fa24:	6a3a      	ldr	r2, [r7, #32]
 800fa26:	69fb      	ldr	r3, [r7, #28]
 800fa28:	429a      	cmp	r2, r3
 800fa2a:	d203      	bcs.n	800fa34 <create_name+0x1d0>
 800fa2c:	69ba      	ldr	r2, [r7, #24]
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d123      	bne.n	800fa7c <create_name+0x218>
			if (ni == 11) {				/* Long extension */
 800fa34:	69fb      	ldr	r3, [r7, #28]
 800fa36:	2b0b      	cmp	r3, #11
 800fa38:	d106      	bne.n	800fa48 <create_name+0x1e4>
				cf |= NS_LOSS | NS_LFN; break;
 800fa3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fa3e:	f043 0303 	orr.w	r3, r3, #3
 800fa42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fa46:	e076      	b.n	800fb36 <create_name+0x2d2>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800fa48:	69ba      	ldr	r2, [r7, #24]
 800fa4a:	697b      	ldr	r3, [r7, #20]
 800fa4c:	429a      	cmp	r2, r3
 800fa4e:	d005      	beq.n	800fa5c <create_name+0x1f8>
 800fa50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fa54:	f043 0303 	orr.w	r3, r3, #3
 800fa58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800fa5c:	69ba      	ldr	r2, [r7, #24]
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d867      	bhi.n	800fb34 <create_name+0x2d0>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800fa64:	697b      	ldr	r3, [r7, #20]
 800fa66:	61bb      	str	r3, [r7, #24]
 800fa68:	2308      	movs	r3, #8
 800fa6a:	623b      	str	r3, [r7, #32]
 800fa6c:	230b      	movs	r3, #11
 800fa6e:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800fa70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fa74:	009b      	lsls	r3, r3, #2
 800fa76:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800fa7a:	e051      	b.n	800fb20 <create_name+0x2bc>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800fa7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fa7e:	2b7f      	cmp	r3, #127	@ 0x7f
 800fa80:	d914      	bls.n	800faac <create_name+0x248>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800fa82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fa84:	2100      	movs	r1, #0
 800fa86:	4618      	mov	r0, r3
 800fa88:	f001 ff0c 	bl	80118a4 <ff_convert>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800fa90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d004      	beq.n	800faa0 <create_name+0x23c>
 800fa96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fa98:	3b80      	subs	r3, #128	@ 0x80
 800fa9a:	4a24      	ldr	r2, [pc, #144]	@ (800fb2c <create_name+0x2c8>)
 800fa9c:	5cd3      	ldrb	r3, [r2, r3]
 800fa9e:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800faa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800faa4:	f043 0302 	orr.w	r3, r3, #2
 800faa8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800faac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d007      	beq.n	800fac2 <create_name+0x25e>
 800fab2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fab4:	4619      	mov	r1, r3
 800fab6:	481e      	ldr	r0, [pc, #120]	@ (800fb30 <create_name+0x2cc>)
 800fab8:	f7fe fb5e 	bl	800e178 <chk_chr>
 800fabc:	4603      	mov	r3, r0
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d008      	beq.n	800fad4 <create_name+0x270>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800fac2:	235f      	movs	r3, #95	@ 0x5f
 800fac4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800fac6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800faca:	f043 0303 	orr.w	r3, r3, #3
 800face:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fad2:	e01b      	b.n	800fb0c <create_name+0x2a8>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800fad4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fad6:	2b40      	cmp	r3, #64	@ 0x40
 800fad8:	d909      	bls.n	800faee <create_name+0x28a>
 800fada:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fadc:	2b5a      	cmp	r3, #90	@ 0x5a
 800fade:	d806      	bhi.n	800faee <create_name+0x28a>
					b |= 2;
 800fae0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fae4:	f043 0302 	orr.w	r3, r3, #2
 800fae8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800faec:	e00e      	b.n	800fb0c <create_name+0x2a8>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800faee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800faf0:	2b60      	cmp	r3, #96	@ 0x60
 800faf2:	d90b      	bls.n	800fb0c <create_name+0x2a8>
 800faf4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800faf6:	2b7a      	cmp	r3, #122	@ 0x7a
 800faf8:	d808      	bhi.n	800fb0c <create_name+0x2a8>
						b |= 1; w -= 0x20;
 800fafa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fafe:	f043 0301 	orr.w	r3, r3, #1
 800fb02:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800fb06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fb08:	3b20      	subs	r3, #32
 800fb0a:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800fb12:	6a3b      	ldr	r3, [r7, #32]
 800fb14:	1c59      	adds	r1, r3, #1
 800fb16:	6239      	str	r1, [r7, #32]
 800fb18:	4413      	add	r3, r2
 800fb1a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800fb1c:	b2d2      	uxtb	r2, r2
 800fb1e:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800fb20:	e763      	b.n	800f9ea <create_name+0x186>
		if (!w) break;					/* Break on end of the LFN */
 800fb22:	bf00      	nop
 800fb24:	e007      	b.n	800fb36 <create_name+0x2d2>
 800fb26:	bf00      	nop
 800fb28:	08015224 	.word	0x08015224
 800fb2c:	0801532c 	.word	0x0801532c
 800fb30:	08015230 	.word	0x08015230
			if (si > di) break;			/* No extension */
 800fb34:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	2be5      	cmp	r3, #229	@ 0xe5
 800fb40:	d104      	bne.n	800fb4c <create_name+0x2e8>
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800fb48:	2205      	movs	r2, #5
 800fb4a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800fb4c:	69fb      	ldr	r3, [r7, #28]
 800fb4e:	2b08      	cmp	r3, #8
 800fb50:	d104      	bne.n	800fb5c <create_name+0x2f8>
 800fb52:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fb56:	009b      	lsls	r3, r3, #2
 800fb58:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800fb5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fb60:	f003 030c 	and.w	r3, r3, #12
 800fb64:	2b0c      	cmp	r3, #12
 800fb66:	d005      	beq.n	800fb74 <create_name+0x310>
 800fb68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fb6c:	f003 0303 	and.w	r3, r3, #3
 800fb70:	2b03      	cmp	r3, #3
 800fb72:	d105      	bne.n	800fb80 <create_name+0x31c>
		cf |= NS_LFN;
 800fb74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fb78:	f043 0302 	orr.w	r3, r3, #2
 800fb7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800fb80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fb84:	f003 0302 	and.w	r3, r3, #2
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d117      	bne.n	800fbbc <create_name+0x358>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800fb8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fb90:	f003 0303 	and.w	r3, r3, #3
 800fb94:	2b01      	cmp	r3, #1
 800fb96:	d105      	bne.n	800fba4 <create_name+0x340>
 800fb98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fb9c:	f043 0310 	orr.w	r3, r3, #16
 800fba0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800fba4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fba8:	f003 030c 	and.w	r3, r3, #12
 800fbac:	2b04      	cmp	r3, #4
 800fbae:	d105      	bne.n	800fbbc <create_name+0x358>
 800fbb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fbb4:	f043 0308 	orr.w	r3, r3, #8
 800fbb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800fbc2:	330b      	adds	r3, #11
 800fbc4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800fbc8:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800fbca:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800fbcc:	4618      	mov	r0, r3
 800fbce:	3728      	adds	r7, #40	@ 0x28
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd80      	pop	{r7, pc}

0800fbd4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b084      	sub	sp, #16
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
 800fbdc:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	781b      	ldrb	r3, [r3, #0]
 800fbe2:	2b2f      	cmp	r3, #47	@ 0x2f
 800fbe4:	d003      	beq.n	800fbee <follow_path+0x1a>
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	781b      	ldrb	r3, [r3, #0]
 800fbea:	2b5c      	cmp	r3, #92	@ 0x5c
 800fbec:	d102      	bne.n	800fbf4 <follow_path+0x20>
		path++;
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	3301      	adds	r3, #1
 800fbf2:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	781b      	ldrb	r3, [r3, #0]
 800fc00:	2b1f      	cmp	r3, #31
 800fc02:	d80a      	bhi.n	800fc1a <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800fc04:	2100      	movs	r1, #0
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f7ff f8a5 	bl	800ed56 <dir_sdi>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	2200      	movs	r2, #0
 800fc14:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800fc18:	e045      	b.n	800fca6 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fc1a:	463b      	mov	r3, r7
 800fc1c:	4619      	mov	r1, r3
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	f7ff fe20 	bl	800f864 <create_name>
 800fc24:	4603      	mov	r3, r0
 800fc26:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800fc28:	7bfb      	ldrb	r3, [r7, #15]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d136      	bne.n	800fc9c <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800fc2e:	6878      	ldr	r0, [r7, #4]
 800fc30:	f7ff fc4a 	bl	800f4c8 <dir_find>
 800fc34:	4603      	mov	r3, r0
 800fc36:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800fc3e:	7adb      	ldrb	r3, [r3, #11]
 800fc40:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800fc42:	7bfb      	ldrb	r3, [r7, #15]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d00a      	beq.n	800fc5e <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fc48:	7bfb      	ldrb	r3, [r7, #15]
 800fc4a:	2b04      	cmp	r3, #4
 800fc4c:	d128      	bne.n	800fca0 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fc4e:	7bbb      	ldrb	r3, [r7, #14]
 800fc50:	f003 0304 	and.w	r3, r3, #4
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d123      	bne.n	800fca0 <follow_path+0xcc>
 800fc58:	2305      	movs	r3, #5
 800fc5a:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800fc5c:	e020      	b.n	800fca0 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fc5e:	7bbb      	ldrb	r3, [r7, #14]
 800fc60:	f003 0304 	and.w	r3, r3, #4
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d11d      	bne.n	800fca4 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fc6e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	330b      	adds	r3, #11
 800fc74:	781b      	ldrb	r3, [r3, #0]
 800fc76:	f003 0310 	and.w	r3, r3, #16
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d102      	bne.n	800fc84 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800fc7e:	2305      	movs	r3, #5
 800fc80:	73fb      	strb	r3, [r7, #15]
 800fc82:	e010      	b.n	800fca6 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fc8a:	68b9      	ldr	r1, [r7, #8]
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f7ff fa37 	bl	800f100 <ld_clust>
 800fc92:	4602      	mov	r2, r0
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fc9a:	e7be      	b.n	800fc1a <follow_path+0x46>
			if (res != FR_OK) break;
 800fc9c:	bf00      	nop
 800fc9e:	e002      	b.n	800fca6 <follow_path+0xd2>
				break;
 800fca0:	bf00      	nop
 800fca2:	e000      	b.n	800fca6 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fca4:	bf00      	nop
		}
	}

	return res;
 800fca6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3710      	adds	r7, #16
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}

0800fcb0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fcb0:	b480      	push	{r7}
 800fcb2:	b087      	sub	sp, #28
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fcb8:	f04f 33ff 	mov.w	r3, #4294967295
 800fcbc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d031      	beq.n	800fd2a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	617b      	str	r3, [r7, #20]
 800fccc:	e002      	b.n	800fcd4 <get_ldnumber+0x24>
 800fcce:	697b      	ldr	r3, [r7, #20]
 800fcd0:	3301      	adds	r3, #1
 800fcd2:	617b      	str	r3, [r7, #20]
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	781b      	ldrb	r3, [r3, #0]
 800fcd8:	2b1f      	cmp	r3, #31
 800fcda:	d903      	bls.n	800fce4 <get_ldnumber+0x34>
 800fcdc:	697b      	ldr	r3, [r7, #20]
 800fcde:	781b      	ldrb	r3, [r3, #0]
 800fce0:	2b3a      	cmp	r3, #58	@ 0x3a
 800fce2:	d1f4      	bne.n	800fcce <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	781b      	ldrb	r3, [r3, #0]
 800fce8:	2b3a      	cmp	r3, #58	@ 0x3a
 800fcea:	d11c      	bne.n	800fd26 <get_ldnumber+0x76>
			tp = *path;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	1c5a      	adds	r2, r3, #1
 800fcf6:	60fa      	str	r2, [r7, #12]
 800fcf8:	781b      	ldrb	r3, [r3, #0]
 800fcfa:	3b30      	subs	r3, #48	@ 0x30
 800fcfc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	2b09      	cmp	r3, #9
 800fd02:	d80e      	bhi.n	800fd22 <get_ldnumber+0x72>
 800fd04:	68fa      	ldr	r2, [r7, #12]
 800fd06:	697b      	ldr	r3, [r7, #20]
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d10a      	bne.n	800fd22 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fd0c:	68bb      	ldr	r3, [r7, #8]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d107      	bne.n	800fd22 <get_ldnumber+0x72>
					vol = (int)i;
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fd16:	697b      	ldr	r3, [r7, #20]
 800fd18:	3301      	adds	r3, #1
 800fd1a:	617b      	str	r3, [r7, #20]
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	697a      	ldr	r2, [r7, #20]
 800fd20:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fd22:	693b      	ldr	r3, [r7, #16]
 800fd24:	e002      	b.n	800fd2c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fd26:	2300      	movs	r3, #0
 800fd28:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fd2a:	693b      	ldr	r3, [r7, #16]
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	371c      	adds	r7, #28
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bc80      	pop	{r7}
 800fd34:	4770      	bx	lr
	...

0800fd38 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b082      	sub	sp, #8
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
 800fd40:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2200      	movs	r2, #0
 800fd46:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	f04f 32ff 	mov.w	r2, #4294967295
 800fd50:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800fd54:	6839      	ldr	r1, [r7, #0]
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f7fe fc0f 	bl	800e57a <move_window>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d001      	beq.n	800fd66 <check_fs+0x2e>
		return 3;
 800fd62:	2303      	movs	r3, #3
 800fd64:	e04a      	b.n	800fdfc <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fd6c:	3301      	adds	r3, #1
 800fd6e:	781b      	ldrb	r3, [r3, #0]
 800fd70:	021b      	lsls	r3, r3, #8
 800fd72:	b21a      	sxth	r2, r3
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 800fd7a:	b21b      	sxth	r3, r3
 800fd7c:	4313      	orrs	r3, r2
 800fd7e:	b21b      	sxth	r3, r3
 800fd80:	4a20      	ldr	r2, [pc, #128]	@ (800fe04 <check_fs+0xcc>)
 800fd82:	4293      	cmp	r3, r2
 800fd84:	d001      	beq.n	800fd8a <check_fs+0x52>
		return 2;
 800fd86:	2302      	movs	r3, #2
 800fd88:	e038      	b.n	800fdfc <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	3336      	adds	r3, #54	@ 0x36
 800fd8e:	3303      	adds	r3, #3
 800fd90:	781b      	ldrb	r3, [r3, #0]
 800fd92:	061a      	lsls	r2, r3, #24
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	3336      	adds	r3, #54	@ 0x36
 800fd98:	3302      	adds	r3, #2
 800fd9a:	781b      	ldrb	r3, [r3, #0]
 800fd9c:	041b      	lsls	r3, r3, #16
 800fd9e:	431a      	orrs	r2, r3
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	3336      	adds	r3, #54	@ 0x36
 800fda4:	3301      	adds	r3, #1
 800fda6:	781b      	ldrb	r3, [r3, #0]
 800fda8:	021b      	lsls	r3, r3, #8
 800fdaa:	4313      	orrs	r3, r2
 800fdac:	687a      	ldr	r2, [r7, #4]
 800fdae:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 800fdb2:	4313      	orrs	r3, r2
 800fdb4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800fdb8:	4a13      	ldr	r2, [pc, #76]	@ (800fe08 <check_fs+0xd0>)
 800fdba:	4293      	cmp	r3, r2
 800fdbc:	d101      	bne.n	800fdc2 <check_fs+0x8a>
		return 0;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	e01c      	b.n	800fdfc <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	3352      	adds	r3, #82	@ 0x52
 800fdc6:	3303      	adds	r3, #3
 800fdc8:	781b      	ldrb	r3, [r3, #0]
 800fdca:	061a      	lsls	r2, r3, #24
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	3352      	adds	r3, #82	@ 0x52
 800fdd0:	3302      	adds	r3, #2
 800fdd2:	781b      	ldrb	r3, [r3, #0]
 800fdd4:	041b      	lsls	r3, r3, #16
 800fdd6:	431a      	orrs	r2, r3
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	3352      	adds	r3, #82	@ 0x52
 800fddc:	3301      	adds	r3, #1
 800fdde:	781b      	ldrb	r3, [r3, #0]
 800fde0:	021b      	lsls	r3, r3, #8
 800fde2:	4313      	orrs	r3, r2
 800fde4:	687a      	ldr	r2, [r7, #4]
 800fde6:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 800fdea:	4313      	orrs	r3, r2
 800fdec:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800fdf0:	4a05      	ldr	r2, [pc, #20]	@ (800fe08 <check_fs+0xd0>)
 800fdf2:	4293      	cmp	r3, r2
 800fdf4:	d101      	bne.n	800fdfa <check_fs+0xc2>
		return 0;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	e000      	b.n	800fdfc <check_fs+0xc4>

	return 1;
 800fdfa:	2301      	movs	r3, #1
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3708      	adds	r7, #8
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}
 800fe04:	ffffaa55 	.word	0xffffaa55
 800fe08:	00544146 	.word	0x00544146

0800fe0c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b096      	sub	sp, #88	@ 0x58
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	60f8      	str	r0, [r7, #12]
 800fe14:	60b9      	str	r1, [r7, #8]
 800fe16:	4613      	mov	r3, r2
 800fe18:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fe20:	68b8      	ldr	r0, [r7, #8]
 800fe22:	f7ff ff45 	bl	800fcb0 <get_ldnumber>
 800fe26:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fe28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	da01      	bge.n	800fe32 <find_volume+0x26>
 800fe2e:	230b      	movs	r3, #11
 800fe30:	e2b0      	b.n	8010394 <find_volume+0x588>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fe32:	4aa1      	ldr	r2, [pc, #644]	@ (80100b8 <find_volume+0x2ac>)
 800fe34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe3a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fe3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d101      	bne.n	800fe46 <find_volume+0x3a>
 800fe42:	230c      	movs	r3, #12
 800fe44:	e2a6      	b.n	8010394 <find_volume+0x588>

	ENTER_FF(fs);						/* Lock the volume */
 800fe46:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fe48:	f7fe f9b0 	bl	800e1ac <lock_fs>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d101      	bne.n	800fe56 <find_volume+0x4a>
 800fe52:	230f      	movs	r3, #15
 800fe54:	e29e      	b.n	8010394 <find_volume+0x588>
	*rfs = fs;							/* Return pointer to the file system object */
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fe5a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800fe5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe5e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d01b      	beq.n	800fe9e <find_volume+0x92>
		stat = disk_status(fs->drv);
 800fe66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe68:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f7fe f887 	bl	800df80 <disk_status>
 800fe72:	4603      	mov	r3, r0
 800fe74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fe78:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fe7c:	f003 0301 	and.w	r3, r3, #1
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d10c      	bne.n	800fe9e <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800fe84:	79fb      	ldrb	r3, [r7, #7]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d007      	beq.n	800fe9a <find_volume+0x8e>
 800fe8a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fe8e:	f003 0304 	and.w	r3, r3, #4
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d001      	beq.n	800fe9a <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 800fe96:	230a      	movs	r3, #10
 800fe98:	e27c      	b.n	8010394 <find_volume+0x588>
			return FR_OK;				/* The file system object is valid */
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	e27a      	b.n	8010394 <find_volume+0x588>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fe9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fea0:	2200      	movs	r2, #0
 800fea2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fea8:	b2da      	uxtb	r2, r3
 800feaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800feac:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800feb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800feb2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7fe f87c 	bl	800dfb4 <disk_initialize>
 800febc:	4603      	mov	r3, r0
 800febe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800fec2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fec6:	f003 0301 	and.w	r3, r3, #1
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d001      	beq.n	800fed2 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fece:	2303      	movs	r3, #3
 800fed0:	e260      	b.n	8010394 <find_volume+0x588>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800fed2:	79fb      	ldrb	r3, [r7, #7]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d007      	beq.n	800fee8 <find_volume+0xdc>
 800fed8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fedc:	f003 0304 	and.w	r3, r3, #4
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d001      	beq.n	800fee8 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800fee4:	230a      	movs	r3, #10
 800fee6:	e255      	b.n	8010394 <find_volume+0x588>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800fee8:	2300      	movs	r3, #0
 800feea:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800feec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800feee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fef0:	f7ff ff22 	bl	800fd38 <check_fs>
 800fef4:	4603      	mov	r3, r0
 800fef6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800fefa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fefe:	2b01      	cmp	r3, #1
 800ff00:	d153      	bne.n	800ffaa <find_volume+0x19e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800ff02:	2300      	movs	r3, #0
 800ff04:	643b      	str	r3, [r7, #64]	@ 0x40
 800ff06:	e028      	b.n	800ff5a <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800ff08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ff0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ff0c:	011b      	lsls	r3, r3, #4
 800ff0e:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ff12:	4413      	add	r3, r2
 800ff14:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800ff16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff18:	3304      	adds	r3, #4
 800ff1a:	781b      	ldrb	r3, [r3, #0]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d012      	beq.n	800ff46 <find_volume+0x13a>
 800ff20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff22:	330b      	adds	r3, #11
 800ff24:	781b      	ldrb	r3, [r3, #0]
 800ff26:	061a      	lsls	r2, r3, #24
 800ff28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff2a:	330a      	adds	r3, #10
 800ff2c:	781b      	ldrb	r3, [r3, #0]
 800ff2e:	041b      	lsls	r3, r3, #16
 800ff30:	431a      	orrs	r2, r3
 800ff32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff34:	3309      	adds	r3, #9
 800ff36:	781b      	ldrb	r3, [r3, #0]
 800ff38:	021b      	lsls	r3, r3, #8
 800ff3a:	4313      	orrs	r3, r2
 800ff3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ff3e:	3208      	adds	r2, #8
 800ff40:	7812      	ldrb	r2, [r2, #0]
 800ff42:	431a      	orrs	r2, r3
 800ff44:	e000      	b.n	800ff48 <find_volume+0x13c>
 800ff46:	2200      	movs	r2, #0
 800ff48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ff4a:	009b      	lsls	r3, r3, #2
 800ff4c:	3358      	adds	r3, #88	@ 0x58
 800ff4e:	443b      	add	r3, r7
 800ff50:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800ff54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ff56:	3301      	adds	r3, #1
 800ff58:	643b      	str	r3, [r7, #64]	@ 0x40
 800ff5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ff5c:	2b03      	cmp	r3, #3
 800ff5e:	d9d3      	bls.n	800ff08 <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800ff60:	2300      	movs	r3, #0
 800ff62:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800ff64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d002      	beq.n	800ff70 <find_volume+0x164>
 800ff6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ff6c:	3b01      	subs	r3, #1
 800ff6e:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800ff70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ff72:	009b      	lsls	r3, r3, #2
 800ff74:	3358      	adds	r3, #88	@ 0x58
 800ff76:	443b      	add	r3, r7
 800ff78:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ff7c:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800ff7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d005      	beq.n	800ff90 <find_volume+0x184>
 800ff84:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ff86:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ff88:	f7ff fed6 	bl	800fd38 <check_fs>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	e000      	b.n	800ff92 <find_volume+0x186>
 800ff90:	2302      	movs	r3, #2
 800ff92:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800ff96:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d005      	beq.n	800ffaa <find_volume+0x19e>
 800ff9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ffa0:	3301      	adds	r3, #1
 800ffa2:	643b      	str	r3, [r7, #64]	@ 0x40
 800ffa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ffa6:	2b03      	cmp	r3, #3
 800ffa8:	d9e2      	bls.n	800ff70 <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ffaa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ffae:	2b03      	cmp	r3, #3
 800ffb0:	d101      	bne.n	800ffb6 <find_volume+0x1aa>
 800ffb2:	2301      	movs	r3, #1
 800ffb4:	e1ee      	b.n	8010394 <find_volume+0x588>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800ffb6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d001      	beq.n	800ffc2 <find_volume+0x1b6>
 800ffbe:	230d      	movs	r3, #13
 800ffc0:	e1e8      	b.n	8010394 <find_volume+0x588>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ffc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffc4:	7b1b      	ldrb	r3, [r3, #12]
 800ffc6:	021b      	lsls	r3, r3, #8
 800ffc8:	b21a      	sxth	r2, r3
 800ffca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffcc:	7adb      	ldrb	r3, [r3, #11]
 800ffce:	b21b      	sxth	r3, r3
 800ffd0:	4313      	orrs	r3, r2
 800ffd2:	b21b      	sxth	r3, r3
 800ffd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ffd8:	d001      	beq.n	800ffde <find_volume+0x1d2>
		return FR_NO_FILESYSTEM;
 800ffda:	230d      	movs	r3, #13
 800ffdc:	e1da      	b.n	8010394 <find_volume+0x588>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800ffde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffe0:	7ddb      	ldrb	r3, [r3, #23]
 800ffe2:	021b      	lsls	r3, r3, #8
 800ffe4:	b21a      	sxth	r2, r3
 800ffe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffe8:	7d9b      	ldrb	r3, [r3, #22]
 800ffea:	b21b      	sxth	r3, r3
 800ffec:	4313      	orrs	r3, r2
 800ffee:	b21b      	sxth	r3, r3
 800fff0:	b29b      	uxth	r3, r3
 800fff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800fff4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d112      	bne.n	8010020 <find_volume+0x214>
 800fffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fffc:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8010000:	061a      	lsls	r2, r3, #24
 8010002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010004:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8010008:	041b      	lsls	r3, r3, #16
 801000a:	431a      	orrs	r2, r3
 801000c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801000e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8010012:	021b      	lsls	r3, r3, #8
 8010014:	4313      	orrs	r3, r2
 8010016:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010018:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 801001c:	4313      	orrs	r3, r2
 801001e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8010020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010022:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010024:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8010028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801002a:	7c1a      	ldrb	r2, [r3, #16]
 801002c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801002e:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8010032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010034:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8010038:	2b01      	cmp	r3, #1
 801003a:	d006      	beq.n	801004a <find_volume+0x23e>
 801003c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801003e:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8010042:	2b02      	cmp	r3, #2
 8010044:	d001      	beq.n	801004a <find_volume+0x23e>
		return FR_NO_FILESYSTEM;
 8010046:	230d      	movs	r3, #13
 8010048:	e1a4      	b.n	8010394 <find_volume+0x588>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 801004a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801004c:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8010050:	461a      	mov	r2, r3
 8010052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010054:	fb02 f303 	mul.w	r3, r2, r3
 8010058:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 801005a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801005c:	7b5a      	ldrb	r2, [r3, #13]
 801005e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010060:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8010064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010066:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 801006a:	2b00      	cmp	r3, #0
 801006c:	d00a      	beq.n	8010084 <find_volume+0x278>
 801006e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010070:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8010074:	461a      	mov	r2, r3
 8010076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010078:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 801007c:	3b01      	subs	r3, #1
 801007e:	4013      	ands	r3, r2
 8010080:	2b00      	cmp	r3, #0
 8010082:	d001      	beq.n	8010088 <find_volume+0x27c>
		return FR_NO_FILESYSTEM;
 8010084:	230d      	movs	r3, #13
 8010086:	e185      	b.n	8010394 <find_volume+0x588>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8010088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801008a:	7c9b      	ldrb	r3, [r3, #18]
 801008c:	021b      	lsls	r3, r3, #8
 801008e:	b21a      	sxth	r2, r3
 8010090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010092:	7c5b      	ldrb	r3, [r3, #17]
 8010094:	b21b      	sxth	r3, r3
 8010096:	4313      	orrs	r3, r2
 8010098:	b21b      	sxth	r3, r3
 801009a:	b29a      	uxth	r2, r3
 801009c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801009e:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80100a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100a4:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 80100a8:	f003 030f 	and.w	r3, r3, #15
 80100ac:	b29b      	uxth	r3, r3
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d004      	beq.n	80100bc <find_volume+0x2b0>
		return FR_NO_FILESYSTEM;
 80100b2:	230d      	movs	r3, #13
 80100b4:	e16e      	b.n	8010394 <find_volume+0x588>
 80100b6:	bf00      	nop
 80100b8:	20001310 	.word	0x20001310

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80100bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100be:	7d1b      	ldrb	r3, [r3, #20]
 80100c0:	021b      	lsls	r3, r3, #8
 80100c2:	b21a      	sxth	r2, r3
 80100c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100c6:	7cdb      	ldrb	r3, [r3, #19]
 80100c8:	b21b      	sxth	r3, r3
 80100ca:	4313      	orrs	r3, r2
 80100cc:	b21b      	sxth	r3, r3
 80100ce:	b29b      	uxth	r3, r3
 80100d0:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80100d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d112      	bne.n	80100fe <find_volume+0x2f2>
 80100d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100da:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80100de:	061a      	lsls	r2, r3, #24
 80100e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100e2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80100e6:	041b      	lsls	r3, r3, #16
 80100e8:	431a      	orrs	r2, r3
 80100ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100ec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80100f0:	021b      	lsls	r3, r3, #8
 80100f2:	4313      	orrs	r3, r2
 80100f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80100f6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80100fa:	4313      	orrs	r3, r2
 80100fc:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80100fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010100:	7bdb      	ldrb	r3, [r3, #15]
 8010102:	021b      	lsls	r3, r3, #8
 8010104:	b21a      	sxth	r2, r3
 8010106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010108:	7b9b      	ldrb	r3, [r3, #14]
 801010a:	b21b      	sxth	r3, r3
 801010c:	4313      	orrs	r3, r2
 801010e:	b21b      	sxth	r3, r3
 8010110:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8010112:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010114:	2b00      	cmp	r3, #0
 8010116:	d101      	bne.n	801011c <find_volume+0x310>
 8010118:	230d      	movs	r3, #13
 801011a:	e13b      	b.n	8010394 <find_volume+0x588>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 801011c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801011e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010120:	4413      	add	r3, r2
 8010122:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010124:	f8b2 2208 	ldrh.w	r2, [r2, #520]	@ 0x208
 8010128:	0912      	lsrs	r2, r2, #4
 801012a:	b292      	uxth	r2, r2
 801012c:	4413      	add	r3, r2
 801012e:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010130:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010134:	429a      	cmp	r2, r3
 8010136:	d201      	bcs.n	801013c <find_volume+0x330>
 8010138:	230d      	movs	r3, #13
 801013a:	e12b      	b.n	8010394 <find_volume+0x588>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 801013c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801013e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010140:	1ad3      	subs	r3, r2, r3
 8010142:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010144:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8010148:	fbb3 f3f2 	udiv	r3, r3, r2
 801014c:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 801014e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010150:	2b00      	cmp	r3, #0
 8010152:	d101      	bne.n	8010158 <find_volume+0x34c>
 8010154:	230d      	movs	r3, #13
 8010156:	e11d      	b.n	8010394 <find_volume+0x588>
	fmt = FS_FAT12;
 8010158:	2301      	movs	r3, #1
 801015a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 801015e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010160:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010164:	4293      	cmp	r3, r2
 8010166:	d902      	bls.n	801016e <find_volume+0x362>
 8010168:	2302      	movs	r3, #2
 801016a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 801016e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010170:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010174:	4293      	cmp	r3, r2
 8010176:	d902      	bls.n	801017e <find_volume+0x372>
 8010178:	2303      	movs	r3, #3
 801017a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 801017e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010180:	1c9a      	adds	r2, r3, #2
 8010182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010184:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
	fs->volbase = bsect;								/* Volume start sector */
 8010188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801018a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801018c:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8010190:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010192:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010194:	441a      	add	r2, r3
 8010196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010198:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 801019c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801019e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101a0:	441a      	add	r2, r3
 80101a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101a4:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
	if (fmt == FS_FAT32) {
 80101a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80101ac:	2b03      	cmp	r3, #3
 80101ae:	d121      	bne.n	80101f4 <find_volume+0x3e8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80101b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101b2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d001      	beq.n	80101be <find_volume+0x3b2>
 80101ba:	230d      	movs	r3, #13
 80101bc:	e0ea      	b.n	8010394 <find_volume+0x588>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80101be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101c0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80101c4:	061a      	lsls	r2, r3, #24
 80101c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101c8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80101cc:	041b      	lsls	r3, r3, #16
 80101ce:	431a      	orrs	r2, r3
 80101d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80101d6:	021b      	lsls	r3, r3, #8
 80101d8:	4313      	orrs	r3, r2
 80101da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80101dc:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 80101e0:	431a      	orrs	r2, r3
 80101e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101e4:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80101e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101ea:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80101ee:	009b      	lsls	r3, r3, #2
 80101f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80101f2:	e025      	b.n	8010240 <find_volume+0x434>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80101f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101f6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d101      	bne.n	8010202 <find_volume+0x3f6>
 80101fe:	230d      	movs	r3, #13
 8010200:	e0c8      	b.n	8010394 <find_volume+0x588>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8010202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010204:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 8010208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801020a:	441a      	add	r2, r3
 801020c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801020e:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010212:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010216:	2b02      	cmp	r3, #2
 8010218:	d104      	bne.n	8010224 <find_volume+0x418>
 801021a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801021c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010220:	005b      	lsls	r3, r3, #1
 8010222:	e00c      	b.n	801023e <find_volume+0x432>
 8010224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010226:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 801022a:	4613      	mov	r3, r2
 801022c:	005b      	lsls	r3, r3, #1
 801022e:	4413      	add	r3, r2
 8010230:	085a      	lsrs	r2, r3, #1
 8010232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010234:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010238:	f003 0301 	and.w	r3, r3, #1
 801023c:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 801023e:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8010240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010242:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8010246:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010248:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801024c:	0a5b      	lsrs	r3, r3, #9
 801024e:	429a      	cmp	r2, r3
 8010250:	d201      	bcs.n	8010256 <find_volume+0x44a>
		return FR_NO_FILESYSTEM;
 8010252:	230d      	movs	r3, #13
 8010254:	e09e      	b.n	8010394 <find_volume+0x588>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8010256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010258:	f04f 32ff 	mov.w	r2, #4294967295
 801025c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8010260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010262:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8010266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010268:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 801026c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801026e:	2280      	movs	r2, #128	@ 0x80
 8010270:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8010274:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010278:	2b03      	cmp	r3, #3
 801027a:	d177      	bne.n	801036c <find_volume+0x560>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 801027c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801027e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010282:	021b      	lsls	r3, r3, #8
 8010284:	b21a      	sxth	r2, r3
 8010286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010288:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801028c:	b21b      	sxth	r3, r3
 801028e:	4313      	orrs	r3, r2
 8010290:	b21b      	sxth	r3, r3
 8010292:	2b01      	cmp	r3, #1
 8010294:	d16a      	bne.n	801036c <find_volume+0x560>
		&& move_window(fs, bsect + 1) == FR_OK)
 8010296:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010298:	3301      	adds	r3, #1
 801029a:	4619      	mov	r1, r3
 801029c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801029e:	f7fe f96c 	bl	800e57a <move_window>
 80102a2:	4603      	mov	r3, r0
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d161      	bne.n	801036c <find_volume+0x560>
	{
		fs->fsi_flag = 0;
 80102a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102aa:	2200      	movs	r2, #0
 80102ac:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80102b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102b2:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 80102b6:	021b      	lsls	r3, r3, #8
 80102b8:	b21a      	sxth	r2, r3
 80102ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102bc:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 80102c0:	b21b      	sxth	r3, r3
 80102c2:	4313      	orrs	r3, r2
 80102c4:	b21b      	sxth	r3, r3
 80102c6:	4a35      	ldr	r2, [pc, #212]	@ (801039c <find_volume+0x590>)
 80102c8:	4293      	cmp	r3, r2
 80102ca:	d14f      	bne.n	801036c <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80102cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102ce:	78db      	ldrb	r3, [r3, #3]
 80102d0:	061a      	lsls	r2, r3, #24
 80102d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102d4:	789b      	ldrb	r3, [r3, #2]
 80102d6:	041b      	lsls	r3, r3, #16
 80102d8:	431a      	orrs	r2, r3
 80102da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102dc:	785b      	ldrb	r3, [r3, #1]
 80102de:	021b      	lsls	r3, r3, #8
 80102e0:	4313      	orrs	r3, r2
 80102e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80102e4:	7812      	ldrb	r2, [r2, #0]
 80102e6:	4313      	orrs	r3, r2
 80102e8:	4a2d      	ldr	r2, [pc, #180]	@ (80103a0 <find_volume+0x594>)
 80102ea:	4293      	cmp	r3, r2
 80102ec:	d13e      	bne.n	801036c <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80102ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102f0:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 80102f4:	061a      	lsls	r2, r3, #24
 80102f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102f8:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 80102fc:	041b      	lsls	r3, r3, #16
 80102fe:	431a      	orrs	r2, r3
 8010300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010302:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 8010306:	021b      	lsls	r3, r3, #8
 8010308:	4313      	orrs	r3, r2
 801030a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801030c:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8010310:	4313      	orrs	r3, r2
 8010312:	4a24      	ldr	r2, [pc, #144]	@ (80103a4 <find_volume+0x598>)
 8010314:	4293      	cmp	r3, r2
 8010316:	d129      	bne.n	801036c <find_volume+0x560>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8010318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801031a:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 801031e:	061a      	lsls	r2, r3, #24
 8010320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010322:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 8010326:	041b      	lsls	r3, r3, #16
 8010328:	431a      	orrs	r2, r3
 801032a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801032c:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8010330:	021b      	lsls	r3, r3, #8
 8010332:	4313      	orrs	r3, r2
 8010334:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010336:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 801033a:	431a      	orrs	r2, r3
 801033c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801033e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8010342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010344:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 8010348:	061a      	lsls	r2, r3, #24
 801034a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801034c:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 8010350:	041b      	lsls	r3, r3, #16
 8010352:	431a      	orrs	r2, r3
 8010354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010356:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 801035a:	021b      	lsls	r3, r3, #8
 801035c:	4313      	orrs	r3, r2
 801035e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010360:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 8010364:	431a      	orrs	r2, r3
 8010366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010368:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 801036c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801036e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8010372:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8010376:	4b0c      	ldr	r3, [pc, #48]	@ (80103a8 <find_volume+0x59c>)
 8010378:	881b      	ldrh	r3, [r3, #0]
 801037a:	3301      	adds	r3, #1
 801037c:	b29a      	uxth	r2, r3
 801037e:	4b0a      	ldr	r3, [pc, #40]	@ (80103a8 <find_volume+0x59c>)
 8010380:	801a      	strh	r2, [r3, #0]
 8010382:	4b09      	ldr	r3, [pc, #36]	@ (80103a8 <find_volume+0x59c>)
 8010384:	881a      	ldrh	r2, [r3, #0]
 8010386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010388:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 801038c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801038e:	f7fe f881 	bl	800e494 <clear_lock>
#endif

	return FR_OK;
 8010392:	2300      	movs	r3, #0
}
 8010394:	4618      	mov	r0, r3
 8010396:	3758      	adds	r7, #88	@ 0x58
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}
 801039c:	ffffaa55 	.word	0xffffaa55
 80103a0:	41615252 	.word	0x41615252
 80103a4:	61417272 	.word	0x61417272
 80103a8:	20001314 	.word	0x20001314

080103ac <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b084      	sub	sp, #16
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d022      	beq.n	8010404 <validate+0x58>
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d01d      	beq.n	8010404 <validate+0x58>
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80103ce:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d016      	beq.n	8010404 <validate+0x58>
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80103dc:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 80103e6:	429a      	cmp	r2, r3
 80103e8:	d10c      	bne.n	8010404 <validate+0x58>
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80103f0:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7fd fdc3 	bl	800df80 <disk_status>
 80103fa:	4603      	mov	r3, r0
 80103fc:	f003 0301 	and.w	r3, r3, #1
 8010400:	2b00      	cmp	r3, #0
 8010402:	d001      	beq.n	8010408 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8010404:	2309      	movs	r3, #9
 8010406:	e00b      	b.n	8010420 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801040e:	4618      	mov	r0, r3
 8010410:	f7fd fecc 	bl	800e1ac <lock_fs>
 8010414:	4603      	mov	r3, r0
 8010416:	2b00      	cmp	r3, #0
 8010418:	d101      	bne.n	801041e <validate+0x72>
 801041a:	230f      	movs	r3, #15
 801041c:	e000      	b.n	8010420 <validate+0x74>

	return FR_OK;
 801041e:	2300      	movs	r3, #0
}
 8010420:	4618      	mov	r0, r3
 8010422:	3710      	adds	r7, #16
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b088      	sub	sp, #32
 801042c:	af00      	add	r7, sp, #0
 801042e:	60f8      	str	r0, [r7, #12]
 8010430:	60b9      	str	r1, [r7, #8]
 8010432:	4613      	mov	r3, r2
 8010434:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010436:	68bb      	ldr	r3, [r7, #8]
 8010438:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 801043a:	f107 0310 	add.w	r3, r7, #16
 801043e:	4618      	mov	r0, r3
 8010440:	f7ff fc36 	bl	800fcb0 <get_ldnumber>
 8010444:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010446:	69fb      	ldr	r3, [r7, #28]
 8010448:	2b00      	cmp	r3, #0
 801044a:	da01      	bge.n	8010450 <f_mount+0x28>
 801044c:	230b      	movs	r3, #11
 801044e:	e04c      	b.n	80104ea <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010450:	4a28      	ldr	r2, [pc, #160]	@ (80104f4 <f_mount+0xcc>)
 8010452:	69fb      	ldr	r3, [r7, #28]
 8010454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010458:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801045a:	69bb      	ldr	r3, [r7, #24]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d011      	beq.n	8010484 <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 8010460:	69b8      	ldr	r0, [r7, #24]
 8010462:	f7fe f817 	bl	800e494 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8010466:	69bb      	ldr	r3, [r7, #24]
 8010468:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 801046c:	4618      	mov	r0, r3
 801046e:	f001 faa1 	bl	80119b4 <ff_del_syncobj>
 8010472:	4603      	mov	r3, r0
 8010474:	2b00      	cmp	r3, #0
 8010476:	d101      	bne.n	801047c <f_mount+0x54>
 8010478:	2302      	movs	r3, #2
 801047a:	e036      	b.n	80104ea <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801047c:	69bb      	ldr	r3, [r7, #24]
 801047e:	2200      	movs	r2, #0
 8010480:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	}

	if (fs) {
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d011      	beq.n	80104ae <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	2200      	movs	r2, #0
 801048e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8010492:	69fb      	ldr	r3, [r7, #28]
 8010494:	b2da      	uxtb	r2, r3
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 801049c:	4619      	mov	r1, r3
 801049e:	4610      	mov	r0, r2
 80104a0:	f001 fa68 	bl	8011974 <ff_cre_syncobj>
 80104a4:	4603      	mov	r3, r0
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d101      	bne.n	80104ae <f_mount+0x86>
 80104aa:	2302      	movs	r3, #2
 80104ac:	e01d      	b.n	80104ea <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80104ae:	68fa      	ldr	r2, [r7, #12]
 80104b0:	4910      	ldr	r1, [pc, #64]	@ (80104f4 <f_mount+0xcc>)
 80104b2:	69fb      	ldr	r3, [r7, #28]
 80104b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d002      	beq.n	80104c4 <f_mount+0x9c>
 80104be:	79fb      	ldrb	r3, [r7, #7]
 80104c0:	2b01      	cmp	r3, #1
 80104c2:	d001      	beq.n	80104c8 <f_mount+0xa0>
 80104c4:	2300      	movs	r3, #0
 80104c6:	e010      	b.n	80104ea <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80104c8:	f107 0108 	add.w	r1, r7, #8
 80104cc:	f107 030c 	add.w	r3, r7, #12
 80104d0:	2200      	movs	r2, #0
 80104d2:	4618      	mov	r0, r3
 80104d4:	f7ff fc9a 	bl	800fe0c <find_volume>
 80104d8:	4603      	mov	r3, r0
 80104da:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	7dfa      	ldrb	r2, [r7, #23]
 80104e0:	4611      	mov	r1, r2
 80104e2:	4618      	mov	r0, r3
 80104e4:	f7fd fe71 	bl	800e1ca <unlock_fs>
 80104e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3720      	adds	r7, #32
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}
 80104f2:	bf00      	nop
 80104f4:	20001310 	.word	0x20001310

080104f8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	f5ad 6d8b 	sub.w	sp, sp, #1112	@ 0x458
 80104fe:	af00      	add	r7, sp, #0
 8010500:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010504:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010508:	6018      	str	r0, [r3, #0]
 801050a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801050e:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8010512:	6019      	str	r1, [r3, #0]
 8010514:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010518:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 801051c:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 801051e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010522:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d101      	bne.n	8010530 <f_open+0x38>
 801052c:	2309      	movs	r3, #9
 801052e:	e267      	b.n	8010a00 <f_open+0x508>
	fp->fs = 0;			/* Clear file object */
 8010530:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010534:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	2200      	movs	r2, #0
 801053c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8010540:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010544:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8010548:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 801054c:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 8010550:	7812      	ldrb	r2, [r2, #0]
 8010552:	f002 021f 	and.w	r2, r2, #31
 8010556:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8010558:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801055c:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8010560:	781b      	ldrb	r3, [r3, #0]
 8010562:	f023 0301 	bic.w	r3, r3, #1
 8010566:	b2da      	uxtb	r2, r3
 8010568:	f107 0108 	add.w	r1, r7, #8
 801056c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8010570:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8010574:	4618      	mov	r0, r3
 8010576:	f7ff fc49 	bl	800fe0c <find_volume>
 801057a:	4603      	mov	r3, r0
 801057c:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8010580:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 8010584:	2b00      	cmp	r3, #0
 8010586:	f040 822d 	bne.w	80109e4 <f_open+0x4ec>
		INIT_BUF(dj);
 801058a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801058e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8010592:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 8010596:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
 801059a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801059e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80105a2:	f107 0214 	add.w	r2, r7, #20
 80105a6:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
		res = follow_path(&dj, path);	/* Follow the file path */
 80105aa:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80105ae:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 80105b2:	681a      	ldr	r2, [r3, #0]
 80105b4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80105b8:	4611      	mov	r1, r2
 80105ba:	4618      	mov	r0, r3
 80105bc:	f7ff fb0a 	bl	800fbd4 <follow_path>
 80105c0:	4603      	mov	r3, r0
 80105c2:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
		dir = dj.dir;
 80105c6:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80105ca:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80105ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80105d2:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80105d6:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d11b      	bne.n	8010616 <f_open+0x11e>
			if (!dir)	/* Default directory itself */
 80105de:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d103      	bne.n	80105ee <f_open+0xf6>
				res = FR_INVALID_NAME;
 80105e6:	2306      	movs	r3, #6
 80105e8:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 80105ec:	e013      	b.n	8010616 <f_open+0x11e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80105ee:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80105f2:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 80105f6:	781b      	ldrb	r3, [r3, #0]
 80105f8:	2b01      	cmp	r3, #1
 80105fa:	bf8c      	ite	hi
 80105fc:	2301      	movhi	r3, #1
 80105fe:	2300      	movls	r3, #0
 8010600:	b2db      	uxtb	r3, r3
 8010602:	461a      	mov	r2, r3
 8010604:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8010608:	4611      	mov	r1, r2
 801060a:	4618      	mov	r0, r3
 801060c:	f7fd fdfc 	bl	800e208 <chk_lock>
 8010610:	4603      	mov	r3, r0
 8010612:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010616:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801061a:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 801061e:	781b      	ldrb	r3, [r3, #0]
 8010620:	f003 031c 	and.w	r3, r3, #28
 8010624:	2b00      	cmp	r3, #0
 8010626:	f000 80e6 	beq.w	80107f6 <f_open+0x2fe>
			if (res != FR_OK) {					/* No file, create new */
 801062a:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 801062e:	2b00      	cmp	r3, #0
 8010630:	d027      	beq.n	8010682 <f_open+0x18a>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8010632:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 8010636:	2b04      	cmp	r3, #4
 8010638:	d10e      	bne.n	8010658 <f_open+0x160>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801063a:	f7fd fe51 	bl	800e2e0 <enq_lock>
 801063e:	4603      	mov	r3, r0
 8010640:	2b00      	cmp	r3, #0
 8010642:	d006      	beq.n	8010652 <f_open+0x15a>
 8010644:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8010648:	4618      	mov	r0, r3
 801064a:	f7fe fffd 	bl	800f648 <dir_register>
 801064e:	4603      	mov	r3, r0
 8010650:	e000      	b.n	8010654 <f_open+0x15c>
 8010652:	2312      	movs	r3, #18
 8010654:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010658:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801065c:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8010660:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8010664:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 8010668:	7812      	ldrb	r2, [r2, #0]
 801066a:	f042 0208 	orr.w	r2, r2, #8
 801066e:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8010670:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010674:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8010678:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801067c:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
 8010680:	e017      	b.n	80106b2 <f_open+0x1ba>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010682:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8010686:	330b      	adds	r3, #11
 8010688:	781b      	ldrb	r3, [r3, #0]
 801068a:	f003 0311 	and.w	r3, r3, #17
 801068e:	2b00      	cmp	r3, #0
 8010690:	d003      	beq.n	801069a <f_open+0x1a2>
					res = FR_DENIED;
 8010692:	2307      	movs	r3, #7
 8010694:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 8010698:	e00b      	b.n	80106b2 <f_open+0x1ba>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 801069a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801069e:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 80106a2:	781b      	ldrb	r3, [r3, #0]
 80106a4:	f003 0304 	and.w	r3, r3, #4
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d002      	beq.n	80106b2 <f_open+0x1ba>
						res = FR_EXIST;
 80106ac:	2308      	movs	r3, #8
 80106ae:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80106b2:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	f040 80c1 	bne.w	801083e <f_open+0x346>
 80106bc:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80106c0:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 80106c4:	781b      	ldrb	r3, [r3, #0]
 80106c6:	f003 0308 	and.w	r3, r3, #8
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	f000 80b7 	beq.w	801083e <f_open+0x346>
				dw = GET_FATTIME();				/* Created time */
 80106d0:	f7fd fbd0 	bl	800de74 <get_fattime>
 80106d4:	f8c7 044c 	str.w	r0, [r7, #1100]	@ 0x44c
				ST_DWORD(dir + DIR_CrtTime, dw);
 80106d8:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80106dc:	330e      	adds	r3, #14
 80106de:	f8d7 244c 	ldr.w	r2, [r7, #1100]	@ 0x44c
 80106e2:	b2d2      	uxtb	r2, r2
 80106e4:	701a      	strb	r2, [r3, #0]
 80106e6:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 80106ea:	b29b      	uxth	r3, r3
 80106ec:	0a1b      	lsrs	r3, r3, #8
 80106ee:	b29a      	uxth	r2, r3
 80106f0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80106f4:	330f      	adds	r3, #15
 80106f6:	b2d2      	uxtb	r2, r2
 80106f8:	701a      	strb	r2, [r3, #0]
 80106fa:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 80106fe:	0c1a      	lsrs	r2, r3, #16
 8010700:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8010704:	3310      	adds	r3, #16
 8010706:	b2d2      	uxtb	r2, r2
 8010708:	701a      	strb	r2, [r3, #0]
 801070a:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 801070e:	0e1a      	lsrs	r2, r3, #24
 8010710:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8010714:	3311      	adds	r3, #17
 8010716:	b2d2      	uxtb	r2, r2
 8010718:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 801071a:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 801071e:	330b      	adds	r3, #11
 8010720:	2200      	movs	r2, #0
 8010722:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8010724:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8010728:	331c      	adds	r3, #28
 801072a:	2200      	movs	r2, #0
 801072c:	701a      	strb	r2, [r3, #0]
 801072e:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8010732:	331d      	adds	r3, #29
 8010734:	2200      	movs	r2, #0
 8010736:	701a      	strb	r2, [r3, #0]
 8010738:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 801073c:	331e      	adds	r3, #30
 801073e:	2200      	movs	r2, #0
 8010740:	701a      	strb	r2, [r3, #0]
 8010742:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8010746:	331f      	adds	r3, #31
 8010748:	2200      	movs	r2, #0
 801074a:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 801074c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010750:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8010754:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010758:	f8d7 1450 	ldr.w	r1, [r7, #1104]	@ 0x450
 801075c:	4618      	mov	r0, r3
 801075e:	f7fe fccf 	bl	800f100 <ld_clust>
 8010762:	f8c7 0448 	str.w	r0, [r7, #1096]	@ 0x448
				st_clust(dir, 0);				/* cluster = 0 */
 8010766:	2100      	movs	r1, #0
 8010768:	f8d7 0450 	ldr.w	r0, [r7, #1104]	@ 0x450
 801076c:	f7fe fcf5 	bl	800f15a <st_clust>
				dj.fs->wflag = 1;
 8010770:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010774:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8010778:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801077c:	2201      	movs	r2, #1
 801077e:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8010782:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 8010786:	2b00      	cmp	r3, #0
 8010788:	d059      	beq.n	801083e <f_open+0x346>
					dw = dj.fs->winsect;
 801078a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801078e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8010792:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010796:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 801079a:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
					res = remove_chain(dj.fs, cl);
 801079e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80107a2:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80107a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80107aa:	f8d7 1448 	ldr.w	r1, [r7, #1096]	@ 0x448
 80107ae:	4618      	mov	r0, r3
 80107b0:	f7fe f9a6 	bl	800eb00 <remove_chain>
 80107b4:	4603      	mov	r3, r0
 80107b6:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
					if (res == FR_OK) {
 80107ba:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d13d      	bne.n	801083e <f_open+0x346>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80107c2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80107c6:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80107ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80107ce:	f8d7 2448 	ldr.w	r2, [r7, #1096]	@ 0x448
 80107d2:	3a01      	subs	r2, #1
 80107d4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
						res = move_window(dj.fs, dw);
 80107d8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80107dc:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80107e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80107e4:	f8d7 144c 	ldr.w	r1, [r7, #1100]	@ 0x44c
 80107e8:	4618      	mov	r0, r3
 80107ea:	f7fd fec6 	bl	800e57a <move_window>
 80107ee:	4603      	mov	r3, r0
 80107f0:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 80107f4:	e023      	b.n	801083e <f_open+0x346>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80107f6:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d11f      	bne.n	801083e <f_open+0x346>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80107fe:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8010802:	330b      	adds	r3, #11
 8010804:	781b      	ldrb	r3, [r3, #0]
 8010806:	f003 0310 	and.w	r3, r3, #16
 801080a:	2b00      	cmp	r3, #0
 801080c:	d003      	beq.n	8010816 <f_open+0x31e>
					res = FR_NO_FILE;
 801080e:	2304      	movs	r3, #4
 8010810:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 8010814:	e013      	b.n	801083e <f_open+0x346>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8010816:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801081a:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 801081e:	781b      	ldrb	r3, [r3, #0]
 8010820:	f003 0302 	and.w	r3, r3, #2
 8010824:	2b00      	cmp	r3, #0
 8010826:	d00a      	beq.n	801083e <f_open+0x346>
 8010828:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 801082c:	330b      	adds	r3, #11
 801082e:	781b      	ldrb	r3, [r3, #0]
 8010830:	f003 0301 	and.w	r3, r3, #1
 8010834:	2b00      	cmp	r3, #0
 8010836:	d002      	beq.n	801083e <f_open+0x346>
						res = FR_DENIED;
 8010838:	2307      	movs	r3, #7
 801083a:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
				}
			}
		}
		if (res == FR_OK) {
 801083e:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 8010842:	2b00      	cmp	r3, #0
 8010844:	d151      	bne.n	80108ea <f_open+0x3f2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010846:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801084a:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 801084e:	781b      	ldrb	r3, [r3, #0]
 8010850:	f003 0308 	and.w	r3, r3, #8
 8010854:	2b00      	cmp	r3, #0
 8010856:	d00b      	beq.n	8010870 <f_open+0x378>
				mode |= FA__WRITTEN;
 8010858:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801085c:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8010860:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8010864:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 8010868:	7812      	ldrb	r2, [r2, #0]
 801086a:	f042 0220 	orr.w	r2, r2, #32
 801086e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8010870:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010874:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8010878:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801087c:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 8010880:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010884:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
			fp->dir_ptr = dir;
 801088e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010892:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 801089c:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80108a0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80108a4:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 80108a8:	781b      	ldrb	r3, [r3, #0]
 80108aa:	2b01      	cmp	r3, #1
 80108ac:	bf8c      	ite	hi
 80108ae:	2301      	movhi	r3, #1
 80108b0:	2300      	movls	r3, #0
 80108b2:	b2db      	uxtb	r3, r3
 80108b4:	461a      	mov	r2, r3
 80108b6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80108ba:	4611      	mov	r1, r2
 80108bc:	4618      	mov	r0, r3
 80108be:	f7fd fd33 	bl	800e328 <inc_lock>
 80108c2:	4602      	mov	r2, r0
 80108c4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80108c8:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 80108d2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80108d6:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d102      	bne.n	80108ea <f_open+0x3f2>
 80108e4:	2302      	movs	r3, #2
 80108e6:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80108ea:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d178      	bne.n	80109e4 <f_open+0x4ec>
			fp->flag = mode;					/* File access mode */
 80108f2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80108f6:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8010900:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 8010904:	7812      	ldrb	r2, [r2, #0]
 8010906:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			fp->err = 0;						/* Clear error flag */
 801090a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801090e:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	2200      	movs	r2, #0
 8010916:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 801091a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801091e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8010922:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010926:	f8d7 1450 	ldr.w	r1, [r7, #1104]	@ 0x450
 801092a:	4618      	mov	r0, r3
 801092c:	f7fe fbe8 	bl	800f100 <ld_clust>
 8010930:	4602      	mov	r2, r0
 8010932:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010936:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8010940:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8010944:	331f      	adds	r3, #31
 8010946:	781b      	ldrb	r3, [r3, #0]
 8010948:	061a      	lsls	r2, r3, #24
 801094a:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 801094e:	331e      	adds	r3, #30
 8010950:	781b      	ldrb	r3, [r3, #0]
 8010952:	041b      	lsls	r3, r3, #16
 8010954:	431a      	orrs	r2, r3
 8010956:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 801095a:	331d      	adds	r3, #29
 801095c:	781b      	ldrb	r3, [r3, #0]
 801095e:	021b      	lsls	r3, r3, #8
 8010960:	4313      	orrs	r3, r2
 8010962:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 8010966:	321c      	adds	r2, #28
 8010968:	7812      	ldrb	r2, [r2, #0]
 801096a:	431a      	orrs	r2, r3
 801096c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010970:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
			fp->fptr = 0;						/* File pointer */
 801097a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801097e:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	2200      	movs	r2, #0
 8010986:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			fp->dsect = 0;
 801098a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801098e:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	2200      	movs	r2, #0
 8010996:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 801099a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801099e:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	2200      	movs	r2, #0
 80109a6:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80109aa:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80109ae:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80109b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80109b6:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80109ba:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
			fp->id = fp->fs->id;
 80109c4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80109c8:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80109d2:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 80109d6:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80109da:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 80109e4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80109e8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80109ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80109f0:	f897 2457 	ldrb.w	r2, [r7, #1111]	@ 0x457
 80109f4:	4611      	mov	r1, r2
 80109f6:	4618      	mov	r0, r3
 80109f8:	f7fd fbe7 	bl	800e1ca <unlock_fs>
 80109fc:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
}
 8010a00:	4618      	mov	r0, r3
 8010a02:	f507 678b 	add.w	r7, r7, #1112	@ 0x458
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd80      	pop	{r7, pc}

08010a0a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010a0a:	b580      	push	{r7, lr}
 8010a0c:	b08a      	sub	sp, #40	@ 0x28
 8010a0e:	af00      	add	r7, sp, #0
 8010a10:	60f8      	str	r0, [r7, #12]
 8010a12:	60b9      	str	r1, [r7, #8]
 8010a14:	607a      	str	r2, [r7, #4]
 8010a16:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8010a18:	68bb      	ldr	r3, [r7, #8]
 8010a1a:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	2200      	movs	r2, #0
 8010a20:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8010a22:	68f8      	ldr	r0, [r7, #12]
 8010a24:	f7ff fcc2 	bl	80103ac <validate>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8010a2c:	7dfb      	ldrb	r3, [r7, #23]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d009      	beq.n	8010a46 <f_write+0x3c>
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010a38:	7dfa      	ldrb	r2, [r7, #23]
 8010a3a:	4611      	mov	r1, r2
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f7fd fbc4 	bl	800e1ca <unlock_fs>
 8010a42:	7dfb      	ldrb	r3, [r7, #23]
 8010a44:	e1d4      	b.n	8010df0 <f_write+0x3e6>
	if (fp->err)							/* Check error */
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d00d      	beq.n	8010a6c <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8010a5c:	4619      	mov	r1, r3
 8010a5e:	4610      	mov	r0, r2
 8010a60:	f7fd fbb3 	bl	800e1ca <unlock_fs>
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8010a6a:	e1c1      	b.n	8010df0 <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010a72:	f003 0302 	and.w	r3, r3, #2
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d108      	bne.n	8010a8c <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010a80:	2107      	movs	r1, #7
 8010a82:	4618      	mov	r0, r3
 8010a84:	f7fd fba1 	bl	800e1ca <unlock_fs>
 8010a88:	2307      	movs	r3, #7
 8010a8a:	e1b1      	b.n	8010df0 <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	441a      	add	r2, r3
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	f080 8182 	bcs.w	8010da6 <f_write+0x39c>
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8010aa6:	e17e      	b.n	8010da6 <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8010aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	f040 813e 	bne.w	8010d34 <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8010abe:	0a5b      	lsrs	r3, r3, #9
 8010ac0:	b2da      	uxtb	r2, r3
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010ac8:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8010acc:	3b01      	subs	r3, #1
 8010ace:	b2db      	uxtb	r3, r3
 8010ad0:	4013      	ands	r3, r2
 8010ad2:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8010ad4:	7dbb      	ldrb	r3, [r7, #22]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d15f      	bne.n	8010b9a <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d10f      	bne.n	8010b04 <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8010aea:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8010aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d121      	bne.n	8010b36 <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010af8:	2100      	movs	r1, #0
 8010afa:	4618      	mov	r0, r3
 8010afc:	f7fe f85a 	bl	800ebb4 <create_chain>
 8010b00:	6278      	str	r0, [r7, #36]	@ 0x24
 8010b02:	e018      	b.n	8010b36 <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d008      	beq.n	8010b20 <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8010b14:	4619      	mov	r1, r3
 8010b16:	68f8      	ldr	r0, [r7, #12]
 8010b18:	f7fe f8e9 	bl	800ecee <clmt_clust>
 8010b1c:	6278      	str	r0, [r7, #36]	@ 0x24
 8010b1e:	e00a      	b.n	8010b36 <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010b2c:	4619      	mov	r1, r3
 8010b2e:	4610      	mov	r0, r2
 8010b30:	f7fe f840 	bl	800ebb4 <create_chain>
 8010b34:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	f000 8139 	beq.w	8010db0 <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8010b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b40:	2b01      	cmp	r3, #1
 8010b42:	d10c      	bne.n	8010b5e <f_write+0x154>
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	2202      	movs	r2, #2
 8010b48:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010b52:	2102      	movs	r1, #2
 8010b54:	4618      	mov	r0, r3
 8010b56:	f7fd fb38 	bl	800e1ca <unlock_fs>
 8010b5a:	2302      	movs	r3, #2
 8010b5c:	e148      	b.n	8010df0 <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8010b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b64:	d10c      	bne.n	8010b80 <f_write+0x176>
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	2201      	movs	r2, #1
 8010b6a:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010b74:	2101      	movs	r1, #1
 8010b76:	4618      	mov	r0, r3
 8010b78:	f7fd fb27 	bl	800e1ca <unlock_fs>
 8010b7c:	2301      	movs	r3, #1
 8010b7e:	e137      	b.n	8010df0 <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b84:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d103      	bne.n	8010b9a <f_write+0x190>
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b96:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d024      	beq.n	8010bf2 <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010bae:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8010bb2:	68f9      	ldr	r1, [r7, #12]
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8010bba:	2301      	movs	r3, #1
 8010bbc:	f7fd fa40 	bl	800e040 <disk_write>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d00c      	beq.n	8010be0 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	2201      	movs	r2, #1
 8010bca:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010bd4:	2101      	movs	r1, #1
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f7fd faf7 	bl	800e1ca <unlock_fs>
 8010bdc:	2301      	movs	r3, #1
 8010bde:	e107      	b.n	8010df0 <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010be6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010bea:	b2da      	uxtb	r2, r3
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010bfe:	4619      	mov	r1, r3
 8010c00:	4610      	mov	r0, r2
 8010c02:	f7fd fd95 	bl	800e730 <clust2sect>
 8010c06:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8010c08:	693b      	ldr	r3, [r7, #16]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d10c      	bne.n	8010c28 <f_write+0x21e>
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	2202      	movs	r2, #2
 8010c12:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010c1c:	2102      	movs	r1, #2
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f7fd fad3 	bl	800e1ca <unlock_fs>
 8010c24:	2302      	movs	r3, #2
 8010c26:	e0e3      	b.n	8010df0 <f_write+0x3e6>
			sect += csect;
 8010c28:	7dbb      	ldrb	r3, [r7, #22]
 8010c2a:	693a      	ldr	r2, [r7, #16]
 8010c2c:	4413      	add	r3, r2
 8010c2e:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	0a5b      	lsrs	r3, r3, #9
 8010c34:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010c36:	69fb      	ldr	r3, [r7, #28]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d04f      	beq.n	8010cdc <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8010c3c:	7dba      	ldrb	r2, [r7, #22]
 8010c3e:	69fb      	ldr	r3, [r7, #28]
 8010c40:	4413      	add	r3, r2
 8010c42:	68fa      	ldr	r2, [r7, #12]
 8010c44:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 8010c48:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8010c4c:	4293      	cmp	r3, r2
 8010c4e:	d908      	bls.n	8010c62 <f_write+0x258>
					cc = fp->fs->csize - csect;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010c56:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8010c5a:	461a      	mov	r2, r3
 8010c5c:	7dbb      	ldrb	r3, [r7, #22]
 8010c5e:	1ad3      	subs	r3, r2, r3
 8010c60:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010c68:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8010c6c:	69fb      	ldr	r3, [r7, #28]
 8010c6e:	693a      	ldr	r2, [r7, #16]
 8010c70:	69b9      	ldr	r1, [r7, #24]
 8010c72:	f7fd f9e5 	bl	800e040 <disk_write>
 8010c76:	4603      	mov	r3, r0
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d00c      	beq.n	8010c96 <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	2201      	movs	r2, #1
 8010c80:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010c8a:	2101      	movs	r1, #1
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f7fd fa9c 	bl	800e1ca <unlock_fs>
 8010c92:	2301      	movs	r3, #1
 8010c94:	e0ac      	b.n	8010df0 <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8010c9c:	693b      	ldr	r3, [r7, #16]
 8010c9e:	1ad3      	subs	r3, r2, r3
 8010ca0:	69fa      	ldr	r2, [r7, #28]
 8010ca2:	429a      	cmp	r2, r3
 8010ca4:	d916      	bls.n	8010cd4 <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8010ca6:	68f8      	ldr	r0, [r7, #12]
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8010cae:	693b      	ldr	r3, [r7, #16]
 8010cb0:	1ad3      	subs	r3, r2, r3
 8010cb2:	025b      	lsls	r3, r3, #9
 8010cb4:	69ba      	ldr	r2, [r7, #24]
 8010cb6:	4413      	add	r3, r2
 8010cb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010cbc:	4619      	mov	r1, r3
 8010cbe:	f7fd f9fd 	bl	800e0bc <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010cc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010ccc:	b2da      	uxtb	r2, r3
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8010cd4:	69fb      	ldr	r3, [r7, #28]
 8010cd6:	025b      	lsls	r3, r3, #9
 8010cd8:	623b      	str	r3, [r7, #32]
				continue;
 8010cda:	e04e      	b.n	8010d7a <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010ce2:	693a      	ldr	r2, [r7, #16]
 8010ce4:	429a      	cmp	r2, r3
 8010ce6:	d021      	beq.n	8010d2c <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8010cf4:	429a      	cmp	r2, r3
 8010cf6:	d219      	bcs.n	8010d2c <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010cfe:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8010d02:	68f9      	ldr	r1, [r7, #12]
 8010d04:	2301      	movs	r3, #1
 8010d06:	693a      	ldr	r2, [r7, #16]
 8010d08:	f7fd f97a 	bl	800e000 <disk_read>
 8010d0c:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d00c      	beq.n	8010d2c <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	2201      	movs	r2, #1
 8010d16:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010d20:	2101      	movs	r1, #1
 8010d22:	4618      	mov	r0, r3
 8010d24:	f7fd fa51 	bl	800e1ca <unlock_fs>
 8010d28:	2301      	movs	r3, #1
 8010d2a:	e061      	b.n	8010df0 <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	693a      	ldr	r2, [r7, #16]
 8010d30:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8010d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d3e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8010d42:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8010d44:	6a3a      	ldr	r2, [r7, #32]
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	429a      	cmp	r2, r3
 8010d4a:	d901      	bls.n	8010d50 <f_write+0x346>
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8010d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d5a:	68fa      	ldr	r2, [r7, #12]
 8010d5c:	4413      	add	r3, r2
 8010d5e:	6a3a      	ldr	r2, [r7, #32]
 8010d60:	69b9      	ldr	r1, [r7, #24]
 8010d62:	4618      	mov	r0, r3
 8010d64:	f7fd f9aa 	bl	800e0bc <mem_cpy>
		fp->flag |= FA__DIRTY;
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010d6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d72:	b2da      	uxtb	r2, r3
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8010d7a:	69ba      	ldr	r2, [r7, #24]
 8010d7c:	6a3b      	ldr	r3, [r7, #32]
 8010d7e:	4413      	add	r3, r2
 8010d80:	61bb      	str	r3, [r7, #24]
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010d88:	6a3b      	ldr	r3, [r7, #32]
 8010d8a:	441a      	add	r2, r3
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	681a      	ldr	r2, [r3, #0]
 8010d96:	6a3b      	ldr	r3, [r7, #32]
 8010d98:	441a      	add	r2, r3
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	601a      	str	r2, [r3, #0]
 8010d9e:	687a      	ldr	r2, [r7, #4]
 8010da0:	6a3b      	ldr	r3, [r7, #32]
 8010da2:	1ad3      	subs	r3, r2, r3
 8010da4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	f47f ae7d 	bne.w	8010aa8 <f_write+0x9e>
 8010dae:	e000      	b.n	8010db2 <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010db0:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8010dbe:	429a      	cmp	r2, r3
 8010dc0:	d905      	bls.n	8010dce <f_write+0x3c4>
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010dd4:	f043 0320 	orr.w	r3, r3, #32
 8010dd8:	b2da      	uxtb	r2, r3
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010de6:	2100      	movs	r1, #0
 8010de8:	4618      	mov	r0, r3
 8010dea:	f7fd f9ee 	bl	800e1ca <unlock_fs>
 8010dee:	2300      	movs	r3, #0
}
 8010df0:	4618      	mov	r0, r3
 8010df2:	3728      	adds	r7, #40	@ 0x28
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}

08010df8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b086      	sub	sp, #24
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	f7ff fad3 	bl	80103ac <validate>
 8010e06:	4603      	mov	r3, r0
 8010e08:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010e0a:	7dfb      	ldrb	r3, [r7, #23]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	f040 80af 	bne.w	8010f70 <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010e18:	f003 0320 	and.w	r3, r3, #32
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	f000 80a7 	beq.w	8010f70 <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d020      	beq.n	8010e72 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010e36:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8010e3a:	6879      	ldr	r1, [r7, #4]
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8010e42:	2301      	movs	r3, #1
 8010e44:	f7fd f8fc 	bl	800e040 <disk_write>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d008      	beq.n	8010e60 <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010e54:	2101      	movs	r1, #1
 8010e56:	4618      	mov	r0, r3
 8010e58:	f7fd f9b7 	bl	800e1ca <unlock_fs>
 8010e5c:	2301      	movs	r3, #1
 8010e5e:	e090      	b.n	8010f82 <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010e66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010e6a:	b2da      	uxtb	r2, r3
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8010e7e:	4619      	mov	r1, r3
 8010e80:	4610      	mov	r0, r2
 8010e82:	f7fd fb7a 	bl	800e57a <move_window>
 8010e86:	4603      	mov	r3, r0
 8010e88:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8010e8a:	7dfb      	ldrb	r3, [r7, #23]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d16f      	bne.n	8010f70 <f_sync+0x178>
				dir = fp->dir_ptr;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8010e96:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8010e98:	693b      	ldr	r3, [r7, #16]
 8010e9a:	330b      	adds	r3, #11
 8010e9c:	781a      	ldrb	r2, [r3, #0]
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	330b      	adds	r3, #11
 8010ea2:	f042 0220 	orr.w	r2, r2, #32
 8010ea6:	b2d2      	uxtb	r2, r2
 8010ea8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8010eb0:	693b      	ldr	r3, [r7, #16]
 8010eb2:	331c      	adds	r3, #28
 8010eb4:	b2d2      	uxtb	r2, r2
 8010eb6:	701a      	strb	r2, [r3, #0]
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8010ebe:	b29b      	uxth	r3, r3
 8010ec0:	0a1b      	lsrs	r3, r3, #8
 8010ec2:	b29a      	uxth	r2, r3
 8010ec4:	693b      	ldr	r3, [r7, #16]
 8010ec6:	331d      	adds	r3, #29
 8010ec8:	b2d2      	uxtb	r2, r2
 8010eca:	701a      	strb	r2, [r3, #0]
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8010ed2:	0c1a      	lsrs	r2, r3, #16
 8010ed4:	693b      	ldr	r3, [r7, #16]
 8010ed6:	331e      	adds	r3, #30
 8010ed8:	b2d2      	uxtb	r2, r2
 8010eda:	701a      	strb	r2, [r3, #0]
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8010ee2:	0e1a      	lsrs	r2, r3, #24
 8010ee4:	693b      	ldr	r3, [r7, #16]
 8010ee6:	331f      	adds	r3, #31
 8010ee8:	b2d2      	uxtb	r2, r2
 8010eea:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8010ef2:	4619      	mov	r1, r3
 8010ef4:	6938      	ldr	r0, [r7, #16]
 8010ef6:	f7fe f930 	bl	800f15a <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8010efa:	f7fc ffbb 	bl	800de74 <get_fattime>
 8010efe:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8010f00:	693b      	ldr	r3, [r7, #16]
 8010f02:	3316      	adds	r3, #22
 8010f04:	68fa      	ldr	r2, [r7, #12]
 8010f06:	b2d2      	uxtb	r2, r2
 8010f08:	701a      	strb	r2, [r3, #0]
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	b29b      	uxth	r3, r3
 8010f0e:	0a1b      	lsrs	r3, r3, #8
 8010f10:	b29a      	uxth	r2, r3
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	3317      	adds	r3, #23
 8010f16:	b2d2      	uxtb	r2, r2
 8010f18:	701a      	strb	r2, [r3, #0]
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	0c1a      	lsrs	r2, r3, #16
 8010f1e:	693b      	ldr	r3, [r7, #16]
 8010f20:	3318      	adds	r3, #24
 8010f22:	b2d2      	uxtb	r2, r2
 8010f24:	701a      	strb	r2, [r3, #0]
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	0e1a      	lsrs	r2, r3, #24
 8010f2a:	693b      	ldr	r3, [r7, #16]
 8010f2c:	3319      	adds	r3, #25
 8010f2e:	b2d2      	uxtb	r2, r2
 8010f30:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8010f32:	693b      	ldr	r3, [r7, #16]
 8010f34:	3312      	adds	r3, #18
 8010f36:	2200      	movs	r2, #0
 8010f38:	701a      	strb	r2, [r3, #0]
 8010f3a:	693b      	ldr	r3, [r7, #16]
 8010f3c:	3313      	adds	r3, #19
 8010f3e:	2200      	movs	r2, #0
 8010f40:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8010f48:	f023 0320 	bic.w	r3, r3, #32
 8010f4c:	b2da      	uxtb	r2, r3
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				fp->fs->wflag = 1;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010f5a:	2201      	movs	r2, #1
 8010f5c:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = sync_fs(fp->fs);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010f66:	4618      	mov	r0, r3
 8010f68:	f7fd fb35 	bl	800e5d6 <sync_fs>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010f76:	7dfa      	ldrb	r2, [r7, #23]
 8010f78:	4611      	mov	r1, r2
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f7fd f925 	bl	800e1ca <unlock_fs>
 8010f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f82:	4618      	mov	r0, r3
 8010f84:	3718      	adds	r7, #24
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bd80      	pop	{r7, pc}

08010f8a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8010f8a:	b580      	push	{r7, lr}
 8010f8c:	b090      	sub	sp, #64	@ 0x40
 8010f8e:	af00      	add	r7, sp, #0
 8010f90:	6078      	str	r0, [r7, #4]
 8010f92:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	f7ff fa09 	bl	80103ac <validate>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8010fa0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d00b      	beq.n	8010fc0 <f_lseek+0x36>
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010fae:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8010fb2:	4611      	mov	r1, r2
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	f7fd f908 	bl	800e1ca <unlock_fs>
 8010fba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010fbe:	e2af      	b.n	8011520 <f_lseek+0x596>
	if (fp->err)						/* Check error */
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d00d      	beq.n	8010fe6 <f_lseek+0x5c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8010fd6:	4619      	mov	r1, r3
 8010fd8:	4610      	mov	r0, r2
 8010fda:	f7fd f8f6 	bl	800e1ca <unlock_fs>
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8010fe4:	e29c      	b.n	8011520 <f_lseek+0x596>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	f000 8115 	beq.w	801121c <f_lseek+0x292>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ff8:	d172      	bne.n	80110e0 <f_lseek+0x156>
			tbl = fp->cltbl;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8011000:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011004:	1d1a      	adds	r2, r3, #4
 8011006:	627a      	str	r2, [r7, #36]	@ 0x24
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	617b      	str	r3, [r7, #20]
 801100c:	2302      	movs	r3, #2
 801100e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8011016:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8011018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801101a:	2b00      	cmp	r3, #0
 801101c:	d04f      	beq.n	80110be <f_lseek+0x134>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801101e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011020:	613b      	str	r3, [r7, #16]
 8011022:	2300      	movs	r3, #0
 8011024:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011028:	3302      	adds	r3, #2
 801102a:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 801102c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801102e:	60fb      	str	r3, [r7, #12]
 8011030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011032:	3301      	adds	r3, #1
 8011034:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801103c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801103e:	4618      	mov	r0, r3
 8011040:	f7fd fb97 	bl	800e772 <get_fat>
 8011044:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8011046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011048:	2b01      	cmp	r3, #1
 801104a:	d80c      	bhi.n	8011066 <f_lseek+0xdc>
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2202      	movs	r2, #2
 8011050:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801105a:	2102      	movs	r1, #2
 801105c:	4618      	mov	r0, r3
 801105e:	f7fd f8b4 	bl	800e1ca <unlock_fs>
 8011062:	2302      	movs	r3, #2
 8011064:	e25c      	b.n	8011520 <f_lseek+0x596>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8011066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011068:	f1b3 3fff 	cmp.w	r3, #4294967295
 801106c:	d10c      	bne.n	8011088 <f_lseek+0xfe>
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2201      	movs	r2, #1
 8011072:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801107c:	2101      	movs	r1, #1
 801107e:	4618      	mov	r0, r3
 8011080:	f7fd f8a3 	bl	800e1ca <unlock_fs>
 8011084:	2301      	movs	r3, #1
 8011086:	e24b      	b.n	8011520 <f_lseek+0x596>
					} while (cl == pcl + 1);
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	3301      	adds	r3, #1
 801108c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801108e:	429a      	cmp	r2, r3
 8011090:	d0cc      	beq.n	801102c <f_lseek+0xa2>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011092:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011094:	697b      	ldr	r3, [r7, #20]
 8011096:	429a      	cmp	r2, r3
 8011098:	d809      	bhi.n	80110ae <f_lseek+0x124>
						*tbl++ = ncl; *tbl++ = tcl;
 801109a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801109c:	1d1a      	adds	r2, r3, #4
 801109e:	627a      	str	r2, [r7, #36]	@ 0x24
 80110a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80110a2:	601a      	str	r2, [r3, #0]
 80110a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110a6:	1d1a      	adds	r2, r3, #4
 80110a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80110aa:	693a      	ldr	r2, [r7, #16]
 80110ac:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80110b4:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80110b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80110ba:	429a      	cmp	r2, r3
 80110bc:	d3af      	bcc.n	801101e <f_lseek+0x94>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 80110c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80110c6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 80110c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80110ca:	697b      	ldr	r3, [r7, #20]
 80110cc:	429a      	cmp	r2, r3
 80110ce:	d803      	bhi.n	80110d8 <f_lseek+0x14e>
				*tbl = 0;		/* Terminate table */
 80110d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110d2:	2200      	movs	r2, #0
 80110d4:	601a      	str	r2, [r3, #0]
 80110d6:	e218      	b.n	801150a <f_lseek+0x580>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80110d8:	2311      	movs	r3, #17
 80110da:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80110de:	e214      	b.n	801150a <f_lseek+0x580>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80110e6:	683a      	ldr	r2, [r7, #0]
 80110e8:	429a      	cmp	r2, r3
 80110ea:	d903      	bls.n	80110f4 <f_lseek+0x16a>
				ofs = fp->fsize;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80110f2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	683a      	ldr	r2, [r7, #0]
 80110f8:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			if (ofs) {
 80110fc:	683b      	ldr	r3, [r7, #0]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	f000 8203 	beq.w	801150a <f_lseek+0x580>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	3b01      	subs	r3, #1
 8011108:	4619      	mov	r1, r3
 801110a:	6878      	ldr	r0, [r7, #4]
 801110c:	f7fd fdef 	bl	800ecee <clmt_clust>
 8011110:	4602      	mov	r2, r0
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011124:	4619      	mov	r1, r3
 8011126:	4610      	mov	r0, r2
 8011128:	f7fd fb02 	bl	800e730 <clust2sect>
 801112c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 801112e:	69bb      	ldr	r3, [r7, #24]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d10c      	bne.n	801114e <f_lseek+0x1c4>
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2202      	movs	r2, #2
 8011138:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011142:	2102      	movs	r1, #2
 8011144:	4618      	mov	r0, r3
 8011146:	f7fd f840 	bl	800e1ca <unlock_fs>
 801114a:	2302      	movs	r3, #2
 801114c:	e1e8      	b.n	8011520 <f_lseek+0x596>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	3b01      	subs	r3, #1
 8011152:	0a5b      	lsrs	r3, r3, #9
 8011154:	687a      	ldr	r2, [r7, #4]
 8011156:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 801115a:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 801115e:	3a01      	subs	r2, #1
 8011160:	4013      	ands	r3, r2
 8011162:	69ba      	ldr	r2, [r7, #24]
 8011164:	4413      	add	r3, r2
 8011166:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 801116e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011172:	2b00      	cmp	r3, #0
 8011174:	f000 81c9 	beq.w	801150a <f_lseek+0x580>
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 801117e:	69ba      	ldr	r2, [r7, #24]
 8011180:	429a      	cmp	r2, r3
 8011182:	f000 81c2 	beq.w	801150a <f_lseek+0x580>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 801118c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011190:	2b00      	cmp	r3, #0
 8011192:	d024      	beq.n	80111de <f_lseek+0x254>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801119a:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 801119e:	6879      	ldr	r1, [r7, #4]
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80111a6:	2301      	movs	r3, #1
 80111a8:	f7fc ff4a 	bl	800e040 <disk_write>
 80111ac:	4603      	mov	r3, r0
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d00c      	beq.n	80111cc <f_lseek+0x242>
							ABORT(fp->fs, FR_DISK_ERR);
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2201      	movs	r2, #1
 80111b6:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80111c0:	2101      	movs	r1, #1
 80111c2:	4618      	mov	r0, r3
 80111c4:	f7fd f801 	bl	800e1ca <unlock_fs>
 80111c8:	2301      	movs	r3, #1
 80111ca:	e1a9      	b.n	8011520 <f_lseek+0x596>
						fp->flag &= ~FA__DIRTY;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80111d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80111d6:	b2da      	uxtb	r2, r3
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80111e4:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80111e8:	6879      	ldr	r1, [r7, #4]
 80111ea:	2301      	movs	r3, #1
 80111ec:	69ba      	ldr	r2, [r7, #24]
 80111ee:	f7fc ff07 	bl	800e000 <disk_read>
 80111f2:	4603      	mov	r3, r0
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d00c      	beq.n	8011212 <f_lseek+0x288>
						ABORT(fp->fs, FR_DISK_ERR);
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2201      	movs	r2, #1
 80111fc:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011206:	2101      	movs	r1, #1
 8011208:	4618      	mov	r0, r3
 801120a:	f7fc ffde 	bl	800e1ca <unlock_fs>
 801120e:	2301      	movs	r3, #1
 8011210:	e186      	b.n	8011520 <f_lseek+0x596>
#endif
					fp->dsect = dsc;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	69ba      	ldr	r2, [r7, #24]
 8011216:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
 801121a:	e176      	b.n	801150a <f_lseek+0x580>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8011222:	683a      	ldr	r2, [r7, #0]
 8011224:	429a      	cmp	r2, r3
 8011226:	d90a      	bls.n	801123e <f_lseek+0x2b4>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 801122e:	f003 0302 	and.w	r3, r3, #2
 8011232:	2b00      	cmp	r3, #0
 8011234:	d103      	bne.n	801123e <f_lseek+0x2b4>
#endif
			) ofs = fp->fsize;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 801123c:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8011244:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011246:	2300      	movs	r3, #0
 8011248:	637b      	str	r3, [r7, #52]	@ 0x34
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801124e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
		if (ofs) {
 8011252:	683b      	ldr	r3, [r7, #0]
 8011254:	2b00      	cmp	r3, #0
 8011256:	f000 80ea 	beq.w	801142e <f_lseek+0x4a4>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011260:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8011264:	025b      	lsls	r3, r3, #9
 8011266:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011268:	6a3b      	ldr	r3, [r7, #32]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d01e      	beq.n	80112ac <f_lseek+0x322>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801126e:	683b      	ldr	r3, [r7, #0]
 8011270:	1e5a      	subs	r2, r3, #1
 8011272:	69fb      	ldr	r3, [r7, #28]
 8011274:	fbb2 f2f3 	udiv	r2, r2, r3
 8011278:	6a3b      	ldr	r3, [r7, #32]
 801127a:	1e59      	subs	r1, r3, #1
 801127c:	69fb      	ldr	r3, [r7, #28]
 801127e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011282:	429a      	cmp	r2, r3
 8011284:	d312      	bcc.n	80112ac <f_lseek+0x322>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8011286:	6a3b      	ldr	r3, [r7, #32]
 8011288:	1e5a      	subs	r2, r3, #1
 801128a:	69fb      	ldr	r3, [r7, #28]
 801128c:	425b      	negs	r3, r3
 801128e:	401a      	ands	r2, r3
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
				ofs -= fp->fptr;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 801129c:	683a      	ldr	r2, [r7, #0]
 801129e:	1ad3      	subs	r3, r2, r3
 80112a0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80112a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80112aa:	e037      	b.n	801131c <f_lseek+0x392>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80112b2:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80112b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d12c      	bne.n	8011314 <f_lseek+0x38a>
					clst = create_chain(fp->fs, 0);
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80112c0:	2100      	movs	r1, #0
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7fd fc76 	bl	800ebb4 <create_chain>
 80112c8:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80112ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112cc:	2b01      	cmp	r3, #1
 80112ce:	d10c      	bne.n	80112ea <f_lseek+0x360>
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2202      	movs	r2, #2
 80112d4:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80112de:	2102      	movs	r1, #2
 80112e0:	4618      	mov	r0, r3
 80112e2:	f7fc ff72 	bl	800e1ca <unlock_fs>
 80112e6:	2302      	movs	r3, #2
 80112e8:	e11a      	b.n	8011520 <f_lseek+0x596>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80112ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112f0:	d10c      	bne.n	801130c <f_lseek+0x382>
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	2201      	movs	r2, #1
 80112f6:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011300:	2101      	movs	r1, #1
 8011302:	4618      	mov	r0, r3
 8011304:	f7fc ff61 	bl	800e1ca <unlock_fs>
 8011308:	2301      	movs	r3, #1
 801130a:	e109      	b.n	8011520 <f_lseek+0x596>
					fp->sclust = clst;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011310:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
				}
#endif
				fp->clust = clst;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011318:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
			}
			if (clst != 0) {
 801131c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801131e:	2b00      	cmp	r3, #0
 8011320:	f000 8085 	beq.w	801142e <f_lseek+0x4a4>
				while (ofs > bcs) {						/* Cluster following loop */
 8011324:	e055      	b.n	80113d2 <f_lseek+0x448>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 801132c:	f003 0302 	and.w	r3, r3, #2
 8011330:	2b00      	cmp	r3, #0
 8011332:	d00d      	beq.n	8011350 <f_lseek+0x3c6>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801133a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801133c:	4618      	mov	r0, r3
 801133e:	f7fd fc39 	bl	800ebb4 <create_chain>
 8011342:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8011344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011346:	2b00      	cmp	r3, #0
 8011348:	d10a      	bne.n	8011360 <f_lseek+0x3d6>
							ofs = bcs; break;
 801134a:	69fb      	ldr	r3, [r7, #28]
 801134c:	603b      	str	r3, [r7, #0]
 801134e:	e044      	b.n	80113da <f_lseek+0x450>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011356:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011358:	4618      	mov	r0, r3
 801135a:	f7fd fa0a 	bl	800e772 <get_fat>
 801135e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8011360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011366:	d10c      	bne.n	8011382 <f_lseek+0x3f8>
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	2201      	movs	r2, #1
 801136c:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011376:	2101      	movs	r1, #1
 8011378:	4618      	mov	r0, r3
 801137a:	f7fc ff26 	bl	800e1ca <unlock_fs>
 801137e:	2301      	movs	r3, #1
 8011380:	e0ce      	b.n	8011520 <f_lseek+0x596>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8011382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011384:	2b01      	cmp	r3, #1
 8011386:	d907      	bls.n	8011398 <f_lseek+0x40e>
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801138e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8011392:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011394:	429a      	cmp	r2, r3
 8011396:	d30c      	bcc.n	80113b2 <f_lseek+0x428>
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	2202      	movs	r2, #2
 801139c:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80113a6:	2102      	movs	r1, #2
 80113a8:	4618      	mov	r0, r3
 80113aa:	f7fc ff0e 	bl	800e1ca <unlock_fs>
 80113ae:	2302      	movs	r3, #2
 80113b0:	e0b6      	b.n	8011520 <f_lseek+0x596>
					fp->clust = clst;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80113b6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
					fp->fptr += bcs;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80113c0:	69fb      	ldr	r3, [r7, #28]
 80113c2:	441a      	add	r2, r3
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
					ofs -= bcs;
 80113ca:	683a      	ldr	r2, [r7, #0]
 80113cc:	69fb      	ldr	r3, [r7, #28]
 80113ce:	1ad3      	subs	r3, r2, r3
 80113d0:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 80113d2:	683a      	ldr	r2, [r7, #0]
 80113d4:	69fb      	ldr	r3, [r7, #28]
 80113d6:	429a      	cmp	r2, r3
 80113d8:	d8a5      	bhi.n	8011326 <f_lseek+0x39c>
				}
				fp->fptr += ofs;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80113e0:	683b      	ldr	r3, [r7, #0]
 80113e2:	441a      	add	r2, r3
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
				if (ofs % SS(fp->fs)) {
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d01c      	beq.n	801142e <f_lseek+0x4a4>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80113fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80113fc:	4618      	mov	r0, r3
 80113fe:	f7fd f997 	bl	800e730 <clust2sect>
 8011402:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8011404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011406:	2b00      	cmp	r3, #0
 8011408:	d10c      	bne.n	8011424 <f_lseek+0x49a>
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	2202      	movs	r2, #2
 801140e:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011418:	2102      	movs	r1, #2
 801141a:	4618      	mov	r0, r3
 801141c:	f7fc fed5 	bl	800e1ca <unlock_fs>
 8011420:	2302      	movs	r3, #2
 8011422:	e07d      	b.n	8011520 <f_lseek+0x596>
					nsect += ofs / SS(fp->fs);
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	0a5b      	lsrs	r3, r3, #9
 8011428:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801142a:	4413      	add	r3, r2
 801142c:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8011434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011438:	2b00      	cmp	r3, #0
 801143a:	d04f      	beq.n	80114dc <f_lseek+0x552>
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8011442:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011444:	429a      	cmp	r2, r3
 8011446:	d049      	beq.n	80114dc <f_lseek+0x552>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 801144e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011452:	2b00      	cmp	r3, #0
 8011454:	d024      	beq.n	80114a0 <f_lseek+0x516>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801145c:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8011460:	6879      	ldr	r1, [r7, #4]
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8011468:	2301      	movs	r3, #1
 801146a:	f7fc fde9 	bl	800e040 <disk_write>
 801146e:	4603      	mov	r3, r0
 8011470:	2b00      	cmp	r3, #0
 8011472:	d00c      	beq.n	801148e <f_lseek+0x504>
					ABORT(fp->fs, FR_DISK_ERR);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2201      	movs	r2, #1
 8011478:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011482:	2101      	movs	r1, #1
 8011484:	4618      	mov	r0, r3
 8011486:	f7fc fea0 	bl	800e1ca <unlock_fs>
 801148a:	2301      	movs	r3, #1
 801148c:	e048      	b.n	8011520 <f_lseek+0x596>
				fp->flag &= ~FA__DIRTY;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011494:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011498:	b2da      	uxtb	r2, r3
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80114a6:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80114aa:	6879      	ldr	r1, [r7, #4]
 80114ac:	2301      	movs	r3, #1
 80114ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80114b0:	f7fc fda6 	bl	800e000 <disk_read>
 80114b4:	4603      	mov	r3, r0
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d00c      	beq.n	80114d4 <f_lseek+0x54a>
				ABORT(fp->fs, FR_DISK_ERR);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2201      	movs	r2, #1
 80114be:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80114c8:	2101      	movs	r1, #1
 80114ca:	4618      	mov	r0, r3
 80114cc:	f7fc fe7d 	bl	800e1ca <unlock_fs>
 80114d0:	2301      	movs	r3, #1
 80114d2:	e025      	b.n	8011520 <f_lseek+0x596>
#endif
			fp->dsect = nsect;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80114d8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80114e8:	429a      	cmp	r2, r3
 80114ea:	d90e      	bls.n	801150a <f_lseek+0x580>
			fp->fsize = fp->fptr;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
			fp->flag |= FA__WRITTEN;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80114fe:	f043 0320 	orr.w	r3, r3, #32
 8011502:	b2da      	uxtb	r2, r3
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011510:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8011514:	4611      	mov	r1, r2
 8011516:	4618      	mov	r0, r3
 8011518:	f7fc fe57 	bl	800e1ca <unlock_fs>
 801151c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8011520:	4618      	mov	r0, r3
 8011522:	3740      	adds	r7, #64	@ 0x40
 8011524:	46bd      	mov	sp, r7
 8011526:	bd80      	pop	{r7, pc}

08011528 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b084      	sub	sp, #16
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
 8011530:	460b      	mov	r3, r1
 8011532:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8011534:	78fb      	ldrb	r3, [r7, #3]
 8011536:	2b0a      	cmp	r3, #10
 8011538:	d103      	bne.n	8011542 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801153a:	210d      	movs	r1, #13
 801153c:	6878      	ldr	r0, [r7, #4]
 801153e:	f7ff fff3 	bl	8011528 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	685b      	ldr	r3, [r3, #4]
 8011546:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	2b00      	cmp	r3, #0
 801154c:	db25      	blt.n	801159a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	1c5a      	adds	r2, r3, #1
 8011552:	60fa      	str	r2, [r7, #12]
 8011554:	687a      	ldr	r2, [r7, #4]
 8011556:	4413      	add	r3, r2
 8011558:	78fa      	ldrb	r2, [r7, #3]
 801155a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	2b3c      	cmp	r3, #60	@ 0x3c
 8011560:	dd12      	ble.n	8011588 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	6818      	ldr	r0, [r3, #0]
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	f103 010c 	add.w	r1, r3, #12
 801156c:	68fa      	ldr	r2, [r7, #12]
 801156e:	f107 0308 	add.w	r3, r7, #8
 8011572:	f7ff fa4a 	bl	8010a0a <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8011576:	68ba      	ldr	r2, [r7, #8]
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	429a      	cmp	r2, r3
 801157c:	d101      	bne.n	8011582 <putc_bfd+0x5a>
 801157e:	2300      	movs	r3, #0
 8011580:	e001      	b.n	8011586 <putc_bfd+0x5e>
 8011582:	f04f 33ff 	mov.w	r3, #4294967295
 8011586:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	68fa      	ldr	r2, [r7, #12]
 801158c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	689b      	ldr	r3, [r3, #8]
 8011592:	1c5a      	adds	r2, r3, #1
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	609a      	str	r2, [r3, #8]
 8011598:	e000      	b.n	801159c <putc_bfd+0x74>
	if (i < 0) return;
 801159a:	bf00      	nop
}
 801159c:	3710      	adds	r7, #16
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}

080115a2 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80115a2:	b590      	push	{r4, r7, lr}
 80115a4:	b097      	sub	sp, #92	@ 0x5c
 80115a6:	af00      	add	r7, sp, #0
 80115a8:	6078      	str	r0, [r7, #4]
 80115aa:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 80115ac:	683b      	ldr	r3, [r7, #0]
 80115ae:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 80115b0:	2300      	movs	r3, #0
 80115b2:	613b      	str	r3, [r7, #16]
 80115b4:	693b      	ldr	r3, [r7, #16]
 80115b6:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 80115b8:	e009      	b.n	80115ce <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	1c5a      	adds	r2, r3, #1
 80115be:	607a      	str	r2, [r7, #4]
 80115c0:	781a      	ldrb	r2, [r3, #0]
 80115c2:	f107 030c 	add.w	r3, r7, #12
 80115c6:	4611      	mov	r1, r2
 80115c8:	4618      	mov	r0, r3
 80115ca:	f7ff ffad 	bl	8011528 <putc_bfd>
	while (*str)			/* Put the string */
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	781b      	ldrb	r3, [r3, #0]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d1f1      	bne.n	80115ba <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 80115d6:	693b      	ldr	r3, [r7, #16]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	db15      	blt.n	8011608 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 80115dc:	68f8      	ldr	r0, [r7, #12]
 80115de:	693b      	ldr	r3, [r7, #16]
 80115e0:	461c      	mov	r4, r3
 80115e2:	f107 0208 	add.w	r2, r7, #8
 80115e6:	f107 030c 	add.w	r3, r7, #12
 80115ea:	f103 010c 	add.w	r1, r3, #12
 80115ee:	4613      	mov	r3, r2
 80115f0:	4622      	mov	r2, r4
 80115f2:	f7ff fa0a 	bl	8010a0a <f_write>
 80115f6:	4603      	mov	r3, r0
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d105      	bne.n	8011608 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 80115fc:	693b      	ldr	r3, [r7, #16]
 80115fe:	68ba      	ldr	r2, [r7, #8]
 8011600:	4293      	cmp	r3, r2
 8011602:	d101      	bne.n	8011608 <f_puts+0x66>
 8011604:	697b      	ldr	r3, [r7, #20]
 8011606:	e001      	b.n	801160c <f_puts+0x6a>
	return EOF;
 8011608:	f04f 33ff 	mov.w	r3, #4294967295
}
 801160c:	4618      	mov	r0, r3
 801160e:	375c      	adds	r7, #92	@ 0x5c
 8011610:	46bd      	mov	sp, r7
 8011612:	bd90      	pop	{r4, r7, pc}

08011614 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011614:	b480      	push	{r7}
 8011616:	b087      	sub	sp, #28
 8011618:	af00      	add	r7, sp, #0
 801161a:	60f8      	str	r0, [r7, #12]
 801161c:	60b9      	str	r1, [r7, #8]
 801161e:	4613      	mov	r3, r2
 8011620:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011622:	2301      	movs	r3, #1
 8011624:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011626:	2300      	movs	r3, #0
 8011628:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 801162a:	4b1e      	ldr	r3, [pc, #120]	@ (80116a4 <FATFS_LinkDriverEx+0x90>)
 801162c:	7a5b      	ldrb	r3, [r3, #9]
 801162e:	b2db      	uxtb	r3, r3
 8011630:	2b01      	cmp	r3, #1
 8011632:	d831      	bhi.n	8011698 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011634:	4b1b      	ldr	r3, [pc, #108]	@ (80116a4 <FATFS_LinkDriverEx+0x90>)
 8011636:	7a5b      	ldrb	r3, [r3, #9]
 8011638:	b2db      	uxtb	r3, r3
 801163a:	461a      	mov	r2, r3
 801163c:	4b19      	ldr	r3, [pc, #100]	@ (80116a4 <FATFS_LinkDriverEx+0x90>)
 801163e:	2100      	movs	r1, #0
 8011640:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8011642:	4b18      	ldr	r3, [pc, #96]	@ (80116a4 <FATFS_LinkDriverEx+0x90>)
 8011644:	7a5b      	ldrb	r3, [r3, #9]
 8011646:	b2db      	uxtb	r3, r3
 8011648:	4a16      	ldr	r2, [pc, #88]	@ (80116a4 <FATFS_LinkDriverEx+0x90>)
 801164a:	009b      	lsls	r3, r3, #2
 801164c:	4413      	add	r3, r2
 801164e:	68fa      	ldr	r2, [r7, #12]
 8011650:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8011652:	4b14      	ldr	r3, [pc, #80]	@ (80116a4 <FATFS_LinkDriverEx+0x90>)
 8011654:	7a5b      	ldrb	r3, [r3, #9]
 8011656:	b2db      	uxtb	r3, r3
 8011658:	461a      	mov	r2, r3
 801165a:	4b12      	ldr	r3, [pc, #72]	@ (80116a4 <FATFS_LinkDriverEx+0x90>)
 801165c:	4413      	add	r3, r2
 801165e:	79fa      	ldrb	r2, [r7, #7]
 8011660:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011662:	4b10      	ldr	r3, [pc, #64]	@ (80116a4 <FATFS_LinkDriverEx+0x90>)
 8011664:	7a5b      	ldrb	r3, [r3, #9]
 8011666:	b2db      	uxtb	r3, r3
 8011668:	1c5a      	adds	r2, r3, #1
 801166a:	b2d1      	uxtb	r1, r2
 801166c:	4a0d      	ldr	r2, [pc, #52]	@ (80116a4 <FATFS_LinkDriverEx+0x90>)
 801166e:	7251      	strb	r1, [r2, #9]
 8011670:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011672:	7dbb      	ldrb	r3, [r7, #22]
 8011674:	3330      	adds	r3, #48	@ 0x30
 8011676:	b2da      	uxtb	r2, r3
 8011678:	68bb      	ldr	r3, [r7, #8]
 801167a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	3301      	adds	r3, #1
 8011680:	223a      	movs	r2, #58	@ 0x3a
 8011682:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011684:	68bb      	ldr	r3, [r7, #8]
 8011686:	3302      	adds	r3, #2
 8011688:	222f      	movs	r2, #47	@ 0x2f
 801168a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801168c:	68bb      	ldr	r3, [r7, #8]
 801168e:	3303      	adds	r3, #3
 8011690:	2200      	movs	r2, #0
 8011692:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011694:	2300      	movs	r3, #0
 8011696:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8011698:	7dfb      	ldrb	r3, [r7, #23]
}
 801169a:	4618      	mov	r0, r3
 801169c:	371c      	adds	r7, #28
 801169e:	46bd      	mov	sp, r7
 80116a0:	bc80      	pop	{r7}
 80116a2:	4770      	bx	lr
 80116a4:	20001330 	.word	0x20001330

080116a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b082      	sub	sp, #8
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
 80116b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80116b2:	2200      	movs	r2, #0
 80116b4:	6839      	ldr	r1, [r7, #0]
 80116b6:	6878      	ldr	r0, [r7, #4]
 80116b8:	f7ff ffac 	bl	8011614 <FATFS_LinkDriverEx>
 80116bc:	4603      	mov	r3, r0
}
 80116be:	4618      	mov	r0, r3
 80116c0:	3708      	adds	r7, #8
 80116c2:	46bd      	mov	sp, r7
 80116c4:	bd80      	pop	{r7, pc}
	...

080116c8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b082      	sub	sp, #8
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	4603      	mov	r3, r0
 80116d0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80116d2:	4b0b      	ldr	r3, [pc, #44]	@ (8011700 <SD_initialize+0x38>)
 80116d4:	2201      	movs	r2, #1
 80116d6:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 80116d8:	f7fc fbd4 	bl	800de84 <BSP_SD_Init>
 80116dc:	4603      	mov	r3, r0
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d107      	bne.n	80116f2 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80116e2:	4b07      	ldr	r3, [pc, #28]	@ (8011700 <SD_initialize+0x38>)
 80116e4:	781b      	ldrb	r3, [r3, #0]
 80116e6:	b2db      	uxtb	r3, r3
 80116e8:	f023 0301 	bic.w	r3, r3, #1
 80116ec:	b2da      	uxtb	r2, r3
 80116ee:	4b04      	ldr	r3, [pc, #16]	@ (8011700 <SD_initialize+0x38>)
 80116f0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80116f2:	4b03      	ldr	r3, [pc, #12]	@ (8011700 <SD_initialize+0x38>)
 80116f4:	781b      	ldrb	r3, [r3, #0]
 80116f6:	b2db      	uxtb	r3, r3
}
 80116f8:	4618      	mov	r0, r3
 80116fa:	3708      	adds	r7, #8
 80116fc:	46bd      	mov	sp, r7
 80116fe:	bd80      	pop	{r7, pc}
 8011700:	2000006d 	.word	0x2000006d

08011704 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b082      	sub	sp, #8
 8011708:	af00      	add	r7, sp, #0
 801170a:	4603      	mov	r3, r0
 801170c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801170e:	4b0b      	ldr	r3, [pc, #44]	@ (801173c <SD_status+0x38>)
 8011710:	2201      	movs	r2, #1
 8011712:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011714:	f7fc fc0a 	bl	800df2c <BSP_SD_GetCardState>
 8011718:	4603      	mov	r3, r0
 801171a:	2b00      	cmp	r3, #0
 801171c:	d107      	bne.n	801172e <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801171e:	4b07      	ldr	r3, [pc, #28]	@ (801173c <SD_status+0x38>)
 8011720:	781b      	ldrb	r3, [r3, #0]
 8011722:	b2db      	uxtb	r3, r3
 8011724:	f023 0301 	bic.w	r3, r3, #1
 8011728:	b2da      	uxtb	r2, r3
 801172a:	4b04      	ldr	r3, [pc, #16]	@ (801173c <SD_status+0x38>)
 801172c:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 801172e:	4b03      	ldr	r3, [pc, #12]	@ (801173c <SD_status+0x38>)
 8011730:	781b      	ldrb	r3, [r3, #0]
 8011732:	b2db      	uxtb	r3, r3
}
 8011734:	4618      	mov	r0, r3
 8011736:	3708      	adds	r7, #8
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}
 801173c:	2000006d 	.word	0x2000006d

08011740 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b086      	sub	sp, #24
 8011744:	af00      	add	r7, sp, #0
 8011746:	60b9      	str	r1, [r7, #8]
 8011748:	607a      	str	r2, [r7, #4]
 801174a:	603b      	str	r3, [r7, #0]
 801174c:	4603      	mov	r3, r0
 801174e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011750:	2301      	movs	r3, #1
 8011752:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8011754:	4b0f      	ldr	r3, [pc, #60]	@ (8011794 <SD_read+0x54>)
 8011756:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8011758:	4b0f      	ldr	r3, [pc, #60]	@ (8011798 <SD_read+0x58>)
 801175a:	683a      	ldr	r2, [r7, #0]
 801175c:	6879      	ldr	r1, [r7, #4]
 801175e:	68b8      	ldr	r0, [r7, #8]
 8011760:	f7fc fba8 	bl	800deb4 <BSP_SD_ReadBlocks>
 8011764:	4603      	mov	r3, r0
 8011766:	2b00      	cmp	r3, #0
 8011768:	d10e      	bne.n	8011788 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 801176a:	e006      	b.n	801177a <SD_read+0x3a>
    {
      if (timeout-- == 0)
 801176c:	693b      	ldr	r3, [r7, #16]
 801176e:	1e5a      	subs	r2, r3, #1
 8011770:	613a      	str	r2, [r7, #16]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d101      	bne.n	801177a <SD_read+0x3a>
      {
        return RES_ERROR;
 8011776:	2301      	movs	r3, #1
 8011778:	e007      	b.n	801178a <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 801177a:	f7fc fbd7 	bl	800df2c <BSP_SD_GetCardState>
 801177e:	4603      	mov	r3, r0
 8011780:	2b00      	cmp	r3, #0
 8011782:	d1f3      	bne.n	801176c <SD_read+0x2c>
      }
    }
    res = RES_OK;
 8011784:	2300      	movs	r3, #0
 8011786:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8011788:	7dfb      	ldrb	r3, [r7, #23]
}
 801178a:	4618      	mov	r0, r3
 801178c:	3718      	adds	r7, #24
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}
 8011792:	bf00      	nop
 8011794:	000186a0 	.word	0x000186a0
 8011798:	05f5e100 	.word	0x05f5e100

0801179c <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b086      	sub	sp, #24
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	60b9      	str	r1, [r7, #8]
 80117a4:	607a      	str	r2, [r7, #4]
 80117a6:	603b      	str	r3, [r7, #0]
 80117a8:	4603      	mov	r3, r0
 80117aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80117ac:	2301      	movs	r3, #1
 80117ae:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 80117b0:	4b0f      	ldr	r3, [pc, #60]	@ (80117f0 <SD_write+0x54>)
 80117b2:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 80117b4:	4b0f      	ldr	r3, [pc, #60]	@ (80117f4 <SD_write+0x58>)
 80117b6:	683a      	ldr	r2, [r7, #0]
 80117b8:	6879      	ldr	r1, [r7, #4]
 80117ba:	68b8      	ldr	r0, [r7, #8]
 80117bc:	f7fc fb98 	bl	800def0 <BSP_SD_WriteBlocks>
 80117c0:	4603      	mov	r3, r0
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d10e      	bne.n	80117e4 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 80117c6:	e006      	b.n	80117d6 <SD_write+0x3a>
    {
      if (timeout-- == 0)
 80117c8:	693b      	ldr	r3, [r7, #16]
 80117ca:	1e5a      	subs	r2, r3, #1
 80117cc:	613a      	str	r2, [r7, #16]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d101      	bne.n	80117d6 <SD_write+0x3a>
      {
        return RES_ERROR;
 80117d2:	2301      	movs	r3, #1
 80117d4:	e007      	b.n	80117e6 <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 80117d6:	f7fc fba9 	bl	800df2c <BSP_SD_GetCardState>
 80117da:	4603      	mov	r3, r0
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d1f3      	bne.n	80117c8 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 80117e0:	2300      	movs	r3, #0
 80117e2:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 80117e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80117e6:	4618      	mov	r0, r3
 80117e8:	3718      	adds	r7, #24
 80117ea:	46bd      	mov	sp, r7
 80117ec:	bd80      	pop	{r7, pc}
 80117ee:	bf00      	nop
 80117f0:	000186a0 	.word	0x000186a0
 80117f4:	05f5e100 	.word	0x05f5e100

080117f8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b08c      	sub	sp, #48	@ 0x30
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	4603      	mov	r3, r0
 8011800:	603a      	str	r2, [r7, #0]
 8011802:	71fb      	strb	r3, [r7, #7]
 8011804:	460b      	mov	r3, r1
 8011806:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011808:	2301      	movs	r3, #1
 801180a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801180e:	4b24      	ldr	r3, [pc, #144]	@ (80118a0 <SD_ioctl+0xa8>)
 8011810:	781b      	ldrb	r3, [r3, #0]
 8011812:	b2db      	uxtb	r3, r3
 8011814:	f003 0301 	and.w	r3, r3, #1
 8011818:	2b00      	cmp	r3, #0
 801181a:	d001      	beq.n	8011820 <SD_ioctl+0x28>
 801181c:	2303      	movs	r3, #3
 801181e:	e03b      	b.n	8011898 <SD_ioctl+0xa0>
  
  switch (cmd)
 8011820:	79bb      	ldrb	r3, [r7, #6]
 8011822:	2b03      	cmp	r3, #3
 8011824:	d833      	bhi.n	801188e <SD_ioctl+0x96>
 8011826:	a201      	add	r2, pc, #4	@ (adr r2, 801182c <SD_ioctl+0x34>)
 8011828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801182c:	0801183d 	.word	0x0801183d
 8011830:	08011845 	.word	0x08011845
 8011834:	0801185d 	.word	0x0801185d
 8011838:	08011877 	.word	0x08011877
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801183c:	2300      	movs	r3, #0
 801183e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011842:	e027      	b.n	8011894 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011844:	f107 030c 	add.w	r3, r7, #12
 8011848:	4618      	mov	r0, r3
 801184a:	f7fc fb7f 	bl	800df4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801184e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011854:	2300      	movs	r3, #0
 8011856:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801185a:	e01b      	b.n	8011894 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801185c:	f107 030c 	add.w	r3, r7, #12
 8011860:	4618      	mov	r0, r3
 8011862:	f7fc fb73 	bl	800df4c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011868:	b29a      	uxth	r2, r3
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801186e:	2300      	movs	r3, #0
 8011870:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011874:	e00e      	b.n	8011894 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011876:	f107 030c 	add.w	r3, r7, #12
 801187a:	4618      	mov	r0, r3
 801187c:	f7fc fb66 	bl	800df4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8011880:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011882:	683b      	ldr	r3, [r7, #0]
 8011884:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011886:	2300      	movs	r3, #0
 8011888:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801188c:	e002      	b.n	8011894 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 801188e:	2304      	movs	r3, #4
 8011890:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }
  
  return res;
 8011894:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011898:	4618      	mov	r0, r3
 801189a:	3730      	adds	r7, #48	@ 0x30
 801189c:	46bd      	mov	sp, r7
 801189e:	bd80      	pop	{r7, pc}
 80118a0:	2000006d 	.word	0x2000006d

080118a4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 80118a4:	b480      	push	{r7}
 80118a6:	b085      	sub	sp, #20
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	4603      	mov	r3, r0
 80118ac:	6039      	str	r1, [r7, #0]
 80118ae:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80118b0:	88fb      	ldrh	r3, [r7, #6]
 80118b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80118b4:	d802      	bhi.n	80118bc <ff_convert+0x18>
		c = chr;
 80118b6:	88fb      	ldrh	r3, [r7, #6]
 80118b8:	81fb      	strh	r3, [r7, #14]
 80118ba:	e025      	b.n	8011908 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 80118bc:	683b      	ldr	r3, [r7, #0]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d00b      	beq.n	80118da <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80118c2:	88fb      	ldrh	r3, [r7, #6]
 80118c4:	2bff      	cmp	r3, #255	@ 0xff
 80118c6:	d805      	bhi.n	80118d4 <ff_convert+0x30>
 80118c8:	88fb      	ldrh	r3, [r7, #6]
 80118ca:	3b80      	subs	r3, #128	@ 0x80
 80118cc:	4a11      	ldr	r2, [pc, #68]	@ (8011914 <ff_convert+0x70>)
 80118ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118d2:	e000      	b.n	80118d6 <ff_convert+0x32>
 80118d4:	2300      	movs	r3, #0
 80118d6:	81fb      	strh	r3, [r7, #14]
 80118d8:	e016      	b.n	8011908 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 80118da:	2300      	movs	r3, #0
 80118dc:	81fb      	strh	r3, [r7, #14]
 80118de:	e009      	b.n	80118f4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80118e0:	89fb      	ldrh	r3, [r7, #14]
 80118e2:	4a0c      	ldr	r2, [pc, #48]	@ (8011914 <ff_convert+0x70>)
 80118e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118e8:	88fa      	ldrh	r2, [r7, #6]
 80118ea:	429a      	cmp	r2, r3
 80118ec:	d006      	beq.n	80118fc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80118ee:	89fb      	ldrh	r3, [r7, #14]
 80118f0:	3301      	adds	r3, #1
 80118f2:	81fb      	strh	r3, [r7, #14]
 80118f4:	89fb      	ldrh	r3, [r7, #14]
 80118f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80118f8:	d9f2      	bls.n	80118e0 <ff_convert+0x3c>
 80118fa:	e000      	b.n	80118fe <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80118fc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80118fe:	89fb      	ldrh	r3, [r7, #14]
 8011900:	3380      	adds	r3, #128	@ 0x80
 8011902:	b29b      	uxth	r3, r3
 8011904:	b2db      	uxtb	r3, r3
 8011906:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011908:	89fb      	ldrh	r3, [r7, #14]
}
 801190a:	4618      	mov	r0, r3
 801190c:	3714      	adds	r7, #20
 801190e:	46bd      	mov	sp, r7
 8011910:	bc80      	pop	{r7}
 8011912:	4770      	bx	lr
 8011914:	080153d0 	.word	0x080153d0

08011918 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8011918:	b480      	push	{r7}
 801191a:	b085      	sub	sp, #20
 801191c:	af00      	add	r7, sp, #0
 801191e:	4603      	mov	r3, r0
 8011920:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8011922:	2300      	movs	r3, #0
 8011924:	60fb      	str	r3, [r7, #12]
 8011926:	e002      	b.n	801192e <ff_wtoupper+0x16>
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	3301      	adds	r3, #1
 801192c:	60fb      	str	r3, [r7, #12]
 801192e:	4a0f      	ldr	r2, [pc, #60]	@ (801196c <ff_wtoupper+0x54>)
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d006      	beq.n	8011948 <ff_wtoupper+0x30>
 801193a:	4a0c      	ldr	r2, [pc, #48]	@ (801196c <ff_wtoupper+0x54>)
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011942:	88fa      	ldrh	r2, [r7, #6]
 8011944:	429a      	cmp	r2, r3
 8011946:	d1ef      	bne.n	8011928 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8011948:	4a08      	ldr	r2, [pc, #32]	@ (801196c <ff_wtoupper+0x54>)
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d004      	beq.n	801195e <ff_wtoupper+0x46>
 8011954:	4a06      	ldr	r2, [pc, #24]	@ (8011970 <ff_wtoupper+0x58>)
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801195c:	e000      	b.n	8011960 <ff_wtoupper+0x48>
 801195e:	88fb      	ldrh	r3, [r7, #6]
}
 8011960:	4618      	mov	r0, r3
 8011962:	3714      	adds	r7, #20
 8011964:	46bd      	mov	sp, r7
 8011966:	bc80      	pop	{r7}
 8011968:	4770      	bx	lr
 801196a:	bf00      	nop
 801196c:	080154d0 	.word	0x080154d0
 8011970:	080156b0 	.word	0x080156b0

08011974 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b086      	sub	sp, #24
 8011978:	af00      	add	r7, sp, #0
 801197a:	4603      	mov	r3, r0
 801197c:	6039      	str	r1, [r7, #0]
 801197e:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 8011980:	2300      	movs	r3, #0
 8011982:	60fb      	str	r3, [r7, #12]
 8011984:	2300      	movs	r3, #0
 8011986:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 8011988:	f107 030c 	add.w	r3, r7, #12
 801198c:	2101      	movs	r1, #1
 801198e:	4618      	mov	r0, r3
 8011990:	f000 f8cb 	bl	8011b2a <osSemaphoreCreate>
 8011994:	4602      	mov	r2, r0
 8011996:	683b      	ldr	r3, [r7, #0]
 8011998:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 801199a:	683b      	ldr	r3, [r7, #0]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	bf14      	ite	ne
 80119a2:	2301      	movne	r3, #1
 80119a4:	2300      	moveq	r3, #0
 80119a6:	b2db      	uxtb	r3, r3
 80119a8:	617b      	str	r3, [r7, #20]
  
  return ret;
 80119aa:	697b      	ldr	r3, [r7, #20]
}
 80119ac:	4618      	mov	r0, r3
 80119ae:	3718      	adds	r7, #24
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bd80      	pop	{r7, pc}

080119b4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b082      	sub	sp, #8
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 80119bc:	6878      	ldr	r0, [r7, #4]
 80119be:	f000 f96b 	bl	8011c98 <osSemaphoreDelete>
  return 1;
 80119c2:	2301      	movs	r3, #1
}
 80119c4:	4618      	mov	r0, r3
 80119c6:	3708      	adds	r7, #8
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}

080119cc <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b084      	sub	sp, #16
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80119d4:	2300      	movs	r3, #0
 80119d6:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80119d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80119dc:	6878      	ldr	r0, [r7, #4]
 80119de:	f000 f8d7 	bl	8011b90 <osSemaphoreWait>
 80119e2:	4603      	mov	r3, r0
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d101      	bne.n	80119ec <ff_req_grant+0x20>
  {
    ret = 1;
 80119e8:	2301      	movs	r3, #1
 80119ea:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80119ec:	68fb      	ldr	r3, [r7, #12]
}
 80119ee:	4618      	mov	r0, r3
 80119f0:	3710      	adds	r7, #16
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bd80      	pop	{r7, pc}

080119f6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80119f6:	b580      	push	{r7, lr}
 80119f8:	b082      	sub	sp, #8
 80119fa:	af00      	add	r7, sp, #0
 80119fc:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f000 f914 	bl	8011c2c <osSemaphoreRelease>
}
 8011a04:	bf00      	nop
 8011a06:	3708      	adds	r7, #8
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	bd80      	pop	{r7, pc}

08011a0c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011a0c:	b480      	push	{r7}
 8011a0e:	b085      	sub	sp, #20
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	4603      	mov	r3, r0
 8011a14:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011a16:	2300      	movs	r3, #0
 8011a18:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a1e:	2b84      	cmp	r3, #132	@ 0x84
 8011a20:	d005      	beq.n	8011a2e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011a22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	4413      	add	r3, r2
 8011a2a:	3303      	adds	r3, #3
 8011a2c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011a2e:	68fb      	ldr	r3, [r7, #12]
}
 8011a30:	4618      	mov	r0, r3
 8011a32:	3714      	adds	r7, #20
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bc80      	pop	{r7}
 8011a38:	4770      	bx	lr

08011a3a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011a3a:	b480      	push	{r7}
 8011a3c:	b083      	sub	sp, #12
 8011a3e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011a40:	f3ef 8305 	mrs	r3, IPSR
 8011a44:	607b      	str	r3, [r7, #4]
  return(result);
 8011a46:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	bf14      	ite	ne
 8011a4c:	2301      	movne	r3, #1
 8011a4e:	2300      	moveq	r3, #0
 8011a50:	b2db      	uxtb	r3, r3
}
 8011a52:	4618      	mov	r0, r3
 8011a54:	370c      	adds	r7, #12
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bc80      	pop	{r7}
 8011a5a:	4770      	bx	lr

08011a5c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011a60:	f001 fa06 	bl	8012e70 <vTaskStartScheduler>
  
  return osOK;
 8011a64:	2300      	movs	r3, #0
}
 8011a66:	4618      	mov	r0, r3
 8011a68:	bd80      	pop	{r7, pc}

08011a6a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011a6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a6c:	b089      	sub	sp, #36	@ 0x24
 8011a6e:	af04      	add	r7, sp, #16
 8011a70:	6078      	str	r0, [r7, #4]
 8011a72:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	695b      	ldr	r3, [r3, #20]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d020      	beq.n	8011abe <osThreadCreate+0x54>
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	699b      	ldr	r3, [r3, #24]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d01c      	beq.n	8011abe <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	685c      	ldr	r4, [r3, #4]
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	691e      	ldr	r6, [r3, #16]
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011a96:	4618      	mov	r0, r3
 8011a98:	f7ff ffb8 	bl	8011a0c <makeFreeRtosPriority>
 8011a9c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	695b      	ldr	r3, [r3, #20]
 8011aa2:	687a      	ldr	r2, [r7, #4]
 8011aa4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011aa6:	9202      	str	r2, [sp, #8]
 8011aa8:	9301      	str	r3, [sp, #4]
 8011aaa:	9100      	str	r1, [sp, #0]
 8011aac:	683b      	ldr	r3, [r7, #0]
 8011aae:	4632      	mov	r2, r6
 8011ab0:	4629      	mov	r1, r5
 8011ab2:	4620      	mov	r0, r4
 8011ab4:	f000 ff90 	bl	80129d8 <xTaskCreateStatic>
 8011ab8:	4603      	mov	r3, r0
 8011aba:	60fb      	str	r3, [r7, #12]
 8011abc:	e01c      	b.n	8011af8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	685c      	ldr	r4, [r3, #4]
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011aca:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f7ff ff9a 	bl	8011a0c <makeFreeRtosPriority>
 8011ad8:	4602      	mov	r2, r0
 8011ada:	f107 030c 	add.w	r3, r7, #12
 8011ade:	9301      	str	r3, [sp, #4]
 8011ae0:	9200      	str	r2, [sp, #0]
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	4632      	mov	r2, r6
 8011ae6:	4629      	mov	r1, r5
 8011ae8:	4620      	mov	r0, r4
 8011aea:	f000 ffd4 	bl	8012a96 <xTaskCreate>
 8011aee:	4603      	mov	r3, r0
 8011af0:	2b01      	cmp	r3, #1
 8011af2:	d001      	beq.n	8011af8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8011af4:	2300      	movs	r3, #0
 8011af6:	e000      	b.n	8011afa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011af8:	68fb      	ldr	r3, [r7, #12]
}
 8011afa:	4618      	mov	r0, r3
 8011afc:	3714      	adds	r7, #20
 8011afe:	46bd      	mov	sp, r7
 8011b00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011b02 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011b02:	b580      	push	{r7, lr}
 8011b04:	b084      	sub	sp, #16
 8011b06:	af00      	add	r7, sp, #0
 8011b08:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d001      	beq.n	8011b18 <osDelay+0x16>
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	e000      	b.n	8011b1a <osDelay+0x18>
 8011b18:	2301      	movs	r3, #1
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f001 f972 	bl	8012e04 <vTaskDelay>
  
  return osOK;
 8011b20:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011b22:	4618      	mov	r0, r3
 8011b24:	3710      	adds	r7, #16
 8011b26:	46bd      	mov	sp, r7
 8011b28:	bd80      	pop	{r7, pc}

08011b2a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8011b2a:	b580      	push	{r7, lr}
 8011b2c:	b086      	sub	sp, #24
 8011b2e:	af02      	add	r7, sp, #8
 8011b30:	6078      	str	r0, [r7, #4]
 8011b32:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	685b      	ldr	r3, [r3, #4]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d00f      	beq.n	8011b5c <osSemaphoreCreate+0x32>
    if (count == 1) {
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	2b01      	cmp	r3, #1
 8011b40:	d10a      	bne.n	8011b58 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	685b      	ldr	r3, [r3, #4]
 8011b46:	2203      	movs	r2, #3
 8011b48:	9200      	str	r2, [sp, #0]
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	2100      	movs	r1, #0
 8011b4e:	2001      	movs	r0, #1
 8011b50:	f000 f9ce 	bl	8011ef0 <xQueueGenericCreateStatic>
 8011b54:	4603      	mov	r3, r0
 8011b56:	e016      	b.n	8011b86 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8011b58:	2300      	movs	r3, #0
 8011b5a:	e014      	b.n	8011b86 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8011b5c:	683b      	ldr	r3, [r7, #0]
 8011b5e:	2b01      	cmp	r3, #1
 8011b60:	d110      	bne.n	8011b84 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8011b62:	2203      	movs	r2, #3
 8011b64:	2100      	movs	r1, #0
 8011b66:	2001      	movs	r0, #1
 8011b68:	f000 fa3e 	bl	8011fe8 <xQueueGenericCreate>
 8011b6c:	60f8      	str	r0, [r7, #12]
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d005      	beq.n	8011b80 <osSemaphoreCreate+0x56>
 8011b74:	2300      	movs	r3, #0
 8011b76:	2200      	movs	r2, #0
 8011b78:	2100      	movs	r1, #0
 8011b7a:	68f8      	ldr	r0, [r7, #12]
 8011b7c:	f000 fa92 	bl	80120a4 <xQueueGenericSend>
      return sema;
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	e000      	b.n	8011b86 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8011b84:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8011b86:	4618      	mov	r0, r3
 8011b88:	3710      	adds	r7, #16
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	bd80      	pop	{r7, pc}
	...

08011b90 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b084      	sub	sp, #16
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
 8011b98:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d101      	bne.n	8011ba8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8011ba4:	2380      	movs	r3, #128	@ 0x80
 8011ba6:	e03a      	b.n	8011c1e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8011ba8:	2300      	movs	r3, #0
 8011baa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011bac:	683b      	ldr	r3, [r7, #0]
 8011bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bb2:	d103      	bne.n	8011bbc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8011bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8011bb8:	60fb      	str	r3, [r7, #12]
 8011bba:	e009      	b.n	8011bd0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8011bbc:	683b      	ldr	r3, [r7, #0]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d006      	beq.n	8011bd0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011bc2:	683b      	ldr	r3, [r7, #0]
 8011bc4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d101      	bne.n	8011bd0 <osSemaphoreWait+0x40>
      ticks = 1;
 8011bcc:	2301      	movs	r3, #1
 8011bce:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011bd0:	f7ff ff33 	bl	8011a3a <inHandlerMode>
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d017      	beq.n	8011c0a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011bda:	f107 0308 	add.w	r3, r7, #8
 8011bde:	461a      	mov	r2, r3
 8011be0:	2100      	movs	r1, #0
 8011be2:	6878      	ldr	r0, [r7, #4]
 8011be4:	f000 fd00 	bl	80125e8 <xQueueReceiveFromISR>
 8011be8:	4603      	mov	r3, r0
 8011bea:	2b01      	cmp	r3, #1
 8011bec:	d001      	beq.n	8011bf2 <osSemaphoreWait+0x62>
      return osErrorOS;
 8011bee:	23ff      	movs	r3, #255	@ 0xff
 8011bf0:	e015      	b.n	8011c1e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011bf2:	68bb      	ldr	r3, [r7, #8]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d011      	beq.n	8011c1c <osSemaphoreWait+0x8c>
 8011bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8011c28 <osSemaphoreWait+0x98>)
 8011bfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011bfe:	601a      	str	r2, [r3, #0]
 8011c00:	f3bf 8f4f 	dsb	sy
 8011c04:	f3bf 8f6f 	isb	sy
 8011c08:	e008      	b.n	8011c1c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8011c0a:	68f9      	ldr	r1, [r7, #12]
 8011c0c:	6878      	ldr	r0, [r7, #4]
 8011c0e:	f000 fbdb 	bl	80123c8 <xQueueSemaphoreTake>
 8011c12:	4603      	mov	r3, r0
 8011c14:	2b01      	cmp	r3, #1
 8011c16:	d001      	beq.n	8011c1c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8011c18:	23ff      	movs	r3, #255	@ 0xff
 8011c1a:	e000      	b.n	8011c1e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8011c1c:	2300      	movs	r3, #0
}
 8011c1e:	4618      	mov	r0, r3
 8011c20:	3710      	adds	r7, #16
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}
 8011c26:	bf00      	nop
 8011c28:	e000ed04 	.word	0xe000ed04

08011c2c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b084      	sub	sp, #16
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011c34:	2300      	movs	r3, #0
 8011c36:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8011c3c:	f7ff fefd 	bl	8011a3a <inHandlerMode>
 8011c40:	4603      	mov	r3, r0
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d016      	beq.n	8011c74 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011c46:	f107 0308 	add.w	r3, r7, #8
 8011c4a:	4619      	mov	r1, r3
 8011c4c:	6878      	ldr	r0, [r7, #4]
 8011c4e:	f000 fb2b 	bl	80122a8 <xQueueGiveFromISR>
 8011c52:	4603      	mov	r3, r0
 8011c54:	2b01      	cmp	r3, #1
 8011c56:	d001      	beq.n	8011c5c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8011c58:	23ff      	movs	r3, #255	@ 0xff
 8011c5a:	e017      	b.n	8011c8c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d013      	beq.n	8011c8a <osSemaphoreRelease+0x5e>
 8011c62:	4b0c      	ldr	r3, [pc, #48]	@ (8011c94 <osSemaphoreRelease+0x68>)
 8011c64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011c68:	601a      	str	r2, [r3, #0]
 8011c6a:	f3bf 8f4f 	dsb	sy
 8011c6e:	f3bf 8f6f 	isb	sy
 8011c72:	e00a      	b.n	8011c8a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8011c74:	2300      	movs	r3, #0
 8011c76:	2200      	movs	r2, #0
 8011c78:	2100      	movs	r1, #0
 8011c7a:	6878      	ldr	r0, [r7, #4]
 8011c7c:	f000 fa12 	bl	80120a4 <xQueueGenericSend>
 8011c80:	4603      	mov	r3, r0
 8011c82:	2b01      	cmp	r3, #1
 8011c84:	d001      	beq.n	8011c8a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8011c86:	23ff      	movs	r3, #255	@ 0xff
 8011c88:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	3710      	adds	r7, #16
 8011c90:	46bd      	mov	sp, r7
 8011c92:	bd80      	pop	{r7, pc}
 8011c94:	e000ed04 	.word	0xe000ed04

08011c98 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b082      	sub	sp, #8
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8011ca0:	f7ff fecb 	bl	8011a3a <inHandlerMode>
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d001      	beq.n	8011cae <osSemaphoreDelete+0x16>
    return osErrorISR;
 8011caa:	2382      	movs	r3, #130	@ 0x82
 8011cac:	e003      	b.n	8011cb6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8011cae:	6878      	ldr	r0, [r7, #4]
 8011cb0:	f000 fd1c 	bl	80126ec <vQueueDelete>

  return osOK; 
 8011cb4:	2300      	movs	r3, #0
}
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	3708      	adds	r7, #8
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}

08011cbe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011cbe:	b480      	push	{r7}
 8011cc0:	b083      	sub	sp, #12
 8011cc2:	af00      	add	r7, sp, #0
 8011cc4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	f103 0208 	add.w	r2, r3, #8
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8011cd6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	f103 0208 	add.w	r2, r3, #8
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	f103 0208 	add.w	r2, r3, #8
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	2200      	movs	r2, #0
 8011cf0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011cf2:	bf00      	nop
 8011cf4:	370c      	adds	r7, #12
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bc80      	pop	{r7}
 8011cfa:	4770      	bx	lr

08011cfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011cfc:	b480      	push	{r7}
 8011cfe:	b083      	sub	sp, #12
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	2200      	movs	r2, #0
 8011d08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011d0a:	bf00      	nop
 8011d0c:	370c      	adds	r7, #12
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bc80      	pop	{r7}
 8011d12:	4770      	bx	lr

08011d14 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011d14:	b480      	push	{r7}
 8011d16:	b085      	sub	sp, #20
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
 8011d1c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	685b      	ldr	r3, [r3, #4]
 8011d22:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011d24:	683b      	ldr	r3, [r7, #0]
 8011d26:	68fa      	ldr	r2, [r7, #12]
 8011d28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	689a      	ldr	r2, [r3, #8]
 8011d2e:	683b      	ldr	r3, [r7, #0]
 8011d30:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	689b      	ldr	r3, [r3, #8]
 8011d36:	683a      	ldr	r2, [r7, #0]
 8011d38:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	683a      	ldr	r2, [r7, #0]
 8011d3e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8011d40:	683b      	ldr	r3, [r7, #0]
 8011d42:	687a      	ldr	r2, [r7, #4]
 8011d44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	1c5a      	adds	r2, r3, #1
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	601a      	str	r2, [r3, #0]
}
 8011d50:	bf00      	nop
 8011d52:	3714      	adds	r7, #20
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bc80      	pop	{r7}
 8011d58:	4770      	bx	lr

08011d5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011d5a:	b480      	push	{r7}
 8011d5c:	b085      	sub	sp, #20
 8011d5e:	af00      	add	r7, sp, #0
 8011d60:	6078      	str	r0, [r7, #4]
 8011d62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011d64:	683b      	ldr	r3, [r7, #0]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011d6a:	68bb      	ldr	r3, [r7, #8]
 8011d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d70:	d103      	bne.n	8011d7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	691b      	ldr	r3, [r3, #16]
 8011d76:	60fb      	str	r3, [r7, #12]
 8011d78:	e00c      	b.n	8011d94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	3308      	adds	r3, #8
 8011d7e:	60fb      	str	r3, [r7, #12]
 8011d80:	e002      	b.n	8011d88 <vListInsert+0x2e>
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	685b      	ldr	r3, [r3, #4]
 8011d86:	60fb      	str	r3, [r7, #12]
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	685b      	ldr	r3, [r3, #4]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	68ba      	ldr	r2, [r7, #8]
 8011d90:	429a      	cmp	r2, r3
 8011d92:	d2f6      	bcs.n	8011d82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	685a      	ldr	r2, [r3, #4]
 8011d98:	683b      	ldr	r3, [r7, #0]
 8011d9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	685b      	ldr	r3, [r3, #4]
 8011da0:	683a      	ldr	r2, [r7, #0]
 8011da2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011da4:	683b      	ldr	r3, [r7, #0]
 8011da6:	68fa      	ldr	r2, [r7, #12]
 8011da8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	683a      	ldr	r2, [r7, #0]
 8011dae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	687a      	ldr	r2, [r7, #4]
 8011db4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	1c5a      	adds	r2, r3, #1
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	601a      	str	r2, [r3, #0]
}
 8011dc0:	bf00      	nop
 8011dc2:	3714      	adds	r7, #20
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bc80      	pop	{r7}
 8011dc8:	4770      	bx	lr

08011dca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011dca:	b480      	push	{r7}
 8011dcc:	b085      	sub	sp, #20
 8011dce:	af00      	add	r7, sp, #0
 8011dd0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	691b      	ldr	r3, [r3, #16]
 8011dd6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	685b      	ldr	r3, [r3, #4]
 8011ddc:	687a      	ldr	r2, [r7, #4]
 8011dde:	6892      	ldr	r2, [r2, #8]
 8011de0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	689b      	ldr	r3, [r3, #8]
 8011de6:	687a      	ldr	r2, [r7, #4]
 8011de8:	6852      	ldr	r2, [r2, #4]
 8011dea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	685b      	ldr	r3, [r3, #4]
 8011df0:	687a      	ldr	r2, [r7, #4]
 8011df2:	429a      	cmp	r2, r3
 8011df4:	d103      	bne.n	8011dfe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	689a      	ldr	r2, [r3, #8]
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	2200      	movs	r2, #0
 8011e02:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	1e5a      	subs	r2, r3, #1
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	681b      	ldr	r3, [r3, #0]
}
 8011e12:	4618      	mov	r0, r3
 8011e14:	3714      	adds	r7, #20
 8011e16:	46bd      	mov	sp, r7
 8011e18:	bc80      	pop	{r7}
 8011e1a:	4770      	bx	lr

08011e1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b084      	sub	sp, #16
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
 8011e24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d10b      	bne.n	8011e48 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e34:	f383 8811 	msr	BASEPRI, r3
 8011e38:	f3bf 8f6f 	isb	sy
 8011e3c:	f3bf 8f4f 	dsb	sy
 8011e40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011e42:	bf00      	nop
 8011e44:	bf00      	nop
 8011e46:	e7fd      	b.n	8011e44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011e48:	f001 ffa0 	bl	8013d8c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	681a      	ldr	r2, [r3, #0]
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011e54:	68f9      	ldr	r1, [r7, #12]
 8011e56:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011e58:	fb01 f303 	mul.w	r3, r1, r3
 8011e5c:	441a      	add	r2, r3
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	2200      	movs	r2, #0
 8011e66:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	681a      	ldr	r2, [r3, #0]
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	681a      	ldr	r2, [r3, #0]
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011e78:	3b01      	subs	r3, #1
 8011e7a:	68f9      	ldr	r1, [r7, #12]
 8011e7c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011e7e:	fb01 f303 	mul.w	r3, r1, r3
 8011e82:	441a      	add	r2, r3
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	22ff      	movs	r2, #255	@ 0xff
 8011e8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	22ff      	movs	r2, #255	@ 0xff
 8011e94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8011e98:	683b      	ldr	r3, [r7, #0]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d114      	bne.n	8011ec8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	691b      	ldr	r3, [r3, #16]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d01a      	beq.n	8011edc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	3310      	adds	r3, #16
 8011eaa:	4618      	mov	r0, r3
 8011eac:	f001 fa3c 	bl	8013328 <xTaskRemoveFromEventList>
 8011eb0:	4603      	mov	r3, r0
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d012      	beq.n	8011edc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8011eec <xQueueGenericReset+0xd0>)
 8011eb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011ebc:	601a      	str	r2, [r3, #0]
 8011ebe:	f3bf 8f4f 	dsb	sy
 8011ec2:	f3bf 8f6f 	isb	sy
 8011ec6:	e009      	b.n	8011edc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	3310      	adds	r3, #16
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f7ff fef6 	bl	8011cbe <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	3324      	adds	r3, #36	@ 0x24
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f7ff fef1 	bl	8011cbe <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011edc:	f001 ff86 	bl	8013dec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011ee0:	2301      	movs	r3, #1
}
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	3710      	adds	r7, #16
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	bd80      	pop	{r7, pc}
 8011eea:	bf00      	nop
 8011eec:	e000ed04 	.word	0xe000ed04

08011ef0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b08e      	sub	sp, #56	@ 0x38
 8011ef4:	af02      	add	r7, sp, #8
 8011ef6:	60f8      	str	r0, [r7, #12]
 8011ef8:	60b9      	str	r1, [r7, #8]
 8011efa:	607a      	str	r2, [r7, #4]
 8011efc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d10b      	bne.n	8011f1c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8011f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f08:	f383 8811 	msr	BASEPRI, r3
 8011f0c:	f3bf 8f6f 	isb	sy
 8011f10:	f3bf 8f4f 	dsb	sy
 8011f14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8011f16:	bf00      	nop
 8011f18:	bf00      	nop
 8011f1a:	e7fd      	b.n	8011f18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011f1c:	683b      	ldr	r3, [r7, #0]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d10b      	bne.n	8011f3a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8011f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f26:	f383 8811 	msr	BASEPRI, r3
 8011f2a:	f3bf 8f6f 	isb	sy
 8011f2e:	f3bf 8f4f 	dsb	sy
 8011f32:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011f34:	bf00      	nop
 8011f36:	bf00      	nop
 8011f38:	e7fd      	b.n	8011f36 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d002      	beq.n	8011f46 <xQueueGenericCreateStatic+0x56>
 8011f40:	68bb      	ldr	r3, [r7, #8]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d001      	beq.n	8011f4a <xQueueGenericCreateStatic+0x5a>
 8011f46:	2301      	movs	r3, #1
 8011f48:	e000      	b.n	8011f4c <xQueueGenericCreateStatic+0x5c>
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d10b      	bne.n	8011f68 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8011f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f54:	f383 8811 	msr	BASEPRI, r3
 8011f58:	f3bf 8f6f 	isb	sy
 8011f5c:	f3bf 8f4f 	dsb	sy
 8011f60:	623b      	str	r3, [r7, #32]
}
 8011f62:	bf00      	nop
 8011f64:	bf00      	nop
 8011f66:	e7fd      	b.n	8011f64 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d102      	bne.n	8011f74 <xQueueGenericCreateStatic+0x84>
 8011f6e:	68bb      	ldr	r3, [r7, #8]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d101      	bne.n	8011f78 <xQueueGenericCreateStatic+0x88>
 8011f74:	2301      	movs	r3, #1
 8011f76:	e000      	b.n	8011f7a <xQueueGenericCreateStatic+0x8a>
 8011f78:	2300      	movs	r3, #0
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d10b      	bne.n	8011f96 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8011f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f82:	f383 8811 	msr	BASEPRI, r3
 8011f86:	f3bf 8f6f 	isb	sy
 8011f8a:	f3bf 8f4f 	dsb	sy
 8011f8e:	61fb      	str	r3, [r7, #28]
}
 8011f90:	bf00      	nop
 8011f92:	bf00      	nop
 8011f94:	e7fd      	b.n	8011f92 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011f96:	2348      	movs	r3, #72	@ 0x48
 8011f98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011f9a:	697b      	ldr	r3, [r7, #20]
 8011f9c:	2b48      	cmp	r3, #72	@ 0x48
 8011f9e:	d00b      	beq.n	8011fb8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8011fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fa4:	f383 8811 	msr	BASEPRI, r3
 8011fa8:	f3bf 8f6f 	isb	sy
 8011fac:	f3bf 8f4f 	dsb	sy
 8011fb0:	61bb      	str	r3, [r7, #24]
}
 8011fb2:	bf00      	nop
 8011fb4:	bf00      	nop
 8011fb6:	e7fd      	b.n	8011fb4 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011fb8:	683b      	ldr	r3, [r7, #0]
 8011fba:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8011fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d00d      	beq.n	8011fde <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fc4:	2201      	movs	r2, #1
 8011fc6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011fca:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8011fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fd0:	9300      	str	r3, [sp, #0]
 8011fd2:	4613      	mov	r3, r2
 8011fd4:	687a      	ldr	r2, [r7, #4]
 8011fd6:	68b9      	ldr	r1, [r7, #8]
 8011fd8:	68f8      	ldr	r0, [r7, #12]
 8011fda:	f000 f844 	bl	8012066 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8011fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	3730      	adds	r7, #48	@ 0x30
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bd80      	pop	{r7, pc}

08011fe8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b08a      	sub	sp, #40	@ 0x28
 8011fec:	af02      	add	r7, sp, #8
 8011fee:	60f8      	str	r0, [r7, #12]
 8011ff0:	60b9      	str	r1, [r7, #8]
 8011ff2:	4613      	mov	r3, r2
 8011ff4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d10b      	bne.n	8012014 <xQueueGenericCreate+0x2c>
	__asm volatile
 8011ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012000:	f383 8811 	msr	BASEPRI, r3
 8012004:	f3bf 8f6f 	isb	sy
 8012008:	f3bf 8f4f 	dsb	sy
 801200c:	613b      	str	r3, [r7, #16]
}
 801200e:	bf00      	nop
 8012010:	bf00      	nop
 8012012:	e7fd      	b.n	8012010 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012014:	68bb      	ldr	r3, [r7, #8]
 8012016:	2b00      	cmp	r3, #0
 8012018:	d102      	bne.n	8012020 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801201a:	2300      	movs	r3, #0
 801201c:	61fb      	str	r3, [r7, #28]
 801201e:	e004      	b.n	801202a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	68ba      	ldr	r2, [r7, #8]
 8012024:	fb02 f303 	mul.w	r3, r2, r3
 8012028:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 801202a:	69fb      	ldr	r3, [r7, #28]
 801202c:	3348      	adds	r3, #72	@ 0x48
 801202e:	4618      	mov	r0, r3
 8012030:	f001 ffae 	bl	8013f90 <pvPortMalloc>
 8012034:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012036:	69bb      	ldr	r3, [r7, #24]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d00f      	beq.n	801205c <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 801203c:	69bb      	ldr	r3, [r7, #24]
 801203e:	3348      	adds	r3, #72	@ 0x48
 8012040:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012042:	69bb      	ldr	r3, [r7, #24]
 8012044:	2200      	movs	r2, #0
 8012046:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801204a:	79fa      	ldrb	r2, [r7, #7]
 801204c:	69bb      	ldr	r3, [r7, #24]
 801204e:	9300      	str	r3, [sp, #0]
 8012050:	4613      	mov	r3, r2
 8012052:	697a      	ldr	r2, [r7, #20]
 8012054:	68b9      	ldr	r1, [r7, #8]
 8012056:	68f8      	ldr	r0, [r7, #12]
 8012058:	f000 f805 	bl	8012066 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 801205c:	69bb      	ldr	r3, [r7, #24]
	}
 801205e:	4618      	mov	r0, r3
 8012060:	3720      	adds	r7, #32
 8012062:	46bd      	mov	sp, r7
 8012064:	bd80      	pop	{r7, pc}

08012066 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012066:	b580      	push	{r7, lr}
 8012068:	b084      	sub	sp, #16
 801206a:	af00      	add	r7, sp, #0
 801206c:	60f8      	str	r0, [r7, #12]
 801206e:	60b9      	str	r1, [r7, #8]
 8012070:	607a      	str	r2, [r7, #4]
 8012072:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012074:	68bb      	ldr	r3, [r7, #8]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d103      	bne.n	8012082 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801207a:	69bb      	ldr	r3, [r7, #24]
 801207c:	69ba      	ldr	r2, [r7, #24]
 801207e:	601a      	str	r2, [r3, #0]
 8012080:	e002      	b.n	8012088 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012082:	69bb      	ldr	r3, [r7, #24]
 8012084:	687a      	ldr	r2, [r7, #4]
 8012086:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012088:	69bb      	ldr	r3, [r7, #24]
 801208a:	68fa      	ldr	r2, [r7, #12]
 801208c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801208e:	69bb      	ldr	r3, [r7, #24]
 8012090:	68ba      	ldr	r2, [r7, #8]
 8012092:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012094:	2101      	movs	r1, #1
 8012096:	69b8      	ldr	r0, [r7, #24]
 8012098:	f7ff fec0 	bl	8011e1c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801209c:	bf00      	nop
 801209e:	3710      	adds	r7, #16
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}

080120a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b08e      	sub	sp, #56	@ 0x38
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	60f8      	str	r0, [r7, #12]
 80120ac:	60b9      	str	r1, [r7, #8]
 80120ae:	607a      	str	r2, [r7, #4]
 80120b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80120b2:	2300      	movs	r3, #0
 80120b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80120ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d10b      	bne.n	80120d8 <xQueueGenericSend+0x34>
	__asm volatile
 80120c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120c4:	f383 8811 	msr	BASEPRI, r3
 80120c8:	f3bf 8f6f 	isb	sy
 80120cc:	f3bf 8f4f 	dsb	sy
 80120d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80120d2:	bf00      	nop
 80120d4:	bf00      	nop
 80120d6:	e7fd      	b.n	80120d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80120d8:	68bb      	ldr	r3, [r7, #8]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d103      	bne.n	80120e6 <xQueueGenericSend+0x42>
 80120de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d101      	bne.n	80120ea <xQueueGenericSend+0x46>
 80120e6:	2301      	movs	r3, #1
 80120e8:	e000      	b.n	80120ec <xQueueGenericSend+0x48>
 80120ea:	2300      	movs	r3, #0
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d10b      	bne.n	8012108 <xQueueGenericSend+0x64>
	__asm volatile
 80120f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120f4:	f383 8811 	msr	BASEPRI, r3
 80120f8:	f3bf 8f6f 	isb	sy
 80120fc:	f3bf 8f4f 	dsb	sy
 8012100:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012102:	bf00      	nop
 8012104:	bf00      	nop
 8012106:	e7fd      	b.n	8012104 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012108:	683b      	ldr	r3, [r7, #0]
 801210a:	2b02      	cmp	r3, #2
 801210c:	d103      	bne.n	8012116 <xQueueGenericSend+0x72>
 801210e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012112:	2b01      	cmp	r3, #1
 8012114:	d101      	bne.n	801211a <xQueueGenericSend+0x76>
 8012116:	2301      	movs	r3, #1
 8012118:	e000      	b.n	801211c <xQueueGenericSend+0x78>
 801211a:	2300      	movs	r3, #0
 801211c:	2b00      	cmp	r3, #0
 801211e:	d10b      	bne.n	8012138 <xQueueGenericSend+0x94>
	__asm volatile
 8012120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012124:	f383 8811 	msr	BASEPRI, r3
 8012128:	f3bf 8f6f 	isb	sy
 801212c:	f3bf 8f4f 	dsb	sy
 8012130:	623b      	str	r3, [r7, #32]
}
 8012132:	bf00      	nop
 8012134:	bf00      	nop
 8012136:	e7fd      	b.n	8012134 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012138:	f001 faf2 	bl	8013720 <xTaskGetSchedulerState>
 801213c:	4603      	mov	r3, r0
 801213e:	2b00      	cmp	r3, #0
 8012140:	d102      	bne.n	8012148 <xQueueGenericSend+0xa4>
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d101      	bne.n	801214c <xQueueGenericSend+0xa8>
 8012148:	2301      	movs	r3, #1
 801214a:	e000      	b.n	801214e <xQueueGenericSend+0xaa>
 801214c:	2300      	movs	r3, #0
 801214e:	2b00      	cmp	r3, #0
 8012150:	d10b      	bne.n	801216a <xQueueGenericSend+0xc6>
	__asm volatile
 8012152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012156:	f383 8811 	msr	BASEPRI, r3
 801215a:	f3bf 8f6f 	isb	sy
 801215e:	f3bf 8f4f 	dsb	sy
 8012162:	61fb      	str	r3, [r7, #28]
}
 8012164:	bf00      	nop
 8012166:	bf00      	nop
 8012168:	e7fd      	b.n	8012166 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801216a:	f001 fe0f 	bl	8013d8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801216e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012170:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012176:	429a      	cmp	r2, r3
 8012178:	d302      	bcc.n	8012180 <xQueueGenericSend+0xdc>
 801217a:	683b      	ldr	r3, [r7, #0]
 801217c:	2b02      	cmp	r3, #2
 801217e:	d129      	bne.n	80121d4 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012180:	683a      	ldr	r2, [r7, #0]
 8012182:	68b9      	ldr	r1, [r7, #8]
 8012184:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012186:	f000 faec 	bl	8012762 <prvCopyDataToQueue>
 801218a:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801218c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801218e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012190:	2b00      	cmp	r3, #0
 8012192:	d010      	beq.n	80121b6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012196:	3324      	adds	r3, #36	@ 0x24
 8012198:	4618      	mov	r0, r3
 801219a:	f001 f8c5 	bl	8013328 <xTaskRemoveFromEventList>
 801219e:	4603      	mov	r3, r0
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d013      	beq.n	80121cc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80121a4:	4b3f      	ldr	r3, [pc, #252]	@ (80122a4 <xQueueGenericSend+0x200>)
 80121a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80121aa:	601a      	str	r2, [r3, #0]
 80121ac:	f3bf 8f4f 	dsb	sy
 80121b0:	f3bf 8f6f 	isb	sy
 80121b4:	e00a      	b.n	80121cc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80121b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d007      	beq.n	80121cc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80121bc:	4b39      	ldr	r3, [pc, #228]	@ (80122a4 <xQueueGenericSend+0x200>)
 80121be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80121c2:	601a      	str	r2, [r3, #0]
 80121c4:	f3bf 8f4f 	dsb	sy
 80121c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80121cc:	f001 fe0e 	bl	8013dec <vPortExitCritical>
				return pdPASS;
 80121d0:	2301      	movs	r3, #1
 80121d2:	e063      	b.n	801229c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d103      	bne.n	80121e2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80121da:	f001 fe07 	bl	8013dec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80121de:	2300      	movs	r3, #0
 80121e0:	e05c      	b.n	801229c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80121e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d106      	bne.n	80121f6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80121e8:	f107 0314 	add.w	r3, r7, #20
 80121ec:	4618      	mov	r0, r3
 80121ee:	f001 f8ff 	bl	80133f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80121f2:	2301      	movs	r3, #1
 80121f4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80121f6:	f001 fdf9 	bl	8013dec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80121fa:	f000 fe9b 	bl	8012f34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80121fe:	f001 fdc5 	bl	8013d8c <vPortEnterCritical>
 8012202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012204:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012208:	b25b      	sxtb	r3, r3
 801220a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801220e:	d103      	bne.n	8012218 <xQueueGenericSend+0x174>
 8012210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012212:	2200      	movs	r2, #0
 8012214:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801221a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801221e:	b25b      	sxtb	r3, r3
 8012220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012224:	d103      	bne.n	801222e <xQueueGenericSend+0x18a>
 8012226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012228:	2200      	movs	r2, #0
 801222a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801222e:	f001 fddd 	bl	8013dec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012232:	1d3a      	adds	r2, r7, #4
 8012234:	f107 0314 	add.w	r3, r7, #20
 8012238:	4611      	mov	r1, r2
 801223a:	4618      	mov	r0, r3
 801223c:	f001 f8ee 	bl	801341c <xTaskCheckForTimeOut>
 8012240:	4603      	mov	r3, r0
 8012242:	2b00      	cmp	r3, #0
 8012244:	d124      	bne.n	8012290 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012246:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012248:	f000 fb83 	bl	8012952 <prvIsQueueFull>
 801224c:	4603      	mov	r3, r0
 801224e:	2b00      	cmp	r3, #0
 8012250:	d018      	beq.n	8012284 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012254:	3310      	adds	r3, #16
 8012256:	687a      	ldr	r2, [r7, #4]
 8012258:	4611      	mov	r1, r2
 801225a:	4618      	mov	r0, r3
 801225c:	f001 f83e 	bl	80132dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012260:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012262:	f000 fb0e 	bl	8012882 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012266:	f000 fe73 	bl	8012f50 <xTaskResumeAll>
 801226a:	4603      	mov	r3, r0
 801226c:	2b00      	cmp	r3, #0
 801226e:	f47f af7c 	bne.w	801216a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8012272:	4b0c      	ldr	r3, [pc, #48]	@ (80122a4 <xQueueGenericSend+0x200>)
 8012274:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012278:	601a      	str	r2, [r3, #0]
 801227a:	f3bf 8f4f 	dsb	sy
 801227e:	f3bf 8f6f 	isb	sy
 8012282:	e772      	b.n	801216a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012284:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012286:	f000 fafc 	bl	8012882 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801228a:	f000 fe61 	bl	8012f50 <xTaskResumeAll>
 801228e:	e76c      	b.n	801216a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012290:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012292:	f000 faf6 	bl	8012882 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012296:	f000 fe5b 	bl	8012f50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801229a:	2300      	movs	r3, #0
		}
	}
}
 801229c:	4618      	mov	r0, r3
 801229e:	3738      	adds	r7, #56	@ 0x38
 80122a0:	46bd      	mov	sp, r7
 80122a2:	bd80      	pop	{r7, pc}
 80122a4:	e000ed04 	.word	0xe000ed04

080122a8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b08e      	sub	sp, #56	@ 0x38
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
 80122b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80122b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d10b      	bne.n	80122d4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80122bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122c0:	f383 8811 	msr	BASEPRI, r3
 80122c4:	f3bf 8f6f 	isb	sy
 80122c8:	f3bf 8f4f 	dsb	sy
 80122cc:	623b      	str	r3, [r7, #32]
}
 80122ce:	bf00      	nop
 80122d0:	bf00      	nop
 80122d2:	e7fd      	b.n	80122d0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80122d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d00b      	beq.n	80122f4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80122dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122e0:	f383 8811 	msr	BASEPRI, r3
 80122e4:	f3bf 8f6f 	isb	sy
 80122e8:	f3bf 8f4f 	dsb	sy
 80122ec:	61fb      	str	r3, [r7, #28]
}
 80122ee:	bf00      	nop
 80122f0:	bf00      	nop
 80122f2:	e7fd      	b.n	80122f0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80122f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d103      	bne.n	8012304 <xQueueGiveFromISR+0x5c>
 80122fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122fe:	685b      	ldr	r3, [r3, #4]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d101      	bne.n	8012308 <xQueueGiveFromISR+0x60>
 8012304:	2301      	movs	r3, #1
 8012306:	e000      	b.n	801230a <xQueueGiveFromISR+0x62>
 8012308:	2300      	movs	r3, #0
 801230a:	2b00      	cmp	r3, #0
 801230c:	d10b      	bne.n	8012326 <xQueueGiveFromISR+0x7e>
	__asm volatile
 801230e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012312:	f383 8811 	msr	BASEPRI, r3
 8012316:	f3bf 8f6f 	isb	sy
 801231a:	f3bf 8f4f 	dsb	sy
 801231e:	61bb      	str	r3, [r7, #24]
}
 8012320:	bf00      	nop
 8012322:	bf00      	nop
 8012324:	e7fd      	b.n	8012322 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012326:	f001 fdf3 	bl	8013f10 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801232a:	f3ef 8211 	mrs	r2, BASEPRI
 801232e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012332:	f383 8811 	msr	BASEPRI, r3
 8012336:	f3bf 8f6f 	isb	sy
 801233a:	f3bf 8f4f 	dsb	sy
 801233e:	617a      	str	r2, [r7, #20]
 8012340:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012342:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012344:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801234a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801234c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801234e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012350:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012352:	429a      	cmp	r2, r3
 8012354:	d22b      	bcs.n	80123ae <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012358:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801235c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012362:	1c5a      	adds	r2, r3, #1
 8012364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012366:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012368:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801236c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012370:	d112      	bne.n	8012398 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012376:	2b00      	cmp	r3, #0
 8012378:	d016      	beq.n	80123a8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801237a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801237c:	3324      	adds	r3, #36	@ 0x24
 801237e:	4618      	mov	r0, r3
 8012380:	f000 ffd2 	bl	8013328 <xTaskRemoveFromEventList>
 8012384:	4603      	mov	r3, r0
 8012386:	2b00      	cmp	r3, #0
 8012388:	d00e      	beq.n	80123a8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801238a:	683b      	ldr	r3, [r7, #0]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d00b      	beq.n	80123a8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	2201      	movs	r2, #1
 8012394:	601a      	str	r2, [r3, #0]
 8012396:	e007      	b.n	80123a8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801239c:	3301      	adds	r3, #1
 801239e:	b2db      	uxtb	r3, r3
 80123a0:	b25a      	sxtb	r2, r3
 80123a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80123a8:	2301      	movs	r3, #1
 80123aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80123ac:	e001      	b.n	80123b2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80123ae:	2300      	movs	r3, #0
 80123b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80123b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123b4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80123bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80123be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80123c0:	4618      	mov	r0, r3
 80123c2:	3738      	adds	r7, #56	@ 0x38
 80123c4:	46bd      	mov	sp, r7
 80123c6:	bd80      	pop	{r7, pc}

080123c8 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b08e      	sub	sp, #56	@ 0x38
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
 80123d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80123d2:	2300      	movs	r3, #0
 80123d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80123da:	2300      	movs	r3, #0
 80123dc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80123de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d10b      	bne.n	80123fc <xQueueSemaphoreTake+0x34>
	__asm volatile
 80123e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123e8:	f383 8811 	msr	BASEPRI, r3
 80123ec:	f3bf 8f6f 	isb	sy
 80123f0:	f3bf 8f4f 	dsb	sy
 80123f4:	623b      	str	r3, [r7, #32]
}
 80123f6:	bf00      	nop
 80123f8:	bf00      	nop
 80123fa:	e7fd      	b.n	80123f8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80123fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012400:	2b00      	cmp	r3, #0
 8012402:	d00b      	beq.n	801241c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8012404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012408:	f383 8811 	msr	BASEPRI, r3
 801240c:	f3bf 8f6f 	isb	sy
 8012410:	f3bf 8f4f 	dsb	sy
 8012414:	61fb      	str	r3, [r7, #28]
}
 8012416:	bf00      	nop
 8012418:	bf00      	nop
 801241a:	e7fd      	b.n	8012418 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801241c:	f001 f980 	bl	8013720 <xTaskGetSchedulerState>
 8012420:	4603      	mov	r3, r0
 8012422:	2b00      	cmp	r3, #0
 8012424:	d102      	bne.n	801242c <xQueueSemaphoreTake+0x64>
 8012426:	683b      	ldr	r3, [r7, #0]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d101      	bne.n	8012430 <xQueueSemaphoreTake+0x68>
 801242c:	2301      	movs	r3, #1
 801242e:	e000      	b.n	8012432 <xQueueSemaphoreTake+0x6a>
 8012430:	2300      	movs	r3, #0
 8012432:	2b00      	cmp	r3, #0
 8012434:	d10b      	bne.n	801244e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8012436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801243a:	f383 8811 	msr	BASEPRI, r3
 801243e:	f3bf 8f6f 	isb	sy
 8012442:	f3bf 8f4f 	dsb	sy
 8012446:	61bb      	str	r3, [r7, #24]
}
 8012448:	bf00      	nop
 801244a:	bf00      	nop
 801244c:	e7fd      	b.n	801244a <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 801244e:	f001 fc9d 	bl	8013d8c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012456:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801245a:	2b00      	cmp	r3, #0
 801245c:	d024      	beq.n	80124a8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801245e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012460:	1e5a      	subs	r2, r3, #1
 8012462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012464:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d104      	bne.n	8012478 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 801246e:	f001 fb25 	bl	8013abc <pvTaskIncrementMutexHeldCount>
 8012472:	4602      	mov	r2, r0
 8012474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012476:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801247a:	691b      	ldr	r3, [r3, #16]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d00f      	beq.n	80124a0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012482:	3310      	adds	r3, #16
 8012484:	4618      	mov	r0, r3
 8012486:	f000 ff4f 	bl	8013328 <xTaskRemoveFromEventList>
 801248a:	4603      	mov	r3, r0
 801248c:	2b00      	cmp	r3, #0
 801248e:	d007      	beq.n	80124a0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012490:	4b54      	ldr	r3, [pc, #336]	@ (80125e4 <xQueueSemaphoreTake+0x21c>)
 8012492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012496:	601a      	str	r2, [r3, #0]
 8012498:	f3bf 8f4f 	dsb	sy
 801249c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80124a0:	f001 fca4 	bl	8013dec <vPortExitCritical>
				return pdPASS;
 80124a4:	2301      	movs	r3, #1
 80124a6:	e098      	b.n	80125da <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80124a8:	683b      	ldr	r3, [r7, #0]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d112      	bne.n	80124d4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80124ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d00b      	beq.n	80124cc <xQueueSemaphoreTake+0x104>
	__asm volatile
 80124b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124b8:	f383 8811 	msr	BASEPRI, r3
 80124bc:	f3bf 8f6f 	isb	sy
 80124c0:	f3bf 8f4f 	dsb	sy
 80124c4:	617b      	str	r3, [r7, #20]
}
 80124c6:	bf00      	nop
 80124c8:	bf00      	nop
 80124ca:	e7fd      	b.n	80124c8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80124cc:	f001 fc8e 	bl	8013dec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80124d0:	2300      	movs	r3, #0
 80124d2:	e082      	b.n	80125da <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80124d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d106      	bne.n	80124e8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80124da:	f107 030c 	add.w	r3, r7, #12
 80124de:	4618      	mov	r0, r3
 80124e0:	f000 ff86 	bl	80133f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80124e4:	2301      	movs	r3, #1
 80124e6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80124e8:	f001 fc80 	bl	8013dec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80124ec:	f000 fd22 	bl	8012f34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80124f0:	f001 fc4c 	bl	8013d8c <vPortEnterCritical>
 80124f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80124fa:	b25b      	sxtb	r3, r3
 80124fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012500:	d103      	bne.n	801250a <xQueueSemaphoreTake+0x142>
 8012502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012504:	2200      	movs	r2, #0
 8012506:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801250a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801250c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012510:	b25b      	sxtb	r3, r3
 8012512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012516:	d103      	bne.n	8012520 <xQueueSemaphoreTake+0x158>
 8012518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801251a:	2200      	movs	r2, #0
 801251c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012520:	f001 fc64 	bl	8013dec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012524:	463a      	mov	r2, r7
 8012526:	f107 030c 	add.w	r3, r7, #12
 801252a:	4611      	mov	r1, r2
 801252c:	4618      	mov	r0, r3
 801252e:	f000 ff75 	bl	801341c <xTaskCheckForTimeOut>
 8012532:	4603      	mov	r3, r0
 8012534:	2b00      	cmp	r3, #0
 8012536:	d132      	bne.n	801259e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012538:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801253a:	f000 f9f4 	bl	8012926 <prvIsQueueEmpty>
 801253e:	4603      	mov	r3, r0
 8012540:	2b00      	cmp	r3, #0
 8012542:	d026      	beq.n	8012592 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d109      	bne.n	8012560 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 801254c:	f001 fc1e 	bl	8013d8c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8012550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012552:	685b      	ldr	r3, [r3, #4]
 8012554:	4618      	mov	r0, r3
 8012556:	f001 f901 	bl	801375c <xTaskPriorityInherit>
 801255a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 801255c:	f001 fc46 	bl	8013dec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012562:	3324      	adds	r3, #36	@ 0x24
 8012564:	683a      	ldr	r2, [r7, #0]
 8012566:	4611      	mov	r1, r2
 8012568:	4618      	mov	r0, r3
 801256a:	f000 feb7 	bl	80132dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801256e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012570:	f000 f987 	bl	8012882 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012574:	f000 fcec 	bl	8012f50 <xTaskResumeAll>
 8012578:	4603      	mov	r3, r0
 801257a:	2b00      	cmp	r3, #0
 801257c:	f47f af67 	bne.w	801244e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8012580:	4b18      	ldr	r3, [pc, #96]	@ (80125e4 <xQueueSemaphoreTake+0x21c>)
 8012582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012586:	601a      	str	r2, [r3, #0]
 8012588:	f3bf 8f4f 	dsb	sy
 801258c:	f3bf 8f6f 	isb	sy
 8012590:	e75d      	b.n	801244e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012592:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012594:	f000 f975 	bl	8012882 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012598:	f000 fcda 	bl	8012f50 <xTaskResumeAll>
 801259c:	e757      	b.n	801244e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801259e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80125a0:	f000 f96f 	bl	8012882 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80125a4:	f000 fcd4 	bl	8012f50 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80125a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80125aa:	f000 f9bc 	bl	8012926 <prvIsQueueEmpty>
 80125ae:	4603      	mov	r3, r0
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	f43f af4c 	beq.w	801244e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80125b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d00d      	beq.n	80125d8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80125bc:	f001 fbe6 	bl	8013d8c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80125c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80125c2:	f000 f8b7 	bl	8012734 <prvGetDisinheritPriorityAfterTimeout>
 80125c6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80125c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125ca:	685b      	ldr	r3, [r3, #4]
 80125cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80125ce:	4618      	mov	r0, r3
 80125d0:	f001 f9d2 	bl	8013978 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80125d4:	f001 fc0a 	bl	8013dec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80125d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80125da:	4618      	mov	r0, r3
 80125dc:	3738      	adds	r7, #56	@ 0x38
 80125de:	46bd      	mov	sp, r7
 80125e0:	bd80      	pop	{r7, pc}
 80125e2:	bf00      	nop
 80125e4:	e000ed04 	.word	0xe000ed04

080125e8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b08e      	sub	sp, #56	@ 0x38
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	60f8      	str	r0, [r7, #12]
 80125f0:	60b9      	str	r1, [r7, #8]
 80125f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80125f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d10b      	bne.n	8012616 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80125fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012602:	f383 8811 	msr	BASEPRI, r3
 8012606:	f3bf 8f6f 	isb	sy
 801260a:	f3bf 8f4f 	dsb	sy
 801260e:	623b      	str	r3, [r7, #32]
}
 8012610:	bf00      	nop
 8012612:	bf00      	nop
 8012614:	e7fd      	b.n	8012612 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012616:	68bb      	ldr	r3, [r7, #8]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d103      	bne.n	8012624 <xQueueReceiveFromISR+0x3c>
 801261c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801261e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012620:	2b00      	cmp	r3, #0
 8012622:	d101      	bne.n	8012628 <xQueueReceiveFromISR+0x40>
 8012624:	2301      	movs	r3, #1
 8012626:	e000      	b.n	801262a <xQueueReceiveFromISR+0x42>
 8012628:	2300      	movs	r3, #0
 801262a:	2b00      	cmp	r3, #0
 801262c:	d10b      	bne.n	8012646 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801262e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012632:	f383 8811 	msr	BASEPRI, r3
 8012636:	f3bf 8f6f 	isb	sy
 801263a:	f3bf 8f4f 	dsb	sy
 801263e:	61fb      	str	r3, [r7, #28]
}
 8012640:	bf00      	nop
 8012642:	bf00      	nop
 8012644:	e7fd      	b.n	8012642 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012646:	f001 fc63 	bl	8013f10 <vPortValidateInterruptPriority>
	__asm volatile
 801264a:	f3ef 8211 	mrs	r2, BASEPRI
 801264e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012652:	f383 8811 	msr	BASEPRI, r3
 8012656:	f3bf 8f6f 	isb	sy
 801265a:	f3bf 8f4f 	dsb	sy
 801265e:	61ba      	str	r2, [r7, #24]
 8012660:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012662:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012664:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801266a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801266c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801266e:	2b00      	cmp	r3, #0
 8012670:	d02f      	beq.n	80126d2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012674:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012678:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801267c:	68b9      	ldr	r1, [r7, #8]
 801267e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012680:	f000 f8d9 	bl	8012836 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012686:	1e5a      	subs	r2, r3, #1
 8012688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801268a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801268c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012694:	d112      	bne.n	80126bc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012698:	691b      	ldr	r3, [r3, #16]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d016      	beq.n	80126cc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801269e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126a0:	3310      	adds	r3, #16
 80126a2:	4618      	mov	r0, r3
 80126a4:	f000 fe40 	bl	8013328 <xTaskRemoveFromEventList>
 80126a8:	4603      	mov	r3, r0
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d00e      	beq.n	80126cc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d00b      	beq.n	80126cc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2201      	movs	r2, #1
 80126b8:	601a      	str	r2, [r3, #0]
 80126ba:	e007      	b.n	80126cc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80126bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80126c0:	3301      	adds	r3, #1
 80126c2:	b2db      	uxtb	r3, r3
 80126c4:	b25a      	sxtb	r2, r3
 80126c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80126cc:	2301      	movs	r3, #1
 80126ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80126d0:	e001      	b.n	80126d6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80126d2:	2300      	movs	r3, #0
 80126d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80126d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80126da:	693b      	ldr	r3, [r7, #16]
 80126dc:	f383 8811 	msr	BASEPRI, r3
}
 80126e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80126e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80126e4:	4618      	mov	r0, r3
 80126e6:	3738      	adds	r7, #56	@ 0x38
 80126e8:	46bd      	mov	sp, r7
 80126ea:	bd80      	pop	{r7, pc}

080126ec <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b084      	sub	sp, #16
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d10b      	bne.n	8012716 <vQueueDelete+0x2a>
	__asm volatile
 80126fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012702:	f383 8811 	msr	BASEPRI, r3
 8012706:	f3bf 8f6f 	isb	sy
 801270a:	f3bf 8f4f 	dsb	sy
 801270e:	60bb      	str	r3, [r7, #8]
}
 8012710:	bf00      	nop
 8012712:	bf00      	nop
 8012714:	e7fd      	b.n	8012712 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012716:	68f8      	ldr	r0, [r7, #12]
 8012718:	f000 f934 	bl	8012984 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8012722:	2b00      	cmp	r3, #0
 8012724:	d102      	bne.n	801272c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8012726:	68f8      	ldr	r0, [r7, #12]
 8012728:	f001 fcfa 	bl	8014120 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801272c:	bf00      	nop
 801272e:	3710      	adds	r7, #16
 8012730:	46bd      	mov	sp, r7
 8012732:	bd80      	pop	{r7, pc}

08012734 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012734:	b480      	push	{r7}
 8012736:	b085      	sub	sp, #20
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012740:	2b00      	cmp	r3, #0
 8012742:	d006      	beq.n	8012752 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	f1c3 0307 	rsb	r3, r3, #7
 801274e:	60fb      	str	r3, [r7, #12]
 8012750:	e001      	b.n	8012756 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012752:	2300      	movs	r3, #0
 8012754:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012756:	68fb      	ldr	r3, [r7, #12]
	}
 8012758:	4618      	mov	r0, r3
 801275a:	3714      	adds	r7, #20
 801275c:	46bd      	mov	sp, r7
 801275e:	bc80      	pop	{r7}
 8012760:	4770      	bx	lr

08012762 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012762:	b580      	push	{r7, lr}
 8012764:	b086      	sub	sp, #24
 8012766:	af00      	add	r7, sp, #0
 8012768:	60f8      	str	r0, [r7, #12]
 801276a:	60b9      	str	r1, [r7, #8]
 801276c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801276e:	2300      	movs	r3, #0
 8012770:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012776:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801277c:	2b00      	cmp	r3, #0
 801277e:	d10d      	bne.n	801279c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d14d      	bne.n	8012824 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	685b      	ldr	r3, [r3, #4]
 801278c:	4618      	mov	r0, r3
 801278e:	f001 f86b 	bl	8013868 <xTaskPriorityDisinherit>
 8012792:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	2200      	movs	r2, #0
 8012798:	605a      	str	r2, [r3, #4]
 801279a:	e043      	b.n	8012824 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d119      	bne.n	80127d6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	6898      	ldr	r0, [r3, #8]
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80127aa:	461a      	mov	r2, r3
 80127ac:	68b9      	ldr	r1, [r7, #8]
 80127ae:	f001 fedb 	bl	8014568 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	689a      	ldr	r2, [r3, #8]
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80127ba:	441a      	add	r2, r3
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	689a      	ldr	r2, [r3, #8]
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	685b      	ldr	r3, [r3, #4]
 80127c8:	429a      	cmp	r2, r3
 80127ca:	d32b      	bcc.n	8012824 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	681a      	ldr	r2, [r3, #0]
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	609a      	str	r2, [r3, #8]
 80127d4:	e026      	b.n	8012824 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	68d8      	ldr	r0, [r3, #12]
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80127de:	461a      	mov	r2, r3
 80127e0:	68b9      	ldr	r1, [r7, #8]
 80127e2:	f001 fec1 	bl	8014568 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	68da      	ldr	r2, [r3, #12]
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80127ee:	425b      	negs	r3, r3
 80127f0:	441a      	add	r2, r3
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	68da      	ldr	r2, [r3, #12]
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	429a      	cmp	r2, r3
 8012800:	d207      	bcs.n	8012812 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	685a      	ldr	r2, [r3, #4]
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801280a:	425b      	negs	r3, r3
 801280c:	441a      	add	r2, r3
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	2b02      	cmp	r3, #2
 8012816:	d105      	bne.n	8012824 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012818:	693b      	ldr	r3, [r7, #16]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d002      	beq.n	8012824 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801281e:	693b      	ldr	r3, [r7, #16]
 8012820:	3b01      	subs	r3, #1
 8012822:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012824:	693b      	ldr	r3, [r7, #16]
 8012826:	1c5a      	adds	r2, r3, #1
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801282c:	697b      	ldr	r3, [r7, #20]
}
 801282e:	4618      	mov	r0, r3
 8012830:	3718      	adds	r7, #24
 8012832:	46bd      	mov	sp, r7
 8012834:	bd80      	pop	{r7, pc}

08012836 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012836:	b580      	push	{r7, lr}
 8012838:	b082      	sub	sp, #8
 801283a:	af00      	add	r7, sp, #0
 801283c:	6078      	str	r0, [r7, #4]
 801283e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012844:	2b00      	cmp	r3, #0
 8012846:	d018      	beq.n	801287a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	68da      	ldr	r2, [r3, #12]
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012850:	441a      	add	r2, r3
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	68da      	ldr	r2, [r3, #12]
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	685b      	ldr	r3, [r3, #4]
 801285e:	429a      	cmp	r2, r3
 8012860:	d303      	bcc.n	801286a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	681a      	ldr	r2, [r3, #0]
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	68d9      	ldr	r1, [r3, #12]
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012872:	461a      	mov	r2, r3
 8012874:	6838      	ldr	r0, [r7, #0]
 8012876:	f001 fe77 	bl	8014568 <memcpy>
	}
}
 801287a:	bf00      	nop
 801287c:	3708      	adds	r7, #8
 801287e:	46bd      	mov	sp, r7
 8012880:	bd80      	pop	{r7, pc}

08012882 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012882:	b580      	push	{r7, lr}
 8012884:	b084      	sub	sp, #16
 8012886:	af00      	add	r7, sp, #0
 8012888:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801288a:	f001 fa7f 	bl	8013d8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012894:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012896:	e011      	b.n	80128bc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801289c:	2b00      	cmp	r3, #0
 801289e:	d012      	beq.n	80128c6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	3324      	adds	r3, #36	@ 0x24
 80128a4:	4618      	mov	r0, r3
 80128a6:	f000 fd3f 	bl	8013328 <xTaskRemoveFromEventList>
 80128aa:	4603      	mov	r3, r0
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d001      	beq.n	80128b4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80128b0:	f000 fe18 	bl	80134e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80128b4:	7bfb      	ldrb	r3, [r7, #15]
 80128b6:	3b01      	subs	r3, #1
 80128b8:	b2db      	uxtb	r3, r3
 80128ba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80128bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	dce9      	bgt.n	8012898 <prvUnlockQueue+0x16>
 80128c4:	e000      	b.n	80128c8 <prvUnlockQueue+0x46>
					break;
 80128c6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	22ff      	movs	r2, #255	@ 0xff
 80128cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80128d0:	f001 fa8c 	bl	8013dec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80128d4:	f001 fa5a 	bl	8013d8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80128de:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80128e0:	e011      	b.n	8012906 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	691b      	ldr	r3, [r3, #16]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d012      	beq.n	8012910 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	3310      	adds	r3, #16
 80128ee:	4618      	mov	r0, r3
 80128f0:	f000 fd1a 	bl	8013328 <xTaskRemoveFromEventList>
 80128f4:	4603      	mov	r3, r0
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d001      	beq.n	80128fe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80128fa:	f000 fdf3 	bl	80134e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80128fe:	7bbb      	ldrb	r3, [r7, #14]
 8012900:	3b01      	subs	r3, #1
 8012902:	b2db      	uxtb	r3, r3
 8012904:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012906:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801290a:	2b00      	cmp	r3, #0
 801290c:	dce9      	bgt.n	80128e2 <prvUnlockQueue+0x60>
 801290e:	e000      	b.n	8012912 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012910:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	22ff      	movs	r2, #255	@ 0xff
 8012916:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 801291a:	f001 fa67 	bl	8013dec <vPortExitCritical>
}
 801291e:	bf00      	nop
 8012920:	3710      	adds	r7, #16
 8012922:	46bd      	mov	sp, r7
 8012924:	bd80      	pop	{r7, pc}

08012926 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012926:	b580      	push	{r7, lr}
 8012928:	b084      	sub	sp, #16
 801292a:	af00      	add	r7, sp, #0
 801292c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801292e:	f001 fa2d 	bl	8013d8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012936:	2b00      	cmp	r3, #0
 8012938:	d102      	bne.n	8012940 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801293a:	2301      	movs	r3, #1
 801293c:	60fb      	str	r3, [r7, #12]
 801293e:	e001      	b.n	8012944 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012940:	2300      	movs	r3, #0
 8012942:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012944:	f001 fa52 	bl	8013dec <vPortExitCritical>

	return xReturn;
 8012948:	68fb      	ldr	r3, [r7, #12]
}
 801294a:	4618      	mov	r0, r3
 801294c:	3710      	adds	r7, #16
 801294e:	46bd      	mov	sp, r7
 8012950:	bd80      	pop	{r7, pc}

08012952 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012952:	b580      	push	{r7, lr}
 8012954:	b084      	sub	sp, #16
 8012956:	af00      	add	r7, sp, #0
 8012958:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801295a:	f001 fa17 	bl	8013d8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012966:	429a      	cmp	r2, r3
 8012968:	d102      	bne.n	8012970 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801296a:	2301      	movs	r3, #1
 801296c:	60fb      	str	r3, [r7, #12]
 801296e:	e001      	b.n	8012974 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012970:	2300      	movs	r3, #0
 8012972:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012974:	f001 fa3a 	bl	8013dec <vPortExitCritical>

	return xReturn;
 8012978:	68fb      	ldr	r3, [r7, #12]
}
 801297a:	4618      	mov	r0, r3
 801297c:	3710      	adds	r7, #16
 801297e:	46bd      	mov	sp, r7
 8012980:	bd80      	pop	{r7, pc}
	...

08012984 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012984:	b480      	push	{r7}
 8012986:	b085      	sub	sp, #20
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801298c:	2300      	movs	r3, #0
 801298e:	60fb      	str	r3, [r7, #12]
 8012990:	e016      	b.n	80129c0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012992:	4a10      	ldr	r2, [pc, #64]	@ (80129d4 <vQueueUnregisterQueue+0x50>)
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	00db      	lsls	r3, r3, #3
 8012998:	4413      	add	r3, r2
 801299a:	685b      	ldr	r3, [r3, #4]
 801299c:	687a      	ldr	r2, [r7, #4]
 801299e:	429a      	cmp	r2, r3
 80129a0:	d10b      	bne.n	80129ba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80129a2:	4a0c      	ldr	r2, [pc, #48]	@ (80129d4 <vQueueUnregisterQueue+0x50>)
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	2100      	movs	r1, #0
 80129a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80129ac:	4a09      	ldr	r2, [pc, #36]	@ (80129d4 <vQueueUnregisterQueue+0x50>)
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	00db      	lsls	r3, r3, #3
 80129b2:	4413      	add	r3, r2
 80129b4:	2200      	movs	r2, #0
 80129b6:	605a      	str	r2, [r3, #4]
				break;
 80129b8:	e006      	b.n	80129c8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	3301      	adds	r3, #1
 80129be:	60fb      	str	r3, [r7, #12]
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	2b07      	cmp	r3, #7
 80129c4:	d9e5      	bls.n	8012992 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80129c6:	bf00      	nop
 80129c8:	bf00      	nop
 80129ca:	3714      	adds	r7, #20
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bc80      	pop	{r7}
 80129d0:	4770      	bx	lr
 80129d2:	bf00      	nop
 80129d4:	2000133c 	.word	0x2000133c

080129d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b08e      	sub	sp, #56	@ 0x38
 80129dc:	af04      	add	r7, sp, #16
 80129de:	60f8      	str	r0, [r7, #12]
 80129e0:	60b9      	str	r1, [r7, #8]
 80129e2:	607a      	str	r2, [r7, #4]
 80129e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80129e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d10b      	bne.n	8012a04 <xTaskCreateStatic+0x2c>
	__asm volatile
 80129ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129f0:	f383 8811 	msr	BASEPRI, r3
 80129f4:	f3bf 8f6f 	isb	sy
 80129f8:	f3bf 8f4f 	dsb	sy
 80129fc:	623b      	str	r3, [r7, #32]
}
 80129fe:	bf00      	nop
 8012a00:	bf00      	nop
 8012a02:	e7fd      	b.n	8012a00 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8012a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d10b      	bne.n	8012a22 <xTaskCreateStatic+0x4a>
	__asm volatile
 8012a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a0e:	f383 8811 	msr	BASEPRI, r3
 8012a12:	f3bf 8f6f 	isb	sy
 8012a16:	f3bf 8f4f 	dsb	sy
 8012a1a:	61fb      	str	r3, [r7, #28]
}
 8012a1c:	bf00      	nop
 8012a1e:	bf00      	nop
 8012a20:	e7fd      	b.n	8012a1e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012a22:	2354      	movs	r3, #84	@ 0x54
 8012a24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012a26:	693b      	ldr	r3, [r7, #16]
 8012a28:	2b54      	cmp	r3, #84	@ 0x54
 8012a2a:	d00b      	beq.n	8012a44 <xTaskCreateStatic+0x6c>
	__asm volatile
 8012a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a30:	f383 8811 	msr	BASEPRI, r3
 8012a34:	f3bf 8f6f 	isb	sy
 8012a38:	f3bf 8f4f 	dsb	sy
 8012a3c:	61bb      	str	r3, [r7, #24]
}
 8012a3e:	bf00      	nop
 8012a40:	bf00      	nop
 8012a42:	e7fd      	b.n	8012a40 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d01e      	beq.n	8012a88 <xTaskCreateStatic+0xb0>
 8012a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d01b      	beq.n	8012a88 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a52:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012a58:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a5c:	2202      	movs	r2, #2
 8012a5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012a62:	2300      	movs	r3, #0
 8012a64:	9303      	str	r3, [sp, #12]
 8012a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a68:	9302      	str	r3, [sp, #8]
 8012a6a:	f107 0314 	add.w	r3, r7, #20
 8012a6e:	9301      	str	r3, [sp, #4]
 8012a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a72:	9300      	str	r3, [sp, #0]
 8012a74:	683b      	ldr	r3, [r7, #0]
 8012a76:	687a      	ldr	r2, [r7, #4]
 8012a78:	68b9      	ldr	r1, [r7, #8]
 8012a7a:	68f8      	ldr	r0, [r7, #12]
 8012a7c:	f000 f850 	bl	8012b20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012a80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012a82:	f000 f8d5 	bl	8012c30 <prvAddNewTaskToReadyList>
 8012a86:	e001      	b.n	8012a8c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8012a88:	2300      	movs	r3, #0
 8012a8a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012a8c:	697b      	ldr	r3, [r7, #20]
	}
 8012a8e:	4618      	mov	r0, r3
 8012a90:	3728      	adds	r7, #40	@ 0x28
 8012a92:	46bd      	mov	sp, r7
 8012a94:	bd80      	pop	{r7, pc}

08012a96 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012a96:	b580      	push	{r7, lr}
 8012a98:	b08c      	sub	sp, #48	@ 0x30
 8012a9a:	af04      	add	r7, sp, #16
 8012a9c:	60f8      	str	r0, [r7, #12]
 8012a9e:	60b9      	str	r1, [r7, #8]
 8012aa0:	603b      	str	r3, [r7, #0]
 8012aa2:	4613      	mov	r3, r2
 8012aa4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012aa6:	88fb      	ldrh	r3, [r7, #6]
 8012aa8:	009b      	lsls	r3, r3, #2
 8012aaa:	4618      	mov	r0, r3
 8012aac:	f001 fa70 	bl	8013f90 <pvPortMalloc>
 8012ab0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012ab2:	697b      	ldr	r3, [r7, #20]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d00e      	beq.n	8012ad6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8012ab8:	2054      	movs	r0, #84	@ 0x54
 8012aba:	f001 fa69 	bl	8013f90 <pvPortMalloc>
 8012abe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012ac0:	69fb      	ldr	r3, [r7, #28]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d003      	beq.n	8012ace <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012ac6:	69fb      	ldr	r3, [r7, #28]
 8012ac8:	697a      	ldr	r2, [r7, #20]
 8012aca:	631a      	str	r2, [r3, #48]	@ 0x30
 8012acc:	e005      	b.n	8012ada <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012ace:	6978      	ldr	r0, [r7, #20]
 8012ad0:	f001 fb26 	bl	8014120 <vPortFree>
 8012ad4:	e001      	b.n	8012ada <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012ada:	69fb      	ldr	r3, [r7, #28]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d017      	beq.n	8012b10 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012ae0:	69fb      	ldr	r3, [r7, #28]
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012ae8:	88fa      	ldrh	r2, [r7, #6]
 8012aea:	2300      	movs	r3, #0
 8012aec:	9303      	str	r3, [sp, #12]
 8012aee:	69fb      	ldr	r3, [r7, #28]
 8012af0:	9302      	str	r3, [sp, #8]
 8012af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012af4:	9301      	str	r3, [sp, #4]
 8012af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012af8:	9300      	str	r3, [sp, #0]
 8012afa:	683b      	ldr	r3, [r7, #0]
 8012afc:	68b9      	ldr	r1, [r7, #8]
 8012afe:	68f8      	ldr	r0, [r7, #12]
 8012b00:	f000 f80e 	bl	8012b20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012b04:	69f8      	ldr	r0, [r7, #28]
 8012b06:	f000 f893 	bl	8012c30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	61bb      	str	r3, [r7, #24]
 8012b0e:	e002      	b.n	8012b16 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012b10:	f04f 33ff 	mov.w	r3, #4294967295
 8012b14:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012b16:	69bb      	ldr	r3, [r7, #24]
	}
 8012b18:	4618      	mov	r0, r3
 8012b1a:	3720      	adds	r7, #32
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	bd80      	pop	{r7, pc}

08012b20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b088      	sub	sp, #32
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	60f8      	str	r0, [r7, #12]
 8012b28:	60b9      	str	r1, [r7, #8]
 8012b2a:	607a      	str	r2, [r7, #4]
 8012b2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b30:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	009b      	lsls	r3, r3, #2
 8012b36:	461a      	mov	r2, r3
 8012b38:	21a5      	movs	r1, #165	@ 0xa5
 8012b3a:	f001 fcd1 	bl	80144e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8012b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012b48:	3b01      	subs	r3, #1
 8012b4a:	009b      	lsls	r3, r3, #2
 8012b4c:	4413      	add	r3, r2
 8012b4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8012b50:	69bb      	ldr	r3, [r7, #24]
 8012b52:	f023 0307 	bic.w	r3, r3, #7
 8012b56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012b58:	69bb      	ldr	r3, [r7, #24]
 8012b5a:	f003 0307 	and.w	r3, r3, #7
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d00b      	beq.n	8012b7a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8012b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b66:	f383 8811 	msr	BASEPRI, r3
 8012b6a:	f3bf 8f6f 	isb	sy
 8012b6e:	f3bf 8f4f 	dsb	sy
 8012b72:	617b      	str	r3, [r7, #20]
}
 8012b74:	bf00      	nop
 8012b76:	bf00      	nop
 8012b78:	e7fd      	b.n	8012b76 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	61fb      	str	r3, [r7, #28]
 8012b7e:	e012      	b.n	8012ba6 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012b80:	68ba      	ldr	r2, [r7, #8]
 8012b82:	69fb      	ldr	r3, [r7, #28]
 8012b84:	4413      	add	r3, r2
 8012b86:	7819      	ldrb	r1, [r3, #0]
 8012b88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012b8a:	69fb      	ldr	r3, [r7, #28]
 8012b8c:	4413      	add	r3, r2
 8012b8e:	3334      	adds	r3, #52	@ 0x34
 8012b90:	460a      	mov	r2, r1
 8012b92:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8012b94:	68ba      	ldr	r2, [r7, #8]
 8012b96:	69fb      	ldr	r3, [r7, #28]
 8012b98:	4413      	add	r3, r2
 8012b9a:	781b      	ldrb	r3, [r3, #0]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d006      	beq.n	8012bae <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012ba0:	69fb      	ldr	r3, [r7, #28]
 8012ba2:	3301      	adds	r3, #1
 8012ba4:	61fb      	str	r3, [r7, #28]
 8012ba6:	69fb      	ldr	r3, [r7, #28]
 8012ba8:	2b0f      	cmp	r3, #15
 8012baa:	d9e9      	bls.n	8012b80 <prvInitialiseNewTask+0x60>
 8012bac:	e000      	b.n	8012bb0 <prvInitialiseNewTask+0x90>
		{
			break;
 8012bae:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bb2:	2200      	movs	r2, #0
 8012bb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bba:	2b06      	cmp	r3, #6
 8012bbc:	d901      	bls.n	8012bc2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012bbe:	2306      	movs	r3, #6
 8012bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012bcc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bd6:	3304      	adds	r3, #4
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f7ff f88f 	bl	8011cfc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012be0:	3318      	adds	r3, #24
 8012be2:	4618      	mov	r0, r3
 8012be4:	f7ff f88a 	bl	8011cfc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012bec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bf0:	f1c3 0207 	rsb	r2, r3, #7
 8012bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bf6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012bfc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c00:	2200      	movs	r2, #0
 8012c02:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c06:	2200      	movs	r2, #0
 8012c08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012c0c:	683a      	ldr	r2, [r7, #0]
 8012c0e:	68f9      	ldr	r1, [r7, #12]
 8012c10:	69b8      	ldr	r0, [r7, #24]
 8012c12:	f000 ffcd 	bl	8013bb0 <pxPortInitialiseStack>
 8012c16:	4602      	mov	r2, r0
 8012c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c1a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8012c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d002      	beq.n	8012c28 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012c26:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012c28:	bf00      	nop
 8012c2a:	3720      	adds	r7, #32
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	bd80      	pop	{r7, pc}

08012c30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	b082      	sub	sp, #8
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012c38:	f001 f8a8 	bl	8013d8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8012ce8 <prvAddNewTaskToReadyList+0xb8>)
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	3301      	adds	r3, #1
 8012c42:	4a29      	ldr	r2, [pc, #164]	@ (8012ce8 <prvAddNewTaskToReadyList+0xb8>)
 8012c44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012c46:	4b29      	ldr	r3, [pc, #164]	@ (8012cec <prvAddNewTaskToReadyList+0xbc>)
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d109      	bne.n	8012c62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012c4e:	4a27      	ldr	r2, [pc, #156]	@ (8012cec <prvAddNewTaskToReadyList+0xbc>)
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012c54:	4b24      	ldr	r3, [pc, #144]	@ (8012ce8 <prvAddNewTaskToReadyList+0xb8>)
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	2b01      	cmp	r3, #1
 8012c5a:	d110      	bne.n	8012c7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012c5c:	f000 fc66 	bl	801352c <prvInitialiseTaskLists>
 8012c60:	e00d      	b.n	8012c7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012c62:	4b23      	ldr	r3, [pc, #140]	@ (8012cf0 <prvAddNewTaskToReadyList+0xc0>)
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d109      	bne.n	8012c7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012c6a:	4b20      	ldr	r3, [pc, #128]	@ (8012cec <prvAddNewTaskToReadyList+0xbc>)
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c74:	429a      	cmp	r2, r3
 8012c76:	d802      	bhi.n	8012c7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012c78:	4a1c      	ldr	r2, [pc, #112]	@ (8012cec <prvAddNewTaskToReadyList+0xbc>)
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8012cf4 <prvAddNewTaskToReadyList+0xc4>)
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	3301      	adds	r3, #1
 8012c84:	4a1b      	ldr	r2, [pc, #108]	@ (8012cf4 <prvAddNewTaskToReadyList+0xc4>)
 8012c86:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c8c:	2201      	movs	r2, #1
 8012c8e:	409a      	lsls	r2, r3
 8012c90:	4b19      	ldr	r3, [pc, #100]	@ (8012cf8 <prvAddNewTaskToReadyList+0xc8>)
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	4313      	orrs	r3, r2
 8012c96:	4a18      	ldr	r2, [pc, #96]	@ (8012cf8 <prvAddNewTaskToReadyList+0xc8>)
 8012c98:	6013      	str	r3, [r2, #0]
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c9e:	4613      	mov	r3, r2
 8012ca0:	009b      	lsls	r3, r3, #2
 8012ca2:	4413      	add	r3, r2
 8012ca4:	009b      	lsls	r3, r3, #2
 8012ca6:	4a15      	ldr	r2, [pc, #84]	@ (8012cfc <prvAddNewTaskToReadyList+0xcc>)
 8012ca8:	441a      	add	r2, r3
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	3304      	adds	r3, #4
 8012cae:	4619      	mov	r1, r3
 8012cb0:	4610      	mov	r0, r2
 8012cb2:	f7ff f82f 	bl	8011d14 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012cb6:	f001 f899 	bl	8013dec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012cba:	4b0d      	ldr	r3, [pc, #52]	@ (8012cf0 <prvAddNewTaskToReadyList+0xc0>)
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d00e      	beq.n	8012ce0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8012cec <prvAddNewTaskToReadyList+0xbc>)
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ccc:	429a      	cmp	r2, r3
 8012cce:	d207      	bcs.n	8012ce0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8012d00 <prvAddNewTaskToReadyList+0xd0>)
 8012cd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012cd6:	601a      	str	r2, [r3, #0]
 8012cd8:	f3bf 8f4f 	dsb	sy
 8012cdc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012ce0:	bf00      	nop
 8012ce2:	3708      	adds	r7, #8
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	bd80      	pop	{r7, pc}
 8012ce8:	2000147c 	.word	0x2000147c
 8012cec:	2000137c 	.word	0x2000137c
 8012cf0:	20001488 	.word	0x20001488
 8012cf4:	20001498 	.word	0x20001498
 8012cf8:	20001484 	.word	0x20001484
 8012cfc:	20001380 	.word	0x20001380
 8012d00:	e000ed04 	.word	0xe000ed04

08012d04 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b08a      	sub	sp, #40	@ 0x28
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
 8012d0c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8012d0e:	2300      	movs	r3, #0
 8012d10:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d10b      	bne.n	8012d30 <vTaskDelayUntil+0x2c>
	__asm volatile
 8012d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d1c:	f383 8811 	msr	BASEPRI, r3
 8012d20:	f3bf 8f6f 	isb	sy
 8012d24:	f3bf 8f4f 	dsb	sy
 8012d28:	617b      	str	r3, [r7, #20]
}
 8012d2a:	bf00      	nop
 8012d2c:	bf00      	nop
 8012d2e:	e7fd      	b.n	8012d2c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8012d30:	683b      	ldr	r3, [r7, #0]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d10b      	bne.n	8012d4e <vTaskDelayUntil+0x4a>
	__asm volatile
 8012d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d3a:	f383 8811 	msr	BASEPRI, r3
 8012d3e:	f3bf 8f6f 	isb	sy
 8012d42:	f3bf 8f4f 	dsb	sy
 8012d46:	613b      	str	r3, [r7, #16]
}
 8012d48:	bf00      	nop
 8012d4a:	bf00      	nop
 8012d4c:	e7fd      	b.n	8012d4a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8012d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8012df8 <vTaskDelayUntil+0xf4>)
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d00b      	beq.n	8012d6e <vTaskDelayUntil+0x6a>
	__asm volatile
 8012d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d5a:	f383 8811 	msr	BASEPRI, r3
 8012d5e:	f3bf 8f6f 	isb	sy
 8012d62:	f3bf 8f4f 	dsb	sy
 8012d66:	60fb      	str	r3, [r7, #12]
}
 8012d68:	bf00      	nop
 8012d6a:	bf00      	nop
 8012d6c:	e7fd      	b.n	8012d6a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8012d6e:	f000 f8e1 	bl	8012f34 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8012d72:	4b22      	ldr	r3, [pc, #136]	@ (8012dfc <vTaskDelayUntil+0xf8>)
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	683a      	ldr	r2, [r7, #0]
 8012d7e:	4413      	add	r3, r2
 8012d80:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	6a3a      	ldr	r2, [r7, #32]
 8012d88:	429a      	cmp	r2, r3
 8012d8a:	d20b      	bcs.n	8012da4 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	69fa      	ldr	r2, [r7, #28]
 8012d92:	429a      	cmp	r2, r3
 8012d94:	d211      	bcs.n	8012dba <vTaskDelayUntil+0xb6>
 8012d96:	69fa      	ldr	r2, [r7, #28]
 8012d98:	6a3b      	ldr	r3, [r7, #32]
 8012d9a:	429a      	cmp	r2, r3
 8012d9c:	d90d      	bls.n	8012dba <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8012d9e:	2301      	movs	r3, #1
 8012da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8012da2:	e00a      	b.n	8012dba <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	69fa      	ldr	r2, [r7, #28]
 8012daa:	429a      	cmp	r2, r3
 8012dac:	d303      	bcc.n	8012db6 <vTaskDelayUntil+0xb2>
 8012dae:	69fa      	ldr	r2, [r7, #28]
 8012db0:	6a3b      	ldr	r3, [r7, #32]
 8012db2:	429a      	cmp	r2, r3
 8012db4:	d901      	bls.n	8012dba <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8012db6:	2301      	movs	r3, #1
 8012db8:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	69fa      	ldr	r2, [r7, #28]
 8012dbe:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8012dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d006      	beq.n	8012dd4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8012dc6:	69fa      	ldr	r2, [r7, #28]
 8012dc8:	6a3b      	ldr	r3, [r7, #32]
 8012dca:	1ad3      	subs	r3, r2, r3
 8012dcc:	2100      	movs	r1, #0
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f000 fe88 	bl	8013ae4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8012dd4:	f000 f8bc 	bl	8012f50 <xTaskResumeAll>
 8012dd8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012dda:	69bb      	ldr	r3, [r7, #24]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d107      	bne.n	8012df0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8012de0:	4b07      	ldr	r3, [pc, #28]	@ (8012e00 <vTaskDelayUntil+0xfc>)
 8012de2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012de6:	601a      	str	r2, [r3, #0]
 8012de8:	f3bf 8f4f 	dsb	sy
 8012dec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012df0:	bf00      	nop
 8012df2:	3728      	adds	r7, #40	@ 0x28
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd80      	pop	{r7, pc}
 8012df8:	200014a4 	.word	0x200014a4
 8012dfc:	20001480 	.word	0x20001480
 8012e00:	e000ed04 	.word	0xe000ed04

08012e04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b084      	sub	sp, #16
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d018      	beq.n	8012e48 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012e16:	4b14      	ldr	r3, [pc, #80]	@ (8012e68 <vTaskDelay+0x64>)
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d00b      	beq.n	8012e36 <vTaskDelay+0x32>
	__asm volatile
 8012e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e22:	f383 8811 	msr	BASEPRI, r3
 8012e26:	f3bf 8f6f 	isb	sy
 8012e2a:	f3bf 8f4f 	dsb	sy
 8012e2e:	60bb      	str	r3, [r7, #8]
}
 8012e30:	bf00      	nop
 8012e32:	bf00      	nop
 8012e34:	e7fd      	b.n	8012e32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012e36:	f000 f87d 	bl	8012f34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012e3a:	2100      	movs	r1, #0
 8012e3c:	6878      	ldr	r0, [r7, #4]
 8012e3e:	f000 fe51 	bl	8013ae4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012e42:	f000 f885 	bl	8012f50 <xTaskResumeAll>
 8012e46:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d107      	bne.n	8012e5e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8012e4e:	4b07      	ldr	r3, [pc, #28]	@ (8012e6c <vTaskDelay+0x68>)
 8012e50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012e54:	601a      	str	r2, [r3, #0]
 8012e56:	f3bf 8f4f 	dsb	sy
 8012e5a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012e5e:	bf00      	nop
 8012e60:	3710      	adds	r7, #16
 8012e62:	46bd      	mov	sp, r7
 8012e64:	bd80      	pop	{r7, pc}
 8012e66:	bf00      	nop
 8012e68:	200014a4 	.word	0x200014a4
 8012e6c:	e000ed04 	.word	0xe000ed04

08012e70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012e70:	b580      	push	{r7, lr}
 8012e72:	b08a      	sub	sp, #40	@ 0x28
 8012e74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012e76:	2300      	movs	r3, #0
 8012e78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012e7e:	463a      	mov	r2, r7
 8012e80:	1d39      	adds	r1, r7, #4
 8012e82:	f107 0308 	add.w	r3, r7, #8
 8012e86:	4618      	mov	r0, r3
 8012e88:	f7f1 fd26 	bl	80048d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012e8c:	6839      	ldr	r1, [r7, #0]
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	68ba      	ldr	r2, [r7, #8]
 8012e92:	9202      	str	r2, [sp, #8]
 8012e94:	9301      	str	r3, [sp, #4]
 8012e96:	2300      	movs	r3, #0
 8012e98:	9300      	str	r3, [sp, #0]
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	460a      	mov	r2, r1
 8012e9e:	491f      	ldr	r1, [pc, #124]	@ (8012f1c <vTaskStartScheduler+0xac>)
 8012ea0:	481f      	ldr	r0, [pc, #124]	@ (8012f20 <vTaskStartScheduler+0xb0>)
 8012ea2:	f7ff fd99 	bl	80129d8 <xTaskCreateStatic>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	4a1e      	ldr	r2, [pc, #120]	@ (8012f24 <vTaskStartScheduler+0xb4>)
 8012eaa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012eac:	4b1d      	ldr	r3, [pc, #116]	@ (8012f24 <vTaskStartScheduler+0xb4>)
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d002      	beq.n	8012eba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012eb4:	2301      	movs	r3, #1
 8012eb6:	617b      	str	r3, [r7, #20]
 8012eb8:	e001      	b.n	8012ebe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012eba:	2300      	movs	r3, #0
 8012ebc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012ebe:	697b      	ldr	r3, [r7, #20]
 8012ec0:	2b01      	cmp	r3, #1
 8012ec2:	d116      	bne.n	8012ef2 <vTaskStartScheduler+0x82>
	__asm volatile
 8012ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ec8:	f383 8811 	msr	BASEPRI, r3
 8012ecc:	f3bf 8f6f 	isb	sy
 8012ed0:	f3bf 8f4f 	dsb	sy
 8012ed4:	613b      	str	r3, [r7, #16]
}
 8012ed6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012ed8:	4b13      	ldr	r3, [pc, #76]	@ (8012f28 <vTaskStartScheduler+0xb8>)
 8012eda:	f04f 32ff 	mov.w	r2, #4294967295
 8012ede:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012ee0:	4b12      	ldr	r3, [pc, #72]	@ (8012f2c <vTaskStartScheduler+0xbc>)
 8012ee2:	2201      	movs	r2, #1
 8012ee4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8012ee6:	4b12      	ldr	r3, [pc, #72]	@ (8012f30 <vTaskStartScheduler+0xc0>)
 8012ee8:	2200      	movs	r2, #0
 8012eea:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012eec:	f000 fedc 	bl	8013ca8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012ef0:	e00f      	b.n	8012f12 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012ef2:	697b      	ldr	r3, [r7, #20]
 8012ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ef8:	d10b      	bne.n	8012f12 <vTaskStartScheduler+0xa2>
	__asm volatile
 8012efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012efe:	f383 8811 	msr	BASEPRI, r3
 8012f02:	f3bf 8f6f 	isb	sy
 8012f06:	f3bf 8f4f 	dsb	sy
 8012f0a:	60fb      	str	r3, [r7, #12]
}
 8012f0c:	bf00      	nop
 8012f0e:	bf00      	nop
 8012f10:	e7fd      	b.n	8012f0e <vTaskStartScheduler+0x9e>
}
 8012f12:	bf00      	nop
 8012f14:	3718      	adds	r7, #24
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}
 8012f1a:	bf00      	nop
 8012f1c:	0801526c 	.word	0x0801526c
 8012f20:	080134fd 	.word	0x080134fd
 8012f24:	200014a0 	.word	0x200014a0
 8012f28:	2000149c 	.word	0x2000149c
 8012f2c:	20001488 	.word	0x20001488
 8012f30:	20001480 	.word	0x20001480

08012f34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012f34:	b480      	push	{r7}
 8012f36:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012f38:	4b04      	ldr	r3, [pc, #16]	@ (8012f4c <vTaskSuspendAll+0x18>)
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	3301      	adds	r3, #1
 8012f3e:	4a03      	ldr	r2, [pc, #12]	@ (8012f4c <vTaskSuspendAll+0x18>)
 8012f40:	6013      	str	r3, [r2, #0]
}
 8012f42:	bf00      	nop
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bc80      	pop	{r7}
 8012f48:	4770      	bx	lr
 8012f4a:	bf00      	nop
 8012f4c:	200014a4 	.word	0x200014a4

08012f50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b084      	sub	sp, #16
 8012f54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012f56:	2300      	movs	r3, #0
 8012f58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012f5e:	4b42      	ldr	r3, [pc, #264]	@ (8013068 <xTaskResumeAll+0x118>)
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d10b      	bne.n	8012f7e <xTaskResumeAll+0x2e>
	__asm volatile
 8012f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f6a:	f383 8811 	msr	BASEPRI, r3
 8012f6e:	f3bf 8f6f 	isb	sy
 8012f72:	f3bf 8f4f 	dsb	sy
 8012f76:	603b      	str	r3, [r7, #0]
}
 8012f78:	bf00      	nop
 8012f7a:	bf00      	nop
 8012f7c:	e7fd      	b.n	8012f7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012f7e:	f000 ff05 	bl	8013d8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012f82:	4b39      	ldr	r3, [pc, #228]	@ (8013068 <xTaskResumeAll+0x118>)
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	3b01      	subs	r3, #1
 8012f88:	4a37      	ldr	r2, [pc, #220]	@ (8013068 <xTaskResumeAll+0x118>)
 8012f8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012f8c:	4b36      	ldr	r3, [pc, #216]	@ (8013068 <xTaskResumeAll+0x118>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d161      	bne.n	8013058 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012f94:	4b35      	ldr	r3, [pc, #212]	@ (801306c <xTaskResumeAll+0x11c>)
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d05d      	beq.n	8013058 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012f9c:	e02e      	b.n	8012ffc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8012f9e:	4b34      	ldr	r3, [pc, #208]	@ (8013070 <xTaskResumeAll+0x120>)
 8012fa0:	68db      	ldr	r3, [r3, #12]
 8012fa2:	68db      	ldr	r3, [r3, #12]
 8012fa4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	3318      	adds	r3, #24
 8012faa:	4618      	mov	r0, r3
 8012fac:	f7fe ff0d 	bl	8011dca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	3304      	adds	r3, #4
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	f7fe ff08 	bl	8011dca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fbe:	2201      	movs	r2, #1
 8012fc0:	409a      	lsls	r2, r3
 8012fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8013074 <xTaskResumeAll+0x124>)
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	4313      	orrs	r3, r2
 8012fc8:	4a2a      	ldr	r2, [pc, #168]	@ (8013074 <xTaskResumeAll+0x124>)
 8012fca:	6013      	str	r3, [r2, #0]
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012fd0:	4613      	mov	r3, r2
 8012fd2:	009b      	lsls	r3, r3, #2
 8012fd4:	4413      	add	r3, r2
 8012fd6:	009b      	lsls	r3, r3, #2
 8012fd8:	4a27      	ldr	r2, [pc, #156]	@ (8013078 <xTaskResumeAll+0x128>)
 8012fda:	441a      	add	r2, r3
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	3304      	adds	r3, #4
 8012fe0:	4619      	mov	r1, r3
 8012fe2:	4610      	mov	r0, r2
 8012fe4:	f7fe fe96 	bl	8011d14 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012fec:	4b23      	ldr	r3, [pc, #140]	@ (801307c <xTaskResumeAll+0x12c>)
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ff2:	429a      	cmp	r2, r3
 8012ff4:	d302      	bcc.n	8012ffc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8012ff6:	4b22      	ldr	r3, [pc, #136]	@ (8013080 <xTaskResumeAll+0x130>)
 8012ff8:	2201      	movs	r2, #1
 8012ffa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8013070 <xTaskResumeAll+0x120>)
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d1cc      	bne.n	8012f9e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d001      	beq.n	801300e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801300a:	f000 fb65 	bl	80136d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801300e:	4b1d      	ldr	r3, [pc, #116]	@ (8013084 <xTaskResumeAll+0x134>)
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d010      	beq.n	801303c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801301a:	f000 f845 	bl	80130a8 <xTaskIncrementTick>
 801301e:	4603      	mov	r3, r0
 8013020:	2b00      	cmp	r3, #0
 8013022:	d002      	beq.n	801302a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8013024:	4b16      	ldr	r3, [pc, #88]	@ (8013080 <xTaskResumeAll+0x130>)
 8013026:	2201      	movs	r2, #1
 8013028:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	3b01      	subs	r3, #1
 801302e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d1f1      	bne.n	801301a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8013036:	4b13      	ldr	r3, [pc, #76]	@ (8013084 <xTaskResumeAll+0x134>)
 8013038:	2200      	movs	r2, #0
 801303a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801303c:	4b10      	ldr	r3, [pc, #64]	@ (8013080 <xTaskResumeAll+0x130>)
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d009      	beq.n	8013058 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013044:	2301      	movs	r3, #1
 8013046:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013048:	4b0f      	ldr	r3, [pc, #60]	@ (8013088 <xTaskResumeAll+0x138>)
 801304a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801304e:	601a      	str	r2, [r3, #0]
 8013050:	f3bf 8f4f 	dsb	sy
 8013054:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013058:	f000 fec8 	bl	8013dec <vPortExitCritical>

	return xAlreadyYielded;
 801305c:	68bb      	ldr	r3, [r7, #8]
}
 801305e:	4618      	mov	r0, r3
 8013060:	3710      	adds	r7, #16
 8013062:	46bd      	mov	sp, r7
 8013064:	bd80      	pop	{r7, pc}
 8013066:	bf00      	nop
 8013068:	200014a4 	.word	0x200014a4
 801306c:	2000147c 	.word	0x2000147c
 8013070:	2000143c 	.word	0x2000143c
 8013074:	20001484 	.word	0x20001484
 8013078:	20001380 	.word	0x20001380
 801307c:	2000137c 	.word	0x2000137c
 8013080:	20001490 	.word	0x20001490
 8013084:	2000148c 	.word	0x2000148c
 8013088:	e000ed04 	.word	0xe000ed04

0801308c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801308c:	b480      	push	{r7}
 801308e:	b083      	sub	sp, #12
 8013090:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013092:	4b04      	ldr	r3, [pc, #16]	@ (80130a4 <xTaskGetTickCount+0x18>)
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013098:	687b      	ldr	r3, [r7, #4]
}
 801309a:	4618      	mov	r0, r3
 801309c:	370c      	adds	r7, #12
 801309e:	46bd      	mov	sp, r7
 80130a0:	bc80      	pop	{r7}
 80130a2:	4770      	bx	lr
 80130a4:	20001480 	.word	0x20001480

080130a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b086      	sub	sp, #24
 80130ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80130ae:	2300      	movs	r3, #0
 80130b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80130b2:	4b51      	ldr	r3, [pc, #324]	@ (80131f8 <xTaskIncrementTick+0x150>)
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	f040 808e 	bne.w	80131d8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80130bc:	4b4f      	ldr	r3, [pc, #316]	@ (80131fc <xTaskIncrementTick+0x154>)
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	3301      	adds	r3, #1
 80130c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80130c4:	4a4d      	ldr	r2, [pc, #308]	@ (80131fc <xTaskIncrementTick+0x154>)
 80130c6:	693b      	ldr	r3, [r7, #16]
 80130c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80130ca:	693b      	ldr	r3, [r7, #16]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d121      	bne.n	8013114 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80130d0:	4b4b      	ldr	r3, [pc, #300]	@ (8013200 <xTaskIncrementTick+0x158>)
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d00b      	beq.n	80130f2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80130da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130de:	f383 8811 	msr	BASEPRI, r3
 80130e2:	f3bf 8f6f 	isb	sy
 80130e6:	f3bf 8f4f 	dsb	sy
 80130ea:	603b      	str	r3, [r7, #0]
}
 80130ec:	bf00      	nop
 80130ee:	bf00      	nop
 80130f0:	e7fd      	b.n	80130ee <xTaskIncrementTick+0x46>
 80130f2:	4b43      	ldr	r3, [pc, #268]	@ (8013200 <xTaskIncrementTick+0x158>)
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	60fb      	str	r3, [r7, #12]
 80130f8:	4b42      	ldr	r3, [pc, #264]	@ (8013204 <xTaskIncrementTick+0x15c>)
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	4a40      	ldr	r2, [pc, #256]	@ (8013200 <xTaskIncrementTick+0x158>)
 80130fe:	6013      	str	r3, [r2, #0]
 8013100:	4a40      	ldr	r2, [pc, #256]	@ (8013204 <xTaskIncrementTick+0x15c>)
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	6013      	str	r3, [r2, #0]
 8013106:	4b40      	ldr	r3, [pc, #256]	@ (8013208 <xTaskIncrementTick+0x160>)
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	3301      	adds	r3, #1
 801310c:	4a3e      	ldr	r2, [pc, #248]	@ (8013208 <xTaskIncrementTick+0x160>)
 801310e:	6013      	str	r3, [r2, #0]
 8013110:	f000 fae2 	bl	80136d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013114:	4b3d      	ldr	r3, [pc, #244]	@ (801320c <xTaskIncrementTick+0x164>)
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	693a      	ldr	r2, [r7, #16]
 801311a:	429a      	cmp	r2, r3
 801311c:	d34d      	bcc.n	80131ba <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801311e:	4b38      	ldr	r3, [pc, #224]	@ (8013200 <xTaskIncrementTick+0x158>)
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d101      	bne.n	801312c <xTaskIncrementTick+0x84>
 8013128:	2301      	movs	r3, #1
 801312a:	e000      	b.n	801312e <xTaskIncrementTick+0x86>
 801312c:	2300      	movs	r3, #0
 801312e:	2b00      	cmp	r3, #0
 8013130:	d004      	beq.n	801313c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013132:	4b36      	ldr	r3, [pc, #216]	@ (801320c <xTaskIncrementTick+0x164>)
 8013134:	f04f 32ff 	mov.w	r2, #4294967295
 8013138:	601a      	str	r2, [r3, #0]
					break;
 801313a:	e03e      	b.n	80131ba <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801313c:	4b30      	ldr	r3, [pc, #192]	@ (8013200 <xTaskIncrementTick+0x158>)
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	68db      	ldr	r3, [r3, #12]
 8013142:	68db      	ldr	r3, [r3, #12]
 8013144:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013146:	68bb      	ldr	r3, [r7, #8]
 8013148:	685b      	ldr	r3, [r3, #4]
 801314a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801314c:	693a      	ldr	r2, [r7, #16]
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	429a      	cmp	r2, r3
 8013152:	d203      	bcs.n	801315c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013154:	4a2d      	ldr	r2, [pc, #180]	@ (801320c <xTaskIncrementTick+0x164>)
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	6013      	str	r3, [r2, #0]
						break;
 801315a:	e02e      	b.n	80131ba <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801315c:	68bb      	ldr	r3, [r7, #8]
 801315e:	3304      	adds	r3, #4
 8013160:	4618      	mov	r0, r3
 8013162:	f7fe fe32 	bl	8011dca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013166:	68bb      	ldr	r3, [r7, #8]
 8013168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801316a:	2b00      	cmp	r3, #0
 801316c:	d004      	beq.n	8013178 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801316e:	68bb      	ldr	r3, [r7, #8]
 8013170:	3318      	adds	r3, #24
 8013172:	4618      	mov	r0, r3
 8013174:	f7fe fe29 	bl	8011dca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013178:	68bb      	ldr	r3, [r7, #8]
 801317a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801317c:	2201      	movs	r2, #1
 801317e:	409a      	lsls	r2, r3
 8013180:	4b23      	ldr	r3, [pc, #140]	@ (8013210 <xTaskIncrementTick+0x168>)
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	4313      	orrs	r3, r2
 8013186:	4a22      	ldr	r2, [pc, #136]	@ (8013210 <xTaskIncrementTick+0x168>)
 8013188:	6013      	str	r3, [r2, #0]
 801318a:	68bb      	ldr	r3, [r7, #8]
 801318c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801318e:	4613      	mov	r3, r2
 8013190:	009b      	lsls	r3, r3, #2
 8013192:	4413      	add	r3, r2
 8013194:	009b      	lsls	r3, r3, #2
 8013196:	4a1f      	ldr	r2, [pc, #124]	@ (8013214 <xTaskIncrementTick+0x16c>)
 8013198:	441a      	add	r2, r3
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	3304      	adds	r3, #4
 801319e:	4619      	mov	r1, r3
 80131a0:	4610      	mov	r0, r2
 80131a2:	f7fe fdb7 	bl	8011d14 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80131a6:	68bb      	ldr	r3, [r7, #8]
 80131a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80131aa:	4b1b      	ldr	r3, [pc, #108]	@ (8013218 <xTaskIncrementTick+0x170>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131b0:	429a      	cmp	r2, r3
 80131b2:	d3b4      	bcc.n	801311e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80131b4:	2301      	movs	r3, #1
 80131b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80131b8:	e7b1      	b.n	801311e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80131ba:	4b17      	ldr	r3, [pc, #92]	@ (8013218 <xTaskIncrementTick+0x170>)
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80131c0:	4914      	ldr	r1, [pc, #80]	@ (8013214 <xTaskIncrementTick+0x16c>)
 80131c2:	4613      	mov	r3, r2
 80131c4:	009b      	lsls	r3, r3, #2
 80131c6:	4413      	add	r3, r2
 80131c8:	009b      	lsls	r3, r3, #2
 80131ca:	440b      	add	r3, r1
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	2b01      	cmp	r3, #1
 80131d0:	d907      	bls.n	80131e2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80131d2:	2301      	movs	r3, #1
 80131d4:	617b      	str	r3, [r7, #20]
 80131d6:	e004      	b.n	80131e2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80131d8:	4b10      	ldr	r3, [pc, #64]	@ (801321c <xTaskIncrementTick+0x174>)
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	3301      	adds	r3, #1
 80131de:	4a0f      	ldr	r2, [pc, #60]	@ (801321c <xTaskIncrementTick+0x174>)
 80131e0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80131e2:	4b0f      	ldr	r3, [pc, #60]	@ (8013220 <xTaskIncrementTick+0x178>)
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d001      	beq.n	80131ee <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80131ea:	2301      	movs	r3, #1
 80131ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80131ee:	697b      	ldr	r3, [r7, #20]
}
 80131f0:	4618      	mov	r0, r3
 80131f2:	3718      	adds	r7, #24
 80131f4:	46bd      	mov	sp, r7
 80131f6:	bd80      	pop	{r7, pc}
 80131f8:	200014a4 	.word	0x200014a4
 80131fc:	20001480 	.word	0x20001480
 8013200:	20001434 	.word	0x20001434
 8013204:	20001438 	.word	0x20001438
 8013208:	20001494 	.word	0x20001494
 801320c:	2000149c 	.word	0x2000149c
 8013210:	20001484 	.word	0x20001484
 8013214:	20001380 	.word	0x20001380
 8013218:	2000137c 	.word	0x2000137c
 801321c:	2000148c 	.word	0x2000148c
 8013220:	20001490 	.word	0x20001490

08013224 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013224:	b480      	push	{r7}
 8013226:	b087      	sub	sp, #28
 8013228:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801322a:	4b27      	ldr	r3, [pc, #156]	@ (80132c8 <vTaskSwitchContext+0xa4>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d003      	beq.n	801323a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013232:	4b26      	ldr	r3, [pc, #152]	@ (80132cc <vTaskSwitchContext+0xa8>)
 8013234:	2201      	movs	r2, #1
 8013236:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013238:	e040      	b.n	80132bc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 801323a:	4b24      	ldr	r3, [pc, #144]	@ (80132cc <vTaskSwitchContext+0xa8>)
 801323c:	2200      	movs	r2, #0
 801323e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8013240:	4b23      	ldr	r3, [pc, #140]	@ (80132d0 <vTaskSwitchContext+0xac>)
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	fab3 f383 	clz	r3, r3
 801324c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801324e:	7afb      	ldrb	r3, [r7, #11]
 8013250:	f1c3 031f 	rsb	r3, r3, #31
 8013254:	617b      	str	r3, [r7, #20]
 8013256:	491f      	ldr	r1, [pc, #124]	@ (80132d4 <vTaskSwitchContext+0xb0>)
 8013258:	697a      	ldr	r2, [r7, #20]
 801325a:	4613      	mov	r3, r2
 801325c:	009b      	lsls	r3, r3, #2
 801325e:	4413      	add	r3, r2
 8013260:	009b      	lsls	r3, r3, #2
 8013262:	440b      	add	r3, r1
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d10b      	bne.n	8013282 <vTaskSwitchContext+0x5e>
	__asm volatile
 801326a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801326e:	f383 8811 	msr	BASEPRI, r3
 8013272:	f3bf 8f6f 	isb	sy
 8013276:	f3bf 8f4f 	dsb	sy
 801327a:	607b      	str	r3, [r7, #4]
}
 801327c:	bf00      	nop
 801327e:	bf00      	nop
 8013280:	e7fd      	b.n	801327e <vTaskSwitchContext+0x5a>
 8013282:	697a      	ldr	r2, [r7, #20]
 8013284:	4613      	mov	r3, r2
 8013286:	009b      	lsls	r3, r3, #2
 8013288:	4413      	add	r3, r2
 801328a:	009b      	lsls	r3, r3, #2
 801328c:	4a11      	ldr	r2, [pc, #68]	@ (80132d4 <vTaskSwitchContext+0xb0>)
 801328e:	4413      	add	r3, r2
 8013290:	613b      	str	r3, [r7, #16]
 8013292:	693b      	ldr	r3, [r7, #16]
 8013294:	685b      	ldr	r3, [r3, #4]
 8013296:	685a      	ldr	r2, [r3, #4]
 8013298:	693b      	ldr	r3, [r7, #16]
 801329a:	605a      	str	r2, [r3, #4]
 801329c:	693b      	ldr	r3, [r7, #16]
 801329e:	685a      	ldr	r2, [r3, #4]
 80132a0:	693b      	ldr	r3, [r7, #16]
 80132a2:	3308      	adds	r3, #8
 80132a4:	429a      	cmp	r2, r3
 80132a6:	d104      	bne.n	80132b2 <vTaskSwitchContext+0x8e>
 80132a8:	693b      	ldr	r3, [r7, #16]
 80132aa:	685b      	ldr	r3, [r3, #4]
 80132ac:	685a      	ldr	r2, [r3, #4]
 80132ae:	693b      	ldr	r3, [r7, #16]
 80132b0:	605a      	str	r2, [r3, #4]
 80132b2:	693b      	ldr	r3, [r7, #16]
 80132b4:	685b      	ldr	r3, [r3, #4]
 80132b6:	68db      	ldr	r3, [r3, #12]
 80132b8:	4a07      	ldr	r2, [pc, #28]	@ (80132d8 <vTaskSwitchContext+0xb4>)
 80132ba:	6013      	str	r3, [r2, #0]
}
 80132bc:	bf00      	nop
 80132be:	371c      	adds	r7, #28
 80132c0:	46bd      	mov	sp, r7
 80132c2:	bc80      	pop	{r7}
 80132c4:	4770      	bx	lr
 80132c6:	bf00      	nop
 80132c8:	200014a4 	.word	0x200014a4
 80132cc:	20001490 	.word	0x20001490
 80132d0:	20001484 	.word	0x20001484
 80132d4:	20001380 	.word	0x20001380
 80132d8:	2000137c 	.word	0x2000137c

080132dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	b084      	sub	sp, #16
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
 80132e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d10b      	bne.n	8013304 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80132ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132f0:	f383 8811 	msr	BASEPRI, r3
 80132f4:	f3bf 8f6f 	isb	sy
 80132f8:	f3bf 8f4f 	dsb	sy
 80132fc:	60fb      	str	r3, [r7, #12]
}
 80132fe:	bf00      	nop
 8013300:	bf00      	nop
 8013302:	e7fd      	b.n	8013300 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013304:	4b07      	ldr	r3, [pc, #28]	@ (8013324 <vTaskPlaceOnEventList+0x48>)
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	3318      	adds	r3, #24
 801330a:	4619      	mov	r1, r3
 801330c:	6878      	ldr	r0, [r7, #4]
 801330e:	f7fe fd24 	bl	8011d5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013312:	2101      	movs	r1, #1
 8013314:	6838      	ldr	r0, [r7, #0]
 8013316:	f000 fbe5 	bl	8013ae4 <prvAddCurrentTaskToDelayedList>
}
 801331a:	bf00      	nop
 801331c:	3710      	adds	r7, #16
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}
 8013322:	bf00      	nop
 8013324:	2000137c 	.word	0x2000137c

08013328 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013328:	b580      	push	{r7, lr}
 801332a:	b086      	sub	sp, #24
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	68db      	ldr	r3, [r3, #12]
 8013334:	68db      	ldr	r3, [r3, #12]
 8013336:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013338:	693b      	ldr	r3, [r7, #16]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d10b      	bne.n	8013356 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801333e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013342:	f383 8811 	msr	BASEPRI, r3
 8013346:	f3bf 8f6f 	isb	sy
 801334a:	f3bf 8f4f 	dsb	sy
 801334e:	60fb      	str	r3, [r7, #12]
}
 8013350:	bf00      	nop
 8013352:	bf00      	nop
 8013354:	e7fd      	b.n	8013352 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013356:	693b      	ldr	r3, [r7, #16]
 8013358:	3318      	adds	r3, #24
 801335a:	4618      	mov	r0, r3
 801335c:	f7fe fd35 	bl	8011dca <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013360:	4b1d      	ldr	r3, [pc, #116]	@ (80133d8 <xTaskRemoveFromEventList+0xb0>)
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d11c      	bne.n	80133a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013368:	693b      	ldr	r3, [r7, #16]
 801336a:	3304      	adds	r3, #4
 801336c:	4618      	mov	r0, r3
 801336e:	f7fe fd2c 	bl	8011dca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013372:	693b      	ldr	r3, [r7, #16]
 8013374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013376:	2201      	movs	r2, #1
 8013378:	409a      	lsls	r2, r3
 801337a:	4b18      	ldr	r3, [pc, #96]	@ (80133dc <xTaskRemoveFromEventList+0xb4>)
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	4313      	orrs	r3, r2
 8013380:	4a16      	ldr	r2, [pc, #88]	@ (80133dc <xTaskRemoveFromEventList+0xb4>)
 8013382:	6013      	str	r3, [r2, #0]
 8013384:	693b      	ldr	r3, [r7, #16]
 8013386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013388:	4613      	mov	r3, r2
 801338a:	009b      	lsls	r3, r3, #2
 801338c:	4413      	add	r3, r2
 801338e:	009b      	lsls	r3, r3, #2
 8013390:	4a13      	ldr	r2, [pc, #76]	@ (80133e0 <xTaskRemoveFromEventList+0xb8>)
 8013392:	441a      	add	r2, r3
 8013394:	693b      	ldr	r3, [r7, #16]
 8013396:	3304      	adds	r3, #4
 8013398:	4619      	mov	r1, r3
 801339a:	4610      	mov	r0, r2
 801339c:	f7fe fcba 	bl	8011d14 <vListInsertEnd>
 80133a0:	e005      	b.n	80133ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80133a2:	693b      	ldr	r3, [r7, #16]
 80133a4:	3318      	adds	r3, #24
 80133a6:	4619      	mov	r1, r3
 80133a8:	480e      	ldr	r0, [pc, #56]	@ (80133e4 <xTaskRemoveFromEventList+0xbc>)
 80133aa:	f7fe fcb3 	bl	8011d14 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80133ae:	693b      	ldr	r3, [r7, #16]
 80133b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80133b2:	4b0d      	ldr	r3, [pc, #52]	@ (80133e8 <xTaskRemoveFromEventList+0xc0>)
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133b8:	429a      	cmp	r2, r3
 80133ba:	d905      	bls.n	80133c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80133bc:	2301      	movs	r3, #1
 80133be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80133c0:	4b0a      	ldr	r3, [pc, #40]	@ (80133ec <xTaskRemoveFromEventList+0xc4>)
 80133c2:	2201      	movs	r2, #1
 80133c4:	601a      	str	r2, [r3, #0]
 80133c6:	e001      	b.n	80133cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80133c8:	2300      	movs	r3, #0
 80133ca:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80133cc:	697b      	ldr	r3, [r7, #20]
}
 80133ce:	4618      	mov	r0, r3
 80133d0:	3718      	adds	r7, #24
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bd80      	pop	{r7, pc}
 80133d6:	bf00      	nop
 80133d8:	200014a4 	.word	0x200014a4
 80133dc:	20001484 	.word	0x20001484
 80133e0:	20001380 	.word	0x20001380
 80133e4:	2000143c 	.word	0x2000143c
 80133e8:	2000137c 	.word	0x2000137c
 80133ec:	20001490 	.word	0x20001490

080133f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80133f0:	b480      	push	{r7}
 80133f2:	b083      	sub	sp, #12
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80133f8:	4b06      	ldr	r3, [pc, #24]	@ (8013414 <vTaskInternalSetTimeOutState+0x24>)
 80133fa:	681a      	ldr	r2, [r3, #0]
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013400:	4b05      	ldr	r3, [pc, #20]	@ (8013418 <vTaskInternalSetTimeOutState+0x28>)
 8013402:	681a      	ldr	r2, [r3, #0]
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	605a      	str	r2, [r3, #4]
}
 8013408:	bf00      	nop
 801340a:	370c      	adds	r7, #12
 801340c:	46bd      	mov	sp, r7
 801340e:	bc80      	pop	{r7}
 8013410:	4770      	bx	lr
 8013412:	bf00      	nop
 8013414:	20001494 	.word	0x20001494
 8013418:	20001480 	.word	0x20001480

0801341c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b088      	sub	sp, #32
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
 8013424:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d10b      	bne.n	8013444 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 801342c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013430:	f383 8811 	msr	BASEPRI, r3
 8013434:	f3bf 8f6f 	isb	sy
 8013438:	f3bf 8f4f 	dsb	sy
 801343c:	613b      	str	r3, [r7, #16]
}
 801343e:	bf00      	nop
 8013440:	bf00      	nop
 8013442:	e7fd      	b.n	8013440 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8013444:	683b      	ldr	r3, [r7, #0]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d10b      	bne.n	8013462 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801344a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801344e:	f383 8811 	msr	BASEPRI, r3
 8013452:	f3bf 8f6f 	isb	sy
 8013456:	f3bf 8f4f 	dsb	sy
 801345a:	60fb      	str	r3, [r7, #12]
}
 801345c:	bf00      	nop
 801345e:	bf00      	nop
 8013460:	e7fd      	b.n	801345e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8013462:	f000 fc93 	bl	8013d8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013466:	4b1d      	ldr	r3, [pc, #116]	@ (80134dc <xTaskCheckForTimeOut+0xc0>)
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	685b      	ldr	r3, [r3, #4]
 8013470:	69ba      	ldr	r2, [r7, #24]
 8013472:	1ad3      	subs	r3, r2, r3
 8013474:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801347e:	d102      	bne.n	8013486 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013480:	2300      	movs	r3, #0
 8013482:	61fb      	str	r3, [r7, #28]
 8013484:	e023      	b.n	80134ce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	681a      	ldr	r2, [r3, #0]
 801348a:	4b15      	ldr	r3, [pc, #84]	@ (80134e0 <xTaskCheckForTimeOut+0xc4>)
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	429a      	cmp	r2, r3
 8013490:	d007      	beq.n	80134a2 <xTaskCheckForTimeOut+0x86>
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	685b      	ldr	r3, [r3, #4]
 8013496:	69ba      	ldr	r2, [r7, #24]
 8013498:	429a      	cmp	r2, r3
 801349a:	d302      	bcc.n	80134a2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801349c:	2301      	movs	r3, #1
 801349e:	61fb      	str	r3, [r7, #28]
 80134a0:	e015      	b.n	80134ce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80134a2:	683b      	ldr	r3, [r7, #0]
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	697a      	ldr	r2, [r7, #20]
 80134a8:	429a      	cmp	r2, r3
 80134aa:	d20b      	bcs.n	80134c4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80134ac:	683b      	ldr	r3, [r7, #0]
 80134ae:	681a      	ldr	r2, [r3, #0]
 80134b0:	697b      	ldr	r3, [r7, #20]
 80134b2:	1ad2      	subs	r2, r2, r3
 80134b4:	683b      	ldr	r3, [r7, #0]
 80134b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80134b8:	6878      	ldr	r0, [r7, #4]
 80134ba:	f7ff ff99 	bl	80133f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80134be:	2300      	movs	r3, #0
 80134c0:	61fb      	str	r3, [r7, #28]
 80134c2:	e004      	b.n	80134ce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80134c4:	683b      	ldr	r3, [r7, #0]
 80134c6:	2200      	movs	r2, #0
 80134c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80134ca:	2301      	movs	r3, #1
 80134cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80134ce:	f000 fc8d 	bl	8013dec <vPortExitCritical>

	return xReturn;
 80134d2:	69fb      	ldr	r3, [r7, #28]
}
 80134d4:	4618      	mov	r0, r3
 80134d6:	3720      	adds	r7, #32
 80134d8:	46bd      	mov	sp, r7
 80134da:	bd80      	pop	{r7, pc}
 80134dc:	20001480 	.word	0x20001480
 80134e0:	20001494 	.word	0x20001494

080134e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80134e4:	b480      	push	{r7}
 80134e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80134e8:	4b03      	ldr	r3, [pc, #12]	@ (80134f8 <vTaskMissedYield+0x14>)
 80134ea:	2201      	movs	r2, #1
 80134ec:	601a      	str	r2, [r3, #0]
}
 80134ee:	bf00      	nop
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bc80      	pop	{r7}
 80134f4:	4770      	bx	lr
 80134f6:	bf00      	nop
 80134f8:	20001490 	.word	0x20001490

080134fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80134fc:	b580      	push	{r7, lr}
 80134fe:	b082      	sub	sp, #8
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013504:	f000 f852 	bl	80135ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013508:	4b06      	ldr	r3, [pc, #24]	@ (8013524 <prvIdleTask+0x28>)
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	2b01      	cmp	r3, #1
 801350e:	d9f9      	bls.n	8013504 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013510:	4b05      	ldr	r3, [pc, #20]	@ (8013528 <prvIdleTask+0x2c>)
 8013512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013516:	601a      	str	r2, [r3, #0]
 8013518:	f3bf 8f4f 	dsb	sy
 801351c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013520:	e7f0      	b.n	8013504 <prvIdleTask+0x8>
 8013522:	bf00      	nop
 8013524:	20001380 	.word	0x20001380
 8013528:	e000ed04 	.word	0xe000ed04

0801352c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801352c:	b580      	push	{r7, lr}
 801352e:	b082      	sub	sp, #8
 8013530:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013532:	2300      	movs	r3, #0
 8013534:	607b      	str	r3, [r7, #4]
 8013536:	e00c      	b.n	8013552 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013538:	687a      	ldr	r2, [r7, #4]
 801353a:	4613      	mov	r3, r2
 801353c:	009b      	lsls	r3, r3, #2
 801353e:	4413      	add	r3, r2
 8013540:	009b      	lsls	r3, r3, #2
 8013542:	4a12      	ldr	r2, [pc, #72]	@ (801358c <prvInitialiseTaskLists+0x60>)
 8013544:	4413      	add	r3, r2
 8013546:	4618      	mov	r0, r3
 8013548:	f7fe fbb9 	bl	8011cbe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	3301      	adds	r3, #1
 8013550:	607b      	str	r3, [r7, #4]
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	2b06      	cmp	r3, #6
 8013556:	d9ef      	bls.n	8013538 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013558:	480d      	ldr	r0, [pc, #52]	@ (8013590 <prvInitialiseTaskLists+0x64>)
 801355a:	f7fe fbb0 	bl	8011cbe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801355e:	480d      	ldr	r0, [pc, #52]	@ (8013594 <prvInitialiseTaskLists+0x68>)
 8013560:	f7fe fbad 	bl	8011cbe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013564:	480c      	ldr	r0, [pc, #48]	@ (8013598 <prvInitialiseTaskLists+0x6c>)
 8013566:	f7fe fbaa 	bl	8011cbe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801356a:	480c      	ldr	r0, [pc, #48]	@ (801359c <prvInitialiseTaskLists+0x70>)
 801356c:	f7fe fba7 	bl	8011cbe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013570:	480b      	ldr	r0, [pc, #44]	@ (80135a0 <prvInitialiseTaskLists+0x74>)
 8013572:	f7fe fba4 	bl	8011cbe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013576:	4b0b      	ldr	r3, [pc, #44]	@ (80135a4 <prvInitialiseTaskLists+0x78>)
 8013578:	4a05      	ldr	r2, [pc, #20]	@ (8013590 <prvInitialiseTaskLists+0x64>)
 801357a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801357c:	4b0a      	ldr	r3, [pc, #40]	@ (80135a8 <prvInitialiseTaskLists+0x7c>)
 801357e:	4a05      	ldr	r2, [pc, #20]	@ (8013594 <prvInitialiseTaskLists+0x68>)
 8013580:	601a      	str	r2, [r3, #0]
}
 8013582:	bf00      	nop
 8013584:	3708      	adds	r7, #8
 8013586:	46bd      	mov	sp, r7
 8013588:	bd80      	pop	{r7, pc}
 801358a:	bf00      	nop
 801358c:	20001380 	.word	0x20001380
 8013590:	2000140c 	.word	0x2000140c
 8013594:	20001420 	.word	0x20001420
 8013598:	2000143c 	.word	0x2000143c
 801359c:	20001450 	.word	0x20001450
 80135a0:	20001468 	.word	0x20001468
 80135a4:	20001434 	.word	0x20001434
 80135a8:	20001438 	.word	0x20001438

080135ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b082      	sub	sp, #8
 80135b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80135b2:	e019      	b.n	80135e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80135b4:	f000 fbea 	bl	8013d8c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80135b8:	4b10      	ldr	r3, [pc, #64]	@ (80135fc <prvCheckTasksWaitingTermination+0x50>)
 80135ba:	68db      	ldr	r3, [r3, #12]
 80135bc:	68db      	ldr	r3, [r3, #12]
 80135be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	3304      	adds	r3, #4
 80135c4:	4618      	mov	r0, r3
 80135c6:	f7fe fc00 	bl	8011dca <uxListRemove>
				--uxCurrentNumberOfTasks;
 80135ca:	4b0d      	ldr	r3, [pc, #52]	@ (8013600 <prvCheckTasksWaitingTermination+0x54>)
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	3b01      	subs	r3, #1
 80135d0:	4a0b      	ldr	r2, [pc, #44]	@ (8013600 <prvCheckTasksWaitingTermination+0x54>)
 80135d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80135d4:	4b0b      	ldr	r3, [pc, #44]	@ (8013604 <prvCheckTasksWaitingTermination+0x58>)
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	3b01      	subs	r3, #1
 80135da:	4a0a      	ldr	r2, [pc, #40]	@ (8013604 <prvCheckTasksWaitingTermination+0x58>)
 80135dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80135de:	f000 fc05 	bl	8013dec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80135e2:	6878      	ldr	r0, [r7, #4]
 80135e4:	f000 f848 	bl	8013678 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80135e8:	4b06      	ldr	r3, [pc, #24]	@ (8013604 <prvCheckTasksWaitingTermination+0x58>)
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d1e1      	bne.n	80135b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80135f0:	bf00      	nop
 80135f2:	bf00      	nop
 80135f4:	3708      	adds	r7, #8
 80135f6:	46bd      	mov	sp, r7
 80135f8:	bd80      	pop	{r7, pc}
 80135fa:	bf00      	nop
 80135fc:	20001450 	.word	0x20001450
 8013600:	2000147c 	.word	0x2000147c
 8013604:	20001464 	.word	0x20001464

08013608 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8013608:	b480      	push	{r7}
 801360a:	b085      	sub	sp, #20
 801360c:	af00      	add	r7, sp, #0
 801360e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8013610:	2300      	movs	r3, #0
 8013612:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8013614:	e005      	b.n	8013622 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	3301      	adds	r3, #1
 801361a:	607b      	str	r3, [r7, #4]
			ulCount++;
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	3301      	adds	r3, #1
 8013620:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	781b      	ldrb	r3, [r3, #0]
 8013626:	2ba5      	cmp	r3, #165	@ 0xa5
 8013628:	d0f5      	beq.n	8013616 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	089b      	lsrs	r3, r3, #2
 801362e:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	b29b      	uxth	r3, r3
	}
 8013634:	4618      	mov	r0, r3
 8013636:	3714      	adds	r7, #20
 8013638:	46bd      	mov	sp, r7
 801363a:	bc80      	pop	{r7}
 801363c:	4770      	bx	lr
	...

08013640 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8013640:	b580      	push	{r7, lr}
 8013642:	b086      	sub	sp, #24
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d102      	bne.n	8013654 <uxTaskGetStackHighWaterMark+0x14>
 801364e:	4b09      	ldr	r3, [pc, #36]	@ (8013674 <uxTaskGetStackHighWaterMark+0x34>)
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	e000      	b.n	8013656 <uxTaskGetStackHighWaterMark+0x16>
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8013658:	697b      	ldr	r3, [r7, #20]
 801365a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801365c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 801365e:	6938      	ldr	r0, [r7, #16]
 8013660:	f7ff ffd2 	bl	8013608 <prvTaskCheckFreeStackSpace>
 8013664:	4603      	mov	r3, r0
 8013666:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8013668:	68fb      	ldr	r3, [r7, #12]
	}
 801366a:	4618      	mov	r0, r3
 801366c:	3718      	adds	r7, #24
 801366e:	46bd      	mov	sp, r7
 8013670:	bd80      	pop	{r7, pc}
 8013672:	bf00      	nop
 8013674:	2000137c 	.word	0x2000137c

08013678 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013678:	b580      	push	{r7, lr}
 801367a:	b084      	sub	sp, #16
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8013686:	2b00      	cmp	r3, #0
 8013688:	d108      	bne.n	801369c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801368e:	4618      	mov	r0, r3
 8013690:	f000 fd46 	bl	8014120 <vPortFree>
				vPortFree( pxTCB );
 8013694:	6878      	ldr	r0, [r7, #4]
 8013696:	f000 fd43 	bl	8014120 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801369a:	e019      	b.n	80136d0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80136a2:	2b01      	cmp	r3, #1
 80136a4:	d103      	bne.n	80136ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80136a6:	6878      	ldr	r0, [r7, #4]
 80136a8:	f000 fd3a 	bl	8014120 <vPortFree>
	}
 80136ac:	e010      	b.n	80136d0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80136b4:	2b02      	cmp	r3, #2
 80136b6:	d00b      	beq.n	80136d0 <prvDeleteTCB+0x58>
	__asm volatile
 80136b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136bc:	f383 8811 	msr	BASEPRI, r3
 80136c0:	f3bf 8f6f 	isb	sy
 80136c4:	f3bf 8f4f 	dsb	sy
 80136c8:	60fb      	str	r3, [r7, #12]
}
 80136ca:	bf00      	nop
 80136cc:	bf00      	nop
 80136ce:	e7fd      	b.n	80136cc <prvDeleteTCB+0x54>
	}
 80136d0:	bf00      	nop
 80136d2:	3710      	adds	r7, #16
 80136d4:	46bd      	mov	sp, r7
 80136d6:	bd80      	pop	{r7, pc}

080136d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80136d8:	b480      	push	{r7}
 80136da:	b083      	sub	sp, #12
 80136dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80136de:	4b0e      	ldr	r3, [pc, #56]	@ (8013718 <prvResetNextTaskUnblockTime+0x40>)
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d101      	bne.n	80136ec <prvResetNextTaskUnblockTime+0x14>
 80136e8:	2301      	movs	r3, #1
 80136ea:	e000      	b.n	80136ee <prvResetNextTaskUnblockTime+0x16>
 80136ec:	2300      	movs	r3, #0
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d004      	beq.n	80136fc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80136f2:	4b0a      	ldr	r3, [pc, #40]	@ (801371c <prvResetNextTaskUnblockTime+0x44>)
 80136f4:	f04f 32ff 	mov.w	r2, #4294967295
 80136f8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80136fa:	e008      	b.n	801370e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80136fc:	4b06      	ldr	r3, [pc, #24]	@ (8013718 <prvResetNextTaskUnblockTime+0x40>)
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	68db      	ldr	r3, [r3, #12]
 8013702:	68db      	ldr	r3, [r3, #12]
 8013704:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	685b      	ldr	r3, [r3, #4]
 801370a:	4a04      	ldr	r2, [pc, #16]	@ (801371c <prvResetNextTaskUnblockTime+0x44>)
 801370c:	6013      	str	r3, [r2, #0]
}
 801370e:	bf00      	nop
 8013710:	370c      	adds	r7, #12
 8013712:	46bd      	mov	sp, r7
 8013714:	bc80      	pop	{r7}
 8013716:	4770      	bx	lr
 8013718:	20001434 	.word	0x20001434
 801371c:	2000149c 	.word	0x2000149c

08013720 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013720:	b480      	push	{r7}
 8013722:	b083      	sub	sp, #12
 8013724:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013726:	4b0b      	ldr	r3, [pc, #44]	@ (8013754 <xTaskGetSchedulerState+0x34>)
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d102      	bne.n	8013734 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801372e:	2301      	movs	r3, #1
 8013730:	607b      	str	r3, [r7, #4]
 8013732:	e008      	b.n	8013746 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013734:	4b08      	ldr	r3, [pc, #32]	@ (8013758 <xTaskGetSchedulerState+0x38>)
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d102      	bne.n	8013742 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801373c:	2302      	movs	r3, #2
 801373e:	607b      	str	r3, [r7, #4]
 8013740:	e001      	b.n	8013746 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013742:	2300      	movs	r3, #0
 8013744:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013746:	687b      	ldr	r3, [r7, #4]
	}
 8013748:	4618      	mov	r0, r3
 801374a:	370c      	adds	r7, #12
 801374c:	46bd      	mov	sp, r7
 801374e:	bc80      	pop	{r7}
 8013750:	4770      	bx	lr
 8013752:	bf00      	nop
 8013754:	20001488 	.word	0x20001488
 8013758:	200014a4 	.word	0x200014a4

0801375c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801375c:	b580      	push	{r7, lr}
 801375e:	b084      	sub	sp, #16
 8013760:	af00      	add	r7, sp, #0
 8013762:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013768:	2300      	movs	r3, #0
 801376a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d06e      	beq.n	8013850 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013772:	68bb      	ldr	r3, [r7, #8]
 8013774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013776:	4b39      	ldr	r3, [pc, #228]	@ (801385c <xTaskPriorityInherit+0x100>)
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801377c:	429a      	cmp	r2, r3
 801377e:	d25e      	bcs.n	801383e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013780:	68bb      	ldr	r3, [r7, #8]
 8013782:	699b      	ldr	r3, [r3, #24]
 8013784:	2b00      	cmp	r3, #0
 8013786:	db06      	blt.n	8013796 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013788:	4b34      	ldr	r3, [pc, #208]	@ (801385c <xTaskPriorityInherit+0x100>)
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801378e:	f1c3 0207 	rsb	r2, r3, #7
 8013792:	68bb      	ldr	r3, [r7, #8]
 8013794:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013796:	68bb      	ldr	r3, [r7, #8]
 8013798:	6959      	ldr	r1, [r3, #20]
 801379a:	68bb      	ldr	r3, [r7, #8]
 801379c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801379e:	4613      	mov	r3, r2
 80137a0:	009b      	lsls	r3, r3, #2
 80137a2:	4413      	add	r3, r2
 80137a4:	009b      	lsls	r3, r3, #2
 80137a6:	4a2e      	ldr	r2, [pc, #184]	@ (8013860 <xTaskPriorityInherit+0x104>)
 80137a8:	4413      	add	r3, r2
 80137aa:	4299      	cmp	r1, r3
 80137ac:	d101      	bne.n	80137b2 <xTaskPriorityInherit+0x56>
 80137ae:	2301      	movs	r3, #1
 80137b0:	e000      	b.n	80137b4 <xTaskPriorityInherit+0x58>
 80137b2:	2300      	movs	r3, #0
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d03a      	beq.n	801382e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80137b8:	68bb      	ldr	r3, [r7, #8]
 80137ba:	3304      	adds	r3, #4
 80137bc:	4618      	mov	r0, r3
 80137be:	f7fe fb04 	bl	8011dca <uxListRemove>
 80137c2:	4603      	mov	r3, r0
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d115      	bne.n	80137f4 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80137c8:	68bb      	ldr	r3, [r7, #8]
 80137ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80137cc:	4924      	ldr	r1, [pc, #144]	@ (8013860 <xTaskPriorityInherit+0x104>)
 80137ce:	4613      	mov	r3, r2
 80137d0:	009b      	lsls	r3, r3, #2
 80137d2:	4413      	add	r3, r2
 80137d4:	009b      	lsls	r3, r3, #2
 80137d6:	440b      	add	r3, r1
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d10a      	bne.n	80137f4 <xTaskPriorityInherit+0x98>
 80137de:	68bb      	ldr	r3, [r7, #8]
 80137e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80137e2:	2201      	movs	r2, #1
 80137e4:	fa02 f303 	lsl.w	r3, r2, r3
 80137e8:	43da      	mvns	r2, r3
 80137ea:	4b1e      	ldr	r3, [pc, #120]	@ (8013864 <xTaskPriorityInherit+0x108>)
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	4013      	ands	r3, r2
 80137f0:	4a1c      	ldr	r2, [pc, #112]	@ (8013864 <xTaskPriorityInherit+0x108>)
 80137f2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80137f4:	4b19      	ldr	r3, [pc, #100]	@ (801385c <xTaskPriorityInherit+0x100>)
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80137fa:	68bb      	ldr	r3, [r7, #8]
 80137fc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80137fe:	68bb      	ldr	r3, [r7, #8]
 8013800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013802:	2201      	movs	r2, #1
 8013804:	409a      	lsls	r2, r3
 8013806:	4b17      	ldr	r3, [pc, #92]	@ (8013864 <xTaskPriorityInherit+0x108>)
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	4313      	orrs	r3, r2
 801380c:	4a15      	ldr	r2, [pc, #84]	@ (8013864 <xTaskPriorityInherit+0x108>)
 801380e:	6013      	str	r3, [r2, #0]
 8013810:	68bb      	ldr	r3, [r7, #8]
 8013812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013814:	4613      	mov	r3, r2
 8013816:	009b      	lsls	r3, r3, #2
 8013818:	4413      	add	r3, r2
 801381a:	009b      	lsls	r3, r3, #2
 801381c:	4a10      	ldr	r2, [pc, #64]	@ (8013860 <xTaskPriorityInherit+0x104>)
 801381e:	441a      	add	r2, r3
 8013820:	68bb      	ldr	r3, [r7, #8]
 8013822:	3304      	adds	r3, #4
 8013824:	4619      	mov	r1, r3
 8013826:	4610      	mov	r0, r2
 8013828:	f7fe fa74 	bl	8011d14 <vListInsertEnd>
 801382c:	e004      	b.n	8013838 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801382e:	4b0b      	ldr	r3, [pc, #44]	@ (801385c <xTaskPriorityInherit+0x100>)
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013834:	68bb      	ldr	r3, [r7, #8]
 8013836:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013838:	2301      	movs	r3, #1
 801383a:	60fb      	str	r3, [r7, #12]
 801383c:	e008      	b.n	8013850 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801383e:	68bb      	ldr	r3, [r7, #8]
 8013840:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013842:	4b06      	ldr	r3, [pc, #24]	@ (801385c <xTaskPriorityInherit+0x100>)
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013848:	429a      	cmp	r2, r3
 801384a:	d201      	bcs.n	8013850 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801384c:	2301      	movs	r3, #1
 801384e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013850:	68fb      	ldr	r3, [r7, #12]
	}
 8013852:	4618      	mov	r0, r3
 8013854:	3710      	adds	r7, #16
 8013856:	46bd      	mov	sp, r7
 8013858:	bd80      	pop	{r7, pc}
 801385a:	bf00      	nop
 801385c:	2000137c 	.word	0x2000137c
 8013860:	20001380 	.word	0x20001380
 8013864:	20001484 	.word	0x20001484

08013868 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013868:	b580      	push	{r7, lr}
 801386a:	b086      	sub	sp, #24
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013874:	2300      	movs	r3, #0
 8013876:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d070      	beq.n	8013960 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801387e:	4b3b      	ldr	r3, [pc, #236]	@ (801396c <xTaskPriorityDisinherit+0x104>)
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	693a      	ldr	r2, [r7, #16]
 8013884:	429a      	cmp	r2, r3
 8013886:	d00b      	beq.n	80138a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8013888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801388c:	f383 8811 	msr	BASEPRI, r3
 8013890:	f3bf 8f6f 	isb	sy
 8013894:	f3bf 8f4f 	dsb	sy
 8013898:	60fb      	str	r3, [r7, #12]
}
 801389a:	bf00      	nop
 801389c:	bf00      	nop
 801389e:	e7fd      	b.n	801389c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80138a0:	693b      	ldr	r3, [r7, #16]
 80138a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d10b      	bne.n	80138c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80138a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138ac:	f383 8811 	msr	BASEPRI, r3
 80138b0:	f3bf 8f6f 	isb	sy
 80138b4:	f3bf 8f4f 	dsb	sy
 80138b8:	60bb      	str	r3, [r7, #8]
}
 80138ba:	bf00      	nop
 80138bc:	bf00      	nop
 80138be:	e7fd      	b.n	80138bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80138c0:	693b      	ldr	r3, [r7, #16]
 80138c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80138c4:	1e5a      	subs	r2, r3, #1
 80138c6:	693b      	ldr	r3, [r7, #16]
 80138c8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80138ca:	693b      	ldr	r3, [r7, #16]
 80138cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80138ce:	693b      	ldr	r3, [r7, #16]
 80138d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80138d2:	429a      	cmp	r2, r3
 80138d4:	d044      	beq.n	8013960 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80138d6:	693b      	ldr	r3, [r7, #16]
 80138d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d140      	bne.n	8013960 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80138de:	693b      	ldr	r3, [r7, #16]
 80138e0:	3304      	adds	r3, #4
 80138e2:	4618      	mov	r0, r3
 80138e4:	f7fe fa71 	bl	8011dca <uxListRemove>
 80138e8:	4603      	mov	r3, r0
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d115      	bne.n	801391a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80138ee:	693b      	ldr	r3, [r7, #16]
 80138f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80138f2:	491f      	ldr	r1, [pc, #124]	@ (8013970 <xTaskPriorityDisinherit+0x108>)
 80138f4:	4613      	mov	r3, r2
 80138f6:	009b      	lsls	r3, r3, #2
 80138f8:	4413      	add	r3, r2
 80138fa:	009b      	lsls	r3, r3, #2
 80138fc:	440b      	add	r3, r1
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d10a      	bne.n	801391a <xTaskPriorityDisinherit+0xb2>
 8013904:	693b      	ldr	r3, [r7, #16]
 8013906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013908:	2201      	movs	r2, #1
 801390a:	fa02 f303 	lsl.w	r3, r2, r3
 801390e:	43da      	mvns	r2, r3
 8013910:	4b18      	ldr	r3, [pc, #96]	@ (8013974 <xTaskPriorityDisinherit+0x10c>)
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	4013      	ands	r3, r2
 8013916:	4a17      	ldr	r2, [pc, #92]	@ (8013974 <xTaskPriorityDisinherit+0x10c>)
 8013918:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801391a:	693b      	ldr	r3, [r7, #16]
 801391c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801391e:	693b      	ldr	r3, [r7, #16]
 8013920:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013922:	693b      	ldr	r3, [r7, #16]
 8013924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013926:	f1c3 0207 	rsb	r2, r3, #7
 801392a:	693b      	ldr	r3, [r7, #16]
 801392c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801392e:	693b      	ldr	r3, [r7, #16]
 8013930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013932:	2201      	movs	r2, #1
 8013934:	409a      	lsls	r2, r3
 8013936:	4b0f      	ldr	r3, [pc, #60]	@ (8013974 <xTaskPriorityDisinherit+0x10c>)
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	4313      	orrs	r3, r2
 801393c:	4a0d      	ldr	r2, [pc, #52]	@ (8013974 <xTaskPriorityDisinherit+0x10c>)
 801393e:	6013      	str	r3, [r2, #0]
 8013940:	693b      	ldr	r3, [r7, #16]
 8013942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013944:	4613      	mov	r3, r2
 8013946:	009b      	lsls	r3, r3, #2
 8013948:	4413      	add	r3, r2
 801394a:	009b      	lsls	r3, r3, #2
 801394c:	4a08      	ldr	r2, [pc, #32]	@ (8013970 <xTaskPriorityDisinherit+0x108>)
 801394e:	441a      	add	r2, r3
 8013950:	693b      	ldr	r3, [r7, #16]
 8013952:	3304      	adds	r3, #4
 8013954:	4619      	mov	r1, r3
 8013956:	4610      	mov	r0, r2
 8013958:	f7fe f9dc 	bl	8011d14 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801395c:	2301      	movs	r3, #1
 801395e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013960:	697b      	ldr	r3, [r7, #20]
	}
 8013962:	4618      	mov	r0, r3
 8013964:	3718      	adds	r7, #24
 8013966:	46bd      	mov	sp, r7
 8013968:	bd80      	pop	{r7, pc}
 801396a:	bf00      	nop
 801396c:	2000137c 	.word	0x2000137c
 8013970:	20001380 	.word	0x20001380
 8013974:	20001484 	.word	0x20001484

08013978 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013978:	b580      	push	{r7, lr}
 801397a:	b088      	sub	sp, #32
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
 8013980:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013986:	2301      	movs	r3, #1
 8013988:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	2b00      	cmp	r3, #0
 801398e:	f000 808a 	beq.w	8013aa6 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013992:	69bb      	ldr	r3, [r7, #24]
 8013994:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013996:	2b00      	cmp	r3, #0
 8013998:	d10b      	bne.n	80139b2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 801399a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801399e:	f383 8811 	msr	BASEPRI, r3
 80139a2:	f3bf 8f6f 	isb	sy
 80139a6:	f3bf 8f4f 	dsb	sy
 80139aa:	60fb      	str	r3, [r7, #12]
}
 80139ac:	bf00      	nop
 80139ae:	bf00      	nop
 80139b0:	e7fd      	b.n	80139ae <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80139b2:	69bb      	ldr	r3, [r7, #24]
 80139b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80139b6:	683a      	ldr	r2, [r7, #0]
 80139b8:	429a      	cmp	r2, r3
 80139ba:	d902      	bls.n	80139c2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80139bc:	683b      	ldr	r3, [r7, #0]
 80139be:	61fb      	str	r3, [r7, #28]
 80139c0:	e002      	b.n	80139c8 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80139c2:	69bb      	ldr	r3, [r7, #24]
 80139c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80139c6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80139c8:	69bb      	ldr	r3, [r7, #24]
 80139ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139cc:	69fa      	ldr	r2, [r7, #28]
 80139ce:	429a      	cmp	r2, r3
 80139d0:	d069      	beq.n	8013aa6 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80139d2:	69bb      	ldr	r3, [r7, #24]
 80139d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80139d6:	697a      	ldr	r2, [r7, #20]
 80139d8:	429a      	cmp	r2, r3
 80139da:	d164      	bne.n	8013aa6 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80139dc:	4b34      	ldr	r3, [pc, #208]	@ (8013ab0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	69ba      	ldr	r2, [r7, #24]
 80139e2:	429a      	cmp	r2, r3
 80139e4:	d10b      	bne.n	80139fe <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 80139e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139ea:	f383 8811 	msr	BASEPRI, r3
 80139ee:	f3bf 8f6f 	isb	sy
 80139f2:	f3bf 8f4f 	dsb	sy
 80139f6:	60bb      	str	r3, [r7, #8]
}
 80139f8:	bf00      	nop
 80139fa:	bf00      	nop
 80139fc:	e7fd      	b.n	80139fa <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80139fe:	69bb      	ldr	r3, [r7, #24]
 8013a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a02:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013a04:	69bb      	ldr	r3, [r7, #24]
 8013a06:	69fa      	ldr	r2, [r7, #28]
 8013a08:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013a0a:	69bb      	ldr	r3, [r7, #24]
 8013a0c:	699b      	ldr	r3, [r3, #24]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	db04      	blt.n	8013a1c <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a12:	69fb      	ldr	r3, [r7, #28]
 8013a14:	f1c3 0207 	rsb	r2, r3, #7
 8013a18:	69bb      	ldr	r3, [r7, #24]
 8013a1a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013a1c:	69bb      	ldr	r3, [r7, #24]
 8013a1e:	6959      	ldr	r1, [r3, #20]
 8013a20:	693a      	ldr	r2, [r7, #16]
 8013a22:	4613      	mov	r3, r2
 8013a24:	009b      	lsls	r3, r3, #2
 8013a26:	4413      	add	r3, r2
 8013a28:	009b      	lsls	r3, r3, #2
 8013a2a:	4a22      	ldr	r2, [pc, #136]	@ (8013ab4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8013a2c:	4413      	add	r3, r2
 8013a2e:	4299      	cmp	r1, r3
 8013a30:	d101      	bne.n	8013a36 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8013a32:	2301      	movs	r3, #1
 8013a34:	e000      	b.n	8013a38 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8013a36:	2300      	movs	r3, #0
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d034      	beq.n	8013aa6 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013a3c:	69bb      	ldr	r3, [r7, #24]
 8013a3e:	3304      	adds	r3, #4
 8013a40:	4618      	mov	r0, r3
 8013a42:	f7fe f9c2 	bl	8011dca <uxListRemove>
 8013a46:	4603      	mov	r3, r0
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d115      	bne.n	8013a78 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013a4c:	69bb      	ldr	r3, [r7, #24]
 8013a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013a50:	4918      	ldr	r1, [pc, #96]	@ (8013ab4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8013a52:	4613      	mov	r3, r2
 8013a54:	009b      	lsls	r3, r3, #2
 8013a56:	4413      	add	r3, r2
 8013a58:	009b      	lsls	r3, r3, #2
 8013a5a:	440b      	add	r3, r1
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d10a      	bne.n	8013a78 <vTaskPriorityDisinheritAfterTimeout+0x100>
 8013a62:	69bb      	ldr	r3, [r7, #24]
 8013a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a66:	2201      	movs	r2, #1
 8013a68:	fa02 f303 	lsl.w	r3, r2, r3
 8013a6c:	43da      	mvns	r2, r3
 8013a6e:	4b12      	ldr	r3, [pc, #72]	@ (8013ab8 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	4013      	ands	r3, r2
 8013a74:	4a10      	ldr	r2, [pc, #64]	@ (8013ab8 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8013a76:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013a78:	69bb      	ldr	r3, [r7, #24]
 8013a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a7c:	2201      	movs	r2, #1
 8013a7e:	409a      	lsls	r2, r3
 8013a80:	4b0d      	ldr	r3, [pc, #52]	@ (8013ab8 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	4313      	orrs	r3, r2
 8013a86:	4a0c      	ldr	r2, [pc, #48]	@ (8013ab8 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8013a88:	6013      	str	r3, [r2, #0]
 8013a8a:	69bb      	ldr	r3, [r7, #24]
 8013a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013a8e:	4613      	mov	r3, r2
 8013a90:	009b      	lsls	r3, r3, #2
 8013a92:	4413      	add	r3, r2
 8013a94:	009b      	lsls	r3, r3, #2
 8013a96:	4a07      	ldr	r2, [pc, #28]	@ (8013ab4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8013a98:	441a      	add	r2, r3
 8013a9a:	69bb      	ldr	r3, [r7, #24]
 8013a9c:	3304      	adds	r3, #4
 8013a9e:	4619      	mov	r1, r3
 8013aa0:	4610      	mov	r0, r2
 8013aa2:	f7fe f937 	bl	8011d14 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013aa6:	bf00      	nop
 8013aa8:	3720      	adds	r7, #32
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	bd80      	pop	{r7, pc}
 8013aae:	bf00      	nop
 8013ab0:	2000137c 	.word	0x2000137c
 8013ab4:	20001380 	.word	0x20001380
 8013ab8:	20001484 	.word	0x20001484

08013abc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8013abc:	b480      	push	{r7}
 8013abe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013ac0:	4b07      	ldr	r3, [pc, #28]	@ (8013ae0 <pvTaskIncrementMutexHeldCount+0x24>)
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d004      	beq.n	8013ad2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013ac8:	4b05      	ldr	r3, [pc, #20]	@ (8013ae0 <pvTaskIncrementMutexHeldCount+0x24>)
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8013ace:	3201      	adds	r2, #1
 8013ad0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8013ad2:	4b03      	ldr	r3, [pc, #12]	@ (8013ae0 <pvTaskIncrementMutexHeldCount+0x24>)
 8013ad4:	681b      	ldr	r3, [r3, #0]
	}
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	46bd      	mov	sp, r7
 8013ada:	bc80      	pop	{r7}
 8013adc:	4770      	bx	lr
 8013ade:	bf00      	nop
 8013ae0:	2000137c 	.word	0x2000137c

08013ae4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b084      	sub	sp, #16
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
 8013aec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013aee:	4b29      	ldr	r3, [pc, #164]	@ (8013b94 <prvAddCurrentTaskToDelayedList+0xb0>)
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013af4:	4b28      	ldr	r3, [pc, #160]	@ (8013b98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	3304      	adds	r3, #4
 8013afa:	4618      	mov	r0, r3
 8013afc:	f7fe f965 	bl	8011dca <uxListRemove>
 8013b00:	4603      	mov	r3, r0
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d10b      	bne.n	8013b1e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8013b06:	4b24      	ldr	r3, [pc, #144]	@ (8013b98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b0c:	2201      	movs	r2, #1
 8013b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8013b12:	43da      	mvns	r2, r3
 8013b14:	4b21      	ldr	r3, [pc, #132]	@ (8013b9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	4013      	ands	r3, r2
 8013b1a:	4a20      	ldr	r2, [pc, #128]	@ (8013b9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8013b1c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b24:	d10a      	bne.n	8013b3c <prvAddCurrentTaskToDelayedList+0x58>
 8013b26:	683b      	ldr	r3, [r7, #0]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d007      	beq.n	8013b3c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8013b98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	3304      	adds	r3, #4
 8013b32:	4619      	mov	r1, r3
 8013b34:	481a      	ldr	r0, [pc, #104]	@ (8013ba0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8013b36:	f7fe f8ed 	bl	8011d14 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013b3a:	e026      	b.n	8013b8a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013b3c:	68fa      	ldr	r2, [r7, #12]
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	4413      	add	r3, r2
 8013b42:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013b44:	4b14      	ldr	r3, [pc, #80]	@ (8013b98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	68ba      	ldr	r2, [r7, #8]
 8013b4a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013b4c:	68ba      	ldr	r2, [r7, #8]
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	429a      	cmp	r2, r3
 8013b52:	d209      	bcs.n	8013b68 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013b54:	4b13      	ldr	r3, [pc, #76]	@ (8013ba4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013b56:	681a      	ldr	r2, [r3, #0]
 8013b58:	4b0f      	ldr	r3, [pc, #60]	@ (8013b98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	3304      	adds	r3, #4
 8013b5e:	4619      	mov	r1, r3
 8013b60:	4610      	mov	r0, r2
 8013b62:	f7fe f8fa 	bl	8011d5a <vListInsert>
}
 8013b66:	e010      	b.n	8013b8a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013b68:	4b0f      	ldr	r3, [pc, #60]	@ (8013ba8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8013b6a:	681a      	ldr	r2, [r3, #0]
 8013b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8013b98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	3304      	adds	r3, #4
 8013b72:	4619      	mov	r1, r3
 8013b74:	4610      	mov	r0, r2
 8013b76:	f7fe f8f0 	bl	8011d5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8013bac <prvAddCurrentTaskToDelayedList+0xc8>)
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	68ba      	ldr	r2, [r7, #8]
 8013b80:	429a      	cmp	r2, r3
 8013b82:	d202      	bcs.n	8013b8a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013b84:	4a09      	ldr	r2, [pc, #36]	@ (8013bac <prvAddCurrentTaskToDelayedList+0xc8>)
 8013b86:	68bb      	ldr	r3, [r7, #8]
 8013b88:	6013      	str	r3, [r2, #0]
}
 8013b8a:	bf00      	nop
 8013b8c:	3710      	adds	r7, #16
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	bd80      	pop	{r7, pc}
 8013b92:	bf00      	nop
 8013b94:	20001480 	.word	0x20001480
 8013b98:	2000137c 	.word	0x2000137c
 8013b9c:	20001484 	.word	0x20001484
 8013ba0:	20001468 	.word	0x20001468
 8013ba4:	20001438 	.word	0x20001438
 8013ba8:	20001434 	.word	0x20001434
 8013bac:	2000149c 	.word	0x2000149c

08013bb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013bb0:	b480      	push	{r7}
 8013bb2:	b085      	sub	sp, #20
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	60f8      	str	r0, [r7, #12]
 8013bb8:	60b9      	str	r1, [r7, #8]
 8013bba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	3b04      	subs	r3, #4
 8013bc0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8013bc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	3b04      	subs	r3, #4
 8013bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013bd0:	68bb      	ldr	r3, [r7, #8]
 8013bd2:	f023 0201 	bic.w	r2, r3, #1
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	3b04      	subs	r3, #4
 8013bde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013be0:	4a08      	ldr	r2, [pc, #32]	@ (8013c04 <pxPortInitialiseStack+0x54>)
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	3b14      	subs	r3, #20
 8013bea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013bec:	687a      	ldr	r2, [r7, #4]
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	3b20      	subs	r3, #32
 8013bf6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013bf8:	68fb      	ldr	r3, [r7, #12]
}
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	3714      	adds	r7, #20
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	bc80      	pop	{r7}
 8013c02:	4770      	bx	lr
 8013c04:	08013c09 	.word	0x08013c09

08013c08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013c08:	b480      	push	{r7}
 8013c0a:	b085      	sub	sp, #20
 8013c0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8013c0e:	2300      	movs	r3, #0
 8013c10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013c12:	4b12      	ldr	r3, [pc, #72]	@ (8013c5c <prvTaskExitError+0x54>)
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c1a:	d00b      	beq.n	8013c34 <prvTaskExitError+0x2c>
	__asm volatile
 8013c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c20:	f383 8811 	msr	BASEPRI, r3
 8013c24:	f3bf 8f6f 	isb	sy
 8013c28:	f3bf 8f4f 	dsb	sy
 8013c2c:	60fb      	str	r3, [r7, #12]
}
 8013c2e:	bf00      	nop
 8013c30:	bf00      	nop
 8013c32:	e7fd      	b.n	8013c30 <prvTaskExitError+0x28>
	__asm volatile
 8013c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c38:	f383 8811 	msr	BASEPRI, r3
 8013c3c:	f3bf 8f6f 	isb	sy
 8013c40:	f3bf 8f4f 	dsb	sy
 8013c44:	60bb      	str	r3, [r7, #8]
}
 8013c46:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013c48:	bf00      	nop
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d0fc      	beq.n	8013c4a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013c50:	bf00      	nop
 8013c52:	bf00      	nop
 8013c54:	3714      	adds	r7, #20
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bc80      	pop	{r7}
 8013c5a:	4770      	bx	lr
 8013c5c:	20000070 	.word	0x20000070

08013c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013c60:	4b07      	ldr	r3, [pc, #28]	@ (8013c80 <pxCurrentTCBConst2>)
 8013c62:	6819      	ldr	r1, [r3, #0]
 8013c64:	6808      	ldr	r0, [r1, #0]
 8013c66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013c6a:	f380 8809 	msr	PSP, r0
 8013c6e:	f3bf 8f6f 	isb	sy
 8013c72:	f04f 0000 	mov.w	r0, #0
 8013c76:	f380 8811 	msr	BASEPRI, r0
 8013c7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8013c7e:	4770      	bx	lr

08013c80 <pxCurrentTCBConst2>:
 8013c80:	2000137c 	.word	0x2000137c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013c84:	bf00      	nop
 8013c86:	bf00      	nop

08013c88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8013c88:	4806      	ldr	r0, [pc, #24]	@ (8013ca4 <prvPortStartFirstTask+0x1c>)
 8013c8a:	6800      	ldr	r0, [r0, #0]
 8013c8c:	6800      	ldr	r0, [r0, #0]
 8013c8e:	f380 8808 	msr	MSP, r0
 8013c92:	b662      	cpsie	i
 8013c94:	b661      	cpsie	f
 8013c96:	f3bf 8f4f 	dsb	sy
 8013c9a:	f3bf 8f6f 	isb	sy
 8013c9e:	df00      	svc	0
 8013ca0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013ca2:	bf00      	nop
 8013ca4:	e000ed08 	.word	0xe000ed08

08013ca8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b084      	sub	sp, #16
 8013cac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013cae:	4b32      	ldr	r3, [pc, #200]	@ (8013d78 <xPortStartScheduler+0xd0>)
 8013cb0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	781b      	ldrb	r3, [r3, #0]
 8013cb6:	b2db      	uxtb	r3, r3
 8013cb8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	22ff      	movs	r2, #255	@ 0xff
 8013cbe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	781b      	ldrb	r3, [r3, #0]
 8013cc4:	b2db      	uxtb	r3, r3
 8013cc6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013cc8:	78fb      	ldrb	r3, [r7, #3]
 8013cca:	b2db      	uxtb	r3, r3
 8013ccc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8013cd0:	b2da      	uxtb	r2, r3
 8013cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8013d7c <xPortStartScheduler+0xd4>)
 8013cd4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8013d80 <xPortStartScheduler+0xd8>)
 8013cd8:	2207      	movs	r2, #7
 8013cda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013cdc:	e009      	b.n	8013cf2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8013cde:	4b28      	ldr	r3, [pc, #160]	@ (8013d80 <xPortStartScheduler+0xd8>)
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	3b01      	subs	r3, #1
 8013ce4:	4a26      	ldr	r2, [pc, #152]	@ (8013d80 <xPortStartScheduler+0xd8>)
 8013ce6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013ce8:	78fb      	ldrb	r3, [r7, #3]
 8013cea:	b2db      	uxtb	r3, r3
 8013cec:	005b      	lsls	r3, r3, #1
 8013cee:	b2db      	uxtb	r3, r3
 8013cf0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013cf2:	78fb      	ldrb	r3, [r7, #3]
 8013cf4:	b2db      	uxtb	r3, r3
 8013cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013cfa:	2b80      	cmp	r3, #128	@ 0x80
 8013cfc:	d0ef      	beq.n	8013cde <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013cfe:	4b20      	ldr	r3, [pc, #128]	@ (8013d80 <xPortStartScheduler+0xd8>)
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	f1c3 0307 	rsb	r3, r3, #7
 8013d06:	2b04      	cmp	r3, #4
 8013d08:	d00b      	beq.n	8013d22 <xPortStartScheduler+0x7a>
	__asm volatile
 8013d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d0e:	f383 8811 	msr	BASEPRI, r3
 8013d12:	f3bf 8f6f 	isb	sy
 8013d16:	f3bf 8f4f 	dsb	sy
 8013d1a:	60bb      	str	r3, [r7, #8]
}
 8013d1c:	bf00      	nop
 8013d1e:	bf00      	nop
 8013d20:	e7fd      	b.n	8013d1e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013d22:	4b17      	ldr	r3, [pc, #92]	@ (8013d80 <xPortStartScheduler+0xd8>)
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	021b      	lsls	r3, r3, #8
 8013d28:	4a15      	ldr	r2, [pc, #84]	@ (8013d80 <xPortStartScheduler+0xd8>)
 8013d2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013d2c:	4b14      	ldr	r3, [pc, #80]	@ (8013d80 <xPortStartScheduler+0xd8>)
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8013d34:	4a12      	ldr	r2, [pc, #72]	@ (8013d80 <xPortStartScheduler+0xd8>)
 8013d36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	b2da      	uxtb	r2, r3
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013d40:	4b10      	ldr	r3, [pc, #64]	@ (8013d84 <xPortStartScheduler+0xdc>)
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	4a0f      	ldr	r2, [pc, #60]	@ (8013d84 <xPortStartScheduler+0xdc>)
 8013d46:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8013d4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8013d84 <xPortStartScheduler+0xdc>)
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	4a0c      	ldr	r2, [pc, #48]	@ (8013d84 <xPortStartScheduler+0xdc>)
 8013d52:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8013d56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013d58:	f000 f8b8 	bl	8013ecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8013d88 <xPortStartScheduler+0xe0>)
 8013d5e:	2200      	movs	r2, #0
 8013d60:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013d62:	f7ff ff91 	bl	8013c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013d66:	f7ff fa5d 	bl	8013224 <vTaskSwitchContext>
	prvTaskExitError();
 8013d6a:	f7ff ff4d 	bl	8013c08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013d6e:	2300      	movs	r3, #0
}
 8013d70:	4618      	mov	r0, r3
 8013d72:	3710      	adds	r7, #16
 8013d74:	46bd      	mov	sp, r7
 8013d76:	bd80      	pop	{r7, pc}
 8013d78:	e000e400 	.word	0xe000e400
 8013d7c:	200014a8 	.word	0x200014a8
 8013d80:	200014ac 	.word	0x200014ac
 8013d84:	e000ed20 	.word	0xe000ed20
 8013d88:	20000070 	.word	0x20000070

08013d8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013d8c:	b480      	push	{r7}
 8013d8e:	b083      	sub	sp, #12
 8013d90:	af00      	add	r7, sp, #0
	__asm volatile
 8013d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d96:	f383 8811 	msr	BASEPRI, r3
 8013d9a:	f3bf 8f6f 	isb	sy
 8013d9e:	f3bf 8f4f 	dsb	sy
 8013da2:	607b      	str	r3, [r7, #4]
}
 8013da4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013da6:	4b0f      	ldr	r3, [pc, #60]	@ (8013de4 <vPortEnterCritical+0x58>)
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	3301      	adds	r3, #1
 8013dac:	4a0d      	ldr	r2, [pc, #52]	@ (8013de4 <vPortEnterCritical+0x58>)
 8013dae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013db0:	4b0c      	ldr	r3, [pc, #48]	@ (8013de4 <vPortEnterCritical+0x58>)
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	2b01      	cmp	r3, #1
 8013db6:	d110      	bne.n	8013dda <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013db8:	4b0b      	ldr	r3, [pc, #44]	@ (8013de8 <vPortEnterCritical+0x5c>)
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	b2db      	uxtb	r3, r3
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d00b      	beq.n	8013dda <vPortEnterCritical+0x4e>
	__asm volatile
 8013dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013dc6:	f383 8811 	msr	BASEPRI, r3
 8013dca:	f3bf 8f6f 	isb	sy
 8013dce:	f3bf 8f4f 	dsb	sy
 8013dd2:	603b      	str	r3, [r7, #0]
}
 8013dd4:	bf00      	nop
 8013dd6:	bf00      	nop
 8013dd8:	e7fd      	b.n	8013dd6 <vPortEnterCritical+0x4a>
	}
}
 8013dda:	bf00      	nop
 8013ddc:	370c      	adds	r7, #12
 8013dde:	46bd      	mov	sp, r7
 8013de0:	bc80      	pop	{r7}
 8013de2:	4770      	bx	lr
 8013de4:	20000070 	.word	0x20000070
 8013de8:	e000ed04 	.word	0xe000ed04

08013dec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013dec:	b480      	push	{r7}
 8013dee:	b083      	sub	sp, #12
 8013df0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013df2:	4b12      	ldr	r3, [pc, #72]	@ (8013e3c <vPortExitCritical+0x50>)
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d10b      	bne.n	8013e12 <vPortExitCritical+0x26>
	__asm volatile
 8013dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013dfe:	f383 8811 	msr	BASEPRI, r3
 8013e02:	f3bf 8f6f 	isb	sy
 8013e06:	f3bf 8f4f 	dsb	sy
 8013e0a:	607b      	str	r3, [r7, #4]
}
 8013e0c:	bf00      	nop
 8013e0e:	bf00      	nop
 8013e10:	e7fd      	b.n	8013e0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013e12:	4b0a      	ldr	r3, [pc, #40]	@ (8013e3c <vPortExitCritical+0x50>)
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	3b01      	subs	r3, #1
 8013e18:	4a08      	ldr	r2, [pc, #32]	@ (8013e3c <vPortExitCritical+0x50>)
 8013e1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013e1c:	4b07      	ldr	r3, [pc, #28]	@ (8013e3c <vPortExitCritical+0x50>)
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d105      	bne.n	8013e30 <vPortExitCritical+0x44>
 8013e24:	2300      	movs	r3, #0
 8013e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013e28:	683b      	ldr	r3, [r7, #0]
 8013e2a:	f383 8811 	msr	BASEPRI, r3
}
 8013e2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013e30:	bf00      	nop
 8013e32:	370c      	adds	r7, #12
 8013e34:	46bd      	mov	sp, r7
 8013e36:	bc80      	pop	{r7}
 8013e38:	4770      	bx	lr
 8013e3a:	bf00      	nop
 8013e3c:	20000070 	.word	0x20000070

08013e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013e40:	f3ef 8009 	mrs	r0, PSP
 8013e44:	f3bf 8f6f 	isb	sy
 8013e48:	4b0d      	ldr	r3, [pc, #52]	@ (8013e80 <pxCurrentTCBConst>)
 8013e4a:	681a      	ldr	r2, [r3, #0]
 8013e4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013e50:	6010      	str	r0, [r2, #0]
 8013e52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8013e56:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8013e5a:	f380 8811 	msr	BASEPRI, r0
 8013e5e:	f7ff f9e1 	bl	8013224 <vTaskSwitchContext>
 8013e62:	f04f 0000 	mov.w	r0, #0
 8013e66:	f380 8811 	msr	BASEPRI, r0
 8013e6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013e6e:	6819      	ldr	r1, [r3, #0]
 8013e70:	6808      	ldr	r0, [r1, #0]
 8013e72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013e76:	f380 8809 	msr	PSP, r0
 8013e7a:	f3bf 8f6f 	isb	sy
 8013e7e:	4770      	bx	lr

08013e80 <pxCurrentTCBConst>:
 8013e80:	2000137c 	.word	0x2000137c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013e84:	bf00      	nop
 8013e86:	bf00      	nop

08013e88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b082      	sub	sp, #8
 8013e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8013e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e92:	f383 8811 	msr	BASEPRI, r3
 8013e96:	f3bf 8f6f 	isb	sy
 8013e9a:	f3bf 8f4f 	dsb	sy
 8013e9e:	607b      	str	r3, [r7, #4]
}
 8013ea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013ea2:	f7ff f901 	bl	80130a8 <xTaskIncrementTick>
 8013ea6:	4603      	mov	r3, r0
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d003      	beq.n	8013eb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013eac:	4b06      	ldr	r3, [pc, #24]	@ (8013ec8 <SysTick_Handler+0x40>)
 8013eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013eb2:	601a      	str	r2, [r3, #0]
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013eb8:	683b      	ldr	r3, [r7, #0]
 8013eba:	f383 8811 	msr	BASEPRI, r3
}
 8013ebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013ec0:	bf00      	nop
 8013ec2:	3708      	adds	r7, #8
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	bd80      	pop	{r7, pc}
 8013ec8:	e000ed04 	.word	0xe000ed04

08013ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013ecc:	b480      	push	{r7}
 8013ece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8013efc <vPortSetupTimerInterrupt+0x30>)
 8013ed2:	2200      	movs	r2, #0
 8013ed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8013f00 <vPortSetupTimerInterrupt+0x34>)
 8013ed8:	2200      	movs	r2, #0
 8013eda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013edc:	4b09      	ldr	r3, [pc, #36]	@ (8013f04 <vPortSetupTimerInterrupt+0x38>)
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	4a09      	ldr	r2, [pc, #36]	@ (8013f08 <vPortSetupTimerInterrupt+0x3c>)
 8013ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8013ee6:	099b      	lsrs	r3, r3, #6
 8013ee8:	4a08      	ldr	r2, [pc, #32]	@ (8013f0c <vPortSetupTimerInterrupt+0x40>)
 8013eea:	3b01      	subs	r3, #1
 8013eec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013eee:	4b03      	ldr	r3, [pc, #12]	@ (8013efc <vPortSetupTimerInterrupt+0x30>)
 8013ef0:	2207      	movs	r2, #7
 8013ef2:	601a      	str	r2, [r3, #0]
}
 8013ef4:	bf00      	nop
 8013ef6:	46bd      	mov	sp, r7
 8013ef8:	bc80      	pop	{r7}
 8013efa:	4770      	bx	lr
 8013efc:	e000e010 	.word	0xe000e010
 8013f00:	e000e018 	.word	0xe000e018
 8013f04:	20000018 	.word	0x20000018
 8013f08:	10624dd3 	.word	0x10624dd3
 8013f0c:	e000e014 	.word	0xe000e014

08013f10 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013f10:	b480      	push	{r7}
 8013f12:	b085      	sub	sp, #20
 8013f14:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013f16:	f3ef 8305 	mrs	r3, IPSR
 8013f1a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	2b0f      	cmp	r3, #15
 8013f20:	d915      	bls.n	8013f4e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013f22:	4a17      	ldr	r2, [pc, #92]	@ (8013f80 <vPortValidateInterruptPriority+0x70>)
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	4413      	add	r3, r2
 8013f28:	781b      	ldrb	r3, [r3, #0]
 8013f2a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013f2c:	4b15      	ldr	r3, [pc, #84]	@ (8013f84 <vPortValidateInterruptPriority+0x74>)
 8013f2e:	781b      	ldrb	r3, [r3, #0]
 8013f30:	7afa      	ldrb	r2, [r7, #11]
 8013f32:	429a      	cmp	r2, r3
 8013f34:	d20b      	bcs.n	8013f4e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8013f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f3a:	f383 8811 	msr	BASEPRI, r3
 8013f3e:	f3bf 8f6f 	isb	sy
 8013f42:	f3bf 8f4f 	dsb	sy
 8013f46:	607b      	str	r3, [r7, #4]
}
 8013f48:	bf00      	nop
 8013f4a:	bf00      	nop
 8013f4c:	e7fd      	b.n	8013f4a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8013f88 <vPortValidateInterruptPriority+0x78>)
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8013f56:	4b0d      	ldr	r3, [pc, #52]	@ (8013f8c <vPortValidateInterruptPriority+0x7c>)
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	429a      	cmp	r2, r3
 8013f5c:	d90b      	bls.n	8013f76 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8013f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f62:	f383 8811 	msr	BASEPRI, r3
 8013f66:	f3bf 8f6f 	isb	sy
 8013f6a:	f3bf 8f4f 	dsb	sy
 8013f6e:	603b      	str	r3, [r7, #0]
}
 8013f70:	bf00      	nop
 8013f72:	bf00      	nop
 8013f74:	e7fd      	b.n	8013f72 <vPortValidateInterruptPriority+0x62>
	}
 8013f76:	bf00      	nop
 8013f78:	3714      	adds	r7, #20
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	bc80      	pop	{r7}
 8013f7e:	4770      	bx	lr
 8013f80:	e000e3f0 	.word	0xe000e3f0
 8013f84:	200014a8 	.word	0x200014a8
 8013f88:	e000ed0c 	.word	0xe000ed0c
 8013f8c:	200014ac 	.word	0x200014ac

08013f90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013f90:	b580      	push	{r7, lr}
 8013f92:	b08a      	sub	sp, #40	@ 0x28
 8013f94:	af00      	add	r7, sp, #0
 8013f96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013f98:	2300      	movs	r3, #0
 8013f9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013f9c:	f7fe ffca 	bl	8012f34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013fa0:	4b5a      	ldr	r3, [pc, #360]	@ (801410c <pvPortMalloc+0x17c>)
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d101      	bne.n	8013fac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013fa8:	f000 f916 	bl	80141d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013fac:	4b58      	ldr	r3, [pc, #352]	@ (8014110 <pvPortMalloc+0x180>)
 8013fae:	681a      	ldr	r2, [r3, #0]
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	4013      	ands	r3, r2
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	f040 8090 	bne.w	80140da <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d01e      	beq.n	8013ffe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8013fc0:	2208      	movs	r2, #8
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	4413      	add	r3, r2
 8013fc6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	f003 0307 	and.w	r3, r3, #7
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d015      	beq.n	8013ffe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	f023 0307 	bic.w	r3, r3, #7
 8013fd8:	3308      	adds	r3, #8
 8013fda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	f003 0307 	and.w	r3, r3, #7
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d00b      	beq.n	8013ffe <pvPortMalloc+0x6e>
	__asm volatile
 8013fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fea:	f383 8811 	msr	BASEPRI, r3
 8013fee:	f3bf 8f6f 	isb	sy
 8013ff2:	f3bf 8f4f 	dsb	sy
 8013ff6:	617b      	str	r3, [r7, #20]
}
 8013ff8:	bf00      	nop
 8013ffa:	bf00      	nop
 8013ffc:	e7fd      	b.n	8013ffa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d06a      	beq.n	80140da <pvPortMalloc+0x14a>
 8014004:	4b43      	ldr	r3, [pc, #268]	@ (8014114 <pvPortMalloc+0x184>)
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	687a      	ldr	r2, [r7, #4]
 801400a:	429a      	cmp	r2, r3
 801400c:	d865      	bhi.n	80140da <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801400e:	4b42      	ldr	r3, [pc, #264]	@ (8014118 <pvPortMalloc+0x188>)
 8014010:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014012:	4b41      	ldr	r3, [pc, #260]	@ (8014118 <pvPortMalloc+0x188>)
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014018:	e004      	b.n	8014024 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 801401a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801401c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014026:	685b      	ldr	r3, [r3, #4]
 8014028:	687a      	ldr	r2, [r7, #4]
 801402a:	429a      	cmp	r2, r3
 801402c:	d903      	bls.n	8014036 <pvPortMalloc+0xa6>
 801402e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d1f1      	bne.n	801401a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014036:	4b35      	ldr	r3, [pc, #212]	@ (801410c <pvPortMalloc+0x17c>)
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801403c:	429a      	cmp	r2, r3
 801403e:	d04c      	beq.n	80140da <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014040:	6a3b      	ldr	r3, [r7, #32]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	2208      	movs	r2, #8
 8014046:	4413      	add	r3, r2
 8014048:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801404c:	681a      	ldr	r2, [r3, #0]
 801404e:	6a3b      	ldr	r3, [r7, #32]
 8014050:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014054:	685a      	ldr	r2, [r3, #4]
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	1ad2      	subs	r2, r2, r3
 801405a:	2308      	movs	r3, #8
 801405c:	005b      	lsls	r3, r3, #1
 801405e:	429a      	cmp	r2, r3
 8014060:	d920      	bls.n	80140a4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	4413      	add	r3, r2
 8014068:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801406a:	69bb      	ldr	r3, [r7, #24]
 801406c:	f003 0307 	and.w	r3, r3, #7
 8014070:	2b00      	cmp	r3, #0
 8014072:	d00b      	beq.n	801408c <pvPortMalloc+0xfc>
	__asm volatile
 8014074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014078:	f383 8811 	msr	BASEPRI, r3
 801407c:	f3bf 8f6f 	isb	sy
 8014080:	f3bf 8f4f 	dsb	sy
 8014084:	613b      	str	r3, [r7, #16]
}
 8014086:	bf00      	nop
 8014088:	bf00      	nop
 801408a:	e7fd      	b.n	8014088 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801408c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801408e:	685a      	ldr	r2, [r3, #4]
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	1ad2      	subs	r2, r2, r3
 8014094:	69bb      	ldr	r3, [r7, #24]
 8014096:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801409a:	687a      	ldr	r2, [r7, #4]
 801409c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801409e:	69b8      	ldr	r0, [r7, #24]
 80140a0:	f000 f8fc 	bl	801429c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80140a4:	4b1b      	ldr	r3, [pc, #108]	@ (8014114 <pvPortMalloc+0x184>)
 80140a6:	681a      	ldr	r2, [r3, #0]
 80140a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140aa:	685b      	ldr	r3, [r3, #4]
 80140ac:	1ad3      	subs	r3, r2, r3
 80140ae:	4a19      	ldr	r2, [pc, #100]	@ (8014114 <pvPortMalloc+0x184>)
 80140b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80140b2:	4b18      	ldr	r3, [pc, #96]	@ (8014114 <pvPortMalloc+0x184>)
 80140b4:	681a      	ldr	r2, [r3, #0]
 80140b6:	4b19      	ldr	r3, [pc, #100]	@ (801411c <pvPortMalloc+0x18c>)
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	429a      	cmp	r2, r3
 80140bc:	d203      	bcs.n	80140c6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80140be:	4b15      	ldr	r3, [pc, #84]	@ (8014114 <pvPortMalloc+0x184>)
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	4a16      	ldr	r2, [pc, #88]	@ (801411c <pvPortMalloc+0x18c>)
 80140c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80140c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140c8:	685a      	ldr	r2, [r3, #4]
 80140ca:	4b11      	ldr	r3, [pc, #68]	@ (8014110 <pvPortMalloc+0x180>)
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	431a      	orrs	r2, r3
 80140d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80140d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140d6:	2200      	movs	r2, #0
 80140d8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80140da:	f7fe ff39 	bl	8012f50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80140de:	69fb      	ldr	r3, [r7, #28]
 80140e0:	f003 0307 	and.w	r3, r3, #7
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d00b      	beq.n	8014100 <pvPortMalloc+0x170>
	__asm volatile
 80140e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140ec:	f383 8811 	msr	BASEPRI, r3
 80140f0:	f3bf 8f6f 	isb	sy
 80140f4:	f3bf 8f4f 	dsb	sy
 80140f8:	60fb      	str	r3, [r7, #12]
}
 80140fa:	bf00      	nop
 80140fc:	bf00      	nop
 80140fe:	e7fd      	b.n	80140fc <pvPortMalloc+0x16c>
	return pvReturn;
 8014100:	69fb      	ldr	r3, [r7, #28]
}
 8014102:	4618      	mov	r0, r3
 8014104:	3728      	adds	r7, #40	@ 0x28
 8014106:	46bd      	mov	sp, r7
 8014108:	bd80      	pop	{r7, pc}
 801410a:	bf00      	nop
 801410c:	20002cb8 	.word	0x20002cb8
 8014110:	20002cc4 	.word	0x20002cc4
 8014114:	20002cbc 	.word	0x20002cbc
 8014118:	20002cb0 	.word	0x20002cb0
 801411c:	20002cc0 	.word	0x20002cc0

08014120 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014120:	b580      	push	{r7, lr}
 8014122:	b086      	sub	sp, #24
 8014124:	af00      	add	r7, sp, #0
 8014126:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d04a      	beq.n	80141c8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014132:	2308      	movs	r3, #8
 8014134:	425b      	negs	r3, r3
 8014136:	697a      	ldr	r2, [r7, #20]
 8014138:	4413      	add	r3, r2
 801413a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801413c:	697b      	ldr	r3, [r7, #20]
 801413e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014140:	693b      	ldr	r3, [r7, #16]
 8014142:	685a      	ldr	r2, [r3, #4]
 8014144:	4b22      	ldr	r3, [pc, #136]	@ (80141d0 <vPortFree+0xb0>)
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	4013      	ands	r3, r2
 801414a:	2b00      	cmp	r3, #0
 801414c:	d10b      	bne.n	8014166 <vPortFree+0x46>
	__asm volatile
 801414e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014152:	f383 8811 	msr	BASEPRI, r3
 8014156:	f3bf 8f6f 	isb	sy
 801415a:	f3bf 8f4f 	dsb	sy
 801415e:	60fb      	str	r3, [r7, #12]
}
 8014160:	bf00      	nop
 8014162:	bf00      	nop
 8014164:	e7fd      	b.n	8014162 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014166:	693b      	ldr	r3, [r7, #16]
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d00b      	beq.n	8014186 <vPortFree+0x66>
	__asm volatile
 801416e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014172:	f383 8811 	msr	BASEPRI, r3
 8014176:	f3bf 8f6f 	isb	sy
 801417a:	f3bf 8f4f 	dsb	sy
 801417e:	60bb      	str	r3, [r7, #8]
}
 8014180:	bf00      	nop
 8014182:	bf00      	nop
 8014184:	e7fd      	b.n	8014182 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014186:	693b      	ldr	r3, [r7, #16]
 8014188:	685a      	ldr	r2, [r3, #4]
 801418a:	4b11      	ldr	r3, [pc, #68]	@ (80141d0 <vPortFree+0xb0>)
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	4013      	ands	r3, r2
 8014190:	2b00      	cmp	r3, #0
 8014192:	d019      	beq.n	80141c8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014194:	693b      	ldr	r3, [r7, #16]
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d115      	bne.n	80141c8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801419c:	693b      	ldr	r3, [r7, #16]
 801419e:	685a      	ldr	r2, [r3, #4]
 80141a0:	4b0b      	ldr	r3, [pc, #44]	@ (80141d0 <vPortFree+0xb0>)
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	43db      	mvns	r3, r3
 80141a6:	401a      	ands	r2, r3
 80141a8:	693b      	ldr	r3, [r7, #16]
 80141aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80141ac:	f7fe fec2 	bl	8012f34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80141b0:	693b      	ldr	r3, [r7, #16]
 80141b2:	685a      	ldr	r2, [r3, #4]
 80141b4:	4b07      	ldr	r3, [pc, #28]	@ (80141d4 <vPortFree+0xb4>)
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	4413      	add	r3, r2
 80141ba:	4a06      	ldr	r2, [pc, #24]	@ (80141d4 <vPortFree+0xb4>)
 80141bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80141be:	6938      	ldr	r0, [r7, #16]
 80141c0:	f000 f86c 	bl	801429c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80141c4:	f7fe fec4 	bl	8012f50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80141c8:	bf00      	nop
 80141ca:	3718      	adds	r7, #24
 80141cc:	46bd      	mov	sp, r7
 80141ce:	bd80      	pop	{r7, pc}
 80141d0:	20002cc4 	.word	0x20002cc4
 80141d4:	20002cbc 	.word	0x20002cbc

080141d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80141d8:	b480      	push	{r7}
 80141da:	b085      	sub	sp, #20
 80141dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80141de:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80141e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80141e4:	4b27      	ldr	r3, [pc, #156]	@ (8014284 <prvHeapInit+0xac>)
 80141e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	f003 0307 	and.w	r3, r3, #7
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d00c      	beq.n	801420c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	3307      	adds	r3, #7
 80141f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	f023 0307 	bic.w	r3, r3, #7
 80141fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014200:	68ba      	ldr	r2, [r7, #8]
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	1ad3      	subs	r3, r2, r3
 8014206:	4a1f      	ldr	r2, [pc, #124]	@ (8014284 <prvHeapInit+0xac>)
 8014208:	4413      	add	r3, r2
 801420a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014210:	4a1d      	ldr	r2, [pc, #116]	@ (8014288 <prvHeapInit+0xb0>)
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014216:	4b1c      	ldr	r3, [pc, #112]	@ (8014288 <prvHeapInit+0xb0>)
 8014218:	2200      	movs	r2, #0
 801421a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	68ba      	ldr	r2, [r7, #8]
 8014220:	4413      	add	r3, r2
 8014222:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014224:	2208      	movs	r2, #8
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	1a9b      	subs	r3, r3, r2
 801422a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	f023 0307 	bic.w	r3, r3, #7
 8014232:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	4a15      	ldr	r2, [pc, #84]	@ (801428c <prvHeapInit+0xb4>)
 8014238:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801423a:	4b14      	ldr	r3, [pc, #80]	@ (801428c <prvHeapInit+0xb4>)
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	2200      	movs	r2, #0
 8014240:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014242:	4b12      	ldr	r3, [pc, #72]	@ (801428c <prvHeapInit+0xb4>)
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	2200      	movs	r2, #0
 8014248:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801424e:	683b      	ldr	r3, [r7, #0]
 8014250:	68fa      	ldr	r2, [r7, #12]
 8014252:	1ad2      	subs	r2, r2, r3
 8014254:	683b      	ldr	r3, [r7, #0]
 8014256:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014258:	4b0c      	ldr	r3, [pc, #48]	@ (801428c <prvHeapInit+0xb4>)
 801425a:	681a      	ldr	r2, [r3, #0]
 801425c:	683b      	ldr	r3, [r7, #0]
 801425e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014260:	683b      	ldr	r3, [r7, #0]
 8014262:	685b      	ldr	r3, [r3, #4]
 8014264:	4a0a      	ldr	r2, [pc, #40]	@ (8014290 <prvHeapInit+0xb8>)
 8014266:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014268:	683b      	ldr	r3, [r7, #0]
 801426a:	685b      	ldr	r3, [r3, #4]
 801426c:	4a09      	ldr	r2, [pc, #36]	@ (8014294 <prvHeapInit+0xbc>)
 801426e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014270:	4b09      	ldr	r3, [pc, #36]	@ (8014298 <prvHeapInit+0xc0>)
 8014272:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8014276:	601a      	str	r2, [r3, #0]
}
 8014278:	bf00      	nop
 801427a:	3714      	adds	r7, #20
 801427c:	46bd      	mov	sp, r7
 801427e:	bc80      	pop	{r7}
 8014280:	4770      	bx	lr
 8014282:	bf00      	nop
 8014284:	200014b0 	.word	0x200014b0
 8014288:	20002cb0 	.word	0x20002cb0
 801428c:	20002cb8 	.word	0x20002cb8
 8014290:	20002cc0 	.word	0x20002cc0
 8014294:	20002cbc 	.word	0x20002cbc
 8014298:	20002cc4 	.word	0x20002cc4

0801429c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801429c:	b480      	push	{r7}
 801429e:	b085      	sub	sp, #20
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80142a4:	4b27      	ldr	r3, [pc, #156]	@ (8014344 <prvInsertBlockIntoFreeList+0xa8>)
 80142a6:	60fb      	str	r3, [r7, #12]
 80142a8:	e002      	b.n	80142b0 <prvInsertBlockIntoFreeList+0x14>
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	60fb      	str	r3, [r7, #12]
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	687a      	ldr	r2, [r7, #4]
 80142b6:	429a      	cmp	r2, r3
 80142b8:	d8f7      	bhi.n	80142aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	685b      	ldr	r3, [r3, #4]
 80142c2:	68ba      	ldr	r2, [r7, #8]
 80142c4:	4413      	add	r3, r2
 80142c6:	687a      	ldr	r2, [r7, #4]
 80142c8:	429a      	cmp	r2, r3
 80142ca:	d108      	bne.n	80142de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	685a      	ldr	r2, [r3, #4]
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	685b      	ldr	r3, [r3, #4]
 80142d4:	441a      	add	r2, r3
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	685b      	ldr	r3, [r3, #4]
 80142e6:	68ba      	ldr	r2, [r7, #8]
 80142e8:	441a      	add	r2, r3
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	429a      	cmp	r2, r3
 80142f0:	d118      	bne.n	8014324 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	681a      	ldr	r2, [r3, #0]
 80142f6:	4b14      	ldr	r3, [pc, #80]	@ (8014348 <prvInsertBlockIntoFreeList+0xac>)
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	429a      	cmp	r2, r3
 80142fc:	d00d      	beq.n	801431a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	685a      	ldr	r2, [r3, #4]
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	685b      	ldr	r3, [r3, #4]
 8014308:	441a      	add	r2, r3
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	681a      	ldr	r2, [r3, #0]
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	601a      	str	r2, [r3, #0]
 8014318:	e008      	b.n	801432c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801431a:	4b0b      	ldr	r3, [pc, #44]	@ (8014348 <prvInsertBlockIntoFreeList+0xac>)
 801431c:	681a      	ldr	r2, [r3, #0]
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	601a      	str	r2, [r3, #0]
 8014322:	e003      	b.n	801432c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	681a      	ldr	r2, [r3, #0]
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801432c:	68fa      	ldr	r2, [r7, #12]
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	429a      	cmp	r2, r3
 8014332:	d002      	beq.n	801433a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	687a      	ldr	r2, [r7, #4]
 8014338:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801433a:	bf00      	nop
 801433c:	3714      	adds	r7, #20
 801433e:	46bd      	mov	sp, r7
 8014340:	bc80      	pop	{r7}
 8014342:	4770      	bx	lr
 8014344:	20002cb0 	.word	0x20002cb0
 8014348:	20002cb8 	.word	0x20002cb8

0801434c <calloc>:
 801434c:	4b02      	ldr	r3, [pc, #8]	@ (8014358 <calloc+0xc>)
 801434e:	460a      	mov	r2, r1
 8014350:	4601      	mov	r1, r0
 8014352:	6818      	ldr	r0, [r3, #0]
 8014354:	f000 b802 	b.w	801435c <_calloc_r>
 8014358:	20000074 	.word	0x20000074

0801435c <_calloc_r>:
 801435c:	b570      	push	{r4, r5, r6, lr}
 801435e:	fba1 5402 	umull	r5, r4, r1, r2
 8014362:	b93c      	cbnz	r4, 8014374 <_calloc_r+0x18>
 8014364:	4629      	mov	r1, r5
 8014366:	f000 f82f 	bl	80143c8 <_malloc_r>
 801436a:	4606      	mov	r6, r0
 801436c:	b928      	cbnz	r0, 801437a <_calloc_r+0x1e>
 801436e:	2600      	movs	r6, #0
 8014370:	4630      	mov	r0, r6
 8014372:	bd70      	pop	{r4, r5, r6, pc}
 8014374:	220c      	movs	r2, #12
 8014376:	6002      	str	r2, [r0, #0]
 8014378:	e7f9      	b.n	801436e <_calloc_r+0x12>
 801437a:	462a      	mov	r2, r5
 801437c:	4621      	mov	r1, r4
 801437e:	f000 f8af 	bl	80144e0 <memset>
 8014382:	e7f5      	b.n	8014370 <_calloc_r+0x14>

08014384 <sbrk_aligned>:
 8014384:	b570      	push	{r4, r5, r6, lr}
 8014386:	4e0f      	ldr	r6, [pc, #60]	@ (80143c4 <sbrk_aligned+0x40>)
 8014388:	460c      	mov	r4, r1
 801438a:	6831      	ldr	r1, [r6, #0]
 801438c:	4605      	mov	r5, r0
 801438e:	b911      	cbnz	r1, 8014396 <sbrk_aligned+0x12>
 8014390:	f000 f8ae 	bl	80144f0 <_sbrk_r>
 8014394:	6030      	str	r0, [r6, #0]
 8014396:	4621      	mov	r1, r4
 8014398:	4628      	mov	r0, r5
 801439a:	f000 f8a9 	bl	80144f0 <_sbrk_r>
 801439e:	1c43      	adds	r3, r0, #1
 80143a0:	d103      	bne.n	80143aa <sbrk_aligned+0x26>
 80143a2:	f04f 34ff 	mov.w	r4, #4294967295
 80143a6:	4620      	mov	r0, r4
 80143a8:	bd70      	pop	{r4, r5, r6, pc}
 80143aa:	1cc4      	adds	r4, r0, #3
 80143ac:	f024 0403 	bic.w	r4, r4, #3
 80143b0:	42a0      	cmp	r0, r4
 80143b2:	d0f8      	beq.n	80143a6 <sbrk_aligned+0x22>
 80143b4:	1a21      	subs	r1, r4, r0
 80143b6:	4628      	mov	r0, r5
 80143b8:	f000 f89a 	bl	80144f0 <_sbrk_r>
 80143bc:	3001      	adds	r0, #1
 80143be:	d1f2      	bne.n	80143a6 <sbrk_aligned+0x22>
 80143c0:	e7ef      	b.n	80143a2 <sbrk_aligned+0x1e>
 80143c2:	bf00      	nop
 80143c4:	20002cc8 	.word	0x20002cc8

080143c8 <_malloc_r>:
 80143c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80143cc:	1ccd      	adds	r5, r1, #3
 80143ce:	f025 0503 	bic.w	r5, r5, #3
 80143d2:	3508      	adds	r5, #8
 80143d4:	2d0c      	cmp	r5, #12
 80143d6:	bf38      	it	cc
 80143d8:	250c      	movcc	r5, #12
 80143da:	2d00      	cmp	r5, #0
 80143dc:	4606      	mov	r6, r0
 80143de:	db01      	blt.n	80143e4 <_malloc_r+0x1c>
 80143e0:	42a9      	cmp	r1, r5
 80143e2:	d904      	bls.n	80143ee <_malloc_r+0x26>
 80143e4:	230c      	movs	r3, #12
 80143e6:	6033      	str	r3, [r6, #0]
 80143e8:	2000      	movs	r0, #0
 80143ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80144c4 <_malloc_r+0xfc>
 80143f2:	f000 f869 	bl	80144c8 <__malloc_lock>
 80143f6:	f8d8 3000 	ldr.w	r3, [r8]
 80143fa:	461c      	mov	r4, r3
 80143fc:	bb44      	cbnz	r4, 8014450 <_malloc_r+0x88>
 80143fe:	4629      	mov	r1, r5
 8014400:	4630      	mov	r0, r6
 8014402:	f7ff ffbf 	bl	8014384 <sbrk_aligned>
 8014406:	1c43      	adds	r3, r0, #1
 8014408:	4604      	mov	r4, r0
 801440a:	d158      	bne.n	80144be <_malloc_r+0xf6>
 801440c:	f8d8 4000 	ldr.w	r4, [r8]
 8014410:	4627      	mov	r7, r4
 8014412:	2f00      	cmp	r7, #0
 8014414:	d143      	bne.n	801449e <_malloc_r+0xd6>
 8014416:	2c00      	cmp	r4, #0
 8014418:	d04b      	beq.n	80144b2 <_malloc_r+0xea>
 801441a:	6823      	ldr	r3, [r4, #0]
 801441c:	4639      	mov	r1, r7
 801441e:	4630      	mov	r0, r6
 8014420:	eb04 0903 	add.w	r9, r4, r3
 8014424:	f000 f864 	bl	80144f0 <_sbrk_r>
 8014428:	4581      	cmp	r9, r0
 801442a:	d142      	bne.n	80144b2 <_malloc_r+0xea>
 801442c:	6821      	ldr	r1, [r4, #0]
 801442e:	4630      	mov	r0, r6
 8014430:	1a6d      	subs	r5, r5, r1
 8014432:	4629      	mov	r1, r5
 8014434:	f7ff ffa6 	bl	8014384 <sbrk_aligned>
 8014438:	3001      	adds	r0, #1
 801443a:	d03a      	beq.n	80144b2 <_malloc_r+0xea>
 801443c:	6823      	ldr	r3, [r4, #0]
 801443e:	442b      	add	r3, r5
 8014440:	6023      	str	r3, [r4, #0]
 8014442:	f8d8 3000 	ldr.w	r3, [r8]
 8014446:	685a      	ldr	r2, [r3, #4]
 8014448:	bb62      	cbnz	r2, 80144a4 <_malloc_r+0xdc>
 801444a:	f8c8 7000 	str.w	r7, [r8]
 801444e:	e00f      	b.n	8014470 <_malloc_r+0xa8>
 8014450:	6822      	ldr	r2, [r4, #0]
 8014452:	1b52      	subs	r2, r2, r5
 8014454:	d420      	bmi.n	8014498 <_malloc_r+0xd0>
 8014456:	2a0b      	cmp	r2, #11
 8014458:	d917      	bls.n	801448a <_malloc_r+0xc2>
 801445a:	1961      	adds	r1, r4, r5
 801445c:	42a3      	cmp	r3, r4
 801445e:	6025      	str	r5, [r4, #0]
 8014460:	bf18      	it	ne
 8014462:	6059      	strne	r1, [r3, #4]
 8014464:	6863      	ldr	r3, [r4, #4]
 8014466:	bf08      	it	eq
 8014468:	f8c8 1000 	streq.w	r1, [r8]
 801446c:	5162      	str	r2, [r4, r5]
 801446e:	604b      	str	r3, [r1, #4]
 8014470:	4630      	mov	r0, r6
 8014472:	f000 f82f 	bl	80144d4 <__malloc_unlock>
 8014476:	f104 000b 	add.w	r0, r4, #11
 801447a:	1d23      	adds	r3, r4, #4
 801447c:	f020 0007 	bic.w	r0, r0, #7
 8014480:	1ac2      	subs	r2, r0, r3
 8014482:	bf1c      	itt	ne
 8014484:	1a1b      	subne	r3, r3, r0
 8014486:	50a3      	strne	r3, [r4, r2]
 8014488:	e7af      	b.n	80143ea <_malloc_r+0x22>
 801448a:	6862      	ldr	r2, [r4, #4]
 801448c:	42a3      	cmp	r3, r4
 801448e:	bf0c      	ite	eq
 8014490:	f8c8 2000 	streq.w	r2, [r8]
 8014494:	605a      	strne	r2, [r3, #4]
 8014496:	e7eb      	b.n	8014470 <_malloc_r+0xa8>
 8014498:	4623      	mov	r3, r4
 801449a:	6864      	ldr	r4, [r4, #4]
 801449c:	e7ae      	b.n	80143fc <_malloc_r+0x34>
 801449e:	463c      	mov	r4, r7
 80144a0:	687f      	ldr	r7, [r7, #4]
 80144a2:	e7b6      	b.n	8014412 <_malloc_r+0x4a>
 80144a4:	461a      	mov	r2, r3
 80144a6:	685b      	ldr	r3, [r3, #4]
 80144a8:	42a3      	cmp	r3, r4
 80144aa:	d1fb      	bne.n	80144a4 <_malloc_r+0xdc>
 80144ac:	2300      	movs	r3, #0
 80144ae:	6053      	str	r3, [r2, #4]
 80144b0:	e7de      	b.n	8014470 <_malloc_r+0xa8>
 80144b2:	230c      	movs	r3, #12
 80144b4:	4630      	mov	r0, r6
 80144b6:	6033      	str	r3, [r6, #0]
 80144b8:	f000 f80c 	bl	80144d4 <__malloc_unlock>
 80144bc:	e794      	b.n	80143e8 <_malloc_r+0x20>
 80144be:	6005      	str	r5, [r0, #0]
 80144c0:	e7d6      	b.n	8014470 <_malloc_r+0xa8>
 80144c2:	bf00      	nop
 80144c4:	20002ccc 	.word	0x20002ccc

080144c8 <__malloc_lock>:
 80144c8:	4801      	ldr	r0, [pc, #4]	@ (80144d0 <__malloc_lock+0x8>)
 80144ca:	f000 b84b 	b.w	8014564 <__retarget_lock_acquire_recursive>
 80144ce:	bf00      	nop
 80144d0:	20002e0c 	.word	0x20002e0c

080144d4 <__malloc_unlock>:
 80144d4:	4801      	ldr	r0, [pc, #4]	@ (80144dc <__malloc_unlock+0x8>)
 80144d6:	f000 b846 	b.w	8014566 <__retarget_lock_release_recursive>
 80144da:	bf00      	nop
 80144dc:	20002e0c 	.word	0x20002e0c

080144e0 <memset>:
 80144e0:	4603      	mov	r3, r0
 80144e2:	4402      	add	r2, r0
 80144e4:	4293      	cmp	r3, r2
 80144e6:	d100      	bne.n	80144ea <memset+0xa>
 80144e8:	4770      	bx	lr
 80144ea:	f803 1b01 	strb.w	r1, [r3], #1
 80144ee:	e7f9      	b.n	80144e4 <memset+0x4>

080144f0 <_sbrk_r>:
 80144f0:	b538      	push	{r3, r4, r5, lr}
 80144f2:	2300      	movs	r3, #0
 80144f4:	4d05      	ldr	r5, [pc, #20]	@ (801450c <_sbrk_r+0x1c>)
 80144f6:	4604      	mov	r4, r0
 80144f8:	4608      	mov	r0, r1
 80144fa:	602b      	str	r3, [r5, #0]
 80144fc:	f7f1 fa24 	bl	8005948 <_sbrk>
 8014500:	1c43      	adds	r3, r0, #1
 8014502:	d102      	bne.n	801450a <_sbrk_r+0x1a>
 8014504:	682b      	ldr	r3, [r5, #0]
 8014506:	b103      	cbz	r3, 801450a <_sbrk_r+0x1a>
 8014508:	6023      	str	r3, [r4, #0]
 801450a:	bd38      	pop	{r3, r4, r5, pc}
 801450c:	20002e08 	.word	0x20002e08

08014510 <__errno>:
 8014510:	4b01      	ldr	r3, [pc, #4]	@ (8014518 <__errno+0x8>)
 8014512:	6818      	ldr	r0, [r3, #0]
 8014514:	4770      	bx	lr
 8014516:	bf00      	nop
 8014518:	20000074 	.word	0x20000074

0801451c <__libc_init_array>:
 801451c:	b570      	push	{r4, r5, r6, lr}
 801451e:	2600      	movs	r6, #0
 8014520:	4d0c      	ldr	r5, [pc, #48]	@ (8014554 <__libc_init_array+0x38>)
 8014522:	4c0d      	ldr	r4, [pc, #52]	@ (8014558 <__libc_init_array+0x3c>)
 8014524:	1b64      	subs	r4, r4, r5
 8014526:	10a4      	asrs	r4, r4, #2
 8014528:	42a6      	cmp	r6, r4
 801452a:	d109      	bne.n	8014540 <__libc_init_array+0x24>
 801452c:	f000 fdd0 	bl	80150d0 <_init>
 8014530:	2600      	movs	r6, #0
 8014532:	4d0a      	ldr	r5, [pc, #40]	@ (801455c <__libc_init_array+0x40>)
 8014534:	4c0a      	ldr	r4, [pc, #40]	@ (8014560 <__libc_init_array+0x44>)
 8014536:	1b64      	subs	r4, r4, r5
 8014538:	10a4      	asrs	r4, r4, #2
 801453a:	42a6      	cmp	r6, r4
 801453c:	d105      	bne.n	801454a <__libc_init_array+0x2e>
 801453e:	bd70      	pop	{r4, r5, r6, pc}
 8014540:	f855 3b04 	ldr.w	r3, [r5], #4
 8014544:	4798      	blx	r3
 8014546:	3601      	adds	r6, #1
 8014548:	e7ee      	b.n	8014528 <__libc_init_array+0xc>
 801454a:	f855 3b04 	ldr.w	r3, [r5], #4
 801454e:	4798      	blx	r3
 8014550:	3601      	adds	r6, #1
 8014552:	e7f2      	b.n	801453a <__libc_init_array+0x1e>
 8014554:	080158b0 	.word	0x080158b0
 8014558:	080158b0 	.word	0x080158b0
 801455c:	080158b0 	.word	0x080158b0
 8014560:	080158b4 	.word	0x080158b4

08014564 <__retarget_lock_acquire_recursive>:
 8014564:	4770      	bx	lr

08014566 <__retarget_lock_release_recursive>:
 8014566:	4770      	bx	lr

08014568 <memcpy>:
 8014568:	440a      	add	r2, r1
 801456a:	4291      	cmp	r1, r2
 801456c:	f100 33ff 	add.w	r3, r0, #4294967295
 8014570:	d100      	bne.n	8014574 <memcpy+0xc>
 8014572:	4770      	bx	lr
 8014574:	b510      	push	{r4, lr}
 8014576:	f811 4b01 	ldrb.w	r4, [r1], #1
 801457a:	4291      	cmp	r1, r2
 801457c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014580:	d1f9      	bne.n	8014576 <memcpy+0xe>
 8014582:	bd10      	pop	{r4, pc}

08014584 <sqrt>:
 8014584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014586:	4606      	mov	r6, r0
 8014588:	460f      	mov	r7, r1
 801458a:	f000 f88f 	bl	80146ac <__ieee754_sqrt>
 801458e:	4632      	mov	r2, r6
 8014590:	4604      	mov	r4, r0
 8014592:	460d      	mov	r5, r1
 8014594:	463b      	mov	r3, r7
 8014596:	4630      	mov	r0, r6
 8014598:	4639      	mov	r1, r7
 801459a:	f7ec fa9f 	bl	8000adc <__aeabi_dcmpun>
 801459e:	b990      	cbnz	r0, 80145c6 <sqrt+0x42>
 80145a0:	2200      	movs	r2, #0
 80145a2:	2300      	movs	r3, #0
 80145a4:	4630      	mov	r0, r6
 80145a6:	4639      	mov	r1, r7
 80145a8:	f7ec fa70 	bl	8000a8c <__aeabi_dcmplt>
 80145ac:	b158      	cbz	r0, 80145c6 <sqrt+0x42>
 80145ae:	f7ff ffaf 	bl	8014510 <__errno>
 80145b2:	2321      	movs	r3, #33	@ 0x21
 80145b4:	2200      	movs	r2, #0
 80145b6:	6003      	str	r3, [r0, #0]
 80145b8:	2300      	movs	r3, #0
 80145ba:	4610      	mov	r0, r2
 80145bc:	4619      	mov	r1, r3
 80145be:	f7ec f91d 	bl	80007fc <__aeabi_ddiv>
 80145c2:	4604      	mov	r4, r0
 80145c4:	460d      	mov	r5, r1
 80145c6:	4620      	mov	r0, r4
 80145c8:	4629      	mov	r1, r5
 80145ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080145cc <powf>:
 80145cc:	b570      	push	{r4, r5, r6, lr}
 80145ce:	460c      	mov	r4, r1
 80145d0:	4606      	mov	r6, r0
 80145d2:	f000 f9b1 	bl	8014938 <__ieee754_powf>
 80145d6:	4621      	mov	r1, r4
 80145d8:	4605      	mov	r5, r0
 80145da:	4620      	mov	r0, r4
 80145dc:	f7ec fd90 	bl	8001100 <__aeabi_fcmpun>
 80145e0:	bb68      	cbnz	r0, 801463e <powf+0x72>
 80145e2:	2100      	movs	r1, #0
 80145e4:	4630      	mov	r0, r6
 80145e6:	f7ec fd59 	bl	800109c <__aeabi_fcmpeq>
 80145ea:	b190      	cbz	r0, 8014612 <powf+0x46>
 80145ec:	2100      	movs	r1, #0
 80145ee:	4620      	mov	r0, r4
 80145f0:	f7ec fd54 	bl	800109c <__aeabi_fcmpeq>
 80145f4:	2800      	cmp	r0, #0
 80145f6:	d133      	bne.n	8014660 <powf+0x94>
 80145f8:	4620      	mov	r0, r4
 80145fa:	f000 f84e 	bl	801469a <finitef>
 80145fe:	b1f0      	cbz	r0, 801463e <powf+0x72>
 8014600:	2100      	movs	r1, #0
 8014602:	4620      	mov	r0, r4
 8014604:	f7ec fd54 	bl	80010b0 <__aeabi_fcmplt>
 8014608:	b1c8      	cbz	r0, 801463e <powf+0x72>
 801460a:	f7ff ff81 	bl	8014510 <__errno>
 801460e:	2322      	movs	r3, #34	@ 0x22
 8014610:	e014      	b.n	801463c <powf+0x70>
 8014612:	4628      	mov	r0, r5
 8014614:	f000 f841 	bl	801469a <finitef>
 8014618:	b998      	cbnz	r0, 8014642 <powf+0x76>
 801461a:	4630      	mov	r0, r6
 801461c:	f000 f83d 	bl	801469a <finitef>
 8014620:	b178      	cbz	r0, 8014642 <powf+0x76>
 8014622:	4620      	mov	r0, r4
 8014624:	f000 f839 	bl	801469a <finitef>
 8014628:	b158      	cbz	r0, 8014642 <powf+0x76>
 801462a:	4629      	mov	r1, r5
 801462c:	4628      	mov	r0, r5
 801462e:	f7ec fd67 	bl	8001100 <__aeabi_fcmpun>
 8014632:	2800      	cmp	r0, #0
 8014634:	d0e9      	beq.n	801460a <powf+0x3e>
 8014636:	f7ff ff6b 	bl	8014510 <__errno>
 801463a:	2321      	movs	r3, #33	@ 0x21
 801463c:	6003      	str	r3, [r0, #0]
 801463e:	4628      	mov	r0, r5
 8014640:	bd70      	pop	{r4, r5, r6, pc}
 8014642:	2100      	movs	r1, #0
 8014644:	4628      	mov	r0, r5
 8014646:	f7ec fd29 	bl	800109c <__aeabi_fcmpeq>
 801464a:	2800      	cmp	r0, #0
 801464c:	d0f7      	beq.n	801463e <powf+0x72>
 801464e:	4630      	mov	r0, r6
 8014650:	f000 f823 	bl	801469a <finitef>
 8014654:	2800      	cmp	r0, #0
 8014656:	d0f2      	beq.n	801463e <powf+0x72>
 8014658:	4620      	mov	r0, r4
 801465a:	f000 f81e 	bl	801469a <finitef>
 801465e:	e7d3      	b.n	8014608 <powf+0x3c>
 8014660:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8014664:	e7eb      	b.n	801463e <powf+0x72>

08014666 <sqrtf>:
 8014666:	b538      	push	{r3, r4, r5, lr}
 8014668:	4605      	mov	r5, r0
 801466a:	f000 f8f5 	bl	8014858 <__ieee754_sqrtf>
 801466e:	4629      	mov	r1, r5
 8014670:	4604      	mov	r4, r0
 8014672:	4628      	mov	r0, r5
 8014674:	f7ec fd44 	bl	8001100 <__aeabi_fcmpun>
 8014678:	b968      	cbnz	r0, 8014696 <sqrtf+0x30>
 801467a:	2100      	movs	r1, #0
 801467c:	4628      	mov	r0, r5
 801467e:	f7ec fd17 	bl	80010b0 <__aeabi_fcmplt>
 8014682:	b140      	cbz	r0, 8014696 <sqrtf+0x30>
 8014684:	f7ff ff44 	bl	8014510 <__errno>
 8014688:	2321      	movs	r3, #33	@ 0x21
 801468a:	2100      	movs	r1, #0
 801468c:	6003      	str	r3, [r0, #0]
 801468e:	4608      	mov	r0, r1
 8014690:	f7ec fc24 	bl	8000edc <__aeabi_fdiv>
 8014694:	4604      	mov	r4, r0
 8014696:	4620      	mov	r0, r4
 8014698:	bd38      	pop	{r3, r4, r5, pc}

0801469a <finitef>:
 801469a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801469e:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80146a2:	bfac      	ite	ge
 80146a4:	2000      	movge	r0, #0
 80146a6:	2001      	movlt	r0, #1
 80146a8:	4770      	bx	lr
	...

080146ac <__ieee754_sqrt>:
 80146ac:	4a67      	ldr	r2, [pc, #412]	@ (801484c <__ieee754_sqrt+0x1a0>)
 80146ae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146b2:	438a      	bics	r2, r1
 80146b4:	4606      	mov	r6, r0
 80146b6:	460f      	mov	r7, r1
 80146b8:	460b      	mov	r3, r1
 80146ba:	4604      	mov	r4, r0
 80146bc:	d10e      	bne.n	80146dc <__ieee754_sqrt+0x30>
 80146be:	4602      	mov	r2, r0
 80146c0:	f7eb ff72 	bl	80005a8 <__aeabi_dmul>
 80146c4:	4602      	mov	r2, r0
 80146c6:	460b      	mov	r3, r1
 80146c8:	4630      	mov	r0, r6
 80146ca:	4639      	mov	r1, r7
 80146cc:	f7eb fdb6 	bl	800023c <__adddf3>
 80146d0:	4606      	mov	r6, r0
 80146d2:	460f      	mov	r7, r1
 80146d4:	4630      	mov	r0, r6
 80146d6:	4639      	mov	r1, r7
 80146d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146dc:	2900      	cmp	r1, #0
 80146de:	dc0c      	bgt.n	80146fa <__ieee754_sqrt+0x4e>
 80146e0:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80146e4:	4302      	orrs	r2, r0
 80146e6:	d0f5      	beq.n	80146d4 <__ieee754_sqrt+0x28>
 80146e8:	b189      	cbz	r1, 801470e <__ieee754_sqrt+0x62>
 80146ea:	4602      	mov	r2, r0
 80146ec:	f7eb fda4 	bl	8000238 <__aeabi_dsub>
 80146f0:	4602      	mov	r2, r0
 80146f2:	460b      	mov	r3, r1
 80146f4:	f7ec f882 	bl	80007fc <__aeabi_ddiv>
 80146f8:	e7ea      	b.n	80146d0 <__ieee754_sqrt+0x24>
 80146fa:	150a      	asrs	r2, r1, #20
 80146fc:	d115      	bne.n	801472a <__ieee754_sqrt+0x7e>
 80146fe:	2100      	movs	r1, #0
 8014700:	e009      	b.n	8014716 <__ieee754_sqrt+0x6a>
 8014702:	0ae3      	lsrs	r3, r4, #11
 8014704:	3a15      	subs	r2, #21
 8014706:	0564      	lsls	r4, r4, #21
 8014708:	2b00      	cmp	r3, #0
 801470a:	d0fa      	beq.n	8014702 <__ieee754_sqrt+0x56>
 801470c:	e7f7      	b.n	80146fe <__ieee754_sqrt+0x52>
 801470e:	460a      	mov	r2, r1
 8014710:	e7fa      	b.n	8014708 <__ieee754_sqrt+0x5c>
 8014712:	005b      	lsls	r3, r3, #1
 8014714:	3101      	adds	r1, #1
 8014716:	02d8      	lsls	r0, r3, #11
 8014718:	d5fb      	bpl.n	8014712 <__ieee754_sqrt+0x66>
 801471a:	1e48      	subs	r0, r1, #1
 801471c:	1a12      	subs	r2, r2, r0
 801471e:	f1c1 0020 	rsb	r0, r1, #32
 8014722:	fa24 f000 	lsr.w	r0, r4, r0
 8014726:	4303      	orrs	r3, r0
 8014728:	408c      	lsls	r4, r1
 801472a:	2600      	movs	r6, #0
 801472c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8014730:	2116      	movs	r1, #22
 8014732:	07d2      	lsls	r2, r2, #31
 8014734:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8014738:	4632      	mov	r2, r6
 801473a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801473e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014742:	bf5c      	itt	pl
 8014744:	005b      	lslpl	r3, r3, #1
 8014746:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 801474a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801474e:	bf58      	it	pl
 8014750:	0064      	lslpl	r4, r4, #1
 8014752:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8014756:	107f      	asrs	r7, r7, #1
 8014758:	0064      	lsls	r4, r4, #1
 801475a:	1815      	adds	r5, r2, r0
 801475c:	429d      	cmp	r5, r3
 801475e:	bfde      	ittt	le
 8014760:	182a      	addle	r2, r5, r0
 8014762:	1b5b      	suble	r3, r3, r5
 8014764:	1836      	addle	r6, r6, r0
 8014766:	0fe5      	lsrs	r5, r4, #31
 8014768:	3901      	subs	r1, #1
 801476a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801476e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8014772:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8014776:	d1f0      	bne.n	801475a <__ieee754_sqrt+0xae>
 8014778:	460d      	mov	r5, r1
 801477a:	f04f 0a20 	mov.w	sl, #32
 801477e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8014782:	429a      	cmp	r2, r3
 8014784:	eb01 0c00 	add.w	ip, r1, r0
 8014788:	db02      	blt.n	8014790 <__ieee754_sqrt+0xe4>
 801478a:	d113      	bne.n	80147b4 <__ieee754_sqrt+0x108>
 801478c:	45a4      	cmp	ip, r4
 801478e:	d811      	bhi.n	80147b4 <__ieee754_sqrt+0x108>
 8014790:	f1bc 0f00 	cmp.w	ip, #0
 8014794:	eb0c 0100 	add.w	r1, ip, r0
 8014798:	da42      	bge.n	8014820 <__ieee754_sqrt+0x174>
 801479a:	2900      	cmp	r1, #0
 801479c:	db40      	blt.n	8014820 <__ieee754_sqrt+0x174>
 801479e:	f102 0e01 	add.w	lr, r2, #1
 80147a2:	1a9b      	subs	r3, r3, r2
 80147a4:	4672      	mov	r2, lr
 80147a6:	45a4      	cmp	ip, r4
 80147a8:	bf88      	it	hi
 80147aa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80147ae:	eba4 040c 	sub.w	r4, r4, ip
 80147b2:	4405      	add	r5, r0
 80147b4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80147b8:	f1ba 0a01 	subs.w	sl, sl, #1
 80147bc:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80147c0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80147c4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80147c8:	d1db      	bne.n	8014782 <__ieee754_sqrt+0xd6>
 80147ca:	431c      	orrs	r4, r3
 80147cc:	d01a      	beq.n	8014804 <__ieee754_sqrt+0x158>
 80147ce:	4c20      	ldr	r4, [pc, #128]	@ (8014850 <__ieee754_sqrt+0x1a4>)
 80147d0:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8014854 <__ieee754_sqrt+0x1a8>
 80147d4:	e9d4 0100 	ldrd	r0, r1, [r4]
 80147d8:	e9db 2300 	ldrd	r2, r3, [fp]
 80147dc:	f7eb fd2c 	bl	8000238 <__aeabi_dsub>
 80147e0:	e9d4 8900 	ldrd	r8, r9, [r4]
 80147e4:	4602      	mov	r2, r0
 80147e6:	460b      	mov	r3, r1
 80147e8:	4640      	mov	r0, r8
 80147ea:	4649      	mov	r1, r9
 80147ec:	f7ec f958 	bl	8000aa0 <__aeabi_dcmple>
 80147f0:	b140      	cbz	r0, 8014804 <__ieee754_sqrt+0x158>
 80147f2:	e9d4 0100 	ldrd	r0, r1, [r4]
 80147f6:	e9db 2300 	ldrd	r2, r3, [fp]
 80147fa:	f1b5 3fff 	cmp.w	r5, #4294967295
 80147fe:	d111      	bne.n	8014824 <__ieee754_sqrt+0x178>
 8014800:	4655      	mov	r5, sl
 8014802:	3601      	adds	r6, #1
 8014804:	1072      	asrs	r2, r6, #1
 8014806:	086b      	lsrs	r3, r5, #1
 8014808:	07f1      	lsls	r1, r6, #31
 801480a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801480e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8014812:	bf48      	it	mi
 8014814:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8014818:	4618      	mov	r0, r3
 801481a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 801481e:	e757      	b.n	80146d0 <__ieee754_sqrt+0x24>
 8014820:	4696      	mov	lr, r2
 8014822:	e7be      	b.n	80147a2 <__ieee754_sqrt+0xf6>
 8014824:	f7eb fd0a 	bl	800023c <__adddf3>
 8014828:	e9d4 8900 	ldrd	r8, r9, [r4]
 801482c:	4602      	mov	r2, r0
 801482e:	460b      	mov	r3, r1
 8014830:	4640      	mov	r0, r8
 8014832:	4649      	mov	r1, r9
 8014834:	f7ec f92a 	bl	8000a8c <__aeabi_dcmplt>
 8014838:	b120      	cbz	r0, 8014844 <__ieee754_sqrt+0x198>
 801483a:	1ca8      	adds	r0, r5, #2
 801483c:	bf08      	it	eq
 801483e:	3601      	addeq	r6, #1
 8014840:	3502      	adds	r5, #2
 8014842:	e7df      	b.n	8014804 <__ieee754_sqrt+0x158>
 8014844:	1c6b      	adds	r3, r5, #1
 8014846:	f023 0501 	bic.w	r5, r3, #1
 801484a:	e7db      	b.n	8014804 <__ieee754_sqrt+0x158>
 801484c:	7ff00000 	.word	0x7ff00000
 8014850:	200000d0 	.word	0x200000d0
 8014854:	200000c8 	.word	0x200000c8

08014858 <__ieee754_sqrtf>:
 8014858:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 801485c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8014860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014864:	4603      	mov	r3, r0
 8014866:	4604      	mov	r4, r0
 8014868:	d30a      	bcc.n	8014880 <__ieee754_sqrtf+0x28>
 801486a:	4601      	mov	r1, r0
 801486c:	f7ec fa82 	bl	8000d74 <__aeabi_fmul>
 8014870:	4601      	mov	r1, r0
 8014872:	4620      	mov	r0, r4
 8014874:	f7ec f976 	bl	8000b64 <__addsf3>
 8014878:	4604      	mov	r4, r0
 801487a:	4620      	mov	r0, r4
 801487c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014880:	2a00      	cmp	r2, #0
 8014882:	d0fa      	beq.n	801487a <__ieee754_sqrtf+0x22>
 8014884:	2800      	cmp	r0, #0
 8014886:	da06      	bge.n	8014896 <__ieee754_sqrtf+0x3e>
 8014888:	4601      	mov	r1, r0
 801488a:	f7ec f969 	bl	8000b60 <__aeabi_fsub>
 801488e:	4601      	mov	r1, r0
 8014890:	f7ec fb24 	bl	8000edc <__aeabi_fdiv>
 8014894:	e7f0      	b.n	8014878 <__ieee754_sqrtf+0x20>
 8014896:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 801489a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 801489e:	d03e      	beq.n	801491e <__ieee754_sqrtf+0xc6>
 80148a0:	2400      	movs	r4, #0
 80148a2:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 80148a6:	07ca      	lsls	r2, r1, #31
 80148a8:	f04f 0019 	mov.w	r0, #25
 80148ac:	4626      	mov	r6, r4
 80148ae:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80148b2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80148b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80148ba:	bf58      	it	pl
 80148bc:	005b      	lslpl	r3, r3, #1
 80148be:	106d      	asrs	r5, r5, #1
 80148c0:	005b      	lsls	r3, r3, #1
 80148c2:	1872      	adds	r2, r6, r1
 80148c4:	429a      	cmp	r2, r3
 80148c6:	bfcf      	iteee	gt
 80148c8:	461a      	movgt	r2, r3
 80148ca:	1856      	addle	r6, r2, r1
 80148cc:	1864      	addle	r4, r4, r1
 80148ce:	1a9a      	suble	r2, r3, r2
 80148d0:	3801      	subs	r0, #1
 80148d2:	ea4f 0342 	mov.w	r3, r2, lsl #1
 80148d6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80148da:	d1f2      	bne.n	80148c2 <__ieee754_sqrtf+0x6a>
 80148dc:	b1ba      	cbz	r2, 801490e <__ieee754_sqrtf+0xb6>
 80148de:	4e14      	ldr	r6, [pc, #80]	@ (8014930 <__ieee754_sqrtf+0xd8>)
 80148e0:	4f14      	ldr	r7, [pc, #80]	@ (8014934 <__ieee754_sqrtf+0xdc>)
 80148e2:	6830      	ldr	r0, [r6, #0]
 80148e4:	6839      	ldr	r1, [r7, #0]
 80148e6:	f7ec f93b 	bl	8000b60 <__aeabi_fsub>
 80148ea:	f8d6 8000 	ldr.w	r8, [r6]
 80148ee:	4601      	mov	r1, r0
 80148f0:	4640      	mov	r0, r8
 80148f2:	f7ec fbe7 	bl	80010c4 <__aeabi_fcmple>
 80148f6:	b150      	cbz	r0, 801490e <__ieee754_sqrtf+0xb6>
 80148f8:	6830      	ldr	r0, [r6, #0]
 80148fa:	6839      	ldr	r1, [r7, #0]
 80148fc:	f7ec f932 	bl	8000b64 <__addsf3>
 8014900:	6836      	ldr	r6, [r6, #0]
 8014902:	4601      	mov	r1, r0
 8014904:	4630      	mov	r0, r6
 8014906:	f7ec fbd3 	bl	80010b0 <__aeabi_fcmplt>
 801490a:	b168      	cbz	r0, 8014928 <__ieee754_sqrtf+0xd0>
 801490c:	3402      	adds	r4, #2
 801490e:	1064      	asrs	r4, r4, #1
 8014910:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8014914:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8014918:	e7af      	b.n	801487a <__ieee754_sqrtf+0x22>
 801491a:	005b      	lsls	r3, r3, #1
 801491c:	3201      	adds	r2, #1
 801491e:	0218      	lsls	r0, r3, #8
 8014920:	d5fb      	bpl.n	801491a <__ieee754_sqrtf+0xc2>
 8014922:	3a01      	subs	r2, #1
 8014924:	1a89      	subs	r1, r1, r2
 8014926:	e7bb      	b.n	80148a0 <__ieee754_sqrtf+0x48>
 8014928:	3401      	adds	r4, #1
 801492a:	f024 0401 	bic.w	r4, r4, #1
 801492e:	e7ee      	b.n	801490e <__ieee754_sqrtf+0xb6>
 8014930:	200000dc 	.word	0x200000dc
 8014934:	200000d8 	.word	0x200000d8

08014938 <__ieee754_powf>:
 8014938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801493c:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 8014940:	4680      	mov	r8, r0
 8014942:	460f      	mov	r7, r1
 8014944:	4606      	mov	r6, r0
 8014946:	460c      	mov	r4, r1
 8014948:	b087      	sub	sp, #28
 801494a:	d10c      	bne.n	8014966 <__ieee754_powf+0x2e>
 801494c:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 8014950:	0076      	lsls	r6, r6, #1
 8014952:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8014956:	f240 8336 	bls.w	8014fc6 <__ieee754_powf+0x68e>
 801495a:	4639      	mov	r1, r7
 801495c:	4640      	mov	r0, r8
 801495e:	f7ec f901 	bl	8000b64 <__addsf3>
 8014962:	4601      	mov	r1, r0
 8014964:	e03e      	b.n	80149e4 <__ieee754_powf+0xac>
 8014966:	f020 4900 	bic.w	r9, r0, #2147483648	@ 0x80000000
 801496a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801496e:	d802      	bhi.n	8014976 <__ieee754_powf+0x3e>
 8014970:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8014974:	d908      	bls.n	8014988 <__ieee754_powf+0x50>
 8014976:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 801497a:	d1ee      	bne.n	801495a <__ieee754_powf+0x22>
 801497c:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8014980:	0064      	lsls	r4, r4, #1
 8014982:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8014986:	e7e6      	b.n	8014956 <__ieee754_powf+0x1e>
 8014988:	2800      	cmp	r0, #0
 801498a:	da1e      	bge.n	80149ca <__ieee754_powf+0x92>
 801498c:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 8014990:	d22c      	bcs.n	80149ec <__ieee754_powf+0xb4>
 8014992:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8014996:	d333      	bcc.n	8014a00 <__ieee754_powf+0xc8>
 8014998:	ea4f 53eb 	mov.w	r3, fp, asr #23
 801499c:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80149a0:	fa4b f503 	asr.w	r5, fp, r3
 80149a4:	fa05 f303 	lsl.w	r3, r5, r3
 80149a8:	455b      	cmp	r3, fp
 80149aa:	d127      	bne.n	80149fc <__ieee754_powf+0xc4>
 80149ac:	f005 0501 	and.w	r5, r5, #1
 80149b0:	f1c5 0502 	rsb	r5, r5, #2
 80149b4:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 80149b8:	d123      	bne.n	8014a02 <__ieee754_powf+0xca>
 80149ba:	2c00      	cmp	r4, #0
 80149bc:	4641      	mov	r1, r8
 80149be:	da11      	bge.n	80149e4 <__ieee754_powf+0xac>
 80149c0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80149c4:	f7ec fa8a 	bl	8000edc <__aeabi_fdiv>
 80149c8:	e7cb      	b.n	8014962 <__ieee754_powf+0x2a>
 80149ca:	2500      	movs	r5, #0
 80149cc:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 80149d0:	d1f0      	bne.n	80149b4 <__ieee754_powf+0x7c>
 80149d2:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80149d6:	f000 82f6 	beq.w	8014fc6 <__ieee754_powf+0x68e>
 80149da:	d909      	bls.n	80149f0 <__ieee754_powf+0xb8>
 80149dc:	2c00      	cmp	r4, #0
 80149de:	f2c0 82f5 	blt.w	8014fcc <__ieee754_powf+0x694>
 80149e2:	4639      	mov	r1, r7
 80149e4:	4608      	mov	r0, r1
 80149e6:	b007      	add	sp, #28
 80149e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149ec:	2502      	movs	r5, #2
 80149ee:	e7ed      	b.n	80149cc <__ieee754_powf+0x94>
 80149f0:	2c00      	cmp	r4, #0
 80149f2:	f280 82eb 	bge.w	8014fcc <__ieee754_powf+0x694>
 80149f6:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 80149fa:	e7f3      	b.n	80149e4 <__ieee754_powf+0xac>
 80149fc:	2500      	movs	r5, #0
 80149fe:	e7d9      	b.n	80149b4 <__ieee754_powf+0x7c>
 8014a00:	2500      	movs	r5, #0
 8014a02:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8014a06:	d104      	bne.n	8014a12 <__ieee754_powf+0xda>
 8014a08:	4641      	mov	r1, r8
 8014a0a:	4640      	mov	r0, r8
 8014a0c:	f7ec f9b2 	bl	8000d74 <__aeabi_fmul>
 8014a10:	e7a7      	b.n	8014962 <__ieee754_powf+0x2a>
 8014a12:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8014a16:	d107      	bne.n	8014a28 <__ieee754_powf+0xf0>
 8014a18:	2e00      	cmp	r6, #0
 8014a1a:	db05      	blt.n	8014a28 <__ieee754_powf+0xf0>
 8014a1c:	4640      	mov	r0, r8
 8014a1e:	b007      	add	sp, #28
 8014a20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a24:	f7ff bf18 	b.w	8014858 <__ieee754_sqrtf>
 8014a28:	4640      	mov	r0, r8
 8014a2a:	f000 fae3 	bl	8014ff4 <fabsf>
 8014a2e:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8014a32:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8014a36:	46ca      	mov	sl, r9
 8014a38:	4601      	mov	r1, r0
 8014a3a:	d002      	beq.n	8014a42 <__ieee754_powf+0x10a>
 8014a3c:	f1b9 0f00 	cmp.w	r9, #0
 8014a40:	d117      	bne.n	8014a72 <__ieee754_powf+0x13a>
 8014a42:	2c00      	cmp	r4, #0
 8014a44:	da04      	bge.n	8014a50 <__ieee754_powf+0x118>
 8014a46:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8014a4a:	f7ec fa47 	bl	8000edc <__aeabi_fdiv>
 8014a4e:	4601      	mov	r1, r0
 8014a50:	2e00      	cmp	r6, #0
 8014a52:	dac7      	bge.n	80149e4 <__ieee754_powf+0xac>
 8014a54:	f1a9 597e 	sub.w	r9, r9, #1065353216	@ 0x3f800000
 8014a58:	ea59 0905 	orrs.w	r9, r9, r5
 8014a5c:	d104      	bne.n	8014a68 <__ieee754_powf+0x130>
 8014a5e:	4608      	mov	r0, r1
 8014a60:	f7ec f87e 	bl	8000b60 <__aeabi_fsub>
 8014a64:	4601      	mov	r1, r0
 8014a66:	e7ad      	b.n	80149c4 <__ieee754_powf+0x8c>
 8014a68:	2d01      	cmp	r5, #1
 8014a6a:	d1bb      	bne.n	80149e4 <__ieee754_powf+0xac>
 8014a6c:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8014a70:	e777      	b.n	8014962 <__ieee754_powf+0x2a>
 8014a72:	0ff3      	lsrs	r3, r6, #31
 8014a74:	3b01      	subs	r3, #1
 8014a76:	9303      	str	r3, [sp, #12]
 8014a78:	432b      	orrs	r3, r5
 8014a7a:	d101      	bne.n	8014a80 <__ieee754_powf+0x148>
 8014a7c:	4641      	mov	r1, r8
 8014a7e:	e7ee      	b.n	8014a5e <__ieee754_powf+0x126>
 8014a80:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 8014a84:	f240 809e 	bls.w	8014bc4 <__ieee754_powf+0x28c>
 8014a88:	4b47      	ldr	r3, [pc, #284]	@ (8014ba8 <__ieee754_powf+0x270>)
 8014a8a:	4599      	cmp	r9, r3
 8014a8c:	d807      	bhi.n	8014a9e <__ieee754_powf+0x166>
 8014a8e:	2c00      	cmp	r4, #0
 8014a90:	da0a      	bge.n	8014aa8 <__ieee754_powf+0x170>
 8014a92:	2000      	movs	r0, #0
 8014a94:	b007      	add	sp, #28
 8014a96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a9a:	f000 bb14 	b.w	80150c6 <__math_oflowf>
 8014a9e:	4b43      	ldr	r3, [pc, #268]	@ (8014bac <__ieee754_powf+0x274>)
 8014aa0:	4599      	cmp	r9, r3
 8014aa2:	d907      	bls.n	8014ab4 <__ieee754_powf+0x17c>
 8014aa4:	2c00      	cmp	r4, #0
 8014aa6:	dcf4      	bgt.n	8014a92 <__ieee754_powf+0x15a>
 8014aa8:	2000      	movs	r0, #0
 8014aaa:	b007      	add	sp, #28
 8014aac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ab0:	f000 bb05 	b.w	80150be <__math_uflowf>
 8014ab4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8014ab8:	f7ec f852 	bl	8000b60 <__aeabi_fsub>
 8014abc:	493c      	ldr	r1, [pc, #240]	@ (8014bb0 <__ieee754_powf+0x278>)
 8014abe:	4606      	mov	r6, r0
 8014ac0:	f7ec f958 	bl	8000d74 <__aeabi_fmul>
 8014ac4:	493b      	ldr	r1, [pc, #236]	@ (8014bb4 <__ieee754_powf+0x27c>)
 8014ac6:	4680      	mov	r8, r0
 8014ac8:	4630      	mov	r0, r6
 8014aca:	f7ec f953 	bl	8000d74 <__aeabi_fmul>
 8014ace:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8014ad2:	4681      	mov	r9, r0
 8014ad4:	4630      	mov	r0, r6
 8014ad6:	f7ec f94d 	bl	8000d74 <__aeabi_fmul>
 8014ada:	4601      	mov	r1, r0
 8014adc:	4836      	ldr	r0, [pc, #216]	@ (8014bb8 <__ieee754_powf+0x280>)
 8014ade:	f7ec f83f 	bl	8000b60 <__aeabi_fsub>
 8014ae2:	4631      	mov	r1, r6
 8014ae4:	f7ec f946 	bl	8000d74 <__aeabi_fmul>
 8014ae8:	4601      	mov	r1, r0
 8014aea:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8014aee:	f7ec f837 	bl	8000b60 <__aeabi_fsub>
 8014af2:	4631      	mov	r1, r6
 8014af4:	4682      	mov	sl, r0
 8014af6:	4630      	mov	r0, r6
 8014af8:	f7ec f93c 	bl	8000d74 <__aeabi_fmul>
 8014afc:	4601      	mov	r1, r0
 8014afe:	4650      	mov	r0, sl
 8014b00:	f7ec f938 	bl	8000d74 <__aeabi_fmul>
 8014b04:	492d      	ldr	r1, [pc, #180]	@ (8014bbc <__ieee754_powf+0x284>)
 8014b06:	f7ec f935 	bl	8000d74 <__aeabi_fmul>
 8014b0a:	4601      	mov	r1, r0
 8014b0c:	4648      	mov	r0, r9
 8014b0e:	f7ec f827 	bl	8000b60 <__aeabi_fsub>
 8014b12:	4601      	mov	r1, r0
 8014b14:	4606      	mov	r6, r0
 8014b16:	4640      	mov	r0, r8
 8014b18:	f7ec f824 	bl	8000b64 <__addsf3>
 8014b1c:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8014b20:	f02b 0b0f 	bic.w	fp, fp, #15
 8014b24:	4641      	mov	r1, r8
 8014b26:	4658      	mov	r0, fp
 8014b28:	f7ec f81a 	bl	8000b60 <__aeabi_fsub>
 8014b2c:	4601      	mov	r1, r0
 8014b2e:	4630      	mov	r0, r6
 8014b30:	f7ec f816 	bl	8000b60 <__aeabi_fsub>
 8014b34:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8014b38:	9b03      	ldr	r3, [sp, #12]
 8014b3a:	3d01      	subs	r5, #1
 8014b3c:	f024 040f 	bic.w	r4, r4, #15
 8014b40:	431d      	orrs	r5, r3
 8014b42:	4606      	mov	r6, r0
 8014b44:	4621      	mov	r1, r4
 8014b46:	4638      	mov	r0, r7
 8014b48:	bf14      	ite	ne
 8014b4a:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 8014b4e:	4d1c      	ldreq	r5, [pc, #112]	@ (8014bc0 <__ieee754_powf+0x288>)
 8014b50:	f7ec f806 	bl	8000b60 <__aeabi_fsub>
 8014b54:	4659      	mov	r1, fp
 8014b56:	f7ec f90d 	bl	8000d74 <__aeabi_fmul>
 8014b5a:	4639      	mov	r1, r7
 8014b5c:	4680      	mov	r8, r0
 8014b5e:	4630      	mov	r0, r6
 8014b60:	f7ec f908 	bl	8000d74 <__aeabi_fmul>
 8014b64:	4601      	mov	r1, r0
 8014b66:	4640      	mov	r0, r8
 8014b68:	f7eb fffc 	bl	8000b64 <__addsf3>
 8014b6c:	4621      	mov	r1, r4
 8014b6e:	4606      	mov	r6, r0
 8014b70:	4658      	mov	r0, fp
 8014b72:	f7ec f8ff 	bl	8000d74 <__aeabi_fmul>
 8014b76:	4601      	mov	r1, r0
 8014b78:	4607      	mov	r7, r0
 8014b7a:	4630      	mov	r0, r6
 8014b7c:	f7eb fff2 	bl	8000b64 <__addsf3>
 8014b80:	2800      	cmp	r0, #0
 8014b82:	4604      	mov	r4, r0
 8014b84:	4680      	mov	r8, r0
 8014b86:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8014b8a:	f340 8141 	ble.w	8014e10 <__ieee754_powf+0x4d8>
 8014b8e:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8014b92:	f240 812a 	bls.w	8014dea <__ieee754_powf+0x4b2>
 8014b96:	2100      	movs	r1, #0
 8014b98:	4628      	mov	r0, r5
 8014b9a:	f7ec fa89 	bl	80010b0 <__aeabi_fcmplt>
 8014b9e:	3800      	subs	r0, #0
 8014ba0:	bf18      	it	ne
 8014ba2:	2001      	movne	r0, #1
 8014ba4:	e776      	b.n	8014a94 <__ieee754_powf+0x15c>
 8014ba6:	bf00      	nop
 8014ba8:	3f7ffff3 	.word	0x3f7ffff3
 8014bac:	3f800007 	.word	0x3f800007
 8014bb0:	3fb8aa00 	.word	0x3fb8aa00
 8014bb4:	36eca570 	.word	0x36eca570
 8014bb8:	3eaaaaab 	.word	0x3eaaaaab
 8014bbc:	3fb8aa3b 	.word	0x3fb8aa3b
 8014bc0:	bf800000 	.word	0xbf800000
 8014bc4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8014bc8:	f040 810b 	bne.w	8014de2 <__ieee754_powf+0x4aa>
 8014bcc:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 8014bd0:	f7ec f8d0 	bl	8000d74 <__aeabi_fmul>
 8014bd4:	f06f 0217 	mvn.w	r2, #23
 8014bd8:	4682      	mov	sl, r0
 8014bda:	ea4f 53ea 	mov.w	r3, sl, asr #23
 8014bde:	3b7f      	subs	r3, #127	@ 0x7f
 8014be0:	441a      	add	r2, r3
 8014be2:	4b96      	ldr	r3, [pc, #600]	@ (8014e3c <__ieee754_powf+0x504>)
 8014be4:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 8014be8:	459a      	cmp	sl, r3
 8014bea:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 8014bee:	dd06      	ble.n	8014bfe <__ieee754_powf+0x2c6>
 8014bf0:	4b93      	ldr	r3, [pc, #588]	@ (8014e40 <__ieee754_powf+0x508>)
 8014bf2:	459a      	cmp	sl, r3
 8014bf4:	f340 80f7 	ble.w	8014de6 <__ieee754_powf+0x4ae>
 8014bf8:	3201      	adds	r2, #1
 8014bfa:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 8014bfe:	2300      	movs	r3, #0
 8014c00:	9301      	str	r3, [sp, #4]
 8014c02:	9205      	str	r2, [sp, #20]
 8014c04:	4b8f      	ldr	r3, [pc, #572]	@ (8014e44 <__ieee754_powf+0x50c>)
 8014c06:	9a01      	ldr	r2, [sp, #4]
 8014c08:	4630      	mov	r0, r6
 8014c0a:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8014c0e:	46b2      	mov	sl, r6
 8014c10:	4659      	mov	r1, fp
 8014c12:	f7eb ffa5 	bl	8000b60 <__aeabi_fsub>
 8014c16:	4631      	mov	r1, r6
 8014c18:	4681      	mov	r9, r0
 8014c1a:	4658      	mov	r0, fp
 8014c1c:	f7eb ffa2 	bl	8000b64 <__addsf3>
 8014c20:	4601      	mov	r1, r0
 8014c22:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8014c26:	f7ec f959 	bl	8000edc <__aeabi_fdiv>
 8014c2a:	4601      	mov	r1, r0
 8014c2c:	9004      	str	r0, [sp, #16]
 8014c2e:	4648      	mov	r0, r9
 8014c30:	f7ec f8a0 	bl	8000d74 <__aeabi_fmul>
 8014c34:	9002      	str	r0, [sp, #8]
 8014c36:	9b02      	ldr	r3, [sp, #8]
 8014c38:	1076      	asrs	r6, r6, #1
 8014c3a:	f423 687f 	bic.w	r8, r3, #4080	@ 0xff0
 8014c3e:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 8014c42:	9b01      	ldr	r3, [sp, #4]
 8014c44:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 8014c48:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 8014c4c:	f028 080f 	bic.w	r8, r8, #15
 8014c50:	4631      	mov	r1, r6
 8014c52:	4640      	mov	r0, r8
 8014c54:	f7ec f88e 	bl	8000d74 <__aeabi_fmul>
 8014c58:	4601      	mov	r1, r0
 8014c5a:	4648      	mov	r0, r9
 8014c5c:	f7eb ff80 	bl	8000b60 <__aeabi_fsub>
 8014c60:	4659      	mov	r1, fp
 8014c62:	4681      	mov	r9, r0
 8014c64:	4630      	mov	r0, r6
 8014c66:	f7eb ff7b 	bl	8000b60 <__aeabi_fsub>
 8014c6a:	4601      	mov	r1, r0
 8014c6c:	4650      	mov	r0, sl
 8014c6e:	f7eb ff77 	bl	8000b60 <__aeabi_fsub>
 8014c72:	4641      	mov	r1, r8
 8014c74:	f7ec f87e 	bl	8000d74 <__aeabi_fmul>
 8014c78:	4601      	mov	r1, r0
 8014c7a:	4648      	mov	r0, r9
 8014c7c:	f7eb ff70 	bl	8000b60 <__aeabi_fsub>
 8014c80:	9b04      	ldr	r3, [sp, #16]
 8014c82:	4619      	mov	r1, r3
 8014c84:	f7ec f876 	bl	8000d74 <__aeabi_fmul>
 8014c88:	9902      	ldr	r1, [sp, #8]
 8014c8a:	4683      	mov	fp, r0
 8014c8c:	4608      	mov	r0, r1
 8014c8e:	f7ec f871 	bl	8000d74 <__aeabi_fmul>
 8014c92:	4606      	mov	r6, r0
 8014c94:	496c      	ldr	r1, [pc, #432]	@ (8014e48 <__ieee754_powf+0x510>)
 8014c96:	f7ec f86d 	bl	8000d74 <__aeabi_fmul>
 8014c9a:	496c      	ldr	r1, [pc, #432]	@ (8014e4c <__ieee754_powf+0x514>)
 8014c9c:	f7eb ff62 	bl	8000b64 <__addsf3>
 8014ca0:	4631      	mov	r1, r6
 8014ca2:	f7ec f867 	bl	8000d74 <__aeabi_fmul>
 8014ca6:	496a      	ldr	r1, [pc, #424]	@ (8014e50 <__ieee754_powf+0x518>)
 8014ca8:	f7eb ff5c 	bl	8000b64 <__addsf3>
 8014cac:	4631      	mov	r1, r6
 8014cae:	f7ec f861 	bl	8000d74 <__aeabi_fmul>
 8014cb2:	4968      	ldr	r1, [pc, #416]	@ (8014e54 <__ieee754_powf+0x51c>)
 8014cb4:	f7eb ff56 	bl	8000b64 <__addsf3>
 8014cb8:	4631      	mov	r1, r6
 8014cba:	f7ec f85b 	bl	8000d74 <__aeabi_fmul>
 8014cbe:	4966      	ldr	r1, [pc, #408]	@ (8014e58 <__ieee754_powf+0x520>)
 8014cc0:	f7eb ff50 	bl	8000b64 <__addsf3>
 8014cc4:	4631      	mov	r1, r6
 8014cc6:	f7ec f855 	bl	8000d74 <__aeabi_fmul>
 8014cca:	4964      	ldr	r1, [pc, #400]	@ (8014e5c <__ieee754_powf+0x524>)
 8014ccc:	f7eb ff4a 	bl	8000b64 <__addsf3>
 8014cd0:	4631      	mov	r1, r6
 8014cd2:	4681      	mov	r9, r0
 8014cd4:	4630      	mov	r0, r6
 8014cd6:	f7ec f84d 	bl	8000d74 <__aeabi_fmul>
 8014cda:	4601      	mov	r1, r0
 8014cdc:	4648      	mov	r0, r9
 8014cde:	f7ec f849 	bl	8000d74 <__aeabi_fmul>
 8014ce2:	4606      	mov	r6, r0
 8014ce4:	4641      	mov	r1, r8
 8014ce6:	9802      	ldr	r0, [sp, #8]
 8014ce8:	f7eb ff3c 	bl	8000b64 <__addsf3>
 8014cec:	4659      	mov	r1, fp
 8014cee:	f7ec f841 	bl	8000d74 <__aeabi_fmul>
 8014cf2:	4631      	mov	r1, r6
 8014cf4:	f7eb ff36 	bl	8000b64 <__addsf3>
 8014cf8:	4641      	mov	r1, r8
 8014cfa:	4681      	mov	r9, r0
 8014cfc:	4640      	mov	r0, r8
 8014cfe:	f7ec f839 	bl	8000d74 <__aeabi_fmul>
 8014d02:	4957      	ldr	r1, [pc, #348]	@ (8014e60 <__ieee754_powf+0x528>)
 8014d04:	4682      	mov	sl, r0
 8014d06:	f7eb ff2d 	bl	8000b64 <__addsf3>
 8014d0a:	4649      	mov	r1, r9
 8014d0c:	f7eb ff2a 	bl	8000b64 <__addsf3>
 8014d10:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8014d14:	f026 060f 	bic.w	r6, r6, #15
 8014d18:	4631      	mov	r1, r6
 8014d1a:	4640      	mov	r0, r8
 8014d1c:	f7ec f82a 	bl	8000d74 <__aeabi_fmul>
 8014d20:	494f      	ldr	r1, [pc, #316]	@ (8014e60 <__ieee754_powf+0x528>)
 8014d22:	4680      	mov	r8, r0
 8014d24:	4630      	mov	r0, r6
 8014d26:	f7eb ff1b 	bl	8000b60 <__aeabi_fsub>
 8014d2a:	4651      	mov	r1, sl
 8014d2c:	f7eb ff18 	bl	8000b60 <__aeabi_fsub>
 8014d30:	4601      	mov	r1, r0
 8014d32:	4648      	mov	r0, r9
 8014d34:	f7eb ff14 	bl	8000b60 <__aeabi_fsub>
 8014d38:	9902      	ldr	r1, [sp, #8]
 8014d3a:	f7ec f81b 	bl	8000d74 <__aeabi_fmul>
 8014d3e:	4631      	mov	r1, r6
 8014d40:	4681      	mov	r9, r0
 8014d42:	4658      	mov	r0, fp
 8014d44:	f7ec f816 	bl	8000d74 <__aeabi_fmul>
 8014d48:	4601      	mov	r1, r0
 8014d4a:	4648      	mov	r0, r9
 8014d4c:	f7eb ff0a 	bl	8000b64 <__addsf3>
 8014d50:	4682      	mov	sl, r0
 8014d52:	4601      	mov	r1, r0
 8014d54:	4640      	mov	r0, r8
 8014d56:	f7eb ff05 	bl	8000b64 <__addsf3>
 8014d5a:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8014d5e:	f026 060f 	bic.w	r6, r6, #15
 8014d62:	4630      	mov	r0, r6
 8014d64:	493f      	ldr	r1, [pc, #252]	@ (8014e64 <__ieee754_powf+0x52c>)
 8014d66:	f7ec f805 	bl	8000d74 <__aeabi_fmul>
 8014d6a:	4641      	mov	r1, r8
 8014d6c:	4681      	mov	r9, r0
 8014d6e:	4630      	mov	r0, r6
 8014d70:	f7eb fef6 	bl	8000b60 <__aeabi_fsub>
 8014d74:	4601      	mov	r1, r0
 8014d76:	4650      	mov	r0, sl
 8014d78:	f7eb fef2 	bl	8000b60 <__aeabi_fsub>
 8014d7c:	493a      	ldr	r1, [pc, #232]	@ (8014e68 <__ieee754_powf+0x530>)
 8014d7e:	f7eb fff9 	bl	8000d74 <__aeabi_fmul>
 8014d82:	493a      	ldr	r1, [pc, #232]	@ (8014e6c <__ieee754_powf+0x534>)
 8014d84:	4680      	mov	r8, r0
 8014d86:	4630      	mov	r0, r6
 8014d88:	f7eb fff4 	bl	8000d74 <__aeabi_fmul>
 8014d8c:	4601      	mov	r1, r0
 8014d8e:	4640      	mov	r0, r8
 8014d90:	f7eb fee8 	bl	8000b64 <__addsf3>
 8014d94:	4b36      	ldr	r3, [pc, #216]	@ (8014e70 <__ieee754_powf+0x538>)
 8014d96:	9a01      	ldr	r2, [sp, #4]
 8014d98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014d9c:	f7eb fee2 	bl	8000b64 <__addsf3>
 8014da0:	9a05      	ldr	r2, [sp, #20]
 8014da2:	4606      	mov	r6, r0
 8014da4:	4610      	mov	r0, r2
 8014da6:	f7eb ff91 	bl	8000ccc <__aeabi_i2f>
 8014daa:	4680      	mov	r8, r0
 8014dac:	4b31      	ldr	r3, [pc, #196]	@ (8014e74 <__ieee754_powf+0x53c>)
 8014dae:	9a01      	ldr	r2, [sp, #4]
 8014db0:	4631      	mov	r1, r6
 8014db2:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 8014db6:	4648      	mov	r0, r9
 8014db8:	f7eb fed4 	bl	8000b64 <__addsf3>
 8014dbc:	4651      	mov	r1, sl
 8014dbe:	f7eb fed1 	bl	8000b64 <__addsf3>
 8014dc2:	4641      	mov	r1, r8
 8014dc4:	f7eb fece 	bl	8000b64 <__addsf3>
 8014dc8:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8014dcc:	f02b 0b0f 	bic.w	fp, fp, #15
 8014dd0:	4641      	mov	r1, r8
 8014dd2:	4658      	mov	r0, fp
 8014dd4:	f7eb fec4 	bl	8000b60 <__aeabi_fsub>
 8014dd8:	4651      	mov	r1, sl
 8014dda:	f7eb fec1 	bl	8000b60 <__aeabi_fsub>
 8014dde:	4649      	mov	r1, r9
 8014de0:	e6a2      	b.n	8014b28 <__ieee754_powf+0x1f0>
 8014de2:	2200      	movs	r2, #0
 8014de4:	e6f9      	b.n	8014bda <__ieee754_powf+0x2a2>
 8014de6:	2301      	movs	r3, #1
 8014de8:	e70a      	b.n	8014c00 <__ieee754_powf+0x2c8>
 8014dea:	d149      	bne.n	8014e80 <__ieee754_powf+0x548>
 8014dec:	4922      	ldr	r1, [pc, #136]	@ (8014e78 <__ieee754_powf+0x540>)
 8014dee:	4630      	mov	r0, r6
 8014df0:	f7eb feb8 	bl	8000b64 <__addsf3>
 8014df4:	4639      	mov	r1, r7
 8014df6:	4681      	mov	r9, r0
 8014df8:	4620      	mov	r0, r4
 8014dfa:	f7eb feb1 	bl	8000b60 <__aeabi_fsub>
 8014dfe:	4601      	mov	r1, r0
 8014e00:	4648      	mov	r0, r9
 8014e02:	f7ec f973 	bl	80010ec <__aeabi_fcmpgt>
 8014e06:	2800      	cmp	r0, #0
 8014e08:	f47f aec5 	bne.w	8014b96 <__ieee754_powf+0x25e>
 8014e0c:	2386      	movs	r3, #134	@ 0x86
 8014e0e:	e03c      	b.n	8014e8a <__ieee754_powf+0x552>
 8014e10:	4a1a      	ldr	r2, [pc, #104]	@ (8014e7c <__ieee754_powf+0x544>)
 8014e12:	4293      	cmp	r3, r2
 8014e14:	d907      	bls.n	8014e26 <__ieee754_powf+0x4ee>
 8014e16:	2100      	movs	r1, #0
 8014e18:	4628      	mov	r0, r5
 8014e1a:	f7ec f949 	bl	80010b0 <__aeabi_fcmplt>
 8014e1e:	3800      	subs	r0, #0
 8014e20:	bf18      	it	ne
 8014e22:	2001      	movne	r0, #1
 8014e24:	e641      	b.n	8014aaa <__ieee754_powf+0x172>
 8014e26:	d12b      	bne.n	8014e80 <__ieee754_powf+0x548>
 8014e28:	4639      	mov	r1, r7
 8014e2a:	f7eb fe99 	bl	8000b60 <__aeabi_fsub>
 8014e2e:	4631      	mov	r1, r6
 8014e30:	f7ec f952 	bl	80010d8 <__aeabi_fcmpge>
 8014e34:	2800      	cmp	r0, #0
 8014e36:	d0e9      	beq.n	8014e0c <__ieee754_powf+0x4d4>
 8014e38:	e7ed      	b.n	8014e16 <__ieee754_powf+0x4de>
 8014e3a:	bf00      	nop
 8014e3c:	001cc471 	.word	0x001cc471
 8014e40:	005db3d6 	.word	0x005db3d6
 8014e44:	080158a0 	.word	0x080158a0
 8014e48:	3e53f142 	.word	0x3e53f142
 8014e4c:	3e6c3255 	.word	0x3e6c3255
 8014e50:	3e8ba305 	.word	0x3e8ba305
 8014e54:	3eaaaaab 	.word	0x3eaaaaab
 8014e58:	3edb6db7 	.word	0x3edb6db7
 8014e5c:	3f19999a 	.word	0x3f19999a
 8014e60:	40400000 	.word	0x40400000
 8014e64:	3f763800 	.word	0x3f763800
 8014e68:	3f76384f 	.word	0x3f76384f
 8014e6c:	369dc3a0 	.word	0x369dc3a0
 8014e70:	08015890 	.word	0x08015890
 8014e74:	08015898 	.word	0x08015898
 8014e78:	3338aa3c 	.word	0x3338aa3c
 8014e7c:	43160000 	.word	0x43160000
 8014e80:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8014e84:	f240 809b 	bls.w	8014fbe <__ieee754_powf+0x686>
 8014e88:	15db      	asrs	r3, r3, #23
 8014e8a:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 8014e8e:	3b7e      	subs	r3, #126	@ 0x7e
 8014e90:	411c      	asrs	r4, r3
 8014e92:	4444      	add	r4, r8
 8014e94:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 8014e98:	494d      	ldr	r1, [pc, #308]	@ (8014fd0 <__ieee754_powf+0x698>)
 8014e9a:	3b7f      	subs	r3, #127	@ 0x7f
 8014e9c:	4119      	asrs	r1, r3
 8014e9e:	4021      	ands	r1, r4
 8014ea0:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8014ea4:	f1c3 0317 	rsb	r3, r3, #23
 8014ea8:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 8014eac:	4638      	mov	r0, r7
 8014eae:	411c      	asrs	r4, r3
 8014eb0:	f1b8 0f00 	cmp.w	r8, #0
 8014eb4:	bfb8      	it	lt
 8014eb6:	4264      	neglt	r4, r4
 8014eb8:	f7eb fe52 	bl	8000b60 <__aeabi_fsub>
 8014ebc:	4607      	mov	r7, r0
 8014ebe:	4631      	mov	r1, r6
 8014ec0:	4638      	mov	r0, r7
 8014ec2:	f7eb fe4f 	bl	8000b64 <__addsf3>
 8014ec6:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 8014eca:	f028 080f 	bic.w	r8, r8, #15
 8014ece:	4640      	mov	r0, r8
 8014ed0:	4940      	ldr	r1, [pc, #256]	@ (8014fd4 <__ieee754_powf+0x69c>)
 8014ed2:	f7eb ff4f 	bl	8000d74 <__aeabi_fmul>
 8014ed6:	4639      	mov	r1, r7
 8014ed8:	4681      	mov	r9, r0
 8014eda:	4640      	mov	r0, r8
 8014edc:	f7eb fe40 	bl	8000b60 <__aeabi_fsub>
 8014ee0:	4601      	mov	r1, r0
 8014ee2:	4630      	mov	r0, r6
 8014ee4:	f7eb fe3c 	bl	8000b60 <__aeabi_fsub>
 8014ee8:	493b      	ldr	r1, [pc, #236]	@ (8014fd8 <__ieee754_powf+0x6a0>)
 8014eea:	f7eb ff43 	bl	8000d74 <__aeabi_fmul>
 8014eee:	493b      	ldr	r1, [pc, #236]	@ (8014fdc <__ieee754_powf+0x6a4>)
 8014ef0:	4606      	mov	r6, r0
 8014ef2:	4640      	mov	r0, r8
 8014ef4:	f7eb ff3e 	bl	8000d74 <__aeabi_fmul>
 8014ef8:	4601      	mov	r1, r0
 8014efa:	4630      	mov	r0, r6
 8014efc:	f7eb fe32 	bl	8000b64 <__addsf3>
 8014f00:	4607      	mov	r7, r0
 8014f02:	4601      	mov	r1, r0
 8014f04:	4648      	mov	r0, r9
 8014f06:	f7eb fe2d 	bl	8000b64 <__addsf3>
 8014f0a:	4649      	mov	r1, r9
 8014f0c:	4606      	mov	r6, r0
 8014f0e:	f7eb fe27 	bl	8000b60 <__aeabi_fsub>
 8014f12:	4601      	mov	r1, r0
 8014f14:	4638      	mov	r0, r7
 8014f16:	f7eb fe23 	bl	8000b60 <__aeabi_fsub>
 8014f1a:	4631      	mov	r1, r6
 8014f1c:	4680      	mov	r8, r0
 8014f1e:	4630      	mov	r0, r6
 8014f20:	f7eb ff28 	bl	8000d74 <__aeabi_fmul>
 8014f24:	4607      	mov	r7, r0
 8014f26:	492e      	ldr	r1, [pc, #184]	@ (8014fe0 <__ieee754_powf+0x6a8>)
 8014f28:	f7eb ff24 	bl	8000d74 <__aeabi_fmul>
 8014f2c:	492d      	ldr	r1, [pc, #180]	@ (8014fe4 <__ieee754_powf+0x6ac>)
 8014f2e:	f7eb fe17 	bl	8000b60 <__aeabi_fsub>
 8014f32:	4639      	mov	r1, r7
 8014f34:	f7eb ff1e 	bl	8000d74 <__aeabi_fmul>
 8014f38:	492b      	ldr	r1, [pc, #172]	@ (8014fe8 <__ieee754_powf+0x6b0>)
 8014f3a:	f7eb fe13 	bl	8000b64 <__addsf3>
 8014f3e:	4639      	mov	r1, r7
 8014f40:	f7eb ff18 	bl	8000d74 <__aeabi_fmul>
 8014f44:	4929      	ldr	r1, [pc, #164]	@ (8014fec <__ieee754_powf+0x6b4>)
 8014f46:	f7eb fe0b 	bl	8000b60 <__aeabi_fsub>
 8014f4a:	4639      	mov	r1, r7
 8014f4c:	f7eb ff12 	bl	8000d74 <__aeabi_fmul>
 8014f50:	4927      	ldr	r1, [pc, #156]	@ (8014ff0 <__ieee754_powf+0x6b8>)
 8014f52:	f7eb fe07 	bl	8000b64 <__addsf3>
 8014f56:	4639      	mov	r1, r7
 8014f58:	f7eb ff0c 	bl	8000d74 <__aeabi_fmul>
 8014f5c:	4601      	mov	r1, r0
 8014f5e:	4630      	mov	r0, r6
 8014f60:	f7eb fdfe 	bl	8000b60 <__aeabi_fsub>
 8014f64:	4607      	mov	r7, r0
 8014f66:	4601      	mov	r1, r0
 8014f68:	4630      	mov	r0, r6
 8014f6a:	f7eb ff03 	bl	8000d74 <__aeabi_fmul>
 8014f6e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8014f72:	4681      	mov	r9, r0
 8014f74:	4638      	mov	r0, r7
 8014f76:	f7eb fdf3 	bl	8000b60 <__aeabi_fsub>
 8014f7a:	4601      	mov	r1, r0
 8014f7c:	4648      	mov	r0, r9
 8014f7e:	f7eb ffad 	bl	8000edc <__aeabi_fdiv>
 8014f82:	4641      	mov	r1, r8
 8014f84:	4607      	mov	r7, r0
 8014f86:	4630      	mov	r0, r6
 8014f88:	f7eb fef4 	bl	8000d74 <__aeabi_fmul>
 8014f8c:	4641      	mov	r1, r8
 8014f8e:	f7eb fde9 	bl	8000b64 <__addsf3>
 8014f92:	4601      	mov	r1, r0
 8014f94:	4638      	mov	r0, r7
 8014f96:	f7eb fde3 	bl	8000b60 <__aeabi_fsub>
 8014f9a:	4631      	mov	r1, r6
 8014f9c:	f7eb fde0 	bl	8000b60 <__aeabi_fsub>
 8014fa0:	4601      	mov	r1, r0
 8014fa2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8014fa6:	f7eb fddb 	bl	8000b60 <__aeabi_fsub>
 8014faa:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8014fae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8014fb2:	da06      	bge.n	8014fc2 <__ieee754_powf+0x68a>
 8014fb4:	4621      	mov	r1, r4
 8014fb6:	f000 f821 	bl	8014ffc <scalbnf>
 8014fba:	4629      	mov	r1, r5
 8014fbc:	e526      	b.n	8014a0c <__ieee754_powf+0xd4>
 8014fbe:	2400      	movs	r4, #0
 8014fc0:	e77d      	b.n	8014ebe <__ieee754_powf+0x586>
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	e7f9      	b.n	8014fba <__ieee754_powf+0x682>
 8014fc6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8014fca:	e50b      	b.n	80149e4 <__ieee754_powf+0xac>
 8014fcc:	2100      	movs	r1, #0
 8014fce:	e509      	b.n	80149e4 <__ieee754_powf+0xac>
 8014fd0:	ff800000 	.word	0xff800000
 8014fd4:	3f317200 	.word	0x3f317200
 8014fd8:	3f317218 	.word	0x3f317218
 8014fdc:	35bfbe8c 	.word	0x35bfbe8c
 8014fe0:	3331bb4c 	.word	0x3331bb4c
 8014fe4:	35ddea0e 	.word	0x35ddea0e
 8014fe8:	388ab355 	.word	0x388ab355
 8014fec:	3b360b61 	.word	0x3b360b61
 8014ff0:	3e2aaaab 	.word	0x3e2aaaab

08014ff4 <fabsf>:
 8014ff4:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8014ff8:	4770      	bx	lr
	...

08014ffc <scalbnf>:
 8014ffc:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8015000:	b538      	push	{r3, r4, r5, lr}
 8015002:	4603      	mov	r3, r0
 8015004:	460d      	mov	r5, r1
 8015006:	4604      	mov	r4, r0
 8015008:	d02e      	beq.n	8015068 <scalbnf+0x6c>
 801500a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801500e:	d304      	bcc.n	801501a <scalbnf+0x1e>
 8015010:	4601      	mov	r1, r0
 8015012:	f7eb fda7 	bl	8000b64 <__addsf3>
 8015016:	4603      	mov	r3, r0
 8015018:	e026      	b.n	8015068 <scalbnf+0x6c>
 801501a:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 801501e:	d118      	bne.n	8015052 <scalbnf+0x56>
 8015020:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8015024:	f7eb fea6 	bl	8000d74 <__aeabi_fmul>
 8015028:	4a17      	ldr	r2, [pc, #92]	@ (8015088 <scalbnf+0x8c>)
 801502a:	4603      	mov	r3, r0
 801502c:	4295      	cmp	r5, r2
 801502e:	db0c      	blt.n	801504a <scalbnf+0x4e>
 8015030:	4604      	mov	r4, r0
 8015032:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8015036:	3a19      	subs	r2, #25
 8015038:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801503c:	428d      	cmp	r5, r1
 801503e:	dd0a      	ble.n	8015056 <scalbnf+0x5a>
 8015040:	4912      	ldr	r1, [pc, #72]	@ (801508c <scalbnf+0x90>)
 8015042:	4618      	mov	r0, r3
 8015044:	f361 001e 	bfi	r0, r1, #0, #31
 8015048:	e000      	b.n	801504c <scalbnf+0x50>
 801504a:	4911      	ldr	r1, [pc, #68]	@ (8015090 <scalbnf+0x94>)
 801504c:	f7eb fe92 	bl	8000d74 <__aeabi_fmul>
 8015050:	e7e1      	b.n	8015016 <scalbnf+0x1a>
 8015052:	0dd2      	lsrs	r2, r2, #23
 8015054:	e7f0      	b.n	8015038 <scalbnf+0x3c>
 8015056:	1951      	adds	r1, r2, r5
 8015058:	29fe      	cmp	r1, #254	@ 0xfe
 801505a:	dcf1      	bgt.n	8015040 <scalbnf+0x44>
 801505c:	2900      	cmp	r1, #0
 801505e:	dd05      	ble.n	801506c <scalbnf+0x70>
 8015060:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8015064:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8015068:	4618      	mov	r0, r3
 801506a:	bd38      	pop	{r3, r4, r5, pc}
 801506c:	f111 0f16 	cmn.w	r1, #22
 8015070:	da01      	bge.n	8015076 <scalbnf+0x7a>
 8015072:	4907      	ldr	r1, [pc, #28]	@ (8015090 <scalbnf+0x94>)
 8015074:	e7e5      	b.n	8015042 <scalbnf+0x46>
 8015076:	f101 0019 	add.w	r0, r1, #25
 801507a:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 801507e:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8015082:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8015086:	e7e1      	b.n	801504c <scalbnf+0x50>
 8015088:	ffff3cb0 	.word	0xffff3cb0
 801508c:	7149f2ca 	.word	0x7149f2ca
 8015090:	0da24260 	.word	0x0da24260

08015094 <with_errnof>:
 8015094:	b538      	push	{r3, r4, r5, lr}
 8015096:	4604      	mov	r4, r0
 8015098:	460d      	mov	r5, r1
 801509a:	f7ff fa39 	bl	8014510 <__errno>
 801509e:	6005      	str	r5, [r0, #0]
 80150a0:	4620      	mov	r0, r4
 80150a2:	bd38      	pop	{r3, r4, r5, pc}

080150a4 <xflowf>:
 80150a4:	b508      	push	{r3, lr}
 80150a6:	b140      	cbz	r0, 80150ba <xflowf+0x16>
 80150a8:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 80150ac:	f7eb fe62 	bl	8000d74 <__aeabi_fmul>
 80150b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80150b4:	2122      	movs	r1, #34	@ 0x22
 80150b6:	f7ff bfed 	b.w	8015094 <with_errnof>
 80150ba:	4608      	mov	r0, r1
 80150bc:	e7f6      	b.n	80150ac <xflowf+0x8>

080150be <__math_uflowf>:
 80150be:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 80150c2:	f7ff bfef 	b.w	80150a4 <xflowf>

080150c6 <__math_oflowf>:
 80150c6:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 80150ca:	f7ff bfeb 	b.w	80150a4 <xflowf>
	...

080150d0 <_init>:
 80150d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150d2:	bf00      	nop
 80150d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80150d6:	bc08      	pop	{r3}
 80150d8:	469e      	mov	lr, r3
 80150da:	4770      	bx	lr

080150dc <_fini>:
 80150dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150de:	bf00      	nop
 80150e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80150e2:	bc08      	pop	{r3}
 80150e4:	469e      	mov	lr, r3
 80150e6:	4770      	bx	lr
