
RTOSpilot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015678  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c0  08015868  08015868  00016868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016028  08016028  000180e0  2**0
                  CONTENTS
  4 .ARM          00000008  08016028  08016028  00017028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016030  08016030  000180e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016030  08016030  00017030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016034  08016034  00017034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e0  20000000  08016038  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000355c  200000e0  08016118  000180e0  2**2
                  ALLOC
 10 ._user_heap_stack 00007004  2000363c  08016118  0001863c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000180e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b570  00000000  00000000  00018109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000076e9  00000000  00000000  00043679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023f8  00000000  00000000  0004ad68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b9e  00000000  00000000  0004d160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025026  00000000  00000000  0004ecfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000362fa  00000000  00000000  00073d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d31fc  00000000  00000000  000aa01e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017d21a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009bac  00000000  00000000  0017d260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00186e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000e0 	.word	0x200000e0
 800020c:	00000000 	.word	0x00000000
 8000210:	08015850 	.word	0x08015850

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000e4 	.word	0x200000e4
 800022c:	08015850 	.word	0x08015850

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	@ 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e06:	2afd      	cmp	r2, #253	@ 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	@ 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	@ 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	@ 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__gesf2>:
 8001054:	f04f 3cff 	mov.w	ip, #4294967295
 8001058:	e006      	b.n	8001068 <__cmpsf2+0x4>
 800105a:	bf00      	nop

0800105c <__lesf2>:
 800105c:	f04f 0c01 	mov.w	ip, #1
 8001060:	e002      	b.n	8001068 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__cmpsf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	f84d cd04 	str.w	ip, [sp, #-4]!
 800106c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001070:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	bf18      	it	ne
 800107a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800107e:	d011      	beq.n	80010a4 <__cmpsf2+0x40>
 8001080:	b001      	add	sp, #4
 8001082:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001086:	bf18      	it	ne
 8001088:	ea90 0f01 	teqne	r0, r1
 800108c:	bf58      	it	pl
 800108e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001092:	bf88      	it	hi
 8001094:	17c8      	asrhi	r0, r1, #31
 8001096:	bf38      	it	cc
 8001098:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800109c:	bf18      	it	ne
 800109e:	f040 0001 	orrne.w	r0, r0, #1
 80010a2:	4770      	bx	lr
 80010a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a8:	d102      	bne.n	80010b0 <__cmpsf2+0x4c>
 80010aa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ae:	d105      	bne.n	80010bc <__cmpsf2+0x58>
 80010b0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010b4:	d1e4      	bne.n	8001080 <__cmpsf2+0x1c>
 80010b6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ba:	d0e1      	beq.n	8001080 <__cmpsf2+0x1c>
 80010bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <__aeabi_cfrcmple>:
 80010c4:	4684      	mov	ip, r0
 80010c6:	4608      	mov	r0, r1
 80010c8:	4661      	mov	r1, ip
 80010ca:	e7ff      	b.n	80010cc <__aeabi_cfcmpeq>

080010cc <__aeabi_cfcmpeq>:
 80010cc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ce:	f7ff ffc9 	bl	8001064 <__cmpsf2>
 80010d2:	2800      	cmp	r0, #0
 80010d4:	bf48      	it	mi
 80010d6:	f110 0f00 	cmnmi.w	r0, #0
 80010da:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010dc <__aeabi_fcmpeq>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff fff4 	bl	80010cc <__aeabi_cfcmpeq>
 80010e4:	bf0c      	ite	eq
 80010e6:	2001      	moveq	r0, #1
 80010e8:	2000      	movne	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_fcmplt>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff ffea 	bl	80010cc <__aeabi_cfcmpeq>
 80010f8:	bf34      	ite	cc
 80010fa:	2001      	movcc	r0, #1
 80010fc:	2000      	movcs	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmple>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffe0 	bl	80010cc <__aeabi_cfcmpeq>
 800110c:	bf94      	ite	ls
 800110e:	2001      	movls	r0, #1
 8001110:	2000      	movhi	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmpge>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffd2 	bl	80010c4 <__aeabi_cfrcmple>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpgt>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffc8 	bl	80010c4 <__aeabi_cfrcmple>
 8001134:	bf34      	ite	cc
 8001136:	2001      	movcc	r0, #1
 8001138:	2000      	movcs	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_fcmpun>:
 8001140:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001144:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001148:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800114c:	d102      	bne.n	8001154 <__aeabi_fcmpun+0x14>
 800114e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001152:	d108      	bne.n	8001166 <__aeabi_fcmpun+0x26>
 8001154:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001158:	d102      	bne.n	8001160 <__aeabi_fcmpun+0x20>
 800115a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800115e:	d102      	bne.n	8001166 <__aeabi_fcmpun+0x26>
 8001160:	f04f 0000 	mov.w	r0, #0
 8001164:	4770      	bx	lr
 8001166:	f04f 0001 	mov.w	r0, #1
 800116a:	4770      	bx	lr

0800116c <__aeabi_f2iz>:
 800116c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001170:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001174:	d30f      	bcc.n	8001196 <__aeabi_f2iz+0x2a>
 8001176:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800117a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800117e:	d90d      	bls.n	800119c <__aeabi_f2iz+0x30>
 8001180:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001184:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001188:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800118c:	fa23 f002 	lsr.w	r0, r3, r2
 8001190:	bf18      	it	ne
 8001192:	4240      	negne	r0, r0
 8001194:	4770      	bx	lr
 8001196:	f04f 0000 	mov.w	r0, #0
 800119a:	4770      	bx	lr
 800119c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011a0:	d101      	bne.n	80011a6 <__aeabi_f2iz+0x3a>
 80011a2:	0242      	lsls	r2, r0, #9
 80011a4:	d105      	bne.n	80011b2 <__aeabi_f2iz+0x46>
 80011a6:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80011aa:	bf08      	it	eq
 80011ac:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80011b0:	4770      	bx	lr
 80011b2:	f04f 0000 	mov.w	r0, #0
 80011b6:	4770      	bx	lr

080011b8 <__aeabi_f2uiz>:
 80011b8:	0042      	lsls	r2, r0, #1
 80011ba:	d20e      	bcs.n	80011da <__aeabi_f2uiz+0x22>
 80011bc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011c0:	d30b      	bcc.n	80011da <__aeabi_f2uiz+0x22>
 80011c2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011c6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ca:	d409      	bmi.n	80011e0 <__aeabi_f2uiz+0x28>
 80011cc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011d4:	fa23 f002 	lsr.w	r0, r3, r2
 80011d8:	4770      	bx	lr
 80011da:	f04f 0000 	mov.w	r0, #0
 80011de:	4770      	bx	lr
 80011e0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011e4:	d101      	bne.n	80011ea <__aeabi_f2uiz+0x32>
 80011e6:	0242      	lsls	r2, r0, #9
 80011e8:	d102      	bne.n	80011f0 <__aeabi_f2uiz+0x38>
 80011ea:	f04f 30ff 	mov.w	r0, #4294967295
 80011ee:	4770      	bx	lr
 80011f0:	f04f 0000 	mov.w	r0, #0
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop

080011f8 <__aeabi_ldivmod>:
 80011f8:	b97b      	cbnz	r3, 800121a <__aeabi_ldivmod+0x22>
 80011fa:	b972      	cbnz	r2, 800121a <__aeabi_ldivmod+0x22>
 80011fc:	2900      	cmp	r1, #0
 80011fe:	bfbe      	ittt	lt
 8001200:	2000      	movlt	r0, #0
 8001202:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8001206:	e006      	blt.n	8001216 <__aeabi_ldivmod+0x1e>
 8001208:	bf08      	it	eq
 800120a:	2800      	cmpeq	r0, #0
 800120c:	bf1c      	itt	ne
 800120e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8001212:	f04f 30ff 	movne.w	r0, #4294967295
 8001216:	f000 b99b 	b.w	8001550 <__aeabi_idiv0>
 800121a:	f1ad 0c08 	sub.w	ip, sp, #8
 800121e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001222:	2900      	cmp	r1, #0
 8001224:	db09      	blt.n	800123a <__aeabi_ldivmod+0x42>
 8001226:	2b00      	cmp	r3, #0
 8001228:	db1a      	blt.n	8001260 <__aeabi_ldivmod+0x68>
 800122a:	f000 f835 	bl	8001298 <__udivmoddi4>
 800122e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001232:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001236:	b004      	add	sp, #16
 8001238:	4770      	bx	lr
 800123a:	4240      	negs	r0, r0
 800123c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001240:	2b00      	cmp	r3, #0
 8001242:	db1b      	blt.n	800127c <__aeabi_ldivmod+0x84>
 8001244:	f000 f828 	bl	8001298 <__udivmoddi4>
 8001248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800124c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001250:	b004      	add	sp, #16
 8001252:	4240      	negs	r0, r0
 8001254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001258:	4252      	negs	r2, r2
 800125a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800125e:	4770      	bx	lr
 8001260:	4252      	negs	r2, r2
 8001262:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001266:	f000 f817 	bl	8001298 <__udivmoddi4>
 800126a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800126e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001272:	b004      	add	sp, #16
 8001274:	4240      	negs	r0, r0
 8001276:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800127a:	4770      	bx	lr
 800127c:	4252      	negs	r2, r2
 800127e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001282:	f000 f809 	bl	8001298 <__udivmoddi4>
 8001286:	f8dd e004 	ldr.w	lr, [sp, #4]
 800128a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800128e:	b004      	add	sp, #16
 8001290:	4252      	negs	r2, r2
 8001292:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001296:	4770      	bx	lr

08001298 <__udivmoddi4>:
 8001298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800129c:	9d08      	ldr	r5, [sp, #32]
 800129e:	460c      	mov	r4, r1
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d14e      	bne.n	8001342 <__udivmoddi4+0xaa>
 80012a4:	4694      	mov	ip, r2
 80012a6:	458c      	cmp	ip, r1
 80012a8:	4686      	mov	lr, r0
 80012aa:	fab2 f282 	clz	r2, r2
 80012ae:	d962      	bls.n	8001376 <__udivmoddi4+0xde>
 80012b0:	b14a      	cbz	r2, 80012c6 <__udivmoddi4+0x2e>
 80012b2:	f1c2 0320 	rsb	r3, r2, #32
 80012b6:	4091      	lsls	r1, r2
 80012b8:	fa20 f303 	lsr.w	r3, r0, r3
 80012bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80012c0:	4319      	orrs	r1, r3
 80012c2:	fa00 fe02 	lsl.w	lr, r0, r2
 80012c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80012ce:	fb07 1114 	mls	r1, r7, r4, r1
 80012d2:	fa1f f68c 	uxth.w	r6, ip
 80012d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80012da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012de:	fb04 f106 	mul.w	r1, r4, r6
 80012e2:	4299      	cmp	r1, r3
 80012e4:	d90a      	bls.n	80012fc <__udivmoddi4+0x64>
 80012e6:	eb1c 0303 	adds.w	r3, ip, r3
 80012ea:	f104 30ff 	add.w	r0, r4, #4294967295
 80012ee:	f080 8110 	bcs.w	8001512 <__udivmoddi4+0x27a>
 80012f2:	4299      	cmp	r1, r3
 80012f4:	f240 810d 	bls.w	8001512 <__udivmoddi4+0x27a>
 80012f8:	3c02      	subs	r4, #2
 80012fa:	4463      	add	r3, ip
 80012fc:	1a59      	subs	r1, r3, r1
 80012fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8001302:	fb07 1110 	mls	r1, r7, r0, r1
 8001306:	fb00 f606 	mul.w	r6, r0, r6
 800130a:	fa1f f38e 	uxth.w	r3, lr
 800130e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001312:	429e      	cmp	r6, r3
 8001314:	d90a      	bls.n	800132c <__udivmoddi4+0x94>
 8001316:	eb1c 0303 	adds.w	r3, ip, r3
 800131a:	f100 31ff 	add.w	r1, r0, #4294967295
 800131e:	f080 80fa 	bcs.w	8001516 <__udivmoddi4+0x27e>
 8001322:	429e      	cmp	r6, r3
 8001324:	f240 80f7 	bls.w	8001516 <__udivmoddi4+0x27e>
 8001328:	4463      	add	r3, ip
 800132a:	3802      	subs	r0, #2
 800132c:	2100      	movs	r1, #0
 800132e:	1b9b      	subs	r3, r3, r6
 8001330:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001334:	b11d      	cbz	r5, 800133e <__udivmoddi4+0xa6>
 8001336:	40d3      	lsrs	r3, r2
 8001338:	2200      	movs	r2, #0
 800133a:	e9c5 3200 	strd	r3, r2, [r5]
 800133e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001342:	428b      	cmp	r3, r1
 8001344:	d905      	bls.n	8001352 <__udivmoddi4+0xba>
 8001346:	b10d      	cbz	r5, 800134c <__udivmoddi4+0xb4>
 8001348:	e9c5 0100 	strd	r0, r1, [r5]
 800134c:	2100      	movs	r1, #0
 800134e:	4608      	mov	r0, r1
 8001350:	e7f5      	b.n	800133e <__udivmoddi4+0xa6>
 8001352:	fab3 f183 	clz	r1, r3
 8001356:	2900      	cmp	r1, #0
 8001358:	d146      	bne.n	80013e8 <__udivmoddi4+0x150>
 800135a:	42a3      	cmp	r3, r4
 800135c:	d302      	bcc.n	8001364 <__udivmoddi4+0xcc>
 800135e:	4290      	cmp	r0, r2
 8001360:	f0c0 80ee 	bcc.w	8001540 <__udivmoddi4+0x2a8>
 8001364:	1a86      	subs	r6, r0, r2
 8001366:	eb64 0303 	sbc.w	r3, r4, r3
 800136a:	2001      	movs	r0, #1
 800136c:	2d00      	cmp	r5, #0
 800136e:	d0e6      	beq.n	800133e <__udivmoddi4+0xa6>
 8001370:	e9c5 6300 	strd	r6, r3, [r5]
 8001374:	e7e3      	b.n	800133e <__udivmoddi4+0xa6>
 8001376:	2a00      	cmp	r2, #0
 8001378:	f040 808f 	bne.w	800149a <__udivmoddi4+0x202>
 800137c:	eba1 040c 	sub.w	r4, r1, ip
 8001380:	2101      	movs	r1, #1
 8001382:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001386:	fa1f f78c 	uxth.w	r7, ip
 800138a:	fbb4 f6f8 	udiv	r6, r4, r8
 800138e:	fb08 4416 	mls	r4, r8, r6, r4
 8001392:	fb07 f006 	mul.w	r0, r7, r6
 8001396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800139a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800139e:	4298      	cmp	r0, r3
 80013a0:	d908      	bls.n	80013b4 <__udivmoddi4+0x11c>
 80013a2:	eb1c 0303 	adds.w	r3, ip, r3
 80013a6:	f106 34ff 	add.w	r4, r6, #4294967295
 80013aa:	d202      	bcs.n	80013b2 <__udivmoddi4+0x11a>
 80013ac:	4298      	cmp	r0, r3
 80013ae:	f200 80cb 	bhi.w	8001548 <__udivmoddi4+0x2b0>
 80013b2:	4626      	mov	r6, r4
 80013b4:	1a1c      	subs	r4, r3, r0
 80013b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80013ba:	fb08 4410 	mls	r4, r8, r0, r4
 80013be:	fb00 f707 	mul.w	r7, r0, r7
 80013c2:	fa1f f38e 	uxth.w	r3, lr
 80013c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80013ca:	429f      	cmp	r7, r3
 80013cc:	d908      	bls.n	80013e0 <__udivmoddi4+0x148>
 80013ce:	eb1c 0303 	adds.w	r3, ip, r3
 80013d2:	f100 34ff 	add.w	r4, r0, #4294967295
 80013d6:	d202      	bcs.n	80013de <__udivmoddi4+0x146>
 80013d8:	429f      	cmp	r7, r3
 80013da:	f200 80ae 	bhi.w	800153a <__udivmoddi4+0x2a2>
 80013de:	4620      	mov	r0, r4
 80013e0:	1bdb      	subs	r3, r3, r7
 80013e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80013e6:	e7a5      	b.n	8001334 <__udivmoddi4+0x9c>
 80013e8:	f1c1 0720 	rsb	r7, r1, #32
 80013ec:	408b      	lsls	r3, r1
 80013ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80013f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80013f6:	fa24 f607 	lsr.w	r6, r4, r7
 80013fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013fe:	fbb6 f8f9 	udiv	r8, r6, r9
 8001402:	fa1f fe8c 	uxth.w	lr, ip
 8001406:	fb09 6618 	mls	r6, r9, r8, r6
 800140a:	fa20 f307 	lsr.w	r3, r0, r7
 800140e:	408c      	lsls	r4, r1
 8001410:	fa00 fa01 	lsl.w	sl, r0, r1
 8001414:	fb08 f00e 	mul.w	r0, r8, lr
 8001418:	431c      	orrs	r4, r3
 800141a:	0c23      	lsrs	r3, r4, #16
 800141c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001420:	4298      	cmp	r0, r3
 8001422:	fa02 f201 	lsl.w	r2, r2, r1
 8001426:	d90a      	bls.n	800143e <__udivmoddi4+0x1a6>
 8001428:	eb1c 0303 	adds.w	r3, ip, r3
 800142c:	f108 36ff 	add.w	r6, r8, #4294967295
 8001430:	f080 8081 	bcs.w	8001536 <__udivmoddi4+0x29e>
 8001434:	4298      	cmp	r0, r3
 8001436:	d97e      	bls.n	8001536 <__udivmoddi4+0x29e>
 8001438:	f1a8 0802 	sub.w	r8, r8, #2
 800143c:	4463      	add	r3, ip
 800143e:	1a1e      	subs	r6, r3, r0
 8001440:	fbb6 f3f9 	udiv	r3, r6, r9
 8001444:	fb09 6613 	mls	r6, r9, r3, r6
 8001448:	fb03 fe0e 	mul.w	lr, r3, lr
 800144c:	b2a4      	uxth	r4, r4
 800144e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001452:	45a6      	cmp	lr, r4
 8001454:	d908      	bls.n	8001468 <__udivmoddi4+0x1d0>
 8001456:	eb1c 0404 	adds.w	r4, ip, r4
 800145a:	f103 30ff 	add.w	r0, r3, #4294967295
 800145e:	d266      	bcs.n	800152e <__udivmoddi4+0x296>
 8001460:	45a6      	cmp	lr, r4
 8001462:	d964      	bls.n	800152e <__udivmoddi4+0x296>
 8001464:	3b02      	subs	r3, #2
 8001466:	4464      	add	r4, ip
 8001468:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800146c:	fba0 8302 	umull	r8, r3, r0, r2
 8001470:	eba4 040e 	sub.w	r4, r4, lr
 8001474:	429c      	cmp	r4, r3
 8001476:	46c6      	mov	lr, r8
 8001478:	461e      	mov	r6, r3
 800147a:	d350      	bcc.n	800151e <__udivmoddi4+0x286>
 800147c:	d04d      	beq.n	800151a <__udivmoddi4+0x282>
 800147e:	b155      	cbz	r5, 8001496 <__udivmoddi4+0x1fe>
 8001480:	ebba 030e 	subs.w	r3, sl, lr
 8001484:	eb64 0406 	sbc.w	r4, r4, r6
 8001488:	fa04 f707 	lsl.w	r7, r4, r7
 800148c:	40cb      	lsrs	r3, r1
 800148e:	431f      	orrs	r7, r3
 8001490:	40cc      	lsrs	r4, r1
 8001492:	e9c5 7400 	strd	r7, r4, [r5]
 8001496:	2100      	movs	r1, #0
 8001498:	e751      	b.n	800133e <__udivmoddi4+0xa6>
 800149a:	fa0c fc02 	lsl.w	ip, ip, r2
 800149e:	f1c2 0320 	rsb	r3, r2, #32
 80014a2:	40d9      	lsrs	r1, r3
 80014a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80014a8:	fa20 f303 	lsr.w	r3, r0, r3
 80014ac:	fa00 fe02 	lsl.w	lr, r0, r2
 80014b0:	fbb1 f0f8 	udiv	r0, r1, r8
 80014b4:	fb08 1110 	mls	r1, r8, r0, r1
 80014b8:	4094      	lsls	r4, r2
 80014ba:	431c      	orrs	r4, r3
 80014bc:	fa1f f78c 	uxth.w	r7, ip
 80014c0:	0c23      	lsrs	r3, r4, #16
 80014c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80014c6:	fb00 f107 	mul.w	r1, r0, r7
 80014ca:	4299      	cmp	r1, r3
 80014cc:	d908      	bls.n	80014e0 <__udivmoddi4+0x248>
 80014ce:	eb1c 0303 	adds.w	r3, ip, r3
 80014d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80014d6:	d22c      	bcs.n	8001532 <__udivmoddi4+0x29a>
 80014d8:	4299      	cmp	r1, r3
 80014da:	d92a      	bls.n	8001532 <__udivmoddi4+0x29a>
 80014dc:	3802      	subs	r0, #2
 80014de:	4463      	add	r3, ip
 80014e0:	1a5b      	subs	r3, r3, r1
 80014e2:	fbb3 f1f8 	udiv	r1, r3, r8
 80014e6:	fb08 3311 	mls	r3, r8, r1, r3
 80014ea:	b2a4      	uxth	r4, r4
 80014ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80014f0:	fb01 f307 	mul.w	r3, r1, r7
 80014f4:	42a3      	cmp	r3, r4
 80014f6:	d908      	bls.n	800150a <__udivmoddi4+0x272>
 80014f8:	eb1c 0404 	adds.w	r4, ip, r4
 80014fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8001500:	d213      	bcs.n	800152a <__udivmoddi4+0x292>
 8001502:	42a3      	cmp	r3, r4
 8001504:	d911      	bls.n	800152a <__udivmoddi4+0x292>
 8001506:	3902      	subs	r1, #2
 8001508:	4464      	add	r4, ip
 800150a:	1ae4      	subs	r4, r4, r3
 800150c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001510:	e73b      	b.n	800138a <__udivmoddi4+0xf2>
 8001512:	4604      	mov	r4, r0
 8001514:	e6f2      	b.n	80012fc <__udivmoddi4+0x64>
 8001516:	4608      	mov	r0, r1
 8001518:	e708      	b.n	800132c <__udivmoddi4+0x94>
 800151a:	45c2      	cmp	sl, r8
 800151c:	d2af      	bcs.n	800147e <__udivmoddi4+0x1e6>
 800151e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001522:	eb63 060c 	sbc.w	r6, r3, ip
 8001526:	3801      	subs	r0, #1
 8001528:	e7a9      	b.n	800147e <__udivmoddi4+0x1e6>
 800152a:	4631      	mov	r1, r6
 800152c:	e7ed      	b.n	800150a <__udivmoddi4+0x272>
 800152e:	4603      	mov	r3, r0
 8001530:	e79a      	b.n	8001468 <__udivmoddi4+0x1d0>
 8001532:	4630      	mov	r0, r6
 8001534:	e7d4      	b.n	80014e0 <__udivmoddi4+0x248>
 8001536:	46b0      	mov	r8, r6
 8001538:	e781      	b.n	800143e <__udivmoddi4+0x1a6>
 800153a:	4463      	add	r3, ip
 800153c:	3802      	subs	r0, #2
 800153e:	e74f      	b.n	80013e0 <__udivmoddi4+0x148>
 8001540:	4606      	mov	r6, r0
 8001542:	4623      	mov	r3, r4
 8001544:	4608      	mov	r0, r1
 8001546:	e711      	b.n	800136c <__udivmoddi4+0xd4>
 8001548:	3e02      	subs	r6, #2
 800154a:	4463      	add	r3, ip
 800154c:	e732      	b.n	80013b4 <__udivmoddi4+0x11c>
 800154e:	bf00      	nop

08001550 <__aeabi_idiv0>:
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop

08001554 <bmp280_init_default_params>:
#define BMP280_RESET_VALUE     0xB6


BMP280_HandleTypedef devv;

void bmp280_init_default_params() {
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
	devv.params.mode = BMP280_MODE_NORMAL;
 8001558:	4b0b      	ldr	r3, [pc, #44]	@ (8001588 <bmp280_init_default_params+0x34>)
 800155a:	2203      	movs	r2, #3
 800155c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	devv.params.filter = BMP280_FILTER_16;
 8001560:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <bmp280_init_default_params+0x34>)
 8001562:	2204      	movs	r2, #4
 8001564:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	devv.params.oversampling_pressure = BMP280_ULTRA_HIGH_RES;
 8001568:	4b07      	ldr	r3, [pc, #28]	@ (8001588 <bmp280_init_default_params+0x34>)
 800156a:	2205      	movs	r2, #5
 800156c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	devv.params.oversampling_temperature = BMP280_ULTRA_HIGH_RES;
 8001570:	4b05      	ldr	r3, [pc, #20]	@ (8001588 <bmp280_init_default_params+0x34>)
 8001572:	2205      	movs	r2, #5
 8001574:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	devv.params.standby = BMP280_STANDBY_05;
 8001578:	4b03      	ldr	r3, [pc, #12]	@ (8001588 <bmp280_init_default_params+0x34>)
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	200000fc 	.word	0x200000fc

0800158c <read_register16>:

static bool read_register16(uint8_t addr, uint16_t *value) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af04      	add	r7, sp, #16
 8001592:	4603      	mov	r3, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	71fb      	strb	r3, [r7, #7]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (devv.addr << 1);
 8001598:	4b13      	ldr	r3, [pc, #76]	@ (80015e8 <read_register16+0x5c>)
 800159a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Read(devv.i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80015a0:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <read_register16+0x5c>)
 80015a2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	89f9      	ldrh	r1, [r7, #14]
 80015aa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80015ae:	9302      	str	r3, [sp, #8]
 80015b0:	2302      	movs	r3, #2
 80015b2:	9301      	str	r3, [sp, #4]
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	2301      	movs	r3, #1
 80015bc:	f007 fe46 	bl	800924c <HAL_I2C_Mem_Read>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10b      	bne.n	80015de <read_register16+0x52>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80015c6:	7b7b      	ldrb	r3, [r7, #13]
 80015c8:	021b      	lsls	r3, r3, #8
 80015ca:	b21a      	sxth	r2, r3
 80015cc:	7b3b      	ldrb	r3, [r7, #12]
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	4313      	orrs	r3, r2
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	801a      	strh	r2, [r3, #0]
		return true;
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <read_register16+0x54>
	} else
		return false;
 80015de:	2300      	movs	r3, #0

}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	200000fc 	.word	0x200000fc

080015ec <read_data>:

static inline int read_data(uint8_t addr, uint8_t *value,
		uint8_t len) {
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b089      	sub	sp, #36	@ 0x24
 80015f0:	af04      	add	r7, sp, #16
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	71fb      	strb	r3, [r7, #7]
 80015f8:	4613      	mov	r3, r2
 80015fa:	71bb      	strb	r3, [r7, #6]
	uint16_t tx_buff;
	tx_buff = (devv.addr << 1);
 80015fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <read_data+0x4c>)
 80015fe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	81fb      	strh	r3, [r7, #14]
	if (HAL_I2C_Mem_Read(devv.i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001604:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <read_data+0x4c>)
 8001606:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	b29a      	uxth	r2, r3
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	b29b      	uxth	r3, r3
 8001610:	89f9      	ldrh	r1, [r7, #14]
 8001612:	f241 3488 	movw	r4, #5000	@ 0x1388
 8001616:	9402      	str	r4, [sp, #8]
 8001618:	9301      	str	r3, [sp, #4]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2301      	movs	r3, #1
 8001620:	f007 fe14 	bl	800924c <HAL_I2C_Mem_Read>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <read_data+0x42>
		return 0;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <read_data+0x44>
	else
		return 1;
 800162e:	2301      	movs	r3, #1

}
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	bd90      	pop	{r4, r7, pc}
 8001638:	200000fc 	.word	0x200000fc

0800163c <read_calibration_data>:

static bool read_calibration_data() {
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0

	if (read_register16(0x88, &devv.dig_T1)
 8001640:	492c      	ldr	r1, [pc, #176]	@ (80016f4 <read_calibration_data+0xb8>)
 8001642:	2088      	movs	r0, #136	@ 0x88
 8001644:	f7ff ffa2 	bl	800158c <read_register16>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d04e      	beq.n	80016ec <read_calibration_data+0xb0>
			&& read_register16(0x8a, (uint16_t *) &devv.dig_T2)
 800164e:	492a      	ldr	r1, [pc, #168]	@ (80016f8 <read_calibration_data+0xbc>)
 8001650:	208a      	movs	r0, #138	@ 0x8a
 8001652:	f7ff ff9b 	bl	800158c <read_register16>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d047      	beq.n	80016ec <read_calibration_data+0xb0>
			&& read_register16(0x8c, (uint16_t *) &devv.dig_T3)
 800165c:	4927      	ldr	r1, [pc, #156]	@ (80016fc <read_calibration_data+0xc0>)
 800165e:	208c      	movs	r0, #140	@ 0x8c
 8001660:	f7ff ff94 	bl	800158c <read_register16>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d040      	beq.n	80016ec <read_calibration_data+0xb0>
			&& read_register16(0x8e, &devv.dig_P1)
 800166a:	4925      	ldr	r1, [pc, #148]	@ (8001700 <read_calibration_data+0xc4>)
 800166c:	208e      	movs	r0, #142	@ 0x8e
 800166e:	f7ff ff8d 	bl	800158c <read_register16>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d039      	beq.n	80016ec <read_calibration_data+0xb0>
			&& read_register16(0x90, (uint16_t *) &devv.dig_P2)
 8001678:	4922      	ldr	r1, [pc, #136]	@ (8001704 <read_calibration_data+0xc8>)
 800167a:	2090      	movs	r0, #144	@ 0x90
 800167c:	f7ff ff86 	bl	800158c <read_register16>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d032      	beq.n	80016ec <read_calibration_data+0xb0>
			&& read_register16(0x92, (uint16_t *) &devv.dig_P3)
 8001686:	4920      	ldr	r1, [pc, #128]	@ (8001708 <read_calibration_data+0xcc>)
 8001688:	2092      	movs	r0, #146	@ 0x92
 800168a:	f7ff ff7f 	bl	800158c <read_register16>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d02b      	beq.n	80016ec <read_calibration_data+0xb0>
			&& read_register16(0x94, (uint16_t *) &devv.dig_P4)
 8001694:	491d      	ldr	r1, [pc, #116]	@ (800170c <read_calibration_data+0xd0>)
 8001696:	2094      	movs	r0, #148	@ 0x94
 8001698:	f7ff ff78 	bl	800158c <read_register16>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d024      	beq.n	80016ec <read_calibration_data+0xb0>
			&& read_register16(0x96, (uint16_t *) &devv.dig_P5)
 80016a2:	491b      	ldr	r1, [pc, #108]	@ (8001710 <read_calibration_data+0xd4>)
 80016a4:	2096      	movs	r0, #150	@ 0x96
 80016a6:	f7ff ff71 	bl	800158c <read_register16>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d01d      	beq.n	80016ec <read_calibration_data+0xb0>
			&& read_register16(0x98, (uint16_t *) &devv.dig_P6)
 80016b0:	4918      	ldr	r1, [pc, #96]	@ (8001714 <read_calibration_data+0xd8>)
 80016b2:	2098      	movs	r0, #152	@ 0x98
 80016b4:	f7ff ff6a 	bl	800158c <read_register16>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d016      	beq.n	80016ec <read_calibration_data+0xb0>
			&& read_register16(0x9a, (uint16_t *) &devv.dig_P7)
 80016be:	4916      	ldr	r1, [pc, #88]	@ (8001718 <read_calibration_data+0xdc>)
 80016c0:	209a      	movs	r0, #154	@ 0x9a
 80016c2:	f7ff ff63 	bl	800158c <read_register16>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00f      	beq.n	80016ec <read_calibration_data+0xb0>
			&& read_register16(0x9c, (uint16_t *) &devv.dig_P8)
 80016cc:	4913      	ldr	r1, [pc, #76]	@ (800171c <read_calibration_data+0xe0>)
 80016ce:	209c      	movs	r0, #156	@ 0x9c
 80016d0:	f7ff ff5c 	bl	800158c <read_register16>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d008      	beq.n	80016ec <read_calibration_data+0xb0>
			&& read_register16(0x9e,(uint16_t *) &devv.dig_P9))
 80016da:	4911      	ldr	r1, [pc, #68]	@ (8001720 <read_calibration_data+0xe4>)
 80016dc:	209e      	movs	r0, #158	@ 0x9e
 80016de:	f7ff ff55 	bl	800158c <read_register16>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <read_calibration_data+0xb0>
			{

		return true;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e000      	b.n	80016ee <read_calibration_data+0xb2>
	}

	return false;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200000fc 	.word	0x200000fc
 80016f8:	200000fe 	.word	0x200000fe
 80016fc:	20000100 	.word	0x20000100
 8001700:	20000102 	.word	0x20000102
 8001704:	20000104 	.word	0x20000104
 8001708:	20000106 	.word	0x20000106
 800170c:	20000108 	.word	0x20000108
 8001710:	2000010a 	.word	0x2000010a
 8001714:	2000010c 	.word	0x2000010c
 8001718:	2000010e 	.word	0x2000010e
 800171c:	20000110 	.word	0x20000110
 8001720:	20000112 	.word	0x20000112

08001724 <write_register8>:


static int write_register8(uint8_t addr, uint8_t value) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af04      	add	r7, sp, #16
 800172a:	4603      	mov	r3, r0
 800172c:	460a      	mov	r2, r1
 800172e:	71fb      	strb	r3, [r7, #7]
 8001730:	4613      	mov	r3, r2
 8001732:	71bb      	strb	r3, [r7, #6]
	uint16_t tx_buff;

	tx_buff = (devv.addr << 1);
 8001734:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <write_register8+0x4c>)
 8001736:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(devv.i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800173c:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <write_register8+0x4c>)
 800173e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	b29a      	uxth	r2, r3
 8001744:	89f9      	ldrh	r1, [r7, #14]
 8001746:	f242 7310 	movw	r3, #10000	@ 0x2710
 800174a:	9302      	str	r3, [sp, #8]
 800174c:	2301      	movs	r3, #1
 800174e:	9301      	str	r3, [sp, #4]
 8001750:	1dbb      	adds	r3, r7, #6
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	2301      	movs	r3, #1
 8001756:	f007 fc7f 	bl	8009058 <HAL_I2C_Mem_Write>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <write_register8+0x40>
		return false;
 8001760:	2300      	movs	r3, #0
 8001762:	e000      	b.n	8001766 <write_register8+0x42>
	else
		return true;
 8001764:	2301      	movs	r3, #1
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200000fc 	.word	0x200000fc

08001774 <bmp280_init>:

bool bmp280_init(I2C_HandleTypeDef* i2c) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

    devv.addr = BMP280_I2C_ADDRESS_0;
 800177c:	4b49      	ldr	r3, [pc, #292]	@ (80018a4 <bmp280_init+0x130>)
 800177e:	2276      	movs	r2, #118	@ 0x76
 8001780:	849a      	strh	r2, [r3, #36]	@ 0x24
	devv.i2c  = i2c;
 8001782:	4a48      	ldr	r2, [pc, #288]	@ (80018a4 <bmp280_init+0x130>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6293      	str	r3, [r2, #40]	@ 0x28
	bmp280_init_default_params();
 8001788:	f7ff fee4 	bl	8001554 <bmp280_init_default_params>

	if (devv.addr != BMP280_I2C_ADDRESS_0
 800178c:	4b45      	ldr	r3, [pc, #276]	@ (80018a4 <bmp280_init+0x130>)
 800178e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001790:	2b76      	cmp	r3, #118	@ 0x76
 8001792:	d005      	beq.n	80017a0 <bmp280_init+0x2c>
			&& devv.addr != BMP280_I2C_ADDRESS_1) {
 8001794:	4b43      	ldr	r3, [pc, #268]	@ (80018a4 <bmp280_init+0x130>)
 8001796:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001798:	2b77      	cmp	r3, #119	@ 0x77
 800179a:	d001      	beq.n	80017a0 <bmp280_init+0x2c>

		return false;
 800179c:	2300      	movs	r3, #0
 800179e:	e07d      	b.n	800189c <bmp280_init+0x128>
	}

	if (read_data(BMP280_REG_ID,&devv.id, 1)) {
 80017a0:	2201      	movs	r2, #1
 80017a2:	4941      	ldr	r1, [pc, #260]	@ (80018a8 <bmp280_init+0x134>)
 80017a4:	20d0      	movs	r0, #208	@ 0xd0
 80017a6:	f7ff ff21 	bl	80015ec <read_data>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <bmp280_init+0x40>
		return false;
 80017b0:	2300      	movs	r3, #0
 80017b2:	e073      	b.n	800189c <bmp280_init+0x128>
	}

	if (devv.id != BMP280_CHIP_ID && devv.id != BME280_CHIP_ID) {
 80017b4:	4b3b      	ldr	r3, [pc, #236]	@ (80018a4 <bmp280_init+0x130>)
 80017b6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80017ba:	2b58      	cmp	r3, #88	@ 0x58
 80017bc:	d006      	beq.n	80017cc <bmp280_init+0x58>
 80017be:	4b39      	ldr	r3, [pc, #228]	@ (80018a4 <bmp280_init+0x130>)
 80017c0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80017c4:	2b60      	cmp	r3, #96	@ 0x60
 80017c6:	d001      	beq.n	80017cc <bmp280_init+0x58>

		return false;
 80017c8:	2300      	movs	r3, #0
 80017ca:	e067      	b.n	800189c <bmp280_init+0x128>
	}

	// Soft reset.
	if (write_register8( BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80017cc:	21b6      	movs	r1, #182	@ 0xb6
 80017ce:	20e0      	movs	r0, #224	@ 0xe0
 80017d0:	f7ff ffa8 	bl	8001724 <write_register8>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <bmp280_init+0x6a>
		return false;
 80017da:	2300      	movs	r3, #0
 80017dc:	e05e      	b.n	800189c <bmp280_init+0x128>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(BMP280_REG_STATUS, &status, 1)&& (status & 1) == 0)
 80017de:	f107 030d 	add.w	r3, r7, #13
 80017e2:	2201      	movs	r2, #1
 80017e4:	4619      	mov	r1, r3
 80017e6:	20f3      	movs	r0, #243	@ 0xf3
 80017e8:	f7ff ff00 	bl	80015ec <read_data>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f5      	bne.n	80017de <bmp280_init+0x6a>
 80017f2:	7b7b      	ldrb	r3, [r7, #13]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1f0      	bne.n	80017de <bmp280_init+0x6a>
			break;
	}

	if (!read_calibration_data()) {
 80017fc:	f7ff ff1e 	bl	800163c <read_calibration_data>
 8001800:	4603      	mov	r3, r0
 8001802:	f083 0301 	eor.w	r3, r3, #1
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d100      	bne.n	800180e <bmp280_init+0x9a>
 800180c:	e001      	b.n	8001812 <bmp280_init+0x9e>
		return false;
 800180e:	2300      	movs	r3, #0
 8001810:	e044      	b.n	800189c <bmp280_init+0x128>
	}

	if (devv.id == BME280_CHIP_ID ) {
 8001812:	4b24      	ldr	r3, [pc, #144]	@ (80018a4 <bmp280_init+0x130>)
 8001814:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001818:	2b60      	cmp	r3, #96	@ 0x60
 800181a:	d101      	bne.n	8001820 <bmp280_init+0xac>
		return false;
 800181c:	2300      	movs	r3, #0
 800181e:	e03d      	b.n	800189c <bmp280_init+0x128>
	}

	uint8_t config = (devv.params.standby << 5) | (devv.params.filter << 2);
 8001820:	4b20      	ldr	r3, [pc, #128]	@ (80018a4 <bmp280_init+0x130>)
 8001822:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001826:	015b      	lsls	r3, r3, #5
 8001828:	b25a      	sxtb	r2, r3
 800182a:	4b1e      	ldr	r3, [pc, #120]	@ (80018a4 <bmp280_init+0x130>)
 800182c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	b25b      	sxtb	r3, r3
 8001834:	4313      	orrs	r3, r2
 8001836:	b25b      	sxtb	r3, r3
 8001838:	73fb      	strb	r3, [r7, #15]
	if (write_register8(BMP280_REG_CONFIG, config)) {
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	4619      	mov	r1, r3
 800183e:	20f5      	movs	r0, #245	@ 0xf5
 8001840:	f7ff ff70 	bl	8001724 <write_register8>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <bmp280_init+0xda>
		return false;
 800184a:	2300      	movs	r3, #0
 800184c:	e026      	b.n	800189c <bmp280_init+0x128>
	}

	if (devv.params.mode == BMP280_MODE_FORCED) {
 800184e:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <bmp280_init+0x130>)
 8001850:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001854:	2b01      	cmp	r3, #1
 8001856:	d103      	bne.n	8001860 <bmp280_init+0xec>
		devv.params.mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001858:	4b12      	ldr	r3, [pc, #72]	@ (80018a4 <bmp280_init+0x130>)
 800185a:	2200      	movs	r2, #0
 800185c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	}

	uint8_t ctrl = (devv.params.oversampling_temperature << 5)
 8001860:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <bmp280_init+0x130>)
 8001862:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001866:	015b      	lsls	r3, r3, #5
			| (devv.params.oversampling_pressure << 2) | (devv.params.mode);
 8001868:	b25a      	sxtb	r2, r3
 800186a:	4b0e      	ldr	r3, [pc, #56]	@ (80018a4 <bmp280_init+0x130>)
 800186c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	b25b      	sxtb	r3, r3
 8001874:	4313      	orrs	r3, r2
 8001876:	b25a      	sxtb	r2, r3
 8001878:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <bmp280_init+0x130>)
 800187a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800187e:	b25b      	sxtb	r3, r3
 8001880:	4313      	orrs	r3, r2
 8001882:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (devv.params.oversampling_temperature << 5)
 8001884:	73bb      	strb	r3, [r7, #14]

	if (write_register8(BMP280_REG_CTRL, ctrl)) {
 8001886:	7bbb      	ldrb	r3, [r7, #14]
 8001888:	4619      	mov	r1, r3
 800188a:	20f4      	movs	r0, #244	@ 0xf4
 800188c:	f7ff ff4a 	bl	8001724 <write_register8>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <bmp280_init+0x126>
		return false;
 8001896:	2300      	movs	r3, #0
 8001898:	e000      	b.n	800189c <bmp280_init+0x128>
	}

	return true;
 800189a:	2301      	movs	r3, #1
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200000fc 	.word	0x200000fc
 80018a8:	2000012d 	.word	0x2000012d

080018ac <compensate_temperature>:
/**
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(int32_t adc_temp, int32_t *fine_temp) {
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) devv.dig_T1 << 1)))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	10da      	asrs	r2, r3, #3
 80018ba:	4b18      	ldr	r3, [pc, #96]	@ (800191c <compensate_temperature+0x70>)
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	1ad3      	subs	r3, r2, r3
			* (int32_t) devv.dig_T2) >> 11;
 80018c2:	4a16      	ldr	r2, [pc, #88]	@ (800191c <compensate_temperature+0x70>)
 80018c4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80018c8:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) devv.dig_T1 << 1)))
 80018cc:	12db      	asrs	r3, r3, #11
 80018ce:	60fb      	str	r3, [r7, #12]
	var2 = (((((adc_temp >> 4) - (int32_t) devv.dig_T1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	111b      	asrs	r3, r3, #4
 80018d4:	4a11      	ldr	r2, [pc, #68]	@ (800191c <compensate_temperature+0x70>)
 80018d6:	8812      	ldrh	r2, [r2, #0]
 80018d8:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) devv.dig_T1)) >> 12)
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	1112      	asrs	r2, r2, #4
 80018de:	490f      	ldr	r1, [pc, #60]	@ (800191c <compensate_temperature+0x70>)
 80018e0:	8809      	ldrh	r1, [r1, #0]
 80018e2:	1a52      	subs	r2, r2, r1
 80018e4:	fb02 f303 	mul.w	r3, r2, r3
 80018e8:	131b      	asrs	r3, r3, #12
			* (int32_t) devv.dig_T3) >> 14;
 80018ea:	4a0c      	ldr	r2, [pc, #48]	@ (800191c <compensate_temperature+0x70>)
 80018ec:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80018f0:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) devv.dig_T1)
 80018f4:	139b      	asrs	r3, r3, #14
 80018f6:	60bb      	str	r3, [r7, #8]

	*fine_temp = var1 + var2;
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	441a      	add	r2, r3
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	3380      	adds	r3, #128	@ 0x80
 800190e:	121b      	asrs	r3, r3, #8
}
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	200000fc 	.word	0x200000fc

08001920 <compensate_pressure>:
/**
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static  uint32_t compensate_pressure(int32_t adc_press,int32_t fine_temp) {
 8001920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001924:	b0cc      	sub	sp, #304	@ 0x130
 8001926:	af00      	add	r7, sp, #0
 8001928:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 800192c:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001930:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001934:	17da      	asrs	r2, r3, #31
 8001936:	461c      	mov	r4, r3
 8001938:	4615      	mov	r5, r2
 800193a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800193e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001942:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) devv.dig_P6;
 8001946:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800194a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800194e:	fb03 f102 	mul.w	r1, r3, r2
 8001952:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001956:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800195a:	fb02 f303 	mul.w	r3, r2, r3
 800195e:	18ca      	adds	r2, r1, r3
 8001960:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001964:	fba3 8903 	umull	r8, r9, r3, r3
 8001968:	eb02 0309 	add.w	r3, r2, r9
 800196c:	4699      	mov	r9, r3
 800196e:	4b9f      	ldr	r3, [pc, #636]	@ (8001bec <compensate_pressure+0x2cc>)
 8001970:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001974:	b21b      	sxth	r3, r3
 8001976:	17da      	asrs	r2, r3, #31
 8001978:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800197c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001980:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001984:	4603      	mov	r3, r0
 8001986:	fb03 f209 	mul.w	r2, r3, r9
 800198a:	460b      	mov	r3, r1
 800198c:	fb08 f303 	mul.w	r3, r8, r3
 8001990:	4413      	add	r3, r2
 8001992:	4602      	mov	r2, r0
 8001994:	fba8 2102 	umull	r2, r1, r8, r2
 8001998:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 800199c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80019a0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80019a4:	4413      	add	r3, r2
 80019a6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80019aa:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 80019ae:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 80019b2:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) devv.dig_P5) << 17);
 80019b6:	4b8d      	ldr	r3, [pc, #564]	@ (8001bec <compensate_pressure+0x2cc>)
 80019b8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80019bc:	b21b      	sxth	r3, r3
 80019be:	17da      	asrs	r2, r3, #31
 80019c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80019c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80019c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80019cc:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 80019d0:	462a      	mov	r2, r5
 80019d2:	fb02 f203 	mul.w	r2, r2, r3
 80019d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80019da:	4621      	mov	r1, r4
 80019dc:	fb01 f303 	mul.w	r3, r1, r3
 80019e0:	441a      	add	r2, r3
 80019e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80019e6:	4621      	mov	r1, r4
 80019e8:	fba3 3101 	umull	r3, r1, r3, r1
 80019ec:	f8c7 110c 	str.w	r1, [r7, #268]	@ 0x10c
 80019f0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80019f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80019f8:	18d3      	adds	r3, r2, r3
 80019fa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80019fe:	f04f 0000 	mov.w	r0, #0
 8001a02:	f04f 0100 	mov.w	r1, #0
 8001a06:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8001a0a:	462b      	mov	r3, r5
 8001a0c:	0459      	lsls	r1, r3, #17
 8001a0e:	4622      	mov	r2, r4
 8001a10:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001a14:	4623      	mov	r3, r4
 8001a16:	0458      	lsls	r0, r3, #17
 8001a18:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001a1c:	1814      	adds	r4, r2, r0
 8001a1e:	64bc      	str	r4, [r7, #72]	@ 0x48
 8001a20:	414b      	adcs	r3, r1
 8001a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a24:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8001a28:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) devv.dig_P4) << 35);
 8001a2c:	4b6f      	ldr	r3, [pc, #444]	@ (8001bec <compensate_pressure+0x2cc>)
 8001a2e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	17da      	asrs	r2, r3, #31
 8001a36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001a3a:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001a3e:	f04f 0000 	mov.w	r0, #0
 8001a42:	f04f 0100 	mov.w	r1, #0
 8001a46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a4a:	00d9      	lsls	r1, r3, #3
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001a52:	1814      	adds	r4, r2, r0
 8001a54:	643c      	str	r4, [r7, #64]	@ 0x40
 8001a56:	414b      	adcs	r3, r1
 8001a58:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a5a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001a5e:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) devv.dig_P3) >> 8)
 8001a62:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001a66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001a6a:	fb03 f102 	mul.w	r1, r3, r2
 8001a6e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001a72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001a76:	fb02 f303 	mul.w	r3, r2, r3
 8001a7a:	18ca      	adds	r2, r1, r3
 8001a7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001a80:	fba3 3103 	umull	r3, r1, r3, r3
 8001a84:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 8001a88:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001a90:	18d3      	adds	r3, r2, r3
 8001a92:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001a96:	4b55      	ldr	r3, [pc, #340]	@ (8001bec <compensate_pressure+0x2cc>)
 8001a98:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	17da      	asrs	r2, r3, #31
 8001aa0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001aa4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001aa8:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8001aac:	4622      	mov	r2, r4
 8001aae:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8001ab2:	4641      	mov	r1, r8
 8001ab4:	fb01 f202 	mul.w	r2, r1, r2
 8001ab8:	464d      	mov	r5, r9
 8001aba:	4618      	mov	r0, r3
 8001abc:	4621      	mov	r1, r4
 8001abe:	4603      	mov	r3, r0
 8001ac0:	fb03 f305 	mul.w	r3, r3, r5
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	4641      	mov	r1, r8
 8001aca:	fba2 2101 	umull	r2, r1, r2, r1
 8001ace:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 8001ad2:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8001ad6:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8001ada:	4413      	add	r3, r2
 8001adc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001ae0:	f04f 0000 	mov.w	r0, #0
 8001ae4:	f04f 0100 	mov.w	r1, #0
 8001ae8:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001aec:	4623      	mov	r3, r4
 8001aee:	0a18      	lsrs	r0, r3, #8
 8001af0:	462a      	mov	r2, r5
 8001af2:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001af6:	462b      	mov	r3, r5
 8001af8:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) devv.dig_P2) << 12);
 8001afa:	4b3c      	ldr	r3, [pc, #240]	@ (8001bec <compensate_pressure+0x2cc>)
 8001afc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b00:	b21b      	sxth	r3, r3
 8001b02:	17da      	asrs	r2, r3, #31
 8001b04:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001b08:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001b0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001b10:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001b14:	464a      	mov	r2, r9
 8001b16:	fb02 f203 	mul.w	r2, r2, r3
 8001b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001b1e:	4644      	mov	r4, r8
 8001b20:	fb04 f303 	mul.w	r3, r4, r3
 8001b24:	441a      	add	r2, r3
 8001b26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001b2a:	4644      	mov	r4, r8
 8001b2c:	fba3 3404 	umull	r3, r4, r3, r4
 8001b30:	f8c7 40f4 	str.w	r4, [r7, #244]	@ 0xf4
 8001b34:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b3c:	18d3      	adds	r3, r2, r3
 8001b3e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	f04f 0300 	mov.w	r3, #0
 8001b4a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8001b4e:	464c      	mov	r4, r9
 8001b50:	0323      	lsls	r3, r4, #12
 8001b52:	46c4      	mov	ip, r8
 8001b54:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001b58:	4644      	mov	r4, r8
 8001b5a:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) devv.dig_P3) >> 8)
 8001b5c:	1884      	adds	r4, r0, r2
 8001b5e:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001b60:	eb41 0303 	adc.w	r3, r1, r3
 8001b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b66:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001b6a:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) devv.dig_P1) >> 33;
 8001b6e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001b72:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001b76:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8001b7a:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8001b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <compensate_pressure+0x2cc>)
 8001b80:	88db      	ldrh	r3, [r3, #6]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	2200      	movs	r2, #0
 8001b86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001b8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001b8e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8001b92:	4622      	mov	r2, r4
 8001b94:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001b98:	4641      	mov	r1, r8
 8001b9a:	fb01 f202 	mul.w	r2, r1, r2
 8001b9e:	464d      	mov	r5, r9
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	fb03 f305 	mul.w	r3, r3, r5
 8001baa:	4413      	add	r3, r2
 8001bac:	4602      	mov	r2, r0
 8001bae:	4641      	mov	r1, r8
 8001bb0:	fba2 2101 	umull	r2, r1, r2, r1
 8001bb4:	f8c7 10ec 	str.w	r1, [r7, #236]	@ 0xec
 8001bb8:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001bbc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001bc0:	4413      	add	r3, r2
 8001bc2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	104a      	asrs	r2, r1, #1
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	17cb      	asrs	r3, r1, #31
 8001bda:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 8001bde:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001be2:	4313      	orrs	r3, r2
 8001be4:	d104      	bne.n	8001bf0 <compensate_pressure+0x2d0>
		return 0;  // avoid exception caused by division by zero
 8001be6:	2300      	movs	r3, #0
 8001be8:	e15d      	b.n	8001ea6 <compensate_pressure+0x586>
 8001bea:	bf00      	nop
 8001bec:	200000fc 	.word	0x200000fc
	}

	p = 1048576 - adc_press;
 8001bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001bf4:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001bf8:	17da      	asrs	r2, r3, #31
 8001bfa:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bfc:	637a      	str	r2, [r7, #52]	@ 0x34
 8001bfe:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001c02:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001c06:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001c0a:	105b      	asrs	r3, r3, #1
 8001c0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001c10:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001c14:	07db      	lsls	r3, r3, #31
 8001c16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001c1a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001c1e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001c22:	4604      	mov	r4, r0
 8001c24:	1aa4      	subs	r4, r4, r2
 8001c26:	f8c7 4080 	str.w	r4, [r7, #128]	@ 0x80
 8001c2a:	eb61 0303 	sbc.w	r3, r1, r3
 8001c2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001c32:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001c36:	4622      	mov	r2, r4
 8001c38:	462b      	mov	r3, r5
 8001c3a:	1891      	adds	r1, r2, r2
 8001c3c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001c3e:	415b      	adcs	r3, r3
 8001c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c46:	4621      	mov	r1, r4
 8001c48:	1851      	adds	r1, r2, r1
 8001c4a:	6239      	str	r1, [r7, #32]
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	414b      	adcs	r3, r1
 8001c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c5e:	4649      	mov	r1, r9
 8001c60:	018b      	lsls	r3, r1, #6
 8001c62:	4641      	mov	r1, r8
 8001c64:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c68:	4641      	mov	r1, r8
 8001c6a:	018a      	lsls	r2, r1, #6
 8001c6c:	4641      	mov	r1, r8
 8001c6e:	1889      	adds	r1, r1, r2
 8001c70:	61b9      	str	r1, [r7, #24]
 8001c72:	4649      	mov	r1, r9
 8001c74:	eb43 0101 	adc.w	r1, r3, r1
 8001c78:	61f9      	str	r1, [r7, #28]
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	f04f 0300 	mov.w	r3, #0
 8001c82:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001c86:	4649      	mov	r1, r9
 8001c88:	008b      	lsls	r3, r1, #2
 8001c8a:	46c4      	mov	ip, r8
 8001c8c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001c90:	4641      	mov	r1, r8
 8001c92:	008a      	lsls	r2, r1, #2
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4622      	mov	r2, r4
 8001c9c:	189b      	adds	r3, r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	462a      	mov	r2, r5
 8001ca4:	eb42 0303 	adc.w	r3, r2, r3
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001cb6:	4649      	mov	r1, r9
 8001cb8:	008b      	lsls	r3, r1, #2
 8001cba:	46c4      	mov	ip, r8
 8001cbc:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001cc0:	4641      	mov	r1, r8
 8001cc2:	008a      	lsls	r2, r1, #2
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4603      	mov	r3, r0
 8001cca:	4622      	mov	r2, r4
 8001ccc:	189b      	adds	r3, r3, r2
 8001cce:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001cd0:	462b      	mov	r3, r5
 8001cd2:	460a      	mov	r2, r1
 8001cd4:	eb42 0303 	adc.w	r3, r2, r3
 8001cd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001cda:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001cde:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001ce2:	f7ff fa89 	bl	80011f8 <__aeabi_ldivmod>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) devv.dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001cee:	4b71      	ldr	r3, [pc, #452]	@ (8001eb4 <compensate_pressure+0x594>)
 8001cf0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001cf4:	b21b      	sxth	r3, r3
 8001cf6:	17da      	asrs	r2, r3, #31
 8001cf8:	673b      	str	r3, [r7, #112]	@ 0x70
 8001cfa:	677a      	str	r2, [r7, #116]	@ 0x74
 8001cfc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001d00:	f04f 0000 	mov.w	r0, #0
 8001d04:	f04f 0100 	mov.w	r1, #0
 8001d08:	0b50      	lsrs	r0, r2, #13
 8001d0a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d0e:	1359      	asrs	r1, r3, #13
 8001d10:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001d14:	462b      	mov	r3, r5
 8001d16:	fb00 f203 	mul.w	r2, r0, r3
 8001d1a:	4623      	mov	r3, r4
 8001d1c:	fb03 f301 	mul.w	r3, r3, r1
 8001d20:	4413      	add	r3, r2
 8001d22:	4622      	mov	r2, r4
 8001d24:	fba2 2100 	umull	r2, r1, r2, r0
 8001d28:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8001d2c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001d30:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001d34:	4413      	add	r3, r2
 8001d36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001d3a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001d3e:	f04f 0000 	mov.w	r0, #0
 8001d42:	f04f 0100 	mov.w	r1, #0
 8001d46:	0b50      	lsrs	r0, r2, #13
 8001d48:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d4c:	1359      	asrs	r1, r3, #13
 8001d4e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001d52:	462b      	mov	r3, r5
 8001d54:	fb00 f203 	mul.w	r2, r0, r3
 8001d58:	4623      	mov	r3, r4
 8001d5a:	fb03 f301 	mul.w	r3, r3, r1
 8001d5e:	4413      	add	r3, r2
 8001d60:	4622      	mov	r2, r4
 8001d62:	fba2 2100 	umull	r2, r1, r2, r0
 8001d66:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8001d6a:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001d6e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001d72:	4413      	add	r3, r2
 8001d74:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	f04f 0300 	mov.w	r3, #0
 8001d80:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001d84:	4621      	mov	r1, r4
 8001d86:	0e4a      	lsrs	r2, r1, #25
 8001d88:	4620      	mov	r0, r4
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	460c      	mov	r4, r1
 8001d8e:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001d92:	164b      	asrs	r3, r1, #25
 8001d94:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) devv.dig_P8 * p) >> 19;
 8001d98:	4b46      	ldr	r3, [pc, #280]	@ (8001eb4 <compensate_pressure+0x594>)
 8001d9a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d9e:	b21b      	sxth	r3, r3
 8001da0:	17da      	asrs	r2, r3, #31
 8001da2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001da4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001da6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001daa:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001dae:	462a      	mov	r2, r5
 8001db0:	fb02 f203 	mul.w	r2, r2, r3
 8001db4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001db8:	4621      	mov	r1, r4
 8001dba:	fb01 f303 	mul.w	r3, r1, r3
 8001dbe:	441a      	add	r2, r3
 8001dc0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001dc4:	4621      	mov	r1, r4
 8001dc6:	fba3 3101 	umull	r3, r1, r3, r1
 8001dca:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8001dce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001dd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001dd6:	18d3      	adds	r3, r2, r3
 8001dd8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001de8:	4621      	mov	r1, r4
 8001dea:	0cca      	lsrs	r2, r1, #19
 8001dec:	4620      	mov	r0, r4
 8001dee:	4629      	mov	r1, r5
 8001df0:	460c      	mov	r4, r1
 8001df2:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001df6:	14cb      	asrs	r3, r1, #19
 8001df8:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) devv.dig_P7 << 4);
 8001dfc:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8001e00:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001e04:	1884      	adds	r4, r0, r2
 8001e06:	663c      	str	r4, [r7, #96]	@ 0x60
 8001e08:	eb41 0303 	adc.w	r3, r1, r3
 8001e0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e0e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001e12:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001e16:	4621      	mov	r1, r4
 8001e18:	1889      	adds	r1, r1, r2
 8001e1a:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001e1c:	4629      	mov	r1, r5
 8001e1e:	eb43 0101 	adc.w	r1, r3, r1
 8001e22:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8001e24:	f04f 0000 	mov.w	r0, #0
 8001e28:	f04f 0100 	mov.w	r1, #0
 8001e2c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001e30:	4623      	mov	r3, r4
 8001e32:	0a18      	lsrs	r0, r3, #8
 8001e34:	462a      	mov	r2, r5
 8001e36:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001e3a:	462b      	mov	r3, r5
 8001e3c:	1219      	asrs	r1, r3, #8
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb4 <compensate_pressure+0x594>)
 8001e40:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001e44:	b21b      	sxth	r3, r3
 8001e46:	17da      	asrs	r2, r3, #31
 8001e48:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e4a:	657a      	str	r2, [r7, #84]	@ 0x54
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001e58:	464c      	mov	r4, r9
 8001e5a:	0123      	lsls	r3, r4, #4
 8001e5c:	46c4      	mov	ip, r8
 8001e5e:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001e62:	4644      	mov	r4, r8
 8001e64:	0122      	lsls	r2, r4, #4
 8001e66:	1884      	adds	r4, r0, r2
 8001e68:	60bc      	str	r4, [r7, #8]
 8001e6a:	eb41 0303 	adc.w	r3, r1, r3
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001e74:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p/256;
 8001e78:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	da07      	bge.n	8001e90 <compensate_pressure+0x570>
 8001e80:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	f143 0300 	adc.w	r3, r3, #0
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e90:	f04f 0000 	mov.w	r0, #0
 8001e94:	f04f 0100 	mov.w	r1, #0
 8001e98:	0a10      	lsrs	r0, r2, #8
 8001e9a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001e9e:	1219      	asrs	r1, r3, #8
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4613      	mov	r3, r2
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001eac:	46bd      	mov	sp, r7
 8001eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200000fc 	.word	0x200000fc

08001eb8 <bmp280_read_fixed>:


int32_t bmp280_read_fixed(){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
	static int32_t temperature;
	static int32_t pressure;

	uint8_t data[3];

	if (read_data(0xf7, data,3)) {
 8001ebe:	463b      	mov	r3, r7
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	20f7      	movs	r0, #247	@ 0xf7
 8001ec6:	f7ff fb91 	bl	80015ec <read_data>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <bmp280_read_fixed+0x1c>
		return false;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e073      	b.n	8001fbc <bmp280_read_fixed+0x104>
	}
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001ed4:	783b      	ldrb	r3, [r7, #0]
 8001ed6:	031a      	lsls	r2, r3, #12
 8001ed8:	787b      	ldrb	r3, [r7, #1]
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	4313      	orrs	r3, r2
 8001ede:	78ba      	ldrb	r2, [r7, #2]
 8001ee0:	0912      	lsrs	r2, r2, #4
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	4a3c      	ldr	r2, [pc, #240]	@ (8001fd8 <bmp280_read_fixed+0x120>)
 8001ee8:	6013      	str	r3, [r2, #0]

	if (read_data(0xfA, data,3)) {
 8001eea:	463b      	mov	r3, r7
 8001eec:	2203      	movs	r2, #3
 8001eee:	4619      	mov	r1, r3
 8001ef0:	20fa      	movs	r0, #250	@ 0xfa
 8001ef2:	f7ff fb7b 	bl	80015ec <read_data>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <bmp280_read_fixed+0x48>
		return false;
 8001efc:	2300      	movs	r3, #0
 8001efe:	e05d      	b.n	8001fbc <bmp280_read_fixed+0x104>
	}
	adc_temp = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001f00:	783b      	ldrb	r3, [r7, #0]
 8001f02:	031a      	lsls	r2, r3, #12
 8001f04:	787b      	ldrb	r3, [r7, #1]
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	78ba      	ldrb	r2, [r7, #2]
 8001f0c:	0912      	lsrs	r2, r2, #4
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4a32      	ldr	r2, [pc, #200]	@ (8001fdc <bmp280_read_fixed+0x124>)
 8001f14:	6013      	str	r3, [r2, #0]
    temperature = compensate_temperature(adc_temp, &fine_temp);
 8001f16:	4b31      	ldr	r3, [pc, #196]	@ (8001fdc <bmp280_read_fixed+0x124>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4931      	ldr	r1, [pc, #196]	@ (8001fe0 <bmp280_read_fixed+0x128>)
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fcc5 	bl	80018ac <compensate_temperature>
 8001f22:	4603      	mov	r3, r0
 8001f24:	4a2f      	ldr	r2, [pc, #188]	@ (8001fe4 <bmp280_read_fixed+0x12c>)
 8001f26:	6013      	str	r3, [r2, #0]
	pressure = compensate_pressure(adc_pressure, fine_temp);
 8001f28:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd8 <bmp280_read_fixed+0x120>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a2c      	ldr	r2, [pc, #176]	@ (8001fe0 <bmp280_read_fixed+0x128>)
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fcf4 	bl	8001920 <compensate_pressure>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe8 <bmp280_read_fixed+0x130>)
 8001f3e:	601a      	str	r2, [r3, #0]
	int32_t bmp280_altitude =((44330 * (1.0 - powf((float)pressure/102416,0.1903))))*100 - 100000;// cm
 8001f40:	4b29      	ldr	r3, [pc, #164]	@ (8001fe8 <bmp280_read_fixed+0x130>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe fee1 	bl	8000d0c <__aeabi_i2f>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4927      	ldr	r1, [pc, #156]	@ (8001fec <bmp280_read_fixed+0x134>)
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe ffe4 	bl	8000f1c <__aeabi_fdiv>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4926      	ldr	r1, [pc, #152]	@ (8001ff0 <bmp280_read_fixed+0x138>)
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f012 fef7 	bl	8014d4c <powf>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fac9 	bl	80004f8 <__aeabi_f2d>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	f04f 0000 	mov.w	r0, #0
 8001f6e:	4921      	ldr	r1, [pc, #132]	@ (8001ff4 <bmp280_read_fixed+0x13c>)
 8001f70:	f7fe f962 	bl	8000238 <__aeabi_dsub>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	a312      	add	r3, pc, #72	@ (adr r3, 8001fc8 <bmp280_read_fixed+0x110>)
 8001f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f82:	f7fe fb11 	bl	80005a8 <__aeabi_dmul>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	4b19      	ldr	r3, [pc, #100]	@ (8001ff8 <bmp280_read_fixed+0x140>)
 8001f94:	f7fe fb08 	bl	80005a8 <__aeabi_dmul>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	a30b      	add	r3, pc, #44	@ (adr r3, 8001fd0 <bmp280_read_fixed+0x118>)
 8001fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa6:	f7fe f947 	bl	8000238 <__aeabi_dsub>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4610      	mov	r0, r2
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f7fe fda9 	bl	8000b08 <__aeabi_d2iz>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	607b      	str	r3, [r7, #4]
	return bmp280_altitude;
 8001fba:	687b      	ldr	r3, [r7, #4]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	f3af 8000 	nop.w
 8001fc8:	00000000 	.word	0x00000000
 8001fcc:	40e5a540 	.word	0x40e5a540
 8001fd0:	00000000 	.word	0x00000000
 8001fd4:	40f86a00 	.word	0x40f86a00
 8001fd8:	20000130 	.word	0x20000130
 8001fdc:	20000134 	.word	0x20000134
 8001fe0:	20000138 	.word	0x20000138
 8001fe4:	2000013c 	.word	0x2000013c
 8001fe8:	20000140 	.word	0x20000140
 8001fec:	47c80800 	.word	0x47c80800
 8001ff0:	3e42de01 	.word	0x3e42de01
 8001ff4:	3ff00000 	.word	0x3ff00000
 8001ff8:	40590000 	.word	0x40590000

08001ffc <ibus_init>:


static void ibusDataReceive(uint8_t c);

void ibus_init(UART_HandleTypeDef *uartt)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
    ibusChannelData[0] = 1500;
 8002004:	4b12      	ldr	r3, [pc, #72]	@ (8002050 <ibus_init+0x54>)
 8002006:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800200a:	601a      	str	r2, [r3, #0]
    ibusChannelData[1] = 1500;
 800200c:	4b10      	ldr	r3, [pc, #64]	@ (8002050 <ibus_init+0x54>)
 800200e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002012:	605a      	str	r2, [r3, #4]
    for(int i = 2;i < IBUS_MAX_CHANNEL ; i++){
 8002014:	2302      	movs	r3, #2
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	e008      	b.n	800202c <ibus_init+0x30>
      ibusChannelData[i] = 1000;
 800201a:	4a0d      	ldr	r2, [pc, #52]	@ (8002050 <ibus_init+0x54>)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002022:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 2;i < IBUS_MAX_CHANNEL ; i++){
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	3301      	adds	r3, #1
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b0d      	cmp	r3, #13
 8002030:	ddf3      	ble.n	800201a <ibus_init+0x1e>
    }
	uart = uartt;
 8002032:	4a08      	ldr	r2, [pc, #32]	@ (8002054 <ibus_init+0x58>)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6013      	str	r3, [r2, #0]
#ifdef DMA_MODE
    is_receive_cpl = 0;
	HAL_UART_Receive_DMA(uart,buffer_dma,2*IBUS_BUFFSIZE);
#else 
	HAL_UART_Receive_IT(uart, &rx_buff,1);
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <ibus_init+0x58>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2201      	movs	r2, #1
 800203e:	4906      	ldr	r1, [pc, #24]	@ (8002058 <ibus_init+0x5c>)
 8002040:	4618      	mov	r0, r3
 8002042:	f00a fe0e 	bl	800cc62 <HAL_UART_Receive_IT>
#endif
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000148 	.word	0x20000148
 8002054:	200001a4 	.word	0x200001a4
 8002058:	200001a0 	.word	0x200001a0

0800205c <ibus_uart_port>:

UART_HandleTypeDef *ibus_uart_port(){
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
   return uart;
 8002060:	4b02      	ldr	r3, [pc, #8]	@ (800206c <ibus_uart_port+0x10>)
 8002062:	681b      	ldr	r3, [r3, #0]
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	200001a4 	.word	0x200001a4

08002070 <ibus_calback>:

   ibusFrameComplete();
#endif
}

void ibus_calback(){
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0

#ifdef DMA_MODE
	is_receive_cpl = 1;
#else 
	ibusDataReceive(rx_buff);
 8002074:	4b06      	ldr	r3, [pc, #24]	@ (8002090 <ibus_calback+0x20>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f000 f80d 	bl	8002098 <ibusDataReceive>
    HAL_UART_Receive_IT(uart, &rx_buff,1);
 800207e:	4b05      	ldr	r3, [pc, #20]	@ (8002094 <ibus_calback+0x24>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2201      	movs	r2, #1
 8002084:	4902      	ldr	r1, [pc, #8]	@ (8002090 <ibus_calback+0x20>)
 8002086:	4618      	mov	r0, r3
 8002088:	f00a fdeb 	bl	800cc62 <HAL_UART_Receive_IT>
#endif

}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}
 8002090:	200001a0 	.word	0x200001a0
 8002094:	200001a4 	.word	0x200001a4

08002098 <ibusDataReceive>:

static void ibusDataReceive(uint8_t c)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
    uint32_t ibusTime;
    static uint32_t ibusTimeLast;
    static uint8_t ibusFramePosition;

    ibusTime = micros();
 80020a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002110 <ibusDataReceive+0x78>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002114 <ibusDataReceive+0x7c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4413      	add	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]

    if ((ibusTime - ibusTimeLast) > 3000)
 80020b2:	4b19      	ldr	r3, [pc, #100]	@ (8002118 <ibusDataReceive+0x80>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80020be:	4293      	cmp	r3, r2
 80020c0:	d902      	bls.n	80020c8 <ibusDataReceive+0x30>
        ibusFramePosition = 0;
 80020c2:	4b16      	ldr	r3, [pc, #88]	@ (800211c <ibusDataReceive+0x84>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]

    ibusTimeLast = ibusTime;
 80020c8:	4a13      	ldr	r2, [pc, #76]	@ (8002118 <ibusDataReceive+0x80>)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6013      	str	r3, [r2, #0]

    if (ibusFramePosition == 0 && c != IBUS_SYNCBYTE)
 80020ce:	4b13      	ldr	r3, [pc, #76]	@ (800211c <ibusDataReceive+0x84>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d102      	bne.n	80020dc <ibusDataReceive+0x44>
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	2b20      	cmp	r3, #32
 80020da:	d114      	bne.n	8002106 <ibusDataReceive+0x6e>
        return;

    ibus[ibusFramePosition] = (uint8_t)c;
 80020dc:	4b0f      	ldr	r3, [pc, #60]	@ (800211c <ibusDataReceive+0x84>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	4619      	mov	r1, r3
 80020e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002120 <ibusDataReceive+0x88>)
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	5453      	strb	r3, [r2, r1]

    if (ibusFramePosition == IBUS_BUFFSIZE - 1) {
 80020e8:	4b0c      	ldr	r3, [pc, #48]	@ (800211c <ibusDataReceive+0x84>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b1f      	cmp	r3, #31
 80020ee:	d103      	bne.n	80020f8 <ibusDataReceive+0x60>
        ibusFrameDone = TRUE;
 80020f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002124 <ibusDataReceive+0x8c>)
 80020f2:	2201      	movs	r2, #1
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	e007      	b.n	8002108 <ibusDataReceive+0x70>
    } else {
        ibusFramePosition++;
 80020f8:	4b08      	ldr	r3, [pc, #32]	@ (800211c <ibusDataReceive+0x84>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	3301      	adds	r3, #1
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	4b06      	ldr	r3, [pc, #24]	@ (800211c <ibusDataReceive+0x84>)
 8002102:	701a      	strb	r2, [r3, #0]
 8002104:	e000      	b.n	8002108 <ibusDataReceive+0x70>
        return;
 8002106:	bf00      	nop
    }
}
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr
 8002110:	200005dc 	.word	0x200005dc
 8002114:	200005e0 	.word	0x200005e0
 8002118:	200001a8 	.word	0x200001a8
 800211c:	200001ac 	.word	0x200001ac
 8002120:	20000180 	.word	0x20000180
 8002124:	20000144 	.word	0x20000144

08002128 <ibusFrameComplete>:

int ibusFrameComplete(void)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
	
    uint8_t i;
    uint16_t chksum, rxsum;

    if (ibusFrameDone) {
 800212e:	4b63      	ldr	r3, [pc, #396]	@ (80022bc <ibusFrameComplete+0x194>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 80bb 	beq.w	80022ae <ibusFrameComplete+0x186>
        ibusFrameDone = FALSE;
 8002138:	4b60      	ldr	r3, [pc, #384]	@ (80022bc <ibusFrameComplete+0x194>)
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]

        chksum = 0xFFFF;
 800213e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002142:	81bb      	strh	r3, [r7, #12]

        for (i = 0; i < 30; i++)
 8002144:	2300      	movs	r3, #0
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	e009      	b.n	800215e <ibusFrameComplete+0x36>
            chksum -= ibus[i];
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	4a5c      	ldr	r2, [pc, #368]	@ (80022c0 <ibusFrameComplete+0x198>)
 800214e:	5cd3      	ldrb	r3, [r2, r3]
 8002150:	461a      	mov	r2, r3
 8002152:	89bb      	ldrh	r3, [r7, #12]
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	81bb      	strh	r3, [r7, #12]
        for (i = 0; i < 30; i++)
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	3301      	adds	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	2b1d      	cmp	r3, #29
 8002162:	d9f2      	bls.n	800214a <ibusFrameComplete+0x22>

        rxsum = ibus[30] + (ibus[31] << 8);
 8002164:	4b56      	ldr	r3, [pc, #344]	@ (80022c0 <ibusFrameComplete+0x198>)
 8002166:	7f9b      	ldrb	r3, [r3, #30]
 8002168:	461a      	mov	r2, r3
 800216a:	4b55      	ldr	r3, [pc, #340]	@ (80022c0 <ibusFrameComplete+0x198>)
 800216c:	7fdb      	ldrb	r3, [r3, #31]
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	b29b      	uxth	r3, r3
 8002172:	4413      	add	r3, r2
 8002174:	80fb      	strh	r3, [r7, #6]

        if (chksum == rxsum) {
 8002176:	89ba      	ldrh	r2, [r7, #12]
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	429a      	cmp	r2, r3
 800217c:	f040 8097 	bne.w	80022ae <ibusFrameComplete+0x186>
            ibusChannelData[0] = (ibus[ 3] << 8) + ibus[ 2];
 8002180:	4b4f      	ldr	r3, [pc, #316]	@ (80022c0 <ibusFrameComplete+0x198>)
 8002182:	78db      	ldrb	r3, [r3, #3]
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	4a4e      	ldr	r2, [pc, #312]	@ (80022c0 <ibusFrameComplete+0x198>)
 8002188:	7892      	ldrb	r2, [r2, #2]
 800218a:	4413      	add	r3, r2
 800218c:	461a      	mov	r2, r3
 800218e:	4b4d      	ldr	r3, [pc, #308]	@ (80022c4 <ibusFrameComplete+0x19c>)
 8002190:	601a      	str	r2, [r3, #0]
            ibusChannelData[1] = (ibus[ 5] << 8) + ibus[ 4];
 8002192:	4b4b      	ldr	r3, [pc, #300]	@ (80022c0 <ibusFrameComplete+0x198>)
 8002194:	795b      	ldrb	r3, [r3, #5]
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	4a49      	ldr	r2, [pc, #292]	@ (80022c0 <ibusFrameComplete+0x198>)
 800219a:	7912      	ldrb	r2, [r2, #4]
 800219c:	4413      	add	r3, r2
 800219e:	461a      	mov	r2, r3
 80021a0:	4b48      	ldr	r3, [pc, #288]	@ (80022c4 <ibusFrameComplete+0x19c>)
 80021a2:	605a      	str	r2, [r3, #4]
            ibusChannelData[2] = (ibus[ 7] << 8) + ibus[ 6];
 80021a4:	4b46      	ldr	r3, [pc, #280]	@ (80022c0 <ibusFrameComplete+0x198>)
 80021a6:	79db      	ldrb	r3, [r3, #7]
 80021a8:	021b      	lsls	r3, r3, #8
 80021aa:	4a45      	ldr	r2, [pc, #276]	@ (80022c0 <ibusFrameComplete+0x198>)
 80021ac:	7992      	ldrb	r2, [r2, #6]
 80021ae:	4413      	add	r3, r2
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b44      	ldr	r3, [pc, #272]	@ (80022c4 <ibusFrameComplete+0x19c>)
 80021b4:	609a      	str	r2, [r3, #8]
            ibusChannelData[3] = (ibus[ 9] << 8) + ibus[ 8];
 80021b6:	4b42      	ldr	r3, [pc, #264]	@ (80022c0 <ibusFrameComplete+0x198>)
 80021b8:	7a5b      	ldrb	r3, [r3, #9]
 80021ba:	021b      	lsls	r3, r3, #8
 80021bc:	4a40      	ldr	r2, [pc, #256]	@ (80022c0 <ibusFrameComplete+0x198>)
 80021be:	7a12      	ldrb	r2, [r2, #8]
 80021c0:	4413      	add	r3, r2
 80021c2:	461a      	mov	r2, r3
 80021c4:	4b3f      	ldr	r3, [pc, #252]	@ (80022c4 <ibusFrameComplete+0x19c>)
 80021c6:	60da      	str	r2, [r3, #12]
            ibusChannelData[4] = (ibus[11] << 8) + ibus[10];
 80021c8:	4b3d      	ldr	r3, [pc, #244]	@ (80022c0 <ibusFrameComplete+0x198>)
 80021ca:	7adb      	ldrb	r3, [r3, #11]
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	4a3c      	ldr	r2, [pc, #240]	@ (80022c0 <ibusFrameComplete+0x198>)
 80021d0:	7a92      	ldrb	r2, [r2, #10]
 80021d2:	4413      	add	r3, r2
 80021d4:	461a      	mov	r2, r3
 80021d6:	4b3b      	ldr	r3, [pc, #236]	@ (80022c4 <ibusFrameComplete+0x19c>)
 80021d8:	611a      	str	r2, [r3, #16]
            ibusChannelData[5] = (ibus[13] << 8) + ibus[12];
 80021da:	4b39      	ldr	r3, [pc, #228]	@ (80022c0 <ibusFrameComplete+0x198>)
 80021dc:	7b5b      	ldrb	r3, [r3, #13]
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	4a37      	ldr	r2, [pc, #220]	@ (80022c0 <ibusFrameComplete+0x198>)
 80021e2:	7b12      	ldrb	r2, [r2, #12]
 80021e4:	4413      	add	r3, r2
 80021e6:	461a      	mov	r2, r3
 80021e8:	4b36      	ldr	r3, [pc, #216]	@ (80022c4 <ibusFrameComplete+0x19c>)
 80021ea:	615a      	str	r2, [r3, #20]
            ibusChannelData[6] = (ibus[15] << 8) + ibus[14];
 80021ec:	4b34      	ldr	r3, [pc, #208]	@ (80022c0 <ibusFrameComplete+0x198>)
 80021ee:	7bdb      	ldrb	r3, [r3, #15]
 80021f0:	021b      	lsls	r3, r3, #8
 80021f2:	4a33      	ldr	r2, [pc, #204]	@ (80022c0 <ibusFrameComplete+0x198>)
 80021f4:	7b92      	ldrb	r2, [r2, #14]
 80021f6:	4413      	add	r3, r2
 80021f8:	461a      	mov	r2, r3
 80021fa:	4b32      	ldr	r3, [pc, #200]	@ (80022c4 <ibusFrameComplete+0x19c>)
 80021fc:	619a      	str	r2, [r3, #24]
            ibusChannelData[7] = (ibus[17] << 8) + ibus[16];
 80021fe:	4b30      	ldr	r3, [pc, #192]	@ (80022c0 <ibusFrameComplete+0x198>)
 8002200:	7c5b      	ldrb	r3, [r3, #17]
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	4a2e      	ldr	r2, [pc, #184]	@ (80022c0 <ibusFrameComplete+0x198>)
 8002206:	7c12      	ldrb	r2, [r2, #16]
 8002208:	4413      	add	r3, r2
 800220a:	461a      	mov	r2, r3
 800220c:	4b2d      	ldr	r3, [pc, #180]	@ (80022c4 <ibusFrameComplete+0x19c>)
 800220e:	61da      	str	r2, [r3, #28]
			ibusChannelData[8] = (ibus[19] << 8) + ibus[18];
 8002210:	4b2b      	ldr	r3, [pc, #172]	@ (80022c0 <ibusFrameComplete+0x198>)
 8002212:	7cdb      	ldrb	r3, [r3, #19]
 8002214:	021b      	lsls	r3, r3, #8
 8002216:	4a2a      	ldr	r2, [pc, #168]	@ (80022c0 <ibusFrameComplete+0x198>)
 8002218:	7c92      	ldrb	r2, [r2, #18]
 800221a:	4413      	add	r3, r2
 800221c:	461a      	mov	r2, r3
 800221e:	4b29      	ldr	r3, [pc, #164]	@ (80022c4 <ibusFrameComplete+0x19c>)
 8002220:	621a      	str	r2, [r3, #32]
            ibusChannelData[9] = (ibus[21] << 8) + ibus[20];
 8002222:	4b27      	ldr	r3, [pc, #156]	@ (80022c0 <ibusFrameComplete+0x198>)
 8002224:	7d5b      	ldrb	r3, [r3, #21]
 8002226:	021b      	lsls	r3, r3, #8
 8002228:	4a25      	ldr	r2, [pc, #148]	@ (80022c0 <ibusFrameComplete+0x198>)
 800222a:	7d12      	ldrb	r2, [r2, #20]
 800222c:	4413      	add	r3, r2
 800222e:	461a      	mov	r2, r3
 8002230:	4b24      	ldr	r3, [pc, #144]	@ (80022c4 <ibusFrameComplete+0x19c>)
 8002232:	625a      	str	r2, [r3, #36]	@ 0x24
            ibusChannelData[10] = (ibus[23] << 8) + ibus[22];
 8002234:	4b22      	ldr	r3, [pc, #136]	@ (80022c0 <ibusFrameComplete+0x198>)
 8002236:	7ddb      	ldrb	r3, [r3, #23]
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	4a21      	ldr	r2, [pc, #132]	@ (80022c0 <ibusFrameComplete+0x198>)
 800223c:	7d92      	ldrb	r2, [r2, #22]
 800223e:	4413      	add	r3, r2
 8002240:	461a      	mov	r2, r3
 8002242:	4b20      	ldr	r3, [pc, #128]	@ (80022c4 <ibusFrameComplete+0x19c>)
 8002244:	629a      	str	r2, [r3, #40]	@ 0x28
			ibusChannelData[11] = (ibus[25] << 8) + ibus[24];
 8002246:	4b1e      	ldr	r3, [pc, #120]	@ (80022c0 <ibusFrameComplete+0x198>)
 8002248:	7e5b      	ldrb	r3, [r3, #25]
 800224a:	021b      	lsls	r3, r3, #8
 800224c:	4a1c      	ldr	r2, [pc, #112]	@ (80022c0 <ibusFrameComplete+0x198>)
 800224e:	7e12      	ldrb	r2, [r2, #24]
 8002250:	4413      	add	r3, r2
 8002252:	461a      	mov	r2, r3
 8002254:	4b1b      	ldr	r3, [pc, #108]	@ (80022c4 <ibusFrameComplete+0x19c>)
 8002256:	62da      	str	r2, [r3, #44]	@ 0x2c
			ibusChannelData[12] = (ibus[27] << 8) + ibus[26];
 8002258:	4b19      	ldr	r3, [pc, #100]	@ (80022c0 <ibusFrameComplete+0x198>)
 800225a:	7edb      	ldrb	r3, [r3, #27]
 800225c:	021b      	lsls	r3, r3, #8
 800225e:	4a18      	ldr	r2, [pc, #96]	@ (80022c0 <ibusFrameComplete+0x198>)
 8002260:	7e92      	ldrb	r2, [r2, #26]
 8002262:	4413      	add	r3, r2
 8002264:	461a      	mov	r2, r3
 8002266:	4b17      	ldr	r3, [pc, #92]	@ (80022c4 <ibusFrameComplete+0x19c>)
 8002268:	631a      	str	r2, [r3, #48]	@ 0x30
			ibusChannelData[13] = (ibus[29] << 8) + ibus[28];
 800226a:	4b15      	ldr	r3, [pc, #84]	@ (80022c0 <ibusFrameComplete+0x198>)
 800226c:	7f5b      	ldrb	r3, [r3, #29]
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	4a13      	ldr	r2, [pc, #76]	@ (80022c0 <ibusFrameComplete+0x198>)
 8002272:	7f12      	ldrb	r2, [r2, #28]
 8002274:	4413      	add	r3, r2
 8002276:	461a      	mov	r2, r3
 8002278:	4b12      	ldr	r3, [pc, #72]	@ (80022c4 <ibusFrameComplete+0x19c>)
 800227a:	635a      	str	r2, [r3, #52]	@ 0x34
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 800227c:	2300      	movs	r3, #0
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	e010      	b.n	80022a4 <ibusFrameComplete+0x17c>
			    if(ibusChannelData[i] > 2100){
 8002282:	4a10      	ldr	r2, [pc, #64]	@ (80022c4 <ibusFrameComplete+0x19c>)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228a:	f640 0234 	movw	r2, #2100	@ 0x834
 800228e:	4293      	cmp	r3, r2
 8002290:	d905      	bls.n	800229e <ibusFrameComplete+0x176>
				    ibusChannelData[i] = 1000;
 8002292:	4a0c      	ldr	r2, [pc, #48]	@ (80022c4 <ibusFrameComplete+0x19c>)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800229a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	3301      	adds	r3, #1
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b0d      	cmp	r3, #13
 80022a8:	ddeb      	ble.n	8002282 <ibusFrameComplete+0x15a>
				}
			}
            return TRUE;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <ibusFrameComplete+0x188>
        }
    }
    return FALSE;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20000144 	.word	0x20000144
 80022c0:	20000180 	.word	0x20000180
 80022c4:	20000148 	.word	0x20000148

080022c8 <mpu6050Connection>:

/* Check mpu6050 connection
 * return 1 -> not connected
 * return 0 -> connected
 */ 
int8_t mpu6050Connection(){
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
    isConnected = HAL_I2C_IsDeviceReady(i2c,IMU_DEV_ADDRES, 3, 5);
 80022cc:	4b07      	ldr	r3, [pc, #28]	@ (80022ec <mpu6050Connection+0x24>)
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	2305      	movs	r3, #5
 80022d2:	2203      	movs	r2, #3
 80022d4:	21d0      	movs	r1, #208	@ 0xd0
 80022d6:	f007 fa21 	bl	800971c <HAL_I2C_IsDeviceReady>
 80022da:	4603      	mov	r3, r0
 80022dc:	b25a      	sxtb	r2, r3
 80022de:	4b04      	ldr	r3, [pc, #16]	@ (80022f0 <mpu6050Connection+0x28>)
 80022e0:	701a      	strb	r2, [r3, #0]
    return isConnected;
 80022e2:	4b03      	ldr	r3, [pc, #12]	@ (80022f0 <mpu6050Connection+0x28>)
 80022e4:	f993 3000 	ldrsb.w	r3, [r3]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	200001b0 	.word	0x200001b0
 80022f0:	200001b4 	.word	0x200001b4

080022f4 <mpu6050_init>:
}

/* configuration mpu6050*/


int8_t mpu6050_init(I2C_HandleTypeDef *hi2c){
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af02      	add	r7, sp, #8
 80022fa:	6078      	str	r0, [r7, #4]
	data[1] = (uint8_t)(ACC_2G<<3);
    SPI_write(&data,2);
	return 0;
#endif
#ifdef I2C
  i2c = hi2c;	
 80022fc:	4a25      	ldr	r2, [pc, #148]	@ (8002394 <mpu6050_init+0xa0>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6013      	str	r3, [r2, #0]
	int8_t k = mpu6050Connection();
 8002302:	f7ff ffe1 	bl	80022c8 <mpu6050Connection>
 8002306:	4603      	mov	r3, r0
 8002308:	73fb      	strb	r3, [r7, #15]
	if(!k){
 800230a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d13a      	bne.n	8002388 <mpu6050_init+0x94>
		uint8_t buffer[6];	
		buffer[0] = MPU_RA_PWR_MGMT_1; 
 8002312:	236b      	movs	r3, #107	@ 0x6b
 8002314:	723b      	strb	r3, [r7, #8]
		buffer[1] = RESET_REG;
 8002316:	2300      	movs	r3, #0
 8002318:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 800231a:	4b1e      	ldr	r3, [pc, #120]	@ (8002394 <mpu6050_init+0xa0>)
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	f107 0208 	add.w	r2, r7, #8
 8002322:	2301      	movs	r3, #1
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	2302      	movs	r3, #2
 8002328:	21d0      	movs	r1, #208	@ 0xd0
 800232a:	f006 fb2b 	bl	8008984 <HAL_I2C_Master_Transmit>
		
		//buffer[0] = CONFIGURATION;
		//buffer[1] = (HZ_5<<0);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);

		buffer[0] = GYRO_REG_CONFIG;
 800232e:	231b      	movs	r3, #27
 8002330:	723b      	strb	r3, [r7, #8]
		buffer[1] = (GYRO_1000dps<<3);
 8002332:	2310      	movs	r3, #16
 8002334:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8002336:	4b17      	ldr	r3, [pc, #92]	@ (8002394 <mpu6050_init+0xa0>)
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	f107 0208 	add.w	r2, r7, #8
 800233e:	2301      	movs	r3, #1
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	2302      	movs	r3, #2
 8002344:	21d0      	movs	r1, #208	@ 0xd0
 8002346:	f006 fb1d 	bl	8008984 <HAL_I2C_Master_Transmit>

		buffer[0] = ACC_REG_CONFIG;
 800234a:	231c      	movs	r3, #28
 800234c:	723b      	strb	r3, [r7, #8]
		buffer[1] = (ACC_16G<<3);
 800234e:	2318      	movs	r3, #24
 8002350:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8002352:	4b10      	ldr	r3, [pc, #64]	@ (8002394 <mpu6050_init+0xa0>)
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	f107 0208 	add.w	r2, r7, #8
 800235a:	2301      	movs	r3, #1
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	2302      	movs	r3, #2
 8002360:	21d0      	movs	r1, #208	@ 0xd0
 8002362:	f006 fb0f 	bl	8008984 <HAL_I2C_Master_Transmit>
		//buffer[1] &= ~(1<<5);
		//buffer[1] |= (1<<5);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
		
		// set aux i2c pass through mode 
		buffer[0] = INT_PIN_CFG;
 8002366:	2337      	movs	r3, #55	@ 0x37
 8002368:	723b      	strb	r3, [r7, #8]
		buffer[1] |= (1<<1);
 800236a:	7a7b      	ldrb	r3, [r7, #9]
 800236c:	f043 0302 	orr.w	r3, r3, #2
 8002370:	b2db      	uxtb	r3, r3
 8002372:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8002374:	4b07      	ldr	r3, [pc, #28]	@ (8002394 <mpu6050_init+0xa0>)
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	f107 0208 	add.w	r2, r7, #8
 800237c:	2301      	movs	r3, #1
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	2302      	movs	r3, #2
 8002382:	21d0      	movs	r1, #208	@ 0xd0
 8002384:	f006 fafe 	bl	8008984 <HAL_I2C_Master_Transmit>

	}
	return k;
 8002388:	f997 300f 	ldrsb.w	r3, [r7, #15]
#endif

}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	200001b0 	.word	0x200001b0

08002398 <mpu6050_gyro_get_raw>:
/* Gyro get raw data (Lbs/s)
 * x - rate
 * y - rate
 * z - rate   
 */
void mpu6050_gyro_get_raw(axis3_t *raw){
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af02      	add	r7, sp, #8
 800239e:	6078      	str	r0, [r7, #4]
	  uint8_t buffe[6];
	  buffe[0] = (uint8_t)GYRO_DATA_REG;
 80023a0:	2343      	movs	r3, #67	@ 0x43
 80023a2:	723b      	strb	r3, [r7, #8]

#ifdef I2C
	  HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 80023a4:	4b19      	ldr	r3, [pc, #100]	@ (800240c <mpu6050_gyro_get_raw+0x74>)
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	f107 0208 	add.w	r2, r7, #8
 80023ac:	2301      	movs	r3, #1
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2301      	movs	r3, #1
 80023b2:	21d0      	movs	r1, #208	@ 0xd0
 80023b4:	f006 fae6 	bl	8008984 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 80023b8:	4b14      	ldr	r3, [pc, #80]	@ (800240c <mpu6050_gyro_get_raw+0x74>)
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	f107 0208 	add.w	r2, r7, #8
 80023c0:	2301      	movs	r3, #1
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	2306      	movs	r3, #6
 80023c6:	21d0      	movs	r1, #208	@ 0xd0
 80023c8:	f006 fbda 	bl	8008b80 <HAL_I2C_Master_Receive>
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_RESET);
	  HAL_SPI_Transmit(&SPI_PORT,&buffe[0],1,1);
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
#endif
	  raw->x = (int16_t)buffe[0]<<8|buffe[1];
 80023cc:	7a3b      	ldrb	r3, [r7, #8]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	b21a      	sxth	r2, r3
 80023d2:	7a7b      	ldrb	r3, [r7, #9]
 80023d4:	b21b      	sxth	r3, r3
 80023d6:	4313      	orrs	r3, r2
 80023d8:	b21a      	sxth	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	801a      	strh	r2, [r3, #0]
	  raw->y = (int16_t)buffe[2]<<8|buffe[3];
 80023de:	7abb      	ldrb	r3, [r7, #10]
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	b21a      	sxth	r2, r3
 80023e4:	7afb      	ldrb	r3, [r7, #11]
 80023e6:	b21b      	sxth	r3, r3
 80023e8:	4313      	orrs	r3, r2
 80023ea:	b21a      	sxth	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	805a      	strh	r2, [r3, #2]
	  raw->z = (int16_t)buffe[4]<<8|buffe[5];
 80023f0:	7b3b      	ldrb	r3, [r7, #12]
 80023f2:	021b      	lsls	r3, r3, #8
 80023f4:	b21a      	sxth	r2, r3
 80023f6:	7b7b      	ldrb	r3, [r7, #13]
 80023f8:	b21b      	sxth	r3, r3
 80023fa:	4313      	orrs	r3, r2
 80023fc:	b21a      	sxth	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	809a      	strh	r2, [r3, #4]
	}
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200001b0 	.word	0x200001b0

08002410 <mpu6050_acc_get_raw>:
/* Acc get raw data
	*  x - axis
	*  y - axis
	*  z - axis   
	*/
void mpu6050_acc_get_raw(axis3_t *k){
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af02      	add	r7, sp, #8
 8002416:	6078      	str	r0, [r7, #4]
	axis3_t p_val =*k;
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	f107 0310 	add.w	r3, r7, #16
 800241e:	6810      	ldr	r0, [r2, #0]
 8002420:	6018      	str	r0, [r3, #0]
 8002422:	8892      	ldrh	r2, [r2, #4]
 8002424:	809a      	strh	r2, [r3, #4]
	uint8_t buffe[6];
	buffe[0] = (uint8_t)ACC_DATA_REG;
 8002426:	233b      	movs	r3, #59	@ 0x3b
 8002428:	723b      	strb	r3, [r7, #8]
#ifdef I2C
	HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 800242a:	4b19      	ldr	r3, [pc, #100]	@ (8002490 <mpu6050_acc_get_raw+0x80>)
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	f107 0208 	add.w	r2, r7, #8
 8002432:	2301      	movs	r3, #1
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	2301      	movs	r3, #1
 8002438:	21d0      	movs	r1, #208	@ 0xd0
 800243a:	f006 faa3 	bl	8008984 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 800243e:	4b14      	ldr	r3, [pc, #80]	@ (8002490 <mpu6050_acc_get_raw+0x80>)
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	f107 0208 	add.w	r2, r7, #8
 8002446:	2301      	movs	r3, #1
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	2306      	movs	r3, #6
 800244c:	21d0      	movs	r1, #208	@ 0xd0
 800244e:	f006 fb97 	bl	8008b80 <HAL_I2C_Master_Receive>
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
*/
      SPI_read(buffe[0],buffe,14);
#endif
	  k->x = (int16_t)buffe[0]<<8|buffe[1];
 8002452:	7a3b      	ldrb	r3, [r7, #8]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	b21a      	sxth	r2, r3
 8002458:	7a7b      	ldrb	r3, [r7, #9]
 800245a:	b21b      	sxth	r3, r3
 800245c:	4313      	orrs	r3, r2
 800245e:	b21a      	sxth	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	801a      	strh	r2, [r3, #0]
	  k->y = (int16_t)buffe[2]<<8|buffe[3];
 8002464:	7abb      	ldrb	r3, [r7, #10]
 8002466:	021b      	lsls	r3, r3, #8
 8002468:	b21a      	sxth	r2, r3
 800246a:	7afb      	ldrb	r3, [r7, #11]
 800246c:	b21b      	sxth	r3, r3
 800246e:	4313      	orrs	r3, r2
 8002470:	b21a      	sxth	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	805a      	strh	r2, [r3, #2]
	  k->z = (int16_t)buffe[4]<<8|buffe[5];
 8002476:	7b3b      	ldrb	r3, [r7, #12]
 8002478:	021b      	lsls	r3, r3, #8
 800247a:	b21a      	sxth	r2, r3
 800247c:	7b7b      	ldrb	r3, [r7, #13]
 800247e:	b21b      	sxth	r3, r3
 8002480:	4313      	orrs	r3, r2
 8002482:	b21a      	sxth	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	809a      	strh	r2, [r3, #4]
}
 8002488:	bf00      	nop
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	200001b0 	.word	0x200001b0

08002494 <qmc5883_init>:
#include "../Lib/axis.h"

const uint8_t qmc_addres = (0x0d<<1);
static I2C_HandleTypeDef *qmc_i2cport;

void qmc5883_init(I2C_HandleTypeDef *i2cport){
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af02      	add	r7, sp, #8
 800249a:	6078      	str	r0, [r7, #4]
	qmc_i2cport = i2cport;
 800249c:	4a12      	ldr	r2, [pc, #72]	@ (80024e8 <qmc5883_init+0x54>)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6013      	str	r3, [r2, #0]
    uint8_t buf[2];
    buf[0]=0x0b;
 80024a2:	230b      	movs	r3, #11
 80024a4:	733b      	strb	r3, [r7, #12]
    buf[1]=0X01;
 80024a6:	2301      	movs	r3, #1
 80024a8:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 80024aa:	4b0f      	ldr	r3, [pc, #60]	@ (80024e8 <qmc5883_init+0x54>)
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	231a      	movs	r3, #26
 80024b0:	4619      	mov	r1, r3
 80024b2:	f107 020c 	add.w	r2, r7, #12
 80024b6:	2301      	movs	r3, #1
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	2302      	movs	r3, #2
 80024bc:	f006 fa62 	bl	8008984 <HAL_I2C_Master_Transmit>
    buf[0]=0x09;
 80024c0:	2309      	movs	r3, #9
 80024c2:	733b      	strb	r3, [r7, #12]
    buf[1]=0X1D;
 80024c4:	231d      	movs	r3, #29
 80024c6:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 80024c8:	4b07      	ldr	r3, [pc, #28]	@ (80024e8 <qmc5883_init+0x54>)
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	231a      	movs	r3, #26
 80024ce:	4619      	mov	r1, r3
 80024d0:	f107 020c 	add.w	r2, r7, #12
 80024d4:	2301      	movs	r3, #1
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	2302      	movs	r3, #2
 80024da:	f006 fa53 	bl	8008984 <HAL_I2C_Master_Transmit>
}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	200001b8 	.word	0x200001b8

080024ec <qmc_get_raw>:

void qmc_get_raw(axis3_t *axis){
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af04      	add	r7, sp, #16
 80024f2:	6078      	str	r0, [r7, #4]
	  uint8_t buf[6]={0};
 80024f4:	2300      	movs	r3, #0
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	2300      	movs	r3, #0
 80024fa:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Mem_Read(qmc_i2cport,qmc_addres,0x00,1,buf,6,1);
 80024fc:	4b16      	ldr	r3, [pc, #88]	@ (8002558 <qmc_get_raw+0x6c>)
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	231a      	movs	r3, #26
 8002502:	4619      	mov	r1, r3
 8002504:	2301      	movs	r3, #1
 8002506:	9302      	str	r3, [sp, #8]
 8002508:	2306      	movs	r3, #6
 800250a:	9301      	str	r3, [sp, #4]
 800250c:	f107 0308 	add.w	r3, r7, #8
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	2301      	movs	r3, #1
 8002514:	2200      	movs	r2, #0
 8002516:	f006 fe99 	bl	800924c <HAL_I2C_Mem_Read>
	  axis->x=((int16_t)buf[1]<<8|buf[0]) ;
 800251a:	7a7b      	ldrb	r3, [r7, #9]
 800251c:	021b      	lsls	r3, r3, #8
 800251e:	b21a      	sxth	r2, r3
 8002520:	7a3b      	ldrb	r3, [r7, #8]
 8002522:	b21b      	sxth	r3, r3
 8002524:	4313      	orrs	r3, r2
 8002526:	b21a      	sxth	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	801a      	strh	r2, [r3, #0]
	  axis->y=((int16_t)buf[3]<<8|buf[2]);
 800252c:	7afb      	ldrb	r3, [r7, #11]
 800252e:	021b      	lsls	r3, r3, #8
 8002530:	b21a      	sxth	r2, r3
 8002532:	7abb      	ldrb	r3, [r7, #10]
 8002534:	b21b      	sxth	r3, r3
 8002536:	4313      	orrs	r3, r2
 8002538:	b21a      	sxth	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	805a      	strh	r2, [r3, #2]
	  axis->z=((int16_t)buf[5]<<8|buf[4]);
 800253e:	7b7b      	ldrb	r3, [r7, #13]
 8002540:	021b      	lsls	r3, r3, #8
 8002542:	b21a      	sxth	r2, r3
 8002544:	7b3b      	ldrb	r3, [r7, #12]
 8002546:	b21b      	sxth	r3, r3
 8002548:	4313      	orrs	r3, r2
 800254a:	b21a      	sxth	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	809a      	strh	r2, [r3, #4]
}
 8002550:	bf00      	nop
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	200001b8 	.word	0x200001b8

0800255c <baro_init>:
//#define MS5611

int8_t baro_calib;
int32_t alt_offset;

void baro_init(){
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
    baro_calib = FALSE;
 8002562:	4b0e      	ldr	r3, [pc, #56]	@ (800259c <baro_init+0x40>)
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]
    alt_offset = 0;
 8002568:	4b0d      	ldr	r3, [pc, #52]	@ (80025a0 <baro_init+0x44>)
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
#ifdef BMP280
    bmp280_init(&hi2c2);
 800256e:	480d      	ldr	r0, [pc, #52]	@ (80025a4 <baro_init+0x48>)
 8002570:	f7ff f900 	bl	8001774 <bmp280_init>
    for(int i=0; i< 100; i++){
 8002574:	2300      	movs	r3, #0
 8002576:	607b      	str	r3, [r7, #4]
 8002578:	e007      	b.n	800258a <baro_init+0x2e>
    	bmp280_read_fixed();
 800257a:	f7ff fc9d 	bl	8001eb8 <bmp280_read_fixed>
    	HAL_Delay(5);
 800257e:	2005      	movs	r0, #5
 8002580:	f005 f958 	bl	8007834 <HAL_Delay>
    for(int i=0; i< 100; i++){
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3301      	adds	r3, #1
 8002588:	607b      	str	r3, [r7, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b63      	cmp	r3, #99	@ 0x63
 800258e:	ddf4      	ble.n	800257a <baro_init+0x1e>
    }
#elif MS5611
    ms5611_init(&hi2c2);
#endif
}
 8002590:	bf00      	nop
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	200001bc 	.word	0x200001bc
 80025a0:	200001c0 	.word	0x200001c0
 80025a4:	200008d0 	.word	0x200008d0

080025a8 <baro_zero_calibrate>:


void baro_zero_calibrate(){
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
    int32_t altitude = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	607b      	str	r3, [r7, #4]
    static int16_t count = 0;
#ifdef BMP280
    altitude = bmp280_read_fixed();
 80025b2:	f7ff fc81 	bl	8001eb8 <bmp280_read_fixed>
 80025b6:	6078      	str	r0, [r7, #4]
#elif MS5611
    altitude = ms5611_read_fixed();
#endif
    alt_offset += altitude;
 80025b8:	4b13      	ldr	r3, [pc, #76]	@ (8002608 <baro_zero_calibrate+0x60>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4413      	add	r3, r2
 80025c0:	4a11      	ldr	r2, [pc, #68]	@ (8002608 <baro_zero_calibrate+0x60>)
 80025c2:	6013      	str	r3, [r2, #0]
    count ++;
 80025c4:	4b11      	ldr	r3, [pc, #68]	@ (800260c <baro_zero_calibrate+0x64>)
 80025c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3301      	adds	r3, #1
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	b21a      	sxth	r2, r3
 80025d2:	4b0e      	ldr	r3, [pc, #56]	@ (800260c <baro_zero_calibrate+0x64>)
 80025d4:	801a      	strh	r2, [r3, #0]
    if(count > 100){
 80025d6:	4b0d      	ldr	r3, [pc, #52]	@ (800260c <baro_zero_calibrate+0x64>)
 80025d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025dc:	2b64      	cmp	r3, #100	@ 0x64
 80025de:	dd0f      	ble.n	8002600 <baro_zero_calibrate+0x58>
        alt_offset /= 100;
 80025e0:	4b09      	ldr	r3, [pc, #36]	@ (8002608 <baro_zero_calibrate+0x60>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002610 <baro_zero_calibrate+0x68>)
 80025e6:	fb82 1203 	smull	r1, r2, r2, r3
 80025ea:	1152      	asrs	r2, r2, #5
 80025ec:	17db      	asrs	r3, r3, #31
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	4a05      	ldr	r2, [pc, #20]	@ (8002608 <baro_zero_calibrate+0x60>)
 80025f2:	6013      	str	r3, [r2, #0]
        baro_calib = TRUE;
 80025f4:	4b07      	ldr	r3, [pc, #28]	@ (8002614 <baro_zero_calibrate+0x6c>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	701a      	strb	r2, [r3, #0]
        count = 101;
 80025fa:	4b04      	ldr	r3, [pc, #16]	@ (800260c <baro_zero_calibrate+0x64>)
 80025fc:	2265      	movs	r2, #101	@ 0x65
 80025fe:	801a      	strh	r2, [r3, #0]
    }
}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	200001c0 	.word	0x200001c0
 800260c:	200001c4 	.word	0x200001c4
 8002610:	51eb851f 	.word	0x51eb851f
 8002614:	200001bc 	.word	0x200001bc

08002618 <is_baro_calibration>:

int8_t is_baro_calibration(){
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
      return baro_calib;
 800261c:	4b03      	ldr	r3, [pc, #12]	@ (800262c <is_baro_calibration+0x14>)
 800261e:	f993 3000 	ldrsb.w	r3, [r3]
}
 8002622:	4618      	mov	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	200001bc 	.word	0x200001bc

08002630 <baro_get_altitude>:

int32_t baro_get_altitude(){
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
     if(baro_calib){
 8002636:	4b09      	ldr	r3, [pc, #36]	@ (800265c <baro_get_altitude+0x2c>)
 8002638:	f993 3000 	ldrsb.w	r3, [r3]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <baro_get_altitude+0x22>
        int32_t alt = bmp280_read_fixed() - alt_offset;
 8002640:	f7ff fc3a 	bl	8001eb8 <bmp280_read_fixed>
 8002644:	4602      	mov	r2, r0
 8002646:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <baro_get_altitude+0x30>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	607b      	str	r3, [r7, #4]
        return alt;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	e000      	b.n	8002654 <baro_get_altitude+0x24>
     }
     return 0;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	200001bc 	.word	0x200001bc
 8002660:	200001c0 	.word	0x200001c0

08002664 <black_box_init>:
int32_t puts_state;

/*
 * init black box
 */
void black_box_init(){
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
	fs.file = &SDFile;
 8002668:	4b0e      	ldr	r3, [pc, #56]	@ (80026a4 <black_box_init+0x40>)
 800266a:	4a0f      	ldr	r2, [pc, #60]	@ (80026a8 <black_box_init+0x44>)
 800266c:	605a      	str	r2, [r3, #4]
    //SDFile.fs->id = 1;
    //SDFile.id = 1;
    mount_state = f_mount(&SDFatFS,"",1);
 800266e:	2201      	movs	r2, #1
 8002670:	490e      	ldr	r1, [pc, #56]	@ (80026ac <black_box_init+0x48>)
 8002672:	480f      	ldr	r0, [pc, #60]	@ (80026b0 <black_box_init+0x4c>)
 8002674:	f00e fa02 	bl	8010a7c <f_mount>
 8002678:	4603      	mov	r3, r0
 800267a:	461a      	mov	r2, r3
 800267c:	4b0d      	ldr	r3, [pc, #52]	@ (80026b4 <black_box_init+0x50>)
 800267e:	701a      	strb	r2, [r3, #0]
    open_state = f_open(&SDFile,"flight.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8002680:	2213      	movs	r2, #19
 8002682:	490d      	ldr	r1, [pc, #52]	@ (80026b8 <black_box_init+0x54>)
 8002684:	4808      	ldr	r0, [pc, #32]	@ (80026a8 <black_box_init+0x44>)
 8002686:	f00e fa61 	bl	8010b4c <f_open>
 800268a:	4603      	mov	r3, r0
 800268c:	461a      	mov	r2, r3
 800268e:	4b0b      	ldr	r3, [pc, #44]	@ (80026bc <black_box_init+0x58>)
 8002690:	701a      	strb	r2, [r3, #0]
    f_lseek (&SDFile,SDFile.fsize);
 8002692:	4b05      	ldr	r3, [pc, #20]	@ (80026a8 <black_box_init+0x44>)
 8002694:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002698:	4619      	mov	r1, r3
 800269a:	4803      	ldr	r0, [pc, #12]	@ (80026a8 <black_box_init+0x44>)
 800269c:	f00e ff9f 	bl	80115de <f_lseek>
}
 80026a0:	bf00      	nop
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	200001c8 	.word	0x200001c8
 80026a8:	200010ec 	.word	0x200010ec
 80026ac:	08015868 	.word	0x08015868
 80026b0:	20000eb8 	.word	0x20000eb8
 80026b4:	200003d4 	.word	0x200003d4
 80026b8:	0801586c 	.word	0x0801586c
 80026bc:	200003d5 	.word	0x200003d5

080026c0 <black_box_pack_int>:
    fs.buffer_index += index;
}



void black_box_pack_int(int val){
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08c      	sub	sp, #48	@ 0x30
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]

	fs.indexx=0;
 80026c8:	4b48      	ldr	r3, [pc, #288]	@ (80027ec <black_box_pack_int+0x12c>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
	int len_str;
	int val_ = val;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	617b      	str	r3, [r7, #20]
	char str_[11];
	memset(str_,0,11);
 80026d2:	f107 0308 	add.w	r3, r7, #8
 80026d6:	220b      	movs	r2, #11
 80026d8:	2100      	movs	r1, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f012 fac0 	bl	8014c60 <memset>
	if(val != 0){
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d02a      	beq.n	800273c <black_box_pack_int+0x7c>
		val = abs(val);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	bfb8      	it	lt
 80026ec:	425b      	neglt	r3, r3
 80026ee:	607b      	str	r3, [r7, #4]
		len_str = intToStr(val,str_,0);
 80026f0:	f107 0308 	add.w	r3, r7, #8
 80026f4:	2200      	movs	r2, #0
 80026f6:	4619      	mov	r1, r3
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f91b 	bl	8002934 <intToStr>
 80026fe:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if(val_ < 0){
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2b00      	cmp	r3, #0
 8002704:	da2a      	bge.n	800275c <black_box_pack_int+0x9c>
			for(int i = len_str; i > 0; i--){
 8002706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002708:	62bb      	str	r3, [r7, #40]	@ 0x28
 800270a:	e00e      	b.n	800272a <black_box_pack_int+0x6a>
				str_[i] = str_[i - 1];
 800270c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800270e:	3b01      	subs	r3, #1
 8002710:	3330      	adds	r3, #48	@ 0x30
 8002712:	443b      	add	r3, r7
 8002714:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 8002718:	f107 0208 	add.w	r2, r7, #8
 800271c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800271e:	4413      	add	r3, r2
 8002720:	460a      	mov	r2, r1
 8002722:	701a      	strb	r2, [r3, #0]
			for(int i = len_str; i > 0; i--){
 8002724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002726:	3b01      	subs	r3, #1
 8002728:	62bb      	str	r3, [r7, #40]	@ 0x28
 800272a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800272c:	2b00      	cmp	r3, #0
 800272e:	dced      	bgt.n	800270c <black_box_pack_int+0x4c>
			}
			len_str ++;
 8002730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002732:	3301      	adds	r3, #1
 8002734:	62fb      	str	r3, [r7, #44]	@ 0x2c
			str_[0] = '-';
 8002736:	232d      	movs	r3, #45	@ 0x2d
 8002738:	723b      	strb	r3, [r7, #8]
 800273a:	e00f      	b.n	800275c <black_box_pack_int+0x9c>
		}
	}
	else{
	   fs.buffer[fs.buffer_index] ='0';
 800273c:	4b2b      	ldr	r3, [pc, #172]	@ (80027ec <black_box_pack_int+0x12c>)
 800273e:	891b      	ldrh	r3, [r3, #8]
 8002740:	461a      	mov	r2, r3
 8002742:	4b2a      	ldr	r3, [pc, #168]	@ (80027ec <black_box_pack_int+0x12c>)
 8002744:	4413      	add	r3, r2
 8002746:	2230      	movs	r2, #48	@ 0x30
 8002748:	729a      	strb	r2, [r3, #10]
	   len_str = 1;
 800274a:	2301      	movs	r3, #1
 800274c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	   fs.buffer_index ++;
 800274e:	4b27      	ldr	r3, [pc, #156]	@ (80027ec <black_box_pack_int+0x12c>)
 8002750:	891b      	ldrh	r3, [r3, #8]
 8002752:	3301      	adds	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	4b25      	ldr	r3, [pc, #148]	@ (80027ec <black_box_pack_int+0x12c>)
 8002758:	811a      	strh	r2, [r3, #8]
 800275a:	e044      	b.n	80027e6 <black_box_pack_int+0x126>
		return;
	}
	// copy str to buffer
	int str_idx = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	627b      	str	r3, [r7, #36]	@ 0x24
	int index_flag;
	int max_index = fs.buffer_index + len_str;
 8002760:	4b22      	ldr	r3, [pc, #136]	@ (80027ec <black_box_pack_int+0x12c>)
 8002762:	891b      	ldrh	r3, [r3, #8]
 8002764:	461a      	mov	r2, r3
 8002766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002768:	4413      	add	r3, r2
 800276a:	61fb      	str	r3, [r7, #28]
	if(max_index <=  MAX_BUFFER_SIZE){
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002772:	dc08      	bgt.n	8002786 <black_box_pack_int+0xc6>
		max_index = fs.buffer_index + len_str;
 8002774:	4b1d      	ldr	r3, [pc, #116]	@ (80027ec <black_box_pack_int+0x12c>)
 8002776:	891b      	ldrh	r3, [r3, #8]
 8002778:	461a      	mov	r2, r3
 800277a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800277c:	4413      	add	r3, r2
 800277e:	61fb      	str	r3, [r7, #28]
		index_flag = 1;
 8002780:	2301      	movs	r3, #1
 8002782:	623b      	str	r3, [r7, #32]
 8002784:	e004      	b.n	8002790 <black_box_pack_int+0xd0>
	}
	else{
		max_index = MAX_BUFFER_SIZE;
 8002786:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800278a:	61fb      	str	r3, [r7, #28]
		index_flag = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	623b      	str	r3, [r7, #32]
	}
	for(int j = fs.buffer_index ; j < max_index; j++ ){
 8002790:	4b16      	ldr	r3, [pc, #88]	@ (80027ec <black_box_pack_int+0x12c>)
 8002792:	891b      	ldrh	r3, [r3, #8]
 8002794:	61bb      	str	r3, [r7, #24]
 8002796:	e00f      	b.n	80027b8 <black_box_pack_int+0xf8>
			fs.buffer[j] = str_[str_idx ++];
 8002798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	627a      	str	r2, [r7, #36]	@ 0x24
 800279e:	3330      	adds	r3, #48	@ 0x30
 80027a0:	443b      	add	r3, r7
 80027a2:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 80027a6:	4a11      	ldr	r2, [pc, #68]	@ (80027ec <black_box_pack_int+0x12c>)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	4413      	add	r3, r2
 80027ac:	330a      	adds	r3, #10
 80027ae:	460a      	mov	r2, r1
 80027b0:	701a      	strb	r2, [r3, #0]
	for(int j = fs.buffer_index ; j < max_index; j++ ){
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	3301      	adds	r3, #1
 80027b6:	61bb      	str	r3, [r7, #24]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	429a      	cmp	r2, r3
 80027be:	dbeb      	blt.n	8002798 <black_box_pack_int+0xd8>
	}
	
	if(index_flag){
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <black_box_pack_int+0x118>
		fs.buffer_index += len_str;
 80027c6:	4b09      	ldr	r3, [pc, #36]	@ (80027ec <black_box_pack_int+0x12c>)
 80027c8:	891a      	ldrh	r2, [r3, #8]
 80027ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	4b06      	ldr	r3, [pc, #24]	@ (80027ec <black_box_pack_int+0x12c>)
 80027d4:	811a      	strh	r2, [r3, #8]
 80027d6:	e006      	b.n	80027e6 <black_box_pack_int+0x126>
	}
	else{
		fs.buffer_index += MAX_BUFFER_SIZE;
 80027d8:	4b04      	ldr	r3, [pc, #16]	@ (80027ec <black_box_pack_int+0x12c>)
 80027da:	891b      	ldrh	r3, [r3, #8]
 80027dc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	4b02      	ldr	r3, [pc, #8]	@ (80027ec <black_box_pack_int+0x12c>)
 80027e4:	811a      	strh	r2, [r3, #8]
	}
}
 80027e6:	3730      	adds	r7, #48	@ 0x30
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	200001c8 	.word	0x200001c8

080027f0 <black_box_pack_str>:


void black_box_pack_str(char *c){
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]

    int i = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 80027fc:	e01c      	b.n	8002838 <black_box_pack_str+0x48>
        if((fs.buffer_index + i) > MAX_BUFFER_SIZE){
 80027fe:	4b17      	ldr	r3, [pc, #92]	@ (800285c <black_box_pack_str+0x6c>)
 8002800:	891b      	ldrh	r3, [r3, #8]
 8002802:	461a      	mov	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4413      	add	r3, r2
 8002808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800280c:	dd04      	ble.n	8002818 <black_box_pack_str+0x28>
                fs.buffer_index = MAX_BUFFER_SIZE;
 800280e:	4b13      	ldr	r3, [pc, #76]	@ (800285c <black_box_pack_str+0x6c>)
 8002810:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002814:	811a      	strh	r2, [r3, #8]
                return;
 8002816:	e01d      	b.n	8002854 <black_box_pack_str+0x64>
        }
        fs.buffer[fs.buffer_index + i] = c[i];
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	441a      	add	r2, r3
 800281e:	4b0f      	ldr	r3, [pc, #60]	@ (800285c <black_box_pack_str+0x6c>)
 8002820:	891b      	ldrh	r3, [r3, #8]
 8002822:	4619      	mov	r1, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	440b      	add	r3, r1
 8002828:	7811      	ldrb	r1, [r2, #0]
 800282a:	4a0c      	ldr	r2, [pc, #48]	@ (800285c <black_box_pack_str+0x6c>)
 800282c:	4413      	add	r3, r2
 800282e:	460a      	mov	r2, r1
 8002830:	729a      	strb	r2, [r3, #10]
        i ++;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	3301      	adds	r3, #1
 8002836:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	4413      	add	r3, r2
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1dc      	bne.n	80027fe <black_box_pack_str+0xe>
    }
    fs.buffer_index += i;
 8002844:	4b05      	ldr	r3, [pc, #20]	@ (800285c <black_box_pack_str+0x6c>)
 8002846:	891a      	ldrh	r2, [r3, #8]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	b29b      	uxth	r3, r3
 800284c:	4413      	add	r3, r2
 800284e:	b29a      	uxth	r2, r3
 8002850:	4b02      	ldr	r3, [pc, #8]	@ (800285c <black_box_pack_str+0x6c>)
 8002852:	811a      	strh	r2, [r3, #8]
}
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr
 800285c:	200001c8 	.word	0x200001c8

08002860 <black_box_pack_char>:

void black_box_pack_char(char c){
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
    fs.buffer[fs.buffer_index ] = c;
 800286a:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <black_box_pack_char+0x30>)
 800286c:	891b      	ldrh	r3, [r3, #8]
 800286e:	461a      	mov	r2, r3
 8002870:	4b07      	ldr	r3, [pc, #28]	@ (8002890 <black_box_pack_char+0x30>)
 8002872:	4413      	add	r3, r2
 8002874:	79fa      	ldrb	r2, [r7, #7]
 8002876:	729a      	strb	r2, [r3, #10]
    fs.buffer_index ++;
 8002878:	4b05      	ldr	r3, [pc, #20]	@ (8002890 <black_box_pack_char+0x30>)
 800287a:	891b      	ldrh	r3, [r3, #8]
 800287c:	3301      	adds	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	4b03      	ldr	r3, [pc, #12]	@ (8002890 <black_box_pack_char+0x30>)
 8002882:	811a      	strh	r2, [r3, #8]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	200001c8 	.word	0x200001c8

08002894 <black_box_load>:



void black_box_load()
 {
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
	  puts_state = f_puts(fs.buffer,fs.file);
 8002898:	4b0c      	ldr	r3, [pc, #48]	@ (80028cc <black_box_load+0x38>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4619      	mov	r1, r3
 800289e:	480c      	ldr	r0, [pc, #48]	@ (80028d0 <black_box_load+0x3c>)
 80028a0:	f00f f9a9 	bl	8011bf6 <f_puts>
 80028a4:	4603      	mov	r3, r0
 80028a6:	4a0b      	ldr	r2, [pc, #44]	@ (80028d4 <black_box_load+0x40>)
 80028a8:	6013      	str	r3, [r2, #0]
      f_sync(fs.file);
 80028aa:	4b08      	ldr	r3, [pc, #32]	@ (80028cc <black_box_load+0x38>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f00e fdcc 	bl	801144c <f_sync>
      memset(fs.buffer,0,MAX_BUFFER_SIZE);
 80028b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028b8:	2100      	movs	r1, #0
 80028ba:	4805      	ldr	r0, [pc, #20]	@ (80028d0 <black_box_load+0x3c>)
 80028bc:	f012 f9d0 	bl	8014c60 <memset>
      fs.buffer_index = 0;
 80028c0:	4b02      	ldr	r3, [pc, #8]	@ (80028cc <black_box_load+0x38>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	811a      	strh	r2, [r3, #8]
 }
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	200001c8 	.word	0x200001c8
 80028d0:	200001d2 	.word	0x200001d2
 80028d4:	200003d8 	.word	0x200003d8

080028d8 <reverse>:




static void reverse( char *str, int len)
{
 80028d8:	b480      	push	{r7}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	3b01      	subs	r3, #1
 80028ea:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80028ec:	e018      	b.n	8002920 <reverse+0x48>
        temp = str[i];
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	4413      	add	r3, r2
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	441a      	add	r2, r3
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	440b      	add	r3, r1
 8002904:	7812      	ldrb	r2, [r2, #0]
 8002906:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	4413      	add	r3, r2
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	701a      	strb	r2, [r3, #0]
        i++;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	3301      	adds	r3, #1
 8002918:	617b      	str	r3, [r7, #20]
        j--;
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	3b01      	subs	r3, #1
 800291e:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	429a      	cmp	r2, r3
 8002926:	dbe2      	blt.n	80028ee <reverse+0x16>
    }
}
 8002928:	bf00      	nop
 800292a:	bf00      	nop
 800292c:	371c      	adds	r7, #28
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <intToStr>:

 static int intToStr(int x,  char *str, int d)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
    while (x) {
 8002940:	e01f      	b.n	8002982 <intToStr+0x4e>
        str[fs.indexx++] = (x % 10) + '0';
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4b1e      	ldr	r3, [pc, #120]	@ (80029c0 <intToStr+0x8c>)
 8002946:	fb83 1302 	smull	r1, r3, r3, r2
 800294a:	1099      	asrs	r1, r3, #2
 800294c:	17d3      	asrs	r3, r2, #31
 800294e:	1ac9      	subs	r1, r1, r3
 8002950:	460b      	mov	r3, r1
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	1ad1      	subs	r1, r2, r3
 800295a:	b2ca      	uxtb	r2, r1
 800295c:	4b19      	ldr	r3, [pc, #100]	@ (80029c4 <intToStr+0x90>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	1c59      	adds	r1, r3, #1
 8002962:	4818      	ldr	r0, [pc, #96]	@ (80029c4 <intToStr+0x90>)
 8002964:	6001      	str	r1, [r0, #0]
 8002966:	4619      	mov	r1, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	440b      	add	r3, r1
 800296c:	3230      	adds	r2, #48	@ 0x30
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4a12      	ldr	r2, [pc, #72]	@ (80029c0 <intToStr+0x8c>)
 8002976:	fb82 1203 	smull	r1, r2, r2, r3
 800297a:	1092      	asrs	r2, r2, #2
 800297c:	17db      	asrs	r3, r3, #31
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	60fb      	str	r3, [r7, #12]
    while (x) {
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1dc      	bne.n	8002942 <intToStr+0xe>
    }

    while (fs.indexx < d)
 8002988:	e009      	b.n	800299e <intToStr+0x6a>
        str[fs.indexx++] = '0';
 800298a:	4b0e      	ldr	r3, [pc, #56]	@ (80029c4 <intToStr+0x90>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	490c      	ldr	r1, [pc, #48]	@ (80029c4 <intToStr+0x90>)
 8002992:	600a      	str	r2, [r1, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	4413      	add	r3, r2
 800299a:	2230      	movs	r2, #48	@ 0x30
 800299c:	701a      	strb	r2, [r3, #0]
    while (fs.indexx < d)
 800299e:	4b09      	ldr	r3, [pc, #36]	@ (80029c4 <intToStr+0x90>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	dcf0      	bgt.n	800298a <intToStr+0x56>
    reverse(str,fs.indexx);
 80029a8:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <intToStr+0x90>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4619      	mov	r1, r3
 80029ae:	68b8      	ldr	r0, [r7, #8]
 80029b0:	f7ff ff92 	bl	80028d8 <reverse>
    return fs.indexx;
 80029b4:	4b03      	ldr	r3, [pc, #12]	@ (80029c4 <intToStr+0x90>)
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	66666667 	.word	0x66666667
 80029c4:	200001c8 	.word	0x200001c8

080029c8 <compassInit>:
int8_t file_open;


/*  Init compass
 */
void compassInit(){
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  calibrate_value.scale_factor_axis[X] = 1.0f;
 80029cc:	4b17      	ldr	r3, [pc, #92]	@ (8002a2c <compassInit+0x64>)
 80029ce:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80029d2:	60da      	str	r2, [r3, #12]
  calibrate_value.scale_factor_axis[Y] = 1.0f;
 80029d4:	4b15      	ldr	r3, [pc, #84]	@ (8002a2c <compassInit+0x64>)
 80029d6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80029da:	611a      	str	r2, [r3, #16]
  calibrate_value.scale_factor_axis[Z] = 1.0f;
 80029dc:	4b13      	ldr	r3, [pc, #76]	@ (8002a2c <compassInit+0x64>)
 80029de:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80029e2:	615a      	str	r2, [r3, #20]

  calibrate_value.hard_iron_calibrate_value[X] = 0;
 80029e4:	4b11      	ldr	r3, [pc, #68]	@ (8002a2c <compassInit+0x64>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
  calibrate_value.hard_iron_calibrate_value[Y] = 0;
 80029ea:	4b10      	ldr	r3, [pc, #64]	@ (8002a2c <compassInit+0x64>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	605a      	str	r2, [r3, #4]
  calibrate_value.hard_iron_calibrate_value[Z] = 0;
 80029f0:	4b0e      	ldr	r3, [pc, #56]	@ (8002a2c <compassInit+0x64>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
	
  //file_open = black_box_create_file(&calib_file,file_name);
	 
 // epprom init
  AT24Cxx_init(&device_array, 0x00, &hi2c2);
 80029f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002a30 <compassInit+0x68>)
 80029f8:	2100      	movs	r1, #0
 80029fa:	480e      	ldr	r0, [pc, #56]	@ (8002a34 <compassInit+0x6c>)
 80029fc:	f003 fc72 	bl	80062e4 <AT24Cxx_init>
  AT24Cxx_add_dev(&device_array, 0x01, &hi2c2);
 8002a00:	4a0b      	ldr	r2, [pc, #44]	@ (8002a30 <compassInit+0x68>)
 8002a02:	2101      	movs	r1, #1
 8002a04:	480b      	ldr	r0, [pc, #44]	@ (8002a34 <compassInit+0x6c>)
 8002a06:	f003 fcad 	bl	8006364 <AT24Cxx_add_dev>

  // init sensor
#ifdef QMC5883
  qmc5883_init(&hi2c1);
 8002a0a:	480b      	ldr	r0, [pc, #44]	@ (8002a38 <compassInit+0x70>)
 8002a0c:	f7ff fd42 	bl	8002494 <qmc5883_init>
#else
  hmc5883_init(&hi2c2);
#endif
  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){
 8002a10:	2120      	movs	r1, #32
 8002a12:	480a      	ldr	r0, [pc, #40]	@ (8002a3c <compassInit+0x74>)
 8002a14:	f005 fe2a 	bl	800866c <HAL_GPIO_ReadPin>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <compassInit+0x5c>
      compass_calibrate();
 8002a1e:	f000 f8f3 	bl	8002c08 <compass_calibrate>
  }
  else{
      read_calibrate_file();
  }
}
 8002a22:	e001      	b.n	8002a28 <compassInit+0x60>
      read_calibrate_file();
 8002a24:	f000 f87c 	bl	8002b20 <read_calibrate_file>
}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000404 	.word	0x20000404
 8002a30:	200008d0 	.word	0x200008d0
 8002a34:	200003e0 	.word	0x200003e0
 8002a38:	2000087c 	.word	0x2000087c
 8002a3c:	40010c00 	.word	0x40010c00

08002a40 <compass_get>:

void compass_get(axis3_t *out){
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
	axis3_t as;
#ifdef QMC5883
         qmc_get_raw(&as);
 8002a48:	f107 0308 	add.w	r3, r7, #8
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fd4d 	bl	80024ec <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
    // calibrate ouput
	out->x = (as.x - calibrate_value.hard_iron_calibrate_value[X]);
 8002a52:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	4b30      	ldr	r3, [pc, #192]	@ (8002b1c <compass_get+0xdc>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	b21a      	sxth	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	801a      	strh	r2, [r3, #0]
	out->y = (as.y - calibrate_value.hard_iron_calibrate_value[Y]);
 8002a68:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	4b2b      	ldr	r3, [pc, #172]	@ (8002b1c <compass_get+0xdc>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	b21a      	sxth	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	805a      	strh	r2, [r3, #2]
	out->z = (as.z - calibrate_value.hard_iron_calibrate_value[Z]);
 8002a7e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	4b25      	ldr	r3, [pc, #148]	@ (8002b1c <compass_get+0xdc>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	b21a      	sxth	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	809a      	strh	r2, [r3, #4]

    out->x *= calibrate_value.scale_factor_axis[X];
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe f936 	bl	8000d0c <__aeabi_i2f>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b1c <compass_get+0xdc>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	f7fe f983 	bl	8000db4 <__aeabi_fmul>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fe fb5b 	bl	800116c <__aeabi_f2iz>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	b21a      	sxth	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	801a      	strh	r2, [r3, #0]
    out->y *= calibrate_value.scale_factor_axis[Y];
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fe f921 	bl	8000d0c <__aeabi_i2f>
 8002aca:	4602      	mov	r2, r0
 8002acc:	4b13      	ldr	r3, [pc, #76]	@ (8002b1c <compass_get+0xdc>)
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	f7fe f96e 	bl	8000db4 <__aeabi_fmul>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe fb46 	bl	800116c <__aeabi_f2iz>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	b21a      	sxth	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	805a      	strh	r2, [r3, #2]
    out->z *= calibrate_value.scale_factor_axis[Z];
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fe f90c 	bl	8000d0c <__aeabi_i2f>
 8002af4:	4602      	mov	r2, r0
 8002af6:	4b09      	ldr	r3, [pc, #36]	@ (8002b1c <compass_get+0xdc>)
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	4619      	mov	r1, r3
 8002afc:	4610      	mov	r0, r2
 8002afe:	f7fe f959 	bl	8000db4 <__aeabi_fmul>
 8002b02:	4603      	mov	r3, r0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fe fb31 	bl	800116c <__aeabi_f2iz>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	b21a      	sxth	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	809a      	strh	r2, [r3, #4]
}
 8002b12:	bf00      	nop
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000404 	.word	0x20000404

08002b20 <read_calibrate_file>:

/* read calibrate data from eprrom
 * 
 */

void read_calibrate_file(){
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
	int32_t sum_all = 0;
 8002b26:	2300      	movs	r3, #0
 8002b28:	607b      	str	r3, [r7, #4]
    AT24Cxx_read_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_value,0x0010,sizeof(cali_mag_t));
 8002b2a:	4b33      	ldr	r3, [pc, #204]	@ (8002bf8 <read_calibrate_file+0xd8>)
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	231c      	movs	r3, #28
 8002b30:	2210      	movs	r2, #16
 8002b32:	4932      	ldr	r1, [pc, #200]	@ (8002bfc <read_calibrate_file+0xdc>)
 8002b34:	f003 fd6f 	bl	8006616 <AT24Cxx_read_byte_buffer>
   	sum_all += calibrate_value.scale_factor_axis[X];
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7fe f8e7 	bl	8000d0c <__aeabi_i2f>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	4b2e      	ldr	r3, [pc, #184]	@ (8002bfc <read_calibrate_file+0xdc>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4619      	mov	r1, r3
 8002b46:	4610      	mov	r0, r2
 8002b48:	f7fe f82c 	bl	8000ba4 <__addsf3>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe fb0c 	bl	800116c <__aeabi_f2iz>
 8002b54:	4603      	mov	r3, r0
 8002b56:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Y];
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7fe f8d7 	bl	8000d0c <__aeabi_i2f>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	4b26      	ldr	r3, [pc, #152]	@ (8002bfc <read_calibrate_file+0xdc>)
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	4619      	mov	r1, r3
 8002b66:	4610      	mov	r0, r2
 8002b68:	f7fe f81c 	bl	8000ba4 <__addsf3>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe fafc 	bl	800116c <__aeabi_f2iz>
 8002b74:	4603      	mov	r3, r0
 8002b76:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Z];
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7fe f8c7 	bl	8000d0c <__aeabi_i2f>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	4b1e      	ldr	r3, [pc, #120]	@ (8002bfc <read_calibrate_file+0xdc>)
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	4619      	mov	r1, r3
 8002b86:	4610      	mov	r0, r2
 8002b88:	f7fe f80c 	bl	8000ba4 <__addsf3>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe faec 	bl	800116c <__aeabi_f2iz>
 8002b94:	4603      	mov	r3, r0
 8002b96:	607b      	str	r3, [r7, #4]

    sum_all += (int)calibrate_value.hard_iron_calibrate_value[X];
 8002b98:	4b18      	ldr	r3, [pc, #96]	@ (8002bfc <read_calibrate_file+0xdc>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Y];
 8002ba2:	4b16      	ldr	r3, [pc, #88]	@ (8002bfc <read_calibrate_file+0xdc>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Z];
 8002bac:	4b13      	ldr	r3, [pc, #76]	@ (8002bfc <read_calibrate_file+0xdc>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	607b      	str	r3, [r7, #4]

    if(ABS(sum_all - (int)calibrate_value.sum_all_value) > 40){
 8002bb6:	4b11      	ldr	r3, [pc, #68]	@ (8002bfc <read_calibrate_file+0xdc>)
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	bfb8      	it	lt
 8002bc6:	425b      	neglt	r3, r3
 8002bc8:	2b28      	cmp	r3, #40	@ 0x28
 8002bca:	dd11      	ble.n	8002bf0 <read_calibrate_file+0xd0>
      while(1){
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002bcc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002bd0:	480b      	ldr	r0, [pc, #44]	@ (8002c00 <read_calibrate_file+0xe0>)
 8002bd2:	f005 fd7a 	bl	80086ca <HAL_GPIO_TogglePin>
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002bd6:	2120      	movs	r1, #32
 8002bd8:	480a      	ldr	r0, [pc, #40]	@ (8002c04 <read_calibrate_file+0xe4>)
 8002bda:	f005 fd76 	bl	80086ca <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8002bde:	2110      	movs	r1, #16
 8002be0:	4808      	ldr	r0, [pc, #32]	@ (8002c04 <read_calibrate_file+0xe4>)
 8002be2:	f005 fd72 	bl	80086ca <HAL_GPIO_TogglePin>
       HAL_Delay(50); // 10 Hz loop
 8002be6:	2032      	movs	r0, #50	@ 0x32
 8002be8:	f004 fe24 	bl	8007834 <HAL_Delay>
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002bec:	bf00      	nop
 8002bee:	e7ed      	b.n	8002bcc <read_calibrate_file+0xac>
      }
    }
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	200003e0 	.word	0x200003e0
 8002bfc:	20000404 	.word	0x20000404
 8002c00:	40011000 	.word	0x40011000
 8002c04:	40010800 	.word	0x40010800

08002c08 <compass_calibrate>:


/* Calibrate function
 * write calibrate value to sd card
 */
static void compass_calibrate(){
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b095      	sub	sp, #84	@ 0x54
 8002c0c:	af00      	add	r7, sp, #0
    int16_t max_val[] = {-32767,-32767,-32767};
 8002c0e:	4a9f      	ldr	r2, [pc, #636]	@ (8002e8c <compass_calibrate+0x284>)
 8002c10:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c18:	6018      	str	r0, [r3, #0]
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	8019      	strh	r1, [r3, #0]
    int16_t min_val[] = {32767, 32767, 32767};
 8002c1e:	4a9c      	ldr	r2, [pc, #624]	@ (8002e90 <compass_calibrate+0x288>)
 8002c20:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c28:	6018      	str	r0, [r3, #0]
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	8019      	strh	r1, [r3, #0]
    uint8_t fist_data = TRUE;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    cali_mag_t calibrate_temp;
    ignore_data = 0;
 8002c34:	4b97      	ldr	r3, [pc, #604]	@ (8002e94 <compass_calibrate+0x28c>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	801a      	strh	r2, [r3, #0]
    int16_t last_axis[3];
    axis3_t as;

	while(!file_open){
 8002c3a:	e0b5      	b.n	8002da8 <compass_calibrate+0x1a0>
 // read data from sensor
#ifdef QMC5883
         qmc_get_raw(&as);
 8002c3c:	1d3b      	adds	r3, r7, #4
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fc54 	bl	80024ec <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
        if(fist_data){
 8002c44:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00c      	beq.n	8002c66 <compass_calibrate+0x5e>
          last_axis[X] = as.x;
 8002c4c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c50:	81bb      	strh	r3, [r7, #12]
          last_axis[Y] = as.y;
 8002c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c56:	81fb      	strh	r3, [r7, #14]
          last_axis[Z] = as.z;
 8002c58:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002c5c:	823b      	strh	r3, [r7, #16]
          fist_data = FALSE;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          continue;
 8002c64:	e0a0      	b.n	8002da8 <compass_calibrate+0x1a0>
        }
        int16_t delta_x_ = as.x -  last_axis[X];
 8002c66:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        int16_t delta_y_ = as.y -  last_axis[Y];
 8002c7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
        int16_t delta_z_ = as.z -  last_axis[Z];
 8002c8e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        // ignore wrong value and set to zero
        int16_t ckec = sqrt(sq(delta_x_) + sq(delta_y_) + sq(delta_z_));
 8002ca2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002ca6:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	@ 0x4a
 8002caa:	fb03 f202 	mul.w	r2, r3, r2
 8002cae:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 8002cb2:	f9b7 1048 	ldrsh.w	r1, [r7, #72]	@ 0x48
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	441a      	add	r2, r3
 8002cbc:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002cc0:	f9b7 1046 	ldrsh.w	r1, [r7, #70]	@ 0x46
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fd fc02 	bl	80004d4 <__aeabi_i2d>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	f012 f814 	bl	8014d04 <sqrt>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	f7fd ff10 	bl	8000b08 <__aeabi_d2iz>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
        if(ckec > max_change){
 8002cee:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002cf2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	dd09      	ble.n	8002d0e <compass_calibrate+0x106>
            fist_data = TRUE; 
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            ignore_data ++;
 8002d00:	4b64      	ldr	r3, [pc, #400]	@ (8002e94 <compass_calibrate+0x28c>)
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	3301      	adds	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	4b62      	ldr	r3, [pc, #392]	@ (8002e94 <compass_calibrate+0x28c>)
 8002d0a:	801a      	strh	r2, [r3, #0]
            continue;
 8002d0c:	e04c      	b.n	8002da8 <compass_calibrate+0x1a0>
        }
        last_axis[X] = as.x;
 8002d0e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002d12:	81bb      	strh	r3, [r7, #12]
        last_axis[Y] = as.y;
 8002d14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d18:	81fb      	strh	r3, [r7, #14]
        last_axis[Z] = as.z;
 8002d1a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002d1e:	823b      	strh	r3, [r7, #16]
        // get max value each axis
        if(as.x > max_val[X]) max_val[X] = as.x;
 8002d20:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002d24:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	dd02      	ble.n	8002d32 <compass_calibrate+0x12a>
 8002d2c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002d30:	873b      	strh	r3, [r7, #56]	@ 0x38
        if(as.y > max_val[Y]) max_val[Y] = as.y;
 8002d32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d36:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	dd02      	ble.n	8002d44 <compass_calibrate+0x13c>
 8002d3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d42:	877b      	strh	r3, [r7, #58]	@ 0x3a
        if(as.z > max_val[Z]) max_val[Z] = as.z;
 8002d44:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002d48:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	dd02      	ble.n	8002d56 <compass_calibrate+0x14e>
 8002d50:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002d54:	87bb      	strh	r3, [r7, #60]	@ 0x3c

        // min value
        if(as.x < min_val[X]) min_val[X] = as.x;
 8002d56:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002d5a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	da02      	bge.n	8002d68 <compass_calibrate+0x160>
 8002d62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002d66:	863b      	strh	r3, [r7, #48]	@ 0x30
        if(as.y < min_val[Y]) min_val[Y] = as.y;
 8002d68:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d6c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002d70:	429a      	cmp	r2, r3
 8002d72:	da02      	bge.n	8002d7a <compass_calibrate+0x172>
 8002d74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d78:	867b      	strh	r3, [r7, #50]	@ 0x32
        if(as.z < min_val[Z]) min_val[Z] = as.z;
 8002d7a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002d7e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8002d82:	429a      	cmp	r2, r3
 8002d84:	da02      	bge.n	8002d8c <compass_calibrate+0x184>
 8002d86:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002d8a:	86bb      	strh	r3, [r7, #52]	@ 0x34
        black_box_pack_str(&calib_file,"\n");
		
		black_box_load(&calib_file);
        black_box_sync(&calib_file);
        */
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8002d8c:	2110      	movs	r1, #16
 8002d8e:	4842      	ldr	r0, [pc, #264]	@ (8002e98 <compass_calibrate+0x290>)
 8002d90:	f005 fc9b 	bl	80086ca <HAL_GPIO_TogglePin>
        HAL_Delay(20); // 10 Hz loop
 8002d94:	2014      	movs	r0, #20
 8002d96:	f004 fd4d 	bl	8007834 <HAL_Delay>

       if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5) == 0){
 8002d9a:	2120      	movs	r1, #32
 8002d9c:	483f      	ldr	r0, [pc, #252]	@ (8002e9c <compass_calibrate+0x294>)
 8002d9e:	f005 fc65 	bl	800866c <HAL_GPIO_ReadPin>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d006      	beq.n	8002db6 <compass_calibrate+0x1ae>
	while(!file_open){
 8002da8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ea0 <compass_calibrate+0x298>)
 8002daa:	f993 3000 	ldrsb.w	r3, [r3]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f43f af44 	beq.w	8002c3c <compass_calibrate+0x34>
 8002db4:	e000      	b.n	8002db8 <compass_calibrate+0x1b0>
              break;
 8002db6:	bf00      	nop
          }
	  }

    // check all min value is negative sign
    if(min_val[X] > 0 || min_val[Y] > 0 || min_val[Z] > 0){
 8002db8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	dc02      	bgt.n	8002dc6 <compass_calibrate+0x1be>
 8002dc0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002dc4:	2b00      	cmp	r3, #0
          // error
    }
    // check all max value is positive sign
    if(max_val[X] < 0 || max_val[Y] < 0 || max_val[Z] < 0){
 8002dc6:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	db02      	blt.n	8002dd4 <compass_calibrate+0x1cc>
 8002dce:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8002dd2:	2b00      	cmp	r3, #0
          // error
    }
    // calibrate value for each axis
    calibrate_temp.hard_iron_calibrate_value[X] = (int)(max_val[X] + min_val[X])/2;
 8002dd4:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8002dd8:	461a      	mov	r2, r3
 8002dda:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002dde:	4413      	add	r3, r2
 8002de0:	0fda      	lsrs	r2, r3, #31
 8002de2:	4413      	add	r3, r2
 8002de4:	105b      	asrs	r3, r3, #1
 8002de6:	617b      	str	r3, [r7, #20]
    calibrate_temp.hard_iron_calibrate_value[Y] = (int)(max_val[Y] + min_val[Y])/2;
 8002de8:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8002dec:	461a      	mov	r2, r3
 8002dee:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002df2:	4413      	add	r3, r2
 8002df4:	0fda      	lsrs	r2, r3, #31
 8002df6:	4413      	add	r3, r2
 8002df8:	105b      	asrs	r3, r3, #1
 8002dfa:	61bb      	str	r3, [r7, #24]
    calibrate_temp.hard_iron_calibrate_value[Z] = (int)(max_val[Z] + min_val[Z])/2;
 8002dfc:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8002e00:	461a      	mov	r2, r3
 8002e02:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8002e06:	4413      	add	r3, r2
 8002e08:	0fda      	lsrs	r2, r3, #31
 8002e0a:	4413      	add	r3, r2
 8002e0c:	105b      	asrs	r3, r3, #1
 8002e0e:	61fb      	str	r3, [r7, #28]

    // calculate scale factor for each axis
    int16_t x_ = abs(max_val[X]) + abs(min_val[X]);
 8002e10:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	bfb8      	it	lt
 8002e18:	425b      	neglt	r3, r3
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bfb8      	it	lt
 8002e24:	425b      	neglt	r3, r3
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    int16_t y_ = abs(max_val[Y]) + abs(min_val[Y]);
 8002e30:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bfb8      	it	lt
 8002e38:	425b      	neglt	r3, r3
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	bfb8      	it	lt
 8002e44:	425b      	neglt	r3, r3
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	4413      	add	r3, r2
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    int16_t z_ = abs(max_val[Z]) + abs(min_val[Z]);
 8002e50:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	bfb8      	it	lt
 8002e58:	425b      	neglt	r3, r3
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bfb8      	it	lt
 8002e64:	425b      	neglt	r3, r3
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	4413      	add	r3, r2
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    // get largest value
    int16_t max_value = 0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    if(x_ > y_)
 8002e74:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 8002e78:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	dd11      	ble.n	8002ea4 <compass_calibrate+0x29c>
        max_value = x_;
 8002e80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002e84:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8002e88:	e010      	b.n	8002eac <compass_calibrate+0x2a4>
 8002e8a:	bf00      	nop
 8002e8c:	08015878 	.word	0x08015878
 8002e90:	08015880 	.word	0x08015880
 8002e94:	200003dc 	.word	0x200003dc
 8002e98:	40010800 	.word	0x40010800
 8002e9c:	40010c00 	.word	0x40010c00
 8002ea0:	20000420 	.word	0x20000420
    else
        max_value = y_;
 8002ea4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002ea8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    if(max_value < z_)
 8002eac:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	@ 0x4c
 8002eb0:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	da02      	bge.n	8002ebe <compass_calibrate+0x2b6>
        max_value = z_;
 8002eb8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002eba:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

    // caculate scale
    calibrate_temp.scale_factor_axis[X] = (float)x_/max_value;
 8002ebe:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fd ff22 	bl	8000d0c <__aeabi_i2f>
 8002ec8:	4604      	mov	r4, r0
 8002eca:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fd ff1c 	bl	8000d0c <__aeabi_i2f>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4620      	mov	r0, r4
 8002eda:	f7fe f81f 	bl	8000f1c <__aeabi_fdiv>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	623b      	str	r3, [r7, #32]
    calibrate_temp.scale_factor_axis[Y] = (float)y_/max_value;
 8002ee2:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd ff10 	bl	8000d0c <__aeabi_i2f>
 8002eec:	4604      	mov	r4, r0
 8002eee:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fd ff0a 	bl	8000d0c <__aeabi_i2f>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	4619      	mov	r1, r3
 8002efc:	4620      	mov	r0, r4
 8002efe:	f7fe f80d 	bl	8000f1c <__aeabi_fdiv>
 8002f02:	4603      	mov	r3, r0
 8002f04:	627b      	str	r3, [r7, #36]	@ 0x24
    calibrate_temp.scale_factor_axis[Z] = (float)z_/max_value;
 8002f06:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fd fefe 	bl	8000d0c <__aeabi_i2f>
 8002f10:	4604      	mov	r4, r0
 8002f12:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fd fef8 	bl	8000d0c <__aeabi_i2f>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4620      	mov	r0, r4
 8002f22:	f7fd fffb 	bl	8000f1c <__aeabi_fdiv>
 8002f26:	4603      	mov	r3, r0
 8002f28:	62bb      	str	r3, [r7, #40]	@ 0x28

    calibrate_temp.sum_all_value = 0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[X];
 8002f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fd feeb 	bl	8000d0c <__aeabi_i2f>
 8002f36:	4602      	mov	r2, r0
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	f7fd fe31 	bl	8000ba4 <__addsf3>
 8002f42:	4603      	mov	r3, r0
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fe f911 	bl	800116c <__aeabi_f2iz>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Y];
 8002f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fd fedb 	bl	8000d0c <__aeabi_i2f>
 8002f56:	4602      	mov	r2, r0
 8002f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	f7fd fe21 	bl	8000ba4 <__addsf3>
 8002f62:	4603      	mov	r3, r0
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fe f901 	bl	800116c <__aeabi_f2iz>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Z];
 8002f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fd fecb 	bl	8000d0c <__aeabi_i2f>
 8002f76:	4602      	mov	r2, r0
 8002f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	f7fd fe11 	bl	8000ba4 <__addsf3>
 8002f82:	4603      	mov	r3, r0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fe f8f1 	bl	800116c <__aeabi_f2iz>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[X];
 8002f8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	4413      	add	r3, r2
 8002f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Y];
 8002f96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Z];
 8002f9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // write data to eprrom
    AT24Cxx_write_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_temp, 0x0010, sizeof(cali_mag_t));
 8002fa6:	4b09      	ldr	r3, [pc, #36]	@ (8002fcc <compass_calibrate+0x3c4>)
 8002fa8:	6818      	ldr	r0, [r3, #0]
 8002faa:	f107 0114 	add.w	r1, r7, #20
 8002fae:	231c      	movs	r3, #28
 8002fb0:	2210      	movs	r2, #16
 8002fb2:	f003 fa2e 	bl	8006412 <AT24Cxx_write_byte_buffer>
  
   // black_box_load(&calib_file);
   // black_box_close(&calib_file);
	
	while(1){
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002fb6:	2120      	movs	r1, #32
 8002fb8:	4805      	ldr	r0, [pc, #20]	@ (8002fd0 <compass_calibrate+0x3c8>)
 8002fba:	f005 fb86 	bl	80086ca <HAL_GPIO_TogglePin>
      HAL_Delay(1000); // 10 Hz loop
 8002fbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002fc2:	f004 fc37 	bl	8007834 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002fc6:	bf00      	nop
 8002fc8:	e7f5      	b.n	8002fb6 <compass_calibrate+0x3ae>
 8002fca:	bf00      	nop
 8002fcc:	200003e0 	.word	0x200003e0
 8002fd0:	40010800 	.word	0x40010800

08002fd4 <gps_init>:

/*  
 * Init function 
 */
void gps_init(UART_HandleTypeDef *uart,uint32_t baudrate)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
    offset_alt = 0;
 8002fde:	4b2b      	ldr	r3, [pc, #172]	@ (800308c <gps_init+0xb8>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
    gps_alt_zero_calibrate = FALSE;
 8002fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8003090 <gps_init+0xbc>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
	_gpsUartPort = uart;
 8002fea:	4a2a      	ldr	r2, [pc, #168]	@ (8003094 <gps_init+0xc0>)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6013      	str	r3, [r2, #0]
    _gps.timer_ = millis();
 8002ff0:	4b29      	ldr	r3, [pc, #164]	@ (8003098 <gps_init+0xc4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ff8:	4b28      	ldr	r3, [pc, #160]	@ (800309c <gps_init+0xc8>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	4a28      	ldr	r2, [pc, #160]	@ (80030a0 <gps_init+0xcc>)
 8003000:	fba2 2303 	umull	r2, r3, r2, r3
 8003004:	099b      	lsrs	r3, r3, #6
 8003006:	4a27      	ldr	r2, [pc, #156]	@ (80030a4 <gps_init+0xd0>)
 8003008:	62d3      	str	r3, [r2, #44]	@ 0x2c
    // reset all viriables
    _payload_length = 0;
 800300a:	4b27      	ldr	r3, [pc, #156]	@ (80030a8 <gps_init+0xd4>)
 800300c:	2200      	movs	r2, #0
 800300e:	801a      	strh	r2, [r3, #0]
    _payload_counter = 0;
 8003010:	4b26      	ldr	r3, [pc, #152]	@ (80030ac <gps_init+0xd8>)
 8003012:	2200      	movs	r2, #0
 8003014:	801a      	strh	r2, [r3, #0]
    _msg_id = 0;
 8003016:	4b26      	ldr	r3, [pc, #152]	@ (80030b0 <gps_init+0xdc>)
 8003018:	2200      	movs	r2, #0
 800301a:	701a      	strb	r2, [r3, #0]
    // set baudrate
    _gpsUartPort->Init.BaudRate = baudrate;
 800301c:	4b1d      	ldr	r3, [pc, #116]	@ (8003094 <gps_init+0xc0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(_gpsUartPort);
 8003024:	4b1b      	ldr	r3, [pc, #108]	@ (8003094 <gps_init+0xc0>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f009 fd47 	bl	800cabc <HAL_UART_Init>
    HAL_Delay(2);
 800302e:	2002      	movs	r0, #2
 8003030:	f004 fc00 	bl	8007834 <HAL_Delay>
    /* disable NMEA */
    HAL_UART_Transmit(_gpsUartPort,disable_NMEA_MSG,sizeof(disable_NMEA_MSG),1000);
 8003034:	4b17      	ldr	r3, [pc, #92]	@ (8003094 <gps_init+0xc0>)
 8003036:	6818      	ldr	r0, [r3, #0]
 8003038:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800303c:	224d      	movs	r2, #77	@ 0x4d
 800303e:	491d      	ldr	r1, [pc, #116]	@ (80030b4 <gps_init+0xe0>)
 8003040:	f009 fd8c 	bl	800cb5c <HAL_UART_Transmit>
    HAL_Delay(2);
 8003044:	2002      	movs	r0, #2
 8003046:	f004 fbf5 	bl	8007834 <HAL_Delay>

    /* enable UBX */
    HAL_UART_Transmit(_gpsUartPort,enable_UBX_MSG,sizeof(enable_UBX_MSG),1000);
 800304a:	4b12      	ldr	r3, [pc, #72]	@ (8003094 <gps_init+0xc0>)
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003052:	222c      	movs	r2, #44	@ 0x2c
 8003054:	4918      	ldr	r1, [pc, #96]	@ (80030b8 <gps_init+0xe4>)
 8003056:	f009 fd81 	bl	800cb5c <HAL_UART_Transmit>
    HAL_Delay(2);
 800305a:	2002      	movs	r0, #2
 800305c:	f004 fbea 	bl	8007834 <HAL_Delay>

     /* set 10hz rate */
    HAL_UART_Transmit(_gpsUartPort,set_rate_10hz,sizeof(set_rate_10hz),1000);
 8003060:	4b0c      	ldr	r3, [pc, #48]	@ (8003094 <gps_init+0xc0>)
 8003062:	6818      	ldr	r0, [r3, #0]
 8003064:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003068:	220e      	movs	r2, #14
 800306a:	4914      	ldr	r1, [pc, #80]	@ (80030bc <gps_init+0xe8>)
 800306c:	f009 fd76 	bl	800cb5c <HAL_UART_Transmit>
    HAL_Delay(2);
 8003070:	2002      	movs	r0, #2
 8003072:	f004 fbdf 	bl	8007834 <HAL_Delay>
    
     /* enable SBAS */
    //HAL_UART_Transmit(_gpsUartPort,ubloxSbas,sizeof(ubloxSbas),1000);
    //HAL_Delay(2);
    // read gps using interrup
	HAL_UART_Receive_IT(_gpsUartPort, &_char,ONE_BYTE);
 8003076:	4b07      	ldr	r3, [pc, #28]	@ (8003094 <gps_init+0xc0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2201      	movs	r2, #1
 800307c:	4910      	ldr	r1, [pc, #64]	@ (80030c0 <gps_init+0xec>)
 800307e:	4618      	mov	r0, r3
 8003080:	f009 fdef 	bl	800cc62 <HAL_UART_Receive_IT>
}
 8003084:	bf00      	nop
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	20000474 	.word	0x20000474
 8003090:	20000478 	.word	0x20000478
 8003094:	20000460 	.word	0x20000460
 8003098:	200005dc 	.word	0x200005dc
 800309c:	200005e0 	.word	0x200005e0
 80030a0:	10624dd3 	.word	0x10624dd3
 80030a4:	20000424 	.word	0x20000424
 80030a8:	2000046e 	.word	0x2000046e
 80030ac:	20000470 	.word	0x20000470
 80030b0:	2000046c 	.word	0x2000046c
 80030b4:	080159f4 	.word	0x080159f4
 80030b8:	08015a44 	.word	0x08015a44
 80030bc:	08015a70 	.word	0x08015a70
 80030c0:	20000464 	.word	0x20000464

080030c4 <gps_uart_port>:

UART_HandleTypeDef *gps_uart_port(){
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
    return _gpsUartPort;
 80030c8:	4b02      	ldr	r3, [pc, #8]	@ (80030d4 <gps_uart_port+0x10>)
 80030ca:	681b      	ldr	r3, [r3, #0]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr
 80030d4:	20000460 	.word	0x20000460

080030d8 <gps_callback>:

}

uint32_t gps_interrupt_count;
void gps_callback()
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
   // parse data
   gps_interrupt_count++;
 80030dc:	4b09      	ldr	r3, [pc, #36]	@ (8003104 <gps_callback+0x2c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	3301      	adds	r3, #1
 80030e2:	4a08      	ldr	r2, [pc, #32]	@ (8003104 <gps_callback+0x2c>)
 80030e4:	6013      	str	r3, [r2, #0]
   newdata(_char);
 80030e6:	4b08      	ldr	r3, [pc, #32]	@ (8003108 <gps_callback+0x30>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 f8e8 	bl	80032c0 <newdata>
   HAL_UART_Receive_IT(_gpsUartPort, &_char,ONE_BYTE);
 80030f0:	4b06      	ldr	r3, [pc, #24]	@ (800310c <gps_callback+0x34>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2201      	movs	r2, #1
 80030f6:	4904      	ldr	r1, [pc, #16]	@ (8003108 <gps_callback+0x30>)
 80030f8:	4618      	mov	r0, r3
 80030fa:	f009 fdb2 	bl	800cc62 <HAL_UART_Receive_IT>
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000544 	.word	0x20000544
 8003108:	20000464 	.word	0x20000464
 800310c:	20000460 	.word	0x20000460

08003110 <parse_msg>:
        *ck_b += *ck_a;
        data++;
    }
}
*/
static uint8_t parse_msg(){
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
    static uint8_t _new_speed;
    //static uint8_t next_fix;
    static uint32_t lastPosUpdateTime;
    static uint8_t _new_position;
    static uint8_t gps_cali_count = 0;
    switch (_msg_id) {
 8003114:	4b5d      	ldr	r3, [pc, #372]	@ (800328c <parse_msg+0x17c>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b30      	cmp	r3, #48	@ 0x30
 800311a:	f000 809d 	beq.w	8003258 <parse_msg+0x148>
 800311e:	2b30      	cmp	r3, #48	@ 0x30
 8003120:	f300 8098 	bgt.w	8003254 <parse_msg+0x144>
 8003124:	2b12      	cmp	r3, #18
 8003126:	d071      	beq.n	800320c <parse_msg+0xfc>
 8003128:	2b12      	cmp	r3, #18
 800312a:	f300 8093 	bgt.w	8003254 <parse_msg+0x144>
 800312e:	2b02      	cmp	r3, #2
 8003130:	d002      	beq.n	8003138 <parse_msg+0x28>
 8003132:	2b03      	cmp	r3, #3
 8003134:	d064      	beq.n	8003200 <parse_msg+0xf0>
 8003136:	e08d      	b.n	8003254 <parse_msg+0x144>
        case MSG_POSLLH:
            _gps.position[LON] = _buffer.posllh.longitude;
 8003138:	4b55      	ldr	r3, [pc, #340]	@ (8003290 <parse_msg+0x180>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	4a55      	ldr	r2, [pc, #340]	@ (8003294 <parse_msg+0x184>)
 800313e:	6013      	str	r3, [r2, #0]
            _gps.position[LAT] = _buffer.posllh.latitude;
 8003140:	4b53      	ldr	r3, [pc, #332]	@ (8003290 <parse_msg+0x180>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	4a53      	ldr	r2, [pc, #332]	@ (8003294 <parse_msg+0x184>)
 8003146:	6053      	str	r3, [r2, #4]
            if(gps_alt_zero_calibrate == FALSE){
 8003148:	4b53      	ldr	r3, [pc, #332]	@ (8003298 <parse_msg+0x188>)
 800314a:	f993 3000 	ldrsb.w	r3, [r3]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d115      	bne.n	800317e <parse_msg+0x6e>
                if(gps_cali_count < 20){
 8003152:	4b52      	ldr	r3, [pc, #328]	@ (800329c <parse_msg+0x18c>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b13      	cmp	r3, #19
 8003158:	d80d      	bhi.n	8003176 <parse_msg+0x66>
                    offset_alt += _buffer.posllh.altitude_msl;
 800315a:	4b4d      	ldr	r3, [pc, #308]	@ (8003290 <parse_msg+0x180>)
 800315c:	691a      	ldr	r2, [r3, #16]
 800315e:	4b50      	ldr	r3, [pc, #320]	@ (80032a0 <parse_msg+0x190>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4413      	add	r3, r2
 8003164:	4a4e      	ldr	r2, [pc, #312]	@ (80032a0 <parse_msg+0x190>)
 8003166:	6013      	str	r3, [r2, #0]
                    gps_cali_count ++;
 8003168:	4b4c      	ldr	r3, [pc, #304]	@ (800329c <parse_msg+0x18c>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	3301      	adds	r3, #1
 800316e:	b2da      	uxtb	r2, r3
 8003170:	4b4a      	ldr	r3, [pc, #296]	@ (800329c <parse_msg+0x18c>)
 8003172:	701a      	strb	r2, [r3, #0]
 8003174:	e010      	b.n	8003198 <parse_msg+0x88>
                }
                else{
                    gps_alt_zero_calibrate = TRUE;
 8003176:	4b48      	ldr	r3, [pc, #288]	@ (8003298 <parse_msg+0x188>)
 8003178:	2201      	movs	r2, #1
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	e00c      	b.n	8003198 <parse_msg+0x88>
                }
            }
            else{
               _gps.altitude_mgl = _buffer.posllh.altitude_msl - offset_alt/20; 
 800317e:	4b44      	ldr	r3, [pc, #272]	@ (8003290 <parse_msg+0x180>)
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	4b47      	ldr	r3, [pc, #284]	@ (80032a0 <parse_msg+0x190>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4947      	ldr	r1, [pc, #284]	@ (80032a4 <parse_msg+0x194>)
 8003188:	fb81 0103 	smull	r0, r1, r1, r3
 800318c:	10c9      	asrs	r1, r1, #3
 800318e:	17db      	asrs	r3, r3, #31
 8003190:	1a5b      	subs	r3, r3, r1
 8003192:	4413      	add	r3, r2
 8003194:	4a3f      	ldr	r2, [pc, #252]	@ (8003294 <parse_msg+0x184>)
 8003196:	6353      	str	r3, [r2, #52]	@ 0x34
            }
            _gps.altitude_msl = _buffer.posllh.altitude_msl - offset_alt; 
 8003198:	4b3d      	ldr	r3, [pc, #244]	@ (8003290 <parse_msg+0x180>)
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	4b40      	ldr	r3, [pc, #256]	@ (80032a0 <parse_msg+0x190>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	4a3c      	ldr	r2, [pc, #240]	@ (8003294 <parse_msg+0x184>)
 80031a4:	6313      	str	r3, [r2, #48]	@ 0x30
            _gps.horizontalAccuracy = _buffer.posllh.horizontal_accuracy;
 80031a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003290 <parse_msg+0x180>)
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	4a3a      	ldr	r2, [pc, #232]	@ (8003294 <parse_msg+0x184>)
 80031ac:	6213      	str	r3, [r2, #32]
            _gps.VerticalAccuracy = _buffer.posllh.vertical_accuracy;
 80031ae:	4b38      	ldr	r3, [pc, #224]	@ (8003290 <parse_msg+0x180>)
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	4a38      	ldr	r2, [pc, #224]	@ (8003294 <parse_msg+0x184>)
 80031b4:	6253      	str	r3, [r2, #36]	@ 0x24
            /* time update position */
            if(lastPosUpdateTime == 0){
 80031b6:	4b3c      	ldr	r3, [pc, #240]	@ (80032a8 <parse_msg+0x198>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d04e      	beq.n	800325c <parse_msg+0x14c>
                break;
                lastPosUpdateTime = millis();
            }
            _gps.posUpdateTime = millis() - lastPosUpdateTime;
 80031be:	4b3b      	ldr	r3, [pc, #236]	@ (80032ac <parse_msg+0x19c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031c6:	4b3a      	ldr	r3, [pc, #232]	@ (80032b0 <parse_msg+0x1a0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4413      	add	r3, r2
 80031cc:	4a39      	ldr	r2, [pc, #228]	@ (80032b4 <parse_msg+0x1a4>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	099a      	lsrs	r2, r3, #6
 80031d4:	4b34      	ldr	r3, [pc, #208]	@ (80032a8 <parse_msg+0x198>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	4a2e      	ldr	r2, [pc, #184]	@ (8003294 <parse_msg+0x184>)
 80031dc:	6293      	str	r3, [r2, #40]	@ 0x28
            lastPosUpdateTime = millis();
 80031de:	4b33      	ldr	r3, [pc, #204]	@ (80032ac <parse_msg+0x19c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031e6:	4b32      	ldr	r3, [pc, #200]	@ (80032b0 <parse_msg+0x1a0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4413      	add	r3, r2
 80031ec:	4a31      	ldr	r2, [pc, #196]	@ (80032b4 <parse_msg+0x1a4>)
 80031ee:	fba2 2303 	umull	r2, r3, r2, r3
 80031f2:	099b      	lsrs	r3, r3, #6
 80031f4:	4a2c      	ldr	r2, [pc, #176]	@ (80032a8 <parse_msg+0x198>)
 80031f6:	6013      	str	r3, [r2, #0]
            /* flag set */
            _new_position = TRUE;
 80031f8:	4b2f      	ldr	r3, [pc, #188]	@ (80032b8 <parse_msg+0x1a8>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	701a      	strb	r2, [r3, #0]
            break;
 80031fe:	e02e      	b.n	800325e <parse_msg+0x14e>
        case MSG_STATUS:
            //next_fix = (_buffer.status.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.status.fix_type == FIX_3D);
            //if (!next_fix)
            //    _gps.fix = FALSE;
            _gps.fix = _buffer.status.fix_type;
 8003200:	4b23      	ldr	r3, [pc, #140]	@ (8003290 <parse_msg+0x180>)
 8003202:	791a      	ldrb	r2, [r3, #4]
 8003204:	4b23      	ldr	r3, [pc, #140]	@ (8003294 <parse_msg+0x184>)
 8003206:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
            break;
 800320a:	e028      	b.n	800325e <parse_msg+0x14e>
            _gps.fix = _buffer.solution.fix_type; --------------------------------------------------------------------------------------
            _gps.numSat = _buffer.solution.satellites; -------------------------------------------------------------------------------------
            break;
        */
        case MSG_VELNED:
            _gps.velocity[LAT] = _buffer.velned.ned_north;
 800320c:	4b20      	ldr	r3, [pc, #128]	@ (8003290 <parse_msg+0x180>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	4a20      	ldr	r2, [pc, #128]	@ (8003294 <parse_msg+0x184>)
 8003212:	60d3      	str	r3, [r2, #12]
            _gps.velocity[LON] = _buffer.velned.ned_east;
 8003214:	4b1e      	ldr	r3, [pc, #120]	@ (8003290 <parse_msg+0x180>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	4a1e      	ldr	r2, [pc, #120]	@ (8003294 <parse_msg+0x184>)
 800321a:	6093      	str	r3, [r2, #8]
            _gps.velocity[DOWN] = _buffer.velned.ned_down;
 800321c:	4b1c      	ldr	r3, [pc, #112]	@ (8003290 <parse_msg+0x180>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	4a1c      	ldr	r2, [pc, #112]	@ (8003294 <parse_msg+0x184>)
 8003222:	6113      	str	r3, [r2, #16]
            _gps.Gspeed = _buffer.velned.speed_2d;
 8003224:	4b1a      	ldr	r3, [pc, #104]	@ (8003290 <parse_msg+0x180>)
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	461a      	mov	r2, r3
 800322a:	4b1a      	ldr	r3, [pc, #104]	@ (8003294 <parse_msg+0x184>)
 800322c:	615a      	str	r2, [r3, #20]
            _gps.ground_course = _buffer.velned.heading_2d;
 800322e:	4b18      	ldr	r3, [pc, #96]	@ (8003290 <parse_msg+0x180>)
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	b29a      	uxth	r2, r3
 8003234:	4b17      	ldr	r3, [pc, #92]	@ (8003294 <parse_msg+0x184>)
 8003236:	871a      	strh	r2, [r3, #56]	@ 0x38
            _gps.speedAccuracy = _buffer.velned.speed_accuracy;
 8003238:	4b15      	ldr	r3, [pc, #84]	@ (8003290 <parse_msg+0x180>)
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	461a      	mov	r2, r3
 800323e:	4b15      	ldr	r3, [pc, #84]	@ (8003294 <parse_msg+0x184>)
 8003240:	619a      	str	r2, [r3, #24]
            _gps.headingAccuracy = _buffer.velned.heading_accuracy;
 8003242:	4b13      	ldr	r3, [pc, #76]	@ (8003290 <parse_msg+0x180>)
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	461a      	mov	r2, r3
 8003248:	4b12      	ldr	r3, [pc, #72]	@ (8003294 <parse_msg+0x184>)
 800324a:	61da      	str	r2, [r3, #28]
            _new_speed = TRUE;
 800324c:	4b1b      	ldr	r3, [pc, #108]	@ (80032bc <parse_msg+0x1ac>)
 800324e:	2201      	movs	r2, #1
 8003250:	701a      	strb	r2, [r3, #0]
            break;
 8003252:	e004      	b.n	800325e <parse_msg+0x14e>
            svinfo_rate[0] = svinfo_rate[1];
            svinfo_rate[1] = millis();
            */
            break;
        default:
            return FALSE;
 8003254:	2300      	movs	r3, #0
 8003256:	e014      	b.n	8003282 <parse_msg+0x172>
            break;
 8003258:	bf00      	nop
 800325a:	e000      	b.n	800325e <parse_msg+0x14e>
                break;
 800325c:	bf00      	nop
    }
    if (_new_position && _new_speed) {
 800325e:	4b16      	ldr	r3, [pc, #88]	@ (80032b8 <parse_msg+0x1a8>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00c      	beq.n	8003280 <parse_msg+0x170>
 8003266:	4b15      	ldr	r3, [pc, #84]	@ (80032bc <parse_msg+0x1ac>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d008      	beq.n	8003280 <parse_msg+0x170>
        _new_speed = _new_position = FALSE;
 800326e:	4b12      	ldr	r3, [pc, #72]	@ (80032b8 <parse_msg+0x1a8>)
 8003270:	2200      	movs	r2, #0
 8003272:	701a      	strb	r2, [r3, #0]
 8003274:	4b10      	ldr	r3, [pc, #64]	@ (80032b8 <parse_msg+0x1a8>)
 8003276:	781a      	ldrb	r2, [r3, #0]
 8003278:	4b10      	ldr	r3, [pc, #64]	@ (80032bc <parse_msg+0x1ac>)
 800327a:	701a      	strb	r2, [r3, #0]
        return TRUE;
 800327c:	2301      	movs	r3, #1
 800327e:	e000      	b.n	8003282 <parse_msg+0x172>
    }
    return FALSE;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	2000046c 	.word	0x2000046c
 8003290:	2000047c 	.word	0x2000047c
 8003294:	20000424 	.word	0x20000424
 8003298:	20000478 	.word	0x20000478
 800329c:	20000548 	.word	0x20000548
 80032a0:	20000474 	.word	0x20000474
 80032a4:	66666667 	.word	0x66666667
 80032a8:	2000054c 	.word	0x2000054c
 80032ac:	200005dc 	.word	0x200005dc
 80032b0:	200005e0 	.word	0x200005e0
 80032b4:	10624dd3 	.word	0x10624dd3
 80032b8:	20000550 	.word	0x20000550
 80032bc:	20000551 	.word	0x20000551

080032c0 <newdata>:

int parse_ok;
static uint8_t newdata(uint8_t data){
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	71fb      	strb	r3, [r7, #7]
    uint8_t parsed = FALSE;
 80032ca:	2300      	movs	r3, #0
 80032cc:	73fb      	strb	r3, [r7, #15]
    static uint8_t _ck_a;
    static uint8_t _ck_b;
    static uint8_t _step = 0;
    static uint32_t current_time_ms = 0;
    switch (_step) {
 80032ce:	4b85      	ldr	r3, [pc, #532]	@ (80034e4 <newdata+0x224>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	f200 8100 	bhi.w	80034d8 <newdata+0x218>
 80032d8:	a201      	add	r2, pc, #4	@ (adr r2, 80032e0 <newdata+0x20>)
 80032da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032de:	bf00      	nop
 80032e0:	08003305 	.word	0x08003305
 80032e4:	0800331b 	.word	0x0800331b
 80032e8:	0800332f 	.word	0x0800332f
 80032ec:	0800334b 	.word	0x0800334b
 80032f0:	0800337d 	.word	0x0800337d
 80032f4:	080033b1 	.word	0x080033b1
 80032f8:	0800340b 	.word	0x0800340b
 80032fc:	08003463 	.word	0x08003463
 8003300:	08003481 	.word	0x08003481
        case 0: // Sync char 1 (0xB5)
            if (PREAMBLE1 == data)
 8003304:	79fb      	ldrb	r3, [r7, #7]
 8003306:	2bb5      	cmp	r3, #181	@ 0xb5
 8003308:	f040 80df 	bne.w	80034ca <newdata+0x20a>
                _step++;
 800330c:	4b75      	ldr	r3, [pc, #468]	@ (80034e4 <newdata+0x224>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	3301      	adds	r3, #1
 8003312:	b2da      	uxtb	r2, r3
 8003314:	4b73      	ldr	r3, [pc, #460]	@ (80034e4 <newdata+0x224>)
 8003316:	701a      	strb	r2, [r3, #0]
            break;
 8003318:	e0d7      	b.n	80034ca <newdata+0x20a>
        case 1: // Sync char 2 (0x62)
            if (PREAMBLE2 == data) {
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	2b62      	cmp	r3, #98	@ 0x62
 800331e:	d106      	bne.n	800332e <newdata+0x6e>
                _step++;
 8003320:	4b70      	ldr	r3, [pc, #448]	@ (80034e4 <newdata+0x224>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	3301      	adds	r3, #1
 8003326:	b2da      	uxtb	r2, r3
 8003328:	4b6e      	ldr	r3, [pc, #440]	@ (80034e4 <newdata+0x224>)
 800332a:	701a      	strb	r2, [r3, #0]
                break;
 800332c:	e0d4      	b.n	80034d8 <newdata+0x218>
            }
        case 2: // Class
            _step++;
 800332e:	4b6d      	ldr	r3, [pc, #436]	@ (80034e4 <newdata+0x224>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	3301      	adds	r3, #1
 8003334:	b2da      	uxtb	r2, r3
 8003336:	4b6b      	ldr	r3, [pc, #428]	@ (80034e4 <newdata+0x224>)
 8003338:	701a      	strb	r2, [r3, #0]
            _ck_b = _ck_a = data;  
 800333a:	4a6b      	ldr	r2, [pc, #428]	@ (80034e8 <newdata+0x228>)
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	7013      	strb	r3, [r2, #0]
 8003340:	4b69      	ldr	r3, [pc, #420]	@ (80034e8 <newdata+0x228>)
 8003342:	781a      	ldrb	r2, [r3, #0]
 8003344:	4b69      	ldr	r3, [pc, #420]	@ (80034ec <newdata+0x22c>)
 8003346:	701a      	strb	r2, [r3, #0]
            break;
 8003348:	e0c6      	b.n	80034d8 <newdata+0x218>
        case 3: // ID
            _step++;
 800334a:	4b66      	ldr	r3, [pc, #408]	@ (80034e4 <newdata+0x224>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	3301      	adds	r3, #1
 8003350:	b2da      	uxtb	r2, r3
 8003352:	4b64      	ldr	r3, [pc, #400]	@ (80034e4 <newdata+0x224>)
 8003354:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 8003356:	4b64      	ldr	r3, [pc, #400]	@ (80034e8 <newdata+0x228>)
 8003358:	781a      	ldrb	r2, [r3, #0]
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	4413      	add	r3, r2
 800335e:	b2da      	uxtb	r2, r3
 8003360:	4b61      	ldr	r3, [pc, #388]	@ (80034e8 <newdata+0x228>)
 8003362:	701a      	strb	r2, [r3, #0]
 8003364:	4b60      	ldr	r3, [pc, #384]	@ (80034e8 <newdata+0x228>)
 8003366:	781a      	ldrb	r2, [r3, #0]
 8003368:	4b60      	ldr	r3, [pc, #384]	@ (80034ec <newdata+0x22c>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	4413      	add	r3, r2
 800336e:	b2da      	uxtb	r2, r3
 8003370:	4b5e      	ldr	r3, [pc, #376]	@ (80034ec <newdata+0x22c>)
 8003372:	701a      	strb	r2, [r3, #0]
            _msg_id = data;
 8003374:	4a5e      	ldr	r2, [pc, #376]	@ (80034f0 <newdata+0x230>)
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	7013      	strb	r3, [r2, #0]
            break;
 800337a:	e0ad      	b.n	80034d8 <newdata+0x218>
        case 4: 
            _step++;
 800337c:	4b59      	ldr	r3, [pc, #356]	@ (80034e4 <newdata+0x224>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	3301      	adds	r3, #1
 8003382:	b2da      	uxtb	r2, r3
 8003384:	4b57      	ldr	r3, [pc, #348]	@ (80034e4 <newdata+0x224>)
 8003386:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 8003388:	4b57      	ldr	r3, [pc, #348]	@ (80034e8 <newdata+0x228>)
 800338a:	781a      	ldrb	r2, [r3, #0]
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	4413      	add	r3, r2
 8003390:	b2da      	uxtb	r2, r3
 8003392:	4b55      	ldr	r3, [pc, #340]	@ (80034e8 <newdata+0x228>)
 8003394:	701a      	strb	r2, [r3, #0]
 8003396:	4b54      	ldr	r3, [pc, #336]	@ (80034e8 <newdata+0x228>)
 8003398:	781a      	ldrb	r2, [r3, #0]
 800339a:	4b54      	ldr	r3, [pc, #336]	@ (80034ec <newdata+0x22c>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	4413      	add	r3, r2
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	4b52      	ldr	r3, [pc, #328]	@ (80034ec <newdata+0x22c>)
 80033a4:	701a      	strb	r2, [r3, #0]
            _payload_length = data; 
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	4b52      	ldr	r3, [pc, #328]	@ (80034f4 <newdata+0x234>)
 80033ac:	801a      	strh	r2, [r3, #0]
            break;
 80033ae:	e093      	b.n	80034d8 <newdata+0x218>
        case 5: 
            _step++;
 80033b0:	4b4c      	ldr	r3, [pc, #304]	@ (80034e4 <newdata+0x224>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	3301      	adds	r3, #1
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	4b4a      	ldr	r3, [pc, #296]	@ (80034e4 <newdata+0x224>)
 80033ba:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);      
 80033bc:	4b4a      	ldr	r3, [pc, #296]	@ (80034e8 <newdata+0x228>)
 80033be:	781a      	ldrb	r2, [r3, #0]
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	4413      	add	r3, r2
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	4b48      	ldr	r3, [pc, #288]	@ (80034e8 <newdata+0x228>)
 80033c8:	701a      	strb	r2, [r3, #0]
 80033ca:	4b47      	ldr	r3, [pc, #284]	@ (80034e8 <newdata+0x228>)
 80033cc:	781a      	ldrb	r2, [r3, #0]
 80033ce:	4b47      	ldr	r3, [pc, #284]	@ (80034ec <newdata+0x22c>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	4413      	add	r3, r2
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	4b45      	ldr	r3, [pc, #276]	@ (80034ec <newdata+0x22c>)
 80033d8:	701a      	strb	r2, [r3, #0]
            _payload_length += (uint16_t)(data << 8);
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	4b44      	ldr	r3, [pc, #272]	@ (80034f4 <newdata+0x234>)
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	4413      	add	r3, r2
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	4b42      	ldr	r3, [pc, #264]	@ (80034f4 <newdata+0x234>)
 80033ec:	801a      	strh	r2, [r3, #0]
            if (_payload_length > UBLOX_BUFFER_SIZE) {
 80033ee:	4b41      	ldr	r3, [pc, #260]	@ (80034f4 <newdata+0x234>)
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	2bc8      	cmp	r3, #200	@ 0xc8
 80033f4:	d905      	bls.n	8003402 <newdata+0x142>
                _payload_length = 0;
 80033f6:	4b3f      	ldr	r3, [pc, #252]	@ (80034f4 <newdata+0x234>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	801a      	strh	r2, [r3, #0]
                _step = 0;
 80033fc:	4b39      	ldr	r3, [pc, #228]	@ (80034e4 <newdata+0x224>)
 80033fe:	2200      	movs	r2, #0
 8003400:	701a      	strb	r2, [r3, #0]
            }
            _payload_counter = 0;   
 8003402:	4b3d      	ldr	r3, [pc, #244]	@ (80034f8 <newdata+0x238>)
 8003404:	2200      	movs	r2, #0
 8003406:	801a      	strh	r2, [r3, #0]
            break;
 8003408:	e066      	b.n	80034d8 <newdata+0x218>
        case 6:
            _ck_b += (_ck_a += data);     
 800340a:	4b37      	ldr	r3, [pc, #220]	@ (80034e8 <newdata+0x228>)
 800340c:	781a      	ldrb	r2, [r3, #0]
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	4413      	add	r3, r2
 8003412:	b2da      	uxtb	r2, r3
 8003414:	4b34      	ldr	r3, [pc, #208]	@ (80034e8 <newdata+0x228>)
 8003416:	701a      	strb	r2, [r3, #0]
 8003418:	4b33      	ldr	r3, [pc, #204]	@ (80034e8 <newdata+0x228>)
 800341a:	781a      	ldrb	r2, [r3, #0]
 800341c:	4b33      	ldr	r3, [pc, #204]	@ (80034ec <newdata+0x22c>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	4413      	add	r3, r2
 8003422:	b2da      	uxtb	r2, r3
 8003424:	4b31      	ldr	r3, [pc, #196]	@ (80034ec <newdata+0x22c>)
 8003426:	701a      	strb	r2, [r3, #0]
            if (_payload_counter < UBLOX_BUFFER_SIZE) {
 8003428:	4b33      	ldr	r3, [pc, #204]	@ (80034f8 <newdata+0x238>)
 800342a:	881b      	ldrh	r3, [r3, #0]
 800342c:	2bc7      	cmp	r3, #199	@ 0xc7
 800342e:	d805      	bhi.n	800343c <newdata+0x17c>
                _buffer.bytes[_payload_counter] = data;
 8003430:	4b31      	ldr	r3, [pc, #196]	@ (80034f8 <newdata+0x238>)
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	4619      	mov	r1, r3
 8003436:	4a31      	ldr	r2, [pc, #196]	@ (80034fc <newdata+0x23c>)
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	5453      	strb	r3, [r2, r1]
            }
            if (++_payload_counter == _payload_length)
 800343c:	4b2e      	ldr	r3, [pc, #184]	@ (80034f8 <newdata+0x238>)
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	3301      	adds	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	4b2c      	ldr	r3, [pc, #176]	@ (80034f8 <newdata+0x238>)
 8003446:	801a      	strh	r2, [r3, #0]
 8003448:	4b2b      	ldr	r3, [pc, #172]	@ (80034f8 <newdata+0x238>)
 800344a:	881a      	ldrh	r2, [r3, #0]
 800344c:	4b29      	ldr	r3, [pc, #164]	@ (80034f4 <newdata+0x234>)
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d13c      	bne.n	80034ce <newdata+0x20e>
                _step++;
 8003454:	4b23      	ldr	r3, [pc, #140]	@ (80034e4 <newdata+0x224>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	3301      	adds	r3, #1
 800345a:	b2da      	uxtb	r2, r3
 800345c:	4b21      	ldr	r3, [pc, #132]	@ (80034e4 <newdata+0x224>)
 800345e:	701a      	strb	r2, [r3, #0]
            break;
 8003460:	e035      	b.n	80034ce <newdata+0x20e>
        case 7:
            _step++;
 8003462:	4b20      	ldr	r3, [pc, #128]	@ (80034e4 <newdata+0x224>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	3301      	adds	r3, #1
 8003468:	b2da      	uxtb	r2, r3
 800346a:	4b1e      	ldr	r3, [pc, #120]	@ (80034e4 <newdata+0x224>)
 800346c:	701a      	strb	r2, [r3, #0]
            if (_ck_a != data)
 800346e:	4b1e      	ldr	r3, [pc, #120]	@ (80034e8 <newdata+0x228>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	79fa      	ldrb	r2, [r7, #7]
 8003474:	429a      	cmp	r2, r3
 8003476:	d02c      	beq.n	80034d2 <newdata+0x212>
                _step = 0;         
 8003478:	4b1a      	ldr	r3, [pc, #104]	@ (80034e4 <newdata+0x224>)
 800347a:	2200      	movs	r2, #0
 800347c:	701a      	strb	r2, [r3, #0]
            break;
 800347e:	e028      	b.n	80034d2 <newdata+0x212>
        case 8:
            _step = 0;
 8003480:	4b18      	ldr	r3, [pc, #96]	@ (80034e4 <newdata+0x224>)
 8003482:	2200      	movs	r2, #0
 8003484:	701a      	strb	r2, [r3, #0]
            if (_ck_b != data)
 8003486:	4b19      	ldr	r3, [pc, #100]	@ (80034ec <newdata+0x22c>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	79fa      	ldrb	r2, [r7, #7]
 800348c:	429a      	cmp	r2, r3
 800348e:	d122      	bne.n	80034d6 <newdata+0x216>
                break;   
			 _therad_read_time_ms = micros() - current_time_ms;
 8003490:	4b1b      	ldr	r3, [pc, #108]	@ (8003500 <newdata+0x240>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003498:	4b1a      	ldr	r3, [pc, #104]	@ (8003504 <newdata+0x244>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	441a      	add	r2, r3
 800349e:	4b1a      	ldr	r3, [pc, #104]	@ (8003508 <newdata+0x248>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	4a19      	ldr	r2, [pc, #100]	@ (800350c <newdata+0x24c>)
 80034a6:	6013      	str	r3, [r2, #0]
			 current_time_ms = micros();
 80034a8:	4b15      	ldr	r3, [pc, #84]	@ (8003500 <newdata+0x240>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034b0:	4b14      	ldr	r3, [pc, #80]	@ (8003504 <newdata+0x244>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4413      	add	r3, r2
 80034b6:	4a14      	ldr	r2, [pc, #80]	@ (8003508 <newdata+0x248>)
 80034b8:	6013      	str	r3, [r2, #0]
            if (parse_msg())
 80034ba:	f7ff fe29 	bl	8003110 <parse_msg>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d009      	beq.n	80034d8 <newdata+0x218>
            {
                parsed = TRUE;
 80034c4:	2301      	movs	r3, #1
 80034c6:	73fb      	strb	r3, [r7, #15]
 80034c8:	e006      	b.n	80034d8 <newdata+0x218>
            break;
 80034ca:	bf00      	nop
 80034cc:	e004      	b.n	80034d8 <newdata+0x218>
            break;
 80034ce:	bf00      	nop
 80034d0:	e002      	b.n	80034d8 <newdata+0x218>
            break;
 80034d2:	bf00      	nop
 80034d4:	e000      	b.n	80034d8 <newdata+0x218>
                break;   
 80034d6:	bf00      	nop
            }
    } 
    return parsed;
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000552 	.word	0x20000552
 80034e8:	20000553 	.word	0x20000553
 80034ec:	20000554 	.word	0x20000554
 80034f0:	2000046c 	.word	0x2000046c
 80034f4:	2000046e 	.word	0x2000046e
 80034f8:	20000470 	.word	0x20000470
 80034fc:	2000047c 	.word	0x2000047c
 8003500:	200005dc 	.word	0x200005dc
 8003504:	200005e0 	.word	0x200005e0
 8003508:	20000558 	.word	0x20000558
 800350c:	20000468 	.word	0x20000468

08003510 <imu_calibrate>:
  .gyr_lsb = 32.8f
};


static int32_t store_gyro[3];
void imu_calibrate(int16_t *offsx,int16_t *offsy,int16_t *offsz){
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
	axis3_t gyro_;
	integralFBx = 0;
 800351c:	4b32      	ldr	r3, [pc, #200]	@ (80035e8 <imu_calibrate+0xd8>)
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
	integralFBy = 0;
 8003524:	4b31      	ldr	r3, [pc, #196]	@ (80035ec <imu_calibrate+0xdc>)
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
	integralFBz = 0;
 800352c:	4b30      	ldr	r3, [pc, #192]	@ (80035f0 <imu_calibrate+0xe0>)
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
	for(int i = 0;i < OFFSET_CYCLE; i++){
 8003534:	2300      	movs	r3, #0
 8003536:	61fb      	str	r3, [r7, #28]
 8003538:	e01f      	b.n	800357a <imu_calibrate+0x6a>
		mpu6050_gyro_get_raw(&gyro_);
 800353a:	f107 0314 	add.w	r3, r7, #20
 800353e:	4618      	mov	r0, r3
 8003540:	f7fe ff2a 	bl	8002398 <mpu6050_gyro_get_raw>
		store_gyro[X] += gyro_.x;
 8003544:	4b2b      	ldr	r3, [pc, #172]	@ (80035f4 <imu_calibrate+0xe4>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800354c:	4413      	add	r3, r2
 800354e:	4a29      	ldr	r2, [pc, #164]	@ (80035f4 <imu_calibrate+0xe4>)
 8003550:	6013      	str	r3, [r2, #0]
    	store_gyro[Y] += gyro_.y;
 8003552:	4b28      	ldr	r3, [pc, #160]	@ (80035f4 <imu_calibrate+0xe4>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800355a:	4413      	add	r3, r2
 800355c:	4a25      	ldr	r2, [pc, #148]	@ (80035f4 <imu_calibrate+0xe4>)
 800355e:	6053      	str	r3, [r2, #4]
    	store_gyro[Z] += gyro_.z;
 8003560:	4b24      	ldr	r3, [pc, #144]	@ (80035f4 <imu_calibrate+0xe4>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003568:	4413      	add	r3, r2
 800356a:	4a22      	ldr	r2, [pc, #136]	@ (80035f4 <imu_calibrate+0xe4>)
 800356c:	6093      	str	r3, [r2, #8]
		HAL_Delay(1); // delay 1 ms
 800356e:	2001      	movs	r0, #1
 8003570:	f004 f960 	bl	8007834 <HAL_Delay>
	for(int i = 0;i < OFFSET_CYCLE; i++){
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	3301      	adds	r3, #1
 8003578:	61fb      	str	r3, [r7, #28]
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003580:	dbdb      	blt.n	800353a <imu_calibrate+0x2a>
	}
	*offsx = store_gyro[X] / OFFSET_CYCLE;
 8003582:	4b1c      	ldr	r3, [pc, #112]	@ (80035f4 <imu_calibrate+0xe4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1c      	ldr	r2, [pc, #112]	@ (80035f8 <imu_calibrate+0xe8>)
 8003588:	fb82 1203 	smull	r1, r2, r2, r3
 800358c:	1192      	asrs	r2, r2, #6
 800358e:	17db      	asrs	r3, r3, #31
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	b21a      	sxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	801a      	strh	r2, [r3, #0]
	*offsy = store_gyro[Y] / OFFSET_CYCLE;
 8003598:	4b16      	ldr	r3, [pc, #88]	@ (80035f4 <imu_calibrate+0xe4>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	4a16      	ldr	r2, [pc, #88]	@ (80035f8 <imu_calibrate+0xe8>)
 800359e:	fb82 1203 	smull	r1, r2, r2, r3
 80035a2:	1192      	asrs	r2, r2, #6
 80035a4:	17db      	asrs	r3, r3, #31
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	b21a      	sxth	r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	801a      	strh	r2, [r3, #0]
	*offsz = store_gyro[Z] / OFFSET_CYCLE;
 80035ae:	4b11      	ldr	r3, [pc, #68]	@ (80035f4 <imu_calibrate+0xe4>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	4a11      	ldr	r2, [pc, #68]	@ (80035f8 <imu_calibrate+0xe8>)
 80035b4:	fb82 1203 	smull	r1, r2, r2, r3
 80035b8:	1192      	asrs	r2, r2, #6
 80035ba:	17db      	asrs	r3, r3, #31
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	b21a      	sxth	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	801a      	strh	r2, [r3, #0]
	init_us = millis();
 80035c4:	4b0d      	ldr	r3, [pc, #52]	@ (80035fc <imu_calibrate+0xec>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003600 <imu_calibrate+0xf0>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4413      	add	r3, r2
 80035d2:	4a09      	ldr	r2, [pc, #36]	@ (80035f8 <imu_calibrate+0xe8>)
 80035d4:	fba2 2303 	umull	r2, r3, r2, r3
 80035d8:	099b      	lsrs	r3, r3, #6
 80035da:	4a0a      	ldr	r2, [pc, #40]	@ (8003604 <imu_calibrate+0xf4>)
 80035dc:	6013      	str	r3, [r2, #0]
}
 80035de:	bf00      	nop
 80035e0:	3720      	adds	r7, #32
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20000574 	.word	0x20000574
 80035ec:	20000578 	.word	0x20000578
 80035f0:	2000057c 	.word	0x2000057c
 80035f4:	200005c0 	.word	0x200005c0
 80035f8:	10624dd3 	.word	0x10624dd3
 80035fc:	200005dc 	.word	0x200005dc
 8003600:	200005e0 	.word	0x200005e0
 8003604:	200005bc 	.word	0x200005bc

08003608 <update_ahrs>:
	m->roll   = atan2_approx(-acc.x, (1/invSqrt_(acc.y * acc.y + acc.z * acc.z)))*180/M_PIf;
}

static int8_t reset_state = 1;
// mahony filter
void update_ahrs(int16_t gx_, int16_t gy_, int16_t gz_, int16_t accx_, int16_t accy_, int16_t accz_,int16_t magx,int16_t magy,int16_t magz,uint32_t micros){
 8003608:	b5b0      	push	{r4, r5, r7, lr}
 800360a:	b0a8      	sub	sp, #160	@ 0xa0
 800360c:	af00      	add	r7, sp, #0
 800360e:	4604      	mov	r4, r0
 8003610:	4608      	mov	r0, r1
 8003612:	4611      	mov	r1, r2
 8003614:	461a      	mov	r2, r3
 8003616:	4623      	mov	r3, r4
 8003618:	80fb      	strh	r3, [r7, #6]
 800361a:	4603      	mov	r3, r0
 800361c:	80bb      	strh	r3, [r7, #4]
 800361e:	460b      	mov	r3, r1
 8003620:	807b      	strh	r3, [r7, #2]
 8003622:	4613      	mov	r3, r2
 8003624:	803b      	strh	r3, [r7, #0]
    float vx, vy, vz;
    float emz,wx,wy;
    float mx,my,mz,hx,hy,bx,bz;

    static uint32_t last_time_us;
    float dt = (micros - last_time_us)*(1e-6f);
 8003626:	4bb2      	ldr	r3, [pc, #712]	@ (80038f0 <update_ahrs+0x2e8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	4618      	mov	r0, r3
 8003632:	f7fd fb67 	bl	8000d04 <__aeabi_ui2f>
 8003636:	4603      	mov	r3, r0
 8003638:	49ae      	ldr	r1, [pc, #696]	@ (80038f4 <update_ahrs+0x2ec>)
 800363a:	4618      	mov	r0, r3
 800363c:	f7fd fbba 	bl	8000db4 <__aeabi_fmul>
 8003640:	4603      	mov	r3, r0
 8003642:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    last_time_us = micros;
 8003646:	4aaa      	ldr	r2, [pc, #680]	@ (80038f0 <update_ahrs+0x2e8>)
 8003648:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800364c:	6013      	str	r3, [r2, #0]

	gx = (gx_/config.gyr_lsb) * RAD;
 800364e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fd fb5a 	bl	8000d0c <__aeabi_i2f>
 8003658:	4602      	mov	r2, r0
 800365a:	4ba7      	ldr	r3, [pc, #668]	@ (80038f8 <update_ahrs+0x2f0>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	4619      	mov	r1, r3
 8003660:	4610      	mov	r0, r2
 8003662:	f7fd fc5b 	bl	8000f1c <__aeabi_fdiv>
 8003666:	4603      	mov	r3, r0
 8003668:	49a4      	ldr	r1, [pc, #656]	@ (80038fc <update_ahrs+0x2f4>)
 800366a:	4618      	mov	r0, r3
 800366c:	f7fd fba2 	bl	8000db4 <__aeabi_fmul>
 8003670:	4603      	mov	r3, r0
 8003672:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	gy = (gy_/config.gyr_lsb) * RAD;
 8003676:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800367a:	4618      	mov	r0, r3
 800367c:	f7fd fb46 	bl	8000d0c <__aeabi_i2f>
 8003680:	4602      	mov	r2, r0
 8003682:	4b9d      	ldr	r3, [pc, #628]	@ (80038f8 <update_ahrs+0x2f0>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	4619      	mov	r1, r3
 8003688:	4610      	mov	r0, r2
 800368a:	f7fd fc47 	bl	8000f1c <__aeabi_fdiv>
 800368e:	4603      	mov	r3, r0
 8003690:	499a      	ldr	r1, [pc, #616]	@ (80038fc <update_ahrs+0x2f4>)
 8003692:	4618      	mov	r0, r3
 8003694:	f7fd fb8e 	bl	8000db4 <__aeabi_fmul>
 8003698:	4603      	mov	r3, r0
 800369a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	gz = (gz_/config.gyr_lsb) * RAD;
 800369e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fd fb32 	bl	8000d0c <__aeabi_i2f>
 80036a8:	4602      	mov	r2, r0
 80036aa:	4b93      	ldr	r3, [pc, #588]	@ (80038f8 <update_ahrs+0x2f0>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	4619      	mov	r1, r3
 80036b0:	4610      	mov	r0, r2
 80036b2:	f7fd fc33 	bl	8000f1c <__aeabi_fdiv>
 80036b6:	4603      	mov	r3, r0
 80036b8:	4990      	ldr	r1, [pc, #576]	@ (80038fc <update_ahrs+0x2f4>)
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fd fb7a 	bl	8000db4 <__aeabi_fmul>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	if(!((accx_ == 0) && (accy_ == 0) && ( accz_ == 0))) {
 80036c6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d108      	bne.n	80036e0 <update_ahrs+0xd8>
 80036ce:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d104      	bne.n	80036e0 <update_ahrs+0xd8>
 80036d6:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 825d 	beq.w	8003b9a <update_ahrs+0x592>
		norm = invSqrt_(accx_ * accx_ + accy_ * accy_ + accz_ * accz_);
 80036e0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80036e4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80036e8:	fb03 f202 	mul.w	r2, r3, r2
 80036ec:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80036f0:	f9b7 10b0 	ldrsh.w	r1, [r7, #176]	@ 0xb0
 80036f4:	fb01 f303 	mul.w	r3, r1, r3
 80036f8:	441a      	add	r2, r3
 80036fa:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 80036fe:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	@ 0xb4
 8003702:	fb01 f303 	mul.w	r3, r1, r3
 8003706:	4413      	add	r3, r2
 8003708:	4618      	mov	r0, r3
 800370a:	f7fd faff 	bl	8000d0c <__aeabi_i2f>
 800370e:	4603      	mov	r3, r0
 8003710:	4618      	mov	r0, r3
 8003712:	f000 ff47 	bl	80045a4 <invSqrt_>
 8003716:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
		acc_x = (float)accx_ * norm;
 800371a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800371e:	4618      	mov	r0, r3
 8003720:	f7fd faf4 	bl	8000d0c <__aeabi_i2f>
 8003724:	4603      	mov	r3, r0
 8003726:	4619      	mov	r1, r3
 8003728:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800372c:	f7fd fb42 	bl	8000db4 <__aeabi_fmul>
 8003730:	4603      	mov	r3, r0
 8003732:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		acc_y = (float)accy_ * norm;
 8003736:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 800373a:	4618      	mov	r0, r3
 800373c:	f7fd fae6 	bl	8000d0c <__aeabi_i2f>
 8003740:	4603      	mov	r3, r0
 8003742:	4619      	mov	r1, r3
 8003744:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003748:	f7fd fb34 	bl	8000db4 <__aeabi_fmul>
 800374c:	4603      	mov	r3, r0
 800374e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		acc_z = (float)accz_ * norm;
 8003752:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 8003756:	4618      	mov	r0, r3
 8003758:	f7fd fad8 	bl	8000d0c <__aeabi_i2f>
 800375c:	4603      	mov	r3, r0
 800375e:	4619      	mov	r1, r3
 8003760:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003764:	f7fd fb26 	bl	8000db4 <__aeabi_fmul>
 8003768:	4603      	mov	r3, r0
 800376a:	67fb      	str	r3, [r7, #124]	@ 0x7c

		if(reset_state){
 800376c:	4b64      	ldr	r3, [pc, #400]	@ (8003900 <update_ahrs+0x2f8>)
 800376e:	f993 3000 	ldrsb.w	r3, [r3]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00d      	beq.n	8003792 <update_ahrs+0x18a>
			dcm[0][2] = acc_x;
 8003776:	4a63      	ldr	r2, [pc, #396]	@ (8003904 <update_ahrs+0x2fc>)
 8003778:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800377c:	6093      	str	r3, [r2, #8]
			dcm[1][2] = acc_y;
 800377e:	4a61      	ldr	r2, [pc, #388]	@ (8003904 <update_ahrs+0x2fc>)
 8003780:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003784:	6153      	str	r3, [r2, #20]
			dcm[2][2] = acc_z;
 8003786:	4a5f      	ldr	r2, [pc, #380]	@ (8003904 <update_ahrs+0x2fc>)
 8003788:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800378a:	6213      	str	r3, [r2, #32]
			reset_state = 0;
 800378c:	4b5c      	ldr	r3, [pc, #368]	@ (8003900 <update_ahrs+0x2f8>)
 800378e:	2200      	movs	r2, #0
 8003790:	701a      	strb	r2, [r3, #0]
		}

        if(USE_MAG){
			norm = invSqrt_(magx * magx + magy * magy + magz * magz);
 8003792:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	@ 0xb8
 8003796:	f9b7 20b8 	ldrsh.w	r2, [r7, #184]	@ 0xb8
 800379a:	fb03 f202 	mul.w	r2, r3, r2
 800379e:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 80037a2:	f9b7 10bc 	ldrsh.w	r1, [r7, #188]	@ 0xbc
 80037a6:	fb01 f303 	mul.w	r3, r1, r3
 80037aa:	441a      	add	r2, r3
 80037ac:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 80037b0:	f9b7 10c0 	ldrsh.w	r1, [r7, #192]	@ 0xc0
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	4413      	add	r3, r2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fd faa6 	bl	8000d0c <__aeabi_i2f>
 80037c0:	4603      	mov	r3, r0
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 feee 	bl	80045a4 <invSqrt_>
 80037c8:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
			mx = magx * norm;
 80037cc:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	@ 0xb8
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fd fa9b 	bl	8000d0c <__aeabi_i2f>
 80037d6:	4603      	mov	r3, r0
 80037d8:	4619      	mov	r1, r3
 80037da:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80037de:	f7fd fae9 	bl	8000db4 <__aeabi_fmul>
 80037e2:	4603      	mov	r3, r0
 80037e4:	67bb      	str	r3, [r7, #120]	@ 0x78
			my = magy * norm;
 80037e6:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fd fa8e 	bl	8000d0c <__aeabi_i2f>
 80037f0:	4603      	mov	r3, r0
 80037f2:	4619      	mov	r1, r3
 80037f4:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80037f8:	f7fd fadc 	bl	8000db4 <__aeabi_fmul>
 80037fc:	4603      	mov	r3, r0
 80037fe:	677b      	str	r3, [r7, #116]	@ 0x74
			mz = magz * norm;
 8003800:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 8003804:	4618      	mov	r0, r3
 8003806:	f7fd fa81 	bl	8000d0c <__aeabi_i2f>
 800380a:	4603      	mov	r3, r0
 800380c:	4619      	mov	r1, r3
 800380e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003812:	f7fd facf 	bl	8000db4 <__aeabi_fmul>
 8003816:	4603      	mov	r3, r0
 8003818:	673b      	str	r3, [r7, #112]	@ 0x70

			hx = mx * dcm[0][0] + my * dcm[1][0] + mz * dcm[2][0];
 800381a:	4b3a      	ldr	r3, [pc, #232]	@ (8003904 <update_ahrs+0x2fc>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8003820:	4618      	mov	r0, r3
 8003822:	f7fd fac7 	bl	8000db4 <__aeabi_fmul>
 8003826:	4603      	mov	r3, r0
 8003828:	461c      	mov	r4, r3
 800382a:	4b36      	ldr	r3, [pc, #216]	@ (8003904 <update_ahrs+0x2fc>)
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003830:	4618      	mov	r0, r3
 8003832:	f7fd fabf 	bl	8000db4 <__aeabi_fmul>
 8003836:	4603      	mov	r3, r0
 8003838:	4619      	mov	r1, r3
 800383a:	4620      	mov	r0, r4
 800383c:	f7fd f9b2 	bl	8000ba4 <__addsf3>
 8003840:	4603      	mov	r3, r0
 8003842:	461c      	mov	r4, r3
 8003844:	4b2f      	ldr	r3, [pc, #188]	@ (8003904 <update_ahrs+0x2fc>)
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800384a:	4618      	mov	r0, r3
 800384c:	f7fd fab2 	bl	8000db4 <__aeabi_fmul>
 8003850:	4603      	mov	r3, r0
 8003852:	4619      	mov	r1, r3
 8003854:	4620      	mov	r0, r4
 8003856:	f7fd f9a5 	bl	8000ba4 <__addsf3>
 800385a:	4603      	mov	r3, r0
 800385c:	66fb      	str	r3, [r7, #108]	@ 0x6c
			hy = mx * dcm[0][1] + my * dcm[1][1] + mz * dcm[2][1];
 800385e:	4b29      	ldr	r3, [pc, #164]	@ (8003904 <update_ahrs+0x2fc>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8003864:	4618      	mov	r0, r3
 8003866:	f7fd faa5 	bl	8000db4 <__aeabi_fmul>
 800386a:	4603      	mov	r3, r0
 800386c:	461c      	mov	r4, r3
 800386e:	4b25      	ldr	r3, [pc, #148]	@ (8003904 <update_ahrs+0x2fc>)
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003874:	4618      	mov	r0, r3
 8003876:	f7fd fa9d 	bl	8000db4 <__aeabi_fmul>
 800387a:	4603      	mov	r3, r0
 800387c:	4619      	mov	r1, r3
 800387e:	4620      	mov	r0, r4
 8003880:	f7fd f990 	bl	8000ba4 <__addsf3>
 8003884:	4603      	mov	r3, r0
 8003886:	461c      	mov	r4, r3
 8003888:	4b1e      	ldr	r3, [pc, #120]	@ (8003904 <update_ahrs+0x2fc>)
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800388e:	4618      	mov	r0, r3
 8003890:	f7fd fa90 	bl	8000db4 <__aeabi_fmul>
 8003894:	4603      	mov	r3, r0
 8003896:	4619      	mov	r1, r3
 8003898:	4620      	mov	r0, r4
 800389a:	f7fd f983 	bl	8000ba4 <__addsf3>
 800389e:	4603      	mov	r3, r0
 80038a0:	66bb      	str	r3, [r7, #104]	@ 0x68
			bz = mx * dcm[0][2] + my * dcm[1][2] + mz * dcm[2][2];
 80038a2:	4b18      	ldr	r3, [pc, #96]	@ (8003904 <update_ahrs+0x2fc>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fd fa83 	bl	8000db4 <__aeabi_fmul>
 80038ae:	4603      	mov	r3, r0
 80038b0:	461c      	mov	r4, r3
 80038b2:	4b14      	ldr	r3, [pc, #80]	@ (8003904 <update_ahrs+0x2fc>)
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fd fa7b 	bl	8000db4 <__aeabi_fmul>
 80038be:	4603      	mov	r3, r0
 80038c0:	4619      	mov	r1, r3
 80038c2:	4620      	mov	r0, r4
 80038c4:	f7fd f96e 	bl	8000ba4 <__addsf3>
 80038c8:	4603      	mov	r3, r0
 80038ca:	461c      	mov	r4, r3
 80038cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003904 <update_ahrs+0x2fc>)
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fd fa6e 	bl	8000db4 <__aeabi_fmul>
 80038d8:	4603      	mov	r3, r0
 80038da:	4619      	mov	r1, r3
 80038dc:	4620      	mov	r0, r4
 80038de:	f7fd f961 	bl	8000ba4 <__addsf3>
 80038e2:	4603      	mov	r3, r0
 80038e4:	667b      	str	r3, [r7, #100]	@ 0x64

			bx = sqrtf(hx * hx + hy * hy);
 80038e6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80038e8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80038ea:	f7fd fa63 	bl	8000db4 <__aeabi_fmul>
 80038ee:	e00b      	b.n	8003908 <update_ahrs+0x300>
 80038f0:	200005cc 	.word	0x200005cc
 80038f4:	358637bd 	.word	0x358637bd
 80038f8:	20000008 	.word	0x20000008
 80038fc:	3c8efa35 	.word	0x3c8efa35
 8003900:	20000014 	.word	0x20000014
 8003904:	20000598 	.word	0x20000598
 8003908:	4603      	mov	r3, r0
 800390a:	461c      	mov	r4, r3
 800390c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800390e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003910:	f7fd fa50 	bl	8000db4 <__aeabi_fmul>
 8003914:	4603      	mov	r3, r0
 8003916:	4619      	mov	r1, r3
 8003918:	4620      	mov	r0, r4
 800391a:	f7fd f943 	bl	8000ba4 <__addsf3>
 800391e:	4603      	mov	r3, r0
 8003920:	4618      	mov	r0, r3
 8003922:	f011 fa60 	bl	8014de6 <sqrtf>
 8003926:	6638      	str	r0, [r7, #96]	@ 0x60

			wx = bx * dcm[0][0] + bz * dcm[0][2];
 8003928:	4b75      	ldr	r3, [pc, #468]	@ (8003b00 <update_ahrs+0x4f8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800392e:	4618      	mov	r0, r3
 8003930:	f7fd fa40 	bl	8000db4 <__aeabi_fmul>
 8003934:	4603      	mov	r3, r0
 8003936:	461c      	mov	r4, r3
 8003938:	4b71      	ldr	r3, [pc, #452]	@ (8003b00 <update_ahrs+0x4f8>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800393e:	4618      	mov	r0, r3
 8003940:	f7fd fa38 	bl	8000db4 <__aeabi_fmul>
 8003944:	4603      	mov	r3, r0
 8003946:	4619      	mov	r1, r3
 8003948:	4620      	mov	r0, r4
 800394a:	f7fd f92b 	bl	8000ba4 <__addsf3>
 800394e:	4603      	mov	r3, r0
 8003950:	65fb      	str	r3, [r7, #92]	@ 0x5c
			wy = bx * dcm[1][0] + bz * dcm[1][2];
 8003952:	4b6b      	ldr	r3, [pc, #428]	@ (8003b00 <update_ahrs+0x4f8>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8003958:	4618      	mov	r0, r3
 800395a:	f7fd fa2b 	bl	8000db4 <__aeabi_fmul>
 800395e:	4603      	mov	r3, r0
 8003960:	461c      	mov	r4, r3
 8003962:	4b67      	ldr	r3, [pc, #412]	@ (8003b00 <update_ahrs+0x4f8>)
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003968:	4618      	mov	r0, r3
 800396a:	f7fd fa23 	bl	8000db4 <__aeabi_fmul>
 800396e:	4603      	mov	r3, r0
 8003970:	4619      	mov	r1, r3
 8003972:	4620      	mov	r0, r4
 8003974:	f7fd f916 	bl	8000ba4 <__addsf3>
 8003978:	4603      	mov	r3, r0
 800397a:	65bb      	str	r3, [r7, #88]	@ 0x58
			emz = mx * wy - my * wx;
 800397c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800397e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8003980:	f7fd fa18 	bl	8000db4 <__aeabi_fmul>
 8003984:	4603      	mov	r3, r0
 8003986:	461c      	mov	r4, r3
 8003988:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800398a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800398c:	f7fd fa12 	bl	8000db4 <__aeabi_fmul>
 8003990:	4603      	mov	r3, r0
 8003992:	4619      	mov	r1, r3
 8003994:	4620      	mov	r0, r4
 8003996:	f7fd f903 	bl	8000ba0 <__aeabi_fsub>
 800399a:	4603      	mov	r3, r0
 800399c:	657b      	str	r3, [r7, #84]	@ 0x54
		}
		else{
			emz = 0.0f;
		}

		vx = dcm[0][2];
 800399e:	4b58      	ldr	r3, [pc, #352]	@ (8003b00 <update_ahrs+0x4f8>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	653b      	str	r3, [r7, #80]	@ 0x50
		vy = dcm[1][2];
 80039a4:	4b56      	ldr	r3, [pc, #344]	@ (8003b00 <update_ahrs+0x4f8>)
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
		vz = dcm[2][2];
 80039aa:	4b55      	ldr	r3, [pc, #340]	@ (8003b00 <update_ahrs+0x4f8>)
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	64bb      	str	r3, [r7, #72]	@ 0x48

		ex = acc_y * vz - acc_z * vy;
 80039b0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80039b2:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80039b6:	f7fd f9fd 	bl	8000db4 <__aeabi_fmul>
 80039ba:	4603      	mov	r3, r0
 80039bc:	461c      	mov	r4, r3
 80039be:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80039c0:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80039c2:	f7fd f9f7 	bl	8000db4 <__aeabi_fmul>
 80039c6:	4603      	mov	r3, r0
 80039c8:	4619      	mov	r1, r3
 80039ca:	4620      	mov	r0, r4
 80039cc:	f7fd f8e8 	bl	8000ba0 <__aeabi_fsub>
 80039d0:	4603      	mov	r3, r0
 80039d2:	647b      	str	r3, [r7, #68]	@ 0x44
		ey = acc_z * vx - acc_x * vz;
 80039d4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80039d6:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80039d8:	f7fd f9ec 	bl	8000db4 <__aeabi_fmul>
 80039dc:	4603      	mov	r3, r0
 80039de:	461c      	mov	r4, r3
 80039e0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80039e2:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80039e6:	f7fd f9e5 	bl	8000db4 <__aeabi_fmul>
 80039ea:	4603      	mov	r3, r0
 80039ec:	4619      	mov	r1, r3
 80039ee:	4620      	mov	r0, r4
 80039f0:	f7fd f8d6 	bl	8000ba0 <__aeabi_fsub>
 80039f4:	4603      	mov	r3, r0
 80039f6:	643b      	str	r3, [r7, #64]	@ 0x40
		ez = acc_x * vy - acc_y * vx;
 80039f8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80039fa:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80039fe:	f7fd f9d9 	bl	8000db4 <__aeabi_fmul>
 8003a02:	4603      	mov	r3, r0
 8003a04:	461c      	mov	r4, r3
 8003a06:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003a08:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003a0c:	f7fd f9d2 	bl	8000db4 <__aeabi_fmul>
 8003a10:	4603      	mov	r3, r0
 8003a12:	4619      	mov	r1, r3
 8003a14:	4620      	mov	r0, r4
 8003a16:	f7fd f8c3 	bl	8000ba0 <__aeabi_fsub>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c

		if( Ki_imu  > 0.0f) {
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	f04f 0100 	mov.w	r1, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fd fb80 	bl	800112c <__aeabi_fcmpgt>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d06e      	beq.n	8003b10 <update_ahrs+0x508>
			integralFBx +=  Ki_imu  * ex * dt;
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fd f9bb 	bl	8000db4 <__aeabi_fmul>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fd f9b5 	bl	8000db4 <__aeabi_fmul>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8003b04 <update_ahrs+0x4fc>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4619      	mov	r1, r3
 8003a54:	4610      	mov	r0, r2
 8003a56:	f7fd f8a5 	bl	8000ba4 <__addsf3>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	4b29      	ldr	r3, [pc, #164]	@ (8003b04 <update_ahrs+0x4fc>)
 8003a60:	601a      	str	r2, [r3, #0]
			integralFBy +=  Ki_imu  * ey * dt;
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fd f9a3 	bl	8000db4 <__aeabi_fmul>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fd f99d 	bl	8000db4 <__aeabi_fmul>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	4b22      	ldr	r3, [pc, #136]	@ (8003b08 <update_ahrs+0x500>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4619      	mov	r1, r3
 8003a84:	4610      	mov	r0, r2
 8003a86:	f7fd f88d 	bl	8000ba4 <__addsf3>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003b08 <update_ahrs+0x500>)
 8003a90:	601a      	str	r2, [r3, #0]
			integralFBz +=  Ki_imu  * ez * dt;
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fd f98b 	bl	8000db4 <__aeabi_fmul>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fd f985 	bl	8000db4 <__aeabi_fmul>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	461a      	mov	r2, r3
 8003aae:	4b17      	ldr	r3, [pc, #92]	@ (8003b0c <update_ahrs+0x504>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	f7fd f875 	bl	8000ba4 <__addsf3>
 8003aba:	4603      	mov	r3, r0
 8003abc:	461a      	mov	r2, r3
 8003abe:	4b13      	ldr	r3, [pc, #76]	@ (8003b0c <update_ahrs+0x504>)
 8003ac0:	601a      	str	r2, [r3, #0]
			gx += integralFBx;
 8003ac2:	4b10      	ldr	r3, [pc, #64]	@ (8003b04 <update_ahrs+0x4fc>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003acc:	f7fd f86a 	bl	8000ba4 <__addsf3>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
			gy += integralFBy;
 8003ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8003b08 <update_ahrs+0x500>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4619      	mov	r1, r3
 8003adc:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003ae0:	f7fd f860 	bl	8000ba4 <__addsf3>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			gz += integralFBz;
 8003aea:	4b08      	ldr	r3, [pc, #32]	@ (8003b0c <update_ahrs+0x504>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4619      	mov	r1, r3
 8003af0:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003af4:	f7fd f856 	bl	8000ba4 <__addsf3>
 8003af8:	4603      	mov	r3, r0
 8003afa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003afe:	e013      	b.n	8003b28 <update_ahrs+0x520>
 8003b00:	20000598 	.word	0x20000598
 8003b04:	20000574 	.word	0x20000574
 8003b08:	20000578 	.word	0x20000578
 8003b0c:	2000057c 	.word	0x2000057c
		} else {
			integralFBx = 0.0f;
 8003b10:	4ba4      	ldr	r3, [pc, #656]	@ (8003da4 <update_ahrs+0x79c>)
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8003b18:	4ba3      	ldr	r3, [pc, #652]	@ (8003da8 <update_ahrs+0x7a0>)
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8003b20:	4ba2      	ldr	r3, [pc, #648]	@ (8003dac <update_ahrs+0x7a4>)
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
		}

		gx += Kp_imu * ex;
 8003b28:	4ba1      	ldr	r3, [pc, #644]	@ (8003db0 <update_ahrs+0x7a8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fd f940 	bl	8000db4 <__aeabi_fmul>
 8003b34:	4603      	mov	r3, r0
 8003b36:	4619      	mov	r1, r3
 8003b38:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003b3c:	f7fd f832 	bl	8000ba4 <__addsf3>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		gy += Kp_imu * ey;
 8003b46:	4b9a      	ldr	r3, [pc, #616]	@ (8003db0 <update_ahrs+0x7a8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fd f931 	bl	8000db4 <__aeabi_fmul>
 8003b52:	4603      	mov	r3, r0
 8003b54:	4619      	mov	r1, r3
 8003b56:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003b5a:	f7fd f823 	bl	8000ba4 <__addsf3>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		gz += Kp_imu * ez + emz * Kp_mag;
 8003b64:	4b92      	ldr	r3, [pc, #584]	@ (8003db0 <update_ahrs+0x7a8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fd f922 	bl	8000db4 <__aeabi_fmul>
 8003b70:	4603      	mov	r3, r0
 8003b72:	461c      	mov	r4, r3
 8003b74:	4b8f      	ldr	r3, [pc, #572]	@ (8003db4 <update_ahrs+0x7ac>)
 8003b76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fd f91b 	bl	8000db4 <__aeabi_fmul>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	4619      	mov	r1, r3
 8003b82:	4620      	mov	r0, r4
 8003b84:	f7fd f80e 	bl	8000ba4 <__addsf3>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003b90:	f7fd f808 	bl	8000ba4 <__addsf3>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	}

	gx *= (0.5f * dt);
 8003b9a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003b9e:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8003ba2:	f7fd f907 	bl	8000db4 <__aeabi_fmul>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	4619      	mov	r1, r3
 8003baa:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003bae:	f7fd f901 	bl	8000db4 <__aeabi_fmul>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	gy *= (0.5f * dt);
 8003bb8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003bbc:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8003bc0:	f7fd f8f8 	bl	8000db4 <__aeabi_fmul>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003bcc:	f7fd f8f2 	bl	8000db4 <__aeabi_fmul>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	gz *= (0.5f * dt);
 8003bd6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003bda:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8003bde:	f7fd f8e9 	bl	8000db4 <__aeabi_fmul>
 8003be2:	4603      	mov	r3, r0
 8003be4:	4619      	mov	r1, r3
 8003be6:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003bea:	f7fd f8e3 	bl	8000db4 <__aeabi_fmul>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	q0 += (-q1 * gx - q2 * gy - q3 * gz);
 8003bf4:	4b70      	ldr	r3, [pc, #448]	@ (8003db8 <update_ahrs+0x7b0>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003bfc:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fd f8d7 	bl	8000db4 <__aeabi_fmul>
 8003c06:	4603      	mov	r3, r0
 8003c08:	461c      	mov	r4, r3
 8003c0a:	4b6c      	ldr	r3, [pc, #432]	@ (8003dbc <update_ahrs+0x7b4>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fd f8ce 	bl	8000db4 <__aeabi_fmul>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	f7fc ffbf 	bl	8000ba0 <__aeabi_fsub>
 8003c22:	4603      	mov	r3, r0
 8003c24:	461c      	mov	r4, r3
 8003c26:	4b66      	ldr	r3, [pc, #408]	@ (8003dc0 <update_ahrs+0x7b8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fd f8c0 	bl	8000db4 <__aeabi_fmul>
 8003c34:	4603      	mov	r3, r0
 8003c36:	4619      	mov	r1, r3
 8003c38:	4620      	mov	r0, r4
 8003c3a:	f7fc ffb1 	bl	8000ba0 <__aeabi_fsub>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	461a      	mov	r2, r3
 8003c42:	4b60      	ldr	r3, [pc, #384]	@ (8003dc4 <update_ahrs+0x7bc>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4619      	mov	r1, r3
 8003c48:	4610      	mov	r0, r2
 8003c4a:	f7fc ffab 	bl	8000ba4 <__addsf3>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	461a      	mov	r2, r3
 8003c52:	4b5c      	ldr	r3, [pc, #368]	@ (8003dc4 <update_ahrs+0x7bc>)
 8003c54:	601a      	str	r2, [r3, #0]
	q1 += ( q0 * gx + q2 * gz - q3 * gy);
 8003c56:	4b5b      	ldr	r3, [pc, #364]	@ (8003dc4 <update_ahrs+0x7bc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fd f8a8 	bl	8000db4 <__aeabi_fmul>
 8003c64:	4603      	mov	r3, r0
 8003c66:	461c      	mov	r4, r3
 8003c68:	4b54      	ldr	r3, [pc, #336]	@ (8003dbc <update_ahrs+0x7b4>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fd f89f 	bl	8000db4 <__aeabi_fmul>
 8003c76:	4603      	mov	r3, r0
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4620      	mov	r0, r4
 8003c7c:	f7fc ff92 	bl	8000ba4 <__addsf3>
 8003c80:	4603      	mov	r3, r0
 8003c82:	461c      	mov	r4, r3
 8003c84:	4b4e      	ldr	r3, [pc, #312]	@ (8003dc0 <update_ahrs+0x7b8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7fd f891 	bl	8000db4 <__aeabi_fmul>
 8003c92:	4603      	mov	r3, r0
 8003c94:	4619      	mov	r1, r3
 8003c96:	4620      	mov	r0, r4
 8003c98:	f7fc ff82 	bl	8000ba0 <__aeabi_fsub>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	4b45      	ldr	r3, [pc, #276]	@ (8003db8 <update_ahrs+0x7b0>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	f7fc ff7c 	bl	8000ba4 <__addsf3>
 8003cac:	4603      	mov	r3, r0
 8003cae:	461a      	mov	r2, r3
 8003cb0:	4b41      	ldr	r3, [pc, #260]	@ (8003db8 <update_ahrs+0x7b0>)
 8003cb2:	601a      	str	r2, [r3, #0]
	q2 += ( q0 * gy - q1 * gz + q3 * gx);
 8003cb4:	4b43      	ldr	r3, [pc, #268]	@ (8003dc4 <update_ahrs+0x7bc>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fd f879 	bl	8000db4 <__aeabi_fmul>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	461c      	mov	r4, r3
 8003cc6:	4b3c      	ldr	r3, [pc, #240]	@ (8003db8 <update_ahrs+0x7b0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fd f870 	bl	8000db4 <__aeabi_fmul>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f7fc ff61 	bl	8000ba0 <__aeabi_fsub>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	461c      	mov	r4, r3
 8003ce2:	4b37      	ldr	r3, [pc, #220]	@ (8003dc0 <update_ahrs+0x7b8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fd f862 	bl	8000db4 <__aeabi_fmul>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	f7fc ff55 	bl	8000ba4 <__addsf3>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4b2f      	ldr	r3, [pc, #188]	@ (8003dbc <update_ahrs+0x7b4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4619      	mov	r1, r3
 8003d04:	4610      	mov	r0, r2
 8003d06:	f7fc ff4d 	bl	8000ba4 <__addsf3>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8003dbc <update_ahrs+0x7b4>)
 8003d10:	601a      	str	r2, [r3, #0]
	q3 += ( q0 * gz + q1 * gy - q2 * gx);
 8003d12:	4b2c      	ldr	r3, [pc, #176]	@ (8003dc4 <update_ahrs+0x7bc>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fd f84a 	bl	8000db4 <__aeabi_fmul>
 8003d20:	4603      	mov	r3, r0
 8003d22:	461c      	mov	r4, r3
 8003d24:	4b24      	ldr	r3, [pc, #144]	@ (8003db8 <update_ahrs+0x7b0>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fd f841 	bl	8000db4 <__aeabi_fmul>
 8003d32:	4603      	mov	r3, r0
 8003d34:	4619      	mov	r1, r3
 8003d36:	4620      	mov	r0, r4
 8003d38:	f7fc ff34 	bl	8000ba4 <__addsf3>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	461c      	mov	r4, r3
 8003d40:	4b1e      	ldr	r3, [pc, #120]	@ (8003dbc <update_ahrs+0x7b4>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fd f833 	bl	8000db4 <__aeabi_fmul>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4619      	mov	r1, r3
 8003d52:	4620      	mov	r0, r4
 8003d54:	f7fc ff24 	bl	8000ba0 <__aeabi_fsub>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	4b18      	ldr	r3, [pc, #96]	@ (8003dc0 <update_ahrs+0x7b8>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4619      	mov	r1, r3
 8003d62:	4610      	mov	r0, r2
 8003d64:	f7fc ff1e 	bl	8000ba4 <__addsf3>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	4b14      	ldr	r3, [pc, #80]	@ (8003dc0 <update_ahrs+0x7b8>)
 8003d6e:	601a      	str	r2, [r3, #0]

	norm = invSqrt_(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8003d70:	4b14      	ldr	r3, [pc, #80]	@ (8003dc4 <update_ahrs+0x7bc>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a13      	ldr	r2, [pc, #76]	@ (8003dc4 <update_ahrs+0x7bc>)
 8003d76:	6812      	ldr	r2, [r2, #0]
 8003d78:	4611      	mov	r1, r2
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fd f81a 	bl	8000db4 <__aeabi_fmul>
 8003d80:	4603      	mov	r3, r0
 8003d82:	461c      	mov	r4, r3
 8003d84:	4b0c      	ldr	r3, [pc, #48]	@ (8003db8 <update_ahrs+0x7b0>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a0b      	ldr	r2, [pc, #44]	@ (8003db8 <update_ahrs+0x7b0>)
 8003d8a:	6812      	ldr	r2, [r2, #0]
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fd f810 	bl	8000db4 <__aeabi_fmul>
 8003d94:	4603      	mov	r3, r0
 8003d96:	4619      	mov	r1, r3
 8003d98:	4620      	mov	r0, r4
 8003d9a:	f7fc ff03 	bl	8000ba4 <__addsf3>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	461c      	mov	r4, r3
 8003da2:	e011      	b.n	8003dc8 <update_ahrs+0x7c0>
 8003da4:	20000574 	.word	0x20000574
 8003da8:	20000578 	.word	0x20000578
 8003dac:	2000057c 	.word	0x2000057c
 8003db0:	20000000 	.word	0x20000000
 8003db4:	40a00000 	.word	0x40a00000
 8003db8:	2000058c 	.word	0x2000058c
 8003dbc:	20000590 	.word	0x20000590
 8003dc0:	20000594 	.word	0x20000594
 8003dc4:	20000004 	.word	0x20000004
 8003dc8:	4b96      	ldr	r3, [pc, #600]	@ (8004024 <update_ahrs+0xa1c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a95      	ldr	r2, [pc, #596]	@ (8004024 <update_ahrs+0xa1c>)
 8003dce:	6812      	ldr	r2, [r2, #0]
 8003dd0:	4611      	mov	r1, r2
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fc ffee 	bl	8000db4 <__aeabi_fmul>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4620      	mov	r0, r4
 8003dde:	f7fc fee1 	bl	8000ba4 <__addsf3>
 8003de2:	4603      	mov	r3, r0
 8003de4:	461c      	mov	r4, r3
 8003de6:	4b90      	ldr	r3, [pc, #576]	@ (8004028 <update_ahrs+0xa20>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a8f      	ldr	r2, [pc, #572]	@ (8004028 <update_ahrs+0xa20>)
 8003dec:	6812      	ldr	r2, [r2, #0]
 8003dee:	4611      	mov	r1, r2
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fc ffdf 	bl	8000db4 <__aeabi_fmul>
 8003df6:	4603      	mov	r3, r0
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	f7fc fed2 	bl	8000ba4 <__addsf3>
 8003e00:	4603      	mov	r3, r0
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fbce 	bl	80045a4 <invSqrt_>
 8003e08:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	q0 *= norm;
 8003e0c:	4b87      	ldr	r3, [pc, #540]	@ (800402c <update_ahrs+0xa24>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fc ffcd 	bl	8000db4 <__aeabi_fmul>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4b83      	ldr	r3, [pc, #524]	@ (800402c <update_ahrs+0xa24>)
 8003e20:	601a      	str	r2, [r3, #0]
	q1 *= norm;
 8003e22:	4b83      	ldr	r3, [pc, #524]	@ (8004030 <update_ahrs+0xa28>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fc ffc2 	bl	8000db4 <__aeabi_fmul>
 8003e30:	4603      	mov	r3, r0
 8003e32:	461a      	mov	r2, r3
 8003e34:	4b7e      	ldr	r3, [pc, #504]	@ (8004030 <update_ahrs+0xa28>)
 8003e36:	601a      	str	r2, [r3, #0]
	q2 *= norm;
 8003e38:	4b7a      	ldr	r3, [pc, #488]	@ (8004024 <update_ahrs+0xa1c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fc ffb7 	bl	8000db4 <__aeabi_fmul>
 8003e46:	4603      	mov	r3, r0
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4b76      	ldr	r3, [pc, #472]	@ (8004024 <update_ahrs+0xa1c>)
 8003e4c:	601a      	str	r2, [r3, #0]
	q3 *= norm;
 8003e4e:	4b76      	ldr	r3, [pc, #472]	@ (8004028 <update_ahrs+0xa20>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fc ffac 	bl	8000db4 <__aeabi_fmul>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	461a      	mov	r2, r3
 8003e60:	4b71      	ldr	r3, [pc, #452]	@ (8004028 <update_ahrs+0xa20>)
 8003e62:	601a      	str	r2, [r3, #0]
	
	float q0q1 = q0*q1;
 8003e64:	4b71      	ldr	r3, [pc, #452]	@ (800402c <update_ahrs+0xa24>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a71      	ldr	r2, [pc, #452]	@ (8004030 <update_ahrs+0xa28>)
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	4611      	mov	r1, r2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fc ffa0 	bl	8000db4 <__aeabi_fmul>
 8003e74:	4603      	mov	r3, r0
 8003e76:	63bb      	str	r3, [r7, #56]	@ 0x38
	float q0q2 = q0*q2;
 8003e78:	4b6c      	ldr	r3, [pc, #432]	@ (800402c <update_ahrs+0xa24>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a69      	ldr	r2, [pc, #420]	@ (8004024 <update_ahrs+0xa1c>)
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	4611      	mov	r1, r2
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fc ff96 	bl	8000db4 <__aeabi_fmul>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	637b      	str	r3, [r7, #52]	@ 0x34
	float q0q3 = q0*q3;
 8003e8c:	4b67      	ldr	r3, [pc, #412]	@ (800402c <update_ahrs+0xa24>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a65      	ldr	r2, [pc, #404]	@ (8004028 <update_ahrs+0xa20>)
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	4611      	mov	r1, r2
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fc ff8c 	bl	8000db4 <__aeabi_fmul>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	633b      	str	r3, [r7, #48]	@ 0x30
	float q1q1 = q1*q1;
 8003ea0:	4b63      	ldr	r3, [pc, #396]	@ (8004030 <update_ahrs+0xa28>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a62      	ldr	r2, [pc, #392]	@ (8004030 <update_ahrs+0xa28>)
 8003ea6:	6812      	ldr	r2, [r2, #0]
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fc ff82 	bl	8000db4 <__aeabi_fmul>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float q1q2 = q1*q2;
 8003eb4:	4b5e      	ldr	r3, [pc, #376]	@ (8004030 <update_ahrs+0xa28>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a5a      	ldr	r2, [pc, #360]	@ (8004024 <update_ahrs+0xa1c>)
 8003eba:	6812      	ldr	r2, [r2, #0]
 8003ebc:	4611      	mov	r1, r2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fc ff78 	bl	8000db4 <__aeabi_fmul>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
	float q1q3 = q1*q3;
 8003ec8:	4b59      	ldr	r3, [pc, #356]	@ (8004030 <update_ahrs+0xa28>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a56      	ldr	r2, [pc, #344]	@ (8004028 <update_ahrs+0xa20>)
 8003ece:	6812      	ldr	r2, [r2, #0]
 8003ed0:	4611      	mov	r1, r2
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fc ff6e 	bl	8000db4 <__aeabi_fmul>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	627b      	str	r3, [r7, #36]	@ 0x24
	float q2q2 = q2*q2;
 8003edc:	4b51      	ldr	r3, [pc, #324]	@ (8004024 <update_ahrs+0xa1c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a50      	ldr	r2, [pc, #320]	@ (8004024 <update_ahrs+0xa1c>)
 8003ee2:	6812      	ldr	r2, [r2, #0]
 8003ee4:	4611      	mov	r1, r2
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fc ff64 	bl	8000db4 <__aeabi_fmul>
 8003eec:	4603      	mov	r3, r0
 8003eee:	623b      	str	r3, [r7, #32]
	float q2q3 = q2*q3;
 8003ef0:	4b4c      	ldr	r3, [pc, #304]	@ (8004024 <update_ahrs+0xa1c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a4c      	ldr	r2, [pc, #304]	@ (8004028 <update_ahrs+0xa20>)
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	4611      	mov	r1, r2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fc ff5a 	bl	8000db4 <__aeabi_fmul>
 8003f00:	4603      	mov	r3, r0
 8003f02:	61fb      	str	r3, [r7, #28]
	float q3q3 = q3*q3;
 8003f04:	4b48      	ldr	r3, [pc, #288]	@ (8004028 <update_ahrs+0xa20>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a47      	ldr	r2, [pc, #284]	@ (8004028 <update_ahrs+0xa20>)
 8003f0a:	6812      	ldr	r2, [r2, #0]
 8003f0c:	4611      	mov	r1, r2
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fc ff50 	bl	8000db4 <__aeabi_fmul>
 8003f14:	4603      	mov	r3, r0
 8003f16:	61bb      	str	r3, [r7, #24]

	// Quaternion to Rotation matrix
	dcm[0][0] = 2.0f*(0.5f - q2q2  - q3q3);
 8003f18:	6a39      	ldr	r1, [r7, #32]
 8003f1a:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8003f1e:	f7fc fe3f 	bl	8000ba0 <__aeabi_fsub>
 8003f22:	4603      	mov	r3, r0
 8003f24:	69b9      	ldr	r1, [r7, #24]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fc fe3a 	bl	8000ba0 <__aeabi_fsub>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fc fe37 	bl	8000ba4 <__addsf3>
 8003f36:	4603      	mov	r3, r0
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8004034 <update_ahrs+0xa2c>)
 8003f3c:	601a      	str	r2, [r3, #0]
	dcm[1][0] = 2.0f*(q1q2 - q0q3);
 8003f3e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f42:	f7fc fe2d 	bl	8000ba0 <__aeabi_fsub>
 8003f46:	4603      	mov	r3, r0
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fc fe2a 	bl	8000ba4 <__addsf3>
 8003f50:	4603      	mov	r3, r0
 8003f52:	461a      	mov	r2, r3
 8003f54:	4b37      	ldr	r3, [pc, #220]	@ (8004034 <update_ahrs+0xa2c>)
 8003f56:	60da      	str	r2, [r3, #12]
	dcm[2][0] = 2.0f*(q1q3 + q0q2);
 8003f58:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003f5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f5c:	f7fc fe22 	bl	8000ba4 <__addsf3>
 8003f60:	4603      	mov	r3, r0
 8003f62:	4619      	mov	r1, r3
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fc fe1d 	bl	8000ba4 <__addsf3>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4b31      	ldr	r3, [pc, #196]	@ (8004034 <update_ahrs+0xa2c>)
 8003f70:	619a      	str	r2, [r3, #24]
	dcm[0][1] = 2.0f*(q1q2 + q0q3);
 8003f72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f76:	f7fc fe15 	bl	8000ba4 <__addsf3>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fc fe10 	bl	8000ba4 <__addsf3>
 8003f84:	4603      	mov	r3, r0
 8003f86:	461a      	mov	r2, r3
 8003f88:	4b2a      	ldr	r3, [pc, #168]	@ (8004034 <update_ahrs+0xa2c>)
 8003f8a:	605a      	str	r2, [r3, #4]
	dcm[1][1] = 2.0f*(0.5f - q1q1 - q3q3);
 8003f8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f8e:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8003f92:	f7fc fe05 	bl	8000ba0 <__aeabi_fsub>
 8003f96:	4603      	mov	r3, r0
 8003f98:	69b9      	ldr	r1, [r7, #24]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fc fe00 	bl	8000ba0 <__aeabi_fsub>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fc fdfd 	bl	8000ba4 <__addsf3>
 8003faa:	4603      	mov	r3, r0
 8003fac:	461a      	mov	r2, r3
 8003fae:	4b21      	ldr	r3, [pc, #132]	@ (8004034 <update_ahrs+0xa2c>)
 8003fb0:	611a      	str	r2, [r3, #16]
	dcm[2][1] = 2.0f*(q2q3 - q0q1);
 8003fb2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003fb4:	69f8      	ldr	r0, [r7, #28]
 8003fb6:	f7fc fdf3 	bl	8000ba0 <__aeabi_fsub>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fc fdf0 	bl	8000ba4 <__addsf3>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8004034 <update_ahrs+0xa2c>)
 8003fca:	61da      	str	r2, [r3, #28]
	dcm[0][2] = 2.0f*(q1q3 - q0q2);
 8003fcc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003fce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003fd0:	f7fc fde6 	bl	8000ba0 <__aeabi_fsub>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fc fde3 	bl	8000ba4 <__addsf3>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	4b14      	ldr	r3, [pc, #80]	@ (8004034 <update_ahrs+0xa2c>)
 8003fe4:	609a      	str	r2, [r3, #8]
	dcm[1][2] = 2.0f*(q2q3 + q0q1);
 8003fe6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003fe8:	69f8      	ldr	r0, [r7, #28]
 8003fea:	f7fc fddb 	bl	8000ba4 <__addsf3>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fc fdd6 	bl	8000ba4 <__addsf3>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8004034 <update_ahrs+0xa2c>)
 8003ffe:	615a      	str	r2, [r3, #20]
	dcm[2][2] = 2.0f*(0.5f - q1q1 - q2q2);
 8004000:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004002:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8004006:	f7fc fdcb 	bl	8000ba0 <__aeabi_fsub>
 800400a:	4603      	mov	r3, r0
 800400c:	6a39      	ldr	r1, [r7, #32]
 800400e:	4618      	mov	r0, r3
 8004010:	f7fc fdc6 	bl	8000ba0 <__aeabi_fsub>
 8004014:	4603      	mov	r3, r0
 8004016:	4619      	mov	r1, r3
 8004018:	4618      	mov	r0, r3
 800401a:	f7fc fdc3 	bl	8000ba4 <__addsf3>
 800401e:	4603      	mov	r3, r0
 8004020:	461a      	mov	r2, r3
 8004022:	e009      	b.n	8004038 <update_ahrs+0xa30>
 8004024:	20000590 	.word	0x20000590
 8004028:	20000594 	.word	0x20000594
 800402c:	20000004 	.word	0x20000004
 8004030:	2000058c 	.word	0x2000058c
 8004034:	20000598 	.word	0x20000598
 8004038:	4ba3      	ldr	r3, [pc, #652]	@ (80042c8 <update_ahrs+0xcc0>)
 800403a:	621a      	str	r2, [r3, #32]
	
    // Rotate acceleration from Body frame to earth frame
	int16_t acc_Eframex = dcm[0][0]*accx_ + dcm[1][0]*accy_ + dcm[2][0]*accz_;
 800403c:	4ba2      	ldr	r3, [pc, #648]	@ (80042c8 <update_ahrs+0xcc0>)
 800403e:	681c      	ldr	r4, [r3, #0]
 8004040:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004044:	4618      	mov	r0, r3
 8004046:	f7fc fe61 	bl	8000d0c <__aeabi_i2f>
 800404a:	4603      	mov	r3, r0
 800404c:	4619      	mov	r1, r3
 800404e:	4620      	mov	r0, r4
 8004050:	f7fc feb0 	bl	8000db4 <__aeabi_fmul>
 8004054:	4603      	mov	r3, r0
 8004056:	461d      	mov	r5, r3
 8004058:	4b9b      	ldr	r3, [pc, #620]	@ (80042c8 <update_ahrs+0xcc0>)
 800405a:	68dc      	ldr	r4, [r3, #12]
 800405c:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8004060:	4618      	mov	r0, r3
 8004062:	f7fc fe53 	bl	8000d0c <__aeabi_i2f>
 8004066:	4603      	mov	r3, r0
 8004068:	4619      	mov	r1, r3
 800406a:	4620      	mov	r0, r4
 800406c:	f7fc fea2 	bl	8000db4 <__aeabi_fmul>
 8004070:	4603      	mov	r3, r0
 8004072:	4619      	mov	r1, r3
 8004074:	4628      	mov	r0, r5
 8004076:	f7fc fd95 	bl	8000ba4 <__addsf3>
 800407a:	4603      	mov	r3, r0
 800407c:	461d      	mov	r5, r3
 800407e:	4b92      	ldr	r3, [pc, #584]	@ (80042c8 <update_ahrs+0xcc0>)
 8004080:	699c      	ldr	r4, [r3, #24]
 8004082:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 8004086:	4618      	mov	r0, r3
 8004088:	f7fc fe40 	bl	8000d0c <__aeabi_i2f>
 800408c:	4603      	mov	r3, r0
 800408e:	4619      	mov	r1, r3
 8004090:	4620      	mov	r0, r4
 8004092:	f7fc fe8f 	bl	8000db4 <__aeabi_fmul>
 8004096:	4603      	mov	r3, r0
 8004098:	4619      	mov	r1, r3
 800409a:	4628      	mov	r0, r5
 800409c:	f7fc fd82 	bl	8000ba4 <__addsf3>
 80040a0:	4603      	mov	r3, r0
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fd f862 	bl	800116c <__aeabi_f2iz>
 80040a8:	4603      	mov	r3, r0
 80040aa:	82fb      	strh	r3, [r7, #22]
	int16_t acc_Eframey = dcm[0][1]*accx_ + dcm[1][1]*accy_ + dcm[2][1]*accz_;
 80040ac:	4b86      	ldr	r3, [pc, #536]	@ (80042c8 <update_ahrs+0xcc0>)
 80040ae:	685c      	ldr	r4, [r3, #4]
 80040b0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fc fe29 	bl	8000d0c <__aeabi_i2f>
 80040ba:	4603      	mov	r3, r0
 80040bc:	4619      	mov	r1, r3
 80040be:	4620      	mov	r0, r4
 80040c0:	f7fc fe78 	bl	8000db4 <__aeabi_fmul>
 80040c4:	4603      	mov	r3, r0
 80040c6:	461d      	mov	r5, r3
 80040c8:	4b7f      	ldr	r3, [pc, #508]	@ (80042c8 <update_ahrs+0xcc0>)
 80040ca:	691c      	ldr	r4, [r3, #16]
 80040cc:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fc fe1b 	bl	8000d0c <__aeabi_i2f>
 80040d6:	4603      	mov	r3, r0
 80040d8:	4619      	mov	r1, r3
 80040da:	4620      	mov	r0, r4
 80040dc:	f7fc fe6a 	bl	8000db4 <__aeabi_fmul>
 80040e0:	4603      	mov	r3, r0
 80040e2:	4619      	mov	r1, r3
 80040e4:	4628      	mov	r0, r5
 80040e6:	f7fc fd5d 	bl	8000ba4 <__addsf3>
 80040ea:	4603      	mov	r3, r0
 80040ec:	461d      	mov	r5, r3
 80040ee:	4b76      	ldr	r3, [pc, #472]	@ (80042c8 <update_ahrs+0xcc0>)
 80040f0:	69dc      	ldr	r4, [r3, #28]
 80040f2:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fc fe08 	bl	8000d0c <__aeabi_i2f>
 80040fc:	4603      	mov	r3, r0
 80040fe:	4619      	mov	r1, r3
 8004100:	4620      	mov	r0, r4
 8004102:	f7fc fe57 	bl	8000db4 <__aeabi_fmul>
 8004106:	4603      	mov	r3, r0
 8004108:	4619      	mov	r1, r3
 800410a:	4628      	mov	r0, r5
 800410c:	f7fc fd4a 	bl	8000ba4 <__addsf3>
 8004110:	4603      	mov	r3, r0
 8004112:	4618      	mov	r0, r3
 8004114:	f7fd f82a 	bl	800116c <__aeabi_f2iz>
 8004118:	4603      	mov	r3, r0
 800411a:	82bb      	strh	r3, [r7, #20]
	int16_t acc_Eframez = dcm[0][2]*accx_ + dcm[1][2]*accy_ + dcm[2][2]*accz_;
 800411c:	4b6a      	ldr	r3, [pc, #424]	@ (80042c8 <update_ahrs+0xcc0>)
 800411e:	689c      	ldr	r4, [r3, #8]
 8004120:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004124:	4618      	mov	r0, r3
 8004126:	f7fc fdf1 	bl	8000d0c <__aeabi_i2f>
 800412a:	4603      	mov	r3, r0
 800412c:	4619      	mov	r1, r3
 800412e:	4620      	mov	r0, r4
 8004130:	f7fc fe40 	bl	8000db4 <__aeabi_fmul>
 8004134:	4603      	mov	r3, r0
 8004136:	461d      	mov	r5, r3
 8004138:	4b63      	ldr	r3, [pc, #396]	@ (80042c8 <update_ahrs+0xcc0>)
 800413a:	695c      	ldr	r4, [r3, #20]
 800413c:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8004140:	4618      	mov	r0, r3
 8004142:	f7fc fde3 	bl	8000d0c <__aeabi_i2f>
 8004146:	4603      	mov	r3, r0
 8004148:	4619      	mov	r1, r3
 800414a:	4620      	mov	r0, r4
 800414c:	f7fc fe32 	bl	8000db4 <__aeabi_fmul>
 8004150:	4603      	mov	r3, r0
 8004152:	4619      	mov	r1, r3
 8004154:	4628      	mov	r0, r5
 8004156:	f7fc fd25 	bl	8000ba4 <__addsf3>
 800415a:	4603      	mov	r3, r0
 800415c:	461d      	mov	r5, r3
 800415e:	4b5a      	ldr	r3, [pc, #360]	@ (80042c8 <update_ahrs+0xcc0>)
 8004160:	6a1c      	ldr	r4, [r3, #32]
 8004162:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 8004166:	4618      	mov	r0, r3
 8004168:	f7fc fdd0 	bl	8000d0c <__aeabi_i2f>
 800416c:	4603      	mov	r3, r0
 800416e:	4619      	mov	r1, r3
 8004170:	4620      	mov	r0, r4
 8004172:	f7fc fe1f 	bl	8000db4 <__aeabi_fmul>
 8004176:	4603      	mov	r3, r0
 8004178:	4619      	mov	r1, r3
 800417a:	4628      	mov	r0, r5
 800417c:	f7fc fd12 	bl	8000ba4 <__addsf3>
 8004180:	4603      	mov	r3, r0
 8004182:	4618      	mov	r0, r3
 8004184:	f7fc fff2 	bl	800116c <__aeabi_f2iz>
 8004188:	4603      	mov	r3, r0
 800418a:	827b      	strh	r3, [r7, #18]
	acc_Eframez -= 2000;
 800418c:	8a7b      	ldrh	r3, [r7, #18]
 800418e:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8004192:	b29b      	uxth	r3, r3
 8004194:	827b      	strh	r3, [r7, #18]


	const float accTrueScale = 9.81f/2000.0f; // 2048
 8004196:	4b4d      	ldr	r3, [pc, #308]	@ (80042cc <update_ahrs+0xcc4>)
 8004198:	60fb      	str	r3, [r7, #12]
	acc_Eframe[X] = acc_Eframex*accTrueScale;
 800419a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fc fdb4 	bl	8000d0c <__aeabi_i2f>
 80041a4:	4603      	mov	r3, r0
 80041a6:	68f9      	ldr	r1, [r7, #12]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fc fe03 	bl	8000db4 <__aeabi_fmul>
 80041ae:	4603      	mov	r3, r0
 80041b0:	461a      	mov	r2, r3
 80041b2:	4b47      	ldr	r3, [pc, #284]	@ (80042d0 <update_ahrs+0xcc8>)
 80041b4:	601a      	str	r2, [r3, #0]
	acc_Eframe[Y] = acc_Eframey*accTrueScale;
 80041b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fc fda6 	bl	8000d0c <__aeabi_i2f>
 80041c0:	4603      	mov	r3, r0
 80041c2:	68f9      	ldr	r1, [r7, #12]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7fc fdf5 	bl	8000db4 <__aeabi_fmul>
 80041ca:	4603      	mov	r3, r0
 80041cc:	461a      	mov	r2, r3
 80041ce:	4b40      	ldr	r3, [pc, #256]	@ (80042d0 <update_ahrs+0xcc8>)
 80041d0:	605a      	str	r2, [r3, #4]
	acc_Eframe[Z] = acc_Eframez*accTrueScale;
 80041d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fc fd98 	bl	8000d0c <__aeabi_i2f>
 80041dc:	4603      	mov	r3, r0
 80041de:	68f9      	ldr	r1, [r7, #12]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7fc fde7 	bl	8000db4 <__aeabi_fmul>
 80041e6:	4603      	mov	r3, r0
 80041e8:	461a      	mov	r2, r3
 80041ea:	4b39      	ldr	r3, [pc, #228]	@ (80042d0 <update_ahrs+0xcc8>)
 80041ec:	609a      	str	r2, [r3, #8]

	acc_Eframe[X] = fapplyDeadband(acc_Eframe[X],0.02);
 80041ee:	4b38      	ldr	r3, [pc, #224]	@ (80042d0 <update_ahrs+0xcc8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4938      	ldr	r1, [pc, #224]	@ (80042d4 <update_ahrs+0xccc>)
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 f9ab 	bl	8004550 <fapplyDeadband>
 80041fa:	4603      	mov	r3, r0
 80041fc:	4a34      	ldr	r2, [pc, #208]	@ (80042d0 <update_ahrs+0xcc8>)
 80041fe:	6013      	str	r3, [r2, #0]
	acc_Eframe[Y] = fapplyDeadband(acc_Eframe[Y],0.02);
 8004200:	4b33      	ldr	r3, [pc, #204]	@ (80042d0 <update_ahrs+0xcc8>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	4933      	ldr	r1, [pc, #204]	@ (80042d4 <update_ahrs+0xccc>)
 8004206:	4618      	mov	r0, r3
 8004208:	f000 f9a2 	bl	8004550 <fapplyDeadband>
 800420c:	4603      	mov	r3, r0
 800420e:	4a30      	ldr	r2, [pc, #192]	@ (80042d0 <update_ahrs+0xcc8>)
 8004210:	6053      	str	r3, [r2, #4]
	acc_Eframe[Z] = fapplyDeadband(acc_Eframe[Z],0.02);
 8004212:	4b2f      	ldr	r3, [pc, #188]	@ (80042d0 <update_ahrs+0xcc8>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	492f      	ldr	r1, [pc, #188]	@ (80042d4 <update_ahrs+0xccc>)
 8004218:	4618      	mov	r0, r3
 800421a:	f000 f999 	bl	8004550 <fapplyDeadband>
 800421e:	4603      	mov	r3, r0
 8004220:	4a2b      	ldr	r2, [pc, #172]	@ (80042d0 <update_ahrs+0xcc8>)
 8004222:	6093      	str	r3, [r2, #8]

    if(millis() - init_us < 5000){
 8004224:	4b2c      	ldr	r3, [pc, #176]	@ (80042d8 <update_ahrs+0xcd0>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800422c:	4b2b      	ldr	r3, [pc, #172]	@ (80042dc <update_ahrs+0xcd4>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4413      	add	r3, r2
 8004232:	4a2b      	ldr	r2, [pc, #172]	@ (80042e0 <update_ahrs+0xcd8>)
 8004234:	fba2 2303 	umull	r2, r3, r2, r3
 8004238:	099a      	lsrs	r2, r3, #6
 800423a:	4b2a      	ldr	r3, [pc, #168]	@ (80042e4 <update_ahrs+0xcdc>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	f241 3287 	movw	r2, #4999	@ 0x1387
 8004244:	4293      	cmp	r3, r2
 8004246:	d80b      	bhi.n	8004260 <update_ahrs+0xc58>
    	acc_Eframe[X] = 0;
 8004248:	4b21      	ldr	r3, [pc, #132]	@ (80042d0 <update_ahrs+0xcc8>)
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	601a      	str	r2, [r3, #0]
    	acc_Eframe[Y] = 0;
 8004250:	4b1f      	ldr	r3, [pc, #124]	@ (80042d0 <update_ahrs+0xcc8>)
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	605a      	str	r2, [r3, #4]
    	acc_Eframe[Z] = 0;
 8004258:	4b1d      	ldr	r3, [pc, #116]	@ (80042d0 <update_ahrs+0xcc8>)
 800425a:	f04f 0200 	mov.w	r2, #0
 800425e:	609a      	str	r2, [r3, #8]
    }

	//position_test += velocity_test*0.01f + 0.5* acc_Eframe[Z]* 0.01f * 0.01f;
	//velocity_test += acc_Eframe[Z]*0.01f;

	AHRS.pitch = -atan2_approx(-dcm[0][2],sqrtf(1 - dcm[0][2]*dcm[0][2]))*DEG;
 8004260:	4b19      	ldr	r3, [pc, #100]	@ (80042c8 <update_ahrs+0xcc0>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8004268:	4b17      	ldr	r3, [pc, #92]	@ (80042c8 <update_ahrs+0xcc0>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	4a16      	ldr	r2, [pc, #88]	@ (80042c8 <update_ahrs+0xcc0>)
 800426e:	6892      	ldr	r2, [r2, #8]
 8004270:	4611      	mov	r1, r2
 8004272:	4618      	mov	r0, r3
 8004274:	f7fc fd9e 	bl	8000db4 <__aeabi_fmul>
 8004278:	4603      	mov	r3, r0
 800427a:	4619      	mov	r1, r3
 800427c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004280:	f7fc fc8e 	bl	8000ba0 <__aeabi_fsub>
 8004284:	4603      	mov	r3, r0
 8004286:	4618      	mov	r0, r3
 8004288:	f010 fdad 	bl	8014de6 <sqrtf>
 800428c:	4603      	mov	r3, r0
 800428e:	4619      	mov	r1, r3
 8004290:	4620      	mov	r0, r4
 8004292:	f000 f89d 	bl	80043d0 <atan2_approx>
 8004296:	4603      	mov	r3, r0
 8004298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800429c:	4912      	ldr	r1, [pc, #72]	@ (80042e8 <update_ahrs+0xce0>)
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fc fd88 	bl	8000db4 <__aeabi_fmul>
 80042a4:	4603      	mov	r3, r0
 80042a6:	461a      	mov	r2, r3
 80042a8:	4b10      	ldr	r3, [pc, #64]	@ (80042ec <update_ahrs+0xce4>)
 80042aa:	605a      	str	r2, [r3, #4]
	AHRS.roll = -atan2_approx(-dcm[1][2],dcm[2][2])*DEG;
 80042ac:	4b06      	ldr	r3, [pc, #24]	@ (80042c8 <update_ahrs+0xcc0>)
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80042b4:	4a04      	ldr	r2, [pc, #16]	@ (80042c8 <update_ahrs+0xcc0>)
 80042b6:	6a12      	ldr	r2, [r2, #32]
 80042b8:	4611      	mov	r1, r2
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 f888 	bl	80043d0 <atan2_approx>
 80042c0:	4603      	mov	r3, r0
 80042c2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80042c6:	e013      	b.n	80042f0 <update_ahrs+0xce8>
 80042c8:	20000598 	.word	0x20000598
 80042cc:	3ba0ba20 	.word	0x3ba0ba20
 80042d0:	20000580 	.word	0x20000580
 80042d4:	3ca3d70a 	.word	0x3ca3d70a
 80042d8:	200005dc 	.word	0x200005dc
 80042dc:	200005e0 	.word	0x200005e0
 80042e0:	10624dd3 	.word	0x10624dd3
 80042e4:	200005bc 	.word	0x200005bc
 80042e8:	42652ee0 	.word	0x42652ee0
 80042ec:	2000055c 	.word	0x2000055c
 80042f0:	4932      	ldr	r1, [pc, #200]	@ (80043bc <update_ahrs+0xdb4>)
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fc fd5e 	bl	8000db4 <__aeabi_fmul>
 80042f8:	4603      	mov	r3, r0
 80042fa:	461a      	mov	r2, r3
 80042fc:	4b30      	ldr	r3, [pc, #192]	@ (80043c0 <update_ahrs+0xdb8>)
 80042fe:	601a      	str	r2, [r3, #0]
	float yaw_ = -atan2_approx(dcm[0][1],dcm[0][0])*DEG;
 8004300:	4b30      	ldr	r3, [pc, #192]	@ (80043c4 <update_ahrs+0xdbc>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	4a2f      	ldr	r2, [pc, #188]	@ (80043c4 <update_ahrs+0xdbc>)
 8004306:	6812      	ldr	r2, [r2, #0]
 8004308:	4611      	mov	r1, r2
 800430a:	4618      	mov	r0, r3
 800430c:	f000 f860 	bl	80043d0 <atan2_approx>
 8004310:	4603      	mov	r3, r0
 8004312:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004316:	4929      	ldr	r1, [pc, #164]	@ (80043bc <update_ahrs+0xdb4>)
 8004318:	4618      	mov	r0, r3
 800431a:	f7fc fd4b 	bl	8000db4 <__aeabi_fmul>
 800431e:	4603      	mov	r3, r0
 8004320:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	if(yaw_ < 0){
 8004324:	f04f 0100 	mov.w	r1, #0
 8004328:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 800432c:	f7fc fee0 	bl	80010f0 <__aeabi_fcmplt>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d007      	beq.n	8004346 <update_ahrs+0xd3e>
		 yaw_ = 360 + yaw_;
 8004336:	4924      	ldr	r1, [pc, #144]	@ (80043c8 <update_ahrs+0xdc0>)
 8004338:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 800433c:	f7fc fc32 	bl	8000ba4 <__addsf3>
 8004340:	4603      	mov	r3, r0
 8004342:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	}
	AHRS.yaw =  yaw_;
 8004346:	4a1e      	ldr	r2, [pc, #120]	@ (80043c0 <update_ahrs+0xdb8>)
 8004348:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800434c:	6093      	str	r3, [r2, #8]
	AHRS.roll_rate  = gx_/config.gyr_lsb;
 800434e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004352:	4618      	mov	r0, r3
 8004354:	f7fc fcda 	bl	8000d0c <__aeabi_i2f>
 8004358:	4602      	mov	r2, r0
 800435a:	4b1c      	ldr	r3, [pc, #112]	@ (80043cc <update_ahrs+0xdc4>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	4619      	mov	r1, r3
 8004360:	4610      	mov	r0, r2
 8004362:	f7fc fddb 	bl	8000f1c <__aeabi_fdiv>
 8004366:	4603      	mov	r3, r0
 8004368:	461a      	mov	r2, r3
 800436a:	4b15      	ldr	r3, [pc, #84]	@ (80043c0 <update_ahrs+0xdb8>)
 800436c:	60da      	str	r2, [r3, #12]
	AHRS.pitch_rate = -gy_/config.gyr_lsb;
 800436e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004372:	425b      	negs	r3, r3
 8004374:	4618      	mov	r0, r3
 8004376:	f7fc fcc9 	bl	8000d0c <__aeabi_i2f>
 800437a:	4602      	mov	r2, r0
 800437c:	4b13      	ldr	r3, [pc, #76]	@ (80043cc <update_ahrs+0xdc4>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	4619      	mov	r1, r3
 8004382:	4610      	mov	r0, r2
 8004384:	f7fc fdca 	bl	8000f1c <__aeabi_fdiv>
 8004388:	4603      	mov	r3, r0
 800438a:	461a      	mov	r2, r3
 800438c:	4b0c      	ldr	r3, [pc, #48]	@ (80043c0 <update_ahrs+0xdb8>)
 800438e:	611a      	str	r2, [r3, #16]
	AHRS.yaw_rate   = -gz_/config.gyr_lsb;
 8004390:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004394:	425b      	negs	r3, r3
 8004396:	4618      	mov	r0, r3
 8004398:	f7fc fcb8 	bl	8000d0c <__aeabi_i2f>
 800439c:	4602      	mov	r2, r0
 800439e:	4b0b      	ldr	r3, [pc, #44]	@ (80043cc <update_ahrs+0xdc4>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	4619      	mov	r1, r3
 80043a4:	4610      	mov	r0, r2
 80043a6:	f7fc fdb9 	bl	8000f1c <__aeabi_fdiv>
 80043aa:	4603      	mov	r3, r0
 80043ac:	461a      	mov	r2, r3
 80043ae:	4b04      	ldr	r3, [pc, #16]	@ (80043c0 <update_ahrs+0xdb8>)
 80043b0:	615a      	str	r2, [r3, #20]

}
 80043b2:	bf00      	nop
 80043b4:	37a0      	adds	r7, #160	@ 0xa0
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bdb0      	pop	{r4, r5, r7, pc}
 80043ba:	bf00      	nop
 80043bc:	42652ee0 	.word	0x42652ee0
 80043c0:	2000055c 	.word	0x2000055c
 80043c4:	20000598 	.word	0x20000598
 80043c8:	43b40000 	.word	0x43b40000
 80043cc:	20000008 	.word	0x20000008

080043d0 <atan2_approx>:
// Initial implementation by Crashpilot1000 (https://github.com/Crashpilot1000/HarakiriWebstore1/blob/396715f73c6fcf859e0db0f34e12fe44bace6483/src/mw.c#L1292)
// Polynomial coefficients by Andor (http://www.dsprelated.com/showthread/comp.dsp/21872-1.php) optimized by Ledvinap to save one multiplication
// Max absolute error 0,000027 degree
// atan2_approx maximum absolute error = 7.152557e-07 rads (4.098114e-05 degree)
float atan2_approx(float y, float x)
{
 80043d0:	b590      	push	{r4, r7, lr}
 80043d2:	b08b      	sub	sp, #44	@ 0x2c
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043e0:	623b      	str	r3, [r7, #32]
    absY = fabsf(y);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043e8:	61fb      	str	r3, [r7, #28]
    res  = MAX(absX, absY);
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	61bb      	str	r3, [r7, #24]
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	6979      	ldr	r1, [r7, #20]
 80043f4:	69b8      	ldr	r0, [r7, #24]
 80043f6:	f7fc fe99 	bl	800112c <__aeabi_fcmpgt>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <atan2_approx+0x34>
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	e000      	b.n	8004406 <atan2_approx+0x36>
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	627b      	str	r3, [r7, #36]	@ 0x24
    if (res) res = MIN(absX, absY) / res;
 8004408:	f04f 0100 	mov.w	r1, #0
 800440c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800440e:	f7fc fe65 	bl	80010dc <__aeabi_fcmpeq>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d114      	bne.n	8004442 <atan2_approx+0x72>
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	613b      	str	r3, [r7, #16]
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	68f9      	ldr	r1, [r7, #12]
 8004422:	6938      	ldr	r0, [r7, #16]
 8004424:	f7fc fe64 	bl	80010f0 <__aeabi_fcmplt>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <atan2_approx+0x62>
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	e000      	b.n	8004434 <atan2_approx+0x64>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004436:	4618      	mov	r0, r3
 8004438:	f7fc fd70 	bl	8000f1c <__aeabi_fdiv>
 800443c:	4603      	mov	r3, r0
 800443e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004440:	e002      	b.n	8004448 <atan2_approx+0x78>
    else res = 0.0f;
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	627b      	str	r3, [r7, #36]	@ 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 8004448:	4938      	ldr	r1, [pc, #224]	@ (800452c <atan2_approx+0x15c>)
 800444a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800444c:	f7fc fcb2 	bl	8000db4 <__aeabi_fmul>
 8004450:	4603      	mov	r3, r0
 8004452:	4937      	ldr	r1, [pc, #220]	@ (8004530 <atan2_approx+0x160>)
 8004454:	4618      	mov	r0, r3
 8004456:	f7fc fba3 	bl	8000ba0 <__aeabi_fsub>
 800445a:	4603      	mov	r3, r0
 800445c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800445e:	4618      	mov	r0, r3
 8004460:	f7fc fca8 	bl	8000db4 <__aeabi_fmul>
 8004464:	4603      	mov	r3, r0
 8004466:	4933      	ldr	r1, [pc, #204]	@ (8004534 <atan2_approx+0x164>)
 8004468:	4618      	mov	r0, r3
 800446a:	f7fc fb99 	bl	8000ba0 <__aeabi_fsub>
 800446e:	4603      	mov	r3, r0
 8004470:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004472:	4618      	mov	r0, r3
 8004474:	f7fc fc9e 	bl	8000db4 <__aeabi_fmul>
 8004478:	4603      	mov	r3, r0
 800447a:	492f      	ldr	r1, [pc, #188]	@ (8004538 <atan2_approx+0x168>)
 800447c:	4618      	mov	r0, r3
 800447e:	f7fc fb8f 	bl	8000ba0 <__aeabi_fsub>
 8004482:	4603      	mov	r3, r0
 8004484:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004486:	4618      	mov	r0, r3
 8004488:	f7fc fc94 	bl	8000db4 <__aeabi_fmul>
 800448c:	4603      	mov	r3, r0
 800448e:	492b      	ldr	r1, [pc, #172]	@ (800453c <atan2_approx+0x16c>)
 8004490:	4618      	mov	r0, r3
 8004492:	f7fc fb85 	bl	8000ba0 <__aeabi_fsub>
 8004496:	4603      	mov	r3, r0
 8004498:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 800449c:	4928      	ldr	r1, [pc, #160]	@ (8004540 <atan2_approx+0x170>)
 800449e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80044a0:	f7fc fc88 	bl	8000db4 <__aeabi_fmul>
 80044a4:	4603      	mov	r3, r0
 80044a6:	4927      	ldr	r1, [pc, #156]	@ (8004544 <atan2_approx+0x174>)
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fc fb7b 	bl	8000ba4 <__addsf3>
 80044ae:	4603      	mov	r3, r0
 80044b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fc fc7e 	bl	8000db4 <__aeabi_fmul>
 80044b8:	4603      	mov	r3, r0
 80044ba:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fc fb70 	bl	8000ba4 <__addsf3>
 80044c4:	4603      	mov	r3, r0
 80044c6:	4619      	mov	r1, r3
 80044c8:	4620      	mov	r0, r4
 80044ca:	f7fc fd27 	bl	8000f1c <__aeabi_fdiv>
 80044ce:	4603      	mov	r3, r0
 80044d0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 80044d2:	6a39      	ldr	r1, [r7, #32]
 80044d4:	69f8      	ldr	r0, [r7, #28]
 80044d6:	f7fc fe29 	bl	800112c <__aeabi_fcmpgt>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <atan2_approx+0x11c>
 80044e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044e2:	4819      	ldr	r0, [pc, #100]	@ (8004548 <atan2_approx+0x178>)
 80044e4:	f7fc fb5c 	bl	8000ba0 <__aeabi_fsub>
 80044e8:	4603      	mov	r3, r0
 80044ea:	627b      	str	r3, [r7, #36]	@ 0x24
    if (x < 0) res = M_PIf - res;
 80044ec:	f04f 0100 	mov.w	r1, #0
 80044f0:	6838      	ldr	r0, [r7, #0]
 80044f2:	f7fc fdfd 	bl	80010f0 <__aeabi_fcmplt>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <atan2_approx+0x138>
 80044fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044fe:	4813      	ldr	r0, [pc, #76]	@ (800454c <atan2_approx+0x17c>)
 8004500:	f7fc fb4e 	bl	8000ba0 <__aeabi_fsub>
 8004504:	4603      	mov	r3, r0
 8004506:	627b      	str	r3, [r7, #36]	@ 0x24
    if (y < 0) res = -res;
 8004508:	f04f 0100 	mov.w	r1, #0
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7fc fdef 	bl	80010f0 <__aeabi_fcmplt>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <atan2_approx+0x150>
 8004518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800451e:	627b      	str	r3, [r7, #36]	@ 0x24
    return res;
 8004520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004522:	4618      	mov	r0, r3
 8004524:	372c      	adds	r7, #44	@ 0x2c
 8004526:	46bd      	mov	sp, r7
 8004528:	bd90      	pop	{r4, r7, pc}
 800452a:	bf00      	nop
 800452c:	3d4e0939 	.word	0x3d4e0939
 8004530:	3e9eb5e3 	.word	0x3e9eb5e3
 8004534:	3e16fa88 	.word	0x3e16fa88
 8004538:	3f7ffe45 	.word	0x3f7ffe45
 800453c:	34a8dfa7 	.word	0x34a8dfa7
 8004540:	3f24fb99 	.word	0x3f24fb99
 8004544:	3e16a269 	.word	0x3e16a269
 8004548:	3fc90fdb 	.word	0x3fc90fdb
 800454c:	40490fdb 	.word	0x40490fdb

08004550 <fapplyDeadband>:

    return value >= 0 ? value - deadband : value + deadband;
}

float fapplyDeadband(const float value, const float deadband)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
    if (fabsf(value) < deadband) {
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004560:	4619      	mov	r1, r3
 8004562:	6838      	ldr	r0, [r7, #0]
 8004564:	f7fc fde2 	bl	800112c <__aeabi_fcmpgt>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <fapplyDeadband+0x24>
        return 0;
 800456e:	f04f 0300 	mov.w	r3, #0
 8004572:	e012      	b.n	800459a <fapplyDeadband+0x4a>
    }

    return value >= 0 ? value - deadband : value + deadband;
 8004574:	f04f 0100 	mov.w	r1, #0
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7fc fdcd 	bl	8001118 <__aeabi_fcmpge>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d005      	beq.n	8004590 <fapplyDeadband+0x40>
 8004584:	6839      	ldr	r1, [r7, #0]
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7fc fb0a 	bl	8000ba0 <__aeabi_fsub>
 800458c:	4603      	mov	r3, r0
 800458e:	e004      	b.n	800459a <fapplyDeadband+0x4a>
 8004590:	6839      	ldr	r1, [r7, #0]
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fc fb06 	bl	8000ba4 <__addsf3>
 8004598:	4603      	mov	r3, r0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <invSqrt_>:
    return (num << 12) / den;
}


float invSqrt_(float x)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 80045ac:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7fc fbff 	bl	8000db4 <__aeabi_fmul>
 80045b6:	4603      	mov	r3, r0
 80045b8:	617b      	str	r3, [r7, #20]
	float y = x;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80045be:	f107 0310 	add.w	r3, r7, #16
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	105a      	asrs	r2, r3, #1
 80045ca:	4b13      	ldr	r3, [pc, #76]	@ (8004618 <invSqrt_+0x74>)
 80045cc:	1a9b      	subs	r3, r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80045d0:	f107 030c 	add.w	r3, r7, #12
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	6979      	ldr	r1, [r7, #20]
 80045dc:	4618      	mov	r0, r3
 80045de:	f7fc fbe9 	bl	8000db4 <__aeabi_fmul>
 80045e2:	4603      	mov	r3, r0
 80045e4:	461a      	mov	r2, r3
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	4619      	mov	r1, r3
 80045ea:	4610      	mov	r0, r2
 80045ec:	f7fc fbe2 	bl	8000db4 <__aeabi_fmul>
 80045f0:	4603      	mov	r3, r0
 80045f2:	4619      	mov	r1, r3
 80045f4:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 80045f8:	f7fc fad2 	bl	8000ba0 <__aeabi_fsub>
 80045fc:	4603      	mov	r3, r0
 80045fe:	461a      	mov	r2, r3
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	4619      	mov	r1, r3
 8004604:	4610      	mov	r0, r2
 8004606:	f7fc fbd5 	bl	8000db4 <__aeabi_fmul>
 800460a:	4603      	mov	r3, r0
 800460c:	613b      	str	r3, [r7, #16]
	//y = y * (1.5f - (halfx * y * y));
	return y;
 800460e:	693b      	ldr	r3, [r7, #16]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	5f3759df 	.word	0x5f3759df

0800461c <constrainf>:
    else
        return amt;
}

static inline float constrainf(float amt, float low, float high)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8004628:	68b9      	ldr	r1, [r7, #8]
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f7fc fd60 	bl	80010f0 <__aeabi_fcmplt>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <constrainf+0x1e>
        return low;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	e009      	b.n	800464e <constrainf+0x32>
    else if (amt > high)
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f7fc fd75 	bl	800112c <__aeabi_fcmpgt>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <constrainf+0x30>
        return high;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	e000      	b.n	800464e <constrainf+0x32>
    else
        return amt;
 800464c:	68fb      	ldr	r3, [r7, #12]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <pt1FilterGain>:
//#include "scheduler.h"
#include"maths.h"
#include"math.h"

// 1oder
static inline float pt1FilterGain(float f_cut, float dT){
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
    float RC = 1 / (2 * M_PIf * f_cut);
 8004662:	490d      	ldr	r1, [pc, #52]	@ (8004698 <pt1FilterGain+0x40>)
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7fc fba5 	bl	8000db4 <__aeabi_fmul>
 800466a:	4603      	mov	r3, r0
 800466c:	4619      	mov	r1, r3
 800466e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004672:	f7fc fc53 	bl	8000f1c <__aeabi_fdiv>
 8004676:	4603      	mov	r3, r0
 8004678:	60fb      	str	r3, [r7, #12]
    return dT/ (RC + dT);
 800467a:	6839      	ldr	r1, [r7, #0]
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f7fc fa91 	bl	8000ba4 <__addsf3>
 8004682:	4603      	mov	r3, r0
 8004684:	4619      	mov	r1, r3
 8004686:	6838      	ldr	r0, [r7, #0]
 8004688:	f7fc fc48 	bl	8000f1c <__aeabi_fdiv>
 800468c:	4603      	mov	r3, r0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	40c90fdb 	.word	0x40c90fdb

0800469c <pid_init>:
#include "filter.h"
#include "maths.h"
#include "timer.h"
#include "string.h"

void pid_init(pid_t  *pid_in,float kp, float ki, float kd,float f_cut_err, float f_cut_D, float maxI){
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	603b      	str	r3, [r7, #0]
  memset(pid_in,0,sizeof(pid_t));
 80046aa:	222c      	movs	r2, #44	@ 0x2c
 80046ac:	2100      	movs	r1, #0
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f010 fad6 	bl	8014c60 <memset>
  pid_in->err = 0.0f;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f04f 0200 	mov.w	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
  pid_in->err_fcut = f_cut_err;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	605a      	str	r2, [r3, #4]
  pid_in->kp = kp;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	609a      	str	r2, [r3, #8]
  pid_in->ki = ki;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	60da      	str	r2, [r3, #12]
  pid_in->kd = kd;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	611a      	str	r2, [r3, #16]
  pid_in->f_cut_D = f_cut_D;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	69fa      	ldr	r2, [r7, #28]
 80046d8:	625a      	str	r2, [r3, #36]	@ 0x24
  pid_in->I_range = maxI;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a3a      	ldr	r2, [r7, #32]
 80046de:	621a      	str	r2, [r3, #32]
  pid_in->last_input = 0;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	619a      	str	r2, [r3, #24]
  pid_in->D_filted = 0;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	61da      	str	r2, [r3, #28]
  pid_in->init = 1;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 80046f8:	bf00      	nop
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <pid_calculate>:

float pid_calculate(pid_t *pid_in,float measurement, float setpoint,float scaler,float dt){
 8004700:	b590      	push	{r4, r7, lr}
 8004702:	b089      	sub	sp, #36	@ 0x24
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
 800470c:	603b      	str	r3, [r7, #0]
   if(pid_in->init){
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004714:	2b00      	cmp	r3, #0
 8004716:	d009      	beq.n	800472c <pid_calculate+0x2c>
       pid_in->last_input = measurement;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	619a      	str	r2, [r3, #24]
       pid_in->init = 0;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
       return 0.0f;
 8004726:	f04f 0300 	mov.w	r3, #0
 800472a:	e0b8      	b.n	800489e <pid_calculate+0x19e>
   }
   // Caculate P term
   float error = setpoint - measurement;
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fc fa36 	bl	8000ba0 <__aeabi_fsub>
 8004734:	4603      	mov	r3, r0
 8004736:	61bb      	str	r3, [r7, #24]
   pid_in->err += pt1FilterGain(pid_in->err_fcut,dt)*(error - pid_in->err);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff ff8a 	bl	8004658 <pt1FilterGain>
 8004744:	4604      	mov	r4, r0
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4619      	mov	r1, r3
 800474c:	69b8      	ldr	r0, [r7, #24]
 800474e:	f7fc fa27 	bl	8000ba0 <__aeabi_fsub>
 8004752:	4603      	mov	r3, r0
 8004754:	4619      	mov	r1, r3
 8004756:	4620      	mov	r0, r4
 8004758:	f7fc fb2c 	bl	8000db4 <__aeabi_fmul>
 800475c:	4603      	mov	r3, r0
 800475e:	461a      	mov	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4619      	mov	r1, r3
 8004766:	4610      	mov	r0, r2
 8004768:	f7fc fa1c 	bl	8000ba4 <__addsf3>
 800476c:	4603      	mov	r3, r0
 800476e:	461a      	mov	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	601a      	str	r2, [r3, #0]
   float output = pid_in->err*pid_in->kp*scaler;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	4619      	mov	r1, r3
 800477e:	4610      	mov	r0, r2
 8004780:	f7fc fb18 	bl	8000db4 <__aeabi_fmul>
 8004784:	4603      	mov	r3, r0
 8004786:	4619      	mov	r1, r3
 8004788:	6838      	ldr	r0, [r7, #0]
 800478a:	f7fc fb13 	bl	8000db4 <__aeabi_fmul>
 800478e:	4603      	mov	r3, r0
 8004790:	61fb      	str	r3, [r7, #28]

   // Caculate I term
   if(pid_in->ki > 0){
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f04f 0100 	mov.w	r1, #0
 800479a:	4618      	mov	r0, r3
 800479c:	f7fc fcc6 	bl	800112c <__aeabi_fcmpgt>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d02d      	beq.n	8004802 <pid_calculate+0x102>
      pid_in->i_term += pid_in->err *pid_in->ki *dt;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	695c      	ldr	r4, [r3, #20]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	4619      	mov	r1, r3
 80047b4:	4610      	mov	r0, r2
 80047b6:	f7fc fafd 	bl	8000db4 <__aeabi_fmul>
 80047ba:	4603      	mov	r3, r0
 80047bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fc faf8 	bl	8000db4 <__aeabi_fmul>
 80047c4:	4603      	mov	r3, r0
 80047c6:	4619      	mov	r1, r3
 80047c8:	4620      	mov	r0, r4
 80047ca:	f7fc f9eb 	bl	8000ba4 <__addsf3>
 80047ce:	4603      	mov	r3, r0
 80047d0:	461a      	mov	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	615a      	str	r2, [r3, #20]
      pid_in->i_term = constrainf(pid_in->i_term,-pid_in->I_range,pid_in->I_range);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6958      	ldr	r0, [r3, #20]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	461a      	mov	r2, r3
 80047e8:	f7ff ff18 	bl	800461c <constrainf>
 80047ec:	4602      	mov	r2, r0
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	615a      	str	r2, [r3, #20]
      output += pid_in->i_term;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	4619      	mov	r1, r3
 80047f8:	69f8      	ldr	r0, [r7, #28]
 80047fa:	f7fc f9d3 	bl	8000ba4 <__addsf3>
 80047fe:	4603      	mov	r3, r0
 8004800:	61fb      	str	r3, [r7, #28]
   }
   // Caculate D term
   if(pid_in->kd > 0){
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f04f 0100 	mov.w	r1, #0
 800480a:	4618      	mov	r0, r3
 800480c:	f7fc fc8e 	bl	800112c <__aeabi_fcmpgt>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d042      	beq.n	800489c <pid_calculate+0x19c>
        float delta =  (measurement - pid_in->last_input)*pid_in->kd/dt;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	4619      	mov	r1, r3
 800481c:	68b8      	ldr	r0, [r7, #8]
 800481e:	f7fc f9bf 	bl	8000ba0 <__aeabi_fsub>
 8004822:	4603      	mov	r3, r0
 8004824:	461a      	mov	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	4619      	mov	r1, r3
 800482c:	4610      	mov	r0, r2
 800482e:	f7fc fac1 	bl	8000db4 <__aeabi_fmul>
 8004832:	4603      	mov	r3, r0
 8004834:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004836:	4618      	mov	r0, r3
 8004838:	f7fc fb70 	bl	8000f1c <__aeabi_fdiv>
 800483c:	4603      	mov	r3, r0
 800483e:	617b      	str	r3, [r7, #20]
        pid_in->last_input = measurement;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	619a      	str	r2, [r3, #24]
        // low pass filter
        pid_in->D_filted += pt1FilterGain(pid_in->f_cut_D,dt)*(delta - pid_in->D_filted);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff ff03 	bl	8004658 <pt1FilterGain>
 8004852:	4604      	mov	r4, r0
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	4619      	mov	r1, r3
 800485a:	6978      	ldr	r0, [r7, #20]
 800485c:	f7fc f9a0 	bl	8000ba0 <__aeabi_fsub>
 8004860:	4603      	mov	r3, r0
 8004862:	4619      	mov	r1, r3
 8004864:	4620      	mov	r0, r4
 8004866:	f7fc faa5 	bl	8000db4 <__aeabi_fmul>
 800486a:	4603      	mov	r3, r0
 800486c:	461a      	mov	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	4619      	mov	r1, r3
 8004874:	4610      	mov	r0, r2
 8004876:	f7fc f995 	bl	8000ba4 <__addsf3>
 800487a:	4603      	mov	r3, r0
 800487c:	461a      	mov	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	61da      	str	r2, [r3, #28]
        output -= pid_in->D_filted*scaler;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	6839      	ldr	r1, [r7, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	f7fc fa93 	bl	8000db4 <__aeabi_fmul>
 800488e:	4603      	mov	r3, r0
 8004890:	4619      	mov	r1, r3
 8004892:	69f8      	ldr	r0, [r7, #28]
 8004894:	f7fc f984 	bl	8000ba0 <__aeabi_fsub>
 8004898:	4603      	mov	r3, r0
 800489a:	61fb      	str	r3, [r7, #28]
   }
   return output;
 800489c:	69fb      	ldr	r3, [r7, #28]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3724      	adds	r7, #36	@ 0x24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd90      	pop	{r4, r7, pc}

080048a6 <constrain>:
{
 80048a6:	b480      	push	{r7}
 80048a8:	b085      	sub	sp, #20
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	60f8      	str	r0, [r7, #12]
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	607a      	str	r2, [r7, #4]
    if (amt < low)
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	da01      	bge.n	80048be <constrain+0x18>
        return low;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	e006      	b.n	80048cc <constrain+0x26>
    else if (amt > high)
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	dd01      	ble.n	80048ca <constrain+0x24>
        return high;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	e000      	b.n	80048cc <constrain+0x26>
        return amt;
 80048ca:	68fb      	ldr	r3, [r7, #12]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bc80      	pop	{r7}
 80048d4:	4770      	bx	lr
	...

080048d8 <initPWM>:
uint8_t pwm_lock_status;

/*
 * init pwm 
 */
void initPWM(TIM_HandleTypeDef *htim){
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
	htimm = htim;
 80048e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004954 <initPWM+0x7c>)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6013      	str	r3, [r2, #0]
	pr_status = 1;
 80048e6:	4b1c      	ldr	r3, [pc, #112]	@ (8004958 <initPWM+0x80>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	701a      	strb	r2, [r3, #0]
	pwm_lock_status = 0;
 80048ec:	4b1b      	ldr	r3, [pc, #108]	@ (800495c <initPWM+0x84>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	701a      	strb	r2, [r3, #0]
	pwm_last_update_ms= 0;
 80048f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004960 <initPWM+0x88>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(htim,ch1);
 80048f8:	2100      	movs	r1, #0
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f007 fa10 	bl	800bd20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch2);
 8004900:	2104      	movs	r1, #4
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f007 fa0c 	bl	800bd20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch3);
 8004908:	2108      	movs	r1, #8
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f007 fa08 	bl	800bd20 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(htim,ch4);
	__HAL_TIM_SetAutoreload(htimm,PWM_RELOAD_AFFTER);
 8004910:	4b10      	ldr	r3, [pc, #64]	@ (8004954 <initPWM+0x7c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f242 7210 	movw	r2, #10000	@ 0x2710
 800491a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800491c:	4b0d      	ldr	r3, [pc, #52]	@ (8004954 <initPWM+0x7c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004924:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SetCompare (htimm,ch1,1000);
 8004926:	4b0b      	ldr	r3, [pc, #44]	@ (8004954 <initPWM+0x7c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004930:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SetCompare (htimm,ch2,1500);
 8004932:	4b08      	ldr	r3, [pc, #32]	@ (8004954 <initPWM+0x7c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800493c:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SetCompare (htimm,ch3,1500);
 800493e:	4b05      	ldr	r3, [pc, #20]	@ (8004954 <initPWM+0x7c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004948:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800494a:	bf00      	nop
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	200005d0 	.word	0x200005d0
 8004958:	200005d8 	.word	0x200005d8
 800495c:	200005d9 	.word	0x200005d9
 8004960:	200005d4 	.word	0x200005d4

08004964 <writePwm>:


void writePwm(uint32_t Channel,int16_t dulty,int8_t invert)
{     if( invert){
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	460b      	mov	r3, r1
 800496e:	807b      	strh	r3, [r7, #2]
 8004970:	4613      	mov	r3, r2
 8004972:	707b      	strb	r3, [r7, #1]
 8004974:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d009      	beq.n	8004990 <writePwm+0x2c>
	    dulty -= 1000;
 800497c:	887b      	ldrh	r3, [r7, #2]
 800497e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8004982:	b29b      	uxth	r3, r3
 8004984:	807b      	strh	r3, [r7, #2]
	    dulty  = 2000 - dulty; 
 8004986:	887b      	ldrh	r3, [r7, #2]
 8004988:	f5c3 63fa 	rsb	r3, r3, #2000	@ 0x7d0
 800498c:	b29b      	uxth	r3, r3
 800498e:	807b      	strh	r3, [r7, #2]
      }
	  dulty = constrain(dulty,1000,2000);
 8004990:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004994:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004998:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff ff82 	bl	80048a6 <constrain>
 80049a2:	4603      	mov	r3, r0
 80049a4:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d106      	bne.n	80049ba <writePwm+0x56>
 80049ac:	4b12      	ldr	r3, [pc, #72]	@ (80049f8 <writePwm+0x94>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80049b6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80049b8:	e019      	b.n	80049ee <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d106      	bne.n	80049ce <writePwm+0x6a>
 80049c0:	4b0d      	ldr	r3, [pc, #52]	@ (80049f8 <writePwm+0x94>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80049ca:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80049cc:	e00f      	b.n	80049ee <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d106      	bne.n	80049e2 <writePwm+0x7e>
 80049d4:	4b08      	ldr	r3, [pc, #32]	@ (80049f8 <writePwm+0x94>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80049de:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80049e0:	e005      	b.n	80049ee <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 80049e2:	4b05      	ldr	r3, [pc, #20]	@ (80049f8 <writePwm+0x94>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80049ec:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80049ee:	bf00      	nop
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	200005d0 	.word	0x200005d0

080049fc <write_pwm_ctrl>:

void write_pwm_ctrl(uint16_t throtlle,uint16_t servoL,uint16_t servoR){
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	80fb      	strh	r3, [r7, #6]
 8004a06:	460b      	mov	r3, r1
 8004a08:	80bb      	strh	r3, [r7, #4]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	807b      	strh	r3, [r7, #2]
      if(pr_status || pwm_lock_status){
 8004a0e:	4b17      	ldr	r3, [pc, #92]	@ (8004a6c <write_pwm_ctrl+0x70>)
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d103      	bne.n	8004a1e <write_pwm_ctrl+0x22>
 8004a16:	4b16      	ldr	r3, [pc, #88]	@ (8004a70 <write_pwm_ctrl+0x74>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d008      	beq.n	8004a30 <write_pwm_ctrl+0x34>
           pwm_last_update_ms = HAL_GetTick();
 8004a1e:	f002 feff 	bl	8007820 <HAL_GetTick>
 8004a22:	4603      	mov	r3, r0
 8004a24:	4a13      	ldr	r2, [pc, #76]	@ (8004a74 <write_pwm_ctrl+0x78>)
 8004a26:	6013      	str	r3, [r2, #0]
		   pr_status = 0;
 8004a28:	4b10      	ldr	r3, [pc, #64]	@ (8004a6c <write_pwm_ctrl+0x70>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	701a      	strb	r2, [r3, #0]
		   return;
 8004a2e:	e019      	b.n	8004a64 <write_pwm_ctrl+0x68>
	  }
	 writePwm(TIM_CHANNEL_1,throtlle,INVERT);
 8004a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a34:	2201      	movs	r2, #1
 8004a36:	4619      	mov	r1, r3
 8004a38:	2000      	movs	r0, #0
 8004a3a:	f7ff ff93 	bl	8004964 <writePwm>
     writePwm(TIM_CHANNEL_2,servoL,INVERT);
 8004a3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	4619      	mov	r1, r3
 8004a46:	2004      	movs	r0, #4
 8004a48:	f7ff ff8c 	bl	8004964 <writePwm>
     writePwm(TIM_CHANNEL_3,servoR,NOT_INVERT);
 8004a4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a50:	2200      	movs	r2, #0
 8004a52:	4619      	mov	r1, r3
 8004a54:	2008      	movs	r0, #8
 8004a56:	f7ff ff85 	bl	8004964 <writePwm>
	pwm_last_update_ms = HAL_GetTick();
 8004a5a:	f002 fee1 	bl	8007820 <HAL_GetTick>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	4a04      	ldr	r2, [pc, #16]	@ (8004a74 <write_pwm_ctrl+0x78>)
 8004a62:	6013      	str	r3, [r2, #0]
}
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	200005d8 	.word	0x200005d8
 8004a70:	200005d9 	.word	0x200005d9
 8004a74:	200005d4 	.word	0x200005d4

08004a78 <timer_start>:
  boottime.sec   = setoverFlow(sec_L,59);
  boottime.min   = setoverFlow((sec_L/60),59);
  boottime.hour  = setoverFlow((sec_L/3600),23);
}

void timer_start(TIM_HandleTypeDef *htimz){
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
	htimmz = htimz;
 8004a80:	4a05      	ldr	r2, [pc, #20]	@ (8004a98 <timer_start+0x20>)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htimmz);
 8004a86:	4b04      	ldr	r3, [pc, #16]	@ (8004a98 <timer_start+0x20>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f007 f890 	bl	800bbb0 <HAL_TIM_Base_Start_IT>
}
 8004a90:	bf00      	nop
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	200005dc 	.word	0x200005dc

08004a9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ad4 <MX_DMA_Init+0x38>)
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	4a0b      	ldr	r2, [pc, #44]	@ (8004ad4 <MX_DMA_Init+0x38>)
 8004aa8:	f043 0301 	orr.w	r3, r3, #1
 8004aac:	6153      	str	r3, [r2, #20]
 8004aae:	4b09      	ldr	r3, [pc, #36]	@ (8004ad4 <MX_DMA_Init+0x38>)
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	607b      	str	r3, [r7, #4]
 8004ab8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8004aba:	2200      	movs	r2, #0
 8004abc:	2105      	movs	r1, #5
 8004abe:	200e      	movs	r0, #14
 8004ac0:	f002 ff91 	bl	80079e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004ac4:	200e      	movs	r0, #14
 8004ac6:	f002 ffaa 	bl	8007a1e <HAL_NVIC_EnableIRQ>

}
 8004aca:	bf00      	nop
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40021000 	.word	0x40021000

08004ad8 <HAL_UART_RxCpltCallback>:
#include "../flight/plane.h"

// IQR function
//----------------------------------IQR--Handler-----------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
    if(huart == ibus_uart_port())
 8004ae0:	f7fd fabc 	bl	800205c <ibus_uart_port>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d102      	bne.n	8004af2 <HAL_UART_RxCpltCallback+0x1a>
	{
		ibus_calback();
 8004aec:	f7fd fac0 	bl	8002070 <ibus_calback>
    }
    else if(huart == gps_uart_port()){
        gps_callback();
    }
}
 8004af0:	e007      	b.n	8004b02 <HAL_UART_RxCpltCallback+0x2a>
    else if(huart == gps_uart_port()){
 8004af2:	f7fe fae7 	bl	80030c4 <gps_uart_port>
 8004af6:	4602      	mov	r2, r0
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d101      	bne.n	8004b02 <HAL_UART_RxCpltCallback+0x2a>
        gps_callback();
 8004afe:	f7fe faeb 	bl	80030d8 <gps_callback>
}
 8004b02:	bf00      	nop
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
	...

08004b0c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
    if(huart == &huart1)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a04      	ldr	r2, [pc, #16]	@ (8004b28 <HAL_UART_TxCpltCallback+0x1c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d101      	bne.n	8004b20 <HAL_UART_TxCpltCallback+0x14>
	{
		mavlink_tx_cpl_callback();
 8004b1c:	f002 fe4c 	bl	80077b8 <mavlink_tx_cpl_callback>
    }
}
 8004b20:	bf00      	nop
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	20000a84 	.word	0x20000a84

08004b2c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4a06      	ldr	r2, [pc, #24]	@ (8004b54 <vApplicationGetIdleTaskMemory+0x28>)
 8004b3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	4a05      	ldr	r2, [pc, #20]	@ (8004b58 <vApplicationGetIdleTaskMemory+0x2c>)
 8004b42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2280      	movs	r2, #128	@ 0x80
 8004b48:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8004b4a:	bf00      	nop
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bc80      	pop	{r7}
 8004b52:	4770      	bx	lr
 8004b54:	200005f8 	.word	0x200005f8
 8004b58:	2000064c 	.word	0x2000064c

08004b5c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8004b5c:	b5b0      	push	{r4, r5, r7, lr}
 8004b5e:	b0a4      	sub	sp, #144	@ 0x90
 8004b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	 timer_start(&htim7);
 8004b62:	4832      	ldr	r0, [pc, #200]	@ (8004c2c <MX_FREERTOS_Init+0xd0>)
 8004b64:	f7ff ff88 	bl	8004a78 <timer_start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task1 */
  osThreadDef(task1, ahrs_task, osPriorityHigh, 0, 200);
 8004b68:	4b31      	ldr	r3, [pc, #196]	@ (8004c30 <MX_FREERTOS_Init+0xd4>)
 8004b6a:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8004b6e:	461d      	mov	r5, r3
 8004b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 8004b7c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8004b80:	2100      	movs	r1, #0
 8004b82:	4618      	mov	r0, r3
 8004b84:	f00d fa9b 	bl	80120be <osThreadCreate>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	4a2a      	ldr	r2, [pc, #168]	@ (8004c34 <MX_FREERTOS_Init+0xd8>)
 8004b8c:	6013      	str	r3, [r2, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, blackbox, osPriorityLow, 0, 512);
 8004b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8004c38 <MX_FREERTOS_Init+0xdc>)
 8004b90:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8004b94:	461d      	mov	r5, r3
 8004b96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 8004ba2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f00d fa88 	bl	80120be <osThreadCreate>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	4a22      	ldr	r2, [pc, #136]	@ (8004c3c <MX_FREERTOS_Init+0xe0>)
 8004bb2:	6013      	str	r3, [r2, #0]

  /* definition and creation of task3 */
  osThreadDef(task3, led_indicate, osPriorityLow, 0, 128);
 8004bb4:	4b22      	ldr	r3, [pc, #136]	@ (8004c40 <MX_FREERTOS_Init+0xe4>)
 8004bb6:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8004bba:	461d      	mov	r5, r3
 8004bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004bc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task3Handle = osThreadCreate(osThread(task3), NULL);
 8004bc8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004bcc:	2100      	movs	r1, #0
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f00d fa75 	bl	80120be <osThreadCreate>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8004c44 <MX_FREERTOS_Init+0xe8>)
 8004bd8:	6013      	str	r3, [r2, #0]

  /* definition and creation of task4 */
  osThreadDef(task4, read_sensor, osPriorityRealtime, 0, 128);
 8004bda:	4b1b      	ldr	r3, [pc, #108]	@ (8004c48 <MX_FREERTOS_Init+0xec>)
 8004bdc:	f107 0420 	add.w	r4, r7, #32
 8004be0:	461d      	mov	r5, r3
 8004be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004be6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004bea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task4Handle = osThreadCreate(osThread(task4), NULL);
 8004bee:	f107 0320 	add.w	r3, r7, #32
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f00d fa62 	bl	80120be <osThreadCreate>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	4a13      	ldr	r2, [pc, #76]	@ (8004c4c <MX_FREERTOS_Init+0xf0>)
 8004bfe:	6013      	str	r3, [r2, #0]

  /* definition and creation of task5 */
  osThreadDef(task5, mavlinkOSD, osPriorityNormal, 0, 128);
 8004c00:	4b13      	ldr	r3, [pc, #76]	@ (8004c50 <MX_FREERTOS_Init+0xf4>)
 8004c02:	1d3c      	adds	r4, r7, #4
 8004c04:	461d      	mov	r5, r3
 8004c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task5Handle = osThreadCreate(osThread(task5), NULL);
 8004c12:	1d3b      	adds	r3, r7, #4
 8004c14:	2100      	movs	r1, #0
 8004c16:	4618      	mov	r0, r3
 8004c18:	f00d fa51 	bl	80120be <osThreadCreate>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	4a0d      	ldr	r2, [pc, #52]	@ (8004c54 <MX_FREERTOS_Init+0xf8>)
 8004c20:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8004c22:	bf00      	nop
 8004c24:	3790      	adds	r7, #144	@ 0x90
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bdb0      	pop	{r4, r5, r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20000a3c 	.word	0x20000a3c
 8004c30:	08015890 	.word	0x08015890
 8004c34:	200005e4 	.word	0x200005e4
 8004c38:	080158b4 	.word	0x080158b4
 8004c3c:	200005e8 	.word	0x200005e8
 8004c40:	080158d8 	.word	0x080158d8
 8004c44:	200005ec 	.word	0x200005ec
 8004c48:	080158fc 	.word	0x080158fc
 8004c4c:	200005f0 	.word	0x200005f0
 8004c50:	08015920 	.word	0x08015920
 8004c54:	200005f4 	.word	0x200005f4

08004c58 <ahrs_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ahrs_task */
void ahrs_task(void const * argument)
{
 8004c58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c5c:	b08b      	sub	sp, #44	@ 0x2c
 8004c5e:	af06      	add	r7, sp, #24
 8004c60:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ahrs_task */
	ibus_init(&huart2);
 8004c62:	4834      	ldr	r0, [pc, #208]	@ (8004d34 <ahrs_task+0xdc>)
 8004c64:	f7fd f9ca 	bl	8001ffc <ibus_init>
	gps_init(&huart3,115200);
 8004c68:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8004c6c:	4832      	ldr	r0, [pc, #200]	@ (8004d38 <ahrs_task+0xe0>)
 8004c6e:	f7fe f9b1 	bl	8002fd4 <gps_init>
	attitude_ctrl_init();
 8004c72:	f001 fd5f 	bl	8006734 <attitude_ctrl_init>
	initPWM(&htim3);
 8004c76:	4831      	ldr	r0, [pc, #196]	@ (8004d3c <ahrs_task+0xe4>)
 8004c78:	f7ff fe2e 	bl	80048d8 <initPWM>
    baro_init();
 8004c7c:	f7fd fc6e 	bl	800255c <baro_init>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10; // 100 hz loop
 8004c80:	230a      	movs	r3, #10
 8004c82:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 8004c84:	f00e fdc0 	bl	8013808 <xTaskGetTickCount>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4); // for debug
	//timer_calculate_boottime();
    if(is_baro_calibration() == FALSE){
 8004c8c:	f7fd fcc4 	bl	8002618 <is_baro_calibration>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <ahrs_task+0x42>
		baro_zero_calibrate();
 8004c96:	f7fd fc87 	bl	80025a8 <baro_zero_calibrate>
	}
    alt_baro = baro_get_altitude();
 8004c9a:	f7fd fcc9 	bl	8002630 <baro_get_altitude>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	4a27      	ldr	r2, [pc, #156]	@ (8004d40 <ahrs_task+0xe8>)
 8004ca2:	6013      	str	r3, [r2, #0]
    ibusFrameComplete();
 8004ca4:	f7fd fa40 	bl	8002128 <ibusFrameComplete>
    update_ahrs(gyro_imu[0],gyro_imu[1],gyro_imu[2],acc_imu[0],acc_imu[1],acc_imu[2],mag_raw[0],mag_raw[1],mag_raw[2],micros());
 8004ca8:	4b26      	ldr	r3, [pc, #152]	@ (8004d44 <ahrs_task+0xec>)
 8004caa:	f9b3 c000 	ldrsh.w	ip, [r3]
 8004cae:	4b25      	ldr	r3, [pc, #148]	@ (8004d44 <ahrs_task+0xec>)
 8004cb0:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8004cb4:	4b23      	ldr	r3, [pc, #140]	@ (8004d44 <ahrs_task+0xec>)
 8004cb6:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 8004cba:	4b23      	ldr	r3, [pc, #140]	@ (8004d48 <ahrs_task+0xf0>)
 8004cbc:	f9b3 9000 	ldrsh.w	r9, [r3]
 8004cc0:	4b21      	ldr	r3, [pc, #132]	@ (8004d48 <ahrs_task+0xf0>)
 8004cc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004cc6:	4a20      	ldr	r2, [pc, #128]	@ (8004d48 <ahrs_task+0xf0>)
 8004cc8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8004ccc:	491f      	ldr	r1, [pc, #124]	@ (8004d4c <ahrs_task+0xf4>)
 8004cce:	f9b1 1000 	ldrsh.w	r1, [r1]
 8004cd2:	481e      	ldr	r0, [pc, #120]	@ (8004d4c <ahrs_task+0xf4>)
 8004cd4:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8004cd8:	4c1c      	ldr	r4, [pc, #112]	@ (8004d4c <ahrs_task+0xf4>)
 8004cda:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 8004cde:	4d1c      	ldr	r5, [pc, #112]	@ (8004d50 <ahrs_task+0xf8>)
 8004ce0:	682d      	ldr	r5, [r5, #0]
 8004ce2:	682d      	ldr	r5, [r5, #0]
 8004ce4:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8004ce6:	4d1b      	ldr	r5, [pc, #108]	@ (8004d54 <ahrs_task+0xfc>)
 8004ce8:	682d      	ldr	r5, [r5, #0]
 8004cea:	4435      	add	r5, r6
 8004cec:	9505      	str	r5, [sp, #20]
 8004cee:	9404      	str	r4, [sp, #16]
 8004cf0:	9003      	str	r0, [sp, #12]
 8004cf2:	9102      	str	r1, [sp, #8]
 8004cf4:	9201      	str	r2, [sp, #4]
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	464b      	mov	r3, r9
 8004cfa:	4642      	mov	r2, r8
 8004cfc:	4671      	mov	r1, lr
 8004cfe:	4660      	mov	r0, ip
 8004d00:	f7fe fc82 	bl	8003608 <update_ahrs>
    attitude_ctrl(micros());
 8004d04:	4b12      	ldr	r3, [pc, #72]	@ (8004d50 <ahrs_task+0xf8>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d0c:	4b11      	ldr	r3, [pc, #68]	@ (8004d54 <ahrs_task+0xfc>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4413      	add	r3, r2
 8004d12:	4618      	mov	r0, r3
 8004d14:	f001 fd9c 	bl	8006850 <attitude_ctrl>

    //vTaskSuspend(NULL);
    vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8004d18:	f107 0308 	add.w	r3, r7, #8
 8004d1c:	68f9      	ldr	r1, [r7, #12]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f00e fb1a 	bl	8013358 <vTaskDelayUntil>
#ifdef STACK_DEBUG
    stack_task_ahrs = uxTaskGetStackHighWaterMark( NULL );
 8004d24:	2000      	movs	r0, #0
 8004d26:	f00f f849 	bl	8013dbc <uxTaskGetStackHighWaterMark>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d58 <ahrs_task+0x100>)
 8004d30:	801a      	strh	r2, [r3, #0]
    if(is_baro_calibration() == FALSE){
 8004d32:	e7ab      	b.n	8004c8c <ahrs_task+0x34>
 8004d34:	20000acc 	.word	0x20000acc
 8004d38:	20000b14 	.word	0x20000b14
 8004d3c:	200009f4 	.word	0x200009f4
 8004d40:	20000858 	.word	0x20000858
 8004d44:	2000085c 	.word	0x2000085c
 8004d48:	20000864 	.word	0x20000864
 8004d4c:	2000086c 	.word	0x2000086c
 8004d50:	200005dc 	.word	0x200005dc
 8004d54:	200005e0 	.word	0x200005e0
 8004d58:	2000084c 	.word	0x2000084c
 8004d5c:	00000000 	.word	0x00000000

08004d60 <blackbox>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blackbox */
void blackbox(void const * argument)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08a      	sub	sp, #40	@ 0x28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blackbox */

	vTaskSuspend(NULL);
 8004d68:	2000      	movs	r0, #0
 8004d6a:	f00e fbab 	bl	80134c4 <vTaskSuspend>
	//__disable_irq();
	black_box_init();
 8004d6e:	f7fd fc79 	bl	8002664 <black_box_init>
	//__enable_irq();
	black_box_reset = TRUE;
 8004d72:	4bc1      	ldr	r3, [pc, #772]	@ (8005078 <blackbox+0x318>)
 8004d74:	2201      	movs	r2, #1
 8004d76:	701a      	strb	r2, [r3, #0]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 100;  // 25 ms
 8004d78:	2364      	movs	r3, #100	@ 0x64
 8004d7a:	627b      	str	r3, [r7, #36]	@ 0x24
	xLastWakeTime = xTaskGetTickCount();
 8004d7c:	f00e fd44 	bl	8013808 <xTaskGetTickCount>
 8004d80:	4603      	mov	r3, r0
 8004d82:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	static uint32_t start_time_ms;
    if(ibusChannelData[CH5] > CHANNEL_HIGH ){
 8004d84:	4bbd      	ldr	r3, [pc, #756]	@ (800507c <blackbox+0x31c>)
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	f240 81bc 	bls.w	800510a <blackbox+0x3aa>
		if(black_box_reset){
 8004d92:	4bb9      	ldr	r3, [pc, #740]	@ (8005078 <blackbox+0x318>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d012      	beq.n	8004dc0 <blackbox+0x60>
			black_box_pack_str("----------------------------new data----------------------------------------------------------------\n");
 8004d9a:	48b9      	ldr	r0, [pc, #740]	@ (8005080 <blackbox+0x320>)
 8004d9c:	f7fd fd28 	bl	80027f0 <black_box_pack_str>
			black_box_reset = FALSE;
 8004da0:	4bb5      	ldr	r3, [pc, #724]	@ (8005078 <blackbox+0x318>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	701a      	strb	r2, [r3, #0]
			start_time_ms = millis();
 8004da6:	4bb7      	ldr	r3, [pc, #732]	@ (8005084 <blackbox+0x324>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004dae:	4bb6      	ldr	r3, [pc, #728]	@ (8005088 <blackbox+0x328>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4413      	add	r3, r2
 8004db4:	4ab5      	ldr	r2, [pc, #724]	@ (800508c <blackbox+0x32c>)
 8004db6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dba:	099b      	lsrs	r3, r3, #6
 8004dbc:	4ab4      	ldr	r2, [pc, #720]	@ (8005090 <blackbox+0x330>)
 8004dbe:	6013      	str	r3, [r2, #0]
		}
		uint32_t time_ms =  millis() - start_time_ms;
 8004dc0:	4bb0      	ldr	r3, [pc, #704]	@ (8005084 <blackbox+0x324>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004dc8:	4baf      	ldr	r3, [pc, #700]	@ (8005088 <blackbox+0x328>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4413      	add	r3, r2
 8004dce:	4aaf      	ldr	r2, [pc, #700]	@ (800508c <blackbox+0x32c>)
 8004dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd4:	099a      	lsrs	r2, r3, #6
 8004dd6:	4bae      	ldr	r3, [pc, #696]	@ (8005090 <blackbox+0x330>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	623b      	str	r3, [r7, #32]
		// control thortle 0 -> 100%
		int throtle = ((int)ibusChannelData[CH3] - 1000)*0.1;
 8004dde:	4ba7      	ldr	r3, [pc, #668]	@ (800507c <blackbox+0x31c>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fb fb74 	bl	80004d4 <__aeabi_i2d>
 8004dec:	a3a0      	add	r3, pc, #640	@ (adr r3, 8005070 <blackbox+0x310>)
 8004dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df2:	f7fb fbd9 	bl	80005a8 <__aeabi_dmul>
 8004df6:	4602      	mov	r2, r0
 8004df8:	460b      	mov	r3, r1
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	f7fb fe83 	bl	8000b08 <__aeabi_d2iz>
 8004e02:	4603      	mov	r3, r0
 8004e04:	61fb      	str	r3, [r7, #28]

		// tx signal 0 -> 100 %
		int srri = ((int)ibusChannelData[CH11] - 1000)*0.1;
 8004e06:	4b9d      	ldr	r3, [pc, #628]	@ (800507c <blackbox+0x31c>)
 8004e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e0a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fb fb60 	bl	80004d4 <__aeabi_i2d>
 8004e14:	a396      	add	r3, pc, #600	@ (adr r3, 8005070 <blackbox+0x310>)
 8004e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1a:	f7fb fbc5 	bl	80005a8 <__aeabi_dmul>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	4610      	mov	r0, r2
 8004e24:	4619      	mov	r1, r3
 8004e26:	f7fb fe6f 	bl	8000b08 <__aeabi_d2iz>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	61bb      	str	r3, [r7, #24]

		/*** write time  ***/
		black_box_pack_int(time_ms);
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7fd fc45 	bl	80026c0 <black_box_pack_int>
		black_box_pack_char(' ');
 8004e36:	2020      	movs	r0, #32
 8004e38:	f7fd fd12 	bl	8002860 <black_box_pack_char>

		/*---- control parameters ---*/
		black_box_pack_int((int)servoL);
 8004e3c:	4b95      	ldr	r3, [pc, #596]	@ (8005094 <blackbox+0x334>)
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7fd fc3d 	bl	80026c0 <black_box_pack_int>
		black_box_pack_char(' ');
 8004e46:	2020      	movs	r0, #32
 8004e48:	f7fd fd0a 	bl	8002860 <black_box_pack_char>
		black_box_pack_int((int)servoR);
 8004e4c:	4b92      	ldr	r3, [pc, #584]	@ (8005098 <blackbox+0x338>)
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fd fc35 	bl	80026c0 <black_box_pack_int>
		black_box_pack_char(' ');
 8004e56:	2020      	movs	r0, #32
 8004e58:	f7fd fd02 	bl	8002860 <black_box_pack_char>
		black_box_pack_int(throtle);
 8004e5c:	69f8      	ldr	r0, [r7, #28]
 8004e5e:	f7fd fc2f 	bl	80026c0 <black_box_pack_int>
		black_box_pack_char(' ');
 8004e62:	2020      	movs	r0, #32
 8004e64:	f7fd fcfc 	bl	8002860 <black_box_pack_char>
		black_box_pack_int(srri);
 8004e68:	69b8      	ldr	r0, [r7, #24]
 8004e6a:	f7fd fc29 	bl	80026c0 <black_box_pack_int>
		black_box_pack_char(' ');
 8004e6e:	2020      	movs	r0, #32
 8004e70:	f7fd fcf6 	bl	8002860 <black_box_pack_char>

		/*----- atitude ---------------------*/
		black_box_pack_int((int)(AHRS.roll*100));
 8004e74:	4b89      	ldr	r3, [pc, #548]	@ (800509c <blackbox+0x33c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4989      	ldr	r1, [pc, #548]	@ (80050a0 <blackbox+0x340>)
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fb ff9a 	bl	8000db4 <__aeabi_fmul>
 8004e80:	4603      	mov	r3, r0
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fc f972 	bl	800116c <__aeabi_f2iz>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fd fc18 	bl	80026c0 <black_box_pack_int>
		black_box_pack_char(' ');
 8004e90:	2020      	movs	r0, #32
 8004e92:	f7fd fce5 	bl	8002860 <black_box_pack_char>
		black_box_pack_int((int)(roll_desired*100));
 8004e96:	4b83      	ldr	r3, [pc, #524]	@ (80050a4 <blackbox+0x344>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4981      	ldr	r1, [pc, #516]	@ (80050a0 <blackbox+0x340>)
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fb ff89 	bl	8000db4 <__aeabi_fmul>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7fc f961 	bl	800116c <__aeabi_f2iz>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fd fc07 	bl	80026c0 <black_box_pack_int>
		black_box_pack_char(' ');
 8004eb2:	2020      	movs	r0, #32
 8004eb4:	f7fd fcd4 	bl	8002860 <black_box_pack_char>
		black_box_pack_int((int)(AHRS.pitch*100));// cm
 8004eb8:	4b78      	ldr	r3, [pc, #480]	@ (800509c <blackbox+0x33c>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	4978      	ldr	r1, [pc, #480]	@ (80050a0 <blackbox+0x340>)
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fb ff78 	bl	8000db4 <__aeabi_fmul>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fc f950 	bl	800116c <__aeabi_f2iz>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fd fbf6 	bl	80026c0 <black_box_pack_int>
		black_box_pack_char(' ');
 8004ed4:	2020      	movs	r0, #32
 8004ed6:	f7fd fcc3 	bl	8002860 <black_box_pack_char>
		black_box_pack_int((int)(pitch_desired*100));
 8004eda:	4b73      	ldr	r3, [pc, #460]	@ (80050a8 <blackbox+0x348>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4970      	ldr	r1, [pc, #448]	@ (80050a0 <blackbox+0x340>)
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fb ff67 	bl	8000db4 <__aeabi_fmul>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fc f93f 	bl	800116c <__aeabi_f2iz>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fd fbe5 	bl	80026c0 <black_box_pack_int>
		black_box_pack_char(' ');
 8004ef6:	2020      	movs	r0, #32
 8004ef8:	f7fd fcb2 	bl	8002860 <black_box_pack_char>
		black_box_pack_int((int)(AHRS.yaw*100));
 8004efc:	4b67      	ldr	r3, [pc, #412]	@ (800509c <blackbox+0x33c>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	4967      	ldr	r1, [pc, #412]	@ (80050a0 <blackbox+0x340>)
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fb ff56 	bl	8000db4 <__aeabi_fmul>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fc f92e 	bl	800116c <__aeabi_f2iz>
 8004f10:	4603      	mov	r3, r0
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fd fbd4 	bl	80026c0 <black_box_pack_int>
		black_box_pack_char(' ');
 8004f18:	2020      	movs	r0, #32
 8004f1a:	f7fd fca1 	bl	8002860 <black_box_pack_char>
		black_box_pack_int((int)(AHRS.yaw_rate*100));
 8004f1e:	4b5f      	ldr	r3, [pc, #380]	@ (800509c <blackbox+0x33c>)
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	495f      	ldr	r1, [pc, #380]	@ (80050a0 <blackbox+0x340>)
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7fb ff45 	bl	8000db4 <__aeabi_fmul>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7fc f91d 	bl	800116c <__aeabi_f2iz>
 8004f32:	4603      	mov	r3, r0
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fd fbc3 	bl	80026c0 <black_box_pack_int>
		black_box_pack_char(' ');
 8004f3a:	2020      	movs	r0, #32
 8004f3c:	f7fd fc90 	bl	8002860 <black_box_pack_char>

		/*------- GPS ----------------------*/
		int16_t vx = _gps.velocity[0];  // cm/s
 8004f40:	4b5a      	ldr	r3, [pc, #360]	@ (80050ac <blackbox+0x34c>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	82fb      	strh	r3, [r7, #22]
		int16_t vy = _gps.velocity[1];  // cm/s
 8004f46:	4b59      	ldr	r3, [pc, #356]	@ (80050ac <blackbox+0x34c>)
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	82bb      	strh	r3, [r7, #20]
		int16_t vz = _gps.velocity[2];  // cm/s
 8004f4c:	4b57      	ldr	r3, [pc, #348]	@ (80050ac <blackbox+0x34c>)
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	827b      	strh	r3, [r7, #18]
		int32_t ground_speed = sqrt(sq(vx) + sq(vy)) ;
 8004f52:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004f56:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004f5a:	fb03 f202 	mul.w	r2, r3, r2
 8004f5e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004f62:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8004f66:	fb01 f303 	mul.w	r3, r1, r3
 8004f6a:	4413      	add	r3, r2
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7fb fab1 	bl	80004d4 <__aeabi_i2d>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4610      	mov	r0, r2
 8004f78:	4619      	mov	r1, r3
 8004f7a:	f00f fec3 	bl	8014d04 <sqrt>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	4610      	mov	r0, r2
 8004f84:	4619      	mov	r1, r3
 8004f86:	f7fb fdbf 	bl	8000b08 <__aeabi_d2iz>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	60fb      	str	r3, [r7, #12]

		black_box_pack_int(_gps.position[0]);
 8004f8e:	4b47      	ldr	r3, [pc, #284]	@ (80050ac <blackbox+0x34c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fd fb94 	bl	80026c0 <black_box_pack_int>
		black_box_pack_char(' ');
 8004f98:	2020      	movs	r0, #32
 8004f9a:	f7fd fc61 	bl	8002860 <black_box_pack_char>
		black_box_pack_int(_gps.position[1]);
 8004f9e:	4b43      	ldr	r3, [pc, #268]	@ (80050ac <blackbox+0x34c>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fd fb8c 	bl	80026c0 <black_box_pack_int>
		black_box_pack_char(' ');
 8004fa8:	2020      	movs	r0, #32
 8004faa:	f7fd fc59 	bl	8002860 <black_box_pack_char>
		black_box_pack_int(_gps.altitude_msl);
 8004fae:	4b3f      	ldr	r3, [pc, #252]	@ (80050ac <blackbox+0x34c>)
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fd fb84 	bl	80026c0 <black_box_pack_int>
		black_box_pack_char(' ');
 8004fb8:	2020      	movs	r0, #32
 8004fba:	f7fd fc51 	bl	8002860 <black_box_pack_char>
		black_box_pack_int(_gps.altitude_mgl);
 8004fbe:	4b3b      	ldr	r3, [pc, #236]	@ (80050ac <blackbox+0x34c>)
 8004fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fd fb7c 	bl	80026c0 <black_box_pack_int>
		black_box_pack_char(' ');
 8004fc8:	2020      	movs	r0, #32
 8004fca:	f7fd fc49 	bl	8002860 <black_box_pack_char>
		black_box_pack_int(_gps.numSat);
 8004fce:	4b37      	ldr	r3, [pc, #220]	@ (80050ac <blackbox+0x34c>)
 8004fd0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7fd fb73 	bl	80026c0 <black_box_pack_int>
		black_box_pack_char(' ');
 8004fda:	2020      	movs	r0, #32
 8004fdc:	f7fd fc40 	bl	8002860 <black_box_pack_char>
		black_box_pack_int(_gps.fix);
 8004fe0:	4b32      	ldr	r3, [pc, #200]	@ (80050ac <blackbox+0x34c>)
 8004fe2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fd fb6a 	bl	80026c0 <black_box_pack_int>
		black_box_pack_char(' ');
 8004fec:	2020      	movs	r0, #32
 8004fee:	f7fd fc37 	bl	8002860 <black_box_pack_char>
		black_box_pack_int(ground_speed);
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f7fd fb64 	bl	80026c0 <black_box_pack_int>
		black_box_pack_char(' ');
 8004ff8:	2020      	movs	r0, #32
 8004ffa:	f7fd fc31 	bl	8002860 <black_box_pack_char>
		black_box_pack_int(vz);
 8004ffe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005002:	4618      	mov	r0, r3
 8005004:	f7fd fb5c 	bl	80026c0 <black_box_pack_int>

		/*---- estimate ---------------------------*/
		black_box_pack_char(' ');
 8005008:	2020      	movs	r0, #32
 800500a:	f7fd fc29 	bl	8002860 <black_box_pack_char>
		black_box_pack_int((int)(alt_estimate*100)); //cm
 800500e:	4b28      	ldr	r3, [pc, #160]	@ (80050b0 <blackbox+0x350>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4923      	ldr	r1, [pc, #140]	@ (80050a0 <blackbox+0x340>)
 8005014:	4618      	mov	r0, r3
 8005016:	f7fb fecd 	bl	8000db4 <__aeabi_fmul>
 800501a:	4603      	mov	r3, r0
 800501c:	4618      	mov	r0, r3
 800501e:	f7fc f8a5 	bl	800116c <__aeabi_f2iz>
 8005022:	4603      	mov	r3, r0
 8005024:	4618      	mov	r0, r3
 8005026:	f7fd fb4b 	bl	80026c0 <black_box_pack_int>
		black_box_pack_char(' ');
 800502a:	2020      	movs	r0, #32
 800502c:	f7fd fc18 	bl	8002860 <black_box_pack_char>
		black_box_pack_int((int)(climb_rate*100));   // cm/s
 8005030:	4b20      	ldr	r3, [pc, #128]	@ (80050b4 <blackbox+0x354>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	491a      	ldr	r1, [pc, #104]	@ (80050a0 <blackbox+0x340>)
 8005036:	4618      	mov	r0, r3
 8005038:	f7fb febc 	bl	8000db4 <__aeabi_fmul>
 800503c:	4603      	mov	r3, r0
 800503e:	4618      	mov	r0, r3
 8005040:	f7fc f894 	bl	800116c <__aeabi_f2iz>
 8005044:	4603      	mov	r3, r0
 8005046:	4618      	mov	r0, r3
 8005048:	f7fd fb3a 	bl	80026c0 <black_box_pack_int>
		black_box_pack_char(' ');
 800504c:	2020      	movs	r0, #32
 800504e:	f7fd fc07 	bl	8002860 <black_box_pack_char>
		black_box_pack_int(alt_baro);   // cm
 8005052:	4b19      	ldr	r3, [pc, #100]	@ (80050b8 <blackbox+0x358>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4618      	mov	r0, r3
 8005058:	f7fd fb32 	bl	80026c0 <black_box_pack_int>
		black_box_pack_char(' ');
 800505c:	2020      	movs	r0, #32
 800505e:	f7fd fbff 	bl	8002860 <black_box_pack_char>
		black_box_pack_int((int)(velocity_abs*100));   // cm
 8005062:	4b16      	ldr	r3, [pc, #88]	@ (80050bc <blackbox+0x35c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	490e      	ldr	r1, [pc, #56]	@ (80050a0 <blackbox+0x340>)
 8005068:	4618      	mov	r0, r3
 800506a:	e029      	b.n	80050c0 <blackbox+0x360>
 800506c:	f3af 8000 	nop.w
 8005070:	9999999a 	.word	0x9999999a
 8005074:	3fb99999 	.word	0x3fb99999
 8005078:	20000872 	.word	0x20000872
 800507c:	20000148 	.word	0x20000148
 8005080:	0801593c 	.word	0x0801593c
 8005084:	200005dc 	.word	0x200005dc
 8005088:	200005e0 	.word	0x200005e0
 800508c:	10624dd3 	.word	0x10624dd3
 8005090:	20000878 	.word	0x20000878
 8005094:	20000ba8 	.word	0x20000ba8
 8005098:	20000baa 	.word	0x20000baa
 800509c:	2000055c 	.word	0x2000055c
 80050a0:	42c80000 	.word	0x42c80000
 80050a4:	20000ba0 	.word	0x20000ba0
 80050a8:	20000ba4 	.word	0x20000ba4
 80050ac:	20000424 	.word	0x20000424
 80050b0:	20000c88 	.word	0x20000c88
 80050b4:	20000c8c 	.word	0x20000c8c
 80050b8:	20000858 	.word	0x20000858
 80050bc:	20000c90 	.word	0x20000c90
 80050c0:	f7fb fe78 	bl	8000db4 <__aeabi_fmul>
 80050c4:	4603      	mov	r3, r0
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fc f850 	bl	800116c <__aeabi_f2iz>
 80050cc:	4603      	mov	r3, r0
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fd faf6 	bl	80026c0 <black_box_pack_int>

		black_box_pack_char(' ');
 80050d4:	2020      	movs	r0, #32
 80050d6:	f7fd fbc3 	bl	8002860 <black_box_pack_char>
		black_box_pack_int((int)(pid_velo_scale*1000));   // cm
 80050da:	4b1c      	ldr	r3, [pc, #112]	@ (800514c <blackbox+0x3ec>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	491c      	ldr	r1, [pc, #112]	@ (8005150 <blackbox+0x3f0>)
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fb fe67 	bl	8000db4 <__aeabi_fmul>
 80050e6:	4603      	mov	r3, r0
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fc f83f 	bl	800116c <__aeabi_f2iz>
 80050ee:	4603      	mov	r3, r0
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7fd fae5 	bl	80026c0 <black_box_pack_int>

		/*----- end line && load data to sd card- -----*/
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80050f6:	2110      	movs	r1, #16
 80050f8:	4816      	ldr	r0, [pc, #88]	@ (8005154 <blackbox+0x3f4>)
 80050fa:	f003 fae6 	bl	80086ca <HAL_GPIO_TogglePin>
		//sdcard_fsize = black_box_get_file_size();
		black_box_pack_char('\n');
 80050fe:	200a      	movs	r0, #10
 8005100:	f7fd fbae 	bl	8002860 <black_box_pack_char>
		black_box_load();
 8005104:	f7fd fbc6 	bl	8002894 <black_box_load>
 8005108:	e007      	b.n	800511a <blackbox+0x3ba>
    }else{
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_RESET);
 800510a:	2200      	movs	r2, #0
 800510c:	2110      	movs	r1, #16
 800510e:	4811      	ldr	r0, [pc, #68]	@ (8005154 <blackbox+0x3f4>)
 8005110:	f003 fac3 	bl	800869a <HAL_GPIO_WritePin>
    	black_box_reset = TRUE;
 8005114:	4b10      	ldr	r3, [pc, #64]	@ (8005158 <blackbox+0x3f8>)
 8005116:	2201      	movs	r2, #1
 8005118:	701a      	strb	r2, [r3, #0]
    }
    /* if error init again */
	if(puts_state == -1){
 800511a:	4b10      	ldr	r3, [pc, #64]	@ (800515c <blackbox+0x3fc>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005122:	d104      	bne.n	800512e <blackbox+0x3ce>
	   error_count ++;
 8005124:	4b0e      	ldr	r3, [pc, #56]	@ (8005160 <blackbox+0x400>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3301      	adds	r3, #1
 800512a:	4a0d      	ldr	r2, [pc, #52]	@ (8005160 <blackbox+0x400>)
 800512c:	6013      	str	r3, [r2, #0]
	   //HAL_SD_Init(&hsd);
	   //HAL_SD_InitCard(&hsd);
	   //black_box_init();
	 }

	vTaskDelayUntil( &xLastWakeTime, xFrequency);
 800512e:	f107 0308 	add.w	r3, r7, #8
 8005132:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005134:	4618      	mov	r0, r3
 8005136:	f00e f90f 	bl	8013358 <vTaskDelayUntil>
#ifdef STACK_DEBUG
    stack_task_blackbox = uxTaskGetStackHighWaterMark( NULL );
 800513a:	2000      	movs	r0, #0
 800513c:	f00e fe3e 	bl	8013dbc <uxTaskGetStackHighWaterMark>
 8005140:	4603      	mov	r3, r0
 8005142:	b29a      	uxth	r2, r3
 8005144:	4b07      	ldr	r3, [pc, #28]	@ (8005164 <blackbox+0x404>)
 8005146:	801a      	strh	r2, [r3, #0]
  {
 8005148:	e61c      	b.n	8004d84 <blackbox+0x24>
 800514a:	bf00      	nop
 800514c:	20000c78 	.word	0x20000c78
 8005150:	447a0000 	.word	0x447a0000
 8005154:	40010800 	.word	0x40010800
 8005158:	20000872 	.word	0x20000872
 800515c:	200003d8 	.word	0x200003d8
 8005160:	20000874 	.word	0x20000874
 8005164:	20000854 	.word	0x20000854

08005168 <led_indicate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_indicate */
void led_indicate(void const * argument)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
		delay = 500;
		vTaskSuspend(task2Handle);
	}
	*/
	if(_gps.fix > 1){
 8005170:	4b0c      	ldr	r3, [pc, #48]	@ (80051a4 <led_indicate+0x3c>)
 8005172:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8005176:	2b01      	cmp	r3, #1
 8005178:	d903      	bls.n	8005182 <led_indicate+0x1a>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800517a:	2120      	movs	r1, #32
 800517c:	480a      	ldr	r0, [pc, #40]	@ (80051a8 <led_indicate+0x40>)
 800517e:	f003 faa4 	bl	80086ca <HAL_GPIO_TogglePin>
	}
#ifdef STACK_DEBUG
	stack_task_led = uxTaskGetStackHighWaterMark( NULL );
 8005182:	2000      	movs	r0, #0
 8005184:	f00e fe1a 	bl	8013dbc <uxTaskGetStackHighWaterMark>
 8005188:	4603      	mov	r3, r0
 800518a:	b29a      	uxth	r2, r3
 800518c:	4b07      	ldr	r3, [pc, #28]	@ (80051ac <led_indicate+0x44>)
 800518e:	801a      	strh	r2, [r3, #0]
#endif
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8005190:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005194:	4806      	ldr	r0, [pc, #24]	@ (80051b0 <led_indicate+0x48>)
 8005196:	f003 fa98 	bl	80086ca <HAL_GPIO_TogglePin>
    osDelay(1000);
 800519a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800519e:	f00c ffda 	bl	8012156 <osDelay>
	if(_gps.fix > 1){
 80051a2:	e7e5      	b.n	8005170 <led_indicate+0x8>
 80051a4:	20000424 	.word	0x20000424
 80051a8:	40010800 	.word	0x40010800
 80051ac:	2000084e 	.word	0x2000084e
 80051b0:	40011000 	.word	0x40011000
 80051b4:	00000000 	.word	0x00000000

080051b8 <read_sensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_sensor */
void read_sensor(void const * argument)
{
 80051b8:	b5b0      	push	{r4, r5, r7, lr}
 80051ba:	b08e      	sub	sp, #56	@ 0x38
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN read_sensor */
  /* Infinite loop */
	int16_t gyso_offset[3] = {0,0,0};
 80051c0:	2300      	movs	r3, #0
 80051c2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80051c4:	2300      	movs	r3, #0
 80051c6:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80051c8:	2300      	movs	r3, #0
 80051ca:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	axis3_t raw;
	uint8_t sample_count = 0;
 80051cc:	2300      	movs	r3, #0
 80051ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	int32_t gyro_add[3] = {0,0,0};
 80051d2:	2300      	movs	r3, #0
 80051d4:	617b      	str	r3, [r7, #20]
 80051d6:	2300      	movs	r3, #0
 80051d8:	61bb      	str	r3, [r7, #24]
 80051da:	2300      	movs	r3, #0
 80051dc:	61fb      	str	r3, [r7, #28]
	uint8_t first_loop = 1;
 80051de:	2301      	movs	r3, #1
 80051e0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	compassInit();
 80051e4:	f7fd fbf0 	bl	80029c8 <compassInit>
	mpu6050_init(&hi2c2);
 80051e8:	488f      	ldr	r0, [pc, #572]	@ (8005428 <read_sensor+0x270>)
 80051ea:	f7fd f883 	bl	80022f4 <mpu6050_init>
	HAL_Delay(2000);
 80051ee:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80051f2:	f002 fb1f 	bl	8007834 <HAL_Delay>
	imu_calibrate(&gyso_offset[0],&gyso_offset[1],&gyso_offset[2]);
 80051f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80051fa:	1d1a      	adds	r2, r3, #4
 80051fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005200:	1c99      	adds	r1, r3, #2
 8005202:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005206:	4618      	mov	r0, r3
 8005208:	f7fe f982 	bl	8003510 <imu_calibrate>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 2;
 800520c:	2302      	movs	r3, #2
 800520e:	633b      	str	r3, [r7, #48]	@ 0x30
	xLastWakeTime = xTaskGetTickCount();
 8005210:	f00e fafa 	bl	8013808 <xTaskGetTickCount>
 8005214:	4603      	mov	r3, r0
 8005216:	613b      	str	r3, [r7, #16]

	for(;;)
	{
		mpu6050_gyro_get_raw(&raw);
 8005218:	f107 0320 	add.w	r3, r7, #32
 800521c:	4618      	mov	r0, r3
 800521e:	f7fd f8bb 	bl	8002398 <mpu6050_gyro_get_raw>
		gyro_add[0] += (raw.x - gyso_offset[0]);
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005228:	4619      	mov	r1, r3
 800522a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800522e:	1acb      	subs	r3, r1, r3
 8005230:	4413      	add	r3, r2
 8005232:	617b      	str	r3, [r7, #20]
		gyro_add[1] += (raw.y - gyso_offset[1]);
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800523a:	4619      	mov	r1, r3
 800523c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8005240:	1acb      	subs	r3, r1, r3
 8005242:	4413      	add	r3, r2
 8005244:	61bb      	str	r3, [r7, #24]
		gyro_add[2] += (raw.z - gyso_offset[2]);
 8005246:	69fa      	ldr	r2, [r7, #28]
 8005248:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800524c:	4619      	mov	r1, r3
 800524e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8005252:	1acb      	subs	r3, r1, r3
 8005254:	4413      	add	r3, r2
 8005256:	61fb      	str	r3, [r7, #28]
		sample_count ++;
 8005258:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800525c:	3301      	adds	r3, #1
 800525e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if(sample_count >= 5){
 8005262:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005266:	2b04      	cmp	r3, #4
 8005268:	d937      	bls.n	80052da <read_sensor+0x122>
		   axis3_t mag;
		   compass_get(&mag);
 800526a:	f107 0308 	add.w	r3, r7, #8
 800526e:	4618      	mov	r0, r3
 8005270:	f7fd fbe6 	bl	8002a40 <compass_get>
		   mag_raw[0] = mag.x;
 8005274:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005278:	4b6c      	ldr	r3, [pc, #432]	@ (800542c <read_sensor+0x274>)
 800527a:	801a      	strh	r2, [r3, #0]
		   mag_raw[1] = mag.y;
 800527c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005280:	4b6a      	ldr	r3, [pc, #424]	@ (800542c <read_sensor+0x274>)
 8005282:	805a      	strh	r2, [r3, #2]
		   mag_raw[2] = mag.z;
 8005284:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005288:	4b68      	ldr	r3, [pc, #416]	@ (800542c <read_sensor+0x274>)
 800528a:	809a      	strh	r2, [r3, #4]

		   gyro_imu[0] = (int16_t)(gyro_add[0]/5);
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	4a68      	ldr	r2, [pc, #416]	@ (8005430 <read_sensor+0x278>)
 8005290:	fb82 1203 	smull	r1, r2, r2, r3
 8005294:	1052      	asrs	r2, r2, #1
 8005296:	17db      	asrs	r3, r3, #31
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	b21a      	sxth	r2, r3
 800529c:	4b65      	ldr	r3, [pc, #404]	@ (8005434 <read_sensor+0x27c>)
 800529e:	801a      	strh	r2, [r3, #0]
		   gyro_imu[1] = (int16_t)(gyro_add[1]/5);
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	4a63      	ldr	r2, [pc, #396]	@ (8005430 <read_sensor+0x278>)
 80052a4:	fb82 1203 	smull	r1, r2, r2, r3
 80052a8:	1052      	asrs	r2, r2, #1
 80052aa:	17db      	asrs	r3, r3, #31
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	b21a      	sxth	r2, r3
 80052b0:	4b60      	ldr	r3, [pc, #384]	@ (8005434 <read_sensor+0x27c>)
 80052b2:	805a      	strh	r2, [r3, #2]
		   gyro_imu[2] = (int16_t)(gyro_add[2]/5);
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	4a5e      	ldr	r2, [pc, #376]	@ (8005430 <read_sensor+0x278>)
 80052b8:	fb82 1203 	smull	r1, r2, r2, r3
 80052bc:	1052      	asrs	r2, r2, #1
 80052be:	17db      	asrs	r3, r3, #31
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	b21a      	sxth	r2, r3
 80052c4:	4b5b      	ldr	r3, [pc, #364]	@ (8005434 <read_sensor+0x27c>)
 80052c6:	809a      	strh	r2, [r3, #4]
		   gyro_add[0] = 0;
 80052c8:	2300      	movs	r3, #0
 80052ca:	617b      	str	r3, [r7, #20]
		   gyro_add[1] = 0;
 80052cc:	2300      	movs	r3, #0
 80052ce:	61bb      	str	r3, [r7, #24]
		   gyro_add[2] = 0;
 80052d0:	2300      	movs	r3, #0
 80052d2:	61fb      	str	r3, [r7, #28]
		   sample_count = 0;
 80052d4:	2300      	movs	r3, #0
 80052d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		   //vTaskResume(task1Handle);
		}

		raw.x = 0;
 80052da:	2300      	movs	r3, #0
 80052dc:	843b      	strh	r3, [r7, #32]
		raw.y = 0;
 80052de:	2300      	movs	r3, #0
 80052e0:	847b      	strh	r3, [r7, #34]	@ 0x22
		raw.z = 0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	84bb      	strh	r3, [r7, #36]	@ 0x24

		mpu6050_acc_get_raw(&raw);
 80052e6:	f107 0320 	add.w	r3, r7, #32
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fd f890 	bl	8002410 <mpu6050_acc_get_raw>
		if(first_loop){
 80052f0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00e      	beq.n	8005316 <read_sensor+0x15e>
			acc_imu[0] = raw.x;
 80052f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80052fc:	4b4e      	ldr	r3, [pc, #312]	@ (8005438 <read_sensor+0x280>)
 80052fe:	801a      	strh	r2, [r3, #0]
			acc_imu[1] = raw.y;
 8005300:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8005304:	4b4c      	ldr	r3, [pc, #304]	@ (8005438 <read_sensor+0x280>)
 8005306:	805a      	strh	r2, [r3, #2]
			acc_imu[2] = raw.z;
 8005308:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800530c:	4b4a      	ldr	r3, [pc, #296]	@ (8005438 <read_sensor+0x280>)
 800530e:	809a      	strh	r2, [r3, #4]
			first_loop = 0;
 8005310:	2300      	movs	r3, #0
 8005312:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		}
		// low pass filter
		acc_imu[0] += 0.1*(raw.x - acc_imu[0]);
 8005316:	4b48      	ldr	r3, [pc, #288]	@ (8005438 <read_sensor+0x280>)
 8005318:	f9b3 3000 	ldrsh.w	r3, [r3]
 800531c:	4618      	mov	r0, r3
 800531e:	f7fb f8d9 	bl	80004d4 <__aeabi_i2d>
 8005322:	4604      	mov	r4, r0
 8005324:	460d      	mov	r5, r1
 8005326:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800532a:	461a      	mov	r2, r3
 800532c:	4b42      	ldr	r3, [pc, #264]	@ (8005438 <read_sensor+0x280>)
 800532e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	4618      	mov	r0, r3
 8005336:	f7fb f8cd 	bl	80004d4 <__aeabi_i2d>
 800533a:	a339      	add	r3, pc, #228	@ (adr r3, 8005420 <read_sensor+0x268>)
 800533c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005340:	f7fb f932 	bl	80005a8 <__aeabi_dmul>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4620      	mov	r0, r4
 800534a:	4629      	mov	r1, r5
 800534c:	f7fa ff76 	bl	800023c <__adddf3>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4610      	mov	r0, r2
 8005356:	4619      	mov	r1, r3
 8005358:	f7fb fbd6 	bl	8000b08 <__aeabi_d2iz>
 800535c:	4603      	mov	r3, r0
 800535e:	b21a      	sxth	r2, r3
 8005360:	4b35      	ldr	r3, [pc, #212]	@ (8005438 <read_sensor+0x280>)
 8005362:	801a      	strh	r2, [r3, #0]
		acc_imu[1] += 0.1*(raw.y - acc_imu[1]);
 8005364:	4b34      	ldr	r3, [pc, #208]	@ (8005438 <read_sensor+0x280>)
 8005366:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800536a:	4618      	mov	r0, r3
 800536c:	f7fb f8b2 	bl	80004d4 <__aeabi_i2d>
 8005370:	4604      	mov	r4, r0
 8005372:	460d      	mov	r5, r1
 8005374:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8005378:	461a      	mov	r2, r3
 800537a:	4b2f      	ldr	r3, [pc, #188]	@ (8005438 <read_sensor+0x280>)
 800537c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	4618      	mov	r0, r3
 8005384:	f7fb f8a6 	bl	80004d4 <__aeabi_i2d>
 8005388:	a325      	add	r3, pc, #148	@ (adr r3, 8005420 <read_sensor+0x268>)
 800538a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538e:	f7fb f90b 	bl	80005a8 <__aeabi_dmul>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	4620      	mov	r0, r4
 8005398:	4629      	mov	r1, r5
 800539a:	f7fa ff4f 	bl	800023c <__adddf3>
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	4610      	mov	r0, r2
 80053a4:	4619      	mov	r1, r3
 80053a6:	f7fb fbaf 	bl	8000b08 <__aeabi_d2iz>
 80053aa:	4603      	mov	r3, r0
 80053ac:	b21a      	sxth	r2, r3
 80053ae:	4b22      	ldr	r3, [pc, #136]	@ (8005438 <read_sensor+0x280>)
 80053b0:	805a      	strh	r2, [r3, #2]
		acc_imu[2] += 0.1*(raw.z - acc_imu[2]);
 80053b2:	4b21      	ldr	r3, [pc, #132]	@ (8005438 <read_sensor+0x280>)
 80053b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7fb f88b 	bl	80004d4 <__aeabi_i2d>
 80053be:	4604      	mov	r4, r0
 80053c0:	460d      	mov	r5, r1
 80053c2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80053c6:	461a      	mov	r2, r3
 80053c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005438 <read_sensor+0x280>)
 80053ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fb f87f 	bl	80004d4 <__aeabi_i2d>
 80053d6:	a312      	add	r3, pc, #72	@ (adr r3, 8005420 <read_sensor+0x268>)
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	f7fb f8e4 	bl	80005a8 <__aeabi_dmul>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4620      	mov	r0, r4
 80053e6:	4629      	mov	r1, r5
 80053e8:	f7fa ff28 	bl	800023c <__adddf3>
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4610      	mov	r0, r2
 80053f2:	4619      	mov	r1, r3
 80053f4:	f7fb fb88 	bl	8000b08 <__aeabi_d2iz>
 80053f8:	4603      	mov	r3, r0
 80053fa:	b21a      	sxth	r2, r3
 80053fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005438 <read_sensor+0x280>)
 80053fe:	809a      	strh	r2, [r3, #4]
#ifdef STACK_DEBUG
	    stack_task_sensor = uxTaskGetStackHighWaterMark( NULL );
 8005400:	2000      	movs	r0, #0
 8005402:	f00e fcdb 	bl	8013dbc <uxTaskGetStackHighWaterMark>
 8005406:	4603      	mov	r3, r0
 8005408:	b29a      	uxth	r2, r3
 800540a:	4b0c      	ldr	r3, [pc, #48]	@ (800543c <read_sensor+0x284>)
 800540c:	801a      	strh	r2, [r3, #0]
#endif
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800540e:	f107 0310 	add.w	r3, r7, #16
 8005412:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005414:	4618      	mov	r0, r3
 8005416:	f00d ff9f 	bl	8013358 <vTaskDelayUntil>
		mpu6050_gyro_get_raw(&raw);
 800541a:	e6fd      	b.n	8005218 <read_sensor+0x60>
 800541c:	f3af 8000 	nop.w
 8005420:	9999999a 	.word	0x9999999a
 8005424:	3fb99999 	.word	0x3fb99999
 8005428:	200008d0 	.word	0x200008d0
 800542c:	2000086c 	.word	0x2000086c
 8005430:	66666667 	.word	0x66666667
 8005434:	2000085c 	.word	0x2000085c
 8005438:	20000864 	.word	0x20000864
 800543c:	20000850 	.word	0x20000850

08005440 <mavlinkOSD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_mavlinkOSD */
void mavlinkOSD(void const * argument)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN mavlinkOSD */
	mavlinkInit(1,1,&huart1,57600);
 8005448:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 800544c:	4a0d      	ldr	r2, [pc, #52]	@ (8005484 <mavlinkOSD+0x44>)
 800544e:	2101      	movs	r1, #1
 8005450:	2001      	movs	r0, #1
 8005452:	f002 f85f 	bl	8007514 <mavlinkInit>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50;  // 25 ms
 8005456:	2332      	movs	r3, #50	@ 0x32
 8005458:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 800545a:	f00e f9d5 	bl	8013808 <xTaskGetTickCount>
 800545e:	4603      	mov	r3, r0
 8005460:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	mavlink_osd();
 8005462:	f002 f88d 	bl	8007580 <mavlink_osd>
	//mavlink_send_heartbeat();
	vTaskDelayUntil( &xLastWakeTime, xFrequency);
 8005466:	f107 0308 	add.w	r3, r7, #8
 800546a:	68f9      	ldr	r1, [r7, #12]
 800546c:	4618      	mov	r0, r3
 800546e:	f00d ff73 	bl	8013358 <vTaskDelayUntil>
#ifdef STACK_DEBUG
    stack_task_mavOSD = uxTaskGetStackHighWaterMark( NULL );
 8005472:	2000      	movs	r0, #0
 8005474:	f00e fca2 	bl	8013dbc <uxTaskGetStackHighWaterMark>
 8005478:	4603      	mov	r3, r0
 800547a:	b29a      	uxth	r2, r3
 800547c:	4b02      	ldr	r3, [pc, #8]	@ (8005488 <mavlinkOSD+0x48>)
 800547e:	801a      	strh	r2, [r3, #0]
	mavlink_osd();
 8005480:	bf00      	nop
 8005482:	e7ee      	b.n	8005462 <mavlinkOSD+0x22>
 8005484:	20000a84 	.word	0x20000a84
 8005488:	20000852 	.word	0x20000852

0800548c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b088      	sub	sp, #32
 8005490:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005492:	f107 0310 	add.w	r3, r7, #16
 8005496:	2200      	movs	r2, #0
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	605a      	str	r2, [r3, #4]
 800549c:	609a      	str	r2, [r3, #8]
 800549e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80054a0:	4b46      	ldr	r3, [pc, #280]	@ (80055bc <MX_GPIO_Init+0x130>)
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	4a45      	ldr	r2, [pc, #276]	@ (80055bc <MX_GPIO_Init+0x130>)
 80054a6:	f043 0310 	orr.w	r3, r3, #16
 80054aa:	6193      	str	r3, [r2, #24]
 80054ac:	4b43      	ldr	r3, [pc, #268]	@ (80055bc <MX_GPIO_Init+0x130>)
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80054b8:	4b40      	ldr	r3, [pc, #256]	@ (80055bc <MX_GPIO_Init+0x130>)
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	4a3f      	ldr	r2, [pc, #252]	@ (80055bc <MX_GPIO_Init+0x130>)
 80054be:	f043 0304 	orr.w	r3, r3, #4
 80054c2:	6193      	str	r3, [r2, #24]
 80054c4:	4b3d      	ldr	r3, [pc, #244]	@ (80055bc <MX_GPIO_Init+0x130>)
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	60bb      	str	r3, [r7, #8]
 80054ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80054d0:	4b3a      	ldr	r3, [pc, #232]	@ (80055bc <MX_GPIO_Init+0x130>)
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	4a39      	ldr	r2, [pc, #228]	@ (80055bc <MX_GPIO_Init+0x130>)
 80054d6:	f043 0308 	orr.w	r3, r3, #8
 80054da:	6193      	str	r3, [r2, #24]
 80054dc:	4b37      	ldr	r3, [pc, #220]	@ (80055bc <MX_GPIO_Init+0x130>)
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	f003 0308 	and.w	r3, r3, #8
 80054e4:	607b      	str	r3, [r7, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80054e8:	4b34      	ldr	r3, [pc, #208]	@ (80055bc <MX_GPIO_Init+0x130>)
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	4a33      	ldr	r2, [pc, #204]	@ (80055bc <MX_GPIO_Init+0x130>)
 80054ee:	f043 0320 	orr.w	r3, r3, #32
 80054f2:	6193      	str	r3, [r2, #24]
 80054f4:	4b31      	ldr	r3, [pc, #196]	@ (80055bc <MX_GPIO_Init+0x130>)
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	603b      	str	r3, [r7, #0]
 80054fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8005500:	2200      	movs	r2, #0
 8005502:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005506:	482e      	ldr	r0, [pc, #184]	@ (80055c0 <MX_GPIO_Init+0x134>)
 8005508:	f003 f8c7 	bl	800869a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800550c:	2200      	movs	r2, #0
 800550e:	2130      	movs	r1, #48	@ 0x30
 8005510:	482c      	ldr	r0, [pc, #176]	@ (80055c4 <MX_GPIO_Init+0x138>)
 8005512:	f003 f8c2 	bl	800869a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8005516:	2200      	movs	r2, #0
 8005518:	21c0      	movs	r1, #192	@ 0xc0
 800551a:	482b      	ldr	r0, [pc, #172]	@ (80055c8 <MX_GPIO_Init+0x13c>)
 800551c:	f003 f8bd 	bl	800869a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8005520:	2200      	movs	r2, #0
 8005522:	2118      	movs	r1, #24
 8005524:	4829      	ldr	r0, [pc, #164]	@ (80055cc <MX_GPIO_Init+0x140>)
 8005526:	f003 f8b8 	bl	800869a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800552a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800552e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005530:	2301      	movs	r3, #1
 8005532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005534:	2300      	movs	r3, #0
 8005536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005538:	2302      	movs	r3, #2
 800553a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800553c:	f107 0310 	add.w	r3, r7, #16
 8005540:	4619      	mov	r1, r3
 8005542:	481f      	ldr	r0, [pc, #124]	@ (80055c0 <MX_GPIO_Init+0x134>)
 8005544:	f002 fefe 	bl	8008344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005548:	2330      	movs	r3, #48	@ 0x30
 800554a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800554c:	2301      	movs	r3, #1
 800554e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005550:	2300      	movs	r3, #0
 8005552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005554:	2302      	movs	r3, #2
 8005556:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005558:	f107 0310 	add.w	r3, r7, #16
 800555c:	4619      	mov	r1, r3
 800555e:	4819      	ldr	r0, [pc, #100]	@ (80055c4 <MX_GPIO_Init+0x138>)
 8005560:	f002 fef0 	bl	8008344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005564:	23c0      	movs	r3, #192	@ 0xc0
 8005566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005568:	2301      	movs	r3, #1
 800556a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800556c:	2300      	movs	r3, #0
 800556e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005570:	2302      	movs	r3, #2
 8005572:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005574:	f107 0310 	add.w	r3, r7, #16
 8005578:	4619      	mov	r1, r3
 800557a:	4813      	ldr	r0, [pc, #76]	@ (80055c8 <MX_GPIO_Init+0x13c>)
 800557c:	f002 fee2 	bl	8008344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8005580:	2318      	movs	r3, #24
 8005582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005584:	2301      	movs	r3, #1
 8005586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005588:	2300      	movs	r3, #0
 800558a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800558c:	2302      	movs	r3, #2
 800558e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005590:	f107 0310 	add.w	r3, r7, #16
 8005594:	4619      	mov	r1, r3
 8005596:	480d      	ldr	r0, [pc, #52]	@ (80055cc <MX_GPIO_Init+0x140>)
 8005598:	f002 fed4 	bl	8008344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800559c:	2320      	movs	r3, #32
 800559e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055a0:	2300      	movs	r3, #0
 80055a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80055a4:	2302      	movs	r3, #2
 80055a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055a8:	f107 0310 	add.w	r3, r7, #16
 80055ac:	4619      	mov	r1, r3
 80055ae:	4807      	ldr	r0, [pc, #28]	@ (80055cc <MX_GPIO_Init+0x140>)
 80055b0:	f002 fec8 	bl	8008344 <HAL_GPIO_Init>

}
 80055b4:	bf00      	nop
 80055b6:	3720      	adds	r7, #32
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	40021000 	.word	0x40021000
 80055c0:	40011000 	.word	0x40011000
 80055c4:	40010800 	.word	0x40010800
 80055c8:	40011400 	.word	0x40011400
 80055cc:	40010c00 	.word	0x40010c00

080055d0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80055d4:	4b12      	ldr	r3, [pc, #72]	@ (8005620 <MX_I2C1_Init+0x50>)
 80055d6:	4a13      	ldr	r2, [pc, #76]	@ (8005624 <MX_I2C1_Init+0x54>)
 80055d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80055da:	4b11      	ldr	r3, [pc, #68]	@ (8005620 <MX_I2C1_Init+0x50>)
 80055dc:	4a12      	ldr	r2, [pc, #72]	@ (8005628 <MX_I2C1_Init+0x58>)
 80055de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80055e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005620 <MX_I2C1_Init+0x50>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80055e6:	4b0e      	ldr	r3, [pc, #56]	@ (8005620 <MX_I2C1_Init+0x50>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80055ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005620 <MX_I2C1_Init+0x50>)
 80055ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80055f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80055f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005620 <MX_I2C1_Init+0x50>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80055fa:	4b09      	ldr	r3, [pc, #36]	@ (8005620 <MX_I2C1_Init+0x50>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005600:	4b07      	ldr	r3, [pc, #28]	@ (8005620 <MX_I2C1_Init+0x50>)
 8005602:	2200      	movs	r2, #0
 8005604:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005606:	4b06      	ldr	r3, [pc, #24]	@ (8005620 <MX_I2C1_Init+0x50>)
 8005608:	2200      	movs	r2, #0
 800560a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800560c:	4804      	ldr	r0, [pc, #16]	@ (8005620 <MX_I2C1_Init+0x50>)
 800560e:	f003 f875 	bl	80086fc <HAL_I2C_Init>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005618:	f000 f92a 	bl	8005870 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800561c:	bf00      	nop
 800561e:	bd80      	pop	{r7, pc}
 8005620:	2000087c 	.word	0x2000087c
 8005624:	40005400 	.word	0x40005400
 8005628:	00061a80 	.word	0x00061a80

0800562c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005630:	4b12      	ldr	r3, [pc, #72]	@ (800567c <MX_I2C2_Init+0x50>)
 8005632:	4a13      	ldr	r2, [pc, #76]	@ (8005680 <MX_I2C2_Init+0x54>)
 8005634:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8005636:	4b11      	ldr	r3, [pc, #68]	@ (800567c <MX_I2C2_Init+0x50>)
 8005638:	4a12      	ldr	r2, [pc, #72]	@ (8005684 <MX_I2C2_Init+0x58>)
 800563a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800563c:	4b0f      	ldr	r3, [pc, #60]	@ (800567c <MX_I2C2_Init+0x50>)
 800563e:	2200      	movs	r2, #0
 8005640:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005642:	4b0e      	ldr	r3, [pc, #56]	@ (800567c <MX_I2C2_Init+0x50>)
 8005644:	2200      	movs	r2, #0
 8005646:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005648:	4b0c      	ldr	r3, [pc, #48]	@ (800567c <MX_I2C2_Init+0x50>)
 800564a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800564e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005650:	4b0a      	ldr	r3, [pc, #40]	@ (800567c <MX_I2C2_Init+0x50>)
 8005652:	2200      	movs	r2, #0
 8005654:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005656:	4b09      	ldr	r3, [pc, #36]	@ (800567c <MX_I2C2_Init+0x50>)
 8005658:	2200      	movs	r2, #0
 800565a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800565c:	4b07      	ldr	r3, [pc, #28]	@ (800567c <MX_I2C2_Init+0x50>)
 800565e:	2200      	movs	r2, #0
 8005660:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005662:	4b06      	ldr	r3, [pc, #24]	@ (800567c <MX_I2C2_Init+0x50>)
 8005664:	2200      	movs	r2, #0
 8005666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005668:	4804      	ldr	r0, [pc, #16]	@ (800567c <MX_I2C2_Init+0x50>)
 800566a:	f003 f847 	bl	80086fc <HAL_I2C_Init>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005674:	f000 f8fc 	bl	8005870 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005678:	bf00      	nop
 800567a:	bd80      	pop	{r7, pc}
 800567c:	200008d0 	.word	0x200008d0
 8005680:	40005800 	.word	0x40005800
 8005684:	00061a80 	.word	0x00061a80

08005688 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b08a      	sub	sp, #40	@ 0x28
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005690:	f107 0318 	add.w	r3, r7, #24
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	605a      	str	r2, [r3, #4]
 800569a:	609a      	str	r2, [r3, #8]
 800569c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a2b      	ldr	r2, [pc, #172]	@ (8005750 <HAL_I2C_MspInit+0xc8>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d124      	bne.n	80056f2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056a8:	4b2a      	ldr	r3, [pc, #168]	@ (8005754 <HAL_I2C_MspInit+0xcc>)
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	4a29      	ldr	r2, [pc, #164]	@ (8005754 <HAL_I2C_MspInit+0xcc>)
 80056ae:	f043 0308 	orr.w	r3, r3, #8
 80056b2:	6193      	str	r3, [r2, #24]
 80056b4:	4b27      	ldr	r3, [pc, #156]	@ (8005754 <HAL_I2C_MspInit+0xcc>)
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	f003 0308 	and.w	r3, r3, #8
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80056c0:	23c0      	movs	r3, #192	@ 0xc0
 80056c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80056c4:	2312      	movs	r3, #18
 80056c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80056c8:	2303      	movs	r3, #3
 80056ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056cc:	f107 0318 	add.w	r3, r7, #24
 80056d0:	4619      	mov	r1, r3
 80056d2:	4821      	ldr	r0, [pc, #132]	@ (8005758 <HAL_I2C_MspInit+0xd0>)
 80056d4:	f002 fe36 	bl	8008344 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80056d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005754 <HAL_I2C_MspInit+0xcc>)
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005754 <HAL_I2C_MspInit+0xcc>)
 80056de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80056e2:	61d3      	str	r3, [r2, #28]
 80056e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005754 <HAL_I2C_MspInit+0xcc>)
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056ec:	613b      	str	r3, [r7, #16]
 80056ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80056f0:	e029      	b.n	8005746 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a19      	ldr	r2, [pc, #100]	@ (800575c <HAL_I2C_MspInit+0xd4>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d124      	bne.n	8005746 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056fc:	4b15      	ldr	r3, [pc, #84]	@ (8005754 <HAL_I2C_MspInit+0xcc>)
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	4a14      	ldr	r2, [pc, #80]	@ (8005754 <HAL_I2C_MspInit+0xcc>)
 8005702:	f043 0308 	orr.w	r3, r3, #8
 8005706:	6193      	str	r3, [r2, #24]
 8005708:	4b12      	ldr	r3, [pc, #72]	@ (8005754 <HAL_I2C_MspInit+0xcc>)
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	f003 0308 	and.w	r3, r3, #8
 8005710:	60fb      	str	r3, [r7, #12]
 8005712:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005714:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800571a:	2312      	movs	r3, #18
 800571c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800571e:	2303      	movs	r3, #3
 8005720:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005722:	f107 0318 	add.w	r3, r7, #24
 8005726:	4619      	mov	r1, r3
 8005728:	480b      	ldr	r0, [pc, #44]	@ (8005758 <HAL_I2C_MspInit+0xd0>)
 800572a:	f002 fe0b 	bl	8008344 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800572e:	4b09      	ldr	r3, [pc, #36]	@ (8005754 <HAL_I2C_MspInit+0xcc>)
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	4a08      	ldr	r2, [pc, #32]	@ (8005754 <HAL_I2C_MspInit+0xcc>)
 8005734:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005738:	61d3      	str	r3, [r2, #28]
 800573a:	4b06      	ldr	r3, [pc, #24]	@ (8005754 <HAL_I2C_MspInit+0xcc>)
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005742:	60bb      	str	r3, [r7, #8]
 8005744:	68bb      	ldr	r3, [r7, #8]
}
 8005746:	bf00      	nop
 8005748:	3728      	adds	r7, #40	@ 0x28
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	40005400 	.word	0x40005400
 8005754:	40021000 	.word	0x40021000
 8005758:	40010c00 	.word	0x40010c00
 800575c:	40005800 	.word	0x40005800

08005760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005764:	f002 f834 	bl	80077d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005768:	f000 f81c 	bl	80057a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800576c:	f7ff fe8e 	bl	800548c <MX_GPIO_Init>
  MX_DMA_Init();
 8005770:	f7ff f994 	bl	8004a9c <MX_DMA_Init>
  MX_I2C1_Init();
 8005774:	f7ff ff2c 	bl	80055d0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8005778:	f7ff ff58 	bl	800562c <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 800577c:	f000 f87e 	bl	800587c <MX_SDIO_SD_Init>
  MX_TIM7_Init();
 8005780:	f000 fad6 	bl	8005d30 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8005784:	f000 fb98 	bl	8005eb8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8005788:	f000 fbc0 	bl	8005f0c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800578c:	f000 fbe8 	bl	8005f60 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8005790:	f000 fa42 	bl	8005c18 <MX_TIM3_Init>
  MX_FATFS_Init();
 8005794:	f008 fe6a 	bl	800e46c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8005798:	f7ff f9e0 	bl	8004b5c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800579c:	f00c fc88 	bl	80120b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80057a0:	bf00      	nop
 80057a2:	e7fd      	b.n	80057a0 <main+0x40>

080057a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b090      	sub	sp, #64	@ 0x40
 80057a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80057aa:	f107 0318 	add.w	r3, r7, #24
 80057ae:	2228      	movs	r2, #40	@ 0x28
 80057b0:	2100      	movs	r1, #0
 80057b2:	4618      	mov	r0, r3
 80057b4:	f00f fa54 	bl	8014c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80057b8:	1d3b      	adds	r3, r7, #4
 80057ba:	2200      	movs	r2, #0
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	605a      	str	r2, [r3, #4]
 80057c0:	609a      	str	r2, [r3, #8]
 80057c2:	60da      	str	r2, [r3, #12]
 80057c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80057c6:	2301      	movs	r3, #1
 80057c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80057ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80057ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80057d0:	2300      	movs	r3, #0
 80057d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80057d4:	2301      	movs	r3, #1
 80057d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80057d8:	2302      	movs	r3, #2
 80057da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80057dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80057e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80057e2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80057e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80057e8:	f107 0318 	add.w	r3, r7, #24
 80057ec:	4618      	mov	r0, r3
 80057ee:	f004 fdc7 	bl	800a380 <HAL_RCC_OscConfig>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80057f8:	f000 f83a 	bl	8005870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80057fc:	230f      	movs	r3, #15
 80057fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005800:	2302      	movs	r3, #2
 8005802:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005804:	2300      	movs	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005808:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800580c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800580e:	2300      	movs	r3, #0
 8005810:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005812:	1d3b      	adds	r3, r7, #4
 8005814:	2102      	movs	r1, #2
 8005816:	4618      	mov	r0, r3
 8005818:	f005 f834 	bl	800a884 <HAL_RCC_ClockConfig>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8005822:	f000 f825 	bl	8005870 <Error_Handler>
  }
}
 8005826:	bf00      	nop
 8005828:	3740      	adds	r7, #64	@ 0x40
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
	...

08005830 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005840:	d102      	bne.n	8005848 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8005842:	f001 ffdb 	bl	80077fc <HAL_IncTick>
  else if(htim->Instance == TIM7){
	  TIMER_CALLBACK();
  }

  /* USER CODE END Callback 1 */
}
 8005846:	e00b      	b.n	8005860 <HAL_TIM_PeriodElapsedCallback+0x30>
  else if(htim->Instance == TIM7){
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a06      	ldr	r2, [pc, #24]	@ (8005868 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d106      	bne.n	8005860 <HAL_TIM_PeriodElapsedCallback+0x30>
	  TIMER_CALLBACK();
 8005852:	4b06      	ldr	r3, [pc, #24]	@ (800586c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800585a:	33ff      	adds	r3, #255	@ 0xff
 800585c:	4a03      	ldr	r2, [pc, #12]	@ (800586c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800585e:	6013      	str	r3, [r2, #0]
}
 8005860:	bf00      	nop
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40001400 	.word	0x40001400
 800586c:	200005e0 	.word	0x200005e0

08005870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005870:	b480      	push	{r7}
 8005872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005874:	b672      	cpsid	i
}
 8005876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005878:	bf00      	nop
 800587a:	e7fd      	b.n	8005878 <Error_Handler+0x8>

0800587c <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8005880:	4b0e      	ldr	r3, [pc, #56]	@ (80058bc <MX_SDIO_SD_Init+0x40>)
 8005882:	4a0f      	ldr	r2, [pc, #60]	@ (80058c0 <MX_SDIO_SD_Init+0x44>)
 8005884:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8005886:	4b0d      	ldr	r3, [pc, #52]	@ (80058bc <MX_SDIO_SD_Init+0x40>)
 8005888:	2200      	movs	r2, #0
 800588a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_ENABLE;
 800588c:	4b0b      	ldr	r3, [pc, #44]	@ (80058bc <MX_SDIO_SD_Init+0x40>)
 800588e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005892:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005894:	4b09      	ldr	r3, [pc, #36]	@ (80058bc <MX_SDIO_SD_Init+0x40>)
 8005896:	2200      	movs	r2, #0
 8005898:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800589a:	4b08      	ldr	r3, [pc, #32]	@ (80058bc <MX_SDIO_SD_Init+0x40>)
 800589c:	2200      	movs	r2, #0
 800589e:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80058a0:	4b06      	ldr	r3, [pc, #24]	@ (80058bc <MX_SDIO_SD_Init+0x40>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 255;
 80058a6:	4b05      	ldr	r3, [pc, #20]	@ (80058bc <MX_SDIO_SD_Init+0x40>)
 80058a8:	22ff      	movs	r2, #255	@ 0xff
 80058aa:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.ClockDiv = 255;
 80058ac:	4b03      	ldr	r3, [pc, #12]	@ (80058bc <MX_SDIO_SD_Init+0x40>)
 80058ae:	22ff      	movs	r2, #255	@ 0xff
 80058b0:	619a      	str	r2, [r3, #24]
  /* USER CODE END SDIO_Init 2 */

}
 80058b2:	bf00      	nop
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bc80      	pop	{r7}
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	20000924 	.word	0x20000924
 80058c0:	40018000 	.word	0x40018000

080058c4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08a      	sub	sp, #40	@ 0x28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058cc:	f107 0318 	add.w	r3, r7, #24
 80058d0:	2200      	movs	r2, #0
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	605a      	str	r2, [r3, #4]
 80058d6:	609a      	str	r2, [r3, #8]
 80058d8:	60da      	str	r2, [r3, #12]
  if(sdHandle->Instance==SDIO)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a22      	ldr	r2, [pc, #136]	@ (8005968 <HAL_SD_MspInit+0xa4>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d13c      	bne.n	800595e <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80058e4:	4b21      	ldr	r3, [pc, #132]	@ (800596c <HAL_SD_MspInit+0xa8>)
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	4a20      	ldr	r2, [pc, #128]	@ (800596c <HAL_SD_MspInit+0xa8>)
 80058ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80058ee:	6153      	str	r3, [r2, #20]
 80058f0:	4b1e      	ldr	r3, [pc, #120]	@ (800596c <HAL_SD_MspInit+0xa8>)
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058f8:	617b      	str	r3, [r7, #20]
 80058fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80058fc:	4b1b      	ldr	r3, [pc, #108]	@ (800596c <HAL_SD_MspInit+0xa8>)
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	4a1a      	ldr	r2, [pc, #104]	@ (800596c <HAL_SD_MspInit+0xa8>)
 8005902:	f043 0310 	orr.w	r3, r3, #16
 8005906:	6193      	str	r3, [r2, #24]
 8005908:	4b18      	ldr	r3, [pc, #96]	@ (800596c <HAL_SD_MspInit+0xa8>)
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	f003 0310 	and.w	r3, r3, #16
 8005910:	613b      	str	r3, [r7, #16]
 8005912:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005914:	4b15      	ldr	r3, [pc, #84]	@ (800596c <HAL_SD_MspInit+0xa8>)
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	4a14      	ldr	r2, [pc, #80]	@ (800596c <HAL_SD_MspInit+0xa8>)
 800591a:	f043 0320 	orr.w	r3, r3, #32
 800591e:	6193      	str	r3, [r2, #24]
 8005920:	4b12      	ldr	r3, [pc, #72]	@ (800596c <HAL_SD_MspInit+0xa8>)
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	f003 0320 	and.w	r3, r3, #32
 8005928:	60fb      	str	r3, [r7, #12]
 800592a:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800592c:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8005930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005932:	2302      	movs	r3, #2
 8005934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005936:	2303      	movs	r3, #3
 8005938:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800593a:	f107 0318 	add.w	r3, r7, #24
 800593e:	4619      	mov	r1, r3
 8005940:	480b      	ldr	r0, [pc, #44]	@ (8005970 <HAL_SD_MspInit+0xac>)
 8005942:	f002 fcff 	bl	8008344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005946:	2304      	movs	r3, #4
 8005948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800594a:	2302      	movs	r3, #2
 800594c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800594e:	2303      	movs	r3, #3
 8005950:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005952:	f107 0318 	add.w	r3, r7, #24
 8005956:	4619      	mov	r1, r3
 8005958:	4806      	ldr	r0, [pc, #24]	@ (8005974 <HAL_SD_MspInit+0xb0>)
 800595a:	f002 fcf3 	bl	8008344 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800595e:	bf00      	nop
 8005960:	3728      	adds	r7, #40	@ 0x28
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	40018000 	.word	0x40018000
 800596c:	40021000 	.word	0x40021000
 8005970:	40011000 	.word	0x40011000
 8005974:	40011400 	.word	0x40011400

08005978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800597e:	4b18      	ldr	r3, [pc, #96]	@ (80059e0 <HAL_MspInit+0x68>)
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	4a17      	ldr	r2, [pc, #92]	@ (80059e0 <HAL_MspInit+0x68>)
 8005984:	f043 0301 	orr.w	r3, r3, #1
 8005988:	6193      	str	r3, [r2, #24]
 800598a:	4b15      	ldr	r3, [pc, #84]	@ (80059e0 <HAL_MspInit+0x68>)
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	60bb      	str	r3, [r7, #8]
 8005994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005996:	4b12      	ldr	r3, [pc, #72]	@ (80059e0 <HAL_MspInit+0x68>)
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	4a11      	ldr	r2, [pc, #68]	@ (80059e0 <HAL_MspInit+0x68>)
 800599c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059a0:	61d3      	str	r3, [r2, #28]
 80059a2:	4b0f      	ldr	r3, [pc, #60]	@ (80059e0 <HAL_MspInit+0x68>)
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059aa:	607b      	str	r3, [r7, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80059ae:	2200      	movs	r2, #0
 80059b0:	210f      	movs	r1, #15
 80059b2:	f06f 0001 	mvn.w	r0, #1
 80059b6:	f002 f816 	bl	80079e6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80059ba:	4b0a      	ldr	r3, [pc, #40]	@ (80059e4 <HAL_MspInit+0x6c>)
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	4a04      	ldr	r2, [pc, #16]	@ (80059e4 <HAL_MspInit+0x6c>)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80059d6:	bf00      	nop
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	40021000 	.word	0x40021000
 80059e4:	40010000 	.word	0x40010000

080059e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08e      	sub	sp, #56	@ 0x38
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80059f8:	2300      	movs	r3, #0
 80059fa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80059fe:	4b34      	ldr	r3, [pc, #208]	@ (8005ad0 <HAL_InitTick+0xe8>)
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	4a33      	ldr	r2, [pc, #204]	@ (8005ad0 <HAL_InitTick+0xe8>)
 8005a04:	f043 0301 	orr.w	r3, r3, #1
 8005a08:	61d3      	str	r3, [r2, #28]
 8005a0a:	4b31      	ldr	r3, [pc, #196]	@ (8005ad0 <HAL_InitTick+0xe8>)
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	60fb      	str	r3, [r7, #12]
 8005a14:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005a16:	f107 0210 	add.w	r2, r7, #16
 8005a1a:	f107 0314 	add.w	r3, r7, #20
 8005a1e:	4611      	mov	r1, r2
 8005a20:	4618      	mov	r0, r3
 8005a22:	f005 f89f 	bl	800ab64 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d103      	bne.n	8005a38 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005a30:	f005 f870 	bl	800ab14 <HAL_RCC_GetPCLK1Freq>
 8005a34:	6378      	str	r0, [r7, #52]	@ 0x34
 8005a36:	e004      	b.n	8005a42 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005a38:	f005 f86c 	bl	800ab14 <HAL_RCC_GetPCLK1Freq>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a44:	4a23      	ldr	r2, [pc, #140]	@ (8005ad4 <HAL_InitTick+0xec>)
 8005a46:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4a:	0c9b      	lsrs	r3, r3, #18
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8005a50:	4b21      	ldr	r3, [pc, #132]	@ (8005ad8 <HAL_InitTick+0xf0>)
 8005a52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005a56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8005a58:	4b1f      	ldr	r3, [pc, #124]	@ (8005ad8 <HAL_InitTick+0xf0>)
 8005a5a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005a5e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8005a60:	4a1d      	ldr	r2, [pc, #116]	@ (8005ad8 <HAL_InitTick+0xf0>)
 8005a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a64:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8005a66:	4b1c      	ldr	r3, [pc, #112]	@ (8005ad8 <HAL_InitTick+0xf0>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ad8 <HAL_InitTick+0xf0>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a72:	4b19      	ldr	r3, [pc, #100]	@ (8005ad8 <HAL_InitTick+0xf0>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8005a78:	4817      	ldr	r0, [pc, #92]	@ (8005ad8 <HAL_InitTick+0xf0>)
 8005a7a:	f006 f849 	bl	800bb10 <HAL_TIM_Base_Init>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8005a84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d11b      	bne.n	8005ac4 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8005a8c:	4812      	ldr	r0, [pc, #72]	@ (8005ad8 <HAL_InitTick+0xf0>)
 8005a8e:	f006 f88f 	bl	800bbb0 <HAL_TIM_Base_Start_IT>
 8005a92:	4603      	mov	r3, r0
 8005a94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8005a98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d111      	bne.n	8005ac4 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005aa0:	201c      	movs	r0, #28
 8005aa2:	f001 ffbc 	bl	8007a1e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b0f      	cmp	r3, #15
 8005aaa:	d808      	bhi.n	8005abe <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8005aac:	2200      	movs	r2, #0
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	201c      	movs	r0, #28
 8005ab2:	f001 ff98 	bl	80079e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005ab6:	4a09      	ldr	r2, [pc, #36]	@ (8005adc <HAL_InitTick+0xf4>)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6013      	str	r3, [r2, #0]
 8005abc:	e002      	b.n	8005ac4 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005ac4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3738      	adds	r7, #56	@ 0x38
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	40021000 	.word	0x40021000
 8005ad4:	431bde83 	.word	0x431bde83
 8005ad8:	200009a8 	.word	0x200009a8
 8005adc:	20000068 	.word	0x20000068

08005ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005ae4:	bf00      	nop
 8005ae6:	e7fd      	b.n	8005ae4 <NMI_Handler+0x4>

08005ae8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005aec:	bf00      	nop
 8005aee:	e7fd      	b.n	8005aec <HardFault_Handler+0x4>

08005af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005af0:	b480      	push	{r7}
 8005af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005af4:	bf00      	nop
 8005af6:	e7fd      	b.n	8005af4 <MemManage_Handler+0x4>

08005af8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005af8:	b480      	push	{r7}
 8005afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005afc:	bf00      	nop
 8005afe:	e7fd      	b.n	8005afc <BusFault_Handler+0x4>

08005b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b04:	bf00      	nop
 8005b06:	e7fd      	b.n	8005b04 <UsageFault_Handler+0x4>

08005b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b0c:	bf00      	nop
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bc80      	pop	{r7}
 8005b12:	4770      	bx	lr

08005b14 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005b18:	4802      	ldr	r0, [pc, #8]	@ (8005b24 <DMA1_Channel4_IRQHandler+0x10>)
 8005b1a:	f002 f9a9 	bl	8007e70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005b1e:	bf00      	nop
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20000b5c 	.word	0x20000b5c

08005b28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005b2c:	4802      	ldr	r0, [pc, #8]	@ (8005b38 <TIM2_IRQHandler+0x10>)
 8005b2e:	f006 f9b1 	bl	800be94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005b32:	bf00      	nop
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	200009a8 	.word	0x200009a8

08005b3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005b40:	4802      	ldr	r0, [pc, #8]	@ (8005b4c <TIM3_IRQHandler+0x10>)
 8005b42:	f006 f9a7 	bl	800be94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005b46:	bf00      	nop
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	200009f4 	.word	0x200009f4

08005b50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005b54:	4802      	ldr	r0, [pc, #8]	@ (8005b60 <USART1_IRQHandler+0x10>)
 8005b56:	f007 f919 	bl	800cd8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005b5a:	bf00      	nop
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	20000a84 	.word	0x20000a84

08005b64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005b68:	4802      	ldr	r0, [pc, #8]	@ (8005b74 <USART2_IRQHandler+0x10>)
 8005b6a:	f007 f90f 	bl	800cd8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005b6e:	bf00      	nop
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20000acc 	.word	0x20000acc

08005b78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005b7c:	4802      	ldr	r0, [pc, #8]	@ (8005b88 <USART3_IRQHandler+0x10>)
 8005b7e:	f007 f905 	bl	800cd8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005b82:	bf00      	nop
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	20000b14 	.word	0x20000b14

08005b8c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005b90:	4802      	ldr	r0, [pc, #8]	@ (8005b9c <TIM7_IRQHandler+0x10>)
 8005b92:	f006 f97f 	bl	800be94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005b96:	bf00      	nop
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20000a3c 	.word	0x20000a3c

08005ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ba8:	4a14      	ldr	r2, [pc, #80]	@ (8005bfc <_sbrk+0x5c>)
 8005baa:	4b15      	ldr	r3, [pc, #84]	@ (8005c00 <_sbrk+0x60>)
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005bb4:	4b13      	ldr	r3, [pc, #76]	@ (8005c04 <_sbrk+0x64>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d102      	bne.n	8005bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005bbc:	4b11      	ldr	r3, [pc, #68]	@ (8005c04 <_sbrk+0x64>)
 8005bbe:	4a12      	ldr	r2, [pc, #72]	@ (8005c08 <_sbrk+0x68>)
 8005bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005bc2:	4b10      	ldr	r3, [pc, #64]	@ (8005c04 <_sbrk+0x64>)
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4413      	add	r3, r2
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d207      	bcs.n	8005be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005bd0:	f00f f85e 	bl	8014c90 <__errno>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	220c      	movs	r2, #12
 8005bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005bda:	f04f 33ff 	mov.w	r3, #4294967295
 8005bde:	e009      	b.n	8005bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005be0:	4b08      	ldr	r3, [pc, #32]	@ (8005c04 <_sbrk+0x64>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005be6:	4b07      	ldr	r3, [pc, #28]	@ (8005c04 <_sbrk+0x64>)
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4413      	add	r3, r2
 8005bee:	4a05      	ldr	r2, [pc, #20]	@ (8005c04 <_sbrk+0x64>)
 8005bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3718      	adds	r7, #24
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	2000c000 	.word	0x2000c000
 8005c00:	00005000 	.word	0x00005000
 8005c04:	200009f0 	.word	0x200009f0
 8005c08:	20003640 	.word	0x20003640

08005c0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005c10:	bf00      	nop
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bc80      	pop	{r7}
 8005c16:	4770      	bx	lr

08005c18 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08e      	sub	sp, #56	@ 0x38
 8005c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005c22:	2200      	movs	r2, #0
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	605a      	str	r2, [r3, #4]
 8005c28:	609a      	str	r2, [r3, #8]
 8005c2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c2c:	f107 0320 	add.w	r3, r7, #32
 8005c30:	2200      	movs	r2, #0
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c36:	1d3b      	adds	r3, r7, #4
 8005c38:	2200      	movs	r2, #0
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	605a      	str	r2, [r3, #4]
 8005c3e:	609a      	str	r2, [r3, #8]
 8005c40:	60da      	str	r2, [r3, #12]
 8005c42:	611a      	str	r2, [r3, #16]
 8005c44:	615a      	str	r2, [r3, #20]
 8005c46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005c48:	4b37      	ldr	r3, [pc, #220]	@ (8005d28 <MX_TIM3_Init+0x110>)
 8005c4a:	4a38      	ldr	r2, [pc, #224]	@ (8005d2c <MX_TIM3_Init+0x114>)
 8005c4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8005c4e:	4b36      	ldr	r3, [pc, #216]	@ (8005d28 <MX_TIM3_Init+0x110>)
 8005c50:	2247      	movs	r2, #71	@ 0x47
 8005c52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c54:	4b34      	ldr	r3, [pc, #208]	@ (8005d28 <MX_TIM3_Init+0x110>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005c5a:	4b33      	ldr	r3, [pc, #204]	@ (8005d28 <MX_TIM3_Init+0x110>)
 8005c5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c62:	4b31      	ldr	r3, [pc, #196]	@ (8005d28 <MX_TIM3_Init+0x110>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c68:	4b2f      	ldr	r3, [pc, #188]	@ (8005d28 <MX_TIM3_Init+0x110>)
 8005c6a:	2280      	movs	r2, #128	@ 0x80
 8005c6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005c6e:	482e      	ldr	r0, [pc, #184]	@ (8005d28 <MX_TIM3_Init+0x110>)
 8005c70:	f005 ff4e 	bl	800bb10 <HAL_TIM_Base_Init>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8005c7a:	f7ff fdf9 	bl	8005870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c82:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005c84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4827      	ldr	r0, [pc, #156]	@ (8005d28 <MX_TIM3_Init+0x110>)
 8005c8c:	f006 facc 	bl	800c228 <HAL_TIM_ConfigClockSource>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8005c96:	f7ff fdeb 	bl	8005870 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005c9a:	4823      	ldr	r0, [pc, #140]	@ (8005d28 <MX_TIM3_Init+0x110>)
 8005c9c:	f005 ffe8 	bl	800bc70 <HAL_TIM_PWM_Init>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005ca6:	f7ff fde3 	bl	8005870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005caa:	2300      	movs	r3, #0
 8005cac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005cb2:	f107 0320 	add.w	r3, r7, #32
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	481b      	ldr	r0, [pc, #108]	@ (8005d28 <MX_TIM3_Init+0x110>)
 8005cba:	f006 fe81 	bl	800c9c0 <HAL_TIMEx_MasterConfigSynchronization>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005cc4:	f7ff fdd4 	bl	8005870 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005cc8:	2360      	movs	r3, #96	@ 0x60
 8005cca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005cd8:	1d3b      	adds	r3, r7, #4
 8005cda:	2200      	movs	r2, #0
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4812      	ldr	r0, [pc, #72]	@ (8005d28 <MX_TIM3_Init+0x110>)
 8005ce0:	f006 f9e0 	bl	800c0a4 <HAL_TIM_PWM_ConfigChannel>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8005cea:	f7ff fdc1 	bl	8005870 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005cee:	1d3b      	adds	r3, r7, #4
 8005cf0:	2204      	movs	r2, #4
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	480c      	ldr	r0, [pc, #48]	@ (8005d28 <MX_TIM3_Init+0x110>)
 8005cf6:	f006 f9d5 	bl	800c0a4 <HAL_TIM_PWM_ConfigChannel>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8005d00:	f7ff fdb6 	bl	8005870 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005d04:	1d3b      	adds	r3, r7, #4
 8005d06:	2208      	movs	r2, #8
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4807      	ldr	r0, [pc, #28]	@ (8005d28 <MX_TIM3_Init+0x110>)
 8005d0c:	f006 f9ca 	bl	800c0a4 <HAL_TIM_PWM_ConfigChannel>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8005d16:	f7ff fdab 	bl	8005870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005d1a:	4803      	ldr	r0, [pc, #12]	@ (8005d28 <MX_TIM3_Init+0x110>)
 8005d1c:	f000 f880 	bl	8005e20 <HAL_TIM_MspPostInit>

}
 8005d20:	bf00      	nop
 8005d22:	3738      	adds	r7, #56	@ 0x38
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	200009f4 	.word	0x200009f4
 8005d2c:	40000400 	.word	0x40000400

08005d30 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d36:	463b      	mov	r3, r7
 8005d38:	2200      	movs	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005d3e:	4b15      	ldr	r3, [pc, #84]	@ (8005d94 <MX_TIM7_Init+0x64>)
 8005d40:	4a15      	ldr	r2, [pc, #84]	@ (8005d98 <MX_TIM7_Init+0x68>)
 8005d42:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8005d44:	4b13      	ldr	r3, [pc, #76]	@ (8005d94 <MX_TIM7_Init+0x64>)
 8005d46:	2247      	movs	r2, #71	@ 0x47
 8005d48:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d4a:	4b12      	ldr	r3, [pc, #72]	@ (8005d94 <MX_TIM7_Init+0x64>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8005d50:	4b10      	ldr	r3, [pc, #64]	@ (8005d94 <MX_TIM7_Init+0x64>)
 8005d52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d56:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005d58:	4b0e      	ldr	r3, [pc, #56]	@ (8005d94 <MX_TIM7_Init+0x64>)
 8005d5a:	2280      	movs	r2, #128	@ 0x80
 8005d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005d5e:	480d      	ldr	r0, [pc, #52]	@ (8005d94 <MX_TIM7_Init+0x64>)
 8005d60:	f005 fed6 	bl	800bb10 <HAL_TIM_Base_Init>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8005d6a:	f7ff fd81 	bl	8005870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d72:	2300      	movs	r3, #0
 8005d74:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005d76:	463b      	mov	r3, r7
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4806      	ldr	r0, [pc, #24]	@ (8005d94 <MX_TIM7_Init+0x64>)
 8005d7c:	f006 fe20 	bl	800c9c0 <HAL_TIMEx_MasterConfigSynchronization>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8005d86:	f7ff fd73 	bl	8005870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005d8a:	bf00      	nop
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	20000a3c 	.word	0x20000a3c
 8005d98:	40001400 	.word	0x40001400

08005d9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a1a      	ldr	r2, [pc, #104]	@ (8005e14 <HAL_TIM_Base_MspInit+0x78>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d114      	bne.n	8005dd8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005dae:	4b1a      	ldr	r3, [pc, #104]	@ (8005e18 <HAL_TIM_Base_MspInit+0x7c>)
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	4a19      	ldr	r2, [pc, #100]	@ (8005e18 <HAL_TIM_Base_MspInit+0x7c>)
 8005db4:	f043 0302 	orr.w	r3, r3, #2
 8005db8:	61d3      	str	r3, [r2, #28]
 8005dba:	4b17      	ldr	r3, [pc, #92]	@ (8005e18 <HAL_TIM_Base_MspInit+0x7c>)
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	60fb      	str	r3, [r7, #12]
 8005dc4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	2105      	movs	r1, #5
 8005dca:	201d      	movs	r0, #29
 8005dcc:	f001 fe0b 	bl	80079e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005dd0:	201d      	movs	r0, #29
 8005dd2:	f001 fe24 	bl	8007a1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8005dd6:	e018      	b.n	8005e0a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a0f      	ldr	r2, [pc, #60]	@ (8005e1c <HAL_TIM_Base_MspInit+0x80>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d113      	bne.n	8005e0a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005de2:	4b0d      	ldr	r3, [pc, #52]	@ (8005e18 <HAL_TIM_Base_MspInit+0x7c>)
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	4a0c      	ldr	r2, [pc, #48]	@ (8005e18 <HAL_TIM_Base_MspInit+0x7c>)
 8005de8:	f043 0320 	orr.w	r3, r3, #32
 8005dec:	61d3      	str	r3, [r2, #28]
 8005dee:	4b0a      	ldr	r3, [pc, #40]	@ (8005e18 <HAL_TIM_Base_MspInit+0x7c>)
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	f003 0320 	and.w	r3, r3, #32
 8005df6:	60bb      	str	r3, [r7, #8]
 8005df8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	2105      	movs	r1, #5
 8005dfe:	2037      	movs	r0, #55	@ 0x37
 8005e00:	f001 fdf1 	bl	80079e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005e04:	2037      	movs	r0, #55	@ 0x37
 8005e06:	f001 fe0a 	bl	8007a1e <HAL_NVIC_EnableIRQ>
}
 8005e0a:	bf00      	nop
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	40000400 	.word	0x40000400
 8005e18:	40021000 	.word	0x40021000
 8005e1c:	40001400 	.word	0x40001400

08005e20 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b088      	sub	sp, #32
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e28:	f107 0310 	add.w	r3, r7, #16
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	605a      	str	r2, [r3, #4]
 8005e32:	609a      	str	r2, [r3, #8]
 8005e34:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ea8 <HAL_TIM_MspPostInit+0x88>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d12f      	bne.n	8005ea0 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e40:	4b1a      	ldr	r3, [pc, #104]	@ (8005eac <HAL_TIM_MspPostInit+0x8c>)
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	4a19      	ldr	r2, [pc, #100]	@ (8005eac <HAL_TIM_MspPostInit+0x8c>)
 8005e46:	f043 0304 	orr.w	r3, r3, #4
 8005e4a:	6193      	str	r3, [r2, #24]
 8005e4c:	4b17      	ldr	r3, [pc, #92]	@ (8005eac <HAL_TIM_MspPostInit+0x8c>)
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e58:	4b14      	ldr	r3, [pc, #80]	@ (8005eac <HAL_TIM_MspPostInit+0x8c>)
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	4a13      	ldr	r2, [pc, #76]	@ (8005eac <HAL_TIM_MspPostInit+0x8c>)
 8005e5e:	f043 0308 	orr.w	r3, r3, #8
 8005e62:	6193      	str	r3, [r2, #24]
 8005e64:	4b11      	ldr	r3, [pc, #68]	@ (8005eac <HAL_TIM_MspPostInit+0x8c>)
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	f003 0308 	and.w	r3, r3, #8
 8005e6c:	60bb      	str	r3, [r7, #8]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005e70:	23c0      	movs	r3, #192	@ 0xc0
 8005e72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e74:	2302      	movs	r3, #2
 8005e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e78:	2302      	movs	r3, #2
 8005e7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e7c:	f107 0310 	add.w	r3, r7, #16
 8005e80:	4619      	mov	r1, r3
 8005e82:	480b      	ldr	r0, [pc, #44]	@ (8005eb0 <HAL_TIM_MspPostInit+0x90>)
 8005e84:	f002 fa5e 	bl	8008344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e90:	2302      	movs	r3, #2
 8005e92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e94:	f107 0310 	add.w	r3, r7, #16
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4806      	ldr	r0, [pc, #24]	@ (8005eb4 <HAL_TIM_MspPostInit+0x94>)
 8005e9c:	f002 fa52 	bl	8008344 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005ea0:	bf00      	nop
 8005ea2:	3720      	adds	r7, #32
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	40000400 	.word	0x40000400
 8005eac:	40021000 	.word	0x40021000
 8005eb0:	40010800 	.word	0x40010800
 8005eb4:	40010c00 	.word	0x40010c00

08005eb8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005ebc:	4b11      	ldr	r3, [pc, #68]	@ (8005f04 <MX_USART1_UART_Init+0x4c>)
 8005ebe:	4a12      	ldr	r2, [pc, #72]	@ (8005f08 <MX_USART1_UART_Init+0x50>)
 8005ec0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005ec2:	4b10      	ldr	r3, [pc, #64]	@ (8005f04 <MX_USART1_UART_Init+0x4c>)
 8005ec4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005ec8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005eca:	4b0e      	ldr	r3, [pc, #56]	@ (8005f04 <MX_USART1_UART_Init+0x4c>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8005f04 <MX_USART1_UART_Init+0x4c>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8005f04 <MX_USART1_UART_Init+0x4c>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005edc:	4b09      	ldr	r3, [pc, #36]	@ (8005f04 <MX_USART1_UART_Init+0x4c>)
 8005ede:	220c      	movs	r2, #12
 8005ee0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ee2:	4b08      	ldr	r3, [pc, #32]	@ (8005f04 <MX_USART1_UART_Init+0x4c>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ee8:	4b06      	ldr	r3, [pc, #24]	@ (8005f04 <MX_USART1_UART_Init+0x4c>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005eee:	4805      	ldr	r0, [pc, #20]	@ (8005f04 <MX_USART1_UART_Init+0x4c>)
 8005ef0:	f006 fde4 	bl	800cabc <HAL_UART_Init>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005efa:	f7ff fcb9 	bl	8005870 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005efe:	bf00      	nop
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	20000a84 	.word	0x20000a84
 8005f08:	40013800 	.word	0x40013800

08005f0c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005f10:	4b11      	ldr	r3, [pc, #68]	@ (8005f58 <MX_USART2_UART_Init+0x4c>)
 8005f12:	4a12      	ldr	r2, [pc, #72]	@ (8005f5c <MX_USART2_UART_Init+0x50>)
 8005f14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005f16:	4b10      	ldr	r3, [pc, #64]	@ (8005f58 <MX_USART2_UART_Init+0x4c>)
 8005f18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005f1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8005f58 <MX_USART2_UART_Init+0x4c>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005f24:	4b0c      	ldr	r3, [pc, #48]	@ (8005f58 <MX_USART2_UART_Init+0x4c>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005f58 <MX_USART2_UART_Init+0x4c>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005f30:	4b09      	ldr	r3, [pc, #36]	@ (8005f58 <MX_USART2_UART_Init+0x4c>)
 8005f32:	220c      	movs	r2, #12
 8005f34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f36:	4b08      	ldr	r3, [pc, #32]	@ (8005f58 <MX_USART2_UART_Init+0x4c>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f3c:	4b06      	ldr	r3, [pc, #24]	@ (8005f58 <MX_USART2_UART_Init+0x4c>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005f42:	4805      	ldr	r0, [pc, #20]	@ (8005f58 <MX_USART2_UART_Init+0x4c>)
 8005f44:	f006 fdba 	bl	800cabc <HAL_UART_Init>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005f4e:	f7ff fc8f 	bl	8005870 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005f52:	bf00      	nop
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20000acc 	.word	0x20000acc
 8005f5c:	40004400 	.word	0x40004400

08005f60 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005f64:	4b11      	ldr	r3, [pc, #68]	@ (8005fac <MX_USART3_UART_Init+0x4c>)
 8005f66:	4a12      	ldr	r2, [pc, #72]	@ (8005fb0 <MX_USART3_UART_Init+0x50>)
 8005f68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005f6a:	4b10      	ldr	r3, [pc, #64]	@ (8005fac <MX_USART3_UART_Init+0x4c>)
 8005f6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005f70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005f72:	4b0e      	ldr	r3, [pc, #56]	@ (8005fac <MX_USART3_UART_Init+0x4c>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005f78:	4b0c      	ldr	r3, [pc, #48]	@ (8005fac <MX_USART3_UART_Init+0x4c>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8005fac <MX_USART3_UART_Init+0x4c>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005f84:	4b09      	ldr	r3, [pc, #36]	@ (8005fac <MX_USART3_UART_Init+0x4c>)
 8005f86:	220c      	movs	r2, #12
 8005f88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f8a:	4b08      	ldr	r3, [pc, #32]	@ (8005fac <MX_USART3_UART_Init+0x4c>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f90:	4b06      	ldr	r3, [pc, #24]	@ (8005fac <MX_USART3_UART_Init+0x4c>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005f96:	4805      	ldr	r0, [pc, #20]	@ (8005fac <MX_USART3_UART_Init+0x4c>)
 8005f98:	f006 fd90 	bl	800cabc <HAL_UART_Init>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005fa2:	f7ff fc65 	bl	8005870 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005fa6:	bf00      	nop
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	20000b14 	.word	0x20000b14
 8005fb0:	40004800 	.word	0x40004800

08005fb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08e      	sub	sp, #56	@ 0x38
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	605a      	str	r2, [r3, #4]
 8005fc6:	609a      	str	r2, [r3, #8]
 8005fc8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a7c      	ldr	r2, [pc, #496]	@ (80061c0 <HAL_UART_MspInit+0x20c>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d161      	bne.n	8006098 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005fd4:	4b7b      	ldr	r3, [pc, #492]	@ (80061c4 <HAL_UART_MspInit+0x210>)
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	4a7a      	ldr	r2, [pc, #488]	@ (80061c4 <HAL_UART_MspInit+0x210>)
 8005fda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005fde:	6193      	str	r3, [r2, #24]
 8005fe0:	4b78      	ldr	r3, [pc, #480]	@ (80061c4 <HAL_UART_MspInit+0x210>)
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fe8:	623b      	str	r3, [r7, #32]
 8005fea:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fec:	4b75      	ldr	r3, [pc, #468]	@ (80061c4 <HAL_UART_MspInit+0x210>)
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	4a74      	ldr	r2, [pc, #464]	@ (80061c4 <HAL_UART_MspInit+0x210>)
 8005ff2:	f043 0304 	orr.w	r3, r3, #4
 8005ff6:	6193      	str	r3, [r2, #24]
 8005ff8:	4b72      	ldr	r3, [pc, #456]	@ (80061c4 <HAL_UART_MspInit+0x210>)
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	61fb      	str	r3, [r7, #28]
 8006002:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006004:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006008:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800600a:	2302      	movs	r3, #2
 800600c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800600e:	2303      	movs	r3, #3
 8006010:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006012:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006016:	4619      	mov	r1, r3
 8006018:	486b      	ldr	r0, [pc, #428]	@ (80061c8 <HAL_UART_MspInit+0x214>)
 800601a:	f002 f993 	bl	8008344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800601e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006022:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006024:	2300      	movs	r3, #0
 8006026:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006028:	2300      	movs	r3, #0
 800602a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800602c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006030:	4619      	mov	r1, r3
 8006032:	4865      	ldr	r0, [pc, #404]	@ (80061c8 <HAL_UART_MspInit+0x214>)
 8006034:	f002 f986 	bl	8008344 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8006038:	4b64      	ldr	r3, [pc, #400]	@ (80061cc <HAL_UART_MspInit+0x218>)
 800603a:	4a65      	ldr	r2, [pc, #404]	@ (80061d0 <HAL_UART_MspInit+0x21c>)
 800603c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800603e:	4b63      	ldr	r3, [pc, #396]	@ (80061cc <HAL_UART_MspInit+0x218>)
 8006040:	2210      	movs	r2, #16
 8006042:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006044:	4b61      	ldr	r3, [pc, #388]	@ (80061cc <HAL_UART_MspInit+0x218>)
 8006046:	2200      	movs	r2, #0
 8006048:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800604a:	4b60      	ldr	r3, [pc, #384]	@ (80061cc <HAL_UART_MspInit+0x218>)
 800604c:	2280      	movs	r2, #128	@ 0x80
 800604e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006050:	4b5e      	ldr	r3, [pc, #376]	@ (80061cc <HAL_UART_MspInit+0x218>)
 8006052:	2200      	movs	r2, #0
 8006054:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006056:	4b5d      	ldr	r3, [pc, #372]	@ (80061cc <HAL_UART_MspInit+0x218>)
 8006058:	2200      	movs	r2, #0
 800605a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800605c:	4b5b      	ldr	r3, [pc, #364]	@ (80061cc <HAL_UART_MspInit+0x218>)
 800605e:	2200      	movs	r2, #0
 8006060:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8006062:	4b5a      	ldr	r3, [pc, #360]	@ (80061cc <HAL_UART_MspInit+0x218>)
 8006064:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006068:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800606a:	4858      	ldr	r0, [pc, #352]	@ (80061cc <HAL_UART_MspInit+0x218>)
 800606c:	f001 fce6 	bl	8007a3c <HAL_DMA_Init>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8006076:	f7ff fbfb 	bl	8005870 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a53      	ldr	r2, [pc, #332]	@ (80061cc <HAL_UART_MspInit+0x218>)
 800607e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006080:	4a52      	ldr	r2, [pc, #328]	@ (80061cc <HAL_UART_MspInit+0x218>)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8006086:	2200      	movs	r2, #0
 8006088:	2105      	movs	r1, #5
 800608a:	2025      	movs	r0, #37	@ 0x25
 800608c:	f001 fcab 	bl	80079e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006090:	2025      	movs	r0, #37	@ 0x25
 8006092:	f001 fcc4 	bl	8007a1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006096:	e08e      	b.n	80061b6 <HAL_UART_MspInit+0x202>
  else if(uartHandle->Instance==USART2)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a4d      	ldr	r2, [pc, #308]	@ (80061d4 <HAL_UART_MspInit+0x220>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d138      	bne.n	8006114 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART2_CLK_ENABLE();
 80060a2:	4b48      	ldr	r3, [pc, #288]	@ (80061c4 <HAL_UART_MspInit+0x210>)
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	4a47      	ldr	r2, [pc, #284]	@ (80061c4 <HAL_UART_MspInit+0x210>)
 80060a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060ac:	61d3      	str	r3, [r2, #28]
 80060ae:	4b45      	ldr	r3, [pc, #276]	@ (80061c4 <HAL_UART_MspInit+0x210>)
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060b6:	61bb      	str	r3, [r7, #24]
 80060b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060ba:	4b42      	ldr	r3, [pc, #264]	@ (80061c4 <HAL_UART_MspInit+0x210>)
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	4a41      	ldr	r2, [pc, #260]	@ (80061c4 <HAL_UART_MspInit+0x210>)
 80060c0:	f043 0304 	orr.w	r3, r3, #4
 80060c4:	6193      	str	r3, [r2, #24]
 80060c6:	4b3f      	ldr	r3, [pc, #252]	@ (80061c4 <HAL_UART_MspInit+0x210>)
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	f003 0304 	and.w	r3, r3, #4
 80060ce:	617b      	str	r3, [r7, #20]
 80060d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80060d2:	2304      	movs	r3, #4
 80060d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060d6:	2302      	movs	r3, #2
 80060d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80060da:	2303      	movs	r3, #3
 80060dc:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060e2:	4619      	mov	r1, r3
 80060e4:	4838      	ldr	r0, [pc, #224]	@ (80061c8 <HAL_UART_MspInit+0x214>)
 80060e6:	f002 f92d 	bl	8008344 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80060ea:	2308      	movs	r3, #8
 80060ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80060ee:	2300      	movs	r3, #0
 80060f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060fa:	4619      	mov	r1, r3
 80060fc:	4832      	ldr	r0, [pc, #200]	@ (80061c8 <HAL_UART_MspInit+0x214>)
 80060fe:	f002 f921 	bl	8008344 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8006102:	2200      	movs	r2, #0
 8006104:	2105      	movs	r1, #5
 8006106:	2026      	movs	r0, #38	@ 0x26
 8006108:	f001 fc6d 	bl	80079e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800610c:	2026      	movs	r0, #38	@ 0x26
 800610e:	f001 fc86 	bl	8007a1e <HAL_NVIC_EnableIRQ>
}
 8006112:	e050      	b.n	80061b6 <HAL_UART_MspInit+0x202>
  else if(uartHandle->Instance==USART3)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a2f      	ldr	r2, [pc, #188]	@ (80061d8 <HAL_UART_MspInit+0x224>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d14b      	bne.n	80061b6 <HAL_UART_MspInit+0x202>
    __HAL_RCC_USART3_CLK_ENABLE();
 800611e:	4b29      	ldr	r3, [pc, #164]	@ (80061c4 <HAL_UART_MspInit+0x210>)
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	4a28      	ldr	r2, [pc, #160]	@ (80061c4 <HAL_UART_MspInit+0x210>)
 8006124:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006128:	61d3      	str	r3, [r2, #28]
 800612a:	4b26      	ldr	r3, [pc, #152]	@ (80061c4 <HAL_UART_MspInit+0x210>)
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006132:	613b      	str	r3, [r7, #16]
 8006134:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006136:	4b23      	ldr	r3, [pc, #140]	@ (80061c4 <HAL_UART_MspInit+0x210>)
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	4a22      	ldr	r2, [pc, #136]	@ (80061c4 <HAL_UART_MspInit+0x210>)
 800613c:	f043 0320 	orr.w	r3, r3, #32
 8006140:	6193      	str	r3, [r2, #24]
 8006142:	4b20      	ldr	r3, [pc, #128]	@ (80061c4 <HAL_UART_MspInit+0x210>)
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	f003 0320 	and.w	r3, r3, #32
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800614e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006152:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006154:	2302      	movs	r3, #2
 8006156:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006158:	2303      	movs	r3, #3
 800615a:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800615c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006160:	4619      	mov	r1, r3
 8006162:	481e      	ldr	r0, [pc, #120]	@ (80061dc <HAL_UART_MspInit+0x228>)
 8006164:	f002 f8ee 	bl	8008344 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006168:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800616c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800616e:	2300      	movs	r3, #0
 8006170:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006172:	2300      	movs	r3, #0
 8006174:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006176:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800617a:	4619      	mov	r1, r3
 800617c:	4817      	ldr	r0, [pc, #92]	@ (80061dc <HAL_UART_MspInit+0x228>)
 800617e:	f002 f8e1 	bl	8008344 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_ENABLE();
 8006182:	4b17      	ldr	r3, [pc, #92]	@ (80061e0 <HAL_UART_MspInit+0x22c>)
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	637b      	str	r3, [r7, #52]	@ 0x34
 8006188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800618a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800618e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006192:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8006196:	637b      	str	r3, [r7, #52]	@ 0x34
 8006198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800619a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800619e:	637b      	str	r3, [r7, #52]	@ 0x34
 80061a0:	4a0f      	ldr	r2, [pc, #60]	@ (80061e0 <HAL_UART_MspInit+0x22c>)
 80061a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061a4:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80061a6:	2200      	movs	r2, #0
 80061a8:	2105      	movs	r1, #5
 80061aa:	2027      	movs	r0, #39	@ 0x27
 80061ac:	f001 fc1b 	bl	80079e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80061b0:	2027      	movs	r0, #39	@ 0x27
 80061b2:	f001 fc34 	bl	8007a1e <HAL_NVIC_EnableIRQ>
}
 80061b6:	bf00      	nop
 80061b8:	3738      	adds	r7, #56	@ 0x38
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	40013800 	.word	0x40013800
 80061c4:	40021000 	.word	0x40021000
 80061c8:	40010800 	.word	0x40010800
 80061cc:	20000b5c 	.word	0x20000b5c
 80061d0:	40020044 	.word	0x40020044
 80061d4:	40004400 	.word	0x40004400
 80061d8:	40004800 	.word	0x40004800
 80061dc:	40011400 	.word	0x40011400
 80061e0:	40010000 	.word	0x40010000

080061e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80061e4:	f7ff fd12 	bl	8005c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80061e8:	480b      	ldr	r0, [pc, #44]	@ (8006218 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80061ea:	490c      	ldr	r1, [pc, #48]	@ (800621c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80061ec:	4a0c      	ldr	r2, [pc, #48]	@ (8006220 <LoopFillZerobss+0x16>)
  movs r3, #0
 80061ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80061f0:	e002      	b.n	80061f8 <LoopCopyDataInit>

080061f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80061f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80061f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80061f6:	3304      	adds	r3, #4

080061f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80061f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80061fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80061fc:	d3f9      	bcc.n	80061f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80061fe:	4a09      	ldr	r2, [pc, #36]	@ (8006224 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006200:	4c09      	ldr	r4, [pc, #36]	@ (8006228 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006204:	e001      	b.n	800620a <LoopFillZerobss>

08006206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006208:	3204      	adds	r2, #4

0800620a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800620a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800620c:	d3fb      	bcc.n	8006206 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800620e:	f00e fd45 	bl	8014c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006212:	f7ff faa5 	bl	8005760 <main>
  bx lr
 8006216:	4770      	bx	lr
  ldr r0, =_sdata
 8006218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800621c:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8006220:	08016038 	.word	0x08016038
  ldr r2, =_sbss
 8006224:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8006228:	2000363c 	.word	0x2000363c

0800622c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800622c:	e7fe      	b.n	800622c <ADC1_2_IRQHandler>
	...

08006230 <AT24Cxx_get_max_addr>:
#include <stdio.h>

#include "AT24Cxx_stm32_hal.h"

uint16_t AT24Cxx_get_max_addr ( AT24Cxx_device_t* dev )
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	791b      	ldrb	r3, [r3, #4]
 800623c:	2b05      	cmp	r3, #5
 800623e:	d820      	bhi.n	8006282 <AT24Cxx_get_max_addr+0x52>
 8006240:	a201      	add	r2, pc, #4	@ (adr r2, 8006248 <AT24Cxx_get_max_addr+0x18>)
 8006242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006246:	bf00      	nop
 8006248:	08006261 	.word	0x08006261
 800624c:	08006265 	.word	0x08006265
 8006250:	0800626b 	.word	0x0800626b
 8006254:	08006271 	.word	0x08006271
 8006258:	08006277 	.word	0x08006277
 800625c:	0800627d 	.word	0x0800627d
	case AT24C01:
		return AT24C01_MAX_ADDR;
 8006260:	237f      	movs	r3, #127	@ 0x7f
 8006262:	e00f      	b.n	8006284 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C32:
		return AT24C32_MAX_ADDR;
 8006264:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8006268:	e00c      	b.n	8006284 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C64:
		return AT24C64_MAX_ADDR;
 800626a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800626e:	e009      	b.n	8006284 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C128:
		return AT24C128_MAX_ADDR;
 8006270:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8006274:	e006      	b.n	8006284 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C256:
		return AT24C256_MAX_ADDR;
 8006276:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800627a:	e003      	b.n	8006284 <AT24Cxx_get_max_addr+0x54>
		break;
		//not supported yet, will overflow
	case AT24C512:
		return AT24C512_MAX_ADDR;
 800627c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006280:	e000      	b.n	8006284 <AT24Cxx_get_max_addr+0x54>
		break;
	default:
		return 0;
 8006282:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 8006284:	4618      	mov	r0, r3
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	bc80      	pop	{r7}
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop

08006290 <AT24Cxx_get_pg_size>:

uint16_t AT24Cxx_get_pg_size ( AT24Cxx_device_t* dev )
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	791b      	ldrb	r3, [r3, #4]
 800629c:	2b05      	cmp	r3, #5
 800629e:	d81b      	bhi.n	80062d8 <AT24Cxx_get_pg_size+0x48>
 80062a0:	a201      	add	r2, pc, #4	@ (adr r2, 80062a8 <AT24Cxx_get_pg_size+0x18>)
 80062a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a6:	bf00      	nop
 80062a8:	080062c1 	.word	0x080062c1
 80062ac:	080062c5 	.word	0x080062c5
 80062b0:	080062c9 	.word	0x080062c9
 80062b4:	080062cd 	.word	0x080062cd
 80062b8:	080062d1 	.word	0x080062d1
 80062bc:	080062d5 	.word	0x080062d5
	case AT24C01:
		return AT24C01_PG_SIZE;
 80062c0:	2308      	movs	r3, #8
 80062c2:	e00a      	b.n	80062da <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C32:
		return AT24C32_PG_SIZE;
 80062c4:	2320      	movs	r3, #32
 80062c6:	e008      	b.n	80062da <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C64:
		return AT24C64_PG_SIZE;
 80062c8:	2320      	movs	r3, #32
 80062ca:	e006      	b.n	80062da <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C128:
		return AT24C128_PG_SIZE;
 80062cc:	2340      	movs	r3, #64	@ 0x40
 80062ce:	e004      	b.n	80062da <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C256:
		return AT24C256_PG_SIZE;
 80062d0:	2340      	movs	r3, #64	@ 0x40
 80062d2:	e002      	b.n	80062da <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C512:
		//not supported yet, will overflow
		return AT24C512_PG_SIZE;
 80062d4:	2380      	movs	r3, #128	@ 0x80
 80062d6:	e000      	b.n	80062da <AT24Cxx_get_pg_size+0x4a>
		break;
	default:
		return 0;
 80062d8:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 80062da:	4618      	mov	r0, r3
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	bc80      	pop	{r7}
 80062e2:	4770      	bx	lr

080062e4 <AT24Cxx_init>:

AT24Cxx_ERR_TypeDef AT24Cxx_init( AT24Cxx_devices_t* devices, 
	uint8_t init_dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	460b      	mov	r3, r1
 80062ee:	607a      	str	r2, [r7, #4]
 80062f0:	72fb      	strb	r3, [r7, #11]
	//adds first device to AT32Cxx_devices array
	//further devices should be added by calling AT24Cxx_add_dev()
	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 80062f2:	2114      	movs	r1, #20
 80062f4:	2001      	movs	r0, #1
 80062f6:	f00e fbe9 	bl	8014acc <calloc>
 80062fa:	4603      	mov	r3, r0
 80062fc:	613b      	str	r3, [r7, #16]
	if ( at == NULL )
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d102      	bne.n	800630a <AT24Cxx_init+0x26>
		return at_init_err;
 8006304:	f04f 33ff 	mov.w	r3, #4294967295
 8006308:	e028      	b.n	800635c <AT24Cxx_init+0x78>

	for(uint8_t i = 0; i < 8; i++)
 800630a:	2300      	movs	r3, #0
 800630c:	75fb      	strb	r3, [r7, #23]
 800630e:	e007      	b.n	8006320 <AT24Cxx_init+0x3c>
			devices->devices[i] = 0x00;
 8006310:	7dfa      	ldrb	r2, [r7, #23]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2100      	movs	r1, #0
 8006316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i = 0; i < 8; i++)
 800631a:	7dfb      	ldrb	r3, [r7, #23]
 800631c:	3301      	adds	r3, #1
 800631e:	75fb      	strb	r3, [r7, #23]
 8006320:	7dfb      	ldrb	r3, [r7, #23]
 8006322:	2b07      	cmp	r3, #7
 8006324:	d9f4      	bls.n	8006310 <AT24Cxx_init+0x2c>

	at->dev_addr = init_dev_addr;
 8006326:	7afb      	ldrb	r3, [r7, #11]
 8006328:	b29a      	uxth	r2, r3
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	2200      	movs	r2, #0
 8006332:	60da      	str	r2, [r3, #12]
	at->prev_dev = NULL;
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	2200      	movs	r2, #0
 8006338:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	2205      	movs	r2, #5
 800633e:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	2201      	movs	r2, #1
 800634a:	721a      	strb	r2, [r3, #8]
	devices->dev_count = 1;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[0] = at;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	601a      	str	r2, [r3, #0]

	return at_ok;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <AT24Cxx_add_dev>:

AT24Cxx_ERR_TypeDef AT24Cxx_add_dev( AT24Cxx_devices_t* devices, 
	uint8_t dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	460b      	mov	r3, r1
 800636e:	607a      	str	r2, [r7, #4]
 8006370:	72fb      	strb	r3, [r7, #11]
	if(devices->dev_count == 0 || devices->dev_count > 8)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d004      	beq.n	8006386 <AT24Cxx_add_dev+0x22>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006382:	2b08      	cmp	r3, #8
 8006384:	d902      	bls.n	800638c <AT24Cxx_add_dev+0x28>
		return at_add_dev_err;
 8006386:	f06f 0301 	mvn.w	r3, #1
 800638a:	e03e      	b.n	800640a <AT24Cxx_add_dev+0xa6>

	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 800638c:	2114      	movs	r1, #20
 800638e:	2001      	movs	r0, #1
 8006390:	f00e fb9c 	bl	8014acc <calloc>
 8006394:	4603      	mov	r3, r0
 8006396:	617b      	str	r3, [r7, #20]
	if ( at == NULL )
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d102      	bne.n	80063a4 <AT24Cxx_add_dev+0x40>
		return at_add_dev_err;
 800639e:	f06f 0301 	mvn.w	r3, #1
 80063a2:	e032      	b.n	800640a <AT24Cxx_add_dev+0xa6>

	at->dev_addr = dev_addr;
 80063a4:	7afb      	ldrb	r3, [r7, #11]
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	2200      	movs	r2, #0
 80063b0:	60da      	str	r2, [r3, #12]
	at->prev_dev = devices->devices[devices->dev_count-1];
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063b8:	1e5a      	subs	r2, r3, #1
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	2205      	movs	r2, #5
 80063c8:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	2201      	movs	r2, #1
 80063d4:	721a      	strb	r2, [r3, #8]
	devices->dev_count++;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063dc:	3301      	adds	r3, #1
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[devices->dev_count-1] = at;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063ec:	1e5a      	subs	r2, r3, #1
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6979      	ldr	r1, [r7, #20]
 80063f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	//update previous device's next device
	devices->devices[devices->dev_count-2]->next_dev = at;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063fc:	1e9a      	subs	r2, r3, #2
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	60da      	str	r2, [r3, #12]
	return at_ok;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <AT24Cxx_write_byte_buffer>:
	return at_w_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_write_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 8006412:	b5b0      	push	{r4, r5, r7, lr}
 8006414:	b08a      	sub	sp, #40	@ 0x28
 8006416:	af04      	add	r7, sp, #16
 8006418:	60f8      	str	r0, [r7, #12]
 800641a:	60b9      	str	r1, [r7, #8]
 800641c:	4611      	mov	r1, r2
 800641e:	461a      	mov	r2, r3
 8006420:	460b      	mov	r3, r1
 8006422:	80fb      	strh	r3, [r7, #6]
 8006424:	4613      	mov	r3, r2
 8006426:	80bb      	strh	r3, [r7, #4]
	//TODO checks

	uint8_t page_size = AT24Cxx_get_pg_size(dev);
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f7ff ff31 	bl	8006290 <AT24Cxx_get_pg_size>
 800642e:	4603      	mov	r3, r0
 8006430:	75bb      	strb	r3, [r7, #22]

	uint8_t page_remaining = page_size - mem_addr % page_size;
 8006432:	88fb      	ldrh	r3, [r7, #6]
 8006434:	7dba      	ldrb	r2, [r7, #22]
 8006436:	fb93 f1f2 	sdiv	r1, r3, r2
 800643a:	fb01 f202 	mul.w	r2, r1, r2
 800643e:	1a9b      	subs	r3, r3, r2
 8006440:	b2db      	uxtb	r3, r3
 8006442:	7dba      	ldrb	r2, [r7, #22]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	757b      	strb	r3, [r7, #21]

	uint8_t page_writes = (buf_length - page_remaining) / page_size;
 8006448:	88ba      	ldrh	r2, [r7, #4]
 800644a:	7d7b      	ldrb	r3, [r7, #21]
 800644c:	1ad2      	subs	r2, r2, r3
 800644e:	7dbb      	ldrb	r3, [r7, #22]
 8006450:	fb92 f3f3 	sdiv	r3, r2, r3
 8006454:	753b      	strb	r3, [r7, #20]
	uint8_t remainder_writes = (buf_length - page_remaining) % page_size;
 8006456:	88ba      	ldrh	r2, [r7, #4]
 8006458:	7d7b      	ldrb	r3, [r7, #21]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	7dba      	ldrb	r2, [r7, #22]
 800645e:	fb93 f1f2 	sdiv	r1, r3, r2
 8006462:	fb01 f202 	mul.w	r2, r1, r2
 8006466:	1a9b      	subs	r3, r3, r2
 8006468:	74fb      	strb	r3, [r7, #19]

	//finish first page
	if((mem_addr + page_remaining) > 0x00 &&
 800646a:	88fa      	ldrh	r2, [r7, #6]
 800646c:	7d7b      	ldrb	r3, [r7, #21]
 800646e:	4413      	add	r3, r2
 8006470:	2b00      	cmp	r3, #0
 8006472:	dd23      	ble.n	80064bc <AT24Cxx_write_byte_buffer+0xaa>
		(mem_addr + page_remaining) < AT24Cxx_get_max_addr(dev)){
 8006474:	88fa      	ldrh	r2, [r7, #6]
 8006476:	7d7b      	ldrb	r3, [r7, #21]
 8006478:	18d4      	adds	r4, r2, r3
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f7ff fed8 	bl	8006230 <AT24Cxx_get_max_addr>
 8006480:	4603      	mov	r3, r0
	if((mem_addr + page_remaining) > 0x00 &&
 8006482:	429c      	cmp	r4, r3
 8006484:	da1a      	bge.n	80064bc <AT24Cxx_write_byte_buffer+0xaa>

		while(HAL_I2C_Mem_Write(dev->dev_port,
 8006486:	bf00      	nop
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	88db      	ldrh	r3, [r3, #6]
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	b21b      	sxth	r3, r3
 8006494:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8006498:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Write(dev->dev_port,
 800649a:	b299      	uxth	r1, r3
 800649c:	7d7b      	ldrb	r3, [r7, #21]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	88fa      	ldrh	r2, [r7, #6]
 80064a2:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80064a6:	9402      	str	r4, [sp, #8]
 80064a8:	9301      	str	r3, [sp, #4]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	2310      	movs	r3, #16
 80064b0:	f002 fdd2 	bl	8009058 <HAL_I2C_Mem_Write>
 80064b4:	4603      	mov	r3, r0
				(uint16_t) mem_addr,
				I2C_MEMADD_SIZE_16BIT,
				data_buf,
				page_remaining,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1e6      	bne.n	8006488 <AT24Cxx_write_byte_buffer+0x76>
	if((mem_addr + page_remaining) > 0x00 &&
 80064ba:	e002      	b.n	80064c2 <AT24Cxx_write_byte_buffer+0xb0>
	}else return at_w_bytes_err;
 80064bc:	f06f 0304 	mvn.w	r3, #4
 80064c0:	e0a5      	b.n	800660e <AT24Cxx_write_byte_buffer+0x1fc>

	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 80064c2:	2300      	movs	r3, #0
 80064c4:	75fb      	strb	r3, [r7, #23]
 80064c6:	e04e      	b.n	8006566 <AT24Cxx_write_byte_buffer+0x154>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 80064c8:	88fa      	ldrh	r2, [r7, #6]
 80064ca:	7d7b      	ldrb	r3, [r7, #21]
 80064cc:	441a      	add	r2, r3
 80064ce:	7dfb      	ldrb	r3, [r7, #23]
 80064d0:	7db9      	ldrb	r1, [r7, #22]
 80064d2:	fb01 f303 	mul.w	r3, r1, r3
 80064d6:	4413      	add	r3, r2
 80064d8:	2b00      	cmp	r3, #0
 80064da:	dd3e      	ble.n	800655a <AT24Cxx_write_byte_buffer+0x148>
			(mem_addr + page_remaining + (current_page * page_size)) < AT24Cxx_get_max_addr(dev)){
 80064dc:	88fa      	ldrh	r2, [r7, #6]
 80064de:	7d7b      	ldrb	r3, [r7, #21]
 80064e0:	441a      	add	r2, r3
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
 80064e4:	7db9      	ldrb	r1, [r7, #22]
 80064e6:	fb01 f303 	mul.w	r3, r1, r3
 80064ea:	18d4      	adds	r4, r2, r3
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f7ff fe9f 	bl	8006230 <AT24Cxx_get_max_addr>
 80064f2:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 80064f4:	429c      	cmp	r4, r3
 80064f6:	da30      	bge.n	800655a <AT24Cxx_write_byte_buffer+0x148>

				while(HAL_I2C_Mem_Write(dev->dev_port,
 80064f8:	bf00      	nop
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6818      	ldr	r0, [r3, #0]
					AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	88db      	ldrh	r3, [r3, #6]
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	b21b      	sxth	r3, r3
 8006506:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800650a:	b21b      	sxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 800650c:	b29c      	uxth	r4, r3
					(uint16_t) mem_addr + page_remaining + (current_page * page_size),
 800650e:	7d7b      	ldrb	r3, [r7, #21]
 8006510:	b29a      	uxth	r2, r3
 8006512:	88fb      	ldrh	r3, [r7, #6]
 8006514:	4413      	add	r3, r2
 8006516:	b29a      	uxth	r2, r3
 8006518:	7dfb      	ldrb	r3, [r7, #23]
 800651a:	b29b      	uxth	r3, r3
 800651c:	7db9      	ldrb	r1, [r7, #22]
 800651e:	b289      	uxth	r1, r1
 8006520:	fb01 f303 	mul.w	r3, r1, r3
 8006524:	b29b      	uxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8006526:	4413      	add	r3, r2
 8006528:	b29d      	uxth	r5, r3
					I2C_MEMADD_SIZE_16BIT,
					data_buf + page_remaining + (current_page * page_size),
 800652a:	7d7b      	ldrb	r3, [r7, #21]
 800652c:	7dfa      	ldrb	r2, [r7, #23]
 800652e:	7db9      	ldrb	r1, [r7, #22]
 8006530:	fb01 f202 	mul.w	r2, r1, r2
 8006534:	4413      	add	r3, r2
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	4413      	add	r3, r2
 800653a:	7dba      	ldrb	r2, [r7, #22]
 800653c:	b292      	uxth	r2, r2
 800653e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006542:	9102      	str	r1, [sp, #8]
 8006544:	9201      	str	r2, [sp, #4]
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	2310      	movs	r3, #16
 800654a:	462a      	mov	r2, r5
 800654c:	4621      	mov	r1, r4
 800654e:	f002 fd83 	bl	8009058 <HAL_I2C_Mem_Write>
 8006552:	4603      	mov	r3, r0
					page_size,
					AT24Cxx_I2C_TIMOUT) != HAL_OK);
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1d0      	bne.n	80064fa <AT24Cxx_write_byte_buffer+0xe8>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8006558:	e002      	b.n	8006560 <AT24Cxx_write_byte_buffer+0x14e>
		}else return at_w_bytes_err;
 800655a:	f06f 0304 	mvn.w	r3, #4
 800655e:	e056      	b.n	800660e <AT24Cxx_write_byte_buffer+0x1fc>
	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 8006560:	7dfb      	ldrb	r3, [r7, #23]
 8006562:	3301      	adds	r3, #1
 8006564:	75fb      	strb	r3, [r7, #23]
 8006566:	7dfa      	ldrb	r2, [r7, #23]
 8006568:	7d3b      	ldrb	r3, [r7, #20]
 800656a:	429a      	cmp	r2, r3
 800656c:	d3ac      	bcc.n	80064c8 <AT24Cxx_write_byte_buffer+0xb6>
	}

	if(remainder_writes){
 800656e:	7cfb      	ldrb	r3, [r7, #19]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d04b      	beq.n	800660c <AT24Cxx_write_byte_buffer+0x1fa>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8006574:	88fa      	ldrh	r2, [r7, #6]
 8006576:	7d7b      	ldrb	r3, [r7, #21]
 8006578:	441a      	add	r2, r3
 800657a:	7d3b      	ldrb	r3, [r7, #20]
 800657c:	7db9      	ldrb	r1, [r7, #22]
 800657e:	fb01 f303 	mul.w	r3, r1, r3
 8006582:	4413      	add	r3, r2
 8006584:	2b00      	cmp	r3, #0
 8006586:	dd3e      	ble.n	8006606 <AT24Cxx_write_byte_buffer+0x1f4>
			(mem_addr + page_remaining + (page_writes * page_size)) < AT24Cxx_get_max_addr(dev)){
 8006588:	88fa      	ldrh	r2, [r7, #6]
 800658a:	7d7b      	ldrb	r3, [r7, #21]
 800658c:	441a      	add	r2, r3
 800658e:	7d3b      	ldrb	r3, [r7, #20]
 8006590:	7db9      	ldrb	r1, [r7, #22]
 8006592:	fb01 f303 	mul.w	r3, r1, r3
 8006596:	18d4      	adds	r4, r2, r3
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f7ff fe49 	bl	8006230 <AT24Cxx_get_max_addr>
 800659e:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 80065a0:	429c      	cmp	r4, r3
 80065a2:	da30      	bge.n	8006606 <AT24Cxx_write_byte_buffer+0x1f4>

			while(HAL_I2C_Mem_Write(dev->dev_port,
 80065a4:	bf00      	nop
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	88db      	ldrh	r3, [r3, #6]
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	b21b      	sxth	r3, r3
 80065b2:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80065b6:	b21b      	sxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 80065b8:	b29c      	uxth	r4, r3
				(uint16_t) mem_addr + page_remaining + (page_writes * page_size),
 80065ba:	7d7b      	ldrb	r3, [r7, #21]
 80065bc:	b29a      	uxth	r2, r3
 80065be:	88fb      	ldrh	r3, [r7, #6]
 80065c0:	4413      	add	r3, r2
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	7d3b      	ldrb	r3, [r7, #20]
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	7db9      	ldrb	r1, [r7, #22]
 80065ca:	b289      	uxth	r1, r1
 80065cc:	fb01 f303 	mul.w	r3, r1, r3
 80065d0:	b29b      	uxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 80065d2:	4413      	add	r3, r2
 80065d4:	b29d      	uxth	r5, r3
				I2C_MEMADD_SIZE_16BIT,
				data_buf + page_remaining + (page_writes * page_size),
 80065d6:	7d7b      	ldrb	r3, [r7, #21]
 80065d8:	7d3a      	ldrb	r2, [r7, #20]
 80065da:	7db9      	ldrb	r1, [r7, #22]
 80065dc:	fb01 f202 	mul.w	r2, r1, r2
 80065e0:	4413      	add	r3, r2
			while(HAL_I2C_Mem_Write(dev->dev_port,
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	4413      	add	r3, r2
 80065e6:	7cfa      	ldrb	r2, [r7, #19]
 80065e8:	b292      	uxth	r2, r2
 80065ea:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80065ee:	9102      	str	r1, [sp, #8]
 80065f0:	9201      	str	r2, [sp, #4]
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	2310      	movs	r3, #16
 80065f6:	462a      	mov	r2, r5
 80065f8:	4621      	mov	r1, r4
 80065fa:	f002 fd2d 	bl	8009058 <HAL_I2C_Mem_Write>
 80065fe:	4603      	mov	r3, r0
				remainder_writes,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1d0      	bne.n	80065a6 <AT24Cxx_write_byte_buffer+0x194>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8006604:	e002      	b.n	800660c <AT24Cxx_write_byte_buffer+0x1fa>
		}else return at_w_bytes_err;
 8006606:	f06f 0304 	mvn.w	r3, #4
 800660a:	e000      	b.n	800660e <AT24Cxx_write_byte_buffer+0x1fc>
	}

	return at_ok;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bdb0      	pop	{r4, r5, r7, pc}

08006616 <AT24Cxx_read_byte_buffer>:
	return at_r_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_read_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b088      	sub	sp, #32
 800661a:	af04      	add	r7, sp, #16
 800661c:	60f8      	str	r0, [r7, #12]
 800661e:	60b9      	str	r1, [r7, #8]
 8006620:	4611      	mov	r1, r2
 8006622:	461a      	mov	r2, r3
 8006624:	460b      	mov	r3, r1
 8006626:	80fb      	strh	r3, [r7, #6]
 8006628:	4613      	mov	r3, r2
 800662a:	80bb      	strh	r3, [r7, #4]
	if(mem_addr > 0x00 && mem_addr < AT24Cxx_get_max_addr(dev)){
 800662c:	88fb      	ldrh	r3, [r7, #6]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d022      	beq.n	8006678 <AT24Cxx_read_byte_buffer+0x62>
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f7ff fdfc 	bl	8006230 <AT24Cxx_get_max_addr>
 8006638:	4603      	mov	r3, r0
 800663a:	461a      	mov	r2, r3
 800663c:	88fb      	ldrh	r3, [r7, #6]
 800663e:	4293      	cmp	r3, r2
 8006640:	d21a      	bcs.n	8006678 <AT24Cxx_read_byte_buffer+0x62>
		while(HAL_I2C_Mem_Read(dev->dev_port,
 8006642:	bf00      	nop
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_R | (dev->dev_addr << 1) ,
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	88db      	ldrh	r3, [r3, #6]
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	b21b      	sxth	r3, r3
 8006650:	f043 03a1 	orr.w	r3, r3, #161	@ 0xa1
 8006654:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Read(dev->dev_port,
 8006656:	b299      	uxth	r1, r3
 8006658:	88fa      	ldrh	r2, [r7, #6]
 800665a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800665e:	9302      	str	r3, [sp, #8]
 8006660:	88bb      	ldrh	r3, [r7, #4]
 8006662:	9301      	str	r3, [sp, #4]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	2310      	movs	r3, #16
 800666a:	f002 fdef 	bl	800924c <HAL_I2C_Mem_Read>
 800666e:	4603      	mov	r3, r0
				(uint16_t) mem_addr, I2C_MEMADD_SIZE_16BIT, data_buf, buf_length,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1e7      	bne.n	8006644 <AT24Cxx_read_byte_buffer+0x2e>
		return at_ok;
 8006674:	2300      	movs	r3, #0
 8006676:	e001      	b.n	800667c <AT24Cxx_read_byte_buffer+0x66>
	}
	return at_r_bytes_err;
 8006678:	f06f 0306 	mvn.w	r3, #6
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <constrain>:
int16_t qPercent(fix12_t q);
int16_t qMultiply(fix12_t q, int16_t input);
fix12_t qConstruct(int16_t num, int16_t den);

static int constrain(int amt, int low, int high)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	429a      	cmp	r2, r3
 8006696:	da01      	bge.n	800669c <constrain+0x18>
        return low;
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	e006      	b.n	80066aa <constrain+0x26>
    else if (amt > high)
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	dd01      	ble.n	80066a8 <constrain+0x24>
        return high;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	e000      	b.n	80066aa <constrain+0x26>
    else
        return amt;
 80066a8:	68fb      	ldr	r3, [r7, #12]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bc80      	pop	{r7}
 80066b2:	4770      	bx	lr

080066b4 <constrainf>:

static inline float constrainf(float amt, float low, float high)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
    if (amt < low)
 80066c0:	68b9      	ldr	r1, [r7, #8]
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f7fa fd14 	bl	80010f0 <__aeabi_fcmplt>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <constrainf+0x1e>
        return low;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	e009      	b.n	80066e6 <constrainf+0x32>
    else if (amt > high)
 80066d2:	6879      	ldr	r1, [r7, #4]
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f7fa fd29 	bl	800112c <__aeabi_fcmpgt>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <constrainf+0x30>
        return high;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	e000      	b.n	80066e6 <constrainf+0x32>
    else
        return amt;
 80066e4:	68fb      	ldr	r3, [r7, #12]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
	...

080066f0 <pt1FilterGain>:
//#include "scheduler.h"
#include"maths.h"
#include"math.h"

// 1oder
static inline float pt1FilterGain(float f_cut, float dT){
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
    float RC = 1 / (2 * M_PIf * f_cut);
 80066fa:	490d      	ldr	r1, [pc, #52]	@ (8006730 <pt1FilterGain+0x40>)
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7fa fb59 	bl	8000db4 <__aeabi_fmul>
 8006702:	4603      	mov	r3, r0
 8006704:	4619      	mov	r1, r3
 8006706:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800670a:	f7fa fc07 	bl	8000f1c <__aeabi_fdiv>
 800670e:	4603      	mov	r3, r0
 8006710:	60fb      	str	r3, [r7, #12]
    return dT/ (RC + dT);
 8006712:	6839      	ldr	r1, [r7, #0]
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f7fa fa45 	bl	8000ba4 <__addsf3>
 800671a:	4603      	mov	r3, r0
 800671c:	4619      	mov	r1, r3
 800671e:	6838      	ldr	r0, [r7, #0]
 8006720:	f7fa fbfc 	bl	8000f1c <__aeabi_fdiv>
 8006724:	4603      	mov	r3, r0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	40c90fdb 	.word	0x40c90fdb

08006734 <attitude_ctrl_init>:
float pid_velo_scale;

/*
 *  init pid controller
 **/
void attitude_ctrl_init(){
 8006734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006738:	b085      	sub	sp, #20
 800673a:	af04      	add	r7, sp, #16

   speed_filter_reset = TRUE;
 800673c:	4b3b      	ldr	r3, [pc, #236]	@ (800682c <attitude_ctrl_init+0xf8>)
 800673e:	2201      	movs	r2, #1
 8006740:	701a      	strb	r2, [r3, #0]
   ab_speed_filted = 0.0f;
 8006742:	4b3b      	ldr	r3, [pc, #236]	@ (8006830 <attitude_ctrl_init+0xfc>)
 8006744:	f04f 0200 	mov.w	r2, #0
 8006748:	601a      	str	r2, [r3, #0]
   // init pid 
   pid_init(&roll_angle_pid, pid_profile_1.roll_angle_Kp,0,0,10,0,0);
 800674a:	4b3a      	ldr	r3, [pc, #232]	@ (8006834 <attitude_ctrl_init+0x100>)
 800674c:	6919      	ldr	r1, [r3, #16]
 800674e:	f04f 0300 	mov.w	r3, #0
 8006752:	9302      	str	r3, [sp, #8]
 8006754:	f04f 0300 	mov.w	r3, #0
 8006758:	9301      	str	r3, [sp, #4]
 800675a:	4b37      	ldr	r3, [pc, #220]	@ (8006838 <attitude_ctrl_init+0x104>)
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	f04f 0300 	mov.w	r3, #0
 8006762:	f04f 0200 	mov.w	r2, #0
 8006766:	4835      	ldr	r0, [pc, #212]	@ (800683c <attitude_ctrl_init+0x108>)
 8006768:	f7fd ff98 	bl	800469c <pid_init>
   pid_init(&roll_rate_pid, pid_profile_1.roll_rate_Kp, pid_profile_1.roll_rate_Ki, pid_profile_1.roll_rate_Kd,
 800676c:	4b31      	ldr	r3, [pc, #196]	@ (8006834 <attitude_ctrl_init+0x100>)
 800676e:	695c      	ldr	r4, [r3, #20]
 8006770:	4b30      	ldr	r3, [pc, #192]	@ (8006834 <attitude_ctrl_init+0x100>)
 8006772:	699d      	ldr	r5, [r3, #24]
 8006774:	4b2f      	ldr	r3, [pc, #188]	@ (8006834 <attitude_ctrl_init+0x100>)
 8006776:	69de      	ldr	r6, [r3, #28]
            pid_profile_1.roll_fcut_err  , pid_profile_1.roll_f_cut_rate_D, pid_profile_1.roll_max_I);
 8006778:	4b2e      	ldr	r3, [pc, #184]	@ (8006834 <attitude_ctrl_init+0x100>)
 800677a:	7b1b      	ldrb	r3, [r3, #12]
   pid_init(&roll_rate_pid, pid_profile_1.roll_rate_Kp, pid_profile_1.roll_rate_Ki, pid_profile_1.roll_rate_Kd,
 800677c:	4618      	mov	r0, r3
 800677e:	f7fa fac1 	bl	8000d04 <__aeabi_ui2f>
 8006782:	4680      	mov	r8, r0
            pid_profile_1.roll_fcut_err  , pid_profile_1.roll_f_cut_rate_D, pid_profile_1.roll_max_I);
 8006784:	4b2b      	ldr	r3, [pc, #172]	@ (8006834 <attitude_ctrl_init+0x100>)
 8006786:	f993 3020 	ldrsb.w	r3, [r3, #32]
   pid_init(&roll_rate_pid, pid_profile_1.roll_rate_Kp, pid_profile_1.roll_rate_Ki, pid_profile_1.roll_rate_Kd,
 800678a:	4618      	mov	r0, r3
 800678c:	f7fa fabe 	bl	8000d0c <__aeabi_i2f>
 8006790:	4681      	mov	r9, r0
            pid_profile_1.roll_fcut_err  , pid_profile_1.roll_f_cut_rate_D, pid_profile_1.roll_max_I);
 8006792:	4b28      	ldr	r3, [pc, #160]	@ (8006834 <attitude_ctrl_init+0x100>)
 8006794:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
   pid_init(&roll_rate_pid, pid_profile_1.roll_rate_Kp, pid_profile_1.roll_rate_Ki, pid_profile_1.roll_rate_Kd,
 8006798:	4618      	mov	r0, r3
 800679a:	f7fa fab7 	bl	8000d0c <__aeabi_i2f>
 800679e:	4603      	mov	r3, r0
 80067a0:	9302      	str	r3, [sp, #8]
 80067a2:	f8cd 9004 	str.w	r9, [sp, #4]
 80067a6:	f8cd 8000 	str.w	r8, [sp]
 80067aa:	4633      	mov	r3, r6
 80067ac:	462a      	mov	r2, r5
 80067ae:	4621      	mov	r1, r4
 80067b0:	4823      	ldr	r0, [pc, #140]	@ (8006840 <attitude_ctrl_init+0x10c>)
 80067b2:	f7fd ff73 	bl	800469c <pid_init>

   pid_init(&pitch_angle_pid, pid_profile_1.pitch_angle_Kp,0,0,10,0,0);
 80067b6:	4b1f      	ldr	r3, [pc, #124]	@ (8006834 <attitude_ctrl_init+0x100>)
 80067b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80067ba:	f04f 0300 	mov.w	r3, #0
 80067be:	9302      	str	r3, [sp, #8]
 80067c0:	f04f 0300 	mov.w	r3, #0
 80067c4:	9301      	str	r3, [sp, #4]
 80067c6:	4b1c      	ldr	r3, [pc, #112]	@ (8006838 <attitude_ctrl_init+0x104>)
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	f04f 0300 	mov.w	r3, #0
 80067ce:	f04f 0200 	mov.w	r2, #0
 80067d2:	481c      	ldr	r0, [pc, #112]	@ (8006844 <attitude_ctrl_init+0x110>)
 80067d4:	f7fd ff62 	bl	800469c <pid_init>
   pid_init(&pitch_rate_pid,pid_profile_1.pitch_rate_Kp,pid_profile_1.pitch_rate_Ki,pid_profile_1.pitch_rate_Kd,
 80067d8:	4b16      	ldr	r3, [pc, #88]	@ (8006834 <attitude_ctrl_init+0x100>)
 80067da:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 80067dc:	4b15      	ldr	r3, [pc, #84]	@ (8006834 <attitude_ctrl_init+0x100>)
 80067de:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 80067e0:	4b14      	ldr	r3, [pc, #80]	@ (8006834 <attitude_ctrl_init+0x100>)
 80067e2:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
            pid_profile_1.roll_fcut_err,  pid_profile_1.pitch_f_cut_rate_D,pid_profile_1.pitch_max_I);
 80067e4:	4b13      	ldr	r3, [pc, #76]	@ (8006834 <attitude_ctrl_init+0x100>)
 80067e6:	7b1b      	ldrb	r3, [r3, #12]
   pid_init(&pitch_rate_pid,pid_profile_1.pitch_rate_Kp,pid_profile_1.pitch_rate_Ki,pid_profile_1.pitch_rate_Kd,
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7fa fa8b 	bl	8000d04 <__aeabi_ui2f>
 80067ee:	4680      	mov	r8, r0
            pid_profile_1.roll_fcut_err,  pid_profile_1.pitch_f_cut_rate_D,pid_profile_1.pitch_max_I);
 80067f0:	4b10      	ldr	r3, [pc, #64]	@ (8006834 <attitude_ctrl_init+0x100>)
 80067f2:	f993 3044 	ldrsb.w	r3, [r3, #68]	@ 0x44
   pid_init(&pitch_rate_pid,pid_profile_1.pitch_rate_Kp,pid_profile_1.pitch_rate_Ki,pid_profile_1.pitch_rate_Kd,
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fa fa88 	bl	8000d0c <__aeabi_i2f>
 80067fc:	4681      	mov	r9, r0
            pid_profile_1.roll_fcut_err,  pid_profile_1.pitch_f_cut_rate_D,pid_profile_1.pitch_max_I);
 80067fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006834 <attitude_ctrl_init+0x100>)
 8006800:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
   pid_init(&pitch_rate_pid,pid_profile_1.pitch_rate_Kp,pid_profile_1.pitch_rate_Ki,pid_profile_1.pitch_rate_Kd,
 8006804:	4618      	mov	r0, r3
 8006806:	f7fa fa81 	bl	8000d0c <__aeabi_i2f>
 800680a:	4603      	mov	r3, r0
 800680c:	9302      	str	r3, [sp, #8]
 800680e:	f8cd 9004 	str.w	r9, [sp, #4]
 8006812:	f8cd 8000 	str.w	r8, [sp]
 8006816:	4633      	mov	r3, r6
 8006818:	462a      	mov	r2, r5
 800681a:	4621      	mov	r1, r4
 800681c:	480a      	ldr	r0, [pc, #40]	@ (8006848 <attitude_ctrl_init+0x114>)
 800681e:	f7fd ff3d 	bl	800469c <pid_init>
}
 8006822:	bf00      	nop
 8006824:	3704      	adds	r7, #4
 8006826:	46bd      	mov	sp, r7
 8006828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800682c:	20000bac 	.word	0x20000bac
 8006830:	20000c74 	.word	0x20000c74
 8006834:	2000001c 	.word	0x2000001c
 8006838:	41200000 	.word	0x41200000
 800683c:	20000c08 	.word	0x20000c08
 8006840:	20000bb0 	.word	0x20000bb0
 8006844:	20000c34 	.word	0x20000c34
 8006848:	20000bdc 	.word	0x20000bdc
 800684c:	00000000 	.word	0x00000000

08006850 <attitude_ctrl>:

void attitude_ctrl(const uint32_t micros){
 8006850:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006854:	b09a      	sub	sp, #104	@ 0x68
 8006856:	af02      	add	r7, sp, #8
 8006858:	6078      	str	r0, [r7, #4]
    static uint32_t last_time_us; 
    float dt = (micros - last_time_us)*(1e-6f);
 800685a:	4b98      	ldr	r3, [pc, #608]	@ (8006abc <attitude_ctrl+0x26c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	4618      	mov	r0, r3
 8006864:	f7fa fa4e 	bl	8000d04 <__aeabi_ui2f>
 8006868:	4603      	mov	r3, r0
 800686a:	4995      	ldr	r1, [pc, #596]	@ (8006ac0 <attitude_ctrl+0x270>)
 800686c:	4618      	mov	r0, r3
 800686e:	f7fa faa1 	bl	8000db4 <__aeabi_fmul>
 8006872:	4603      	mov	r3, r0
 8006874:	65fb      	str	r3, [r7, #92]	@ 0x5c
    last_time_us = micros;
 8006876:	4a91      	ldr	r2, [pc, #580]	@ (8006abc <attitude_ctrl+0x26c>)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6013      	str	r3, [r2, #0]
    if(dt < 0 || dt > MAX_WAIT_TIME){
 800687c:	f04f 0100 	mov.w	r1, #0
 8006880:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8006882:	f7fa fc35 	bl	80010f0 <__aeabi_fcmplt>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	f040 83fe 	bne.w	800708a <attitude_ctrl+0x83a>
 800688e:	498d      	ldr	r1, [pc, #564]	@ (8006ac4 <attitude_ctrl+0x274>)
 8006890:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8006892:	f7fa fc4b 	bl	800112c <__aeabi_fcmpgt>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	f040 83f6 	bne.w	800708a <attitude_ctrl+0x83a>
        return;
    }

    const float roll_rate_measurement = AHRS.roll_rate;
 800689e:	4b8a      	ldr	r3, [pc, #552]	@ (8006ac8 <attitude_ctrl+0x278>)
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	65bb      	str	r3, [r7, #88]	@ 0x58
    const float pitch_rate_measurement = AHRS.pitch_rate;
 80068a4:	4b88      	ldr	r3, [pc, #544]	@ (8006ac8 <attitude_ctrl+0x278>)
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	657b      	str	r3, [r7, #84]	@ 0x54

    const float roll_measurement = AHRS.roll;
 80068aa:	4b87      	ldr	r3, [pc, #540]	@ (8006ac8 <attitude_ctrl+0x278>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	653b      	str	r3, [r7, #80]	@ 0x50
    const float pitch_measurement = AHRS.pitch;
 80068b0:	4b85      	ldr	r3, [pc, #532]	@ (8006ac8 <attitude_ctrl+0x278>)
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    static float pitch_pid_smooth = 0.0f;
    
    /* calculate roll && pitch desired
    */

	if(ibusChannelData[CH9] > CHANNEL_HIGH ){
 80068b6:	4b85      	ldr	r3, [pc, #532]	@ (8006acc <attitude_ctrl+0x27c>)
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 80068be:	4293      	cmp	r3, r2
 80068c0:	d920      	bls.n	8006904 <attitude_ctrl+0xb4>
		roll_pid_rc_gain = ((int)ibusChannelData[CH7] - 1000)*0.002f;
 80068c2:	4b82      	ldr	r3, [pc, #520]	@ (8006acc <attitude_ctrl+0x27c>)
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fa fa1e 	bl	8000d0c <__aeabi_i2f>
 80068d0:	4603      	mov	r3, r0
 80068d2:	497f      	ldr	r1, [pc, #508]	@ (8006ad0 <attitude_ctrl+0x280>)
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7fa fa6d 	bl	8000db4 <__aeabi_fmul>
 80068da:	4603      	mov	r3, r0
 80068dc:	461a      	mov	r2, r3
 80068de:	4b7d      	ldr	r3, [pc, #500]	@ (8006ad4 <attitude_ctrl+0x284>)
 80068e0:	601a      	str	r2, [r3, #0]
		roll_trim = ((int)ibusChannelData[CH8] - 1500)*-0.1f;
 80068e2:	4b7a      	ldr	r3, [pc, #488]	@ (8006acc <attitude_ctrl+0x27c>)
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fa fa0e 	bl	8000d0c <__aeabi_i2f>
 80068f0:	4603      	mov	r3, r0
 80068f2:	4979      	ldr	r1, [pc, #484]	@ (8006ad8 <attitude_ctrl+0x288>)
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fa fa5d 	bl	8000db4 <__aeabi_fmul>
 80068fa:	4603      	mov	r3, r0
 80068fc:	461a      	mov	r2, r3
 80068fe:	4b77      	ldr	r3, [pc, #476]	@ (8006adc <attitude_ctrl+0x28c>)
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	e01f      	b.n	8006944 <attitude_ctrl+0xf4>
	}else{
		pitch_pid_rc_gain = ((int)ibusChannelData[CH7] - 1000)*0.002f;
 8006904:	4b71      	ldr	r3, [pc, #452]	@ (8006acc <attitude_ctrl+0x27c>)
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800690c:	4618      	mov	r0, r3
 800690e:	f7fa f9fd 	bl	8000d0c <__aeabi_i2f>
 8006912:	4603      	mov	r3, r0
 8006914:	496e      	ldr	r1, [pc, #440]	@ (8006ad0 <attitude_ctrl+0x280>)
 8006916:	4618      	mov	r0, r3
 8006918:	f7fa fa4c 	bl	8000db4 <__aeabi_fmul>
 800691c:	4603      	mov	r3, r0
 800691e:	461a      	mov	r2, r3
 8006920:	4b6f      	ldr	r3, [pc, #444]	@ (8006ae0 <attitude_ctrl+0x290>)
 8006922:	601a      	str	r2, [r3, #0]
		pitch_trim = ((int)ibusChannelData[CH8] - 1500)*-0.1f;
 8006924:	4b69      	ldr	r3, [pc, #420]	@ (8006acc <attitude_ctrl+0x27c>)
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800692c:	4618      	mov	r0, r3
 800692e:	f7fa f9ed 	bl	8000d0c <__aeabi_i2f>
 8006932:	4603      	mov	r3, r0
 8006934:	4968      	ldr	r1, [pc, #416]	@ (8006ad8 <attitude_ctrl+0x288>)
 8006936:	4618      	mov	r0, r3
 8006938:	f7fa fa3c 	bl	8000db4 <__aeabi_fmul>
 800693c:	4603      	mov	r3, r0
 800693e:	461a      	mov	r2, r3
 8006940:	4b68      	ldr	r3, [pc, #416]	@ (8006ae4 <attitude_ctrl+0x294>)
 8006942:	601a      	str	r2, [r3, #0]
	}

    roll_desired = ((int)ibusChannelData[0] - 1500)*0.15f    + roll_trim;   /*  -50 <-  -> +50  */
 8006944:	4b61      	ldr	r3, [pc, #388]	@ (8006acc <attitude_ctrl+0x27c>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800694c:	4618      	mov	r0, r3
 800694e:	f7fa f9dd 	bl	8000d0c <__aeabi_i2f>
 8006952:	4603      	mov	r3, r0
 8006954:	4964      	ldr	r1, [pc, #400]	@ (8006ae8 <attitude_ctrl+0x298>)
 8006956:	4618      	mov	r0, r3
 8006958:	f7fa fa2c 	bl	8000db4 <__aeabi_fmul>
 800695c:	4603      	mov	r3, r0
 800695e:	461a      	mov	r2, r3
 8006960:	4b5e      	ldr	r3, [pc, #376]	@ (8006adc <attitude_ctrl+0x28c>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4619      	mov	r1, r3
 8006966:	4610      	mov	r0, r2
 8006968:	f7fa f91c 	bl	8000ba4 <__addsf3>
 800696c:	4603      	mov	r3, r0
 800696e:	461a      	mov	r2, r3
 8006970:	4b5e      	ldr	r3, [pc, #376]	@ (8006aec <attitude_ctrl+0x29c>)
 8006972:	601a      	str	r2, [r3, #0]
	pitch_desired = ((int)ibusChannelData[1] - 1500)*-0.15f + pitch_trim ;/*  -75 <-  -> +75  */
 8006974:	4b55      	ldr	r3, [pc, #340]	@ (8006acc <attitude_ctrl+0x27c>)
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800697c:	4618      	mov	r0, r3
 800697e:	f7fa f9c5 	bl	8000d0c <__aeabi_i2f>
 8006982:	4603      	mov	r3, r0
 8006984:	495a      	ldr	r1, [pc, #360]	@ (8006af0 <attitude_ctrl+0x2a0>)
 8006986:	4618      	mov	r0, r3
 8006988:	f7fa fa14 	bl	8000db4 <__aeabi_fmul>
 800698c:	4603      	mov	r3, r0
 800698e:	461a      	mov	r2, r3
 8006990:	4b54      	ldr	r3, [pc, #336]	@ (8006ae4 <attitude_ctrl+0x294>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4619      	mov	r1, r3
 8006996:	4610      	mov	r0, r2
 8006998:	f7fa f904 	bl	8000ba4 <__addsf3>
 800699c:	4603      	mov	r3, r0
 800699e:	461a      	mov	r2, r3
 80069a0:	4b54      	ldr	r3, [pc, #336]	@ (8006af4 <attitude_ctrl+0x2a4>)
 80069a2:	601a      	str	r2, [r3, #0]

    /*---- pid scale with velocity  -----*/
    if(_gps.fix > 1){
 80069a4:	4b54      	ldr	r3, [pc, #336]	@ (8006af8 <attitude_ctrl+0x2a8>)
 80069a6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	f240 80b8 	bls.w	8006b20 <attitude_ctrl+0x2d0>
        float vn = (float)_gps.velocity[0]/100;  // m
 80069b0:	4b51      	ldr	r3, [pc, #324]	@ (8006af8 <attitude_ctrl+0x2a8>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fa f9a9 	bl	8000d0c <__aeabi_i2f>
 80069ba:	4603      	mov	r3, r0
 80069bc:	494f      	ldr	r1, [pc, #316]	@ (8006afc <attitude_ctrl+0x2ac>)
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fa faac 	bl	8000f1c <__aeabi_fdiv>
 80069c4:	4603      	mov	r3, r0
 80069c6:	64bb      	str	r3, [r7, #72]	@ 0x48
        float ve = (float)_gps.velocity[1]/100;  // m
 80069c8:	4b4b      	ldr	r3, [pc, #300]	@ (8006af8 <attitude_ctrl+0x2a8>)
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fa f99d 	bl	8000d0c <__aeabi_i2f>
 80069d2:	4603      	mov	r3, r0
 80069d4:	4949      	ldr	r1, [pc, #292]	@ (8006afc <attitude_ctrl+0x2ac>)
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7fa faa0 	bl	8000f1c <__aeabi_fdiv>
 80069dc:	4603      	mov	r3, r0
 80069de:	647b      	str	r3, [r7, #68]	@ 0x44
        //float vd = (float)_gps.velocity[2]/100;  // m

        float absolute_velocity = sqrtf(sq(vn) + sq(ve));// + sq(vd));
 80069e0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80069e2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80069e4:	f7fa f9e6 	bl	8000db4 <__aeabi_fmul>
 80069e8:	4603      	mov	r3, r0
 80069ea:	461c      	mov	r4, r3
 80069ec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80069ee:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80069f0:	f7fa f9e0 	bl	8000db4 <__aeabi_fmul>
 80069f4:	4603      	mov	r3, r0
 80069f6:	4619      	mov	r1, r3
 80069f8:	4620      	mov	r0, r4
 80069fa:	f7fa f8d3 	bl	8000ba4 <__addsf3>
 80069fe:	4603      	mov	r3, r0
 8006a00:	4618      	mov	r0, r3
 8006a02:	f00e f9f0 	bl	8014de6 <sqrtf>
 8006a06:	6438      	str	r0, [r7, #64]	@ 0x40
        absolute_velocity = constrainf(absolute_velocity,0,MAX_SPEED); 
 8006a08:	4a3d      	ldr	r2, [pc, #244]	@ (8006b00 <attitude_ctrl+0x2b0>)
 8006a0a:	f04f 0100 	mov.w	r1, #0
 8006a0e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8006a10:	f7ff fe50 	bl	80066b4 <constrainf>
 8006a14:	6438      	str	r0, [r7, #64]	@ 0x40
        if(speed_filter_reset){
 8006a16:	4b3b      	ldr	r3, [pc, #236]	@ (8006b04 <attitude_ctrl+0x2b4>)
 8006a18:	f993 3000 	ldrsb.w	r3, [r3]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d005      	beq.n	8006a2c <attitude_ctrl+0x1dc>
            ab_speed_filted = absolute_velocity;
 8006a20:	4a39      	ldr	r2, [pc, #228]	@ (8006b08 <attitude_ctrl+0x2b8>)
 8006a22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a24:	6013      	str	r3, [r2, #0]
            speed_filter_reset = FALSE;
 8006a26:	4b37      	ldr	r3, [pc, #220]	@ (8006b04 <attitude_ctrl+0x2b4>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	701a      	strb	r2, [r3, #0]
        }
        ab_speed_filted += pt1FilterGain(10,dt)*(absolute_velocity - ab_speed_filted);
 8006a2c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8006a2e:	4837      	ldr	r0, [pc, #220]	@ (8006b0c <attitude_ctrl+0x2bc>)
 8006a30:	f7ff fe5e 	bl	80066f0 <pt1FilterGain>
 8006a34:	4604      	mov	r4, r0
 8006a36:	4b34      	ldr	r3, [pc, #208]	@ (8006b08 <attitude_ctrl+0x2b8>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8006a3e:	f7fa f8af 	bl	8000ba0 <__aeabi_fsub>
 8006a42:	4603      	mov	r3, r0
 8006a44:	4619      	mov	r1, r3
 8006a46:	4620      	mov	r0, r4
 8006a48:	f7fa f9b4 	bl	8000db4 <__aeabi_fmul>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	461a      	mov	r2, r3
 8006a50:	4b2d      	ldr	r3, [pc, #180]	@ (8006b08 <attitude_ctrl+0x2b8>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4619      	mov	r1, r3
 8006a56:	4610      	mov	r0, r2
 8006a58:	f7fa f8a4 	bl	8000ba4 <__addsf3>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	461a      	mov	r2, r3
 8006a60:	4b29      	ldr	r3, [pc, #164]	@ (8006b08 <attitude_ctrl+0x2b8>)
 8006a62:	601a      	str	r2, [r3, #0]
        float speed_temp = constrainf(ab_speed_filted,MINIMUN_SPEED,MAXIMUN_SPEED);
 8006a64:	4b28      	ldr	r3, [pc, #160]	@ (8006b08 <attitude_ctrl+0x2b8>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a29      	ldr	r2, [pc, #164]	@ (8006b10 <attitude_ctrl+0x2c0>)
 8006a6a:	492a      	ldr	r1, [pc, #168]	@ (8006b14 <attitude_ctrl+0x2c4>)
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7ff fe21 	bl	80066b4 <constrainf>
 8006a72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        pid_velo_scale = (float)MINIMUN_SPEED/((float)MINIMUN_SPEED + sq(speed_temp - MINIMUN_SPEED)*0.04f);
 8006a74:	4927      	ldr	r1, [pc, #156]	@ (8006b14 <attitude_ctrl+0x2c4>)
 8006a76:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006a78:	f7fa f892 	bl	8000ba0 <__aeabi_fsub>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	461c      	mov	r4, r3
 8006a80:	4924      	ldr	r1, [pc, #144]	@ (8006b14 <attitude_ctrl+0x2c4>)
 8006a82:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006a84:	f7fa f88c 	bl	8000ba0 <__aeabi_fsub>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	f7fa f991 	bl	8000db4 <__aeabi_fmul>
 8006a92:	4603      	mov	r3, r0
 8006a94:	4920      	ldr	r1, [pc, #128]	@ (8006b18 <attitude_ctrl+0x2c8>)
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fa f98c 	bl	8000db4 <__aeabi_fmul>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	491d      	ldr	r1, [pc, #116]	@ (8006b14 <attitude_ctrl+0x2c4>)
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7fa f87f 	bl	8000ba4 <__addsf3>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	481a      	ldr	r0, [pc, #104]	@ (8006b14 <attitude_ctrl+0x2c4>)
 8006aac:	f7fa fa36 	bl	8000f1c <__aeabi_fdiv>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	4b19      	ldr	r3, [pc, #100]	@ (8006b1c <attitude_ctrl+0x2cc>)
 8006ab6:	601a      	str	r2, [r3, #0]
 8006ab8:	e043      	b.n	8006b42 <attitude_ctrl+0x2f2>
 8006aba:	bf00      	nop
 8006abc:	20000c7c 	.word	0x20000c7c
 8006ac0:	358637bd 	.word	0x358637bd
 8006ac4:	3dcccccd 	.word	0x3dcccccd
 8006ac8:	2000055c 	.word	0x2000055c
 8006acc:	20000148 	.word	0x20000148
 8006ad0:	3b03126f 	.word	0x3b03126f
 8006ad4:	20000c64 	.word	0x20000c64
 8006ad8:	bdcccccd 	.word	0xbdcccccd
 8006adc:	20000c6c 	.word	0x20000c6c
 8006ae0:	20000c68 	.word	0x20000c68
 8006ae4:	20000c70 	.word	0x20000c70
 8006ae8:	3e19999a 	.word	0x3e19999a
 8006aec:	20000ba0 	.word	0x20000ba0
 8006af0:	be19999a 	.word	0xbe19999a
 8006af4:	20000ba4 	.word	0x20000ba4
 8006af8:	20000424 	.word	0x20000424
 8006afc:	42c80000 	.word	0x42c80000
 8006b00:	41f00000 	.word	0x41f00000
 8006b04:	20000bac 	.word	0x20000bac
 8006b08:	20000c74 	.word	0x20000c74
 8006b0c:	41200000 	.word	0x41200000
 8006b10:	42040000 	.word	0x42040000
 8006b14:	41400000 	.word	0x41400000
 8006b18:	3d23d70a 	.word	0x3d23d70a
 8006b1c:	20000c78 	.word	0x20000c78
    }
    else{
        speed_filter_reset = TRUE;
 8006b20:	4b35      	ldr	r3, [pc, #212]	@ (8006bf8 <attitude_ctrl+0x3a8>)
 8006b22:	2201      	movs	r2, #1
 8006b24:	701a      	strb	r2, [r3, #0]
    	if(ibusChannelData[CH6] > CHANNEL_HIGH){
 8006b26:	4b35      	ldr	r3, [pc, #212]	@ (8006bfc <attitude_ctrl+0x3ac>)
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d904      	bls.n	8006b3c <attitude_ctrl+0x2ec>
    		pid_velo_scale = 1;
 8006b32:	4b33      	ldr	r3, [pc, #204]	@ (8006c00 <attitude_ctrl+0x3b0>)
 8006b34:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	e002      	b.n	8006b42 <attitude_ctrl+0x2f2>
    	}else{
    		pid_velo_scale = 0.4f;
 8006b3c:	4b30      	ldr	r3, [pc, #192]	@ (8006c00 <attitude_ctrl+0x3b0>)
 8006b3e:	4a31      	ldr	r2, [pc, #196]	@ (8006c04 <attitude_ctrl+0x3b4>)
 8006b40:	601a      	str	r2, [r3, #0]
    	}
    }

    const float pid_roll_vel_scale  = constrainf(pid_velo_scale,MIN_PID_SPEED_SCALE,MAX_PID_SPEED_SCALE);
 8006b42:	4b2f      	ldr	r3, [pc, #188]	@ (8006c00 <attitude_ctrl+0x3b0>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006b4a:	492e      	ldr	r1, [pc, #184]	@ (8006c04 <attitude_ctrl+0x3b4>)
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7ff fdb1 	bl	80066b4 <constrainf>
 8006b52:	63b8      	str	r0, [r7, #56]	@ 0x38
    const float pid_pitch_vel_scale = constrainf(pid_velo_scale,MIN_PID_SPEED_SCALE + 0.2,MAX_PID_SPEED_SCALE);
 8006b54:	4b2a      	ldr	r3, [pc, #168]	@ (8006c00 <attitude_ctrl+0x3b0>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006b5c:	492a      	ldr	r1, [pc, #168]	@ (8006c08 <attitude_ctrl+0x3b8>)
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7ff fda8 	bl	80066b4 <constrainf>
 8006b64:	6378      	str	r0, [r7, #52]	@ 0x34

    // stabilize mode
   if(ibusChannelData[CH5] > CHANNEL_HIGH ){
 8006b66:	4b25      	ldr	r3, [pc, #148]	@ (8006bfc <attitude_ctrl+0x3ac>)
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	f240 81dd 	bls.w	8006f2e <attitude_ctrl+0x6de>
        /*----- roll axis pid   -----*/
        float roll_rate_desired =  pid_calculate(&roll_angle_pid,roll_measurement,roll_desired,1.0f,dt);
 8006b74:	4b25      	ldr	r3, [pc, #148]	@ (8006c0c <attitude_ctrl+0x3bc>)
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8006b80:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006b82:	4823      	ldr	r0, [pc, #140]	@ (8006c10 <attitude_ctrl+0x3c0>)
 8006b84:	f7fd fdbc 	bl	8004700 <pid_calculate>
 8006b88:	62b8      	str	r0, [r7, #40]	@ 0x28
        // limit rate
        roll_rate_desired = constrainf(roll_rate_desired, -pid_profile_1.roll_rate_limit, pid_profile_1.roll_rate_limit);
 8006b8a:	4b22      	ldr	r3, [pc, #136]	@ (8006c14 <attitude_ctrl+0x3c4>)
 8006b8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b90:	425b      	negs	r3, r3
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fa f8ba 	bl	8000d0c <__aeabi_i2f>
 8006b98:	4604      	mov	r4, r0
 8006b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8006c14 <attitude_ctrl+0x3c4>)
 8006b9c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7fa f8b3 	bl	8000d0c <__aeabi_i2f>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	461a      	mov	r2, r3
 8006baa:	4621      	mov	r1, r4
 8006bac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006bae:	f7ff fd81 	bl	80066b4 <constrainf>
 8006bb2:	62b8      	str	r0, [r7, #40]	@ 0x28
        float r_rate_pid  =  pid_calculate(&roll_rate_pid, roll_rate_measurement,roll_rate_desired,pid_roll_vel_scale,dt);
 8006bb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bbc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006bbe:	4816      	ldr	r0, [pc, #88]	@ (8006c18 <attitude_ctrl+0x3c8>)
 8006bc0:	f7fd fd9e 	bl	8004700 <pid_calculate>
 8006bc4:	6278      	str	r0, [r7, #36]	@ 0x24
        // reset I term
        if(abs(roll_angle_pid.err) < ERROR_RESET_I_TERM){
 8006bc6:	4b12      	ldr	r3, [pc, #72]	@ (8006c10 <attitude_ctrl+0x3c0>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f04f 0100 	mov.w	r1, #0
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7fa faac 	bl	800112c <__aeabi_fcmpgt>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d022      	beq.n	8006c20 <attitude_ctrl+0x3d0>
 8006bda:	4b0d      	ldr	r3, [pc, #52]	@ (8006c10 <attitude_ctrl+0x3c0>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2201      	movs	r2, #1
 8006be0:	4614      	mov	r4, r2
 8006be2:	490e      	ldr	r1, [pc, #56]	@ (8006c1c <attitude_ctrl+0x3cc>)
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7fa fa83 	bl	80010f0 <__aeabi_fcmplt>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <attitude_ctrl+0x3a4>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	461c      	mov	r4, r3
 8006bf4:	b2e3      	uxtb	r3, r4
 8006bf6:	e021      	b.n	8006c3c <attitude_ctrl+0x3ec>
 8006bf8:	20000bac 	.word	0x20000bac
 8006bfc:	20000148 	.word	0x20000148
 8006c00:	20000c78 	.word	0x20000c78
 8006c04:	3ecccccd 	.word	0x3ecccccd
 8006c08:	3f19999a 	.word	0x3f19999a
 8006c0c:	20000ba0 	.word	0x20000ba0
 8006c10:	20000c08 	.word	0x20000c08
 8006c14:	2000001c 	.word	0x2000001c
 8006c18:	20000bb0 	.word	0x20000bb0
 8006c1c:	40200000 	.word	0x40200000
 8006c20:	4b89      	ldr	r3, [pc, #548]	@ (8006e48 <attitude_ctrl+0x5f8>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2201      	movs	r2, #1
 8006c26:	4614      	mov	r4, r2
 8006c28:	4988      	ldr	r1, [pc, #544]	@ (8006e4c <attitude_ctrl+0x5fc>)
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fa fa7e 	bl	800112c <__aeabi_fcmpgt>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <attitude_ctrl+0x3ea>
 8006c36:	2300      	movs	r3, #0
 8006c38:	461c      	mov	r4, r3
 8006c3a:	b2e3      	uxtb	r3, r4
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d003      	beq.n	8006c48 <attitude_ctrl+0x3f8>
            roll_rate_pid.i_term = 0.0f;
 8006c40:	4b83      	ldr	r3, [pc, #524]	@ (8006e50 <attitude_ctrl+0x600>)
 8006c42:	f04f 0200 	mov.w	r2, #0
 8006c46:	615a      	str	r2, [r3, #20]
        }
        // feed forward
        float FF_roll = roll_rate_desired*pid_profile_1.roll_FF_gain;
 8006c48:	4b82      	ldr	r3, [pc, #520]	@ (8006e54 <attitude_ctrl+0x604>)
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c50:	f7fa f8b0 	bl	8000db4 <__aeabi_fmul>
 8006c54:	4603      	mov	r3, r0
 8006c56:	623b      	str	r3, [r7, #32]
        r_rate_pid = r_rate_pid + FF_roll;
 8006c58:	6a39      	ldr	r1, [r7, #32]
 8006c5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006c5c:	f7f9 ffa2 	bl	8000ba4 <__addsf3>
 8006c60:	4603      	mov	r3, r0
 8006c62:	627b      	str	r3, [r7, #36]	@ 0x24
        r_rate_pid = constrainf(r_rate_pid, -pid_profile_1.roll_max_pid, pid_profile_1.roll_max_pid);
 8006c64:	4b7b      	ldr	r3, [pc, #492]	@ (8006e54 <attitude_ctrl+0x604>)
 8006c66:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8006c6a:	425b      	negs	r3, r3
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7fa f84d 	bl	8000d0c <__aeabi_i2f>
 8006c72:	4604      	mov	r4, r0
 8006c74:	4b77      	ldr	r3, [pc, #476]	@ (8006e54 <attitude_ctrl+0x604>)
 8006c76:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7fa f846 	bl	8000d0c <__aeabi_i2f>
 8006c80:	4603      	mov	r3, r0
 8006c82:	461a      	mov	r2, r3
 8006c84:	4621      	mov	r1, r4
 8006c86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006c88:	f7ff fd14 	bl	80066b4 <constrainf>
 8006c8c:	6278      	str	r0, [r7, #36]	@ 0x24
        // filter pid  LPF
        roll_pid_smooth += pt1FilterGain(pid_profile_1.roll_pid_fcut,dt)*(r_rate_pid - roll_pid_smooth);
 8006c8e:	4b71      	ldr	r3, [pc, #452]	@ (8006e54 <attitude_ctrl+0x604>)
 8006c90:	f993 3024 	ldrsb.w	r3, [r3, #36]	@ 0x24
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7fa f839 	bl	8000d0c <__aeabi_i2f>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7ff fd26 	bl	80066f0 <pt1FilterGain>
 8006ca4:	4604      	mov	r4, r0
 8006ca6:	4b6c      	ldr	r3, [pc, #432]	@ (8006e58 <attitude_ctrl+0x608>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4619      	mov	r1, r3
 8006cac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006cae:	f7f9 ff77 	bl	8000ba0 <__aeabi_fsub>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f7fa f87c 	bl	8000db4 <__aeabi_fmul>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	4b65      	ldr	r3, [pc, #404]	@ (8006e58 <attitude_ctrl+0x608>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	4610      	mov	r0, r2
 8006cc8:	f7f9 ff6c 	bl	8000ba4 <__addsf3>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	461a      	mov	r2, r3
 8006cd0:	4b61      	ldr	r3, [pc, #388]	@ (8006e58 <attitude_ctrl+0x608>)
 8006cd2:	601a      	str	r2, [r3, #0]


        /*-----  pitch axis pid  ---------*/
        float pitch_rate_desired =  pid_calculate(&pitch_angle_pid,pitch_measurement,pitch_desired,1.0f,dt);
 8006cd4:	4b61      	ldr	r3, [pc, #388]	@ (8006e5c <attitude_ctrl+0x60c>)
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8006ce0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006ce2:	485f      	ldr	r0, [pc, #380]	@ (8006e60 <attitude_ctrl+0x610>)
 8006ce4:	f7fd fd0c 	bl	8004700 <pid_calculate>
 8006ce8:	61f8      	str	r0, [r7, #28]
        // limit rate
        pitch_rate_desired = constrainf(pitch_rate_desired, -pid_profile_1.pitch_rate_limit, pid_profile_1.pitch_rate_limit);
 8006cea:	4b5a      	ldr	r3, [pc, #360]	@ (8006e54 <attitude_ctrl+0x604>)
 8006cec:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8006cf0:	425b      	negs	r3, r3
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fa f80a 	bl	8000d0c <__aeabi_i2f>
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	4b56      	ldr	r3, [pc, #344]	@ (8006e54 <attitude_ctrl+0x604>)
 8006cfc:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7fa f803 	bl	8000d0c <__aeabi_i2f>
 8006d06:	4603      	mov	r3, r0
 8006d08:	461a      	mov	r2, r3
 8006d0a:	4621      	mov	r1, r4
 8006d0c:	69f8      	ldr	r0, [r7, #28]
 8006d0e:	f7ff fcd1 	bl	80066b4 <constrainf>
 8006d12:	61f8      	str	r0, [r7, #28]
        float p_rate_pid  =  pid_calculate(&pitch_rate_pid, pitch_rate_measurement,pitch_rate_desired,pid_pitch_vel_scale ,dt);
 8006d14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d16:	9300      	str	r3, [sp, #0]
 8006d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d1a:	69fa      	ldr	r2, [r7, #28]
 8006d1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d1e:	4851      	ldr	r0, [pc, #324]	@ (8006e64 <attitude_ctrl+0x614>)
 8006d20:	f7fd fcee 	bl	8004700 <pid_calculate>
 8006d24:	61b8      	str	r0, [r7, #24]
        // reset I term
        //if(abs(pitch_angle_pid.err) < ERROR_RESET_I_TERM){
        //    pitch_rate_pid.i_term = 0.0f;
        //}
        // feed forward
        float FF_pitch = pitch_rate_desired*pid_profile_1.pitch_FF_gain;;
 8006d26:	4b4b      	ldr	r3, [pc, #300]	@ (8006e54 <attitude_ctrl+0x604>)
 8006d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	69f8      	ldr	r0, [r7, #28]
 8006d2e:	f7fa f841 	bl	8000db4 <__aeabi_fmul>
 8006d32:	4603      	mov	r3, r0
 8006d34:	617b      	str	r3, [r7, #20]
        p_rate_pid = p_rate_pid + FF_pitch;
 8006d36:	6979      	ldr	r1, [r7, #20]
 8006d38:	69b8      	ldr	r0, [r7, #24]
 8006d3a:	f7f9 ff33 	bl	8000ba4 <__addsf3>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	61bb      	str	r3, [r7, #24]
        p_rate_pid = constrainf(p_rate_pid,- pid_profile_1.pitch_max_pid, pid_profile_1.pitch_max_pid);
 8006d42:	4b44      	ldr	r3, [pc, #272]	@ (8006e54 <attitude_ctrl+0x604>)
 8006d44:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8006d48:	425b      	negs	r3, r3
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7f9 ffde 	bl	8000d0c <__aeabi_i2f>
 8006d50:	4604      	mov	r4, r0
 8006d52:	4b40      	ldr	r3, [pc, #256]	@ (8006e54 <attitude_ctrl+0x604>)
 8006d54:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7f9 ffd7 	bl	8000d0c <__aeabi_i2f>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	461a      	mov	r2, r3
 8006d62:	4621      	mov	r1, r4
 8006d64:	69b8      	ldr	r0, [r7, #24]
 8006d66:	f7ff fca5 	bl	80066b4 <constrainf>
 8006d6a:	61b8      	str	r0, [r7, #24]
        // filter pid  LPF
        pitch_pid_smooth += pt1FilterGain(pid_profile_1.pitch_pid_fcut,dt)*(p_rate_pid - pitch_pid_smooth);
 8006d6c:	4b39      	ldr	r3, [pc, #228]	@ (8006e54 <attitude_ctrl+0x604>)
 8006d6e:	f993 3048 	ldrsb.w	r3, [r3, #72]	@ 0x48
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7f9 ffca 	bl	8000d0c <__aeabi_i2f>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7ff fcb7 	bl	80066f0 <pt1FilterGain>
 8006d82:	4604      	mov	r4, r0
 8006d84:	4b38      	ldr	r3, [pc, #224]	@ (8006e68 <attitude_ctrl+0x618>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4619      	mov	r1, r3
 8006d8a:	69b8      	ldr	r0, [r7, #24]
 8006d8c:	f7f9 ff08 	bl	8000ba0 <__aeabi_fsub>
 8006d90:	4603      	mov	r3, r0
 8006d92:	4619      	mov	r1, r3
 8006d94:	4620      	mov	r0, r4
 8006d96:	f7fa f80d 	bl	8000db4 <__aeabi_fmul>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	4b32      	ldr	r3, [pc, #200]	@ (8006e68 <attitude_ctrl+0x618>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4619      	mov	r1, r3
 8006da4:	4610      	mov	r0, r2
 8006da6:	f7f9 fefd 	bl	8000ba4 <__addsf3>
 8006daa:	4603      	mov	r3, r0
 8006dac:	461a      	mov	r2, r3
 8006dae:	4b2e      	ldr	r3, [pc, #184]	@ (8006e68 <attitude_ctrl+0x618>)
 8006db0:	601a      	str	r2, [r3, #0]
        
        // enable && disable I term, for test only
		if(ibusChannelData[CH10] > CHANNEL_HIGH ){
 8006db2:	4b2e      	ldr	r3, [pc, #184]	@ (8006e6c <attitude_ctrl+0x61c>)
 8006db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db6:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d907      	bls.n	8006dce <attitude_ctrl+0x57e>
			pitch_rate_pid.i_term = 0;
 8006dbe:	4b29      	ldr	r3, [pc, #164]	@ (8006e64 <attitude_ctrl+0x614>)
 8006dc0:	f04f 0200 	mov.w	r2, #0
 8006dc4:	615a      	str	r2, [r3, #20]
			roll_rate_pid.i_term = 0;
 8006dc6:	4b22      	ldr	r3, [pc, #136]	@ (8006e50 <attitude_ctrl+0x600>)
 8006dc8:	f04f 0200 	mov.w	r2, #0
 8006dcc:	615a      	str	r2, [r3, #20]
		}

        /*-------------- mix channel --------------------------*/
		if(ibusChannelData[CH9] > CHANNEL_HIGH ){
 8006dce:	4b27      	ldr	r3, [pc, #156]	@ (8006e6c <attitude_ctrl+0x61c>)
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d950      	bls.n	8006e7c <attitude_ctrl+0x62c>
                // roll stabilize
				int pitch_rc = 1500 - ibusChannelData[CH2];
 8006dda:	4b24      	ldr	r3, [pc, #144]	@ (8006e6c <attitude_ctrl+0x61c>)
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8006de2:	3304      	adds	r3, #4
 8006de4:	60fb      	str	r3, [r7, #12]

				servoL = 1500 - roll_pid_smooth + pitch_rc;
 8006de6:	4b1c      	ldr	r3, [pc, #112]	@ (8006e58 <attitude_ctrl+0x608>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4619      	mov	r1, r3
 8006dec:	4820      	ldr	r0, [pc, #128]	@ (8006e70 <attitude_ctrl+0x620>)
 8006dee:	f7f9 fed7 	bl	8000ba0 <__aeabi_fsub>
 8006df2:	4603      	mov	r3, r0
 8006df4:	461c      	mov	r4, r3
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f7f9 ff88 	bl	8000d0c <__aeabi_i2f>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	4619      	mov	r1, r3
 8006e00:	4620      	mov	r0, r4
 8006e02:	f7f9 fecf 	bl	8000ba4 <__addsf3>
 8006e06:	4603      	mov	r3, r0
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7fa f9d5 	bl	80011b8 <__aeabi_f2uiz>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	4b18      	ldr	r3, [pc, #96]	@ (8006e74 <attitude_ctrl+0x624>)
 8006e14:	801a      	strh	r2, [r3, #0]
				servoR = 1500 + roll_pid_smooth + pitch_rc;
 8006e16:	4b10      	ldr	r3, [pc, #64]	@ (8006e58 <attitude_ctrl+0x608>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4915      	ldr	r1, [pc, #84]	@ (8006e70 <attitude_ctrl+0x620>)
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7f9 fec1 	bl	8000ba4 <__addsf3>
 8006e22:	4603      	mov	r3, r0
 8006e24:	461c      	mov	r4, r3
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f7f9 ff70 	bl	8000d0c <__aeabi_i2f>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	4619      	mov	r1, r3
 8006e30:	4620      	mov	r0, r4
 8006e32:	f7f9 feb7 	bl	8000ba4 <__addsf3>
 8006e36:	4603      	mov	r3, r0
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7fa f9bd 	bl	80011b8 <__aeabi_f2uiz>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	4b0d      	ldr	r3, [pc, #52]	@ (8006e78 <attitude_ctrl+0x628>)
 8006e44:	801a      	strh	r2, [r3, #0]
 8006e46:	e0fb      	b.n	8007040 <attitude_ctrl+0x7f0>
 8006e48:	20000c08 	.word	0x20000c08
 8006e4c:	c0200000 	.word	0xc0200000
 8006e50:	20000bb0 	.word	0x20000bb0
 8006e54:	2000001c 	.word	0x2000001c
 8006e58:	20000c80 	.word	0x20000c80
 8006e5c:	20000ba4 	.word	0x20000ba4
 8006e60:	20000c34 	.word	0x20000c34
 8006e64:	20000bdc 	.word	0x20000bdc
 8006e68:	20000c84 	.word	0x20000c84
 8006e6c:	20000148 	.word	0x20000148
 8006e70:	44bb8000 	.word	0x44bb8000
 8006e74:	20000ba8 	.word	0x20000ba8
 8006e78:	20000baa 	.word	0x20000baa
		}else{
               // pitch stabilize
				int roll_rc = 1500 - ibusChannelData[CH1];
 8006e7c:	4b8a      	ldr	r3, [pc, #552]	@ (80070a8 <attitude_ctrl+0x858>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8006e84:	3304      	adds	r3, #4
 8006e86:	613b      	str	r3, [r7, #16]

				servoL = 1500 +  roll_rc*0.5 + pitch_pid_smooth;
 8006e88:	6938      	ldr	r0, [r7, #16]
 8006e8a:	f7f9 fb23 	bl	80004d4 <__aeabi_i2d>
 8006e8e:	f04f 0200 	mov.w	r2, #0
 8006e92:	4b86      	ldr	r3, [pc, #536]	@ (80070ac <attitude_ctrl+0x85c>)
 8006e94:	f7f9 fb88 	bl	80005a8 <__aeabi_dmul>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	a37d      	add	r3, pc, #500	@ (adr r3, 8007098 <attitude_ctrl+0x848>)
 8006ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea6:	f7f9 f9c9 	bl	800023c <__adddf3>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	4614      	mov	r4, r2
 8006eb0:	461d      	mov	r5, r3
 8006eb2:	4b7f      	ldr	r3, [pc, #508]	@ (80070b0 <attitude_ctrl+0x860>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7f9 fb1e 	bl	80004f8 <__aeabi_f2d>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	f7f9 f9ba 	bl	800023c <__adddf3>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	4610      	mov	r0, r2
 8006ece:	4619      	mov	r1, r3
 8006ed0:	f7f9 fe42 	bl	8000b58 <__aeabi_d2uiz>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	4b76      	ldr	r3, [pc, #472]	@ (80070b4 <attitude_ctrl+0x864>)
 8006eda:	801a      	strh	r2, [r3, #0]
				servoR = 1500 -  roll_rc*0.5 + pitch_pid_smooth;
 8006edc:	6938      	ldr	r0, [r7, #16]
 8006ede:	f7f9 faf9 	bl	80004d4 <__aeabi_i2d>
 8006ee2:	f04f 0200 	mov.w	r2, #0
 8006ee6:	4b71      	ldr	r3, [pc, #452]	@ (80070ac <attitude_ctrl+0x85c>)
 8006ee8:	f7f9 fb5e 	bl	80005a8 <__aeabi_dmul>
 8006eec:	4602      	mov	r2, r0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	a169      	add	r1, pc, #420	@ (adr r1, 8007098 <attitude_ctrl+0x848>)
 8006ef2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ef6:	f7f9 f99f 	bl	8000238 <__aeabi_dsub>
 8006efa:	4602      	mov	r2, r0
 8006efc:	460b      	mov	r3, r1
 8006efe:	4614      	mov	r4, r2
 8006f00:	461d      	mov	r5, r3
 8006f02:	4b6b      	ldr	r3, [pc, #428]	@ (80070b0 <attitude_ctrl+0x860>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7f9 faf6 	bl	80004f8 <__aeabi_f2d>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4620      	mov	r0, r4
 8006f12:	4629      	mov	r1, r5
 8006f14:	f7f9 f992 	bl	800023c <__adddf3>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	4619      	mov	r1, r3
 8006f20:	f7f9 fe1a 	bl	8000b58 <__aeabi_d2uiz>
 8006f24:	4603      	mov	r3, r0
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	4b63      	ldr	r3, [pc, #396]	@ (80070b8 <attitude_ctrl+0x868>)
 8006f2a:	801a      	strh	r2, [r3, #0]
 8006f2c:	e088      	b.n	8007040 <attitude_ctrl+0x7f0>
		}
        
    }
    // manual mode
    else{
        int s1 = 1500 - ibusChannelData[CH1];
 8006f2e:	4b5e      	ldr	r3, [pc, #376]	@ (80070a8 <attitude_ctrl+0x858>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8006f36:	3304      	adds	r3, #4
 8006f38:	633b      	str	r3, [r7, #48]	@ 0x30
        int s2 = 1500 - ibusChannelData[CH2];
 8006f3a:	4b5b      	ldr	r3, [pc, #364]	@ (80070a8 <attitude_ctrl+0x858>)
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8006f42:	3304      	adds	r3, #4
 8006f44:	62fb      	str	r3, [r7, #44]	@ 0x2c

        smooth_ch1 += 0.8*(s1*0.5 - smooth_ch1);
 8006f46:	4b5d      	ldr	r3, [pc, #372]	@ (80070bc <attitude_ctrl+0x86c>)
 8006f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7f9 fac1 	bl	80004d4 <__aeabi_i2d>
 8006f52:	4604      	mov	r4, r0
 8006f54:	460d      	mov	r5, r1
 8006f56:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f58:	f7f9 fabc 	bl	80004d4 <__aeabi_i2d>
 8006f5c:	f04f 0200 	mov.w	r2, #0
 8006f60:	4b52      	ldr	r3, [pc, #328]	@ (80070ac <attitude_ctrl+0x85c>)
 8006f62:	f7f9 fb21 	bl	80005a8 <__aeabi_dmul>
 8006f66:	4602      	mov	r2, r0
 8006f68:	460b      	mov	r3, r1
 8006f6a:	4690      	mov	r8, r2
 8006f6c:	4699      	mov	r9, r3
 8006f6e:	4b53      	ldr	r3, [pc, #332]	@ (80070bc <attitude_ctrl+0x86c>)
 8006f70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7f9 faad 	bl	80004d4 <__aeabi_i2d>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	4640      	mov	r0, r8
 8006f80:	4649      	mov	r1, r9
 8006f82:	f7f9 f959 	bl	8000238 <__aeabi_dsub>
 8006f86:	4602      	mov	r2, r0
 8006f88:	460b      	mov	r3, r1
 8006f8a:	4610      	mov	r0, r2
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	a344      	add	r3, pc, #272	@ (adr r3, 80070a0 <attitude_ctrl+0x850>)
 8006f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f94:	f7f9 fb08 	bl	80005a8 <__aeabi_dmul>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	4629      	mov	r1, r5
 8006fa0:	f7f9 f94c 	bl	800023c <__adddf3>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	4610      	mov	r0, r2
 8006faa:	4619      	mov	r1, r3
 8006fac:	f7f9 fdac 	bl	8000b08 <__aeabi_d2iz>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	b21a      	sxth	r2, r3
 8006fb4:	4b41      	ldr	r3, [pc, #260]	@ (80070bc <attitude_ctrl+0x86c>)
 8006fb6:	801a      	strh	r2, [r3, #0]
        smooth_ch2 += 0.8*(s2 - smooth_ch2);
 8006fb8:	4b41      	ldr	r3, [pc, #260]	@ (80070c0 <attitude_ctrl+0x870>)
 8006fba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7f9 fa88 	bl	80004d4 <__aeabi_i2d>
 8006fc4:	4604      	mov	r4, r0
 8006fc6:	460d      	mov	r5, r1
 8006fc8:	4b3d      	ldr	r3, [pc, #244]	@ (80070c0 <attitude_ctrl+0x870>)
 8006fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd2:	1a9b      	subs	r3, r3, r2
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7f9 fa7d 	bl	80004d4 <__aeabi_i2d>
 8006fda:	a331      	add	r3, pc, #196	@ (adr r3, 80070a0 <attitude_ctrl+0x850>)
 8006fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe0:	f7f9 fae2 	bl	80005a8 <__aeabi_dmul>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4620      	mov	r0, r4
 8006fea:	4629      	mov	r1, r5
 8006fec:	f7f9 f926 	bl	800023c <__adddf3>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	f7f9 fd86 	bl	8000b08 <__aeabi_d2iz>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	b21a      	sxth	r2, r3
 8007000:	4b2f      	ldr	r3, [pc, #188]	@ (80070c0 <attitude_ctrl+0x870>)
 8007002:	801a      	strh	r2, [r3, #0]
            
        servoL = 1500 + smooth_ch1 + smooth_ch2;
 8007004:	4b2d      	ldr	r3, [pc, #180]	@ (80070bc <attitude_ctrl+0x86c>)
 8007006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800700a:	b29a      	uxth	r2, r3
 800700c:	4b2c      	ldr	r3, [pc, #176]	@ (80070c0 <attitude_ctrl+0x870>)
 800700e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007012:	b29b      	uxth	r3, r3
 8007014:	4413      	add	r3, r2
 8007016:	b29b      	uxth	r3, r3
 8007018:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800701c:	b29a      	uxth	r2, r3
 800701e:	4b25      	ldr	r3, [pc, #148]	@ (80070b4 <attitude_ctrl+0x864>)
 8007020:	801a      	strh	r2, [r3, #0]
        servoR = 1500 - smooth_ch1 + smooth_ch2;
 8007022:	4b27      	ldr	r3, [pc, #156]	@ (80070c0 <attitude_ctrl+0x870>)
 8007024:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007028:	b29a      	uxth	r2, r3
 800702a:	4b24      	ldr	r3, [pc, #144]	@ (80070bc <attitude_ctrl+0x86c>)
 800702c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007030:	b29b      	uxth	r3, r3
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	b29b      	uxth	r3, r3
 8007036:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800703a:	b29a      	uxth	r2, r3
 800703c:	4b1e      	ldr	r3, [pc, #120]	@ (80070b8 <attitude_ctrl+0x868>)
 800703e:	801a      	strh	r2, [r3, #0]
        
    }

    servoL = constrain(servoL,SERVO_MIN_PWM,SERVO_MAX_PWM);
 8007040:	4b1c      	ldr	r3, [pc, #112]	@ (80070b4 <attitude_ctrl+0x864>)
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8007048:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800704c:	4618      	mov	r0, r3
 800704e:	f7ff fb19 	bl	8006684 <constrain>
 8007052:	4603      	mov	r3, r0
 8007054:	b29a      	uxth	r2, r3
 8007056:	4b17      	ldr	r3, [pc, #92]	@ (80070b4 <attitude_ctrl+0x864>)
 8007058:	801a      	strh	r2, [r3, #0]
    servoR = constrain(servoR,SERVO_MIN_PWM,SERVO_MAX_PWM);
 800705a:	4b17      	ldr	r3, [pc, #92]	@ (80070b8 <attitude_ctrl+0x868>)
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8007062:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007066:	4618      	mov	r0, r3
 8007068:	f7ff fb0c 	bl	8006684 <constrain>
 800706c:	4603      	mov	r3, r0
 800706e:	b29a      	uxth	r2, r3
 8007070:	4b11      	ldr	r3, [pc, #68]	@ (80070b8 <attitude_ctrl+0x868>)
 8007072:	801a      	strh	r2, [r3, #0]
    write_pwm_ctrl(ibusChannelData[CH3],servoL,servoR);
 8007074:	4b0c      	ldr	r3, [pc, #48]	@ (80070a8 <attitude_ctrl+0x858>)
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	b29b      	uxth	r3, r3
 800707a:	4a0e      	ldr	r2, [pc, #56]	@ (80070b4 <attitude_ctrl+0x864>)
 800707c:	8811      	ldrh	r1, [r2, #0]
 800707e:	4a0e      	ldr	r2, [pc, #56]	@ (80070b8 <attitude_ctrl+0x868>)
 8007080:	8812      	ldrh	r2, [r2, #0]
 8007082:	4618      	mov	r0, r3
 8007084:	f7fd fcba 	bl	80049fc <write_pwm_ctrl>
 8007088:	e000      	b.n	800708c <attitude_ctrl+0x83c>
        return;
 800708a:	bf00      	nop

}
 800708c:	3760      	adds	r7, #96	@ 0x60
 800708e:	46bd      	mov	sp, r7
 8007090:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007094:	f3af 8000 	nop.w
 8007098:	00000000 	.word	0x00000000
 800709c:	40977000 	.word	0x40977000
 80070a0:	9999999a 	.word	0x9999999a
 80070a4:	3fe99999 	.word	0x3fe99999
 80070a8:	20000148 	.word	0x20000148
 80070ac:	3fe00000 	.word	0x3fe00000
 80070b0:	20000c84 	.word	0x20000c84
 80070b4:	20000ba8 	.word	0x20000ba8
 80070b8:	20000baa 	.word	0x20000baa
 80070bc:	20000c60 	.word	0x20000c60
 80070c0:	20000c62 	.word	0x20000c62

080070c4 <mapI>:
}


#define Feq2Sec(F) (1.0f/F)

static int32_t mapI(int val, int min_in,int max_in,int min_out, int max_out){
 80070c4:	b480      	push	{r7}
 80070c6:	b087      	sub	sp, #28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
 80070d0:	603b      	str	r3, [r7, #0]
   int out = (val - min_in)*(max_out - min_out)/(max_in - min_in);
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	6a39      	ldr	r1, [r7, #32]
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	1a8a      	subs	r2, r1, r2
 80070de:	fb03 f202 	mul.w	r2, r3, r2
 80070e2:	6879      	ldr	r1, [r7, #4]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	1acb      	subs	r3, r1, r3
 80070e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80070ec:	617b      	str	r3, [r7, #20]
}
 80070ee:	bf00      	nop
 80070f0:	4618      	mov	r0, r3
 80070f2:	371c      	adds	r7, #28
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bc80      	pop	{r7}
 80070f8:	4770      	bx	lr

080070fa <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b085      	sub	sp, #20
 80070fe:	af00      	add	r7, sp, #0
 8007100:	4603      	mov	r3, r0
 8007102:	6039      	str	r1, [r7, #0]
 8007104:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	881b      	ldrh	r3, [r3, #0]
 800710a:	b2da      	uxtb	r2, r3
 800710c:	79fb      	ldrb	r3, [r7, #7]
 800710e:	4053      	eors	r3, r2
 8007110:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8007112:	7bfb      	ldrb	r3, [r7, #15]
 8007114:	011b      	lsls	r3, r3, #4
 8007116:	b25a      	sxtb	r2, r3
 8007118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800711c:	4053      	eors	r3, r2
 800711e:	b25b      	sxtb	r3, r3
 8007120:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	881b      	ldrh	r3, [r3, #0]
 8007126:	0a1b      	lsrs	r3, r3, #8
 8007128:	b29b      	uxth	r3, r3
 800712a:	b21a      	sxth	r2, r3
 800712c:	7bfb      	ldrb	r3, [r7, #15]
 800712e:	021b      	lsls	r3, r3, #8
 8007130:	b21b      	sxth	r3, r3
 8007132:	4053      	eors	r3, r2
 8007134:	b21a      	sxth	r2, r3
 8007136:	7bfb      	ldrb	r3, [r7, #15]
 8007138:	00db      	lsls	r3, r3, #3
 800713a:	b21b      	sxth	r3, r3
 800713c:	4053      	eors	r3, r2
 800713e:	b21a      	sxth	r2, r3
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	091b      	lsrs	r3, r3, #4
 8007144:	b2db      	uxtb	r3, r3
 8007146:	b21b      	sxth	r3, r3
 8007148:	4053      	eors	r3, r2
 800714a:	b21b      	sxth	r3, r3
 800714c:	b29a      	uxth	r2, r3
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	801a      	strh	r2, [r3, #0]
}
 8007152:	bf00      	nop
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	bc80      	pop	{r7}
 800715a:	4770      	bx	lr

0800715c <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800716a:	801a      	strh	r2, [r3, #0]
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	bc80      	pop	{r7}
 8007174:	4770      	bx	lr

08007176 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b084      	sub	sp, #16
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	460b      	mov	r3, r1
 8007180:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8007182:	f107 030e 	add.w	r3, r7, #14
 8007186:	4618      	mov	r0, r3
 8007188:	f7ff ffe8 	bl	800715c <crc_init>
	while (length--) {
 800718c:	e009      	b.n	80071a2 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	1c5a      	adds	r2, r3, #1
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	f107 020e 	add.w	r2, r7, #14
 800719a:	4611      	mov	r1, r2
 800719c:	4618      	mov	r0, r3
 800719e:	f7ff ffac 	bl	80070fa <crc_accumulate>
	while (length--) {
 80071a2:	887b      	ldrh	r3, [r7, #2]
 80071a4:	1e5a      	subs	r2, r3, #1
 80071a6:	807a      	strh	r2, [r7, #2]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1f0      	bne.n	800718e <crc_calculate+0x18>
        }
        return crcTmp;
 80071ac:	89fb      	ldrh	r3, [r7, #14]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b086      	sub	sp, #24
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	60f8      	str	r0, [r7, #12]
 80071be:	60b9      	str	r1, [r7, #8]
 80071c0:	4613      	mov	r3, r2
 80071c2:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	617b      	str	r3, [r7, #20]
	while (length--) {
 80071c8:	e007      	b.n	80071da <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	1c5a      	adds	r2, r3, #1
 80071ce:	617a      	str	r2, [r7, #20]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	68f9      	ldr	r1, [r7, #12]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7ff ff90 	bl	80070fa <crc_accumulate>
	while (length--) {
 80071da:	88fb      	ldrh	r3, [r7, #6]
 80071dc:	1e5a      	subs	r2, r3, #1
 80071de:	80fa      	strh	r2, [r7, #6]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1f2      	bne.n	80071ca <crc_accumulate_buffer+0x14>
        }
}
 80071e4:	bf00      	nop
 80071e6:	bf00      	nop
 80071e8:	3718      	adds	r7, #24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
	...

080071f0 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	4603      	mov	r3, r0
 80071f8:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 80071fa:	79fa      	ldrb	r2, [r7, #7]
 80071fc:	4613      	mov	r3, r2
 80071fe:	005b      	lsls	r3, r3, #1
 8007200:	4413      	add	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	4a03      	ldr	r2, [pc, #12]	@ (8007214 <mavlink_get_channel_status+0x24>)
 8007206:	4413      	add	r3, r2
}
 8007208:	4618      	mov	r0, r3
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	bc80      	pop	{r7}
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	20000e78 	.word	0x20000e78

08007218 <mavlink_finalize_message_chan>:
						      uint8_t chan, uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						      uint8_t chan, uint8_t length)
#endif
{
 8007218:	b590      	push	{r4, r7, lr}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	4608      	mov	r0, r1
 8007222:	4611      	mov	r1, r2
 8007224:	461a      	mov	r2, r3
 8007226:	4603      	mov	r3, r0
 8007228:	70fb      	strb	r3, [r7, #3]
 800722a:	460b      	mov	r3, r1
 800722c:	70bb      	strb	r3, [r7, #2]
 800722e:	4613      	mov	r3, r2
 8007230:	707b      	strb	r3, [r7, #1]
	// This code part is the same for all messages;
	msg->magic = MAVLINK_STX;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	22fe      	movs	r2, #254	@ 0xfe
 8007236:	709a      	strb	r2, [r3, #2]
	msg->len = length;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	7e3a      	ldrb	r2, [r7, #24]
 800723c:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	78fa      	ldrb	r2, [r7, #3]
 8007242:	715a      	strb	r2, [r3, #5]
	msg->compid = component_id;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	78ba      	ldrb	r2, [r7, #2]
 8007248:	719a      	strb	r2, [r3, #6]
	// One sequence number per component
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 800724a:	787b      	ldrb	r3, [r7, #1]
 800724c:	4618      	mov	r0, r3
 800724e:	f7ff ffcf 	bl	80071f0 <mavlink_get_channel_status>
 8007252:	4603      	mov	r3, r0
 8007254:	799a      	ldrb	r2, [r3, #6]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	711a      	strb	r2, [r3, #4]
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 800725a:	787b      	ldrb	r3, [r7, #1]
 800725c:	4618      	mov	r0, r3
 800725e:	f7ff ffc7 	bl	80071f0 <mavlink_get_channel_status>
 8007262:	4603      	mov	r3, r0
 8007264:	799c      	ldrb	r4, [r3, #6]
 8007266:	787b      	ldrb	r3, [r7, #1]
 8007268:	4618      	mov	r0, r3
 800726a:	f7ff ffc1 	bl	80071f0 <mavlink_get_channel_status>
 800726e:	4603      	mov	r3, r0
 8007270:	1c62      	adds	r2, r4, #1
 8007272:	b2d2      	uxtb	r2, r2
 8007274:	719a      	strb	r2, [r3, #6]
	msg->checksum = crc_calculate(((const uint8_t*)(msg)) + 3, MAVLINK_CORE_HEADER_LEN);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	3303      	adds	r3, #3
 800727a:	2105      	movs	r1, #5
 800727c:	4618      	mov	r0, r3
 800727e:	f7ff ff7a 	bl	8007176 <crc_calculate>
 8007282:	4603      	mov	r3, r0
 8007284:	461a      	mov	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	801a      	strh	r2, [r3, #0]
	crc_accumulate_buffer(&msg->checksum, _MAV_PAYLOAD(msg), msg->len);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f103 0108 	add.w	r1, r3, #8
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	78db      	ldrb	r3, [r3, #3]
 8007296:	461a      	mov	r2, r3
 8007298:	f7ff ff8d 	bl	80071b6 <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &msg->checksum);
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	7f3b      	ldrb	r3, [r7, #28]
 80072a0:	4611      	mov	r1, r2
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7ff ff29 	bl	80070fa <crc_accumulate>
#endif
	mavlink_ck_a(msg) = (uint8_t)(msg->checksum & 0xFF);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	881b      	ldrh	r3, [r3, #0]
 80072ac:	b299      	uxth	r1, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	3308      	adds	r3, #8
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	78d2      	ldrb	r2, [r2, #3]
 80072b6:	4413      	add	r3, r2
 80072b8:	b2ca      	uxtb	r2, r1
 80072ba:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(msg->checksum >> 8);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	881b      	ldrh	r3, [r3, #0]
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	0a1b      	lsrs	r3, r3, #8
 80072c4:	b299      	uxth	r1, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f103 0208 	add.w	r2, r3, #8
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	78db      	ldrb	r3, [r3, #3]
 80072d0:	3301      	adds	r3, #1
 80072d2:	4413      	add	r3, r2
 80072d4:	b2ca      	uxtb	r2, r1
 80072d6:	701a      	strb	r2, [r3, #0]

	return length + MAVLINK_NUM_NON_PAYLOAD_BYTES;
 80072d8:	7e3b      	ldrb	r3, [r7, #24]
 80072da:	b29b      	uxth	r3, r3
 80072dc:	3308      	adds	r3, #8
 80072de:	b29b      	uxth	r3, r3
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd90      	pop	{r4, r7, pc}

080072e8 <mavlink_finalize_message>:
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
#if MAVLINK_CRC_EXTRA
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t length, uint8_t crc_extra)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af02      	add	r7, sp, #8
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	4608      	mov	r0, r1
 80072f2:	4611      	mov	r1, r2
 80072f4:	461a      	mov	r2, r3
 80072f6:	4603      	mov	r3, r0
 80072f8:	70fb      	strb	r3, [r7, #3]
 80072fa:	460b      	mov	r3, r1
 80072fc:	70bb      	strb	r3, [r7, #2]
 80072fe:	4613      	mov	r3, r2
 8007300:	707b      	strb	r3, [r7, #1]
	return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, length, crc_extra);
 8007302:	78ba      	ldrb	r2, [r7, #2]
 8007304:	78f9      	ldrb	r1, [r7, #3]
 8007306:	7c3b      	ldrb	r3, [r7, #16]
 8007308:	9301      	str	r3, [sp, #4]
 800730a:	787b      	ldrb	r3, [r7, #1]
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	2300      	movs	r3, #0
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f7ff ff81 	bl	8007218 <mavlink_finalize_message_chan>
 8007316:	4603      	mov	r3, r0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buffer, const mavlink_message_t *msg)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
	memcpy(buffer, (const uint8_t *)&msg->magic, MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	1c99      	adds	r1, r3, #2
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	78db      	ldrb	r3, [r3, #3]
 8007332:	3306      	adds	r3, #6
 8007334:	461a      	mov	r2, r3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f00d fcd6 	bl	8014ce8 <memcpy>

	uint8_t *ck = buffer + (MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	78db      	ldrb	r3, [r3, #3]
 8007340:	3306      	adds	r3, #6
 8007342:	461a      	mov	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4413      	add	r3, r2
 8007348:	60fb      	str	r3, [r7, #12]

	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	881b      	ldrh	r3, [r3, #0]
 800734e:	b29b      	uxth	r3, r3
 8007350:	b2da      	uxtb	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	b29b      	uxth	r3, r3
 800735c:	0a1b      	lsrs	r3, r3, #8
 800735e:	b29a      	uxth	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	3301      	adds	r3, #1
 8007364:	b2d2      	uxtb	r2, r2
 8007366:	701a      	strb	r2, [r3, #0]

	return MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)msg->len;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	78db      	ldrb	r3, [r3, #3]
 800736c:	3308      	adds	r3, #8
 800736e:	b29b      	uxth	r3, r3
}
 8007370:	4618      	mov	r0, r3
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <mavlink_msg_heartbeat_pack>:
 * @param system_status System status flag, see MAV_STATE ENUM
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b088      	sub	sp, #32
 800737c:	af02      	add	r7, sp, #8
 800737e:	603a      	str	r2, [r7, #0]
 8007380:	461a      	mov	r2, r3
 8007382:	4603      	mov	r3, r0
 8007384:	71fb      	strb	r3, [r7, #7]
 8007386:	460b      	mov	r3, r1
 8007388:	71bb      	strb	r3, [r7, #6]
 800738a:	4613      	mov	r3, r2
 800738c:	717b      	strb	r3, [r7, #5]
	_mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
	mavlink_heartbeat_t packet;
	packet.custom_mode = custom_mode;
 800738e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007390:	60fb      	str	r3, [r7, #12]
	packet.type = type;
 8007392:	797b      	ldrb	r3, [r7, #5]
 8007394:	743b      	strb	r3, [r7, #16]
	packet.autopilot = autopilot;
 8007396:	f897 3020 	ldrb.w	r3, [r7, #32]
 800739a:	747b      	strb	r3, [r7, #17]
	packet.base_mode = base_mode;
 800739c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80073a0:	74bb      	strb	r3, [r7, #18]
	packet.system_status = system_status;
 80073a2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80073a6:	74fb      	strb	r3, [r7, #19]
	packet.mavlink_version = 3;
 80073a8:	2303      	movs	r3, #3
 80073aa:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	3308      	adds	r3, #8
 80073b0:	f107 010c 	add.w	r1, r7, #12
 80073b4:	2209      	movs	r2, #9
 80073b6:	4618      	mov	r0, r3
 80073b8:	f00d fc96 	bl	8014ce8 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	2200      	movs	r2, #0
 80073c0:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 80073c2:	79ba      	ldrb	r2, [r7, #6]
 80073c4:	79f9      	ldrb	r1, [r7, #7]
 80073c6:	2332      	movs	r3, #50	@ 0x32
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	2309      	movs	r3, #9
 80073cc:	6838      	ldr	r0, [r7, #0]
 80073ce:	f7ff ff8b 	bl	80072e8 <mavlink_finalize_message>
 80073d2:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#endif
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <mavlink_msg_attitude_pack>:
 * @param yawspeed Yaw angular speed (rad/s)
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_attitude_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint32_t time_boot_ms, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b08e      	sub	sp, #56	@ 0x38
 80073e0:	af02      	add	r7, sp, #8
 80073e2:	60ba      	str	r2, [r7, #8]
 80073e4:	607b      	str	r3, [r7, #4]
 80073e6:	4603      	mov	r3, r0
 80073e8:	73fb      	strb	r3, [r7, #15]
 80073ea:	460b      	mov	r3, r1
 80073ec:	73bb      	strb	r3, [r7, #14]
	_mav_put_float(buf, 24, yawspeed);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_ATTITUDE_LEN);
#else
	mavlink_attitude_t packet;
	packet.time_boot_ms = time_boot_ms;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	617b      	str	r3, [r7, #20]
	packet.roll = roll;
 80073f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f4:	61bb      	str	r3, [r7, #24]
	packet.pitch = pitch;
 80073f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073f8:	61fb      	str	r3, [r7, #28]
	packet.yaw = yaw;
 80073fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073fc:	623b      	str	r3, [r7, #32]
	packet.rollspeed = rollspeed;
 80073fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007400:	627b      	str	r3, [r7, #36]	@ 0x24
	packet.pitchspeed = pitchspeed;
 8007402:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007404:	62bb      	str	r3, [r7, #40]	@ 0x28
	packet.yawspeed = yawspeed;
 8007406:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007408:	62fb      	str	r3, [r7, #44]	@ 0x2c

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_ATTITUDE_LEN);
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	3308      	adds	r3, #8
 800740e:	f107 0114 	add.w	r1, r7, #20
 8007412:	221c      	movs	r2, #28
 8007414:	4618      	mov	r0, r3
 8007416:	f00d fc67 	bl	8014ce8 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_ATTITUDE;
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	221e      	movs	r2, #30
 800741e:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_ATTITUDE_LEN, MAVLINK_MSG_ID_ATTITUDE_CRC);
 8007420:	7bba      	ldrb	r2, [r7, #14]
 8007422:	7bf9      	ldrb	r1, [r7, #15]
 8007424:	2327      	movs	r3, #39	@ 0x27
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	231c      	movs	r3, #28
 800742a:	68b8      	ldr	r0, [r7, #8]
 800742c:	f7ff ff5c 	bl	80072e8 <mavlink_finalize_message>
 8007430:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_ATTITUDE_LEN);
#endif
}
 8007432:	4618      	mov	r0, r3
 8007434:	3730      	adds	r7, #48	@ 0x30
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <mavlink_msg_rc_channels_raw_pack>:
 * @param rssi Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_rc_channels_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint32_t time_boot_ms, uint8_t port, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint8_t rssi)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b08c      	sub	sp, #48	@ 0x30
 800743e:	af02      	add	r7, sp, #8
 8007440:	60ba      	str	r2, [r7, #8]
 8007442:	607b      	str	r3, [r7, #4]
 8007444:	4603      	mov	r3, r0
 8007446:	73fb      	strb	r3, [r7, #15]
 8007448:	460b      	mov	r3, r1
 800744a:	73bb      	strb	r3, [r7, #14]
	_mav_put_uint8_t(buf, 21, rssi);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#else
	mavlink_rc_channels_raw_t packet;
	packet.time_boot_ms = time_boot_ms;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	613b      	str	r3, [r7, #16]
	packet.chan1_raw = chan1_raw;
 8007450:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007452:	82bb      	strh	r3, [r7, #20]
	packet.chan2_raw = chan2_raw;
 8007454:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007456:	82fb      	strh	r3, [r7, #22]
	packet.chan3_raw = chan3_raw;
 8007458:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800745a:	833b      	strh	r3, [r7, #24]
	packet.chan4_raw = chan4_raw;
 800745c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007460:	837b      	strh	r3, [r7, #26]
	packet.chan5_raw = chan5_raw;
 8007462:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007466:	83bb      	strh	r3, [r7, #28]
	packet.chan6_raw = chan6_raw;
 8007468:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800746c:	83fb      	strh	r3, [r7, #30]
	packet.chan7_raw = chan7_raw;
 800746e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007472:	843b      	strh	r3, [r7, #32]
	packet.chan8_raw = chan8_raw;
 8007474:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007478:	847b      	strh	r3, [r7, #34]	@ 0x22
	packet.port = port;
 800747a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800747e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	packet.rssi = rssi;
 8007482:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8007486:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	3308      	adds	r3, #8
 800748e:	f107 0110 	add.w	r1, r7, #16
 8007492:	2216      	movs	r2, #22
 8007494:	4618      	mov	r0, r3
 8007496:	f00d fc27 	bl	8014ce8 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_RC_CHANNELS_RAW;
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	2223      	movs	r2, #35	@ 0x23
 800749e:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN, MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC);
 80074a0:	7bba      	ldrb	r2, [r7, #14]
 80074a2:	7bf9      	ldrb	r1, [r7, #15]
 80074a4:	23f4      	movs	r3, #244	@ 0xf4
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	2316      	movs	r3, #22
 80074aa:	68b8      	ldr	r0, [r7, #8]
 80074ac:	f7ff ff1c 	bl	80072e8 <mavlink_finalize_message>
 80074b0:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#endif
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3728      	adds	r7, #40	@ 0x28
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <mavlink_msg_vfr_hud_pack>:
 * @param climb Current climb rate in meters/second
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_vfr_hud_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b08c      	sub	sp, #48	@ 0x30
 80074be:	af02      	add	r7, sp, #8
 80074c0:	60ba      	str	r2, [r7, #8]
 80074c2:	607b      	str	r3, [r7, #4]
 80074c4:	4603      	mov	r3, r0
 80074c6:	73fb      	strb	r3, [r7, #15]
 80074c8:	460b      	mov	r3, r1
 80074ca:	73bb      	strb	r3, [r7, #14]
	_mav_put_uint16_t(buf, 18, throttle);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_VFR_HUD_LEN);
#else
	mavlink_vfr_hud_t packet;
	packet.airspeed = airspeed;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	617b      	str	r3, [r7, #20]
	packet.groundspeed = groundspeed;
 80074d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d2:	61bb      	str	r3, [r7, #24]
	packet.alt = alt;
 80074d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074d6:	61fb      	str	r3, [r7, #28]
	packet.climb = climb;
 80074d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074da:	623b      	str	r3, [r7, #32]
	packet.heading = heading;
 80074dc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80074de:	84bb      	strh	r3, [r7, #36]	@ 0x24
	packet.throttle = throttle;
 80074e0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80074e2:	84fb      	strh	r3, [r7, #38]	@ 0x26

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_VFR_HUD_LEN);
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	3308      	adds	r3, #8
 80074e8:	f107 0114 	add.w	r1, r7, #20
 80074ec:	2214      	movs	r2, #20
 80074ee:	4618      	mov	r0, r3
 80074f0:	f00d fbfa 	bl	8014ce8 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_VFR_HUD;
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	224a      	movs	r2, #74	@ 0x4a
 80074f8:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
 80074fa:	7bba      	ldrb	r2, [r7, #14]
 80074fc:	7bf9      	ldrb	r1, [r7, #15]
 80074fe:	2314      	movs	r3, #20
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	2314      	movs	r3, #20
 8007504:	68b8      	ldr	r0, [r7, #8]
 8007506:	f7ff feef 	bl	80072e8 <mavlink_finalize_message>
 800750a:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_VFR_HUD_LEN);
#endif
}
 800750c:	4618      	mov	r0, r3
 800750e:	3728      	adds	r7, #40	@ 0x28
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <mavlinkInit>:
static int isTxcpl;
uint32_t send_time_us;

extern float v_estimate;

void mavlinkInit(uint8_t syss_id, uint8_t comm_id,UART_HandleTypeDef *uartt,uint32_t baudrate){
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	60ba      	str	r2, [r7, #8]
 800751c:	607b      	str	r3, [r7, #4]
 800751e:	4603      	mov	r3, r0
 8007520:	73fb      	strb	r3, [r7, #15]
 8007522:	460b      	mov	r3, r1
 8007524:	73bb      	strb	r3, [r7, #14]
    isTxcpl = 1;
 8007526:	4b10      	ldr	r3, [pc, #64]	@ (8007568 <mavlinkInit+0x54>)
 8007528:	2201      	movs	r2, #1
 800752a:	601a      	str	r2, [r3, #0]
    index_ =0;
 800752c:	4b0f      	ldr	r3, [pc, #60]	@ (800756c <mavlinkInit+0x58>)
 800752e:	2200      	movs	r2, #0
 8007530:	701a      	strb	r2, [r3, #0]
	sys_id  = syss_id;
 8007532:	4a0f      	ldr	r2, [pc, #60]	@ (8007570 <mavlinkInit+0x5c>)
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	7013      	strb	r3, [r2, #0]
    com_id  = comm_id;
 8007538:	4a0e      	ldr	r2, [pc, #56]	@ (8007574 <mavlinkInit+0x60>)
 800753a:	7bbb      	ldrb	r3, [r7, #14]
 800753c:	7013      	strb	r3, [r2, #0]
	uart = uartt;
 800753e:	4a0e      	ldr	r2, [pc, #56]	@ (8007578 <mavlinkInit+0x64>)
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	6013      	str	r3, [r2, #0]
    uartt->Init.BaudRate = baudrate;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(uartt);
 800754a:	68b8      	ldr	r0, [r7, #8]
 800754c:	f005 fab6 	bl	800cabc <HAL_UART_Init>
	HAL_UART_Receive_IT(uart, &data,1);
 8007550:	4b09      	ldr	r3, [pc, #36]	@ (8007578 <mavlinkInit+0x64>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2201      	movs	r2, #1
 8007556:	4909      	ldr	r1, [pc, #36]	@ (800757c <mavlinkInit+0x68>)
 8007558:	4618      	mov	r0, r3
 800755a:	f005 fb82 	bl	800cc62 <HAL_UART_Receive_IT>
}
 800755e:	bf00      	nop
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	20000e74 	.word	0x20000e74
 800756c:	20000da5 	.word	0x20000da5
 8007570:	20000da6 	.word	0x20000da6
 8007574:	20000da7 	.word	0x20000da7
 8007578:	20000da8 	.word	0x20000da8
 800757c:	20000da4 	.word	0x20000da4

08007580 <mavlink_osd>:
*   Attitude
*   GPS 
*   RC signal
*   heartbeat
*/
void mavlink_osd(){
 8007580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007582:	b093      	sub	sp, #76	@ 0x4c
 8007584:	af0a      	add	r7, sp, #40	@ 0x28
	static uint8_t count_ = 0;
	static uint8_t count2_ = 0;
	if(isTxcpl)
 8007586:	4b7c      	ldr	r3, [pc, #496]	@ (8007778 <mavlink_osd+0x1f8>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 80ef 	beq.w	800776e <mavlink_osd+0x1ee>
	{
		switch (count_)
 8007590:	4b7a      	ldr	r3, [pc, #488]	@ (800777c <mavlink_osd+0x1fc>)
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	2b02      	cmp	r3, #2
 8007596:	d071      	beq.n	800767c <mavlink_osd+0xfc>
 8007598:	2b02      	cmp	r3, #2
 800759a:	f300 80d8 	bgt.w	800774e <mavlink_osd+0x1ce>
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d002      	beq.n	80075a8 <mavlink_osd+0x28>
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d02f      	beq.n	8007606 <mavlink_osd+0x86>
 80075a6:	e0d2      	b.n	800774e <mavlink_osd+0x1ce>
		{
		// fast display
		case 0:  
			mavlink_msg_attitude_pack(sys_id,com_id,&msg,0,AHRS.roll*RAD,AHRS.pitch*RAD,0,0,0,0);
 80075a8:	4b75      	ldr	r3, [pc, #468]	@ (8007780 <mavlink_osd+0x200>)
 80075aa:	781c      	ldrb	r4, [r3, #0]
 80075ac:	4b75      	ldr	r3, [pc, #468]	@ (8007784 <mavlink_osd+0x204>)
 80075ae:	781d      	ldrb	r5, [r3, #0]
 80075b0:	4b75      	ldr	r3, [pc, #468]	@ (8007788 <mavlink_osd+0x208>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4975      	ldr	r1, [pc, #468]	@ (800778c <mavlink_osd+0x20c>)
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7f9 fbfc 	bl	8000db4 <__aeabi_fmul>
 80075bc:	4603      	mov	r3, r0
 80075be:	461e      	mov	r6, r3
 80075c0:	4b71      	ldr	r3, [pc, #452]	@ (8007788 <mavlink_osd+0x208>)
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	4971      	ldr	r1, [pc, #452]	@ (800778c <mavlink_osd+0x20c>)
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7f9 fbf4 	bl	8000db4 <__aeabi_fmul>
 80075cc:	4603      	mov	r3, r0
 80075ce:	461a      	mov	r2, r3
 80075d0:	f04f 0300 	mov.w	r3, #0
 80075d4:	9305      	str	r3, [sp, #20]
 80075d6:	f04f 0300 	mov.w	r3, #0
 80075da:	9304      	str	r3, [sp, #16]
 80075dc:	f04f 0300 	mov.w	r3, #0
 80075e0:	9303      	str	r3, [sp, #12]
 80075e2:	f04f 0300 	mov.w	r3, #0
 80075e6:	9302      	str	r3, [sp, #8]
 80075e8:	9201      	str	r2, [sp, #4]
 80075ea:	9600      	str	r6, [sp, #0]
 80075ec:	2300      	movs	r3, #0
 80075ee:	4a68      	ldr	r2, [pc, #416]	@ (8007790 <mavlink_osd+0x210>)
 80075f0:	4629      	mov	r1, r5
 80075f2:	4620      	mov	r0, r4
 80075f4:	f7ff fef2 	bl	80073dc <mavlink_msg_attitude_pack>
			count_ ++;
 80075f8:	4b60      	ldr	r3, [pc, #384]	@ (800777c <mavlink_osd+0x1fc>)
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	3301      	adds	r3, #1
 80075fe:	b2da      	uxtb	r2, r3
 8007600:	4b5e      	ldr	r3, [pc, #376]	@ (800777c <mavlink_osd+0x1fc>)
 8007602:	701a      	strb	r2, [r3, #0]
			break;
 8007604:	e0a3      	b.n	800774e <mavlink_osd+0x1ce>
		case 1:  
			float airspeed = 314;    // osd in km/h
 8007606:	4b63      	ldr	r3, [pc, #396]	@ (8007794 <mavlink_osd+0x214>)
 8007608:	61bb      	str	r3, [r7, #24]
			float groundspeed = 57;  // osd in km/h
 800760a:	4b63      	ldr	r3, [pc, #396]	@ (8007798 <mavlink_osd+0x218>)
 800760c:	617b      	str	r3, [r7, #20]
			uint16_t throttle = (ibusChannelData[CH3] - 1000)*0.1f;
 800760e:	4b63      	ldr	r3, [pc, #396]	@ (800779c <mavlink_osd+0x21c>)
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8007616:	4618      	mov	r0, r3
 8007618:	f7f9 fb74 	bl	8000d04 <__aeabi_ui2f>
 800761c:	4603      	mov	r3, r0
 800761e:	4960      	ldr	r1, [pc, #384]	@ (80077a0 <mavlink_osd+0x220>)
 8007620:	4618      	mov	r0, r3
 8007622:	f7f9 fbc7 	bl	8000db4 <__aeabi_fmul>
 8007626:	4603      	mov	r3, r0
 8007628:	4618      	mov	r0, r3
 800762a:	f7f9 fdc5 	bl	80011b8 <__aeabi_f2uiz>
 800762e:	4603      	mov	r3, r0
 8007630:	827b      	strh	r3, [r7, #18]
			float alt = 333;
 8007632:	4b5c      	ldr	r3, [pc, #368]	@ (80077a4 <mavlink_osd+0x224>)
 8007634:	60fb      	str	r3, [r7, #12]
			float climb = 5;
 8007636:	4b5c      	ldr	r3, [pc, #368]	@ (80077a8 <mavlink_osd+0x228>)
 8007638:	60bb      	str	r3, [r7, #8]
			mavlink_msg_vfr_hud_pack(sys_id,com_id,&msg,
 800763a:	4b51      	ldr	r3, [pc, #324]	@ (8007780 <mavlink_osd+0x200>)
 800763c:	781c      	ldrb	r4, [r3, #0]
 800763e:	4b51      	ldr	r3, [pc, #324]	@ (8007784 <mavlink_osd+0x204>)
 8007640:	781d      	ldrb	r5, [r3, #0]
						airspeed, groundspeed,AHRS.yaw, throttle,alt, climb);
 8007642:	4b51      	ldr	r3, [pc, #324]	@ (8007788 <mavlink_osd+0x208>)
 8007644:	689b      	ldr	r3, [r3, #8]
			mavlink_msg_vfr_hud_pack(sys_id,com_id,&msg,
 8007646:	4618      	mov	r0, r3
 8007648:	f7f9 fd90 	bl	800116c <__aeabi_f2iz>
 800764c:	4603      	mov	r3, r0
 800764e:	b21b      	sxth	r3, r3
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	9204      	str	r2, [sp, #16]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	9203      	str	r2, [sp, #12]
 8007658:	8a7a      	ldrh	r2, [r7, #18]
 800765a:	9202      	str	r2, [sp, #8]
 800765c:	9301      	str	r3, [sp, #4]
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	4a4a      	ldr	r2, [pc, #296]	@ (8007790 <mavlink_osd+0x210>)
 8007666:	4629      	mov	r1, r5
 8007668:	4620      	mov	r0, r4
 800766a:	f7ff ff26 	bl	80074ba <mavlink_msg_vfr_hud_pack>
			count_ ++;
 800766e:	4b43      	ldr	r3, [pc, #268]	@ (800777c <mavlink_osd+0x1fc>)
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	3301      	adds	r3, #1
 8007674:	b2da      	uxtb	r2, r3
 8007676:	4b41      	ldr	r3, [pc, #260]	@ (800777c <mavlink_osd+0x1fc>)
 8007678:	701a      	strb	r2, [r3, #0]
			break;
 800767a:	e068      	b.n	800774e <mavlink_osd+0x1ce>
		case 2:
			switch (count2_)
 800767c:	4b4b      	ldr	r3, [pc, #300]	@ (80077ac <mavlink_osd+0x22c>)
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	2b02      	cmp	r3, #2
 8007682:	d046      	beq.n	8007712 <mavlink_osd+0x192>
 8007684:	2b02      	cmp	r3, #2
 8007686:	dc5f      	bgt.n	8007748 <mavlink_osd+0x1c8>
 8007688:	2b00      	cmp	r3, #0
 800768a:	d002      	beq.n	8007692 <mavlink_osd+0x112>
 800768c:	2b01      	cmp	r3, #1
 800768e:	d007      	beq.n	80076a0 <mavlink_osd+0x120>
 8007690:	e05a      	b.n	8007748 <mavlink_osd+0x1c8>
			{
			case 0:
				//mavlink_msg_gps_raw_int_pack(sys_id,com_id,&msg,
				//						0, _gps.fix,_gps.position[0],_gps.position[1],1200,
				//						1 , 1 , 2200,0 ,abs(v_estimate));
				count2_ ++;
 8007692:	4b46      	ldr	r3, [pc, #280]	@ (80077ac <mavlink_osd+0x22c>)
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	3301      	adds	r3, #1
 8007698:	b2da      	uxtb	r2, r3
 800769a:	4b44      	ldr	r3, [pc, #272]	@ (80077ac <mavlink_osd+0x22c>)
 800769c:	701a      	strb	r2, [r3, #0]

				break;
 800769e:	e053      	b.n	8007748 <mavlink_osd+0x1c8>
			case 1:
			    uint8_t rssi = mapI(ibusChannelData[CH11],1000,2000,0,255);
 80076a0:	4b3e      	ldr	r3, [pc, #248]	@ (800779c <mavlink_osd+0x21c>)
 80076a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a4:	4618      	mov	r0, r3
 80076a6:	23ff      	movs	r3, #255	@ 0xff
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	2300      	movs	r3, #0
 80076ac:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80076b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80076b4:	f7ff fd06 	bl	80070c4 <mapI>
 80076b8:	4603      	mov	r3, r0
 80076ba:	773b      	strb	r3, [r7, #28]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 80076bc:	4b30      	ldr	r3, [pc, #192]	@ (8007780 <mavlink_osd+0x200>)
 80076be:	781c      	ldrb	r4, [r3, #0]
 80076c0:	4b30      	ldr	r3, [pc, #192]	@ (8007784 <mavlink_osd+0x204>)
 80076c2:	781d      	ldrb	r5, [r3, #0]
						0,0,ibusChannelData[CH4],ibusChannelData[CH7],ibusChannelData[CH8], 
 80076c4:	4b35      	ldr	r3, [pc, #212]	@ (800779c <mavlink_osd+0x21c>)
 80076c6:	68db      	ldr	r3, [r3, #12]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 80076c8:	b29b      	uxth	r3, r3
						0,0,ibusChannelData[CH4],ibusChannelData[CH7],ibusChannelData[CH8], 
 80076ca:	4a34      	ldr	r2, [pc, #208]	@ (800779c <mavlink_osd+0x21c>)
 80076cc:	6992      	ldr	r2, [r2, #24]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 80076ce:	b292      	uxth	r2, r2
						0,0,ibusChannelData[CH4],ibusChannelData[CH7],ibusChannelData[CH8], 
 80076d0:	4932      	ldr	r1, [pc, #200]	@ (800779c <mavlink_osd+0x21c>)
 80076d2:	69c9      	ldr	r1, [r1, #28]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 80076d4:	b289      	uxth	r1, r1
 80076d6:	7f38      	ldrb	r0, [r7, #28]
 80076d8:	9009      	str	r0, [sp, #36]	@ 0x24
 80076da:	2000      	movs	r0, #0
 80076dc:	9008      	str	r0, [sp, #32]
 80076de:	2000      	movs	r0, #0
 80076e0:	9007      	str	r0, [sp, #28]
 80076e2:	2000      	movs	r0, #0
 80076e4:	9006      	str	r0, [sp, #24]
 80076e6:	2000      	movs	r0, #0
 80076e8:	9005      	str	r0, [sp, #20]
 80076ea:	2000      	movs	r0, #0
 80076ec:	9004      	str	r0, [sp, #16]
 80076ee:	9103      	str	r1, [sp, #12]
 80076f0:	9202      	str	r2, [sp, #8]
 80076f2:	9301      	str	r3, [sp, #4]
 80076f4:	2300      	movs	r3, #0
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	2300      	movs	r3, #0
 80076fa:	4a25      	ldr	r2, [pc, #148]	@ (8007790 <mavlink_osd+0x210>)
 80076fc:	4629      	mov	r1, r5
 80076fe:	4620      	mov	r0, r4
 8007700:	f7ff fe9b 	bl	800743a <mavlink_msg_rc_channels_raw_pack>
						0,0,0,
						0,0,rssi);
				count2_ ++;
 8007704:	4b29      	ldr	r3, [pc, #164]	@ (80077ac <mavlink_osd+0x22c>)
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	3301      	adds	r3, #1
 800770a:	b2da      	uxtb	r2, r3
 800770c:	4b27      	ldr	r3, [pc, #156]	@ (80077ac <mavlink_osd+0x22c>)
 800770e:	701a      	strb	r2, [r3, #0]
				break;
 8007710:	e01a      	b.n	8007748 <mavlink_osd+0x1c8>
			case 2: // send heartbeat
				uint8_t type = MAV_TYPE_FIXED_WING;
 8007712:	2301      	movs	r3, #1
 8007714:	77fb      	strb	r3, [r7, #31]
				uint8_t autopilot = MAV_AUTOPILOT_GENERIC;
 8007716:	2300      	movs	r3, #0
 8007718:	77bb      	strb	r3, [r7, #30]
				uint8_t base_mode = MAV_MODE_FLAG_TEST_ENABLED;
 800771a:	2302      	movs	r3, #2
 800771c:	777b      	strb	r3, [r7, #29]
				mavlink_msg_heartbeat_pack(sys_id,com_id,&msg,type,autopilot,base_mode,base_mode, MAV_STATE_UNINIT);
 800771e:	4b18      	ldr	r3, [pc, #96]	@ (8007780 <mavlink_osd+0x200>)
 8007720:	7818      	ldrb	r0, [r3, #0]
 8007722:	4b18      	ldr	r3, [pc, #96]	@ (8007784 <mavlink_osd+0x204>)
 8007724:	7819      	ldrb	r1, [r3, #0]
 8007726:	7f7b      	ldrb	r3, [r7, #29]
 8007728:	7ffa      	ldrb	r2, [r7, #31]
 800772a:	2400      	movs	r4, #0
 800772c:	9403      	str	r4, [sp, #12]
 800772e:	9302      	str	r3, [sp, #8]
 8007730:	7f7b      	ldrb	r3, [r7, #29]
 8007732:	9301      	str	r3, [sp, #4]
 8007734:	7fbb      	ldrb	r3, [r7, #30]
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	4613      	mov	r3, r2
 800773a:	4a15      	ldr	r2, [pc, #84]	@ (8007790 <mavlink_osd+0x210>)
 800773c:	f7ff fe1c 	bl	8007378 <mavlink_msg_heartbeat_pack>
				count2_ = 0;
 8007740:	4b1a      	ldr	r3, [pc, #104]	@ (80077ac <mavlink_osd+0x22c>)
 8007742:	2200      	movs	r2, #0
 8007744:	701a      	strb	r2, [r3, #0]
				break;
 8007746:	bf00      	nop
				                                     0,q,0,0,0,thrust);
		        count2_ = 0;
				break;
			*/
			}
			count_ = 0;
 8007748:	4b0c      	ldr	r3, [pc, #48]	@ (800777c <mavlink_osd+0x1fc>)
 800774a:	2200      	movs	r2, #0
 800774c:	701a      	strb	r2, [r3, #0]
		}
		uint16_t len_data = mavlink_msg_to_send_buffer(buffer__,&msg);
 800774e:	4910      	ldr	r1, [pc, #64]	@ (8007790 <mavlink_osd+0x210>)
 8007750:	4817      	ldr	r0, [pc, #92]	@ (80077b0 <mavlink_osd+0x230>)
 8007752:	f7ff fde5 	bl	8007320 <mavlink_msg_to_send_buffer>
 8007756:	4603      	mov	r3, r0
 8007758:	80fb      	strh	r3, [r7, #6]
	    HAL_UART_Transmit_DMA(uart,buffer__,len_data);
 800775a:	4b16      	ldr	r3, [pc, #88]	@ (80077b4 <mavlink_osd+0x234>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	88fa      	ldrh	r2, [r7, #6]
 8007760:	4913      	ldr	r1, [pc, #76]	@ (80077b0 <mavlink_osd+0x230>)
 8007762:	4618      	mov	r0, r3
 8007764:	f005 faa2 	bl	800ccac <HAL_UART_Transmit_DMA>
	    isTxcpl = 0;
 8007768:	4b03      	ldr	r3, [pc, #12]	@ (8007778 <mavlink_osd+0x1f8>)
 800776a:	2200      	movs	r2, #0
 800776c:	601a      	str	r2, [r3, #0]
	}
}
 800776e:	bf00      	nop
 8007770:	3724      	adds	r7, #36	@ 0x24
 8007772:	46bd      	mov	sp, r7
 8007774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007776:	bf00      	nop
 8007778:	20000e74 	.word	0x20000e74
 800777c:	20000ea8 	.word	0x20000ea8
 8007780:	20000da6 	.word	0x20000da6
 8007784:	20000da7 	.word	0x20000da7
 8007788:	2000055c 	.word	0x2000055c
 800778c:	3c8efa35 	.word	0x3c8efa35
 8007790:	20000c94 	.word	0x20000c94
 8007794:	439d0000 	.word	0x439d0000
 8007798:	42640000 	.word	0x42640000
 800779c:	20000148 	.word	0x20000148
 80077a0:	3dcccccd 	.word	0x3dcccccd
 80077a4:	43a68000 	.word	0x43a68000
 80077a8:	40a00000 	.word	0x40a00000
 80077ac:	20000ea9 	.word	0x20000ea9
 80077b0:	20000dac 	.word	0x20000dac
 80077b4:	20000da8 	.word	0x20000da8

080077b8 <mavlink_tx_cpl_callback>:
/*
 * 
 */
uint32_t temp;
void mavlink_tx_cpl_callback()
{   
 80077b8:	b480      	push	{r7}
 80077ba:	af00      	add	r7, sp, #0
	//send_time_us = millis() - temp;
	//temp = millis();
	isTxcpl = 1;
 80077bc:	4b03      	ldr	r3, [pc, #12]	@ (80077cc <mavlink_tx_cpl_callback+0x14>)
 80077be:	2201      	movs	r2, #1
 80077c0:	601a      	str	r2, [r3, #0]
}
 80077c2:	bf00      	nop
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bc80      	pop	{r7}
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	20000e74 	.word	0x20000e74

080077d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80077d4:	4b08      	ldr	r3, [pc, #32]	@ (80077f8 <HAL_Init+0x28>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a07      	ldr	r2, [pc, #28]	@ (80077f8 <HAL_Init+0x28>)
 80077da:	f043 0310 	orr.w	r3, r3, #16
 80077de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80077e0:	2003      	movs	r0, #3
 80077e2:	f000 f8f5 	bl	80079d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80077e6:	200f      	movs	r0, #15
 80077e8:	f7fe f8fe 	bl	80059e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80077ec:	f7fe f8c4 	bl	8005978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	40022000 	.word	0x40022000

080077fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80077fc:	b480      	push	{r7}
 80077fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007800:	4b05      	ldr	r3, [pc, #20]	@ (8007818 <HAL_IncTick+0x1c>)
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	461a      	mov	r2, r3
 8007806:	4b05      	ldr	r3, [pc, #20]	@ (800781c <HAL_IncTick+0x20>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4413      	add	r3, r2
 800780c:	4a03      	ldr	r2, [pc, #12]	@ (800781c <HAL_IncTick+0x20>)
 800780e:	6013      	str	r3, [r2, #0]
}
 8007810:	bf00      	nop
 8007812:	46bd      	mov	sp, r7
 8007814:	bc80      	pop	{r7}
 8007816:	4770      	bx	lr
 8007818:	2000006c 	.word	0x2000006c
 800781c:	20000eac 	.word	0x20000eac

08007820 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007820:	b480      	push	{r7}
 8007822:	af00      	add	r7, sp, #0
  return uwTick;
 8007824:	4b02      	ldr	r3, [pc, #8]	@ (8007830 <HAL_GetTick+0x10>)
 8007826:	681b      	ldr	r3, [r3, #0]
}
 8007828:	4618      	mov	r0, r3
 800782a:	46bd      	mov	sp, r7
 800782c:	bc80      	pop	{r7}
 800782e:	4770      	bx	lr
 8007830:	20000eac 	.word	0x20000eac

08007834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800783c:	f7ff fff0 	bl	8007820 <HAL_GetTick>
 8007840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784c:	d005      	beq.n	800785a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800784e:	4b0a      	ldr	r3, [pc, #40]	@ (8007878 <HAL_Delay+0x44>)
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	461a      	mov	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	4413      	add	r3, r2
 8007858:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800785a:	bf00      	nop
 800785c:	f7ff ffe0 	bl	8007820 <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	429a      	cmp	r2, r3
 800786a:	d8f7      	bhi.n	800785c <HAL_Delay+0x28>
  {
  }
}
 800786c:	bf00      	nop
 800786e:	bf00      	nop
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	2000006c 	.word	0x2000006c

0800787c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f003 0307 	and.w	r3, r3, #7
 800788a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800788c:	4b0c      	ldr	r3, [pc, #48]	@ (80078c0 <__NVIC_SetPriorityGrouping+0x44>)
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007898:	4013      	ands	r3, r2
 800789a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80078a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80078a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80078ae:	4a04      	ldr	r2, [pc, #16]	@ (80078c0 <__NVIC_SetPriorityGrouping+0x44>)
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	60d3      	str	r3, [r2, #12]
}
 80078b4:	bf00      	nop
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bc80      	pop	{r7}
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	e000ed00 	.word	0xe000ed00

080078c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80078c4:	b480      	push	{r7}
 80078c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80078c8:	4b04      	ldr	r3, [pc, #16]	@ (80078dc <__NVIC_GetPriorityGrouping+0x18>)
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	0a1b      	lsrs	r3, r3, #8
 80078ce:	f003 0307 	and.w	r3, r3, #7
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bc80      	pop	{r7}
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	e000ed00 	.word	0xe000ed00

080078e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	4603      	mov	r3, r0
 80078e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	db0b      	blt.n	800790a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078f2:	79fb      	ldrb	r3, [r7, #7]
 80078f4:	f003 021f 	and.w	r2, r3, #31
 80078f8:	4906      	ldr	r1, [pc, #24]	@ (8007914 <__NVIC_EnableIRQ+0x34>)
 80078fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078fe:	095b      	lsrs	r3, r3, #5
 8007900:	2001      	movs	r0, #1
 8007902:	fa00 f202 	lsl.w	r2, r0, r2
 8007906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800790a:	bf00      	nop
 800790c:	370c      	adds	r7, #12
 800790e:	46bd      	mov	sp, r7
 8007910:	bc80      	pop	{r7}
 8007912:	4770      	bx	lr
 8007914:	e000e100 	.word	0xe000e100

08007918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	4603      	mov	r3, r0
 8007920:	6039      	str	r1, [r7, #0]
 8007922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007928:	2b00      	cmp	r3, #0
 800792a:	db0a      	blt.n	8007942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	b2da      	uxtb	r2, r3
 8007930:	490c      	ldr	r1, [pc, #48]	@ (8007964 <__NVIC_SetPriority+0x4c>)
 8007932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007936:	0112      	lsls	r2, r2, #4
 8007938:	b2d2      	uxtb	r2, r2
 800793a:	440b      	add	r3, r1
 800793c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007940:	e00a      	b.n	8007958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	b2da      	uxtb	r2, r3
 8007946:	4908      	ldr	r1, [pc, #32]	@ (8007968 <__NVIC_SetPriority+0x50>)
 8007948:	79fb      	ldrb	r3, [r7, #7]
 800794a:	f003 030f 	and.w	r3, r3, #15
 800794e:	3b04      	subs	r3, #4
 8007950:	0112      	lsls	r2, r2, #4
 8007952:	b2d2      	uxtb	r2, r2
 8007954:	440b      	add	r3, r1
 8007956:	761a      	strb	r2, [r3, #24]
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	bc80      	pop	{r7}
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	e000e100 	.word	0xe000e100
 8007968:	e000ed00 	.word	0xe000ed00

0800796c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800796c:	b480      	push	{r7}
 800796e:	b089      	sub	sp, #36	@ 0x24
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f003 0307 	and.w	r3, r3, #7
 800797e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	f1c3 0307 	rsb	r3, r3, #7
 8007986:	2b04      	cmp	r3, #4
 8007988:	bf28      	it	cs
 800798a:	2304      	movcs	r3, #4
 800798c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	3304      	adds	r3, #4
 8007992:	2b06      	cmp	r3, #6
 8007994:	d902      	bls.n	800799c <NVIC_EncodePriority+0x30>
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	3b03      	subs	r3, #3
 800799a:	e000      	b.n	800799e <NVIC_EncodePriority+0x32>
 800799c:	2300      	movs	r3, #0
 800799e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079a0:	f04f 32ff 	mov.w	r2, #4294967295
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	fa02 f303 	lsl.w	r3, r2, r3
 80079aa:	43da      	mvns	r2, r3
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	401a      	ands	r2, r3
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80079b4:	f04f 31ff 	mov.w	r1, #4294967295
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	fa01 f303 	lsl.w	r3, r1, r3
 80079be:	43d9      	mvns	r1, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079c4:	4313      	orrs	r3, r2
         );
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3724      	adds	r7, #36	@ 0x24
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bc80      	pop	{r7}
 80079ce:	4770      	bx	lr

080079d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f7ff ff4f 	bl	800787c <__NVIC_SetPriorityGrouping>
}
 80079de:	bf00      	nop
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b086      	sub	sp, #24
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	4603      	mov	r3, r0
 80079ee:	60b9      	str	r1, [r7, #8]
 80079f0:	607a      	str	r2, [r7, #4]
 80079f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80079f4:	2300      	movs	r3, #0
 80079f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80079f8:	f7ff ff64 	bl	80078c4 <__NVIC_GetPriorityGrouping>
 80079fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	68b9      	ldr	r1, [r7, #8]
 8007a02:	6978      	ldr	r0, [r7, #20]
 8007a04:	f7ff ffb2 	bl	800796c <NVIC_EncodePriority>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a0e:	4611      	mov	r1, r2
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7ff ff81 	bl	8007918 <__NVIC_SetPriority>
}
 8007a16:	bf00      	nop
 8007a18:	3718      	adds	r7, #24
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b082      	sub	sp, #8
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	4603      	mov	r3, r0
 8007a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7ff ff57 	bl	80078e0 <__NVIC_EnableIRQ>
}
 8007a32:	bf00      	nop
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
	...

08007a3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007a44:	2300      	movs	r3, #0
 8007a46:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d101      	bne.n	8007a52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e059      	b.n	8007b06 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	461a      	mov	r2, r3
 8007a58:	4b2d      	ldr	r3, [pc, #180]	@ (8007b10 <HAL_DMA_Init+0xd4>)
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d80f      	bhi.n	8007a7e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	461a      	mov	r2, r3
 8007a64:	4b2b      	ldr	r3, [pc, #172]	@ (8007b14 <HAL_DMA_Init+0xd8>)
 8007a66:	4413      	add	r3, r2
 8007a68:	4a2b      	ldr	r2, [pc, #172]	@ (8007b18 <HAL_DMA_Init+0xdc>)
 8007a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a6e:	091b      	lsrs	r3, r3, #4
 8007a70:	009a      	lsls	r2, r3, #2
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a28      	ldr	r2, [pc, #160]	@ (8007b1c <HAL_DMA_Init+0xe0>)
 8007a7a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007a7c:	e00e      	b.n	8007a9c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	461a      	mov	r2, r3
 8007a84:	4b26      	ldr	r3, [pc, #152]	@ (8007b20 <HAL_DMA_Init+0xe4>)
 8007a86:	4413      	add	r3, r2
 8007a88:	4a23      	ldr	r2, [pc, #140]	@ (8007b18 <HAL_DMA_Init+0xdc>)
 8007a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a8e:	091b      	lsrs	r3, r3, #4
 8007a90:	009a      	lsls	r2, r3, #2
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a22      	ldr	r2, [pc, #136]	@ (8007b24 <HAL_DMA_Init+0xe8>)
 8007a9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2202      	movs	r2, #2
 8007aa0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8007ab2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8007ab6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8007ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ad8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bc80      	pop	{r7}
 8007b0e:	4770      	bx	lr
 8007b10:	40020407 	.word	0x40020407
 8007b14:	bffdfff8 	.word	0xbffdfff8
 8007b18:	cccccccd 	.word	0xcccccccd
 8007b1c:	40020000 	.word	0x40020000
 8007b20:	bffdfbf8 	.word	0xbffdfbf8
 8007b24:	40020400 	.word	0x40020400

08007b28 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
 8007b34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d101      	bne.n	8007b48 <HAL_DMA_Start_IT+0x20>
 8007b44:	2302      	movs	r3, #2
 8007b46:	e04b      	b.n	8007be0 <HAL_DMA_Start_IT+0xb8>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d13a      	bne.n	8007bd2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f022 0201 	bic.w	r2, r2, #1
 8007b78:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	68b9      	ldr	r1, [r7, #8]
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f000 fbb1 	bl	80082e8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d008      	beq.n	8007ba0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f042 020e 	orr.w	r2, r2, #14
 8007b9c:	601a      	str	r2, [r3, #0]
 8007b9e:	e00f      	b.n	8007bc0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f022 0204 	bic.w	r2, r2, #4
 8007bae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f042 020a 	orr.w	r2, r2, #10
 8007bbe:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f042 0201 	orr.w	r2, r2, #1
 8007bce:	601a      	str	r2, [r3, #0]
 8007bd0:	e005      	b.n	8007bde <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8007bda:	2302      	movs	r3, #2
 8007bdc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8007bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3718      	adds	r7, #24
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d008      	beq.n	8007c12 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2204      	movs	r2, #4
 8007c04:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e020      	b.n	8007c54 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f022 020e 	bic.w	r2, r2, #14
 8007c20:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f022 0201 	bic.w	r2, r2, #1
 8007c30:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c3a:	2101      	movs	r1, #1
 8007c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8007c40:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bc80      	pop	{r7}
 8007c5c:	4770      	bx	lr
	...

08007c60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d005      	beq.n	8007c84 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2204      	movs	r2, #4
 8007c7c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	73fb      	strb	r3, [r7, #15]
 8007c82:	e0d6      	b.n	8007e32 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f022 020e 	bic.w	r2, r2, #14
 8007c92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0201 	bic.w	r2, r2, #1
 8007ca2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	461a      	mov	r2, r3
 8007caa:	4b64      	ldr	r3, [pc, #400]	@ (8007e3c <HAL_DMA_Abort_IT+0x1dc>)
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d958      	bls.n	8007d62 <HAL_DMA_Abort_IT+0x102>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a62      	ldr	r2, [pc, #392]	@ (8007e40 <HAL_DMA_Abort_IT+0x1e0>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d04f      	beq.n	8007d5a <HAL_DMA_Abort_IT+0xfa>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a61      	ldr	r2, [pc, #388]	@ (8007e44 <HAL_DMA_Abort_IT+0x1e4>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d048      	beq.n	8007d56 <HAL_DMA_Abort_IT+0xf6>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a5f      	ldr	r2, [pc, #380]	@ (8007e48 <HAL_DMA_Abort_IT+0x1e8>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d040      	beq.n	8007d50 <HAL_DMA_Abort_IT+0xf0>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a5e      	ldr	r2, [pc, #376]	@ (8007e4c <HAL_DMA_Abort_IT+0x1ec>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d038      	beq.n	8007d4a <HAL_DMA_Abort_IT+0xea>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a5c      	ldr	r2, [pc, #368]	@ (8007e50 <HAL_DMA_Abort_IT+0x1f0>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d030      	beq.n	8007d44 <HAL_DMA_Abort_IT+0xe4>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a5b      	ldr	r2, [pc, #364]	@ (8007e54 <HAL_DMA_Abort_IT+0x1f4>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d028      	beq.n	8007d3e <HAL_DMA_Abort_IT+0xde>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a52      	ldr	r2, [pc, #328]	@ (8007e3c <HAL_DMA_Abort_IT+0x1dc>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d020      	beq.n	8007d38 <HAL_DMA_Abort_IT+0xd8>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a57      	ldr	r2, [pc, #348]	@ (8007e58 <HAL_DMA_Abort_IT+0x1f8>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d019      	beq.n	8007d34 <HAL_DMA_Abort_IT+0xd4>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a55      	ldr	r2, [pc, #340]	@ (8007e5c <HAL_DMA_Abort_IT+0x1fc>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d012      	beq.n	8007d30 <HAL_DMA_Abort_IT+0xd0>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a54      	ldr	r2, [pc, #336]	@ (8007e60 <HAL_DMA_Abort_IT+0x200>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d00a      	beq.n	8007d2a <HAL_DMA_Abort_IT+0xca>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a52      	ldr	r2, [pc, #328]	@ (8007e64 <HAL_DMA_Abort_IT+0x204>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d102      	bne.n	8007d24 <HAL_DMA_Abort_IT+0xc4>
 8007d1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007d22:	e01b      	b.n	8007d5c <HAL_DMA_Abort_IT+0xfc>
 8007d24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007d28:	e018      	b.n	8007d5c <HAL_DMA_Abort_IT+0xfc>
 8007d2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007d2e:	e015      	b.n	8007d5c <HAL_DMA_Abort_IT+0xfc>
 8007d30:	2310      	movs	r3, #16
 8007d32:	e013      	b.n	8007d5c <HAL_DMA_Abort_IT+0xfc>
 8007d34:	2301      	movs	r3, #1
 8007d36:	e011      	b.n	8007d5c <HAL_DMA_Abort_IT+0xfc>
 8007d38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007d3c:	e00e      	b.n	8007d5c <HAL_DMA_Abort_IT+0xfc>
 8007d3e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007d42:	e00b      	b.n	8007d5c <HAL_DMA_Abort_IT+0xfc>
 8007d44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007d48:	e008      	b.n	8007d5c <HAL_DMA_Abort_IT+0xfc>
 8007d4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007d4e:	e005      	b.n	8007d5c <HAL_DMA_Abort_IT+0xfc>
 8007d50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007d54:	e002      	b.n	8007d5c <HAL_DMA_Abort_IT+0xfc>
 8007d56:	2310      	movs	r3, #16
 8007d58:	e000      	b.n	8007d5c <HAL_DMA_Abort_IT+0xfc>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	4a42      	ldr	r2, [pc, #264]	@ (8007e68 <HAL_DMA_Abort_IT+0x208>)
 8007d5e:	6053      	str	r3, [r2, #4]
 8007d60:	e057      	b.n	8007e12 <HAL_DMA_Abort_IT+0x1b2>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a36      	ldr	r2, [pc, #216]	@ (8007e40 <HAL_DMA_Abort_IT+0x1e0>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d04f      	beq.n	8007e0c <HAL_DMA_Abort_IT+0x1ac>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a34      	ldr	r2, [pc, #208]	@ (8007e44 <HAL_DMA_Abort_IT+0x1e4>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d048      	beq.n	8007e08 <HAL_DMA_Abort_IT+0x1a8>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a33      	ldr	r2, [pc, #204]	@ (8007e48 <HAL_DMA_Abort_IT+0x1e8>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d040      	beq.n	8007e02 <HAL_DMA_Abort_IT+0x1a2>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a31      	ldr	r2, [pc, #196]	@ (8007e4c <HAL_DMA_Abort_IT+0x1ec>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d038      	beq.n	8007dfc <HAL_DMA_Abort_IT+0x19c>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a30      	ldr	r2, [pc, #192]	@ (8007e50 <HAL_DMA_Abort_IT+0x1f0>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d030      	beq.n	8007df6 <HAL_DMA_Abort_IT+0x196>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a2e      	ldr	r2, [pc, #184]	@ (8007e54 <HAL_DMA_Abort_IT+0x1f4>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d028      	beq.n	8007df0 <HAL_DMA_Abort_IT+0x190>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a26      	ldr	r2, [pc, #152]	@ (8007e3c <HAL_DMA_Abort_IT+0x1dc>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d020      	beq.n	8007dea <HAL_DMA_Abort_IT+0x18a>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a2a      	ldr	r2, [pc, #168]	@ (8007e58 <HAL_DMA_Abort_IT+0x1f8>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d019      	beq.n	8007de6 <HAL_DMA_Abort_IT+0x186>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a29      	ldr	r2, [pc, #164]	@ (8007e5c <HAL_DMA_Abort_IT+0x1fc>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d012      	beq.n	8007de2 <HAL_DMA_Abort_IT+0x182>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a27      	ldr	r2, [pc, #156]	@ (8007e60 <HAL_DMA_Abort_IT+0x200>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d00a      	beq.n	8007ddc <HAL_DMA_Abort_IT+0x17c>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a26      	ldr	r2, [pc, #152]	@ (8007e64 <HAL_DMA_Abort_IT+0x204>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d102      	bne.n	8007dd6 <HAL_DMA_Abort_IT+0x176>
 8007dd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007dd4:	e01b      	b.n	8007e0e <HAL_DMA_Abort_IT+0x1ae>
 8007dd6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007dda:	e018      	b.n	8007e0e <HAL_DMA_Abort_IT+0x1ae>
 8007ddc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007de0:	e015      	b.n	8007e0e <HAL_DMA_Abort_IT+0x1ae>
 8007de2:	2310      	movs	r3, #16
 8007de4:	e013      	b.n	8007e0e <HAL_DMA_Abort_IT+0x1ae>
 8007de6:	2301      	movs	r3, #1
 8007de8:	e011      	b.n	8007e0e <HAL_DMA_Abort_IT+0x1ae>
 8007dea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007dee:	e00e      	b.n	8007e0e <HAL_DMA_Abort_IT+0x1ae>
 8007df0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007df4:	e00b      	b.n	8007e0e <HAL_DMA_Abort_IT+0x1ae>
 8007df6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007dfa:	e008      	b.n	8007e0e <HAL_DMA_Abort_IT+0x1ae>
 8007dfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007e00:	e005      	b.n	8007e0e <HAL_DMA_Abort_IT+0x1ae>
 8007e02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007e06:	e002      	b.n	8007e0e <HAL_DMA_Abort_IT+0x1ae>
 8007e08:	2310      	movs	r3, #16
 8007e0a:	e000      	b.n	8007e0e <HAL_DMA_Abort_IT+0x1ae>
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	4a17      	ldr	r2, [pc, #92]	@ (8007e6c <HAL_DMA_Abort_IT+0x20c>)
 8007e10:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d003      	beq.n	8007e32 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	4798      	blx	r3
    } 
  }
  return status;
 8007e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	40020080 	.word	0x40020080
 8007e40:	40020008 	.word	0x40020008
 8007e44:	4002001c 	.word	0x4002001c
 8007e48:	40020030 	.word	0x40020030
 8007e4c:	40020044 	.word	0x40020044
 8007e50:	40020058 	.word	0x40020058
 8007e54:	4002006c 	.word	0x4002006c
 8007e58:	40020408 	.word	0x40020408
 8007e5c:	4002041c 	.word	0x4002041c
 8007e60:	40020430 	.word	0x40020430
 8007e64:	40020444 	.word	0x40020444
 8007e68:	40020400 	.word	0x40020400
 8007e6c:	40020000 	.word	0x40020000

08007e70 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e8c:	2204      	movs	r2, #4
 8007e8e:	409a      	lsls	r2, r3
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4013      	ands	r3, r2
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 80f1 	beq.w	800807c <HAL_DMA_IRQHandler+0x20c>
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	f003 0304 	and.w	r3, r3, #4
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f000 80eb 	beq.w	800807c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0320 	and.w	r3, r3, #32
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d107      	bne.n	8007ec4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f022 0204 	bic.w	r2, r2, #4
 8007ec2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	4b5f      	ldr	r3, [pc, #380]	@ (8008048 <HAL_DMA_IRQHandler+0x1d8>)
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d958      	bls.n	8007f82 <HAL_DMA_IRQHandler+0x112>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a5d      	ldr	r2, [pc, #372]	@ (800804c <HAL_DMA_IRQHandler+0x1dc>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d04f      	beq.n	8007f7a <HAL_DMA_IRQHandler+0x10a>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a5c      	ldr	r2, [pc, #368]	@ (8008050 <HAL_DMA_IRQHandler+0x1e0>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d048      	beq.n	8007f76 <HAL_DMA_IRQHandler+0x106>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a5a      	ldr	r2, [pc, #360]	@ (8008054 <HAL_DMA_IRQHandler+0x1e4>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d040      	beq.n	8007f70 <HAL_DMA_IRQHandler+0x100>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a59      	ldr	r2, [pc, #356]	@ (8008058 <HAL_DMA_IRQHandler+0x1e8>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d038      	beq.n	8007f6a <HAL_DMA_IRQHandler+0xfa>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a57      	ldr	r2, [pc, #348]	@ (800805c <HAL_DMA_IRQHandler+0x1ec>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d030      	beq.n	8007f64 <HAL_DMA_IRQHandler+0xf4>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a56      	ldr	r2, [pc, #344]	@ (8008060 <HAL_DMA_IRQHandler+0x1f0>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d028      	beq.n	8007f5e <HAL_DMA_IRQHandler+0xee>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a4d      	ldr	r2, [pc, #308]	@ (8008048 <HAL_DMA_IRQHandler+0x1d8>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d020      	beq.n	8007f58 <HAL_DMA_IRQHandler+0xe8>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a52      	ldr	r2, [pc, #328]	@ (8008064 <HAL_DMA_IRQHandler+0x1f4>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d019      	beq.n	8007f54 <HAL_DMA_IRQHandler+0xe4>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a50      	ldr	r2, [pc, #320]	@ (8008068 <HAL_DMA_IRQHandler+0x1f8>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d012      	beq.n	8007f50 <HAL_DMA_IRQHandler+0xe0>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a4f      	ldr	r2, [pc, #316]	@ (800806c <HAL_DMA_IRQHandler+0x1fc>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d00a      	beq.n	8007f4a <HAL_DMA_IRQHandler+0xda>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a4d      	ldr	r2, [pc, #308]	@ (8008070 <HAL_DMA_IRQHandler+0x200>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d102      	bne.n	8007f44 <HAL_DMA_IRQHandler+0xd4>
 8007f3e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007f42:	e01b      	b.n	8007f7c <HAL_DMA_IRQHandler+0x10c>
 8007f44:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007f48:	e018      	b.n	8007f7c <HAL_DMA_IRQHandler+0x10c>
 8007f4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f4e:	e015      	b.n	8007f7c <HAL_DMA_IRQHandler+0x10c>
 8007f50:	2340      	movs	r3, #64	@ 0x40
 8007f52:	e013      	b.n	8007f7c <HAL_DMA_IRQHandler+0x10c>
 8007f54:	2304      	movs	r3, #4
 8007f56:	e011      	b.n	8007f7c <HAL_DMA_IRQHandler+0x10c>
 8007f58:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007f5c:	e00e      	b.n	8007f7c <HAL_DMA_IRQHandler+0x10c>
 8007f5e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007f62:	e00b      	b.n	8007f7c <HAL_DMA_IRQHandler+0x10c>
 8007f64:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007f68:	e008      	b.n	8007f7c <HAL_DMA_IRQHandler+0x10c>
 8007f6a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007f6e:	e005      	b.n	8007f7c <HAL_DMA_IRQHandler+0x10c>
 8007f70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f74:	e002      	b.n	8007f7c <HAL_DMA_IRQHandler+0x10c>
 8007f76:	2340      	movs	r3, #64	@ 0x40
 8007f78:	e000      	b.n	8007f7c <HAL_DMA_IRQHandler+0x10c>
 8007f7a:	2304      	movs	r3, #4
 8007f7c:	4a3d      	ldr	r2, [pc, #244]	@ (8008074 <HAL_DMA_IRQHandler+0x204>)
 8007f7e:	6053      	str	r3, [r2, #4]
 8007f80:	e057      	b.n	8008032 <HAL_DMA_IRQHandler+0x1c2>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a31      	ldr	r2, [pc, #196]	@ (800804c <HAL_DMA_IRQHandler+0x1dc>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d04f      	beq.n	800802c <HAL_DMA_IRQHandler+0x1bc>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a2f      	ldr	r2, [pc, #188]	@ (8008050 <HAL_DMA_IRQHandler+0x1e0>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d048      	beq.n	8008028 <HAL_DMA_IRQHandler+0x1b8>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a2e      	ldr	r2, [pc, #184]	@ (8008054 <HAL_DMA_IRQHandler+0x1e4>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d040      	beq.n	8008022 <HAL_DMA_IRQHandler+0x1b2>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a2c      	ldr	r2, [pc, #176]	@ (8008058 <HAL_DMA_IRQHandler+0x1e8>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d038      	beq.n	800801c <HAL_DMA_IRQHandler+0x1ac>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a2b      	ldr	r2, [pc, #172]	@ (800805c <HAL_DMA_IRQHandler+0x1ec>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d030      	beq.n	8008016 <HAL_DMA_IRQHandler+0x1a6>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a29      	ldr	r2, [pc, #164]	@ (8008060 <HAL_DMA_IRQHandler+0x1f0>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d028      	beq.n	8008010 <HAL_DMA_IRQHandler+0x1a0>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a21      	ldr	r2, [pc, #132]	@ (8008048 <HAL_DMA_IRQHandler+0x1d8>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d020      	beq.n	800800a <HAL_DMA_IRQHandler+0x19a>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a25      	ldr	r2, [pc, #148]	@ (8008064 <HAL_DMA_IRQHandler+0x1f4>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d019      	beq.n	8008006 <HAL_DMA_IRQHandler+0x196>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a24      	ldr	r2, [pc, #144]	@ (8008068 <HAL_DMA_IRQHandler+0x1f8>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d012      	beq.n	8008002 <HAL_DMA_IRQHandler+0x192>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a22      	ldr	r2, [pc, #136]	@ (800806c <HAL_DMA_IRQHandler+0x1fc>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d00a      	beq.n	8007ffc <HAL_DMA_IRQHandler+0x18c>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a21      	ldr	r2, [pc, #132]	@ (8008070 <HAL_DMA_IRQHandler+0x200>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d102      	bne.n	8007ff6 <HAL_DMA_IRQHandler+0x186>
 8007ff0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007ff4:	e01b      	b.n	800802e <HAL_DMA_IRQHandler+0x1be>
 8007ff6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007ffa:	e018      	b.n	800802e <HAL_DMA_IRQHandler+0x1be>
 8007ffc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008000:	e015      	b.n	800802e <HAL_DMA_IRQHandler+0x1be>
 8008002:	2340      	movs	r3, #64	@ 0x40
 8008004:	e013      	b.n	800802e <HAL_DMA_IRQHandler+0x1be>
 8008006:	2304      	movs	r3, #4
 8008008:	e011      	b.n	800802e <HAL_DMA_IRQHandler+0x1be>
 800800a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800800e:	e00e      	b.n	800802e <HAL_DMA_IRQHandler+0x1be>
 8008010:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008014:	e00b      	b.n	800802e <HAL_DMA_IRQHandler+0x1be>
 8008016:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800801a:	e008      	b.n	800802e <HAL_DMA_IRQHandler+0x1be>
 800801c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008020:	e005      	b.n	800802e <HAL_DMA_IRQHandler+0x1be>
 8008022:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008026:	e002      	b.n	800802e <HAL_DMA_IRQHandler+0x1be>
 8008028:	2340      	movs	r3, #64	@ 0x40
 800802a:	e000      	b.n	800802e <HAL_DMA_IRQHandler+0x1be>
 800802c:	2304      	movs	r3, #4
 800802e:	4a12      	ldr	r2, [pc, #72]	@ (8008078 <HAL_DMA_IRQHandler+0x208>)
 8008030:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008036:	2b00      	cmp	r3, #0
 8008038:	f000 8136 	beq.w	80082a8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8008044:	e130      	b.n	80082a8 <HAL_DMA_IRQHandler+0x438>
 8008046:	bf00      	nop
 8008048:	40020080 	.word	0x40020080
 800804c:	40020008 	.word	0x40020008
 8008050:	4002001c 	.word	0x4002001c
 8008054:	40020030 	.word	0x40020030
 8008058:	40020044 	.word	0x40020044
 800805c:	40020058 	.word	0x40020058
 8008060:	4002006c 	.word	0x4002006c
 8008064:	40020408 	.word	0x40020408
 8008068:	4002041c 	.word	0x4002041c
 800806c:	40020430 	.word	0x40020430
 8008070:	40020444 	.word	0x40020444
 8008074:	40020400 	.word	0x40020400
 8008078:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008080:	2202      	movs	r2, #2
 8008082:	409a      	lsls	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4013      	ands	r3, r2
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 80dd 	beq.w	8008248 <HAL_DMA_IRQHandler+0x3d8>
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	f003 0302 	and.w	r3, r3, #2
 8008094:	2b00      	cmp	r3, #0
 8008096:	f000 80d7 	beq.w	8008248 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 0320 	and.w	r3, r3, #32
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10b      	bne.n	80080c0 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f022 020a 	bic.w	r2, r2, #10
 80080b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	461a      	mov	r2, r3
 80080c6:	4b7b      	ldr	r3, [pc, #492]	@ (80082b4 <HAL_DMA_IRQHandler+0x444>)
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d958      	bls.n	800817e <HAL_DMA_IRQHandler+0x30e>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a79      	ldr	r2, [pc, #484]	@ (80082b8 <HAL_DMA_IRQHandler+0x448>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d04f      	beq.n	8008176 <HAL_DMA_IRQHandler+0x306>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a78      	ldr	r2, [pc, #480]	@ (80082bc <HAL_DMA_IRQHandler+0x44c>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d048      	beq.n	8008172 <HAL_DMA_IRQHandler+0x302>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a76      	ldr	r2, [pc, #472]	@ (80082c0 <HAL_DMA_IRQHandler+0x450>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d040      	beq.n	800816c <HAL_DMA_IRQHandler+0x2fc>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a75      	ldr	r2, [pc, #468]	@ (80082c4 <HAL_DMA_IRQHandler+0x454>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d038      	beq.n	8008166 <HAL_DMA_IRQHandler+0x2f6>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a73      	ldr	r2, [pc, #460]	@ (80082c8 <HAL_DMA_IRQHandler+0x458>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d030      	beq.n	8008160 <HAL_DMA_IRQHandler+0x2f0>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a72      	ldr	r2, [pc, #456]	@ (80082cc <HAL_DMA_IRQHandler+0x45c>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d028      	beq.n	800815a <HAL_DMA_IRQHandler+0x2ea>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a69      	ldr	r2, [pc, #420]	@ (80082b4 <HAL_DMA_IRQHandler+0x444>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d020      	beq.n	8008154 <HAL_DMA_IRQHandler+0x2e4>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a6e      	ldr	r2, [pc, #440]	@ (80082d0 <HAL_DMA_IRQHandler+0x460>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d019      	beq.n	8008150 <HAL_DMA_IRQHandler+0x2e0>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a6c      	ldr	r2, [pc, #432]	@ (80082d4 <HAL_DMA_IRQHandler+0x464>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d012      	beq.n	800814c <HAL_DMA_IRQHandler+0x2dc>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a6b      	ldr	r2, [pc, #428]	@ (80082d8 <HAL_DMA_IRQHandler+0x468>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d00a      	beq.n	8008146 <HAL_DMA_IRQHandler+0x2d6>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a69      	ldr	r2, [pc, #420]	@ (80082dc <HAL_DMA_IRQHandler+0x46c>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d102      	bne.n	8008140 <HAL_DMA_IRQHandler+0x2d0>
 800813a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800813e:	e01b      	b.n	8008178 <HAL_DMA_IRQHandler+0x308>
 8008140:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008144:	e018      	b.n	8008178 <HAL_DMA_IRQHandler+0x308>
 8008146:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800814a:	e015      	b.n	8008178 <HAL_DMA_IRQHandler+0x308>
 800814c:	2320      	movs	r3, #32
 800814e:	e013      	b.n	8008178 <HAL_DMA_IRQHandler+0x308>
 8008150:	2302      	movs	r3, #2
 8008152:	e011      	b.n	8008178 <HAL_DMA_IRQHandler+0x308>
 8008154:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008158:	e00e      	b.n	8008178 <HAL_DMA_IRQHandler+0x308>
 800815a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800815e:	e00b      	b.n	8008178 <HAL_DMA_IRQHandler+0x308>
 8008160:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008164:	e008      	b.n	8008178 <HAL_DMA_IRQHandler+0x308>
 8008166:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800816a:	e005      	b.n	8008178 <HAL_DMA_IRQHandler+0x308>
 800816c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008170:	e002      	b.n	8008178 <HAL_DMA_IRQHandler+0x308>
 8008172:	2320      	movs	r3, #32
 8008174:	e000      	b.n	8008178 <HAL_DMA_IRQHandler+0x308>
 8008176:	2302      	movs	r3, #2
 8008178:	4a59      	ldr	r2, [pc, #356]	@ (80082e0 <HAL_DMA_IRQHandler+0x470>)
 800817a:	6053      	str	r3, [r2, #4]
 800817c:	e057      	b.n	800822e <HAL_DMA_IRQHandler+0x3be>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a4d      	ldr	r2, [pc, #308]	@ (80082b8 <HAL_DMA_IRQHandler+0x448>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d04f      	beq.n	8008228 <HAL_DMA_IRQHandler+0x3b8>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a4b      	ldr	r2, [pc, #300]	@ (80082bc <HAL_DMA_IRQHandler+0x44c>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d048      	beq.n	8008224 <HAL_DMA_IRQHandler+0x3b4>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a4a      	ldr	r2, [pc, #296]	@ (80082c0 <HAL_DMA_IRQHandler+0x450>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d040      	beq.n	800821e <HAL_DMA_IRQHandler+0x3ae>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a48      	ldr	r2, [pc, #288]	@ (80082c4 <HAL_DMA_IRQHandler+0x454>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d038      	beq.n	8008218 <HAL_DMA_IRQHandler+0x3a8>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a47      	ldr	r2, [pc, #284]	@ (80082c8 <HAL_DMA_IRQHandler+0x458>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d030      	beq.n	8008212 <HAL_DMA_IRQHandler+0x3a2>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a45      	ldr	r2, [pc, #276]	@ (80082cc <HAL_DMA_IRQHandler+0x45c>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d028      	beq.n	800820c <HAL_DMA_IRQHandler+0x39c>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a3d      	ldr	r2, [pc, #244]	@ (80082b4 <HAL_DMA_IRQHandler+0x444>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d020      	beq.n	8008206 <HAL_DMA_IRQHandler+0x396>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a41      	ldr	r2, [pc, #260]	@ (80082d0 <HAL_DMA_IRQHandler+0x460>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d019      	beq.n	8008202 <HAL_DMA_IRQHandler+0x392>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a40      	ldr	r2, [pc, #256]	@ (80082d4 <HAL_DMA_IRQHandler+0x464>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d012      	beq.n	80081fe <HAL_DMA_IRQHandler+0x38e>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a3e      	ldr	r2, [pc, #248]	@ (80082d8 <HAL_DMA_IRQHandler+0x468>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d00a      	beq.n	80081f8 <HAL_DMA_IRQHandler+0x388>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a3d      	ldr	r2, [pc, #244]	@ (80082dc <HAL_DMA_IRQHandler+0x46c>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d102      	bne.n	80081f2 <HAL_DMA_IRQHandler+0x382>
 80081ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80081f0:	e01b      	b.n	800822a <HAL_DMA_IRQHandler+0x3ba>
 80081f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80081f6:	e018      	b.n	800822a <HAL_DMA_IRQHandler+0x3ba>
 80081f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80081fc:	e015      	b.n	800822a <HAL_DMA_IRQHandler+0x3ba>
 80081fe:	2320      	movs	r3, #32
 8008200:	e013      	b.n	800822a <HAL_DMA_IRQHandler+0x3ba>
 8008202:	2302      	movs	r3, #2
 8008204:	e011      	b.n	800822a <HAL_DMA_IRQHandler+0x3ba>
 8008206:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800820a:	e00e      	b.n	800822a <HAL_DMA_IRQHandler+0x3ba>
 800820c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008210:	e00b      	b.n	800822a <HAL_DMA_IRQHandler+0x3ba>
 8008212:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008216:	e008      	b.n	800822a <HAL_DMA_IRQHandler+0x3ba>
 8008218:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800821c:	e005      	b.n	800822a <HAL_DMA_IRQHandler+0x3ba>
 800821e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008222:	e002      	b.n	800822a <HAL_DMA_IRQHandler+0x3ba>
 8008224:	2320      	movs	r3, #32
 8008226:	e000      	b.n	800822a <HAL_DMA_IRQHandler+0x3ba>
 8008228:	2302      	movs	r3, #2
 800822a:	4a2e      	ldr	r2, [pc, #184]	@ (80082e4 <HAL_DMA_IRQHandler+0x474>)
 800822c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800823a:	2b00      	cmp	r3, #0
 800823c:	d034      	beq.n	80082a8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008246:	e02f      	b.n	80082a8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800824c:	2208      	movs	r2, #8
 800824e:	409a      	lsls	r2, r3
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	4013      	ands	r3, r2
 8008254:	2b00      	cmp	r3, #0
 8008256:	d028      	beq.n	80082aa <HAL_DMA_IRQHandler+0x43a>
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	f003 0308 	and.w	r3, r3, #8
 800825e:	2b00      	cmp	r3, #0
 8008260:	d023      	beq.n	80082aa <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f022 020e 	bic.w	r2, r2, #14
 8008270:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800827a:	2101      	movs	r1, #1
 800827c:	fa01 f202 	lsl.w	r2, r1, r2
 8008280:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800829c:	2b00      	cmp	r3, #0
 800829e:	d004      	beq.n	80082aa <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	4798      	blx	r3
    }
  }
  return;
 80082a8:	bf00      	nop
 80082aa:	bf00      	nop
}
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	40020080 	.word	0x40020080
 80082b8:	40020008 	.word	0x40020008
 80082bc:	4002001c 	.word	0x4002001c
 80082c0:	40020030 	.word	0x40020030
 80082c4:	40020044 	.word	0x40020044
 80082c8:	40020058 	.word	0x40020058
 80082cc:	4002006c 	.word	0x4002006c
 80082d0:	40020408 	.word	0x40020408
 80082d4:	4002041c 	.word	0x4002041c
 80082d8:	40020430 	.word	0x40020430
 80082dc:	40020444 	.word	0x40020444
 80082e0:	40020400 	.word	0x40020400
 80082e4:	40020000 	.word	0x40020000

080082e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
 80082f4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082fe:	2101      	movs	r1, #1
 8008300:	fa01 f202 	lsl.w	r2, r1, r2
 8008304:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	2b10      	cmp	r3, #16
 8008314:	d108      	bne.n	8008328 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008326:	e007      	b.n	8008338 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	60da      	str	r2, [r3, #12]
}
 8008338:	bf00      	nop
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	bc80      	pop	{r7}
 8008340:	4770      	bx	lr
	...

08008344 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008344:	b480      	push	{r7}
 8008346:	b08b      	sub	sp, #44	@ 0x2c
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800834e:	2300      	movs	r3, #0
 8008350:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008352:	2300      	movs	r3, #0
 8008354:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008356:	e179      	b.n	800864c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008358:	2201      	movs	r2, #1
 800835a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835c:	fa02 f303 	lsl.w	r3, r2, r3
 8008360:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	69fa      	ldr	r2, [r7, #28]
 8008368:	4013      	ands	r3, r2
 800836a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800836c:	69ba      	ldr	r2, [r7, #24]
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	429a      	cmp	r2, r3
 8008372:	f040 8168 	bne.w	8008646 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	4a96      	ldr	r2, [pc, #600]	@ (80085d4 <HAL_GPIO_Init+0x290>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d05e      	beq.n	800843e <HAL_GPIO_Init+0xfa>
 8008380:	4a94      	ldr	r2, [pc, #592]	@ (80085d4 <HAL_GPIO_Init+0x290>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d875      	bhi.n	8008472 <HAL_GPIO_Init+0x12e>
 8008386:	4a94      	ldr	r2, [pc, #592]	@ (80085d8 <HAL_GPIO_Init+0x294>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d058      	beq.n	800843e <HAL_GPIO_Init+0xfa>
 800838c:	4a92      	ldr	r2, [pc, #584]	@ (80085d8 <HAL_GPIO_Init+0x294>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d86f      	bhi.n	8008472 <HAL_GPIO_Init+0x12e>
 8008392:	4a92      	ldr	r2, [pc, #584]	@ (80085dc <HAL_GPIO_Init+0x298>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d052      	beq.n	800843e <HAL_GPIO_Init+0xfa>
 8008398:	4a90      	ldr	r2, [pc, #576]	@ (80085dc <HAL_GPIO_Init+0x298>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d869      	bhi.n	8008472 <HAL_GPIO_Init+0x12e>
 800839e:	4a90      	ldr	r2, [pc, #576]	@ (80085e0 <HAL_GPIO_Init+0x29c>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d04c      	beq.n	800843e <HAL_GPIO_Init+0xfa>
 80083a4:	4a8e      	ldr	r2, [pc, #568]	@ (80085e0 <HAL_GPIO_Init+0x29c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d863      	bhi.n	8008472 <HAL_GPIO_Init+0x12e>
 80083aa:	4a8e      	ldr	r2, [pc, #568]	@ (80085e4 <HAL_GPIO_Init+0x2a0>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d046      	beq.n	800843e <HAL_GPIO_Init+0xfa>
 80083b0:	4a8c      	ldr	r2, [pc, #560]	@ (80085e4 <HAL_GPIO_Init+0x2a0>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d85d      	bhi.n	8008472 <HAL_GPIO_Init+0x12e>
 80083b6:	2b12      	cmp	r3, #18
 80083b8:	d82a      	bhi.n	8008410 <HAL_GPIO_Init+0xcc>
 80083ba:	2b12      	cmp	r3, #18
 80083bc:	d859      	bhi.n	8008472 <HAL_GPIO_Init+0x12e>
 80083be:	a201      	add	r2, pc, #4	@ (adr r2, 80083c4 <HAL_GPIO_Init+0x80>)
 80083c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c4:	0800843f 	.word	0x0800843f
 80083c8:	08008419 	.word	0x08008419
 80083cc:	0800842b 	.word	0x0800842b
 80083d0:	0800846d 	.word	0x0800846d
 80083d4:	08008473 	.word	0x08008473
 80083d8:	08008473 	.word	0x08008473
 80083dc:	08008473 	.word	0x08008473
 80083e0:	08008473 	.word	0x08008473
 80083e4:	08008473 	.word	0x08008473
 80083e8:	08008473 	.word	0x08008473
 80083ec:	08008473 	.word	0x08008473
 80083f0:	08008473 	.word	0x08008473
 80083f4:	08008473 	.word	0x08008473
 80083f8:	08008473 	.word	0x08008473
 80083fc:	08008473 	.word	0x08008473
 8008400:	08008473 	.word	0x08008473
 8008404:	08008473 	.word	0x08008473
 8008408:	08008421 	.word	0x08008421
 800840c:	08008435 	.word	0x08008435
 8008410:	4a75      	ldr	r2, [pc, #468]	@ (80085e8 <HAL_GPIO_Init+0x2a4>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d013      	beq.n	800843e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008416:	e02c      	b.n	8008472 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	623b      	str	r3, [r7, #32]
          break;
 800841e:	e029      	b.n	8008474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	3304      	adds	r3, #4
 8008426:	623b      	str	r3, [r7, #32]
          break;
 8008428:	e024      	b.n	8008474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	3308      	adds	r3, #8
 8008430:	623b      	str	r3, [r7, #32]
          break;
 8008432:	e01f      	b.n	8008474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	330c      	adds	r3, #12
 800843a:	623b      	str	r3, [r7, #32]
          break;
 800843c:	e01a      	b.n	8008474 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d102      	bne.n	800844c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008446:	2304      	movs	r3, #4
 8008448:	623b      	str	r3, [r7, #32]
          break;
 800844a:	e013      	b.n	8008474 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	2b01      	cmp	r3, #1
 8008452:	d105      	bne.n	8008460 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008454:	2308      	movs	r3, #8
 8008456:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	69fa      	ldr	r2, [r7, #28]
 800845c:	611a      	str	r2, [r3, #16]
          break;
 800845e:	e009      	b.n	8008474 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008460:	2308      	movs	r3, #8
 8008462:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	69fa      	ldr	r2, [r7, #28]
 8008468:	615a      	str	r2, [r3, #20]
          break;
 800846a:	e003      	b.n	8008474 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800846c:	2300      	movs	r3, #0
 800846e:	623b      	str	r3, [r7, #32]
          break;
 8008470:	e000      	b.n	8008474 <HAL_GPIO_Init+0x130>
          break;
 8008472:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	2bff      	cmp	r3, #255	@ 0xff
 8008478:	d801      	bhi.n	800847e <HAL_GPIO_Init+0x13a>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	e001      	b.n	8008482 <HAL_GPIO_Init+0x13e>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	3304      	adds	r3, #4
 8008482:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	2bff      	cmp	r3, #255	@ 0xff
 8008488:	d802      	bhi.n	8008490 <HAL_GPIO_Init+0x14c>
 800848a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	e002      	b.n	8008496 <HAL_GPIO_Init+0x152>
 8008490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008492:	3b08      	subs	r3, #8
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	210f      	movs	r1, #15
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	fa01 f303 	lsl.w	r3, r1, r3
 80084a4:	43db      	mvns	r3, r3
 80084a6:	401a      	ands	r2, r3
 80084a8:	6a39      	ldr	r1, [r7, #32]
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	fa01 f303 	lsl.w	r3, r1, r3
 80084b0:	431a      	orrs	r2, r3
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 80c1 	beq.w	8008646 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80084c4:	4b49      	ldr	r3, [pc, #292]	@ (80085ec <HAL_GPIO_Init+0x2a8>)
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	4a48      	ldr	r2, [pc, #288]	@ (80085ec <HAL_GPIO_Init+0x2a8>)
 80084ca:	f043 0301 	orr.w	r3, r3, #1
 80084ce:	6193      	str	r3, [r2, #24]
 80084d0:	4b46      	ldr	r3, [pc, #280]	@ (80085ec <HAL_GPIO_Init+0x2a8>)
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	60bb      	str	r3, [r7, #8]
 80084da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80084dc:	4a44      	ldr	r2, [pc, #272]	@ (80085f0 <HAL_GPIO_Init+0x2ac>)
 80084de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e0:	089b      	lsrs	r3, r3, #2
 80084e2:	3302      	adds	r3, #2
 80084e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80084ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ec:	f003 0303 	and.w	r3, r3, #3
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	220f      	movs	r2, #15
 80084f4:	fa02 f303 	lsl.w	r3, r2, r3
 80084f8:	43db      	mvns	r3, r3
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	4013      	ands	r3, r2
 80084fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a3c      	ldr	r2, [pc, #240]	@ (80085f4 <HAL_GPIO_Init+0x2b0>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d01f      	beq.n	8008548 <HAL_GPIO_Init+0x204>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a3b      	ldr	r2, [pc, #236]	@ (80085f8 <HAL_GPIO_Init+0x2b4>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d019      	beq.n	8008544 <HAL_GPIO_Init+0x200>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a3a      	ldr	r2, [pc, #232]	@ (80085fc <HAL_GPIO_Init+0x2b8>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d013      	beq.n	8008540 <HAL_GPIO_Init+0x1fc>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a39      	ldr	r2, [pc, #228]	@ (8008600 <HAL_GPIO_Init+0x2bc>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d00d      	beq.n	800853c <HAL_GPIO_Init+0x1f8>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a38      	ldr	r2, [pc, #224]	@ (8008604 <HAL_GPIO_Init+0x2c0>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d007      	beq.n	8008538 <HAL_GPIO_Init+0x1f4>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a37      	ldr	r2, [pc, #220]	@ (8008608 <HAL_GPIO_Init+0x2c4>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d101      	bne.n	8008534 <HAL_GPIO_Init+0x1f0>
 8008530:	2305      	movs	r3, #5
 8008532:	e00a      	b.n	800854a <HAL_GPIO_Init+0x206>
 8008534:	2306      	movs	r3, #6
 8008536:	e008      	b.n	800854a <HAL_GPIO_Init+0x206>
 8008538:	2304      	movs	r3, #4
 800853a:	e006      	b.n	800854a <HAL_GPIO_Init+0x206>
 800853c:	2303      	movs	r3, #3
 800853e:	e004      	b.n	800854a <HAL_GPIO_Init+0x206>
 8008540:	2302      	movs	r3, #2
 8008542:	e002      	b.n	800854a <HAL_GPIO_Init+0x206>
 8008544:	2301      	movs	r3, #1
 8008546:	e000      	b.n	800854a <HAL_GPIO_Init+0x206>
 8008548:	2300      	movs	r3, #0
 800854a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800854c:	f002 0203 	and.w	r2, r2, #3
 8008550:	0092      	lsls	r2, r2, #2
 8008552:	4093      	lsls	r3, r2
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	4313      	orrs	r3, r2
 8008558:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800855a:	4925      	ldr	r1, [pc, #148]	@ (80085f0 <HAL_GPIO_Init+0x2ac>)
 800855c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855e:	089b      	lsrs	r3, r3, #2
 8008560:	3302      	adds	r3, #2
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008570:	2b00      	cmp	r3, #0
 8008572:	d006      	beq.n	8008582 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008574:	4b25      	ldr	r3, [pc, #148]	@ (800860c <HAL_GPIO_Init+0x2c8>)
 8008576:	689a      	ldr	r2, [r3, #8]
 8008578:	4924      	ldr	r1, [pc, #144]	@ (800860c <HAL_GPIO_Init+0x2c8>)
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	4313      	orrs	r3, r2
 800857e:	608b      	str	r3, [r1, #8]
 8008580:	e006      	b.n	8008590 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008582:	4b22      	ldr	r3, [pc, #136]	@ (800860c <HAL_GPIO_Init+0x2c8>)
 8008584:	689a      	ldr	r2, [r3, #8]
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	43db      	mvns	r3, r3
 800858a:	4920      	ldr	r1, [pc, #128]	@ (800860c <HAL_GPIO_Init+0x2c8>)
 800858c:	4013      	ands	r3, r2
 800858e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008598:	2b00      	cmp	r3, #0
 800859a:	d006      	beq.n	80085aa <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800859c:	4b1b      	ldr	r3, [pc, #108]	@ (800860c <HAL_GPIO_Init+0x2c8>)
 800859e:	68da      	ldr	r2, [r3, #12]
 80085a0:	491a      	ldr	r1, [pc, #104]	@ (800860c <HAL_GPIO_Init+0x2c8>)
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	60cb      	str	r3, [r1, #12]
 80085a8:	e006      	b.n	80085b8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80085aa:	4b18      	ldr	r3, [pc, #96]	@ (800860c <HAL_GPIO_Init+0x2c8>)
 80085ac:	68da      	ldr	r2, [r3, #12]
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	43db      	mvns	r3, r3
 80085b2:	4916      	ldr	r1, [pc, #88]	@ (800860c <HAL_GPIO_Init+0x2c8>)
 80085b4:	4013      	ands	r3, r2
 80085b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d025      	beq.n	8008610 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80085c4:	4b11      	ldr	r3, [pc, #68]	@ (800860c <HAL_GPIO_Init+0x2c8>)
 80085c6:	685a      	ldr	r2, [r3, #4]
 80085c8:	4910      	ldr	r1, [pc, #64]	@ (800860c <HAL_GPIO_Init+0x2c8>)
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	604b      	str	r3, [r1, #4]
 80085d0:	e025      	b.n	800861e <HAL_GPIO_Init+0x2da>
 80085d2:	bf00      	nop
 80085d4:	10320000 	.word	0x10320000
 80085d8:	10310000 	.word	0x10310000
 80085dc:	10220000 	.word	0x10220000
 80085e0:	10210000 	.word	0x10210000
 80085e4:	10120000 	.word	0x10120000
 80085e8:	10110000 	.word	0x10110000
 80085ec:	40021000 	.word	0x40021000
 80085f0:	40010000 	.word	0x40010000
 80085f4:	40010800 	.word	0x40010800
 80085f8:	40010c00 	.word	0x40010c00
 80085fc:	40011000 	.word	0x40011000
 8008600:	40011400 	.word	0x40011400
 8008604:	40011800 	.word	0x40011800
 8008608:	40011c00 	.word	0x40011c00
 800860c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008610:	4b15      	ldr	r3, [pc, #84]	@ (8008668 <HAL_GPIO_Init+0x324>)
 8008612:	685a      	ldr	r2, [r3, #4]
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	43db      	mvns	r3, r3
 8008618:	4913      	ldr	r1, [pc, #76]	@ (8008668 <HAL_GPIO_Init+0x324>)
 800861a:	4013      	ands	r3, r2
 800861c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008626:	2b00      	cmp	r3, #0
 8008628:	d006      	beq.n	8008638 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800862a:	4b0f      	ldr	r3, [pc, #60]	@ (8008668 <HAL_GPIO_Init+0x324>)
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	490e      	ldr	r1, [pc, #56]	@ (8008668 <HAL_GPIO_Init+0x324>)
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	4313      	orrs	r3, r2
 8008634:	600b      	str	r3, [r1, #0]
 8008636:	e006      	b.n	8008646 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008638:	4b0b      	ldr	r3, [pc, #44]	@ (8008668 <HAL_GPIO_Init+0x324>)
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	43db      	mvns	r3, r3
 8008640:	4909      	ldr	r1, [pc, #36]	@ (8008668 <HAL_GPIO_Init+0x324>)
 8008642:	4013      	ands	r3, r2
 8008644:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008648:	3301      	adds	r3, #1
 800864a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008652:	fa22 f303 	lsr.w	r3, r2, r3
 8008656:	2b00      	cmp	r3, #0
 8008658:	f47f ae7e 	bne.w	8008358 <HAL_GPIO_Init+0x14>
  }
}
 800865c:	bf00      	nop
 800865e:	bf00      	nop
 8008660:	372c      	adds	r7, #44	@ 0x2c
 8008662:	46bd      	mov	sp, r7
 8008664:	bc80      	pop	{r7}
 8008666:	4770      	bx	lr
 8008668:	40010400 	.word	0x40010400

0800866c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	460b      	mov	r3, r1
 8008676:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	689a      	ldr	r2, [r3, #8]
 800867c:	887b      	ldrh	r3, [r7, #2]
 800867e:	4013      	ands	r3, r2
 8008680:	2b00      	cmp	r3, #0
 8008682:	d002      	beq.n	800868a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008684:	2301      	movs	r3, #1
 8008686:	73fb      	strb	r3, [r7, #15]
 8008688:	e001      	b.n	800868e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800868a:	2300      	movs	r3, #0
 800868c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800868e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3714      	adds	r7, #20
 8008694:	46bd      	mov	sp, r7
 8008696:	bc80      	pop	{r7}
 8008698:	4770      	bx	lr

0800869a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800869a:	b480      	push	{r7}
 800869c:	b083      	sub	sp, #12
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
 80086a2:	460b      	mov	r3, r1
 80086a4:	807b      	strh	r3, [r7, #2]
 80086a6:	4613      	mov	r3, r2
 80086a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80086aa:	787b      	ldrb	r3, [r7, #1]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d003      	beq.n	80086b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80086b0:	887a      	ldrh	r2, [r7, #2]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80086b6:	e003      	b.n	80086c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80086b8:	887b      	ldrh	r3, [r7, #2]
 80086ba:	041a      	lsls	r2, r3, #16
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	611a      	str	r2, [r3, #16]
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bc80      	pop	{r7}
 80086c8:	4770      	bx	lr

080086ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80086ca:	b480      	push	{r7}
 80086cc:	b085      	sub	sp, #20
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	460b      	mov	r3, r1
 80086d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80086dc:	887a      	ldrh	r2, [r7, #2]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	4013      	ands	r3, r2
 80086e2:	041a      	lsls	r2, r3, #16
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	43d9      	mvns	r1, r3
 80086e8:	887b      	ldrh	r3, [r7, #2]
 80086ea:	400b      	ands	r3, r1
 80086ec:	431a      	orrs	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	611a      	str	r2, [r3, #16]
}
 80086f2:	bf00      	nop
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bc80      	pop	{r7}
 80086fa:	4770      	bx	lr

080086fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d101      	bne.n	800870e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	e12b      	b.n	8008966 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	d106      	bne.n	8008728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f7fc ffb0 	bl	8005688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2224      	movs	r2, #36	@ 0x24
 800872c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f022 0201 	bic.w	r2, r2, #1
 800873e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800874e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800875e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008760:	f002 f9d8 	bl	800ab14 <HAL_RCC_GetPCLK1Freq>
 8008764:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	4a81      	ldr	r2, [pc, #516]	@ (8008970 <HAL_I2C_Init+0x274>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d807      	bhi.n	8008780 <HAL_I2C_Init+0x84>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	4a80      	ldr	r2, [pc, #512]	@ (8008974 <HAL_I2C_Init+0x278>)
 8008774:	4293      	cmp	r3, r2
 8008776:	bf94      	ite	ls
 8008778:	2301      	movls	r3, #1
 800877a:	2300      	movhi	r3, #0
 800877c:	b2db      	uxtb	r3, r3
 800877e:	e006      	b.n	800878e <HAL_I2C_Init+0x92>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	4a7d      	ldr	r2, [pc, #500]	@ (8008978 <HAL_I2C_Init+0x27c>)
 8008784:	4293      	cmp	r3, r2
 8008786:	bf94      	ite	ls
 8008788:	2301      	movls	r3, #1
 800878a:	2300      	movhi	r3, #0
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e0e7      	b.n	8008966 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	4a78      	ldr	r2, [pc, #480]	@ (800897c <HAL_I2C_Init+0x280>)
 800879a:	fba2 2303 	umull	r2, r3, r2, r3
 800879e:	0c9b      	lsrs	r3, r3, #18
 80087a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68ba      	ldr	r2, [r7, #8]
 80087b2:	430a      	orrs	r2, r1
 80087b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	6a1b      	ldr	r3, [r3, #32]
 80087bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	4a6a      	ldr	r2, [pc, #424]	@ (8008970 <HAL_I2C_Init+0x274>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d802      	bhi.n	80087d0 <HAL_I2C_Init+0xd4>
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	3301      	adds	r3, #1
 80087ce:	e009      	b.n	80087e4 <HAL_I2C_Init+0xe8>
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80087d6:	fb02 f303 	mul.w	r3, r2, r3
 80087da:	4a69      	ldr	r2, [pc, #420]	@ (8008980 <HAL_I2C_Init+0x284>)
 80087dc:	fba2 2303 	umull	r2, r3, r2, r3
 80087e0:	099b      	lsrs	r3, r3, #6
 80087e2:	3301      	adds	r3, #1
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	6812      	ldr	r2, [r2, #0]
 80087e8:	430b      	orrs	r3, r1
 80087ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	69db      	ldr	r3, [r3, #28]
 80087f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80087f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	495c      	ldr	r1, [pc, #368]	@ (8008970 <HAL_I2C_Init+0x274>)
 8008800:	428b      	cmp	r3, r1
 8008802:	d819      	bhi.n	8008838 <HAL_I2C_Init+0x13c>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	1e59      	subs	r1, r3, #1
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	005b      	lsls	r3, r3, #1
 800880e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008812:	1c59      	adds	r1, r3, #1
 8008814:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008818:	400b      	ands	r3, r1
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00a      	beq.n	8008834 <HAL_I2C_Init+0x138>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	1e59      	subs	r1, r3, #1
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	005b      	lsls	r3, r3, #1
 8008828:	fbb1 f3f3 	udiv	r3, r1, r3
 800882c:	3301      	adds	r3, #1
 800882e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008832:	e051      	b.n	80088d8 <HAL_I2C_Init+0x1dc>
 8008834:	2304      	movs	r3, #4
 8008836:	e04f      	b.n	80088d8 <HAL_I2C_Init+0x1dc>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d111      	bne.n	8008864 <HAL_I2C_Init+0x168>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	1e58      	subs	r0, r3, #1
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6859      	ldr	r1, [r3, #4]
 8008848:	460b      	mov	r3, r1
 800884a:	005b      	lsls	r3, r3, #1
 800884c:	440b      	add	r3, r1
 800884e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008852:	3301      	adds	r3, #1
 8008854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008858:	2b00      	cmp	r3, #0
 800885a:	bf0c      	ite	eq
 800885c:	2301      	moveq	r3, #1
 800885e:	2300      	movne	r3, #0
 8008860:	b2db      	uxtb	r3, r3
 8008862:	e012      	b.n	800888a <HAL_I2C_Init+0x18e>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	1e58      	subs	r0, r3, #1
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6859      	ldr	r1, [r3, #4]
 800886c:	460b      	mov	r3, r1
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	440b      	add	r3, r1
 8008872:	0099      	lsls	r1, r3, #2
 8008874:	440b      	add	r3, r1
 8008876:	fbb0 f3f3 	udiv	r3, r0, r3
 800887a:	3301      	adds	r3, #1
 800887c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008880:	2b00      	cmp	r3, #0
 8008882:	bf0c      	ite	eq
 8008884:	2301      	moveq	r3, #1
 8008886:	2300      	movne	r3, #0
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <HAL_I2C_Init+0x196>
 800888e:	2301      	movs	r3, #1
 8008890:	e022      	b.n	80088d8 <HAL_I2C_Init+0x1dc>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10e      	bne.n	80088b8 <HAL_I2C_Init+0x1bc>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	1e58      	subs	r0, r3, #1
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6859      	ldr	r1, [r3, #4]
 80088a2:	460b      	mov	r3, r1
 80088a4:	005b      	lsls	r3, r3, #1
 80088a6:	440b      	add	r3, r1
 80088a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80088ac:	3301      	adds	r3, #1
 80088ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088b6:	e00f      	b.n	80088d8 <HAL_I2C_Init+0x1dc>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	1e58      	subs	r0, r3, #1
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6859      	ldr	r1, [r3, #4]
 80088c0:	460b      	mov	r3, r1
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	440b      	add	r3, r1
 80088c6:	0099      	lsls	r1, r3, #2
 80088c8:	440b      	add	r3, r1
 80088ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80088ce:	3301      	adds	r3, #1
 80088d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80088d8:	6879      	ldr	r1, [r7, #4]
 80088da:	6809      	ldr	r1, [r1, #0]
 80088dc:	4313      	orrs	r3, r2
 80088de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	69da      	ldr	r2, [r3, #28]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	431a      	orrs	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	430a      	orrs	r2, r1
 80088fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008906:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	6911      	ldr	r1, [r2, #16]
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	68d2      	ldr	r2, [r2, #12]
 8008912:	4311      	orrs	r1, r2
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	6812      	ldr	r2, [r2, #0]
 8008918:	430b      	orrs	r3, r1
 800891a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	695a      	ldr	r2, [r3, #20]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	699b      	ldr	r3, [r3, #24]
 800892e:	431a      	orrs	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	430a      	orrs	r2, r1
 8008936:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f042 0201 	orr.w	r2, r2, #1
 8008946:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2220      	movs	r2, #32
 8008952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	000186a0 	.word	0x000186a0
 8008974:	001e847f 	.word	0x001e847f
 8008978:	003d08ff 	.word	0x003d08ff
 800897c:	431bde83 	.word	0x431bde83
 8008980:	10624dd3 	.word	0x10624dd3

08008984 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b088      	sub	sp, #32
 8008988:	af02      	add	r7, sp, #8
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	607a      	str	r2, [r7, #4]
 800898e:	461a      	mov	r2, r3
 8008990:	460b      	mov	r3, r1
 8008992:	817b      	strh	r3, [r7, #10]
 8008994:	4613      	mov	r3, r2
 8008996:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008998:	f7fe ff42 	bl	8007820 <HAL_GetTick>
 800899c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b20      	cmp	r3, #32
 80089a8:	f040 80e0 	bne.w	8008b6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	2319      	movs	r3, #25
 80089b2:	2201      	movs	r2, #1
 80089b4:	4970      	ldr	r1, [pc, #448]	@ (8008b78 <HAL_I2C_Master_Transmit+0x1f4>)
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f001 faac 	bl	8009f14 <I2C_WaitOnFlagUntilTimeout>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d001      	beq.n	80089c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80089c2:	2302      	movs	r3, #2
 80089c4:	e0d3      	b.n	8008b6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d101      	bne.n	80089d4 <HAL_I2C_Master_Transmit+0x50>
 80089d0:	2302      	movs	r3, #2
 80089d2:	e0cc      	b.n	8008b6e <HAL_I2C_Master_Transmit+0x1ea>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 0301 	and.w	r3, r3, #1
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d007      	beq.n	80089fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f042 0201 	orr.w	r2, r2, #1
 80089f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2221      	movs	r2, #33	@ 0x21
 8008a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2210      	movs	r2, #16
 8008a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	893a      	ldrh	r2, [r7, #8]
 8008a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	4a50      	ldr	r2, [pc, #320]	@ (8008b7c <HAL_I2C_Master_Transmit+0x1f8>)
 8008a3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008a3c:	8979      	ldrh	r1, [r7, #10]
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	6a3a      	ldr	r2, [r7, #32]
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	f000 ff98 	bl	8009978 <I2C_MasterRequestWrite>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d001      	beq.n	8008a52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e08d      	b.n	8008b6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a52:	2300      	movs	r3, #0
 8008a54:	613b      	str	r3, [r7, #16]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	695b      	ldr	r3, [r3, #20]
 8008a5c:	613b      	str	r3, [r7, #16]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	613b      	str	r3, [r7, #16]
 8008a66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008a68:	e066      	b.n	8008b38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a6a:	697a      	ldr	r2, [r7, #20]
 8008a6c:	6a39      	ldr	r1, [r7, #32]
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f001 fb6a 	bl	800a148 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00d      	beq.n	8008a96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a7e:	2b04      	cmp	r3, #4
 8008a80:	d107      	bne.n	8008a92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e06b      	b.n	8008b6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a9a:	781a      	ldrb	r2, [r3, #0]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aa6:	1c5a      	adds	r2, r3, #1
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	695b      	ldr	r3, [r3, #20]
 8008acc:	f003 0304 	and.w	r3, r3, #4
 8008ad0:	2b04      	cmp	r3, #4
 8008ad2:	d11b      	bne.n	8008b0c <HAL_I2C_Master_Transmit+0x188>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d017      	beq.n	8008b0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae0:	781a      	ldrb	r2, [r3, #0]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	3b01      	subs	r3, #1
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b04:	3b01      	subs	r3, #1
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b0c:	697a      	ldr	r2, [r7, #20]
 8008b0e:	6a39      	ldr	r1, [r7, #32]
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f001 fb61 	bl	800a1d8 <I2C_WaitOnBTFFlagUntilTimeout>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00d      	beq.n	8008b38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b20:	2b04      	cmp	r3, #4
 8008b22:	d107      	bne.n	8008b34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	e01a      	b.n	8008b6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d194      	bne.n	8008a6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2220      	movs	r2, #32
 8008b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	e000      	b.n	8008b6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008b6c:	2302      	movs	r3, #2
  }
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3718      	adds	r7, #24
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	00100002 	.word	0x00100002
 8008b7c:	ffff0000 	.word	0xffff0000

08008b80 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b08c      	sub	sp, #48	@ 0x30
 8008b84:	af02      	add	r7, sp, #8
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	607a      	str	r2, [r7, #4]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	817b      	strh	r3, [r7, #10]
 8008b90:	4613      	mov	r3, r2
 8008b92:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8008b94:	2300      	movs	r3, #0
 8008b96:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008b98:	f7fe fe42 	bl	8007820 <HAL_GetTick>
 8008b9c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b20      	cmp	r3, #32
 8008ba8:	f040 824b 	bne.w	8009042 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	2319      	movs	r3, #25
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	497f      	ldr	r1, [pc, #508]	@ (8008db4 <HAL_I2C_Master_Receive+0x234>)
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f001 f9ac 	bl	8009f14 <I2C_WaitOnFlagUntilTimeout>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d001      	beq.n	8008bc6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8008bc2:	2302      	movs	r3, #2
 8008bc4:	e23e      	b.n	8009044 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d101      	bne.n	8008bd4 <HAL_I2C_Master_Receive+0x54>
 8008bd0:	2302      	movs	r3, #2
 8008bd2:	e237      	b.n	8009044 <HAL_I2C_Master_Receive+0x4c4>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d007      	beq.n	8008bfa <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f042 0201 	orr.w	r2, r2, #1
 8008bf8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2222      	movs	r2, #34	@ 0x22
 8008c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2210      	movs	r2, #16
 8008c16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	893a      	ldrh	r2, [r7, #8]
 8008c2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	4a5f      	ldr	r2, [pc, #380]	@ (8008db8 <HAL_I2C_Master_Receive+0x238>)
 8008c3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008c3c:	8979      	ldrh	r1, [r7, #10]
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f000 ff1a 	bl	8009a7c <I2C_MasterRequestRead>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e1f8      	b.n	8009044 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d113      	bne.n	8008c82 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	61fb      	str	r3, [r7, #28]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	695b      	ldr	r3, [r3, #20]
 8008c64:	61fb      	str	r3, [r7, #28]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	61fb      	str	r3, [r7, #28]
 8008c6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c7e:	601a      	str	r2, [r3, #0]
 8008c80:	e1cc      	b.n	800901c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d11e      	bne.n	8008cc8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c9a:	b672      	cpsid	i
}
 8008c9c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	61bb      	str	r3, [r7, #24]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	695b      	ldr	r3, [r3, #20]
 8008ca8:	61bb      	str	r3, [r7, #24]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	61bb      	str	r3, [r7, #24]
 8008cb2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008cc2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008cc4:	b662      	cpsie	i
}
 8008cc6:	e035      	b.n	8008d34 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	d11e      	bne.n	8008d0e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008cde:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ce0:	b672      	cpsid	i
}
 8008ce2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	617b      	str	r3, [r7, #20]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	695b      	ldr	r3, [r3, #20]
 8008cee:	617b      	str	r3, [r7, #20]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	699b      	ldr	r3, [r3, #24]
 8008cf6:	617b      	str	r3, [r7, #20]
 8008cf8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008d0a:	b662      	cpsie	i
}
 8008d0c:	e012      	b.n	8008d34 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008d1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d1e:	2300      	movs	r3, #0
 8008d20:	613b      	str	r3, [r7, #16]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	695b      	ldr	r3, [r3, #20]
 8008d28:	613b      	str	r3, [r7, #16]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	613b      	str	r3, [r7, #16]
 8008d32:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8008d34:	e172      	b.n	800901c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	f200 811f 	bhi.w	8008f7e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d123      	bne.n	8008d90 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d4a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f001 fa8b 	bl	800a268 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e173      	b.n	8009044 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	691a      	ldr	r2, [r3, #16]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d66:	b2d2      	uxtb	r2, r2
 8008d68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d6e:	1c5a      	adds	r2, r3, #1
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	3b01      	subs	r3, #1
 8008d88:	b29a      	uxth	r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008d8e:	e145      	b.n	800901c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	d152      	bne.n	8008e3e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9e:	2200      	movs	r2, #0
 8008da0:	4906      	ldr	r1, [pc, #24]	@ (8008dbc <HAL_I2C_Master_Receive+0x23c>)
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f001 f8b6 	bl	8009f14 <I2C_WaitOnFlagUntilTimeout>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d008      	beq.n	8008dc0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e148      	b.n	8009044 <HAL_I2C_Master_Receive+0x4c4>
 8008db2:	bf00      	nop
 8008db4:	00100002 	.word	0x00100002
 8008db8:	ffff0000 	.word	0xffff0000
 8008dbc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8008dc0:	b672      	cpsid	i
}
 8008dc2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008dd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	691a      	ldr	r2, [r3, #16]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dde:	b2d2      	uxtb	r2, r2
 8008de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008de6:	1c5a      	adds	r2, r3, #1
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008df0:	3b01      	subs	r3, #1
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008e06:	b662      	cpsie	i
}
 8008e08:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	691a      	ldr	r2, [r3, #16]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e14:	b2d2      	uxtb	r2, r2
 8008e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e1c:	1c5a      	adds	r2, r3, #1
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e26:	3b01      	subs	r3, #1
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	3b01      	subs	r3, #1
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008e3c:	e0ee      	b.n	800901c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e44:	2200      	movs	r2, #0
 8008e46:	4981      	ldr	r1, [pc, #516]	@ (800904c <HAL_I2C_Master_Receive+0x4cc>)
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f001 f863 	bl	8009f14 <I2C_WaitOnFlagUntilTimeout>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e0f5      	b.n	8009044 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008e68:	b672      	cpsid	i
}
 8008e6a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	691a      	ldr	r2, [r3, #16]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e76:	b2d2      	uxtb	r2, r2
 8008e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e7e:	1c5a      	adds	r2, r3, #1
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	3b01      	subs	r3, #1
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008e9e:	4b6c      	ldr	r3, [pc, #432]	@ (8009050 <HAL_I2C_Master_Receive+0x4d0>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	08db      	lsrs	r3, r3, #3
 8008ea4:	4a6b      	ldr	r2, [pc, #428]	@ (8009054 <HAL_I2C_Master_Receive+0x4d4>)
 8008ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8008eaa:	0a1a      	lsrs	r2, r3, #8
 8008eac:	4613      	mov	r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	4413      	add	r3, r2
 8008eb2:	00da      	lsls	r2, r3, #3
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8008eb8:	6a3b      	ldr	r3, [r7, #32]
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8008ebe:	6a3b      	ldr	r3, [r7, #32]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d118      	bne.n	8008ef6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2220      	movs	r2, #32
 8008ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ede:	f043 0220 	orr.w	r2, r3, #32
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8008ee6:	b662      	cpsie	i
}
 8008ee8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e0a6      	b.n	8009044 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	695b      	ldr	r3, [r3, #20]
 8008efc:	f003 0304 	and.w	r3, r3, #4
 8008f00:	2b04      	cmp	r3, #4
 8008f02:	d1d9      	bne.n	8008eb8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	691a      	ldr	r2, [r3, #16]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f1e:	b2d2      	uxtb	r2, r2
 8008f20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f26:	1c5a      	adds	r2, r3, #1
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f30:	3b01      	subs	r3, #1
 8008f32:	b29a      	uxth	r2, r3
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	b29a      	uxth	r2, r3
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008f46:	b662      	cpsie	i
}
 8008f48:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	691a      	ldr	r2, [r3, #16]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f54:	b2d2      	uxtb	r2, r2
 8008f56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f5c:	1c5a      	adds	r2, r3, #1
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f66:	3b01      	subs	r3, #1
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	3b01      	subs	r3, #1
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008f7c:	e04e      	b.n	800901c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f001 f970 	bl	800a268 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d001      	beq.n	8008f92 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e058      	b.n	8009044 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	691a      	ldr	r2, [r3, #16]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f9c:	b2d2      	uxtb	r2, r2
 8008f9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fa4:	1c5a      	adds	r2, r3, #1
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	b29a      	uxth	r2, r3
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	695b      	ldr	r3, [r3, #20]
 8008fca:	f003 0304 	and.w	r3, r3, #4
 8008fce:	2b04      	cmp	r3, #4
 8008fd0:	d124      	bne.n	800901c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fd6:	2b03      	cmp	r3, #3
 8008fd8:	d107      	bne.n	8008fea <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008fe8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	691a      	ldr	r2, [r3, #16]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff4:	b2d2      	uxtb	r2, r2
 8008ff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ffc:	1c5a      	adds	r2, r3, #1
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009006:	3b01      	subs	r3, #1
 8009008:	b29a      	uxth	r2, r3
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009012:	b29b      	uxth	r3, r3
 8009014:	3b01      	subs	r3, #1
 8009016:	b29a      	uxth	r2, r3
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009020:	2b00      	cmp	r3, #0
 8009022:	f47f ae88 	bne.w	8008d36 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2220      	movs	r2, #32
 800902a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2200      	movs	r2, #0
 800903a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800903e:	2300      	movs	r3, #0
 8009040:	e000      	b.n	8009044 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8009042:	2302      	movs	r3, #2
  }
}
 8009044:	4618      	mov	r0, r3
 8009046:	3728      	adds	r7, #40	@ 0x28
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	00010004 	.word	0x00010004
 8009050:	20000018 	.word	0x20000018
 8009054:	14f8b589 	.word	0x14f8b589

08009058 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b088      	sub	sp, #32
 800905c:	af02      	add	r7, sp, #8
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	4608      	mov	r0, r1
 8009062:	4611      	mov	r1, r2
 8009064:	461a      	mov	r2, r3
 8009066:	4603      	mov	r3, r0
 8009068:	817b      	strh	r3, [r7, #10]
 800906a:	460b      	mov	r3, r1
 800906c:	813b      	strh	r3, [r7, #8]
 800906e:	4613      	mov	r3, r2
 8009070:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009072:	f7fe fbd5 	bl	8007820 <HAL_GetTick>
 8009076:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800907e:	b2db      	uxtb	r3, r3
 8009080:	2b20      	cmp	r3, #32
 8009082:	f040 80d9 	bne.w	8009238 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	2319      	movs	r3, #25
 800908c:	2201      	movs	r2, #1
 800908e:	496d      	ldr	r1, [pc, #436]	@ (8009244 <HAL_I2C_Mem_Write+0x1ec>)
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f000 ff3f 	bl	8009f14 <I2C_WaitOnFlagUntilTimeout>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d001      	beq.n	80090a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800909c:	2302      	movs	r3, #2
 800909e:	e0cc      	b.n	800923a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d101      	bne.n	80090ae <HAL_I2C_Mem_Write+0x56>
 80090aa:	2302      	movs	r3, #2
 80090ac:	e0c5      	b.n	800923a <HAL_I2C_Mem_Write+0x1e2>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f003 0301 	and.w	r3, r3, #1
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d007      	beq.n	80090d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f042 0201 	orr.w	r2, r2, #1
 80090d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80090e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2221      	movs	r2, #33	@ 0x21
 80090e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2240      	movs	r2, #64	@ 0x40
 80090f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2200      	movs	r2, #0
 80090f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6a3a      	ldr	r2, [r7, #32]
 80090fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009104:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800910a:	b29a      	uxth	r2, r3
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	4a4d      	ldr	r2, [pc, #308]	@ (8009248 <HAL_I2C_Mem_Write+0x1f0>)
 8009114:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009116:	88f8      	ldrh	r0, [r7, #6]
 8009118:	893a      	ldrh	r2, [r7, #8]
 800911a:	8979      	ldrh	r1, [r7, #10]
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	9301      	str	r3, [sp, #4]
 8009120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009122:	9300      	str	r3, [sp, #0]
 8009124:	4603      	mov	r3, r0
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f000 fd76 	bl	8009c18 <I2C_RequestMemoryWrite>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d052      	beq.n	80091d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e081      	b.n	800923a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009136:	697a      	ldr	r2, [r7, #20]
 8009138:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f001 f804 	bl	800a148 <I2C_WaitOnTXEFlagUntilTimeout>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00d      	beq.n	8009162 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800914a:	2b04      	cmp	r3, #4
 800914c:	d107      	bne.n	800915e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800915c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800915e:	2301      	movs	r3, #1
 8009160:	e06b      	b.n	800923a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009166:	781a      	ldrb	r2, [r3, #0]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009172:	1c5a      	adds	r2, r3, #1
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800917c:	3b01      	subs	r3, #1
 800917e:	b29a      	uxth	r2, r3
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009188:	b29b      	uxth	r3, r3
 800918a:	3b01      	subs	r3, #1
 800918c:	b29a      	uxth	r2, r3
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	695b      	ldr	r3, [r3, #20]
 8009198:	f003 0304 	and.w	r3, r3, #4
 800919c:	2b04      	cmp	r3, #4
 800919e:	d11b      	bne.n	80091d8 <HAL_I2C_Mem_Write+0x180>
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d017      	beq.n	80091d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ac:	781a      	ldrb	r2, [r3, #0]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091b8:	1c5a      	adds	r2, r3, #1
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091c2:	3b01      	subs	r3, #1
 80091c4:	b29a      	uxth	r2, r3
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	3b01      	subs	r3, #1
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d1aa      	bne.n	8009136 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091e0:	697a      	ldr	r2, [r7, #20]
 80091e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f000 fff7 	bl	800a1d8 <I2C_WaitOnBTFFlagUntilTimeout>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00d      	beq.n	800920c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091f4:	2b04      	cmp	r3, #4
 80091f6:	d107      	bne.n	8009208 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009206:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	e016      	b.n	800923a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800921a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2220      	movs	r2, #32
 8009220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2200      	movs	r2, #0
 8009230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009234:	2300      	movs	r3, #0
 8009236:	e000      	b.n	800923a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009238:	2302      	movs	r3, #2
  }
}
 800923a:	4618      	mov	r0, r3
 800923c:	3718      	adds	r7, #24
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	00100002 	.word	0x00100002
 8009248:	ffff0000 	.word	0xffff0000

0800924c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b08c      	sub	sp, #48	@ 0x30
 8009250:	af02      	add	r7, sp, #8
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	4608      	mov	r0, r1
 8009256:	4611      	mov	r1, r2
 8009258:	461a      	mov	r2, r3
 800925a:	4603      	mov	r3, r0
 800925c:	817b      	strh	r3, [r7, #10]
 800925e:	460b      	mov	r3, r1
 8009260:	813b      	strh	r3, [r7, #8]
 8009262:	4613      	mov	r3, r2
 8009264:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009266:	2300      	movs	r3, #0
 8009268:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800926a:	f7fe fad9 	bl	8007820 <HAL_GetTick>
 800926e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009276:	b2db      	uxtb	r3, r3
 8009278:	2b20      	cmp	r3, #32
 800927a:	f040 8244 	bne.w	8009706 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800927e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	2319      	movs	r3, #25
 8009284:	2201      	movs	r2, #1
 8009286:	4982      	ldr	r1, [pc, #520]	@ (8009490 <HAL_I2C_Mem_Read+0x244>)
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f000 fe43 	bl	8009f14 <I2C_WaitOnFlagUntilTimeout>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d001      	beq.n	8009298 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009294:	2302      	movs	r3, #2
 8009296:	e237      	b.n	8009708 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d101      	bne.n	80092a6 <HAL_I2C_Mem_Read+0x5a>
 80092a2:	2302      	movs	r3, #2
 80092a4:	e230      	b.n	8009708 <HAL_I2C_Mem_Read+0x4bc>
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2201      	movs	r2, #1
 80092aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f003 0301 	and.w	r3, r3, #1
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d007      	beq.n	80092cc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f042 0201 	orr.w	r2, r2, #1
 80092ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80092da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2222      	movs	r2, #34	@ 0x22
 80092e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2240      	movs	r2, #64	@ 0x40
 80092e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2200      	movs	r2, #0
 80092f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80092fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009302:	b29a      	uxth	r2, r3
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	4a62      	ldr	r2, [pc, #392]	@ (8009494 <HAL_I2C_Mem_Read+0x248>)
 800930c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800930e:	88f8      	ldrh	r0, [r7, #6]
 8009310:	893a      	ldrh	r2, [r7, #8]
 8009312:	8979      	ldrh	r1, [r7, #10]
 8009314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009316:	9301      	str	r3, [sp, #4]
 8009318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800931a:	9300      	str	r3, [sp, #0]
 800931c:	4603      	mov	r3, r0
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f000 fd10 	bl	8009d44 <I2C_RequestMemoryRead>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d001      	beq.n	800932e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	e1ec      	b.n	8009708 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009332:	2b00      	cmp	r3, #0
 8009334:	d113      	bne.n	800935e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009336:	2300      	movs	r3, #0
 8009338:	61fb      	str	r3, [r7, #28]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	695b      	ldr	r3, [r3, #20]
 8009340:	61fb      	str	r3, [r7, #28]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	699b      	ldr	r3, [r3, #24]
 8009348:	61fb      	str	r3, [r7, #28]
 800934a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800935a:	601a      	str	r2, [r3, #0]
 800935c:	e1c0      	b.n	80096e0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009362:	2b01      	cmp	r3, #1
 8009364:	d11e      	bne.n	80093a4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009374:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009376:	b672      	cpsid	i
}
 8009378:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800937a:	2300      	movs	r3, #0
 800937c:	61bb      	str	r3, [r7, #24]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	695b      	ldr	r3, [r3, #20]
 8009384:	61bb      	str	r3, [r7, #24]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	699b      	ldr	r3, [r3, #24]
 800938c:	61bb      	str	r3, [r7, #24]
 800938e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800939e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80093a0:	b662      	cpsie	i
}
 80093a2:	e035      	b.n	8009410 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093a8:	2b02      	cmp	r3, #2
 80093aa:	d11e      	bne.n	80093ea <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80093bc:	b672      	cpsid	i
}
 80093be:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093c0:	2300      	movs	r3, #0
 80093c2:	617b      	str	r3, [r7, #20]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	695b      	ldr	r3, [r3, #20]
 80093ca:	617b      	str	r3, [r7, #20]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	699b      	ldr	r3, [r3, #24]
 80093d2:	617b      	str	r3, [r7, #20]
 80093d4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80093e6:	b662      	cpsie	i
}
 80093e8:	e012      	b.n	8009410 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80093f8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093fa:	2300      	movs	r3, #0
 80093fc:	613b      	str	r3, [r7, #16]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	695b      	ldr	r3, [r3, #20]
 8009404:	613b      	str	r3, [r7, #16]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	699b      	ldr	r3, [r3, #24]
 800940c:	613b      	str	r3, [r7, #16]
 800940e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009410:	e166      	b.n	80096e0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009416:	2b03      	cmp	r3, #3
 8009418:	f200 811f 	bhi.w	800965a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009420:	2b01      	cmp	r3, #1
 8009422:	d123      	bne.n	800946c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009426:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f000 ff1d 	bl	800a268 <I2C_WaitOnRXNEFlagUntilTimeout>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d001      	beq.n	8009438 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	e167      	b.n	8009708 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	691a      	ldr	r2, [r3, #16]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009442:	b2d2      	uxtb	r2, r2
 8009444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800944a:	1c5a      	adds	r2, r3, #1
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009454:	3b01      	subs	r3, #1
 8009456:	b29a      	uxth	r2, r3
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009460:	b29b      	uxth	r3, r3
 8009462:	3b01      	subs	r3, #1
 8009464:	b29a      	uxth	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800946a:	e139      	b.n	80096e0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009470:	2b02      	cmp	r3, #2
 8009472:	d152      	bne.n	800951a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800947a:	2200      	movs	r2, #0
 800947c:	4906      	ldr	r1, [pc, #24]	@ (8009498 <HAL_I2C_Mem_Read+0x24c>)
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f000 fd48 	bl	8009f14 <I2C_WaitOnFlagUntilTimeout>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d008      	beq.n	800949c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	e13c      	b.n	8009708 <HAL_I2C_Mem_Read+0x4bc>
 800948e:	bf00      	nop
 8009490:	00100002 	.word	0x00100002
 8009494:	ffff0000 	.word	0xffff0000
 8009498:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800949c:	b672      	cpsid	i
}
 800949e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80094ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	691a      	ldr	r2, [r3, #16]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ba:	b2d2      	uxtb	r2, r2
 80094bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094c2:	1c5a      	adds	r2, r3, #1
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094cc:	3b01      	subs	r3, #1
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094d8:	b29b      	uxth	r3, r3
 80094da:	3b01      	subs	r3, #1
 80094dc:	b29a      	uxth	r2, r3
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80094e2:	b662      	cpsie	i
}
 80094e4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	691a      	ldr	r2, [r3, #16]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f0:	b2d2      	uxtb	r2, r2
 80094f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f8:	1c5a      	adds	r2, r3, #1
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009502:	3b01      	subs	r3, #1
 8009504:	b29a      	uxth	r2, r3
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800950e:	b29b      	uxth	r3, r3
 8009510:	3b01      	subs	r3, #1
 8009512:	b29a      	uxth	r2, r3
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009518:	e0e2      	b.n	80096e0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800951a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009520:	2200      	movs	r2, #0
 8009522:	497b      	ldr	r1, [pc, #492]	@ (8009710 <HAL_I2C_Mem_Read+0x4c4>)
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f000 fcf5 	bl	8009f14 <I2C_WaitOnFlagUntilTimeout>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d001      	beq.n	8009534 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	e0e9      	b.n	8009708 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009542:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009544:	b672      	cpsid	i
}
 8009546:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	691a      	ldr	r2, [r3, #16]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009552:	b2d2      	uxtb	r2, r2
 8009554:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800955a:	1c5a      	adds	r2, r3, #1
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009564:	3b01      	subs	r3, #1
 8009566:	b29a      	uxth	r2, r3
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009570:	b29b      	uxth	r3, r3
 8009572:	3b01      	subs	r3, #1
 8009574:	b29a      	uxth	r2, r3
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800957a:	4b66      	ldr	r3, [pc, #408]	@ (8009714 <HAL_I2C_Mem_Read+0x4c8>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	08db      	lsrs	r3, r3, #3
 8009580:	4a65      	ldr	r2, [pc, #404]	@ (8009718 <HAL_I2C_Mem_Read+0x4cc>)
 8009582:	fba2 2303 	umull	r2, r3, r2, r3
 8009586:	0a1a      	lsrs	r2, r3, #8
 8009588:	4613      	mov	r3, r2
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	4413      	add	r3, r2
 800958e:	00da      	lsls	r2, r3, #3
 8009590:	1ad3      	subs	r3, r2, r3
 8009592:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009594:	6a3b      	ldr	r3, [r7, #32]
 8009596:	3b01      	subs	r3, #1
 8009598:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800959a:	6a3b      	ldr	r3, [r7, #32]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d118      	bne.n	80095d2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2200      	movs	r2, #0
 80095a4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2220      	movs	r2, #32
 80095aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ba:	f043 0220 	orr.w	r2, r3, #32
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80095c2:	b662      	cpsie	i
}
 80095c4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	e09a      	b.n	8009708 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	695b      	ldr	r3, [r3, #20]
 80095d8:	f003 0304 	and.w	r3, r3, #4
 80095dc:	2b04      	cmp	r3, #4
 80095de:	d1d9      	bne.n	8009594 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	691a      	ldr	r2, [r3, #16]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095fa:	b2d2      	uxtb	r2, r2
 80095fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009602:	1c5a      	adds	r2, r3, #1
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800960c:	3b01      	subs	r3, #1
 800960e:	b29a      	uxth	r2, r3
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009618:	b29b      	uxth	r3, r3
 800961a:	3b01      	subs	r3, #1
 800961c:	b29a      	uxth	r2, r3
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009622:	b662      	cpsie	i
}
 8009624:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	691a      	ldr	r2, [r3, #16]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009630:	b2d2      	uxtb	r2, r2
 8009632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009638:	1c5a      	adds	r2, r3, #1
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009642:	3b01      	subs	r3, #1
 8009644:	b29a      	uxth	r2, r3
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800964e:	b29b      	uxth	r3, r3
 8009650:	3b01      	subs	r3, #1
 8009652:	b29a      	uxth	r2, r3
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009658:	e042      	b.n	80096e0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800965a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800965c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f000 fe02 	bl	800a268 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d001      	beq.n	800966e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e04c      	b.n	8009708 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	691a      	ldr	r2, [r3, #16]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009678:	b2d2      	uxtb	r2, r2
 800967a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009680:	1c5a      	adds	r2, r3, #1
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800968a:	3b01      	subs	r3, #1
 800968c:	b29a      	uxth	r2, r3
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009696:	b29b      	uxth	r3, r3
 8009698:	3b01      	subs	r3, #1
 800969a:	b29a      	uxth	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	695b      	ldr	r3, [r3, #20]
 80096a6:	f003 0304 	and.w	r3, r3, #4
 80096aa:	2b04      	cmp	r3, #4
 80096ac:	d118      	bne.n	80096e0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	691a      	ldr	r2, [r3, #16]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096b8:	b2d2      	uxtb	r2, r2
 80096ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096c0:	1c5a      	adds	r2, r3, #1
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096ca:	3b01      	subs	r3, #1
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	3b01      	subs	r3, #1
 80096da:	b29a      	uxth	r2, r3
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f47f ae94 	bne.w	8009412 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2220      	movs	r2, #32
 80096ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	e000      	b.n	8009708 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009706:	2302      	movs	r3, #2
  }
}
 8009708:	4618      	mov	r0, r3
 800970a:	3728      	adds	r7, #40	@ 0x28
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	00010004 	.word	0x00010004
 8009714:	20000018 	.word	0x20000018
 8009718:	14f8b589 	.word	0x14f8b589

0800971c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b08a      	sub	sp, #40	@ 0x28
 8009720:	af02      	add	r7, sp, #8
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	607a      	str	r2, [r7, #4]
 8009726:	603b      	str	r3, [r7, #0]
 8009728:	460b      	mov	r3, r1
 800972a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800972c:	f7fe f878 	bl	8007820 <HAL_GetTick>
 8009730:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8009732:	2300      	movs	r3, #0
 8009734:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800973c:	b2db      	uxtb	r3, r3
 800973e:	2b20      	cmp	r3, #32
 8009740:	f040 8111 	bne.w	8009966 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	2319      	movs	r3, #25
 800974a:	2201      	movs	r2, #1
 800974c:	4988      	ldr	r1, [pc, #544]	@ (8009970 <HAL_I2C_IsDeviceReady+0x254>)
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f000 fbe0 	bl	8009f14 <I2C_WaitOnFlagUntilTimeout>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d001      	beq.n	800975e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800975a:	2302      	movs	r3, #2
 800975c:	e104      	b.n	8009968 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009764:	2b01      	cmp	r3, #1
 8009766:	d101      	bne.n	800976c <HAL_I2C_IsDeviceReady+0x50>
 8009768:	2302      	movs	r3, #2
 800976a:	e0fd      	b.n	8009968 <HAL_I2C_IsDeviceReady+0x24c>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2201      	movs	r2, #1
 8009770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f003 0301 	and.w	r3, r3, #1
 800977e:	2b01      	cmp	r3, #1
 8009780:	d007      	beq.n	8009792 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f042 0201 	orr.w	r2, r2, #1
 8009790:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80097a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2224      	movs	r2, #36	@ 0x24
 80097a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	4a70      	ldr	r2, [pc, #448]	@ (8009974 <HAL_I2C_IsDeviceReady+0x258>)
 80097b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80097c4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	9300      	str	r3, [sp, #0]
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f000 fb9e 	bl	8009f14 <I2C_WaitOnFlagUntilTimeout>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00d      	beq.n	80097fa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097ec:	d103      	bne.n	80097f6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80097f4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80097f6:	2303      	movs	r3, #3
 80097f8:	e0b6      	b.n	8009968 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80097fa:	897b      	ldrh	r3, [r7, #10]
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	461a      	mov	r2, r3
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009808:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800980a:	f7fe f809 	bl	8007820 <HAL_GetTick>
 800980e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	695b      	ldr	r3, [r3, #20]
 8009816:	f003 0302 	and.w	r3, r3, #2
 800981a:	2b02      	cmp	r3, #2
 800981c:	bf0c      	ite	eq
 800981e:	2301      	moveq	r3, #1
 8009820:	2300      	movne	r3, #0
 8009822:	b2db      	uxtb	r3, r3
 8009824:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	695b      	ldr	r3, [r3, #20]
 800982c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009830:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009834:	bf0c      	ite	eq
 8009836:	2301      	moveq	r3, #1
 8009838:	2300      	movne	r3, #0
 800983a:	b2db      	uxtb	r3, r3
 800983c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800983e:	e025      	b.n	800988c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009840:	f7fd ffee 	bl	8007820 <HAL_GetTick>
 8009844:	4602      	mov	r2, r0
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	1ad3      	subs	r3, r2, r3
 800984a:	683a      	ldr	r2, [r7, #0]
 800984c:	429a      	cmp	r2, r3
 800984e:	d302      	bcc.n	8009856 <HAL_I2C_IsDeviceReady+0x13a>
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d103      	bne.n	800985e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	22a0      	movs	r2, #160	@ 0xa0
 800985a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	695b      	ldr	r3, [r3, #20]
 8009864:	f003 0302 	and.w	r3, r3, #2
 8009868:	2b02      	cmp	r3, #2
 800986a:	bf0c      	ite	eq
 800986c:	2301      	moveq	r3, #1
 800986e:	2300      	movne	r3, #0
 8009870:	b2db      	uxtb	r3, r3
 8009872:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	695b      	ldr	r3, [r3, #20]
 800987a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800987e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009882:	bf0c      	ite	eq
 8009884:	2301      	moveq	r3, #1
 8009886:	2300      	movne	r3, #0
 8009888:	b2db      	uxtb	r3, r3
 800988a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009892:	b2db      	uxtb	r3, r3
 8009894:	2ba0      	cmp	r3, #160	@ 0xa0
 8009896:	d005      	beq.n	80098a4 <HAL_I2C_IsDeviceReady+0x188>
 8009898:	7dfb      	ldrb	r3, [r7, #23]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d102      	bne.n	80098a4 <HAL_I2C_IsDeviceReady+0x188>
 800989e:	7dbb      	ldrb	r3, [r7, #22]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d0cd      	beq.n	8009840 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2220      	movs	r2, #32
 80098a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	695b      	ldr	r3, [r3, #20]
 80098b2:	f003 0302 	and.w	r3, r3, #2
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	d129      	bne.n	800990e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80098c8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098ca:	2300      	movs	r3, #0
 80098cc:	613b      	str	r3, [r7, #16]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	695b      	ldr	r3, [r3, #20]
 80098d4:	613b      	str	r3, [r7, #16]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	699b      	ldr	r3, [r3, #24]
 80098dc:	613b      	str	r3, [r7, #16]
 80098de:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	9300      	str	r3, [sp, #0]
 80098e4:	2319      	movs	r3, #25
 80098e6:	2201      	movs	r2, #1
 80098e8:	4921      	ldr	r1, [pc, #132]	@ (8009970 <HAL_I2C_IsDeviceReady+0x254>)
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f000 fb12 	bl	8009f14 <I2C_WaitOnFlagUntilTimeout>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d001      	beq.n	80098fa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e036      	b.n	8009968 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2220      	movs	r2, #32
 80098fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800990a:	2300      	movs	r3, #0
 800990c:	e02c      	b.n	8009968 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800991c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009926:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	9300      	str	r3, [sp, #0]
 800992c:	2319      	movs	r3, #25
 800992e:	2201      	movs	r2, #1
 8009930:	490f      	ldr	r1, [pc, #60]	@ (8009970 <HAL_I2C_IsDeviceReady+0x254>)
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f000 faee 	bl	8009f14 <I2C_WaitOnFlagUntilTimeout>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d001      	beq.n	8009942 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e012      	b.n	8009968 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	3301      	adds	r3, #1
 8009946:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8009948:	69ba      	ldr	r2, [r7, #24]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	429a      	cmp	r2, r3
 800994e:	f4ff af32 	bcc.w	80097b6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2220      	movs	r2, #32
 8009956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2200      	movs	r2, #0
 800995e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	e000      	b.n	8009968 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8009966:	2302      	movs	r3, #2
  }
}
 8009968:	4618      	mov	r0, r3
 800996a:	3720      	adds	r7, #32
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	00100002 	.word	0x00100002
 8009974:	ffff0000 	.word	0xffff0000

08009978 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b088      	sub	sp, #32
 800997c:	af02      	add	r7, sp, #8
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	607a      	str	r2, [r7, #4]
 8009982:	603b      	str	r3, [r7, #0]
 8009984:	460b      	mov	r3, r1
 8009986:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800998c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	2b08      	cmp	r3, #8
 8009992:	d006      	beq.n	80099a2 <I2C_MasterRequestWrite+0x2a>
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	2b01      	cmp	r3, #1
 8009998:	d003      	beq.n	80099a2 <I2C_MasterRequestWrite+0x2a>
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80099a0:	d108      	bne.n	80099b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80099b0:	601a      	str	r2, [r3, #0]
 80099b2:	e00b      	b.n	80099cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099b8:	2b12      	cmp	r3, #18
 80099ba:	d107      	bne.n	80099cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80099ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	9300      	str	r3, [sp, #0]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2200      	movs	r2, #0
 80099d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80099d8:	68f8      	ldr	r0, [r7, #12]
 80099da:	f000 fa9b 	bl	8009f14 <I2C_WaitOnFlagUntilTimeout>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d00d      	beq.n	8009a00 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099f2:	d103      	bne.n	80099fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80099fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80099fc:	2303      	movs	r3, #3
 80099fe:	e035      	b.n	8009a6c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	691b      	ldr	r3, [r3, #16]
 8009a04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009a08:	d108      	bne.n	8009a1c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009a0a:	897b      	ldrh	r3, [r7, #10]
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	461a      	mov	r2, r3
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009a18:	611a      	str	r2, [r3, #16]
 8009a1a:	e01b      	b.n	8009a54 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009a1c:	897b      	ldrh	r3, [r7, #10]
 8009a1e:	11db      	asrs	r3, r3, #7
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	f003 0306 	and.w	r3, r3, #6
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	f063 030f 	orn	r3, r3, #15
 8009a2c:	b2da      	uxtb	r2, r3
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	490e      	ldr	r1, [pc, #56]	@ (8009a74 <I2C_MasterRequestWrite+0xfc>)
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	f000 fae4 	bl	800a008 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d001      	beq.n	8009a4a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	e010      	b.n	8009a6c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009a4a:	897b      	ldrh	r3, [r7, #10]
 8009a4c:	b2da      	uxtb	r2, r3
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	4907      	ldr	r1, [pc, #28]	@ (8009a78 <I2C_MasterRequestWrite+0x100>)
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f000 fad4 	bl	800a008 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d001      	beq.n	8009a6a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	e000      	b.n	8009a6c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3718      	adds	r7, #24
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	00010008 	.word	0x00010008
 8009a78:	00010002 	.word	0x00010002

08009a7c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b088      	sub	sp, #32
 8009a80:	af02      	add	r7, sp, #8
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	607a      	str	r2, [r7, #4]
 8009a86:	603b      	str	r3, [r7, #0]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a90:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009aa0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	2b08      	cmp	r3, #8
 8009aa6:	d006      	beq.n	8009ab6 <I2C_MasterRequestRead+0x3a>
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d003      	beq.n	8009ab6 <I2C_MasterRequestRead+0x3a>
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009ab4:	d108      	bne.n	8009ac8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009ac4:	601a      	str	r2, [r3, #0]
 8009ac6:	e00b      	b.n	8009ae0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009acc:	2b11      	cmp	r3, #17
 8009ace:	d107      	bne.n	8009ae0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009ade:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	9300      	str	r3, [sp, #0]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f000 fa11 	bl	8009f14 <I2C_WaitOnFlagUntilTimeout>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00d      	beq.n	8009b14 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b06:	d103      	bne.n	8009b10 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009b10:	2303      	movs	r3, #3
 8009b12:	e079      	b.n	8009c08 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b1c:	d108      	bne.n	8009b30 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009b1e:	897b      	ldrh	r3, [r7, #10]
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	f043 0301 	orr.w	r3, r3, #1
 8009b26:	b2da      	uxtb	r2, r3
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	611a      	str	r2, [r3, #16]
 8009b2e:	e05f      	b.n	8009bf0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009b30:	897b      	ldrh	r3, [r7, #10]
 8009b32:	11db      	asrs	r3, r3, #7
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	f003 0306 	and.w	r3, r3, #6
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	f063 030f 	orn	r3, r3, #15
 8009b40:	b2da      	uxtb	r2, r3
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	4930      	ldr	r1, [pc, #192]	@ (8009c10 <I2C_MasterRequestRead+0x194>)
 8009b4e:	68f8      	ldr	r0, [r7, #12]
 8009b50:	f000 fa5a 	bl	800a008 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d001      	beq.n	8009b5e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e054      	b.n	8009c08 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009b5e:	897b      	ldrh	r3, [r7, #10]
 8009b60:	b2da      	uxtb	r2, r3
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	4929      	ldr	r1, [pc, #164]	@ (8009c14 <I2C_MasterRequestRead+0x198>)
 8009b6e:	68f8      	ldr	r0, [r7, #12]
 8009b70:	f000 fa4a 	bl	800a008 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d001      	beq.n	8009b7e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e044      	b.n	8009c08 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b7e:	2300      	movs	r3, #0
 8009b80:	613b      	str	r3, [r7, #16]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	695b      	ldr	r3, [r3, #20]
 8009b88:	613b      	str	r3, [r7, #16]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	699b      	ldr	r3, [r3, #24]
 8009b90:	613b      	str	r3, [r7, #16]
 8009b92:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009ba2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f000 f9af 	bl	8009f14 <I2C_WaitOnFlagUntilTimeout>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00d      	beq.n	8009bd8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bca:	d103      	bne.n	8009bd4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009bd2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	e017      	b.n	8009c08 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009bd8:	897b      	ldrh	r3, [r7, #10]
 8009bda:	11db      	asrs	r3, r3, #7
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	f003 0306 	and.w	r3, r3, #6
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	f063 030e 	orn	r3, r3, #14
 8009be8:	b2da      	uxtb	r2, r3
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	4907      	ldr	r1, [pc, #28]	@ (8009c14 <I2C_MasterRequestRead+0x198>)
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f000 fa06 	bl	800a008 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d001      	beq.n	8009c06 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e000      	b.n	8009c08 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3718      	adds	r7, #24
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	00010008 	.word	0x00010008
 8009c14:	00010002 	.word	0x00010002

08009c18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b088      	sub	sp, #32
 8009c1c:	af02      	add	r7, sp, #8
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	4608      	mov	r0, r1
 8009c22:	4611      	mov	r1, r2
 8009c24:	461a      	mov	r2, r3
 8009c26:	4603      	mov	r3, r0
 8009c28:	817b      	strh	r3, [r7, #10]
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	813b      	strh	r3, [r7, #8]
 8009c2e:	4613      	mov	r3, r2
 8009c30:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009c40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c44:	9300      	str	r3, [sp, #0]
 8009c46:	6a3b      	ldr	r3, [r7, #32]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f000 f960 	bl	8009f14 <I2C_WaitOnFlagUntilTimeout>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00d      	beq.n	8009c76 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c68:	d103      	bne.n	8009c72 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c70:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009c72:	2303      	movs	r3, #3
 8009c74:	e05f      	b.n	8009d36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009c76:	897b      	ldrh	r3, [r7, #10]
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009c84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c88:	6a3a      	ldr	r2, [r7, #32]
 8009c8a:	492d      	ldr	r1, [pc, #180]	@ (8009d40 <I2C_RequestMemoryWrite+0x128>)
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f000 f9bb 	bl	800a008 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d001      	beq.n	8009c9c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e04c      	b.n	8009d36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	617b      	str	r3, [r7, #20]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	695b      	ldr	r3, [r3, #20]
 8009ca6:	617b      	str	r3, [r7, #20]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	699b      	ldr	r3, [r3, #24]
 8009cae:	617b      	str	r3, [r7, #20]
 8009cb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cb4:	6a39      	ldr	r1, [r7, #32]
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f000 fa46 	bl	800a148 <I2C_WaitOnTXEFlagUntilTimeout>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00d      	beq.n	8009cde <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cc6:	2b04      	cmp	r3, #4
 8009cc8:	d107      	bne.n	8009cda <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009cd8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e02b      	b.n	8009d36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009cde:	88fb      	ldrh	r3, [r7, #6]
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d105      	bne.n	8009cf0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ce4:	893b      	ldrh	r3, [r7, #8]
 8009ce6:	b2da      	uxtb	r2, r3
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	611a      	str	r2, [r3, #16]
 8009cee:	e021      	b.n	8009d34 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009cf0:	893b      	ldrh	r3, [r7, #8]
 8009cf2:	0a1b      	lsrs	r3, r3, #8
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	b2da      	uxtb	r2, r3
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d00:	6a39      	ldr	r1, [r7, #32]
 8009d02:	68f8      	ldr	r0, [r7, #12]
 8009d04:	f000 fa20 	bl	800a148 <I2C_WaitOnTXEFlagUntilTimeout>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00d      	beq.n	8009d2a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d12:	2b04      	cmp	r3, #4
 8009d14:	d107      	bne.n	8009d26 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009d24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	e005      	b.n	8009d36 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009d2a:	893b      	ldrh	r3, [r7, #8]
 8009d2c:	b2da      	uxtb	r2, r3
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3718      	adds	r7, #24
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	00010002 	.word	0x00010002

08009d44 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b088      	sub	sp, #32
 8009d48:	af02      	add	r7, sp, #8
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	4608      	mov	r0, r1
 8009d4e:	4611      	mov	r1, r2
 8009d50:	461a      	mov	r2, r3
 8009d52:	4603      	mov	r3, r0
 8009d54:	817b      	strh	r3, [r7, #10]
 8009d56:	460b      	mov	r3, r1
 8009d58:	813b      	strh	r3, [r7, #8]
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009d6c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009d7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d80:	9300      	str	r3, [sp, #0]
 8009d82:	6a3b      	ldr	r3, [r7, #32]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009d8a:	68f8      	ldr	r0, [r7, #12]
 8009d8c:	f000 f8c2 	bl	8009f14 <I2C_WaitOnFlagUntilTimeout>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00d      	beq.n	8009db2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009da0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009da4:	d103      	bne.n	8009dae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009dac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009dae:	2303      	movs	r3, #3
 8009db0:	e0aa      	b.n	8009f08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009db2:	897b      	ldrh	r3, [r7, #10]
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	461a      	mov	r2, r3
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009dc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc4:	6a3a      	ldr	r2, [r7, #32]
 8009dc6:	4952      	ldr	r1, [pc, #328]	@ (8009f10 <I2C_RequestMemoryRead+0x1cc>)
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	f000 f91d 	bl	800a008 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d001      	beq.n	8009dd8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	e097      	b.n	8009f08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009dd8:	2300      	movs	r3, #0
 8009dda:	617b      	str	r3, [r7, #20]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	695b      	ldr	r3, [r3, #20]
 8009de2:	617b      	str	r3, [r7, #20]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	699b      	ldr	r3, [r3, #24]
 8009dea:	617b      	str	r3, [r7, #20]
 8009dec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009df0:	6a39      	ldr	r1, [r7, #32]
 8009df2:	68f8      	ldr	r0, [r7, #12]
 8009df4:	f000 f9a8 	bl	800a148 <I2C_WaitOnTXEFlagUntilTimeout>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00d      	beq.n	8009e1a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e02:	2b04      	cmp	r3, #4
 8009e04:	d107      	bne.n	8009e16 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e076      	b.n	8009f08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009e1a:	88fb      	ldrh	r3, [r7, #6]
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d105      	bne.n	8009e2c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009e20:	893b      	ldrh	r3, [r7, #8]
 8009e22:	b2da      	uxtb	r2, r3
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	611a      	str	r2, [r3, #16]
 8009e2a:	e021      	b.n	8009e70 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009e2c:	893b      	ldrh	r3, [r7, #8]
 8009e2e:	0a1b      	lsrs	r3, r3, #8
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	b2da      	uxtb	r2, r3
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e3c:	6a39      	ldr	r1, [r7, #32]
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f000 f982 	bl	800a148 <I2C_WaitOnTXEFlagUntilTimeout>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00d      	beq.n	8009e66 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e4e:	2b04      	cmp	r3, #4
 8009e50:	d107      	bne.n	8009e62 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009e62:	2301      	movs	r3, #1
 8009e64:	e050      	b.n	8009f08 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009e66:	893b      	ldrh	r3, [r7, #8]
 8009e68:	b2da      	uxtb	r2, r3
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e72:	6a39      	ldr	r1, [r7, #32]
 8009e74:	68f8      	ldr	r0, [r7, #12]
 8009e76:	f000 f967 	bl	800a148 <I2C_WaitOnTXEFlagUntilTimeout>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d00d      	beq.n	8009e9c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e84:	2b04      	cmp	r3, #4
 8009e86:	d107      	bne.n	8009e98 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e96:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	e035      	b.n	8009f08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009eaa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eae:	9300      	str	r3, [sp, #0]
 8009eb0:	6a3b      	ldr	r3, [r7, #32]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f000 f82b 	bl	8009f14 <I2C_WaitOnFlagUntilTimeout>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d00d      	beq.n	8009ee0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ece:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ed2:	d103      	bne.n	8009edc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009eda:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009edc:	2303      	movs	r3, #3
 8009ede:	e013      	b.n	8009f08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009ee0:	897b      	ldrh	r3, [r7, #10]
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	f043 0301 	orr.w	r3, r3, #1
 8009ee8:	b2da      	uxtb	r2, r3
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef2:	6a3a      	ldr	r2, [r7, #32]
 8009ef4:	4906      	ldr	r1, [pc, #24]	@ (8009f10 <I2C_RequestMemoryRead+0x1cc>)
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f000 f886 	bl	800a008 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d001      	beq.n	8009f06 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e000      	b.n	8009f08 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3718      	adds	r7, #24
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	00010002 	.word	0x00010002

08009f14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	603b      	str	r3, [r7, #0]
 8009f20:	4613      	mov	r3, r2
 8009f22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f24:	e048      	b.n	8009fb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f2c:	d044      	beq.n	8009fb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f2e:	f7fd fc77 	bl	8007820 <HAL_GetTick>
 8009f32:	4602      	mov	r2, r0
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	1ad3      	subs	r3, r2, r3
 8009f38:	683a      	ldr	r2, [r7, #0]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d302      	bcc.n	8009f44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d139      	bne.n	8009fb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	0c1b      	lsrs	r3, r3, #16
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d10d      	bne.n	8009f6a <I2C_WaitOnFlagUntilTimeout+0x56>
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	695b      	ldr	r3, [r3, #20]
 8009f54:	43da      	mvns	r2, r3
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	4013      	ands	r3, r2
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	bf0c      	ite	eq
 8009f60:	2301      	moveq	r3, #1
 8009f62:	2300      	movne	r3, #0
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	461a      	mov	r2, r3
 8009f68:	e00c      	b.n	8009f84 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	699b      	ldr	r3, [r3, #24]
 8009f70:	43da      	mvns	r2, r3
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	4013      	ands	r3, r2
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	bf0c      	ite	eq
 8009f7c:	2301      	moveq	r3, #1
 8009f7e:	2300      	movne	r3, #0
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	461a      	mov	r2, r3
 8009f84:	79fb      	ldrb	r3, [r7, #7]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d116      	bne.n	8009fb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2220      	movs	r2, #32
 8009f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fa4:	f043 0220 	orr.w	r2, r3, #32
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	e023      	b.n	800a000 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	0c1b      	lsrs	r3, r3, #16
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d10d      	bne.n	8009fde <I2C_WaitOnFlagUntilTimeout+0xca>
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	695b      	ldr	r3, [r3, #20]
 8009fc8:	43da      	mvns	r2, r3
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	4013      	ands	r3, r2
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	bf0c      	ite	eq
 8009fd4:	2301      	moveq	r3, #1
 8009fd6:	2300      	movne	r3, #0
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	461a      	mov	r2, r3
 8009fdc:	e00c      	b.n	8009ff8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	699b      	ldr	r3, [r3, #24]
 8009fe4:	43da      	mvns	r2, r3
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	4013      	ands	r3, r2
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	bf0c      	ite	eq
 8009ff0:	2301      	moveq	r3, #1
 8009ff2:	2300      	movne	r3, #0
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	79fb      	ldrb	r3, [r7, #7]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d093      	beq.n	8009f26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3710      	adds	r7, #16
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	607a      	str	r2, [r7, #4]
 800a014:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a016:	e071      	b.n	800a0fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	695b      	ldr	r3, [r3, #20]
 800a01e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a026:	d123      	bne.n	800a070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a036:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a040:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2200      	movs	r2, #0
 800a046:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2220      	movs	r2, #32
 800a04c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a05c:	f043 0204 	orr.w	r2, r3, #4
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	e067      	b.n	800a140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a076:	d041      	beq.n	800a0fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a078:	f7fd fbd2 	bl	8007820 <HAL_GetTick>
 800a07c:	4602      	mov	r2, r0
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	1ad3      	subs	r3, r2, r3
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	429a      	cmp	r2, r3
 800a086:	d302      	bcc.n	800a08e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d136      	bne.n	800a0fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	0c1b      	lsrs	r3, r3, #16
 800a092:	b2db      	uxtb	r3, r3
 800a094:	2b01      	cmp	r3, #1
 800a096:	d10c      	bne.n	800a0b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	695b      	ldr	r3, [r3, #20]
 800a09e:	43da      	mvns	r2, r3
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	4013      	ands	r3, r2
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	bf14      	ite	ne
 800a0aa:	2301      	movne	r3, #1
 800a0ac:	2300      	moveq	r3, #0
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	e00b      	b.n	800a0ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	699b      	ldr	r3, [r3, #24]
 800a0b8:	43da      	mvns	r2, r3
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	4013      	ands	r3, r2
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	bf14      	ite	ne
 800a0c4:	2301      	movne	r3, #1
 800a0c6:	2300      	moveq	r3, #0
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d016      	beq.n	800a0fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2220      	movs	r2, #32
 800a0d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0e8:	f043 0220 	orr.w	r2, r3, #32
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e021      	b.n	800a140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	0c1b      	lsrs	r3, r3, #16
 800a100:	b2db      	uxtb	r3, r3
 800a102:	2b01      	cmp	r3, #1
 800a104:	d10c      	bne.n	800a120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	695b      	ldr	r3, [r3, #20]
 800a10c:	43da      	mvns	r2, r3
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	4013      	ands	r3, r2
 800a112:	b29b      	uxth	r3, r3
 800a114:	2b00      	cmp	r3, #0
 800a116:	bf14      	ite	ne
 800a118:	2301      	movne	r3, #1
 800a11a:	2300      	moveq	r3, #0
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	e00b      	b.n	800a138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	699b      	ldr	r3, [r3, #24]
 800a126:	43da      	mvns	r2, r3
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	4013      	ands	r3, r2
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	2b00      	cmp	r3, #0
 800a130:	bf14      	ite	ne
 800a132:	2301      	movne	r3, #1
 800a134:	2300      	moveq	r3, #0
 800a136:	b2db      	uxtb	r3, r3
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f47f af6d 	bne.w	800a018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a13e:	2300      	movs	r3, #0
}
 800a140:	4618      	mov	r0, r3
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a154:	e034      	b.n	800a1c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	f000 f8e3 	bl	800a322 <I2C_IsAcknowledgeFailed>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d001      	beq.n	800a166 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	e034      	b.n	800a1d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a16c:	d028      	beq.n	800a1c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a16e:	f7fd fb57 	bl	8007820 <HAL_GetTick>
 800a172:	4602      	mov	r2, r0
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	1ad3      	subs	r3, r2, r3
 800a178:	68ba      	ldr	r2, [r7, #8]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d302      	bcc.n	800a184 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d11d      	bne.n	800a1c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	695b      	ldr	r3, [r3, #20]
 800a18a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a18e:	2b80      	cmp	r3, #128	@ 0x80
 800a190:	d016      	beq.n	800a1c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2200      	movs	r2, #0
 800a196:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2220      	movs	r2, #32
 800a19c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1ac:	f043 0220 	orr.w	r2, r3, #32
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	e007      	b.n	800a1d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	695b      	ldr	r3, [r3, #20]
 800a1c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1ca:	2b80      	cmp	r3, #128	@ 0x80
 800a1cc:	d1c3      	bne.n	800a156 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a1ce:	2300      	movs	r3, #0
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a1e4:	e034      	b.n	800a250 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f000 f89b 	bl	800a322 <I2C_IsAcknowledgeFailed>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d001      	beq.n	800a1f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e034      	b.n	800a260 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1fc:	d028      	beq.n	800a250 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1fe:	f7fd fb0f 	bl	8007820 <HAL_GetTick>
 800a202:	4602      	mov	r2, r0
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	1ad3      	subs	r3, r2, r3
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d302      	bcc.n	800a214 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d11d      	bne.n	800a250 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	695b      	ldr	r3, [r3, #20]
 800a21a:	f003 0304 	and.w	r3, r3, #4
 800a21e:	2b04      	cmp	r3, #4
 800a220:	d016      	beq.n	800a250 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2200      	movs	r2, #0
 800a226:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2220      	movs	r2, #32
 800a22c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a23c:	f043 0220 	orr.w	r2, r3, #32
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a24c:	2301      	movs	r3, #1
 800a24e:	e007      	b.n	800a260 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	695b      	ldr	r3, [r3, #20]
 800a256:	f003 0304 	and.w	r3, r3, #4
 800a25a:	2b04      	cmp	r3, #4
 800a25c:	d1c3      	bne.n	800a1e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3710      	adds	r7, #16
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a274:	e049      	b.n	800a30a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	695b      	ldr	r3, [r3, #20]
 800a27c:	f003 0310 	and.w	r3, r3, #16
 800a280:	2b10      	cmp	r3, #16
 800a282:	d119      	bne.n	800a2b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f06f 0210 	mvn.w	r2, #16
 800a28c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2200      	movs	r2, #0
 800a292:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2220      	movs	r2, #32
 800a298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e030      	b.n	800a31a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2b8:	f7fd fab2 	bl	8007820 <HAL_GetTick>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	1ad3      	subs	r3, r2, r3
 800a2c2:	68ba      	ldr	r2, [r7, #8]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d302      	bcc.n	800a2ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d11d      	bne.n	800a30a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	695b      	ldr	r3, [r3, #20]
 800a2d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2d8:	2b40      	cmp	r3, #64	@ 0x40
 800a2da:	d016      	beq.n	800a30a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2220      	movs	r2, #32
 800a2e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2f6:	f043 0220 	orr.w	r2, r3, #32
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2200      	movs	r2, #0
 800a302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800a306:	2301      	movs	r3, #1
 800a308:	e007      	b.n	800a31a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	695b      	ldr	r3, [r3, #20]
 800a310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a314:	2b40      	cmp	r3, #64	@ 0x40
 800a316:	d1ae      	bne.n	800a276 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a322:	b480      	push	{r7}
 800a324:	b083      	sub	sp, #12
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	695b      	ldr	r3, [r3, #20]
 800a330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a334:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a338:	d11b      	bne.n	800a372 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a342:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2220      	movs	r2, #32
 800a34e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a35e:	f043 0204 	orr.w	r2, r3, #4
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a36e:	2301      	movs	r3, #1
 800a370:	e000      	b.n	800a374 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a372:	2300      	movs	r3, #0
}
 800a374:	4618      	mov	r0, r3
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	bc80      	pop	{r7}
 800a37c:	4770      	bx	lr
	...

0800a380 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b086      	sub	sp, #24
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d101      	bne.n	800a392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a38e:	2301      	movs	r3, #1
 800a390:	e272      	b.n	800a878 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f003 0301 	and.w	r3, r3, #1
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	f000 8087 	beq.w	800a4ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a3a0:	4b92      	ldr	r3, [pc, #584]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	f003 030c 	and.w	r3, r3, #12
 800a3a8:	2b04      	cmp	r3, #4
 800a3aa:	d00c      	beq.n	800a3c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a3ac:	4b8f      	ldr	r3, [pc, #572]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	f003 030c 	and.w	r3, r3, #12
 800a3b4:	2b08      	cmp	r3, #8
 800a3b6:	d112      	bne.n	800a3de <HAL_RCC_OscConfig+0x5e>
 800a3b8:	4b8c      	ldr	r3, [pc, #560]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a3c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3c4:	d10b      	bne.n	800a3de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3c6:	4b89      	ldr	r3, [pc, #548]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d06c      	beq.n	800a4ac <HAL_RCC_OscConfig+0x12c>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d168      	bne.n	800a4ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e24c      	b.n	800a878 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3e6:	d106      	bne.n	800a3f6 <HAL_RCC_OscConfig+0x76>
 800a3e8:	4b80      	ldr	r3, [pc, #512]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a7f      	ldr	r2, [pc, #508]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a3ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a3f2:	6013      	str	r3, [r2, #0]
 800a3f4:	e02e      	b.n	800a454 <HAL_RCC_OscConfig+0xd4>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d10c      	bne.n	800a418 <HAL_RCC_OscConfig+0x98>
 800a3fe:	4b7b      	ldr	r3, [pc, #492]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a7a      	ldr	r2, [pc, #488]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a404:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a408:	6013      	str	r3, [r2, #0]
 800a40a:	4b78      	ldr	r3, [pc, #480]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a77      	ldr	r2, [pc, #476]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a410:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a414:	6013      	str	r3, [r2, #0]
 800a416:	e01d      	b.n	800a454 <HAL_RCC_OscConfig+0xd4>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a420:	d10c      	bne.n	800a43c <HAL_RCC_OscConfig+0xbc>
 800a422:	4b72      	ldr	r3, [pc, #456]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a71      	ldr	r2, [pc, #452]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a428:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a42c:	6013      	str	r3, [r2, #0]
 800a42e:	4b6f      	ldr	r3, [pc, #444]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a6e      	ldr	r2, [pc, #440]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a438:	6013      	str	r3, [r2, #0]
 800a43a:	e00b      	b.n	800a454 <HAL_RCC_OscConfig+0xd4>
 800a43c:	4b6b      	ldr	r3, [pc, #428]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a6a      	ldr	r2, [pc, #424]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a442:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a446:	6013      	str	r3, [r2, #0]
 800a448:	4b68      	ldr	r3, [pc, #416]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a67      	ldr	r2, [pc, #412]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a44e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a452:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d013      	beq.n	800a484 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a45c:	f7fd f9e0 	bl	8007820 <HAL_GetTick>
 800a460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a462:	e008      	b.n	800a476 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a464:	f7fd f9dc 	bl	8007820 <HAL_GetTick>
 800a468:	4602      	mov	r2, r0
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	1ad3      	subs	r3, r2, r3
 800a46e:	2b64      	cmp	r3, #100	@ 0x64
 800a470:	d901      	bls.n	800a476 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a472:	2303      	movs	r3, #3
 800a474:	e200      	b.n	800a878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a476:	4b5d      	ldr	r3, [pc, #372]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d0f0      	beq.n	800a464 <HAL_RCC_OscConfig+0xe4>
 800a482:	e014      	b.n	800a4ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a484:	f7fd f9cc 	bl	8007820 <HAL_GetTick>
 800a488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a48a:	e008      	b.n	800a49e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a48c:	f7fd f9c8 	bl	8007820 <HAL_GetTick>
 800a490:	4602      	mov	r2, r0
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	1ad3      	subs	r3, r2, r3
 800a496:	2b64      	cmp	r3, #100	@ 0x64
 800a498:	d901      	bls.n	800a49e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a49a:	2303      	movs	r3, #3
 800a49c:	e1ec      	b.n	800a878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a49e:	4b53      	ldr	r3, [pc, #332]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1f0      	bne.n	800a48c <HAL_RCC_OscConfig+0x10c>
 800a4aa:	e000      	b.n	800a4ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f003 0302 	and.w	r3, r3, #2
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d063      	beq.n	800a582 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a4ba:	4b4c      	ldr	r3, [pc, #304]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	f003 030c 	and.w	r3, r3, #12
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d00b      	beq.n	800a4de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a4c6:	4b49      	ldr	r3, [pc, #292]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	f003 030c 	and.w	r3, r3, #12
 800a4ce:	2b08      	cmp	r3, #8
 800a4d0:	d11c      	bne.n	800a50c <HAL_RCC_OscConfig+0x18c>
 800a4d2:	4b46      	ldr	r3, [pc, #280]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d116      	bne.n	800a50c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a4de:	4b43      	ldr	r3, [pc, #268]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f003 0302 	and.w	r3, r3, #2
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d005      	beq.n	800a4f6 <HAL_RCC_OscConfig+0x176>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	691b      	ldr	r3, [r3, #16]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d001      	beq.n	800a4f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e1c0      	b.n	800a878 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4f6:	4b3d      	ldr	r3, [pc, #244]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	695b      	ldr	r3, [r3, #20]
 800a502:	00db      	lsls	r3, r3, #3
 800a504:	4939      	ldr	r1, [pc, #228]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a506:	4313      	orrs	r3, r2
 800a508:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a50a:	e03a      	b.n	800a582 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d020      	beq.n	800a556 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a514:	4b36      	ldr	r3, [pc, #216]	@ (800a5f0 <HAL_RCC_OscConfig+0x270>)
 800a516:	2201      	movs	r2, #1
 800a518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a51a:	f7fd f981 	bl	8007820 <HAL_GetTick>
 800a51e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a520:	e008      	b.n	800a534 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a522:	f7fd f97d 	bl	8007820 <HAL_GetTick>
 800a526:	4602      	mov	r2, r0
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	1ad3      	subs	r3, r2, r3
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	d901      	bls.n	800a534 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a530:	2303      	movs	r3, #3
 800a532:	e1a1      	b.n	800a878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a534:	4b2d      	ldr	r3, [pc, #180]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f003 0302 	and.w	r3, r3, #2
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d0f0      	beq.n	800a522 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a540:	4b2a      	ldr	r3, [pc, #168]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	695b      	ldr	r3, [r3, #20]
 800a54c:	00db      	lsls	r3, r3, #3
 800a54e:	4927      	ldr	r1, [pc, #156]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a550:	4313      	orrs	r3, r2
 800a552:	600b      	str	r3, [r1, #0]
 800a554:	e015      	b.n	800a582 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a556:	4b26      	ldr	r3, [pc, #152]	@ (800a5f0 <HAL_RCC_OscConfig+0x270>)
 800a558:	2200      	movs	r2, #0
 800a55a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a55c:	f7fd f960 	bl	8007820 <HAL_GetTick>
 800a560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a562:	e008      	b.n	800a576 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a564:	f7fd f95c 	bl	8007820 <HAL_GetTick>
 800a568:	4602      	mov	r2, r0
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	1ad3      	subs	r3, r2, r3
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d901      	bls.n	800a576 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a572:	2303      	movs	r3, #3
 800a574:	e180      	b.n	800a878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a576:	4b1d      	ldr	r3, [pc, #116]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f003 0302 	and.w	r3, r3, #2
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d1f0      	bne.n	800a564 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f003 0308 	and.w	r3, r3, #8
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d03a      	beq.n	800a604 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d019      	beq.n	800a5ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a596:	4b17      	ldr	r3, [pc, #92]	@ (800a5f4 <HAL_RCC_OscConfig+0x274>)
 800a598:	2201      	movs	r2, #1
 800a59a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a59c:	f7fd f940 	bl	8007820 <HAL_GetTick>
 800a5a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a5a2:	e008      	b.n	800a5b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a5a4:	f7fd f93c 	bl	8007820 <HAL_GetTick>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	d901      	bls.n	800a5b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a5b2:	2303      	movs	r3, #3
 800a5b4:	e160      	b.n	800a878 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a5b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a5ec <HAL_RCC_OscConfig+0x26c>)
 800a5b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5ba:	f003 0302 	and.w	r3, r3, #2
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d0f0      	beq.n	800a5a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a5c2:	2001      	movs	r0, #1
 800a5c4:	f000 fafe 	bl	800abc4 <RCC_Delay>
 800a5c8:	e01c      	b.n	800a604 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a5ca:	4b0a      	ldr	r3, [pc, #40]	@ (800a5f4 <HAL_RCC_OscConfig+0x274>)
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a5d0:	f7fd f926 	bl	8007820 <HAL_GetTick>
 800a5d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a5d6:	e00f      	b.n	800a5f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a5d8:	f7fd f922 	bl	8007820 <HAL_GetTick>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	1ad3      	subs	r3, r2, r3
 800a5e2:	2b02      	cmp	r3, #2
 800a5e4:	d908      	bls.n	800a5f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a5e6:	2303      	movs	r3, #3
 800a5e8:	e146      	b.n	800a878 <HAL_RCC_OscConfig+0x4f8>
 800a5ea:	bf00      	nop
 800a5ec:	40021000 	.word	0x40021000
 800a5f0:	42420000 	.word	0x42420000
 800a5f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a5f8:	4b92      	ldr	r3, [pc, #584]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a5fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5fc:	f003 0302 	and.w	r3, r3, #2
 800a600:	2b00      	cmp	r3, #0
 800a602:	d1e9      	bne.n	800a5d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f003 0304 	and.w	r3, r3, #4
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f000 80a6 	beq.w	800a75e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a612:	2300      	movs	r3, #0
 800a614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a616:	4b8b      	ldr	r3, [pc, #556]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a618:	69db      	ldr	r3, [r3, #28]
 800a61a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d10d      	bne.n	800a63e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a622:	4b88      	ldr	r3, [pc, #544]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a624:	69db      	ldr	r3, [r3, #28]
 800a626:	4a87      	ldr	r2, [pc, #540]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a62c:	61d3      	str	r3, [r2, #28]
 800a62e:	4b85      	ldr	r3, [pc, #532]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a630:	69db      	ldr	r3, [r3, #28]
 800a632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a636:	60bb      	str	r3, [r7, #8]
 800a638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a63a:	2301      	movs	r3, #1
 800a63c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a63e:	4b82      	ldr	r3, [pc, #520]	@ (800a848 <HAL_RCC_OscConfig+0x4c8>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a646:	2b00      	cmp	r3, #0
 800a648:	d118      	bne.n	800a67c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a64a:	4b7f      	ldr	r3, [pc, #508]	@ (800a848 <HAL_RCC_OscConfig+0x4c8>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a7e      	ldr	r2, [pc, #504]	@ (800a848 <HAL_RCC_OscConfig+0x4c8>)
 800a650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a656:	f7fd f8e3 	bl	8007820 <HAL_GetTick>
 800a65a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a65c:	e008      	b.n	800a670 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a65e:	f7fd f8df 	bl	8007820 <HAL_GetTick>
 800a662:	4602      	mov	r2, r0
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	1ad3      	subs	r3, r2, r3
 800a668:	2b64      	cmp	r3, #100	@ 0x64
 800a66a:	d901      	bls.n	800a670 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a66c:	2303      	movs	r3, #3
 800a66e:	e103      	b.n	800a878 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a670:	4b75      	ldr	r3, [pc, #468]	@ (800a848 <HAL_RCC_OscConfig+0x4c8>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d0f0      	beq.n	800a65e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	2b01      	cmp	r3, #1
 800a682:	d106      	bne.n	800a692 <HAL_RCC_OscConfig+0x312>
 800a684:	4b6f      	ldr	r3, [pc, #444]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a686:	6a1b      	ldr	r3, [r3, #32]
 800a688:	4a6e      	ldr	r2, [pc, #440]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a68a:	f043 0301 	orr.w	r3, r3, #1
 800a68e:	6213      	str	r3, [r2, #32]
 800a690:	e02d      	b.n	800a6ee <HAL_RCC_OscConfig+0x36e>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d10c      	bne.n	800a6b4 <HAL_RCC_OscConfig+0x334>
 800a69a:	4b6a      	ldr	r3, [pc, #424]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a69c:	6a1b      	ldr	r3, [r3, #32]
 800a69e:	4a69      	ldr	r2, [pc, #420]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a6a0:	f023 0301 	bic.w	r3, r3, #1
 800a6a4:	6213      	str	r3, [r2, #32]
 800a6a6:	4b67      	ldr	r3, [pc, #412]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a6a8:	6a1b      	ldr	r3, [r3, #32]
 800a6aa:	4a66      	ldr	r2, [pc, #408]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a6ac:	f023 0304 	bic.w	r3, r3, #4
 800a6b0:	6213      	str	r3, [r2, #32]
 800a6b2:	e01c      	b.n	800a6ee <HAL_RCC_OscConfig+0x36e>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	2b05      	cmp	r3, #5
 800a6ba:	d10c      	bne.n	800a6d6 <HAL_RCC_OscConfig+0x356>
 800a6bc:	4b61      	ldr	r3, [pc, #388]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a6be:	6a1b      	ldr	r3, [r3, #32]
 800a6c0:	4a60      	ldr	r2, [pc, #384]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a6c2:	f043 0304 	orr.w	r3, r3, #4
 800a6c6:	6213      	str	r3, [r2, #32]
 800a6c8:	4b5e      	ldr	r3, [pc, #376]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a6ca:	6a1b      	ldr	r3, [r3, #32]
 800a6cc:	4a5d      	ldr	r2, [pc, #372]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a6ce:	f043 0301 	orr.w	r3, r3, #1
 800a6d2:	6213      	str	r3, [r2, #32]
 800a6d4:	e00b      	b.n	800a6ee <HAL_RCC_OscConfig+0x36e>
 800a6d6:	4b5b      	ldr	r3, [pc, #364]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a6d8:	6a1b      	ldr	r3, [r3, #32]
 800a6da:	4a5a      	ldr	r2, [pc, #360]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a6dc:	f023 0301 	bic.w	r3, r3, #1
 800a6e0:	6213      	str	r3, [r2, #32]
 800a6e2:	4b58      	ldr	r3, [pc, #352]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a6e4:	6a1b      	ldr	r3, [r3, #32]
 800a6e6:	4a57      	ldr	r2, [pc, #348]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a6e8:	f023 0304 	bic.w	r3, r3, #4
 800a6ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d015      	beq.n	800a722 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a6f6:	f7fd f893 	bl	8007820 <HAL_GetTick>
 800a6fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a6fc:	e00a      	b.n	800a714 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6fe:	f7fd f88f 	bl	8007820 <HAL_GetTick>
 800a702:	4602      	mov	r2, r0
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	1ad3      	subs	r3, r2, r3
 800a708:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d901      	bls.n	800a714 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a710:	2303      	movs	r3, #3
 800a712:	e0b1      	b.n	800a878 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a714:	4b4b      	ldr	r3, [pc, #300]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a716:	6a1b      	ldr	r3, [r3, #32]
 800a718:	f003 0302 	and.w	r3, r3, #2
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d0ee      	beq.n	800a6fe <HAL_RCC_OscConfig+0x37e>
 800a720:	e014      	b.n	800a74c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a722:	f7fd f87d 	bl	8007820 <HAL_GetTick>
 800a726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a728:	e00a      	b.n	800a740 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a72a:	f7fd f879 	bl	8007820 <HAL_GetTick>
 800a72e:	4602      	mov	r2, r0
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	1ad3      	subs	r3, r2, r3
 800a734:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a738:	4293      	cmp	r3, r2
 800a73a:	d901      	bls.n	800a740 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a73c:	2303      	movs	r3, #3
 800a73e:	e09b      	b.n	800a878 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a740:	4b40      	ldr	r3, [pc, #256]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a742:	6a1b      	ldr	r3, [r3, #32]
 800a744:	f003 0302 	and.w	r3, r3, #2
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d1ee      	bne.n	800a72a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a74c:	7dfb      	ldrb	r3, [r7, #23]
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d105      	bne.n	800a75e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a752:	4b3c      	ldr	r3, [pc, #240]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a754:	69db      	ldr	r3, [r3, #28]
 800a756:	4a3b      	ldr	r2, [pc, #236]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a758:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a75c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	69db      	ldr	r3, [r3, #28]
 800a762:	2b00      	cmp	r3, #0
 800a764:	f000 8087 	beq.w	800a876 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a768:	4b36      	ldr	r3, [pc, #216]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	f003 030c 	and.w	r3, r3, #12
 800a770:	2b08      	cmp	r3, #8
 800a772:	d061      	beq.n	800a838 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	69db      	ldr	r3, [r3, #28]
 800a778:	2b02      	cmp	r3, #2
 800a77a:	d146      	bne.n	800a80a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a77c:	4b33      	ldr	r3, [pc, #204]	@ (800a84c <HAL_RCC_OscConfig+0x4cc>)
 800a77e:	2200      	movs	r2, #0
 800a780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a782:	f7fd f84d 	bl	8007820 <HAL_GetTick>
 800a786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a788:	e008      	b.n	800a79c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a78a:	f7fd f849 	bl	8007820 <HAL_GetTick>
 800a78e:	4602      	mov	r2, r0
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	1ad3      	subs	r3, r2, r3
 800a794:	2b02      	cmp	r3, #2
 800a796:	d901      	bls.n	800a79c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a798:	2303      	movs	r3, #3
 800a79a:	e06d      	b.n	800a878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a79c:	4b29      	ldr	r3, [pc, #164]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d1f0      	bne.n	800a78a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a1b      	ldr	r3, [r3, #32]
 800a7ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7b0:	d108      	bne.n	800a7c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a7b2:	4b24      	ldr	r3, [pc, #144]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	4921      	ldr	r1, [pc, #132]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a7c4:	4b1f      	ldr	r3, [pc, #124]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6a19      	ldr	r1, [r3, #32]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7d4:	430b      	orrs	r3, r1
 800a7d6:	491b      	ldr	r1, [pc, #108]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a7dc:	4b1b      	ldr	r3, [pc, #108]	@ (800a84c <HAL_RCC_OscConfig+0x4cc>)
 800a7de:	2201      	movs	r2, #1
 800a7e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7e2:	f7fd f81d 	bl	8007820 <HAL_GetTick>
 800a7e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a7e8:	e008      	b.n	800a7fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7ea:	f7fd f819 	bl	8007820 <HAL_GetTick>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	1ad3      	subs	r3, r2, r3
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	d901      	bls.n	800a7fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a7f8:	2303      	movs	r3, #3
 800a7fa:	e03d      	b.n	800a878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a7fc:	4b11      	ldr	r3, [pc, #68]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a804:	2b00      	cmp	r3, #0
 800a806:	d0f0      	beq.n	800a7ea <HAL_RCC_OscConfig+0x46a>
 800a808:	e035      	b.n	800a876 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a80a:	4b10      	ldr	r3, [pc, #64]	@ (800a84c <HAL_RCC_OscConfig+0x4cc>)
 800a80c:	2200      	movs	r2, #0
 800a80e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a810:	f7fd f806 	bl	8007820 <HAL_GetTick>
 800a814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a816:	e008      	b.n	800a82a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a818:	f7fd f802 	bl	8007820 <HAL_GetTick>
 800a81c:	4602      	mov	r2, r0
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	1ad3      	subs	r3, r2, r3
 800a822:	2b02      	cmp	r3, #2
 800a824:	d901      	bls.n	800a82a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a826:	2303      	movs	r3, #3
 800a828:	e026      	b.n	800a878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a82a:	4b06      	ldr	r3, [pc, #24]	@ (800a844 <HAL_RCC_OscConfig+0x4c4>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1f0      	bne.n	800a818 <HAL_RCC_OscConfig+0x498>
 800a836:	e01e      	b.n	800a876 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	69db      	ldr	r3, [r3, #28]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d107      	bne.n	800a850 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a840:	2301      	movs	r3, #1
 800a842:	e019      	b.n	800a878 <HAL_RCC_OscConfig+0x4f8>
 800a844:	40021000 	.word	0x40021000
 800a848:	40007000 	.word	0x40007000
 800a84c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a850:	4b0b      	ldr	r3, [pc, #44]	@ (800a880 <HAL_RCC_OscConfig+0x500>)
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6a1b      	ldr	r3, [r3, #32]
 800a860:	429a      	cmp	r2, r3
 800a862:	d106      	bne.n	800a872 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a86e:	429a      	cmp	r2, r3
 800a870:	d001      	beq.n	800a876 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a872:	2301      	movs	r3, #1
 800a874:	e000      	b.n	800a878 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a876:	2300      	movs	r3, #0
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3718      	adds	r7, #24
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	40021000 	.word	0x40021000

0800a884 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d101      	bne.n	800a898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	e0d0      	b.n	800aa3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a898:	4b6a      	ldr	r3, [pc, #424]	@ (800aa44 <HAL_RCC_ClockConfig+0x1c0>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f003 0307 	and.w	r3, r3, #7
 800a8a0:	683a      	ldr	r2, [r7, #0]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d910      	bls.n	800a8c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8a6:	4b67      	ldr	r3, [pc, #412]	@ (800aa44 <HAL_RCC_ClockConfig+0x1c0>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f023 0207 	bic.w	r2, r3, #7
 800a8ae:	4965      	ldr	r1, [pc, #404]	@ (800aa44 <HAL_RCC_ClockConfig+0x1c0>)
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8b6:	4b63      	ldr	r3, [pc, #396]	@ (800aa44 <HAL_RCC_ClockConfig+0x1c0>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f003 0307 	and.w	r3, r3, #7
 800a8be:	683a      	ldr	r2, [r7, #0]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d001      	beq.n	800a8c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e0b8      	b.n	800aa3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f003 0302 	and.w	r3, r3, #2
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d020      	beq.n	800a916 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f003 0304 	and.w	r3, r3, #4
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d005      	beq.n	800a8ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a8e0:	4b59      	ldr	r3, [pc, #356]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c4>)
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	4a58      	ldr	r2, [pc, #352]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c4>)
 800a8e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a8ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f003 0308 	and.w	r3, r3, #8
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d005      	beq.n	800a904 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a8f8:	4b53      	ldr	r3, [pc, #332]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c4>)
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	4a52      	ldr	r2, [pc, #328]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c4>)
 800a8fe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800a902:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a904:	4b50      	ldr	r3, [pc, #320]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c4>)
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	494d      	ldr	r1, [pc, #308]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c4>)
 800a912:	4313      	orrs	r3, r2
 800a914:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f003 0301 	and.w	r3, r3, #1
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d040      	beq.n	800a9a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	2b01      	cmp	r3, #1
 800a928:	d107      	bne.n	800a93a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a92a:	4b47      	ldr	r3, [pc, #284]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c4>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a932:	2b00      	cmp	r3, #0
 800a934:	d115      	bne.n	800a962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a936:	2301      	movs	r3, #1
 800a938:	e07f      	b.n	800aa3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	2b02      	cmp	r3, #2
 800a940:	d107      	bne.n	800a952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a942:	4b41      	ldr	r3, [pc, #260]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c4>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d109      	bne.n	800a962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a94e:	2301      	movs	r3, #1
 800a950:	e073      	b.n	800aa3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a952:	4b3d      	ldr	r3, [pc, #244]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c4>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f003 0302 	and.w	r3, r3, #2
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d101      	bne.n	800a962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a95e:	2301      	movs	r3, #1
 800a960:	e06b      	b.n	800aa3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a962:	4b39      	ldr	r3, [pc, #228]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c4>)
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	f023 0203 	bic.w	r2, r3, #3
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	4936      	ldr	r1, [pc, #216]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c4>)
 800a970:	4313      	orrs	r3, r2
 800a972:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a974:	f7fc ff54 	bl	8007820 <HAL_GetTick>
 800a978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a97a:	e00a      	b.n	800a992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a97c:	f7fc ff50 	bl	8007820 <HAL_GetTick>
 800a980:	4602      	mov	r2, r0
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	1ad3      	subs	r3, r2, r3
 800a986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d901      	bls.n	800a992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a98e:	2303      	movs	r3, #3
 800a990:	e053      	b.n	800aa3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a992:	4b2d      	ldr	r3, [pc, #180]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c4>)
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	f003 020c 	and.w	r2, r3, #12
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d1eb      	bne.n	800a97c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a9a4:	4b27      	ldr	r3, [pc, #156]	@ (800aa44 <HAL_RCC_ClockConfig+0x1c0>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f003 0307 	and.w	r3, r3, #7
 800a9ac:	683a      	ldr	r2, [r7, #0]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d210      	bcs.n	800a9d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9b2:	4b24      	ldr	r3, [pc, #144]	@ (800aa44 <HAL_RCC_ClockConfig+0x1c0>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f023 0207 	bic.w	r2, r3, #7
 800a9ba:	4922      	ldr	r1, [pc, #136]	@ (800aa44 <HAL_RCC_ClockConfig+0x1c0>)
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9c2:	4b20      	ldr	r3, [pc, #128]	@ (800aa44 <HAL_RCC_ClockConfig+0x1c0>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f003 0307 	and.w	r3, r3, #7
 800a9ca:	683a      	ldr	r2, [r7, #0]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d001      	beq.n	800a9d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	e032      	b.n	800aa3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f003 0304 	and.w	r3, r3, #4
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d008      	beq.n	800a9f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a9e0:	4b19      	ldr	r3, [pc, #100]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c4>)
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	4916      	ldr	r1, [pc, #88]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c4>)
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f003 0308 	and.w	r3, r3, #8
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d009      	beq.n	800aa12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a9fe:	4b12      	ldr	r3, [pc, #72]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c4>)
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	691b      	ldr	r3, [r3, #16]
 800aa0a:	00db      	lsls	r3, r3, #3
 800aa0c:	490e      	ldr	r1, [pc, #56]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c4>)
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800aa12:	f000 f821 	bl	800aa58 <HAL_RCC_GetSysClockFreq>
 800aa16:	4602      	mov	r2, r0
 800aa18:	4b0b      	ldr	r3, [pc, #44]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c4>)
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	091b      	lsrs	r3, r3, #4
 800aa1e:	f003 030f 	and.w	r3, r3, #15
 800aa22:	490a      	ldr	r1, [pc, #40]	@ (800aa4c <HAL_RCC_ClockConfig+0x1c8>)
 800aa24:	5ccb      	ldrb	r3, [r1, r3]
 800aa26:	fa22 f303 	lsr.w	r3, r2, r3
 800aa2a:	4a09      	ldr	r2, [pc, #36]	@ (800aa50 <HAL_RCC_ClockConfig+0x1cc>)
 800aa2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800aa2e:	4b09      	ldr	r3, [pc, #36]	@ (800aa54 <HAL_RCC_ClockConfig+0x1d0>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7fa ffd8 	bl	80059e8 <HAL_InitTick>

  return HAL_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3710      	adds	r7, #16
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	40022000 	.word	0x40022000
 800aa48:	40021000 	.word	0x40021000
 800aa4c:	08015a80 	.word	0x08015a80
 800aa50:	20000018 	.word	0x20000018
 800aa54:	20000068 	.word	0x20000068

0800aa58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b087      	sub	sp, #28
 800aa5c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	60fb      	str	r3, [r7, #12]
 800aa62:	2300      	movs	r3, #0
 800aa64:	60bb      	str	r3, [r7, #8]
 800aa66:	2300      	movs	r3, #0
 800aa68:	617b      	str	r3, [r7, #20]
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800aa72:	4b1e      	ldr	r3, [pc, #120]	@ (800aaec <HAL_RCC_GetSysClockFreq+0x94>)
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f003 030c 	and.w	r3, r3, #12
 800aa7e:	2b04      	cmp	r3, #4
 800aa80:	d002      	beq.n	800aa88 <HAL_RCC_GetSysClockFreq+0x30>
 800aa82:	2b08      	cmp	r3, #8
 800aa84:	d003      	beq.n	800aa8e <HAL_RCC_GetSysClockFreq+0x36>
 800aa86:	e027      	b.n	800aad8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800aa88:	4b19      	ldr	r3, [pc, #100]	@ (800aaf0 <HAL_RCC_GetSysClockFreq+0x98>)
 800aa8a:	613b      	str	r3, [r7, #16]
      break;
 800aa8c:	e027      	b.n	800aade <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	0c9b      	lsrs	r3, r3, #18
 800aa92:	f003 030f 	and.w	r3, r3, #15
 800aa96:	4a17      	ldr	r2, [pc, #92]	@ (800aaf4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800aa98:	5cd3      	ldrb	r3, [r2, r3]
 800aa9a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d010      	beq.n	800aac8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800aaa6:	4b11      	ldr	r3, [pc, #68]	@ (800aaec <HAL_RCC_GetSysClockFreq+0x94>)
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	0c5b      	lsrs	r3, r3, #17
 800aaac:	f003 0301 	and.w	r3, r3, #1
 800aab0:	4a11      	ldr	r2, [pc, #68]	@ (800aaf8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800aab2:	5cd3      	ldrb	r3, [r2, r3]
 800aab4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a0d      	ldr	r2, [pc, #52]	@ (800aaf0 <HAL_RCC_GetSysClockFreq+0x98>)
 800aaba:	fb03 f202 	mul.w	r2, r3, r2
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aac4:	617b      	str	r3, [r7, #20]
 800aac6:	e004      	b.n	800aad2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4a0c      	ldr	r2, [pc, #48]	@ (800aafc <HAL_RCC_GetSysClockFreq+0xa4>)
 800aacc:	fb02 f303 	mul.w	r3, r2, r3
 800aad0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	613b      	str	r3, [r7, #16]
      break;
 800aad6:	e002      	b.n	800aade <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800aad8:	4b05      	ldr	r3, [pc, #20]	@ (800aaf0 <HAL_RCC_GetSysClockFreq+0x98>)
 800aada:	613b      	str	r3, [r7, #16]
      break;
 800aadc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aade:	693b      	ldr	r3, [r7, #16]
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	371c      	adds	r7, #28
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bc80      	pop	{r7}
 800aae8:	4770      	bx	lr
 800aaea:	bf00      	nop
 800aaec:	40021000 	.word	0x40021000
 800aaf0:	007a1200 	.word	0x007a1200
 800aaf4:	08015a98 	.word	0x08015a98
 800aaf8:	08015aa8 	.word	0x08015aa8
 800aafc:	003d0900 	.word	0x003d0900

0800ab00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ab00:	b480      	push	{r7}
 800ab02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ab04:	4b02      	ldr	r3, [pc, #8]	@ (800ab10 <HAL_RCC_GetHCLKFreq+0x10>)
 800ab06:	681b      	ldr	r3, [r3, #0]
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bc80      	pop	{r7}
 800ab0e:	4770      	bx	lr
 800ab10:	20000018 	.word	0x20000018

0800ab14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ab18:	f7ff fff2 	bl	800ab00 <HAL_RCC_GetHCLKFreq>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	4b05      	ldr	r3, [pc, #20]	@ (800ab34 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	0a1b      	lsrs	r3, r3, #8
 800ab24:	f003 0307 	and.w	r3, r3, #7
 800ab28:	4903      	ldr	r1, [pc, #12]	@ (800ab38 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ab2a:	5ccb      	ldrb	r3, [r1, r3]
 800ab2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	40021000 	.word	0x40021000
 800ab38:	08015a90 	.word	0x08015a90

0800ab3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ab40:	f7ff ffde 	bl	800ab00 <HAL_RCC_GetHCLKFreq>
 800ab44:	4602      	mov	r2, r0
 800ab46:	4b05      	ldr	r3, [pc, #20]	@ (800ab5c <HAL_RCC_GetPCLK2Freq+0x20>)
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	0adb      	lsrs	r3, r3, #11
 800ab4c:	f003 0307 	and.w	r3, r3, #7
 800ab50:	4903      	ldr	r1, [pc, #12]	@ (800ab60 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ab52:	5ccb      	ldrb	r3, [r1, r3]
 800ab54:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	40021000 	.word	0x40021000
 800ab60:	08015a90 	.word	0x08015a90

0800ab64 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	220f      	movs	r2, #15
 800ab72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ab74:	4b11      	ldr	r3, [pc, #68]	@ (800abbc <HAL_RCC_GetClockConfig+0x58>)
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	f003 0203 	and.w	r2, r3, #3
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ab80:	4b0e      	ldr	r3, [pc, #56]	@ (800abbc <HAL_RCC_GetClockConfig+0x58>)
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ab8c:	4b0b      	ldr	r3, [pc, #44]	@ (800abbc <HAL_RCC_GetClockConfig+0x58>)
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ab98:	4b08      	ldr	r3, [pc, #32]	@ (800abbc <HAL_RCC_GetClockConfig+0x58>)
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	08db      	lsrs	r3, r3, #3
 800ab9e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800aba6:	4b06      	ldr	r3, [pc, #24]	@ (800abc0 <HAL_RCC_GetClockConfig+0x5c>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f003 0207 	and.w	r2, r3, #7
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800abb2:	bf00      	nop
 800abb4:	370c      	adds	r7, #12
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bc80      	pop	{r7}
 800abba:	4770      	bx	lr
 800abbc:	40021000 	.word	0x40021000
 800abc0:	40022000 	.word	0x40022000

0800abc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b085      	sub	sp, #20
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800abcc:	4b0a      	ldr	r3, [pc, #40]	@ (800abf8 <RCC_Delay+0x34>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a0a      	ldr	r2, [pc, #40]	@ (800abfc <RCC_Delay+0x38>)
 800abd2:	fba2 2303 	umull	r2, r3, r2, r3
 800abd6:	0a5b      	lsrs	r3, r3, #9
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	fb02 f303 	mul.w	r3, r2, r3
 800abde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800abe0:	bf00      	nop
  }
  while (Delay --);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	1e5a      	subs	r2, r3, #1
 800abe6:	60fa      	str	r2, [r7, #12]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d1f9      	bne.n	800abe0 <RCC_Delay+0x1c>
}
 800abec:	bf00      	nop
 800abee:	bf00      	nop
 800abf0:	3714      	adds	r7, #20
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bc80      	pop	{r7}
 800abf6:	4770      	bx	lr
 800abf8:	20000018 	.word	0x20000018
 800abfc:	10624dd3 	.word	0x10624dd3

0800ac00 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d101      	bne.n	800ac12 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e022      	b.n	800ac58 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d105      	bne.n	800ac2a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2200      	movs	r2, #0
 800ac22:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f7fa fe4d 	bl	80058c4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2203      	movs	r2, #3
 800ac2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 f814 	bl	800ac60 <HAL_SD_InitCard>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d001      	beq.n	800ac42 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e00a      	b.n	800ac58 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2201      	movs	r2, #1
 800ac52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ac56:	2300      	movs	r3, #0
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3708      	adds	r7, #8
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ac60:	b5b0      	push	{r4, r5, r7, lr}
 800ac62:	b08e      	sub	sp, #56	@ 0x38
 800ac64:	af04      	add	r7, sp, #16
 800ac66:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800ac70:	2300      	movs	r3, #0
 800ac72:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800ac74:	2300      	movs	r3, #0
 800ac76:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800ac7c:	2376      	movs	r3, #118	@ 0x76
 800ac7e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681d      	ldr	r5, [r3, #0]
 800ac84:	466c      	mov	r4, sp
 800ac86:	f107 0314 	add.w	r3, r7, #20
 800ac8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ac8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ac92:	f107 0308 	add.w	r3, r7, #8
 800ac96:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ac98:	4628      	mov	r0, r5
 800ac9a:	f002 fec3 	bl	800da24 <SDIO_Init>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800aca4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d001      	beq.n	800acb0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800acac:	2301      	movs	r3, #1
 800acae:	e04f      	b.n	800ad50 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800acb0:	4b29      	ldr	r3, [pc, #164]	@ (800ad58 <HAL_SD_InitCard+0xf8>)
 800acb2:	2200      	movs	r2, #0
 800acb4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4618      	mov	r0, r3
 800acbc:	f002 fef8 	bl	800dab0 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800acc0:	4b25      	ldr	r3, [pc, #148]	@ (800ad58 <HAL_SD_InitCard+0xf8>)
 800acc2:	2201      	movs	r2, #1
 800acc4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800acc6:	2002      	movs	r0, #2
 800acc8:	f7fc fdb4 	bl	8007834 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 fe69 	bl	800b9a4 <SD_PowerON>
 800acd2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800acd4:	6a3b      	ldr	r3, [r7, #32]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d00b      	beq.n	800acf2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2201      	movs	r2, #1
 800acde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ace6:	6a3b      	ldr	r3, [r7, #32]
 800ace8:	431a      	orrs	r2, r3
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800acee:	2301      	movs	r3, #1
 800acf0:	e02e      	b.n	800ad50 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 fd87 	bl	800b806 <SD_InitCard>
 800acf8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800acfa:	6a3b      	ldr	r3, [r7, #32]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d00b      	beq.n	800ad18 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2201      	movs	r2, #1
 800ad04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad0c:	6a3b      	ldr	r3, [r7, #32]
 800ad0e:	431a      	orrs	r2, r3
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	e01b      	b.n	800ad50 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ad20:	4618      	mov	r0, r3
 800ad22:	f002 ff51 	bl	800dbc8 <SDMMC_CmdBlockLength>
 800ad26:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad28:	6a3b      	ldr	r3, [r7, #32]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00f      	beq.n	800ad4e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4a0a      	ldr	r2, [pc, #40]	@ (800ad5c <HAL_SD_InitCard+0xfc>)
 800ad34:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad3a:	6a3b      	ldr	r3, [r7, #32]
 800ad3c:	431a      	orrs	r2, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e000      	b.n	800ad50 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800ad4e:	2300      	movs	r3, #0
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3728      	adds	r7, #40	@ 0x28
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bdb0      	pop	{r4, r5, r7, pc}
 800ad58:	423000a0 	.word	0x423000a0
 800ad5c:	004005ff 	.word	0x004005ff

0800ad60 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b092      	sub	sp, #72	@ 0x48
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]
 800ad6c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ad6e:	f7fc fd57 	bl	8007820 <HAL_GetTick>
 800ad72:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d107      	bne.n	800ad92 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad86:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e1bd      	b.n	800b10e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	f040 81b0 	bne.w	800b100 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2200      	movs	r2, #0
 800ada4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ada6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	441a      	add	r2, r3
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d907      	bls.n	800adc4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adb8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800adc0:	2301      	movs	r3, #1
 800adc2:	e1a4      	b.n	800b10e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2203      	movs	r2, #3
 800adc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	2200      	movs	r2, #0
 800add2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800add8:	2b01      	cmp	r3, #1
 800adda:	d002      	beq.n	800ade2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800addc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adde:	025b      	lsls	r3, r3, #9
 800ade0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ade2:	f04f 33ff 	mov.w	r3, #4294967295
 800ade6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	025b      	lsls	r3, r3, #9
 800adec:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800adee:	2390      	movs	r3, #144	@ 0x90
 800adf0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800adf2:	2302      	movs	r3, #2
 800adf4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800adf6:	2300      	movs	r3, #0
 800adf8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800adfa:	2301      	movs	r3, #1
 800adfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f107 0214 	add.w	r2, r7, #20
 800ae06:	4611      	mov	r1, r2
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f002 feb2 	bl	800db72 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d90a      	bls.n	800ae2a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2202      	movs	r2, #2
 800ae18:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ae20:	4618      	mov	r0, r3
 800ae22:	f002 ff15 	bl	800dc50 <SDMMC_CmdReadMultiBlock>
 800ae26:	6478      	str	r0, [r7, #68]	@ 0x44
 800ae28:	e009      	b.n	800ae3e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ae36:	4618      	mov	r0, r3
 800ae38:	f002 fee8 	bl	800dc0c <SDMMC_CmdReadSingleBlock>
 800ae3c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d012      	beq.n	800ae6a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a7a      	ldr	r2, [pc, #488]	@ (800b034 <HAL_SD_ReadBlocks+0x2d4>)
 800ae4a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae52:	431a      	orrs	r2, r3
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2200      	movs	r2, #0
 800ae64:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800ae66:	2301      	movs	r3, #1
 800ae68:	e151      	b.n	800b10e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800ae6e:	e061      	b.n	800af34 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d03c      	beq.n	800aef8 <HAL_SD_ReadBlocks+0x198>
 800ae7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d039      	beq.n	800aef8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800ae84:	2300      	movs	r3, #0
 800ae86:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae88:	e033      	b.n	800aef2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f002 fdf2 	bl	800da78 <SDIO_ReadFIFO>
 800ae94:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800ae96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae98:	b2da      	uxtb	r2, r3
 800ae9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae9c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ae9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aea0:	3301      	adds	r3, #1
 800aea2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800aea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aea6:	3b01      	subs	r3, #1
 800aea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800aeaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeac:	0a1b      	lsrs	r3, r3, #8
 800aeae:	b2da      	uxtb	r2, r3
 800aeb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aeb2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800aeb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800aeba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aebc:	3b01      	subs	r3, #1
 800aebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800aec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aec2:	0c1b      	lsrs	r3, r3, #16
 800aec4:	b2da      	uxtb	r2, r3
 800aec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aec8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800aeca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aecc:	3301      	adds	r3, #1
 800aece:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800aed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aed2:	3b01      	subs	r3, #1
 800aed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800aed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aed8:	0e1b      	lsrs	r3, r3, #24
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aede:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800aee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aee2:	3301      	adds	r3, #1
 800aee4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800aee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aee8:	3b01      	subs	r3, #1
 800aeea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800aeec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aeee:	3301      	adds	r3, #1
 800aef0:	643b      	str	r3, [r7, #64]	@ 0x40
 800aef2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aef4:	2b07      	cmp	r3, #7
 800aef6:	d9c8      	bls.n	800ae8a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800aef8:	f7fc fc92 	bl	8007820 <HAL_GetTick>
 800aefc:	4602      	mov	r2, r0
 800aefe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af00:	1ad3      	subs	r3, r2, r3
 800af02:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800af04:	429a      	cmp	r2, r3
 800af06:	d902      	bls.n	800af0e <HAL_SD_ReadBlocks+0x1ae>
 800af08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d112      	bne.n	800af34 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4a48      	ldr	r2, [pc, #288]	@ (800b034 <HAL_SD_ReadBlocks+0x2d4>)
 800af14:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af1a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2201      	movs	r2, #1
 800af26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2200      	movs	r2, #0
 800af2e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800af30:	2303      	movs	r3, #3
 800af32:	e0ec      	b.n	800b10e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af3a:	f240 332a 	movw	r3, #810	@ 0x32a
 800af3e:	4013      	ands	r3, r2
 800af40:	2b00      	cmp	r3, #0
 800af42:	d095      	beq.n	800ae70 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d022      	beq.n	800af98 <HAL_SD_ReadBlocks+0x238>
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	2b01      	cmp	r3, #1
 800af56:	d91f      	bls.n	800af98 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af5c:	2b03      	cmp	r3, #3
 800af5e:	d01b      	beq.n	800af98 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4618      	mov	r0, r3
 800af66:	f002 fed9 	bl	800dd1c <SDMMC_CmdStopTransfer>
 800af6a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800af6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d012      	beq.n	800af98 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a2f      	ldr	r2, [pc, #188]	@ (800b034 <HAL_SD_ReadBlocks+0x2d4>)
 800af78:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af80:	431a      	orrs	r2, r3
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2201      	movs	r2, #1
 800af8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2200      	movs	r2, #0
 800af92:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800af94:	2301      	movs	r3, #1
 800af96:	e0ba      	b.n	800b10e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af9e:	f003 0308 	and.w	r3, r3, #8
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d012      	beq.n	800afcc <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a22      	ldr	r2, [pc, #136]	@ (800b034 <HAL_SD_ReadBlocks+0x2d4>)
 800afac:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afb2:	f043 0208 	orr.w	r2, r3, #8
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2201      	movs	r2, #1
 800afbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2200      	movs	r2, #0
 800afc6:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800afc8:	2301      	movs	r3, #1
 800afca:	e0a0      	b.n	800b10e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afd2:	f003 0302 	and.w	r3, r3, #2
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d012      	beq.n	800b000 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a15      	ldr	r2, [pc, #84]	@ (800b034 <HAL_SD_ReadBlocks+0x2d4>)
 800afe0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afe6:	f043 0202 	orr.w	r2, r3, #2
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2201      	movs	r2, #1
 800aff2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2200      	movs	r2, #0
 800affa:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	e086      	b.n	800b10e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b006:	f003 0320 	and.w	r3, r3, #32
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d063      	beq.n	800b0d6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4a08      	ldr	r2, [pc, #32]	@ (800b034 <HAL_SD_ReadBlocks+0x2d4>)
 800b014:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b01a:	f043 0220 	orr.w	r2, r3, #32
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2201      	movs	r2, #1
 800b026:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2200      	movs	r2, #0
 800b02e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b030:	2301      	movs	r3, #1
 800b032:	e06c      	b.n	800b10e <HAL_SD_ReadBlocks+0x3ae>
 800b034:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4618      	mov	r0, r3
 800b03e:	f002 fd1b 	bl	800da78 <SDIO_ReadFIFO>
 800b042:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800b044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b046:	b2da      	uxtb	r2, r3
 800b048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b04a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b04c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b04e:	3301      	adds	r3, #1
 800b050:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800b052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b054:	3b01      	subs	r3, #1
 800b056:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b05a:	0a1b      	lsrs	r3, r3, #8
 800b05c:	b2da      	uxtb	r2, r3
 800b05e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b060:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b064:	3301      	adds	r3, #1
 800b066:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800b068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b06a:	3b01      	subs	r3, #1
 800b06c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b070:	0c1b      	lsrs	r3, r3, #16
 800b072:	b2da      	uxtb	r2, r3
 800b074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b076:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b07a:	3301      	adds	r3, #1
 800b07c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800b07e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b080:	3b01      	subs	r3, #1
 800b082:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b086:	0e1b      	lsrs	r3, r3, #24
 800b088:	b2da      	uxtb	r2, r3
 800b08a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b08c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b08e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b090:	3301      	adds	r3, #1
 800b092:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800b094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b096:	3b01      	subs	r3, #1
 800b098:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b09a:	f7fc fbc1 	bl	8007820 <HAL_GetTick>
 800b09e:	4602      	mov	r2, r0
 800b0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a2:	1ad3      	subs	r3, r2, r3
 800b0a4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d902      	bls.n	800b0b0 <HAL_SD_ReadBlocks+0x350>
 800b0aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d112      	bne.n	800b0d6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4a18      	ldr	r2, [pc, #96]	@ (800b118 <HAL_SD_ReadBlocks+0x3b8>)
 800b0b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0bc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e01b      	b.n	800b10e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d002      	beq.n	800b0ea <HAL_SD_ReadBlocks+0x38a>
 800b0e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d1a6      	bne.n	800b038 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f240 523a 	movw	r2, #1338	@ 0x53a
 800b0f2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	e006      	b.n	800b10e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b104:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b10c:	2301      	movs	r3, #1
  }
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3748      	adds	r7, #72	@ 0x48
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop
 800b118:	004005ff 	.word	0x004005ff

0800b11c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b092      	sub	sp, #72	@ 0x48
 800b120:	af00      	add	r7, sp, #0
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	607a      	str	r2, [r7, #4]
 800b128:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b12a:	f7fc fb79 	bl	8007820 <HAL_GetTick>
 800b12e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d107      	bne.n	800b14e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b142:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b14a:	2301      	movs	r3, #1
 800b14c:	e166      	b.n	800b41c <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b154:	b2db      	uxtb	r3, r3
 800b156:	2b01      	cmp	r3, #1
 800b158:	f040 8159 	bne.w	800b40e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2200      	movs	r2, #0
 800b160:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b162:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	441a      	add	r2, r3
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d907      	bls.n	800b180 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b174:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800b17c:	2301      	movs	r3, #1
 800b17e:	e14d      	b.n	800b41c <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2203      	movs	r2, #3
 800b184:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	2200      	movs	r2, #0
 800b18e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b194:	2b01      	cmp	r3, #1
 800b196:	d002      	beq.n	800b19e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800b198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b19a:	025b      	lsls	r3, r3, #9
 800b19c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b19e:	f04f 33ff 	mov.w	r3, #4294967295
 800b1a2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	025b      	lsls	r3, r3, #9
 800b1a8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b1aa:	2390      	movs	r3, #144	@ 0x90
 800b1ac:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f107 0218 	add.w	r2, r7, #24
 800b1c2:	4611      	mov	r1, r2
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f002 fcd4 	bl	800db72 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d90a      	bls.n	800b1e6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2220      	movs	r2, #32
 800b1d4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f002 fd7b 	bl	800dcd8 <SDMMC_CmdWriteMultiBlock>
 800b1e2:	6478      	str	r0, [r7, #68]	@ 0x44
 800b1e4:	e009      	b.n	800b1fa <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2210      	movs	r2, #16
 800b1ea:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f002 fd4e 	bl	800dc94 <SDMMC_CmdWriteSingleBlock>
 800b1f8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b1fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d012      	beq.n	800b226 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4a87      	ldr	r2, [pc, #540]	@ (800b424 <HAL_SD_WriteBlocks+0x308>)
 800b206:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b20c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b20e:	431a      	orrs	r2, r3
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2201      	movs	r2, #1
 800b218:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2200      	movs	r2, #0
 800b220:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b222:	2301      	movs	r3, #1
 800b224:	e0fa      	b.n	800b41c <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800b226:	69fb      	ldr	r3, [r7, #28]
 800b228:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b22a:	e065      	b.n	800b2f8 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b232:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b236:	2b00      	cmp	r3, #0
 800b238:	d040      	beq.n	800b2bc <HAL_SD_WriteBlocks+0x1a0>
 800b23a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d03d      	beq.n	800b2bc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800b240:	2300      	movs	r3, #0
 800b242:	643b      	str	r3, [r7, #64]	@ 0x40
 800b244:	e037      	b.n	800b2b6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800b246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b24c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b24e:	3301      	adds	r3, #1
 800b250:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b254:	3b01      	subs	r3, #1
 800b256:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800b258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	021a      	lsls	r2, r3, #8
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	4313      	orrs	r3, r2
 800b262:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b266:	3301      	adds	r3, #1
 800b268:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b26a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b26c:	3b01      	subs	r3, #1
 800b26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800b270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	041a      	lsls	r2, r3, #16
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	4313      	orrs	r3, r2
 800b27a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b27c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b27e:	3301      	adds	r3, #1
 800b280:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b284:	3b01      	subs	r3, #1
 800b286:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800b288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	061a      	lsls	r2, r3, #24
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	4313      	orrs	r3, r2
 800b292:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b296:	3301      	adds	r3, #1
 800b298:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b29a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b29c:	3b01      	subs	r3, #1
 800b29e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f107 0214 	add.w	r2, r7, #20
 800b2a8:	4611      	mov	r1, r2
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f002 fbf0 	bl	800da90 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800b2b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b2b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2b8:	2b07      	cmp	r3, #7
 800b2ba:	d9c4      	bls.n	800b246 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b2bc:	f7fc fab0 	bl	8007820 <HAL_GetTick>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c4:	1ad3      	subs	r3, r2, r3
 800b2c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d902      	bls.n	800b2d2 <HAL_SD_WriteBlocks+0x1b6>
 800b2cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d112      	bne.n	800b2f8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a53      	ldr	r2, [pc, #332]	@ (800b424 <HAL_SD_WriteBlocks+0x308>)
 800b2d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2e0:	431a      	orrs	r2, r3
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800b2f4:	2303      	movs	r3, #3
 800b2f6:	e091      	b.n	800b41c <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b2fe:	f240 331a 	movw	r3, #794	@ 0x31a
 800b302:	4013      	ands	r3, r2
 800b304:	2b00      	cmp	r3, #0
 800b306:	d091      	beq.n	800b22c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b30e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b312:	2b00      	cmp	r3, #0
 800b314:	d022      	beq.n	800b35c <HAL_SD_WriteBlocks+0x240>
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d91f      	bls.n	800b35c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b320:	2b03      	cmp	r3, #3
 800b322:	d01b      	beq.n	800b35c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4618      	mov	r0, r3
 800b32a:	f002 fcf7 	bl	800dd1c <SDMMC_CmdStopTransfer>
 800b32e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800b330:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b332:	2b00      	cmp	r3, #0
 800b334:	d012      	beq.n	800b35c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4a3a      	ldr	r2, [pc, #232]	@ (800b424 <HAL_SD_WriteBlocks+0x308>)
 800b33c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b342:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b344:	431a      	orrs	r2, r3
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2201      	movs	r2, #1
 800b34e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2200      	movs	r2, #0
 800b356:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800b358:	2301      	movs	r3, #1
 800b35a:	e05f      	b.n	800b41c <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b362:	f003 0308 	and.w	r3, r3, #8
 800b366:	2b00      	cmp	r3, #0
 800b368:	d012      	beq.n	800b390 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4a2d      	ldr	r2, [pc, #180]	@ (800b424 <HAL_SD_WriteBlocks+0x308>)
 800b370:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b376:	f043 0208 	orr.w	r2, r3, #8
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2201      	movs	r2, #1
 800b382:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2200      	movs	r2, #0
 800b38a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b38c:	2301      	movs	r3, #1
 800b38e:	e045      	b.n	800b41c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b396:	f003 0302 	and.w	r3, r3, #2
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d012      	beq.n	800b3c4 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a20      	ldr	r2, [pc, #128]	@ (800b424 <HAL_SD_WriteBlocks+0x308>)
 800b3a4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3aa:	f043 0202 	orr.w	r2, r3, #2
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	e02b      	b.n	800b41c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3ca:	f003 0310 	and.w	r3, r3, #16
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d012      	beq.n	800b3f8 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	4a13      	ldr	r2, [pc, #76]	@ (800b424 <HAL_SD_WriteBlocks+0x308>)
 800b3d8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3de:	f043 0210 	orr.w	r2, r3, #16
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e011      	b.n	800b41c <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f240 523a 	movw	r2, #1338	@ 0x53a
 800b400:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2201      	movs	r2, #1
 800b406:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800b40a:	2300      	movs	r3, #0
 800b40c:	e006      	b.n	800b41c <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b412:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b41a:	2301      	movs	r3, #1
  }
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3748      	adds	r7, #72	@ 0x48
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}
 800b424:	004005ff 	.word	0x004005ff

0800b428 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b436:	0f9b      	lsrs	r3, r3, #30
 800b438:	b2da      	uxtb	r2, r3
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b442:	0e9b      	lsrs	r3, r3, #26
 800b444:	b2db      	uxtb	r3, r3
 800b446:	f003 030f 	and.w	r3, r3, #15
 800b44a:	b2da      	uxtb	r2, r3
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b454:	0e1b      	lsrs	r3, r3, #24
 800b456:	b2db      	uxtb	r3, r3
 800b458:	f003 0303 	and.w	r3, r3, #3
 800b45c:	b2da      	uxtb	r2, r3
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b466:	0c1b      	lsrs	r3, r3, #16
 800b468:	b2da      	uxtb	r2, r3
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b472:	0a1b      	lsrs	r3, r3, #8
 800b474:	b2da      	uxtb	r2, r3
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b47e:	b2da      	uxtb	r2, r3
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b488:	0d1b      	lsrs	r3, r3, #20
 800b48a:	b29a      	uxth	r2, r3
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b494:	0c1b      	lsrs	r3, r3, #16
 800b496:	b2db      	uxtb	r3, r3
 800b498:	f003 030f 	and.w	r3, r3, #15
 800b49c:	b2da      	uxtb	r2, r3
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b4a6:	0bdb      	lsrs	r3, r3, #15
 800b4a8:	b2db      	uxtb	r3, r3
 800b4aa:	f003 0301 	and.w	r3, r3, #1
 800b4ae:	b2da      	uxtb	r2, r3
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b4b8:	0b9b      	lsrs	r3, r3, #14
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	f003 0301 	and.w	r3, r3, #1
 800b4c0:	b2da      	uxtb	r2, r3
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b4ca:	0b5b      	lsrs	r3, r3, #13
 800b4cc:	b2db      	uxtb	r3, r3
 800b4ce:	f003 0301 	and.w	r3, r3, #1
 800b4d2:	b2da      	uxtb	r2, r3
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b4dc:	0b1b      	lsrs	r3, r3, #12
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	f003 0301 	and.w	r3, r3, #1
 800b4e4:	b2da      	uxtb	r2, r3
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d163      	bne.n	800b5c0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b4fc:	009a      	lsls	r2, r3, #2
 800b4fe:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800b502:	4013      	ands	r3, r2
 800b504:	687a      	ldr	r2, [r7, #4]
 800b506:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800b508:	0f92      	lsrs	r2, r2, #30
 800b50a:	431a      	orrs	r2, r3
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b514:	0edb      	lsrs	r3, r3, #27
 800b516:	b2db      	uxtb	r3, r3
 800b518:	f003 0307 	and.w	r3, r3, #7
 800b51c:	b2da      	uxtb	r2, r3
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b526:	0e1b      	lsrs	r3, r3, #24
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	f003 0307 	and.w	r3, r3, #7
 800b52e:	b2da      	uxtb	r2, r3
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b538:	0d5b      	lsrs	r3, r3, #21
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	f003 0307 	and.w	r3, r3, #7
 800b540:	b2da      	uxtb	r2, r3
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b54a:	0c9b      	lsrs	r3, r3, #18
 800b54c:	b2db      	uxtb	r3, r3
 800b54e:	f003 0307 	and.w	r3, r3, #7
 800b552:	b2da      	uxtb	r2, r3
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b55c:	0bdb      	lsrs	r3, r3, #15
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	f003 0307 	and.w	r3, r3, #7
 800b564:	b2da      	uxtb	r2, r3
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	691b      	ldr	r3, [r3, #16]
 800b56e:	1c5a      	adds	r2, r3, #1
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	7e1b      	ldrb	r3, [r3, #24]
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	f003 0307 	and.w	r3, r3, #7
 800b57e:	3302      	adds	r3, #2
 800b580:	2201      	movs	r2, #1
 800b582:	fa02 f303 	lsl.w	r3, r2, r3
 800b586:	687a      	ldr	r2, [r7, #4]
 800b588:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800b58a:	fb03 f202 	mul.w	r2, r3, r2
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	7a1b      	ldrb	r3, [r3, #8]
 800b596:	b2db      	uxtb	r3, r3
 800b598:	f003 030f 	and.w	r3, r3, #15
 800b59c:	2201      	movs	r2, #1
 800b59e:	409a      	lsls	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800b5ac:	0a52      	lsrs	r2, r2, #9
 800b5ae:	fb03 f202 	mul.w	r2, r3, r2
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b5bc:	661a      	str	r2, [r3, #96]	@ 0x60
 800b5be:	e031      	b.n	800b624 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	d11d      	bne.n	800b604 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b5cc:	041b      	lsls	r3, r3, #16
 800b5ce:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5d6:	0c1b      	lsrs	r3, r3, #16
 800b5d8:	431a      	orrs	r2, r3
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	029a      	lsls	r2, r3, #10
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b5f8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	661a      	str	r2, [r3, #96]	@ 0x60
 800b602:	e00f      	b.n	800b624 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4a58      	ldr	r2, [pc, #352]	@ (800b76c <HAL_SD_GetCardCSD+0x344>)
 800b60a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b610:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2201      	movs	r2, #1
 800b61c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b620:	2301      	movs	r3, #1
 800b622:	e09d      	b.n	800b760 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b628:	0b9b      	lsrs	r3, r3, #14
 800b62a:	b2db      	uxtb	r3, r3
 800b62c:	f003 0301 	and.w	r3, r3, #1
 800b630:	b2da      	uxtb	r2, r3
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b63a:	09db      	lsrs	r3, r3, #7
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b642:	b2da      	uxtb	r2, r3
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b652:	b2da      	uxtb	r2, r3
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b65c:	0fdb      	lsrs	r3, r3, #31
 800b65e:	b2da      	uxtb	r2, r3
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b668:	0f5b      	lsrs	r3, r3, #29
 800b66a:	b2db      	uxtb	r3, r3
 800b66c:	f003 0303 	and.w	r3, r3, #3
 800b670:	b2da      	uxtb	r2, r3
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b67a:	0e9b      	lsrs	r3, r3, #26
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	f003 0307 	and.w	r3, r3, #7
 800b682:	b2da      	uxtb	r2, r3
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b68c:	0d9b      	lsrs	r3, r3, #22
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	f003 030f 	and.w	r3, r3, #15
 800b694:	b2da      	uxtb	r2, r3
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b69e:	0d5b      	lsrs	r3, r3, #21
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	f003 0301 	and.w	r3, r3, #1
 800b6a6:	b2da      	uxtb	r2, r3
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6ba:	0c1b      	lsrs	r3, r3, #16
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	f003 0301 	and.w	r3, r3, #1
 800b6c2:	b2da      	uxtb	r2, r3
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6ce:	0bdb      	lsrs	r3, r3, #15
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	f003 0301 	and.w	r3, r3, #1
 800b6d6:	b2da      	uxtb	r2, r3
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6e2:	0b9b      	lsrs	r3, r3, #14
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	f003 0301 	and.w	r3, r3, #1
 800b6ea:	b2da      	uxtb	r2, r3
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6f6:	0b5b      	lsrs	r3, r3, #13
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	f003 0301 	and.w	r3, r3, #1
 800b6fe:	b2da      	uxtb	r2, r3
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b70a:	0b1b      	lsrs	r3, r3, #12
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	f003 0301 	and.w	r3, r3, #1
 800b712:	b2da      	uxtb	r2, r3
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b71e:	0a9b      	lsrs	r3, r3, #10
 800b720:	b2db      	uxtb	r3, r3
 800b722:	f003 0303 	and.w	r3, r3, #3
 800b726:	b2da      	uxtb	r2, r3
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b732:	0a1b      	lsrs	r3, r3, #8
 800b734:	b2db      	uxtb	r3, r3
 800b736:	f003 0303 	and.w	r3, r3, #3
 800b73a:	b2da      	uxtb	r2, r3
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b746:	085b      	lsrs	r3, r3, #1
 800b748:	b2db      	uxtb	r3, r3
 800b74a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b74e:	b2da      	uxtb	r2, r3
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	2201      	movs	r2, #1
 800b75a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800b75e:	2300      	movs	r3, #0
}
 800b760:	4618      	mov	r0, r3
 800b762:	370c      	adds	r7, #12
 800b764:	46bd      	mov	sp, r7
 800b766:	bc80      	pop	{r7}
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	004005ff 	.word	0x004005ff

0800b770 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b770:	b480      	push	{r7}
 800b772:	b083      	sub	sp, #12
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b7ba:	2300      	movs	r3, #0
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	370c      	adds	r7, #12
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bc80      	pop	{r7}
 800b7c4:	4770      	bx	lr

0800b7c6 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b7c6:	b580      	push	{r7, lr}
 800b7c8:	b086      	sub	sp, #24
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b7d2:	f107 030c 	add.w	r3, r7, #12
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 f971 	bl	800bac0 <SD_SendStatus>
 800b7de:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d005      	beq.n	800b7f2 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	431a      	orrs	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	0a5b      	lsrs	r3, r3, #9
 800b7f6:	f003 030f 	and.w	r3, r3, #15
 800b7fa:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b7fc:	693b      	ldr	r3, [r7, #16]
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3718      	adds	r7, #24
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}

0800b806 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b806:	b5b0      	push	{r4, r5, r7, lr}
 800b808:	b094      	sub	sp, #80	@ 0x50
 800b80a:	af04      	add	r7, sp, #16
 800b80c:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b80e:	2301      	movs	r3, #1
 800b810:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4618      	mov	r0, r3
 800b818:	f002 f957 	bl	800daca <SDIO_GetPowerState>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d102      	bne.n	800b828 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b822:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800b826:	e0b8      	b.n	800b99a <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b82c:	2b03      	cmp	r3, #3
 800b82e:	d02f      	beq.n	800b890 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4618      	mov	r0, r3
 800b836:	f002 fb38 	bl	800deaa <SDMMC_CmdSendCID>
 800b83a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b83c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d001      	beq.n	800b846 <SD_InitCard+0x40>
    {
      return errorstate;
 800b842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b844:	e0a9      	b.n	800b99a <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2100      	movs	r1, #0
 800b84c:	4618      	mov	r0, r3
 800b84e:	f002 f97e 	bl	800db4e <SDIO_GetResponse>
 800b852:	4602      	mov	r2, r0
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	2104      	movs	r1, #4
 800b85e:	4618      	mov	r0, r3
 800b860:	f002 f975 	bl	800db4e <SDIO_GetResponse>
 800b864:	4602      	mov	r2, r0
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2108      	movs	r1, #8
 800b870:	4618      	mov	r0, r3
 800b872:	f002 f96c 	bl	800db4e <SDIO_GetResponse>
 800b876:	4602      	mov	r2, r0
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	210c      	movs	r1, #12
 800b882:	4618      	mov	r0, r3
 800b884:	f002 f963 	bl	800db4e <SDIO_GetResponse>
 800b888:	4602      	mov	r2, r0
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b894:	2b03      	cmp	r3, #3
 800b896:	d00d      	beq.n	800b8b4 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f107 020e 	add.w	r2, r7, #14
 800b8a0:	4611      	mov	r1, r2
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f002 fb3e 	bl	800df24 <SDMMC_CmdSetRelAdd>
 800b8a8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b8aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d001      	beq.n	800b8b4 <SD_InitCard+0xae>
    {
      return errorstate;
 800b8b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8b2:	e072      	b.n	800b99a <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8b8:	2b03      	cmp	r3, #3
 800b8ba:	d036      	beq.n	800b92a <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b8bc:	89fb      	ldrh	r3, [r7, #14]
 800b8be:	461a      	mov	r2, r3
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681a      	ldr	r2, [r3, #0]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8cc:	041b      	lsls	r3, r3, #16
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	4610      	mov	r0, r2
 800b8d2:	f002 fb08 	bl	800dee6 <SDMMC_CmdSendCSD>
 800b8d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b8d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d001      	beq.n	800b8e2 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b8de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8e0:	e05b      	b.n	800b99a <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	2100      	movs	r1, #0
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f002 f930 	bl	800db4e <SDIO_GetResponse>
 800b8ee:	4602      	mov	r2, r0
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	2104      	movs	r1, #4
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f002 f927 	bl	800db4e <SDIO_GetResponse>
 800b900:	4602      	mov	r2, r0
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	2108      	movs	r1, #8
 800b90c:	4618      	mov	r0, r3
 800b90e:	f002 f91e 	bl	800db4e <SDIO_GetResponse>
 800b912:	4602      	mov	r2, r0
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	210c      	movs	r1, #12
 800b91e:	4618      	mov	r0, r3
 800b920:	f002 f915 	bl	800db4e <SDIO_GetResponse>
 800b924:	4602      	mov	r2, r0
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	2104      	movs	r1, #4
 800b930:	4618      	mov	r0, r3
 800b932:	f002 f90c 	bl	800db4e <SDIO_GetResponse>
 800b936:	4603      	mov	r3, r0
 800b938:	0d1a      	lsrs	r2, r3, #20
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b93e:	f107 0310 	add.w	r3, r7, #16
 800b942:	4619      	mov	r1, r3
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f7ff fd6f 	bl	800b428 <HAL_SD_GetCardCSD>
 800b94a:	4603      	mov	r3, r0
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d002      	beq.n	800b956 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b950:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b954:	e021      	b.n	800b99a <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6819      	ldr	r1, [r3, #0]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b95e:	041b      	lsls	r3, r3, #16
 800b960:	2200      	movs	r2, #0
 800b962:	461c      	mov	r4, r3
 800b964:	4615      	mov	r5, r2
 800b966:	4622      	mov	r2, r4
 800b968:	462b      	mov	r3, r5
 800b96a:	4608      	mov	r0, r1
 800b96c:	f002 f9f8 	bl	800dd60 <SDMMC_CmdSelDesel>
 800b970:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b974:	2b00      	cmp	r3, #0
 800b976:	d001      	beq.n	800b97c <SD_InitCard+0x176>
  {
    return errorstate;
 800b978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b97a:	e00e      	b.n	800b99a <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681d      	ldr	r5, [r3, #0]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	466c      	mov	r4, sp
 800b984:	f103 0210 	add.w	r2, r3, #16
 800b988:	ca07      	ldmia	r2, {r0, r1, r2}
 800b98a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b98e:	3304      	adds	r3, #4
 800b990:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b992:	4628      	mov	r0, r5
 800b994:	f002 f846 	bl	800da24 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b998:	2300      	movs	r3, #0
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3740      	adds	r7, #64	@ 0x40
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b9a4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b086      	sub	sp, #24
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	617b      	str	r3, [r7, #20]
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f002 f9f2 	bl	800dda6 <SDMMC_CmdGoIdleState>
 800b9c2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d001      	beq.n	800b9ce <SD_PowerON+0x2a>
  {
    return errorstate;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	e072      	b.n	800bab4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f002 fa05 	bl	800dde2 <SDMMC_CmdOperCond>
 800b9d8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d00d      	beq.n	800b9fc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f002 f9db 	bl	800dda6 <SDMMC_CmdGoIdleState>
 800b9f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d004      	beq.n	800ba02 <SD_PowerON+0x5e>
    {
      return errorstate;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	e05b      	b.n	800bab4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d137      	bne.n	800ba7a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2100      	movs	r1, #0
 800ba10:	4618      	mov	r0, r3
 800ba12:	f002 fa05 	bl	800de20 <SDMMC_CmdAppCommand>
 800ba16:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d02d      	beq.n	800ba7a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ba1e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ba22:	e047      	b.n	800bab4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2100      	movs	r1, #0
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f002 f9f8 	bl	800de20 <SDMMC_CmdAppCommand>
 800ba30:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d001      	beq.n	800ba3c <SD_PowerON+0x98>
    {
      return errorstate;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	e03b      	b.n	800bab4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	491e      	ldr	r1, [pc, #120]	@ (800babc <SD_PowerON+0x118>)
 800ba42:	4618      	mov	r0, r3
 800ba44:	f002 fa0e 	bl	800de64 <SDMMC_CmdAppOperCommand>
 800ba48:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d002      	beq.n	800ba56 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ba50:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ba54:	e02e      	b.n	800bab4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2100      	movs	r1, #0
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f002 f876 	bl	800db4e <SDIO_GetResponse>
 800ba62:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	0fdb      	lsrs	r3, r3, #31
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	d101      	bne.n	800ba70 <SD_PowerON+0xcc>
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e000      	b.n	800ba72 <SD_PowerON+0xce>
 800ba70:	2300      	movs	r3, #0
 800ba72:	613b      	str	r3, [r7, #16]

    count++;
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	3301      	adds	r3, #1
 800ba78:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d802      	bhi.n	800ba8a <SD_PowerON+0xe6>
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d0cc      	beq.n	800ba24 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d902      	bls.n	800ba9a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ba94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ba98:	e00c      	b.n	800bab4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d003      	beq.n	800baac <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2201      	movs	r2, #1
 800baa8:	645a      	str	r2, [r3, #68]	@ 0x44
 800baaa:	e002      	b.n	800bab2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800bab2:	2300      	movs	r3, #0
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3718      	adds	r7, #24
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}
 800babc:	c1100000 	.word	0xc1100000

0800bac0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d102      	bne.n	800bad6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800bad0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bad4:	e018      	b.n	800bb08 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bade:	041b      	lsls	r3, r3, #16
 800bae0:	4619      	mov	r1, r3
 800bae2:	4610      	mov	r0, r2
 800bae4:	f002 fa3f 	bl	800df66 <SDMMC_CmdSendStatus>
 800bae8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d001      	beq.n	800baf4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	e009      	b.n	800bb08 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2100      	movs	r1, #0
 800bafa:	4618      	mov	r0, r3
 800bafc:	f002 f827 	bl	800db4e <SDIO_GetResponse>
 800bb00:	4602      	mov	r2, r0
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800bb06:	2300      	movs	r3, #0
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3710      	adds	r7, #16
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d101      	bne.n	800bb22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e041      	b.n	800bba6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d106      	bne.n	800bb3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2200      	movs	r2, #0
 800bb32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f7fa f930 	bl	8005d9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2202      	movs	r2, #2
 800bb40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	3304      	adds	r3, #4
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	4610      	mov	r0, r2
 800bb50:	f000 fc56 	bl	800c400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2201      	movs	r2, #1
 800bb58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2201      	movs	r2, #1
 800bb60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2201      	movs	r2, #1
 800bb68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2201      	movs	r2, #1
 800bb70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2201      	movs	r2, #1
 800bb78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2201      	movs	r2, #1
 800bb80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2201      	movs	r2, #1
 800bb88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2201      	movs	r2, #1
 800bb90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2201      	movs	r2, #1
 800bb98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bba4:	2300      	movs	r3, #0
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3708      	adds	r7, #8
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
	...

0800bbb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b085      	sub	sp, #20
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bbbe:	b2db      	uxtb	r3, r3
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d001      	beq.n	800bbc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	e044      	b.n	800bc52 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2202      	movs	r2, #2
 800bbcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	68da      	ldr	r2, [r3, #12]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f042 0201 	orr.w	r2, r2, #1
 800bbde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	4a1d      	ldr	r2, [pc, #116]	@ (800bc5c <HAL_TIM_Base_Start_IT+0xac>)
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d018      	beq.n	800bc1c <HAL_TIM_Base_Start_IT+0x6c>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4a1c      	ldr	r2, [pc, #112]	@ (800bc60 <HAL_TIM_Base_Start_IT+0xb0>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d013      	beq.n	800bc1c <HAL_TIM_Base_Start_IT+0x6c>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbfc:	d00e      	beq.n	800bc1c <HAL_TIM_Base_Start_IT+0x6c>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4a18      	ldr	r2, [pc, #96]	@ (800bc64 <HAL_TIM_Base_Start_IT+0xb4>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d009      	beq.n	800bc1c <HAL_TIM_Base_Start_IT+0x6c>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4a16      	ldr	r2, [pc, #88]	@ (800bc68 <HAL_TIM_Base_Start_IT+0xb8>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d004      	beq.n	800bc1c <HAL_TIM_Base_Start_IT+0x6c>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4a15      	ldr	r2, [pc, #84]	@ (800bc6c <HAL_TIM_Base_Start_IT+0xbc>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d111      	bne.n	800bc40 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	689b      	ldr	r3, [r3, #8]
 800bc22:	f003 0307 	and.w	r3, r3, #7
 800bc26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2b06      	cmp	r3, #6
 800bc2c:	d010      	beq.n	800bc50 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f042 0201 	orr.w	r2, r2, #1
 800bc3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc3e:	e007      	b.n	800bc50 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f042 0201 	orr.w	r2, r2, #1
 800bc4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bc50:	2300      	movs	r3, #0
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3714      	adds	r7, #20
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bc80      	pop	{r7}
 800bc5a:	4770      	bx	lr
 800bc5c:	40012c00 	.word	0x40012c00
 800bc60:	40013400 	.word	0x40013400
 800bc64:	40000400 	.word	0x40000400
 800bc68:	40000800 	.word	0x40000800
 800bc6c:	40000c00 	.word	0x40000c00

0800bc70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b082      	sub	sp, #8
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d101      	bne.n	800bc82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bc7e:	2301      	movs	r3, #1
 800bc80:	e041      	b.n	800bd06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bc88:	b2db      	uxtb	r3, r3
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d106      	bne.n	800bc9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2200      	movs	r2, #0
 800bc92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 f839 	bl	800bd0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2202      	movs	r2, #2
 800bca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681a      	ldr	r2, [r3, #0]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	3304      	adds	r3, #4
 800bcac:	4619      	mov	r1, r3
 800bcae:	4610      	mov	r0, r2
 800bcb0:	f000 fba6 	bl	800c400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2201      	movs	r2, #1
 800bcd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2201      	movs	r2, #1
 800bce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2201      	movs	r2, #1
 800bce8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2201      	movs	r2, #1
 800bcf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2201      	movs	r2, #1
 800bd00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bd04:	2300      	movs	r3, #0
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3708      	adds	r7, #8
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bd0e:	b480      	push	{r7}
 800bd10:	b083      	sub	sp, #12
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bd16:	bf00      	nop
 800bd18:	370c      	adds	r7, #12
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bc80      	pop	{r7}
 800bd1e:	4770      	bx	lr

0800bd20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d109      	bne.n	800bd44 <HAL_TIM_PWM_Start+0x24>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	2b01      	cmp	r3, #1
 800bd3a:	bf14      	ite	ne
 800bd3c:	2301      	movne	r3, #1
 800bd3e:	2300      	moveq	r3, #0
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	e022      	b.n	800bd8a <HAL_TIM_PWM_Start+0x6a>
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	2b04      	cmp	r3, #4
 800bd48:	d109      	bne.n	800bd5e <HAL_TIM_PWM_Start+0x3e>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	bf14      	ite	ne
 800bd56:	2301      	movne	r3, #1
 800bd58:	2300      	moveq	r3, #0
 800bd5a:	b2db      	uxtb	r3, r3
 800bd5c:	e015      	b.n	800bd8a <HAL_TIM_PWM_Start+0x6a>
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	2b08      	cmp	r3, #8
 800bd62:	d109      	bne.n	800bd78 <HAL_TIM_PWM_Start+0x58>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bd6a:	b2db      	uxtb	r3, r3
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	bf14      	ite	ne
 800bd70:	2301      	movne	r3, #1
 800bd72:	2300      	moveq	r3, #0
 800bd74:	b2db      	uxtb	r3, r3
 800bd76:	e008      	b.n	800bd8a <HAL_TIM_PWM_Start+0x6a>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	bf14      	ite	ne
 800bd84:	2301      	movne	r3, #1
 800bd86:	2300      	moveq	r3, #0
 800bd88:	b2db      	uxtb	r3, r3
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d001      	beq.n	800bd92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e072      	b.n	800be78 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d104      	bne.n	800bda2 <HAL_TIM_PWM_Start+0x82>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2202      	movs	r2, #2
 800bd9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bda0:	e013      	b.n	800bdca <HAL_TIM_PWM_Start+0xaa>
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	2b04      	cmp	r3, #4
 800bda6:	d104      	bne.n	800bdb2 <HAL_TIM_PWM_Start+0x92>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2202      	movs	r2, #2
 800bdac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bdb0:	e00b      	b.n	800bdca <HAL_TIM_PWM_Start+0xaa>
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	2b08      	cmp	r3, #8
 800bdb6:	d104      	bne.n	800bdc2 <HAL_TIM_PWM_Start+0xa2>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2202      	movs	r2, #2
 800bdbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bdc0:	e003      	b.n	800bdca <HAL_TIM_PWM_Start+0xaa>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2202      	movs	r2, #2
 800bdc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	6839      	ldr	r1, [r7, #0]
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f000 fdd0 	bl	800c978 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a28      	ldr	r2, [pc, #160]	@ (800be80 <HAL_TIM_PWM_Start+0x160>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d004      	beq.n	800bdec <HAL_TIM_PWM_Start+0xcc>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4a27      	ldr	r2, [pc, #156]	@ (800be84 <HAL_TIM_PWM_Start+0x164>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d101      	bne.n	800bdf0 <HAL_TIM_PWM_Start+0xd0>
 800bdec:	2301      	movs	r3, #1
 800bdee:	e000      	b.n	800bdf2 <HAL_TIM_PWM_Start+0xd2>
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d007      	beq.n	800be06 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800be04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	4a1d      	ldr	r2, [pc, #116]	@ (800be80 <HAL_TIM_PWM_Start+0x160>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d018      	beq.n	800be42 <HAL_TIM_PWM_Start+0x122>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4a1b      	ldr	r2, [pc, #108]	@ (800be84 <HAL_TIM_PWM_Start+0x164>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d013      	beq.n	800be42 <HAL_TIM_PWM_Start+0x122>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be22:	d00e      	beq.n	800be42 <HAL_TIM_PWM_Start+0x122>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4a17      	ldr	r2, [pc, #92]	@ (800be88 <HAL_TIM_PWM_Start+0x168>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d009      	beq.n	800be42 <HAL_TIM_PWM_Start+0x122>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4a16      	ldr	r2, [pc, #88]	@ (800be8c <HAL_TIM_PWM_Start+0x16c>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d004      	beq.n	800be42 <HAL_TIM_PWM_Start+0x122>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4a14      	ldr	r2, [pc, #80]	@ (800be90 <HAL_TIM_PWM_Start+0x170>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d111      	bne.n	800be66 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	689b      	ldr	r3, [r3, #8]
 800be48:	f003 0307 	and.w	r3, r3, #7
 800be4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2b06      	cmp	r3, #6
 800be52:	d010      	beq.n	800be76 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f042 0201 	orr.w	r2, r2, #1
 800be62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be64:	e007      	b.n	800be76 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f042 0201 	orr.w	r2, r2, #1
 800be74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800be76:	2300      	movs	r3, #0
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3710      	adds	r7, #16
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	40012c00 	.word	0x40012c00
 800be84:	40013400 	.word	0x40013400
 800be88:	40000400 	.word	0x40000400
 800be8c:	40000800 	.word	0x40000800
 800be90:	40000c00 	.word	0x40000c00

0800be94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	691b      	ldr	r3, [r3, #16]
 800bea2:	f003 0302 	and.w	r3, r3, #2
 800bea6:	2b02      	cmp	r3, #2
 800bea8:	d122      	bne.n	800bef0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	f003 0302 	and.w	r3, r3, #2
 800beb4:	2b02      	cmp	r3, #2
 800beb6:	d11b      	bne.n	800bef0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f06f 0202 	mvn.w	r2, #2
 800bec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2201      	movs	r2, #1
 800bec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	699b      	ldr	r3, [r3, #24]
 800bece:	f003 0303 	and.w	r3, r3, #3
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d003      	beq.n	800bede <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 fa76 	bl	800c3c8 <HAL_TIM_IC_CaptureCallback>
 800bedc:	e005      	b.n	800beea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 fa69 	bl	800c3b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 fa78 	bl	800c3da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2200      	movs	r2, #0
 800beee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	691b      	ldr	r3, [r3, #16]
 800bef6:	f003 0304 	and.w	r3, r3, #4
 800befa:	2b04      	cmp	r3, #4
 800befc:	d122      	bne.n	800bf44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	f003 0304 	and.w	r3, r3, #4
 800bf08:	2b04      	cmp	r3, #4
 800bf0a:	d11b      	bne.n	800bf44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f06f 0204 	mvn.w	r2, #4
 800bf14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2202      	movs	r2, #2
 800bf1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	699b      	ldr	r3, [r3, #24]
 800bf22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d003      	beq.n	800bf32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 fa4c 	bl	800c3c8 <HAL_TIM_IC_CaptureCallback>
 800bf30:	e005      	b.n	800bf3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 fa3f 	bl	800c3b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f000 fa4e 	bl	800c3da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2200      	movs	r2, #0
 800bf42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	691b      	ldr	r3, [r3, #16]
 800bf4a:	f003 0308 	and.w	r3, r3, #8
 800bf4e:	2b08      	cmp	r3, #8
 800bf50:	d122      	bne.n	800bf98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	68db      	ldr	r3, [r3, #12]
 800bf58:	f003 0308 	and.w	r3, r3, #8
 800bf5c:	2b08      	cmp	r3, #8
 800bf5e:	d11b      	bne.n	800bf98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f06f 0208 	mvn.w	r2, #8
 800bf68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2204      	movs	r2, #4
 800bf6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	69db      	ldr	r3, [r3, #28]
 800bf76:	f003 0303 	and.w	r3, r3, #3
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d003      	beq.n	800bf86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 fa22 	bl	800c3c8 <HAL_TIM_IC_CaptureCallback>
 800bf84:	e005      	b.n	800bf92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 fa15 	bl	800c3b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 fa24 	bl	800c3da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2200      	movs	r2, #0
 800bf96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	691b      	ldr	r3, [r3, #16]
 800bf9e:	f003 0310 	and.w	r3, r3, #16
 800bfa2:	2b10      	cmp	r3, #16
 800bfa4:	d122      	bne.n	800bfec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	f003 0310 	and.w	r3, r3, #16
 800bfb0:	2b10      	cmp	r3, #16
 800bfb2:	d11b      	bne.n	800bfec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f06f 0210 	mvn.w	r2, #16
 800bfbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2208      	movs	r2, #8
 800bfc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	69db      	ldr	r3, [r3, #28]
 800bfca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d003      	beq.n	800bfda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 f9f8 	bl	800c3c8 <HAL_TIM_IC_CaptureCallback>
 800bfd8:	e005      	b.n	800bfe6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 f9eb 	bl	800c3b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f000 f9fa 	bl	800c3da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	691b      	ldr	r3, [r3, #16]
 800bff2:	f003 0301 	and.w	r3, r3, #1
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d10e      	bne.n	800c018 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	f003 0301 	and.w	r3, r3, #1
 800c004:	2b01      	cmp	r3, #1
 800c006:	d107      	bne.n	800c018 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f06f 0201 	mvn.w	r2, #1
 800c010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f7f9 fc0c 	bl	8005830 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	691b      	ldr	r3, [r3, #16]
 800c01e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c022:	2b80      	cmp	r3, #128	@ 0x80
 800c024:	d10e      	bne.n	800c044 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	68db      	ldr	r3, [r3, #12]
 800c02c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c030:	2b80      	cmp	r3, #128	@ 0x80
 800c032:	d107      	bne.n	800c044 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c03c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 fd33 	bl	800caaa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	691b      	ldr	r3, [r3, #16]
 800c04a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c04e:	2b40      	cmp	r3, #64	@ 0x40
 800c050:	d10e      	bne.n	800c070 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c05c:	2b40      	cmp	r3, #64	@ 0x40
 800c05e:	d107      	bne.n	800c070 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 f9be 	bl	800c3ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	691b      	ldr	r3, [r3, #16]
 800c076:	f003 0320 	and.w	r3, r3, #32
 800c07a:	2b20      	cmp	r3, #32
 800c07c:	d10e      	bne.n	800c09c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	68db      	ldr	r3, [r3, #12]
 800c084:	f003 0320 	and.w	r3, r3, #32
 800c088:	2b20      	cmp	r3, #32
 800c08a:	d107      	bne.n	800c09c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f06f 0220 	mvn.w	r2, #32
 800c094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 fcfe 	bl	800ca98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c09c:	bf00      	nop
 800c09e:	3708      	adds	r7, #8
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b086      	sub	sp, #24
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	60f8      	str	r0, [r7, #12]
 800c0ac:	60b9      	str	r1, [r7, #8]
 800c0ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d101      	bne.n	800c0c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c0be:	2302      	movs	r3, #2
 800c0c0:	e0ae      	b.n	800c220 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2b0c      	cmp	r3, #12
 800c0ce:	f200 809f 	bhi.w	800c210 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c0d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c0d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0d8:	0800c10d 	.word	0x0800c10d
 800c0dc:	0800c211 	.word	0x0800c211
 800c0e0:	0800c211 	.word	0x0800c211
 800c0e4:	0800c211 	.word	0x0800c211
 800c0e8:	0800c14d 	.word	0x0800c14d
 800c0ec:	0800c211 	.word	0x0800c211
 800c0f0:	0800c211 	.word	0x0800c211
 800c0f4:	0800c211 	.word	0x0800c211
 800c0f8:	0800c18f 	.word	0x0800c18f
 800c0fc:	0800c211 	.word	0x0800c211
 800c100:	0800c211 	.word	0x0800c211
 800c104:	0800c211 	.word	0x0800c211
 800c108:	0800c1cf 	.word	0x0800c1cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	68b9      	ldr	r1, [r7, #8]
 800c112:	4618      	mov	r0, r3
 800c114:	f000 f9ee 	bl	800c4f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	699a      	ldr	r2, [r3, #24]
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f042 0208 	orr.w	r2, r2, #8
 800c126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	699a      	ldr	r2, [r3, #24]
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f022 0204 	bic.w	r2, r2, #4
 800c136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	6999      	ldr	r1, [r3, #24]
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	691a      	ldr	r2, [r3, #16]
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	430a      	orrs	r2, r1
 800c148:	619a      	str	r2, [r3, #24]
      break;
 800c14a:	e064      	b.n	800c216 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	68b9      	ldr	r1, [r7, #8]
 800c152:	4618      	mov	r0, r3
 800c154:	f000 fa3e 	bl	800c5d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	699a      	ldr	r2, [r3, #24]
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	699a      	ldr	r2, [r3, #24]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	6999      	ldr	r1, [r3, #24]
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	691b      	ldr	r3, [r3, #16]
 800c182:	021a      	lsls	r2, r3, #8
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	430a      	orrs	r2, r1
 800c18a:	619a      	str	r2, [r3, #24]
      break;
 800c18c:	e043      	b.n	800c216 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	68b9      	ldr	r1, [r7, #8]
 800c194:	4618      	mov	r0, r3
 800c196:	f000 fa91 	bl	800c6bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	69da      	ldr	r2, [r3, #28]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f042 0208 	orr.w	r2, r2, #8
 800c1a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	69da      	ldr	r2, [r3, #28]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f022 0204 	bic.w	r2, r2, #4
 800c1b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	69d9      	ldr	r1, [r3, #28]
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	691a      	ldr	r2, [r3, #16]
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	430a      	orrs	r2, r1
 800c1ca:	61da      	str	r2, [r3, #28]
      break;
 800c1cc:	e023      	b.n	800c216 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	68b9      	ldr	r1, [r7, #8]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f000 fae5 	bl	800c7a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	69da      	ldr	r2, [r3, #28]
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c1e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	69da      	ldr	r2, [r3, #28]
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c1f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	69d9      	ldr	r1, [r3, #28]
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	691b      	ldr	r3, [r3, #16]
 800c204:	021a      	lsls	r2, r3, #8
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	430a      	orrs	r2, r1
 800c20c:	61da      	str	r2, [r3, #28]
      break;
 800c20e:	e002      	b.n	800c216 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c210:	2301      	movs	r3, #1
 800c212:	75fb      	strb	r3, [r7, #23]
      break;
 800c214:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2200      	movs	r2, #0
 800c21a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c21e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c220:	4618      	mov	r0, r3
 800c222:	3718      	adds	r7, #24
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c232:	2300      	movs	r3, #0
 800c234:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	d101      	bne.n	800c244 <HAL_TIM_ConfigClockSource+0x1c>
 800c240:	2302      	movs	r3, #2
 800c242:	e0b4      	b.n	800c3ae <HAL_TIM_ConfigClockSource+0x186>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2201      	movs	r2, #1
 800c248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2202      	movs	r2, #2
 800c250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c262:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c26a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	68ba      	ldr	r2, [r7, #8]
 800c272:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c27c:	d03e      	beq.n	800c2fc <HAL_TIM_ConfigClockSource+0xd4>
 800c27e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c282:	f200 8087 	bhi.w	800c394 <HAL_TIM_ConfigClockSource+0x16c>
 800c286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c28a:	f000 8086 	beq.w	800c39a <HAL_TIM_ConfigClockSource+0x172>
 800c28e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c292:	d87f      	bhi.n	800c394 <HAL_TIM_ConfigClockSource+0x16c>
 800c294:	2b70      	cmp	r3, #112	@ 0x70
 800c296:	d01a      	beq.n	800c2ce <HAL_TIM_ConfigClockSource+0xa6>
 800c298:	2b70      	cmp	r3, #112	@ 0x70
 800c29a:	d87b      	bhi.n	800c394 <HAL_TIM_ConfigClockSource+0x16c>
 800c29c:	2b60      	cmp	r3, #96	@ 0x60
 800c29e:	d050      	beq.n	800c342 <HAL_TIM_ConfigClockSource+0x11a>
 800c2a0:	2b60      	cmp	r3, #96	@ 0x60
 800c2a2:	d877      	bhi.n	800c394 <HAL_TIM_ConfigClockSource+0x16c>
 800c2a4:	2b50      	cmp	r3, #80	@ 0x50
 800c2a6:	d03c      	beq.n	800c322 <HAL_TIM_ConfigClockSource+0xfa>
 800c2a8:	2b50      	cmp	r3, #80	@ 0x50
 800c2aa:	d873      	bhi.n	800c394 <HAL_TIM_ConfigClockSource+0x16c>
 800c2ac:	2b40      	cmp	r3, #64	@ 0x40
 800c2ae:	d058      	beq.n	800c362 <HAL_TIM_ConfigClockSource+0x13a>
 800c2b0:	2b40      	cmp	r3, #64	@ 0x40
 800c2b2:	d86f      	bhi.n	800c394 <HAL_TIM_ConfigClockSource+0x16c>
 800c2b4:	2b30      	cmp	r3, #48	@ 0x30
 800c2b6:	d064      	beq.n	800c382 <HAL_TIM_ConfigClockSource+0x15a>
 800c2b8:	2b30      	cmp	r3, #48	@ 0x30
 800c2ba:	d86b      	bhi.n	800c394 <HAL_TIM_ConfigClockSource+0x16c>
 800c2bc:	2b20      	cmp	r3, #32
 800c2be:	d060      	beq.n	800c382 <HAL_TIM_ConfigClockSource+0x15a>
 800c2c0:	2b20      	cmp	r3, #32
 800c2c2:	d867      	bhi.n	800c394 <HAL_TIM_ConfigClockSource+0x16c>
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d05c      	beq.n	800c382 <HAL_TIM_ConfigClockSource+0x15a>
 800c2c8:	2b10      	cmp	r3, #16
 800c2ca:	d05a      	beq.n	800c382 <HAL_TIM_ConfigClockSource+0x15a>
 800c2cc:	e062      	b.n	800c394 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c2de:	f000 fb2c 	bl	800c93a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	689b      	ldr	r3, [r3, #8]
 800c2e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c2f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	68ba      	ldr	r2, [r7, #8]
 800c2f8:	609a      	str	r2, [r3, #8]
      break;
 800c2fa:	e04f      	b.n	800c39c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c30c:	f000 fb15 	bl	800c93a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	689a      	ldr	r2, [r3, #8]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c31e:	609a      	str	r2, [r3, #8]
      break;
 800c320:	e03c      	b.n	800c39c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c32e:	461a      	mov	r2, r3
 800c330:	f000 fa8c 	bl	800c84c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2150      	movs	r1, #80	@ 0x50
 800c33a:	4618      	mov	r0, r3
 800c33c:	f000 fae3 	bl	800c906 <TIM_ITRx_SetConfig>
      break;
 800c340:	e02c      	b.n	800c39c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c34e:	461a      	mov	r2, r3
 800c350:	f000 faaa 	bl	800c8a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	2160      	movs	r1, #96	@ 0x60
 800c35a:	4618      	mov	r0, r3
 800c35c:	f000 fad3 	bl	800c906 <TIM_ITRx_SetConfig>
      break;
 800c360:	e01c      	b.n	800c39c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c36e:	461a      	mov	r2, r3
 800c370:	f000 fa6c 	bl	800c84c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2140      	movs	r1, #64	@ 0x40
 800c37a:	4618      	mov	r0, r3
 800c37c:	f000 fac3 	bl	800c906 <TIM_ITRx_SetConfig>
      break;
 800c380:	e00c      	b.n	800c39c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681a      	ldr	r2, [r3, #0]
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4619      	mov	r1, r3
 800c38c:	4610      	mov	r0, r2
 800c38e:	f000 faba 	bl	800c906 <TIM_ITRx_SetConfig>
      break;
 800c392:	e003      	b.n	800c39c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c394:	2301      	movs	r3, #1
 800c396:	73fb      	strb	r3, [r7, #15]
      break;
 800c398:	e000      	b.n	800c39c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c39a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c3ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3710      	adds	r7, #16
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}

0800c3b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c3b6:	b480      	push	{r7}
 800c3b8:	b083      	sub	sp, #12
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c3be:	bf00      	nop
 800c3c0:	370c      	adds	r7, #12
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bc80      	pop	{r7}
 800c3c6:	4770      	bx	lr

0800c3c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b083      	sub	sp, #12
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c3d0:	bf00      	nop
 800c3d2:	370c      	adds	r7, #12
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bc80      	pop	{r7}
 800c3d8:	4770      	bx	lr

0800c3da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c3da:	b480      	push	{r7}
 800c3dc:	b083      	sub	sp, #12
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c3e2:	bf00      	nop
 800c3e4:	370c      	adds	r7, #12
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bc80      	pop	{r7}
 800c3ea:	4770      	bx	lr

0800c3ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b083      	sub	sp, #12
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c3f4:	bf00      	nop
 800c3f6:	370c      	adds	r7, #12
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bc80      	pop	{r7}
 800c3fc:	4770      	bx	lr
	...

0800c400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c400:	b480      	push	{r7}
 800c402:	b085      	sub	sp, #20
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	4a33      	ldr	r2, [pc, #204]	@ (800c4e0 <TIM_Base_SetConfig+0xe0>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d013      	beq.n	800c440 <TIM_Base_SetConfig+0x40>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	4a32      	ldr	r2, [pc, #200]	@ (800c4e4 <TIM_Base_SetConfig+0xe4>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d00f      	beq.n	800c440 <TIM_Base_SetConfig+0x40>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c426:	d00b      	beq.n	800c440 <TIM_Base_SetConfig+0x40>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	4a2f      	ldr	r2, [pc, #188]	@ (800c4e8 <TIM_Base_SetConfig+0xe8>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d007      	beq.n	800c440 <TIM_Base_SetConfig+0x40>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	4a2e      	ldr	r2, [pc, #184]	@ (800c4ec <TIM_Base_SetConfig+0xec>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d003      	beq.n	800c440 <TIM_Base_SetConfig+0x40>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	4a2d      	ldr	r2, [pc, #180]	@ (800c4f0 <TIM_Base_SetConfig+0xf0>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d108      	bne.n	800c452 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	68fa      	ldr	r2, [r7, #12]
 800c44e:	4313      	orrs	r3, r2
 800c450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	4a22      	ldr	r2, [pc, #136]	@ (800c4e0 <TIM_Base_SetConfig+0xe0>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d013      	beq.n	800c482 <TIM_Base_SetConfig+0x82>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	4a21      	ldr	r2, [pc, #132]	@ (800c4e4 <TIM_Base_SetConfig+0xe4>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d00f      	beq.n	800c482 <TIM_Base_SetConfig+0x82>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c468:	d00b      	beq.n	800c482 <TIM_Base_SetConfig+0x82>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	4a1e      	ldr	r2, [pc, #120]	@ (800c4e8 <TIM_Base_SetConfig+0xe8>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d007      	beq.n	800c482 <TIM_Base_SetConfig+0x82>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	4a1d      	ldr	r2, [pc, #116]	@ (800c4ec <TIM_Base_SetConfig+0xec>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d003      	beq.n	800c482 <TIM_Base_SetConfig+0x82>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	4a1c      	ldr	r2, [pc, #112]	@ (800c4f0 <TIM_Base_SetConfig+0xf0>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d108      	bne.n	800c494 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	68db      	ldr	r3, [r3, #12]
 800c48e:	68fa      	ldr	r2, [r7, #12]
 800c490:	4313      	orrs	r3, r2
 800c492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	695b      	ldr	r3, [r3, #20]
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	68fa      	ldr	r2, [r7, #12]
 800c4a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	689a      	ldr	r2, [r3, #8]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	4a09      	ldr	r2, [pc, #36]	@ (800c4e0 <TIM_Base_SetConfig+0xe0>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d003      	beq.n	800c4c8 <TIM_Base_SetConfig+0xc8>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	4a08      	ldr	r2, [pc, #32]	@ (800c4e4 <TIM_Base_SetConfig+0xe4>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d103      	bne.n	800c4d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	691a      	ldr	r2, [r3, #16]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	615a      	str	r2, [r3, #20]
}
 800c4d6:	bf00      	nop
 800c4d8:	3714      	adds	r7, #20
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bc80      	pop	{r7}
 800c4de:	4770      	bx	lr
 800c4e0:	40012c00 	.word	0x40012c00
 800c4e4:	40013400 	.word	0x40013400
 800c4e8:	40000400 	.word	0x40000400
 800c4ec:	40000800 	.word	0x40000800
 800c4f0:	40000c00 	.word	0x40000c00

0800c4f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b087      	sub	sp, #28
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6a1b      	ldr	r3, [r3, #32]
 800c502:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6a1b      	ldr	r3, [r3, #32]
 800c508:	f023 0201 	bic.w	r2, r3, #1
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	699b      	ldr	r3, [r3, #24]
 800c51a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f023 0303 	bic.w	r3, r3, #3
 800c52a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	68fa      	ldr	r2, [r7, #12]
 800c532:	4313      	orrs	r3, r2
 800c534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	f023 0302 	bic.w	r3, r3, #2
 800c53c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	689b      	ldr	r3, [r3, #8]
 800c542:	697a      	ldr	r2, [r7, #20]
 800c544:	4313      	orrs	r3, r2
 800c546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	4a20      	ldr	r2, [pc, #128]	@ (800c5cc <TIM_OC1_SetConfig+0xd8>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d003      	beq.n	800c558 <TIM_OC1_SetConfig+0x64>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	4a1f      	ldr	r2, [pc, #124]	@ (800c5d0 <TIM_OC1_SetConfig+0xdc>)
 800c554:	4293      	cmp	r3, r2
 800c556:	d10c      	bne.n	800c572 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	f023 0308 	bic.w	r3, r3, #8
 800c55e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	697a      	ldr	r2, [r7, #20]
 800c566:	4313      	orrs	r3, r2
 800c568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	f023 0304 	bic.w	r3, r3, #4
 800c570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	4a15      	ldr	r2, [pc, #84]	@ (800c5cc <TIM_OC1_SetConfig+0xd8>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d003      	beq.n	800c582 <TIM_OC1_SetConfig+0x8e>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	4a14      	ldr	r2, [pc, #80]	@ (800c5d0 <TIM_OC1_SetConfig+0xdc>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d111      	bne.n	800c5a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	695b      	ldr	r3, [r3, #20]
 800c596:	693a      	ldr	r2, [r7, #16]
 800c598:	4313      	orrs	r3, r2
 800c59a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	699b      	ldr	r3, [r3, #24]
 800c5a0:	693a      	ldr	r2, [r7, #16]
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	693a      	ldr	r2, [r7, #16]
 800c5aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	68fa      	ldr	r2, [r7, #12]
 800c5b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	685a      	ldr	r2, [r3, #4]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	697a      	ldr	r2, [r7, #20]
 800c5be:	621a      	str	r2, [r3, #32]
}
 800c5c0:	bf00      	nop
 800c5c2:	371c      	adds	r7, #28
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bc80      	pop	{r7}
 800c5c8:	4770      	bx	lr
 800c5ca:	bf00      	nop
 800c5cc:	40012c00 	.word	0x40012c00
 800c5d0:	40013400 	.word	0x40013400

0800c5d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b087      	sub	sp, #28
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6a1b      	ldr	r3, [r3, #32]
 800c5e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6a1b      	ldr	r3, [r3, #32]
 800c5e8:	f023 0210 	bic.w	r2, r3, #16
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	699b      	ldr	r3, [r3, #24]
 800c5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c60a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	021b      	lsls	r3, r3, #8
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	4313      	orrs	r3, r2
 800c616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	f023 0320 	bic.w	r3, r3, #32
 800c61e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	011b      	lsls	r3, r3, #4
 800c626:	697a      	ldr	r2, [r7, #20]
 800c628:	4313      	orrs	r3, r2
 800c62a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	4a21      	ldr	r2, [pc, #132]	@ (800c6b4 <TIM_OC2_SetConfig+0xe0>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d003      	beq.n	800c63c <TIM_OC2_SetConfig+0x68>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	4a20      	ldr	r2, [pc, #128]	@ (800c6b8 <TIM_OC2_SetConfig+0xe4>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d10d      	bne.n	800c658 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	011b      	lsls	r3, r3, #4
 800c64a:	697a      	ldr	r2, [r7, #20]
 800c64c:	4313      	orrs	r3, r2
 800c64e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c656:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4a16      	ldr	r2, [pc, #88]	@ (800c6b4 <TIM_OC2_SetConfig+0xe0>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d003      	beq.n	800c668 <TIM_OC2_SetConfig+0x94>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	4a15      	ldr	r2, [pc, #84]	@ (800c6b8 <TIM_OC2_SetConfig+0xe4>)
 800c664:	4293      	cmp	r3, r2
 800c666:	d113      	bne.n	800c690 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c66e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c670:	693b      	ldr	r3, [r7, #16]
 800c672:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c676:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	695b      	ldr	r3, [r3, #20]
 800c67c:	009b      	lsls	r3, r3, #2
 800c67e:	693a      	ldr	r2, [r7, #16]
 800c680:	4313      	orrs	r3, r2
 800c682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	699b      	ldr	r3, [r3, #24]
 800c688:	009b      	lsls	r3, r3, #2
 800c68a:	693a      	ldr	r2, [r7, #16]
 800c68c:	4313      	orrs	r3, r2
 800c68e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	693a      	ldr	r2, [r7, #16]
 800c694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	68fa      	ldr	r2, [r7, #12]
 800c69a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	685a      	ldr	r2, [r3, #4]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	697a      	ldr	r2, [r7, #20]
 800c6a8:	621a      	str	r2, [r3, #32]
}
 800c6aa:	bf00      	nop
 800c6ac:	371c      	adds	r7, #28
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bc80      	pop	{r7}
 800c6b2:	4770      	bx	lr
 800c6b4:	40012c00 	.word	0x40012c00
 800c6b8:	40013400 	.word	0x40013400

0800c6bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b087      	sub	sp, #28
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6a1b      	ldr	r3, [r3, #32]
 800c6ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6a1b      	ldr	r3, [r3, #32]
 800c6d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	685b      	ldr	r3, [r3, #4]
 800c6dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	69db      	ldr	r3, [r3, #28]
 800c6e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	f023 0303 	bic.w	r3, r3, #3
 800c6f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	68fa      	ldr	r2, [r7, #12]
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	021b      	lsls	r3, r3, #8
 800c70c:	697a      	ldr	r2, [r7, #20]
 800c70e:	4313      	orrs	r3, r2
 800c710:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	4a21      	ldr	r2, [pc, #132]	@ (800c79c <TIM_OC3_SetConfig+0xe0>)
 800c716:	4293      	cmp	r3, r2
 800c718:	d003      	beq.n	800c722 <TIM_OC3_SetConfig+0x66>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	4a20      	ldr	r2, [pc, #128]	@ (800c7a0 <TIM_OC3_SetConfig+0xe4>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d10d      	bne.n	800c73e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c728:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	68db      	ldr	r3, [r3, #12]
 800c72e:	021b      	lsls	r3, r3, #8
 800c730:	697a      	ldr	r2, [r7, #20]
 800c732:	4313      	orrs	r3, r2
 800c734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c73c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	4a16      	ldr	r2, [pc, #88]	@ (800c79c <TIM_OC3_SetConfig+0xe0>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d003      	beq.n	800c74e <TIM_OC3_SetConfig+0x92>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	4a15      	ldr	r2, [pc, #84]	@ (800c7a0 <TIM_OC3_SetConfig+0xe4>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d113      	bne.n	800c776 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c75c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	695b      	ldr	r3, [r3, #20]
 800c762:	011b      	lsls	r3, r3, #4
 800c764:	693a      	ldr	r2, [r7, #16]
 800c766:	4313      	orrs	r3, r2
 800c768:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	699b      	ldr	r3, [r3, #24]
 800c76e:	011b      	lsls	r3, r3, #4
 800c770:	693a      	ldr	r2, [r7, #16]
 800c772:	4313      	orrs	r3, r2
 800c774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	693a      	ldr	r2, [r7, #16]
 800c77a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	68fa      	ldr	r2, [r7, #12]
 800c780:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	685a      	ldr	r2, [r3, #4]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	697a      	ldr	r2, [r7, #20]
 800c78e:	621a      	str	r2, [r3, #32]
}
 800c790:	bf00      	nop
 800c792:	371c      	adds	r7, #28
 800c794:	46bd      	mov	sp, r7
 800c796:	bc80      	pop	{r7}
 800c798:	4770      	bx	lr
 800c79a:	bf00      	nop
 800c79c:	40012c00 	.word	0x40012c00
 800c7a0:	40013400 	.word	0x40013400

0800c7a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b087      	sub	sp, #28
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6a1b      	ldr	r3, [r3, #32]
 800c7b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6a1b      	ldr	r3, [r3, #32]
 800c7b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	69db      	ldr	r3, [r3, #28]
 800c7ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c7da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	021b      	lsls	r3, r3, #8
 800c7e2:	68fa      	ldr	r2, [r7, #12]
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c7ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	689b      	ldr	r3, [r3, #8]
 800c7f4:	031b      	lsls	r3, r3, #12
 800c7f6:	693a      	ldr	r2, [r7, #16]
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	4a11      	ldr	r2, [pc, #68]	@ (800c844 <TIM_OC4_SetConfig+0xa0>)
 800c800:	4293      	cmp	r3, r2
 800c802:	d003      	beq.n	800c80c <TIM_OC4_SetConfig+0x68>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	4a10      	ldr	r2, [pc, #64]	@ (800c848 <TIM_OC4_SetConfig+0xa4>)
 800c808:	4293      	cmp	r3, r2
 800c80a:	d109      	bne.n	800c820 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c812:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	695b      	ldr	r3, [r3, #20]
 800c818:	019b      	lsls	r3, r3, #6
 800c81a:	697a      	ldr	r2, [r7, #20]
 800c81c:	4313      	orrs	r3, r2
 800c81e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	697a      	ldr	r2, [r7, #20]
 800c824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	68fa      	ldr	r2, [r7, #12]
 800c82a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	685a      	ldr	r2, [r3, #4]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	693a      	ldr	r2, [r7, #16]
 800c838:	621a      	str	r2, [r3, #32]
}
 800c83a:	bf00      	nop
 800c83c:	371c      	adds	r7, #28
 800c83e:	46bd      	mov	sp, r7
 800c840:	bc80      	pop	{r7}
 800c842:	4770      	bx	lr
 800c844:	40012c00 	.word	0x40012c00
 800c848:	40013400 	.word	0x40013400

0800c84c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b087      	sub	sp, #28
 800c850:	af00      	add	r7, sp, #0
 800c852:	60f8      	str	r0, [r7, #12]
 800c854:	60b9      	str	r1, [r7, #8]
 800c856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	6a1b      	ldr	r3, [r3, #32]
 800c85c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	6a1b      	ldr	r3, [r3, #32]
 800c862:	f023 0201 	bic.w	r2, r3, #1
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	699b      	ldr	r3, [r3, #24]
 800c86e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	011b      	lsls	r3, r3, #4
 800c87c:	693a      	ldr	r2, [r7, #16]
 800c87e:	4313      	orrs	r3, r2
 800c880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	f023 030a 	bic.w	r3, r3, #10
 800c888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c88a:	697a      	ldr	r2, [r7, #20]
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	4313      	orrs	r3, r2
 800c890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	693a      	ldr	r2, [r7, #16]
 800c896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	697a      	ldr	r2, [r7, #20]
 800c89c:	621a      	str	r2, [r3, #32]
}
 800c89e:	bf00      	nop
 800c8a0:	371c      	adds	r7, #28
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bc80      	pop	{r7}
 800c8a6:	4770      	bx	lr

0800c8a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b087      	sub	sp, #28
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	6a1b      	ldr	r3, [r3, #32]
 800c8b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	6a1b      	ldr	r3, [r3, #32]
 800c8be:	f023 0210 	bic.w	r2, r3, #16
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	699b      	ldr	r3, [r3, #24]
 800c8ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c8d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	031b      	lsls	r3, r3, #12
 800c8d8:	693a      	ldr	r2, [r7, #16]
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c8e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	011b      	lsls	r3, r3, #4
 800c8ea:	697a      	ldr	r2, [r7, #20]
 800c8ec:	4313      	orrs	r3, r2
 800c8ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	693a      	ldr	r2, [r7, #16]
 800c8f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	697a      	ldr	r2, [r7, #20]
 800c8fa:	621a      	str	r2, [r3, #32]
}
 800c8fc:	bf00      	nop
 800c8fe:	371c      	adds	r7, #28
 800c900:	46bd      	mov	sp, r7
 800c902:	bc80      	pop	{r7}
 800c904:	4770      	bx	lr

0800c906 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c906:	b480      	push	{r7}
 800c908:	b085      	sub	sp, #20
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
 800c90e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	689b      	ldr	r3, [r3, #8]
 800c914:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c91c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c91e:	683a      	ldr	r2, [r7, #0]
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	4313      	orrs	r3, r2
 800c924:	f043 0307 	orr.w	r3, r3, #7
 800c928:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	68fa      	ldr	r2, [r7, #12]
 800c92e:	609a      	str	r2, [r3, #8]
}
 800c930:	bf00      	nop
 800c932:	3714      	adds	r7, #20
 800c934:	46bd      	mov	sp, r7
 800c936:	bc80      	pop	{r7}
 800c938:	4770      	bx	lr

0800c93a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c93a:	b480      	push	{r7}
 800c93c:	b087      	sub	sp, #28
 800c93e:	af00      	add	r7, sp, #0
 800c940:	60f8      	str	r0, [r7, #12]
 800c942:	60b9      	str	r1, [r7, #8]
 800c944:	607a      	str	r2, [r7, #4]
 800c946:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	689b      	ldr	r3, [r3, #8]
 800c94c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c954:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	021a      	lsls	r2, r3, #8
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	431a      	orrs	r2, r3
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	4313      	orrs	r3, r2
 800c962:	697a      	ldr	r2, [r7, #20]
 800c964:	4313      	orrs	r3, r2
 800c966:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	697a      	ldr	r2, [r7, #20]
 800c96c:	609a      	str	r2, [r3, #8]
}
 800c96e:	bf00      	nop
 800c970:	371c      	adds	r7, #28
 800c972:	46bd      	mov	sp, r7
 800c974:	bc80      	pop	{r7}
 800c976:	4770      	bx	lr

0800c978 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c978:	b480      	push	{r7}
 800c97a:	b087      	sub	sp, #28
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	60f8      	str	r0, [r7, #12]
 800c980:	60b9      	str	r1, [r7, #8]
 800c982:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	f003 031f 	and.w	r3, r3, #31
 800c98a:	2201      	movs	r2, #1
 800c98c:	fa02 f303 	lsl.w	r3, r2, r3
 800c990:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	6a1a      	ldr	r2, [r3, #32]
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	43db      	mvns	r3, r3
 800c99a:	401a      	ands	r2, r3
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	6a1a      	ldr	r2, [r3, #32]
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	f003 031f 	and.w	r3, r3, #31
 800c9aa:	6879      	ldr	r1, [r7, #4]
 800c9ac:	fa01 f303 	lsl.w	r3, r1, r3
 800c9b0:	431a      	orrs	r2, r3
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	621a      	str	r2, [r3, #32]
}
 800c9b6:	bf00      	nop
 800c9b8:	371c      	adds	r7, #28
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bc80      	pop	{r7}
 800c9be:	4770      	bx	lr

0800c9c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b085      	sub	sp, #20
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d101      	bne.n	800c9d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c9d4:	2302      	movs	r3, #2
 800c9d6:	e050      	b.n	800ca7a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2201      	movs	r2, #1
 800c9dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2202      	movs	r2, #2
 800c9e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	689b      	ldr	r3, [r3, #8]
 800c9f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	68fa      	ldr	r2, [r7, #12]
 800ca06:	4313      	orrs	r3, r2
 800ca08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	68fa      	ldr	r2, [r7, #12]
 800ca10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	4a1b      	ldr	r2, [pc, #108]	@ (800ca84 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d018      	beq.n	800ca4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4a19      	ldr	r2, [pc, #100]	@ (800ca88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d013      	beq.n	800ca4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca2e:	d00e      	beq.n	800ca4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4a15      	ldr	r2, [pc, #84]	@ (800ca8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d009      	beq.n	800ca4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	4a14      	ldr	r2, [pc, #80]	@ (800ca90 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d004      	beq.n	800ca4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4a12      	ldr	r2, [pc, #72]	@ (800ca94 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d10c      	bne.n	800ca68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ca54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	685b      	ldr	r3, [r3, #4]
 800ca5a:	68ba      	ldr	r2, [r7, #8]
 800ca5c:	4313      	orrs	r3, r2
 800ca5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	68ba      	ldr	r2, [r7, #8]
 800ca66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2200      	movs	r2, #0
 800ca74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ca78:	2300      	movs	r3, #0
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3714      	adds	r7, #20
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bc80      	pop	{r7}
 800ca82:	4770      	bx	lr
 800ca84:	40012c00 	.word	0x40012c00
 800ca88:	40013400 	.word	0x40013400
 800ca8c:	40000400 	.word	0x40000400
 800ca90:	40000800 	.word	0x40000800
 800ca94:	40000c00 	.word	0x40000c00

0800ca98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b083      	sub	sp, #12
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800caa0:	bf00      	nop
 800caa2:	370c      	adds	r7, #12
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bc80      	pop	{r7}
 800caa8:	4770      	bx	lr

0800caaa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800caaa:	b480      	push	{r7}
 800caac:	b083      	sub	sp, #12
 800caae:	af00      	add	r7, sp, #0
 800cab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cab2:	bf00      	nop
 800cab4:	370c      	adds	r7, #12
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bc80      	pop	{r7}
 800caba:	4770      	bx	lr

0800cabc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b082      	sub	sp, #8
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d101      	bne.n	800cace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800caca:	2301      	movs	r3, #1
 800cacc:	e042      	b.n	800cb54 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cad4:	b2db      	uxtb	r3, r3
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d106      	bne.n	800cae8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2200      	movs	r2, #0
 800cade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f7f9 fa66 	bl	8005fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2224      	movs	r2, #36	@ 0x24
 800caec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	68da      	ldr	r2, [r3, #12]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cafe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f000 ff01 	bl	800d908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	691a      	ldr	r2, [r3, #16]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cb14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	695a      	ldr	r2, [r3, #20]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cb24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	68da      	ldr	r2, [r3, #12]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cb34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2220      	movs	r2, #32
 800cb40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2220      	movs	r2, #32
 800cb48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800cb52:	2300      	movs	r3, #0
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3708      	adds	r7, #8
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}

0800cb5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b08a      	sub	sp, #40	@ 0x28
 800cb60:	af02      	add	r7, sp, #8
 800cb62:	60f8      	str	r0, [r7, #12]
 800cb64:	60b9      	str	r1, [r7, #8]
 800cb66:	603b      	str	r3, [r7, #0]
 800cb68:	4613      	mov	r3, r2
 800cb6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	2b20      	cmp	r3, #32
 800cb7a:	d16d      	bne.n	800cc58 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d002      	beq.n	800cb88 <HAL_UART_Transmit+0x2c>
 800cb82:	88fb      	ldrh	r3, [r7, #6]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d101      	bne.n	800cb8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cb88:	2301      	movs	r3, #1
 800cb8a:	e066      	b.n	800cc5a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	2221      	movs	r2, #33	@ 0x21
 800cb96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cb9a:	f7fa fe41 	bl	8007820 <HAL_GetTick>
 800cb9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	88fa      	ldrh	r2, [r7, #6]
 800cba4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	88fa      	ldrh	r2, [r7, #6]
 800cbaa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	689b      	ldr	r3, [r3, #8]
 800cbb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbb4:	d108      	bne.n	800cbc8 <HAL_UART_Transmit+0x6c>
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	691b      	ldr	r3, [r3, #16]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d104      	bne.n	800cbc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	61bb      	str	r3, [r7, #24]
 800cbc6:	e003      	b.n	800cbd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cbd0:	e02a      	b.n	800cc28 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	9300      	str	r3, [sp, #0]
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	2180      	movs	r1, #128	@ 0x80
 800cbdc:	68f8      	ldr	r0, [r7, #12]
 800cbde:	f000 fc29 	bl	800d434 <UART_WaitOnFlagUntilTimeout>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d001      	beq.n	800cbec <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800cbe8:	2303      	movs	r3, #3
 800cbea:	e036      	b.n	800cc5a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800cbec:	69fb      	ldr	r3, [r7, #28]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d10b      	bne.n	800cc0a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cbf2:	69bb      	ldr	r3, [r7, #24]
 800cbf4:	881b      	ldrh	r3, [r3, #0]
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cc00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800cc02:	69bb      	ldr	r3, [r7, #24]
 800cc04:	3302      	adds	r3, #2
 800cc06:	61bb      	str	r3, [r7, #24]
 800cc08:	e007      	b.n	800cc1a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cc0a:	69fb      	ldr	r3, [r7, #28]
 800cc0c:	781a      	ldrb	r2, [r3, #0]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	3301      	adds	r3, #1
 800cc18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cc1e:	b29b      	uxth	r3, r3
 800cc20:	3b01      	subs	r3, #1
 800cc22:	b29a      	uxth	r2, r3
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cc2c:	b29b      	uxth	r3, r3
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d1cf      	bne.n	800cbd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	9300      	str	r3, [sp, #0]
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	2140      	movs	r1, #64	@ 0x40
 800cc3c:	68f8      	ldr	r0, [r7, #12]
 800cc3e:	f000 fbf9 	bl	800d434 <UART_WaitOnFlagUntilTimeout>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d001      	beq.n	800cc4c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800cc48:	2303      	movs	r3, #3
 800cc4a:	e006      	b.n	800cc5a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2220      	movs	r2, #32
 800cc50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800cc54:	2300      	movs	r3, #0
 800cc56:	e000      	b.n	800cc5a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800cc58:	2302      	movs	r3, #2
  }
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3720      	adds	r7, #32
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}

0800cc62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cc62:	b580      	push	{r7, lr}
 800cc64:	b084      	sub	sp, #16
 800cc66:	af00      	add	r7, sp, #0
 800cc68:	60f8      	str	r0, [r7, #12]
 800cc6a:	60b9      	str	r1, [r7, #8]
 800cc6c:	4613      	mov	r3, r2
 800cc6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	2b20      	cmp	r3, #32
 800cc7a:	d112      	bne.n	800cca2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d002      	beq.n	800cc88 <HAL_UART_Receive_IT+0x26>
 800cc82:	88fb      	ldrh	r3, [r7, #6]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d101      	bne.n	800cc8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800cc88:	2301      	movs	r3, #1
 800cc8a:	e00b      	b.n	800cca4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800cc92:	88fb      	ldrh	r3, [r7, #6]
 800cc94:	461a      	mov	r2, r3
 800cc96:	68b9      	ldr	r1, [r7, #8]
 800cc98:	68f8      	ldr	r0, [r7, #12]
 800cc9a:	f000 fc39 	bl	800d510 <UART_Start_Receive_IT>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	e000      	b.n	800cca4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800cca2:	2302      	movs	r3, #2
  }
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3710      	adds	r7, #16
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}

0800ccac <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b08c      	sub	sp, #48	@ 0x30
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	60b9      	str	r1, [r7, #8]
 800ccb6:	4613      	mov	r3, r2
 800ccb8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ccc0:	b2db      	uxtb	r3, r3
 800ccc2:	2b20      	cmp	r3, #32
 800ccc4:	d156      	bne.n	800cd74 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d002      	beq.n	800ccd2 <HAL_UART_Transmit_DMA+0x26>
 800cccc:	88fb      	ldrh	r3, [r7, #6]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d101      	bne.n	800ccd6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	e04f      	b.n	800cd76 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800ccd6:	68ba      	ldr	r2, [r7, #8]
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	88fa      	ldrh	r2, [r7, #6]
 800cce0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	88fa      	ldrh	r2, [r7, #6]
 800cce6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	2200      	movs	r2, #0
 800ccec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	2221      	movs	r2, #33	@ 0x21
 800ccf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccfa:	4a21      	ldr	r2, [pc, #132]	@ (800cd80 <HAL_UART_Transmit_DMA+0xd4>)
 800ccfc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd02:	4a20      	ldr	r2, [pc, #128]	@ (800cd84 <HAL_UART_Transmit_DMA+0xd8>)
 800cd04:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd0a:	4a1f      	ldr	r2, [pc, #124]	@ (800cd88 <HAL_UART_Transmit_DMA+0xdc>)
 800cd0c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd12:	2200      	movs	r2, #0
 800cd14:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800cd16:	f107 0308 	add.w	r3, r7, #8
 800cd1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800cd20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd22:	6819      	ldr	r1, [r3, #0]
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	3304      	adds	r3, #4
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	88fb      	ldrh	r3, [r7, #6]
 800cd2e:	f7fa fefb 	bl	8007b28 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800cd3a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	3314      	adds	r3, #20
 800cd42:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd44:	69bb      	ldr	r3, [r7, #24]
 800cd46:	e853 3f00 	ldrex	r3, [r3]
 800cd4a:	617b      	str	r3, [r7, #20]
   return(result);
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd52:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	3314      	adds	r3, #20
 800cd5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd5c:	627a      	str	r2, [r7, #36]	@ 0x24
 800cd5e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd60:	6a39      	ldr	r1, [r7, #32]
 800cd62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd64:	e841 2300 	strex	r3, r2, [r1]
 800cd68:	61fb      	str	r3, [r7, #28]
   return(result);
 800cd6a:	69fb      	ldr	r3, [r7, #28]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d1e5      	bne.n	800cd3c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800cd70:	2300      	movs	r3, #0
 800cd72:	e000      	b.n	800cd76 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800cd74:	2302      	movs	r3, #2
  }
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3730      	adds	r7, #48	@ 0x30
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	0800d2eb 	.word	0x0800d2eb
 800cd84:	0800d385 	.word	0x0800d385
 800cd88:	0800d3a1 	.word	0x0800d3a1

0800cd8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b0ba      	sub	sp, #232	@ 0xe8
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	68db      	ldr	r3, [r3, #12]
 800cda4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	695b      	ldr	r3, [r3, #20]
 800cdae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800cdbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdc2:	f003 030f 	and.w	r3, r3, #15
 800cdc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800cdca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d10f      	bne.n	800cdf2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cdd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdd6:	f003 0320 	and.w	r3, r3, #32
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d009      	beq.n	800cdf2 <HAL_UART_IRQHandler+0x66>
 800cdde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cde2:	f003 0320 	and.w	r3, r3, #32
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d003      	beq.n	800cdf2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f000 fccd 	bl	800d78a <UART_Receive_IT>
      return;
 800cdf0:	e25b      	b.n	800d2aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800cdf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	f000 80de 	beq.w	800cfb8 <HAL_UART_IRQHandler+0x22c>
 800cdfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce00:	f003 0301 	and.w	r3, r3, #1
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d106      	bne.n	800ce16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ce08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce0c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	f000 80d1 	beq.w	800cfb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ce16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce1a:	f003 0301 	and.w	r3, r3, #1
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d00b      	beq.n	800ce3a <HAL_UART_IRQHandler+0xae>
 800ce22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d005      	beq.n	800ce3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce32:	f043 0201 	orr.w	r2, r3, #1
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ce3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce3e:	f003 0304 	and.w	r3, r3, #4
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d00b      	beq.n	800ce5e <HAL_UART_IRQHandler+0xd2>
 800ce46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce4a:	f003 0301 	and.w	r3, r3, #1
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d005      	beq.n	800ce5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce56:	f043 0202 	orr.w	r2, r3, #2
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ce5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce62:	f003 0302 	and.w	r3, r3, #2
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d00b      	beq.n	800ce82 <HAL_UART_IRQHandler+0xf6>
 800ce6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce6e:	f003 0301 	and.w	r3, r3, #1
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d005      	beq.n	800ce82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce7a:	f043 0204 	orr.w	r2, r3, #4
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ce82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce86:	f003 0308 	and.w	r3, r3, #8
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d011      	beq.n	800ceb2 <HAL_UART_IRQHandler+0x126>
 800ce8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce92:	f003 0320 	and.w	r3, r3, #32
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d105      	bne.n	800cea6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ce9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce9e:	f003 0301 	and.w	r3, r3, #1
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d005      	beq.n	800ceb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ceaa:	f043 0208 	orr.w	r2, r3, #8
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	f000 81f2 	beq.w	800d2a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cec0:	f003 0320 	and.w	r3, r3, #32
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d008      	beq.n	800ceda <HAL_UART_IRQHandler+0x14e>
 800cec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cecc:	f003 0320 	and.w	r3, r3, #32
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d002      	beq.n	800ceda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 fc58 	bl	800d78a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	695b      	ldr	r3, [r3, #20]
 800cee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	bf14      	ite	ne
 800cee8:	2301      	movne	r3, #1
 800ceea:	2300      	moveq	r3, #0
 800ceec:	b2db      	uxtb	r3, r3
 800ceee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cef6:	f003 0308 	and.w	r3, r3, #8
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d103      	bne.n	800cf06 <HAL_UART_IRQHandler+0x17a>
 800cefe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d04f      	beq.n	800cfa6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 fb62 	bl	800d5d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	695b      	ldr	r3, [r3, #20]
 800cf12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d041      	beq.n	800cf9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	3314      	adds	r3, #20
 800cf20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cf28:	e853 3f00 	ldrex	r3, [r3]
 800cf2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cf30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cf34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	3314      	adds	r3, #20
 800cf42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cf46:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cf4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cf52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cf56:	e841 2300 	strex	r3, r2, [r1]
 800cf5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cf5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d1d9      	bne.n	800cf1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d013      	beq.n	800cf96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf72:	4a7e      	ldr	r2, [pc, #504]	@ (800d16c <HAL_UART_IRQHandler+0x3e0>)
 800cf74:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f7fa fe70 	bl	8007c60 <HAL_DMA_Abort_IT>
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d016      	beq.n	800cfb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf8c:	687a      	ldr	r2, [r7, #4]
 800cf8e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800cf90:	4610      	mov	r0, r2
 800cf92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf94:	e00e      	b.n	800cfb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f000 f993 	bl	800d2c2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf9c:	e00a      	b.n	800cfb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f000 f98f 	bl	800d2c2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfa4:	e006      	b.n	800cfb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f000 f98b 	bl	800d2c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800cfb2:	e175      	b.n	800d2a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfb4:	bf00      	nop
    return;
 800cfb6:	e173      	b.n	800d2a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfbc:	2b01      	cmp	r3, #1
 800cfbe:	f040 814f 	bne.w	800d260 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800cfc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfc6:	f003 0310 	and.w	r3, r3, #16
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	f000 8148 	beq.w	800d260 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800cfd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cfd4:	f003 0310 	and.w	r3, r3, #16
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	f000 8141 	beq.w	800d260 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cfde:	2300      	movs	r3, #0
 800cfe0:	60bb      	str	r3, [r7, #8]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	60bb      	str	r3, [r7, #8]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	685b      	ldr	r3, [r3, #4]
 800cff0:	60bb      	str	r3, [r7, #8]
 800cff2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	695b      	ldr	r3, [r3, #20]
 800cffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cffe:	2b00      	cmp	r3, #0
 800d000:	f000 80b6 	beq.w	800d170 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d010:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d014:	2b00      	cmp	r3, #0
 800d016:	f000 8145 	beq.w	800d2a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d01e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d022:	429a      	cmp	r2, r3
 800d024:	f080 813e 	bcs.w	800d2a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d02e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d034:	699b      	ldr	r3, [r3, #24]
 800d036:	2b20      	cmp	r3, #32
 800d038:	f000 8088 	beq.w	800d14c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	330c      	adds	r3, #12
 800d042:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d046:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d04a:	e853 3f00 	ldrex	r3, [r3]
 800d04e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d052:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d056:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d05a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	330c      	adds	r3, #12
 800d064:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d068:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d06c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d070:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d074:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d078:	e841 2300 	strex	r3, r2, [r1]
 800d07c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d080:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d084:	2b00      	cmp	r3, #0
 800d086:	d1d9      	bne.n	800d03c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	3314      	adds	r3, #20
 800d08e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d090:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d092:	e853 3f00 	ldrex	r3, [r3]
 800d096:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d098:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d09a:	f023 0301 	bic.w	r3, r3, #1
 800d09e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	3314      	adds	r3, #20
 800d0a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d0ac:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d0b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0b2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d0b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d0b8:	e841 2300 	strex	r3, r2, [r1]
 800d0bc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d0be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d1e1      	bne.n	800d088 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	3314      	adds	r3, #20
 800d0ca:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d0ce:	e853 3f00 	ldrex	r3, [r3]
 800d0d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d0d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d0d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d0da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	3314      	adds	r3, #20
 800d0e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d0e8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d0ea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ec:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d0ee:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d0f0:	e841 2300 	strex	r3, r2, [r1]
 800d0f4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d0f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d1e3      	bne.n	800d0c4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2220      	movs	r2, #32
 800d100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2200      	movs	r2, #0
 800d108:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	330c      	adds	r3, #12
 800d110:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d112:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d114:	e853 3f00 	ldrex	r3, [r3]
 800d118:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d11a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d11c:	f023 0310 	bic.w	r3, r3, #16
 800d120:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	330c      	adds	r3, #12
 800d12a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d12e:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d130:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d132:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d134:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d136:	e841 2300 	strex	r3, r2, [r1]
 800d13a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d13c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d1e3      	bne.n	800d10a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d146:	4618      	mov	r0, r3
 800d148:	f7fa fd4e 	bl	8007be8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2202      	movs	r2, #2
 800d150:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	1ad3      	subs	r3, r2, r3
 800d15e:	b29b      	uxth	r3, r3
 800d160:	4619      	mov	r1, r3
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f000 f8b6 	bl	800d2d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d168:	e09c      	b.n	800d2a4 <HAL_UART_IRQHandler+0x518>
 800d16a:	bf00      	nop
 800d16c:	0800d695 	.word	0x0800d695
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d178:	b29b      	uxth	r3, r3
 800d17a:	1ad3      	subs	r3, r2, r3
 800d17c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d184:	b29b      	uxth	r3, r3
 800d186:	2b00      	cmp	r3, #0
 800d188:	f000 808e 	beq.w	800d2a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800d18c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d190:	2b00      	cmp	r3, #0
 800d192:	f000 8089 	beq.w	800d2a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	330c      	adds	r3, #12
 800d19c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1a0:	e853 3f00 	ldrex	r3, [r3]
 800d1a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d1a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d1ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	330c      	adds	r3, #12
 800d1b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d1ba:	647a      	str	r2, [r7, #68]	@ 0x44
 800d1bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d1c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d1c2:	e841 2300 	strex	r3, r2, [r1]
 800d1c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d1c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d1e3      	bne.n	800d196 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	3314      	adds	r3, #20
 800d1d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1d8:	e853 3f00 	ldrex	r3, [r3]
 800d1dc:	623b      	str	r3, [r7, #32]
   return(result);
 800d1de:	6a3b      	ldr	r3, [r7, #32]
 800d1e0:	f023 0301 	bic.w	r3, r3, #1
 800d1e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	3314      	adds	r3, #20
 800d1ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d1f2:	633a      	str	r2, [r7, #48]	@ 0x30
 800d1f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d1f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d1fa:	e841 2300 	strex	r3, r2, [r1]
 800d1fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d202:	2b00      	cmp	r3, #0
 800d204:	d1e3      	bne.n	800d1ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2220      	movs	r2, #32
 800d20a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2200      	movs	r2, #0
 800d212:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	330c      	adds	r3, #12
 800d21a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	e853 3f00 	ldrex	r3, [r3]
 800d222:	60fb      	str	r3, [r7, #12]
   return(result);
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f023 0310 	bic.w	r3, r3, #16
 800d22a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	330c      	adds	r3, #12
 800d234:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d238:	61fa      	str	r2, [r7, #28]
 800d23a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d23c:	69b9      	ldr	r1, [r7, #24]
 800d23e:	69fa      	ldr	r2, [r7, #28]
 800d240:	e841 2300 	strex	r3, r2, [r1]
 800d244:	617b      	str	r3, [r7, #20]
   return(result);
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d1e3      	bne.n	800d214 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2202      	movs	r2, #2
 800d250:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d252:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d256:	4619      	mov	r1, r3
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 f83b 	bl	800d2d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d25e:	e023      	b.n	800d2a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d009      	beq.n	800d280 <HAL_UART_IRQHandler+0x4f4>
 800d26c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d274:	2b00      	cmp	r3, #0
 800d276:	d003      	beq.n	800d280 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f000 fa1f 	bl	800d6bc <UART_Transmit_IT>
    return;
 800d27e:	e014      	b.n	800d2aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d00e      	beq.n	800d2aa <HAL_UART_IRQHandler+0x51e>
 800d28c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d294:	2b00      	cmp	r3, #0
 800d296:	d008      	beq.n	800d2aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f000 fa5e 	bl	800d75a <UART_EndTransmit_IT>
    return;
 800d29e:	e004      	b.n	800d2aa <HAL_UART_IRQHandler+0x51e>
    return;
 800d2a0:	bf00      	nop
 800d2a2:	e002      	b.n	800d2aa <HAL_UART_IRQHandler+0x51e>
      return;
 800d2a4:	bf00      	nop
 800d2a6:	e000      	b.n	800d2aa <HAL_UART_IRQHandler+0x51e>
      return;
 800d2a8:	bf00      	nop
  }
}
 800d2aa:	37e8      	adds	r7, #232	@ 0xe8
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}

0800d2b0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b083      	sub	sp, #12
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800d2b8:	bf00      	nop
 800d2ba:	370c      	adds	r7, #12
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bc80      	pop	{r7}
 800d2c0:	4770      	bx	lr

0800d2c2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d2c2:	b480      	push	{r7}
 800d2c4:	b083      	sub	sp, #12
 800d2c6:	af00      	add	r7, sp, #0
 800d2c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d2ca:	bf00      	nop
 800d2cc:	370c      	adds	r7, #12
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bc80      	pop	{r7}
 800d2d2:	4770      	bx	lr

0800d2d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b083      	sub	sp, #12
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	460b      	mov	r3, r1
 800d2de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d2e0:	bf00      	nop
 800d2e2:	370c      	adds	r7, #12
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bc80      	pop	{r7}
 800d2e8:	4770      	bx	lr

0800d2ea <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d2ea:	b580      	push	{r7, lr}
 800d2ec:	b090      	sub	sp, #64	@ 0x40
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f003 0320 	and.w	r3, r3, #32
 800d302:	2b00      	cmp	r3, #0
 800d304:	d137      	bne.n	800d376 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800d306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d308:	2200      	movs	r2, #0
 800d30a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d30c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	3314      	adds	r3, #20
 800d312:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d316:	e853 3f00 	ldrex	r3, [r3]
 800d31a:	623b      	str	r3, [r7, #32]
   return(result);
 800d31c:	6a3b      	ldr	r3, [r7, #32]
 800d31e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d322:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	3314      	adds	r3, #20
 800d32a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d32c:	633a      	str	r2, [r7, #48]	@ 0x30
 800d32e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d330:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d332:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d334:	e841 2300 	strex	r3, r2, [r1]
 800d338:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d1e5      	bne.n	800d30c <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	330c      	adds	r3, #12
 800d346:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	e853 3f00 	ldrex	r3, [r3]
 800d34e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d356:	637b      	str	r3, [r7, #52]	@ 0x34
 800d358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	330c      	adds	r3, #12
 800d35e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d360:	61fa      	str	r2, [r7, #28]
 800d362:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d364:	69b9      	ldr	r1, [r7, #24]
 800d366:	69fa      	ldr	r2, [r7, #28]
 800d368:	e841 2300 	strex	r3, r2, [r1]
 800d36c:	617b      	str	r3, [r7, #20]
   return(result);
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d1e5      	bne.n	800d340 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d374:	e002      	b.n	800d37c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d376:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d378:	f7f7 fbc8 	bl	8004b0c <HAL_UART_TxCpltCallback>
}
 800d37c:	bf00      	nop
 800d37e:	3740      	adds	r7, #64	@ 0x40
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b084      	sub	sp, #16
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d390:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d392:	68f8      	ldr	r0, [r7, #12]
 800d394:	f7ff ff8c 	bl	800d2b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d398:	bf00      	nop
 800d39a:	3710      	adds	r7, #16
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}

0800d3a0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b084      	sub	sp, #16
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3b0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	695b      	ldr	r3, [r3, #20]
 800d3b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	bf14      	ite	ne
 800d3c0:	2301      	movne	r3, #1
 800d3c2:	2300      	moveq	r3, #0
 800d3c4:	b2db      	uxtb	r3, r3
 800d3c6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	2b21      	cmp	r3, #33	@ 0x21
 800d3d2:	d108      	bne.n	800d3e6 <UART_DMAError+0x46>
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d005      	beq.n	800d3e6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800d3e0:	68b8      	ldr	r0, [r7, #8]
 800d3e2:	f000 f8ce 	bl	800d582 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	695b      	ldr	r3, [r3, #20]
 800d3ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	bf14      	ite	ne
 800d3f4:	2301      	movne	r3, #1
 800d3f6:	2300      	moveq	r3, #0
 800d3f8:	b2db      	uxtb	r3, r3
 800d3fa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d402:	b2db      	uxtb	r3, r3
 800d404:	2b22      	cmp	r3, #34	@ 0x22
 800d406:	d108      	bne.n	800d41a <UART_DMAError+0x7a>
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d005      	beq.n	800d41a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	2200      	movs	r2, #0
 800d412:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800d414:	68b8      	ldr	r0, [r7, #8]
 800d416:	f000 f8db 	bl	800d5d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d41e:	f043 0210 	orr.w	r2, r3, #16
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d426:	68b8      	ldr	r0, [r7, #8]
 800d428:	f7ff ff4b 	bl	800d2c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d42c:	bf00      	nop
 800d42e:	3710      	adds	r7, #16
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b090      	sub	sp, #64	@ 0x40
 800d438:	af00      	add	r7, sp, #0
 800d43a:	60f8      	str	r0, [r7, #12]
 800d43c:	60b9      	str	r1, [r7, #8]
 800d43e:	603b      	str	r3, [r7, #0]
 800d440:	4613      	mov	r3, r2
 800d442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d444:	e050      	b.n	800d4e8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d446:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d44c:	d04c      	beq.n	800d4e8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d44e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d450:	2b00      	cmp	r3, #0
 800d452:	d007      	beq.n	800d464 <UART_WaitOnFlagUntilTimeout+0x30>
 800d454:	f7fa f9e4 	bl	8007820 <HAL_GetTick>
 800d458:	4602      	mov	r2, r0
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	1ad3      	subs	r3, r2, r3
 800d45e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d460:	429a      	cmp	r2, r3
 800d462:	d241      	bcs.n	800d4e8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	330c      	adds	r3, #12
 800d46a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d46c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d46e:	e853 3f00 	ldrex	r3, [r3]
 800d472:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d476:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800d47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	330c      	adds	r3, #12
 800d482:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d484:	637a      	str	r2, [r7, #52]	@ 0x34
 800d486:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d488:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d48a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d48c:	e841 2300 	strex	r3, r2, [r1]
 800d490:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d494:	2b00      	cmp	r3, #0
 800d496:	d1e5      	bne.n	800d464 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	3314      	adds	r3, #20
 800d49e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	e853 3f00 	ldrex	r3, [r3]
 800d4a6:	613b      	str	r3, [r7, #16]
   return(result);
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	f023 0301 	bic.w	r3, r3, #1
 800d4ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	3314      	adds	r3, #20
 800d4b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d4b8:	623a      	str	r2, [r7, #32]
 800d4ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4bc:	69f9      	ldr	r1, [r7, #28]
 800d4be:	6a3a      	ldr	r2, [r7, #32]
 800d4c0:	e841 2300 	strex	r3, r2, [r1]
 800d4c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d4c6:	69bb      	ldr	r3, [r7, #24]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d1e5      	bne.n	800d498 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2220      	movs	r2, #32
 800d4d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2220      	movs	r2, #32
 800d4d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800d4e4:	2303      	movs	r3, #3
 800d4e6:	e00f      	b.n	800d508 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	681a      	ldr	r2, [r3, #0]
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	4013      	ands	r3, r2
 800d4f2:	68ba      	ldr	r2, [r7, #8]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	bf0c      	ite	eq
 800d4f8:	2301      	moveq	r3, #1
 800d4fa:	2300      	movne	r3, #0
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	461a      	mov	r2, r3
 800d500:	79fb      	ldrb	r3, [r7, #7]
 800d502:	429a      	cmp	r2, r3
 800d504:	d09f      	beq.n	800d446 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d506:	2300      	movs	r3, #0
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3740      	adds	r7, #64	@ 0x40
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d510:	b480      	push	{r7}
 800d512:	b085      	sub	sp, #20
 800d514:	af00      	add	r7, sp, #0
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	60b9      	str	r1, [r7, #8]
 800d51a:	4613      	mov	r3, r2
 800d51c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	68ba      	ldr	r2, [r7, #8]
 800d522:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	88fa      	ldrh	r2, [r7, #6]
 800d528:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	88fa      	ldrh	r2, [r7, #6]
 800d52e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2200      	movs	r2, #0
 800d534:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2222      	movs	r2, #34	@ 0x22
 800d53a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	691b      	ldr	r3, [r3, #16]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d007      	beq.n	800d556 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	68da      	ldr	r2, [r3, #12]
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d554:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	695a      	ldr	r2, [r3, #20]
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f042 0201 	orr.w	r2, r2, #1
 800d564:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	68da      	ldr	r2, [r3, #12]
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f042 0220 	orr.w	r2, r2, #32
 800d574:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d576:	2300      	movs	r3, #0
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3714      	adds	r7, #20
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bc80      	pop	{r7}
 800d580:	4770      	bx	lr

0800d582 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d582:	b480      	push	{r7}
 800d584:	b089      	sub	sp, #36	@ 0x24
 800d586:	af00      	add	r7, sp, #0
 800d588:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	330c      	adds	r3, #12
 800d590:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	e853 3f00 	ldrex	r3, [r3]
 800d598:	60bb      	str	r3, [r7, #8]
   return(result);
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d5a0:	61fb      	str	r3, [r7, #28]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	330c      	adds	r3, #12
 800d5a8:	69fa      	ldr	r2, [r7, #28]
 800d5aa:	61ba      	str	r2, [r7, #24]
 800d5ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ae:	6979      	ldr	r1, [r7, #20]
 800d5b0:	69ba      	ldr	r2, [r7, #24]
 800d5b2:	e841 2300 	strex	r3, r2, [r1]
 800d5b6:	613b      	str	r3, [r7, #16]
   return(result);
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d1e5      	bne.n	800d58a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2220      	movs	r2, #32
 800d5c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800d5c6:	bf00      	nop
 800d5c8:	3724      	adds	r7, #36	@ 0x24
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bc80      	pop	{r7}
 800d5ce:	4770      	bx	lr

0800d5d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b095      	sub	sp, #84	@ 0x54
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	330c      	adds	r3, #12
 800d5de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5e2:	e853 3f00 	ldrex	r3, [r3]
 800d5e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d5e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d5ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	330c      	adds	r3, #12
 800d5f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d5f8:	643a      	str	r2, [r7, #64]	@ 0x40
 800d5fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d5fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d600:	e841 2300 	strex	r3, r2, [r1]
 800d604:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d1e5      	bne.n	800d5d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	3314      	adds	r3, #20
 800d612:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d614:	6a3b      	ldr	r3, [r7, #32]
 800d616:	e853 3f00 	ldrex	r3, [r3]
 800d61a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d61c:	69fb      	ldr	r3, [r7, #28]
 800d61e:	f023 0301 	bic.w	r3, r3, #1
 800d622:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	3314      	adds	r3, #20
 800d62a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d62c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d62e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d630:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d632:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d634:	e841 2300 	strex	r3, r2, [r1]
 800d638:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d1e5      	bne.n	800d60c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d644:	2b01      	cmp	r3, #1
 800d646:	d119      	bne.n	800d67c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	330c      	adds	r3, #12
 800d64e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	e853 3f00 	ldrex	r3, [r3]
 800d656:	60bb      	str	r3, [r7, #8]
   return(result);
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	f023 0310 	bic.w	r3, r3, #16
 800d65e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	330c      	adds	r3, #12
 800d666:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d668:	61ba      	str	r2, [r7, #24]
 800d66a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d66c:	6979      	ldr	r1, [r7, #20]
 800d66e:	69ba      	ldr	r2, [r7, #24]
 800d670:	e841 2300 	strex	r3, r2, [r1]
 800d674:	613b      	str	r3, [r7, #16]
   return(result);
 800d676:	693b      	ldr	r3, [r7, #16]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d1e5      	bne.n	800d648 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2220      	movs	r2, #32
 800d680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2200      	movs	r2, #0
 800d688:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d68a:	bf00      	nop
 800d68c:	3754      	adds	r7, #84	@ 0x54
 800d68e:	46bd      	mov	sp, r7
 800d690:	bc80      	pop	{r7}
 800d692:	4770      	bx	lr

0800d694 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b084      	sub	sp, #16
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d6ae:	68f8      	ldr	r0, [r7, #12]
 800d6b0:	f7ff fe07 	bl	800d2c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6b4:	bf00      	nop
 800d6b6:	3710      	adds	r7, #16
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d6bc:	b480      	push	{r7}
 800d6be:	b085      	sub	sp, #20
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d6ca:	b2db      	uxtb	r3, r3
 800d6cc:	2b21      	cmp	r3, #33	@ 0x21
 800d6ce:	d13e      	bne.n	800d74e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	689b      	ldr	r3, [r3, #8]
 800d6d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d6d8:	d114      	bne.n	800d704 <UART_Transmit_IT+0x48>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	691b      	ldr	r3, [r3, #16]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d110      	bne.n	800d704 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6a1b      	ldr	r3, [r3, #32]
 800d6e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	881b      	ldrh	r3, [r3, #0]
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d6f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6a1b      	ldr	r3, [r3, #32]
 800d6fc:	1c9a      	adds	r2, r3, #2
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	621a      	str	r2, [r3, #32]
 800d702:	e008      	b.n	800d716 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6a1b      	ldr	r3, [r3, #32]
 800d708:	1c59      	adds	r1, r3, #1
 800d70a:	687a      	ldr	r2, [r7, #4]
 800d70c:	6211      	str	r1, [r2, #32]
 800d70e:	781a      	ldrb	r2, [r3, #0]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	3b01      	subs	r3, #1
 800d71e:	b29b      	uxth	r3, r3
 800d720:	687a      	ldr	r2, [r7, #4]
 800d722:	4619      	mov	r1, r3
 800d724:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800d726:	2b00      	cmp	r3, #0
 800d728:	d10f      	bne.n	800d74a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	68da      	ldr	r2, [r3, #12]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d738:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	68da      	ldr	r2, [r3, #12]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d748:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d74a:	2300      	movs	r3, #0
 800d74c:	e000      	b.n	800d750 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d74e:	2302      	movs	r3, #2
  }
}
 800d750:	4618      	mov	r0, r3
 800d752:	3714      	adds	r7, #20
 800d754:	46bd      	mov	sp, r7
 800d756:	bc80      	pop	{r7}
 800d758:	4770      	bx	lr

0800d75a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d75a:	b580      	push	{r7, lr}
 800d75c:	b082      	sub	sp, #8
 800d75e:	af00      	add	r7, sp, #0
 800d760:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	68da      	ldr	r2, [r3, #12]
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d770:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2220      	movs	r2, #32
 800d776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f7f7 f9c6 	bl	8004b0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d780:	2300      	movs	r3, #0
}
 800d782:	4618      	mov	r0, r3
 800d784:	3708      	adds	r7, #8
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}

0800d78a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d78a:	b580      	push	{r7, lr}
 800d78c:	b08c      	sub	sp, #48	@ 0x30
 800d78e:	af00      	add	r7, sp, #0
 800d790:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d798:	b2db      	uxtb	r3, r3
 800d79a:	2b22      	cmp	r3, #34	@ 0x22
 800d79c:	f040 80ae 	bne.w	800d8fc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	689b      	ldr	r3, [r3, #8]
 800d7a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d7a8:	d117      	bne.n	800d7da <UART_Receive_IT+0x50>
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	691b      	ldr	r3, [r3, #16]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d113      	bne.n	800d7da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	685b      	ldr	r3, [r3, #4]
 800d7c2:	b29b      	uxth	r3, r3
 800d7c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7c8:	b29a      	uxth	r2, r3
 800d7ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7d2:	1c9a      	adds	r2, r3, #2
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	629a      	str	r2, [r3, #40]	@ 0x28
 800d7d8:	e026      	b.n	800d828 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	689b      	ldr	r3, [r3, #8]
 800d7e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d7ec:	d007      	beq.n	800d7fe <UART_Receive_IT+0x74>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	689b      	ldr	r3, [r3, #8]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d10a      	bne.n	800d80c <UART_Receive_IT+0x82>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	691b      	ldr	r3, [r3, #16]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d106      	bne.n	800d80c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	685b      	ldr	r3, [r3, #4]
 800d804:	b2da      	uxtb	r2, r3
 800d806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d808:	701a      	strb	r2, [r3, #0]
 800d80a:	e008      	b.n	800d81e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	685b      	ldr	r3, [r3, #4]
 800d812:	b2db      	uxtb	r3, r3
 800d814:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d818:	b2da      	uxtb	r2, r3
 800d81a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d81c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d822:	1c5a      	adds	r2, r3, #1
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d82c:	b29b      	uxth	r3, r3
 800d82e:	3b01      	subs	r3, #1
 800d830:	b29b      	uxth	r3, r3
 800d832:	687a      	ldr	r2, [r7, #4]
 800d834:	4619      	mov	r1, r3
 800d836:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d15d      	bne.n	800d8f8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	68da      	ldr	r2, [r3, #12]
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f022 0220 	bic.w	r2, r2, #32
 800d84a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	68da      	ldr	r2, [r3, #12]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d85a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	695a      	ldr	r2, [r3, #20]
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f022 0201 	bic.w	r2, r2, #1
 800d86a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2220      	movs	r2, #32
 800d870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2200      	movs	r2, #0
 800d878:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d87e:	2b01      	cmp	r3, #1
 800d880:	d135      	bne.n	800d8ee <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2200      	movs	r2, #0
 800d886:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	330c      	adds	r3, #12
 800d88e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	e853 3f00 	ldrex	r3, [r3]
 800d896:	613b      	str	r3, [r7, #16]
   return(result);
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	f023 0310 	bic.w	r3, r3, #16
 800d89e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	330c      	adds	r3, #12
 800d8a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8a8:	623a      	str	r2, [r7, #32]
 800d8aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ac:	69f9      	ldr	r1, [r7, #28]
 800d8ae:	6a3a      	ldr	r2, [r7, #32]
 800d8b0:	e841 2300 	strex	r3, r2, [r1]
 800d8b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d8b6:	69bb      	ldr	r3, [r7, #24]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d1e5      	bne.n	800d888 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	f003 0310 	and.w	r3, r3, #16
 800d8c6:	2b10      	cmp	r3, #16
 800d8c8:	d10a      	bne.n	800d8e0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	60fb      	str	r3, [r7, #12]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	60fb      	str	r3, [r7, #12]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	60fb      	str	r3, [r7, #12]
 800d8de:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f7ff fcf4 	bl	800d2d4 <HAL_UARTEx_RxEventCallback>
 800d8ec:	e002      	b.n	800d8f4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f7f7 f8f2 	bl	8004ad8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	e002      	b.n	800d8fe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	e000      	b.n	800d8fe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d8fc:	2302      	movs	r3, #2
  }
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3730      	adds	r7, #48	@ 0x30
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}
	...

0800d908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b084      	sub	sp, #16
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	691b      	ldr	r3, [r3, #16]
 800d916:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	68da      	ldr	r2, [r3, #12]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	430a      	orrs	r2, r1
 800d924:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	689a      	ldr	r2, [r3, #8]
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	691b      	ldr	r3, [r3, #16]
 800d92e:	431a      	orrs	r2, r3
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	695b      	ldr	r3, [r3, #20]
 800d934:	4313      	orrs	r3, r2
 800d936:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	68db      	ldr	r3, [r3, #12]
 800d93e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800d942:	f023 030c 	bic.w	r3, r3, #12
 800d946:	687a      	ldr	r2, [r7, #4]
 800d948:	6812      	ldr	r2, [r2, #0]
 800d94a:	68b9      	ldr	r1, [r7, #8]
 800d94c:	430b      	orrs	r3, r1
 800d94e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	695b      	ldr	r3, [r3, #20]
 800d956:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	699a      	ldr	r2, [r3, #24]
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	430a      	orrs	r2, r1
 800d964:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4a2c      	ldr	r2, [pc, #176]	@ (800da1c <UART_SetConfig+0x114>)
 800d96c:	4293      	cmp	r3, r2
 800d96e:	d103      	bne.n	800d978 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800d970:	f7fd f8e4 	bl	800ab3c <HAL_RCC_GetPCLK2Freq>
 800d974:	60f8      	str	r0, [r7, #12]
 800d976:	e002      	b.n	800d97e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800d978:	f7fd f8cc 	bl	800ab14 <HAL_RCC_GetPCLK1Freq>
 800d97c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d97e:	68fa      	ldr	r2, [r7, #12]
 800d980:	4613      	mov	r3, r2
 800d982:	009b      	lsls	r3, r3, #2
 800d984:	4413      	add	r3, r2
 800d986:	009a      	lsls	r2, r3, #2
 800d988:	441a      	add	r2, r3
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	685b      	ldr	r3, [r3, #4]
 800d98e:	009b      	lsls	r3, r3, #2
 800d990:	fbb2 f3f3 	udiv	r3, r2, r3
 800d994:	4a22      	ldr	r2, [pc, #136]	@ (800da20 <UART_SetConfig+0x118>)
 800d996:	fba2 2303 	umull	r2, r3, r2, r3
 800d99a:	095b      	lsrs	r3, r3, #5
 800d99c:	0119      	lsls	r1, r3, #4
 800d99e:	68fa      	ldr	r2, [r7, #12]
 800d9a0:	4613      	mov	r3, r2
 800d9a2:	009b      	lsls	r3, r3, #2
 800d9a4:	4413      	add	r3, r2
 800d9a6:	009a      	lsls	r2, r3, #2
 800d9a8:	441a      	add	r2, r3
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	685b      	ldr	r3, [r3, #4]
 800d9ae:	009b      	lsls	r3, r3, #2
 800d9b0:	fbb2 f2f3 	udiv	r2, r2, r3
 800d9b4:	4b1a      	ldr	r3, [pc, #104]	@ (800da20 <UART_SetConfig+0x118>)
 800d9b6:	fba3 0302 	umull	r0, r3, r3, r2
 800d9ba:	095b      	lsrs	r3, r3, #5
 800d9bc:	2064      	movs	r0, #100	@ 0x64
 800d9be:	fb00 f303 	mul.w	r3, r0, r3
 800d9c2:	1ad3      	subs	r3, r2, r3
 800d9c4:	011b      	lsls	r3, r3, #4
 800d9c6:	3332      	adds	r3, #50	@ 0x32
 800d9c8:	4a15      	ldr	r2, [pc, #84]	@ (800da20 <UART_SetConfig+0x118>)
 800d9ca:	fba2 2303 	umull	r2, r3, r2, r3
 800d9ce:	095b      	lsrs	r3, r3, #5
 800d9d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d9d4:	4419      	add	r1, r3
 800d9d6:	68fa      	ldr	r2, [r7, #12]
 800d9d8:	4613      	mov	r3, r2
 800d9da:	009b      	lsls	r3, r3, #2
 800d9dc:	4413      	add	r3, r2
 800d9de:	009a      	lsls	r2, r3, #2
 800d9e0:	441a      	add	r2, r3
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	685b      	ldr	r3, [r3, #4]
 800d9e6:	009b      	lsls	r3, r3, #2
 800d9e8:	fbb2 f2f3 	udiv	r2, r2, r3
 800d9ec:	4b0c      	ldr	r3, [pc, #48]	@ (800da20 <UART_SetConfig+0x118>)
 800d9ee:	fba3 0302 	umull	r0, r3, r3, r2
 800d9f2:	095b      	lsrs	r3, r3, #5
 800d9f4:	2064      	movs	r0, #100	@ 0x64
 800d9f6:	fb00 f303 	mul.w	r3, r0, r3
 800d9fa:	1ad3      	subs	r3, r2, r3
 800d9fc:	011b      	lsls	r3, r3, #4
 800d9fe:	3332      	adds	r3, #50	@ 0x32
 800da00:	4a07      	ldr	r2, [pc, #28]	@ (800da20 <UART_SetConfig+0x118>)
 800da02:	fba2 2303 	umull	r2, r3, r2, r3
 800da06:	095b      	lsrs	r3, r3, #5
 800da08:	f003 020f 	and.w	r2, r3, #15
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	440a      	add	r2, r1
 800da12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800da14:	bf00      	nop
 800da16:	3710      	adds	r7, #16
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}
 800da1c:	40013800 	.word	0x40013800
 800da20:	51eb851f 	.word	0x51eb851f

0800da24 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800da24:	b084      	sub	sp, #16
 800da26:	b480      	push	{r7}
 800da28:	b085      	sub	sp, #20
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
 800da2e:	f107 001c 	add.w	r0, r7, #28
 800da32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800da36:	2300      	movs	r3, #0
 800da38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800da3a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800da3c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800da3e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800da40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800da42:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800da44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800da46:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800da48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800da4a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800da4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800da4e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800da50:	68fa      	ldr	r2, [r7, #12]
 800da52:	4313      	orrs	r3, r2
 800da54:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	685b      	ldr	r3, [r3, #4]
 800da5a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800da5e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800da62:	68fa      	ldr	r2, [r7, #12]
 800da64:	431a      	orrs	r2, r3
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800da6a:	2300      	movs	r3, #0
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3714      	adds	r7, #20
 800da70:	46bd      	mov	sp, r7
 800da72:	bc80      	pop	{r7}
 800da74:	b004      	add	sp, #16
 800da76:	4770      	bx	lr

0800da78 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800da78:	b480      	push	{r7}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800da86:	4618      	mov	r0, r3
 800da88:	370c      	adds	r7, #12
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bc80      	pop	{r7}
 800da8e:	4770      	bx	lr

0800da90 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800da90:	b480      	push	{r7}
 800da92:	b083      	sub	sp, #12
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	681a      	ldr	r2, [r3, #0]
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800daa4:	2300      	movs	r3, #0
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	370c      	adds	r7, #12
 800daaa:	46bd      	mov	sp, r7
 800daac:	bc80      	pop	{r7}
 800daae:	4770      	bx	lr

0800dab0 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800dab0:	b480      	push	{r7}
 800dab2:	b083      	sub	sp, #12
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2203      	movs	r2, #3
 800dabc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800dabe:	2300      	movs	r3, #0
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	370c      	adds	r7, #12
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bc80      	pop	{r7}
 800dac8:	4770      	bx	lr

0800daca <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800daca:	b480      	push	{r7}
 800dacc:	b083      	sub	sp, #12
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f003 0303 	and.w	r3, r3, #3
}
 800dada:	4618      	mov	r0, r3
 800dadc:	370c      	adds	r7, #12
 800dade:	46bd      	mov	sp, r7
 800dae0:	bc80      	pop	{r7}
 800dae2:	4770      	bx	lr

0800dae4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800dae4:	b480      	push	{r7}
 800dae6:	b085      	sub	sp, #20
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800daee:	2300      	movs	r3, #0
 800daf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	681a      	ldr	r2, [r3, #0]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800db02:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800db08:	431a      	orrs	r2, r3
                       Command->CPSM);
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800db0e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800db10:	68fa      	ldr	r2, [r7, #12]
 800db12:	4313      	orrs	r3, r2
 800db14:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	68db      	ldr	r3, [r3, #12]
 800db1a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800db1e:	f023 030f 	bic.w	r3, r3, #15
 800db22:	68fa      	ldr	r2, [r7, #12]
 800db24:	431a      	orrs	r2, r3
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800db2a:	2300      	movs	r3, #0
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3714      	adds	r7, #20
 800db30:	46bd      	mov	sp, r7
 800db32:	bc80      	pop	{r7}
 800db34:	4770      	bx	lr

0800db36 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800db36:	b480      	push	{r7}
 800db38:	b083      	sub	sp, #12
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	691b      	ldr	r3, [r3, #16]
 800db42:	b2db      	uxtb	r3, r3
}
 800db44:	4618      	mov	r0, r3
 800db46:	370c      	adds	r7, #12
 800db48:	46bd      	mov	sp, r7
 800db4a:	bc80      	pop	{r7}
 800db4c:	4770      	bx	lr

0800db4e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800db4e:	b480      	push	{r7}
 800db50:	b085      	sub	sp, #20
 800db52:	af00      	add	r7, sp, #0
 800db54:	6078      	str	r0, [r7, #4]
 800db56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	3314      	adds	r3, #20
 800db5c:	461a      	mov	r2, r3
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	4413      	add	r3, r2
 800db62:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
}  
 800db68:	4618      	mov	r0, r3
 800db6a:	3714      	adds	r7, #20
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bc80      	pop	{r7}
 800db70:	4770      	bx	lr

0800db72 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800db72:	b480      	push	{r7}
 800db74:	b085      	sub	sp, #20
 800db76:	af00      	add	r7, sp, #0
 800db78:	6078      	str	r0, [r7, #4]
 800db7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800db7c:	2300      	movs	r3, #0
 800db7e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	681a      	ldr	r2, [r3, #0]
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	685a      	ldr	r2, [r3, #4]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800db98:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800db9e:	431a      	orrs	r2, r3
                       Data->DPSM);
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800dba4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dba6:	68fa      	ldr	r2, [r7, #12]
 800dba8:	4313      	orrs	r3, r2
 800dbaa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbb0:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	431a      	orrs	r2, r3
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800dbbc:	2300      	movs	r3, #0

}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3714      	adds	r7, #20
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bc80      	pop	{r7}
 800dbc6:	4770      	bx	lr

0800dbc8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b088      	sub	sp, #32
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800dbd6:	2310      	movs	r3, #16
 800dbd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dbda:	2340      	movs	r3, #64	@ 0x40
 800dbdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dbe2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dbe6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dbe8:	f107 0308 	add.w	r3, r7, #8
 800dbec:	4619      	mov	r1, r3
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f7ff ff78 	bl	800dae4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800dbf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dbf8:	2110      	movs	r1, #16
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f000 f9d6 	bl	800dfac <SDMMC_GetCmdResp1>
 800dc00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc02:	69fb      	ldr	r3, [r7, #28]
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3720      	adds	r7, #32
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}

0800dc0c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b088      	sub	sp, #32
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800dc1a:	2311      	movs	r3, #17
 800dc1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dc1e:	2340      	movs	r3, #64	@ 0x40
 800dc20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc22:	2300      	movs	r3, #0
 800dc24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dc26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dc2c:	f107 0308 	add.w	r3, r7, #8
 800dc30:	4619      	mov	r1, r3
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f7ff ff56 	bl	800dae4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800dc38:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc3c:	2111      	movs	r1, #17
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f000 f9b4 	bl	800dfac <SDMMC_GetCmdResp1>
 800dc44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc46:	69fb      	ldr	r3, [r7, #28]
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3720      	adds	r7, #32
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b088      	sub	sp, #32
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800dc5e:	2312      	movs	r3, #18
 800dc60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dc62:	2340      	movs	r3, #64	@ 0x40
 800dc64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dc66:	2300      	movs	r3, #0
 800dc68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dc6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dc70:	f107 0308 	add.w	r3, r7, #8
 800dc74:	4619      	mov	r1, r3
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	f7ff ff34 	bl	800dae4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800dc7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc80:	2112      	movs	r1, #18
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f000 f992 	bl	800dfac <SDMMC_GetCmdResp1>
 800dc88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc8a:	69fb      	ldr	r3, [r7, #28]
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3720      	adds	r7, #32
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b088      	sub	sp, #32
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800dca2:	2318      	movs	r3, #24
 800dca4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dca6:	2340      	movs	r3, #64	@ 0x40
 800dca8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dcae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dcb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dcb4:	f107 0308 	add.w	r3, r7, #8
 800dcb8:	4619      	mov	r1, r3
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f7ff ff12 	bl	800dae4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800dcc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dcc4:	2118      	movs	r1, #24
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f000 f970 	bl	800dfac <SDMMC_GetCmdResp1>
 800dccc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcce:	69fb      	ldr	r3, [r7, #28]
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	3720      	adds	r7, #32
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}

0800dcd8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b088      	sub	sp, #32
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800dce6:	2319      	movs	r3, #25
 800dce8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dcea:	2340      	movs	r3, #64	@ 0x40
 800dcec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dcf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dcf6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dcf8:	f107 0308 	add.w	r3, r7, #8
 800dcfc:	4619      	mov	r1, r3
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f7ff fef0 	bl	800dae4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800dd04:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd08:	2119      	movs	r1, #25
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 f94e 	bl	800dfac <SDMMC_GetCmdResp1>
 800dd10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd12:	69fb      	ldr	r3, [r7, #28]
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3720      	adds	r7, #32
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}

0800dd1c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b088      	sub	sp, #32
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800dd24:	2300      	movs	r3, #0
 800dd26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800dd28:	230c      	movs	r3, #12
 800dd2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dd2c:	2340      	movs	r3, #64	@ 0x40
 800dd2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dd30:	2300      	movs	r3, #0
 800dd32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dd34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dd3a:	f107 0308 	add.w	r3, r7, #8
 800dd3e:	4619      	mov	r1, r3
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f7ff fecf 	bl	800dae4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800dd46:	4a05      	ldr	r2, [pc, #20]	@ (800dd5c <SDMMC_CmdStopTransfer+0x40>)
 800dd48:	210c      	movs	r1, #12
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f000 f92e 	bl	800dfac <SDMMC_GetCmdResp1>
 800dd50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd52:	69fb      	ldr	r3, [r7, #28]
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3720      	adds	r7, #32
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}
 800dd5c:	05f5e100 	.word	0x05f5e100

0800dd60 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b08a      	sub	sp, #40	@ 0x28
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	60f8      	str	r0, [r7, #12]
 800dd68:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800dd70:	2307      	movs	r3, #7
 800dd72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dd74:	2340      	movs	r3, #64	@ 0x40
 800dd76:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dd7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd80:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dd82:	f107 0310 	add.w	r3, r7, #16
 800dd86:	4619      	mov	r1, r3
 800dd88:	68f8      	ldr	r0, [r7, #12]
 800dd8a:	f7ff feab 	bl	800dae4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800dd8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd92:	2107      	movs	r1, #7
 800dd94:	68f8      	ldr	r0, [r7, #12]
 800dd96:	f000 f909 	bl	800dfac <SDMMC_GetCmdResp1>
 800dd9a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800dd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3728      	adds	r7, #40	@ 0x28
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}

0800dda6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800dda6:	b580      	push	{r7, lr}
 800dda8:	b088      	sub	sp, #32
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ddbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ddc2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ddc4:	f107 0308 	add.w	r3, r7, #8
 800ddc8:	4619      	mov	r1, r3
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f7ff fe8a 	bl	800dae4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f000 fb21 	bl	800e418 <SDMMC_GetCmdError>
 800ddd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddd8:	69fb      	ldr	r3, [r7, #28]
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3720      	adds	r7, #32
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}

0800dde2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800dde2:	b580      	push	{r7, lr}
 800dde4:	b088      	sub	sp, #32
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ddea:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800ddee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ddf0:	2308      	movs	r3, #8
 800ddf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ddf4:	2340      	movs	r3, #64	@ 0x40
 800ddf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ddfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800de00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800de02:	f107 0308 	add.w	r3, r7, #8
 800de06:	4619      	mov	r1, r3
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f7ff fe6b 	bl	800dae4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f000 fab4 	bl	800e37c <SDMMC_GetCmdResp7>
 800de14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de16:	69fb      	ldr	r3, [r7, #28]
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3720      	adds	r7, #32
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}

0800de20 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b088      	sub	sp, #32
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800de2e:	2337      	movs	r3, #55	@ 0x37
 800de30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800de32:	2340      	movs	r3, #64	@ 0x40
 800de34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800de36:	2300      	movs	r3, #0
 800de38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800de3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800de3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800de40:	f107 0308 	add.w	r3, r7, #8
 800de44:	4619      	mov	r1, r3
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f7ff fe4c 	bl	800dae4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800de4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800de50:	2137      	movs	r1, #55	@ 0x37
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f000 f8aa 	bl	800dfac <SDMMC_GetCmdResp1>
 800de58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de5a:	69fb      	ldr	r3, [r7, #28]
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3720      	adds	r7, #32
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b088      	sub	sp, #32
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800de74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800de78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800de7a:	2329      	movs	r3, #41	@ 0x29
 800de7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800de7e:	2340      	movs	r3, #64	@ 0x40
 800de80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800de82:	2300      	movs	r3, #0
 800de84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800de86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800de8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800de8c:	f107 0308 	add.w	r3, r7, #8
 800de90:	4619      	mov	r1, r3
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f7ff fe26 	bl	800dae4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f000 f9bd 	bl	800e218 <SDMMC_GetCmdResp3>
 800de9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dea0:	69fb      	ldr	r3, [r7, #28]
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	3720      	adds	r7, #32
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}

0800deaa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800deaa:	b580      	push	{r7, lr}
 800deac:	b088      	sub	sp, #32
 800deae:	af00      	add	r7, sp, #0
 800deb0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800deb2:	2300      	movs	r3, #0
 800deb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800deb6:	2302      	movs	r3, #2
 800deb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800deba:	23c0      	movs	r3, #192	@ 0xc0
 800debc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800debe:	2300      	movs	r3, #0
 800dec0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dec2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dec6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dec8:	f107 0308 	add.w	r3, r7, #8
 800decc:	4619      	mov	r1, r3
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f7ff fe08 	bl	800dae4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f000 f957 	bl	800e188 <SDMMC_GetCmdResp2>
 800deda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dedc:	69fb      	ldr	r3, [r7, #28]
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3720      	adds	r7, #32
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}

0800dee6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800dee6:	b580      	push	{r7, lr}
 800dee8:	b088      	sub	sp, #32
 800deea:	af00      	add	r7, sp, #0
 800deec:	6078      	str	r0, [r7, #4]
 800deee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800def4:	2309      	movs	r3, #9
 800def6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800def8:	23c0      	movs	r3, #192	@ 0xc0
 800defa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800defc:	2300      	movs	r3, #0
 800defe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800df00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800df04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800df06:	f107 0308 	add.w	r3, r7, #8
 800df0a:	4619      	mov	r1, r3
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f7ff fde9 	bl	800dae4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f000 f938 	bl	800e188 <SDMMC_GetCmdResp2>
 800df18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df1a:	69fb      	ldr	r3, [r7, #28]
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3720      	adds	r7, #32
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b088      	sub	sp, #32
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800df2e:	2300      	movs	r3, #0
 800df30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800df32:	2303      	movs	r3, #3
 800df34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800df36:	2340      	movs	r3, #64	@ 0x40
 800df38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800df3a:	2300      	movs	r3, #0
 800df3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800df3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800df42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800df44:	f107 0308 	add.w	r3, r7, #8
 800df48:	4619      	mov	r1, r3
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f7ff fdca 	bl	800dae4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800df50:	683a      	ldr	r2, [r7, #0]
 800df52:	2103      	movs	r1, #3
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f000 f99b 	bl	800e290 <SDMMC_GetCmdResp6>
 800df5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df5c:	69fb      	ldr	r3, [r7, #28]
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3720      	adds	r7, #32
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}

0800df66 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800df66:	b580      	push	{r7, lr}
 800df68:	b088      	sub	sp, #32
 800df6a:	af00      	add	r7, sp, #0
 800df6c:	6078      	str	r0, [r7, #4]
 800df6e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800df74:	230d      	movs	r3, #13
 800df76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800df78:	2340      	movs	r3, #64	@ 0x40
 800df7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800df7c:	2300      	movs	r3, #0
 800df7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800df80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800df84:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800df86:	f107 0308 	add.w	r3, r7, #8
 800df8a:	4619      	mov	r1, r3
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f7ff fda9 	bl	800dae4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800df92:	f241 3288 	movw	r2, #5000	@ 0x1388
 800df96:	210d      	movs	r1, #13
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f000 f807 	bl	800dfac <SDMMC_GetCmdResp1>
 800df9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfa0:	69fb      	ldr	r3, [r7, #28]
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3720      	adds	r7, #32
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
	...

0800dfac <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b088      	sub	sp, #32
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	60f8      	str	r0, [r7, #12]
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	607a      	str	r2, [r7, #4]
 800dfb8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dfba:	4b70      	ldr	r3, [pc, #448]	@ (800e17c <SDMMC_GetCmdResp1+0x1d0>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	4a70      	ldr	r2, [pc, #448]	@ (800e180 <SDMMC_GetCmdResp1+0x1d4>)
 800dfc0:	fba2 2303 	umull	r2, r3, r2, r3
 800dfc4:	0a5a      	lsrs	r2, r3, #9
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	fb02 f303 	mul.w	r3, r2, r3
 800dfcc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800dfce:	69fb      	ldr	r3, [r7, #28]
 800dfd0:	1e5a      	subs	r2, r3, #1
 800dfd2:	61fa      	str	r2, [r7, #28]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d102      	bne.n	800dfde <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dfd8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dfdc:	e0c9      	b.n	800e172 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dfe2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dfe4:	69bb      	ldr	r3, [r7, #24]
 800dfe6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d0ef      	beq.n	800dfce <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dfee:	69bb      	ldr	r3, [r7, #24]
 800dff0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d1ea      	bne.n	800dfce <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dffc:	f003 0304 	and.w	r3, r3, #4
 800e000:	2b00      	cmp	r3, #0
 800e002:	d004      	beq.n	800e00e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	2204      	movs	r2, #4
 800e008:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e00a:	2304      	movs	r3, #4
 800e00c:	e0b1      	b.n	800e172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e012:	f003 0301 	and.w	r3, r3, #1
 800e016:	2b00      	cmp	r3, #0
 800e018:	d004      	beq.n	800e024 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	2201      	movs	r2, #1
 800e01e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e020:	2301      	movs	r3, #1
 800e022:	e0a6      	b.n	800e172 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	22c5      	movs	r2, #197	@ 0xc5
 800e028:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e02a:	68f8      	ldr	r0, [r7, #12]
 800e02c:	f7ff fd83 	bl	800db36 <SDIO_GetCommandResponse>
 800e030:	4603      	mov	r3, r0
 800e032:	461a      	mov	r2, r3
 800e034:	7afb      	ldrb	r3, [r7, #11]
 800e036:	4293      	cmp	r3, r2
 800e038:	d001      	beq.n	800e03e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e03a:	2301      	movs	r3, #1
 800e03c:	e099      	b.n	800e172 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e03e:	2100      	movs	r1, #0
 800e040:	68f8      	ldr	r0, [r7, #12]
 800e042:	f7ff fd84 	bl	800db4e <SDIO_GetResponse>
 800e046:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e048:	697a      	ldr	r2, [r7, #20]
 800e04a:	4b4e      	ldr	r3, [pc, #312]	@ (800e184 <SDMMC_GetCmdResp1+0x1d8>)
 800e04c:	4013      	ands	r3, r2
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d101      	bne.n	800e056 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e052:	2300      	movs	r3, #0
 800e054:	e08d      	b.n	800e172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	da02      	bge.n	800e062 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e05c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e060:	e087      	b.n	800e172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d001      	beq.n	800e070 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e06c:	2340      	movs	r3, #64	@ 0x40
 800e06e:	e080      	b.n	800e172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e076:	2b00      	cmp	r3, #0
 800e078:	d001      	beq.n	800e07e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e07a:	2380      	movs	r3, #128	@ 0x80
 800e07c:	e079      	b.n	800e172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e084:	2b00      	cmp	r3, #0
 800e086:	d002      	beq.n	800e08e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e088:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e08c:	e071      	b.n	800e172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e094:	2b00      	cmp	r3, #0
 800e096:	d002      	beq.n	800e09e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e098:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e09c:	e069      	b.n	800e172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d002      	beq.n	800e0ae <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e0a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e0ac:	e061      	b.n	800e172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e0ae:	697b      	ldr	r3, [r7, #20]
 800e0b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d002      	beq.n	800e0be <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e0b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e0bc:	e059      	b.n	800e172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d002      	beq.n	800e0ce <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e0c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e0cc:	e051      	b.n	800e172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e0ce:	697b      	ldr	r3, [r7, #20]
 800e0d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d002      	beq.n	800e0de <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e0d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e0dc:	e049      	b.n	800e172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d002      	beq.n	800e0ee <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e0e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e0ec:	e041      	b.n	800e172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d002      	beq.n	800e0fe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e0f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e0fc:	e039      	b.n	800e172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e104:	2b00      	cmp	r3, #0
 800e106:	d002      	beq.n	800e10e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e108:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800e10c:	e031      	b.n	800e172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e114:	2b00      	cmp	r3, #0
 800e116:	d002      	beq.n	800e11e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e118:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800e11c:	e029      	b.n	800e172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e11e:	697b      	ldr	r3, [r7, #20]
 800e120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e124:	2b00      	cmp	r3, #0
 800e126:	d002      	beq.n	800e12e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e128:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e12c:	e021      	b.n	800e172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e134:	2b00      	cmp	r3, #0
 800e136:	d002      	beq.n	800e13e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e138:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e13c:	e019      	b.n	800e172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e144:	2b00      	cmp	r3, #0
 800e146:	d002      	beq.n	800e14e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e148:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800e14c:	e011      	b.n	800e172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e154:	2b00      	cmp	r3, #0
 800e156:	d002      	beq.n	800e15e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e158:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800e15c:	e009      	b.n	800e172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	f003 0308 	and.w	r3, r3, #8
 800e164:	2b00      	cmp	r3, #0
 800e166:	d002      	beq.n	800e16e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e168:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800e16c:	e001      	b.n	800e172 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e16e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e172:	4618      	mov	r0, r3
 800e174:	3720      	adds	r7, #32
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}
 800e17a:	bf00      	nop
 800e17c:	20000018 	.word	0x20000018
 800e180:	10624dd3 	.word	0x10624dd3
 800e184:	fdffe008 	.word	0xfdffe008

0800e188 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e188:	b480      	push	{r7}
 800e18a:	b085      	sub	sp, #20
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e190:	4b1f      	ldr	r3, [pc, #124]	@ (800e210 <SDMMC_GetCmdResp2+0x88>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	4a1f      	ldr	r2, [pc, #124]	@ (800e214 <SDMMC_GetCmdResp2+0x8c>)
 800e196:	fba2 2303 	umull	r2, r3, r2, r3
 800e19a:	0a5b      	lsrs	r3, r3, #9
 800e19c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e1a0:	fb02 f303 	mul.w	r3, r2, r3
 800e1a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	1e5a      	subs	r2, r3, #1
 800e1aa:	60fa      	str	r2, [r7, #12]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d102      	bne.n	800e1b6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e1b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e1b4:	e026      	b.n	800e204 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d0ef      	beq.n	800e1a6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d1ea      	bne.n	800e1a6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1d4:	f003 0304 	and.w	r3, r3, #4
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d004      	beq.n	800e1e6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2204      	movs	r2, #4
 800e1e0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e1e2:	2304      	movs	r3, #4
 800e1e4:	e00e      	b.n	800e204 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1ea:	f003 0301 	and.w	r3, r3, #1
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d004      	beq.n	800e1fc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2201      	movs	r2, #1
 800e1f6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	e003      	b.n	800e204 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	22c5      	movs	r2, #197	@ 0xc5
 800e200:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800e202:	2300      	movs	r3, #0
}
 800e204:	4618      	mov	r0, r3
 800e206:	3714      	adds	r7, #20
 800e208:	46bd      	mov	sp, r7
 800e20a:	bc80      	pop	{r7}
 800e20c:	4770      	bx	lr
 800e20e:	bf00      	nop
 800e210:	20000018 	.word	0x20000018
 800e214:	10624dd3 	.word	0x10624dd3

0800e218 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e218:	b480      	push	{r7}
 800e21a:	b085      	sub	sp, #20
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e220:	4b19      	ldr	r3, [pc, #100]	@ (800e288 <SDMMC_GetCmdResp3+0x70>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	4a19      	ldr	r2, [pc, #100]	@ (800e28c <SDMMC_GetCmdResp3+0x74>)
 800e226:	fba2 2303 	umull	r2, r3, r2, r3
 800e22a:	0a5b      	lsrs	r3, r3, #9
 800e22c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e230:	fb02 f303 	mul.w	r3, r2, r3
 800e234:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	1e5a      	subs	r2, r3, #1
 800e23a:	60fa      	str	r2, [r7, #12]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d102      	bne.n	800e246 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e240:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e244:	e01b      	b.n	800e27e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e24a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e252:	2b00      	cmp	r3, #0
 800e254:	d0ef      	beq.n	800e236 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d1ea      	bne.n	800e236 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e264:	f003 0304 	and.w	r3, r3, #4
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d004      	beq.n	800e276 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2204      	movs	r2, #4
 800e270:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e272:	2304      	movs	r3, #4
 800e274:	e003      	b.n	800e27e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	22c5      	movs	r2, #197	@ 0xc5
 800e27a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e27c:	2300      	movs	r3, #0
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3714      	adds	r7, #20
 800e282:	46bd      	mov	sp, r7
 800e284:	bc80      	pop	{r7}
 800e286:	4770      	bx	lr
 800e288:	20000018 	.word	0x20000018
 800e28c:	10624dd3 	.word	0x10624dd3

0800e290 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b088      	sub	sp, #32
 800e294:	af00      	add	r7, sp, #0
 800e296:	60f8      	str	r0, [r7, #12]
 800e298:	460b      	mov	r3, r1
 800e29a:	607a      	str	r2, [r7, #4]
 800e29c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e29e:	4b35      	ldr	r3, [pc, #212]	@ (800e374 <SDMMC_GetCmdResp6+0xe4>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	4a35      	ldr	r2, [pc, #212]	@ (800e378 <SDMMC_GetCmdResp6+0xe8>)
 800e2a4:	fba2 2303 	umull	r2, r3, r2, r3
 800e2a8:	0a5b      	lsrs	r3, r3, #9
 800e2aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e2ae:	fb02 f303 	mul.w	r3, r2, r3
 800e2b2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e2b4:	69fb      	ldr	r3, [r7, #28]
 800e2b6:	1e5a      	subs	r2, r3, #1
 800e2b8:	61fa      	str	r2, [r7, #28]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d102      	bne.n	800e2c4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e2be:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e2c2:	e052      	b.n	800e36a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2c8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e2ca:	69bb      	ldr	r3, [r7, #24]
 800e2cc:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d0ef      	beq.n	800e2b4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e2d4:	69bb      	ldr	r3, [r7, #24]
 800e2d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d1ea      	bne.n	800e2b4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2e2:	f003 0304 	and.w	r3, r3, #4
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d004      	beq.n	800e2f4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	2204      	movs	r2, #4
 800e2ee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e2f0:	2304      	movs	r3, #4
 800e2f2:	e03a      	b.n	800e36a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2f8:	f003 0301 	and.w	r3, r3, #1
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d004      	beq.n	800e30a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2201      	movs	r2, #1
 800e304:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e306:	2301      	movs	r3, #1
 800e308:	e02f      	b.n	800e36a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e30a:	68f8      	ldr	r0, [r7, #12]
 800e30c:	f7ff fc13 	bl	800db36 <SDIO_GetCommandResponse>
 800e310:	4603      	mov	r3, r0
 800e312:	461a      	mov	r2, r3
 800e314:	7afb      	ldrb	r3, [r7, #11]
 800e316:	4293      	cmp	r3, r2
 800e318:	d001      	beq.n	800e31e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e31a:	2301      	movs	r3, #1
 800e31c:	e025      	b.n	800e36a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	22c5      	movs	r2, #197	@ 0xc5
 800e322:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e324:	2100      	movs	r1, #0
 800e326:	68f8      	ldr	r0, [r7, #12]
 800e328:	f7ff fc11 	bl	800db4e <SDIO_GetResponse>
 800e32c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e32e:	697b      	ldr	r3, [r7, #20]
 800e330:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800e334:	2b00      	cmp	r3, #0
 800e336:	d106      	bne.n	800e346 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	0c1b      	lsrs	r3, r3, #16
 800e33c:	b29a      	uxth	r2, r3
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e342:	2300      	movs	r3, #0
 800e344:	e011      	b.n	800e36a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d002      	beq.n	800e356 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e350:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e354:	e009      	b.n	800e36a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d002      	beq.n	800e366 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e360:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e364:	e001      	b.n	800e36a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e366:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3720      	adds	r7, #32
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	20000018 	.word	0x20000018
 800e378:	10624dd3 	.word	0x10624dd3

0800e37c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e37c:	b480      	push	{r7}
 800e37e:	b085      	sub	sp, #20
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e384:	4b22      	ldr	r3, [pc, #136]	@ (800e410 <SDMMC_GetCmdResp7+0x94>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	4a22      	ldr	r2, [pc, #136]	@ (800e414 <SDMMC_GetCmdResp7+0x98>)
 800e38a:	fba2 2303 	umull	r2, r3, r2, r3
 800e38e:	0a5b      	lsrs	r3, r3, #9
 800e390:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e394:	fb02 f303 	mul.w	r3, r2, r3
 800e398:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	1e5a      	subs	r2, r3, #1
 800e39e:	60fa      	str	r2, [r7, #12]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d102      	bne.n	800e3aa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e3a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e3a8:	e02c      	b.n	800e404 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3ae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d0ef      	beq.n	800e39a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d1ea      	bne.n	800e39a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3c8:	f003 0304 	and.w	r3, r3, #4
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d004      	beq.n	800e3da <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2204      	movs	r2, #4
 800e3d4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e3d6:	2304      	movs	r3, #4
 800e3d8:	e014      	b.n	800e404 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3de:	f003 0301 	and.w	r3, r3, #1
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d004      	beq.n	800e3f0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2201      	movs	r2, #1
 800e3ea:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	e009      	b.n	800e404 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d002      	beq.n	800e402 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2240      	movs	r2, #64	@ 0x40
 800e400:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e402:	2300      	movs	r3, #0
  
}
 800e404:	4618      	mov	r0, r3
 800e406:	3714      	adds	r7, #20
 800e408:	46bd      	mov	sp, r7
 800e40a:	bc80      	pop	{r7}
 800e40c:	4770      	bx	lr
 800e40e:	bf00      	nop
 800e410:	20000018 	.word	0x20000018
 800e414:	10624dd3 	.word	0x10624dd3

0800e418 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800e418:	b480      	push	{r7}
 800e41a:	b085      	sub	sp, #20
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e420:	4b10      	ldr	r3, [pc, #64]	@ (800e464 <SDMMC_GetCmdError+0x4c>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	4a10      	ldr	r2, [pc, #64]	@ (800e468 <SDMMC_GetCmdError+0x50>)
 800e426:	fba2 2303 	umull	r2, r3, r2, r3
 800e42a:	0a5b      	lsrs	r3, r3, #9
 800e42c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e430:	fb02 f303 	mul.w	r3, r2, r3
 800e434:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	1e5a      	subs	r2, r3, #1
 800e43a:	60fa      	str	r2, [r7, #12]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d102      	bne.n	800e446 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e440:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e444:	e009      	b.n	800e45a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e44a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d0f1      	beq.n	800e436 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	22c5      	movs	r2, #197	@ 0xc5
 800e456:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800e458:	2300      	movs	r3, #0
}
 800e45a:	4618      	mov	r0, r3
 800e45c:	3714      	adds	r7, #20
 800e45e:	46bd      	mov	sp, r7
 800e460:	bc80      	pop	{r7}
 800e462:	4770      	bx	lr
 800e464:	20000018 	.word	0x20000018
 800e468:	10624dd3 	.word	0x10624dd3

0800e46c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e470:	4904      	ldr	r1, [pc, #16]	@ (800e484 <MX_FATFS_Init+0x18>)
 800e472:	4805      	ldr	r0, [pc, #20]	@ (800e488 <MX_FATFS_Init+0x1c>)
 800e474:	f003 fc42 	bl	8011cfc <FATFS_LinkDriver>
 800e478:	4603      	mov	r3, r0
 800e47a:	461a      	mov	r2, r3
 800e47c:	4b03      	ldr	r3, [pc, #12]	@ (800e48c <MX_FATFS_Init+0x20>)
 800e47e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e480:	bf00      	nop
 800e482:	bd80      	pop	{r7, pc}
 800e484:	20000eb4 	.word	0x20000eb4
 800e488:	08015b3c 	.word	0x08015b3c
 800e48c:	20000eb0 	.word	0x20000eb0

0800e490 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e490:	b480      	push	{r7}
 800e492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e494:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e496:	4618      	mov	r0, r3
 800e498:	46bd      	mov	sp, r7
 800e49a:	bc80      	pop	{r7}
 800e49c:	4770      	bx	lr
	...

0800e4a0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b082      	sub	sp, #8
 800e4a4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e4aa:	f000 f86b 	bl	800e584 <BSP_SD_IsDetected>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	2b01      	cmp	r3, #1
 800e4b2:	d001      	beq.n	800e4b8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	e005      	b.n	800e4c4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800e4b8:	4804      	ldr	r0, [pc, #16]	@ (800e4cc <BSP_SD_Init+0x2c>)
 800e4ba:	f7fc fba1 	bl	800ac00 <HAL_SD_Init>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800e4c2:	79fb      	ldrb	r3, [r7, #7]
}
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	3708      	adds	r7, #8
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}
 800e4cc:	20000924 	.word	0x20000924

0800e4d0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b088      	sub	sp, #32
 800e4d4:	af02      	add	r7, sp, #8
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	60b9      	str	r1, [r7, #8]
 800e4da:	607a      	str	r2, [r7, #4]
 800e4dc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	9300      	str	r3, [sp, #0]
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	68ba      	ldr	r2, [r7, #8]
 800e4ea:	68f9      	ldr	r1, [r7, #12]
 800e4ec:	4806      	ldr	r0, [pc, #24]	@ (800e508 <BSP_SD_ReadBlocks+0x38>)
 800e4ee:	f7fc fc37 	bl	800ad60 <HAL_SD_ReadBlocks>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d001      	beq.n	800e4fc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e4f8:	2301      	movs	r3, #1
 800e4fa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e4fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	3718      	adds	r7, #24
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
 800e506:	bf00      	nop
 800e508:	20000924 	.word	0x20000924

0800e50c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b088      	sub	sp, #32
 800e510:	af02      	add	r7, sp, #8
 800e512:	60f8      	str	r0, [r7, #12]
 800e514:	60b9      	str	r1, [r7, #8]
 800e516:	607a      	str	r2, [r7, #4]
 800e518:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e51a:	2300      	movs	r3, #0
 800e51c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	9300      	str	r3, [sp, #0]
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	68ba      	ldr	r2, [r7, #8]
 800e526:	68f9      	ldr	r1, [r7, #12]
 800e528:	4806      	ldr	r0, [pc, #24]	@ (800e544 <BSP_SD_WriteBlocks+0x38>)
 800e52a:	f7fc fdf7 	bl	800b11c <HAL_SD_WriteBlocks>
 800e52e:	4603      	mov	r3, r0
 800e530:	2b00      	cmp	r3, #0
 800e532:	d001      	beq.n	800e538 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e534:	2301      	movs	r3, #1
 800e536:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e538:	7dfb      	ldrb	r3, [r7, #23]
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3718      	adds	r7, #24
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop
 800e544:	20000924 	.word	0x20000924

0800e548 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e54c:	4805      	ldr	r0, [pc, #20]	@ (800e564 <BSP_SD_GetCardState+0x1c>)
 800e54e:	f7fd f93a 	bl	800b7c6 <HAL_SD_GetCardState>
 800e552:	4603      	mov	r3, r0
 800e554:	2b04      	cmp	r3, #4
 800e556:	bf14      	ite	ne
 800e558:	2301      	movne	r3, #1
 800e55a:	2300      	moveq	r3, #0
 800e55c:	b2db      	uxtb	r3, r3
}
 800e55e:	4618      	mov	r0, r3
 800e560:	bd80      	pop	{r7, pc}
 800e562:	bf00      	nop
 800e564:	20000924 	.word	0x20000924

0800e568 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b082      	sub	sp, #8
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800e570:	6879      	ldr	r1, [r7, #4]
 800e572:	4803      	ldr	r0, [pc, #12]	@ (800e580 <BSP_SD_GetCardInfo+0x18>)
 800e574:	f7fd f8fc 	bl	800b770 <HAL_SD_GetCardInfo>
}
 800e578:	bf00      	nop
 800e57a:	3708      	adds	r7, #8
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}
 800e580:	20000924 	.word	0x20000924

0800e584 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b082      	sub	sp, #8
 800e588:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e58a:	2301      	movs	r3, #1
 800e58c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e58e:	f000 f80b 	bl	800e5a8 <BSP_PlatformIsDetected>
 800e592:	4603      	mov	r3, r0
 800e594:	2b00      	cmp	r3, #0
 800e596:	d101      	bne.n	800e59c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e598:	2300      	movs	r3, #0
 800e59a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e59c:	79fb      	ldrb	r3, [r7, #7]
 800e59e:	b2db      	uxtb	r3, r3
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	3708      	adds	r7, #8
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}

0800e5a8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e5b2:	2120      	movs	r1, #32
 800e5b4:	4806      	ldr	r0, [pc, #24]	@ (800e5d0 <BSP_PlatformIsDetected+0x28>)
 800e5b6:	f7fa f859 	bl	800866c <HAL_GPIO_ReadPin>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d001      	beq.n	800e5c4 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e5c4:	79fb      	ldrb	r3, [r7, #7]
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3708      	adds	r7, #8
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}
 800e5ce:	bf00      	nop
 800e5d0:	40010c00 	.word	0x40010c00

0800e5d4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b084      	sub	sp, #16
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	4603      	mov	r3, r0
 800e5dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e5de:	79fb      	ldrb	r3, [r7, #7]
 800e5e0:	4a08      	ldr	r2, [pc, #32]	@ (800e604 <disk_status+0x30>)
 800e5e2:	009b      	lsls	r3, r3, #2
 800e5e4:	4413      	add	r3, r2
 800e5e6:	685b      	ldr	r3, [r3, #4]
 800e5e8:	685b      	ldr	r3, [r3, #4]
 800e5ea:	79fa      	ldrb	r2, [r7, #7]
 800e5ec:	4905      	ldr	r1, [pc, #20]	@ (800e604 <disk_status+0x30>)
 800e5ee:	440a      	add	r2, r1
 800e5f0:	7a12      	ldrb	r2, [r2, #8]
 800e5f2:	4610      	mov	r0, r2
 800e5f4:	4798      	blx	r3
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e5fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3710      	adds	r7, #16
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}
 800e604:	2000135c 	.word	0x2000135c

0800e608 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	4603      	mov	r3, r0
 800e610:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e612:	2300      	movs	r3, #0
 800e614:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800e616:	79fb      	ldrb	r3, [r7, #7]
 800e618:	4a0d      	ldr	r2, [pc, #52]	@ (800e650 <disk_initialize+0x48>)
 800e61a:	5cd3      	ldrb	r3, [r2, r3]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d111      	bne.n	800e644 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800e620:	79fb      	ldrb	r3, [r7, #7]
 800e622:	4a0b      	ldr	r2, [pc, #44]	@ (800e650 <disk_initialize+0x48>)
 800e624:	2101      	movs	r1, #1
 800e626:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e628:	79fb      	ldrb	r3, [r7, #7]
 800e62a:	4a09      	ldr	r2, [pc, #36]	@ (800e650 <disk_initialize+0x48>)
 800e62c:	009b      	lsls	r3, r3, #2
 800e62e:	4413      	add	r3, r2
 800e630:	685b      	ldr	r3, [r3, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	79fa      	ldrb	r2, [r7, #7]
 800e636:	4906      	ldr	r1, [pc, #24]	@ (800e650 <disk_initialize+0x48>)
 800e638:	440a      	add	r2, r1
 800e63a:	7a12      	ldrb	r2, [r2, #8]
 800e63c:	4610      	mov	r0, r2
 800e63e:	4798      	blx	r3
 800e640:	4603      	mov	r3, r0
 800e642:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e644:	7bfb      	ldrb	r3, [r7, #15]
}
 800e646:	4618      	mov	r0, r3
 800e648:	3710      	adds	r7, #16
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}
 800e64e:	bf00      	nop
 800e650:	2000135c 	.word	0x2000135c

0800e654 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e654:	b590      	push	{r4, r7, lr}
 800e656:	b087      	sub	sp, #28
 800e658:	af00      	add	r7, sp, #0
 800e65a:	60b9      	str	r1, [r7, #8]
 800e65c:	607a      	str	r2, [r7, #4]
 800e65e:	603b      	str	r3, [r7, #0]
 800e660:	4603      	mov	r3, r0
 800e662:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e664:	7bfb      	ldrb	r3, [r7, #15]
 800e666:	4a0a      	ldr	r2, [pc, #40]	@ (800e690 <disk_read+0x3c>)
 800e668:	009b      	lsls	r3, r3, #2
 800e66a:	4413      	add	r3, r2
 800e66c:	685b      	ldr	r3, [r3, #4]
 800e66e:	689c      	ldr	r4, [r3, #8]
 800e670:	7bfb      	ldrb	r3, [r7, #15]
 800e672:	4a07      	ldr	r2, [pc, #28]	@ (800e690 <disk_read+0x3c>)
 800e674:	4413      	add	r3, r2
 800e676:	7a18      	ldrb	r0, [r3, #8]
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	687a      	ldr	r2, [r7, #4]
 800e67c:	68b9      	ldr	r1, [r7, #8]
 800e67e:	47a0      	blx	r4
 800e680:	4603      	mov	r3, r0
 800e682:	75fb      	strb	r3, [r7, #23]
  return res;
 800e684:	7dfb      	ldrb	r3, [r7, #23]
}
 800e686:	4618      	mov	r0, r3
 800e688:	371c      	adds	r7, #28
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd90      	pop	{r4, r7, pc}
 800e68e:	bf00      	nop
 800e690:	2000135c 	.word	0x2000135c

0800e694 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e694:	b590      	push	{r4, r7, lr}
 800e696:	b087      	sub	sp, #28
 800e698:	af00      	add	r7, sp, #0
 800e69a:	60b9      	str	r1, [r7, #8]
 800e69c:	607a      	str	r2, [r7, #4]
 800e69e:	603b      	str	r3, [r7, #0]
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e6a4:	7bfb      	ldrb	r3, [r7, #15]
 800e6a6:	4a0a      	ldr	r2, [pc, #40]	@ (800e6d0 <disk_write+0x3c>)
 800e6a8:	009b      	lsls	r3, r3, #2
 800e6aa:	4413      	add	r3, r2
 800e6ac:	685b      	ldr	r3, [r3, #4]
 800e6ae:	68dc      	ldr	r4, [r3, #12]
 800e6b0:	7bfb      	ldrb	r3, [r7, #15]
 800e6b2:	4a07      	ldr	r2, [pc, #28]	@ (800e6d0 <disk_write+0x3c>)
 800e6b4:	4413      	add	r3, r2
 800e6b6:	7a18      	ldrb	r0, [r3, #8]
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	687a      	ldr	r2, [r7, #4]
 800e6bc:	68b9      	ldr	r1, [r7, #8]
 800e6be:	47a0      	blx	r4
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	75fb      	strb	r3, [r7, #23]
  return res;
 800e6c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	371c      	adds	r7, #28
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd90      	pop	{r4, r7, pc}
 800e6ce:	bf00      	nop
 800e6d0:	2000135c 	.word	0x2000135c

0800e6d4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b084      	sub	sp, #16
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	4603      	mov	r3, r0
 800e6dc:	603a      	str	r2, [r7, #0]
 800e6de:	71fb      	strb	r3, [r7, #7]
 800e6e0:	460b      	mov	r3, r1
 800e6e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e6e4:	79fb      	ldrb	r3, [r7, #7]
 800e6e6:	4a09      	ldr	r2, [pc, #36]	@ (800e70c <disk_ioctl+0x38>)
 800e6e8:	009b      	lsls	r3, r3, #2
 800e6ea:	4413      	add	r3, r2
 800e6ec:	685b      	ldr	r3, [r3, #4]
 800e6ee:	691b      	ldr	r3, [r3, #16]
 800e6f0:	79fa      	ldrb	r2, [r7, #7]
 800e6f2:	4906      	ldr	r1, [pc, #24]	@ (800e70c <disk_ioctl+0x38>)
 800e6f4:	440a      	add	r2, r1
 800e6f6:	7a10      	ldrb	r0, [r2, #8]
 800e6f8:	79b9      	ldrb	r1, [r7, #6]
 800e6fa:	683a      	ldr	r2, [r7, #0]
 800e6fc:	4798      	blx	r3
 800e6fe:	4603      	mov	r3, r0
 800e700:	73fb      	strb	r3, [r7, #15]
  return res;
 800e702:	7bfb      	ldrb	r3, [r7, #15]
}
 800e704:	4618      	mov	r0, r3
 800e706:	3710      	adds	r7, #16
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}
 800e70c:	2000135c 	.word	0x2000135c

0800e710 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e710:	b480      	push	{r7}
 800e712:	b087      	sub	sp, #28
 800e714:	af00      	add	r7, sp, #0
 800e716:	60f8      	str	r0, [r7, #12]
 800e718:	60b9      	str	r1, [r7, #8]
 800e71a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800e724:	e007      	b.n	800e736 <mem_cpy+0x26>
		*d++ = *s++;
 800e726:	693a      	ldr	r2, [r7, #16]
 800e728:	1c53      	adds	r3, r2, #1
 800e72a:	613b      	str	r3, [r7, #16]
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	1c59      	adds	r1, r3, #1
 800e730:	6179      	str	r1, [r7, #20]
 800e732:	7812      	ldrb	r2, [r2, #0]
 800e734:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	1e5a      	subs	r2, r3, #1
 800e73a:	607a      	str	r2, [r7, #4]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d1f2      	bne.n	800e726 <mem_cpy+0x16>
}
 800e740:	bf00      	nop
 800e742:	bf00      	nop
 800e744:	371c      	adds	r7, #28
 800e746:	46bd      	mov	sp, r7
 800e748:	bc80      	pop	{r7}
 800e74a:	4770      	bx	lr

0800e74c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e74c:	b480      	push	{r7}
 800e74e:	b087      	sub	sp, #28
 800e750:	af00      	add	r7, sp, #0
 800e752:	60f8      	str	r0, [r7, #12]
 800e754:	60b9      	str	r1, [r7, #8]
 800e756:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800e75c:	e005      	b.n	800e76a <mem_set+0x1e>
		*d++ = (BYTE)val;
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	1c5a      	adds	r2, r3, #1
 800e762:	617a      	str	r2, [r7, #20]
 800e764:	68ba      	ldr	r2, [r7, #8]
 800e766:	b2d2      	uxtb	r2, r2
 800e768:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	1e5a      	subs	r2, r3, #1
 800e76e:	607a      	str	r2, [r7, #4]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d1f4      	bne.n	800e75e <mem_set+0x12>
}
 800e774:	bf00      	nop
 800e776:	bf00      	nop
 800e778:	371c      	adds	r7, #28
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bc80      	pop	{r7}
 800e77e:	4770      	bx	lr

0800e780 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800e780:	b480      	push	{r7}
 800e782:	b089      	sub	sp, #36	@ 0x24
 800e784:	af00      	add	r7, sp, #0
 800e786:	60f8      	str	r0, [r7, #12]
 800e788:	60b9      	str	r1, [r7, #8]
 800e78a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	61fb      	str	r3, [r7, #28]
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e794:	2300      	movs	r3, #0
 800e796:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800e798:	bf00      	nop
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	1e5a      	subs	r2, r3, #1
 800e79e:	607a      	str	r2, [r7, #4]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d00d      	beq.n	800e7c0 <mem_cmp+0x40>
 800e7a4:	69fb      	ldr	r3, [r7, #28]
 800e7a6:	1c5a      	adds	r2, r3, #1
 800e7a8:	61fa      	str	r2, [r7, #28]
 800e7aa:	781b      	ldrb	r3, [r3, #0]
 800e7ac:	4619      	mov	r1, r3
 800e7ae:	69bb      	ldr	r3, [r7, #24]
 800e7b0:	1c5a      	adds	r2, r3, #1
 800e7b2:	61ba      	str	r2, [r7, #24]
 800e7b4:	781b      	ldrb	r3, [r3, #0]
 800e7b6:	1acb      	subs	r3, r1, r3
 800e7b8:	617b      	str	r3, [r7, #20]
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d0ec      	beq.n	800e79a <mem_cmp+0x1a>
	return r;
 800e7c0:	697b      	ldr	r3, [r7, #20]
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3724      	adds	r7, #36	@ 0x24
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bc80      	pop	{r7}
 800e7ca:	4770      	bx	lr

0800e7cc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800e7cc:	b480      	push	{r7}
 800e7ce:	b083      	sub	sp, #12
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
 800e7d4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e7d6:	e002      	b.n	800e7de <chk_chr+0x12>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	3301      	adds	r3, #1
 800e7dc:	607b      	str	r3, [r7, #4]
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	781b      	ldrb	r3, [r3, #0]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d005      	beq.n	800e7f2 <chk_chr+0x26>
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	781b      	ldrb	r3, [r3, #0]
 800e7ea:	461a      	mov	r2, r3
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	4293      	cmp	r3, r2
 800e7f0:	d1f2      	bne.n	800e7d8 <chk_chr+0xc>
	return *str;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	781b      	ldrb	r3, [r3, #0]
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	370c      	adds	r7, #12
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bc80      	pop	{r7}
 800e7fe:	4770      	bx	lr

0800e800 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b082      	sub	sp, #8
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800e80e:	4618      	mov	r0, r3
 800e810:	f003 fc06 	bl	8012020 <ff_req_grant>
 800e814:	4603      	mov	r3, r0
}
 800e816:	4618      	mov	r0, r3
 800e818:	3708      	adds	r7, #8
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}

0800e81e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800e81e:	b580      	push	{r7, lr}
 800e820:	b082      	sub	sp, #8
 800e822:	af00      	add	r7, sp, #0
 800e824:	6078      	str	r0, [r7, #4]
 800e826:	460b      	mov	r3, r1
 800e828:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d011      	beq.n	800e854 <unlock_fs+0x36>
 800e830:	78fb      	ldrb	r3, [r7, #3]
 800e832:	2b0c      	cmp	r3, #12
 800e834:	d00e      	beq.n	800e854 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 800e836:	78fb      	ldrb	r3, [r7, #3]
 800e838:	2b0b      	cmp	r3, #11
 800e83a:	d00b      	beq.n	800e854 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 800e83c:	78fb      	ldrb	r3, [r7, #3]
 800e83e:	2b09      	cmp	r3, #9
 800e840:	d008      	beq.n	800e854 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 800e842:	78fb      	ldrb	r3, [r7, #3]
 800e844:	2b0f      	cmp	r3, #15
 800e846:	d005      	beq.n	800e854 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800e84e:	4618      	mov	r0, r3
 800e850:	f003 fbfb 	bl	801204a <ff_rel_grant>
	}
}
 800e854:	bf00      	nop
 800e856:	3708      	adds	r7, #8
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}

0800e85c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e85c:	b480      	push	{r7}
 800e85e:	b085      	sub	sp, #20
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e866:	2300      	movs	r3, #0
 800e868:	60bb      	str	r3, [r7, #8]
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	60fb      	str	r3, [r7, #12]
 800e86e:	e038      	b.n	800e8e2 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800e870:	492f      	ldr	r1, [pc, #188]	@ (800e930 <chk_lock+0xd4>)
 800e872:	68fa      	ldr	r2, [r7, #12]
 800e874:	4613      	mov	r3, r2
 800e876:	005b      	lsls	r3, r3, #1
 800e878:	4413      	add	r3, r2
 800e87a:	009b      	lsls	r3, r3, #2
 800e87c:	440b      	add	r3, r1
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d029      	beq.n	800e8d8 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800e884:	492a      	ldr	r1, [pc, #168]	@ (800e930 <chk_lock+0xd4>)
 800e886:	68fa      	ldr	r2, [r7, #12]
 800e888:	4613      	mov	r3, r2
 800e88a:	005b      	lsls	r3, r3, #1
 800e88c:	4413      	add	r3, r2
 800e88e:	009b      	lsls	r3, r3, #2
 800e890:	440b      	add	r3, r1
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e89a:	429a      	cmp	r2, r3
 800e89c:	d11e      	bne.n	800e8dc <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800e89e:	4924      	ldr	r1, [pc, #144]	@ (800e930 <chk_lock+0xd4>)
 800e8a0:	68fa      	ldr	r2, [r7, #12]
 800e8a2:	4613      	mov	r3, r2
 800e8a4:	005b      	lsls	r3, r3, #1
 800e8a6:	4413      	add	r3, r2
 800e8a8:	009b      	lsls	r3, r3, #2
 800e8aa:	440b      	add	r3, r1
 800e8ac:	3304      	adds	r3, #4
 800e8ae:	681a      	ldr	r2, [r3, #0]
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d110      	bne.n	800e8dc <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800e8ba:	491d      	ldr	r1, [pc, #116]	@ (800e930 <chk_lock+0xd4>)
 800e8bc:	68fa      	ldr	r2, [r7, #12]
 800e8be:	4613      	mov	r3, r2
 800e8c0:	005b      	lsls	r3, r3, #1
 800e8c2:	4413      	add	r3, r2
 800e8c4:	009b      	lsls	r3, r3, #2
 800e8c6:	440b      	add	r3, r1
 800e8c8:	3308      	adds	r3, #8
 800e8ca:	881a      	ldrh	r2, [r3, #0]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
				Files[i].clu == dp->sclust &&
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d102      	bne.n	800e8dc <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800e8d6:	e007      	b.n	800e8e8 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800e8d8:	2301      	movs	r3, #1
 800e8da:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	3301      	adds	r3, #1
 800e8e0:	60fb      	str	r3, [r7, #12]
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	2b04      	cmp	r3, #4
 800e8e6:	d9c3      	bls.n	800e870 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2b05      	cmp	r3, #5
 800e8ec:	d109      	bne.n	800e902 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d102      	bne.n	800e8fa <chk_lock+0x9e>
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	2b02      	cmp	r3, #2
 800e8f8:	d101      	bne.n	800e8fe <chk_lock+0xa2>
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	e013      	b.n	800e926 <chk_lock+0xca>
 800e8fe:	2312      	movs	r3, #18
 800e900:	e011      	b.n	800e926 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d10b      	bne.n	800e920 <chk_lock+0xc4>
 800e908:	4909      	ldr	r1, [pc, #36]	@ (800e930 <chk_lock+0xd4>)
 800e90a:	68fa      	ldr	r2, [r7, #12]
 800e90c:	4613      	mov	r3, r2
 800e90e:	005b      	lsls	r3, r3, #1
 800e910:	4413      	add	r3, r2
 800e912:	009b      	lsls	r3, r3, #2
 800e914:	440b      	add	r3, r1
 800e916:	330a      	adds	r3, #10
 800e918:	881b      	ldrh	r3, [r3, #0]
 800e91a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e91e:	d101      	bne.n	800e924 <chk_lock+0xc8>
 800e920:	2310      	movs	r3, #16
 800e922:	e000      	b.n	800e926 <chk_lock+0xca>
 800e924:	2300      	movs	r3, #0
}
 800e926:	4618      	mov	r0, r3
 800e928:	3714      	adds	r7, #20
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bc80      	pop	{r7}
 800e92e:	4770      	bx	lr
 800e930:	20001320 	.word	0x20001320

0800e934 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e934:	b480      	push	{r7}
 800e936:	b083      	sub	sp, #12
 800e938:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e93a:	2300      	movs	r3, #0
 800e93c:	607b      	str	r3, [r7, #4]
 800e93e:	e002      	b.n	800e946 <enq_lock+0x12>
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	3301      	adds	r3, #1
 800e944:	607b      	str	r3, [r7, #4]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2b04      	cmp	r3, #4
 800e94a:	d809      	bhi.n	800e960 <enq_lock+0x2c>
 800e94c:	490a      	ldr	r1, [pc, #40]	@ (800e978 <enq_lock+0x44>)
 800e94e:	687a      	ldr	r2, [r7, #4]
 800e950:	4613      	mov	r3, r2
 800e952:	005b      	lsls	r3, r3, #1
 800e954:	4413      	add	r3, r2
 800e956:	009b      	lsls	r3, r3, #2
 800e958:	440b      	add	r3, r1
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d1ef      	bne.n	800e940 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2b05      	cmp	r3, #5
 800e964:	bf14      	ite	ne
 800e966:	2301      	movne	r3, #1
 800e968:	2300      	moveq	r3, #0
 800e96a:	b2db      	uxtb	r3, r3
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	370c      	adds	r7, #12
 800e970:	46bd      	mov	sp, r7
 800e972:	bc80      	pop	{r7}
 800e974:	4770      	bx	lr
 800e976:	bf00      	nop
 800e978:	20001320 	.word	0x20001320

0800e97c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e97c:	b480      	push	{r7}
 800e97e:	b085      	sub	sp, #20
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e986:	2300      	movs	r3, #0
 800e988:	60fb      	str	r3, [r7, #12]
 800e98a:	e02b      	b.n	800e9e4 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800e98c:	4955      	ldr	r1, [pc, #340]	@ (800eae4 <inc_lock+0x168>)
 800e98e:	68fa      	ldr	r2, [r7, #12]
 800e990:	4613      	mov	r3, r2
 800e992:	005b      	lsls	r3, r3, #1
 800e994:	4413      	add	r3, r2
 800e996:	009b      	lsls	r3, r3, #2
 800e998:	440b      	add	r3, r1
 800e99a:	681a      	ldr	r2, [r3, #0]
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e9a2:	429a      	cmp	r2, r3
 800e9a4:	d11b      	bne.n	800e9de <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800e9a6:	494f      	ldr	r1, [pc, #316]	@ (800eae4 <inc_lock+0x168>)
 800e9a8:	68fa      	ldr	r2, [r7, #12]
 800e9aa:	4613      	mov	r3, r2
 800e9ac:	005b      	lsls	r3, r3, #1
 800e9ae:	4413      	add	r3, r2
 800e9b0:	009b      	lsls	r3, r3, #2
 800e9b2:	440b      	add	r3, r1
 800e9b4:	3304      	adds	r3, #4
 800e9b6:	681a      	ldr	r2, [r3, #0]
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
		if (Files[i].fs == dp->fs &&
 800e9be:	429a      	cmp	r2, r3
 800e9c0:	d10d      	bne.n	800e9de <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800e9c2:	4948      	ldr	r1, [pc, #288]	@ (800eae4 <inc_lock+0x168>)
 800e9c4:	68fa      	ldr	r2, [r7, #12]
 800e9c6:	4613      	mov	r3, r2
 800e9c8:	005b      	lsls	r3, r3, #1
 800e9ca:	4413      	add	r3, r2
 800e9cc:	009b      	lsls	r3, r3, #2
 800e9ce:	440b      	add	r3, r1
 800e9d0:	3308      	adds	r3, #8
 800e9d2:	881a      	ldrh	r2, [r3, #0]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
			Files[i].clu == dp->sclust &&
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d006      	beq.n	800e9ec <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	60fb      	str	r3, [r7, #12]
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2b04      	cmp	r3, #4
 800e9e8:	d9d0      	bls.n	800e98c <inc_lock+0x10>
 800e9ea:	e000      	b.n	800e9ee <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800e9ec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2b05      	cmp	r3, #5
 800e9f2:	d145      	bne.n	800ea80 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	60fb      	str	r3, [r7, #12]
 800e9f8:	e002      	b.n	800ea00 <inc_lock+0x84>
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	3301      	adds	r3, #1
 800e9fe:	60fb      	str	r3, [r7, #12]
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	2b04      	cmp	r3, #4
 800ea04:	d809      	bhi.n	800ea1a <inc_lock+0x9e>
 800ea06:	4937      	ldr	r1, [pc, #220]	@ (800eae4 <inc_lock+0x168>)
 800ea08:	68fa      	ldr	r2, [r7, #12]
 800ea0a:	4613      	mov	r3, r2
 800ea0c:	005b      	lsls	r3, r3, #1
 800ea0e:	4413      	add	r3, r2
 800ea10:	009b      	lsls	r3, r3, #2
 800ea12:	440b      	add	r3, r1
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d1ef      	bne.n	800e9fa <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	2b05      	cmp	r3, #5
 800ea1e:	d101      	bne.n	800ea24 <inc_lock+0xa8>
 800ea20:	2300      	movs	r3, #0
 800ea22:	e05a      	b.n	800eada <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
 800ea2a:	482e      	ldr	r0, [pc, #184]	@ (800eae4 <inc_lock+0x168>)
 800ea2c:	68fa      	ldr	r2, [r7, #12]
 800ea2e:	4613      	mov	r3, r2
 800ea30:	005b      	lsls	r3, r3, #1
 800ea32:	4413      	add	r3, r2
 800ea34:	009b      	lsls	r3, r3, #2
 800ea36:	4403      	add	r3, r0
 800ea38:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 800ea40:	4828      	ldr	r0, [pc, #160]	@ (800eae4 <inc_lock+0x168>)
 800ea42:	68fa      	ldr	r2, [r7, #12]
 800ea44:	4613      	mov	r3, r2
 800ea46:	005b      	lsls	r3, r3, #1
 800ea48:	4413      	add	r3, r2
 800ea4a:	009b      	lsls	r3, r3, #2
 800ea4c:	4403      	add	r3, r0
 800ea4e:	3304      	adds	r3, #4
 800ea50:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f8b3 0206 	ldrh.w	r0, [r3, #518]	@ 0x206
 800ea58:	4922      	ldr	r1, [pc, #136]	@ (800eae4 <inc_lock+0x168>)
 800ea5a:	68fa      	ldr	r2, [r7, #12]
 800ea5c:	4613      	mov	r3, r2
 800ea5e:	005b      	lsls	r3, r3, #1
 800ea60:	4413      	add	r3, r2
 800ea62:	009b      	lsls	r3, r3, #2
 800ea64:	440b      	add	r3, r1
 800ea66:	3308      	adds	r3, #8
 800ea68:	4602      	mov	r2, r0
 800ea6a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800ea6c:	491d      	ldr	r1, [pc, #116]	@ (800eae4 <inc_lock+0x168>)
 800ea6e:	68fa      	ldr	r2, [r7, #12]
 800ea70:	4613      	mov	r3, r2
 800ea72:	005b      	lsls	r3, r3, #1
 800ea74:	4413      	add	r3, r2
 800ea76:	009b      	lsls	r3, r3, #2
 800ea78:	440b      	add	r3, r1
 800ea7a:	330a      	adds	r3, #10
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d00c      	beq.n	800eaa0 <inc_lock+0x124>
 800ea86:	4917      	ldr	r1, [pc, #92]	@ (800eae4 <inc_lock+0x168>)
 800ea88:	68fa      	ldr	r2, [r7, #12]
 800ea8a:	4613      	mov	r3, r2
 800ea8c:	005b      	lsls	r3, r3, #1
 800ea8e:	4413      	add	r3, r2
 800ea90:	009b      	lsls	r3, r3, #2
 800ea92:	440b      	add	r3, r1
 800ea94:	330a      	adds	r3, #10
 800ea96:	881b      	ldrh	r3, [r3, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d001      	beq.n	800eaa0 <inc_lock+0x124>
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	e01c      	b.n	800eada <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d10b      	bne.n	800eabe <inc_lock+0x142>
 800eaa6:	490f      	ldr	r1, [pc, #60]	@ (800eae4 <inc_lock+0x168>)
 800eaa8:	68fa      	ldr	r2, [r7, #12]
 800eaaa:	4613      	mov	r3, r2
 800eaac:	005b      	lsls	r3, r3, #1
 800eaae:	4413      	add	r3, r2
 800eab0:	009b      	lsls	r3, r3, #2
 800eab2:	440b      	add	r3, r1
 800eab4:	330a      	adds	r3, #10
 800eab6:	881b      	ldrh	r3, [r3, #0]
 800eab8:	3301      	adds	r3, #1
 800eaba:	b299      	uxth	r1, r3
 800eabc:	e001      	b.n	800eac2 <inc_lock+0x146>
 800eabe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800eac2:	4808      	ldr	r0, [pc, #32]	@ (800eae4 <inc_lock+0x168>)
 800eac4:	68fa      	ldr	r2, [r7, #12]
 800eac6:	4613      	mov	r3, r2
 800eac8:	005b      	lsls	r3, r3, #1
 800eaca:	4413      	add	r3, r2
 800eacc:	009b      	lsls	r3, r3, #2
 800eace:	4403      	add	r3, r0
 800ead0:	330a      	adds	r3, #10
 800ead2:	460a      	mov	r2, r1
 800ead4:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	3301      	adds	r3, #1
}
 800eada:	4618      	mov	r0, r3
 800eadc:	3714      	adds	r7, #20
 800eade:	46bd      	mov	sp, r7
 800eae0:	bc80      	pop	{r7}
 800eae2:	4770      	bx	lr
 800eae4:	20001320 	.word	0x20001320

0800eae8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800eae8:	b480      	push	{r7}
 800eaea:	b085      	sub	sp, #20
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	60fb      	str	r3, [r7, #12]
 800eaf4:	e016      	b.n	800eb24 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800eaf6:	4910      	ldr	r1, [pc, #64]	@ (800eb38 <clear_lock+0x50>)
 800eaf8:	68fa      	ldr	r2, [r7, #12]
 800eafa:	4613      	mov	r3, r2
 800eafc:	005b      	lsls	r3, r3, #1
 800eafe:	4413      	add	r3, r2
 800eb00:	009b      	lsls	r3, r3, #2
 800eb02:	440b      	add	r3, r1
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	687a      	ldr	r2, [r7, #4]
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d108      	bne.n	800eb1e <clear_lock+0x36>
 800eb0c:	490a      	ldr	r1, [pc, #40]	@ (800eb38 <clear_lock+0x50>)
 800eb0e:	68fa      	ldr	r2, [r7, #12]
 800eb10:	4613      	mov	r3, r2
 800eb12:	005b      	lsls	r3, r3, #1
 800eb14:	4413      	add	r3, r2
 800eb16:	009b      	lsls	r3, r3, #2
 800eb18:	440b      	add	r3, r1
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	3301      	adds	r3, #1
 800eb22:	60fb      	str	r3, [r7, #12]
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	2b04      	cmp	r3, #4
 800eb28:	d9e5      	bls.n	800eaf6 <clear_lock+0xe>
	}
}
 800eb2a:	bf00      	nop
 800eb2c:	bf00      	nop
 800eb2e:	3714      	adds	r7, #20
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bc80      	pop	{r7}
 800eb34:	4770      	bx	lr
 800eb36:	bf00      	nop
 800eb38:	20001320 	.word	0x20001320

0800eb3c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b086      	sub	sp, #24
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800eb44:	2300      	movs	r3, #0
 800eb46:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d038      	beq.n	800ebc4 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 800eb58:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800eb60:	6879      	ldr	r1, [r7, #4]
 800eb62:	2301      	movs	r3, #1
 800eb64:	697a      	ldr	r2, [r7, #20]
 800eb66:	f7ff fd95 	bl	800e694 <disk_write>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d002      	beq.n	800eb76 <sync_window+0x3a>
			res = FR_DISK_ERR;
 800eb70:	2301      	movs	r3, #1
 800eb72:	73fb      	strb	r3, [r7, #15]
 800eb74:	e026      	b.n	800ebc4 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800eb84:	697a      	ldr	r2, [r7, #20]
 800eb86:	1ad2      	subs	r2, r2, r3
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	d218      	bcs.n	800ebc4 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800eb98:	613b      	str	r3, [r7, #16]
 800eb9a:	e010      	b.n	800ebbe <sync_window+0x82>
					wsect += fs->fsize;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800eba2:	697a      	ldr	r2, [r7, #20]
 800eba4:	4413      	add	r3, r2
 800eba6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800ebae:	6879      	ldr	r1, [r7, #4]
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	697a      	ldr	r2, [r7, #20]
 800ebb4:	f7ff fd6e 	bl	800e694 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	3b01      	subs	r3, #1
 800ebbc:	613b      	str	r3, [r7, #16]
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	2b01      	cmp	r3, #1
 800ebc2:	d8eb      	bhi.n	800eb9c <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800ebc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3718      	adds	r7, #24
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}

0800ebce <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800ebce:	b580      	push	{r7, lr}
 800ebd0:	b084      	sub	sp, #16
 800ebd2:	af00      	add	r7, sp, #0
 800ebd4:	6078      	str	r0, [r7, #4]
 800ebd6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ebd8:	2300      	movs	r3, #0
 800ebda:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 800ebe2:	683a      	ldr	r2, [r7, #0]
 800ebe4:	429a      	cmp	r2, r3
 800ebe6:	d01b      	beq.n	800ec20 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f7ff ffa7 	bl	800eb3c <sync_window>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ebf2:	7bfb      	ldrb	r3, [r7, #15]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d113      	bne.n	800ec20 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800ebfe:	6879      	ldr	r1, [r7, #4]
 800ec00:	2301      	movs	r3, #1
 800ec02:	683a      	ldr	r2, [r7, #0]
 800ec04:	f7ff fd26 	bl	800e654 <disk_read>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d004      	beq.n	800ec18 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ec0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ec12:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ec14:	2301      	movs	r3, #1
 800ec16:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	683a      	ldr	r2, [r7, #0]
 800ec1c:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
		}
	}
	return res;
 800ec20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	3710      	adds	r7, #16
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}

0800ec2a <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800ec2a:	b580      	push	{r7, lr}
 800ec2c:	b084      	sub	sp, #16
 800ec2e:	af00      	add	r7, sp, #0
 800ec30:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f7ff ff82 	bl	800eb3c <sync_window>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ec3c:	7bfb      	ldrb	r3, [r7, #15]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	f040 809b 	bne.w	800ed7a <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ec4a:	2b03      	cmp	r3, #3
 800ec4c:	f040 8088 	bne.w	800ed60 <sync_fs+0x136>
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800ec56:	2b01      	cmp	r3, #1
 800ec58:	f040 8082 	bne.w	800ed60 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec62:	2100      	movs	r1, #0
 800ec64:	4618      	mov	r0, r3
 800ec66:	f7ff fd71 	bl	800e74c <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2255      	movs	r2, #85	@ 0x55
 800ec6e:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	22aa      	movs	r2, #170	@ 0xaa
 800ec76:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2252      	movs	r2, #82	@ 0x52
 800ec7e:	701a      	strb	r2, [r3, #0]
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2252      	movs	r2, #82	@ 0x52
 800ec84:	705a      	strb	r2, [r3, #1]
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2261      	movs	r2, #97	@ 0x61
 800ec8a:	709a      	strb	r2, [r3, #2]
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2241      	movs	r2, #65	@ 0x41
 800ec90:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2272      	movs	r2, #114	@ 0x72
 800ec96:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2272      	movs	r2, #114	@ 0x72
 800ec9e:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2241      	movs	r2, #65	@ 0x41
 800eca6:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2261      	movs	r2, #97	@ 0x61
 800ecae:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ecb8:	b2da      	uxtb	r2, r3
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ecc6:	b29b      	uxth	r3, r3
 800ecc8:	0a1b      	lsrs	r3, r3, #8
 800ecca:	b29b      	uxth	r3, r3
 800eccc:	b2da      	uxtb	r2, r3
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ecda:	0c1b      	lsrs	r3, r3, #16
 800ecdc:	b2da      	uxtb	r2, r3
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ecea:	0e1b      	lsrs	r3, r3, #24
 800ecec:	b2da      	uxtb	r2, r3
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ecfa:	b2da      	uxtb	r2, r3
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ed08:	b29b      	uxth	r3, r3
 800ed0a:	0a1b      	lsrs	r3, r3, #8
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	b2da      	uxtb	r2, r3
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ed1c:	0c1b      	lsrs	r3, r3, #16
 800ed1e:	b2da      	uxtb	r2, r3
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ed2c:	0e1b      	lsrs	r3, r3, #24
 800ed2e:	b2da      	uxtb	r2, r3
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800ed3c:	1c5a      	adds	r2, r3, #1
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800ed4a:	6879      	ldr	r1, [r7, #4]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 800ed52:	2301      	movs	r3, #1
 800ed54:	f7ff fc9e 	bl	800e694 <disk_write>
			fs->fsi_flag = 0;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ed66:	2200      	movs	r2, #0
 800ed68:	2100      	movs	r1, #0
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f7ff fcb2 	bl	800e6d4 <disk_ioctl>
 800ed70:	4603      	mov	r3, r0
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d001      	beq.n	800ed7a <sync_fs+0x150>
			res = FR_DISK_ERR;
 800ed76:	2301      	movs	r3, #1
 800ed78:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ed7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3710      	adds	r7, #16
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}

0800ed84 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ed84:	b480      	push	{r7}
 800ed86:	b083      	sub	sp, #12
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
 800ed8c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	3b02      	subs	r3, #2
 800ed92:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ed9a:	3b02      	subs	r3, #2
 800ed9c:	683a      	ldr	r2, [r7, #0]
 800ed9e:	429a      	cmp	r2, r3
 800eda0:	d301      	bcc.n	800eda6 <clust2sect+0x22>
 800eda2:	2300      	movs	r3, #0
 800eda4:	e00a      	b.n	800edbc <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800edac:	461a      	mov	r2, r3
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	fb03 f202 	mul.w	r2, r3, r2
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800edba:	4413      	add	r3, r2
}
 800edbc:	4618      	mov	r0, r3
 800edbe:	370c      	adds	r7, #12
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bc80      	pop	{r7}
 800edc4:	4770      	bx	lr

0800edc6 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800edc6:	b580      	push	{r7, lr}
 800edc8:	b086      	sub	sp, #24
 800edca:	af00      	add	r7, sp, #0
 800edcc:	6078      	str	r0, [r7, #4]
 800edce:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	2b01      	cmp	r3, #1
 800edd4:	d905      	bls.n	800ede2 <get_fat+0x1c>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800eddc:	683a      	ldr	r2, [r7, #0]
 800edde:	429a      	cmp	r2, r3
 800ede0:	d302      	bcc.n	800ede8 <get_fat+0x22>
		val = 1;	/* Internal error */
 800ede2:	2301      	movs	r3, #1
 800ede4:	617b      	str	r3, [r7, #20]
 800ede6:	e0a2      	b.n	800ef2e <get_fat+0x168>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ede8:	f04f 33ff 	mov.w	r3, #4294967295
 800edec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800edf4:	2b03      	cmp	r3, #3
 800edf6:	d067      	beq.n	800eec8 <get_fat+0x102>
 800edf8:	2b03      	cmp	r3, #3
 800edfa:	f300 808e 	bgt.w	800ef1a <get_fat+0x154>
 800edfe:	2b01      	cmp	r3, #1
 800ee00:	d002      	beq.n	800ee08 <get_fat+0x42>
 800ee02:	2b02      	cmp	r3, #2
 800ee04:	d03f      	beq.n	800ee86 <get_fat+0xc0>
 800ee06:	e088      	b.n	800ef1a <get_fat+0x154>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	60fb      	str	r3, [r7, #12]
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	085b      	lsrs	r3, r3, #1
 800ee10:	68fa      	ldr	r2, [r7, #12]
 800ee12:	4413      	add	r3, r2
 800ee14:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	0a5b      	lsrs	r3, r3, #9
 800ee20:	4413      	add	r3, r2
 800ee22:	4619      	mov	r1, r3
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f7ff fed2 	bl	800ebce <move_window>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d177      	bne.n	800ef20 <get_fat+0x15a>
			wc = fs->win.d8[bc++ % SS(fs)];
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	1c5a      	adds	r2, r3, #1
 800ee34:	60fa      	str	r2, [r7, #12]
 800ee36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee3a:	687a      	ldr	r2, [r7, #4]
 800ee3c:	5cd3      	ldrb	r3, [r2, r3]
 800ee3e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	0a5b      	lsrs	r3, r3, #9
 800ee4a:	4413      	add	r3, r2
 800ee4c:	4619      	mov	r1, r3
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	f7ff febd 	bl	800ebce <move_window>
 800ee54:	4603      	mov	r3, r0
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d164      	bne.n	800ef24 <get_fat+0x15e>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee60:	687a      	ldr	r2, [r7, #4]
 800ee62:	5cd3      	ldrb	r3, [r2, r3]
 800ee64:	021b      	lsls	r3, r3, #8
 800ee66:	68ba      	ldr	r2, [r7, #8]
 800ee68:	4313      	orrs	r3, r2
 800ee6a:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	f003 0301 	and.w	r3, r3, #1
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d002      	beq.n	800ee7c <get_fat+0xb6>
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	091b      	lsrs	r3, r3, #4
 800ee7a:	e002      	b.n	800ee82 <get_fat+0xbc>
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ee82:	617b      	str	r3, [r7, #20]
			break;
 800ee84:	e053      	b.n	800ef2e <get_fat+0x168>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	0a1b      	lsrs	r3, r3, #8
 800ee90:	4413      	add	r3, r2
 800ee92:	4619      	mov	r1, r3
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f7ff fe9a 	bl	800ebce <move_window>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d143      	bne.n	800ef28 <get_fat+0x162>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	005b      	lsls	r3, r3, #1
 800eea4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800eea8:	687a      	ldr	r2, [r7, #4]
 800eeaa:	4413      	add	r3, r2
 800eeac:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800eeae:	693b      	ldr	r3, [r7, #16]
 800eeb0:	3301      	adds	r3, #1
 800eeb2:	781b      	ldrb	r3, [r3, #0]
 800eeb4:	021b      	lsls	r3, r3, #8
 800eeb6:	b21a      	sxth	r2, r3
 800eeb8:	693b      	ldr	r3, [r7, #16]
 800eeba:	781b      	ldrb	r3, [r3, #0]
 800eebc:	b21b      	sxth	r3, r3
 800eebe:	4313      	orrs	r3, r2
 800eec0:	b21b      	sxth	r3, r3
 800eec2:	b29b      	uxth	r3, r3
 800eec4:	617b      	str	r3, [r7, #20]
			break;
 800eec6:	e032      	b.n	800ef2e <get_fat+0x168>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	09db      	lsrs	r3, r3, #7
 800eed2:	4413      	add	r3, r2
 800eed4:	4619      	mov	r1, r3
 800eed6:	6878      	ldr	r0, [r7, #4]
 800eed8:	f7ff fe79 	bl	800ebce <move_window>
 800eedc:	4603      	mov	r3, r0
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d124      	bne.n	800ef2c <get_fat+0x166>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	009b      	lsls	r3, r3, #2
 800eee6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800eeea:	687a      	ldr	r2, [r7, #4]
 800eeec:	4413      	add	r3, r2
 800eeee:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	3303      	adds	r3, #3
 800eef4:	781b      	ldrb	r3, [r3, #0]
 800eef6:	061a      	lsls	r2, r3, #24
 800eef8:	693b      	ldr	r3, [r7, #16]
 800eefa:	3302      	adds	r3, #2
 800eefc:	781b      	ldrb	r3, [r3, #0]
 800eefe:	041b      	lsls	r3, r3, #16
 800ef00:	431a      	orrs	r2, r3
 800ef02:	693b      	ldr	r3, [r7, #16]
 800ef04:	3301      	adds	r3, #1
 800ef06:	781b      	ldrb	r3, [r3, #0]
 800ef08:	021b      	lsls	r3, r3, #8
 800ef0a:	4313      	orrs	r3, r2
 800ef0c:	693a      	ldr	r2, [r7, #16]
 800ef0e:	7812      	ldrb	r2, [r2, #0]
 800ef10:	4313      	orrs	r3, r2
 800ef12:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ef16:	617b      	str	r3, [r7, #20]
			break;
 800ef18:	e009      	b.n	800ef2e <get_fat+0x168>

		default:
			val = 1;	/* Internal error */
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	617b      	str	r3, [r7, #20]
 800ef1e:	e006      	b.n	800ef2e <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ef20:	bf00      	nop
 800ef22:	e004      	b.n	800ef2e <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ef24:	bf00      	nop
 800ef26:	e002      	b.n	800ef2e <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ef28:	bf00      	nop
 800ef2a:	e000      	b.n	800ef2e <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ef2c:	bf00      	nop
		}
	}

	return val;
 800ef2e:	697b      	ldr	r3, [r7, #20]
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	3718      	adds	r7, #24
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}

0800ef38 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b088      	sub	sp, #32
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	60f8      	str	r0, [r7, #12]
 800ef40:	60b9      	str	r1, [r7, #8]
 800ef42:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	2b01      	cmp	r3, #1
 800ef48:	d905      	bls.n	800ef56 <put_fat+0x1e>
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ef50:	68ba      	ldr	r2, [r7, #8]
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d302      	bcc.n	800ef5c <put_fat+0x24>
		res = FR_INT_ERR;
 800ef56:	2302      	movs	r3, #2
 800ef58:	77fb      	strb	r3, [r7, #31]
 800ef5a:	e0f6      	b.n	800f14a <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ef62:	2b03      	cmp	r3, #3
 800ef64:	f000 809e 	beq.w	800f0a4 <put_fat+0x16c>
 800ef68:	2b03      	cmp	r3, #3
 800ef6a:	f300 80e4 	bgt.w	800f136 <put_fat+0x1fe>
 800ef6e:	2b01      	cmp	r3, #1
 800ef70:	d002      	beq.n	800ef78 <put_fat+0x40>
 800ef72:	2b02      	cmp	r3, #2
 800ef74:	d06f      	beq.n	800f056 <put_fat+0x11e>
 800ef76:	e0de      	b.n	800f136 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	617b      	str	r3, [r7, #20]
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	085b      	lsrs	r3, r3, #1
 800ef80:	697a      	ldr	r2, [r7, #20]
 800ef82:	4413      	add	r3, r2
 800ef84:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	0a5b      	lsrs	r3, r3, #9
 800ef90:	4413      	add	r3, r2
 800ef92:	4619      	mov	r1, r3
 800ef94:	68f8      	ldr	r0, [r7, #12]
 800ef96:	f7ff fe1a 	bl	800ebce <move_window>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ef9e:	7ffb      	ldrb	r3, [r7, #31]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	f040 80cb 	bne.w	800f13c <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	1c5a      	adds	r2, r3, #1
 800efaa:	617a      	str	r2, [r7, #20]
 800efac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efb0:	68fa      	ldr	r2, [r7, #12]
 800efb2:	4413      	add	r3, r2
 800efb4:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800efb6:	68bb      	ldr	r3, [r7, #8]
 800efb8:	f003 0301 	and.w	r3, r3, #1
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d00d      	beq.n	800efdc <put_fat+0xa4>
 800efc0:	69bb      	ldr	r3, [r7, #24]
 800efc2:	781b      	ldrb	r3, [r3, #0]
 800efc4:	b25b      	sxtb	r3, r3
 800efc6:	f003 030f 	and.w	r3, r3, #15
 800efca:	b25a      	sxtb	r2, r3
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	b2db      	uxtb	r3, r3
 800efd0:	011b      	lsls	r3, r3, #4
 800efd2:	b25b      	sxtb	r3, r3
 800efd4:	4313      	orrs	r3, r2
 800efd6:	b25b      	sxtb	r3, r3
 800efd8:	b2db      	uxtb	r3, r3
 800efda:	e001      	b.n	800efe0 <put_fat+0xa8>
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	b2db      	uxtb	r3, r3
 800efe0:	69ba      	ldr	r2, [r7, #24]
 800efe2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	2201      	movs	r2, #1
 800efe8:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	0a5b      	lsrs	r3, r3, #9
 800eff6:	4413      	add	r3, r2
 800eff8:	4619      	mov	r1, r3
 800effa:	68f8      	ldr	r0, [r7, #12]
 800effc:	f7ff fde7 	bl	800ebce <move_window>
 800f000:	4603      	mov	r3, r0
 800f002:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f004:	7ffb      	ldrb	r3, [r7, #31]
 800f006:	2b00      	cmp	r3, #0
 800f008:	f040 809a 	bne.w	800f140 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f012:	68fa      	ldr	r2, [r7, #12]
 800f014:	4413      	add	r3, r2
 800f016:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	f003 0301 	and.w	r3, r3, #1
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d003      	beq.n	800f02a <put_fat+0xf2>
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	091b      	lsrs	r3, r3, #4
 800f026:	b2db      	uxtb	r3, r3
 800f028:	e00e      	b.n	800f048 <put_fat+0x110>
 800f02a:	69bb      	ldr	r3, [r7, #24]
 800f02c:	781b      	ldrb	r3, [r3, #0]
 800f02e:	b25b      	sxtb	r3, r3
 800f030:	f023 030f 	bic.w	r3, r3, #15
 800f034:	b25a      	sxtb	r2, r3
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	0a1b      	lsrs	r3, r3, #8
 800f03a:	b25b      	sxtb	r3, r3
 800f03c:	f003 030f 	and.w	r3, r3, #15
 800f040:	b25b      	sxtb	r3, r3
 800f042:	4313      	orrs	r3, r2
 800f044:	b25b      	sxtb	r3, r3
 800f046:	b2db      	uxtb	r3, r3
 800f048:	69ba      	ldr	r2, [r7, #24]
 800f04a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	2201      	movs	r2, #1
 800f050:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800f054:	e079      	b.n	800f14a <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	0a1b      	lsrs	r3, r3, #8
 800f060:	4413      	add	r3, r2
 800f062:	4619      	mov	r1, r3
 800f064:	68f8      	ldr	r0, [r7, #12]
 800f066:	f7ff fdb2 	bl	800ebce <move_window>
 800f06a:	4603      	mov	r3, r0
 800f06c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f06e:	7ffb      	ldrb	r3, [r7, #31]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d167      	bne.n	800f144 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	005b      	lsls	r3, r3, #1
 800f078:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f07c:	68fa      	ldr	r2, [r7, #12]
 800f07e:	4413      	add	r3, r2
 800f080:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	b2da      	uxtb	r2, r3
 800f086:	69bb      	ldr	r3, [r7, #24]
 800f088:	701a      	strb	r2, [r3, #0]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	b29b      	uxth	r3, r3
 800f08e:	0a1b      	lsrs	r3, r3, #8
 800f090:	b29a      	uxth	r2, r3
 800f092:	69bb      	ldr	r3, [r7, #24]
 800f094:	3301      	adds	r3, #1
 800f096:	b2d2      	uxtb	r2, r2
 800f098:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	2201      	movs	r2, #1
 800f09e:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800f0a2:	e052      	b.n	800f14a <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	09db      	lsrs	r3, r3, #7
 800f0ae:	4413      	add	r3, r2
 800f0b0:	4619      	mov	r1, r3
 800f0b2:	68f8      	ldr	r0, [r7, #12]
 800f0b4:	f7ff fd8b 	bl	800ebce <move_window>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f0bc:	7ffb      	ldrb	r3, [r7, #31]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d142      	bne.n	800f148 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	009b      	lsls	r3, r3, #2
 800f0c6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f0ca:	68fa      	ldr	r2, [r7, #12]
 800f0cc:	4413      	add	r3, r2
 800f0ce:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800f0d0:	69bb      	ldr	r3, [r7, #24]
 800f0d2:	3303      	adds	r3, #3
 800f0d4:	781b      	ldrb	r3, [r3, #0]
 800f0d6:	061a      	lsls	r2, r3, #24
 800f0d8:	69bb      	ldr	r3, [r7, #24]
 800f0da:	3302      	adds	r3, #2
 800f0dc:	781b      	ldrb	r3, [r3, #0]
 800f0de:	041b      	lsls	r3, r3, #16
 800f0e0:	431a      	orrs	r2, r3
 800f0e2:	69bb      	ldr	r3, [r7, #24]
 800f0e4:	3301      	adds	r3, #1
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	021b      	lsls	r3, r3, #8
 800f0ea:	4313      	orrs	r3, r2
 800f0ec:	69ba      	ldr	r2, [r7, #24]
 800f0ee:	7812      	ldrb	r2, [r2, #0]
 800f0f0:	4313      	orrs	r3, r2
 800f0f2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800f0f6:	687a      	ldr	r2, [r7, #4]
 800f0f8:	4313      	orrs	r3, r2
 800f0fa:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	b2da      	uxtb	r2, r3
 800f100:	69bb      	ldr	r3, [r7, #24]
 800f102:	701a      	strb	r2, [r3, #0]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	b29b      	uxth	r3, r3
 800f108:	0a1b      	lsrs	r3, r3, #8
 800f10a:	b29a      	uxth	r2, r3
 800f10c:	69bb      	ldr	r3, [r7, #24]
 800f10e:	3301      	adds	r3, #1
 800f110:	b2d2      	uxtb	r2, r2
 800f112:	701a      	strb	r2, [r3, #0]
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	0c1a      	lsrs	r2, r3, #16
 800f118:	69bb      	ldr	r3, [r7, #24]
 800f11a:	3302      	adds	r3, #2
 800f11c:	b2d2      	uxtb	r2, r2
 800f11e:	701a      	strb	r2, [r3, #0]
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	0e1a      	lsrs	r2, r3, #24
 800f124:	69bb      	ldr	r3, [r7, #24]
 800f126:	3303      	adds	r3, #3
 800f128:	b2d2      	uxtb	r2, r2
 800f12a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	2201      	movs	r2, #1
 800f130:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800f134:	e009      	b.n	800f14a <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800f136:	2302      	movs	r3, #2
 800f138:	77fb      	strb	r3, [r7, #31]
 800f13a:	e006      	b.n	800f14a <put_fat+0x212>
			if (res != FR_OK) break;
 800f13c:	bf00      	nop
 800f13e:	e004      	b.n	800f14a <put_fat+0x212>
			if (res != FR_OK) break;
 800f140:	bf00      	nop
 800f142:	e002      	b.n	800f14a <put_fat+0x212>
			if (res != FR_OK) break;
 800f144:	bf00      	nop
 800f146:	e000      	b.n	800f14a <put_fat+0x212>
			if (res != FR_OK) break;
 800f148:	bf00      	nop
		}
	}

	return res;
 800f14a:	7ffb      	ldrb	r3, [r7, #31]
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3720      	adds	r7, #32
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}

0800f154 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b084      	sub	sp, #16
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	2b01      	cmp	r3, #1
 800f162:	d905      	bls.n	800f170 <remove_chain+0x1c>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f16a:	683a      	ldr	r2, [r7, #0]
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d302      	bcc.n	800f176 <remove_chain+0x22>
		res = FR_INT_ERR;
 800f170:	2302      	movs	r3, #2
 800f172:	73fb      	strb	r3, [r7, #15]
 800f174:	e043      	b.n	800f1fe <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800f176:	2300      	movs	r3, #0
 800f178:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800f17a:	e036      	b.n	800f1ea <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800f17c:	6839      	ldr	r1, [r7, #0]
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f7ff fe21 	bl	800edc6 <get_fat>
 800f184:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d035      	beq.n	800f1f8 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	2b01      	cmp	r3, #1
 800f190:	d102      	bne.n	800f198 <remove_chain+0x44>
 800f192:	2302      	movs	r3, #2
 800f194:	73fb      	strb	r3, [r7, #15]
 800f196:	e032      	b.n	800f1fe <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f19e:	d102      	bne.n	800f1a6 <remove_chain+0x52>
 800f1a0:	2301      	movs	r3, #1
 800f1a2:	73fb      	strb	r3, [r7, #15]
 800f1a4:	e02b      	b.n	800f1fe <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	6839      	ldr	r1, [r7, #0]
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f7ff fec4 	bl	800ef38 <put_fat>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800f1b4:	7bfb      	ldrb	r3, [r7, #15]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d120      	bne.n	800f1fc <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1c4:	d00f      	beq.n	800f1e6 <remove_chain+0x92>
				fs->free_clust++;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f1cc:	1c5a      	adds	r2, r3, #1
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				fs->fsi_flag |= 1;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800f1da:	f043 0301 	orr.w	r3, r3, #1
 800f1de:	b2da      	uxtb	r2, r3
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f1f0:	683a      	ldr	r2, [r7, #0]
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d3c2      	bcc.n	800f17c <remove_chain+0x28>
 800f1f6:	e002      	b.n	800f1fe <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800f1f8:	bf00      	nop
 800f1fa:	e000      	b.n	800f1fe <remove_chain+0xaa>
			if (res != FR_OK) break;
 800f1fc:	bf00      	nop
		}
	}

	return res;
 800f1fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800f200:	4618      	mov	r0, r3
 800f202:	3710      	adds	r7, #16
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}

0800f208 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b086      	sub	sp, #24
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
 800f210:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d10f      	bne.n	800f238 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f21e:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800f220:	693b      	ldr	r3, [r7, #16]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d005      	beq.n	800f232 <create_chain+0x2a>
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f22c:	693a      	ldr	r2, [r7, #16]
 800f22e:	429a      	cmp	r2, r3
 800f230:	d31c      	bcc.n	800f26c <create_chain+0x64>
 800f232:	2301      	movs	r3, #1
 800f234:	613b      	str	r3, [r7, #16]
 800f236:	e019      	b.n	800f26c <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800f238:	6839      	ldr	r1, [r7, #0]
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f7ff fdc3 	bl	800edc6 <get_fat>
 800f240:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	2b01      	cmp	r3, #1
 800f246:	d801      	bhi.n	800f24c <create_chain+0x44>
 800f248:	2301      	movs	r3, #1
 800f24a:	e076      	b.n	800f33a <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f252:	d101      	bne.n	800f258 <create_chain+0x50>
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	e070      	b.n	800f33a <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f25e:	68ba      	ldr	r2, [r7, #8]
 800f260:	429a      	cmp	r2, r3
 800f262:	d201      	bcs.n	800f268 <create_chain+0x60>
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	e068      	b.n	800f33a <create_chain+0x132>
		scl = clst;
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800f26c:	693b      	ldr	r3, [r7, #16]
 800f26e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	3301      	adds	r3, #1
 800f274:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f27c:	697a      	ldr	r2, [r7, #20]
 800f27e:	429a      	cmp	r2, r3
 800f280:	d307      	bcc.n	800f292 <create_chain+0x8a>
			ncl = 2;
 800f282:	2302      	movs	r3, #2
 800f284:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800f286:	697a      	ldr	r2, [r7, #20]
 800f288:	693b      	ldr	r3, [r7, #16]
 800f28a:	429a      	cmp	r2, r3
 800f28c:	d901      	bls.n	800f292 <create_chain+0x8a>
 800f28e:	2300      	movs	r3, #0
 800f290:	e053      	b.n	800f33a <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800f292:	6979      	ldr	r1, [r7, #20]
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f7ff fd96 	bl	800edc6 <get_fat>
 800f29a:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d00e      	beq.n	800f2c0 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2a8:	d002      	beq.n	800f2b0 <create_chain+0xa8>
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	2b01      	cmp	r3, #1
 800f2ae:	d101      	bne.n	800f2b4 <create_chain+0xac>
			return cs;
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	e042      	b.n	800f33a <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800f2b4:	697a      	ldr	r2, [r7, #20]
 800f2b6:	693b      	ldr	r3, [r7, #16]
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d1d9      	bne.n	800f270 <create_chain+0x68>
 800f2bc:	2300      	movs	r3, #0
 800f2be:	e03c      	b.n	800f33a <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800f2c0:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800f2c2:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 800f2c6:	6979      	ldr	r1, [r7, #20]
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f7ff fe35 	bl	800ef38 <put_fat>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800f2d2:	7bfb      	ldrb	r3, [r7, #15]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d109      	bne.n	800f2ec <create_chain+0xe4>
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d006      	beq.n	800f2ec <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800f2de:	697a      	ldr	r2, [r7, #20]
 800f2e0:	6839      	ldr	r1, [r7, #0]
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f7ff fe28 	bl	800ef38 <put_fat>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800f2ec:	7bfb      	ldrb	r3, [r7, #15]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d11a      	bne.n	800f328 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	697a      	ldr	r2, [r7, #20]
 800f2f6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f300:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f304:	d018      	beq.n	800f338 <create_chain+0x130>
			fs->free_clust--;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f30c:	1e5a      	subs	r2, r3, #1
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
			fs->fsi_flag |= 1;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800f31a:	f043 0301 	orr.w	r3, r3, #1
 800f31e:	b2da      	uxtb	r2, r3
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
 800f326:	e007      	b.n	800f338 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800f328:	7bfb      	ldrb	r3, [r7, #15]
 800f32a:	2b01      	cmp	r3, #1
 800f32c:	d102      	bne.n	800f334 <create_chain+0x12c>
 800f32e:	f04f 33ff 	mov.w	r3, #4294967295
 800f332:	e000      	b.n	800f336 <create_chain+0x12e>
 800f334:	2301      	movs	r3, #1
 800f336:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800f338:	697b      	ldr	r3, [r7, #20]
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3718      	adds	r7, #24
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}

0800f342 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800f342:	b480      	push	{r7}
 800f344:	b087      	sub	sp, #28
 800f346:	af00      	add	r7, sp, #0
 800f348:	6078      	str	r0, [r7, #4]
 800f34a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800f352:	3304      	adds	r3, #4
 800f354:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	0a5b      	lsrs	r3, r3, #9
 800f35a:	687a      	ldr	r2, [r7, #4]
 800f35c:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 800f360:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800f364:	fbb3 f3f2 	udiv	r3, r3, r2
 800f368:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f36a:	693b      	ldr	r3, [r7, #16]
 800f36c:	1d1a      	adds	r2, r3, #4
 800f36e:	613a      	str	r2, [r7, #16]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d101      	bne.n	800f37e <clmt_clust+0x3c>
 800f37a:	2300      	movs	r3, #0
 800f37c:	e010      	b.n	800f3a0 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800f37e:	697a      	ldr	r2, [r7, #20]
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	429a      	cmp	r2, r3
 800f384:	d307      	bcc.n	800f396 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800f386:	697a      	ldr	r2, [r7, #20]
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	1ad3      	subs	r3, r2, r3
 800f38c:	617b      	str	r3, [r7, #20]
 800f38e:	693b      	ldr	r3, [r7, #16]
 800f390:	3304      	adds	r3, #4
 800f392:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f394:	e7e9      	b.n	800f36a <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800f396:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	681a      	ldr	r2, [r3, #0]
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	4413      	add	r3, r2
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	371c      	adds	r7, #28
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bc80      	pop	{r7}
 800f3a8:	4770      	bx	lr

0800f3aa <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800f3aa:	b580      	push	{r7, lr}
 800f3ac:	b086      	sub	sp, #24
 800f3ae:	af00      	add	r7, sp, #0
 800f3b0:	6078      	str	r0, [r7, #4]
 800f3b2:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	b29a      	uxth	r2, r3
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800f3c4:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	2b01      	cmp	r3, #1
 800f3ca:	d007      	beq.n	800f3dc <dir_sdi+0x32>
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f3d2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f3d6:	697a      	ldr	r2, [r7, #20]
 800f3d8:	429a      	cmp	r2, r3
 800f3da:	d301      	bcc.n	800f3e0 <dir_sdi+0x36>
		return FR_INT_ERR;
 800f3dc:	2302      	movs	r3, #2
 800f3de:	e074      	b.n	800f4ca <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d10c      	bne.n	800f400 <dir_sdi+0x56>
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f3ec:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f3f0:	2b03      	cmp	r3, #3
 800f3f2:	d105      	bne.n	800f400 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f3fa:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800f3fe:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d111      	bne.n	800f42a <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f40c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800f410:	461a      	mov	r2, r3
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	4293      	cmp	r3, r2
 800f416:	d301      	bcc.n	800f41c <dir_sdi+0x72>
			return FR_INT_ERR;
 800f418:	2302      	movs	r3, #2
 800f41a:	e056      	b.n	800f4ca <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f422:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800f426:	613b      	str	r3, [r7, #16]
 800f428:	e032      	b.n	800f490 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f430:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800f434:	011b      	lsls	r3, r3, #4
 800f436:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800f438:	e01e      	b.n	800f478 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f440:	6979      	ldr	r1, [r7, #20]
 800f442:	4618      	mov	r0, r3
 800f444:	f7ff fcbf 	bl	800edc6 <get_fat>
 800f448:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f450:	d101      	bne.n	800f456 <dir_sdi+0xac>
 800f452:	2301      	movs	r3, #1
 800f454:	e039      	b.n	800f4ca <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	2b01      	cmp	r3, #1
 800f45a:	d907      	bls.n	800f46c <dir_sdi+0xc2>
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f462:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f466:	697a      	ldr	r2, [r7, #20]
 800f468:	429a      	cmp	r2, r3
 800f46a:	d301      	bcc.n	800f470 <dir_sdi+0xc6>
				return FR_INT_ERR;
 800f46c:	2302      	movs	r3, #2
 800f46e:	e02c      	b.n	800f4ca <dir_sdi+0x120>
			idx -= ic;
 800f470:	683a      	ldr	r2, [r7, #0]
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	1ad3      	subs	r3, r2, r3
 800f476:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800f478:	683a      	ldr	r2, [r7, #0]
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	429a      	cmp	r2, r3
 800f47e:	d2dc      	bcs.n	800f43a <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f486:	6979      	ldr	r1, [r7, #20]
 800f488:	4618      	mov	r0, r3
 800f48a:	f7ff fc7b 	bl	800ed84 <clust2sect>
 800f48e:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	697a      	ldr	r2, [r7, #20]
 800f494:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	if (!sect) return FR_INT_ERR;
 800f498:	693b      	ldr	r3, [r7, #16]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d101      	bne.n	800f4a2 <dir_sdi+0xf8>
 800f49e:	2302      	movs	r3, #2
 800f4a0:	e013      	b.n	800f4ca <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	091a      	lsrs	r2, r3, #4
 800f4a6:	693b      	ldr	r3, [r7, #16]
 800f4a8:	441a      	add	r2, r3
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f4b6:	461a      	mov	r2, r3
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	f003 030f 	and.w	r3, r3, #15
 800f4be:	015b      	lsls	r3, r3, #5
 800f4c0:	441a      	add	r2, r3
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 800f4c8:	2300      	movs	r3, #0
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3718      	adds	r7, #24
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}

0800f4d2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f4d2:	b590      	push	{r4, r7, lr}
 800f4d4:	b087      	sub	sp, #28
 800f4d6:	af00      	add	r7, sp, #0
 800f4d8:	6078      	str	r0, [r7, #4]
 800f4da:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 800f4e2:	3301      	adds	r3, #1
 800f4e4:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d004      	beq.n	800f4f8 <dir_next+0x26>
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d101      	bne.n	800f4fc <dir_next+0x2a>
		return FR_NO_FILE;
 800f4f8:	2304      	movs	r3, #4
 800f4fa:	e0dd      	b.n	800f6b8 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	f003 030f 	and.w	r3, r3, #15
 800f502:	2b00      	cmp	r3, #0
 800f504:	f040 80c6 	bne.w	800f694 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f50e:	1c5a      	adds	r2, r3, #1
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

		if (!dp->clust) {		/* Static table */
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d10b      	bne.n	800f538 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f526:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800f52a:	461a      	mov	r2, r3
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	4293      	cmp	r3, r2
 800f530:	f0c0 80b0 	bcc.w	800f694 <dir_next+0x1c2>
				return FR_NO_FILE;
 800f534:	2304      	movs	r3, #4
 800f536:	e0bf      	b.n	800f6b8 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	091b      	lsrs	r3, r3, #4
 800f53c:	687a      	ldr	r2, [r7, #4]
 800f53e:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 800f542:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800f546:	3a01      	subs	r2, #1
 800f548:	4013      	ands	r3, r2
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	f040 80a2 	bne.w	800f694 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800f55c:	4619      	mov	r1, r3
 800f55e:	4610      	mov	r0, r2
 800f560:	f7ff fc31 	bl	800edc6 <get_fat>
 800f564:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800f566:	697b      	ldr	r3, [r7, #20]
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d801      	bhi.n	800f570 <dir_next+0x9e>
 800f56c:	2302      	movs	r3, #2
 800f56e:	e0a3      	b.n	800f6b8 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f576:	d101      	bne.n	800f57c <dir_next+0xaa>
 800f578:	2301      	movs	r3, #1
 800f57a:	e09d      	b.n	800f6b8 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f582:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f586:	697a      	ldr	r2, [r7, #20]
 800f588:	429a      	cmp	r2, r3
 800f58a:	d374      	bcc.n	800f676 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d101      	bne.n	800f596 <dir_next+0xc4>
 800f592:	2304      	movs	r3, #4
 800f594:	e090      	b.n	800f6b8 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800f5a2:	4619      	mov	r1, r3
 800f5a4:	4610      	mov	r0, r2
 800f5a6:	f7ff fe2f 	bl	800f208 <create_chain>
 800f5aa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d101      	bne.n	800f5b6 <dir_next+0xe4>
 800f5b2:	2307      	movs	r3, #7
 800f5b4:	e080      	b.n	800f6b8 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800f5b6:	697b      	ldr	r3, [r7, #20]
 800f5b8:	2b01      	cmp	r3, #1
 800f5ba:	d101      	bne.n	800f5c0 <dir_next+0xee>
 800f5bc:	2302      	movs	r3, #2
 800f5be:	e07b      	b.n	800f6b8 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5c6:	d101      	bne.n	800f5cc <dir_next+0xfa>
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	e075      	b.n	800f6b8 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f7ff fab2 	bl	800eb3c <sync_window>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d001      	beq.n	800f5e2 <dir_next+0x110>
 800f5de:	2301      	movs	r3, #1
 800f5e0:	e06a      	b.n	800f6b8 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f5e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f5ec:	2100      	movs	r1, #0
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f7ff f8ac 	bl	800e74c <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
 800f600:	6979      	ldr	r1, [r7, #20]
 800f602:	4610      	mov	r0, r2
 800f604:	f7ff fbbe 	bl	800ed84 <clust2sect>
 800f608:	4603      	mov	r3, r0
 800f60a:	f8c4 3230 	str.w	r3, [r4, #560]	@ 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800f60e:	2300      	movs	r3, #0
 800f610:	613b      	str	r3, [r7, #16]
 800f612:	e01b      	b.n	800f64c <dir_next+0x17a>
						dp->fs->wflag = 1;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f61a:	2201      	movs	r2, #1
 800f61c:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f626:	4618      	mov	r0, r3
 800f628:	f7ff fa88 	bl	800eb3c <sync_window>
 800f62c:	4603      	mov	r3, r0
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d001      	beq.n	800f636 <dir_next+0x164>
 800f632:	2301      	movs	r3, #1
 800f634:	e040      	b.n	800f6b8 <dir_next+0x1e6>
						dp->fs->winsect++;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f63c:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 800f640:	3201      	adds	r2, #1
 800f642:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800f646:	693b      	ldr	r3, [r7, #16]
 800f648:	3301      	adds	r3, #1
 800f64a:	613b      	str	r3, [r7, #16]
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f652:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800f656:	461a      	mov	r2, r3
 800f658:	693b      	ldr	r3, [r7, #16]
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d3da      	bcc.n	800f614 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f664:	f8d3 1230 	ldr.w	r1, [r3, #560]	@ 0x230
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f66e:	693a      	ldr	r2, [r7, #16]
 800f670:	1a8a      	subs	r2, r1, r2
 800f672:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	697a      	ldr	r2, [r7, #20]
 800f67a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f684:	6979      	ldr	r1, [r7, #20]
 800f686:	4618      	mov	r0, r3
 800f688:	f7ff fb7c 	bl	800ed84 <clust2sect>
 800f68c:	4602      	mov	r2, r0
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	b29a      	uxth	r2, r3
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f6a4:	461a      	mov	r2, r3
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	f003 030f 	and.w	r3, r3, #15
 800f6ac:	015b      	lsls	r3, r3, #5
 800f6ae:	441a      	add	r2, r3
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 800f6b6:	2300      	movs	r3, #0
}
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	371c      	adds	r7, #28
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd90      	pop	{r4, r7, pc}

0800f6c0 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b084      	sub	sp, #16
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
 800f6c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800f6ca:	2100      	movs	r1, #0
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f7ff fe6c 	bl	800f3aa <dir_sdi>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f6d6:	7bfb      	ldrb	r3, [r7, #15]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d131      	bne.n	800f740 <dir_alloc+0x80>
		n = 0;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	4610      	mov	r0, r2
 800f6f0:	f7ff fa6d 	bl	800ebce <move_window>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800f6f8:	7bfb      	ldrb	r3, [r7, #15]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d11f      	bne.n	800f73e <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f704:	781b      	ldrb	r3, [r3, #0]
 800f706:	2be5      	cmp	r3, #229	@ 0xe5
 800f708:	d005      	beq.n	800f716 <dir_alloc+0x56>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d107      	bne.n	800f726 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f716:	68bb      	ldr	r3, [r7, #8]
 800f718:	3301      	adds	r3, #1
 800f71a:	60bb      	str	r3, [r7, #8]
 800f71c:	68ba      	ldr	r2, [r7, #8]
 800f71e:	683b      	ldr	r3, [r7, #0]
 800f720:	429a      	cmp	r2, r3
 800f722:	d102      	bne.n	800f72a <dir_alloc+0x6a>
 800f724:	e00c      	b.n	800f740 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f726:	2300      	movs	r3, #0
 800f728:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800f72a:	2101      	movs	r1, #1
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	f7ff fed0 	bl	800f4d2 <dir_next>
 800f732:	4603      	mov	r3, r0
 800f734:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800f736:	7bfb      	ldrb	r3, [r7, #15]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d0d1      	beq.n	800f6e0 <dir_alloc+0x20>
 800f73c:	e000      	b.n	800f740 <dir_alloc+0x80>
			if (res != FR_OK) break;
 800f73e:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f740:	7bfb      	ldrb	r3, [r7, #15]
 800f742:	2b04      	cmp	r3, #4
 800f744:	d101      	bne.n	800f74a <dir_alloc+0x8a>
 800f746:	2307      	movs	r3, #7
 800f748:	73fb      	strb	r3, [r7, #15]
	return res;
 800f74a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	3710      	adds	r7, #16
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}

0800f754 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800f754:	b480      	push	{r7}
 800f756:	b085      	sub	sp, #20
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
 800f75c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	331b      	adds	r3, #27
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	021b      	lsls	r3, r3, #8
 800f766:	b21a      	sxth	r2, r3
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	331a      	adds	r3, #26
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	b21b      	sxth	r3, r3
 800f770:	4313      	orrs	r3, r2
 800f772:	b21b      	sxth	r3, r3
 800f774:	b29b      	uxth	r3, r3
 800f776:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f77e:	2b03      	cmp	r3, #3
 800f780:	d10f      	bne.n	800f7a2 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	3315      	adds	r3, #21
 800f786:	781b      	ldrb	r3, [r3, #0]
 800f788:	021b      	lsls	r3, r3, #8
 800f78a:	b21a      	sxth	r2, r3
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	3314      	adds	r3, #20
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	b21b      	sxth	r3, r3
 800f794:	4313      	orrs	r3, r2
 800f796:	b21b      	sxth	r3, r3
 800f798:	b29b      	uxth	r3, r3
 800f79a:	041b      	lsls	r3, r3, #16
 800f79c:	68fa      	ldr	r2, [r7, #12]
 800f79e:	4313      	orrs	r3, r2
 800f7a0:	60fb      	str	r3, [r7, #12]

	return cl;
 800f7a2:	68fb      	ldr	r3, [r7, #12]
}
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	3714      	adds	r7, #20
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	bc80      	pop	{r7}
 800f7ac:	4770      	bx	lr

0800f7ae <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800f7ae:	b480      	push	{r7}
 800f7b0:	b083      	sub	sp, #12
 800f7b2:	af00      	add	r7, sp, #0
 800f7b4:	6078      	str	r0, [r7, #4]
 800f7b6:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	331a      	adds	r3, #26
 800f7bc:	683a      	ldr	r2, [r7, #0]
 800f7be:	b2d2      	uxtb	r2, r2
 800f7c0:	701a      	strb	r2, [r3, #0]
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	b29b      	uxth	r3, r3
 800f7c6:	0a1b      	lsrs	r3, r3, #8
 800f7c8:	b29a      	uxth	r2, r3
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	331b      	adds	r3, #27
 800f7ce:	b2d2      	uxtb	r2, r2
 800f7d0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	0c1a      	lsrs	r2, r3, #16
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	3314      	adds	r3, #20
 800f7da:	b2d2      	uxtb	r2, r2
 800f7dc:	701a      	strb	r2, [r3, #0]
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	0c1b      	lsrs	r3, r3, #16
 800f7e2:	b29b      	uxth	r3, r3
 800f7e4:	0a1b      	lsrs	r3, r3, #8
 800f7e6:	b29a      	uxth	r2, r3
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	3315      	adds	r3, #21
 800f7ec:	b2d2      	uxtb	r2, r2
 800f7ee:	701a      	strb	r2, [r3, #0]
}
 800f7f0:	bf00      	nop
 800f7f2:	370c      	adds	r7, #12
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bc80      	pop	{r7}
 800f7f8:	4770      	bx	lr
	...

0800f7fc <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b086      	sub	sp, #24
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
 800f804:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	781b      	ldrb	r3, [r3, #0]
 800f80a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f80e:	1e5a      	subs	r2, r3, #1
 800f810:	4613      	mov	r3, r2
 800f812:	005b      	lsls	r3, r3, #1
 800f814:	4413      	add	r3, r2
 800f816:	009b      	lsls	r3, r3, #2
 800f818:	4413      	add	r3, r2
 800f81a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800f81c:	2300      	movs	r3, #0
 800f81e:	613b      	str	r3, [r7, #16]
 800f820:	2301      	movs	r3, #1
 800f822:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800f824:	4a2b      	ldr	r2, [pc, #172]	@ (800f8d4 <cmp_lfn+0xd8>)
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	4413      	add	r3, r2
 800f82a:	781b      	ldrb	r3, [r3, #0]
 800f82c:	3301      	adds	r3, #1
 800f82e:	683a      	ldr	r2, [r7, #0]
 800f830:	4413      	add	r3, r2
 800f832:	781b      	ldrb	r3, [r3, #0]
 800f834:	021b      	lsls	r3, r3, #8
 800f836:	b21a      	sxth	r2, r3
 800f838:	4926      	ldr	r1, [pc, #152]	@ (800f8d4 <cmp_lfn+0xd8>)
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	440b      	add	r3, r1
 800f83e:	781b      	ldrb	r3, [r3, #0]
 800f840:	4619      	mov	r1, r3
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	440b      	add	r3, r1
 800f846:	781b      	ldrb	r3, [r3, #0]
 800f848:	b21b      	sxth	r3, r3
 800f84a:	4313      	orrs	r3, r2
 800f84c:	b21b      	sxth	r3, r3
 800f84e:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800f850:	89fb      	ldrh	r3, [r7, #14]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d019      	beq.n	800f88a <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800f856:	89bb      	ldrh	r3, [r7, #12]
 800f858:	4618      	mov	r0, r3
 800f85a:	f002 fb87 	bl	8011f6c <ff_wtoupper>
 800f85e:	4603      	mov	r3, r0
 800f860:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	2bfe      	cmp	r3, #254	@ 0xfe
 800f866:	d80e      	bhi.n	800f886 <cmp_lfn+0x8a>
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	1c5a      	adds	r2, r3, #1
 800f86c:	617a      	str	r2, [r7, #20]
 800f86e:	005b      	lsls	r3, r3, #1
 800f870:	687a      	ldr	r2, [r7, #4]
 800f872:	4413      	add	r3, r2
 800f874:	881b      	ldrh	r3, [r3, #0]
 800f876:	4618      	mov	r0, r3
 800f878:	f002 fb78 	bl	8011f6c <ff_wtoupper>
 800f87c:	4603      	mov	r3, r0
 800f87e:	461a      	mov	r2, r3
 800f880:	89fb      	ldrh	r3, [r7, #14]
 800f882:	4293      	cmp	r3, r2
 800f884:	d008      	beq.n	800f898 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800f886:	2300      	movs	r3, #0
 800f888:	e01f      	b.n	800f8ca <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800f88a:	89bb      	ldrh	r3, [r7, #12]
 800f88c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f890:	4293      	cmp	r3, r2
 800f892:	d001      	beq.n	800f898 <cmp_lfn+0x9c>
 800f894:	2300      	movs	r3, #0
 800f896:	e018      	b.n	800f8ca <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800f898:	693b      	ldr	r3, [r7, #16]
 800f89a:	3301      	adds	r3, #1
 800f89c:	613b      	str	r3, [r7, #16]
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	2b0c      	cmp	r3, #12
 800f8a2:	d9bf      	bls.n	800f824 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d00b      	beq.n	800f8c8 <cmp_lfn+0xcc>
 800f8b0:	89fb      	ldrh	r3, [r7, #14]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d008      	beq.n	800f8c8 <cmp_lfn+0xcc>
 800f8b6:	697b      	ldr	r3, [r7, #20]
 800f8b8:	005b      	lsls	r3, r3, #1
 800f8ba:	687a      	ldr	r2, [r7, #4]
 800f8bc:	4413      	add	r3, r2
 800f8be:	881b      	ldrh	r3, [r3, #0]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d001      	beq.n	800f8c8 <cmp_lfn+0xcc>
		return 0;
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	e000      	b.n	800f8ca <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800f8c8:	2301      	movs	r3, #1
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3718      	adds	r7, #24
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}
 800f8d2:	bf00      	nop
 800f8d4:	08015b2c 	.word	0x08015b2c

0800f8d8 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800f8d8:	b480      	push	{r7}
 800f8da:	b089      	sub	sp, #36	@ 0x24
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	60b9      	str	r1, [r7, #8]
 800f8e2:	4611      	mov	r1, r2
 800f8e4:	461a      	mov	r2, r3
 800f8e6:	460b      	mov	r3, r1
 800f8e8:	71fb      	strb	r3, [r7, #7]
 800f8ea:	4613      	mov	r3, r2
 800f8ec:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800f8ee:	68bb      	ldr	r3, [r7, #8]
 800f8f0:	330d      	adds	r3, #13
 800f8f2:	79ba      	ldrb	r2, [r7, #6]
 800f8f4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	330b      	adds	r3, #11
 800f8fa:	220f      	movs	r2, #15
 800f8fc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	330c      	adds	r3, #12
 800f902:	2200      	movs	r2, #0
 800f904:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800f906:	68bb      	ldr	r3, [r7, #8]
 800f908:	331a      	adds	r3, #26
 800f90a:	2200      	movs	r2, #0
 800f90c:	701a      	strb	r2, [r3, #0]
 800f90e:	68bb      	ldr	r3, [r7, #8]
 800f910:	331b      	adds	r3, #27
 800f912:	2200      	movs	r2, #0
 800f914:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800f916:	79fb      	ldrb	r3, [r7, #7]
 800f918:	1e5a      	subs	r2, r3, #1
 800f91a:	4613      	mov	r3, r2
 800f91c:	005b      	lsls	r3, r3, #1
 800f91e:	4413      	add	r3, r2
 800f920:	009b      	lsls	r3, r3, #2
 800f922:	4413      	add	r3, r2
 800f924:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800f926:	2300      	movs	r3, #0
 800f928:	82fb      	strh	r3, [r7, #22]
 800f92a:	2300      	movs	r3, #0
 800f92c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800f92e:	8afb      	ldrh	r3, [r7, #22]
 800f930:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f934:	4293      	cmp	r3, r2
 800f936:	d007      	beq.n	800f948 <fit_lfn+0x70>
 800f938:	69fb      	ldr	r3, [r7, #28]
 800f93a:	1c5a      	adds	r2, r3, #1
 800f93c:	61fa      	str	r2, [r7, #28]
 800f93e:	005b      	lsls	r3, r3, #1
 800f940:	68fa      	ldr	r2, [r7, #12]
 800f942:	4413      	add	r3, r2
 800f944:	881b      	ldrh	r3, [r3, #0]
 800f946:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800f948:	4a1c      	ldr	r2, [pc, #112]	@ (800f9bc <fit_lfn+0xe4>)
 800f94a:	69bb      	ldr	r3, [r7, #24]
 800f94c:	4413      	add	r3, r2
 800f94e:	781b      	ldrb	r3, [r3, #0]
 800f950:	461a      	mov	r2, r3
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	4413      	add	r3, r2
 800f956:	8afa      	ldrh	r2, [r7, #22]
 800f958:	b2d2      	uxtb	r2, r2
 800f95a:	701a      	strb	r2, [r3, #0]
 800f95c:	8afb      	ldrh	r3, [r7, #22]
 800f95e:	0a1b      	lsrs	r3, r3, #8
 800f960:	b299      	uxth	r1, r3
 800f962:	4a16      	ldr	r2, [pc, #88]	@ (800f9bc <fit_lfn+0xe4>)
 800f964:	69bb      	ldr	r3, [r7, #24]
 800f966:	4413      	add	r3, r2
 800f968:	781b      	ldrb	r3, [r3, #0]
 800f96a:	3301      	adds	r3, #1
 800f96c:	68ba      	ldr	r2, [r7, #8]
 800f96e:	4413      	add	r3, r2
 800f970:	b2ca      	uxtb	r2, r1
 800f972:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800f974:	8afb      	ldrh	r3, [r7, #22]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d102      	bne.n	800f980 <fit_lfn+0xa8>
 800f97a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f97e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800f980:	69bb      	ldr	r3, [r7, #24]
 800f982:	3301      	adds	r3, #1
 800f984:	61bb      	str	r3, [r7, #24]
 800f986:	69bb      	ldr	r3, [r7, #24]
 800f988:	2b0c      	cmp	r3, #12
 800f98a:	d9d0      	bls.n	800f92e <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800f98c:	8afb      	ldrh	r3, [r7, #22]
 800f98e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f992:	4293      	cmp	r3, r2
 800f994:	d006      	beq.n	800f9a4 <fit_lfn+0xcc>
 800f996:	69fb      	ldr	r3, [r7, #28]
 800f998:	005b      	lsls	r3, r3, #1
 800f99a:	68fa      	ldr	r2, [r7, #12]
 800f99c:	4413      	add	r3, r2
 800f99e:	881b      	ldrh	r3, [r3, #0]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d103      	bne.n	800f9ac <fit_lfn+0xd4>
 800f9a4:	79fb      	ldrb	r3, [r7, #7]
 800f9a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9aa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	79fa      	ldrb	r2, [r7, #7]
 800f9b0:	701a      	strb	r2, [r3, #0]
}
 800f9b2:	bf00      	nop
 800f9b4:	3724      	adds	r7, #36	@ 0x24
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bc80      	pop	{r7}
 800f9ba:	4770      	bx	lr
 800f9bc:	08015b2c 	.word	0x08015b2c

0800f9c0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b08c      	sub	sp, #48	@ 0x30
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	60f8      	str	r0, [r7, #12]
 800f9c8:	60b9      	str	r1, [r7, #8]
 800f9ca:	607a      	str	r2, [r7, #4]
 800f9cc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800f9ce:	220b      	movs	r2, #11
 800f9d0:	68b9      	ldr	r1, [r7, #8]
 800f9d2:	68f8      	ldr	r0, [r7, #12]
 800f9d4:	f7fe fe9c 	bl	800e710 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	2b05      	cmp	r3, #5
 800f9dc:	d92b      	bls.n	800fa36 <gen_numname+0x76>
		sr = seq;
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800f9e2:	e022      	b.n	800fa2a <gen_numname+0x6a>
			wc = *lfn++;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	1c9a      	adds	r2, r3, #2
 800f9e8:	607a      	str	r2, [r7, #4]
 800f9ea:	881b      	ldrh	r3, [r3, #0]
 800f9ec:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f9f2:	e017      	b.n	800fa24 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800f9f4:	69fb      	ldr	r3, [r7, #28]
 800f9f6:	005a      	lsls	r2, r3, #1
 800f9f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f9fa:	f003 0301 	and.w	r3, r3, #1
 800f9fe:	4413      	add	r3, r2
 800fa00:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800fa02:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fa04:	085b      	lsrs	r3, r3, #1
 800fa06:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800fa08:	69fb      	ldr	r3, [r7, #28]
 800fa0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d005      	beq.n	800fa1e <gen_numname+0x5e>
 800fa12:	69fb      	ldr	r3, [r7, #28]
 800fa14:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800fa18:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800fa1c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800fa1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa20:	3301      	adds	r3, #1
 800fa22:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fa24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa26:	2b0f      	cmp	r3, #15
 800fa28:	d9e4      	bls.n	800f9f4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	881b      	ldrh	r3, [r3, #0]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d1d8      	bne.n	800f9e4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800fa32:	69fb      	ldr	r3, [r7, #28]
 800fa34:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800fa36:	2307      	movs	r3, #7
 800fa38:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	b2db      	uxtb	r3, r3
 800fa3e:	f003 030f 	and.w	r3, r3, #15
 800fa42:	b2db      	uxtb	r3, r3
 800fa44:	3330      	adds	r3, #48	@ 0x30
 800fa46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800fa4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fa4e:	2b39      	cmp	r3, #57	@ 0x39
 800fa50:	d904      	bls.n	800fa5c <gen_numname+0x9c>
 800fa52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fa56:	3307      	adds	r3, #7
 800fa58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800fa5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa5e:	1e5a      	subs	r2, r3, #1
 800fa60:	62ba      	str	r2, [r7, #40]	@ 0x28
 800fa62:	3330      	adds	r3, #48	@ 0x30
 800fa64:	443b      	add	r3, r7
 800fa66:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800fa6a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	091b      	lsrs	r3, r3, #4
 800fa72:	603b      	str	r3, [r7, #0]
	} while (seq);
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d1df      	bne.n	800fa3a <gen_numname+0x7a>
	ns[i] = '~';
 800fa7a:	f107 0214 	add.w	r2, r7, #20
 800fa7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa80:	4413      	add	r3, r2
 800fa82:	227e      	movs	r2, #126	@ 0x7e
 800fa84:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800fa86:	2300      	movs	r3, #0
 800fa88:	627b      	str	r3, [r7, #36]	@ 0x24
 800fa8a:	e002      	b.n	800fa92 <gen_numname+0xd2>
 800fa8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa8e:	3301      	adds	r3, #1
 800fa90:	627b      	str	r3, [r7, #36]	@ 0x24
 800fa92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d205      	bcs.n	800faa6 <gen_numname+0xe6>
 800fa9a:	68fa      	ldr	r2, [r7, #12]
 800fa9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa9e:	4413      	add	r3, r2
 800faa0:	781b      	ldrb	r3, [r3, #0]
 800faa2:	2b20      	cmp	r3, #32
 800faa4:	d1f2      	bne.n	800fa8c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800faa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faa8:	2b07      	cmp	r3, #7
 800faaa:	d807      	bhi.n	800fabc <gen_numname+0xfc>
 800faac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faae:	1c5a      	adds	r2, r3, #1
 800fab0:	62ba      	str	r2, [r7, #40]	@ 0x28
 800fab2:	3330      	adds	r3, #48	@ 0x30
 800fab4:	443b      	add	r3, r7
 800fab6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800faba:	e000      	b.n	800fabe <gen_numname+0xfe>
 800fabc:	2120      	movs	r1, #32
 800fabe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fac0:	1c5a      	adds	r2, r3, #1
 800fac2:	627a      	str	r2, [r7, #36]	@ 0x24
 800fac4:	68fa      	ldr	r2, [r7, #12]
 800fac6:	4413      	add	r3, r2
 800fac8:	460a      	mov	r2, r1
 800faca:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800facc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800face:	2b07      	cmp	r3, #7
 800fad0:	d9e9      	bls.n	800faa6 <gen_numname+0xe6>
}
 800fad2:	bf00      	nop
 800fad4:	bf00      	nop
 800fad6:	3730      	adds	r7, #48	@ 0x30
 800fad8:	46bd      	mov	sp, r7
 800fada:	bd80      	pop	{r7, pc}

0800fadc <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800fadc:	b480      	push	{r7}
 800fade:	b085      	sub	sp, #20
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800fae4:	2300      	movs	r3, #0
 800fae6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800fae8:	230b      	movs	r3, #11
 800faea:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800faec:	7bfb      	ldrb	r3, [r7, #15]
 800faee:	b2da      	uxtb	r2, r3
 800faf0:	0852      	lsrs	r2, r2, #1
 800faf2:	01db      	lsls	r3, r3, #7
 800faf4:	4313      	orrs	r3, r2
 800faf6:	b2da      	uxtb	r2, r3
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	1c59      	adds	r1, r3, #1
 800fafc:	6079      	str	r1, [r7, #4]
 800fafe:	781b      	ldrb	r3, [r3, #0]
 800fb00:	4413      	add	r3, r2
 800fb02:	73fb      	strb	r3, [r7, #15]
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	3b01      	subs	r3, #1
 800fb08:	60bb      	str	r3, [r7, #8]
 800fb0a:	68bb      	ldr	r3, [r7, #8]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d1ed      	bne.n	800faec <sum_sfn+0x10>
	return sum;
 800fb10:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb12:	4618      	mov	r0, r3
 800fb14:	3714      	adds	r7, #20
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bc80      	pop	{r7}
 800fb1a:	4770      	bx	lr

0800fb1c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b086      	sub	sp, #24
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800fb24:	2100      	movs	r1, #0
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f7ff fc3f 	bl	800f3aa <dir_sdi>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800fb30:	7dfb      	ldrb	r3, [r7, #23]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d001      	beq.n	800fb3a <dir_find+0x1e>
 800fb36:	7dfb      	ldrb	r3, [r7, #23]
 800fb38:	e0ac      	b.n	800fc94 <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800fb3a:	23ff      	movs	r3, #255	@ 0xff
 800fb3c:	753b      	strb	r3, [r7, #20]
 800fb3e:	7d3b      	ldrb	r3, [r7, #20]
 800fb40:	757b      	strb	r3, [r7, #21]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fb48:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800fb58:	4619      	mov	r1, r3
 800fb5a:	4610      	mov	r0, r2
 800fb5c:	f7ff f837 	bl	800ebce <move_window>
 800fb60:	4603      	mov	r3, r0
 800fb62:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fb64:	7dfb      	ldrb	r3, [r7, #23]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	f040 808e 	bne.w	800fc88 <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fb72:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800fb74:	693b      	ldr	r3, [r7, #16]
 800fb76:	781b      	ldrb	r3, [r3, #0]
 800fb78:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fb7a:	7dbb      	ldrb	r3, [r7, #22]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d102      	bne.n	800fb86 <dir_find+0x6a>
 800fb80:	2304      	movs	r3, #4
 800fb82:	75fb      	strb	r3, [r7, #23]
 800fb84:	e085      	b.n	800fc92 <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800fb86:	693b      	ldr	r3, [r7, #16]
 800fb88:	330b      	adds	r3, #11
 800fb8a:	781b      	ldrb	r3, [r3, #0]
 800fb8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fb90:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800fb92:	7dbb      	ldrb	r3, [r7, #22]
 800fb94:	2be5      	cmp	r3, #229	@ 0xe5
 800fb96:	d007      	beq.n	800fba8 <dir_find+0x8c>
 800fb98:	7bfb      	ldrb	r3, [r7, #15]
 800fb9a:	f003 0308 	and.w	r3, r3, #8
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d00a      	beq.n	800fbb8 <dir_find+0x9c>
 800fba2:	7bfb      	ldrb	r3, [r7, #15]
 800fba4:	2b0f      	cmp	r3, #15
 800fba6:	d007      	beq.n	800fbb8 <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800fba8:	23ff      	movs	r3, #255	@ 0xff
 800fbaa:	757b      	strb	r3, [r7, #21]
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fbb2:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
 800fbb6:	e05c      	b.n	800fc72 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800fbb8:	7bfb      	ldrb	r3, [r7, #15]
 800fbba:	2b0f      	cmp	r3, #15
 800fbbc:	d133      	bne.n	800fc26 <dir_find+0x10a>
				if (dp->lfn) {
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d054      	beq.n	800fc72 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800fbc8:	7dbb      	ldrb	r3, [r7, #22]
 800fbca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d00e      	beq.n	800fbf0 <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 800fbd2:	693b      	ldr	r3, [r7, #16]
 800fbd4:	7b5b      	ldrb	r3, [r3, #13]
 800fbd6:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800fbd8:	7dbb      	ldrb	r3, [r7, #22]
 800fbda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fbde:	75bb      	strb	r3, [r7, #22]
 800fbe0:	7dbb      	ldrb	r3, [r7, #22]
 800fbe2:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800fbf0:	7dba      	ldrb	r2, [r7, #22]
 800fbf2:	7d7b      	ldrb	r3, [r7, #21]
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	d113      	bne.n	800fc20 <dir_find+0x104>
 800fbf8:	693b      	ldr	r3, [r7, #16]
 800fbfa:	330d      	adds	r3, #13
 800fbfc:	781b      	ldrb	r3, [r3, #0]
 800fbfe:	7d3a      	ldrb	r2, [r7, #20]
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d10d      	bne.n	800fc20 <dir_find+0x104>
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800fc0a:	6939      	ldr	r1, [r7, #16]
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f7ff fdf5 	bl	800f7fc <cmp_lfn>
 800fc12:	4603      	mov	r3, r0
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d003      	beq.n	800fc20 <dir_find+0x104>
 800fc18:	7d7b      	ldrb	r3, [r7, #21]
 800fc1a:	3b01      	subs	r3, #1
 800fc1c:	b2db      	uxtb	r3, r3
 800fc1e:	e000      	b.n	800fc22 <dir_find+0x106>
 800fc20:	23ff      	movs	r3, #255	@ 0xff
 800fc22:	757b      	strb	r3, [r7, #21]
 800fc24:	e025      	b.n	800fc72 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800fc26:	7d7b      	ldrb	r3, [r7, #21]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d107      	bne.n	800fc3c <dir_find+0x120>
 800fc2c:	6938      	ldr	r0, [r7, #16]
 800fc2e:	f7ff ff55 	bl	800fadc <sum_sfn>
 800fc32:	4603      	mov	r3, r0
 800fc34:	461a      	mov	r2, r3
 800fc36:	7d3b      	ldrb	r3, [r7, #20]
 800fc38:	4293      	cmp	r3, r2
 800fc3a:	d027      	beq.n	800fc8c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800fc42:	330b      	adds	r3, #11
 800fc44:	781b      	ldrb	r3, [r3, #0]
 800fc46:	f003 0301 	and.w	r3, r3, #1
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d10a      	bne.n	800fc64 <dir_find+0x148>
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800fc54:	220b      	movs	r2, #11
 800fc56:	4619      	mov	r1, r3
 800fc58:	6938      	ldr	r0, [r7, #16]
 800fc5a:	f7fe fd91 	bl	800e780 <mem_cmp>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d015      	beq.n	800fc90 <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800fc64:	23ff      	movs	r3, #255	@ 0xff
 800fc66:	757b      	strb	r3, [r7, #21]
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fc6e:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800fc72:	2100      	movs	r1, #0
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f7ff fc2c 	bl	800f4d2 <dir_next>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fc7e:	7dfb      	ldrb	r3, [r7, #23]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	f43f af63 	beq.w	800fb4c <dir_find+0x30>
 800fc86:	e004      	b.n	800fc92 <dir_find+0x176>
		if (res != FR_OK) break;
 800fc88:	bf00      	nop
 800fc8a:	e002      	b.n	800fc92 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800fc8c:	bf00      	nop
 800fc8e:	e000      	b.n	800fc92 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800fc90:	bf00      	nop

	return res;
 800fc92:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc94:	4618      	mov	r0, r3
 800fc96:	3718      	adds	r7, #24
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}

0800fc9c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b08c      	sub	sp, #48	@ 0x30
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800fcaa:	623b      	str	r3, [r7, #32]
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800fcb2:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800fcb4:	f107 030c 	add.w	r3, r7, #12
 800fcb8:	220c      	movs	r2, #12
 800fcba:	6a39      	ldr	r1, [r7, #32]
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f7fe fd27 	bl	800e710 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800fcc2:	7dfb      	ldrb	r3, [r7, #23]
 800fcc4:	f003 0301 	and.w	r3, r3, #1
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d037      	beq.n	800fd3c <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800fccc:	6a3b      	ldr	r3, [r7, #32]
 800fcce:	330b      	adds	r3, #11
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	701a      	strb	r2, [r3, #0]
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
		for (n = 1; n < 100; n++) {
 800fcdc:	2301      	movs	r3, #1
 800fcde:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fce0:	e013      	b.n	800fd0a <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800fce2:	f107 010c 	add.w	r1, r7, #12
 800fce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fce8:	69fa      	ldr	r2, [r7, #28]
 800fcea:	6a38      	ldr	r0, [r7, #32]
 800fcec:	f7ff fe68 	bl	800f9c0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f7ff ff13 	bl	800fb1c <dir_find>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800fcfc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d106      	bne.n	800fd12 <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 800fd04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd06:	3301      	adds	r3, #1
 800fd08:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fd0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd0c:	2b63      	cmp	r3, #99	@ 0x63
 800fd0e:	d9e8      	bls.n	800fce2 <dir_register+0x46>
 800fd10:	e000      	b.n	800fd14 <dir_register+0x78>
			if (res != FR_OK) break;
 800fd12:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800fd14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd16:	2b64      	cmp	r3, #100	@ 0x64
 800fd18:	d101      	bne.n	800fd1e <dir_register+0x82>
 800fd1a:	2307      	movs	r3, #7
 800fd1c:	e0c5      	b.n	800feaa <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800fd1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fd22:	2b04      	cmp	r3, #4
 800fd24:	d002      	beq.n	800fd2c <dir_register+0x90>
 800fd26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fd2a:	e0be      	b.n	800feaa <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800fd2c:	6a3b      	ldr	r3, [r7, #32]
 800fd2e:	330b      	adds	r3, #11
 800fd30:	7dfa      	ldrb	r2, [r7, #23]
 800fd32:	701a      	strb	r2, [r3, #0]
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	69fa      	ldr	r2, [r7, #28]
 800fd38:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800fd3c:	7dfb      	ldrb	r3, [r7, #23]
 800fd3e:	f003 0302 	and.w	r3, r3, #2
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d014      	beq.n	800fd70 <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 800fd46:	2300      	movs	r3, #0
 800fd48:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fd4a:	e002      	b.n	800fd52 <dir_register+0xb6>
 800fd4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd4e:	3301      	adds	r3, #1
 800fd50:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fd52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd54:	005b      	lsls	r3, r3, #1
 800fd56:	69fa      	ldr	r2, [r7, #28]
 800fd58:	4413      	add	r3, r2
 800fd5a:	881b      	ldrh	r3, [r3, #0]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d1f5      	bne.n	800fd4c <dir_register+0xb0>
		nent = (n + 25) / 13;
 800fd60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd62:	3319      	adds	r3, #25
 800fd64:	4a53      	ldr	r2, [pc, #332]	@ (800feb4 <dir_register+0x218>)
 800fd66:	fba2 2303 	umull	r2, r3, r2, r3
 800fd6a:	089b      	lsrs	r3, r3, #2
 800fd6c:	627b      	str	r3, [r7, #36]	@ 0x24
 800fd6e:	e001      	b.n	800fd74 <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800fd70:	2301      	movs	r3, #1
 800fd72:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800fd74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fd76:	6878      	ldr	r0, [r7, #4]
 800fd78:	f7ff fca2 	bl	800f6c0 <dir_alloc>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800fd82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d153      	bne.n	800fe32 <dir_register+0x196>
 800fd8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd8c:	3b01      	subs	r3, #1
 800fd8e:	627b      	str	r3, [r7, #36]	@ 0x24
 800fd90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d04d      	beq.n	800fe32 <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 800fd9c:	461a      	mov	r2, r3
 800fd9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fda0:	1ad3      	subs	r3, r2, r3
 800fda2:	4619      	mov	r1, r3
 800fda4:	6878      	ldr	r0, [r7, #4]
 800fda6:	f7ff fb00 	bl	800f3aa <dir_sdi>
 800fdaa:	4603      	mov	r3, r0
 800fdac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800fdb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d13c      	bne.n	800fe32 <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f7ff fe8c 	bl	800fadc <sum_sfn>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800fdd4:	4619      	mov	r1, r3
 800fdd6:	4610      	mov	r0, r2
 800fdd8:	f7fe fef9 	bl	800ebce <move_window>
 800fddc:	4603      	mov	r3, r0
 800fdde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800fde2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d122      	bne.n	800fe30 <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f8d3 1214 	ldr.w	r1, [r3, #532]	@ 0x214
 800fdf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdf8:	b2da      	uxtb	r2, r3
 800fdfa:	7efb      	ldrb	r3, [r7, #27]
 800fdfc:	f7ff fd6c 	bl	800f8d8 <fit_lfn>
				dp->fs->wflag = 1;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fe06:	2201      	movs	r2, #1
 800fe08:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = dir_next(dp, 0);	/* Next entry */
 800fe0c:	2100      	movs	r1, #0
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f7ff fb5f 	bl	800f4d2 <dir_next>
 800fe14:	4603      	mov	r3, r0
 800fe16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800fe1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d107      	bne.n	800fe32 <dir_register+0x196>
 800fe22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe24:	3b01      	subs	r3, #1
 800fe26:	627b      	str	r3, [r7, #36]	@ 0x24
 800fe28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d1cc      	bne.n	800fdc8 <dir_register+0x12c>
 800fe2e:	e000      	b.n	800fe32 <dir_register+0x196>
				if (res != FR_OK) break;
 800fe30:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800fe32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d135      	bne.n	800fea6 <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800fe46:	4619      	mov	r1, r3
 800fe48:	4610      	mov	r0, r2
 800fe4a:	f7fe fec0 	bl	800ebce <move_window>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800fe54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d124      	bne.n	800fea6 <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fe62:	2220      	movs	r2, #32
 800fe64:	2100      	movs	r1, #0
 800fe66:	4618      	mov	r0, r3
 800fe68:	f7fe fc70 	bl	800e74c <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	f8d3 0214 	ldr.w	r0, [r3, #532]	@ 0x214
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800fe78:	220b      	movs	r2, #11
 800fe7a:	4619      	mov	r1, r3
 800fe7c:	f7fe fc48 	bl	800e710 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800fe86:	330b      	adds	r3, #11
 800fe88:	781a      	ldrb	r2, [r3, #0]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fe90:	330c      	adds	r3, #12
 800fe92:	f002 0218 	and.w	r2, r2, #24
 800fe96:	b2d2      	uxtb	r2, r2
 800fe98:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fea0:	2201      	movs	r2, #1
 800fea2:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		}
	}

	return res;
 800fea6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3730      	adds	r7, #48	@ 0x30
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}
 800feb2:	bf00      	nop
 800feb4:	4ec4ec4f 	.word	0x4ec4ec4f

0800feb8 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b08a      	sub	sp, #40	@ 0x28
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	613b      	str	r3, [r7, #16]
 800fec8:	e002      	b.n	800fed0 <create_name+0x18>
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	3301      	adds	r3, #1
 800fece:	613b      	str	r3, [r7, #16]
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	2b2f      	cmp	r3, #47	@ 0x2f
 800fed6:	d0f8      	beq.n	800feca <create_name+0x12>
 800fed8:	693b      	ldr	r3, [r7, #16]
 800feda:	781b      	ldrb	r3, [r3, #0]
 800fedc:	2b5c      	cmp	r3, #92	@ 0x5c
 800fede:	d0f4      	beq.n	800feca <create_name+0x12>
	lfn = dp->lfn;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800fee6:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800fee8:	2300      	movs	r3, #0
 800feea:	617b      	str	r3, [r7, #20]
 800feec:	697b      	ldr	r3, [r7, #20]
 800feee:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800fef0:	69bb      	ldr	r3, [r7, #24]
 800fef2:	1c5a      	adds	r2, r3, #1
 800fef4:	61ba      	str	r2, [r7, #24]
 800fef6:	693a      	ldr	r2, [r7, #16]
 800fef8:	4413      	add	r3, r2
 800fefa:	781b      	ldrb	r3, [r3, #0]
 800fefc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800fefe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff00:	2b1f      	cmp	r3, #31
 800ff02:	d92f      	bls.n	800ff64 <create_name+0xac>
 800ff04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff06:	2b2f      	cmp	r3, #47	@ 0x2f
 800ff08:	d02c      	beq.n	800ff64 <create_name+0xac>
 800ff0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff0c:	2b5c      	cmp	r3, #92	@ 0x5c
 800ff0e:	d029      	beq.n	800ff64 <create_name+0xac>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	2bfe      	cmp	r3, #254	@ 0xfe
 800ff14:	d901      	bls.n	800ff1a <create_name+0x62>
			return FR_INVALID_NAME;
 800ff16:	2306      	movs	r3, #6
 800ff18:	e182      	b.n	8010220 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ff1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff1c:	b2db      	uxtb	r3, r3
 800ff1e:	84bb      	strh	r3, [r7, #36]	@ 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ff20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff22:	2101      	movs	r1, #1
 800ff24:	4618      	mov	r0, r3
 800ff26:	f001 ffe7 	bl	8011ef8 <ff_convert>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ff2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d101      	bne.n	800ff38 <create_name+0x80>
 800ff34:	2306      	movs	r3, #6
 800ff36:	e173      	b.n	8010220 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800ff38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff3a:	2b7f      	cmp	r3, #127	@ 0x7f
 800ff3c:	d809      	bhi.n	800ff52 <create_name+0x9a>
 800ff3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff40:	4619      	mov	r1, r3
 800ff42:	488e      	ldr	r0, [pc, #568]	@ (801017c <create_name+0x2c4>)
 800ff44:	f7fe fc42 	bl	800e7cc <chk_chr>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d001      	beq.n	800ff52 <create_name+0x9a>
			return FR_INVALID_NAME;
 800ff4e:	2306      	movs	r3, #6
 800ff50:	e166      	b.n	8010220 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800ff52:	697b      	ldr	r3, [r7, #20]
 800ff54:	1c5a      	adds	r2, r3, #1
 800ff56:	617a      	str	r2, [r7, #20]
 800ff58:	005b      	lsls	r3, r3, #1
 800ff5a:	68fa      	ldr	r2, [r7, #12]
 800ff5c:	4413      	add	r3, r2
 800ff5e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ff60:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ff62:	e7c5      	b.n	800fef0 <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ff64:	693a      	ldr	r2, [r7, #16]
 800ff66:	69bb      	ldr	r3, [r7, #24]
 800ff68:	441a      	add	r2, r3
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800ff6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff70:	2b1f      	cmp	r3, #31
 800ff72:	d801      	bhi.n	800ff78 <create_name+0xc0>
 800ff74:	2304      	movs	r3, #4
 800ff76:	e000      	b.n	800ff7a <create_name+0xc2>
 800ff78:	2300      	movs	r3, #0
 800ff7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800ff7e:	e011      	b.n	800ffa4 <create_name+0xec>
		w = lfn[di - 1];
 800ff80:	697b      	ldr	r3, [r7, #20]
 800ff82:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ff86:	3b01      	subs	r3, #1
 800ff88:	005b      	lsls	r3, r3, #1
 800ff8a:	68fa      	ldr	r2, [r7, #12]
 800ff8c:	4413      	add	r3, r2
 800ff8e:	881b      	ldrh	r3, [r3, #0]
 800ff90:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800ff92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff94:	2b20      	cmp	r3, #32
 800ff96:	d002      	beq.n	800ff9e <create_name+0xe6>
 800ff98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff9a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ff9c:	d106      	bne.n	800ffac <create_name+0xf4>
		di--;
 800ff9e:	697b      	ldr	r3, [r7, #20]
 800ffa0:	3b01      	subs	r3, #1
 800ffa2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800ffa4:	697b      	ldr	r3, [r7, #20]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d1ea      	bne.n	800ff80 <create_name+0xc8>
 800ffaa:	e000      	b.n	800ffae <create_name+0xf6>
		if (w != ' ' && w != '.') break;
 800ffac:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800ffae:	697b      	ldr	r3, [r7, #20]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d101      	bne.n	800ffb8 <create_name+0x100>
 800ffb4:	2306      	movs	r3, #6
 800ffb6:	e133      	b.n	8010220 <create_name+0x368>

	lfn[di] = 0;						/* LFN is created */
 800ffb8:	697b      	ldr	r3, [r7, #20]
 800ffba:	005b      	lsls	r3, r3, #1
 800ffbc:	68fa      	ldr	r2, [r7, #12]
 800ffbe:	4413      	add	r3, r2
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ffca:	220b      	movs	r2, #11
 800ffcc:	2120      	movs	r1, #32
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f7fe fbbc 	bl	800e74c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	61bb      	str	r3, [r7, #24]
 800ffd8:	e002      	b.n	800ffe0 <create_name+0x128>
 800ffda:	69bb      	ldr	r3, [r7, #24]
 800ffdc:	3301      	adds	r3, #1
 800ffde:	61bb      	str	r3, [r7, #24]
 800ffe0:	69bb      	ldr	r3, [r7, #24]
 800ffe2:	005b      	lsls	r3, r3, #1
 800ffe4:	68fa      	ldr	r2, [r7, #12]
 800ffe6:	4413      	add	r3, r2
 800ffe8:	881b      	ldrh	r3, [r3, #0]
 800ffea:	2b20      	cmp	r3, #32
 800ffec:	d0f5      	beq.n	800ffda <create_name+0x122>
 800ffee:	69bb      	ldr	r3, [r7, #24]
 800fff0:	005b      	lsls	r3, r3, #1
 800fff2:	68fa      	ldr	r2, [r7, #12]
 800fff4:	4413      	add	r3, r2
 800fff6:	881b      	ldrh	r3, [r3, #0]
 800fff8:	2b2e      	cmp	r3, #46	@ 0x2e
 800fffa:	d0ee      	beq.n	800ffda <create_name+0x122>
	if (si) cf |= NS_LOSS | NS_LFN;
 800fffc:	69bb      	ldr	r3, [r7, #24]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d009      	beq.n	8010016 <create_name+0x15e>
 8010002:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010006:	f043 0303 	orr.w	r3, r3, #3
 801000a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801000e:	e002      	b.n	8010016 <create_name+0x15e>
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	3b01      	subs	r3, #1
 8010014:	617b      	str	r3, [r7, #20]
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d009      	beq.n	8010030 <create_name+0x178>
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8010022:	3b01      	subs	r3, #1
 8010024:	005b      	lsls	r3, r3, #1
 8010026:	68fa      	ldr	r2, [r7, #12]
 8010028:	4413      	add	r3, r2
 801002a:	881b      	ldrh	r3, [r3, #0]
 801002c:	2b2e      	cmp	r3, #46	@ 0x2e
 801002e:	d1ef      	bne.n	8010010 <create_name+0x158>

	b = i = 0; ni = 8;
 8010030:	2300      	movs	r3, #0
 8010032:	623b      	str	r3, [r7, #32]
 8010034:	2300      	movs	r3, #0
 8010036:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801003a:	2308      	movs	r3, #8
 801003c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801003e:	69bb      	ldr	r3, [r7, #24]
 8010040:	1c5a      	adds	r2, r3, #1
 8010042:	61ba      	str	r2, [r7, #24]
 8010044:	005b      	lsls	r3, r3, #1
 8010046:	68fa      	ldr	r2, [r7, #12]
 8010048:	4413      	add	r3, r2
 801004a:	881b      	ldrh	r3, [r3, #0]
 801004c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801004e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010050:	2b00      	cmp	r3, #0
 8010052:	f000 8090 	beq.w	8010176 <create_name+0x2be>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8010056:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010058:	2b20      	cmp	r3, #32
 801005a:	d006      	beq.n	801006a <create_name+0x1b2>
 801005c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801005e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010060:	d10a      	bne.n	8010078 <create_name+0x1c0>
 8010062:	69ba      	ldr	r2, [r7, #24]
 8010064:	697b      	ldr	r3, [r7, #20]
 8010066:	429a      	cmp	r2, r3
 8010068:	d006      	beq.n	8010078 <create_name+0x1c0>
			cf |= NS_LOSS | NS_LFN; continue;
 801006a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801006e:	f043 0303 	orr.w	r3, r3, #3
 8010072:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010076:	e07d      	b.n	8010174 <create_name+0x2bc>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8010078:	6a3a      	ldr	r2, [r7, #32]
 801007a:	69fb      	ldr	r3, [r7, #28]
 801007c:	429a      	cmp	r2, r3
 801007e:	d203      	bcs.n	8010088 <create_name+0x1d0>
 8010080:	69ba      	ldr	r2, [r7, #24]
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	429a      	cmp	r2, r3
 8010086:	d123      	bne.n	80100d0 <create_name+0x218>
			if (ni == 11) {				/* Long extension */
 8010088:	69fb      	ldr	r3, [r7, #28]
 801008a:	2b0b      	cmp	r3, #11
 801008c:	d106      	bne.n	801009c <create_name+0x1e4>
				cf |= NS_LOSS | NS_LFN; break;
 801008e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010092:	f043 0303 	orr.w	r3, r3, #3
 8010096:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801009a:	e076      	b.n	801018a <create_name+0x2d2>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801009c:	69ba      	ldr	r2, [r7, #24]
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	429a      	cmp	r2, r3
 80100a2:	d005      	beq.n	80100b0 <create_name+0x1f8>
 80100a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80100a8:	f043 0303 	orr.w	r3, r3, #3
 80100ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80100b0:	69ba      	ldr	r2, [r7, #24]
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d867      	bhi.n	8010188 <create_name+0x2d0>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80100b8:	697b      	ldr	r3, [r7, #20]
 80100ba:	61bb      	str	r3, [r7, #24]
 80100bc:	2308      	movs	r3, #8
 80100be:	623b      	str	r3, [r7, #32]
 80100c0:	230b      	movs	r3, #11
 80100c2:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80100c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80100c8:	009b      	lsls	r3, r3, #2
 80100ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80100ce:	e051      	b.n	8010174 <create_name+0x2bc>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80100d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80100d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80100d4:	d914      	bls.n	8010100 <create_name+0x248>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80100d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80100d8:	2100      	movs	r1, #0
 80100da:	4618      	mov	r0, r3
 80100dc:	f001 ff0c 	bl	8011ef8 <ff_convert>
 80100e0:	4603      	mov	r3, r0
 80100e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80100e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d004      	beq.n	80100f4 <create_name+0x23c>
 80100ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80100ec:	3b80      	subs	r3, #128	@ 0x80
 80100ee:	4a24      	ldr	r2, [pc, #144]	@ (8010180 <create_name+0x2c8>)
 80100f0:	5cd3      	ldrb	r3, [r2, r3]
 80100f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80100f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80100f8:	f043 0302 	orr.w	r3, r3, #2
 80100fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8010100:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010102:	2b00      	cmp	r3, #0
 8010104:	d007      	beq.n	8010116 <create_name+0x25e>
 8010106:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010108:	4619      	mov	r1, r3
 801010a:	481e      	ldr	r0, [pc, #120]	@ (8010184 <create_name+0x2cc>)
 801010c:	f7fe fb5e 	bl	800e7cc <chk_chr>
 8010110:	4603      	mov	r3, r0
 8010112:	2b00      	cmp	r3, #0
 8010114:	d008      	beq.n	8010128 <create_name+0x270>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8010116:	235f      	movs	r3, #95	@ 0x5f
 8010118:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801011a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801011e:	f043 0303 	orr.w	r3, r3, #3
 8010122:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010126:	e01b      	b.n	8010160 <create_name+0x2a8>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8010128:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801012a:	2b40      	cmp	r3, #64	@ 0x40
 801012c:	d909      	bls.n	8010142 <create_name+0x28a>
 801012e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010130:	2b5a      	cmp	r3, #90	@ 0x5a
 8010132:	d806      	bhi.n	8010142 <create_name+0x28a>
					b |= 2;
 8010134:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010138:	f043 0302 	orr.w	r3, r3, #2
 801013c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010140:	e00e      	b.n	8010160 <create_name+0x2a8>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8010142:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010144:	2b60      	cmp	r3, #96	@ 0x60
 8010146:	d90b      	bls.n	8010160 <create_name+0x2a8>
 8010148:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801014a:	2b7a      	cmp	r3, #122	@ 0x7a
 801014c:	d808      	bhi.n	8010160 <create_name+0x2a8>
						b |= 1; w -= 0x20;
 801014e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010152:	f043 0301 	orr.w	r3, r3, #1
 8010156:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801015a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801015c:	3b20      	subs	r3, #32
 801015e:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8010166:	6a3b      	ldr	r3, [r7, #32]
 8010168:	1c59      	adds	r1, r3, #1
 801016a:	6239      	str	r1, [r7, #32]
 801016c:	4413      	add	r3, r2
 801016e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010170:	b2d2      	uxtb	r2, r2
 8010172:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8010174:	e763      	b.n	801003e <create_name+0x186>
		if (!w) break;					/* Break on end of the LFN */
 8010176:	bf00      	nop
 8010178:	e007      	b.n	801018a <create_name+0x2d2>
 801017a:	bf00      	nop
 801017c:	080159a4 	.word	0x080159a4
 8010180:	08015aac 	.word	0x08015aac
 8010184:	080159b0 	.word	0x080159b0
			if (si > di) break;			/* No extension */
 8010188:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010190:	781b      	ldrb	r3, [r3, #0]
 8010192:	2be5      	cmp	r3, #229	@ 0xe5
 8010194:	d104      	bne.n	80101a0 <create_name+0x2e8>
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 801019c:	2205      	movs	r2, #5
 801019e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80101a0:	69fb      	ldr	r3, [r7, #28]
 80101a2:	2b08      	cmp	r3, #8
 80101a4:	d104      	bne.n	80101b0 <create_name+0x2f8>
 80101a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80101aa:	009b      	lsls	r3, r3, #2
 80101ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80101b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80101b4:	f003 030c 	and.w	r3, r3, #12
 80101b8:	2b0c      	cmp	r3, #12
 80101ba:	d005      	beq.n	80101c8 <create_name+0x310>
 80101bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80101c0:	f003 0303 	and.w	r3, r3, #3
 80101c4:	2b03      	cmp	r3, #3
 80101c6:	d105      	bne.n	80101d4 <create_name+0x31c>
		cf |= NS_LFN;
 80101c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80101cc:	f043 0302 	orr.w	r3, r3, #2
 80101d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80101d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80101d8:	f003 0302 	and.w	r3, r3, #2
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d117      	bne.n	8010210 <create_name+0x358>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80101e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80101e4:	f003 0303 	and.w	r3, r3, #3
 80101e8:	2b01      	cmp	r3, #1
 80101ea:	d105      	bne.n	80101f8 <create_name+0x340>
 80101ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80101f0:	f043 0310 	orr.w	r3, r3, #16
 80101f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80101f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80101fc:	f003 030c 	and.w	r3, r3, #12
 8010200:	2b04      	cmp	r3, #4
 8010202:	d105      	bne.n	8010210 <create_name+0x358>
 8010204:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010208:	f043 0308 	orr.w	r3, r3, #8
 801020c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010216:	330b      	adds	r3, #11
 8010218:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801021c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801021e:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8010220:	4618      	mov	r0, r3
 8010222:	3728      	adds	r7, #40	@ 0x28
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}

08010228 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b084      	sub	sp, #16
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
 8010230:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	781b      	ldrb	r3, [r3, #0]
 8010236:	2b2f      	cmp	r3, #47	@ 0x2f
 8010238:	d003      	beq.n	8010242 <follow_path+0x1a>
 801023a:	683b      	ldr	r3, [r7, #0]
 801023c:	781b      	ldrb	r3, [r3, #0]
 801023e:	2b5c      	cmp	r3, #92	@ 0x5c
 8010240:	d102      	bne.n	8010248 <follow_path+0x20>
		path++;
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	3301      	adds	r3, #1
 8010246:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2200      	movs	r2, #0
 801024c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010250:	683b      	ldr	r3, [r7, #0]
 8010252:	781b      	ldrb	r3, [r3, #0]
 8010254:	2b1f      	cmp	r3, #31
 8010256:	d80a      	bhi.n	801026e <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8010258:	2100      	movs	r1, #0
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	f7ff f8a5 	bl	800f3aa <dir_sdi>
 8010260:	4603      	mov	r3, r0
 8010262:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2200      	movs	r2, #0
 8010268:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 801026c:	e045      	b.n	80102fa <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801026e:	463b      	mov	r3, r7
 8010270:	4619      	mov	r1, r3
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f7ff fe20 	bl	800feb8 <create_name>
 8010278:	4603      	mov	r3, r0
 801027a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 801027c:	7bfb      	ldrb	r3, [r7, #15]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d136      	bne.n	80102f0 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8010282:	6878      	ldr	r0, [r7, #4]
 8010284:	f7ff fc4a 	bl	800fb1c <dir_find>
 8010288:	4603      	mov	r3, r0
 801028a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010292:	7adb      	ldrb	r3, [r3, #11]
 8010294:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8010296:	7bfb      	ldrb	r3, [r7, #15]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d00a      	beq.n	80102b2 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801029c:	7bfb      	ldrb	r3, [r7, #15]
 801029e:	2b04      	cmp	r3, #4
 80102a0:	d128      	bne.n	80102f4 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80102a2:	7bbb      	ldrb	r3, [r7, #14]
 80102a4:	f003 0304 	and.w	r3, r3, #4
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d123      	bne.n	80102f4 <follow_path+0xcc>
 80102ac:	2305      	movs	r3, #5
 80102ae:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80102b0:	e020      	b.n	80102f4 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80102b2:	7bbb      	ldrb	r3, [r7, #14]
 80102b4:	f003 0304 	and.w	r3, r3, #4
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d11d      	bne.n	80102f8 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80102c2:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	330b      	adds	r3, #11
 80102c8:	781b      	ldrb	r3, [r3, #0]
 80102ca:	f003 0310 	and.w	r3, r3, #16
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d102      	bne.n	80102d8 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 80102d2:	2305      	movs	r3, #5
 80102d4:	73fb      	strb	r3, [r7, #15]
 80102d6:	e010      	b.n	80102fa <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80102de:	68b9      	ldr	r1, [r7, #8]
 80102e0:	4618      	mov	r0, r3
 80102e2:	f7ff fa37 	bl	800f754 <ld_clust>
 80102e6:	4602      	mov	r2, r0
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80102ee:	e7be      	b.n	801026e <follow_path+0x46>
			if (res != FR_OK) break;
 80102f0:	bf00      	nop
 80102f2:	e002      	b.n	80102fa <follow_path+0xd2>
				break;
 80102f4:	bf00      	nop
 80102f6:	e000      	b.n	80102fa <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80102f8:	bf00      	nop
		}
	}

	return res;
 80102fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80102fc:	4618      	mov	r0, r3
 80102fe:	3710      	adds	r7, #16
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}

08010304 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010304:	b480      	push	{r7}
 8010306:	b087      	sub	sp, #28
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801030c:	f04f 33ff 	mov.w	r3, #4294967295
 8010310:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d031      	beq.n	801037e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	617b      	str	r3, [r7, #20]
 8010320:	e002      	b.n	8010328 <get_ldnumber+0x24>
 8010322:	697b      	ldr	r3, [r7, #20]
 8010324:	3301      	adds	r3, #1
 8010326:	617b      	str	r3, [r7, #20]
 8010328:	697b      	ldr	r3, [r7, #20]
 801032a:	781b      	ldrb	r3, [r3, #0]
 801032c:	2b1f      	cmp	r3, #31
 801032e:	d903      	bls.n	8010338 <get_ldnumber+0x34>
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	781b      	ldrb	r3, [r3, #0]
 8010334:	2b3a      	cmp	r3, #58	@ 0x3a
 8010336:	d1f4      	bne.n	8010322 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010338:	697b      	ldr	r3, [r7, #20]
 801033a:	781b      	ldrb	r3, [r3, #0]
 801033c:	2b3a      	cmp	r3, #58	@ 0x3a
 801033e:	d11c      	bne.n	801037a <get_ldnumber+0x76>
			tp = *path;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	1c5a      	adds	r2, r3, #1
 801034a:	60fa      	str	r2, [r7, #12]
 801034c:	781b      	ldrb	r3, [r3, #0]
 801034e:	3b30      	subs	r3, #48	@ 0x30
 8010350:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	2b09      	cmp	r3, #9
 8010356:	d80e      	bhi.n	8010376 <get_ldnumber+0x72>
 8010358:	68fa      	ldr	r2, [r7, #12]
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	429a      	cmp	r2, r3
 801035e:	d10a      	bne.n	8010376 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d107      	bne.n	8010376 <get_ldnumber+0x72>
					vol = (int)i;
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801036a:	697b      	ldr	r3, [r7, #20]
 801036c:	3301      	adds	r3, #1
 801036e:	617b      	str	r3, [r7, #20]
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	697a      	ldr	r2, [r7, #20]
 8010374:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010376:	693b      	ldr	r3, [r7, #16]
 8010378:	e002      	b.n	8010380 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801037a:	2300      	movs	r3, #0
 801037c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801037e:	693b      	ldr	r3, [r7, #16]
}
 8010380:	4618      	mov	r0, r3
 8010382:	371c      	adds	r7, #28
 8010384:	46bd      	mov	sp, r7
 8010386:	bc80      	pop	{r7}
 8010388:	4770      	bx	lr
	...

0801038c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b082      	sub	sp, #8
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
 8010394:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	2200      	movs	r2, #0
 801039a:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f04f 32ff 	mov.w	r2, #4294967295
 80103a4:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80103a8:	6839      	ldr	r1, [r7, #0]
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f7fe fc0f 	bl	800ebce <move_window>
 80103b0:	4603      	mov	r3, r0
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d001      	beq.n	80103ba <check_fs+0x2e>
		return 3;
 80103b6:	2303      	movs	r3, #3
 80103b8:	e04a      	b.n	8010450 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80103c0:	3301      	adds	r3, #1
 80103c2:	781b      	ldrb	r3, [r3, #0]
 80103c4:	021b      	lsls	r3, r3, #8
 80103c6:	b21a      	sxth	r2, r3
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 80103ce:	b21b      	sxth	r3, r3
 80103d0:	4313      	orrs	r3, r2
 80103d2:	b21b      	sxth	r3, r3
 80103d4:	4a20      	ldr	r2, [pc, #128]	@ (8010458 <check_fs+0xcc>)
 80103d6:	4293      	cmp	r3, r2
 80103d8:	d001      	beq.n	80103de <check_fs+0x52>
		return 2;
 80103da:	2302      	movs	r3, #2
 80103dc:	e038      	b.n	8010450 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	3336      	adds	r3, #54	@ 0x36
 80103e2:	3303      	adds	r3, #3
 80103e4:	781b      	ldrb	r3, [r3, #0]
 80103e6:	061a      	lsls	r2, r3, #24
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	3336      	adds	r3, #54	@ 0x36
 80103ec:	3302      	adds	r3, #2
 80103ee:	781b      	ldrb	r3, [r3, #0]
 80103f0:	041b      	lsls	r3, r3, #16
 80103f2:	431a      	orrs	r2, r3
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	3336      	adds	r3, #54	@ 0x36
 80103f8:	3301      	adds	r3, #1
 80103fa:	781b      	ldrb	r3, [r3, #0]
 80103fc:	021b      	lsls	r3, r3, #8
 80103fe:	4313      	orrs	r3, r2
 8010400:	687a      	ldr	r2, [r7, #4]
 8010402:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8010406:	4313      	orrs	r3, r2
 8010408:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801040c:	4a13      	ldr	r2, [pc, #76]	@ (801045c <check_fs+0xd0>)
 801040e:	4293      	cmp	r3, r2
 8010410:	d101      	bne.n	8010416 <check_fs+0x8a>
		return 0;
 8010412:	2300      	movs	r3, #0
 8010414:	e01c      	b.n	8010450 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	3352      	adds	r3, #82	@ 0x52
 801041a:	3303      	adds	r3, #3
 801041c:	781b      	ldrb	r3, [r3, #0]
 801041e:	061a      	lsls	r2, r3, #24
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	3352      	adds	r3, #82	@ 0x52
 8010424:	3302      	adds	r3, #2
 8010426:	781b      	ldrb	r3, [r3, #0]
 8010428:	041b      	lsls	r3, r3, #16
 801042a:	431a      	orrs	r2, r3
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	3352      	adds	r3, #82	@ 0x52
 8010430:	3301      	adds	r3, #1
 8010432:	781b      	ldrb	r3, [r3, #0]
 8010434:	021b      	lsls	r3, r3, #8
 8010436:	4313      	orrs	r3, r2
 8010438:	687a      	ldr	r2, [r7, #4]
 801043a:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 801043e:	4313      	orrs	r3, r2
 8010440:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010444:	4a05      	ldr	r2, [pc, #20]	@ (801045c <check_fs+0xd0>)
 8010446:	4293      	cmp	r3, r2
 8010448:	d101      	bne.n	801044e <check_fs+0xc2>
		return 0;
 801044a:	2300      	movs	r3, #0
 801044c:	e000      	b.n	8010450 <check_fs+0xc4>

	return 1;
 801044e:	2301      	movs	r3, #1
}
 8010450:	4618      	mov	r0, r3
 8010452:	3708      	adds	r7, #8
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}
 8010458:	ffffaa55 	.word	0xffffaa55
 801045c:	00544146 	.word	0x00544146

08010460 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b096      	sub	sp, #88	@ 0x58
 8010464:	af00      	add	r7, sp, #0
 8010466:	60f8      	str	r0, [r7, #12]
 8010468:	60b9      	str	r1, [r7, #8]
 801046a:	4613      	mov	r3, r2
 801046c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	2200      	movs	r2, #0
 8010472:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010474:	68b8      	ldr	r0, [r7, #8]
 8010476:	f7ff ff45 	bl	8010304 <get_ldnumber>
 801047a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801047c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801047e:	2b00      	cmp	r3, #0
 8010480:	da01      	bge.n	8010486 <find_volume+0x26>
 8010482:	230b      	movs	r3, #11
 8010484:	e2b0      	b.n	80109e8 <find_volume+0x588>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010486:	4aa1      	ldr	r2, [pc, #644]	@ (801070c <find_volume+0x2ac>)
 8010488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801048a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801048e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010492:	2b00      	cmp	r3, #0
 8010494:	d101      	bne.n	801049a <find_volume+0x3a>
 8010496:	230c      	movs	r3, #12
 8010498:	e2a6      	b.n	80109e8 <find_volume+0x588>

	ENTER_FF(fs);						/* Lock the volume */
 801049a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801049c:	f7fe f9b0 	bl	800e800 <lock_fs>
 80104a0:	4603      	mov	r3, r0
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d101      	bne.n	80104aa <find_volume+0x4a>
 80104a6:	230f      	movs	r3, #15
 80104a8:	e29e      	b.n	80109e8 <find_volume+0x588>
	*rfs = fs;							/* Return pointer to the file system object */
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80104ae:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80104b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104b2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d01b      	beq.n	80104f2 <find_volume+0x92>
		stat = disk_status(fs->drv);
 80104ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104bc:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80104c0:	4618      	mov	r0, r3
 80104c2:	f7fe f887 	bl	800e5d4 <disk_status>
 80104c6:	4603      	mov	r3, r0
 80104c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80104cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80104d0:	f003 0301 	and.w	r3, r3, #1
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d10c      	bne.n	80104f2 <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80104d8:	79fb      	ldrb	r3, [r7, #7]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d007      	beq.n	80104ee <find_volume+0x8e>
 80104de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80104e2:	f003 0304 	and.w	r3, r3, #4
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d001      	beq.n	80104ee <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 80104ea:	230a      	movs	r3, #10
 80104ec:	e27c      	b.n	80109e8 <find_volume+0x588>
			return FR_OK;				/* The file system object is valid */
 80104ee:	2300      	movs	r3, #0
 80104f0:	e27a      	b.n	80109e8 <find_volume+0x588>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80104f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104f4:	2200      	movs	r2, #0
 80104f6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80104fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104fc:	b2da      	uxtb	r2, r3
 80104fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010500:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010506:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801050a:	4618      	mov	r0, r3
 801050c:	f7fe f87c 	bl	800e608 <disk_initialize>
 8010510:	4603      	mov	r3, r0
 8010512:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8010516:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801051a:	f003 0301 	and.w	r3, r3, #1
 801051e:	2b00      	cmp	r3, #0
 8010520:	d001      	beq.n	8010526 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010522:	2303      	movs	r3, #3
 8010524:	e260      	b.n	80109e8 <find_volume+0x588>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8010526:	79fb      	ldrb	r3, [r7, #7]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d007      	beq.n	801053c <find_volume+0xdc>
 801052c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010530:	f003 0304 	and.w	r3, r3, #4
 8010534:	2b00      	cmp	r3, #0
 8010536:	d001      	beq.n	801053c <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8010538:	230a      	movs	r3, #10
 801053a:	e255      	b.n	80109e8 <find_volume+0x588>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 801053c:	2300      	movs	r3, #0
 801053e:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8010540:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010542:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010544:	f7ff ff22 	bl	801038c <check_fs>
 8010548:	4603      	mov	r3, r0
 801054a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 801054e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010552:	2b01      	cmp	r3, #1
 8010554:	d153      	bne.n	80105fe <find_volume+0x19e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8010556:	2300      	movs	r3, #0
 8010558:	643b      	str	r3, [r7, #64]	@ 0x40
 801055a:	e028      	b.n	80105ae <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 801055c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801055e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010560:	011b      	lsls	r3, r3, #4
 8010562:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8010566:	4413      	add	r3, r2
 8010568:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 801056a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801056c:	3304      	adds	r3, #4
 801056e:	781b      	ldrb	r3, [r3, #0]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d012      	beq.n	801059a <find_volume+0x13a>
 8010574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010576:	330b      	adds	r3, #11
 8010578:	781b      	ldrb	r3, [r3, #0]
 801057a:	061a      	lsls	r2, r3, #24
 801057c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801057e:	330a      	adds	r3, #10
 8010580:	781b      	ldrb	r3, [r3, #0]
 8010582:	041b      	lsls	r3, r3, #16
 8010584:	431a      	orrs	r2, r3
 8010586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010588:	3309      	adds	r3, #9
 801058a:	781b      	ldrb	r3, [r3, #0]
 801058c:	021b      	lsls	r3, r3, #8
 801058e:	4313      	orrs	r3, r2
 8010590:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010592:	3208      	adds	r2, #8
 8010594:	7812      	ldrb	r2, [r2, #0]
 8010596:	431a      	orrs	r2, r3
 8010598:	e000      	b.n	801059c <find_volume+0x13c>
 801059a:	2200      	movs	r2, #0
 801059c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801059e:	009b      	lsls	r3, r3, #2
 80105a0:	3358      	adds	r3, #88	@ 0x58
 80105a2:	443b      	add	r3, r7
 80105a4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80105a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80105aa:	3301      	adds	r3, #1
 80105ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80105ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80105b0:	2b03      	cmp	r3, #3
 80105b2:	d9d3      	bls.n	801055c <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80105b4:	2300      	movs	r3, #0
 80105b6:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80105b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d002      	beq.n	80105c4 <find_volume+0x164>
 80105be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80105c0:	3b01      	subs	r3, #1
 80105c2:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80105c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80105c6:	009b      	lsls	r3, r3, #2
 80105c8:	3358      	adds	r3, #88	@ 0x58
 80105ca:	443b      	add	r3, r7
 80105cc:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80105d0:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80105d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d005      	beq.n	80105e4 <find_volume+0x184>
 80105d8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80105da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80105dc:	f7ff fed6 	bl	801038c <check_fs>
 80105e0:	4603      	mov	r3, r0
 80105e2:	e000      	b.n	80105e6 <find_volume+0x186>
 80105e4:	2302      	movs	r3, #2
 80105e6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80105ea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d005      	beq.n	80105fe <find_volume+0x19e>
 80105f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80105f4:	3301      	adds	r3, #1
 80105f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80105f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80105fa:	2b03      	cmp	r3, #3
 80105fc:	d9e2      	bls.n	80105c4 <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80105fe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010602:	2b03      	cmp	r3, #3
 8010604:	d101      	bne.n	801060a <find_volume+0x1aa>
 8010606:	2301      	movs	r3, #1
 8010608:	e1ee      	b.n	80109e8 <find_volume+0x588>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 801060a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801060e:	2b00      	cmp	r3, #0
 8010610:	d001      	beq.n	8010616 <find_volume+0x1b6>
 8010612:	230d      	movs	r3, #13
 8010614:	e1e8      	b.n	80109e8 <find_volume+0x588>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010618:	7b1b      	ldrb	r3, [r3, #12]
 801061a:	021b      	lsls	r3, r3, #8
 801061c:	b21a      	sxth	r2, r3
 801061e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010620:	7adb      	ldrb	r3, [r3, #11]
 8010622:	b21b      	sxth	r3, r3
 8010624:	4313      	orrs	r3, r2
 8010626:	b21b      	sxth	r3, r3
 8010628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801062c:	d001      	beq.n	8010632 <find_volume+0x1d2>
		return FR_NO_FILESYSTEM;
 801062e:	230d      	movs	r3, #13
 8010630:	e1da      	b.n	80109e8 <find_volume+0x588>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8010632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010634:	7ddb      	ldrb	r3, [r3, #23]
 8010636:	021b      	lsls	r3, r3, #8
 8010638:	b21a      	sxth	r2, r3
 801063a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801063c:	7d9b      	ldrb	r3, [r3, #22]
 801063e:	b21b      	sxth	r3, r3
 8010640:	4313      	orrs	r3, r2
 8010642:	b21b      	sxth	r3, r3
 8010644:	b29b      	uxth	r3, r3
 8010646:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8010648:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801064a:	2b00      	cmp	r3, #0
 801064c:	d112      	bne.n	8010674 <find_volume+0x214>
 801064e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010650:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8010654:	061a      	lsls	r2, r3, #24
 8010656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010658:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 801065c:	041b      	lsls	r3, r3, #16
 801065e:	431a      	orrs	r2, r3
 8010660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010662:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8010666:	021b      	lsls	r3, r3, #8
 8010668:	4313      	orrs	r3, r2
 801066a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801066c:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8010670:	4313      	orrs	r3, r2
 8010672:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8010674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010676:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010678:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 801067c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801067e:	7c1a      	ldrb	r2, [r3, #16]
 8010680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010682:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8010686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010688:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 801068c:	2b01      	cmp	r3, #1
 801068e:	d006      	beq.n	801069e <find_volume+0x23e>
 8010690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010692:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8010696:	2b02      	cmp	r3, #2
 8010698:	d001      	beq.n	801069e <find_volume+0x23e>
		return FR_NO_FILESYSTEM;
 801069a:	230d      	movs	r3, #13
 801069c:	e1a4      	b.n	80109e8 <find_volume+0x588>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 801069e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106a0:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 80106a4:	461a      	mov	r2, r3
 80106a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106a8:	fb02 f303 	mul.w	r3, r2, r3
 80106ac:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80106ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106b0:	7b5a      	ldrb	r2, [r3, #13]
 80106b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106b4:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80106b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106ba:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d00a      	beq.n	80106d8 <find_volume+0x278>
 80106c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106c4:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80106c8:	461a      	mov	r2, r3
 80106ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106cc:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80106d0:	3b01      	subs	r3, #1
 80106d2:	4013      	ands	r3, r2
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d001      	beq.n	80106dc <find_volume+0x27c>
		return FR_NO_FILESYSTEM;
 80106d8:	230d      	movs	r3, #13
 80106da:	e185      	b.n	80109e8 <find_volume+0x588>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80106dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106de:	7c9b      	ldrb	r3, [r3, #18]
 80106e0:	021b      	lsls	r3, r3, #8
 80106e2:	b21a      	sxth	r2, r3
 80106e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106e6:	7c5b      	ldrb	r3, [r3, #17]
 80106e8:	b21b      	sxth	r3, r3
 80106ea:	4313      	orrs	r3, r2
 80106ec:	b21b      	sxth	r3, r3
 80106ee:	b29a      	uxth	r2, r3
 80106f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106f2:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80106f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106f8:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 80106fc:	f003 030f 	and.w	r3, r3, #15
 8010700:	b29b      	uxth	r3, r3
 8010702:	2b00      	cmp	r3, #0
 8010704:	d004      	beq.n	8010710 <find_volume+0x2b0>
		return FR_NO_FILESYSTEM;
 8010706:	230d      	movs	r3, #13
 8010708:	e16e      	b.n	80109e8 <find_volume+0x588>
 801070a:	bf00      	nop
 801070c:	20001318 	.word	0x20001318

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8010710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010712:	7d1b      	ldrb	r3, [r3, #20]
 8010714:	021b      	lsls	r3, r3, #8
 8010716:	b21a      	sxth	r2, r3
 8010718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801071a:	7cdb      	ldrb	r3, [r3, #19]
 801071c:	b21b      	sxth	r3, r3
 801071e:	4313      	orrs	r3, r2
 8010720:	b21b      	sxth	r3, r3
 8010722:	b29b      	uxth	r3, r3
 8010724:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8010726:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010728:	2b00      	cmp	r3, #0
 801072a:	d112      	bne.n	8010752 <find_volume+0x2f2>
 801072c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801072e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8010732:	061a      	lsls	r2, r3, #24
 8010734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010736:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801073a:	041b      	lsls	r3, r3, #16
 801073c:	431a      	orrs	r2, r3
 801073e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010740:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8010744:	021b      	lsls	r3, r3, #8
 8010746:	4313      	orrs	r3, r2
 8010748:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801074a:	f892 2020 	ldrb.w	r2, [r2, #32]
 801074e:	4313      	orrs	r3, r2
 8010750:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8010752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010754:	7bdb      	ldrb	r3, [r3, #15]
 8010756:	021b      	lsls	r3, r3, #8
 8010758:	b21a      	sxth	r2, r3
 801075a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801075c:	7b9b      	ldrb	r3, [r3, #14]
 801075e:	b21b      	sxth	r3, r3
 8010760:	4313      	orrs	r3, r2
 8010762:	b21b      	sxth	r3, r3
 8010764:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8010766:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010768:	2b00      	cmp	r3, #0
 801076a:	d101      	bne.n	8010770 <find_volume+0x310>
 801076c:	230d      	movs	r3, #13
 801076e:	e13b      	b.n	80109e8 <find_volume+0x588>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8010770:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010774:	4413      	add	r3, r2
 8010776:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010778:	f8b2 2208 	ldrh.w	r2, [r2, #520]	@ 0x208
 801077c:	0912      	lsrs	r2, r2, #4
 801077e:	b292      	uxth	r2, r2
 8010780:	4413      	add	r3, r2
 8010782:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010784:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010788:	429a      	cmp	r2, r3
 801078a:	d201      	bcs.n	8010790 <find_volume+0x330>
 801078c:	230d      	movs	r3, #13
 801078e:	e12b      	b.n	80109e8 <find_volume+0x588>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8010790:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010794:	1ad3      	subs	r3, r2, r3
 8010796:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010798:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 801079c:	fbb3 f3f2 	udiv	r3, r3, r2
 80107a0:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80107a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d101      	bne.n	80107ac <find_volume+0x34c>
 80107a8:	230d      	movs	r3, #13
 80107aa:	e11d      	b.n	80109e8 <find_volume+0x588>
	fmt = FS_FAT12;
 80107ac:	2301      	movs	r3, #1
 80107ae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80107b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107b4:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80107b8:	4293      	cmp	r3, r2
 80107ba:	d902      	bls.n	80107c2 <find_volume+0x362>
 80107bc:	2302      	movs	r3, #2
 80107be:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80107c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107c4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80107c8:	4293      	cmp	r3, r2
 80107ca:	d902      	bls.n	80107d2 <find_volume+0x372>
 80107cc:	2303      	movs	r3, #3
 80107ce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80107d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107d4:	1c9a      	adds	r2, r3, #2
 80107d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107d8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
	fs->volbase = bsect;								/* Volume start sector */
 80107dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80107e0:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80107e4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80107e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80107e8:	441a      	add	r2, r3
 80107ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107ec:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 80107f0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80107f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107f4:	441a      	add	r2, r3
 80107f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107f8:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
	if (fmt == FS_FAT32) {
 80107fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010800:	2b03      	cmp	r3, #3
 8010802:	d121      	bne.n	8010848 <find_volume+0x3e8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8010804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010806:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 801080a:	2b00      	cmp	r3, #0
 801080c:	d001      	beq.n	8010812 <find_volume+0x3b2>
 801080e:	230d      	movs	r3, #13
 8010810:	e0ea      	b.n	80109e8 <find_volume+0x588>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8010812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010814:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010818:	061a      	lsls	r2, r3, #24
 801081a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801081c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8010820:	041b      	lsls	r3, r3, #16
 8010822:	431a      	orrs	r2, r3
 8010824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010826:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801082a:	021b      	lsls	r3, r3, #8
 801082c:	4313      	orrs	r3, r2
 801082e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010830:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8010834:	431a      	orrs	r2, r3
 8010836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010838:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 801083c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801083e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010842:	009b      	lsls	r3, r3, #2
 8010844:	647b      	str	r3, [r7, #68]	@ 0x44
 8010846:	e025      	b.n	8010894 <find_volume+0x434>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8010848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801084a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 801084e:	2b00      	cmp	r3, #0
 8010850:	d101      	bne.n	8010856 <find_volume+0x3f6>
 8010852:	230d      	movs	r3, #13
 8010854:	e0c8      	b.n	80109e8 <find_volume+0x588>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8010856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010858:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 801085c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801085e:	441a      	add	r2, r3
 8010860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010862:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010866:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801086a:	2b02      	cmp	r3, #2
 801086c:	d104      	bne.n	8010878 <find_volume+0x418>
 801086e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010870:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010874:	005b      	lsls	r3, r3, #1
 8010876:	e00c      	b.n	8010892 <find_volume+0x432>
 8010878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801087a:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 801087e:	4613      	mov	r3, r2
 8010880:	005b      	lsls	r3, r3, #1
 8010882:	4413      	add	r3, r2
 8010884:	085a      	lsrs	r2, r3, #1
 8010886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010888:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 801088c:	f003 0301 	and.w	r3, r3, #1
 8010890:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8010892:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8010894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010896:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 801089a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801089c:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80108a0:	0a5b      	lsrs	r3, r3, #9
 80108a2:	429a      	cmp	r2, r3
 80108a4:	d201      	bcs.n	80108aa <find_volume+0x44a>
		return FR_NO_FILESYSTEM;
 80108a6:	230d      	movs	r3, #13
 80108a8:	e09e      	b.n	80109e8 <find_volume+0x588>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80108aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108ac:	f04f 32ff 	mov.w	r2, #4294967295
 80108b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80108b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80108ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108bc:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80108c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108c2:	2280      	movs	r2, #128	@ 0x80
 80108c4:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80108c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80108cc:	2b03      	cmp	r3, #3
 80108ce:	d177      	bne.n	80109c0 <find_volume+0x560>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80108d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108d2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80108d6:	021b      	lsls	r3, r3, #8
 80108d8:	b21a      	sxth	r2, r3
 80108da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80108e0:	b21b      	sxth	r3, r3
 80108e2:	4313      	orrs	r3, r2
 80108e4:	b21b      	sxth	r3, r3
 80108e6:	2b01      	cmp	r3, #1
 80108e8:	d16a      	bne.n	80109c0 <find_volume+0x560>
		&& move_window(fs, bsect + 1) == FR_OK)
 80108ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80108ec:	3301      	adds	r3, #1
 80108ee:	4619      	mov	r1, r3
 80108f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80108f2:	f7fe f96c 	bl	800ebce <move_window>
 80108f6:	4603      	mov	r3, r0
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d161      	bne.n	80109c0 <find_volume+0x560>
	{
		fs->fsi_flag = 0;
 80108fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108fe:	2200      	movs	r2, #0
 8010900:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010906:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 801090a:	021b      	lsls	r3, r3, #8
 801090c:	b21a      	sxth	r2, r3
 801090e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010910:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8010914:	b21b      	sxth	r3, r3
 8010916:	4313      	orrs	r3, r2
 8010918:	b21b      	sxth	r3, r3
 801091a:	4a35      	ldr	r2, [pc, #212]	@ (80109f0 <find_volume+0x590>)
 801091c:	4293      	cmp	r3, r2
 801091e:	d14f      	bne.n	80109c0 <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8010920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010922:	78db      	ldrb	r3, [r3, #3]
 8010924:	061a      	lsls	r2, r3, #24
 8010926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010928:	789b      	ldrb	r3, [r3, #2]
 801092a:	041b      	lsls	r3, r3, #16
 801092c:	431a      	orrs	r2, r3
 801092e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010930:	785b      	ldrb	r3, [r3, #1]
 8010932:	021b      	lsls	r3, r3, #8
 8010934:	4313      	orrs	r3, r2
 8010936:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010938:	7812      	ldrb	r2, [r2, #0]
 801093a:	4313      	orrs	r3, r2
 801093c:	4a2d      	ldr	r2, [pc, #180]	@ (80109f4 <find_volume+0x594>)
 801093e:	4293      	cmp	r3, r2
 8010940:	d13e      	bne.n	80109c0 <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8010942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010944:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 8010948:	061a      	lsls	r2, r3, #24
 801094a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801094c:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 8010950:	041b      	lsls	r3, r3, #16
 8010952:	431a      	orrs	r2, r3
 8010954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010956:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 801095a:	021b      	lsls	r3, r3, #8
 801095c:	4313      	orrs	r3, r2
 801095e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010960:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8010964:	4313      	orrs	r3, r2
 8010966:	4a24      	ldr	r2, [pc, #144]	@ (80109f8 <find_volume+0x598>)
 8010968:	4293      	cmp	r3, r2
 801096a:	d129      	bne.n	80109c0 <find_volume+0x560>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 801096c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801096e:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 8010972:	061a      	lsls	r2, r3, #24
 8010974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010976:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 801097a:	041b      	lsls	r3, r3, #16
 801097c:	431a      	orrs	r2, r3
 801097e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010980:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8010984:	021b      	lsls	r3, r3, #8
 8010986:	4313      	orrs	r3, r2
 8010988:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801098a:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 801098e:	431a      	orrs	r2, r3
 8010990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010992:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8010996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010998:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 801099c:	061a      	lsls	r2, r3, #24
 801099e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109a0:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 80109a4:	041b      	lsls	r3, r3, #16
 80109a6:	431a      	orrs	r2, r3
 80109a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109aa:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 80109ae:	021b      	lsls	r3, r3, #8
 80109b0:	4313      	orrs	r3, r2
 80109b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80109b4:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 80109b8:	431a      	orrs	r2, r3
 80109ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109bc:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80109c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109c2:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80109c6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80109ca:	4b0c      	ldr	r3, [pc, #48]	@ (80109fc <find_volume+0x59c>)
 80109cc:	881b      	ldrh	r3, [r3, #0]
 80109ce:	3301      	adds	r3, #1
 80109d0:	b29a      	uxth	r2, r3
 80109d2:	4b0a      	ldr	r3, [pc, #40]	@ (80109fc <find_volume+0x59c>)
 80109d4:	801a      	strh	r2, [r3, #0]
 80109d6:	4b09      	ldr	r3, [pc, #36]	@ (80109fc <find_volume+0x59c>)
 80109d8:	881a      	ldrh	r2, [r3, #0]
 80109da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109dc:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80109e0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80109e2:	f7fe f881 	bl	800eae8 <clear_lock>
#endif

	return FR_OK;
 80109e6:	2300      	movs	r3, #0
}
 80109e8:	4618      	mov	r0, r3
 80109ea:	3758      	adds	r7, #88	@ 0x58
 80109ec:	46bd      	mov	sp, r7
 80109ee:	bd80      	pop	{r7, pc}
 80109f0:	ffffaa55 	.word	0xffffaa55
 80109f4:	41615252 	.word	0x41615252
 80109f8:	61417272 	.word	0x61417272
 80109fc:	2000131c 	.word	0x2000131c

08010a00 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b084      	sub	sp, #16
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d022      	beq.n	8010a58 <validate+0x58>
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d01d      	beq.n	8010a58 <validate+0x58>
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010a22:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d016      	beq.n	8010a58 <validate+0x58>
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010a30:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	d10c      	bne.n	8010a58 <validate+0x58>
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010a44:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7fd fdc3 	bl	800e5d4 <disk_status>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	f003 0301 	and.w	r3, r3, #1
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d001      	beq.n	8010a5c <validate+0x5c>
		return FR_INVALID_OBJECT;
 8010a58:	2309      	movs	r3, #9
 8010a5a:	e00b      	b.n	8010a74 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010a62:	4618      	mov	r0, r3
 8010a64:	f7fd fecc 	bl	800e800 <lock_fs>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d101      	bne.n	8010a72 <validate+0x72>
 8010a6e:	230f      	movs	r3, #15
 8010a70:	e000      	b.n	8010a74 <validate+0x74>

	return FR_OK;
 8010a72:	2300      	movs	r3, #0
}
 8010a74:	4618      	mov	r0, r3
 8010a76:	3710      	adds	r7, #16
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}

08010a7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b088      	sub	sp, #32
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	60f8      	str	r0, [r7, #12]
 8010a84:	60b9      	str	r1, [r7, #8]
 8010a86:	4613      	mov	r3, r2
 8010a88:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010a8a:	68bb      	ldr	r3, [r7, #8]
 8010a8c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8010a8e:	f107 0310 	add.w	r3, r7, #16
 8010a92:	4618      	mov	r0, r3
 8010a94:	f7ff fc36 	bl	8010304 <get_ldnumber>
 8010a98:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010a9a:	69fb      	ldr	r3, [r7, #28]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	da01      	bge.n	8010aa4 <f_mount+0x28>
 8010aa0:	230b      	movs	r3, #11
 8010aa2:	e04c      	b.n	8010b3e <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010aa4:	4a28      	ldr	r2, [pc, #160]	@ (8010b48 <f_mount+0xcc>)
 8010aa6:	69fb      	ldr	r3, [r7, #28]
 8010aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010aac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010aae:	69bb      	ldr	r3, [r7, #24]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d011      	beq.n	8010ad8 <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 8010ab4:	69b8      	ldr	r0, [r7, #24]
 8010ab6:	f7fe f817 	bl	800eae8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8010aba:	69bb      	ldr	r3, [r7, #24]
 8010abc:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f001 faa1 	bl	8012008 <ff_del_syncobj>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d101      	bne.n	8010ad0 <f_mount+0x54>
 8010acc:	2302      	movs	r3, #2
 8010ace:	e036      	b.n	8010b3e <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010ad0:	69bb      	ldr	r3, [r7, #24]
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	}

	if (fs) {
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d011      	beq.n	8010b02 <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8010ae6:	69fb      	ldr	r3, [r7, #28]
 8010ae8:	b2da      	uxtb	r2, r3
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8010af0:	4619      	mov	r1, r3
 8010af2:	4610      	mov	r0, r2
 8010af4:	f001 fa68 	bl	8011fc8 <ff_cre_syncobj>
 8010af8:	4603      	mov	r3, r0
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d101      	bne.n	8010b02 <f_mount+0x86>
 8010afe:	2302      	movs	r3, #2
 8010b00:	e01d      	b.n	8010b3e <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010b02:	68fa      	ldr	r2, [r7, #12]
 8010b04:	4910      	ldr	r1, [pc, #64]	@ (8010b48 <f_mount+0xcc>)
 8010b06:	69fb      	ldr	r3, [r7, #28]
 8010b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d002      	beq.n	8010b18 <f_mount+0x9c>
 8010b12:	79fb      	ldrb	r3, [r7, #7]
 8010b14:	2b01      	cmp	r3, #1
 8010b16:	d001      	beq.n	8010b1c <f_mount+0xa0>
 8010b18:	2300      	movs	r3, #0
 8010b1a:	e010      	b.n	8010b3e <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8010b1c:	f107 0108 	add.w	r1, r7, #8
 8010b20:	f107 030c 	add.w	r3, r7, #12
 8010b24:	2200      	movs	r2, #0
 8010b26:	4618      	mov	r0, r3
 8010b28:	f7ff fc9a 	bl	8010460 <find_volume>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	7dfa      	ldrb	r2, [r7, #23]
 8010b34:	4611      	mov	r1, r2
 8010b36:	4618      	mov	r0, r3
 8010b38:	f7fd fe71 	bl	800e81e <unlock_fs>
 8010b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	3720      	adds	r7, #32
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}
 8010b46:	bf00      	nop
 8010b48:	20001318 	.word	0x20001318

08010b4c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	f5ad 6d8b 	sub.w	sp, sp, #1112	@ 0x458
 8010b52:	af00      	add	r7, sp, #0
 8010b54:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010b58:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010b5c:	6018      	str	r0, [r3, #0]
 8010b5e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010b62:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8010b66:	6019      	str	r1, [r3, #0]
 8010b68:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010b6c:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8010b70:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8010b72:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010b76:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d101      	bne.n	8010b84 <f_open+0x38>
 8010b80:	2309      	movs	r3, #9
 8010b82:	e267      	b.n	8011054 <f_open+0x508>
	fp->fs = 0;			/* Clear file object */
 8010b84:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010b88:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	2200      	movs	r2, #0
 8010b90:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8010b94:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010b98:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8010b9c:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8010ba0:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 8010ba4:	7812      	ldrb	r2, [r2, #0]
 8010ba6:	f002 021f 	and.w	r2, r2, #31
 8010baa:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8010bac:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010bb0:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8010bb4:	781b      	ldrb	r3, [r3, #0]
 8010bb6:	f023 0301 	bic.w	r3, r3, #1
 8010bba:	b2da      	uxtb	r2, r3
 8010bbc:	f107 0108 	add.w	r1, r7, #8
 8010bc0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8010bc4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f7ff fc49 	bl	8010460 <find_volume>
 8010bce:	4603      	mov	r3, r0
 8010bd0:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8010bd4:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	f040 822d 	bne.w	8011038 <f_open+0x4ec>
		INIT_BUF(dj);
 8010bde:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010be2:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8010be6:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 8010bea:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
 8010bee:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010bf2:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8010bf6:	f107 0214 	add.w	r2, r7, #20
 8010bfa:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
		res = follow_path(&dj, path);	/* Follow the file path */
 8010bfe:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010c02:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8010c06:	681a      	ldr	r2, [r3, #0]
 8010c08:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8010c0c:	4611      	mov	r1, r2
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f7ff fb0a 	bl	8010228 <follow_path>
 8010c14:	4603      	mov	r3, r0
 8010c16:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
		dir = dj.dir;
 8010c1a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010c1e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8010c22:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010c26:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010c2a:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d11b      	bne.n	8010c6a <f_open+0x11e>
			if (!dir)	/* Default directory itself */
 8010c32:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d103      	bne.n	8010c42 <f_open+0xf6>
				res = FR_INVALID_NAME;
 8010c3a:	2306      	movs	r3, #6
 8010c3c:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 8010c40:	e013      	b.n	8010c6a <f_open+0x11e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010c42:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010c46:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8010c4a:	781b      	ldrb	r3, [r3, #0]
 8010c4c:	2b01      	cmp	r3, #1
 8010c4e:	bf8c      	ite	hi
 8010c50:	2301      	movhi	r3, #1
 8010c52:	2300      	movls	r3, #0
 8010c54:	b2db      	uxtb	r3, r3
 8010c56:	461a      	mov	r2, r3
 8010c58:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8010c5c:	4611      	mov	r1, r2
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f7fd fdfc 	bl	800e85c <chk_lock>
 8010c64:	4603      	mov	r3, r0
 8010c66:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010c6a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010c6e:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8010c72:	781b      	ldrb	r3, [r3, #0]
 8010c74:	f003 031c 	and.w	r3, r3, #28
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	f000 80e6 	beq.w	8010e4a <f_open+0x2fe>
			if (res != FR_OK) {					/* No file, create new */
 8010c7e:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d027      	beq.n	8010cd6 <f_open+0x18a>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8010c86:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 8010c8a:	2b04      	cmp	r3, #4
 8010c8c:	d10e      	bne.n	8010cac <f_open+0x160>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010c8e:	f7fd fe51 	bl	800e934 <enq_lock>
 8010c92:	4603      	mov	r3, r0
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d006      	beq.n	8010ca6 <f_open+0x15a>
 8010c98:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f7fe fffd 	bl	800fc9c <dir_register>
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	e000      	b.n	8010ca8 <f_open+0x15c>
 8010ca6:	2312      	movs	r3, #18
 8010ca8:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010cac:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010cb0:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8010cb4:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8010cb8:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 8010cbc:	7812      	ldrb	r2, [r2, #0]
 8010cbe:	f042 0208 	orr.w	r2, r2, #8
 8010cc2:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8010cc4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010cc8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8010ccc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010cd0:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
 8010cd4:	e017      	b.n	8010d06 <f_open+0x1ba>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010cd6:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8010cda:	330b      	adds	r3, #11
 8010cdc:	781b      	ldrb	r3, [r3, #0]
 8010cde:	f003 0311 	and.w	r3, r3, #17
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d003      	beq.n	8010cee <f_open+0x1a2>
					res = FR_DENIED;
 8010ce6:	2307      	movs	r3, #7
 8010ce8:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 8010cec:	e00b      	b.n	8010d06 <f_open+0x1ba>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8010cee:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010cf2:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8010cf6:	781b      	ldrb	r3, [r3, #0]
 8010cf8:	f003 0304 	and.w	r3, r3, #4
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d002      	beq.n	8010d06 <f_open+0x1ba>
						res = FR_EXIST;
 8010d00:	2308      	movs	r3, #8
 8010d02:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010d06:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	f040 80c1 	bne.w	8010e92 <f_open+0x346>
 8010d10:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010d14:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8010d18:	781b      	ldrb	r3, [r3, #0]
 8010d1a:	f003 0308 	and.w	r3, r3, #8
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	f000 80b7 	beq.w	8010e92 <f_open+0x346>
				dw = GET_FATTIME();				/* Created time */
 8010d24:	f7fd fbb4 	bl	800e490 <get_fattime>
 8010d28:	f8c7 044c 	str.w	r0, [r7, #1100]	@ 0x44c
				ST_DWORD(dir + DIR_CrtTime, dw);
 8010d2c:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8010d30:	330e      	adds	r3, #14
 8010d32:	f8d7 244c 	ldr.w	r2, [r7, #1100]	@ 0x44c
 8010d36:	b2d2      	uxtb	r2, r2
 8010d38:	701a      	strb	r2, [r3, #0]
 8010d3a:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8010d3e:	b29b      	uxth	r3, r3
 8010d40:	0a1b      	lsrs	r3, r3, #8
 8010d42:	b29a      	uxth	r2, r3
 8010d44:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8010d48:	330f      	adds	r3, #15
 8010d4a:	b2d2      	uxtb	r2, r2
 8010d4c:	701a      	strb	r2, [r3, #0]
 8010d4e:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8010d52:	0c1a      	lsrs	r2, r3, #16
 8010d54:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8010d58:	3310      	adds	r3, #16
 8010d5a:	b2d2      	uxtb	r2, r2
 8010d5c:	701a      	strb	r2, [r3, #0]
 8010d5e:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8010d62:	0e1a      	lsrs	r2, r3, #24
 8010d64:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8010d68:	3311      	adds	r3, #17
 8010d6a:	b2d2      	uxtb	r2, r2
 8010d6c:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8010d6e:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8010d72:	330b      	adds	r3, #11
 8010d74:	2200      	movs	r2, #0
 8010d76:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8010d78:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8010d7c:	331c      	adds	r3, #28
 8010d7e:	2200      	movs	r2, #0
 8010d80:	701a      	strb	r2, [r3, #0]
 8010d82:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8010d86:	331d      	adds	r3, #29
 8010d88:	2200      	movs	r2, #0
 8010d8a:	701a      	strb	r2, [r3, #0]
 8010d8c:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8010d90:	331e      	adds	r3, #30
 8010d92:	2200      	movs	r2, #0
 8010d94:	701a      	strb	r2, [r3, #0]
 8010d96:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8010d9a:	331f      	adds	r3, #31
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8010da0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010da4:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8010da8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010dac:	f8d7 1450 	ldr.w	r1, [r7, #1104]	@ 0x450
 8010db0:	4618      	mov	r0, r3
 8010db2:	f7fe fccf 	bl	800f754 <ld_clust>
 8010db6:	f8c7 0448 	str.w	r0, [r7, #1096]	@ 0x448
				st_clust(dir, 0);				/* cluster = 0 */
 8010dba:	2100      	movs	r1, #0
 8010dbc:	f8d7 0450 	ldr.w	r0, [r7, #1104]	@ 0x450
 8010dc0:	f7fe fcf5 	bl	800f7ae <st_clust>
				dj.fs->wflag = 1;
 8010dc4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010dc8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8010dcc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010dd0:	2201      	movs	r2, #1
 8010dd2:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8010dd6:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d059      	beq.n	8010e92 <f_open+0x346>
					dw = dj.fs->winsect;
 8010dde:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010de2:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8010de6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010dea:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 8010dee:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
					res = remove_chain(dj.fs, cl);
 8010df2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010df6:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8010dfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010dfe:	f8d7 1448 	ldr.w	r1, [r7, #1096]	@ 0x448
 8010e02:	4618      	mov	r0, r3
 8010e04:	f7fe f9a6 	bl	800f154 <remove_chain>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
					if (res == FR_OK) {
 8010e0e:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d13d      	bne.n	8010e92 <f_open+0x346>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8010e16:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010e1a:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8010e1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010e22:	f8d7 2448 	ldr.w	r2, [r7, #1096]	@ 0x448
 8010e26:	3a01      	subs	r2, #1
 8010e28:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
						res = move_window(dj.fs, dw);
 8010e2c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010e30:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8010e34:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010e38:	f8d7 144c 	ldr.w	r1, [r7, #1100]	@ 0x44c
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f7fd fec6 	bl	800ebce <move_window>
 8010e42:	4603      	mov	r3, r0
 8010e44:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 8010e48:	e023      	b.n	8010e92 <f_open+0x346>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8010e4a:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d11f      	bne.n	8010e92 <f_open+0x346>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8010e52:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8010e56:	330b      	adds	r3, #11
 8010e58:	781b      	ldrb	r3, [r3, #0]
 8010e5a:	f003 0310 	and.w	r3, r3, #16
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d003      	beq.n	8010e6a <f_open+0x31e>
					res = FR_NO_FILE;
 8010e62:	2304      	movs	r3, #4
 8010e64:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 8010e68:	e013      	b.n	8010e92 <f_open+0x346>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8010e6a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010e6e:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8010e72:	781b      	ldrb	r3, [r3, #0]
 8010e74:	f003 0302 	and.w	r3, r3, #2
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d00a      	beq.n	8010e92 <f_open+0x346>
 8010e7c:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8010e80:	330b      	adds	r3, #11
 8010e82:	781b      	ldrb	r3, [r3, #0]
 8010e84:	f003 0301 	and.w	r3, r3, #1
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d002      	beq.n	8010e92 <f_open+0x346>
						res = FR_DENIED;
 8010e8c:	2307      	movs	r3, #7
 8010e8e:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
				}
			}
		}
		if (res == FR_OK) {
 8010e92:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d151      	bne.n	8010f3e <f_open+0x3f2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010e9a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010e9e:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8010ea2:	781b      	ldrb	r3, [r3, #0]
 8010ea4:	f003 0308 	and.w	r3, r3, #8
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d00b      	beq.n	8010ec4 <f_open+0x378>
				mode |= FA__WRITTEN;
 8010eac:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010eb0:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8010eb4:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8010eb8:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 8010ebc:	7812      	ldrb	r2, [r2, #0]
 8010ebe:	f042 0220 	orr.w	r2, r2, #32
 8010ec2:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8010ec4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010ec8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8010ecc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010ed0:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 8010ed4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010ed8:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
			fp->dir_ptr = dir;
 8010ee2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010ee6:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 8010ef0:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010ef4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010ef8:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8010efc:	781b      	ldrb	r3, [r3, #0]
 8010efe:	2b01      	cmp	r3, #1
 8010f00:	bf8c      	ite	hi
 8010f02:	2301      	movhi	r3, #1
 8010f04:	2300      	movls	r3, #0
 8010f06:	b2db      	uxtb	r3, r3
 8010f08:	461a      	mov	r2, r3
 8010f0a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8010f0e:	4611      	mov	r1, r2
 8010f10:	4618      	mov	r0, r3
 8010f12:	f7fd fd33 	bl	800e97c <inc_lock>
 8010f16:	4602      	mov	r2, r0
 8010f18:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010f1c:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8010f26:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010f2a:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d102      	bne.n	8010f3e <f_open+0x3f2>
 8010f38:	2302      	movs	r3, #2
 8010f3a:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8010f3e:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d178      	bne.n	8011038 <f_open+0x4ec>
			fp->flag = mode;					/* File access mode */
 8010f46:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010f4a:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8010f54:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 8010f58:	7812      	ldrb	r2, [r2, #0]
 8010f5a:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			fp->err = 0;						/* Clear error flag */
 8010f5e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010f62:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	2200      	movs	r2, #0
 8010f6a:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8010f6e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010f72:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8010f76:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010f7a:	f8d7 1450 	ldr.w	r1, [r7, #1104]	@ 0x450
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f7fe fbe8 	bl	800f754 <ld_clust>
 8010f84:	4602      	mov	r2, r0
 8010f86:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010f8a:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8010f94:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8010f98:	331f      	adds	r3, #31
 8010f9a:	781b      	ldrb	r3, [r3, #0]
 8010f9c:	061a      	lsls	r2, r3, #24
 8010f9e:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8010fa2:	331e      	adds	r3, #30
 8010fa4:	781b      	ldrb	r3, [r3, #0]
 8010fa6:	041b      	lsls	r3, r3, #16
 8010fa8:	431a      	orrs	r2, r3
 8010faa:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8010fae:	331d      	adds	r3, #29
 8010fb0:	781b      	ldrb	r3, [r3, #0]
 8010fb2:	021b      	lsls	r3, r3, #8
 8010fb4:	4313      	orrs	r3, r2
 8010fb6:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 8010fba:	321c      	adds	r2, #28
 8010fbc:	7812      	ldrb	r2, [r2, #0]
 8010fbe:	431a      	orrs	r2, r3
 8010fc0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010fc4:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
			fp->fptr = 0;						/* File pointer */
 8010fce:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010fd2:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	2200      	movs	r2, #0
 8010fda:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			fp->dsect = 0;
 8010fde:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010fe2:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	2200      	movs	r2, #0
 8010fea:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8010fee:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010ff2:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	2200      	movs	r2, #0
 8010ffa:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8010ffe:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011002:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8011006:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 801100a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801100e:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
			fp->id = fp->fs->id;
 8011018:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801101c:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011026:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 801102a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801102e:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8011038:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801103c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8011040:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011044:	f897 2457 	ldrb.w	r2, [r7, #1111]	@ 0x457
 8011048:	4611      	mov	r1, r2
 801104a:	4618      	mov	r0, r3
 801104c:	f7fd fbe7 	bl	800e81e <unlock_fs>
 8011050:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
}
 8011054:	4618      	mov	r0, r3
 8011056:	f507 678b 	add.w	r7, r7, #1112	@ 0x458
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}

0801105e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801105e:	b580      	push	{r7, lr}
 8011060:	b08a      	sub	sp, #40	@ 0x28
 8011062:	af00      	add	r7, sp, #0
 8011064:	60f8      	str	r0, [r7, #12]
 8011066:	60b9      	str	r1, [r7, #8]
 8011068:	607a      	str	r2, [r7, #4]
 801106a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 801106c:	68bb      	ldr	r3, [r7, #8]
 801106e:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	2200      	movs	r2, #0
 8011074:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8011076:	68f8      	ldr	r0, [r7, #12]
 8011078:	f7ff fcc2 	bl	8010a00 <validate>
 801107c:	4603      	mov	r3, r0
 801107e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8011080:	7dfb      	ldrb	r3, [r7, #23]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d009      	beq.n	801109a <f_write+0x3c>
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801108c:	7dfa      	ldrb	r2, [r7, #23]
 801108e:	4611      	mov	r1, r2
 8011090:	4618      	mov	r0, r3
 8011092:	f7fd fbc4 	bl	800e81e <unlock_fs>
 8011096:	7dfb      	ldrb	r3, [r7, #23]
 8011098:	e1d4      	b.n	8011444 <f_write+0x3e6>
	if (fp->err)							/* Check error */
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d00d      	beq.n	80110c0 <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 80110b0:	4619      	mov	r1, r3
 80110b2:	4610      	mov	r0, r2
 80110b4:	f7fd fbb3 	bl	800e81e <unlock_fs>
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 80110be:	e1c1      	b.n	8011444 <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80110c6:	f003 0302 	and.w	r3, r3, #2
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d108      	bne.n	80110e0 <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80110d4:	2107      	movs	r1, #7
 80110d6:	4618      	mov	r0, r3
 80110d8:	f7fd fba1 	bl	800e81e <unlock_fs>
 80110dc:	2307      	movs	r3, #7
 80110de:	e1b1      	b.n	8011444 <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	441a      	add	r2, r3
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80110f0:	429a      	cmp	r2, r3
 80110f2:	f080 8182 	bcs.w	80113fa <f_write+0x39c>
 80110f6:	2300      	movs	r3, #0
 80110f8:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80110fa:	e17e      	b.n	80113fa <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8011102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011106:	2b00      	cmp	r3, #0
 8011108:	f040 813e 	bne.w	8011388 <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8011112:	0a5b      	lsrs	r3, r3, #9
 8011114:	b2da      	uxtb	r2, r3
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801111c:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8011120:	3b01      	subs	r3, #1
 8011122:	b2db      	uxtb	r3, r3
 8011124:	4013      	ands	r3, r2
 8011126:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8011128:	7dbb      	ldrb	r3, [r7, #22]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d15f      	bne.n	80111ee <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8011134:	2b00      	cmp	r3, #0
 8011136:	d10f      	bne.n	8011158 <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801113e:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8011140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011142:	2b00      	cmp	r3, #0
 8011144:	d121      	bne.n	801118a <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801114c:	2100      	movs	r1, #0
 801114e:	4618      	mov	r0, r3
 8011150:	f7fe f85a 	bl	800f208 <create_chain>
 8011154:	6278      	str	r0, [r7, #36]	@ 0x24
 8011156:	e018      	b.n	801118a <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 801115e:	2b00      	cmp	r3, #0
 8011160:	d008      	beq.n	8011174 <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8011168:	4619      	mov	r1, r3
 801116a:	68f8      	ldr	r0, [r7, #12]
 801116c:	f7fe f8e9 	bl	800f342 <clmt_clust>
 8011170:	6278      	str	r0, [r7, #36]	@ 0x24
 8011172:	e00a      	b.n	801118a <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011180:	4619      	mov	r1, r3
 8011182:	4610      	mov	r0, r2
 8011184:	f7fe f840 	bl	800f208 <create_chain>
 8011188:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801118a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801118c:	2b00      	cmp	r3, #0
 801118e:	f000 8139 	beq.w	8011404 <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8011192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011194:	2b01      	cmp	r3, #1
 8011196:	d10c      	bne.n	80111b2 <f_write+0x154>
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	2202      	movs	r2, #2
 801119c:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80111a6:	2102      	movs	r1, #2
 80111a8:	4618      	mov	r0, r3
 80111aa:	f7fd fb38 	bl	800e81e <unlock_fs>
 80111ae:	2302      	movs	r3, #2
 80111b0:	e148      	b.n	8011444 <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80111b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111b8:	d10c      	bne.n	80111d4 <f_write+0x176>
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	2201      	movs	r2, #1
 80111be:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80111c8:	2101      	movs	r1, #1
 80111ca:	4618      	mov	r0, r3
 80111cc:	f7fd fb27 	bl	800e81e <unlock_fs>
 80111d0:	2301      	movs	r3, #1
 80111d2:	e137      	b.n	8011444 <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80111d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d103      	bne.n	80111ee <f_write+0x190>
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80111ea:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80111f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d024      	beq.n	8011246 <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011202:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8011206:	68f9      	ldr	r1, [r7, #12]
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 801120e:	2301      	movs	r3, #1
 8011210:	f7fd fa40 	bl	800e694 <disk_write>
 8011214:	4603      	mov	r3, r0
 8011216:	2b00      	cmp	r3, #0
 8011218:	d00c      	beq.n	8011234 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	2201      	movs	r2, #1
 801121e:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011228:	2101      	movs	r1, #1
 801122a:	4618      	mov	r0, r3
 801122c:	f7fd faf7 	bl	800e81e <unlock_fs>
 8011230:	2301      	movs	r3, #1
 8011232:	e107      	b.n	8011444 <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 801123a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801123e:	b2da      	uxtb	r2, r3
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011252:	4619      	mov	r1, r3
 8011254:	4610      	mov	r0, r2
 8011256:	f7fd fd95 	bl	800ed84 <clust2sect>
 801125a:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 801125c:	693b      	ldr	r3, [r7, #16]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d10c      	bne.n	801127c <f_write+0x21e>
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	2202      	movs	r2, #2
 8011266:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011270:	2102      	movs	r1, #2
 8011272:	4618      	mov	r0, r3
 8011274:	f7fd fad3 	bl	800e81e <unlock_fs>
 8011278:	2302      	movs	r3, #2
 801127a:	e0e3      	b.n	8011444 <f_write+0x3e6>
			sect += csect;
 801127c:	7dbb      	ldrb	r3, [r7, #22]
 801127e:	693a      	ldr	r2, [r7, #16]
 8011280:	4413      	add	r3, r2
 8011282:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	0a5b      	lsrs	r3, r3, #9
 8011288:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801128a:	69fb      	ldr	r3, [r7, #28]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d04f      	beq.n	8011330 <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8011290:	7dba      	ldrb	r2, [r7, #22]
 8011292:	69fb      	ldr	r3, [r7, #28]
 8011294:	4413      	add	r3, r2
 8011296:	68fa      	ldr	r2, [r7, #12]
 8011298:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 801129c:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 80112a0:	4293      	cmp	r3, r2
 80112a2:	d908      	bls.n	80112b6 <f_write+0x258>
					cc = fp->fs->csize - csect;
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80112aa:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80112ae:	461a      	mov	r2, r3
 80112b0:	7dbb      	ldrb	r3, [r7, #22]
 80112b2:	1ad3      	subs	r3, r2, r3
 80112b4:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80112bc:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80112c0:	69fb      	ldr	r3, [r7, #28]
 80112c2:	693a      	ldr	r2, [r7, #16]
 80112c4:	69b9      	ldr	r1, [r7, #24]
 80112c6:	f7fd f9e5 	bl	800e694 <disk_write>
 80112ca:	4603      	mov	r3, r0
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d00c      	beq.n	80112ea <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	2201      	movs	r2, #1
 80112d4:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80112de:	2101      	movs	r1, #1
 80112e0:	4618      	mov	r0, r3
 80112e2:	f7fd fa9c 	bl	800e81e <unlock_fs>
 80112e6:	2301      	movs	r3, #1
 80112e8:	e0ac      	b.n	8011444 <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80112f0:	693b      	ldr	r3, [r7, #16]
 80112f2:	1ad3      	subs	r3, r2, r3
 80112f4:	69fa      	ldr	r2, [r7, #28]
 80112f6:	429a      	cmp	r2, r3
 80112f8:	d916      	bls.n	8011328 <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80112fa:	68f8      	ldr	r0, [r7, #12]
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8011302:	693b      	ldr	r3, [r7, #16]
 8011304:	1ad3      	subs	r3, r2, r3
 8011306:	025b      	lsls	r3, r3, #9
 8011308:	69ba      	ldr	r2, [r7, #24]
 801130a:	4413      	add	r3, r2
 801130c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011310:	4619      	mov	r1, r3
 8011312:	f7fd f9fd 	bl	800e710 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 801131c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011320:	b2da      	uxtb	r2, r3
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8011328:	69fb      	ldr	r3, [r7, #28]
 801132a:	025b      	lsls	r3, r3, #9
 801132c:	623b      	str	r3, [r7, #32]
				continue;
 801132e:	e04e      	b.n	80113ce <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8011336:	693a      	ldr	r2, [r7, #16]
 8011338:	429a      	cmp	r2, r3
 801133a:	d021      	beq.n	8011380 <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8011348:	429a      	cmp	r2, r3
 801134a:	d219      	bcs.n	8011380 <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011352:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8011356:	68f9      	ldr	r1, [r7, #12]
 8011358:	2301      	movs	r3, #1
 801135a:	693a      	ldr	r2, [r7, #16]
 801135c:	f7fd f97a 	bl	800e654 <disk_read>
 8011360:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8011362:	2b00      	cmp	r3, #0
 8011364:	d00c      	beq.n	8011380 <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	2201      	movs	r2, #1
 801136a:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011374:	2101      	movs	r1, #1
 8011376:	4618      	mov	r0, r3
 8011378:	f7fd fa51 	bl	800e81e <unlock_fs>
 801137c:	2301      	movs	r3, #1
 801137e:	e061      	b.n	8011444 <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	693a      	ldr	r2, [r7, #16]
 8011384:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 801138e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011392:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8011396:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8011398:	6a3a      	ldr	r2, [r7, #32]
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	429a      	cmp	r2, r3
 801139e:	d901      	bls.n	80113a4 <f_write+0x346>
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80113aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80113ae:	68fa      	ldr	r2, [r7, #12]
 80113b0:	4413      	add	r3, r2
 80113b2:	6a3a      	ldr	r2, [r7, #32]
 80113b4:	69b9      	ldr	r1, [r7, #24]
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7fd f9aa 	bl	800e710 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80113c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80113c6:	b2da      	uxtb	r2, r3
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80113ce:	69ba      	ldr	r2, [r7, #24]
 80113d0:	6a3b      	ldr	r3, [r7, #32]
 80113d2:	4413      	add	r3, r2
 80113d4:	61bb      	str	r3, [r7, #24]
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80113dc:	6a3b      	ldr	r3, [r7, #32]
 80113de:	441a      	add	r2, r3
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	681a      	ldr	r2, [r3, #0]
 80113ea:	6a3b      	ldr	r3, [r7, #32]
 80113ec:	441a      	add	r2, r3
 80113ee:	683b      	ldr	r3, [r7, #0]
 80113f0:	601a      	str	r2, [r3, #0]
 80113f2:	687a      	ldr	r2, [r7, #4]
 80113f4:	6a3b      	ldr	r3, [r7, #32]
 80113f6:	1ad3      	subs	r3, r2, r3
 80113f8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	f47f ae7d 	bne.w	80110fc <f_write+0x9e>
 8011402:	e000      	b.n	8011406 <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011404:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8011412:	429a      	cmp	r2, r3
 8011414:	d905      	bls.n	8011422 <f_write+0x3c4>
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011428:	f043 0320 	orr.w	r3, r3, #32
 801142c:	b2da      	uxtb	r2, r3
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801143a:	2100      	movs	r1, #0
 801143c:	4618      	mov	r0, r3
 801143e:	f7fd f9ee 	bl	800e81e <unlock_fs>
 8011442:	2300      	movs	r3, #0
}
 8011444:	4618      	mov	r0, r3
 8011446:	3728      	adds	r7, #40	@ 0x28
 8011448:	46bd      	mov	sp, r7
 801144a:	bd80      	pop	{r7, pc}

0801144c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b086      	sub	sp, #24
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f7ff fad3 	bl	8010a00 <validate>
 801145a:	4603      	mov	r3, r0
 801145c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801145e:	7dfb      	ldrb	r3, [r7, #23]
 8011460:	2b00      	cmp	r3, #0
 8011462:	f040 80af 	bne.w	80115c4 <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 801146c:	f003 0320 	and.w	r3, r3, #32
 8011470:	2b00      	cmp	r3, #0
 8011472:	f000 80a7 	beq.w	80115c4 <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 801147c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011480:	2b00      	cmp	r3, #0
 8011482:	d020      	beq.n	80114c6 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801148a:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 801148e:	6879      	ldr	r1, [r7, #4]
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8011496:	2301      	movs	r3, #1
 8011498:	f7fd f8fc 	bl	800e694 <disk_write>
 801149c:	4603      	mov	r3, r0
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d008      	beq.n	80114b4 <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80114a8:	2101      	movs	r1, #1
 80114aa:	4618      	mov	r0, r3
 80114ac:	f7fd f9b7 	bl	800e81e <unlock_fs>
 80114b0:	2301      	movs	r3, #1
 80114b2:	e090      	b.n	80115d6 <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80114ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80114be:	b2da      	uxtb	r2, r3
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80114d2:	4619      	mov	r1, r3
 80114d4:	4610      	mov	r0, r2
 80114d6:	f7fd fb7a 	bl	800ebce <move_window>
 80114da:	4603      	mov	r3, r0
 80114dc:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80114de:	7dfb      	ldrb	r3, [r7, #23]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d16f      	bne.n	80115c4 <f_sync+0x178>
				dir = fp->dir_ptr;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 80114ea:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80114ec:	693b      	ldr	r3, [r7, #16]
 80114ee:	330b      	adds	r3, #11
 80114f0:	781a      	ldrb	r2, [r3, #0]
 80114f2:	693b      	ldr	r3, [r7, #16]
 80114f4:	330b      	adds	r3, #11
 80114f6:	f042 0220 	orr.w	r2, r2, #32
 80114fa:	b2d2      	uxtb	r2, r2
 80114fc:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8011504:	693b      	ldr	r3, [r7, #16]
 8011506:	331c      	adds	r3, #28
 8011508:	b2d2      	uxtb	r2, r2
 801150a:	701a      	strb	r2, [r3, #0]
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8011512:	b29b      	uxth	r3, r3
 8011514:	0a1b      	lsrs	r3, r3, #8
 8011516:	b29a      	uxth	r2, r3
 8011518:	693b      	ldr	r3, [r7, #16]
 801151a:	331d      	adds	r3, #29
 801151c:	b2d2      	uxtb	r2, r2
 801151e:	701a      	strb	r2, [r3, #0]
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8011526:	0c1a      	lsrs	r2, r3, #16
 8011528:	693b      	ldr	r3, [r7, #16]
 801152a:	331e      	adds	r3, #30
 801152c:	b2d2      	uxtb	r2, r2
 801152e:	701a      	strb	r2, [r3, #0]
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8011536:	0e1a      	lsrs	r2, r3, #24
 8011538:	693b      	ldr	r3, [r7, #16]
 801153a:	331f      	adds	r3, #31
 801153c:	b2d2      	uxtb	r2, r2
 801153e:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8011546:	4619      	mov	r1, r3
 8011548:	6938      	ldr	r0, [r7, #16]
 801154a:	f7fe f930 	bl	800f7ae <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 801154e:	f7fc ff9f 	bl	800e490 <get_fattime>
 8011552:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8011554:	693b      	ldr	r3, [r7, #16]
 8011556:	3316      	adds	r3, #22
 8011558:	68fa      	ldr	r2, [r7, #12]
 801155a:	b2d2      	uxtb	r2, r2
 801155c:	701a      	strb	r2, [r3, #0]
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	b29b      	uxth	r3, r3
 8011562:	0a1b      	lsrs	r3, r3, #8
 8011564:	b29a      	uxth	r2, r3
 8011566:	693b      	ldr	r3, [r7, #16]
 8011568:	3317      	adds	r3, #23
 801156a:	b2d2      	uxtb	r2, r2
 801156c:	701a      	strb	r2, [r3, #0]
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	0c1a      	lsrs	r2, r3, #16
 8011572:	693b      	ldr	r3, [r7, #16]
 8011574:	3318      	adds	r3, #24
 8011576:	b2d2      	uxtb	r2, r2
 8011578:	701a      	strb	r2, [r3, #0]
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	0e1a      	lsrs	r2, r3, #24
 801157e:	693b      	ldr	r3, [r7, #16]
 8011580:	3319      	adds	r3, #25
 8011582:	b2d2      	uxtb	r2, r2
 8011584:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8011586:	693b      	ldr	r3, [r7, #16]
 8011588:	3312      	adds	r3, #18
 801158a:	2200      	movs	r2, #0
 801158c:	701a      	strb	r2, [r3, #0]
 801158e:	693b      	ldr	r3, [r7, #16]
 8011590:	3313      	adds	r3, #19
 8011592:	2200      	movs	r2, #0
 8011594:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 801159c:	f023 0320 	bic.w	r3, r3, #32
 80115a0:	b2da      	uxtb	r2, r3
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				fp->fs->wflag = 1;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80115ae:	2201      	movs	r2, #1
 80115b0:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = sync_fs(fp->fs);
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80115ba:	4618      	mov	r0, r3
 80115bc:	f7fd fb35 	bl	800ec2a <sync_fs>
 80115c0:	4603      	mov	r3, r0
 80115c2:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80115ca:	7dfa      	ldrb	r2, [r7, #23]
 80115cc:	4611      	mov	r1, r2
 80115ce:	4618      	mov	r0, r3
 80115d0:	f7fd f925 	bl	800e81e <unlock_fs>
 80115d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80115d6:	4618      	mov	r0, r3
 80115d8:	3718      	adds	r7, #24
 80115da:	46bd      	mov	sp, r7
 80115dc:	bd80      	pop	{r7, pc}

080115de <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80115de:	b580      	push	{r7, lr}
 80115e0:	b090      	sub	sp, #64	@ 0x40
 80115e2:	af00      	add	r7, sp, #0
 80115e4:	6078      	str	r0, [r7, #4]
 80115e6:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80115e8:	6878      	ldr	r0, [r7, #4]
 80115ea:	f7ff fa09 	bl	8010a00 <validate>
 80115ee:	4603      	mov	r3, r0
 80115f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80115f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d00b      	beq.n	8011614 <f_lseek+0x36>
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011602:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8011606:	4611      	mov	r1, r2
 8011608:	4618      	mov	r0, r3
 801160a:	f7fd f908 	bl	800e81e <unlock_fs>
 801160e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011612:	e2af      	b.n	8011b74 <f_lseek+0x596>
	if (fp->err)						/* Check error */
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 801161a:	2b00      	cmp	r3, #0
 801161c:	d00d      	beq.n	801163a <f_lseek+0x5c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 801162a:	4619      	mov	r1, r3
 801162c:	4610      	mov	r0, r2
 801162e:	f7fd f8f6 	bl	800e81e <unlock_fs>
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8011638:	e29c      	b.n	8011b74 <f_lseek+0x596>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8011640:	2b00      	cmp	r3, #0
 8011642:	f000 8115 	beq.w	8011870 <f_lseek+0x292>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	f1b3 3fff 	cmp.w	r3, #4294967295
 801164c:	d172      	bne.n	8011734 <f_lseek+0x156>
			tbl = fp->cltbl;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8011654:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011658:	1d1a      	adds	r2, r3, #4
 801165a:	627a      	str	r2, [r7, #36]	@ 0x24
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	617b      	str	r3, [r7, #20]
 8011660:	2302      	movs	r3, #2
 8011662:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801166a:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 801166c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801166e:	2b00      	cmp	r3, #0
 8011670:	d04f      	beq.n	8011712 <f_lseek+0x134>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011674:	613b      	str	r3, [r7, #16]
 8011676:	2300      	movs	r3, #0
 8011678:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801167a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801167c:	3302      	adds	r3, #2
 801167e:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8011680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011682:	60fb      	str	r3, [r7, #12]
 8011684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011686:	3301      	adds	r3, #1
 8011688:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011690:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011692:	4618      	mov	r0, r3
 8011694:	f7fd fb97 	bl	800edc6 <get_fat>
 8011698:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 801169a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801169c:	2b01      	cmp	r3, #1
 801169e:	d80c      	bhi.n	80116ba <f_lseek+0xdc>
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2202      	movs	r2, #2
 80116a4:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80116ae:	2102      	movs	r1, #2
 80116b0:	4618      	mov	r0, r3
 80116b2:	f7fd f8b4 	bl	800e81e <unlock_fs>
 80116b6:	2302      	movs	r3, #2
 80116b8:	e25c      	b.n	8011b74 <f_lseek+0x596>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80116ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116c0:	d10c      	bne.n	80116dc <f_lseek+0xfe>
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	2201      	movs	r2, #1
 80116c6:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80116d0:	2101      	movs	r1, #1
 80116d2:	4618      	mov	r0, r3
 80116d4:	f7fd f8a3 	bl	800e81e <unlock_fs>
 80116d8:	2301      	movs	r3, #1
 80116da:	e24b      	b.n	8011b74 <f_lseek+0x596>
					} while (cl == pcl + 1);
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	3301      	adds	r3, #1
 80116e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80116e2:	429a      	cmp	r2, r3
 80116e4:	d0cc      	beq.n	8011680 <f_lseek+0xa2>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80116e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80116e8:	697b      	ldr	r3, [r7, #20]
 80116ea:	429a      	cmp	r2, r3
 80116ec:	d809      	bhi.n	8011702 <f_lseek+0x124>
						*tbl++ = ncl; *tbl++ = tcl;
 80116ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116f0:	1d1a      	adds	r2, r3, #4
 80116f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80116f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80116f6:	601a      	str	r2, [r3, #0]
 80116f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116fa:	1d1a      	adds	r2, r3, #4
 80116fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80116fe:	693a      	ldr	r2, [r7, #16]
 8011700:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011708:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 801170c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801170e:	429a      	cmp	r2, r3
 8011710:	d3af      	bcc.n	8011672 <f_lseek+0x94>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8011718:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801171a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 801171c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801171e:	697b      	ldr	r3, [r7, #20]
 8011720:	429a      	cmp	r2, r3
 8011722:	d803      	bhi.n	801172c <f_lseek+0x14e>
				*tbl = 0;		/* Terminate table */
 8011724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011726:	2200      	movs	r2, #0
 8011728:	601a      	str	r2, [r3, #0]
 801172a:	e218      	b.n	8011b5e <f_lseek+0x580>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801172c:	2311      	movs	r3, #17
 801172e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8011732:	e214      	b.n	8011b5e <f_lseek+0x580>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 801173a:	683a      	ldr	r2, [r7, #0]
 801173c:	429a      	cmp	r2, r3
 801173e:	d903      	bls.n	8011748 <f_lseek+0x16a>
				ofs = fp->fsize;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8011746:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	683a      	ldr	r2, [r7, #0]
 801174c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			if (ofs) {
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	2b00      	cmp	r3, #0
 8011754:	f000 8203 	beq.w	8011b5e <f_lseek+0x580>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	3b01      	subs	r3, #1
 801175c:	4619      	mov	r1, r3
 801175e:	6878      	ldr	r0, [r7, #4]
 8011760:	f7fd fdef 	bl	800f342 <clmt_clust>
 8011764:	4602      	mov	r2, r0
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011778:	4619      	mov	r1, r3
 801177a:	4610      	mov	r0, r2
 801177c:	f7fd fb02 	bl	800ed84 <clust2sect>
 8011780:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8011782:	69bb      	ldr	r3, [r7, #24]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d10c      	bne.n	80117a2 <f_lseek+0x1c4>
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2202      	movs	r2, #2
 801178c:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011796:	2102      	movs	r1, #2
 8011798:	4618      	mov	r0, r3
 801179a:	f7fd f840 	bl	800e81e <unlock_fs>
 801179e:	2302      	movs	r3, #2
 80117a0:	e1e8      	b.n	8011b74 <f_lseek+0x596>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80117a2:	683b      	ldr	r3, [r7, #0]
 80117a4:	3b01      	subs	r3, #1
 80117a6:	0a5b      	lsrs	r3, r3, #9
 80117a8:	687a      	ldr	r2, [r7, #4]
 80117aa:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 80117ae:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 80117b2:	3a01      	subs	r2, #1
 80117b4:	4013      	ands	r3, r2
 80117b6:	69ba      	ldr	r2, [r7, #24]
 80117b8:	4413      	add	r3, r2
 80117ba:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80117c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	f000 81c9 	beq.w	8011b5e <f_lseek+0x580>
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80117d2:	69ba      	ldr	r2, [r7, #24]
 80117d4:	429a      	cmp	r2, r3
 80117d6:	f000 81c2 	beq.w	8011b5e <f_lseek+0x580>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80117e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d024      	beq.n	8011832 <f_lseek+0x254>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80117ee:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80117f2:	6879      	ldr	r1, [r7, #4]
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80117fa:	2301      	movs	r3, #1
 80117fc:	f7fc ff4a 	bl	800e694 <disk_write>
 8011800:	4603      	mov	r3, r0
 8011802:	2b00      	cmp	r3, #0
 8011804:	d00c      	beq.n	8011820 <f_lseek+0x242>
							ABORT(fp->fs, FR_DISK_ERR);
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	2201      	movs	r2, #1
 801180a:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011814:	2101      	movs	r1, #1
 8011816:	4618      	mov	r0, r3
 8011818:	f7fd f801 	bl	800e81e <unlock_fs>
 801181c:	2301      	movs	r3, #1
 801181e:	e1a9      	b.n	8011b74 <f_lseek+0x596>
						fp->flag &= ~FA__DIRTY;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011826:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801182a:	b2da      	uxtb	r2, r3
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011838:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 801183c:	6879      	ldr	r1, [r7, #4]
 801183e:	2301      	movs	r3, #1
 8011840:	69ba      	ldr	r2, [r7, #24]
 8011842:	f7fc ff07 	bl	800e654 <disk_read>
 8011846:	4603      	mov	r3, r0
 8011848:	2b00      	cmp	r3, #0
 801184a:	d00c      	beq.n	8011866 <f_lseek+0x288>
						ABORT(fp->fs, FR_DISK_ERR);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	2201      	movs	r2, #1
 8011850:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801185a:	2101      	movs	r1, #1
 801185c:	4618      	mov	r0, r3
 801185e:	f7fc ffde 	bl	800e81e <unlock_fs>
 8011862:	2301      	movs	r3, #1
 8011864:	e186      	b.n	8011b74 <f_lseek+0x596>
#endif
					fp->dsect = dsc;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	69ba      	ldr	r2, [r7, #24]
 801186a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
 801186e:	e176      	b.n	8011b5e <f_lseek+0x580>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8011876:	683a      	ldr	r2, [r7, #0]
 8011878:	429a      	cmp	r2, r3
 801187a:	d90a      	bls.n	8011892 <f_lseek+0x2b4>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011882:	f003 0302 	and.w	r3, r3, #2
 8011886:	2b00      	cmp	r3, #0
 8011888:	d103      	bne.n	8011892 <f_lseek+0x2b4>
#endif
			) ofs = fp->fsize;
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8011890:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8011898:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801189a:	2300      	movs	r3, #0
 801189c:	637b      	str	r3, [r7, #52]	@ 0x34
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80118a2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
		if (ofs) {
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	f000 80ea 	beq.w	8011a82 <f_lseek+0x4a4>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80118b4:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80118b8:	025b      	lsls	r3, r3, #9
 80118ba:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80118bc:	6a3b      	ldr	r3, [r7, #32]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d01e      	beq.n	8011900 <f_lseek+0x322>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80118c2:	683b      	ldr	r3, [r7, #0]
 80118c4:	1e5a      	subs	r2, r3, #1
 80118c6:	69fb      	ldr	r3, [r7, #28]
 80118c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80118cc:	6a3b      	ldr	r3, [r7, #32]
 80118ce:	1e59      	subs	r1, r3, #1
 80118d0:	69fb      	ldr	r3, [r7, #28]
 80118d2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80118d6:	429a      	cmp	r2, r3
 80118d8:	d312      	bcc.n	8011900 <f_lseek+0x322>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80118da:	6a3b      	ldr	r3, [r7, #32]
 80118dc:	1e5a      	subs	r2, r3, #1
 80118de:	69fb      	ldr	r3, [r7, #28]
 80118e0:	425b      	negs	r3, r3
 80118e2:	401a      	ands	r2, r3
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
				ofs -= fp->fptr;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80118f0:	683a      	ldr	r2, [r7, #0]
 80118f2:	1ad3      	subs	r3, r2, r3
 80118f4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80118fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80118fe:	e037      	b.n	8011970 <f_lseek+0x392>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8011906:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801190a:	2b00      	cmp	r3, #0
 801190c:	d12c      	bne.n	8011968 <f_lseek+0x38a>
					clst = create_chain(fp->fs, 0);
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011914:	2100      	movs	r1, #0
 8011916:	4618      	mov	r0, r3
 8011918:	f7fd fc76 	bl	800f208 <create_chain>
 801191c:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 801191e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011920:	2b01      	cmp	r3, #1
 8011922:	d10c      	bne.n	801193e <f_lseek+0x360>
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2202      	movs	r2, #2
 8011928:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011932:	2102      	movs	r1, #2
 8011934:	4618      	mov	r0, r3
 8011936:	f7fc ff72 	bl	800e81e <unlock_fs>
 801193a:	2302      	movs	r3, #2
 801193c:	e11a      	b.n	8011b74 <f_lseek+0x596>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 801193e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011944:	d10c      	bne.n	8011960 <f_lseek+0x382>
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	2201      	movs	r2, #1
 801194a:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011954:	2101      	movs	r1, #1
 8011956:	4618      	mov	r0, r3
 8011958:	f7fc ff61 	bl	800e81e <unlock_fs>
 801195c:	2301      	movs	r3, #1
 801195e:	e109      	b.n	8011b74 <f_lseek+0x596>
					fp->sclust = clst;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011964:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
				}
#endif
				fp->clust = clst;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801196c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
			}
			if (clst != 0) {
 8011970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011972:	2b00      	cmp	r3, #0
 8011974:	f000 8085 	beq.w	8011a82 <f_lseek+0x4a4>
				while (ofs > bcs) {						/* Cluster following loop */
 8011978:	e055      	b.n	8011a26 <f_lseek+0x448>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011980:	f003 0302 	and.w	r3, r3, #2
 8011984:	2b00      	cmp	r3, #0
 8011986:	d00d      	beq.n	80119a4 <f_lseek+0x3c6>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801198e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011990:	4618      	mov	r0, r3
 8011992:	f7fd fc39 	bl	800f208 <create_chain>
 8011996:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8011998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801199a:	2b00      	cmp	r3, #0
 801199c:	d10a      	bne.n	80119b4 <f_lseek+0x3d6>
							ofs = bcs; break;
 801199e:	69fb      	ldr	r3, [r7, #28]
 80119a0:	603b      	str	r3, [r7, #0]
 80119a2:	e044      	b.n	8011a2e <f_lseek+0x450>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80119aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80119ac:	4618      	mov	r0, r3
 80119ae:	f7fd fa0a 	bl	800edc6 <get_fat>
 80119b2:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80119b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119ba:	d10c      	bne.n	80119d6 <f_lseek+0x3f8>
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	2201      	movs	r2, #1
 80119c0:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80119ca:	2101      	movs	r1, #1
 80119cc:	4618      	mov	r0, r3
 80119ce:	f7fc ff26 	bl	800e81e <unlock_fs>
 80119d2:	2301      	movs	r3, #1
 80119d4:	e0ce      	b.n	8011b74 <f_lseek+0x596>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 80119d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119d8:	2b01      	cmp	r3, #1
 80119da:	d907      	bls.n	80119ec <f_lseek+0x40e>
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80119e2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80119e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80119e8:	429a      	cmp	r2, r3
 80119ea:	d30c      	bcc.n	8011a06 <f_lseek+0x428>
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	2202      	movs	r2, #2
 80119f0:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80119fa:	2102      	movs	r1, #2
 80119fc:	4618      	mov	r0, r3
 80119fe:	f7fc ff0e 	bl	800e81e <unlock_fs>
 8011a02:	2302      	movs	r3, #2
 8011a04:	e0b6      	b.n	8011b74 <f_lseek+0x596>
					fp->clust = clst;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011a0a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
					fp->fptr += bcs;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011a14:	69fb      	ldr	r3, [r7, #28]
 8011a16:	441a      	add	r2, r3
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
					ofs -= bcs;
 8011a1e:	683a      	ldr	r2, [r7, #0]
 8011a20:	69fb      	ldr	r3, [r7, #28]
 8011a22:	1ad3      	subs	r3, r2, r3
 8011a24:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8011a26:	683a      	ldr	r2, [r7, #0]
 8011a28:	69fb      	ldr	r3, [r7, #28]
 8011a2a:	429a      	cmp	r2, r3
 8011a2c:	d8a5      	bhi.n	801197a <f_lseek+0x39c>
				}
				fp->fptr += ofs;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011a34:	683b      	ldr	r3, [r7, #0]
 8011a36:	441a      	add	r2, r3
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
				if (ofs % SS(fp->fs)) {
 8011a3e:	683b      	ldr	r3, [r7, #0]
 8011a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d01c      	beq.n	8011a82 <f_lseek+0x4a4>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011a4e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011a50:	4618      	mov	r0, r3
 8011a52:	f7fd f997 	bl	800ed84 <clust2sect>
 8011a56:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8011a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d10c      	bne.n	8011a78 <f_lseek+0x49a>
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2202      	movs	r2, #2
 8011a62:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011a6c:	2102      	movs	r1, #2
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f7fc fed5 	bl	800e81e <unlock_fs>
 8011a74:	2302      	movs	r3, #2
 8011a76:	e07d      	b.n	8011b74 <f_lseek+0x596>
					nsect += ofs / SS(fp->fs);
 8011a78:	683b      	ldr	r3, [r7, #0]
 8011a7a:	0a5b      	lsrs	r3, r3, #9
 8011a7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011a7e:	4413      	add	r3, r2
 8011a80:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8011a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d04f      	beq.n	8011b30 <f_lseek+0x552>
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8011a96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	d049      	beq.n	8011b30 <f_lseek+0x552>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d024      	beq.n	8011af4 <f_lseek+0x516>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011ab0:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8011ab4:	6879      	ldr	r1, [r7, #4]
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8011abc:	2301      	movs	r3, #1
 8011abe:	f7fc fde9 	bl	800e694 <disk_write>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d00c      	beq.n	8011ae2 <f_lseek+0x504>
					ABORT(fp->fs, FR_DISK_ERR);
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2201      	movs	r2, #1
 8011acc:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011ad6:	2101      	movs	r1, #1
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f7fc fea0 	bl	800e81e <unlock_fs>
 8011ade:	2301      	movs	r3, #1
 8011ae0:	e048      	b.n	8011b74 <f_lseek+0x596>
				fp->flag &= ~FA__DIRTY;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011ae8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011aec:	b2da      	uxtb	r2, r3
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011afa:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8011afe:	6879      	ldr	r1, [r7, #4]
 8011b00:	2301      	movs	r3, #1
 8011b02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011b04:	f7fc fda6 	bl	800e654 <disk_read>
 8011b08:	4603      	mov	r3, r0
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d00c      	beq.n	8011b28 <f_lseek+0x54a>
				ABORT(fp->fs, FR_DISK_ERR);
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2201      	movs	r2, #1
 8011b12:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011b1c:	2101      	movs	r1, #1
 8011b1e:	4618      	mov	r0, r3
 8011b20:	f7fc fe7d 	bl	800e81e <unlock_fs>
 8011b24:	2301      	movs	r3, #1
 8011b26:	e025      	b.n	8011b74 <f_lseek+0x596>
#endif
			fp->dsect = nsect;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011b2c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8011b3c:	429a      	cmp	r2, r3
 8011b3e:	d90e      	bls.n	8011b5e <f_lseek+0x580>
			fp->fsize = fp->fptr;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
			fp->flag |= FA__WRITTEN;
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011b52:	f043 0320 	orr.w	r3, r3, #32
 8011b56:	b2da      	uxtb	r2, r3
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011b64:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8011b68:	4611      	mov	r1, r2
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	f7fc fe57 	bl	800e81e <unlock_fs>
 8011b70:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8011b74:	4618      	mov	r0, r3
 8011b76:	3740      	adds	r7, #64	@ 0x40
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	bd80      	pop	{r7, pc}

08011b7c <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b084      	sub	sp, #16
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
 8011b84:	460b      	mov	r3, r1
 8011b86:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8011b88:	78fb      	ldrb	r3, [r7, #3]
 8011b8a:	2b0a      	cmp	r3, #10
 8011b8c:	d103      	bne.n	8011b96 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8011b8e:	210d      	movs	r1, #13
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	f7ff fff3 	bl	8011b7c <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	685b      	ldr	r3, [r3, #4]
 8011b9a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	db25      	blt.n	8011bee <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	1c5a      	adds	r2, r3, #1
 8011ba6:	60fa      	str	r2, [r7, #12]
 8011ba8:	687a      	ldr	r2, [r7, #4]
 8011baa:	4413      	add	r3, r2
 8011bac:	78fa      	ldrb	r2, [r7, #3]
 8011bae:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	2b3c      	cmp	r3, #60	@ 0x3c
 8011bb4:	dd12      	ble.n	8011bdc <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	6818      	ldr	r0, [r3, #0]
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	f103 010c 	add.w	r1, r3, #12
 8011bc0:	68fa      	ldr	r2, [r7, #12]
 8011bc2:	f107 0308 	add.w	r3, r7, #8
 8011bc6:	f7ff fa4a 	bl	801105e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8011bca:	68ba      	ldr	r2, [r7, #8]
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	429a      	cmp	r2, r3
 8011bd0:	d101      	bne.n	8011bd6 <putc_bfd+0x5a>
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	e001      	b.n	8011bda <putc_bfd+0x5e>
 8011bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8011bda:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	68fa      	ldr	r2, [r7, #12]
 8011be0:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	689b      	ldr	r3, [r3, #8]
 8011be6:	1c5a      	adds	r2, r3, #1
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	609a      	str	r2, [r3, #8]
 8011bec:	e000      	b.n	8011bf0 <putc_bfd+0x74>
	if (i < 0) return;
 8011bee:	bf00      	nop
}
 8011bf0:	3710      	adds	r7, #16
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd80      	pop	{r7, pc}

08011bf6 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8011bf6:	b590      	push	{r4, r7, lr}
 8011bf8:	b097      	sub	sp, #92	@ 0x5c
 8011bfa:	af00      	add	r7, sp, #0
 8011bfc:	6078      	str	r0, [r7, #4]
 8011bfe:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8011c00:	683b      	ldr	r3, [r7, #0]
 8011c02:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8011c04:	2300      	movs	r3, #0
 8011c06:	613b      	str	r3, [r7, #16]
 8011c08:	693b      	ldr	r3, [r7, #16]
 8011c0a:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8011c0c:	e009      	b.n	8011c22 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	1c5a      	adds	r2, r3, #1
 8011c12:	607a      	str	r2, [r7, #4]
 8011c14:	781a      	ldrb	r2, [r3, #0]
 8011c16:	f107 030c 	add.w	r3, r7, #12
 8011c1a:	4611      	mov	r1, r2
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	f7ff ffad 	bl	8011b7c <putc_bfd>
	while (*str)			/* Put the string */
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	781b      	ldrb	r3, [r3, #0]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d1f1      	bne.n	8011c0e <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8011c2a:	693b      	ldr	r3, [r7, #16]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	db15      	blt.n	8011c5c <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8011c30:	68f8      	ldr	r0, [r7, #12]
 8011c32:	693b      	ldr	r3, [r7, #16]
 8011c34:	461c      	mov	r4, r3
 8011c36:	f107 0208 	add.w	r2, r7, #8
 8011c3a:	f107 030c 	add.w	r3, r7, #12
 8011c3e:	f103 010c 	add.w	r1, r3, #12
 8011c42:	4613      	mov	r3, r2
 8011c44:	4622      	mov	r2, r4
 8011c46:	f7ff fa0a 	bl	801105e <f_write>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d105      	bne.n	8011c5c <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8011c50:	693b      	ldr	r3, [r7, #16]
 8011c52:	68ba      	ldr	r2, [r7, #8]
 8011c54:	4293      	cmp	r3, r2
 8011c56:	d101      	bne.n	8011c5c <f_puts+0x66>
 8011c58:	697b      	ldr	r3, [r7, #20]
 8011c5a:	e001      	b.n	8011c60 <f_puts+0x6a>
	return EOF;
 8011c5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011c60:	4618      	mov	r0, r3
 8011c62:	375c      	adds	r7, #92	@ 0x5c
 8011c64:	46bd      	mov	sp, r7
 8011c66:	bd90      	pop	{r4, r7, pc}

08011c68 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011c68:	b480      	push	{r7}
 8011c6a:	b087      	sub	sp, #28
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	60f8      	str	r0, [r7, #12]
 8011c70:	60b9      	str	r1, [r7, #8]
 8011c72:	4613      	mov	r3, r2
 8011c74:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011c76:	2301      	movs	r3, #1
 8011c78:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8011c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8011cf8 <FATFS_LinkDriverEx+0x90>)
 8011c80:	7a5b      	ldrb	r3, [r3, #9]
 8011c82:	b2db      	uxtb	r3, r3
 8011c84:	2b01      	cmp	r3, #1
 8011c86:	d831      	bhi.n	8011cec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011c88:	4b1b      	ldr	r3, [pc, #108]	@ (8011cf8 <FATFS_LinkDriverEx+0x90>)
 8011c8a:	7a5b      	ldrb	r3, [r3, #9]
 8011c8c:	b2db      	uxtb	r3, r3
 8011c8e:	461a      	mov	r2, r3
 8011c90:	4b19      	ldr	r3, [pc, #100]	@ (8011cf8 <FATFS_LinkDriverEx+0x90>)
 8011c92:	2100      	movs	r1, #0
 8011c94:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8011c96:	4b18      	ldr	r3, [pc, #96]	@ (8011cf8 <FATFS_LinkDriverEx+0x90>)
 8011c98:	7a5b      	ldrb	r3, [r3, #9]
 8011c9a:	b2db      	uxtb	r3, r3
 8011c9c:	4a16      	ldr	r2, [pc, #88]	@ (8011cf8 <FATFS_LinkDriverEx+0x90>)
 8011c9e:	009b      	lsls	r3, r3, #2
 8011ca0:	4413      	add	r3, r2
 8011ca2:	68fa      	ldr	r2, [r7, #12]
 8011ca4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8011ca6:	4b14      	ldr	r3, [pc, #80]	@ (8011cf8 <FATFS_LinkDriverEx+0x90>)
 8011ca8:	7a5b      	ldrb	r3, [r3, #9]
 8011caa:	b2db      	uxtb	r3, r3
 8011cac:	461a      	mov	r2, r3
 8011cae:	4b12      	ldr	r3, [pc, #72]	@ (8011cf8 <FATFS_LinkDriverEx+0x90>)
 8011cb0:	4413      	add	r3, r2
 8011cb2:	79fa      	ldrb	r2, [r7, #7]
 8011cb4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011cb6:	4b10      	ldr	r3, [pc, #64]	@ (8011cf8 <FATFS_LinkDriverEx+0x90>)
 8011cb8:	7a5b      	ldrb	r3, [r3, #9]
 8011cba:	b2db      	uxtb	r3, r3
 8011cbc:	1c5a      	adds	r2, r3, #1
 8011cbe:	b2d1      	uxtb	r1, r2
 8011cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8011cf8 <FATFS_LinkDriverEx+0x90>)
 8011cc2:	7251      	strb	r1, [r2, #9]
 8011cc4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011cc6:	7dbb      	ldrb	r3, [r7, #22]
 8011cc8:	3330      	adds	r3, #48	@ 0x30
 8011cca:	b2da      	uxtb	r2, r3
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	3301      	adds	r3, #1
 8011cd4:	223a      	movs	r2, #58	@ 0x3a
 8011cd6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011cd8:	68bb      	ldr	r3, [r7, #8]
 8011cda:	3302      	adds	r3, #2
 8011cdc:	222f      	movs	r2, #47	@ 0x2f
 8011cde:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011ce0:	68bb      	ldr	r3, [r7, #8]
 8011ce2:	3303      	adds	r3, #3
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011ce8:	2300      	movs	r3, #0
 8011cea:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8011cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8011cee:	4618      	mov	r0, r3
 8011cf0:	371c      	adds	r7, #28
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bc80      	pop	{r7}
 8011cf6:	4770      	bx	lr
 8011cf8:	2000135c 	.word	0x2000135c

08011cfc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b082      	sub	sp, #8
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
 8011d04:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011d06:	2200      	movs	r2, #0
 8011d08:	6839      	ldr	r1, [r7, #0]
 8011d0a:	6878      	ldr	r0, [r7, #4]
 8011d0c:	f7ff ffac 	bl	8011c68 <FATFS_LinkDriverEx>
 8011d10:	4603      	mov	r3, r0
}
 8011d12:	4618      	mov	r0, r3
 8011d14:	3708      	adds	r7, #8
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bd80      	pop	{r7, pc}
	...

08011d1c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b082      	sub	sp, #8
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	4603      	mov	r3, r0
 8011d24:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011d26:	4b0b      	ldr	r3, [pc, #44]	@ (8011d54 <SD_initialize+0x38>)
 8011d28:	2201      	movs	r2, #1
 8011d2a:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8011d2c:	f7fc fbb8 	bl	800e4a0 <BSP_SD_Init>
 8011d30:	4603      	mov	r3, r0
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d107      	bne.n	8011d46 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011d36:	4b07      	ldr	r3, [pc, #28]	@ (8011d54 <SD_initialize+0x38>)
 8011d38:	781b      	ldrb	r3, [r3, #0]
 8011d3a:	b2db      	uxtb	r3, r3
 8011d3c:	f023 0301 	bic.w	r3, r3, #1
 8011d40:	b2da      	uxtb	r2, r3
 8011d42:	4b04      	ldr	r3, [pc, #16]	@ (8011d54 <SD_initialize+0x38>)
 8011d44:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011d46:	4b03      	ldr	r3, [pc, #12]	@ (8011d54 <SD_initialize+0x38>)
 8011d48:	781b      	ldrb	r3, [r3, #0]
 8011d4a:	b2db      	uxtb	r3, r3
}
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	3708      	adds	r7, #8
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bd80      	pop	{r7, pc}
 8011d54:	2000006d 	.word	0x2000006d

08011d58 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b082      	sub	sp, #8
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	4603      	mov	r3, r0
 8011d60:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011d62:	4b0b      	ldr	r3, [pc, #44]	@ (8011d90 <SD_status+0x38>)
 8011d64:	2201      	movs	r2, #1
 8011d66:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011d68:	f7fc fbee 	bl	800e548 <BSP_SD_GetCardState>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d107      	bne.n	8011d82 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011d72:	4b07      	ldr	r3, [pc, #28]	@ (8011d90 <SD_status+0x38>)
 8011d74:	781b      	ldrb	r3, [r3, #0]
 8011d76:	b2db      	uxtb	r3, r3
 8011d78:	f023 0301 	bic.w	r3, r3, #1
 8011d7c:	b2da      	uxtb	r2, r3
 8011d7e:	4b04      	ldr	r3, [pc, #16]	@ (8011d90 <SD_status+0x38>)
 8011d80:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 8011d82:	4b03      	ldr	r3, [pc, #12]	@ (8011d90 <SD_status+0x38>)
 8011d84:	781b      	ldrb	r3, [r3, #0]
 8011d86:	b2db      	uxtb	r3, r3
}
 8011d88:	4618      	mov	r0, r3
 8011d8a:	3708      	adds	r7, #8
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	bd80      	pop	{r7, pc}
 8011d90:	2000006d 	.word	0x2000006d

08011d94 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b086      	sub	sp, #24
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	60b9      	str	r1, [r7, #8]
 8011d9c:	607a      	str	r2, [r7, #4]
 8011d9e:	603b      	str	r3, [r7, #0]
 8011da0:	4603      	mov	r3, r0
 8011da2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011da4:	2301      	movs	r3, #1
 8011da6:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8011da8:	4b0f      	ldr	r3, [pc, #60]	@ (8011de8 <SD_read+0x54>)
 8011daa:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8011dac:	4b0f      	ldr	r3, [pc, #60]	@ (8011dec <SD_read+0x58>)
 8011dae:	683a      	ldr	r2, [r7, #0]
 8011db0:	6879      	ldr	r1, [r7, #4]
 8011db2:	68b8      	ldr	r0, [r7, #8]
 8011db4:	f7fc fb8c 	bl	800e4d0 <BSP_SD_ReadBlocks>
 8011db8:	4603      	mov	r3, r0
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d10e      	bne.n	8011ddc <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8011dbe:	e006      	b.n	8011dce <SD_read+0x3a>
    {
      if (timeout-- == 0)
 8011dc0:	693b      	ldr	r3, [r7, #16]
 8011dc2:	1e5a      	subs	r2, r3, #1
 8011dc4:	613a      	str	r2, [r7, #16]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d101      	bne.n	8011dce <SD_read+0x3a>
      {
        return RES_ERROR;
 8011dca:	2301      	movs	r3, #1
 8011dcc:	e007      	b.n	8011dde <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8011dce:	f7fc fbbb 	bl	800e548 <BSP_SD_GetCardState>
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d1f3      	bne.n	8011dc0 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 8011dd8:	2300      	movs	r3, #0
 8011dda:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8011ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8011dde:	4618      	mov	r0, r3
 8011de0:	3718      	adds	r7, #24
 8011de2:	46bd      	mov	sp, r7
 8011de4:	bd80      	pop	{r7, pc}
 8011de6:	bf00      	nop
 8011de8:	000186a0 	.word	0x000186a0
 8011dec:	05f5e100 	.word	0x05f5e100

08011df0 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b086      	sub	sp, #24
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	60b9      	str	r1, [r7, #8]
 8011df8:	607a      	str	r2, [r7, #4]
 8011dfa:	603b      	str	r3, [r7, #0]
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011e00:	2301      	movs	r3, #1
 8011e02:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8011e04:	4b0f      	ldr	r3, [pc, #60]	@ (8011e44 <SD_write+0x54>)
 8011e06:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 8011e08:	4b0f      	ldr	r3, [pc, #60]	@ (8011e48 <SD_write+0x58>)
 8011e0a:	683a      	ldr	r2, [r7, #0]
 8011e0c:	6879      	ldr	r1, [r7, #4]
 8011e0e:	68b8      	ldr	r0, [r7, #8]
 8011e10:	f7fc fb7c 	bl	800e50c <BSP_SD_WriteBlocks>
 8011e14:	4603      	mov	r3, r0
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d10e      	bne.n	8011e38 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8011e1a:	e006      	b.n	8011e2a <SD_write+0x3a>
    {
      if (timeout-- == 0)
 8011e1c:	693b      	ldr	r3, [r7, #16]
 8011e1e:	1e5a      	subs	r2, r3, #1
 8011e20:	613a      	str	r2, [r7, #16]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d101      	bne.n	8011e2a <SD_write+0x3a>
      {
        return RES_ERROR;
 8011e26:	2301      	movs	r3, #1
 8011e28:	e007      	b.n	8011e3a <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8011e2a:	f7fc fb8d 	bl	800e548 <BSP_SD_GetCardState>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d1f3      	bne.n	8011e1c <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 8011e34:	2300      	movs	r3, #0
 8011e36:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8011e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	3718      	adds	r7, #24
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	bd80      	pop	{r7, pc}
 8011e42:	bf00      	nop
 8011e44:	000186a0 	.word	0x000186a0
 8011e48:	05f5e100 	.word	0x05f5e100

08011e4c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b08c      	sub	sp, #48	@ 0x30
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	4603      	mov	r3, r0
 8011e54:	603a      	str	r2, [r7, #0]
 8011e56:	71fb      	strb	r3, [r7, #7]
 8011e58:	460b      	mov	r3, r1
 8011e5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011e62:	4b24      	ldr	r3, [pc, #144]	@ (8011ef4 <SD_ioctl+0xa8>)
 8011e64:	781b      	ldrb	r3, [r3, #0]
 8011e66:	b2db      	uxtb	r3, r3
 8011e68:	f003 0301 	and.w	r3, r3, #1
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d001      	beq.n	8011e74 <SD_ioctl+0x28>
 8011e70:	2303      	movs	r3, #3
 8011e72:	e03b      	b.n	8011eec <SD_ioctl+0xa0>
  
  switch (cmd)
 8011e74:	79bb      	ldrb	r3, [r7, #6]
 8011e76:	2b03      	cmp	r3, #3
 8011e78:	d833      	bhi.n	8011ee2 <SD_ioctl+0x96>
 8011e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8011e80 <SD_ioctl+0x34>)
 8011e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e80:	08011e91 	.word	0x08011e91
 8011e84:	08011e99 	.word	0x08011e99
 8011e88:	08011eb1 	.word	0x08011eb1
 8011e8c:	08011ecb 	.word	0x08011ecb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011e90:	2300      	movs	r3, #0
 8011e92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011e96:	e027      	b.n	8011ee8 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011e98:	f107 030c 	add.w	r3, r7, #12
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	f7fc fb63 	bl	800e568 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011ea2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011eae:	e01b      	b.n	8011ee8 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011eb0:	f107 030c 	add.w	r3, r7, #12
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	f7fc fb57 	bl	800e568 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ebc:	b29a      	uxth	r2, r3
 8011ebe:	683b      	ldr	r3, [r7, #0]
 8011ec0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011ec8:	e00e      	b.n	8011ee8 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011eca:	f107 030c 	add.w	r3, r7, #12
 8011ece:	4618      	mov	r0, r3
 8011ed0:	f7fc fb4a 	bl	800e568 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8011ed4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011ed6:	683b      	ldr	r3, [r7, #0]
 8011ed8:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011eda:	2300      	movs	r3, #0
 8011edc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011ee0:	e002      	b.n	8011ee8 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 8011ee2:	2304      	movs	r3, #4
 8011ee4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }
  
  return res;
 8011ee8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011eec:	4618      	mov	r0, r3
 8011eee:	3730      	adds	r7, #48	@ 0x30
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	bd80      	pop	{r7, pc}
 8011ef4:	2000006d 	.word	0x2000006d

08011ef8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8011ef8:	b480      	push	{r7}
 8011efa:	b085      	sub	sp, #20
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	4603      	mov	r3, r0
 8011f00:	6039      	str	r1, [r7, #0]
 8011f02:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8011f04:	88fb      	ldrh	r3, [r7, #6]
 8011f06:	2b7f      	cmp	r3, #127	@ 0x7f
 8011f08:	d802      	bhi.n	8011f10 <ff_convert+0x18>
		c = chr;
 8011f0a:	88fb      	ldrh	r3, [r7, #6]
 8011f0c:	81fb      	strh	r3, [r7, #14]
 8011f0e:	e025      	b.n	8011f5c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d00b      	beq.n	8011f2e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8011f16:	88fb      	ldrh	r3, [r7, #6]
 8011f18:	2bff      	cmp	r3, #255	@ 0xff
 8011f1a:	d805      	bhi.n	8011f28 <ff_convert+0x30>
 8011f1c:	88fb      	ldrh	r3, [r7, #6]
 8011f1e:	3b80      	subs	r3, #128	@ 0x80
 8011f20:	4a11      	ldr	r2, [pc, #68]	@ (8011f68 <ff_convert+0x70>)
 8011f22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011f26:	e000      	b.n	8011f2a <ff_convert+0x32>
 8011f28:	2300      	movs	r3, #0
 8011f2a:	81fb      	strh	r3, [r7, #14]
 8011f2c:	e016      	b.n	8011f5c <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8011f2e:	2300      	movs	r3, #0
 8011f30:	81fb      	strh	r3, [r7, #14]
 8011f32:	e009      	b.n	8011f48 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8011f34:	89fb      	ldrh	r3, [r7, #14]
 8011f36:	4a0c      	ldr	r2, [pc, #48]	@ (8011f68 <ff_convert+0x70>)
 8011f38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011f3c:	88fa      	ldrh	r2, [r7, #6]
 8011f3e:	429a      	cmp	r2, r3
 8011f40:	d006      	beq.n	8011f50 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8011f42:	89fb      	ldrh	r3, [r7, #14]
 8011f44:	3301      	adds	r3, #1
 8011f46:	81fb      	strh	r3, [r7, #14]
 8011f48:	89fb      	ldrh	r3, [r7, #14]
 8011f4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8011f4c:	d9f2      	bls.n	8011f34 <ff_convert+0x3c>
 8011f4e:	e000      	b.n	8011f52 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011f50:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8011f52:	89fb      	ldrh	r3, [r7, #14]
 8011f54:	3380      	adds	r3, #128	@ 0x80
 8011f56:	b29b      	uxth	r3, r3
 8011f58:	b2db      	uxtb	r3, r3
 8011f5a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011f5c:	89fb      	ldrh	r3, [r7, #14]
}
 8011f5e:	4618      	mov	r0, r3
 8011f60:	3714      	adds	r7, #20
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bc80      	pop	{r7}
 8011f66:	4770      	bx	lr
 8011f68:	08015b50 	.word	0x08015b50

08011f6c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8011f6c:	b480      	push	{r7}
 8011f6e:	b085      	sub	sp, #20
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	4603      	mov	r3, r0
 8011f74:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8011f76:	2300      	movs	r3, #0
 8011f78:	60fb      	str	r3, [r7, #12]
 8011f7a:	e002      	b.n	8011f82 <ff_wtoupper+0x16>
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	3301      	adds	r3, #1
 8011f80:	60fb      	str	r3, [r7, #12]
 8011f82:	4a0f      	ldr	r2, [pc, #60]	@ (8011fc0 <ff_wtoupper+0x54>)
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d006      	beq.n	8011f9c <ff_wtoupper+0x30>
 8011f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8011fc0 <ff_wtoupper+0x54>)
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011f96:	88fa      	ldrh	r2, [r7, #6]
 8011f98:	429a      	cmp	r2, r3
 8011f9a:	d1ef      	bne.n	8011f7c <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8011f9c:	4a08      	ldr	r2, [pc, #32]	@ (8011fc0 <ff_wtoupper+0x54>)
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d004      	beq.n	8011fb2 <ff_wtoupper+0x46>
 8011fa8:	4a06      	ldr	r2, [pc, #24]	@ (8011fc4 <ff_wtoupper+0x58>)
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011fb0:	e000      	b.n	8011fb4 <ff_wtoupper+0x48>
 8011fb2:	88fb      	ldrh	r3, [r7, #6]
}
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	3714      	adds	r7, #20
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bc80      	pop	{r7}
 8011fbc:	4770      	bx	lr
 8011fbe:	bf00      	nop
 8011fc0:	08015c50 	.word	0x08015c50
 8011fc4:	08015e30 	.word	0x08015e30

08011fc8 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b086      	sub	sp, #24
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	4603      	mov	r3, r0
 8011fd0:	6039      	str	r1, [r7, #0]
 8011fd2:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	60fb      	str	r3, [r7, #12]
 8011fd8:	2300      	movs	r3, #0
 8011fda:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 8011fdc:	f107 030c 	add.w	r3, r7, #12
 8011fe0:	2101      	movs	r1, #1
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f000 f8cb 	bl	801217e <osSemaphoreCreate>
 8011fe8:	4602      	mov	r2, r0
 8011fea:	683b      	ldr	r3, [r7, #0]
 8011fec:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 8011fee:	683b      	ldr	r3, [r7, #0]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	bf14      	ite	ne
 8011ff6:	2301      	movne	r3, #1
 8011ff8:	2300      	moveq	r3, #0
 8011ffa:	b2db      	uxtb	r3, r3
 8011ffc:	617b      	str	r3, [r7, #20]
  
  return ret;
 8011ffe:	697b      	ldr	r3, [r7, #20]
}
 8012000:	4618      	mov	r0, r3
 8012002:	3718      	adds	r7, #24
 8012004:	46bd      	mov	sp, r7
 8012006:	bd80      	pop	{r7, pc}

08012008 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b082      	sub	sp, #8
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	f000 f96b 	bl	80122ec <osSemaphoreDelete>
  return 1;
 8012016:	2301      	movs	r3, #1
}
 8012018:	4618      	mov	r0, r3
 801201a:	3708      	adds	r7, #8
 801201c:	46bd      	mov	sp, r7
 801201e:	bd80      	pop	{r7, pc}

08012020 <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b084      	sub	sp, #16
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8012028:	2300      	movs	r3, #0
 801202a:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 801202c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012030:	6878      	ldr	r0, [r7, #4]
 8012032:	f000 f8d7 	bl	80121e4 <osSemaphoreWait>
 8012036:	4603      	mov	r3, r0
 8012038:	2b00      	cmp	r3, #0
 801203a:	d101      	bne.n	8012040 <ff_req_grant+0x20>
  {
    ret = 1;
 801203c:	2301      	movs	r3, #1
 801203e:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8012040:	68fb      	ldr	r3, [r7, #12]
}
 8012042:	4618      	mov	r0, r3
 8012044:	3710      	adds	r7, #16
 8012046:	46bd      	mov	sp, r7
 8012048:	bd80      	pop	{r7, pc}

0801204a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801204a:	b580      	push	{r7, lr}
 801204c:	b082      	sub	sp, #8
 801204e:	af00      	add	r7, sp, #0
 8012050:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 8012052:	6878      	ldr	r0, [r7, #4]
 8012054:	f000 f914 	bl	8012280 <osSemaphoreRelease>
}
 8012058:	bf00      	nop
 801205a:	3708      	adds	r7, #8
 801205c:	46bd      	mov	sp, r7
 801205e:	bd80      	pop	{r7, pc}

08012060 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8012060:	b480      	push	{r7}
 8012062:	b085      	sub	sp, #20
 8012064:	af00      	add	r7, sp, #0
 8012066:	4603      	mov	r3, r0
 8012068:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801206a:	2300      	movs	r3, #0
 801206c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801206e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012072:	2b84      	cmp	r3, #132	@ 0x84
 8012074:	d005      	beq.n	8012082 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8012076:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	4413      	add	r3, r2
 801207e:	3303      	adds	r3, #3
 8012080:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8012082:	68fb      	ldr	r3, [r7, #12]
}
 8012084:	4618      	mov	r0, r3
 8012086:	3714      	adds	r7, #20
 8012088:	46bd      	mov	sp, r7
 801208a:	bc80      	pop	{r7}
 801208c:	4770      	bx	lr

0801208e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801208e:	b480      	push	{r7}
 8012090:	b083      	sub	sp, #12
 8012092:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012094:	f3ef 8305 	mrs	r3, IPSR
 8012098:	607b      	str	r3, [r7, #4]
  return(result);
 801209a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801209c:	2b00      	cmp	r3, #0
 801209e:	bf14      	ite	ne
 80120a0:	2301      	movne	r3, #1
 80120a2:	2300      	moveq	r3, #0
 80120a4:	b2db      	uxtb	r3, r3
}
 80120a6:	4618      	mov	r0, r3
 80120a8:	370c      	adds	r7, #12
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bc80      	pop	{r7}
 80120ae:	4770      	bx	lr

080120b0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80120b4:	f001 fa9a 	bl	80135ec <vTaskStartScheduler>
  
  return osOK;
 80120b8:	2300      	movs	r3, #0
}
 80120ba:	4618      	mov	r0, r3
 80120bc:	bd80      	pop	{r7, pc}

080120be <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80120be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120c0:	b089      	sub	sp, #36	@ 0x24
 80120c2:	af04      	add	r7, sp, #16
 80120c4:	6078      	str	r0, [r7, #4]
 80120c6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	695b      	ldr	r3, [r3, #20]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d020      	beq.n	8012112 <osThreadCreate+0x54>
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	699b      	ldr	r3, [r3, #24]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d01c      	beq.n	8012112 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	685c      	ldr	r4, [r3, #4]
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	691e      	ldr	r6, [r3, #16]
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80120ea:	4618      	mov	r0, r3
 80120ec:	f7ff ffb8 	bl	8012060 <makeFreeRtosPriority>
 80120f0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	695b      	ldr	r3, [r3, #20]
 80120f6:	687a      	ldr	r2, [r7, #4]
 80120f8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80120fa:	9202      	str	r2, [sp, #8]
 80120fc:	9301      	str	r3, [sp, #4]
 80120fe:	9100      	str	r1, [sp, #0]
 8012100:	683b      	ldr	r3, [r7, #0]
 8012102:	4632      	mov	r2, r6
 8012104:	4629      	mov	r1, r5
 8012106:	4620      	mov	r0, r4
 8012108:	f000 ff90 	bl	801302c <xTaskCreateStatic>
 801210c:	4603      	mov	r3, r0
 801210e:	60fb      	str	r3, [r7, #12]
 8012110:	e01c      	b.n	801214c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	685c      	ldr	r4, [r3, #4]
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801211e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012126:	4618      	mov	r0, r3
 8012128:	f7ff ff9a 	bl	8012060 <makeFreeRtosPriority>
 801212c:	4602      	mov	r2, r0
 801212e:	f107 030c 	add.w	r3, r7, #12
 8012132:	9301      	str	r3, [sp, #4]
 8012134:	9200      	str	r2, [sp, #0]
 8012136:	683b      	ldr	r3, [r7, #0]
 8012138:	4632      	mov	r2, r6
 801213a:	4629      	mov	r1, r5
 801213c:	4620      	mov	r0, r4
 801213e:	f000 ffd4 	bl	80130ea <xTaskCreate>
 8012142:	4603      	mov	r3, r0
 8012144:	2b01      	cmp	r3, #1
 8012146:	d001      	beq.n	801214c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8012148:	2300      	movs	r3, #0
 801214a:	e000      	b.n	801214e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801214c:	68fb      	ldr	r3, [r7, #12]
}
 801214e:	4618      	mov	r0, r3
 8012150:	3714      	adds	r7, #20
 8012152:	46bd      	mov	sp, r7
 8012154:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012156 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012156:	b580      	push	{r7, lr}
 8012158:	b084      	sub	sp, #16
 801215a:	af00      	add	r7, sp, #0
 801215c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d001      	beq.n	801216c <osDelay+0x16>
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	e000      	b.n	801216e <osDelay+0x18>
 801216c:	2301      	movs	r3, #1
 801216e:	4618      	mov	r0, r3
 8012170:	f001 f972 	bl	8013458 <vTaskDelay>
  
  return osOK;
 8012174:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012176:	4618      	mov	r0, r3
 8012178:	3710      	adds	r7, #16
 801217a:	46bd      	mov	sp, r7
 801217c:	bd80      	pop	{r7, pc}

0801217e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801217e:	b580      	push	{r7, lr}
 8012180:	b086      	sub	sp, #24
 8012182:	af02      	add	r7, sp, #8
 8012184:	6078      	str	r0, [r7, #4]
 8012186:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	685b      	ldr	r3, [r3, #4]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d00f      	beq.n	80121b0 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8012190:	683b      	ldr	r3, [r7, #0]
 8012192:	2b01      	cmp	r3, #1
 8012194:	d10a      	bne.n	80121ac <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	685b      	ldr	r3, [r3, #4]
 801219a:	2203      	movs	r2, #3
 801219c:	9200      	str	r2, [sp, #0]
 801219e:	2200      	movs	r2, #0
 80121a0:	2100      	movs	r1, #0
 80121a2:	2001      	movs	r0, #1
 80121a4:	f000 f9ce 	bl	8012544 <xQueueGenericCreateStatic>
 80121a8:	4603      	mov	r3, r0
 80121aa:	e016      	b.n	80121da <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80121ac:	2300      	movs	r3, #0
 80121ae:	e014      	b.n	80121da <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80121b0:	683b      	ldr	r3, [r7, #0]
 80121b2:	2b01      	cmp	r3, #1
 80121b4:	d110      	bne.n	80121d8 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80121b6:	2203      	movs	r2, #3
 80121b8:	2100      	movs	r1, #0
 80121ba:	2001      	movs	r0, #1
 80121bc:	f000 fa3e 	bl	801263c <xQueueGenericCreate>
 80121c0:	60f8      	str	r0, [r7, #12]
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d005      	beq.n	80121d4 <osSemaphoreCreate+0x56>
 80121c8:	2300      	movs	r3, #0
 80121ca:	2200      	movs	r2, #0
 80121cc:	2100      	movs	r1, #0
 80121ce:	68f8      	ldr	r0, [r7, #12]
 80121d0:	f000 fa92 	bl	80126f8 <xQueueGenericSend>
      return sema;
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	e000      	b.n	80121da <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80121d8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80121da:	4618      	mov	r0, r3
 80121dc:	3710      	adds	r7, #16
 80121de:	46bd      	mov	sp, r7
 80121e0:	bd80      	pop	{r7, pc}
	...

080121e4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b084      	sub	sp, #16
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
 80121ec:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80121ee:	2300      	movs	r3, #0
 80121f0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d101      	bne.n	80121fc <osSemaphoreWait+0x18>
    return osErrorParameter;
 80121f8:	2380      	movs	r3, #128	@ 0x80
 80121fa:	e03a      	b.n	8012272 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80121fc:	2300      	movs	r3, #0
 80121fe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8012200:	683b      	ldr	r3, [r7, #0]
 8012202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012206:	d103      	bne.n	8012210 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8012208:	f04f 33ff 	mov.w	r3, #4294967295
 801220c:	60fb      	str	r3, [r7, #12]
 801220e:	e009      	b.n	8012224 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8012210:	683b      	ldr	r3, [r7, #0]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d006      	beq.n	8012224 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d101      	bne.n	8012224 <osSemaphoreWait+0x40>
      ticks = 1;
 8012220:	2301      	movs	r3, #1
 8012222:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8012224:	f7ff ff33 	bl	801208e <inHandlerMode>
 8012228:	4603      	mov	r3, r0
 801222a:	2b00      	cmp	r3, #0
 801222c:	d017      	beq.n	801225e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801222e:	f107 0308 	add.w	r3, r7, #8
 8012232:	461a      	mov	r2, r3
 8012234:	2100      	movs	r1, #0
 8012236:	6878      	ldr	r0, [r7, #4]
 8012238:	f000 fd00 	bl	8012c3c <xQueueReceiveFromISR>
 801223c:	4603      	mov	r3, r0
 801223e:	2b01      	cmp	r3, #1
 8012240:	d001      	beq.n	8012246 <osSemaphoreWait+0x62>
      return osErrorOS;
 8012242:	23ff      	movs	r3, #255	@ 0xff
 8012244:	e015      	b.n	8012272 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8012246:	68bb      	ldr	r3, [r7, #8]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d011      	beq.n	8012270 <osSemaphoreWait+0x8c>
 801224c:	4b0b      	ldr	r3, [pc, #44]	@ (801227c <osSemaphoreWait+0x98>)
 801224e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012252:	601a      	str	r2, [r3, #0]
 8012254:	f3bf 8f4f 	dsb	sy
 8012258:	f3bf 8f6f 	isb	sy
 801225c:	e008      	b.n	8012270 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801225e:	68f9      	ldr	r1, [r7, #12]
 8012260:	6878      	ldr	r0, [r7, #4]
 8012262:	f000 fbdb 	bl	8012a1c <xQueueSemaphoreTake>
 8012266:	4603      	mov	r3, r0
 8012268:	2b01      	cmp	r3, #1
 801226a:	d001      	beq.n	8012270 <osSemaphoreWait+0x8c>
    return osErrorOS;
 801226c:	23ff      	movs	r3, #255	@ 0xff
 801226e:	e000      	b.n	8012272 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8012270:	2300      	movs	r3, #0
}
 8012272:	4618      	mov	r0, r3
 8012274:	3710      	adds	r7, #16
 8012276:	46bd      	mov	sp, r7
 8012278:	bd80      	pop	{r7, pc}
 801227a:	bf00      	nop
 801227c:	e000ed04 	.word	0xe000ed04

08012280 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b084      	sub	sp, #16
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8012288:	2300      	movs	r3, #0
 801228a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 801228c:	2300      	movs	r3, #0
 801228e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8012290:	f7ff fefd 	bl	801208e <inHandlerMode>
 8012294:	4603      	mov	r3, r0
 8012296:	2b00      	cmp	r3, #0
 8012298:	d016      	beq.n	80122c8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801229a:	f107 0308 	add.w	r3, r7, #8
 801229e:	4619      	mov	r1, r3
 80122a0:	6878      	ldr	r0, [r7, #4]
 80122a2:	f000 fb2b 	bl	80128fc <xQueueGiveFromISR>
 80122a6:	4603      	mov	r3, r0
 80122a8:	2b01      	cmp	r3, #1
 80122aa:	d001      	beq.n	80122b0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80122ac:	23ff      	movs	r3, #255	@ 0xff
 80122ae:	e017      	b.n	80122e0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80122b0:	68bb      	ldr	r3, [r7, #8]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d013      	beq.n	80122de <osSemaphoreRelease+0x5e>
 80122b6:	4b0c      	ldr	r3, [pc, #48]	@ (80122e8 <osSemaphoreRelease+0x68>)
 80122b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80122bc:	601a      	str	r2, [r3, #0]
 80122be:	f3bf 8f4f 	dsb	sy
 80122c2:	f3bf 8f6f 	isb	sy
 80122c6:	e00a      	b.n	80122de <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80122c8:	2300      	movs	r3, #0
 80122ca:	2200      	movs	r2, #0
 80122cc:	2100      	movs	r1, #0
 80122ce:	6878      	ldr	r0, [r7, #4]
 80122d0:	f000 fa12 	bl	80126f8 <xQueueGenericSend>
 80122d4:	4603      	mov	r3, r0
 80122d6:	2b01      	cmp	r3, #1
 80122d8:	d001      	beq.n	80122de <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80122da:	23ff      	movs	r3, #255	@ 0xff
 80122dc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80122de:	68fb      	ldr	r3, [r7, #12]
}
 80122e0:	4618      	mov	r0, r3
 80122e2:	3710      	adds	r7, #16
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}
 80122e8:	e000ed04 	.word	0xe000ed04

080122ec <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b082      	sub	sp, #8
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80122f4:	f7ff fecb 	bl	801208e <inHandlerMode>
 80122f8:	4603      	mov	r3, r0
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d001      	beq.n	8012302 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80122fe:	2382      	movs	r3, #130	@ 0x82
 8012300:	e003      	b.n	801230a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8012302:	6878      	ldr	r0, [r7, #4]
 8012304:	f000 fd1c 	bl	8012d40 <vQueueDelete>

  return osOK; 
 8012308:	2300      	movs	r3, #0
}
 801230a:	4618      	mov	r0, r3
 801230c:	3708      	adds	r7, #8
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}

08012312 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012312:	b480      	push	{r7}
 8012314:	b083      	sub	sp, #12
 8012316:	af00      	add	r7, sp, #0
 8012318:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	f103 0208 	add.w	r2, r3, #8
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	f04f 32ff 	mov.w	r2, #4294967295
 801232a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	f103 0208 	add.w	r2, r3, #8
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	f103 0208 	add.w	r2, r3, #8
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	2200      	movs	r2, #0
 8012344:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012346:	bf00      	nop
 8012348:	370c      	adds	r7, #12
 801234a:	46bd      	mov	sp, r7
 801234c:	bc80      	pop	{r7}
 801234e:	4770      	bx	lr

08012350 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012350:	b480      	push	{r7}
 8012352:	b083      	sub	sp, #12
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	2200      	movs	r2, #0
 801235c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801235e:	bf00      	nop
 8012360:	370c      	adds	r7, #12
 8012362:	46bd      	mov	sp, r7
 8012364:	bc80      	pop	{r7}
 8012366:	4770      	bx	lr

08012368 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012368:	b480      	push	{r7}
 801236a:	b085      	sub	sp, #20
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
 8012370:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	685b      	ldr	r3, [r3, #4]
 8012376:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012378:	683b      	ldr	r3, [r7, #0]
 801237a:	68fa      	ldr	r2, [r7, #12]
 801237c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	689a      	ldr	r2, [r3, #8]
 8012382:	683b      	ldr	r3, [r7, #0]
 8012384:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	689b      	ldr	r3, [r3, #8]
 801238a:	683a      	ldr	r2, [r7, #0]
 801238c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	683a      	ldr	r2, [r7, #0]
 8012392:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8012394:	683b      	ldr	r3, [r7, #0]
 8012396:	687a      	ldr	r2, [r7, #4]
 8012398:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	1c5a      	adds	r2, r3, #1
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	601a      	str	r2, [r3, #0]
}
 80123a4:	bf00      	nop
 80123a6:	3714      	adds	r7, #20
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bc80      	pop	{r7}
 80123ac:	4770      	bx	lr

080123ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80123ae:	b480      	push	{r7}
 80123b0:	b085      	sub	sp, #20
 80123b2:	af00      	add	r7, sp, #0
 80123b4:	6078      	str	r0, [r7, #4]
 80123b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80123b8:	683b      	ldr	r3, [r7, #0]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80123be:	68bb      	ldr	r3, [r7, #8]
 80123c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123c4:	d103      	bne.n	80123ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	691b      	ldr	r3, [r3, #16]
 80123ca:	60fb      	str	r3, [r7, #12]
 80123cc:	e00c      	b.n	80123e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	3308      	adds	r3, #8
 80123d2:	60fb      	str	r3, [r7, #12]
 80123d4:	e002      	b.n	80123dc <vListInsert+0x2e>
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	685b      	ldr	r3, [r3, #4]
 80123da:	60fb      	str	r3, [r7, #12]
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	685b      	ldr	r3, [r3, #4]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	68ba      	ldr	r2, [r7, #8]
 80123e4:	429a      	cmp	r2, r3
 80123e6:	d2f6      	bcs.n	80123d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	685a      	ldr	r2, [r3, #4]
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80123f0:	683b      	ldr	r3, [r7, #0]
 80123f2:	685b      	ldr	r3, [r3, #4]
 80123f4:	683a      	ldr	r2, [r7, #0]
 80123f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80123f8:	683b      	ldr	r3, [r7, #0]
 80123fa:	68fa      	ldr	r2, [r7, #12]
 80123fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	683a      	ldr	r2, [r7, #0]
 8012402:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8012404:	683b      	ldr	r3, [r7, #0]
 8012406:	687a      	ldr	r2, [r7, #4]
 8012408:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	1c5a      	adds	r2, r3, #1
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	601a      	str	r2, [r3, #0]
}
 8012414:	bf00      	nop
 8012416:	3714      	adds	r7, #20
 8012418:	46bd      	mov	sp, r7
 801241a:	bc80      	pop	{r7}
 801241c:	4770      	bx	lr

0801241e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801241e:	b480      	push	{r7}
 8012420:	b085      	sub	sp, #20
 8012422:	af00      	add	r7, sp, #0
 8012424:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	691b      	ldr	r3, [r3, #16]
 801242a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	685b      	ldr	r3, [r3, #4]
 8012430:	687a      	ldr	r2, [r7, #4]
 8012432:	6892      	ldr	r2, [r2, #8]
 8012434:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	689b      	ldr	r3, [r3, #8]
 801243a:	687a      	ldr	r2, [r7, #4]
 801243c:	6852      	ldr	r2, [r2, #4]
 801243e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	685b      	ldr	r3, [r3, #4]
 8012444:	687a      	ldr	r2, [r7, #4]
 8012446:	429a      	cmp	r2, r3
 8012448:	d103      	bne.n	8012452 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	689a      	ldr	r2, [r3, #8]
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	2200      	movs	r2, #0
 8012456:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	1e5a      	subs	r2, r3, #1
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	681b      	ldr	r3, [r3, #0]
}
 8012466:	4618      	mov	r0, r3
 8012468:	3714      	adds	r7, #20
 801246a:	46bd      	mov	sp, r7
 801246c:	bc80      	pop	{r7}
 801246e:	4770      	bx	lr

08012470 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b084      	sub	sp, #16
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
 8012478:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d10b      	bne.n	801249c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012488:	f383 8811 	msr	BASEPRI, r3
 801248c:	f3bf 8f6f 	isb	sy
 8012490:	f3bf 8f4f 	dsb	sy
 8012494:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012496:	bf00      	nop
 8012498:	bf00      	nop
 801249a:	e7fd      	b.n	8012498 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801249c:	f002 f836 	bl	801450c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	681a      	ldr	r2, [r3, #0]
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80124a8:	68f9      	ldr	r1, [r7, #12]
 80124aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80124ac:	fb01 f303 	mul.w	r3, r1, r3
 80124b0:	441a      	add	r2, r3
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	2200      	movs	r2, #0
 80124ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	681a      	ldr	r2, [r3, #0]
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	681a      	ldr	r2, [r3, #0]
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80124cc:	3b01      	subs	r3, #1
 80124ce:	68f9      	ldr	r1, [r7, #12]
 80124d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80124d2:	fb01 f303 	mul.w	r3, r1, r3
 80124d6:	441a      	add	r2, r3
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	22ff      	movs	r2, #255	@ 0xff
 80124e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	22ff      	movs	r2, #255	@ 0xff
 80124e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d114      	bne.n	801251c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	691b      	ldr	r3, [r3, #16]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d01a      	beq.n	8012530 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	3310      	adds	r3, #16
 80124fe:	4618      	mov	r0, r3
 8012500:	f001 fad0 	bl	8013aa4 <xTaskRemoveFromEventList>
 8012504:	4603      	mov	r3, r0
 8012506:	2b00      	cmp	r3, #0
 8012508:	d012      	beq.n	8012530 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801250a:	4b0d      	ldr	r3, [pc, #52]	@ (8012540 <xQueueGenericReset+0xd0>)
 801250c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012510:	601a      	str	r2, [r3, #0]
 8012512:	f3bf 8f4f 	dsb	sy
 8012516:	f3bf 8f6f 	isb	sy
 801251a:	e009      	b.n	8012530 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	3310      	adds	r3, #16
 8012520:	4618      	mov	r0, r3
 8012522:	f7ff fef6 	bl	8012312 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	3324      	adds	r3, #36	@ 0x24
 801252a:	4618      	mov	r0, r3
 801252c:	f7ff fef1 	bl	8012312 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012530:	f002 f81c 	bl	801456c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012534:	2301      	movs	r3, #1
}
 8012536:	4618      	mov	r0, r3
 8012538:	3710      	adds	r7, #16
 801253a:	46bd      	mov	sp, r7
 801253c:	bd80      	pop	{r7, pc}
 801253e:	bf00      	nop
 8012540:	e000ed04 	.word	0xe000ed04

08012544 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012544:	b580      	push	{r7, lr}
 8012546:	b08e      	sub	sp, #56	@ 0x38
 8012548:	af02      	add	r7, sp, #8
 801254a:	60f8      	str	r0, [r7, #12]
 801254c:	60b9      	str	r1, [r7, #8]
 801254e:	607a      	str	r2, [r7, #4]
 8012550:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d10b      	bne.n	8012570 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8012558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801255c:	f383 8811 	msr	BASEPRI, r3
 8012560:	f3bf 8f6f 	isb	sy
 8012564:	f3bf 8f4f 	dsb	sy
 8012568:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801256a:	bf00      	nop
 801256c:	bf00      	nop
 801256e:	e7fd      	b.n	801256c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012570:	683b      	ldr	r3, [r7, #0]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d10b      	bne.n	801258e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8012576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801257a:	f383 8811 	msr	BASEPRI, r3
 801257e:	f3bf 8f6f 	isb	sy
 8012582:	f3bf 8f4f 	dsb	sy
 8012586:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012588:	bf00      	nop
 801258a:	bf00      	nop
 801258c:	e7fd      	b.n	801258a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d002      	beq.n	801259a <xQueueGenericCreateStatic+0x56>
 8012594:	68bb      	ldr	r3, [r7, #8]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d001      	beq.n	801259e <xQueueGenericCreateStatic+0x5a>
 801259a:	2301      	movs	r3, #1
 801259c:	e000      	b.n	80125a0 <xQueueGenericCreateStatic+0x5c>
 801259e:	2300      	movs	r3, #0
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d10b      	bne.n	80125bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80125a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125a8:	f383 8811 	msr	BASEPRI, r3
 80125ac:	f3bf 8f6f 	isb	sy
 80125b0:	f3bf 8f4f 	dsb	sy
 80125b4:	623b      	str	r3, [r7, #32]
}
 80125b6:	bf00      	nop
 80125b8:	bf00      	nop
 80125ba:	e7fd      	b.n	80125b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d102      	bne.n	80125c8 <xQueueGenericCreateStatic+0x84>
 80125c2:	68bb      	ldr	r3, [r7, #8]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d101      	bne.n	80125cc <xQueueGenericCreateStatic+0x88>
 80125c8:	2301      	movs	r3, #1
 80125ca:	e000      	b.n	80125ce <xQueueGenericCreateStatic+0x8a>
 80125cc:	2300      	movs	r3, #0
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d10b      	bne.n	80125ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80125d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125d6:	f383 8811 	msr	BASEPRI, r3
 80125da:	f3bf 8f6f 	isb	sy
 80125de:	f3bf 8f4f 	dsb	sy
 80125e2:	61fb      	str	r3, [r7, #28]
}
 80125e4:	bf00      	nop
 80125e6:	bf00      	nop
 80125e8:	e7fd      	b.n	80125e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80125ea:	2348      	movs	r3, #72	@ 0x48
 80125ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80125ee:	697b      	ldr	r3, [r7, #20]
 80125f0:	2b48      	cmp	r3, #72	@ 0x48
 80125f2:	d00b      	beq.n	801260c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80125f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125f8:	f383 8811 	msr	BASEPRI, r3
 80125fc:	f3bf 8f6f 	isb	sy
 8012600:	f3bf 8f4f 	dsb	sy
 8012604:	61bb      	str	r3, [r7, #24]
}
 8012606:	bf00      	nop
 8012608:	bf00      	nop
 801260a:	e7fd      	b.n	8012608 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8012610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012612:	2b00      	cmp	r3, #0
 8012614:	d00d      	beq.n	8012632 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012618:	2201      	movs	r2, #1
 801261a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801261e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8012622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012624:	9300      	str	r3, [sp, #0]
 8012626:	4613      	mov	r3, r2
 8012628:	687a      	ldr	r2, [r7, #4]
 801262a:	68b9      	ldr	r1, [r7, #8]
 801262c:	68f8      	ldr	r0, [r7, #12]
 801262e:	f000 f844 	bl	80126ba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8012632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8012634:	4618      	mov	r0, r3
 8012636:	3730      	adds	r7, #48	@ 0x30
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}

0801263c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801263c:	b580      	push	{r7, lr}
 801263e:	b08a      	sub	sp, #40	@ 0x28
 8012640:	af02      	add	r7, sp, #8
 8012642:	60f8      	str	r0, [r7, #12]
 8012644:	60b9      	str	r1, [r7, #8]
 8012646:	4613      	mov	r3, r2
 8012648:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d10b      	bne.n	8012668 <xQueueGenericCreate+0x2c>
	__asm volatile
 8012650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012654:	f383 8811 	msr	BASEPRI, r3
 8012658:	f3bf 8f6f 	isb	sy
 801265c:	f3bf 8f4f 	dsb	sy
 8012660:	613b      	str	r3, [r7, #16]
}
 8012662:	bf00      	nop
 8012664:	bf00      	nop
 8012666:	e7fd      	b.n	8012664 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012668:	68bb      	ldr	r3, [r7, #8]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d102      	bne.n	8012674 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801266e:	2300      	movs	r3, #0
 8012670:	61fb      	str	r3, [r7, #28]
 8012672:	e004      	b.n	801267e <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	68ba      	ldr	r2, [r7, #8]
 8012678:	fb02 f303 	mul.w	r3, r2, r3
 801267c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 801267e:	69fb      	ldr	r3, [r7, #28]
 8012680:	3348      	adds	r3, #72	@ 0x48
 8012682:	4618      	mov	r0, r3
 8012684:	f002 f844 	bl	8014710 <pvPortMalloc>
 8012688:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801268a:	69bb      	ldr	r3, [r7, #24]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d00f      	beq.n	80126b0 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8012690:	69bb      	ldr	r3, [r7, #24]
 8012692:	3348      	adds	r3, #72	@ 0x48
 8012694:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012696:	69bb      	ldr	r3, [r7, #24]
 8012698:	2200      	movs	r2, #0
 801269a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801269e:	79fa      	ldrb	r2, [r7, #7]
 80126a0:	69bb      	ldr	r3, [r7, #24]
 80126a2:	9300      	str	r3, [sp, #0]
 80126a4:	4613      	mov	r3, r2
 80126a6:	697a      	ldr	r2, [r7, #20]
 80126a8:	68b9      	ldr	r1, [r7, #8]
 80126aa:	68f8      	ldr	r0, [r7, #12]
 80126ac:	f000 f805 	bl	80126ba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80126b0:	69bb      	ldr	r3, [r7, #24]
	}
 80126b2:	4618      	mov	r0, r3
 80126b4:	3720      	adds	r7, #32
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bd80      	pop	{r7, pc}

080126ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80126ba:	b580      	push	{r7, lr}
 80126bc:	b084      	sub	sp, #16
 80126be:	af00      	add	r7, sp, #0
 80126c0:	60f8      	str	r0, [r7, #12]
 80126c2:	60b9      	str	r1, [r7, #8]
 80126c4:	607a      	str	r2, [r7, #4]
 80126c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80126c8:	68bb      	ldr	r3, [r7, #8]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d103      	bne.n	80126d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80126ce:	69bb      	ldr	r3, [r7, #24]
 80126d0:	69ba      	ldr	r2, [r7, #24]
 80126d2:	601a      	str	r2, [r3, #0]
 80126d4:	e002      	b.n	80126dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80126d6:	69bb      	ldr	r3, [r7, #24]
 80126d8:	687a      	ldr	r2, [r7, #4]
 80126da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80126dc:	69bb      	ldr	r3, [r7, #24]
 80126de:	68fa      	ldr	r2, [r7, #12]
 80126e0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80126e2:	69bb      	ldr	r3, [r7, #24]
 80126e4:	68ba      	ldr	r2, [r7, #8]
 80126e6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80126e8:	2101      	movs	r1, #1
 80126ea:	69b8      	ldr	r0, [r7, #24]
 80126ec:	f7ff fec0 	bl	8012470 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80126f0:	bf00      	nop
 80126f2:	3710      	adds	r7, #16
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}

080126f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b08e      	sub	sp, #56	@ 0x38
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	60f8      	str	r0, [r7, #12]
 8012700:	60b9      	str	r1, [r7, #8]
 8012702:	607a      	str	r2, [r7, #4]
 8012704:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012706:	2300      	movs	r3, #0
 8012708:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801270e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012710:	2b00      	cmp	r3, #0
 8012712:	d10b      	bne.n	801272c <xQueueGenericSend+0x34>
	__asm volatile
 8012714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012718:	f383 8811 	msr	BASEPRI, r3
 801271c:	f3bf 8f6f 	isb	sy
 8012720:	f3bf 8f4f 	dsb	sy
 8012724:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012726:	bf00      	nop
 8012728:	bf00      	nop
 801272a:	e7fd      	b.n	8012728 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801272c:	68bb      	ldr	r3, [r7, #8]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d103      	bne.n	801273a <xQueueGenericSend+0x42>
 8012732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012736:	2b00      	cmp	r3, #0
 8012738:	d101      	bne.n	801273e <xQueueGenericSend+0x46>
 801273a:	2301      	movs	r3, #1
 801273c:	e000      	b.n	8012740 <xQueueGenericSend+0x48>
 801273e:	2300      	movs	r3, #0
 8012740:	2b00      	cmp	r3, #0
 8012742:	d10b      	bne.n	801275c <xQueueGenericSend+0x64>
	__asm volatile
 8012744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012748:	f383 8811 	msr	BASEPRI, r3
 801274c:	f3bf 8f6f 	isb	sy
 8012750:	f3bf 8f4f 	dsb	sy
 8012754:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012756:	bf00      	nop
 8012758:	bf00      	nop
 801275a:	e7fd      	b.n	8012758 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	2b02      	cmp	r3, #2
 8012760:	d103      	bne.n	801276a <xQueueGenericSend+0x72>
 8012762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012766:	2b01      	cmp	r3, #1
 8012768:	d101      	bne.n	801276e <xQueueGenericSend+0x76>
 801276a:	2301      	movs	r3, #1
 801276c:	e000      	b.n	8012770 <xQueueGenericSend+0x78>
 801276e:	2300      	movs	r3, #0
 8012770:	2b00      	cmp	r3, #0
 8012772:	d10b      	bne.n	801278c <xQueueGenericSend+0x94>
	__asm volatile
 8012774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012778:	f383 8811 	msr	BASEPRI, r3
 801277c:	f3bf 8f6f 	isb	sy
 8012780:	f3bf 8f4f 	dsb	sy
 8012784:	623b      	str	r3, [r7, #32]
}
 8012786:	bf00      	nop
 8012788:	bf00      	nop
 801278a:	e7fd      	b.n	8012788 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801278c:	f001 fb86 	bl	8013e9c <xTaskGetSchedulerState>
 8012790:	4603      	mov	r3, r0
 8012792:	2b00      	cmp	r3, #0
 8012794:	d102      	bne.n	801279c <xQueueGenericSend+0xa4>
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d101      	bne.n	80127a0 <xQueueGenericSend+0xa8>
 801279c:	2301      	movs	r3, #1
 801279e:	e000      	b.n	80127a2 <xQueueGenericSend+0xaa>
 80127a0:	2300      	movs	r3, #0
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d10b      	bne.n	80127be <xQueueGenericSend+0xc6>
	__asm volatile
 80127a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127aa:	f383 8811 	msr	BASEPRI, r3
 80127ae:	f3bf 8f6f 	isb	sy
 80127b2:	f3bf 8f4f 	dsb	sy
 80127b6:	61fb      	str	r3, [r7, #28]
}
 80127b8:	bf00      	nop
 80127ba:	bf00      	nop
 80127bc:	e7fd      	b.n	80127ba <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80127be:	f001 fea5 	bl	801450c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80127c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80127c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80127ca:	429a      	cmp	r2, r3
 80127cc:	d302      	bcc.n	80127d4 <xQueueGenericSend+0xdc>
 80127ce:	683b      	ldr	r3, [r7, #0]
 80127d0:	2b02      	cmp	r3, #2
 80127d2:	d129      	bne.n	8012828 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80127d4:	683a      	ldr	r2, [r7, #0]
 80127d6:	68b9      	ldr	r1, [r7, #8]
 80127d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80127da:	f000 faec 	bl	8012db6 <prvCopyDataToQueue>
 80127de:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80127e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d010      	beq.n	801280a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80127e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127ea:	3324      	adds	r3, #36	@ 0x24
 80127ec:	4618      	mov	r0, r3
 80127ee:	f001 f959 	bl	8013aa4 <xTaskRemoveFromEventList>
 80127f2:	4603      	mov	r3, r0
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d013      	beq.n	8012820 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80127f8:	4b3f      	ldr	r3, [pc, #252]	@ (80128f8 <xQueueGenericSend+0x200>)
 80127fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80127fe:	601a      	str	r2, [r3, #0]
 8012800:	f3bf 8f4f 	dsb	sy
 8012804:	f3bf 8f6f 	isb	sy
 8012808:	e00a      	b.n	8012820 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801280a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801280c:	2b00      	cmp	r3, #0
 801280e:	d007      	beq.n	8012820 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012810:	4b39      	ldr	r3, [pc, #228]	@ (80128f8 <xQueueGenericSend+0x200>)
 8012812:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012816:	601a      	str	r2, [r3, #0]
 8012818:	f3bf 8f4f 	dsb	sy
 801281c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012820:	f001 fea4 	bl	801456c <vPortExitCritical>
				return pdPASS;
 8012824:	2301      	movs	r3, #1
 8012826:	e063      	b.n	80128f0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d103      	bne.n	8012836 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801282e:	f001 fe9d 	bl	801456c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012832:	2300      	movs	r3, #0
 8012834:	e05c      	b.n	80128f0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012838:	2b00      	cmp	r3, #0
 801283a:	d106      	bne.n	801284a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801283c:	f107 0314 	add.w	r3, r7, #20
 8012840:	4618      	mov	r0, r3
 8012842:	f001 f993 	bl	8013b6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012846:	2301      	movs	r3, #1
 8012848:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801284a:	f001 fe8f 	bl	801456c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801284e:	f000 ff2f 	bl	80136b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012852:	f001 fe5b 	bl	801450c <vPortEnterCritical>
 8012856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012858:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801285c:	b25b      	sxtb	r3, r3
 801285e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012862:	d103      	bne.n	801286c <xQueueGenericSend+0x174>
 8012864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012866:	2200      	movs	r2, #0
 8012868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801286c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801286e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012872:	b25b      	sxtb	r3, r3
 8012874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012878:	d103      	bne.n	8012882 <xQueueGenericSend+0x18a>
 801287a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801287c:	2200      	movs	r2, #0
 801287e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012882:	f001 fe73 	bl	801456c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012886:	1d3a      	adds	r2, r7, #4
 8012888:	f107 0314 	add.w	r3, r7, #20
 801288c:	4611      	mov	r1, r2
 801288e:	4618      	mov	r0, r3
 8012890:	f001 f982 	bl	8013b98 <xTaskCheckForTimeOut>
 8012894:	4603      	mov	r3, r0
 8012896:	2b00      	cmp	r3, #0
 8012898:	d124      	bne.n	80128e4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801289a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801289c:	f000 fb83 	bl	8012fa6 <prvIsQueueFull>
 80128a0:	4603      	mov	r3, r0
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d018      	beq.n	80128d8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80128a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128a8:	3310      	adds	r3, #16
 80128aa:	687a      	ldr	r2, [r7, #4]
 80128ac:	4611      	mov	r1, r2
 80128ae:	4618      	mov	r0, r3
 80128b0:	f001 f8d2 	bl	8013a58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80128b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80128b6:	f000 fb0e 	bl	8012ed6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80128ba:	f000 ff07 	bl	80136cc <xTaskResumeAll>
 80128be:	4603      	mov	r3, r0
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	f47f af7c 	bne.w	80127be <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80128c6:	4b0c      	ldr	r3, [pc, #48]	@ (80128f8 <xQueueGenericSend+0x200>)
 80128c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80128cc:	601a      	str	r2, [r3, #0]
 80128ce:	f3bf 8f4f 	dsb	sy
 80128d2:	f3bf 8f6f 	isb	sy
 80128d6:	e772      	b.n	80127be <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80128d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80128da:	f000 fafc 	bl	8012ed6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80128de:	f000 fef5 	bl	80136cc <xTaskResumeAll>
 80128e2:	e76c      	b.n	80127be <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80128e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80128e6:	f000 faf6 	bl	8012ed6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80128ea:	f000 feef 	bl	80136cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80128ee:	2300      	movs	r3, #0
		}
	}
}
 80128f0:	4618      	mov	r0, r3
 80128f2:	3738      	adds	r7, #56	@ 0x38
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}
 80128f8:	e000ed04 	.word	0xe000ed04

080128fc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b08e      	sub	sp, #56	@ 0x38
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
 8012904:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801290a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801290c:	2b00      	cmp	r3, #0
 801290e:	d10b      	bne.n	8012928 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8012910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012914:	f383 8811 	msr	BASEPRI, r3
 8012918:	f3bf 8f6f 	isb	sy
 801291c:	f3bf 8f4f 	dsb	sy
 8012920:	623b      	str	r3, [r7, #32]
}
 8012922:	bf00      	nop
 8012924:	bf00      	nop
 8012926:	e7fd      	b.n	8012924 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801292a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801292c:	2b00      	cmp	r3, #0
 801292e:	d00b      	beq.n	8012948 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8012930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012934:	f383 8811 	msr	BASEPRI, r3
 8012938:	f3bf 8f6f 	isb	sy
 801293c:	f3bf 8f4f 	dsb	sy
 8012940:	61fb      	str	r3, [r7, #28]
}
 8012942:	bf00      	nop
 8012944:	bf00      	nop
 8012946:	e7fd      	b.n	8012944 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8012948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	2b00      	cmp	r3, #0
 801294e:	d103      	bne.n	8012958 <xQueueGiveFromISR+0x5c>
 8012950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012952:	685b      	ldr	r3, [r3, #4]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d101      	bne.n	801295c <xQueueGiveFromISR+0x60>
 8012958:	2301      	movs	r3, #1
 801295a:	e000      	b.n	801295e <xQueueGiveFromISR+0x62>
 801295c:	2300      	movs	r3, #0
 801295e:	2b00      	cmp	r3, #0
 8012960:	d10b      	bne.n	801297a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8012962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012966:	f383 8811 	msr	BASEPRI, r3
 801296a:	f3bf 8f6f 	isb	sy
 801296e:	f3bf 8f4f 	dsb	sy
 8012972:	61bb      	str	r3, [r7, #24]
}
 8012974:	bf00      	nop
 8012976:	bf00      	nop
 8012978:	e7fd      	b.n	8012976 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801297a:	f001 fe89 	bl	8014690 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801297e:	f3ef 8211 	mrs	r2, BASEPRI
 8012982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012986:	f383 8811 	msr	BASEPRI, r3
 801298a:	f3bf 8f6f 	isb	sy
 801298e:	f3bf 8f4f 	dsb	sy
 8012992:	617a      	str	r2, [r7, #20]
 8012994:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012996:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012998:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801299a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801299c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801299e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80129a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80129a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80129a6:	429a      	cmp	r2, r3
 80129a8:	d22b      	bcs.n	8012a02 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80129aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80129b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80129b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129b6:	1c5a      	adds	r2, r3, #1
 80129b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129ba:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80129bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80129c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129c4:	d112      	bne.n	80129ec <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80129c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d016      	beq.n	80129fc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80129ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129d0:	3324      	adds	r3, #36	@ 0x24
 80129d2:	4618      	mov	r0, r3
 80129d4:	f001 f866 	bl	8013aa4 <xTaskRemoveFromEventList>
 80129d8:	4603      	mov	r3, r0
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d00e      	beq.n	80129fc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80129de:	683b      	ldr	r3, [r7, #0]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d00b      	beq.n	80129fc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80129e4:	683b      	ldr	r3, [r7, #0]
 80129e6:	2201      	movs	r2, #1
 80129e8:	601a      	str	r2, [r3, #0]
 80129ea:	e007      	b.n	80129fc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80129ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80129f0:	3301      	adds	r3, #1
 80129f2:	b2db      	uxtb	r3, r3
 80129f4:	b25a      	sxtb	r2, r3
 80129f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80129fc:	2301      	movs	r3, #1
 80129fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8012a00:	e001      	b.n	8012a06 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012a02:	2300      	movs	r3, #0
 8012a04:	637b      	str	r3, [r7, #52]	@ 0x34
 8012a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a08:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012a10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8012a14:	4618      	mov	r0, r3
 8012a16:	3738      	adds	r7, #56	@ 0x38
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	bd80      	pop	{r7, pc}

08012a1c <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b08e      	sub	sp, #56	@ 0x38
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
 8012a24:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012a26:	2300      	movs	r3, #0
 8012a28:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012a2e:	2300      	movs	r3, #0
 8012a30:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d10b      	bne.n	8012a50 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8012a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a3c:	f383 8811 	msr	BASEPRI, r3
 8012a40:	f3bf 8f6f 	isb	sy
 8012a44:	f3bf 8f4f 	dsb	sy
 8012a48:	623b      	str	r3, [r7, #32]
}
 8012a4a:	bf00      	nop
 8012a4c:	bf00      	nop
 8012a4e:	e7fd      	b.n	8012a4c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d00b      	beq.n	8012a70 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8012a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a5c:	f383 8811 	msr	BASEPRI, r3
 8012a60:	f3bf 8f6f 	isb	sy
 8012a64:	f3bf 8f4f 	dsb	sy
 8012a68:	61fb      	str	r3, [r7, #28]
}
 8012a6a:	bf00      	nop
 8012a6c:	bf00      	nop
 8012a6e:	e7fd      	b.n	8012a6c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012a70:	f001 fa14 	bl	8013e9c <xTaskGetSchedulerState>
 8012a74:	4603      	mov	r3, r0
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d102      	bne.n	8012a80 <xQueueSemaphoreTake+0x64>
 8012a7a:	683b      	ldr	r3, [r7, #0]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d101      	bne.n	8012a84 <xQueueSemaphoreTake+0x68>
 8012a80:	2301      	movs	r3, #1
 8012a82:	e000      	b.n	8012a86 <xQueueSemaphoreTake+0x6a>
 8012a84:	2300      	movs	r3, #0
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d10b      	bne.n	8012aa2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8012a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a8e:	f383 8811 	msr	BASEPRI, r3
 8012a92:	f3bf 8f6f 	isb	sy
 8012a96:	f3bf 8f4f 	dsb	sy
 8012a9a:	61bb      	str	r3, [r7, #24]
}
 8012a9c:	bf00      	nop
 8012a9e:	bf00      	nop
 8012aa0:	e7fd      	b.n	8012a9e <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8012aa2:	f001 fd33 	bl	801450c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012aaa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d024      	beq.n	8012afc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ab4:	1e5a      	subs	r2, r3, #1
 8012ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ab8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d104      	bne.n	8012acc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8012ac2:	f001 fbb9 	bl	8014238 <pvTaskIncrementMutexHeldCount>
 8012ac6:	4602      	mov	r2, r0
 8012ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012aca:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ace:	691b      	ldr	r3, [r3, #16]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d00f      	beq.n	8012af4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ad6:	3310      	adds	r3, #16
 8012ad8:	4618      	mov	r0, r3
 8012ada:	f000 ffe3 	bl	8013aa4 <xTaskRemoveFromEventList>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d007      	beq.n	8012af4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012ae4:	4b54      	ldr	r3, [pc, #336]	@ (8012c38 <xQueueSemaphoreTake+0x21c>)
 8012ae6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012aea:	601a      	str	r2, [r3, #0]
 8012aec:	f3bf 8f4f 	dsb	sy
 8012af0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012af4:	f001 fd3a 	bl	801456c <vPortExitCritical>
				return pdPASS;
 8012af8:	2301      	movs	r3, #1
 8012afa:	e098      	b.n	8012c2e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012afc:	683b      	ldr	r3, [r7, #0]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d112      	bne.n	8012b28 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d00b      	beq.n	8012b20 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8012b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b0c:	f383 8811 	msr	BASEPRI, r3
 8012b10:	f3bf 8f6f 	isb	sy
 8012b14:	f3bf 8f4f 	dsb	sy
 8012b18:	617b      	str	r3, [r7, #20]
}
 8012b1a:	bf00      	nop
 8012b1c:	bf00      	nop
 8012b1e:	e7fd      	b.n	8012b1c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012b20:	f001 fd24 	bl	801456c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012b24:	2300      	movs	r3, #0
 8012b26:	e082      	b.n	8012c2e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d106      	bne.n	8012b3c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012b2e:	f107 030c 	add.w	r3, r7, #12
 8012b32:	4618      	mov	r0, r3
 8012b34:	f001 f81a 	bl	8013b6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012b38:	2301      	movs	r3, #1
 8012b3a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012b3c:	f001 fd16 	bl	801456c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012b40:	f000 fdb6 	bl	80136b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012b44:	f001 fce2 	bl	801450c <vPortEnterCritical>
 8012b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012b4e:	b25b      	sxtb	r3, r3
 8012b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b54:	d103      	bne.n	8012b5e <xQueueSemaphoreTake+0x142>
 8012b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b58:	2200      	movs	r2, #0
 8012b5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012b64:	b25b      	sxtb	r3, r3
 8012b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b6a:	d103      	bne.n	8012b74 <xQueueSemaphoreTake+0x158>
 8012b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b6e:	2200      	movs	r2, #0
 8012b70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012b74:	f001 fcfa 	bl	801456c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012b78:	463a      	mov	r2, r7
 8012b7a:	f107 030c 	add.w	r3, r7, #12
 8012b7e:	4611      	mov	r1, r2
 8012b80:	4618      	mov	r0, r3
 8012b82:	f001 f809 	bl	8013b98 <xTaskCheckForTimeOut>
 8012b86:	4603      	mov	r3, r0
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d132      	bne.n	8012bf2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012b8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012b8e:	f000 f9f4 	bl	8012f7a <prvIsQueueEmpty>
 8012b92:	4603      	mov	r3, r0
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d026      	beq.n	8012be6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d109      	bne.n	8012bb4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8012ba0:	f001 fcb4 	bl	801450c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8012ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ba6:	685b      	ldr	r3, [r3, #4]
 8012ba8:	4618      	mov	r0, r3
 8012baa:	f001 f995 	bl	8013ed8 <xTaskPriorityInherit>
 8012bae:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8012bb0:	f001 fcdc 	bl	801456c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bb6:	3324      	adds	r3, #36	@ 0x24
 8012bb8:	683a      	ldr	r2, [r7, #0]
 8012bba:	4611      	mov	r1, r2
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	f000 ff4b 	bl	8013a58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012bc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012bc4:	f000 f987 	bl	8012ed6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012bc8:	f000 fd80 	bl	80136cc <xTaskResumeAll>
 8012bcc:	4603      	mov	r3, r0
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	f47f af67 	bne.w	8012aa2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8012bd4:	4b18      	ldr	r3, [pc, #96]	@ (8012c38 <xQueueSemaphoreTake+0x21c>)
 8012bd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012bda:	601a      	str	r2, [r3, #0]
 8012bdc:	f3bf 8f4f 	dsb	sy
 8012be0:	f3bf 8f6f 	isb	sy
 8012be4:	e75d      	b.n	8012aa2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012be6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012be8:	f000 f975 	bl	8012ed6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012bec:	f000 fd6e 	bl	80136cc <xTaskResumeAll>
 8012bf0:	e757      	b.n	8012aa2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012bf2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012bf4:	f000 f96f 	bl	8012ed6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012bf8:	f000 fd68 	bl	80136cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012bfc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012bfe:	f000 f9bc 	bl	8012f7a <prvIsQueueEmpty>
 8012c02:	4603      	mov	r3, r0
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	f43f af4c 	beq.w	8012aa2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d00d      	beq.n	8012c2c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8012c10:	f001 fc7c 	bl	801450c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012c14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012c16:	f000 f8b7 	bl	8012d88 <prvGetDisinheritPriorityAfterTimeout>
 8012c1a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8012c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c1e:	685b      	ldr	r3, [r3, #4]
 8012c20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012c22:	4618      	mov	r0, r3
 8012c24:	f001 fa66 	bl	80140f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012c28:	f001 fca0 	bl	801456c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012c2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8012c2e:	4618      	mov	r0, r3
 8012c30:	3738      	adds	r7, #56	@ 0x38
 8012c32:	46bd      	mov	sp, r7
 8012c34:	bd80      	pop	{r7, pc}
 8012c36:	bf00      	nop
 8012c38:	e000ed04 	.word	0xe000ed04

08012c3c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b08e      	sub	sp, #56	@ 0x38
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	60f8      	str	r0, [r7, #12]
 8012c44:	60b9      	str	r1, [r7, #8]
 8012c46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8012c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d10b      	bne.n	8012c6a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8012c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c56:	f383 8811 	msr	BASEPRI, r3
 8012c5a:	f3bf 8f6f 	isb	sy
 8012c5e:	f3bf 8f4f 	dsb	sy
 8012c62:	623b      	str	r3, [r7, #32]
}
 8012c64:	bf00      	nop
 8012c66:	bf00      	nop
 8012c68:	e7fd      	b.n	8012c66 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012c6a:	68bb      	ldr	r3, [r7, #8]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d103      	bne.n	8012c78 <xQueueReceiveFromISR+0x3c>
 8012c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d101      	bne.n	8012c7c <xQueueReceiveFromISR+0x40>
 8012c78:	2301      	movs	r3, #1
 8012c7a:	e000      	b.n	8012c7e <xQueueReceiveFromISR+0x42>
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d10b      	bne.n	8012c9a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8012c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c86:	f383 8811 	msr	BASEPRI, r3
 8012c8a:	f3bf 8f6f 	isb	sy
 8012c8e:	f3bf 8f4f 	dsb	sy
 8012c92:	61fb      	str	r3, [r7, #28]
}
 8012c94:	bf00      	nop
 8012c96:	bf00      	nop
 8012c98:	e7fd      	b.n	8012c96 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012c9a:	f001 fcf9 	bl	8014690 <vPortValidateInterruptPriority>
	__asm volatile
 8012c9e:	f3ef 8211 	mrs	r2, BASEPRI
 8012ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ca6:	f383 8811 	msr	BASEPRI, r3
 8012caa:	f3bf 8f6f 	isb	sy
 8012cae:	f3bf 8f4f 	dsb	sy
 8012cb2:	61ba      	str	r2, [r7, #24]
 8012cb4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012cb6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012cbe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d02f      	beq.n	8012d26 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012ccc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012cd0:	68b9      	ldr	r1, [r7, #8]
 8012cd2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012cd4:	f000 f8d9 	bl	8012e8a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cda:	1e5a      	subs	r2, r3, #1
 8012cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cde:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012ce0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ce8:	d112      	bne.n	8012d10 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cec:	691b      	ldr	r3, [r3, #16]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d016      	beq.n	8012d20 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cf4:	3310      	adds	r3, #16
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	f000 fed4 	bl	8013aa4 <xTaskRemoveFromEventList>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d00e      	beq.n	8012d20 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d00b      	beq.n	8012d20 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	2201      	movs	r2, #1
 8012d0c:	601a      	str	r2, [r3, #0]
 8012d0e:	e007      	b.n	8012d20 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012d10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d14:	3301      	adds	r3, #1
 8012d16:	b2db      	uxtb	r3, r3
 8012d18:	b25a      	sxtb	r2, r3
 8012d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8012d20:	2301      	movs	r3, #1
 8012d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8012d24:	e001      	b.n	8012d2a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8012d26:	2300      	movs	r3, #0
 8012d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8012d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d2c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012d2e:	693b      	ldr	r3, [r7, #16]
 8012d30:	f383 8811 	msr	BASEPRI, r3
}
 8012d34:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8012d38:	4618      	mov	r0, r3
 8012d3a:	3738      	adds	r7, #56	@ 0x38
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	bd80      	pop	{r7, pc}

08012d40 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b084      	sub	sp, #16
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d10b      	bne.n	8012d6a <vQueueDelete+0x2a>
	__asm volatile
 8012d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d56:	f383 8811 	msr	BASEPRI, r3
 8012d5a:	f3bf 8f6f 	isb	sy
 8012d5e:	f3bf 8f4f 	dsb	sy
 8012d62:	60bb      	str	r3, [r7, #8]
}
 8012d64:	bf00      	nop
 8012d66:	bf00      	nop
 8012d68:	e7fd      	b.n	8012d66 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012d6a:	68f8      	ldr	r0, [r7, #12]
 8012d6c:	f000 f934 	bl	8012fd8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d102      	bne.n	8012d80 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8012d7a:	68f8      	ldr	r0, [r7, #12]
 8012d7c:	f001 fd90 	bl	80148a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012d80:	bf00      	nop
 8012d82:	3710      	adds	r7, #16
 8012d84:	46bd      	mov	sp, r7
 8012d86:	bd80      	pop	{r7, pc}

08012d88 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012d88:	b480      	push	{r7}
 8012d8a:	b085      	sub	sp, #20
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d006      	beq.n	8012da6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	f1c3 0307 	rsb	r3, r3, #7
 8012da2:	60fb      	str	r3, [r7, #12]
 8012da4:	e001      	b.n	8012daa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012da6:	2300      	movs	r3, #0
 8012da8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012daa:	68fb      	ldr	r3, [r7, #12]
	}
 8012dac:	4618      	mov	r0, r3
 8012dae:	3714      	adds	r7, #20
 8012db0:	46bd      	mov	sp, r7
 8012db2:	bc80      	pop	{r7}
 8012db4:	4770      	bx	lr

08012db6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012db6:	b580      	push	{r7, lr}
 8012db8:	b086      	sub	sp, #24
 8012dba:	af00      	add	r7, sp, #0
 8012dbc:	60f8      	str	r0, [r7, #12]
 8012dbe:	60b9      	str	r1, [r7, #8]
 8012dc0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012dca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d10d      	bne.n	8012df0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d14d      	bne.n	8012e78 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	685b      	ldr	r3, [r3, #4]
 8012de0:	4618      	mov	r0, r3
 8012de2:	f001 f8ff 	bl	8013fe4 <xTaskPriorityDisinherit>
 8012de6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	2200      	movs	r2, #0
 8012dec:	605a      	str	r2, [r3, #4]
 8012dee:	e043      	b.n	8012e78 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d119      	bne.n	8012e2a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	6898      	ldr	r0, [r3, #8]
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012dfe:	461a      	mov	r2, r3
 8012e00:	68b9      	ldr	r1, [r7, #8]
 8012e02:	f001 ff71 	bl	8014ce8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	689a      	ldr	r2, [r3, #8]
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e0e:	441a      	add	r2, r3
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	689a      	ldr	r2, [r3, #8]
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	685b      	ldr	r3, [r3, #4]
 8012e1c:	429a      	cmp	r2, r3
 8012e1e:	d32b      	bcc.n	8012e78 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	681a      	ldr	r2, [r3, #0]
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	609a      	str	r2, [r3, #8]
 8012e28:	e026      	b.n	8012e78 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	68d8      	ldr	r0, [r3, #12]
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e32:	461a      	mov	r2, r3
 8012e34:	68b9      	ldr	r1, [r7, #8]
 8012e36:	f001 ff57 	bl	8014ce8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	68da      	ldr	r2, [r3, #12]
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e42:	425b      	negs	r3, r3
 8012e44:	441a      	add	r2, r3
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	68da      	ldr	r2, [r3, #12]
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	429a      	cmp	r2, r3
 8012e54:	d207      	bcs.n	8012e66 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	685a      	ldr	r2, [r3, #4]
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e5e:	425b      	negs	r3, r3
 8012e60:	441a      	add	r2, r3
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	2b02      	cmp	r3, #2
 8012e6a:	d105      	bne.n	8012e78 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012e6c:	693b      	ldr	r3, [r7, #16]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d002      	beq.n	8012e78 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012e72:	693b      	ldr	r3, [r7, #16]
 8012e74:	3b01      	subs	r3, #1
 8012e76:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012e78:	693b      	ldr	r3, [r7, #16]
 8012e7a:	1c5a      	adds	r2, r3, #1
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8012e80:	697b      	ldr	r3, [r7, #20]
}
 8012e82:	4618      	mov	r0, r3
 8012e84:	3718      	adds	r7, #24
 8012e86:	46bd      	mov	sp, r7
 8012e88:	bd80      	pop	{r7, pc}

08012e8a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012e8a:	b580      	push	{r7, lr}
 8012e8c:	b082      	sub	sp, #8
 8012e8e:	af00      	add	r7, sp, #0
 8012e90:	6078      	str	r0, [r7, #4]
 8012e92:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d018      	beq.n	8012ece <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	68da      	ldr	r2, [r3, #12]
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012ea4:	441a      	add	r2, r3
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	68da      	ldr	r2, [r3, #12]
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	685b      	ldr	r3, [r3, #4]
 8012eb2:	429a      	cmp	r2, r3
 8012eb4:	d303      	bcc.n	8012ebe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	681a      	ldr	r2, [r3, #0]
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	68d9      	ldr	r1, [r3, #12]
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012ec6:	461a      	mov	r2, r3
 8012ec8:	6838      	ldr	r0, [r7, #0]
 8012eca:	f001 ff0d 	bl	8014ce8 <memcpy>
	}
}
 8012ece:	bf00      	nop
 8012ed0:	3708      	adds	r7, #8
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	bd80      	pop	{r7, pc}

08012ed6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012ed6:	b580      	push	{r7, lr}
 8012ed8:	b084      	sub	sp, #16
 8012eda:	af00      	add	r7, sp, #0
 8012edc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012ede:	f001 fb15 	bl	801450c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012ee8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012eea:	e011      	b.n	8012f10 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d012      	beq.n	8012f1a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	3324      	adds	r3, #36	@ 0x24
 8012ef8:	4618      	mov	r0, r3
 8012efa:	f000 fdd3 	bl	8013aa4 <xTaskRemoveFromEventList>
 8012efe:	4603      	mov	r3, r0
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d001      	beq.n	8012f08 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012f04:	f000 feac 	bl	8013c60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012f08:	7bfb      	ldrb	r3, [r7, #15]
 8012f0a:	3b01      	subs	r3, #1
 8012f0c:	b2db      	uxtb	r3, r3
 8012f0e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	dce9      	bgt.n	8012eec <prvUnlockQueue+0x16>
 8012f18:	e000      	b.n	8012f1c <prvUnlockQueue+0x46>
					break;
 8012f1a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	22ff      	movs	r2, #255	@ 0xff
 8012f20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8012f24:	f001 fb22 	bl	801456c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012f28:	f001 faf0 	bl	801450c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012f32:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012f34:	e011      	b.n	8012f5a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	691b      	ldr	r3, [r3, #16]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d012      	beq.n	8012f64 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	3310      	adds	r3, #16
 8012f42:	4618      	mov	r0, r3
 8012f44:	f000 fdae 	bl	8013aa4 <xTaskRemoveFromEventList>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d001      	beq.n	8012f52 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012f4e:	f000 fe87 	bl	8013c60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012f52:	7bbb      	ldrb	r3, [r7, #14]
 8012f54:	3b01      	subs	r3, #1
 8012f56:	b2db      	uxtb	r3, r3
 8012f58:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012f5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	dce9      	bgt.n	8012f36 <prvUnlockQueue+0x60>
 8012f62:	e000      	b.n	8012f66 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012f64:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	22ff      	movs	r2, #255	@ 0xff
 8012f6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8012f6e:	f001 fafd 	bl	801456c <vPortExitCritical>
}
 8012f72:	bf00      	nop
 8012f74:	3710      	adds	r7, #16
 8012f76:	46bd      	mov	sp, r7
 8012f78:	bd80      	pop	{r7, pc}

08012f7a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012f7a:	b580      	push	{r7, lr}
 8012f7c:	b084      	sub	sp, #16
 8012f7e:	af00      	add	r7, sp, #0
 8012f80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012f82:	f001 fac3 	bl	801450c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d102      	bne.n	8012f94 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012f8e:	2301      	movs	r3, #1
 8012f90:	60fb      	str	r3, [r7, #12]
 8012f92:	e001      	b.n	8012f98 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012f94:	2300      	movs	r3, #0
 8012f96:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012f98:	f001 fae8 	bl	801456c <vPortExitCritical>

	return xReturn;
 8012f9c:	68fb      	ldr	r3, [r7, #12]
}
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	3710      	adds	r7, #16
 8012fa2:	46bd      	mov	sp, r7
 8012fa4:	bd80      	pop	{r7, pc}

08012fa6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012fa6:	b580      	push	{r7, lr}
 8012fa8:	b084      	sub	sp, #16
 8012faa:	af00      	add	r7, sp, #0
 8012fac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012fae:	f001 faad 	bl	801450c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012fba:	429a      	cmp	r2, r3
 8012fbc:	d102      	bne.n	8012fc4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012fbe:	2301      	movs	r3, #1
 8012fc0:	60fb      	str	r3, [r7, #12]
 8012fc2:	e001      	b.n	8012fc8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012fc8:	f001 fad0 	bl	801456c <vPortExitCritical>

	return xReturn;
 8012fcc:	68fb      	ldr	r3, [r7, #12]
}
 8012fce:	4618      	mov	r0, r3
 8012fd0:	3710      	adds	r7, #16
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}
	...

08012fd8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012fd8:	b480      	push	{r7}
 8012fda:	b085      	sub	sp, #20
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	60fb      	str	r3, [r7, #12]
 8012fe4:	e016      	b.n	8013014 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012fe6:	4a10      	ldr	r2, [pc, #64]	@ (8013028 <vQueueUnregisterQueue+0x50>)
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	00db      	lsls	r3, r3, #3
 8012fec:	4413      	add	r3, r2
 8012fee:	685b      	ldr	r3, [r3, #4]
 8012ff0:	687a      	ldr	r2, [r7, #4]
 8012ff2:	429a      	cmp	r2, r3
 8012ff4:	d10b      	bne.n	801300e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012ff6:	4a0c      	ldr	r2, [pc, #48]	@ (8013028 <vQueueUnregisterQueue+0x50>)
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	2100      	movs	r1, #0
 8012ffc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013000:	4a09      	ldr	r2, [pc, #36]	@ (8013028 <vQueueUnregisterQueue+0x50>)
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	00db      	lsls	r3, r3, #3
 8013006:	4413      	add	r3, r2
 8013008:	2200      	movs	r2, #0
 801300a:	605a      	str	r2, [r3, #4]
				break;
 801300c:	e006      	b.n	801301c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	3301      	adds	r3, #1
 8013012:	60fb      	str	r3, [r7, #12]
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	2b07      	cmp	r3, #7
 8013018:	d9e5      	bls.n	8012fe6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801301a:	bf00      	nop
 801301c:	bf00      	nop
 801301e:	3714      	adds	r7, #20
 8013020:	46bd      	mov	sp, r7
 8013022:	bc80      	pop	{r7}
 8013024:	4770      	bx	lr
 8013026:	bf00      	nop
 8013028:	20001368 	.word	0x20001368

0801302c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801302c:	b580      	push	{r7, lr}
 801302e:	b08e      	sub	sp, #56	@ 0x38
 8013030:	af04      	add	r7, sp, #16
 8013032:	60f8      	str	r0, [r7, #12]
 8013034:	60b9      	str	r1, [r7, #8]
 8013036:	607a      	str	r2, [r7, #4]
 8013038:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801303a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801303c:	2b00      	cmp	r3, #0
 801303e:	d10b      	bne.n	8013058 <xTaskCreateStatic+0x2c>
	__asm volatile
 8013040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013044:	f383 8811 	msr	BASEPRI, r3
 8013048:	f3bf 8f6f 	isb	sy
 801304c:	f3bf 8f4f 	dsb	sy
 8013050:	623b      	str	r3, [r7, #32]
}
 8013052:	bf00      	nop
 8013054:	bf00      	nop
 8013056:	e7fd      	b.n	8013054 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801305a:	2b00      	cmp	r3, #0
 801305c:	d10b      	bne.n	8013076 <xTaskCreateStatic+0x4a>
	__asm volatile
 801305e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013062:	f383 8811 	msr	BASEPRI, r3
 8013066:	f3bf 8f6f 	isb	sy
 801306a:	f3bf 8f4f 	dsb	sy
 801306e:	61fb      	str	r3, [r7, #28]
}
 8013070:	bf00      	nop
 8013072:	bf00      	nop
 8013074:	e7fd      	b.n	8013072 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013076:	2354      	movs	r3, #84	@ 0x54
 8013078:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801307a:	693b      	ldr	r3, [r7, #16]
 801307c:	2b54      	cmp	r3, #84	@ 0x54
 801307e:	d00b      	beq.n	8013098 <xTaskCreateStatic+0x6c>
	__asm volatile
 8013080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013084:	f383 8811 	msr	BASEPRI, r3
 8013088:	f3bf 8f6f 	isb	sy
 801308c:	f3bf 8f4f 	dsb	sy
 8013090:	61bb      	str	r3, [r7, #24]
}
 8013092:	bf00      	nop
 8013094:	bf00      	nop
 8013096:	e7fd      	b.n	8013094 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801309a:	2b00      	cmp	r3, #0
 801309c:	d01e      	beq.n	80130dc <xTaskCreateStatic+0xb0>
 801309e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d01b      	beq.n	80130dc <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80130a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130a6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80130a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80130ac:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80130ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130b0:	2202      	movs	r2, #2
 80130b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80130b6:	2300      	movs	r3, #0
 80130b8:	9303      	str	r3, [sp, #12]
 80130ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130bc:	9302      	str	r3, [sp, #8]
 80130be:	f107 0314 	add.w	r3, r7, #20
 80130c2:	9301      	str	r3, [sp, #4]
 80130c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130c6:	9300      	str	r3, [sp, #0]
 80130c8:	683b      	ldr	r3, [r7, #0]
 80130ca:	687a      	ldr	r2, [r7, #4]
 80130cc:	68b9      	ldr	r1, [r7, #8]
 80130ce:	68f8      	ldr	r0, [r7, #12]
 80130d0:	f000 f850 	bl	8013174 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80130d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80130d6:	f000 f8d5 	bl	8013284 <prvAddNewTaskToReadyList>
 80130da:	e001      	b.n	80130e0 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80130dc:	2300      	movs	r3, #0
 80130de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80130e0:	697b      	ldr	r3, [r7, #20]
	}
 80130e2:	4618      	mov	r0, r3
 80130e4:	3728      	adds	r7, #40	@ 0x28
 80130e6:	46bd      	mov	sp, r7
 80130e8:	bd80      	pop	{r7, pc}

080130ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80130ea:	b580      	push	{r7, lr}
 80130ec:	b08c      	sub	sp, #48	@ 0x30
 80130ee:	af04      	add	r7, sp, #16
 80130f0:	60f8      	str	r0, [r7, #12]
 80130f2:	60b9      	str	r1, [r7, #8]
 80130f4:	603b      	str	r3, [r7, #0]
 80130f6:	4613      	mov	r3, r2
 80130f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80130fa:	88fb      	ldrh	r3, [r7, #6]
 80130fc:	009b      	lsls	r3, r3, #2
 80130fe:	4618      	mov	r0, r3
 8013100:	f001 fb06 	bl	8014710 <pvPortMalloc>
 8013104:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013106:	697b      	ldr	r3, [r7, #20]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d00e      	beq.n	801312a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 801310c:	2054      	movs	r0, #84	@ 0x54
 801310e:	f001 faff 	bl	8014710 <pvPortMalloc>
 8013112:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013114:	69fb      	ldr	r3, [r7, #28]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d003      	beq.n	8013122 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801311a:	69fb      	ldr	r3, [r7, #28]
 801311c:	697a      	ldr	r2, [r7, #20]
 801311e:	631a      	str	r2, [r3, #48]	@ 0x30
 8013120:	e005      	b.n	801312e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013122:	6978      	ldr	r0, [r7, #20]
 8013124:	f001 fbbc 	bl	80148a0 <vPortFree>
 8013128:	e001      	b.n	801312e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801312a:	2300      	movs	r3, #0
 801312c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801312e:	69fb      	ldr	r3, [r7, #28]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d017      	beq.n	8013164 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013134:	69fb      	ldr	r3, [r7, #28]
 8013136:	2200      	movs	r2, #0
 8013138:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801313c:	88fa      	ldrh	r2, [r7, #6]
 801313e:	2300      	movs	r3, #0
 8013140:	9303      	str	r3, [sp, #12]
 8013142:	69fb      	ldr	r3, [r7, #28]
 8013144:	9302      	str	r3, [sp, #8]
 8013146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013148:	9301      	str	r3, [sp, #4]
 801314a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801314c:	9300      	str	r3, [sp, #0]
 801314e:	683b      	ldr	r3, [r7, #0]
 8013150:	68b9      	ldr	r1, [r7, #8]
 8013152:	68f8      	ldr	r0, [r7, #12]
 8013154:	f000 f80e 	bl	8013174 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013158:	69f8      	ldr	r0, [r7, #28]
 801315a:	f000 f893 	bl	8013284 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801315e:	2301      	movs	r3, #1
 8013160:	61bb      	str	r3, [r7, #24]
 8013162:	e002      	b.n	801316a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013164:	f04f 33ff 	mov.w	r3, #4294967295
 8013168:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801316a:	69bb      	ldr	r3, [r7, #24]
	}
 801316c:	4618      	mov	r0, r3
 801316e:	3720      	adds	r7, #32
 8013170:	46bd      	mov	sp, r7
 8013172:	bd80      	pop	{r7, pc}

08013174 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013174:	b580      	push	{r7, lr}
 8013176:	b088      	sub	sp, #32
 8013178:	af00      	add	r7, sp, #0
 801317a:	60f8      	str	r0, [r7, #12]
 801317c:	60b9      	str	r1, [r7, #8]
 801317e:	607a      	str	r2, [r7, #4]
 8013180:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013184:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	009b      	lsls	r3, r3, #2
 801318a:	461a      	mov	r2, r3
 801318c:	21a5      	movs	r1, #165	@ 0xa5
 801318e:	f001 fd67 	bl	8014c60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8013192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013194:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801319c:	3b01      	subs	r3, #1
 801319e:	009b      	lsls	r3, r3, #2
 80131a0:	4413      	add	r3, r2
 80131a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80131a4:	69bb      	ldr	r3, [r7, #24]
 80131a6:	f023 0307 	bic.w	r3, r3, #7
 80131aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80131ac:	69bb      	ldr	r3, [r7, #24]
 80131ae:	f003 0307 	and.w	r3, r3, #7
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d00b      	beq.n	80131ce <prvInitialiseNewTask+0x5a>
	__asm volatile
 80131b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131ba:	f383 8811 	msr	BASEPRI, r3
 80131be:	f3bf 8f6f 	isb	sy
 80131c2:	f3bf 8f4f 	dsb	sy
 80131c6:	617b      	str	r3, [r7, #20]
}
 80131c8:	bf00      	nop
 80131ca:	bf00      	nop
 80131cc:	e7fd      	b.n	80131ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80131ce:	2300      	movs	r3, #0
 80131d0:	61fb      	str	r3, [r7, #28]
 80131d2:	e012      	b.n	80131fa <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80131d4:	68ba      	ldr	r2, [r7, #8]
 80131d6:	69fb      	ldr	r3, [r7, #28]
 80131d8:	4413      	add	r3, r2
 80131da:	7819      	ldrb	r1, [r3, #0]
 80131dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80131de:	69fb      	ldr	r3, [r7, #28]
 80131e0:	4413      	add	r3, r2
 80131e2:	3334      	adds	r3, #52	@ 0x34
 80131e4:	460a      	mov	r2, r1
 80131e6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80131e8:	68ba      	ldr	r2, [r7, #8]
 80131ea:	69fb      	ldr	r3, [r7, #28]
 80131ec:	4413      	add	r3, r2
 80131ee:	781b      	ldrb	r3, [r3, #0]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d006      	beq.n	8013202 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80131f4:	69fb      	ldr	r3, [r7, #28]
 80131f6:	3301      	adds	r3, #1
 80131f8:	61fb      	str	r3, [r7, #28]
 80131fa:	69fb      	ldr	r3, [r7, #28]
 80131fc:	2b0f      	cmp	r3, #15
 80131fe:	d9e9      	bls.n	80131d4 <prvInitialiseNewTask+0x60>
 8013200:	e000      	b.n	8013204 <prvInitialiseNewTask+0x90>
		{
			break;
 8013202:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013206:	2200      	movs	r2, #0
 8013208:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801320c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801320e:	2b06      	cmp	r3, #6
 8013210:	d901      	bls.n	8013216 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013212:	2306      	movs	r3, #6
 8013214:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013218:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801321a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801321c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801321e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013220:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013224:	2200      	movs	r2, #0
 8013226:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801322a:	3304      	adds	r3, #4
 801322c:	4618      	mov	r0, r3
 801322e:	f7ff f88f 	bl	8012350 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013234:	3318      	adds	r3, #24
 8013236:	4618      	mov	r0, r3
 8013238:	f7ff f88a 	bl	8012350 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801323c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801323e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013240:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013244:	f1c3 0207 	rsb	r2, r3, #7
 8013248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801324a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801324c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801324e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013250:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013254:	2200      	movs	r2, #0
 8013256:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801325a:	2200      	movs	r2, #0
 801325c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013260:	683a      	ldr	r2, [r7, #0]
 8013262:	68f9      	ldr	r1, [r7, #12]
 8013264:	69b8      	ldr	r0, [r7, #24]
 8013266:	f001 f861 	bl	801432c <pxPortInitialiseStack>
 801326a:	4602      	mov	r2, r0
 801326c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801326e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8013270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013272:	2b00      	cmp	r3, #0
 8013274:	d002      	beq.n	801327c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013278:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801327a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801327c:	bf00      	nop
 801327e:	3720      	adds	r7, #32
 8013280:	46bd      	mov	sp, r7
 8013282:	bd80      	pop	{r7, pc}

08013284 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b082      	sub	sp, #8
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801328c:	f001 f93e 	bl	801450c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013290:	4b2a      	ldr	r3, [pc, #168]	@ (801333c <prvAddNewTaskToReadyList+0xb8>)
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	3301      	adds	r3, #1
 8013296:	4a29      	ldr	r2, [pc, #164]	@ (801333c <prvAddNewTaskToReadyList+0xb8>)
 8013298:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801329a:	4b29      	ldr	r3, [pc, #164]	@ (8013340 <prvAddNewTaskToReadyList+0xbc>)
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d109      	bne.n	80132b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80132a2:	4a27      	ldr	r2, [pc, #156]	@ (8013340 <prvAddNewTaskToReadyList+0xbc>)
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80132a8:	4b24      	ldr	r3, [pc, #144]	@ (801333c <prvAddNewTaskToReadyList+0xb8>)
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	2b01      	cmp	r3, #1
 80132ae:	d110      	bne.n	80132d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80132b0:	f000 fcfa 	bl	8013ca8 <prvInitialiseTaskLists>
 80132b4:	e00d      	b.n	80132d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80132b6:	4b23      	ldr	r3, [pc, #140]	@ (8013344 <prvAddNewTaskToReadyList+0xc0>)
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d109      	bne.n	80132d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80132be:	4b20      	ldr	r3, [pc, #128]	@ (8013340 <prvAddNewTaskToReadyList+0xbc>)
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132c8:	429a      	cmp	r2, r3
 80132ca:	d802      	bhi.n	80132d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80132cc:	4a1c      	ldr	r2, [pc, #112]	@ (8013340 <prvAddNewTaskToReadyList+0xbc>)
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80132d2:	4b1d      	ldr	r3, [pc, #116]	@ (8013348 <prvAddNewTaskToReadyList+0xc4>)
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	3301      	adds	r3, #1
 80132d8:	4a1b      	ldr	r2, [pc, #108]	@ (8013348 <prvAddNewTaskToReadyList+0xc4>)
 80132da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132e0:	2201      	movs	r2, #1
 80132e2:	409a      	lsls	r2, r3
 80132e4:	4b19      	ldr	r3, [pc, #100]	@ (801334c <prvAddNewTaskToReadyList+0xc8>)
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	4313      	orrs	r3, r2
 80132ea:	4a18      	ldr	r2, [pc, #96]	@ (801334c <prvAddNewTaskToReadyList+0xc8>)
 80132ec:	6013      	str	r3, [r2, #0]
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80132f2:	4613      	mov	r3, r2
 80132f4:	009b      	lsls	r3, r3, #2
 80132f6:	4413      	add	r3, r2
 80132f8:	009b      	lsls	r3, r3, #2
 80132fa:	4a15      	ldr	r2, [pc, #84]	@ (8013350 <prvAddNewTaskToReadyList+0xcc>)
 80132fc:	441a      	add	r2, r3
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	3304      	adds	r3, #4
 8013302:	4619      	mov	r1, r3
 8013304:	4610      	mov	r0, r2
 8013306:	f7ff f82f 	bl	8012368 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801330a:	f001 f92f 	bl	801456c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801330e:	4b0d      	ldr	r3, [pc, #52]	@ (8013344 <prvAddNewTaskToReadyList+0xc0>)
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d00e      	beq.n	8013334 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013316:	4b0a      	ldr	r3, [pc, #40]	@ (8013340 <prvAddNewTaskToReadyList+0xbc>)
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013320:	429a      	cmp	r2, r3
 8013322:	d207      	bcs.n	8013334 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013324:	4b0b      	ldr	r3, [pc, #44]	@ (8013354 <prvAddNewTaskToReadyList+0xd0>)
 8013326:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801332a:	601a      	str	r2, [r3, #0]
 801332c:	f3bf 8f4f 	dsb	sy
 8013330:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013334:	bf00      	nop
 8013336:	3708      	adds	r7, #8
 8013338:	46bd      	mov	sp, r7
 801333a:	bd80      	pop	{r7, pc}
 801333c:	200014a8 	.word	0x200014a8
 8013340:	200013a8 	.word	0x200013a8
 8013344:	200014b4 	.word	0x200014b4
 8013348:	200014c4 	.word	0x200014c4
 801334c:	200014b0 	.word	0x200014b0
 8013350:	200013ac 	.word	0x200013ac
 8013354:	e000ed04 	.word	0xe000ed04

08013358 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8013358:	b580      	push	{r7, lr}
 801335a:	b08a      	sub	sp, #40	@ 0x28
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
 8013360:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8013362:	2300      	movs	r3, #0
 8013364:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d10b      	bne.n	8013384 <vTaskDelayUntil+0x2c>
	__asm volatile
 801336c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013370:	f383 8811 	msr	BASEPRI, r3
 8013374:	f3bf 8f6f 	isb	sy
 8013378:	f3bf 8f4f 	dsb	sy
 801337c:	617b      	str	r3, [r7, #20]
}
 801337e:	bf00      	nop
 8013380:	bf00      	nop
 8013382:	e7fd      	b.n	8013380 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8013384:	683b      	ldr	r3, [r7, #0]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d10b      	bne.n	80133a2 <vTaskDelayUntil+0x4a>
	__asm volatile
 801338a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801338e:	f383 8811 	msr	BASEPRI, r3
 8013392:	f3bf 8f6f 	isb	sy
 8013396:	f3bf 8f4f 	dsb	sy
 801339a:	613b      	str	r3, [r7, #16]
}
 801339c:	bf00      	nop
 801339e:	bf00      	nop
 80133a0:	e7fd      	b.n	801339e <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 80133a2:	4b2a      	ldr	r3, [pc, #168]	@ (801344c <vTaskDelayUntil+0xf4>)
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d00b      	beq.n	80133c2 <vTaskDelayUntil+0x6a>
	__asm volatile
 80133aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133ae:	f383 8811 	msr	BASEPRI, r3
 80133b2:	f3bf 8f6f 	isb	sy
 80133b6:	f3bf 8f4f 	dsb	sy
 80133ba:	60fb      	str	r3, [r7, #12]
}
 80133bc:	bf00      	nop
 80133be:	bf00      	nop
 80133c0:	e7fd      	b.n	80133be <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 80133c2:	f000 f975 	bl	80136b0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80133c6:	4b22      	ldr	r3, [pc, #136]	@ (8013450 <vTaskDelayUntil+0xf8>)
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	683a      	ldr	r2, [r7, #0]
 80133d2:	4413      	add	r3, r2
 80133d4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	6a3a      	ldr	r2, [r7, #32]
 80133dc:	429a      	cmp	r2, r3
 80133de:	d20b      	bcs.n	80133f8 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	69fa      	ldr	r2, [r7, #28]
 80133e6:	429a      	cmp	r2, r3
 80133e8:	d211      	bcs.n	801340e <vTaskDelayUntil+0xb6>
 80133ea:	69fa      	ldr	r2, [r7, #28]
 80133ec:	6a3b      	ldr	r3, [r7, #32]
 80133ee:	429a      	cmp	r2, r3
 80133f0:	d90d      	bls.n	801340e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80133f2:	2301      	movs	r3, #1
 80133f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80133f6:	e00a      	b.n	801340e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	69fa      	ldr	r2, [r7, #28]
 80133fe:	429a      	cmp	r2, r3
 8013400:	d303      	bcc.n	801340a <vTaskDelayUntil+0xb2>
 8013402:	69fa      	ldr	r2, [r7, #28]
 8013404:	6a3b      	ldr	r3, [r7, #32]
 8013406:	429a      	cmp	r2, r3
 8013408:	d901      	bls.n	801340e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 801340a:	2301      	movs	r3, #1
 801340c:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	69fa      	ldr	r2, [r7, #28]
 8013412:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8013414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013416:	2b00      	cmp	r3, #0
 8013418:	d006      	beq.n	8013428 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801341a:	69fa      	ldr	r2, [r7, #28]
 801341c:	6a3b      	ldr	r3, [r7, #32]
 801341e:	1ad3      	subs	r3, r2, r3
 8013420:	2100      	movs	r1, #0
 8013422:	4618      	mov	r0, r3
 8013424:	f000 ff1c 	bl	8014260 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8013428:	f000 f950 	bl	80136cc <xTaskResumeAll>
 801342c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801342e:	69bb      	ldr	r3, [r7, #24]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d107      	bne.n	8013444 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8013434:	4b07      	ldr	r3, [pc, #28]	@ (8013454 <vTaskDelayUntil+0xfc>)
 8013436:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801343a:	601a      	str	r2, [r3, #0]
 801343c:	f3bf 8f4f 	dsb	sy
 8013440:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013444:	bf00      	nop
 8013446:	3728      	adds	r7, #40	@ 0x28
 8013448:	46bd      	mov	sp, r7
 801344a:	bd80      	pop	{r7, pc}
 801344c:	200014d0 	.word	0x200014d0
 8013450:	200014ac 	.word	0x200014ac
 8013454:	e000ed04 	.word	0xe000ed04

08013458 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013458:	b580      	push	{r7, lr}
 801345a:	b084      	sub	sp, #16
 801345c:	af00      	add	r7, sp, #0
 801345e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013460:	2300      	movs	r3, #0
 8013462:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d018      	beq.n	801349c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801346a:	4b14      	ldr	r3, [pc, #80]	@ (80134bc <vTaskDelay+0x64>)
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d00b      	beq.n	801348a <vTaskDelay+0x32>
	__asm volatile
 8013472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013476:	f383 8811 	msr	BASEPRI, r3
 801347a:	f3bf 8f6f 	isb	sy
 801347e:	f3bf 8f4f 	dsb	sy
 8013482:	60bb      	str	r3, [r7, #8]
}
 8013484:	bf00      	nop
 8013486:	bf00      	nop
 8013488:	e7fd      	b.n	8013486 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801348a:	f000 f911 	bl	80136b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801348e:	2100      	movs	r1, #0
 8013490:	6878      	ldr	r0, [r7, #4]
 8013492:	f000 fee5 	bl	8014260 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013496:	f000 f919 	bl	80136cc <xTaskResumeAll>
 801349a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d107      	bne.n	80134b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80134a2:	4b07      	ldr	r3, [pc, #28]	@ (80134c0 <vTaskDelay+0x68>)
 80134a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80134a8:	601a      	str	r2, [r3, #0]
 80134aa:	f3bf 8f4f 	dsb	sy
 80134ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80134b2:	bf00      	nop
 80134b4:	3710      	adds	r7, #16
 80134b6:	46bd      	mov	sp, r7
 80134b8:	bd80      	pop	{r7, pc}
 80134ba:	bf00      	nop
 80134bc:	200014d0 	.word	0x200014d0
 80134c0:	e000ed04 	.word	0xe000ed04

080134c4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b084      	sub	sp, #16
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80134cc:	f001 f81e 	bl	801450c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d102      	bne.n	80134dc <vTaskSuspend+0x18>
 80134d6:	4b3d      	ldr	r3, [pc, #244]	@ (80135cc <vTaskSuspend+0x108>)
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	e000      	b.n	80134de <vTaskSuspend+0x1a>
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	3304      	adds	r3, #4
 80134e4:	4618      	mov	r0, r3
 80134e6:	f7fe ff9a 	bl	801241e <uxListRemove>
 80134ea:	4603      	mov	r3, r0
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d115      	bne.n	801351c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80134f4:	4936      	ldr	r1, [pc, #216]	@ (80135d0 <vTaskSuspend+0x10c>)
 80134f6:	4613      	mov	r3, r2
 80134f8:	009b      	lsls	r3, r3, #2
 80134fa:	4413      	add	r3, r2
 80134fc:	009b      	lsls	r3, r3, #2
 80134fe:	440b      	add	r3, r1
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d10a      	bne.n	801351c <vTaskSuspend+0x58>
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801350a:	2201      	movs	r2, #1
 801350c:	fa02 f303 	lsl.w	r3, r2, r3
 8013510:	43da      	mvns	r2, r3
 8013512:	4b30      	ldr	r3, [pc, #192]	@ (80135d4 <vTaskSuspend+0x110>)
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	4013      	ands	r3, r2
 8013518:	4a2e      	ldr	r2, [pc, #184]	@ (80135d4 <vTaskSuspend+0x110>)
 801351a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013520:	2b00      	cmp	r3, #0
 8013522:	d004      	beq.n	801352e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	3318      	adds	r3, #24
 8013528:	4618      	mov	r0, r3
 801352a:	f7fe ff78 	bl	801241e <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	3304      	adds	r3, #4
 8013532:	4619      	mov	r1, r3
 8013534:	4828      	ldr	r0, [pc, #160]	@ (80135d8 <vTaskSuspend+0x114>)
 8013536:	f7fe ff17 	bl	8012368 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8013540:	b2db      	uxtb	r3, r3
 8013542:	2b01      	cmp	r3, #1
 8013544:	d103      	bne.n	801354e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	2200      	movs	r2, #0
 801354a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801354e:	f001 f80d 	bl	801456c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8013552:	4b22      	ldr	r3, [pc, #136]	@ (80135dc <vTaskSuspend+0x118>)
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d005      	beq.n	8013566 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801355a:	f000 ffd7 	bl	801450c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801355e:	f000 fc79 	bl	8013e54 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8013562:	f001 f803 	bl	801456c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8013566:	4b19      	ldr	r3, [pc, #100]	@ (80135cc <vTaskSuspend+0x108>)
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	68fa      	ldr	r2, [r7, #12]
 801356c:	429a      	cmp	r2, r3
 801356e:	d128      	bne.n	80135c2 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8013570:	4b1a      	ldr	r3, [pc, #104]	@ (80135dc <vTaskSuspend+0x118>)
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d018      	beq.n	80135aa <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8013578:	4b19      	ldr	r3, [pc, #100]	@ (80135e0 <vTaskSuspend+0x11c>)
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d00b      	beq.n	8013598 <vTaskSuspend+0xd4>
	__asm volatile
 8013580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013584:	f383 8811 	msr	BASEPRI, r3
 8013588:	f3bf 8f6f 	isb	sy
 801358c:	f3bf 8f4f 	dsb	sy
 8013590:	60bb      	str	r3, [r7, #8]
}
 8013592:	bf00      	nop
 8013594:	bf00      	nop
 8013596:	e7fd      	b.n	8013594 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8013598:	4b12      	ldr	r3, [pc, #72]	@ (80135e4 <vTaskSuspend+0x120>)
 801359a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801359e:	601a      	str	r2, [r3, #0]
 80135a0:	f3bf 8f4f 	dsb	sy
 80135a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80135a8:	e00b      	b.n	80135c2 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80135aa:	4b0b      	ldr	r3, [pc, #44]	@ (80135d8 <vTaskSuspend+0x114>)
 80135ac:	681a      	ldr	r2, [r3, #0]
 80135ae:	4b0e      	ldr	r3, [pc, #56]	@ (80135e8 <vTaskSuspend+0x124>)
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	429a      	cmp	r2, r3
 80135b4:	d103      	bne.n	80135be <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 80135b6:	4b05      	ldr	r3, [pc, #20]	@ (80135cc <vTaskSuspend+0x108>)
 80135b8:	2200      	movs	r2, #0
 80135ba:	601a      	str	r2, [r3, #0]
	}
 80135bc:	e001      	b.n	80135c2 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 80135be:	f000 f9ef 	bl	80139a0 <vTaskSwitchContext>
	}
 80135c2:	bf00      	nop
 80135c4:	3710      	adds	r7, #16
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd80      	pop	{r7, pc}
 80135ca:	bf00      	nop
 80135cc:	200013a8 	.word	0x200013a8
 80135d0:	200013ac 	.word	0x200013ac
 80135d4:	200014b0 	.word	0x200014b0
 80135d8:	20001494 	.word	0x20001494
 80135dc:	200014b4 	.word	0x200014b4
 80135e0:	200014d0 	.word	0x200014d0
 80135e4:	e000ed04 	.word	0xe000ed04
 80135e8:	200014a8 	.word	0x200014a8

080135ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b08a      	sub	sp, #40	@ 0x28
 80135f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80135f2:	2300      	movs	r3, #0
 80135f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80135f6:	2300      	movs	r3, #0
 80135f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80135fa:	463a      	mov	r2, r7
 80135fc:	1d39      	adds	r1, r7, #4
 80135fe:	f107 0308 	add.w	r3, r7, #8
 8013602:	4618      	mov	r0, r3
 8013604:	f7f1 fa92 	bl	8004b2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013608:	6839      	ldr	r1, [r7, #0]
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	68ba      	ldr	r2, [r7, #8]
 801360e:	9202      	str	r2, [sp, #8]
 8013610:	9301      	str	r3, [sp, #4]
 8013612:	2300      	movs	r3, #0
 8013614:	9300      	str	r3, [sp, #0]
 8013616:	2300      	movs	r3, #0
 8013618:	460a      	mov	r2, r1
 801361a:	491f      	ldr	r1, [pc, #124]	@ (8013698 <vTaskStartScheduler+0xac>)
 801361c:	481f      	ldr	r0, [pc, #124]	@ (801369c <vTaskStartScheduler+0xb0>)
 801361e:	f7ff fd05 	bl	801302c <xTaskCreateStatic>
 8013622:	4603      	mov	r3, r0
 8013624:	4a1e      	ldr	r2, [pc, #120]	@ (80136a0 <vTaskStartScheduler+0xb4>)
 8013626:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013628:	4b1d      	ldr	r3, [pc, #116]	@ (80136a0 <vTaskStartScheduler+0xb4>)
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d002      	beq.n	8013636 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013630:	2301      	movs	r3, #1
 8013632:	617b      	str	r3, [r7, #20]
 8013634:	e001      	b.n	801363a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013636:	2300      	movs	r3, #0
 8013638:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801363a:	697b      	ldr	r3, [r7, #20]
 801363c:	2b01      	cmp	r3, #1
 801363e:	d116      	bne.n	801366e <vTaskStartScheduler+0x82>
	__asm volatile
 8013640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013644:	f383 8811 	msr	BASEPRI, r3
 8013648:	f3bf 8f6f 	isb	sy
 801364c:	f3bf 8f4f 	dsb	sy
 8013650:	613b      	str	r3, [r7, #16]
}
 8013652:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013654:	4b13      	ldr	r3, [pc, #76]	@ (80136a4 <vTaskStartScheduler+0xb8>)
 8013656:	f04f 32ff 	mov.w	r2, #4294967295
 801365a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801365c:	4b12      	ldr	r3, [pc, #72]	@ (80136a8 <vTaskStartScheduler+0xbc>)
 801365e:	2201      	movs	r2, #1
 8013660:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8013662:	4b12      	ldr	r3, [pc, #72]	@ (80136ac <vTaskStartScheduler+0xc0>)
 8013664:	2200      	movs	r2, #0
 8013666:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013668:	f000 fede 	bl	8014428 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801366c:	e00f      	b.n	801368e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801366e:	697b      	ldr	r3, [r7, #20]
 8013670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013674:	d10b      	bne.n	801368e <vTaskStartScheduler+0xa2>
	__asm volatile
 8013676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801367a:	f383 8811 	msr	BASEPRI, r3
 801367e:	f3bf 8f6f 	isb	sy
 8013682:	f3bf 8f4f 	dsb	sy
 8013686:	60fb      	str	r3, [r7, #12]
}
 8013688:	bf00      	nop
 801368a:	bf00      	nop
 801368c:	e7fd      	b.n	801368a <vTaskStartScheduler+0x9e>
}
 801368e:	bf00      	nop
 8013690:	3718      	adds	r7, #24
 8013692:	46bd      	mov	sp, r7
 8013694:	bd80      	pop	{r7, pc}
 8013696:	bf00      	nop
 8013698:	080159ec 	.word	0x080159ec
 801369c:	08013c79 	.word	0x08013c79
 80136a0:	200014cc 	.word	0x200014cc
 80136a4:	200014c8 	.word	0x200014c8
 80136a8:	200014b4 	.word	0x200014b4
 80136ac:	200014ac 	.word	0x200014ac

080136b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80136b0:	b480      	push	{r7}
 80136b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80136b4:	4b04      	ldr	r3, [pc, #16]	@ (80136c8 <vTaskSuspendAll+0x18>)
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	3301      	adds	r3, #1
 80136ba:	4a03      	ldr	r2, [pc, #12]	@ (80136c8 <vTaskSuspendAll+0x18>)
 80136bc:	6013      	str	r3, [r2, #0]
}
 80136be:	bf00      	nop
 80136c0:	46bd      	mov	sp, r7
 80136c2:	bc80      	pop	{r7}
 80136c4:	4770      	bx	lr
 80136c6:	bf00      	nop
 80136c8:	200014d0 	.word	0x200014d0

080136cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b084      	sub	sp, #16
 80136d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80136d2:	2300      	movs	r3, #0
 80136d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80136d6:	2300      	movs	r3, #0
 80136d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80136da:	4b42      	ldr	r3, [pc, #264]	@ (80137e4 <xTaskResumeAll+0x118>)
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d10b      	bne.n	80136fa <xTaskResumeAll+0x2e>
	__asm volatile
 80136e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136e6:	f383 8811 	msr	BASEPRI, r3
 80136ea:	f3bf 8f6f 	isb	sy
 80136ee:	f3bf 8f4f 	dsb	sy
 80136f2:	603b      	str	r3, [r7, #0]
}
 80136f4:	bf00      	nop
 80136f6:	bf00      	nop
 80136f8:	e7fd      	b.n	80136f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80136fa:	f000 ff07 	bl	801450c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80136fe:	4b39      	ldr	r3, [pc, #228]	@ (80137e4 <xTaskResumeAll+0x118>)
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	3b01      	subs	r3, #1
 8013704:	4a37      	ldr	r2, [pc, #220]	@ (80137e4 <xTaskResumeAll+0x118>)
 8013706:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013708:	4b36      	ldr	r3, [pc, #216]	@ (80137e4 <xTaskResumeAll+0x118>)
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d161      	bne.n	80137d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013710:	4b35      	ldr	r3, [pc, #212]	@ (80137e8 <xTaskResumeAll+0x11c>)
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d05d      	beq.n	80137d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013718:	e02e      	b.n	8013778 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 801371a:	4b34      	ldr	r3, [pc, #208]	@ (80137ec <xTaskResumeAll+0x120>)
 801371c:	68db      	ldr	r3, [r3, #12]
 801371e:	68db      	ldr	r3, [r3, #12]
 8013720:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	3318      	adds	r3, #24
 8013726:	4618      	mov	r0, r3
 8013728:	f7fe fe79 	bl	801241e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	3304      	adds	r3, #4
 8013730:	4618      	mov	r0, r3
 8013732:	f7fe fe74 	bl	801241e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801373a:	2201      	movs	r2, #1
 801373c:	409a      	lsls	r2, r3
 801373e:	4b2c      	ldr	r3, [pc, #176]	@ (80137f0 <xTaskResumeAll+0x124>)
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	4313      	orrs	r3, r2
 8013744:	4a2a      	ldr	r2, [pc, #168]	@ (80137f0 <xTaskResumeAll+0x124>)
 8013746:	6013      	str	r3, [r2, #0]
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801374c:	4613      	mov	r3, r2
 801374e:	009b      	lsls	r3, r3, #2
 8013750:	4413      	add	r3, r2
 8013752:	009b      	lsls	r3, r3, #2
 8013754:	4a27      	ldr	r2, [pc, #156]	@ (80137f4 <xTaskResumeAll+0x128>)
 8013756:	441a      	add	r2, r3
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	3304      	adds	r3, #4
 801375c:	4619      	mov	r1, r3
 801375e:	4610      	mov	r0, r2
 8013760:	f7fe fe02 	bl	8012368 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013768:	4b23      	ldr	r3, [pc, #140]	@ (80137f8 <xTaskResumeAll+0x12c>)
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801376e:	429a      	cmp	r2, r3
 8013770:	d302      	bcc.n	8013778 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8013772:	4b22      	ldr	r3, [pc, #136]	@ (80137fc <xTaskResumeAll+0x130>)
 8013774:	2201      	movs	r2, #1
 8013776:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013778:	4b1c      	ldr	r3, [pc, #112]	@ (80137ec <xTaskResumeAll+0x120>)
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d1cc      	bne.n	801371a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d001      	beq.n	801378a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013786:	f000 fb65 	bl	8013e54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801378a:	4b1d      	ldr	r3, [pc, #116]	@ (8013800 <xTaskResumeAll+0x134>)
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d010      	beq.n	80137b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013796:	f000 f845 	bl	8013824 <xTaskIncrementTick>
 801379a:	4603      	mov	r3, r0
 801379c:	2b00      	cmp	r3, #0
 801379e:	d002      	beq.n	80137a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80137a0:	4b16      	ldr	r3, [pc, #88]	@ (80137fc <xTaskResumeAll+0x130>)
 80137a2:	2201      	movs	r2, #1
 80137a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	3b01      	subs	r3, #1
 80137aa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d1f1      	bne.n	8013796 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80137b2:	4b13      	ldr	r3, [pc, #76]	@ (8013800 <xTaskResumeAll+0x134>)
 80137b4:	2200      	movs	r2, #0
 80137b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80137b8:	4b10      	ldr	r3, [pc, #64]	@ (80137fc <xTaskResumeAll+0x130>)
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d009      	beq.n	80137d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80137c0:	2301      	movs	r3, #1
 80137c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80137c4:	4b0f      	ldr	r3, [pc, #60]	@ (8013804 <xTaskResumeAll+0x138>)
 80137c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80137ca:	601a      	str	r2, [r3, #0]
 80137cc:	f3bf 8f4f 	dsb	sy
 80137d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80137d4:	f000 feca 	bl	801456c <vPortExitCritical>

	return xAlreadyYielded;
 80137d8:	68bb      	ldr	r3, [r7, #8]
}
 80137da:	4618      	mov	r0, r3
 80137dc:	3710      	adds	r7, #16
 80137de:	46bd      	mov	sp, r7
 80137e0:	bd80      	pop	{r7, pc}
 80137e2:	bf00      	nop
 80137e4:	200014d0 	.word	0x200014d0
 80137e8:	200014a8 	.word	0x200014a8
 80137ec:	20001468 	.word	0x20001468
 80137f0:	200014b0 	.word	0x200014b0
 80137f4:	200013ac 	.word	0x200013ac
 80137f8:	200013a8 	.word	0x200013a8
 80137fc:	200014bc 	.word	0x200014bc
 8013800:	200014b8 	.word	0x200014b8
 8013804:	e000ed04 	.word	0xe000ed04

08013808 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013808:	b480      	push	{r7}
 801380a:	b083      	sub	sp, #12
 801380c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801380e:	4b04      	ldr	r3, [pc, #16]	@ (8013820 <xTaskGetTickCount+0x18>)
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013814:	687b      	ldr	r3, [r7, #4]
}
 8013816:	4618      	mov	r0, r3
 8013818:	370c      	adds	r7, #12
 801381a:	46bd      	mov	sp, r7
 801381c:	bc80      	pop	{r7}
 801381e:	4770      	bx	lr
 8013820:	200014ac 	.word	0x200014ac

08013824 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b086      	sub	sp, #24
 8013828:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801382a:	2300      	movs	r3, #0
 801382c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801382e:	4b51      	ldr	r3, [pc, #324]	@ (8013974 <xTaskIncrementTick+0x150>)
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	2b00      	cmp	r3, #0
 8013834:	f040 808e 	bne.w	8013954 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013838:	4b4f      	ldr	r3, [pc, #316]	@ (8013978 <xTaskIncrementTick+0x154>)
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	3301      	adds	r3, #1
 801383e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013840:	4a4d      	ldr	r2, [pc, #308]	@ (8013978 <xTaskIncrementTick+0x154>)
 8013842:	693b      	ldr	r3, [r7, #16]
 8013844:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013846:	693b      	ldr	r3, [r7, #16]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d121      	bne.n	8013890 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801384c:	4b4b      	ldr	r3, [pc, #300]	@ (801397c <xTaskIncrementTick+0x158>)
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d00b      	beq.n	801386e <xTaskIncrementTick+0x4a>
	__asm volatile
 8013856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801385a:	f383 8811 	msr	BASEPRI, r3
 801385e:	f3bf 8f6f 	isb	sy
 8013862:	f3bf 8f4f 	dsb	sy
 8013866:	603b      	str	r3, [r7, #0]
}
 8013868:	bf00      	nop
 801386a:	bf00      	nop
 801386c:	e7fd      	b.n	801386a <xTaskIncrementTick+0x46>
 801386e:	4b43      	ldr	r3, [pc, #268]	@ (801397c <xTaskIncrementTick+0x158>)
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	60fb      	str	r3, [r7, #12]
 8013874:	4b42      	ldr	r3, [pc, #264]	@ (8013980 <xTaskIncrementTick+0x15c>)
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	4a40      	ldr	r2, [pc, #256]	@ (801397c <xTaskIncrementTick+0x158>)
 801387a:	6013      	str	r3, [r2, #0]
 801387c:	4a40      	ldr	r2, [pc, #256]	@ (8013980 <xTaskIncrementTick+0x15c>)
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	6013      	str	r3, [r2, #0]
 8013882:	4b40      	ldr	r3, [pc, #256]	@ (8013984 <xTaskIncrementTick+0x160>)
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	3301      	adds	r3, #1
 8013888:	4a3e      	ldr	r2, [pc, #248]	@ (8013984 <xTaskIncrementTick+0x160>)
 801388a:	6013      	str	r3, [r2, #0]
 801388c:	f000 fae2 	bl	8013e54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013890:	4b3d      	ldr	r3, [pc, #244]	@ (8013988 <xTaskIncrementTick+0x164>)
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	693a      	ldr	r2, [r7, #16]
 8013896:	429a      	cmp	r2, r3
 8013898:	d34d      	bcc.n	8013936 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801389a:	4b38      	ldr	r3, [pc, #224]	@ (801397c <xTaskIncrementTick+0x158>)
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d101      	bne.n	80138a8 <xTaskIncrementTick+0x84>
 80138a4:	2301      	movs	r3, #1
 80138a6:	e000      	b.n	80138aa <xTaskIncrementTick+0x86>
 80138a8:	2300      	movs	r3, #0
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d004      	beq.n	80138b8 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80138ae:	4b36      	ldr	r3, [pc, #216]	@ (8013988 <xTaskIncrementTick+0x164>)
 80138b0:	f04f 32ff 	mov.w	r2, #4294967295
 80138b4:	601a      	str	r2, [r3, #0]
					break;
 80138b6:	e03e      	b.n	8013936 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80138b8:	4b30      	ldr	r3, [pc, #192]	@ (801397c <xTaskIncrementTick+0x158>)
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	68db      	ldr	r3, [r3, #12]
 80138be:	68db      	ldr	r3, [r3, #12]
 80138c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80138c2:	68bb      	ldr	r3, [r7, #8]
 80138c4:	685b      	ldr	r3, [r3, #4]
 80138c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80138c8:	693a      	ldr	r2, [r7, #16]
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	429a      	cmp	r2, r3
 80138ce:	d203      	bcs.n	80138d8 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80138d0:	4a2d      	ldr	r2, [pc, #180]	@ (8013988 <xTaskIncrementTick+0x164>)
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6013      	str	r3, [r2, #0]
						break;
 80138d6:	e02e      	b.n	8013936 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80138d8:	68bb      	ldr	r3, [r7, #8]
 80138da:	3304      	adds	r3, #4
 80138dc:	4618      	mov	r0, r3
 80138de:	f7fe fd9e 	bl	801241e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80138e2:	68bb      	ldr	r3, [r7, #8]
 80138e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d004      	beq.n	80138f4 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80138ea:	68bb      	ldr	r3, [r7, #8]
 80138ec:	3318      	adds	r3, #24
 80138ee:	4618      	mov	r0, r3
 80138f0:	f7fe fd95 	bl	801241e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80138f4:	68bb      	ldr	r3, [r7, #8]
 80138f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138f8:	2201      	movs	r2, #1
 80138fa:	409a      	lsls	r2, r3
 80138fc:	4b23      	ldr	r3, [pc, #140]	@ (801398c <xTaskIncrementTick+0x168>)
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	4313      	orrs	r3, r2
 8013902:	4a22      	ldr	r2, [pc, #136]	@ (801398c <xTaskIncrementTick+0x168>)
 8013904:	6013      	str	r3, [r2, #0]
 8013906:	68bb      	ldr	r3, [r7, #8]
 8013908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801390a:	4613      	mov	r3, r2
 801390c:	009b      	lsls	r3, r3, #2
 801390e:	4413      	add	r3, r2
 8013910:	009b      	lsls	r3, r3, #2
 8013912:	4a1f      	ldr	r2, [pc, #124]	@ (8013990 <xTaskIncrementTick+0x16c>)
 8013914:	441a      	add	r2, r3
 8013916:	68bb      	ldr	r3, [r7, #8]
 8013918:	3304      	adds	r3, #4
 801391a:	4619      	mov	r1, r3
 801391c:	4610      	mov	r0, r2
 801391e:	f7fe fd23 	bl	8012368 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013922:	68bb      	ldr	r3, [r7, #8]
 8013924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013926:	4b1b      	ldr	r3, [pc, #108]	@ (8013994 <xTaskIncrementTick+0x170>)
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801392c:	429a      	cmp	r2, r3
 801392e:	d3b4      	bcc.n	801389a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8013930:	2301      	movs	r3, #1
 8013932:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013934:	e7b1      	b.n	801389a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013936:	4b17      	ldr	r3, [pc, #92]	@ (8013994 <xTaskIncrementTick+0x170>)
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801393c:	4914      	ldr	r1, [pc, #80]	@ (8013990 <xTaskIncrementTick+0x16c>)
 801393e:	4613      	mov	r3, r2
 8013940:	009b      	lsls	r3, r3, #2
 8013942:	4413      	add	r3, r2
 8013944:	009b      	lsls	r3, r3, #2
 8013946:	440b      	add	r3, r1
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	2b01      	cmp	r3, #1
 801394c:	d907      	bls.n	801395e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 801394e:	2301      	movs	r3, #1
 8013950:	617b      	str	r3, [r7, #20]
 8013952:	e004      	b.n	801395e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013954:	4b10      	ldr	r3, [pc, #64]	@ (8013998 <xTaskIncrementTick+0x174>)
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	3301      	adds	r3, #1
 801395a:	4a0f      	ldr	r2, [pc, #60]	@ (8013998 <xTaskIncrementTick+0x174>)
 801395c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801395e:	4b0f      	ldr	r3, [pc, #60]	@ (801399c <xTaskIncrementTick+0x178>)
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d001      	beq.n	801396a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8013966:	2301      	movs	r3, #1
 8013968:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801396a:	697b      	ldr	r3, [r7, #20]
}
 801396c:	4618      	mov	r0, r3
 801396e:	3718      	adds	r7, #24
 8013970:	46bd      	mov	sp, r7
 8013972:	bd80      	pop	{r7, pc}
 8013974:	200014d0 	.word	0x200014d0
 8013978:	200014ac 	.word	0x200014ac
 801397c:	20001460 	.word	0x20001460
 8013980:	20001464 	.word	0x20001464
 8013984:	200014c0 	.word	0x200014c0
 8013988:	200014c8 	.word	0x200014c8
 801398c:	200014b0 	.word	0x200014b0
 8013990:	200013ac 	.word	0x200013ac
 8013994:	200013a8 	.word	0x200013a8
 8013998:	200014b8 	.word	0x200014b8
 801399c:	200014bc 	.word	0x200014bc

080139a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80139a0:	b480      	push	{r7}
 80139a2:	b087      	sub	sp, #28
 80139a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80139a6:	4b27      	ldr	r3, [pc, #156]	@ (8013a44 <vTaskSwitchContext+0xa4>)
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d003      	beq.n	80139b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80139ae:	4b26      	ldr	r3, [pc, #152]	@ (8013a48 <vTaskSwitchContext+0xa8>)
 80139b0:	2201      	movs	r2, #1
 80139b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80139b4:	e040      	b.n	8013a38 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80139b6:	4b24      	ldr	r3, [pc, #144]	@ (8013a48 <vTaskSwitchContext+0xa8>)
 80139b8:	2200      	movs	r2, #0
 80139ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80139bc:	4b23      	ldr	r3, [pc, #140]	@ (8013a4c <vTaskSwitchContext+0xac>)
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	fab3 f383 	clz	r3, r3
 80139c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80139ca:	7afb      	ldrb	r3, [r7, #11]
 80139cc:	f1c3 031f 	rsb	r3, r3, #31
 80139d0:	617b      	str	r3, [r7, #20]
 80139d2:	491f      	ldr	r1, [pc, #124]	@ (8013a50 <vTaskSwitchContext+0xb0>)
 80139d4:	697a      	ldr	r2, [r7, #20]
 80139d6:	4613      	mov	r3, r2
 80139d8:	009b      	lsls	r3, r3, #2
 80139da:	4413      	add	r3, r2
 80139dc:	009b      	lsls	r3, r3, #2
 80139de:	440b      	add	r3, r1
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d10b      	bne.n	80139fe <vTaskSwitchContext+0x5e>
	__asm volatile
 80139e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139ea:	f383 8811 	msr	BASEPRI, r3
 80139ee:	f3bf 8f6f 	isb	sy
 80139f2:	f3bf 8f4f 	dsb	sy
 80139f6:	607b      	str	r3, [r7, #4]
}
 80139f8:	bf00      	nop
 80139fa:	bf00      	nop
 80139fc:	e7fd      	b.n	80139fa <vTaskSwitchContext+0x5a>
 80139fe:	697a      	ldr	r2, [r7, #20]
 8013a00:	4613      	mov	r3, r2
 8013a02:	009b      	lsls	r3, r3, #2
 8013a04:	4413      	add	r3, r2
 8013a06:	009b      	lsls	r3, r3, #2
 8013a08:	4a11      	ldr	r2, [pc, #68]	@ (8013a50 <vTaskSwitchContext+0xb0>)
 8013a0a:	4413      	add	r3, r2
 8013a0c:	613b      	str	r3, [r7, #16]
 8013a0e:	693b      	ldr	r3, [r7, #16]
 8013a10:	685b      	ldr	r3, [r3, #4]
 8013a12:	685a      	ldr	r2, [r3, #4]
 8013a14:	693b      	ldr	r3, [r7, #16]
 8013a16:	605a      	str	r2, [r3, #4]
 8013a18:	693b      	ldr	r3, [r7, #16]
 8013a1a:	685a      	ldr	r2, [r3, #4]
 8013a1c:	693b      	ldr	r3, [r7, #16]
 8013a1e:	3308      	adds	r3, #8
 8013a20:	429a      	cmp	r2, r3
 8013a22:	d104      	bne.n	8013a2e <vTaskSwitchContext+0x8e>
 8013a24:	693b      	ldr	r3, [r7, #16]
 8013a26:	685b      	ldr	r3, [r3, #4]
 8013a28:	685a      	ldr	r2, [r3, #4]
 8013a2a:	693b      	ldr	r3, [r7, #16]
 8013a2c:	605a      	str	r2, [r3, #4]
 8013a2e:	693b      	ldr	r3, [r7, #16]
 8013a30:	685b      	ldr	r3, [r3, #4]
 8013a32:	68db      	ldr	r3, [r3, #12]
 8013a34:	4a07      	ldr	r2, [pc, #28]	@ (8013a54 <vTaskSwitchContext+0xb4>)
 8013a36:	6013      	str	r3, [r2, #0]
}
 8013a38:	bf00      	nop
 8013a3a:	371c      	adds	r7, #28
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	bc80      	pop	{r7}
 8013a40:	4770      	bx	lr
 8013a42:	bf00      	nop
 8013a44:	200014d0 	.word	0x200014d0
 8013a48:	200014bc 	.word	0x200014bc
 8013a4c:	200014b0 	.word	0x200014b0
 8013a50:	200013ac 	.word	0x200013ac
 8013a54:	200013a8 	.word	0x200013a8

08013a58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b084      	sub	sp, #16
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	6078      	str	r0, [r7, #4]
 8013a60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d10b      	bne.n	8013a80 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8013a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a6c:	f383 8811 	msr	BASEPRI, r3
 8013a70:	f3bf 8f6f 	isb	sy
 8013a74:	f3bf 8f4f 	dsb	sy
 8013a78:	60fb      	str	r3, [r7, #12]
}
 8013a7a:	bf00      	nop
 8013a7c:	bf00      	nop
 8013a7e:	e7fd      	b.n	8013a7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013a80:	4b07      	ldr	r3, [pc, #28]	@ (8013aa0 <vTaskPlaceOnEventList+0x48>)
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	3318      	adds	r3, #24
 8013a86:	4619      	mov	r1, r3
 8013a88:	6878      	ldr	r0, [r7, #4]
 8013a8a:	f7fe fc90 	bl	80123ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013a8e:	2101      	movs	r1, #1
 8013a90:	6838      	ldr	r0, [r7, #0]
 8013a92:	f000 fbe5 	bl	8014260 <prvAddCurrentTaskToDelayedList>
}
 8013a96:	bf00      	nop
 8013a98:	3710      	adds	r7, #16
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	bd80      	pop	{r7, pc}
 8013a9e:	bf00      	nop
 8013aa0:	200013a8 	.word	0x200013a8

08013aa4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b086      	sub	sp, #24
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	68db      	ldr	r3, [r3, #12]
 8013ab0:	68db      	ldr	r3, [r3, #12]
 8013ab2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013ab4:	693b      	ldr	r3, [r7, #16]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d10b      	bne.n	8013ad2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8013aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013abe:	f383 8811 	msr	BASEPRI, r3
 8013ac2:	f3bf 8f6f 	isb	sy
 8013ac6:	f3bf 8f4f 	dsb	sy
 8013aca:	60fb      	str	r3, [r7, #12]
}
 8013acc:	bf00      	nop
 8013ace:	bf00      	nop
 8013ad0:	e7fd      	b.n	8013ace <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013ad2:	693b      	ldr	r3, [r7, #16]
 8013ad4:	3318      	adds	r3, #24
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	f7fe fca1 	bl	801241e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013adc:	4b1d      	ldr	r3, [pc, #116]	@ (8013b54 <xTaskRemoveFromEventList+0xb0>)
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d11c      	bne.n	8013b1e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013ae4:	693b      	ldr	r3, [r7, #16]
 8013ae6:	3304      	adds	r3, #4
 8013ae8:	4618      	mov	r0, r3
 8013aea:	f7fe fc98 	bl	801241e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013aee:	693b      	ldr	r3, [r7, #16]
 8013af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013af2:	2201      	movs	r2, #1
 8013af4:	409a      	lsls	r2, r3
 8013af6:	4b18      	ldr	r3, [pc, #96]	@ (8013b58 <xTaskRemoveFromEventList+0xb4>)
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	4313      	orrs	r3, r2
 8013afc:	4a16      	ldr	r2, [pc, #88]	@ (8013b58 <xTaskRemoveFromEventList+0xb4>)
 8013afe:	6013      	str	r3, [r2, #0]
 8013b00:	693b      	ldr	r3, [r7, #16]
 8013b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b04:	4613      	mov	r3, r2
 8013b06:	009b      	lsls	r3, r3, #2
 8013b08:	4413      	add	r3, r2
 8013b0a:	009b      	lsls	r3, r3, #2
 8013b0c:	4a13      	ldr	r2, [pc, #76]	@ (8013b5c <xTaskRemoveFromEventList+0xb8>)
 8013b0e:	441a      	add	r2, r3
 8013b10:	693b      	ldr	r3, [r7, #16]
 8013b12:	3304      	adds	r3, #4
 8013b14:	4619      	mov	r1, r3
 8013b16:	4610      	mov	r0, r2
 8013b18:	f7fe fc26 	bl	8012368 <vListInsertEnd>
 8013b1c:	e005      	b.n	8013b2a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013b1e:	693b      	ldr	r3, [r7, #16]
 8013b20:	3318      	adds	r3, #24
 8013b22:	4619      	mov	r1, r3
 8013b24:	480e      	ldr	r0, [pc, #56]	@ (8013b60 <xTaskRemoveFromEventList+0xbc>)
 8013b26:	f7fe fc1f 	bl	8012368 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013b2a:	693b      	ldr	r3, [r7, #16]
 8013b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8013b64 <xTaskRemoveFromEventList+0xc0>)
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b34:	429a      	cmp	r2, r3
 8013b36:	d905      	bls.n	8013b44 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013b38:	2301      	movs	r3, #1
 8013b3a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8013b68 <xTaskRemoveFromEventList+0xc4>)
 8013b3e:	2201      	movs	r2, #1
 8013b40:	601a      	str	r2, [r3, #0]
 8013b42:	e001      	b.n	8013b48 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8013b44:	2300      	movs	r3, #0
 8013b46:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8013b48:	697b      	ldr	r3, [r7, #20]
}
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	3718      	adds	r7, #24
 8013b4e:	46bd      	mov	sp, r7
 8013b50:	bd80      	pop	{r7, pc}
 8013b52:	bf00      	nop
 8013b54:	200014d0 	.word	0x200014d0
 8013b58:	200014b0 	.word	0x200014b0
 8013b5c:	200013ac 	.word	0x200013ac
 8013b60:	20001468 	.word	0x20001468
 8013b64:	200013a8 	.word	0x200013a8
 8013b68:	200014bc 	.word	0x200014bc

08013b6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013b6c:	b480      	push	{r7}
 8013b6e:	b083      	sub	sp, #12
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013b74:	4b06      	ldr	r3, [pc, #24]	@ (8013b90 <vTaskInternalSetTimeOutState+0x24>)
 8013b76:	681a      	ldr	r2, [r3, #0]
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013b7c:	4b05      	ldr	r3, [pc, #20]	@ (8013b94 <vTaskInternalSetTimeOutState+0x28>)
 8013b7e:	681a      	ldr	r2, [r3, #0]
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	605a      	str	r2, [r3, #4]
}
 8013b84:	bf00      	nop
 8013b86:	370c      	adds	r7, #12
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	bc80      	pop	{r7}
 8013b8c:	4770      	bx	lr
 8013b8e:	bf00      	nop
 8013b90:	200014c0 	.word	0x200014c0
 8013b94:	200014ac 	.word	0x200014ac

08013b98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b088      	sub	sp, #32
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
 8013ba0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d10b      	bne.n	8013bc0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8013ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bac:	f383 8811 	msr	BASEPRI, r3
 8013bb0:	f3bf 8f6f 	isb	sy
 8013bb4:	f3bf 8f4f 	dsb	sy
 8013bb8:	613b      	str	r3, [r7, #16]
}
 8013bba:	bf00      	nop
 8013bbc:	bf00      	nop
 8013bbe:	e7fd      	b.n	8013bbc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8013bc0:	683b      	ldr	r3, [r7, #0]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d10b      	bne.n	8013bde <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8013bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bca:	f383 8811 	msr	BASEPRI, r3
 8013bce:	f3bf 8f6f 	isb	sy
 8013bd2:	f3bf 8f4f 	dsb	sy
 8013bd6:	60fb      	str	r3, [r7, #12]
}
 8013bd8:	bf00      	nop
 8013bda:	bf00      	nop
 8013bdc:	e7fd      	b.n	8013bda <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8013bde:	f000 fc95 	bl	801450c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013be2:	4b1d      	ldr	r3, [pc, #116]	@ (8013c58 <xTaskCheckForTimeOut+0xc0>)
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	685b      	ldr	r3, [r3, #4]
 8013bec:	69ba      	ldr	r2, [r7, #24]
 8013bee:	1ad3      	subs	r3, r2, r3
 8013bf0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013bf2:	683b      	ldr	r3, [r7, #0]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bfa:	d102      	bne.n	8013c02 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	61fb      	str	r3, [r7, #28]
 8013c00:	e023      	b.n	8013c4a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	681a      	ldr	r2, [r3, #0]
 8013c06:	4b15      	ldr	r3, [pc, #84]	@ (8013c5c <xTaskCheckForTimeOut+0xc4>)
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	429a      	cmp	r2, r3
 8013c0c:	d007      	beq.n	8013c1e <xTaskCheckForTimeOut+0x86>
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	685b      	ldr	r3, [r3, #4]
 8013c12:	69ba      	ldr	r2, [r7, #24]
 8013c14:	429a      	cmp	r2, r3
 8013c16:	d302      	bcc.n	8013c1e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013c18:	2301      	movs	r3, #1
 8013c1a:	61fb      	str	r3, [r7, #28]
 8013c1c:	e015      	b.n	8013c4a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013c1e:	683b      	ldr	r3, [r7, #0]
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	697a      	ldr	r2, [r7, #20]
 8013c24:	429a      	cmp	r2, r3
 8013c26:	d20b      	bcs.n	8013c40 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013c28:	683b      	ldr	r3, [r7, #0]
 8013c2a:	681a      	ldr	r2, [r3, #0]
 8013c2c:	697b      	ldr	r3, [r7, #20]
 8013c2e:	1ad2      	subs	r2, r2, r3
 8013c30:	683b      	ldr	r3, [r7, #0]
 8013c32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013c34:	6878      	ldr	r0, [r7, #4]
 8013c36:	f7ff ff99 	bl	8013b6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	61fb      	str	r3, [r7, #28]
 8013c3e:	e004      	b.n	8013c4a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8013c40:	683b      	ldr	r3, [r7, #0]
 8013c42:	2200      	movs	r2, #0
 8013c44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013c46:	2301      	movs	r3, #1
 8013c48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013c4a:	f000 fc8f 	bl	801456c <vPortExitCritical>

	return xReturn;
 8013c4e:	69fb      	ldr	r3, [r7, #28]
}
 8013c50:	4618      	mov	r0, r3
 8013c52:	3720      	adds	r7, #32
 8013c54:	46bd      	mov	sp, r7
 8013c56:	bd80      	pop	{r7, pc}
 8013c58:	200014ac 	.word	0x200014ac
 8013c5c:	200014c0 	.word	0x200014c0

08013c60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013c60:	b480      	push	{r7}
 8013c62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013c64:	4b03      	ldr	r3, [pc, #12]	@ (8013c74 <vTaskMissedYield+0x14>)
 8013c66:	2201      	movs	r2, #1
 8013c68:	601a      	str	r2, [r3, #0]
}
 8013c6a:	bf00      	nop
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	bc80      	pop	{r7}
 8013c70:	4770      	bx	lr
 8013c72:	bf00      	nop
 8013c74:	200014bc 	.word	0x200014bc

08013c78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013c78:	b580      	push	{r7, lr}
 8013c7a:	b082      	sub	sp, #8
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013c80:	f000 f852 	bl	8013d28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013c84:	4b06      	ldr	r3, [pc, #24]	@ (8013ca0 <prvIdleTask+0x28>)
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	2b01      	cmp	r3, #1
 8013c8a:	d9f9      	bls.n	8013c80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013c8c:	4b05      	ldr	r3, [pc, #20]	@ (8013ca4 <prvIdleTask+0x2c>)
 8013c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013c92:	601a      	str	r2, [r3, #0]
 8013c94:	f3bf 8f4f 	dsb	sy
 8013c98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013c9c:	e7f0      	b.n	8013c80 <prvIdleTask+0x8>
 8013c9e:	bf00      	nop
 8013ca0:	200013ac 	.word	0x200013ac
 8013ca4:	e000ed04 	.word	0xe000ed04

08013ca8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b082      	sub	sp, #8
 8013cac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013cae:	2300      	movs	r3, #0
 8013cb0:	607b      	str	r3, [r7, #4]
 8013cb2:	e00c      	b.n	8013cce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013cb4:	687a      	ldr	r2, [r7, #4]
 8013cb6:	4613      	mov	r3, r2
 8013cb8:	009b      	lsls	r3, r3, #2
 8013cba:	4413      	add	r3, r2
 8013cbc:	009b      	lsls	r3, r3, #2
 8013cbe:	4a12      	ldr	r2, [pc, #72]	@ (8013d08 <prvInitialiseTaskLists+0x60>)
 8013cc0:	4413      	add	r3, r2
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	f7fe fb25 	bl	8012312 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	3301      	adds	r3, #1
 8013ccc:	607b      	str	r3, [r7, #4]
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	2b06      	cmp	r3, #6
 8013cd2:	d9ef      	bls.n	8013cb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013cd4:	480d      	ldr	r0, [pc, #52]	@ (8013d0c <prvInitialiseTaskLists+0x64>)
 8013cd6:	f7fe fb1c 	bl	8012312 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013cda:	480d      	ldr	r0, [pc, #52]	@ (8013d10 <prvInitialiseTaskLists+0x68>)
 8013cdc:	f7fe fb19 	bl	8012312 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013ce0:	480c      	ldr	r0, [pc, #48]	@ (8013d14 <prvInitialiseTaskLists+0x6c>)
 8013ce2:	f7fe fb16 	bl	8012312 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013ce6:	480c      	ldr	r0, [pc, #48]	@ (8013d18 <prvInitialiseTaskLists+0x70>)
 8013ce8:	f7fe fb13 	bl	8012312 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013cec:	480b      	ldr	r0, [pc, #44]	@ (8013d1c <prvInitialiseTaskLists+0x74>)
 8013cee:	f7fe fb10 	bl	8012312 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8013d20 <prvInitialiseTaskLists+0x78>)
 8013cf4:	4a05      	ldr	r2, [pc, #20]	@ (8013d0c <prvInitialiseTaskLists+0x64>)
 8013cf6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8013d24 <prvInitialiseTaskLists+0x7c>)
 8013cfa:	4a05      	ldr	r2, [pc, #20]	@ (8013d10 <prvInitialiseTaskLists+0x68>)
 8013cfc:	601a      	str	r2, [r3, #0]
}
 8013cfe:	bf00      	nop
 8013d00:	3708      	adds	r7, #8
 8013d02:	46bd      	mov	sp, r7
 8013d04:	bd80      	pop	{r7, pc}
 8013d06:	bf00      	nop
 8013d08:	200013ac 	.word	0x200013ac
 8013d0c:	20001438 	.word	0x20001438
 8013d10:	2000144c 	.word	0x2000144c
 8013d14:	20001468 	.word	0x20001468
 8013d18:	2000147c 	.word	0x2000147c
 8013d1c:	20001494 	.word	0x20001494
 8013d20:	20001460 	.word	0x20001460
 8013d24:	20001464 	.word	0x20001464

08013d28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b082      	sub	sp, #8
 8013d2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013d2e:	e019      	b.n	8013d64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013d30:	f000 fbec 	bl	801450c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8013d34:	4b10      	ldr	r3, [pc, #64]	@ (8013d78 <prvCheckTasksWaitingTermination+0x50>)
 8013d36:	68db      	ldr	r3, [r3, #12]
 8013d38:	68db      	ldr	r3, [r3, #12]
 8013d3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	3304      	adds	r3, #4
 8013d40:	4618      	mov	r0, r3
 8013d42:	f7fe fb6c 	bl	801241e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013d46:	4b0d      	ldr	r3, [pc, #52]	@ (8013d7c <prvCheckTasksWaitingTermination+0x54>)
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	3b01      	subs	r3, #1
 8013d4c:	4a0b      	ldr	r2, [pc, #44]	@ (8013d7c <prvCheckTasksWaitingTermination+0x54>)
 8013d4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013d50:	4b0b      	ldr	r3, [pc, #44]	@ (8013d80 <prvCheckTasksWaitingTermination+0x58>)
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	3b01      	subs	r3, #1
 8013d56:	4a0a      	ldr	r2, [pc, #40]	@ (8013d80 <prvCheckTasksWaitingTermination+0x58>)
 8013d58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013d5a:	f000 fc07 	bl	801456c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013d5e:	6878      	ldr	r0, [r7, #4]
 8013d60:	f000 f848 	bl	8013df4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013d64:	4b06      	ldr	r3, [pc, #24]	@ (8013d80 <prvCheckTasksWaitingTermination+0x58>)
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d1e1      	bne.n	8013d30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013d6c:	bf00      	nop
 8013d6e:	bf00      	nop
 8013d70:	3708      	adds	r7, #8
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd80      	pop	{r7, pc}
 8013d76:	bf00      	nop
 8013d78:	2000147c 	.word	0x2000147c
 8013d7c:	200014a8 	.word	0x200014a8
 8013d80:	20001490 	.word	0x20001490

08013d84 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8013d84:	b480      	push	{r7}
 8013d86:	b085      	sub	sp, #20
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8013d90:	e005      	b.n	8013d9e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	3301      	adds	r3, #1
 8013d96:	607b      	str	r3, [r7, #4]
			ulCount++;
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	3301      	adds	r3, #1
 8013d9c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	781b      	ldrb	r3, [r3, #0]
 8013da2:	2ba5      	cmp	r3, #165	@ 0xa5
 8013da4:	d0f5      	beq.n	8013d92 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	089b      	lsrs	r3, r3, #2
 8013daa:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	b29b      	uxth	r3, r3
	}
 8013db0:	4618      	mov	r0, r3
 8013db2:	3714      	adds	r7, #20
 8013db4:	46bd      	mov	sp, r7
 8013db6:	bc80      	pop	{r7}
 8013db8:	4770      	bx	lr
	...

08013dbc <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b086      	sub	sp, #24
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d102      	bne.n	8013dd0 <uxTaskGetStackHighWaterMark+0x14>
 8013dca:	4b09      	ldr	r3, [pc, #36]	@ (8013df0 <uxTaskGetStackHighWaterMark+0x34>)
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	e000      	b.n	8013dd2 <uxTaskGetStackHighWaterMark+0x16>
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8013dd4:	697b      	ldr	r3, [r7, #20]
 8013dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013dd8:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8013dda:	6938      	ldr	r0, [r7, #16]
 8013ddc:	f7ff ffd2 	bl	8013d84 <prvTaskCheckFreeStackSpace>
 8013de0:	4603      	mov	r3, r0
 8013de2:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8013de4:	68fb      	ldr	r3, [r7, #12]
	}
 8013de6:	4618      	mov	r0, r3
 8013de8:	3718      	adds	r7, #24
 8013dea:	46bd      	mov	sp, r7
 8013dec:	bd80      	pop	{r7, pc}
 8013dee:	bf00      	nop
 8013df0:	200013a8 	.word	0x200013a8

08013df4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b084      	sub	sp, #16
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d108      	bne.n	8013e18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	f000 fd48 	bl	80148a0 <vPortFree>
				vPortFree( pxTCB );
 8013e10:	6878      	ldr	r0, [r7, #4]
 8013e12:	f000 fd45 	bl	80148a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013e16:	e019      	b.n	8013e4c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8013e1e:	2b01      	cmp	r3, #1
 8013e20:	d103      	bne.n	8013e2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013e22:	6878      	ldr	r0, [r7, #4]
 8013e24:	f000 fd3c 	bl	80148a0 <vPortFree>
	}
 8013e28:	e010      	b.n	8013e4c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8013e30:	2b02      	cmp	r3, #2
 8013e32:	d00b      	beq.n	8013e4c <prvDeleteTCB+0x58>
	__asm volatile
 8013e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e38:	f383 8811 	msr	BASEPRI, r3
 8013e3c:	f3bf 8f6f 	isb	sy
 8013e40:	f3bf 8f4f 	dsb	sy
 8013e44:	60fb      	str	r3, [r7, #12]
}
 8013e46:	bf00      	nop
 8013e48:	bf00      	nop
 8013e4a:	e7fd      	b.n	8013e48 <prvDeleteTCB+0x54>
	}
 8013e4c:	bf00      	nop
 8013e4e:	3710      	adds	r7, #16
 8013e50:	46bd      	mov	sp, r7
 8013e52:	bd80      	pop	{r7, pc}

08013e54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013e54:	b480      	push	{r7}
 8013e56:	b083      	sub	sp, #12
 8013e58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8013e94 <prvResetNextTaskUnblockTime+0x40>)
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d101      	bne.n	8013e68 <prvResetNextTaskUnblockTime+0x14>
 8013e64:	2301      	movs	r3, #1
 8013e66:	e000      	b.n	8013e6a <prvResetNextTaskUnblockTime+0x16>
 8013e68:	2300      	movs	r3, #0
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d004      	beq.n	8013e78 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8013e98 <prvResetNextTaskUnblockTime+0x44>)
 8013e70:	f04f 32ff 	mov.w	r2, #4294967295
 8013e74:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013e76:	e008      	b.n	8013e8a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013e78:	4b06      	ldr	r3, [pc, #24]	@ (8013e94 <prvResetNextTaskUnblockTime+0x40>)
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	68db      	ldr	r3, [r3, #12]
 8013e7e:	68db      	ldr	r3, [r3, #12]
 8013e80:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	685b      	ldr	r3, [r3, #4]
 8013e86:	4a04      	ldr	r2, [pc, #16]	@ (8013e98 <prvResetNextTaskUnblockTime+0x44>)
 8013e88:	6013      	str	r3, [r2, #0]
}
 8013e8a:	bf00      	nop
 8013e8c:	370c      	adds	r7, #12
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	bc80      	pop	{r7}
 8013e92:	4770      	bx	lr
 8013e94:	20001460 	.word	0x20001460
 8013e98:	200014c8 	.word	0x200014c8

08013e9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013e9c:	b480      	push	{r7}
 8013e9e:	b083      	sub	sp, #12
 8013ea0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8013ed0 <xTaskGetSchedulerState+0x34>)
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d102      	bne.n	8013eb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013eaa:	2301      	movs	r3, #1
 8013eac:	607b      	str	r3, [r7, #4]
 8013eae:	e008      	b.n	8013ec2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013eb0:	4b08      	ldr	r3, [pc, #32]	@ (8013ed4 <xTaskGetSchedulerState+0x38>)
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d102      	bne.n	8013ebe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013eb8:	2302      	movs	r3, #2
 8013eba:	607b      	str	r3, [r7, #4]
 8013ebc:	e001      	b.n	8013ec2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013ec2:	687b      	ldr	r3, [r7, #4]
	}
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	370c      	adds	r7, #12
 8013ec8:	46bd      	mov	sp, r7
 8013eca:	bc80      	pop	{r7}
 8013ecc:	4770      	bx	lr
 8013ece:	bf00      	nop
 8013ed0:	200014b4 	.word	0x200014b4
 8013ed4:	200014d0 	.word	0x200014d0

08013ed8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b084      	sub	sp, #16
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d06e      	beq.n	8013fcc <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013eee:	68bb      	ldr	r3, [r7, #8]
 8013ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013ef2:	4b39      	ldr	r3, [pc, #228]	@ (8013fd8 <xTaskPriorityInherit+0x100>)
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ef8:	429a      	cmp	r2, r3
 8013efa:	d25e      	bcs.n	8013fba <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013efc:	68bb      	ldr	r3, [r7, #8]
 8013efe:	699b      	ldr	r3, [r3, #24]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	db06      	blt.n	8013f12 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f04:	4b34      	ldr	r3, [pc, #208]	@ (8013fd8 <xTaskPriorityInherit+0x100>)
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f0a:	f1c3 0207 	rsb	r2, r3, #7
 8013f0e:	68bb      	ldr	r3, [r7, #8]
 8013f10:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013f12:	68bb      	ldr	r3, [r7, #8]
 8013f14:	6959      	ldr	r1, [r3, #20]
 8013f16:	68bb      	ldr	r3, [r7, #8]
 8013f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f1a:	4613      	mov	r3, r2
 8013f1c:	009b      	lsls	r3, r3, #2
 8013f1e:	4413      	add	r3, r2
 8013f20:	009b      	lsls	r3, r3, #2
 8013f22:	4a2e      	ldr	r2, [pc, #184]	@ (8013fdc <xTaskPriorityInherit+0x104>)
 8013f24:	4413      	add	r3, r2
 8013f26:	4299      	cmp	r1, r3
 8013f28:	d101      	bne.n	8013f2e <xTaskPriorityInherit+0x56>
 8013f2a:	2301      	movs	r3, #1
 8013f2c:	e000      	b.n	8013f30 <xTaskPriorityInherit+0x58>
 8013f2e:	2300      	movs	r3, #0
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d03a      	beq.n	8013faa <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013f34:	68bb      	ldr	r3, [r7, #8]
 8013f36:	3304      	adds	r3, #4
 8013f38:	4618      	mov	r0, r3
 8013f3a:	f7fe fa70 	bl	801241e <uxListRemove>
 8013f3e:	4603      	mov	r3, r0
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d115      	bne.n	8013f70 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8013f44:	68bb      	ldr	r3, [r7, #8]
 8013f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f48:	4924      	ldr	r1, [pc, #144]	@ (8013fdc <xTaskPriorityInherit+0x104>)
 8013f4a:	4613      	mov	r3, r2
 8013f4c:	009b      	lsls	r3, r3, #2
 8013f4e:	4413      	add	r3, r2
 8013f50:	009b      	lsls	r3, r3, #2
 8013f52:	440b      	add	r3, r1
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d10a      	bne.n	8013f70 <xTaskPriorityInherit+0x98>
 8013f5a:	68bb      	ldr	r3, [r7, #8]
 8013f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f5e:	2201      	movs	r2, #1
 8013f60:	fa02 f303 	lsl.w	r3, r2, r3
 8013f64:	43da      	mvns	r2, r3
 8013f66:	4b1e      	ldr	r3, [pc, #120]	@ (8013fe0 <xTaskPriorityInherit+0x108>)
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	4013      	ands	r3, r2
 8013f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8013fe0 <xTaskPriorityInherit+0x108>)
 8013f6e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013f70:	4b19      	ldr	r3, [pc, #100]	@ (8013fd8 <xTaskPriorityInherit+0x100>)
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f76:	68bb      	ldr	r3, [r7, #8]
 8013f78:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013f7a:	68bb      	ldr	r3, [r7, #8]
 8013f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f7e:	2201      	movs	r2, #1
 8013f80:	409a      	lsls	r2, r3
 8013f82:	4b17      	ldr	r3, [pc, #92]	@ (8013fe0 <xTaskPriorityInherit+0x108>)
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	4313      	orrs	r3, r2
 8013f88:	4a15      	ldr	r2, [pc, #84]	@ (8013fe0 <xTaskPriorityInherit+0x108>)
 8013f8a:	6013      	str	r3, [r2, #0]
 8013f8c:	68bb      	ldr	r3, [r7, #8]
 8013f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f90:	4613      	mov	r3, r2
 8013f92:	009b      	lsls	r3, r3, #2
 8013f94:	4413      	add	r3, r2
 8013f96:	009b      	lsls	r3, r3, #2
 8013f98:	4a10      	ldr	r2, [pc, #64]	@ (8013fdc <xTaskPriorityInherit+0x104>)
 8013f9a:	441a      	add	r2, r3
 8013f9c:	68bb      	ldr	r3, [r7, #8]
 8013f9e:	3304      	adds	r3, #4
 8013fa0:	4619      	mov	r1, r3
 8013fa2:	4610      	mov	r0, r2
 8013fa4:	f7fe f9e0 	bl	8012368 <vListInsertEnd>
 8013fa8:	e004      	b.n	8013fb4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013faa:	4b0b      	ldr	r3, [pc, #44]	@ (8013fd8 <xTaskPriorityInherit+0x100>)
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013fb0:	68bb      	ldr	r3, [r7, #8]
 8013fb2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013fb4:	2301      	movs	r3, #1
 8013fb6:	60fb      	str	r3, [r7, #12]
 8013fb8:	e008      	b.n	8013fcc <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013fba:	68bb      	ldr	r3, [r7, #8]
 8013fbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013fbe:	4b06      	ldr	r3, [pc, #24]	@ (8013fd8 <xTaskPriorityInherit+0x100>)
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fc4:	429a      	cmp	r2, r3
 8013fc6:	d201      	bcs.n	8013fcc <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013fc8:	2301      	movs	r3, #1
 8013fca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013fcc:	68fb      	ldr	r3, [r7, #12]
	}
 8013fce:	4618      	mov	r0, r3
 8013fd0:	3710      	adds	r7, #16
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	bd80      	pop	{r7, pc}
 8013fd6:	bf00      	nop
 8013fd8:	200013a8 	.word	0x200013a8
 8013fdc:	200013ac 	.word	0x200013ac
 8013fe0:	200014b0 	.word	0x200014b0

08013fe4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013fe4:	b580      	push	{r7, lr}
 8013fe6:	b086      	sub	sp, #24
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013ff0:	2300      	movs	r3, #0
 8013ff2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d070      	beq.n	80140dc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80140e8 <xTaskPriorityDisinherit+0x104>)
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	693a      	ldr	r2, [r7, #16]
 8014000:	429a      	cmp	r2, r3
 8014002:	d00b      	beq.n	801401c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8014004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014008:	f383 8811 	msr	BASEPRI, r3
 801400c:	f3bf 8f6f 	isb	sy
 8014010:	f3bf 8f4f 	dsb	sy
 8014014:	60fb      	str	r3, [r7, #12]
}
 8014016:	bf00      	nop
 8014018:	bf00      	nop
 801401a:	e7fd      	b.n	8014018 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801401c:	693b      	ldr	r3, [r7, #16]
 801401e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014020:	2b00      	cmp	r3, #0
 8014022:	d10b      	bne.n	801403c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8014024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014028:	f383 8811 	msr	BASEPRI, r3
 801402c:	f3bf 8f6f 	isb	sy
 8014030:	f3bf 8f4f 	dsb	sy
 8014034:	60bb      	str	r3, [r7, #8]
}
 8014036:	bf00      	nop
 8014038:	bf00      	nop
 801403a:	e7fd      	b.n	8014038 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 801403c:	693b      	ldr	r3, [r7, #16]
 801403e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014040:	1e5a      	subs	r2, r3, #1
 8014042:	693b      	ldr	r3, [r7, #16]
 8014044:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014046:	693b      	ldr	r3, [r7, #16]
 8014048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801404a:	693b      	ldr	r3, [r7, #16]
 801404c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801404e:	429a      	cmp	r2, r3
 8014050:	d044      	beq.n	80140dc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014052:	693b      	ldr	r3, [r7, #16]
 8014054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014056:	2b00      	cmp	r3, #0
 8014058:	d140      	bne.n	80140dc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801405a:	693b      	ldr	r3, [r7, #16]
 801405c:	3304      	adds	r3, #4
 801405e:	4618      	mov	r0, r3
 8014060:	f7fe f9dd 	bl	801241e <uxListRemove>
 8014064:	4603      	mov	r3, r0
 8014066:	2b00      	cmp	r3, #0
 8014068:	d115      	bne.n	8014096 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801406a:	693b      	ldr	r3, [r7, #16]
 801406c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801406e:	491f      	ldr	r1, [pc, #124]	@ (80140ec <xTaskPriorityDisinherit+0x108>)
 8014070:	4613      	mov	r3, r2
 8014072:	009b      	lsls	r3, r3, #2
 8014074:	4413      	add	r3, r2
 8014076:	009b      	lsls	r3, r3, #2
 8014078:	440b      	add	r3, r1
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d10a      	bne.n	8014096 <xTaskPriorityDisinherit+0xb2>
 8014080:	693b      	ldr	r3, [r7, #16]
 8014082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014084:	2201      	movs	r2, #1
 8014086:	fa02 f303 	lsl.w	r3, r2, r3
 801408a:	43da      	mvns	r2, r3
 801408c:	4b18      	ldr	r3, [pc, #96]	@ (80140f0 <xTaskPriorityDisinherit+0x10c>)
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	4013      	ands	r3, r2
 8014092:	4a17      	ldr	r2, [pc, #92]	@ (80140f0 <xTaskPriorityDisinherit+0x10c>)
 8014094:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014096:	693b      	ldr	r3, [r7, #16]
 8014098:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801409a:	693b      	ldr	r3, [r7, #16]
 801409c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801409e:	693b      	ldr	r3, [r7, #16]
 80140a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80140a2:	f1c3 0207 	rsb	r2, r3, #7
 80140a6:	693b      	ldr	r3, [r7, #16]
 80140a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80140aa:	693b      	ldr	r3, [r7, #16]
 80140ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80140ae:	2201      	movs	r2, #1
 80140b0:	409a      	lsls	r2, r3
 80140b2:	4b0f      	ldr	r3, [pc, #60]	@ (80140f0 <xTaskPriorityDisinherit+0x10c>)
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	4313      	orrs	r3, r2
 80140b8:	4a0d      	ldr	r2, [pc, #52]	@ (80140f0 <xTaskPriorityDisinherit+0x10c>)
 80140ba:	6013      	str	r3, [r2, #0]
 80140bc:	693b      	ldr	r3, [r7, #16]
 80140be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140c0:	4613      	mov	r3, r2
 80140c2:	009b      	lsls	r3, r3, #2
 80140c4:	4413      	add	r3, r2
 80140c6:	009b      	lsls	r3, r3, #2
 80140c8:	4a08      	ldr	r2, [pc, #32]	@ (80140ec <xTaskPriorityDisinherit+0x108>)
 80140ca:	441a      	add	r2, r3
 80140cc:	693b      	ldr	r3, [r7, #16]
 80140ce:	3304      	adds	r3, #4
 80140d0:	4619      	mov	r1, r3
 80140d2:	4610      	mov	r0, r2
 80140d4:	f7fe f948 	bl	8012368 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80140d8:	2301      	movs	r3, #1
 80140da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80140dc:	697b      	ldr	r3, [r7, #20]
	}
 80140de:	4618      	mov	r0, r3
 80140e0:	3718      	adds	r7, #24
 80140e2:	46bd      	mov	sp, r7
 80140e4:	bd80      	pop	{r7, pc}
 80140e6:	bf00      	nop
 80140e8:	200013a8 	.word	0x200013a8
 80140ec:	200013ac 	.word	0x200013ac
 80140f0:	200014b0 	.word	0x200014b0

080140f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b088      	sub	sp, #32
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	6078      	str	r0, [r7, #4]
 80140fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014102:	2301      	movs	r3, #1
 8014104:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	2b00      	cmp	r3, #0
 801410a:	f000 808a 	beq.w	8014222 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801410e:	69bb      	ldr	r3, [r7, #24]
 8014110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014112:	2b00      	cmp	r3, #0
 8014114:	d10b      	bne.n	801412e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8014116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801411a:	f383 8811 	msr	BASEPRI, r3
 801411e:	f3bf 8f6f 	isb	sy
 8014122:	f3bf 8f4f 	dsb	sy
 8014126:	60fb      	str	r3, [r7, #12]
}
 8014128:	bf00      	nop
 801412a:	bf00      	nop
 801412c:	e7fd      	b.n	801412a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801412e:	69bb      	ldr	r3, [r7, #24]
 8014130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014132:	683a      	ldr	r2, [r7, #0]
 8014134:	429a      	cmp	r2, r3
 8014136:	d902      	bls.n	801413e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	61fb      	str	r3, [r7, #28]
 801413c:	e002      	b.n	8014144 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801413e:	69bb      	ldr	r3, [r7, #24]
 8014140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014142:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014144:	69bb      	ldr	r3, [r7, #24]
 8014146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014148:	69fa      	ldr	r2, [r7, #28]
 801414a:	429a      	cmp	r2, r3
 801414c:	d069      	beq.n	8014222 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801414e:	69bb      	ldr	r3, [r7, #24]
 8014150:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014152:	697a      	ldr	r2, [r7, #20]
 8014154:	429a      	cmp	r2, r3
 8014156:	d164      	bne.n	8014222 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014158:	4b34      	ldr	r3, [pc, #208]	@ (801422c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	69ba      	ldr	r2, [r7, #24]
 801415e:	429a      	cmp	r2, r3
 8014160:	d10b      	bne.n	801417a <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 8014162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014166:	f383 8811 	msr	BASEPRI, r3
 801416a:	f3bf 8f6f 	isb	sy
 801416e:	f3bf 8f4f 	dsb	sy
 8014172:	60bb      	str	r3, [r7, #8]
}
 8014174:	bf00      	nop
 8014176:	bf00      	nop
 8014178:	e7fd      	b.n	8014176 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801417a:	69bb      	ldr	r3, [r7, #24]
 801417c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801417e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014180:	69bb      	ldr	r3, [r7, #24]
 8014182:	69fa      	ldr	r2, [r7, #28]
 8014184:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014186:	69bb      	ldr	r3, [r7, #24]
 8014188:	699b      	ldr	r3, [r3, #24]
 801418a:	2b00      	cmp	r3, #0
 801418c:	db04      	blt.n	8014198 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801418e:	69fb      	ldr	r3, [r7, #28]
 8014190:	f1c3 0207 	rsb	r2, r3, #7
 8014194:	69bb      	ldr	r3, [r7, #24]
 8014196:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014198:	69bb      	ldr	r3, [r7, #24]
 801419a:	6959      	ldr	r1, [r3, #20]
 801419c:	693a      	ldr	r2, [r7, #16]
 801419e:	4613      	mov	r3, r2
 80141a0:	009b      	lsls	r3, r3, #2
 80141a2:	4413      	add	r3, r2
 80141a4:	009b      	lsls	r3, r3, #2
 80141a6:	4a22      	ldr	r2, [pc, #136]	@ (8014230 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80141a8:	4413      	add	r3, r2
 80141aa:	4299      	cmp	r1, r3
 80141ac:	d101      	bne.n	80141b2 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 80141ae:	2301      	movs	r3, #1
 80141b0:	e000      	b.n	80141b4 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 80141b2:	2300      	movs	r3, #0
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d034      	beq.n	8014222 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80141b8:	69bb      	ldr	r3, [r7, #24]
 80141ba:	3304      	adds	r3, #4
 80141bc:	4618      	mov	r0, r3
 80141be:	f7fe f92e 	bl	801241e <uxListRemove>
 80141c2:	4603      	mov	r3, r0
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d115      	bne.n	80141f4 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80141c8:	69bb      	ldr	r3, [r7, #24]
 80141ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80141cc:	4918      	ldr	r1, [pc, #96]	@ (8014230 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80141ce:	4613      	mov	r3, r2
 80141d0:	009b      	lsls	r3, r3, #2
 80141d2:	4413      	add	r3, r2
 80141d4:	009b      	lsls	r3, r3, #2
 80141d6:	440b      	add	r3, r1
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d10a      	bne.n	80141f4 <vTaskPriorityDisinheritAfterTimeout+0x100>
 80141de:	69bb      	ldr	r3, [r7, #24]
 80141e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141e2:	2201      	movs	r2, #1
 80141e4:	fa02 f303 	lsl.w	r3, r2, r3
 80141e8:	43da      	mvns	r2, r3
 80141ea:	4b12      	ldr	r3, [pc, #72]	@ (8014234 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	4013      	ands	r3, r2
 80141f0:	4a10      	ldr	r2, [pc, #64]	@ (8014234 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80141f2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80141f4:	69bb      	ldr	r3, [r7, #24]
 80141f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141f8:	2201      	movs	r2, #1
 80141fa:	409a      	lsls	r2, r3
 80141fc:	4b0d      	ldr	r3, [pc, #52]	@ (8014234 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	4313      	orrs	r3, r2
 8014202:	4a0c      	ldr	r2, [pc, #48]	@ (8014234 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8014204:	6013      	str	r3, [r2, #0]
 8014206:	69bb      	ldr	r3, [r7, #24]
 8014208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801420a:	4613      	mov	r3, r2
 801420c:	009b      	lsls	r3, r3, #2
 801420e:	4413      	add	r3, r2
 8014210:	009b      	lsls	r3, r3, #2
 8014212:	4a07      	ldr	r2, [pc, #28]	@ (8014230 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014214:	441a      	add	r2, r3
 8014216:	69bb      	ldr	r3, [r7, #24]
 8014218:	3304      	adds	r3, #4
 801421a:	4619      	mov	r1, r3
 801421c:	4610      	mov	r0, r2
 801421e:	f7fe f8a3 	bl	8012368 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014222:	bf00      	nop
 8014224:	3720      	adds	r7, #32
 8014226:	46bd      	mov	sp, r7
 8014228:	bd80      	pop	{r7, pc}
 801422a:	bf00      	nop
 801422c:	200013a8 	.word	0x200013a8
 8014230:	200013ac 	.word	0x200013ac
 8014234:	200014b0 	.word	0x200014b0

08014238 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8014238:	b480      	push	{r7}
 801423a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801423c:	4b07      	ldr	r3, [pc, #28]	@ (801425c <pvTaskIncrementMutexHeldCount+0x24>)
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	2b00      	cmp	r3, #0
 8014242:	d004      	beq.n	801424e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014244:	4b05      	ldr	r3, [pc, #20]	@ (801425c <pvTaskIncrementMutexHeldCount+0x24>)
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801424a:	3201      	adds	r2, #1
 801424c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 801424e:	4b03      	ldr	r3, [pc, #12]	@ (801425c <pvTaskIncrementMutexHeldCount+0x24>)
 8014250:	681b      	ldr	r3, [r3, #0]
	}
 8014252:	4618      	mov	r0, r3
 8014254:	46bd      	mov	sp, r7
 8014256:	bc80      	pop	{r7}
 8014258:	4770      	bx	lr
 801425a:	bf00      	nop
 801425c:	200013a8 	.word	0x200013a8

08014260 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b084      	sub	sp, #16
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
 8014268:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801426a:	4b29      	ldr	r3, [pc, #164]	@ (8014310 <prvAddCurrentTaskToDelayedList+0xb0>)
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014270:	4b28      	ldr	r3, [pc, #160]	@ (8014314 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	3304      	adds	r3, #4
 8014276:	4618      	mov	r0, r3
 8014278:	f7fe f8d1 	bl	801241e <uxListRemove>
 801427c:	4603      	mov	r3, r0
 801427e:	2b00      	cmp	r3, #0
 8014280:	d10b      	bne.n	801429a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8014282:	4b24      	ldr	r3, [pc, #144]	@ (8014314 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014288:	2201      	movs	r2, #1
 801428a:	fa02 f303 	lsl.w	r3, r2, r3
 801428e:	43da      	mvns	r2, r3
 8014290:	4b21      	ldr	r3, [pc, #132]	@ (8014318 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	4013      	ands	r3, r2
 8014296:	4a20      	ldr	r2, [pc, #128]	@ (8014318 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014298:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142a0:	d10a      	bne.n	80142b8 <prvAddCurrentTaskToDelayedList+0x58>
 80142a2:	683b      	ldr	r3, [r7, #0]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d007      	beq.n	80142b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80142a8:	4b1a      	ldr	r3, [pc, #104]	@ (8014314 <prvAddCurrentTaskToDelayedList+0xb4>)
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	3304      	adds	r3, #4
 80142ae:	4619      	mov	r1, r3
 80142b0:	481a      	ldr	r0, [pc, #104]	@ (801431c <prvAddCurrentTaskToDelayedList+0xbc>)
 80142b2:	f7fe f859 	bl	8012368 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80142b6:	e026      	b.n	8014306 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80142b8:	68fa      	ldr	r2, [r7, #12]
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	4413      	add	r3, r2
 80142be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80142c0:	4b14      	ldr	r3, [pc, #80]	@ (8014314 <prvAddCurrentTaskToDelayedList+0xb4>)
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	68ba      	ldr	r2, [r7, #8]
 80142c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80142c8:	68ba      	ldr	r2, [r7, #8]
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	429a      	cmp	r2, r3
 80142ce:	d209      	bcs.n	80142e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80142d0:	4b13      	ldr	r3, [pc, #76]	@ (8014320 <prvAddCurrentTaskToDelayedList+0xc0>)
 80142d2:	681a      	ldr	r2, [r3, #0]
 80142d4:	4b0f      	ldr	r3, [pc, #60]	@ (8014314 <prvAddCurrentTaskToDelayedList+0xb4>)
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	3304      	adds	r3, #4
 80142da:	4619      	mov	r1, r3
 80142dc:	4610      	mov	r0, r2
 80142de:	f7fe f866 	bl	80123ae <vListInsert>
}
 80142e2:	e010      	b.n	8014306 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80142e4:	4b0f      	ldr	r3, [pc, #60]	@ (8014324 <prvAddCurrentTaskToDelayedList+0xc4>)
 80142e6:	681a      	ldr	r2, [r3, #0]
 80142e8:	4b0a      	ldr	r3, [pc, #40]	@ (8014314 <prvAddCurrentTaskToDelayedList+0xb4>)
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	3304      	adds	r3, #4
 80142ee:	4619      	mov	r1, r3
 80142f0:	4610      	mov	r0, r2
 80142f2:	f7fe f85c 	bl	80123ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80142f6:	4b0c      	ldr	r3, [pc, #48]	@ (8014328 <prvAddCurrentTaskToDelayedList+0xc8>)
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	68ba      	ldr	r2, [r7, #8]
 80142fc:	429a      	cmp	r2, r3
 80142fe:	d202      	bcs.n	8014306 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014300:	4a09      	ldr	r2, [pc, #36]	@ (8014328 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014302:	68bb      	ldr	r3, [r7, #8]
 8014304:	6013      	str	r3, [r2, #0]
}
 8014306:	bf00      	nop
 8014308:	3710      	adds	r7, #16
 801430a:	46bd      	mov	sp, r7
 801430c:	bd80      	pop	{r7, pc}
 801430e:	bf00      	nop
 8014310:	200014ac 	.word	0x200014ac
 8014314:	200013a8 	.word	0x200013a8
 8014318:	200014b0 	.word	0x200014b0
 801431c:	20001494 	.word	0x20001494
 8014320:	20001464 	.word	0x20001464
 8014324:	20001460 	.word	0x20001460
 8014328:	200014c8 	.word	0x200014c8

0801432c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801432c:	b480      	push	{r7}
 801432e:	b085      	sub	sp, #20
 8014330:	af00      	add	r7, sp, #0
 8014332:	60f8      	str	r0, [r7, #12]
 8014334:	60b9      	str	r1, [r7, #8]
 8014336:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	3b04      	subs	r3, #4
 801433c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8014344:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	3b04      	subs	r3, #4
 801434a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801434c:	68bb      	ldr	r3, [r7, #8]
 801434e:	f023 0201 	bic.w	r2, r3, #1
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	3b04      	subs	r3, #4
 801435a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801435c:	4a08      	ldr	r2, [pc, #32]	@ (8014380 <pxPortInitialiseStack+0x54>)
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	3b14      	subs	r3, #20
 8014366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014368:	687a      	ldr	r2, [r7, #4]
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	3b20      	subs	r3, #32
 8014372:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014374:	68fb      	ldr	r3, [r7, #12]
}
 8014376:	4618      	mov	r0, r3
 8014378:	3714      	adds	r7, #20
 801437a:	46bd      	mov	sp, r7
 801437c:	bc80      	pop	{r7}
 801437e:	4770      	bx	lr
 8014380:	08014385 	.word	0x08014385

08014384 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014384:	b480      	push	{r7}
 8014386:	b085      	sub	sp, #20
 8014388:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 801438a:	2300      	movs	r3, #0
 801438c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801438e:	4b12      	ldr	r3, [pc, #72]	@ (80143d8 <prvTaskExitError+0x54>)
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014396:	d00b      	beq.n	80143b0 <prvTaskExitError+0x2c>
	__asm volatile
 8014398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801439c:	f383 8811 	msr	BASEPRI, r3
 80143a0:	f3bf 8f6f 	isb	sy
 80143a4:	f3bf 8f4f 	dsb	sy
 80143a8:	60fb      	str	r3, [r7, #12]
}
 80143aa:	bf00      	nop
 80143ac:	bf00      	nop
 80143ae:	e7fd      	b.n	80143ac <prvTaskExitError+0x28>
	__asm volatile
 80143b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143b4:	f383 8811 	msr	BASEPRI, r3
 80143b8:	f3bf 8f6f 	isb	sy
 80143bc:	f3bf 8f4f 	dsb	sy
 80143c0:	60bb      	str	r3, [r7, #8]
}
 80143c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80143c4:	bf00      	nop
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d0fc      	beq.n	80143c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80143cc:	bf00      	nop
 80143ce:	bf00      	nop
 80143d0:	3714      	adds	r7, #20
 80143d2:	46bd      	mov	sp, r7
 80143d4:	bc80      	pop	{r7}
 80143d6:	4770      	bx	lr
 80143d8:	20000070 	.word	0x20000070
 80143dc:	00000000 	.word	0x00000000

080143e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80143e0:	4b07      	ldr	r3, [pc, #28]	@ (8014400 <pxCurrentTCBConst2>)
 80143e2:	6819      	ldr	r1, [r3, #0]
 80143e4:	6808      	ldr	r0, [r1, #0]
 80143e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80143ea:	f380 8809 	msr	PSP, r0
 80143ee:	f3bf 8f6f 	isb	sy
 80143f2:	f04f 0000 	mov.w	r0, #0
 80143f6:	f380 8811 	msr	BASEPRI, r0
 80143fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80143fe:	4770      	bx	lr

08014400 <pxCurrentTCBConst2>:
 8014400:	200013a8 	.word	0x200013a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014404:	bf00      	nop
 8014406:	bf00      	nop

08014408 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8014408:	4806      	ldr	r0, [pc, #24]	@ (8014424 <prvPortStartFirstTask+0x1c>)
 801440a:	6800      	ldr	r0, [r0, #0]
 801440c:	6800      	ldr	r0, [r0, #0]
 801440e:	f380 8808 	msr	MSP, r0
 8014412:	b662      	cpsie	i
 8014414:	b661      	cpsie	f
 8014416:	f3bf 8f4f 	dsb	sy
 801441a:	f3bf 8f6f 	isb	sy
 801441e:	df00      	svc	0
 8014420:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014422:	bf00      	nop
 8014424:	e000ed08 	.word	0xe000ed08

08014428 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014428:	b580      	push	{r7, lr}
 801442a:	b084      	sub	sp, #16
 801442c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801442e:	4b32      	ldr	r3, [pc, #200]	@ (80144f8 <xPortStartScheduler+0xd0>)
 8014430:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	781b      	ldrb	r3, [r3, #0]
 8014436:	b2db      	uxtb	r3, r3
 8014438:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	22ff      	movs	r2, #255	@ 0xff
 801443e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	781b      	ldrb	r3, [r3, #0]
 8014444:	b2db      	uxtb	r3, r3
 8014446:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014448:	78fb      	ldrb	r3, [r7, #3]
 801444a:	b2db      	uxtb	r3, r3
 801444c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8014450:	b2da      	uxtb	r2, r3
 8014452:	4b2a      	ldr	r3, [pc, #168]	@ (80144fc <xPortStartScheduler+0xd4>)
 8014454:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014456:	4b2a      	ldr	r3, [pc, #168]	@ (8014500 <xPortStartScheduler+0xd8>)
 8014458:	2207      	movs	r2, #7
 801445a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801445c:	e009      	b.n	8014472 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 801445e:	4b28      	ldr	r3, [pc, #160]	@ (8014500 <xPortStartScheduler+0xd8>)
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	3b01      	subs	r3, #1
 8014464:	4a26      	ldr	r2, [pc, #152]	@ (8014500 <xPortStartScheduler+0xd8>)
 8014466:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014468:	78fb      	ldrb	r3, [r7, #3]
 801446a:	b2db      	uxtb	r3, r3
 801446c:	005b      	lsls	r3, r3, #1
 801446e:	b2db      	uxtb	r3, r3
 8014470:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014472:	78fb      	ldrb	r3, [r7, #3]
 8014474:	b2db      	uxtb	r3, r3
 8014476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801447a:	2b80      	cmp	r3, #128	@ 0x80
 801447c:	d0ef      	beq.n	801445e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801447e:	4b20      	ldr	r3, [pc, #128]	@ (8014500 <xPortStartScheduler+0xd8>)
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	f1c3 0307 	rsb	r3, r3, #7
 8014486:	2b04      	cmp	r3, #4
 8014488:	d00b      	beq.n	80144a2 <xPortStartScheduler+0x7a>
	__asm volatile
 801448a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801448e:	f383 8811 	msr	BASEPRI, r3
 8014492:	f3bf 8f6f 	isb	sy
 8014496:	f3bf 8f4f 	dsb	sy
 801449a:	60bb      	str	r3, [r7, #8]
}
 801449c:	bf00      	nop
 801449e:	bf00      	nop
 80144a0:	e7fd      	b.n	801449e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80144a2:	4b17      	ldr	r3, [pc, #92]	@ (8014500 <xPortStartScheduler+0xd8>)
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	021b      	lsls	r3, r3, #8
 80144a8:	4a15      	ldr	r2, [pc, #84]	@ (8014500 <xPortStartScheduler+0xd8>)
 80144aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80144ac:	4b14      	ldr	r3, [pc, #80]	@ (8014500 <xPortStartScheduler+0xd8>)
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80144b4:	4a12      	ldr	r2, [pc, #72]	@ (8014500 <xPortStartScheduler+0xd8>)
 80144b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	b2da      	uxtb	r2, r3
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80144c0:	4b10      	ldr	r3, [pc, #64]	@ (8014504 <xPortStartScheduler+0xdc>)
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	4a0f      	ldr	r2, [pc, #60]	@ (8014504 <xPortStartScheduler+0xdc>)
 80144c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80144ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80144cc:	4b0d      	ldr	r3, [pc, #52]	@ (8014504 <xPortStartScheduler+0xdc>)
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	4a0c      	ldr	r2, [pc, #48]	@ (8014504 <xPortStartScheduler+0xdc>)
 80144d2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80144d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80144d8:	f000 f8b8 	bl	801464c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80144dc:	4b0a      	ldr	r3, [pc, #40]	@ (8014508 <xPortStartScheduler+0xe0>)
 80144de:	2200      	movs	r2, #0
 80144e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80144e2:	f7ff ff91 	bl	8014408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80144e6:	f7ff fa5b 	bl	80139a0 <vTaskSwitchContext>
	prvTaskExitError();
 80144ea:	f7ff ff4b 	bl	8014384 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80144ee:	2300      	movs	r3, #0
}
 80144f0:	4618      	mov	r0, r3
 80144f2:	3710      	adds	r7, #16
 80144f4:	46bd      	mov	sp, r7
 80144f6:	bd80      	pop	{r7, pc}
 80144f8:	e000e400 	.word	0xe000e400
 80144fc:	200014d4 	.word	0x200014d4
 8014500:	200014d8 	.word	0x200014d8
 8014504:	e000ed20 	.word	0xe000ed20
 8014508:	20000070 	.word	0x20000070

0801450c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801450c:	b480      	push	{r7}
 801450e:	b083      	sub	sp, #12
 8014510:	af00      	add	r7, sp, #0
	__asm volatile
 8014512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014516:	f383 8811 	msr	BASEPRI, r3
 801451a:	f3bf 8f6f 	isb	sy
 801451e:	f3bf 8f4f 	dsb	sy
 8014522:	607b      	str	r3, [r7, #4]
}
 8014524:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014526:	4b0f      	ldr	r3, [pc, #60]	@ (8014564 <vPortEnterCritical+0x58>)
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	3301      	adds	r3, #1
 801452c:	4a0d      	ldr	r2, [pc, #52]	@ (8014564 <vPortEnterCritical+0x58>)
 801452e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014530:	4b0c      	ldr	r3, [pc, #48]	@ (8014564 <vPortEnterCritical+0x58>)
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	2b01      	cmp	r3, #1
 8014536:	d110      	bne.n	801455a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014538:	4b0b      	ldr	r3, [pc, #44]	@ (8014568 <vPortEnterCritical+0x5c>)
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	b2db      	uxtb	r3, r3
 801453e:	2b00      	cmp	r3, #0
 8014540:	d00b      	beq.n	801455a <vPortEnterCritical+0x4e>
	__asm volatile
 8014542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014546:	f383 8811 	msr	BASEPRI, r3
 801454a:	f3bf 8f6f 	isb	sy
 801454e:	f3bf 8f4f 	dsb	sy
 8014552:	603b      	str	r3, [r7, #0]
}
 8014554:	bf00      	nop
 8014556:	bf00      	nop
 8014558:	e7fd      	b.n	8014556 <vPortEnterCritical+0x4a>
	}
}
 801455a:	bf00      	nop
 801455c:	370c      	adds	r7, #12
 801455e:	46bd      	mov	sp, r7
 8014560:	bc80      	pop	{r7}
 8014562:	4770      	bx	lr
 8014564:	20000070 	.word	0x20000070
 8014568:	e000ed04 	.word	0xe000ed04

0801456c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801456c:	b480      	push	{r7}
 801456e:	b083      	sub	sp, #12
 8014570:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014572:	4b12      	ldr	r3, [pc, #72]	@ (80145bc <vPortExitCritical+0x50>)
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d10b      	bne.n	8014592 <vPortExitCritical+0x26>
	__asm volatile
 801457a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801457e:	f383 8811 	msr	BASEPRI, r3
 8014582:	f3bf 8f6f 	isb	sy
 8014586:	f3bf 8f4f 	dsb	sy
 801458a:	607b      	str	r3, [r7, #4]
}
 801458c:	bf00      	nop
 801458e:	bf00      	nop
 8014590:	e7fd      	b.n	801458e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014592:	4b0a      	ldr	r3, [pc, #40]	@ (80145bc <vPortExitCritical+0x50>)
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	3b01      	subs	r3, #1
 8014598:	4a08      	ldr	r2, [pc, #32]	@ (80145bc <vPortExitCritical+0x50>)
 801459a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801459c:	4b07      	ldr	r3, [pc, #28]	@ (80145bc <vPortExitCritical+0x50>)
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d105      	bne.n	80145b0 <vPortExitCritical+0x44>
 80145a4:	2300      	movs	r3, #0
 80145a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80145a8:	683b      	ldr	r3, [r7, #0]
 80145aa:	f383 8811 	msr	BASEPRI, r3
}
 80145ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80145b0:	bf00      	nop
 80145b2:	370c      	adds	r7, #12
 80145b4:	46bd      	mov	sp, r7
 80145b6:	bc80      	pop	{r7}
 80145b8:	4770      	bx	lr
 80145ba:	bf00      	nop
 80145bc:	20000070 	.word	0x20000070

080145c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80145c0:	f3ef 8009 	mrs	r0, PSP
 80145c4:	f3bf 8f6f 	isb	sy
 80145c8:	4b0d      	ldr	r3, [pc, #52]	@ (8014600 <pxCurrentTCBConst>)
 80145ca:	681a      	ldr	r2, [r3, #0]
 80145cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80145d0:	6010      	str	r0, [r2, #0]
 80145d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80145d6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80145da:	f380 8811 	msr	BASEPRI, r0
 80145de:	f7ff f9df 	bl	80139a0 <vTaskSwitchContext>
 80145e2:	f04f 0000 	mov.w	r0, #0
 80145e6:	f380 8811 	msr	BASEPRI, r0
 80145ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80145ee:	6819      	ldr	r1, [r3, #0]
 80145f0:	6808      	ldr	r0, [r1, #0]
 80145f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80145f6:	f380 8809 	msr	PSP, r0
 80145fa:	f3bf 8f6f 	isb	sy
 80145fe:	4770      	bx	lr

08014600 <pxCurrentTCBConst>:
 8014600:	200013a8 	.word	0x200013a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014604:	bf00      	nop
 8014606:	bf00      	nop

08014608 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b082      	sub	sp, #8
 801460c:	af00      	add	r7, sp, #0
	__asm volatile
 801460e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014612:	f383 8811 	msr	BASEPRI, r3
 8014616:	f3bf 8f6f 	isb	sy
 801461a:	f3bf 8f4f 	dsb	sy
 801461e:	607b      	str	r3, [r7, #4]
}
 8014620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014622:	f7ff f8ff 	bl	8013824 <xTaskIncrementTick>
 8014626:	4603      	mov	r3, r0
 8014628:	2b00      	cmp	r3, #0
 801462a:	d003      	beq.n	8014634 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801462c:	4b06      	ldr	r3, [pc, #24]	@ (8014648 <SysTick_Handler+0x40>)
 801462e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014632:	601a      	str	r2, [r3, #0]
 8014634:	2300      	movs	r3, #0
 8014636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014638:	683b      	ldr	r3, [r7, #0]
 801463a:	f383 8811 	msr	BASEPRI, r3
}
 801463e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014640:	bf00      	nop
 8014642:	3708      	adds	r7, #8
 8014644:	46bd      	mov	sp, r7
 8014646:	bd80      	pop	{r7, pc}
 8014648:	e000ed04 	.word	0xe000ed04

0801464c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801464c:	b480      	push	{r7}
 801464e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014650:	4b0a      	ldr	r3, [pc, #40]	@ (801467c <vPortSetupTimerInterrupt+0x30>)
 8014652:	2200      	movs	r2, #0
 8014654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014656:	4b0a      	ldr	r3, [pc, #40]	@ (8014680 <vPortSetupTimerInterrupt+0x34>)
 8014658:	2200      	movs	r2, #0
 801465a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801465c:	4b09      	ldr	r3, [pc, #36]	@ (8014684 <vPortSetupTimerInterrupt+0x38>)
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	4a09      	ldr	r2, [pc, #36]	@ (8014688 <vPortSetupTimerInterrupt+0x3c>)
 8014662:	fba2 2303 	umull	r2, r3, r2, r3
 8014666:	099b      	lsrs	r3, r3, #6
 8014668:	4a08      	ldr	r2, [pc, #32]	@ (801468c <vPortSetupTimerInterrupt+0x40>)
 801466a:	3b01      	subs	r3, #1
 801466c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801466e:	4b03      	ldr	r3, [pc, #12]	@ (801467c <vPortSetupTimerInterrupt+0x30>)
 8014670:	2207      	movs	r2, #7
 8014672:	601a      	str	r2, [r3, #0]
}
 8014674:	bf00      	nop
 8014676:	46bd      	mov	sp, r7
 8014678:	bc80      	pop	{r7}
 801467a:	4770      	bx	lr
 801467c:	e000e010 	.word	0xe000e010
 8014680:	e000e018 	.word	0xe000e018
 8014684:	20000018 	.word	0x20000018
 8014688:	10624dd3 	.word	0x10624dd3
 801468c:	e000e014 	.word	0xe000e014

08014690 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014690:	b480      	push	{r7}
 8014692:	b085      	sub	sp, #20
 8014694:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014696:	f3ef 8305 	mrs	r3, IPSR
 801469a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	2b0f      	cmp	r3, #15
 80146a0:	d915      	bls.n	80146ce <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80146a2:	4a17      	ldr	r2, [pc, #92]	@ (8014700 <vPortValidateInterruptPriority+0x70>)
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	4413      	add	r3, r2
 80146a8:	781b      	ldrb	r3, [r3, #0]
 80146aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80146ac:	4b15      	ldr	r3, [pc, #84]	@ (8014704 <vPortValidateInterruptPriority+0x74>)
 80146ae:	781b      	ldrb	r3, [r3, #0]
 80146b0:	7afa      	ldrb	r2, [r7, #11]
 80146b2:	429a      	cmp	r2, r3
 80146b4:	d20b      	bcs.n	80146ce <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80146b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146ba:	f383 8811 	msr	BASEPRI, r3
 80146be:	f3bf 8f6f 	isb	sy
 80146c2:	f3bf 8f4f 	dsb	sy
 80146c6:	607b      	str	r3, [r7, #4]
}
 80146c8:	bf00      	nop
 80146ca:	bf00      	nop
 80146cc:	e7fd      	b.n	80146ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80146ce:	4b0e      	ldr	r3, [pc, #56]	@ (8014708 <vPortValidateInterruptPriority+0x78>)
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80146d6:	4b0d      	ldr	r3, [pc, #52]	@ (801470c <vPortValidateInterruptPriority+0x7c>)
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	429a      	cmp	r2, r3
 80146dc:	d90b      	bls.n	80146f6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80146de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146e2:	f383 8811 	msr	BASEPRI, r3
 80146e6:	f3bf 8f6f 	isb	sy
 80146ea:	f3bf 8f4f 	dsb	sy
 80146ee:	603b      	str	r3, [r7, #0]
}
 80146f0:	bf00      	nop
 80146f2:	bf00      	nop
 80146f4:	e7fd      	b.n	80146f2 <vPortValidateInterruptPriority+0x62>
	}
 80146f6:	bf00      	nop
 80146f8:	3714      	adds	r7, #20
 80146fa:	46bd      	mov	sp, r7
 80146fc:	bc80      	pop	{r7}
 80146fe:	4770      	bx	lr
 8014700:	e000e3f0 	.word	0xe000e3f0
 8014704:	200014d4 	.word	0x200014d4
 8014708:	e000ed0c 	.word	0xe000ed0c
 801470c:	200014d8 	.word	0x200014d8

08014710 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b08a      	sub	sp, #40	@ 0x28
 8014714:	af00      	add	r7, sp, #0
 8014716:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014718:	2300      	movs	r3, #0
 801471a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801471c:	f7fe ffc8 	bl	80136b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014720:	4b5a      	ldr	r3, [pc, #360]	@ (801488c <pvPortMalloc+0x17c>)
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d101      	bne.n	801472c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014728:	f000 f916 	bl	8014958 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801472c:	4b58      	ldr	r3, [pc, #352]	@ (8014890 <pvPortMalloc+0x180>)
 801472e:	681a      	ldr	r2, [r3, #0]
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	4013      	ands	r3, r2
 8014734:	2b00      	cmp	r3, #0
 8014736:	f040 8090 	bne.w	801485a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d01e      	beq.n	801477e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8014740:	2208      	movs	r2, #8
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	4413      	add	r3, r2
 8014746:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	f003 0307 	and.w	r3, r3, #7
 801474e:	2b00      	cmp	r3, #0
 8014750:	d015      	beq.n	801477e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	f023 0307 	bic.w	r3, r3, #7
 8014758:	3308      	adds	r3, #8
 801475a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	f003 0307 	and.w	r3, r3, #7
 8014762:	2b00      	cmp	r3, #0
 8014764:	d00b      	beq.n	801477e <pvPortMalloc+0x6e>
	__asm volatile
 8014766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801476a:	f383 8811 	msr	BASEPRI, r3
 801476e:	f3bf 8f6f 	isb	sy
 8014772:	f3bf 8f4f 	dsb	sy
 8014776:	617b      	str	r3, [r7, #20]
}
 8014778:	bf00      	nop
 801477a:	bf00      	nop
 801477c:	e7fd      	b.n	801477a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d06a      	beq.n	801485a <pvPortMalloc+0x14a>
 8014784:	4b43      	ldr	r3, [pc, #268]	@ (8014894 <pvPortMalloc+0x184>)
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	687a      	ldr	r2, [r7, #4]
 801478a:	429a      	cmp	r2, r3
 801478c:	d865      	bhi.n	801485a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801478e:	4b42      	ldr	r3, [pc, #264]	@ (8014898 <pvPortMalloc+0x188>)
 8014790:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014792:	4b41      	ldr	r3, [pc, #260]	@ (8014898 <pvPortMalloc+0x188>)
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014798:	e004      	b.n	80147a4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 801479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801479c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801479e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80147a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147a6:	685b      	ldr	r3, [r3, #4]
 80147a8:	687a      	ldr	r2, [r7, #4]
 80147aa:	429a      	cmp	r2, r3
 80147ac:	d903      	bls.n	80147b6 <pvPortMalloc+0xa6>
 80147ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d1f1      	bne.n	801479a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80147b6:	4b35      	ldr	r3, [pc, #212]	@ (801488c <pvPortMalloc+0x17c>)
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80147bc:	429a      	cmp	r2, r3
 80147be:	d04c      	beq.n	801485a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80147c0:	6a3b      	ldr	r3, [r7, #32]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	2208      	movs	r2, #8
 80147c6:	4413      	add	r3, r2
 80147c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80147ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147cc:	681a      	ldr	r2, [r3, #0]
 80147ce:	6a3b      	ldr	r3, [r7, #32]
 80147d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80147d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147d4:	685a      	ldr	r2, [r3, #4]
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	1ad2      	subs	r2, r2, r3
 80147da:	2308      	movs	r3, #8
 80147dc:	005b      	lsls	r3, r3, #1
 80147de:	429a      	cmp	r2, r3
 80147e0:	d920      	bls.n	8014824 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80147e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	4413      	add	r3, r2
 80147e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80147ea:	69bb      	ldr	r3, [r7, #24]
 80147ec:	f003 0307 	and.w	r3, r3, #7
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d00b      	beq.n	801480c <pvPortMalloc+0xfc>
	__asm volatile
 80147f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147f8:	f383 8811 	msr	BASEPRI, r3
 80147fc:	f3bf 8f6f 	isb	sy
 8014800:	f3bf 8f4f 	dsb	sy
 8014804:	613b      	str	r3, [r7, #16]
}
 8014806:	bf00      	nop
 8014808:	bf00      	nop
 801480a:	e7fd      	b.n	8014808 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801480c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801480e:	685a      	ldr	r2, [r3, #4]
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	1ad2      	subs	r2, r2, r3
 8014814:	69bb      	ldr	r3, [r7, #24]
 8014816:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801481a:	687a      	ldr	r2, [r7, #4]
 801481c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801481e:	69b8      	ldr	r0, [r7, #24]
 8014820:	f000 f8fc 	bl	8014a1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014824:	4b1b      	ldr	r3, [pc, #108]	@ (8014894 <pvPortMalloc+0x184>)
 8014826:	681a      	ldr	r2, [r3, #0]
 8014828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801482a:	685b      	ldr	r3, [r3, #4]
 801482c:	1ad3      	subs	r3, r2, r3
 801482e:	4a19      	ldr	r2, [pc, #100]	@ (8014894 <pvPortMalloc+0x184>)
 8014830:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014832:	4b18      	ldr	r3, [pc, #96]	@ (8014894 <pvPortMalloc+0x184>)
 8014834:	681a      	ldr	r2, [r3, #0]
 8014836:	4b19      	ldr	r3, [pc, #100]	@ (801489c <pvPortMalloc+0x18c>)
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	429a      	cmp	r2, r3
 801483c:	d203      	bcs.n	8014846 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801483e:	4b15      	ldr	r3, [pc, #84]	@ (8014894 <pvPortMalloc+0x184>)
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	4a16      	ldr	r2, [pc, #88]	@ (801489c <pvPortMalloc+0x18c>)
 8014844:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014848:	685a      	ldr	r2, [r3, #4]
 801484a:	4b11      	ldr	r3, [pc, #68]	@ (8014890 <pvPortMalloc+0x180>)
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	431a      	orrs	r2, r3
 8014850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014852:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014856:	2200      	movs	r2, #0
 8014858:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801485a:	f7fe ff37 	bl	80136cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801485e:	69fb      	ldr	r3, [r7, #28]
 8014860:	f003 0307 	and.w	r3, r3, #7
 8014864:	2b00      	cmp	r3, #0
 8014866:	d00b      	beq.n	8014880 <pvPortMalloc+0x170>
	__asm volatile
 8014868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801486c:	f383 8811 	msr	BASEPRI, r3
 8014870:	f3bf 8f6f 	isb	sy
 8014874:	f3bf 8f4f 	dsb	sy
 8014878:	60fb      	str	r3, [r7, #12]
}
 801487a:	bf00      	nop
 801487c:	bf00      	nop
 801487e:	e7fd      	b.n	801487c <pvPortMalloc+0x16c>
	return pvReturn;
 8014880:	69fb      	ldr	r3, [r7, #28]
}
 8014882:	4618      	mov	r0, r3
 8014884:	3728      	adds	r7, #40	@ 0x28
 8014886:	46bd      	mov	sp, r7
 8014888:	bd80      	pop	{r7, pc}
 801488a:	bf00      	nop
 801488c:	200034e4 	.word	0x200034e4
 8014890:	200034f0 	.word	0x200034f0
 8014894:	200034e8 	.word	0x200034e8
 8014898:	200034dc 	.word	0x200034dc
 801489c:	200034ec 	.word	0x200034ec

080148a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b086      	sub	sp, #24
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d04a      	beq.n	8014948 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80148b2:	2308      	movs	r3, #8
 80148b4:	425b      	negs	r3, r3
 80148b6:	697a      	ldr	r2, [r7, #20]
 80148b8:	4413      	add	r3, r2
 80148ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80148bc:	697b      	ldr	r3, [r7, #20]
 80148be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80148c0:	693b      	ldr	r3, [r7, #16]
 80148c2:	685a      	ldr	r2, [r3, #4]
 80148c4:	4b22      	ldr	r3, [pc, #136]	@ (8014950 <vPortFree+0xb0>)
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	4013      	ands	r3, r2
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d10b      	bne.n	80148e6 <vPortFree+0x46>
	__asm volatile
 80148ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148d2:	f383 8811 	msr	BASEPRI, r3
 80148d6:	f3bf 8f6f 	isb	sy
 80148da:	f3bf 8f4f 	dsb	sy
 80148de:	60fb      	str	r3, [r7, #12]
}
 80148e0:	bf00      	nop
 80148e2:	bf00      	nop
 80148e4:	e7fd      	b.n	80148e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80148e6:	693b      	ldr	r3, [r7, #16]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d00b      	beq.n	8014906 <vPortFree+0x66>
	__asm volatile
 80148ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148f2:	f383 8811 	msr	BASEPRI, r3
 80148f6:	f3bf 8f6f 	isb	sy
 80148fa:	f3bf 8f4f 	dsb	sy
 80148fe:	60bb      	str	r3, [r7, #8]
}
 8014900:	bf00      	nop
 8014902:	bf00      	nop
 8014904:	e7fd      	b.n	8014902 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014906:	693b      	ldr	r3, [r7, #16]
 8014908:	685a      	ldr	r2, [r3, #4]
 801490a:	4b11      	ldr	r3, [pc, #68]	@ (8014950 <vPortFree+0xb0>)
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	4013      	ands	r3, r2
 8014910:	2b00      	cmp	r3, #0
 8014912:	d019      	beq.n	8014948 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014914:	693b      	ldr	r3, [r7, #16]
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	2b00      	cmp	r3, #0
 801491a:	d115      	bne.n	8014948 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801491c:	693b      	ldr	r3, [r7, #16]
 801491e:	685a      	ldr	r2, [r3, #4]
 8014920:	4b0b      	ldr	r3, [pc, #44]	@ (8014950 <vPortFree+0xb0>)
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	43db      	mvns	r3, r3
 8014926:	401a      	ands	r2, r3
 8014928:	693b      	ldr	r3, [r7, #16]
 801492a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801492c:	f7fe fec0 	bl	80136b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014930:	693b      	ldr	r3, [r7, #16]
 8014932:	685a      	ldr	r2, [r3, #4]
 8014934:	4b07      	ldr	r3, [pc, #28]	@ (8014954 <vPortFree+0xb4>)
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	4413      	add	r3, r2
 801493a:	4a06      	ldr	r2, [pc, #24]	@ (8014954 <vPortFree+0xb4>)
 801493c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801493e:	6938      	ldr	r0, [r7, #16]
 8014940:	f000 f86c 	bl	8014a1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014944:	f7fe fec2 	bl	80136cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014948:	bf00      	nop
 801494a:	3718      	adds	r7, #24
 801494c:	46bd      	mov	sp, r7
 801494e:	bd80      	pop	{r7, pc}
 8014950:	200034f0 	.word	0x200034f0
 8014954:	200034e8 	.word	0x200034e8

08014958 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014958:	b480      	push	{r7}
 801495a:	b085      	sub	sp, #20
 801495c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801495e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8014962:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014964:	4b27      	ldr	r3, [pc, #156]	@ (8014a04 <prvHeapInit+0xac>)
 8014966:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	f003 0307 	and.w	r3, r3, #7
 801496e:	2b00      	cmp	r3, #0
 8014970:	d00c      	beq.n	801498c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	3307      	adds	r3, #7
 8014976:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	f023 0307 	bic.w	r3, r3, #7
 801497e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014980:	68ba      	ldr	r2, [r7, #8]
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	1ad3      	subs	r3, r2, r3
 8014986:	4a1f      	ldr	r2, [pc, #124]	@ (8014a04 <prvHeapInit+0xac>)
 8014988:	4413      	add	r3, r2
 801498a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014990:	4a1d      	ldr	r2, [pc, #116]	@ (8014a08 <prvHeapInit+0xb0>)
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014996:	4b1c      	ldr	r3, [pc, #112]	@ (8014a08 <prvHeapInit+0xb0>)
 8014998:	2200      	movs	r2, #0
 801499a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	68ba      	ldr	r2, [r7, #8]
 80149a0:	4413      	add	r3, r2
 80149a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80149a4:	2208      	movs	r2, #8
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	1a9b      	subs	r3, r3, r2
 80149aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	f023 0307 	bic.w	r3, r3, #7
 80149b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	4a15      	ldr	r2, [pc, #84]	@ (8014a0c <prvHeapInit+0xb4>)
 80149b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80149ba:	4b14      	ldr	r3, [pc, #80]	@ (8014a0c <prvHeapInit+0xb4>)
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	2200      	movs	r2, #0
 80149c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80149c2:	4b12      	ldr	r3, [pc, #72]	@ (8014a0c <prvHeapInit+0xb4>)
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	2200      	movs	r2, #0
 80149c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80149ce:	683b      	ldr	r3, [r7, #0]
 80149d0:	68fa      	ldr	r2, [r7, #12]
 80149d2:	1ad2      	subs	r2, r2, r3
 80149d4:	683b      	ldr	r3, [r7, #0]
 80149d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80149d8:	4b0c      	ldr	r3, [pc, #48]	@ (8014a0c <prvHeapInit+0xb4>)
 80149da:	681a      	ldr	r2, [r3, #0]
 80149dc:	683b      	ldr	r3, [r7, #0]
 80149de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80149e0:	683b      	ldr	r3, [r7, #0]
 80149e2:	685b      	ldr	r3, [r3, #4]
 80149e4:	4a0a      	ldr	r2, [pc, #40]	@ (8014a10 <prvHeapInit+0xb8>)
 80149e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80149e8:	683b      	ldr	r3, [r7, #0]
 80149ea:	685b      	ldr	r3, [r3, #4]
 80149ec:	4a09      	ldr	r2, [pc, #36]	@ (8014a14 <prvHeapInit+0xbc>)
 80149ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80149f0:	4b09      	ldr	r3, [pc, #36]	@ (8014a18 <prvHeapInit+0xc0>)
 80149f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80149f6:	601a      	str	r2, [r3, #0]
}
 80149f8:	bf00      	nop
 80149fa:	3714      	adds	r7, #20
 80149fc:	46bd      	mov	sp, r7
 80149fe:	bc80      	pop	{r7}
 8014a00:	4770      	bx	lr
 8014a02:	bf00      	nop
 8014a04:	200014dc 	.word	0x200014dc
 8014a08:	200034dc 	.word	0x200034dc
 8014a0c:	200034e4 	.word	0x200034e4
 8014a10:	200034ec 	.word	0x200034ec
 8014a14:	200034e8 	.word	0x200034e8
 8014a18:	200034f0 	.word	0x200034f0

08014a1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014a1c:	b480      	push	{r7}
 8014a1e:	b085      	sub	sp, #20
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014a24:	4b27      	ldr	r3, [pc, #156]	@ (8014ac4 <prvInsertBlockIntoFreeList+0xa8>)
 8014a26:	60fb      	str	r3, [r7, #12]
 8014a28:	e002      	b.n	8014a30 <prvInsertBlockIntoFreeList+0x14>
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	60fb      	str	r3, [r7, #12]
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	687a      	ldr	r2, [r7, #4]
 8014a36:	429a      	cmp	r2, r3
 8014a38:	d8f7      	bhi.n	8014a2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	685b      	ldr	r3, [r3, #4]
 8014a42:	68ba      	ldr	r2, [r7, #8]
 8014a44:	4413      	add	r3, r2
 8014a46:	687a      	ldr	r2, [r7, #4]
 8014a48:	429a      	cmp	r2, r3
 8014a4a:	d108      	bne.n	8014a5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	685a      	ldr	r2, [r3, #4]
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	685b      	ldr	r3, [r3, #4]
 8014a54:	441a      	add	r2, r3
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	685b      	ldr	r3, [r3, #4]
 8014a66:	68ba      	ldr	r2, [r7, #8]
 8014a68:	441a      	add	r2, r3
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	429a      	cmp	r2, r3
 8014a70:	d118      	bne.n	8014aa4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	681a      	ldr	r2, [r3, #0]
 8014a76:	4b14      	ldr	r3, [pc, #80]	@ (8014ac8 <prvInsertBlockIntoFreeList+0xac>)
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	429a      	cmp	r2, r3
 8014a7c:	d00d      	beq.n	8014a9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	685a      	ldr	r2, [r3, #4]
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	685b      	ldr	r3, [r3, #4]
 8014a88:	441a      	add	r2, r3
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	681a      	ldr	r2, [r3, #0]
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	601a      	str	r2, [r3, #0]
 8014a98:	e008      	b.n	8014aac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8014ac8 <prvInsertBlockIntoFreeList+0xac>)
 8014a9c:	681a      	ldr	r2, [r3, #0]
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	601a      	str	r2, [r3, #0]
 8014aa2:	e003      	b.n	8014aac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	681a      	ldr	r2, [r3, #0]
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014aac:	68fa      	ldr	r2, [r7, #12]
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	429a      	cmp	r2, r3
 8014ab2:	d002      	beq.n	8014aba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	687a      	ldr	r2, [r7, #4]
 8014ab8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014aba:	bf00      	nop
 8014abc:	3714      	adds	r7, #20
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	bc80      	pop	{r7}
 8014ac2:	4770      	bx	lr
 8014ac4:	200034dc 	.word	0x200034dc
 8014ac8:	200034e4 	.word	0x200034e4

08014acc <calloc>:
 8014acc:	4b02      	ldr	r3, [pc, #8]	@ (8014ad8 <calloc+0xc>)
 8014ace:	460a      	mov	r2, r1
 8014ad0:	4601      	mov	r1, r0
 8014ad2:	6818      	ldr	r0, [r3, #0]
 8014ad4:	f000 b802 	b.w	8014adc <_calloc_r>
 8014ad8:	20000074 	.word	0x20000074

08014adc <_calloc_r>:
 8014adc:	b570      	push	{r4, r5, r6, lr}
 8014ade:	fba1 5402 	umull	r5, r4, r1, r2
 8014ae2:	b93c      	cbnz	r4, 8014af4 <_calloc_r+0x18>
 8014ae4:	4629      	mov	r1, r5
 8014ae6:	f000 f82f 	bl	8014b48 <_malloc_r>
 8014aea:	4606      	mov	r6, r0
 8014aec:	b928      	cbnz	r0, 8014afa <_calloc_r+0x1e>
 8014aee:	2600      	movs	r6, #0
 8014af0:	4630      	mov	r0, r6
 8014af2:	bd70      	pop	{r4, r5, r6, pc}
 8014af4:	220c      	movs	r2, #12
 8014af6:	6002      	str	r2, [r0, #0]
 8014af8:	e7f9      	b.n	8014aee <_calloc_r+0x12>
 8014afa:	462a      	mov	r2, r5
 8014afc:	4621      	mov	r1, r4
 8014afe:	f000 f8af 	bl	8014c60 <memset>
 8014b02:	e7f5      	b.n	8014af0 <_calloc_r+0x14>

08014b04 <sbrk_aligned>:
 8014b04:	b570      	push	{r4, r5, r6, lr}
 8014b06:	4e0f      	ldr	r6, [pc, #60]	@ (8014b44 <sbrk_aligned+0x40>)
 8014b08:	460c      	mov	r4, r1
 8014b0a:	6831      	ldr	r1, [r6, #0]
 8014b0c:	4605      	mov	r5, r0
 8014b0e:	b911      	cbnz	r1, 8014b16 <sbrk_aligned+0x12>
 8014b10:	f000 f8ae 	bl	8014c70 <_sbrk_r>
 8014b14:	6030      	str	r0, [r6, #0]
 8014b16:	4621      	mov	r1, r4
 8014b18:	4628      	mov	r0, r5
 8014b1a:	f000 f8a9 	bl	8014c70 <_sbrk_r>
 8014b1e:	1c43      	adds	r3, r0, #1
 8014b20:	d103      	bne.n	8014b2a <sbrk_aligned+0x26>
 8014b22:	f04f 34ff 	mov.w	r4, #4294967295
 8014b26:	4620      	mov	r0, r4
 8014b28:	bd70      	pop	{r4, r5, r6, pc}
 8014b2a:	1cc4      	adds	r4, r0, #3
 8014b2c:	f024 0403 	bic.w	r4, r4, #3
 8014b30:	42a0      	cmp	r0, r4
 8014b32:	d0f8      	beq.n	8014b26 <sbrk_aligned+0x22>
 8014b34:	1a21      	subs	r1, r4, r0
 8014b36:	4628      	mov	r0, r5
 8014b38:	f000 f89a 	bl	8014c70 <_sbrk_r>
 8014b3c:	3001      	adds	r0, #1
 8014b3e:	d1f2      	bne.n	8014b26 <sbrk_aligned+0x22>
 8014b40:	e7ef      	b.n	8014b22 <sbrk_aligned+0x1e>
 8014b42:	bf00      	nop
 8014b44:	200034f4 	.word	0x200034f4

08014b48 <_malloc_r>:
 8014b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b4c:	1ccd      	adds	r5, r1, #3
 8014b4e:	f025 0503 	bic.w	r5, r5, #3
 8014b52:	3508      	adds	r5, #8
 8014b54:	2d0c      	cmp	r5, #12
 8014b56:	bf38      	it	cc
 8014b58:	250c      	movcc	r5, #12
 8014b5a:	2d00      	cmp	r5, #0
 8014b5c:	4606      	mov	r6, r0
 8014b5e:	db01      	blt.n	8014b64 <_malloc_r+0x1c>
 8014b60:	42a9      	cmp	r1, r5
 8014b62:	d904      	bls.n	8014b6e <_malloc_r+0x26>
 8014b64:	230c      	movs	r3, #12
 8014b66:	6033      	str	r3, [r6, #0]
 8014b68:	2000      	movs	r0, #0
 8014b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014c44 <_malloc_r+0xfc>
 8014b72:	f000 f869 	bl	8014c48 <__malloc_lock>
 8014b76:	f8d8 3000 	ldr.w	r3, [r8]
 8014b7a:	461c      	mov	r4, r3
 8014b7c:	bb44      	cbnz	r4, 8014bd0 <_malloc_r+0x88>
 8014b7e:	4629      	mov	r1, r5
 8014b80:	4630      	mov	r0, r6
 8014b82:	f7ff ffbf 	bl	8014b04 <sbrk_aligned>
 8014b86:	1c43      	adds	r3, r0, #1
 8014b88:	4604      	mov	r4, r0
 8014b8a:	d158      	bne.n	8014c3e <_malloc_r+0xf6>
 8014b8c:	f8d8 4000 	ldr.w	r4, [r8]
 8014b90:	4627      	mov	r7, r4
 8014b92:	2f00      	cmp	r7, #0
 8014b94:	d143      	bne.n	8014c1e <_malloc_r+0xd6>
 8014b96:	2c00      	cmp	r4, #0
 8014b98:	d04b      	beq.n	8014c32 <_malloc_r+0xea>
 8014b9a:	6823      	ldr	r3, [r4, #0]
 8014b9c:	4639      	mov	r1, r7
 8014b9e:	4630      	mov	r0, r6
 8014ba0:	eb04 0903 	add.w	r9, r4, r3
 8014ba4:	f000 f864 	bl	8014c70 <_sbrk_r>
 8014ba8:	4581      	cmp	r9, r0
 8014baa:	d142      	bne.n	8014c32 <_malloc_r+0xea>
 8014bac:	6821      	ldr	r1, [r4, #0]
 8014bae:	4630      	mov	r0, r6
 8014bb0:	1a6d      	subs	r5, r5, r1
 8014bb2:	4629      	mov	r1, r5
 8014bb4:	f7ff ffa6 	bl	8014b04 <sbrk_aligned>
 8014bb8:	3001      	adds	r0, #1
 8014bba:	d03a      	beq.n	8014c32 <_malloc_r+0xea>
 8014bbc:	6823      	ldr	r3, [r4, #0]
 8014bbe:	442b      	add	r3, r5
 8014bc0:	6023      	str	r3, [r4, #0]
 8014bc2:	f8d8 3000 	ldr.w	r3, [r8]
 8014bc6:	685a      	ldr	r2, [r3, #4]
 8014bc8:	bb62      	cbnz	r2, 8014c24 <_malloc_r+0xdc>
 8014bca:	f8c8 7000 	str.w	r7, [r8]
 8014bce:	e00f      	b.n	8014bf0 <_malloc_r+0xa8>
 8014bd0:	6822      	ldr	r2, [r4, #0]
 8014bd2:	1b52      	subs	r2, r2, r5
 8014bd4:	d420      	bmi.n	8014c18 <_malloc_r+0xd0>
 8014bd6:	2a0b      	cmp	r2, #11
 8014bd8:	d917      	bls.n	8014c0a <_malloc_r+0xc2>
 8014bda:	1961      	adds	r1, r4, r5
 8014bdc:	42a3      	cmp	r3, r4
 8014bde:	6025      	str	r5, [r4, #0]
 8014be0:	bf18      	it	ne
 8014be2:	6059      	strne	r1, [r3, #4]
 8014be4:	6863      	ldr	r3, [r4, #4]
 8014be6:	bf08      	it	eq
 8014be8:	f8c8 1000 	streq.w	r1, [r8]
 8014bec:	5162      	str	r2, [r4, r5]
 8014bee:	604b      	str	r3, [r1, #4]
 8014bf0:	4630      	mov	r0, r6
 8014bf2:	f000 f82f 	bl	8014c54 <__malloc_unlock>
 8014bf6:	f104 000b 	add.w	r0, r4, #11
 8014bfa:	1d23      	adds	r3, r4, #4
 8014bfc:	f020 0007 	bic.w	r0, r0, #7
 8014c00:	1ac2      	subs	r2, r0, r3
 8014c02:	bf1c      	itt	ne
 8014c04:	1a1b      	subne	r3, r3, r0
 8014c06:	50a3      	strne	r3, [r4, r2]
 8014c08:	e7af      	b.n	8014b6a <_malloc_r+0x22>
 8014c0a:	6862      	ldr	r2, [r4, #4]
 8014c0c:	42a3      	cmp	r3, r4
 8014c0e:	bf0c      	ite	eq
 8014c10:	f8c8 2000 	streq.w	r2, [r8]
 8014c14:	605a      	strne	r2, [r3, #4]
 8014c16:	e7eb      	b.n	8014bf0 <_malloc_r+0xa8>
 8014c18:	4623      	mov	r3, r4
 8014c1a:	6864      	ldr	r4, [r4, #4]
 8014c1c:	e7ae      	b.n	8014b7c <_malloc_r+0x34>
 8014c1e:	463c      	mov	r4, r7
 8014c20:	687f      	ldr	r7, [r7, #4]
 8014c22:	e7b6      	b.n	8014b92 <_malloc_r+0x4a>
 8014c24:	461a      	mov	r2, r3
 8014c26:	685b      	ldr	r3, [r3, #4]
 8014c28:	42a3      	cmp	r3, r4
 8014c2a:	d1fb      	bne.n	8014c24 <_malloc_r+0xdc>
 8014c2c:	2300      	movs	r3, #0
 8014c2e:	6053      	str	r3, [r2, #4]
 8014c30:	e7de      	b.n	8014bf0 <_malloc_r+0xa8>
 8014c32:	230c      	movs	r3, #12
 8014c34:	4630      	mov	r0, r6
 8014c36:	6033      	str	r3, [r6, #0]
 8014c38:	f000 f80c 	bl	8014c54 <__malloc_unlock>
 8014c3c:	e794      	b.n	8014b68 <_malloc_r+0x20>
 8014c3e:	6005      	str	r5, [r0, #0]
 8014c40:	e7d6      	b.n	8014bf0 <_malloc_r+0xa8>
 8014c42:	bf00      	nop
 8014c44:	200034f8 	.word	0x200034f8

08014c48 <__malloc_lock>:
 8014c48:	4801      	ldr	r0, [pc, #4]	@ (8014c50 <__malloc_lock+0x8>)
 8014c4a:	f000 b84b 	b.w	8014ce4 <__retarget_lock_acquire_recursive>
 8014c4e:	bf00      	nop
 8014c50:	20003638 	.word	0x20003638

08014c54 <__malloc_unlock>:
 8014c54:	4801      	ldr	r0, [pc, #4]	@ (8014c5c <__malloc_unlock+0x8>)
 8014c56:	f000 b846 	b.w	8014ce6 <__retarget_lock_release_recursive>
 8014c5a:	bf00      	nop
 8014c5c:	20003638 	.word	0x20003638

08014c60 <memset>:
 8014c60:	4603      	mov	r3, r0
 8014c62:	4402      	add	r2, r0
 8014c64:	4293      	cmp	r3, r2
 8014c66:	d100      	bne.n	8014c6a <memset+0xa>
 8014c68:	4770      	bx	lr
 8014c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8014c6e:	e7f9      	b.n	8014c64 <memset+0x4>

08014c70 <_sbrk_r>:
 8014c70:	b538      	push	{r3, r4, r5, lr}
 8014c72:	2300      	movs	r3, #0
 8014c74:	4d05      	ldr	r5, [pc, #20]	@ (8014c8c <_sbrk_r+0x1c>)
 8014c76:	4604      	mov	r4, r0
 8014c78:	4608      	mov	r0, r1
 8014c7a:	602b      	str	r3, [r5, #0]
 8014c7c:	f7f0 ff90 	bl	8005ba0 <_sbrk>
 8014c80:	1c43      	adds	r3, r0, #1
 8014c82:	d102      	bne.n	8014c8a <_sbrk_r+0x1a>
 8014c84:	682b      	ldr	r3, [r5, #0]
 8014c86:	b103      	cbz	r3, 8014c8a <_sbrk_r+0x1a>
 8014c88:	6023      	str	r3, [r4, #0]
 8014c8a:	bd38      	pop	{r3, r4, r5, pc}
 8014c8c:	20003634 	.word	0x20003634

08014c90 <__errno>:
 8014c90:	4b01      	ldr	r3, [pc, #4]	@ (8014c98 <__errno+0x8>)
 8014c92:	6818      	ldr	r0, [r3, #0]
 8014c94:	4770      	bx	lr
 8014c96:	bf00      	nop
 8014c98:	20000074 	.word	0x20000074

08014c9c <__libc_init_array>:
 8014c9c:	b570      	push	{r4, r5, r6, lr}
 8014c9e:	2600      	movs	r6, #0
 8014ca0:	4d0c      	ldr	r5, [pc, #48]	@ (8014cd4 <__libc_init_array+0x38>)
 8014ca2:	4c0d      	ldr	r4, [pc, #52]	@ (8014cd8 <__libc_init_array+0x3c>)
 8014ca4:	1b64      	subs	r4, r4, r5
 8014ca6:	10a4      	asrs	r4, r4, #2
 8014ca8:	42a6      	cmp	r6, r4
 8014caa:	d109      	bne.n	8014cc0 <__libc_init_array+0x24>
 8014cac:	f000 fdd0 	bl	8015850 <_init>
 8014cb0:	2600      	movs	r6, #0
 8014cb2:	4d0a      	ldr	r5, [pc, #40]	@ (8014cdc <__libc_init_array+0x40>)
 8014cb4:	4c0a      	ldr	r4, [pc, #40]	@ (8014ce0 <__libc_init_array+0x44>)
 8014cb6:	1b64      	subs	r4, r4, r5
 8014cb8:	10a4      	asrs	r4, r4, #2
 8014cba:	42a6      	cmp	r6, r4
 8014cbc:	d105      	bne.n	8014cca <__libc_init_array+0x2e>
 8014cbe:	bd70      	pop	{r4, r5, r6, pc}
 8014cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8014cc4:	4798      	blx	r3
 8014cc6:	3601      	adds	r6, #1
 8014cc8:	e7ee      	b.n	8014ca8 <__libc_init_array+0xc>
 8014cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8014cce:	4798      	blx	r3
 8014cd0:	3601      	adds	r6, #1
 8014cd2:	e7f2      	b.n	8014cba <__libc_init_array+0x1e>
 8014cd4:	08016030 	.word	0x08016030
 8014cd8:	08016030 	.word	0x08016030
 8014cdc:	08016030 	.word	0x08016030
 8014ce0:	08016034 	.word	0x08016034

08014ce4 <__retarget_lock_acquire_recursive>:
 8014ce4:	4770      	bx	lr

08014ce6 <__retarget_lock_release_recursive>:
 8014ce6:	4770      	bx	lr

08014ce8 <memcpy>:
 8014ce8:	440a      	add	r2, r1
 8014cea:	4291      	cmp	r1, r2
 8014cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8014cf0:	d100      	bne.n	8014cf4 <memcpy+0xc>
 8014cf2:	4770      	bx	lr
 8014cf4:	b510      	push	{r4, lr}
 8014cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014cfa:	4291      	cmp	r1, r2
 8014cfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014d00:	d1f9      	bne.n	8014cf6 <memcpy+0xe>
 8014d02:	bd10      	pop	{r4, pc}

08014d04 <sqrt>:
 8014d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d06:	4606      	mov	r6, r0
 8014d08:	460f      	mov	r7, r1
 8014d0a:	f000 f88f 	bl	8014e2c <__ieee754_sqrt>
 8014d0e:	4632      	mov	r2, r6
 8014d10:	4604      	mov	r4, r0
 8014d12:	460d      	mov	r5, r1
 8014d14:	463b      	mov	r3, r7
 8014d16:	4630      	mov	r0, r6
 8014d18:	4639      	mov	r1, r7
 8014d1a:	f7eb fedf 	bl	8000adc <__aeabi_dcmpun>
 8014d1e:	b990      	cbnz	r0, 8014d46 <sqrt+0x42>
 8014d20:	2200      	movs	r2, #0
 8014d22:	2300      	movs	r3, #0
 8014d24:	4630      	mov	r0, r6
 8014d26:	4639      	mov	r1, r7
 8014d28:	f7eb feb0 	bl	8000a8c <__aeabi_dcmplt>
 8014d2c:	b158      	cbz	r0, 8014d46 <sqrt+0x42>
 8014d2e:	f7ff ffaf 	bl	8014c90 <__errno>
 8014d32:	2321      	movs	r3, #33	@ 0x21
 8014d34:	2200      	movs	r2, #0
 8014d36:	6003      	str	r3, [r0, #0]
 8014d38:	2300      	movs	r3, #0
 8014d3a:	4610      	mov	r0, r2
 8014d3c:	4619      	mov	r1, r3
 8014d3e:	f7eb fd5d 	bl	80007fc <__aeabi_ddiv>
 8014d42:	4604      	mov	r4, r0
 8014d44:	460d      	mov	r5, r1
 8014d46:	4620      	mov	r0, r4
 8014d48:	4629      	mov	r1, r5
 8014d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014d4c <powf>:
 8014d4c:	b570      	push	{r4, r5, r6, lr}
 8014d4e:	460c      	mov	r4, r1
 8014d50:	4606      	mov	r6, r0
 8014d52:	f000 f9b1 	bl	80150b8 <__ieee754_powf>
 8014d56:	4621      	mov	r1, r4
 8014d58:	4605      	mov	r5, r0
 8014d5a:	4620      	mov	r0, r4
 8014d5c:	f7ec f9f0 	bl	8001140 <__aeabi_fcmpun>
 8014d60:	bb68      	cbnz	r0, 8014dbe <powf+0x72>
 8014d62:	2100      	movs	r1, #0
 8014d64:	4630      	mov	r0, r6
 8014d66:	f7ec f9b9 	bl	80010dc <__aeabi_fcmpeq>
 8014d6a:	b190      	cbz	r0, 8014d92 <powf+0x46>
 8014d6c:	2100      	movs	r1, #0
 8014d6e:	4620      	mov	r0, r4
 8014d70:	f7ec f9b4 	bl	80010dc <__aeabi_fcmpeq>
 8014d74:	2800      	cmp	r0, #0
 8014d76:	d133      	bne.n	8014de0 <powf+0x94>
 8014d78:	4620      	mov	r0, r4
 8014d7a:	f000 f84e 	bl	8014e1a <finitef>
 8014d7e:	b1f0      	cbz	r0, 8014dbe <powf+0x72>
 8014d80:	2100      	movs	r1, #0
 8014d82:	4620      	mov	r0, r4
 8014d84:	f7ec f9b4 	bl	80010f0 <__aeabi_fcmplt>
 8014d88:	b1c8      	cbz	r0, 8014dbe <powf+0x72>
 8014d8a:	f7ff ff81 	bl	8014c90 <__errno>
 8014d8e:	2322      	movs	r3, #34	@ 0x22
 8014d90:	e014      	b.n	8014dbc <powf+0x70>
 8014d92:	4628      	mov	r0, r5
 8014d94:	f000 f841 	bl	8014e1a <finitef>
 8014d98:	b998      	cbnz	r0, 8014dc2 <powf+0x76>
 8014d9a:	4630      	mov	r0, r6
 8014d9c:	f000 f83d 	bl	8014e1a <finitef>
 8014da0:	b178      	cbz	r0, 8014dc2 <powf+0x76>
 8014da2:	4620      	mov	r0, r4
 8014da4:	f000 f839 	bl	8014e1a <finitef>
 8014da8:	b158      	cbz	r0, 8014dc2 <powf+0x76>
 8014daa:	4629      	mov	r1, r5
 8014dac:	4628      	mov	r0, r5
 8014dae:	f7ec f9c7 	bl	8001140 <__aeabi_fcmpun>
 8014db2:	2800      	cmp	r0, #0
 8014db4:	d0e9      	beq.n	8014d8a <powf+0x3e>
 8014db6:	f7ff ff6b 	bl	8014c90 <__errno>
 8014dba:	2321      	movs	r3, #33	@ 0x21
 8014dbc:	6003      	str	r3, [r0, #0]
 8014dbe:	4628      	mov	r0, r5
 8014dc0:	bd70      	pop	{r4, r5, r6, pc}
 8014dc2:	2100      	movs	r1, #0
 8014dc4:	4628      	mov	r0, r5
 8014dc6:	f7ec f989 	bl	80010dc <__aeabi_fcmpeq>
 8014dca:	2800      	cmp	r0, #0
 8014dcc:	d0f7      	beq.n	8014dbe <powf+0x72>
 8014dce:	4630      	mov	r0, r6
 8014dd0:	f000 f823 	bl	8014e1a <finitef>
 8014dd4:	2800      	cmp	r0, #0
 8014dd6:	d0f2      	beq.n	8014dbe <powf+0x72>
 8014dd8:	4620      	mov	r0, r4
 8014dda:	f000 f81e 	bl	8014e1a <finitef>
 8014dde:	e7d3      	b.n	8014d88 <powf+0x3c>
 8014de0:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8014de4:	e7eb      	b.n	8014dbe <powf+0x72>

08014de6 <sqrtf>:
 8014de6:	b538      	push	{r3, r4, r5, lr}
 8014de8:	4605      	mov	r5, r0
 8014dea:	f000 f8f5 	bl	8014fd8 <__ieee754_sqrtf>
 8014dee:	4629      	mov	r1, r5
 8014df0:	4604      	mov	r4, r0
 8014df2:	4628      	mov	r0, r5
 8014df4:	f7ec f9a4 	bl	8001140 <__aeabi_fcmpun>
 8014df8:	b968      	cbnz	r0, 8014e16 <sqrtf+0x30>
 8014dfa:	2100      	movs	r1, #0
 8014dfc:	4628      	mov	r0, r5
 8014dfe:	f7ec f977 	bl	80010f0 <__aeabi_fcmplt>
 8014e02:	b140      	cbz	r0, 8014e16 <sqrtf+0x30>
 8014e04:	f7ff ff44 	bl	8014c90 <__errno>
 8014e08:	2321      	movs	r3, #33	@ 0x21
 8014e0a:	2100      	movs	r1, #0
 8014e0c:	6003      	str	r3, [r0, #0]
 8014e0e:	4608      	mov	r0, r1
 8014e10:	f7ec f884 	bl	8000f1c <__aeabi_fdiv>
 8014e14:	4604      	mov	r4, r0
 8014e16:	4620      	mov	r0, r4
 8014e18:	bd38      	pop	{r3, r4, r5, pc}

08014e1a <finitef>:
 8014e1a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8014e1e:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8014e22:	bfac      	ite	ge
 8014e24:	2000      	movge	r0, #0
 8014e26:	2001      	movlt	r0, #1
 8014e28:	4770      	bx	lr
	...

08014e2c <__ieee754_sqrt>:
 8014e2c:	4a67      	ldr	r2, [pc, #412]	@ (8014fcc <__ieee754_sqrt+0x1a0>)
 8014e2e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e32:	438a      	bics	r2, r1
 8014e34:	4606      	mov	r6, r0
 8014e36:	460f      	mov	r7, r1
 8014e38:	460b      	mov	r3, r1
 8014e3a:	4604      	mov	r4, r0
 8014e3c:	d10e      	bne.n	8014e5c <__ieee754_sqrt+0x30>
 8014e3e:	4602      	mov	r2, r0
 8014e40:	f7eb fbb2 	bl	80005a8 <__aeabi_dmul>
 8014e44:	4602      	mov	r2, r0
 8014e46:	460b      	mov	r3, r1
 8014e48:	4630      	mov	r0, r6
 8014e4a:	4639      	mov	r1, r7
 8014e4c:	f7eb f9f6 	bl	800023c <__adddf3>
 8014e50:	4606      	mov	r6, r0
 8014e52:	460f      	mov	r7, r1
 8014e54:	4630      	mov	r0, r6
 8014e56:	4639      	mov	r1, r7
 8014e58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e5c:	2900      	cmp	r1, #0
 8014e5e:	dc0c      	bgt.n	8014e7a <__ieee754_sqrt+0x4e>
 8014e60:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8014e64:	4302      	orrs	r2, r0
 8014e66:	d0f5      	beq.n	8014e54 <__ieee754_sqrt+0x28>
 8014e68:	b189      	cbz	r1, 8014e8e <__ieee754_sqrt+0x62>
 8014e6a:	4602      	mov	r2, r0
 8014e6c:	f7eb f9e4 	bl	8000238 <__aeabi_dsub>
 8014e70:	4602      	mov	r2, r0
 8014e72:	460b      	mov	r3, r1
 8014e74:	f7eb fcc2 	bl	80007fc <__aeabi_ddiv>
 8014e78:	e7ea      	b.n	8014e50 <__ieee754_sqrt+0x24>
 8014e7a:	150a      	asrs	r2, r1, #20
 8014e7c:	d115      	bne.n	8014eaa <__ieee754_sqrt+0x7e>
 8014e7e:	2100      	movs	r1, #0
 8014e80:	e009      	b.n	8014e96 <__ieee754_sqrt+0x6a>
 8014e82:	0ae3      	lsrs	r3, r4, #11
 8014e84:	3a15      	subs	r2, #21
 8014e86:	0564      	lsls	r4, r4, #21
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d0fa      	beq.n	8014e82 <__ieee754_sqrt+0x56>
 8014e8c:	e7f7      	b.n	8014e7e <__ieee754_sqrt+0x52>
 8014e8e:	460a      	mov	r2, r1
 8014e90:	e7fa      	b.n	8014e88 <__ieee754_sqrt+0x5c>
 8014e92:	005b      	lsls	r3, r3, #1
 8014e94:	3101      	adds	r1, #1
 8014e96:	02d8      	lsls	r0, r3, #11
 8014e98:	d5fb      	bpl.n	8014e92 <__ieee754_sqrt+0x66>
 8014e9a:	1e48      	subs	r0, r1, #1
 8014e9c:	1a12      	subs	r2, r2, r0
 8014e9e:	f1c1 0020 	rsb	r0, r1, #32
 8014ea2:	fa24 f000 	lsr.w	r0, r4, r0
 8014ea6:	4303      	orrs	r3, r0
 8014ea8:	408c      	lsls	r4, r1
 8014eaa:	2600      	movs	r6, #0
 8014eac:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8014eb0:	2116      	movs	r1, #22
 8014eb2:	07d2      	lsls	r2, r2, #31
 8014eb4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8014eb8:	4632      	mov	r2, r6
 8014eba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014ebe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014ec2:	bf5c      	itt	pl
 8014ec4:	005b      	lslpl	r3, r3, #1
 8014ec6:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8014eca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014ece:	bf58      	it	pl
 8014ed0:	0064      	lslpl	r4, r4, #1
 8014ed2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8014ed6:	107f      	asrs	r7, r7, #1
 8014ed8:	0064      	lsls	r4, r4, #1
 8014eda:	1815      	adds	r5, r2, r0
 8014edc:	429d      	cmp	r5, r3
 8014ede:	bfde      	ittt	le
 8014ee0:	182a      	addle	r2, r5, r0
 8014ee2:	1b5b      	suble	r3, r3, r5
 8014ee4:	1836      	addle	r6, r6, r0
 8014ee6:	0fe5      	lsrs	r5, r4, #31
 8014ee8:	3901      	subs	r1, #1
 8014eea:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8014eee:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8014ef2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8014ef6:	d1f0      	bne.n	8014eda <__ieee754_sqrt+0xae>
 8014ef8:	460d      	mov	r5, r1
 8014efa:	f04f 0a20 	mov.w	sl, #32
 8014efe:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8014f02:	429a      	cmp	r2, r3
 8014f04:	eb01 0c00 	add.w	ip, r1, r0
 8014f08:	db02      	blt.n	8014f10 <__ieee754_sqrt+0xe4>
 8014f0a:	d113      	bne.n	8014f34 <__ieee754_sqrt+0x108>
 8014f0c:	45a4      	cmp	ip, r4
 8014f0e:	d811      	bhi.n	8014f34 <__ieee754_sqrt+0x108>
 8014f10:	f1bc 0f00 	cmp.w	ip, #0
 8014f14:	eb0c 0100 	add.w	r1, ip, r0
 8014f18:	da42      	bge.n	8014fa0 <__ieee754_sqrt+0x174>
 8014f1a:	2900      	cmp	r1, #0
 8014f1c:	db40      	blt.n	8014fa0 <__ieee754_sqrt+0x174>
 8014f1e:	f102 0e01 	add.w	lr, r2, #1
 8014f22:	1a9b      	subs	r3, r3, r2
 8014f24:	4672      	mov	r2, lr
 8014f26:	45a4      	cmp	ip, r4
 8014f28:	bf88      	it	hi
 8014f2a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8014f2e:	eba4 040c 	sub.w	r4, r4, ip
 8014f32:	4405      	add	r5, r0
 8014f34:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8014f38:	f1ba 0a01 	subs.w	sl, sl, #1
 8014f3c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8014f40:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8014f44:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8014f48:	d1db      	bne.n	8014f02 <__ieee754_sqrt+0xd6>
 8014f4a:	431c      	orrs	r4, r3
 8014f4c:	d01a      	beq.n	8014f84 <__ieee754_sqrt+0x158>
 8014f4e:	4c20      	ldr	r4, [pc, #128]	@ (8014fd0 <__ieee754_sqrt+0x1a4>)
 8014f50:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8014fd4 <__ieee754_sqrt+0x1a8>
 8014f54:	e9d4 0100 	ldrd	r0, r1, [r4]
 8014f58:	e9db 2300 	ldrd	r2, r3, [fp]
 8014f5c:	f7eb f96c 	bl	8000238 <__aeabi_dsub>
 8014f60:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014f64:	4602      	mov	r2, r0
 8014f66:	460b      	mov	r3, r1
 8014f68:	4640      	mov	r0, r8
 8014f6a:	4649      	mov	r1, r9
 8014f6c:	f7eb fd98 	bl	8000aa0 <__aeabi_dcmple>
 8014f70:	b140      	cbz	r0, 8014f84 <__ieee754_sqrt+0x158>
 8014f72:	e9d4 0100 	ldrd	r0, r1, [r4]
 8014f76:	e9db 2300 	ldrd	r2, r3, [fp]
 8014f7a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8014f7e:	d111      	bne.n	8014fa4 <__ieee754_sqrt+0x178>
 8014f80:	4655      	mov	r5, sl
 8014f82:	3601      	adds	r6, #1
 8014f84:	1072      	asrs	r2, r6, #1
 8014f86:	086b      	lsrs	r3, r5, #1
 8014f88:	07f1      	lsls	r1, r6, #31
 8014f8a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8014f8e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8014f92:	bf48      	it	mi
 8014f94:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8014f98:	4618      	mov	r0, r3
 8014f9a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8014f9e:	e757      	b.n	8014e50 <__ieee754_sqrt+0x24>
 8014fa0:	4696      	mov	lr, r2
 8014fa2:	e7be      	b.n	8014f22 <__ieee754_sqrt+0xf6>
 8014fa4:	f7eb f94a 	bl	800023c <__adddf3>
 8014fa8:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014fac:	4602      	mov	r2, r0
 8014fae:	460b      	mov	r3, r1
 8014fb0:	4640      	mov	r0, r8
 8014fb2:	4649      	mov	r1, r9
 8014fb4:	f7eb fd6a 	bl	8000a8c <__aeabi_dcmplt>
 8014fb8:	b120      	cbz	r0, 8014fc4 <__ieee754_sqrt+0x198>
 8014fba:	1ca8      	adds	r0, r5, #2
 8014fbc:	bf08      	it	eq
 8014fbe:	3601      	addeq	r6, #1
 8014fc0:	3502      	adds	r5, #2
 8014fc2:	e7df      	b.n	8014f84 <__ieee754_sqrt+0x158>
 8014fc4:	1c6b      	adds	r3, r5, #1
 8014fc6:	f023 0501 	bic.w	r5, r3, #1
 8014fca:	e7db      	b.n	8014f84 <__ieee754_sqrt+0x158>
 8014fcc:	7ff00000 	.word	0x7ff00000
 8014fd0:	200000d0 	.word	0x200000d0
 8014fd4:	200000c8 	.word	0x200000c8

08014fd8 <__ieee754_sqrtf>:
 8014fd8:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8014fdc:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8014fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fe4:	4603      	mov	r3, r0
 8014fe6:	4604      	mov	r4, r0
 8014fe8:	d30a      	bcc.n	8015000 <__ieee754_sqrtf+0x28>
 8014fea:	4601      	mov	r1, r0
 8014fec:	f7eb fee2 	bl	8000db4 <__aeabi_fmul>
 8014ff0:	4601      	mov	r1, r0
 8014ff2:	4620      	mov	r0, r4
 8014ff4:	f7eb fdd6 	bl	8000ba4 <__addsf3>
 8014ff8:	4604      	mov	r4, r0
 8014ffa:	4620      	mov	r0, r4
 8014ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015000:	2a00      	cmp	r2, #0
 8015002:	d0fa      	beq.n	8014ffa <__ieee754_sqrtf+0x22>
 8015004:	2800      	cmp	r0, #0
 8015006:	da06      	bge.n	8015016 <__ieee754_sqrtf+0x3e>
 8015008:	4601      	mov	r1, r0
 801500a:	f7eb fdc9 	bl	8000ba0 <__aeabi_fsub>
 801500e:	4601      	mov	r1, r0
 8015010:	f7eb ff84 	bl	8000f1c <__aeabi_fdiv>
 8015014:	e7f0      	b.n	8014ff8 <__ieee754_sqrtf+0x20>
 8015016:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 801501a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 801501e:	d03e      	beq.n	801509e <__ieee754_sqrtf+0xc6>
 8015020:	2400      	movs	r4, #0
 8015022:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 8015026:	07ca      	lsls	r2, r1, #31
 8015028:	f04f 0019 	mov.w	r0, #25
 801502c:	4626      	mov	r6, r4
 801502e:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8015032:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8015036:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801503a:	bf58      	it	pl
 801503c:	005b      	lslpl	r3, r3, #1
 801503e:	106d      	asrs	r5, r5, #1
 8015040:	005b      	lsls	r3, r3, #1
 8015042:	1872      	adds	r2, r6, r1
 8015044:	429a      	cmp	r2, r3
 8015046:	bfcf      	iteee	gt
 8015048:	461a      	movgt	r2, r3
 801504a:	1856      	addle	r6, r2, r1
 801504c:	1864      	addle	r4, r4, r1
 801504e:	1a9a      	suble	r2, r3, r2
 8015050:	3801      	subs	r0, #1
 8015052:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8015056:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801505a:	d1f2      	bne.n	8015042 <__ieee754_sqrtf+0x6a>
 801505c:	b1ba      	cbz	r2, 801508e <__ieee754_sqrtf+0xb6>
 801505e:	4e14      	ldr	r6, [pc, #80]	@ (80150b0 <__ieee754_sqrtf+0xd8>)
 8015060:	4f14      	ldr	r7, [pc, #80]	@ (80150b4 <__ieee754_sqrtf+0xdc>)
 8015062:	6830      	ldr	r0, [r6, #0]
 8015064:	6839      	ldr	r1, [r7, #0]
 8015066:	f7eb fd9b 	bl	8000ba0 <__aeabi_fsub>
 801506a:	f8d6 8000 	ldr.w	r8, [r6]
 801506e:	4601      	mov	r1, r0
 8015070:	4640      	mov	r0, r8
 8015072:	f7ec f847 	bl	8001104 <__aeabi_fcmple>
 8015076:	b150      	cbz	r0, 801508e <__ieee754_sqrtf+0xb6>
 8015078:	6830      	ldr	r0, [r6, #0]
 801507a:	6839      	ldr	r1, [r7, #0]
 801507c:	f7eb fd92 	bl	8000ba4 <__addsf3>
 8015080:	6836      	ldr	r6, [r6, #0]
 8015082:	4601      	mov	r1, r0
 8015084:	4630      	mov	r0, r6
 8015086:	f7ec f833 	bl	80010f0 <__aeabi_fcmplt>
 801508a:	b168      	cbz	r0, 80150a8 <__ieee754_sqrtf+0xd0>
 801508c:	3402      	adds	r4, #2
 801508e:	1064      	asrs	r4, r4, #1
 8015090:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8015094:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8015098:	e7af      	b.n	8014ffa <__ieee754_sqrtf+0x22>
 801509a:	005b      	lsls	r3, r3, #1
 801509c:	3201      	adds	r2, #1
 801509e:	0218      	lsls	r0, r3, #8
 80150a0:	d5fb      	bpl.n	801509a <__ieee754_sqrtf+0xc2>
 80150a2:	3a01      	subs	r2, #1
 80150a4:	1a89      	subs	r1, r1, r2
 80150a6:	e7bb      	b.n	8015020 <__ieee754_sqrtf+0x48>
 80150a8:	3401      	adds	r4, #1
 80150aa:	f024 0401 	bic.w	r4, r4, #1
 80150ae:	e7ee      	b.n	801508e <__ieee754_sqrtf+0xb6>
 80150b0:	200000dc 	.word	0x200000dc
 80150b4:	200000d8 	.word	0x200000d8

080150b8 <__ieee754_powf>:
 80150b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150bc:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 80150c0:	4680      	mov	r8, r0
 80150c2:	460f      	mov	r7, r1
 80150c4:	4606      	mov	r6, r0
 80150c6:	460c      	mov	r4, r1
 80150c8:	b087      	sub	sp, #28
 80150ca:	d10c      	bne.n	80150e6 <__ieee754_powf+0x2e>
 80150cc:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 80150d0:	0076      	lsls	r6, r6, #1
 80150d2:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80150d6:	f240 8336 	bls.w	8015746 <__ieee754_powf+0x68e>
 80150da:	4639      	mov	r1, r7
 80150dc:	4640      	mov	r0, r8
 80150de:	f7eb fd61 	bl	8000ba4 <__addsf3>
 80150e2:	4601      	mov	r1, r0
 80150e4:	e03e      	b.n	8015164 <__ieee754_powf+0xac>
 80150e6:	f020 4900 	bic.w	r9, r0, #2147483648	@ 0x80000000
 80150ea:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80150ee:	d802      	bhi.n	80150f6 <__ieee754_powf+0x3e>
 80150f0:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 80150f4:	d908      	bls.n	8015108 <__ieee754_powf+0x50>
 80150f6:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80150fa:	d1ee      	bne.n	80150da <__ieee754_powf+0x22>
 80150fc:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8015100:	0064      	lsls	r4, r4, #1
 8015102:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8015106:	e7e6      	b.n	80150d6 <__ieee754_powf+0x1e>
 8015108:	2800      	cmp	r0, #0
 801510a:	da1e      	bge.n	801514a <__ieee754_powf+0x92>
 801510c:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 8015110:	d22c      	bcs.n	801516c <__ieee754_powf+0xb4>
 8015112:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8015116:	d333      	bcc.n	8015180 <__ieee754_powf+0xc8>
 8015118:	ea4f 53eb 	mov.w	r3, fp, asr #23
 801511c:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8015120:	fa4b f503 	asr.w	r5, fp, r3
 8015124:	fa05 f303 	lsl.w	r3, r5, r3
 8015128:	455b      	cmp	r3, fp
 801512a:	d127      	bne.n	801517c <__ieee754_powf+0xc4>
 801512c:	f005 0501 	and.w	r5, r5, #1
 8015130:	f1c5 0502 	rsb	r5, r5, #2
 8015134:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8015138:	d123      	bne.n	8015182 <__ieee754_powf+0xca>
 801513a:	2c00      	cmp	r4, #0
 801513c:	4641      	mov	r1, r8
 801513e:	da11      	bge.n	8015164 <__ieee754_powf+0xac>
 8015140:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8015144:	f7eb feea 	bl	8000f1c <__aeabi_fdiv>
 8015148:	e7cb      	b.n	80150e2 <__ieee754_powf+0x2a>
 801514a:	2500      	movs	r5, #0
 801514c:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8015150:	d1f0      	bne.n	8015134 <__ieee754_powf+0x7c>
 8015152:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8015156:	f000 82f6 	beq.w	8015746 <__ieee754_powf+0x68e>
 801515a:	d909      	bls.n	8015170 <__ieee754_powf+0xb8>
 801515c:	2c00      	cmp	r4, #0
 801515e:	f2c0 82f5 	blt.w	801574c <__ieee754_powf+0x694>
 8015162:	4639      	mov	r1, r7
 8015164:	4608      	mov	r0, r1
 8015166:	b007      	add	sp, #28
 8015168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801516c:	2502      	movs	r5, #2
 801516e:	e7ed      	b.n	801514c <__ieee754_powf+0x94>
 8015170:	2c00      	cmp	r4, #0
 8015172:	f280 82eb 	bge.w	801574c <__ieee754_powf+0x694>
 8015176:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 801517a:	e7f3      	b.n	8015164 <__ieee754_powf+0xac>
 801517c:	2500      	movs	r5, #0
 801517e:	e7d9      	b.n	8015134 <__ieee754_powf+0x7c>
 8015180:	2500      	movs	r5, #0
 8015182:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8015186:	d104      	bne.n	8015192 <__ieee754_powf+0xda>
 8015188:	4641      	mov	r1, r8
 801518a:	4640      	mov	r0, r8
 801518c:	f7eb fe12 	bl	8000db4 <__aeabi_fmul>
 8015190:	e7a7      	b.n	80150e2 <__ieee754_powf+0x2a>
 8015192:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8015196:	d107      	bne.n	80151a8 <__ieee754_powf+0xf0>
 8015198:	2e00      	cmp	r6, #0
 801519a:	db05      	blt.n	80151a8 <__ieee754_powf+0xf0>
 801519c:	4640      	mov	r0, r8
 801519e:	b007      	add	sp, #28
 80151a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151a4:	f7ff bf18 	b.w	8014fd8 <__ieee754_sqrtf>
 80151a8:	4640      	mov	r0, r8
 80151aa:	f000 fae3 	bl	8015774 <fabsf>
 80151ae:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80151b2:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80151b6:	46ca      	mov	sl, r9
 80151b8:	4601      	mov	r1, r0
 80151ba:	d002      	beq.n	80151c2 <__ieee754_powf+0x10a>
 80151bc:	f1b9 0f00 	cmp.w	r9, #0
 80151c0:	d117      	bne.n	80151f2 <__ieee754_powf+0x13a>
 80151c2:	2c00      	cmp	r4, #0
 80151c4:	da04      	bge.n	80151d0 <__ieee754_powf+0x118>
 80151c6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80151ca:	f7eb fea7 	bl	8000f1c <__aeabi_fdiv>
 80151ce:	4601      	mov	r1, r0
 80151d0:	2e00      	cmp	r6, #0
 80151d2:	dac7      	bge.n	8015164 <__ieee754_powf+0xac>
 80151d4:	f1a9 597e 	sub.w	r9, r9, #1065353216	@ 0x3f800000
 80151d8:	ea59 0905 	orrs.w	r9, r9, r5
 80151dc:	d104      	bne.n	80151e8 <__ieee754_powf+0x130>
 80151de:	4608      	mov	r0, r1
 80151e0:	f7eb fcde 	bl	8000ba0 <__aeabi_fsub>
 80151e4:	4601      	mov	r1, r0
 80151e6:	e7ad      	b.n	8015144 <__ieee754_powf+0x8c>
 80151e8:	2d01      	cmp	r5, #1
 80151ea:	d1bb      	bne.n	8015164 <__ieee754_powf+0xac>
 80151ec:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 80151f0:	e777      	b.n	80150e2 <__ieee754_powf+0x2a>
 80151f2:	0ff3      	lsrs	r3, r6, #31
 80151f4:	3b01      	subs	r3, #1
 80151f6:	9303      	str	r3, [sp, #12]
 80151f8:	432b      	orrs	r3, r5
 80151fa:	d101      	bne.n	8015200 <__ieee754_powf+0x148>
 80151fc:	4641      	mov	r1, r8
 80151fe:	e7ee      	b.n	80151de <__ieee754_powf+0x126>
 8015200:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 8015204:	f240 809e 	bls.w	8015344 <__ieee754_powf+0x28c>
 8015208:	4b47      	ldr	r3, [pc, #284]	@ (8015328 <__ieee754_powf+0x270>)
 801520a:	4599      	cmp	r9, r3
 801520c:	d807      	bhi.n	801521e <__ieee754_powf+0x166>
 801520e:	2c00      	cmp	r4, #0
 8015210:	da0a      	bge.n	8015228 <__ieee754_powf+0x170>
 8015212:	2000      	movs	r0, #0
 8015214:	b007      	add	sp, #28
 8015216:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801521a:	f000 bb14 	b.w	8015846 <__math_oflowf>
 801521e:	4b43      	ldr	r3, [pc, #268]	@ (801532c <__ieee754_powf+0x274>)
 8015220:	4599      	cmp	r9, r3
 8015222:	d907      	bls.n	8015234 <__ieee754_powf+0x17c>
 8015224:	2c00      	cmp	r4, #0
 8015226:	dcf4      	bgt.n	8015212 <__ieee754_powf+0x15a>
 8015228:	2000      	movs	r0, #0
 801522a:	b007      	add	sp, #28
 801522c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015230:	f000 bb05 	b.w	801583e <__math_uflowf>
 8015234:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8015238:	f7eb fcb2 	bl	8000ba0 <__aeabi_fsub>
 801523c:	493c      	ldr	r1, [pc, #240]	@ (8015330 <__ieee754_powf+0x278>)
 801523e:	4606      	mov	r6, r0
 8015240:	f7eb fdb8 	bl	8000db4 <__aeabi_fmul>
 8015244:	493b      	ldr	r1, [pc, #236]	@ (8015334 <__ieee754_powf+0x27c>)
 8015246:	4680      	mov	r8, r0
 8015248:	4630      	mov	r0, r6
 801524a:	f7eb fdb3 	bl	8000db4 <__aeabi_fmul>
 801524e:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8015252:	4681      	mov	r9, r0
 8015254:	4630      	mov	r0, r6
 8015256:	f7eb fdad 	bl	8000db4 <__aeabi_fmul>
 801525a:	4601      	mov	r1, r0
 801525c:	4836      	ldr	r0, [pc, #216]	@ (8015338 <__ieee754_powf+0x280>)
 801525e:	f7eb fc9f 	bl	8000ba0 <__aeabi_fsub>
 8015262:	4631      	mov	r1, r6
 8015264:	f7eb fda6 	bl	8000db4 <__aeabi_fmul>
 8015268:	4601      	mov	r1, r0
 801526a:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 801526e:	f7eb fc97 	bl	8000ba0 <__aeabi_fsub>
 8015272:	4631      	mov	r1, r6
 8015274:	4682      	mov	sl, r0
 8015276:	4630      	mov	r0, r6
 8015278:	f7eb fd9c 	bl	8000db4 <__aeabi_fmul>
 801527c:	4601      	mov	r1, r0
 801527e:	4650      	mov	r0, sl
 8015280:	f7eb fd98 	bl	8000db4 <__aeabi_fmul>
 8015284:	492d      	ldr	r1, [pc, #180]	@ (801533c <__ieee754_powf+0x284>)
 8015286:	f7eb fd95 	bl	8000db4 <__aeabi_fmul>
 801528a:	4601      	mov	r1, r0
 801528c:	4648      	mov	r0, r9
 801528e:	f7eb fc87 	bl	8000ba0 <__aeabi_fsub>
 8015292:	4601      	mov	r1, r0
 8015294:	4606      	mov	r6, r0
 8015296:	4640      	mov	r0, r8
 8015298:	f7eb fc84 	bl	8000ba4 <__addsf3>
 801529c:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 80152a0:	f02b 0b0f 	bic.w	fp, fp, #15
 80152a4:	4641      	mov	r1, r8
 80152a6:	4658      	mov	r0, fp
 80152a8:	f7eb fc7a 	bl	8000ba0 <__aeabi_fsub>
 80152ac:	4601      	mov	r1, r0
 80152ae:	4630      	mov	r0, r6
 80152b0:	f7eb fc76 	bl	8000ba0 <__aeabi_fsub>
 80152b4:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 80152b8:	9b03      	ldr	r3, [sp, #12]
 80152ba:	3d01      	subs	r5, #1
 80152bc:	f024 040f 	bic.w	r4, r4, #15
 80152c0:	431d      	orrs	r5, r3
 80152c2:	4606      	mov	r6, r0
 80152c4:	4621      	mov	r1, r4
 80152c6:	4638      	mov	r0, r7
 80152c8:	bf14      	ite	ne
 80152ca:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 80152ce:	4d1c      	ldreq	r5, [pc, #112]	@ (8015340 <__ieee754_powf+0x288>)
 80152d0:	f7eb fc66 	bl	8000ba0 <__aeabi_fsub>
 80152d4:	4659      	mov	r1, fp
 80152d6:	f7eb fd6d 	bl	8000db4 <__aeabi_fmul>
 80152da:	4639      	mov	r1, r7
 80152dc:	4680      	mov	r8, r0
 80152de:	4630      	mov	r0, r6
 80152e0:	f7eb fd68 	bl	8000db4 <__aeabi_fmul>
 80152e4:	4601      	mov	r1, r0
 80152e6:	4640      	mov	r0, r8
 80152e8:	f7eb fc5c 	bl	8000ba4 <__addsf3>
 80152ec:	4621      	mov	r1, r4
 80152ee:	4606      	mov	r6, r0
 80152f0:	4658      	mov	r0, fp
 80152f2:	f7eb fd5f 	bl	8000db4 <__aeabi_fmul>
 80152f6:	4601      	mov	r1, r0
 80152f8:	4607      	mov	r7, r0
 80152fa:	4630      	mov	r0, r6
 80152fc:	f7eb fc52 	bl	8000ba4 <__addsf3>
 8015300:	2800      	cmp	r0, #0
 8015302:	4604      	mov	r4, r0
 8015304:	4680      	mov	r8, r0
 8015306:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 801530a:	f340 8141 	ble.w	8015590 <__ieee754_powf+0x4d8>
 801530e:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8015312:	f240 812a 	bls.w	801556a <__ieee754_powf+0x4b2>
 8015316:	2100      	movs	r1, #0
 8015318:	4628      	mov	r0, r5
 801531a:	f7eb fee9 	bl	80010f0 <__aeabi_fcmplt>
 801531e:	3800      	subs	r0, #0
 8015320:	bf18      	it	ne
 8015322:	2001      	movne	r0, #1
 8015324:	e776      	b.n	8015214 <__ieee754_powf+0x15c>
 8015326:	bf00      	nop
 8015328:	3f7ffff3 	.word	0x3f7ffff3
 801532c:	3f800007 	.word	0x3f800007
 8015330:	3fb8aa00 	.word	0x3fb8aa00
 8015334:	36eca570 	.word	0x36eca570
 8015338:	3eaaaaab 	.word	0x3eaaaaab
 801533c:	3fb8aa3b 	.word	0x3fb8aa3b
 8015340:	bf800000 	.word	0xbf800000
 8015344:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8015348:	f040 810b 	bne.w	8015562 <__ieee754_powf+0x4aa>
 801534c:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 8015350:	f7eb fd30 	bl	8000db4 <__aeabi_fmul>
 8015354:	f06f 0217 	mvn.w	r2, #23
 8015358:	4682      	mov	sl, r0
 801535a:	ea4f 53ea 	mov.w	r3, sl, asr #23
 801535e:	3b7f      	subs	r3, #127	@ 0x7f
 8015360:	441a      	add	r2, r3
 8015362:	4b96      	ldr	r3, [pc, #600]	@ (80155bc <__ieee754_powf+0x504>)
 8015364:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 8015368:	459a      	cmp	sl, r3
 801536a:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 801536e:	dd06      	ble.n	801537e <__ieee754_powf+0x2c6>
 8015370:	4b93      	ldr	r3, [pc, #588]	@ (80155c0 <__ieee754_powf+0x508>)
 8015372:	459a      	cmp	sl, r3
 8015374:	f340 80f7 	ble.w	8015566 <__ieee754_powf+0x4ae>
 8015378:	3201      	adds	r2, #1
 801537a:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 801537e:	2300      	movs	r3, #0
 8015380:	9301      	str	r3, [sp, #4]
 8015382:	9205      	str	r2, [sp, #20]
 8015384:	4b8f      	ldr	r3, [pc, #572]	@ (80155c4 <__ieee754_powf+0x50c>)
 8015386:	9a01      	ldr	r2, [sp, #4]
 8015388:	4630      	mov	r0, r6
 801538a:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 801538e:	46b2      	mov	sl, r6
 8015390:	4659      	mov	r1, fp
 8015392:	f7eb fc05 	bl	8000ba0 <__aeabi_fsub>
 8015396:	4631      	mov	r1, r6
 8015398:	4681      	mov	r9, r0
 801539a:	4658      	mov	r0, fp
 801539c:	f7eb fc02 	bl	8000ba4 <__addsf3>
 80153a0:	4601      	mov	r1, r0
 80153a2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80153a6:	f7eb fdb9 	bl	8000f1c <__aeabi_fdiv>
 80153aa:	4601      	mov	r1, r0
 80153ac:	9004      	str	r0, [sp, #16]
 80153ae:	4648      	mov	r0, r9
 80153b0:	f7eb fd00 	bl	8000db4 <__aeabi_fmul>
 80153b4:	9002      	str	r0, [sp, #8]
 80153b6:	9b02      	ldr	r3, [sp, #8]
 80153b8:	1076      	asrs	r6, r6, #1
 80153ba:	f423 687f 	bic.w	r8, r3, #4080	@ 0xff0
 80153be:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 80153c2:	9b01      	ldr	r3, [sp, #4]
 80153c4:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 80153c8:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 80153cc:	f028 080f 	bic.w	r8, r8, #15
 80153d0:	4631      	mov	r1, r6
 80153d2:	4640      	mov	r0, r8
 80153d4:	f7eb fcee 	bl	8000db4 <__aeabi_fmul>
 80153d8:	4601      	mov	r1, r0
 80153da:	4648      	mov	r0, r9
 80153dc:	f7eb fbe0 	bl	8000ba0 <__aeabi_fsub>
 80153e0:	4659      	mov	r1, fp
 80153e2:	4681      	mov	r9, r0
 80153e4:	4630      	mov	r0, r6
 80153e6:	f7eb fbdb 	bl	8000ba0 <__aeabi_fsub>
 80153ea:	4601      	mov	r1, r0
 80153ec:	4650      	mov	r0, sl
 80153ee:	f7eb fbd7 	bl	8000ba0 <__aeabi_fsub>
 80153f2:	4641      	mov	r1, r8
 80153f4:	f7eb fcde 	bl	8000db4 <__aeabi_fmul>
 80153f8:	4601      	mov	r1, r0
 80153fa:	4648      	mov	r0, r9
 80153fc:	f7eb fbd0 	bl	8000ba0 <__aeabi_fsub>
 8015400:	9b04      	ldr	r3, [sp, #16]
 8015402:	4619      	mov	r1, r3
 8015404:	f7eb fcd6 	bl	8000db4 <__aeabi_fmul>
 8015408:	9902      	ldr	r1, [sp, #8]
 801540a:	4683      	mov	fp, r0
 801540c:	4608      	mov	r0, r1
 801540e:	f7eb fcd1 	bl	8000db4 <__aeabi_fmul>
 8015412:	4606      	mov	r6, r0
 8015414:	496c      	ldr	r1, [pc, #432]	@ (80155c8 <__ieee754_powf+0x510>)
 8015416:	f7eb fccd 	bl	8000db4 <__aeabi_fmul>
 801541a:	496c      	ldr	r1, [pc, #432]	@ (80155cc <__ieee754_powf+0x514>)
 801541c:	f7eb fbc2 	bl	8000ba4 <__addsf3>
 8015420:	4631      	mov	r1, r6
 8015422:	f7eb fcc7 	bl	8000db4 <__aeabi_fmul>
 8015426:	496a      	ldr	r1, [pc, #424]	@ (80155d0 <__ieee754_powf+0x518>)
 8015428:	f7eb fbbc 	bl	8000ba4 <__addsf3>
 801542c:	4631      	mov	r1, r6
 801542e:	f7eb fcc1 	bl	8000db4 <__aeabi_fmul>
 8015432:	4968      	ldr	r1, [pc, #416]	@ (80155d4 <__ieee754_powf+0x51c>)
 8015434:	f7eb fbb6 	bl	8000ba4 <__addsf3>
 8015438:	4631      	mov	r1, r6
 801543a:	f7eb fcbb 	bl	8000db4 <__aeabi_fmul>
 801543e:	4966      	ldr	r1, [pc, #408]	@ (80155d8 <__ieee754_powf+0x520>)
 8015440:	f7eb fbb0 	bl	8000ba4 <__addsf3>
 8015444:	4631      	mov	r1, r6
 8015446:	f7eb fcb5 	bl	8000db4 <__aeabi_fmul>
 801544a:	4964      	ldr	r1, [pc, #400]	@ (80155dc <__ieee754_powf+0x524>)
 801544c:	f7eb fbaa 	bl	8000ba4 <__addsf3>
 8015450:	4631      	mov	r1, r6
 8015452:	4681      	mov	r9, r0
 8015454:	4630      	mov	r0, r6
 8015456:	f7eb fcad 	bl	8000db4 <__aeabi_fmul>
 801545a:	4601      	mov	r1, r0
 801545c:	4648      	mov	r0, r9
 801545e:	f7eb fca9 	bl	8000db4 <__aeabi_fmul>
 8015462:	4606      	mov	r6, r0
 8015464:	4641      	mov	r1, r8
 8015466:	9802      	ldr	r0, [sp, #8]
 8015468:	f7eb fb9c 	bl	8000ba4 <__addsf3>
 801546c:	4659      	mov	r1, fp
 801546e:	f7eb fca1 	bl	8000db4 <__aeabi_fmul>
 8015472:	4631      	mov	r1, r6
 8015474:	f7eb fb96 	bl	8000ba4 <__addsf3>
 8015478:	4641      	mov	r1, r8
 801547a:	4681      	mov	r9, r0
 801547c:	4640      	mov	r0, r8
 801547e:	f7eb fc99 	bl	8000db4 <__aeabi_fmul>
 8015482:	4957      	ldr	r1, [pc, #348]	@ (80155e0 <__ieee754_powf+0x528>)
 8015484:	4682      	mov	sl, r0
 8015486:	f7eb fb8d 	bl	8000ba4 <__addsf3>
 801548a:	4649      	mov	r1, r9
 801548c:	f7eb fb8a 	bl	8000ba4 <__addsf3>
 8015490:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8015494:	f026 060f 	bic.w	r6, r6, #15
 8015498:	4631      	mov	r1, r6
 801549a:	4640      	mov	r0, r8
 801549c:	f7eb fc8a 	bl	8000db4 <__aeabi_fmul>
 80154a0:	494f      	ldr	r1, [pc, #316]	@ (80155e0 <__ieee754_powf+0x528>)
 80154a2:	4680      	mov	r8, r0
 80154a4:	4630      	mov	r0, r6
 80154a6:	f7eb fb7b 	bl	8000ba0 <__aeabi_fsub>
 80154aa:	4651      	mov	r1, sl
 80154ac:	f7eb fb78 	bl	8000ba0 <__aeabi_fsub>
 80154b0:	4601      	mov	r1, r0
 80154b2:	4648      	mov	r0, r9
 80154b4:	f7eb fb74 	bl	8000ba0 <__aeabi_fsub>
 80154b8:	9902      	ldr	r1, [sp, #8]
 80154ba:	f7eb fc7b 	bl	8000db4 <__aeabi_fmul>
 80154be:	4631      	mov	r1, r6
 80154c0:	4681      	mov	r9, r0
 80154c2:	4658      	mov	r0, fp
 80154c4:	f7eb fc76 	bl	8000db4 <__aeabi_fmul>
 80154c8:	4601      	mov	r1, r0
 80154ca:	4648      	mov	r0, r9
 80154cc:	f7eb fb6a 	bl	8000ba4 <__addsf3>
 80154d0:	4682      	mov	sl, r0
 80154d2:	4601      	mov	r1, r0
 80154d4:	4640      	mov	r0, r8
 80154d6:	f7eb fb65 	bl	8000ba4 <__addsf3>
 80154da:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 80154de:	f026 060f 	bic.w	r6, r6, #15
 80154e2:	4630      	mov	r0, r6
 80154e4:	493f      	ldr	r1, [pc, #252]	@ (80155e4 <__ieee754_powf+0x52c>)
 80154e6:	f7eb fc65 	bl	8000db4 <__aeabi_fmul>
 80154ea:	4641      	mov	r1, r8
 80154ec:	4681      	mov	r9, r0
 80154ee:	4630      	mov	r0, r6
 80154f0:	f7eb fb56 	bl	8000ba0 <__aeabi_fsub>
 80154f4:	4601      	mov	r1, r0
 80154f6:	4650      	mov	r0, sl
 80154f8:	f7eb fb52 	bl	8000ba0 <__aeabi_fsub>
 80154fc:	493a      	ldr	r1, [pc, #232]	@ (80155e8 <__ieee754_powf+0x530>)
 80154fe:	f7eb fc59 	bl	8000db4 <__aeabi_fmul>
 8015502:	493a      	ldr	r1, [pc, #232]	@ (80155ec <__ieee754_powf+0x534>)
 8015504:	4680      	mov	r8, r0
 8015506:	4630      	mov	r0, r6
 8015508:	f7eb fc54 	bl	8000db4 <__aeabi_fmul>
 801550c:	4601      	mov	r1, r0
 801550e:	4640      	mov	r0, r8
 8015510:	f7eb fb48 	bl	8000ba4 <__addsf3>
 8015514:	4b36      	ldr	r3, [pc, #216]	@ (80155f0 <__ieee754_powf+0x538>)
 8015516:	9a01      	ldr	r2, [sp, #4]
 8015518:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801551c:	f7eb fb42 	bl	8000ba4 <__addsf3>
 8015520:	9a05      	ldr	r2, [sp, #20]
 8015522:	4606      	mov	r6, r0
 8015524:	4610      	mov	r0, r2
 8015526:	f7eb fbf1 	bl	8000d0c <__aeabi_i2f>
 801552a:	4680      	mov	r8, r0
 801552c:	4b31      	ldr	r3, [pc, #196]	@ (80155f4 <__ieee754_powf+0x53c>)
 801552e:	9a01      	ldr	r2, [sp, #4]
 8015530:	4631      	mov	r1, r6
 8015532:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 8015536:	4648      	mov	r0, r9
 8015538:	f7eb fb34 	bl	8000ba4 <__addsf3>
 801553c:	4651      	mov	r1, sl
 801553e:	f7eb fb31 	bl	8000ba4 <__addsf3>
 8015542:	4641      	mov	r1, r8
 8015544:	f7eb fb2e 	bl	8000ba4 <__addsf3>
 8015548:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 801554c:	f02b 0b0f 	bic.w	fp, fp, #15
 8015550:	4641      	mov	r1, r8
 8015552:	4658      	mov	r0, fp
 8015554:	f7eb fb24 	bl	8000ba0 <__aeabi_fsub>
 8015558:	4651      	mov	r1, sl
 801555a:	f7eb fb21 	bl	8000ba0 <__aeabi_fsub>
 801555e:	4649      	mov	r1, r9
 8015560:	e6a2      	b.n	80152a8 <__ieee754_powf+0x1f0>
 8015562:	2200      	movs	r2, #0
 8015564:	e6f9      	b.n	801535a <__ieee754_powf+0x2a2>
 8015566:	2301      	movs	r3, #1
 8015568:	e70a      	b.n	8015380 <__ieee754_powf+0x2c8>
 801556a:	d149      	bne.n	8015600 <__ieee754_powf+0x548>
 801556c:	4922      	ldr	r1, [pc, #136]	@ (80155f8 <__ieee754_powf+0x540>)
 801556e:	4630      	mov	r0, r6
 8015570:	f7eb fb18 	bl	8000ba4 <__addsf3>
 8015574:	4639      	mov	r1, r7
 8015576:	4681      	mov	r9, r0
 8015578:	4620      	mov	r0, r4
 801557a:	f7eb fb11 	bl	8000ba0 <__aeabi_fsub>
 801557e:	4601      	mov	r1, r0
 8015580:	4648      	mov	r0, r9
 8015582:	f7eb fdd3 	bl	800112c <__aeabi_fcmpgt>
 8015586:	2800      	cmp	r0, #0
 8015588:	f47f aec5 	bne.w	8015316 <__ieee754_powf+0x25e>
 801558c:	2386      	movs	r3, #134	@ 0x86
 801558e:	e03c      	b.n	801560a <__ieee754_powf+0x552>
 8015590:	4a1a      	ldr	r2, [pc, #104]	@ (80155fc <__ieee754_powf+0x544>)
 8015592:	4293      	cmp	r3, r2
 8015594:	d907      	bls.n	80155a6 <__ieee754_powf+0x4ee>
 8015596:	2100      	movs	r1, #0
 8015598:	4628      	mov	r0, r5
 801559a:	f7eb fda9 	bl	80010f0 <__aeabi_fcmplt>
 801559e:	3800      	subs	r0, #0
 80155a0:	bf18      	it	ne
 80155a2:	2001      	movne	r0, #1
 80155a4:	e641      	b.n	801522a <__ieee754_powf+0x172>
 80155a6:	d12b      	bne.n	8015600 <__ieee754_powf+0x548>
 80155a8:	4639      	mov	r1, r7
 80155aa:	f7eb faf9 	bl	8000ba0 <__aeabi_fsub>
 80155ae:	4631      	mov	r1, r6
 80155b0:	f7eb fdb2 	bl	8001118 <__aeabi_fcmpge>
 80155b4:	2800      	cmp	r0, #0
 80155b6:	d0e9      	beq.n	801558c <__ieee754_powf+0x4d4>
 80155b8:	e7ed      	b.n	8015596 <__ieee754_powf+0x4de>
 80155ba:	bf00      	nop
 80155bc:	001cc471 	.word	0x001cc471
 80155c0:	005db3d6 	.word	0x005db3d6
 80155c4:	08016020 	.word	0x08016020
 80155c8:	3e53f142 	.word	0x3e53f142
 80155cc:	3e6c3255 	.word	0x3e6c3255
 80155d0:	3e8ba305 	.word	0x3e8ba305
 80155d4:	3eaaaaab 	.word	0x3eaaaaab
 80155d8:	3edb6db7 	.word	0x3edb6db7
 80155dc:	3f19999a 	.word	0x3f19999a
 80155e0:	40400000 	.word	0x40400000
 80155e4:	3f763800 	.word	0x3f763800
 80155e8:	3f76384f 	.word	0x3f76384f
 80155ec:	369dc3a0 	.word	0x369dc3a0
 80155f0:	08016010 	.word	0x08016010
 80155f4:	08016018 	.word	0x08016018
 80155f8:	3338aa3c 	.word	0x3338aa3c
 80155fc:	43160000 	.word	0x43160000
 8015600:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8015604:	f240 809b 	bls.w	801573e <__ieee754_powf+0x686>
 8015608:	15db      	asrs	r3, r3, #23
 801560a:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 801560e:	3b7e      	subs	r3, #126	@ 0x7e
 8015610:	411c      	asrs	r4, r3
 8015612:	4444      	add	r4, r8
 8015614:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 8015618:	494d      	ldr	r1, [pc, #308]	@ (8015750 <__ieee754_powf+0x698>)
 801561a:	3b7f      	subs	r3, #127	@ 0x7f
 801561c:	4119      	asrs	r1, r3
 801561e:	4021      	ands	r1, r4
 8015620:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8015624:	f1c3 0317 	rsb	r3, r3, #23
 8015628:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 801562c:	4638      	mov	r0, r7
 801562e:	411c      	asrs	r4, r3
 8015630:	f1b8 0f00 	cmp.w	r8, #0
 8015634:	bfb8      	it	lt
 8015636:	4264      	neglt	r4, r4
 8015638:	f7eb fab2 	bl	8000ba0 <__aeabi_fsub>
 801563c:	4607      	mov	r7, r0
 801563e:	4631      	mov	r1, r6
 8015640:	4638      	mov	r0, r7
 8015642:	f7eb faaf 	bl	8000ba4 <__addsf3>
 8015646:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 801564a:	f028 080f 	bic.w	r8, r8, #15
 801564e:	4640      	mov	r0, r8
 8015650:	4940      	ldr	r1, [pc, #256]	@ (8015754 <__ieee754_powf+0x69c>)
 8015652:	f7eb fbaf 	bl	8000db4 <__aeabi_fmul>
 8015656:	4639      	mov	r1, r7
 8015658:	4681      	mov	r9, r0
 801565a:	4640      	mov	r0, r8
 801565c:	f7eb faa0 	bl	8000ba0 <__aeabi_fsub>
 8015660:	4601      	mov	r1, r0
 8015662:	4630      	mov	r0, r6
 8015664:	f7eb fa9c 	bl	8000ba0 <__aeabi_fsub>
 8015668:	493b      	ldr	r1, [pc, #236]	@ (8015758 <__ieee754_powf+0x6a0>)
 801566a:	f7eb fba3 	bl	8000db4 <__aeabi_fmul>
 801566e:	493b      	ldr	r1, [pc, #236]	@ (801575c <__ieee754_powf+0x6a4>)
 8015670:	4606      	mov	r6, r0
 8015672:	4640      	mov	r0, r8
 8015674:	f7eb fb9e 	bl	8000db4 <__aeabi_fmul>
 8015678:	4601      	mov	r1, r0
 801567a:	4630      	mov	r0, r6
 801567c:	f7eb fa92 	bl	8000ba4 <__addsf3>
 8015680:	4607      	mov	r7, r0
 8015682:	4601      	mov	r1, r0
 8015684:	4648      	mov	r0, r9
 8015686:	f7eb fa8d 	bl	8000ba4 <__addsf3>
 801568a:	4649      	mov	r1, r9
 801568c:	4606      	mov	r6, r0
 801568e:	f7eb fa87 	bl	8000ba0 <__aeabi_fsub>
 8015692:	4601      	mov	r1, r0
 8015694:	4638      	mov	r0, r7
 8015696:	f7eb fa83 	bl	8000ba0 <__aeabi_fsub>
 801569a:	4631      	mov	r1, r6
 801569c:	4680      	mov	r8, r0
 801569e:	4630      	mov	r0, r6
 80156a0:	f7eb fb88 	bl	8000db4 <__aeabi_fmul>
 80156a4:	4607      	mov	r7, r0
 80156a6:	492e      	ldr	r1, [pc, #184]	@ (8015760 <__ieee754_powf+0x6a8>)
 80156a8:	f7eb fb84 	bl	8000db4 <__aeabi_fmul>
 80156ac:	492d      	ldr	r1, [pc, #180]	@ (8015764 <__ieee754_powf+0x6ac>)
 80156ae:	f7eb fa77 	bl	8000ba0 <__aeabi_fsub>
 80156b2:	4639      	mov	r1, r7
 80156b4:	f7eb fb7e 	bl	8000db4 <__aeabi_fmul>
 80156b8:	492b      	ldr	r1, [pc, #172]	@ (8015768 <__ieee754_powf+0x6b0>)
 80156ba:	f7eb fa73 	bl	8000ba4 <__addsf3>
 80156be:	4639      	mov	r1, r7
 80156c0:	f7eb fb78 	bl	8000db4 <__aeabi_fmul>
 80156c4:	4929      	ldr	r1, [pc, #164]	@ (801576c <__ieee754_powf+0x6b4>)
 80156c6:	f7eb fa6b 	bl	8000ba0 <__aeabi_fsub>
 80156ca:	4639      	mov	r1, r7
 80156cc:	f7eb fb72 	bl	8000db4 <__aeabi_fmul>
 80156d0:	4927      	ldr	r1, [pc, #156]	@ (8015770 <__ieee754_powf+0x6b8>)
 80156d2:	f7eb fa67 	bl	8000ba4 <__addsf3>
 80156d6:	4639      	mov	r1, r7
 80156d8:	f7eb fb6c 	bl	8000db4 <__aeabi_fmul>
 80156dc:	4601      	mov	r1, r0
 80156de:	4630      	mov	r0, r6
 80156e0:	f7eb fa5e 	bl	8000ba0 <__aeabi_fsub>
 80156e4:	4607      	mov	r7, r0
 80156e6:	4601      	mov	r1, r0
 80156e8:	4630      	mov	r0, r6
 80156ea:	f7eb fb63 	bl	8000db4 <__aeabi_fmul>
 80156ee:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80156f2:	4681      	mov	r9, r0
 80156f4:	4638      	mov	r0, r7
 80156f6:	f7eb fa53 	bl	8000ba0 <__aeabi_fsub>
 80156fa:	4601      	mov	r1, r0
 80156fc:	4648      	mov	r0, r9
 80156fe:	f7eb fc0d 	bl	8000f1c <__aeabi_fdiv>
 8015702:	4641      	mov	r1, r8
 8015704:	4607      	mov	r7, r0
 8015706:	4630      	mov	r0, r6
 8015708:	f7eb fb54 	bl	8000db4 <__aeabi_fmul>
 801570c:	4641      	mov	r1, r8
 801570e:	f7eb fa49 	bl	8000ba4 <__addsf3>
 8015712:	4601      	mov	r1, r0
 8015714:	4638      	mov	r0, r7
 8015716:	f7eb fa43 	bl	8000ba0 <__aeabi_fsub>
 801571a:	4631      	mov	r1, r6
 801571c:	f7eb fa40 	bl	8000ba0 <__aeabi_fsub>
 8015720:	4601      	mov	r1, r0
 8015722:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8015726:	f7eb fa3b 	bl	8000ba0 <__aeabi_fsub>
 801572a:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 801572e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8015732:	da06      	bge.n	8015742 <__ieee754_powf+0x68a>
 8015734:	4621      	mov	r1, r4
 8015736:	f000 f821 	bl	801577c <scalbnf>
 801573a:	4629      	mov	r1, r5
 801573c:	e526      	b.n	801518c <__ieee754_powf+0xd4>
 801573e:	2400      	movs	r4, #0
 8015740:	e77d      	b.n	801563e <__ieee754_powf+0x586>
 8015742:	4618      	mov	r0, r3
 8015744:	e7f9      	b.n	801573a <__ieee754_powf+0x682>
 8015746:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 801574a:	e50b      	b.n	8015164 <__ieee754_powf+0xac>
 801574c:	2100      	movs	r1, #0
 801574e:	e509      	b.n	8015164 <__ieee754_powf+0xac>
 8015750:	ff800000 	.word	0xff800000
 8015754:	3f317200 	.word	0x3f317200
 8015758:	3f317218 	.word	0x3f317218
 801575c:	35bfbe8c 	.word	0x35bfbe8c
 8015760:	3331bb4c 	.word	0x3331bb4c
 8015764:	35ddea0e 	.word	0x35ddea0e
 8015768:	388ab355 	.word	0x388ab355
 801576c:	3b360b61 	.word	0x3b360b61
 8015770:	3e2aaaab 	.word	0x3e2aaaab

08015774 <fabsf>:
 8015774:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8015778:	4770      	bx	lr
	...

0801577c <scalbnf>:
 801577c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8015780:	b538      	push	{r3, r4, r5, lr}
 8015782:	4603      	mov	r3, r0
 8015784:	460d      	mov	r5, r1
 8015786:	4604      	mov	r4, r0
 8015788:	d02e      	beq.n	80157e8 <scalbnf+0x6c>
 801578a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801578e:	d304      	bcc.n	801579a <scalbnf+0x1e>
 8015790:	4601      	mov	r1, r0
 8015792:	f7eb fa07 	bl	8000ba4 <__addsf3>
 8015796:	4603      	mov	r3, r0
 8015798:	e026      	b.n	80157e8 <scalbnf+0x6c>
 801579a:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 801579e:	d118      	bne.n	80157d2 <scalbnf+0x56>
 80157a0:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 80157a4:	f7eb fb06 	bl	8000db4 <__aeabi_fmul>
 80157a8:	4a17      	ldr	r2, [pc, #92]	@ (8015808 <scalbnf+0x8c>)
 80157aa:	4603      	mov	r3, r0
 80157ac:	4295      	cmp	r5, r2
 80157ae:	db0c      	blt.n	80157ca <scalbnf+0x4e>
 80157b0:	4604      	mov	r4, r0
 80157b2:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80157b6:	3a19      	subs	r2, #25
 80157b8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80157bc:	428d      	cmp	r5, r1
 80157be:	dd0a      	ble.n	80157d6 <scalbnf+0x5a>
 80157c0:	4912      	ldr	r1, [pc, #72]	@ (801580c <scalbnf+0x90>)
 80157c2:	4618      	mov	r0, r3
 80157c4:	f361 001e 	bfi	r0, r1, #0, #31
 80157c8:	e000      	b.n	80157cc <scalbnf+0x50>
 80157ca:	4911      	ldr	r1, [pc, #68]	@ (8015810 <scalbnf+0x94>)
 80157cc:	f7eb faf2 	bl	8000db4 <__aeabi_fmul>
 80157d0:	e7e1      	b.n	8015796 <scalbnf+0x1a>
 80157d2:	0dd2      	lsrs	r2, r2, #23
 80157d4:	e7f0      	b.n	80157b8 <scalbnf+0x3c>
 80157d6:	1951      	adds	r1, r2, r5
 80157d8:	29fe      	cmp	r1, #254	@ 0xfe
 80157da:	dcf1      	bgt.n	80157c0 <scalbnf+0x44>
 80157dc:	2900      	cmp	r1, #0
 80157de:	dd05      	ble.n	80157ec <scalbnf+0x70>
 80157e0:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 80157e4:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 80157e8:	4618      	mov	r0, r3
 80157ea:	bd38      	pop	{r3, r4, r5, pc}
 80157ec:	f111 0f16 	cmn.w	r1, #22
 80157f0:	da01      	bge.n	80157f6 <scalbnf+0x7a>
 80157f2:	4907      	ldr	r1, [pc, #28]	@ (8015810 <scalbnf+0x94>)
 80157f4:	e7e5      	b.n	80157c2 <scalbnf+0x46>
 80157f6:	f101 0019 	add.w	r0, r1, #25
 80157fa:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 80157fe:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8015802:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8015806:	e7e1      	b.n	80157cc <scalbnf+0x50>
 8015808:	ffff3cb0 	.word	0xffff3cb0
 801580c:	7149f2ca 	.word	0x7149f2ca
 8015810:	0da24260 	.word	0x0da24260

08015814 <with_errnof>:
 8015814:	b538      	push	{r3, r4, r5, lr}
 8015816:	4604      	mov	r4, r0
 8015818:	460d      	mov	r5, r1
 801581a:	f7ff fa39 	bl	8014c90 <__errno>
 801581e:	6005      	str	r5, [r0, #0]
 8015820:	4620      	mov	r0, r4
 8015822:	bd38      	pop	{r3, r4, r5, pc}

08015824 <xflowf>:
 8015824:	b508      	push	{r3, lr}
 8015826:	b140      	cbz	r0, 801583a <xflowf+0x16>
 8015828:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 801582c:	f7eb fac2 	bl	8000db4 <__aeabi_fmul>
 8015830:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015834:	2122      	movs	r1, #34	@ 0x22
 8015836:	f7ff bfed 	b.w	8015814 <with_errnof>
 801583a:	4608      	mov	r0, r1
 801583c:	e7f6      	b.n	801582c <xflowf+0x8>

0801583e <__math_uflowf>:
 801583e:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8015842:	f7ff bfef 	b.w	8015824 <xflowf>

08015846 <__math_oflowf>:
 8015846:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 801584a:	f7ff bfeb 	b.w	8015824 <xflowf>
	...

08015850 <_init>:
 8015850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015852:	bf00      	nop
 8015854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015856:	bc08      	pop	{r3}
 8015858:	469e      	mov	lr, r3
 801585a:	4770      	bx	lr

0801585c <_fini>:
 801585c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801585e:	bf00      	nop
 8015860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015862:	bc08      	pop	{r3}
 8015864:	469e      	mov	lr, r3
 8015866:	4770      	bx	lr
