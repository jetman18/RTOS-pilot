
RTOSpilot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015af8  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f8  08015ce8  08015ce8  00016ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080164e0  080164e0  000180b0  2**0
                  CONTENTS
  4 .ARM          00000008  080164e0  080164e0  000174e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080164e8  080164e8  000180b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080164e8  080164e8  000174e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080164ec  080164ec  000174ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  080164f0  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d58  200000b0  080165a0  000180b0  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20002e08  080165a0  00018e08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000180b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002aff7  00000000  00000000  000180d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000075c2  00000000  00000000  000430d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002398  00000000  00000000  0004a698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b5c  00000000  00000000  0004ca30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024ddf  00000000  00000000  0004e58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003597a  00000000  00000000  0007336b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d309a  00000000  00000000  000a8ce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017bd7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a64  00000000  00000000  0017bdc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00185828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000b0 	.word	0x200000b0
 800020c:	00000000 	.word	0x00000000
 8000210:	08015cd0 	.word	0x08015cd0

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000b4 	.word	0x200000b4
 800022c:	08015cd0 	.word	0x08015cd0

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_frsub>:
 8000c38:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c3c:	e002      	b.n	8000c44 <__addsf3>
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fsub>:
 8000c40:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c44 <__addsf3>:
 8000c44:	0042      	lsls	r2, r0, #1
 8000c46:	bf1f      	itttt	ne
 8000c48:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c4c:	ea92 0f03 	teqne	r2, r3
 8000c50:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c54:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c58:	d06a      	beq.n	8000d30 <__addsf3+0xec>
 8000c5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c5e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c62:	bfc1      	itttt	gt
 8000c64:	18d2      	addgt	r2, r2, r3
 8000c66:	4041      	eorgt	r1, r0
 8000c68:	4048      	eorgt	r0, r1
 8000c6a:	4041      	eorgt	r1, r0
 8000c6c:	bfb8      	it	lt
 8000c6e:	425b      	neglt	r3, r3
 8000c70:	2b19      	cmp	r3, #25
 8000c72:	bf88      	it	hi
 8000c74:	4770      	bxhi	lr
 8000c76:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c7e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c8a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c8e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4249      	negne	r1, r1
 8000c96:	ea92 0f03 	teq	r2, r3
 8000c9a:	d03f      	beq.n	8000d1c <__addsf3+0xd8>
 8000c9c:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ca4:	eb10 000c 	adds.w	r0, r0, ip
 8000ca8:	f1c3 0320 	rsb	r3, r3, #32
 8000cac:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__addsf3+0x78>
 8000cb6:	4249      	negs	r1, r1
 8000cb8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cbc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cc0:	d313      	bcc.n	8000cea <__addsf3+0xa6>
 8000cc2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cc6:	d306      	bcc.n	8000cd6 <__addsf3+0x92>
 8000cc8:	0840      	lsrs	r0, r0, #1
 8000cca:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cce:	f102 0201 	add.w	r2, r2, #1
 8000cd2:	2afe      	cmp	r2, #254	@ 0xfe
 8000cd4:	d251      	bcs.n	8000d7a <__addsf3+0x136>
 8000cd6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cde:	bf08      	it	eq
 8000ce0:	f020 0001 	biceq.w	r0, r0, #1
 8000ce4:	ea40 0003 	orr.w	r0, r0, r3
 8000ce8:	4770      	bx	lr
 8000cea:	0049      	lsls	r1, r1, #1
 8000cec:	eb40 0000 	adc.w	r0, r0, r0
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	bf28      	it	cs
 8000cf4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cf8:	d2ed      	bcs.n	8000cd6 <__addsf3+0x92>
 8000cfa:	fab0 fc80 	clz	ip, r0
 8000cfe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d02:	ebb2 020c 	subs.w	r2, r2, ip
 8000d06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d0a:	bfaa      	itet	ge
 8000d0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d10:	4252      	neglt	r2, r2
 8000d12:	4318      	orrge	r0, r3
 8000d14:	bfbc      	itt	lt
 8000d16:	40d0      	lsrlt	r0, r2
 8000d18:	4318      	orrlt	r0, r3
 8000d1a:	4770      	bx	lr
 8000d1c:	f092 0f00 	teq	r2, #0
 8000d20:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d24:	bf06      	itte	eq
 8000d26:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d2a:	3201      	addeq	r2, #1
 8000d2c:	3b01      	subne	r3, #1
 8000d2e:	e7b5      	b.n	8000c9c <__addsf3+0x58>
 8000d30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d38:	bf18      	it	ne
 8000d3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d3e:	d021      	beq.n	8000d84 <__addsf3+0x140>
 8000d40:	ea92 0f03 	teq	r2, r3
 8000d44:	d004      	beq.n	8000d50 <__addsf3+0x10c>
 8000d46:	f092 0f00 	teq	r2, #0
 8000d4a:	bf08      	it	eq
 8000d4c:	4608      	moveq	r0, r1
 8000d4e:	4770      	bx	lr
 8000d50:	ea90 0f01 	teq	r0, r1
 8000d54:	bf1c      	itt	ne
 8000d56:	2000      	movne	r0, #0
 8000d58:	4770      	bxne	lr
 8000d5a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d5e:	d104      	bne.n	8000d6a <__addsf3+0x126>
 8000d60:	0040      	lsls	r0, r0, #1
 8000d62:	bf28      	it	cs
 8000d64:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d68:	4770      	bx	lr
 8000d6a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d6e:	bf3c      	itt	cc
 8000d70:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d74:	4770      	bxcc	lr
 8000d76:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d7a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d82:	4770      	bx	lr
 8000d84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d88:	bf16      	itet	ne
 8000d8a:	4608      	movne	r0, r1
 8000d8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d90:	4601      	movne	r1, r0
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	bf06      	itte	eq
 8000d96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d9a:	ea90 0f01 	teqeq	r0, r1
 8000d9e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_ui2f>:
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	e004      	b.n	8000db4 <__aeabi_i2f+0x8>
 8000daa:	bf00      	nop

08000dac <__aeabi_i2f>:
 8000dac:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000db0:	bf48      	it	mi
 8000db2:	4240      	negmi	r0, r0
 8000db4:	ea5f 0c00 	movs.w	ip, r0
 8000db8:	bf08      	it	eq
 8000dba:	4770      	bxeq	lr
 8000dbc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	e01c      	b.n	8000e02 <__aeabi_l2f+0x2a>

08000dc8 <__aeabi_ul2f>:
 8000dc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dcc:	bf08      	it	eq
 8000dce:	4770      	bxeq	lr
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	e00a      	b.n	8000dec <__aeabi_l2f+0x14>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_l2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000de4:	d502      	bpl.n	8000dec <__aeabi_l2f+0x14>
 8000de6:	4240      	negs	r0, r0
 8000de8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dec:	ea5f 0c01 	movs.w	ip, r1
 8000df0:	bf02      	ittt	eq
 8000df2:	4684      	moveq	ip, r0
 8000df4:	4601      	moveq	r1, r0
 8000df6:	2000      	moveq	r0, #0
 8000df8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000dfc:	bf08      	it	eq
 8000dfe:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e02:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e06:	fabc f28c 	clz	r2, ip
 8000e0a:	3a08      	subs	r2, #8
 8000e0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e10:	db10      	blt.n	8000e34 <__aeabi_l2f+0x5c>
 8000e12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e16:	4463      	add	r3, ip
 8000e18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1c:	f1c2 0220 	rsb	r2, r2, #32
 8000e20:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e24:	fa20 f202 	lsr.w	r2, r0, r2
 8000e28:	eb43 0002 	adc.w	r0, r3, r2
 8000e2c:	bf08      	it	eq
 8000e2e:	f020 0001 	biceq.w	r0, r0, #1
 8000e32:	4770      	bx	lr
 8000e34:	f102 0220 	add.w	r2, r2, #32
 8000e38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e44:	fa21 f202 	lsr.w	r2, r1, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e52:	4770      	bx	lr

08000e54 <__aeabi_fmul>:
 8000e54:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e5c:	bf1e      	ittt	ne
 8000e5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e62:	ea92 0f0c 	teqne	r2, ip
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d06f      	beq.n	8000f4c <__aeabi_fmul+0xf8>
 8000e6c:	441a      	add	r2, r3
 8000e6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e72:	0240      	lsls	r0, r0, #9
 8000e74:	bf18      	it	ne
 8000e76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e7a:	d01e      	beq.n	8000eba <__aeabi_fmul+0x66>
 8000e7c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e88:	fba0 3101 	umull	r3, r1, r0, r1
 8000e8c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e90:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e94:	bf3e      	ittt	cc
 8000e96:	0049      	lslcc	r1, r1, #1
 8000e98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	ea40 0001 	orr.w	r0, r0, r1
 8000ea2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000ea6:	2afd      	cmp	r2, #253	@ 0xfd
 8000ea8:	d81d      	bhi.n	8000ee6 <__aeabi_fmul+0x92>
 8000eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000eae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb2:	bf08      	it	eq
 8000eb4:	f020 0001 	biceq.w	r0, r0, #1
 8000eb8:	4770      	bx	lr
 8000eba:	f090 0f00 	teq	r0, #0
 8000ebe:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ec2:	bf08      	it	eq
 8000ec4:	0249      	lsleq	r1, r1, #9
 8000ec6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ece:	3a7f      	subs	r2, #127	@ 0x7f
 8000ed0:	bfc2      	ittt	gt
 8000ed2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ed6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eda:	4770      	bxgt	lr
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	3a01      	subs	r2, #1
 8000ee6:	dc5d      	bgt.n	8000fa4 <__aeabi_fmul+0x150>
 8000ee8:	f112 0f19 	cmn.w	r2, #25
 8000eec:	bfdc      	itt	le
 8000eee:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000ef2:	4770      	bxle	lr
 8000ef4:	f1c2 0200 	rsb	r2, r2, #0
 8000ef8:	0041      	lsls	r1, r0, #1
 8000efa:	fa21 f102 	lsr.w	r1, r1, r2
 8000efe:	f1c2 0220 	rsb	r2, r2, #32
 8000f02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f0a:	f140 0000 	adc.w	r0, r0, #0
 8000f0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f12:	bf08      	it	eq
 8000f14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f18:	4770      	bx	lr
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fmul+0xce>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fmul+0xe6>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e78f      	b.n	8000e6c <__aeabi_fmul+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	bf18      	it	ne
 8000f56:	ea93 0f0c 	teqne	r3, ip
 8000f5a:	d00a      	beq.n	8000f72 <__aeabi_fmul+0x11e>
 8000f5c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f60:	bf18      	it	ne
 8000f62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f66:	d1d8      	bne.n	8000f1a <__aeabi_fmul+0xc6>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f70:	4770      	bx	lr
 8000f72:	f090 0f00 	teq	r0, #0
 8000f76:	bf17      	itett	ne
 8000f78:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f7c:	4608      	moveq	r0, r1
 8000f7e:	f091 0f00 	teqne	r1, #0
 8000f82:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f86:	d014      	beq.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f88:	ea92 0f0c 	teq	r2, ip
 8000f8c:	d101      	bne.n	8000f92 <__aeabi_fmul+0x13e>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	d10f      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f92:	ea93 0f0c 	teq	r3, ip
 8000f96:	d103      	bne.n	8000fa0 <__aeabi_fmul+0x14c>
 8000f98:	024b      	lsls	r3, r1, #9
 8000f9a:	bf18      	it	ne
 8000f9c:	4608      	movne	r0, r1
 8000f9e:	d108      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000fa0:	ea80 0001 	eor.w	r0, r0, r1
 8000fa4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fa8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb0:	4770      	bx	lr
 8000fb2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fb6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000fba:	4770      	bx	lr

08000fbc <__aeabi_fdiv>:
 8000fbc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000fc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fc4:	bf1e      	ittt	ne
 8000fc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fca:	ea92 0f0c 	teqne	r2, ip
 8000fce:	ea93 0f0c 	teqne	r3, ip
 8000fd2:	d069      	beq.n	80010a8 <__aeabi_fdiv+0xec>
 8000fd4:	eba2 0203 	sub.w	r2, r2, r3
 8000fd8:	ea80 0c01 	eor.w	ip, r0, r1
 8000fdc:	0249      	lsls	r1, r1, #9
 8000fde:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fe2:	d037      	beq.n	8001054 <__aeabi_fdiv+0x98>
 8000fe4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000fe8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ff4:	428b      	cmp	r3, r1
 8000ff6:	bf38      	it	cc
 8000ff8:	005b      	lslcc	r3, r3, #1
 8000ffa:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ffe:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8001002:	428b      	cmp	r3, r1
 8001004:	bf24      	itt	cs
 8001006:	1a5b      	subcs	r3, r3, r1
 8001008:	ea40 000c 	orrcs.w	r0, r0, ip
 800100c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001010:	bf24      	itt	cs
 8001012:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001016:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800101a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800101e:	bf24      	itt	cs
 8001020:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001024:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001028:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800102c:	bf24      	itt	cs
 800102e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001032:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	bf18      	it	ne
 800103a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800103e:	d1e0      	bne.n	8001002 <__aeabi_fdiv+0x46>
 8001040:	2afd      	cmp	r2, #253	@ 0xfd
 8001042:	f63f af50 	bhi.w	8000ee6 <__aeabi_fmul+0x92>
 8001046:	428b      	cmp	r3, r1
 8001048:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800104c:	bf08      	it	eq
 800104e:	f020 0001 	biceq.w	r0, r0, #1
 8001052:	4770      	bx	lr
 8001054:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001058:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800105c:	327f      	adds	r2, #127	@ 0x7f
 800105e:	bfc2      	ittt	gt
 8001060:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001064:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001068:	4770      	bxgt	lr
 800106a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	3a01      	subs	r2, #1
 8001074:	e737      	b.n	8000ee6 <__aeabi_fmul+0x92>
 8001076:	f092 0f00 	teq	r2, #0
 800107a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800107e:	bf02      	ittt	eq
 8001080:	0040      	lsleq	r0, r0, #1
 8001082:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001086:	3a01      	subeq	r2, #1
 8001088:	d0f9      	beq.n	800107e <__aeabi_fdiv+0xc2>
 800108a:	ea40 000c 	orr.w	r0, r0, ip
 800108e:	f093 0f00 	teq	r3, #0
 8001092:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001096:	bf02      	ittt	eq
 8001098:	0049      	lsleq	r1, r1, #1
 800109a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800109e:	3b01      	subeq	r3, #1
 80010a0:	d0f9      	beq.n	8001096 <__aeabi_fdiv+0xda>
 80010a2:	ea41 010c 	orr.w	r1, r1, ip
 80010a6:	e795      	b.n	8000fd4 <__aeabi_fdiv+0x18>
 80010a8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010ac:	ea92 0f0c 	teq	r2, ip
 80010b0:	d108      	bne.n	80010c4 <__aeabi_fdiv+0x108>
 80010b2:	0242      	lsls	r2, r0, #9
 80010b4:	f47f af7d 	bne.w	8000fb2 <__aeabi_fmul+0x15e>
 80010b8:	ea93 0f0c 	teq	r3, ip
 80010bc:	f47f af70 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010c0:	4608      	mov	r0, r1
 80010c2:	e776      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010c4:	ea93 0f0c 	teq	r3, ip
 80010c8:	d104      	bne.n	80010d4 <__aeabi_fdiv+0x118>
 80010ca:	024b      	lsls	r3, r1, #9
 80010cc:	f43f af4c 	beq.w	8000f68 <__aeabi_fmul+0x114>
 80010d0:	4608      	mov	r0, r1
 80010d2:	e76e      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010d4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80010d8:	bf18      	it	ne
 80010da:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80010de:	d1ca      	bne.n	8001076 <__aeabi_fdiv+0xba>
 80010e0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010e4:	f47f af5c 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010e8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010ec:	f47f af3c 	bne.w	8000f68 <__aeabi_fmul+0x114>
 80010f0:	e75f      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010f2:	bf00      	nop

080010f4 <__gesf2>:
 80010f4:	f04f 3cff 	mov.w	ip, #4294967295
 80010f8:	e006      	b.n	8001108 <__cmpsf2+0x4>
 80010fa:	bf00      	nop

080010fc <__lesf2>:
 80010fc:	f04f 0c01 	mov.w	ip, #1
 8001100:	e002      	b.n	8001108 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__cmpsf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	f84d cd04 	str.w	ip, [sp, #-4]!
 800110c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001110:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001114:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001118:	bf18      	it	ne
 800111a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800111e:	d011      	beq.n	8001144 <__cmpsf2+0x40>
 8001120:	b001      	add	sp, #4
 8001122:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001126:	bf18      	it	ne
 8001128:	ea90 0f01 	teqne	r0, r1
 800112c:	bf58      	it	pl
 800112e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001132:	bf88      	it	hi
 8001134:	17c8      	asrhi	r0, r1, #31
 8001136:	bf38      	it	cc
 8001138:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800113c:	bf18      	it	ne
 800113e:	f040 0001 	orrne.w	r0, r0, #1
 8001142:	4770      	bx	lr
 8001144:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001148:	d102      	bne.n	8001150 <__cmpsf2+0x4c>
 800114a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800114e:	d105      	bne.n	800115c <__cmpsf2+0x58>
 8001150:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001154:	d1e4      	bne.n	8001120 <__cmpsf2+0x1c>
 8001156:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800115a:	d0e1      	beq.n	8001120 <__cmpsf2+0x1c>
 800115c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <__aeabi_cfrcmple>:
 8001164:	4684      	mov	ip, r0
 8001166:	4608      	mov	r0, r1
 8001168:	4661      	mov	r1, ip
 800116a:	e7ff      	b.n	800116c <__aeabi_cfcmpeq>

0800116c <__aeabi_cfcmpeq>:
 800116c:	b50f      	push	{r0, r1, r2, r3, lr}
 800116e:	f7ff ffc9 	bl	8001104 <__cmpsf2>
 8001172:	2800      	cmp	r0, #0
 8001174:	bf48      	it	mi
 8001176:	f110 0f00 	cmnmi.w	r0, #0
 800117a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800117c <__aeabi_fcmpeq>:
 800117c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001180:	f7ff fff4 	bl	800116c <__aeabi_cfcmpeq>
 8001184:	bf0c      	ite	eq
 8001186:	2001      	moveq	r0, #1
 8001188:	2000      	movne	r0, #0
 800118a:	f85d fb08 	ldr.w	pc, [sp], #8
 800118e:	bf00      	nop

08001190 <__aeabi_fcmplt>:
 8001190:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001194:	f7ff ffea 	bl	800116c <__aeabi_cfcmpeq>
 8001198:	bf34      	ite	cc
 800119a:	2001      	movcc	r0, #1
 800119c:	2000      	movcs	r0, #0
 800119e:	f85d fb08 	ldr.w	pc, [sp], #8
 80011a2:	bf00      	nop

080011a4 <__aeabi_fcmple>:
 80011a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a8:	f7ff ffe0 	bl	800116c <__aeabi_cfcmpeq>
 80011ac:	bf94      	ite	ls
 80011ae:	2001      	movls	r0, #1
 80011b0:	2000      	movhi	r0, #0
 80011b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011b6:	bf00      	nop

080011b8 <__aeabi_fcmpge>:
 80011b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011bc:	f7ff ffd2 	bl	8001164 <__aeabi_cfrcmple>
 80011c0:	bf94      	ite	ls
 80011c2:	2001      	movls	r0, #1
 80011c4:	2000      	movhi	r0, #0
 80011c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ca:	bf00      	nop

080011cc <__aeabi_fcmpgt>:
 80011cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d0:	f7ff ffc8 	bl	8001164 <__aeabi_cfrcmple>
 80011d4:	bf34      	ite	cc
 80011d6:	2001      	movcc	r0, #1
 80011d8:	2000      	movcs	r0, #0
 80011da:	f85d fb08 	ldr.w	pc, [sp], #8
 80011de:	bf00      	nop

080011e0 <__aeabi_fcmpun>:
 80011e0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011e4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80011e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011ec:	d102      	bne.n	80011f4 <__aeabi_fcmpun+0x14>
 80011ee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80011f2:	d108      	bne.n	8001206 <__aeabi_fcmpun+0x26>
 80011f4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011f8:	d102      	bne.n	8001200 <__aeabi_fcmpun+0x20>
 80011fa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011fe:	d102      	bne.n	8001206 <__aeabi_fcmpun+0x26>
 8001200:	f04f 0000 	mov.w	r0, #0
 8001204:	4770      	bx	lr
 8001206:	f04f 0001 	mov.w	r0, #1
 800120a:	4770      	bx	lr

0800120c <__aeabi_f2iz>:
 800120c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001210:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001214:	d30f      	bcc.n	8001236 <__aeabi_f2iz+0x2a>
 8001216:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800121a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800121e:	d90d      	bls.n	800123c <__aeabi_f2iz+0x30>
 8001220:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001224:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001228:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800122c:	fa23 f002 	lsr.w	r0, r3, r2
 8001230:	bf18      	it	ne
 8001232:	4240      	negne	r0, r0
 8001234:	4770      	bx	lr
 8001236:	f04f 0000 	mov.w	r0, #0
 800123a:	4770      	bx	lr
 800123c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001240:	d101      	bne.n	8001246 <__aeabi_f2iz+0x3a>
 8001242:	0242      	lsls	r2, r0, #9
 8001244:	d105      	bne.n	8001252 <__aeabi_f2iz+0x46>
 8001246:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800124a:	bf08      	it	eq
 800124c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001250:	4770      	bx	lr
 8001252:	f04f 0000 	mov.w	r0, #0
 8001256:	4770      	bx	lr

08001258 <__aeabi_f2uiz>:
 8001258:	0042      	lsls	r2, r0, #1
 800125a:	d20e      	bcs.n	800127a <__aeabi_f2uiz+0x22>
 800125c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001260:	d30b      	bcc.n	800127a <__aeabi_f2uiz+0x22>
 8001262:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001266:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800126a:	d409      	bmi.n	8001280 <__aeabi_f2uiz+0x28>
 800126c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001270:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001274:	fa23 f002 	lsr.w	r0, r3, r2
 8001278:	4770      	bx	lr
 800127a:	f04f 0000 	mov.w	r0, #0
 800127e:	4770      	bx	lr
 8001280:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001284:	d101      	bne.n	800128a <__aeabi_f2uiz+0x32>
 8001286:	0242      	lsls	r2, r0, #9
 8001288:	d102      	bne.n	8001290 <__aeabi_f2uiz+0x38>
 800128a:	f04f 30ff 	mov.w	r0, #4294967295
 800128e:	4770      	bx	lr
 8001290:	f04f 0000 	mov.w	r0, #0
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop

08001298 <__aeabi_ldivmod>:
 8001298:	b97b      	cbnz	r3, 80012ba <__aeabi_ldivmod+0x22>
 800129a:	b972      	cbnz	r2, 80012ba <__aeabi_ldivmod+0x22>
 800129c:	2900      	cmp	r1, #0
 800129e:	bfbe      	ittt	lt
 80012a0:	2000      	movlt	r0, #0
 80012a2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80012a6:	e006      	blt.n	80012b6 <__aeabi_ldivmod+0x1e>
 80012a8:	bf08      	it	eq
 80012aa:	2800      	cmpeq	r0, #0
 80012ac:	bf1c      	itt	ne
 80012ae:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80012b2:	f04f 30ff 	movne.w	r0, #4294967295
 80012b6:	f000 b99b 	b.w	80015f0 <__aeabi_idiv0>
 80012ba:	f1ad 0c08 	sub.w	ip, sp, #8
 80012be:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80012c2:	2900      	cmp	r1, #0
 80012c4:	db09      	blt.n	80012da <__aeabi_ldivmod+0x42>
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	db1a      	blt.n	8001300 <__aeabi_ldivmod+0x68>
 80012ca:	f000 f835 	bl	8001338 <__udivmoddi4>
 80012ce:	f8dd e004 	ldr.w	lr, [sp, #4]
 80012d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80012d6:	b004      	add	sp, #16
 80012d8:	4770      	bx	lr
 80012da:	4240      	negs	r0, r0
 80012dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db1b      	blt.n	800131c <__aeabi_ldivmod+0x84>
 80012e4:	f000 f828 	bl	8001338 <__udivmoddi4>
 80012e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80012ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80012f0:	b004      	add	sp, #16
 80012f2:	4240      	negs	r0, r0
 80012f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012f8:	4252      	negs	r2, r2
 80012fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80012fe:	4770      	bx	lr
 8001300:	4252      	negs	r2, r2
 8001302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001306:	f000 f817 	bl	8001338 <__udivmoddi4>
 800130a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800130e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001312:	b004      	add	sp, #16
 8001314:	4240      	negs	r0, r0
 8001316:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800131a:	4770      	bx	lr
 800131c:	4252      	negs	r2, r2
 800131e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001322:	f000 f809 	bl	8001338 <__udivmoddi4>
 8001326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800132a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800132e:	b004      	add	sp, #16
 8001330:	4252      	negs	r2, r2
 8001332:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001336:	4770      	bx	lr

08001338 <__udivmoddi4>:
 8001338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800133c:	9d08      	ldr	r5, [sp, #32]
 800133e:	460c      	mov	r4, r1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d14e      	bne.n	80013e2 <__udivmoddi4+0xaa>
 8001344:	4694      	mov	ip, r2
 8001346:	458c      	cmp	ip, r1
 8001348:	4686      	mov	lr, r0
 800134a:	fab2 f282 	clz	r2, r2
 800134e:	d962      	bls.n	8001416 <__udivmoddi4+0xde>
 8001350:	b14a      	cbz	r2, 8001366 <__udivmoddi4+0x2e>
 8001352:	f1c2 0320 	rsb	r3, r2, #32
 8001356:	4091      	lsls	r1, r2
 8001358:	fa20 f303 	lsr.w	r3, r0, r3
 800135c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001360:	4319      	orrs	r1, r3
 8001362:	fa00 fe02 	lsl.w	lr, r0, r2
 8001366:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800136a:	fbb1 f4f7 	udiv	r4, r1, r7
 800136e:	fb07 1114 	mls	r1, r7, r4, r1
 8001372:	fa1f f68c 	uxth.w	r6, ip
 8001376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800137a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800137e:	fb04 f106 	mul.w	r1, r4, r6
 8001382:	4299      	cmp	r1, r3
 8001384:	d90a      	bls.n	800139c <__udivmoddi4+0x64>
 8001386:	eb1c 0303 	adds.w	r3, ip, r3
 800138a:	f104 30ff 	add.w	r0, r4, #4294967295
 800138e:	f080 8110 	bcs.w	80015b2 <__udivmoddi4+0x27a>
 8001392:	4299      	cmp	r1, r3
 8001394:	f240 810d 	bls.w	80015b2 <__udivmoddi4+0x27a>
 8001398:	3c02      	subs	r4, #2
 800139a:	4463      	add	r3, ip
 800139c:	1a59      	subs	r1, r3, r1
 800139e:	fbb1 f0f7 	udiv	r0, r1, r7
 80013a2:	fb07 1110 	mls	r1, r7, r0, r1
 80013a6:	fb00 f606 	mul.w	r6, r0, r6
 80013aa:	fa1f f38e 	uxth.w	r3, lr
 80013ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013b2:	429e      	cmp	r6, r3
 80013b4:	d90a      	bls.n	80013cc <__udivmoddi4+0x94>
 80013b6:	eb1c 0303 	adds.w	r3, ip, r3
 80013ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80013be:	f080 80fa 	bcs.w	80015b6 <__udivmoddi4+0x27e>
 80013c2:	429e      	cmp	r6, r3
 80013c4:	f240 80f7 	bls.w	80015b6 <__udivmoddi4+0x27e>
 80013c8:	4463      	add	r3, ip
 80013ca:	3802      	subs	r0, #2
 80013cc:	2100      	movs	r1, #0
 80013ce:	1b9b      	subs	r3, r3, r6
 80013d0:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80013d4:	b11d      	cbz	r5, 80013de <__udivmoddi4+0xa6>
 80013d6:	40d3      	lsrs	r3, r2
 80013d8:	2200      	movs	r2, #0
 80013da:	e9c5 3200 	strd	r3, r2, [r5]
 80013de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013e2:	428b      	cmp	r3, r1
 80013e4:	d905      	bls.n	80013f2 <__udivmoddi4+0xba>
 80013e6:	b10d      	cbz	r5, 80013ec <__udivmoddi4+0xb4>
 80013e8:	e9c5 0100 	strd	r0, r1, [r5]
 80013ec:	2100      	movs	r1, #0
 80013ee:	4608      	mov	r0, r1
 80013f0:	e7f5      	b.n	80013de <__udivmoddi4+0xa6>
 80013f2:	fab3 f183 	clz	r1, r3
 80013f6:	2900      	cmp	r1, #0
 80013f8:	d146      	bne.n	8001488 <__udivmoddi4+0x150>
 80013fa:	42a3      	cmp	r3, r4
 80013fc:	d302      	bcc.n	8001404 <__udivmoddi4+0xcc>
 80013fe:	4290      	cmp	r0, r2
 8001400:	f0c0 80ee 	bcc.w	80015e0 <__udivmoddi4+0x2a8>
 8001404:	1a86      	subs	r6, r0, r2
 8001406:	eb64 0303 	sbc.w	r3, r4, r3
 800140a:	2001      	movs	r0, #1
 800140c:	2d00      	cmp	r5, #0
 800140e:	d0e6      	beq.n	80013de <__udivmoddi4+0xa6>
 8001410:	e9c5 6300 	strd	r6, r3, [r5]
 8001414:	e7e3      	b.n	80013de <__udivmoddi4+0xa6>
 8001416:	2a00      	cmp	r2, #0
 8001418:	f040 808f 	bne.w	800153a <__udivmoddi4+0x202>
 800141c:	eba1 040c 	sub.w	r4, r1, ip
 8001420:	2101      	movs	r1, #1
 8001422:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001426:	fa1f f78c 	uxth.w	r7, ip
 800142a:	fbb4 f6f8 	udiv	r6, r4, r8
 800142e:	fb08 4416 	mls	r4, r8, r6, r4
 8001432:	fb07 f006 	mul.w	r0, r7, r6
 8001436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800143a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800143e:	4298      	cmp	r0, r3
 8001440:	d908      	bls.n	8001454 <__udivmoddi4+0x11c>
 8001442:	eb1c 0303 	adds.w	r3, ip, r3
 8001446:	f106 34ff 	add.w	r4, r6, #4294967295
 800144a:	d202      	bcs.n	8001452 <__udivmoddi4+0x11a>
 800144c:	4298      	cmp	r0, r3
 800144e:	f200 80cb 	bhi.w	80015e8 <__udivmoddi4+0x2b0>
 8001452:	4626      	mov	r6, r4
 8001454:	1a1c      	subs	r4, r3, r0
 8001456:	fbb4 f0f8 	udiv	r0, r4, r8
 800145a:	fb08 4410 	mls	r4, r8, r0, r4
 800145e:	fb00 f707 	mul.w	r7, r0, r7
 8001462:	fa1f f38e 	uxth.w	r3, lr
 8001466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800146a:	429f      	cmp	r7, r3
 800146c:	d908      	bls.n	8001480 <__udivmoddi4+0x148>
 800146e:	eb1c 0303 	adds.w	r3, ip, r3
 8001472:	f100 34ff 	add.w	r4, r0, #4294967295
 8001476:	d202      	bcs.n	800147e <__udivmoddi4+0x146>
 8001478:	429f      	cmp	r7, r3
 800147a:	f200 80ae 	bhi.w	80015da <__udivmoddi4+0x2a2>
 800147e:	4620      	mov	r0, r4
 8001480:	1bdb      	subs	r3, r3, r7
 8001482:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001486:	e7a5      	b.n	80013d4 <__udivmoddi4+0x9c>
 8001488:	f1c1 0720 	rsb	r7, r1, #32
 800148c:	408b      	lsls	r3, r1
 800148e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001492:	ea4c 0c03 	orr.w	ip, ip, r3
 8001496:	fa24 f607 	lsr.w	r6, r4, r7
 800149a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800149e:	fbb6 f8f9 	udiv	r8, r6, r9
 80014a2:	fa1f fe8c 	uxth.w	lr, ip
 80014a6:	fb09 6618 	mls	r6, r9, r8, r6
 80014aa:	fa20 f307 	lsr.w	r3, r0, r7
 80014ae:	408c      	lsls	r4, r1
 80014b0:	fa00 fa01 	lsl.w	sl, r0, r1
 80014b4:	fb08 f00e 	mul.w	r0, r8, lr
 80014b8:	431c      	orrs	r4, r3
 80014ba:	0c23      	lsrs	r3, r4, #16
 80014bc:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80014c0:	4298      	cmp	r0, r3
 80014c2:	fa02 f201 	lsl.w	r2, r2, r1
 80014c6:	d90a      	bls.n	80014de <__udivmoddi4+0x1a6>
 80014c8:	eb1c 0303 	adds.w	r3, ip, r3
 80014cc:	f108 36ff 	add.w	r6, r8, #4294967295
 80014d0:	f080 8081 	bcs.w	80015d6 <__udivmoddi4+0x29e>
 80014d4:	4298      	cmp	r0, r3
 80014d6:	d97e      	bls.n	80015d6 <__udivmoddi4+0x29e>
 80014d8:	f1a8 0802 	sub.w	r8, r8, #2
 80014dc:	4463      	add	r3, ip
 80014de:	1a1e      	subs	r6, r3, r0
 80014e0:	fbb6 f3f9 	udiv	r3, r6, r9
 80014e4:	fb09 6613 	mls	r6, r9, r3, r6
 80014e8:	fb03 fe0e 	mul.w	lr, r3, lr
 80014ec:	b2a4      	uxth	r4, r4
 80014ee:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80014f2:	45a6      	cmp	lr, r4
 80014f4:	d908      	bls.n	8001508 <__udivmoddi4+0x1d0>
 80014f6:	eb1c 0404 	adds.w	r4, ip, r4
 80014fa:	f103 30ff 	add.w	r0, r3, #4294967295
 80014fe:	d266      	bcs.n	80015ce <__udivmoddi4+0x296>
 8001500:	45a6      	cmp	lr, r4
 8001502:	d964      	bls.n	80015ce <__udivmoddi4+0x296>
 8001504:	3b02      	subs	r3, #2
 8001506:	4464      	add	r4, ip
 8001508:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800150c:	fba0 8302 	umull	r8, r3, r0, r2
 8001510:	eba4 040e 	sub.w	r4, r4, lr
 8001514:	429c      	cmp	r4, r3
 8001516:	46c6      	mov	lr, r8
 8001518:	461e      	mov	r6, r3
 800151a:	d350      	bcc.n	80015be <__udivmoddi4+0x286>
 800151c:	d04d      	beq.n	80015ba <__udivmoddi4+0x282>
 800151e:	b155      	cbz	r5, 8001536 <__udivmoddi4+0x1fe>
 8001520:	ebba 030e 	subs.w	r3, sl, lr
 8001524:	eb64 0406 	sbc.w	r4, r4, r6
 8001528:	fa04 f707 	lsl.w	r7, r4, r7
 800152c:	40cb      	lsrs	r3, r1
 800152e:	431f      	orrs	r7, r3
 8001530:	40cc      	lsrs	r4, r1
 8001532:	e9c5 7400 	strd	r7, r4, [r5]
 8001536:	2100      	movs	r1, #0
 8001538:	e751      	b.n	80013de <__udivmoddi4+0xa6>
 800153a:	fa0c fc02 	lsl.w	ip, ip, r2
 800153e:	f1c2 0320 	rsb	r3, r2, #32
 8001542:	40d9      	lsrs	r1, r3
 8001544:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001548:	fa20 f303 	lsr.w	r3, r0, r3
 800154c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001550:	fbb1 f0f8 	udiv	r0, r1, r8
 8001554:	fb08 1110 	mls	r1, r8, r0, r1
 8001558:	4094      	lsls	r4, r2
 800155a:	431c      	orrs	r4, r3
 800155c:	fa1f f78c 	uxth.w	r7, ip
 8001560:	0c23      	lsrs	r3, r4, #16
 8001562:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001566:	fb00 f107 	mul.w	r1, r0, r7
 800156a:	4299      	cmp	r1, r3
 800156c:	d908      	bls.n	8001580 <__udivmoddi4+0x248>
 800156e:	eb1c 0303 	adds.w	r3, ip, r3
 8001572:	f100 36ff 	add.w	r6, r0, #4294967295
 8001576:	d22c      	bcs.n	80015d2 <__udivmoddi4+0x29a>
 8001578:	4299      	cmp	r1, r3
 800157a:	d92a      	bls.n	80015d2 <__udivmoddi4+0x29a>
 800157c:	3802      	subs	r0, #2
 800157e:	4463      	add	r3, ip
 8001580:	1a5b      	subs	r3, r3, r1
 8001582:	fbb3 f1f8 	udiv	r1, r3, r8
 8001586:	fb08 3311 	mls	r3, r8, r1, r3
 800158a:	b2a4      	uxth	r4, r4
 800158c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001590:	fb01 f307 	mul.w	r3, r1, r7
 8001594:	42a3      	cmp	r3, r4
 8001596:	d908      	bls.n	80015aa <__udivmoddi4+0x272>
 8001598:	eb1c 0404 	adds.w	r4, ip, r4
 800159c:	f101 36ff 	add.w	r6, r1, #4294967295
 80015a0:	d213      	bcs.n	80015ca <__udivmoddi4+0x292>
 80015a2:	42a3      	cmp	r3, r4
 80015a4:	d911      	bls.n	80015ca <__udivmoddi4+0x292>
 80015a6:	3902      	subs	r1, #2
 80015a8:	4464      	add	r4, ip
 80015aa:	1ae4      	subs	r4, r4, r3
 80015ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80015b0:	e73b      	b.n	800142a <__udivmoddi4+0xf2>
 80015b2:	4604      	mov	r4, r0
 80015b4:	e6f2      	b.n	800139c <__udivmoddi4+0x64>
 80015b6:	4608      	mov	r0, r1
 80015b8:	e708      	b.n	80013cc <__udivmoddi4+0x94>
 80015ba:	45c2      	cmp	sl, r8
 80015bc:	d2af      	bcs.n	800151e <__udivmoddi4+0x1e6>
 80015be:	ebb8 0e02 	subs.w	lr, r8, r2
 80015c2:	eb63 060c 	sbc.w	r6, r3, ip
 80015c6:	3801      	subs	r0, #1
 80015c8:	e7a9      	b.n	800151e <__udivmoddi4+0x1e6>
 80015ca:	4631      	mov	r1, r6
 80015cc:	e7ed      	b.n	80015aa <__udivmoddi4+0x272>
 80015ce:	4603      	mov	r3, r0
 80015d0:	e79a      	b.n	8001508 <__udivmoddi4+0x1d0>
 80015d2:	4630      	mov	r0, r6
 80015d4:	e7d4      	b.n	8001580 <__udivmoddi4+0x248>
 80015d6:	46b0      	mov	r8, r6
 80015d8:	e781      	b.n	80014de <__udivmoddi4+0x1a6>
 80015da:	4463      	add	r3, ip
 80015dc:	3802      	subs	r0, #2
 80015de:	e74f      	b.n	8001480 <__udivmoddi4+0x148>
 80015e0:	4606      	mov	r6, r0
 80015e2:	4623      	mov	r3, r4
 80015e4:	4608      	mov	r0, r1
 80015e6:	e711      	b.n	800140c <__udivmoddi4+0xd4>
 80015e8:	3e02      	subs	r6, #2
 80015ea:	4463      	add	r3, ip
 80015ec:	e732      	b.n	8001454 <__udivmoddi4+0x11c>
 80015ee:	bf00      	nop

080015f0 <__aeabi_idiv0>:
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop

080015f4 <bmp280_init_default_params>:
#define BMP280_RESET_VALUE     0xB6


BMP280_HandleTypedef devv;

void bmp280_init_default_params() {
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
	devv.params.mode = BMP280_MODE_NORMAL;
 80015f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001628 <bmp280_init_default_params+0x34>)
 80015fa:	2203      	movs	r2, #3
 80015fc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	devv.params.filter = BMP280_FILTER_16;
 8001600:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <bmp280_init_default_params+0x34>)
 8001602:	2204      	movs	r2, #4
 8001604:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	devv.params.oversampling_pressure = BMP280_ULTRA_HIGH_RES;
 8001608:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <bmp280_init_default_params+0x34>)
 800160a:	2205      	movs	r2, #5
 800160c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	devv.params.oversampling_temperature = BMP280_ULTRA_HIGH_RES;
 8001610:	4b05      	ldr	r3, [pc, #20]	@ (8001628 <bmp280_init_default_params+0x34>)
 8001612:	2205      	movs	r2, #5
 8001614:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	devv.params.standby = BMP280_STANDBY_05;
 8001618:	4b03      	ldr	r3, [pc, #12]	@ (8001628 <bmp280_init_default_params+0x34>)
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	200000cc 	.word	0x200000cc

0800162c <read_register16>:

static bool read_register16(uint8_t addr, uint16_t *value) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af04      	add	r7, sp, #16
 8001632:	4603      	mov	r3, r0
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	71fb      	strb	r3, [r7, #7]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (devv.addr << 1);
 8001638:	4b13      	ldr	r3, [pc, #76]	@ (8001688 <read_register16+0x5c>)
 800163a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Read(devv.i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001640:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <read_register16+0x5c>)
 8001642:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	b29a      	uxth	r2, r3
 8001648:	89f9      	ldrh	r1, [r7, #14]
 800164a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800164e:	9302      	str	r3, [sp, #8]
 8001650:	2302      	movs	r3, #2
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	2301      	movs	r3, #1
 800165c:	f007 ffb4 	bl	80095c8 <HAL_I2C_Mem_Read>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10b      	bne.n	800167e <read_register16+0x52>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001666:	7b7b      	ldrb	r3, [r7, #13]
 8001668:	021b      	lsls	r3, r3, #8
 800166a:	b21a      	sxth	r2, r3
 800166c:	7b3b      	ldrb	r3, [r7, #12]
 800166e:	b21b      	sxth	r3, r3
 8001670:	4313      	orrs	r3, r2
 8001672:	b21b      	sxth	r3, r3
 8001674:	b29a      	uxth	r2, r3
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	801a      	strh	r2, [r3, #0]
		return true;
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <read_register16+0x54>
	} else
		return false;
 800167e:	2300      	movs	r3, #0

}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200000cc 	.word	0x200000cc

0800168c <read_data>:

static inline int read_data(uint8_t addr, uint8_t *value,
		uint8_t len) {
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b089      	sub	sp, #36	@ 0x24
 8001690:	af04      	add	r7, sp, #16
 8001692:	4603      	mov	r3, r0
 8001694:	6039      	str	r1, [r7, #0]
 8001696:	71fb      	strb	r3, [r7, #7]
 8001698:	4613      	mov	r3, r2
 800169a:	71bb      	strb	r3, [r7, #6]
	uint16_t tx_buff;
	tx_buff = (devv.addr << 1);
 800169c:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <read_data+0x4c>)
 800169e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	81fb      	strh	r3, [r7, #14]
	if (HAL_I2C_Mem_Read(devv.i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80016a4:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <read_data+0x4c>)
 80016a6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	79bb      	ldrb	r3, [r7, #6]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	89f9      	ldrh	r1, [r7, #14]
 80016b2:	f241 3488 	movw	r4, #5000	@ 0x1388
 80016b6:	9402      	str	r4, [sp, #8]
 80016b8:	9301      	str	r3, [sp, #4]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2301      	movs	r3, #1
 80016c0:	f007 ff82 	bl	80095c8 <HAL_I2C_Mem_Read>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <read_data+0x42>
		return 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e000      	b.n	80016d0 <read_data+0x44>
	else
		return 1;
 80016ce:	2301      	movs	r3, #1

}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd90      	pop	{r4, r7, pc}
 80016d8:	200000cc 	.word	0x200000cc

080016dc <read_calibration_data>:

static bool read_calibration_data() {
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0

	if (read_register16(0x88, &devv.dig_T1)
 80016e0:	492c      	ldr	r1, [pc, #176]	@ (8001794 <read_calibration_data+0xb8>)
 80016e2:	2088      	movs	r0, #136	@ 0x88
 80016e4:	f7ff ffa2 	bl	800162c <read_register16>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d04e      	beq.n	800178c <read_calibration_data+0xb0>
			&& read_register16(0x8a, (uint16_t *) &devv.dig_T2)
 80016ee:	492a      	ldr	r1, [pc, #168]	@ (8001798 <read_calibration_data+0xbc>)
 80016f0:	208a      	movs	r0, #138	@ 0x8a
 80016f2:	f7ff ff9b 	bl	800162c <read_register16>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d047      	beq.n	800178c <read_calibration_data+0xb0>
			&& read_register16(0x8c, (uint16_t *) &devv.dig_T3)
 80016fc:	4927      	ldr	r1, [pc, #156]	@ (800179c <read_calibration_data+0xc0>)
 80016fe:	208c      	movs	r0, #140	@ 0x8c
 8001700:	f7ff ff94 	bl	800162c <read_register16>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d040      	beq.n	800178c <read_calibration_data+0xb0>
			&& read_register16(0x8e, &devv.dig_P1)
 800170a:	4925      	ldr	r1, [pc, #148]	@ (80017a0 <read_calibration_data+0xc4>)
 800170c:	208e      	movs	r0, #142	@ 0x8e
 800170e:	f7ff ff8d 	bl	800162c <read_register16>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d039      	beq.n	800178c <read_calibration_data+0xb0>
			&& read_register16(0x90, (uint16_t *) &devv.dig_P2)
 8001718:	4922      	ldr	r1, [pc, #136]	@ (80017a4 <read_calibration_data+0xc8>)
 800171a:	2090      	movs	r0, #144	@ 0x90
 800171c:	f7ff ff86 	bl	800162c <read_register16>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d032      	beq.n	800178c <read_calibration_data+0xb0>
			&& read_register16(0x92, (uint16_t *) &devv.dig_P3)
 8001726:	4920      	ldr	r1, [pc, #128]	@ (80017a8 <read_calibration_data+0xcc>)
 8001728:	2092      	movs	r0, #146	@ 0x92
 800172a:	f7ff ff7f 	bl	800162c <read_register16>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d02b      	beq.n	800178c <read_calibration_data+0xb0>
			&& read_register16(0x94, (uint16_t *) &devv.dig_P4)
 8001734:	491d      	ldr	r1, [pc, #116]	@ (80017ac <read_calibration_data+0xd0>)
 8001736:	2094      	movs	r0, #148	@ 0x94
 8001738:	f7ff ff78 	bl	800162c <read_register16>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d024      	beq.n	800178c <read_calibration_data+0xb0>
			&& read_register16(0x96, (uint16_t *) &devv.dig_P5)
 8001742:	491b      	ldr	r1, [pc, #108]	@ (80017b0 <read_calibration_data+0xd4>)
 8001744:	2096      	movs	r0, #150	@ 0x96
 8001746:	f7ff ff71 	bl	800162c <read_register16>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d01d      	beq.n	800178c <read_calibration_data+0xb0>
			&& read_register16(0x98, (uint16_t *) &devv.dig_P6)
 8001750:	4918      	ldr	r1, [pc, #96]	@ (80017b4 <read_calibration_data+0xd8>)
 8001752:	2098      	movs	r0, #152	@ 0x98
 8001754:	f7ff ff6a 	bl	800162c <read_register16>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d016      	beq.n	800178c <read_calibration_data+0xb0>
			&& read_register16(0x9a, (uint16_t *) &devv.dig_P7)
 800175e:	4916      	ldr	r1, [pc, #88]	@ (80017b8 <read_calibration_data+0xdc>)
 8001760:	209a      	movs	r0, #154	@ 0x9a
 8001762:	f7ff ff63 	bl	800162c <read_register16>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d00f      	beq.n	800178c <read_calibration_data+0xb0>
			&& read_register16(0x9c, (uint16_t *) &devv.dig_P8)
 800176c:	4913      	ldr	r1, [pc, #76]	@ (80017bc <read_calibration_data+0xe0>)
 800176e:	209c      	movs	r0, #156	@ 0x9c
 8001770:	f7ff ff5c 	bl	800162c <read_register16>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d008      	beq.n	800178c <read_calibration_data+0xb0>
			&& read_register16(0x9e,(uint16_t *) &devv.dig_P9))
 800177a:	4911      	ldr	r1, [pc, #68]	@ (80017c0 <read_calibration_data+0xe4>)
 800177c:	209e      	movs	r0, #158	@ 0x9e
 800177e:	f7ff ff55 	bl	800162c <read_register16>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <read_calibration_data+0xb0>
			{

		return true;
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <read_calibration_data+0xb2>
	}

	return false;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200000cc 	.word	0x200000cc
 8001798:	200000ce 	.word	0x200000ce
 800179c:	200000d0 	.word	0x200000d0
 80017a0:	200000d2 	.word	0x200000d2
 80017a4:	200000d4 	.word	0x200000d4
 80017a8:	200000d6 	.word	0x200000d6
 80017ac:	200000d8 	.word	0x200000d8
 80017b0:	200000da 	.word	0x200000da
 80017b4:	200000dc 	.word	0x200000dc
 80017b8:	200000de 	.word	0x200000de
 80017bc:	200000e0 	.word	0x200000e0
 80017c0:	200000e2 	.word	0x200000e2

080017c4 <write_register8>:


static int write_register8(uint8_t addr, uint8_t value) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af04      	add	r7, sp, #16
 80017ca:	4603      	mov	r3, r0
 80017cc:	460a      	mov	r2, r1
 80017ce:	71fb      	strb	r3, [r7, #7]
 80017d0:	4613      	mov	r3, r2
 80017d2:	71bb      	strb	r3, [r7, #6]
	uint16_t tx_buff;

	tx_buff = (devv.addr << 1);
 80017d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001810 <write_register8+0x4c>)
 80017d6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(devv.i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80017dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <write_register8+0x4c>)
 80017de:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	89f9      	ldrh	r1, [r7, #14]
 80017e6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80017ea:	9302      	str	r3, [sp, #8]
 80017ec:	2301      	movs	r3, #1
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	1dbb      	adds	r3, r7, #6
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2301      	movs	r3, #1
 80017f6:	f007 fded 	bl	80093d4 <HAL_I2C_Mem_Write>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <write_register8+0x40>
		return false;
 8001800:	2300      	movs	r3, #0
 8001802:	e000      	b.n	8001806 <write_register8+0x42>
	else
		return true;
 8001804:	2301      	movs	r3, #1
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200000cc 	.word	0x200000cc

08001814 <bmp280_init>:

bool bmp280_init(I2C_HandleTypeDef* i2c) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

    devv.addr = BMP280_I2C_ADDRESS_0;
 800181c:	4b49      	ldr	r3, [pc, #292]	@ (8001944 <bmp280_init+0x130>)
 800181e:	2276      	movs	r2, #118	@ 0x76
 8001820:	849a      	strh	r2, [r3, #36]	@ 0x24
	devv.i2c  = i2c;
 8001822:	4a48      	ldr	r2, [pc, #288]	@ (8001944 <bmp280_init+0x130>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6293      	str	r3, [r2, #40]	@ 0x28
	bmp280_init_default_params();
 8001828:	f7ff fee4 	bl	80015f4 <bmp280_init_default_params>

	if (devv.addr != BMP280_I2C_ADDRESS_0
 800182c:	4b45      	ldr	r3, [pc, #276]	@ (8001944 <bmp280_init+0x130>)
 800182e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001830:	2b76      	cmp	r3, #118	@ 0x76
 8001832:	d005      	beq.n	8001840 <bmp280_init+0x2c>
			&& devv.addr != BMP280_I2C_ADDRESS_1) {
 8001834:	4b43      	ldr	r3, [pc, #268]	@ (8001944 <bmp280_init+0x130>)
 8001836:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001838:	2b77      	cmp	r3, #119	@ 0x77
 800183a:	d001      	beq.n	8001840 <bmp280_init+0x2c>

		return false;
 800183c:	2300      	movs	r3, #0
 800183e:	e07d      	b.n	800193c <bmp280_init+0x128>
	}

	if (read_data(BMP280_REG_ID,&devv.id, 1)) {
 8001840:	2201      	movs	r2, #1
 8001842:	4941      	ldr	r1, [pc, #260]	@ (8001948 <bmp280_init+0x134>)
 8001844:	20d0      	movs	r0, #208	@ 0xd0
 8001846:	f7ff ff21 	bl	800168c <read_data>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <bmp280_init+0x40>
		return false;
 8001850:	2300      	movs	r3, #0
 8001852:	e073      	b.n	800193c <bmp280_init+0x128>
	}

	if (devv.id != BMP280_CHIP_ID && devv.id != BME280_CHIP_ID) {
 8001854:	4b3b      	ldr	r3, [pc, #236]	@ (8001944 <bmp280_init+0x130>)
 8001856:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800185a:	2b58      	cmp	r3, #88	@ 0x58
 800185c:	d006      	beq.n	800186c <bmp280_init+0x58>
 800185e:	4b39      	ldr	r3, [pc, #228]	@ (8001944 <bmp280_init+0x130>)
 8001860:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001864:	2b60      	cmp	r3, #96	@ 0x60
 8001866:	d001      	beq.n	800186c <bmp280_init+0x58>

		return false;
 8001868:	2300      	movs	r3, #0
 800186a:	e067      	b.n	800193c <bmp280_init+0x128>
	}

	// Soft reset.
	if (write_register8( BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800186c:	21b6      	movs	r1, #182	@ 0xb6
 800186e:	20e0      	movs	r0, #224	@ 0xe0
 8001870:	f7ff ffa8 	bl	80017c4 <write_register8>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <bmp280_init+0x6a>
		return false;
 800187a:	2300      	movs	r3, #0
 800187c:	e05e      	b.n	800193c <bmp280_init+0x128>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(BMP280_REG_STATUS, &status, 1)&& (status & 1) == 0)
 800187e:	f107 030d 	add.w	r3, r7, #13
 8001882:	2201      	movs	r2, #1
 8001884:	4619      	mov	r1, r3
 8001886:	20f3      	movs	r0, #243	@ 0xf3
 8001888:	f7ff ff00 	bl	800168c <read_data>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f5      	bne.n	800187e <bmp280_init+0x6a>
 8001892:	7b7b      	ldrb	r3, [r7, #13]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f0      	bne.n	800187e <bmp280_init+0x6a>
			break;
	}

	if (!read_calibration_data()) {
 800189c:	f7ff ff1e 	bl	80016dc <read_calibration_data>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f083 0301 	eor.w	r3, r3, #1
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d100      	bne.n	80018ae <bmp280_init+0x9a>
 80018ac:	e001      	b.n	80018b2 <bmp280_init+0x9e>
		return false;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e044      	b.n	800193c <bmp280_init+0x128>
	}

	if (devv.id == BME280_CHIP_ID ) {
 80018b2:	4b24      	ldr	r3, [pc, #144]	@ (8001944 <bmp280_init+0x130>)
 80018b4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80018b8:	2b60      	cmp	r3, #96	@ 0x60
 80018ba:	d101      	bne.n	80018c0 <bmp280_init+0xac>
		return false;
 80018bc:	2300      	movs	r3, #0
 80018be:	e03d      	b.n	800193c <bmp280_init+0x128>
	}

	uint8_t config = (devv.params.standby << 5) | (devv.params.filter << 2);
 80018c0:	4b20      	ldr	r3, [pc, #128]	@ (8001944 <bmp280_init+0x130>)
 80018c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018c6:	015b      	lsls	r3, r3, #5
 80018c8:	b25a      	sxtb	r2, r3
 80018ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001944 <bmp280_init+0x130>)
 80018cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	b25b      	sxtb	r3, r3
 80018d4:	4313      	orrs	r3, r2
 80018d6:	b25b      	sxtb	r3, r3
 80018d8:	73fb      	strb	r3, [r7, #15]
	if (write_register8(BMP280_REG_CONFIG, config)) {
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	4619      	mov	r1, r3
 80018de:	20f5      	movs	r0, #245	@ 0xf5
 80018e0:	f7ff ff70 	bl	80017c4 <write_register8>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <bmp280_init+0xda>
		return false;
 80018ea:	2300      	movs	r3, #0
 80018ec:	e026      	b.n	800193c <bmp280_init+0x128>
	}

	if (devv.params.mode == BMP280_MODE_FORCED) {
 80018ee:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <bmp280_init+0x130>)
 80018f0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d103      	bne.n	8001900 <bmp280_init+0xec>
		devv.params.mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80018f8:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <bmp280_init+0x130>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	}

	uint8_t ctrl = (devv.params.oversampling_temperature << 5)
 8001900:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <bmp280_init+0x130>)
 8001902:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001906:	015b      	lsls	r3, r3, #5
			| (devv.params.oversampling_pressure << 2) | (devv.params.mode);
 8001908:	b25a      	sxtb	r2, r3
 800190a:	4b0e      	ldr	r3, [pc, #56]	@ (8001944 <bmp280_init+0x130>)
 800190c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	b25b      	sxtb	r3, r3
 8001914:	4313      	orrs	r3, r2
 8001916:	b25a      	sxtb	r2, r3
 8001918:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <bmp280_init+0x130>)
 800191a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800191e:	b25b      	sxtb	r3, r3
 8001920:	4313      	orrs	r3, r2
 8001922:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (devv.params.oversampling_temperature << 5)
 8001924:	73bb      	strb	r3, [r7, #14]

	if (write_register8(BMP280_REG_CTRL, ctrl)) {
 8001926:	7bbb      	ldrb	r3, [r7, #14]
 8001928:	4619      	mov	r1, r3
 800192a:	20f4      	movs	r0, #244	@ 0xf4
 800192c:	f7ff ff4a 	bl	80017c4 <write_register8>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <bmp280_init+0x126>
		return false;
 8001936:	2300      	movs	r3, #0
 8001938:	e000      	b.n	800193c <bmp280_init+0x128>
	}

	return true;
 800193a:	2301      	movs	r3, #1
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	200000cc 	.word	0x200000cc
 8001948:	200000fd 	.word	0x200000fd

0800194c <compensate_temperature>:
/**
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(int32_t adc_temp, int32_t *fine_temp) {
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) devv.dig_T1 << 1)))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	10da      	asrs	r2, r3, #3
 800195a:	4b18      	ldr	r3, [pc, #96]	@ (80019bc <compensate_temperature+0x70>)
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	1ad3      	subs	r3, r2, r3
			* (int32_t) devv.dig_T2) >> 11;
 8001962:	4a16      	ldr	r2, [pc, #88]	@ (80019bc <compensate_temperature+0x70>)
 8001964:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001968:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) devv.dig_T1 << 1)))
 800196c:	12db      	asrs	r3, r3, #11
 800196e:	60fb      	str	r3, [r7, #12]
	var2 = (((((adc_temp >> 4) - (int32_t) devv.dig_T1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	111b      	asrs	r3, r3, #4
 8001974:	4a11      	ldr	r2, [pc, #68]	@ (80019bc <compensate_temperature+0x70>)
 8001976:	8812      	ldrh	r2, [r2, #0]
 8001978:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) devv.dig_T1)) >> 12)
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	1112      	asrs	r2, r2, #4
 800197e:	490f      	ldr	r1, [pc, #60]	@ (80019bc <compensate_temperature+0x70>)
 8001980:	8809      	ldrh	r1, [r1, #0]
 8001982:	1a52      	subs	r2, r2, r1
 8001984:	fb02 f303 	mul.w	r3, r2, r3
 8001988:	131b      	asrs	r3, r3, #12
			* (int32_t) devv.dig_T3) >> 14;
 800198a:	4a0c      	ldr	r2, [pc, #48]	@ (80019bc <compensate_temperature+0x70>)
 800198c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001990:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) devv.dig_T1)
 8001994:	139b      	asrs	r3, r3, #14
 8001996:	60bb      	str	r3, [r7, #8]

	*fine_temp = var1 + var2;
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	441a      	add	r2, r3
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	3380      	adds	r3, #128	@ 0x80
 80019ae:	121b      	asrs	r3, r3, #8
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	200000cc 	.word	0x200000cc

080019c0 <compensate_pressure>:
/**
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static  uint32_t compensate_pressure(int32_t adc_press,int32_t fine_temp) {
 80019c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019c4:	b0cc      	sub	sp, #304	@ 0x130
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 80019cc:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80019d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80019d4:	17da      	asrs	r2, r3, #31
 80019d6:	461c      	mov	r4, r3
 80019d8:	4615      	mov	r5, r2
 80019da:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80019de:	f145 3bff 	adc.w	fp, r5, #4294967295
 80019e2:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) devv.dig_P6;
 80019e6:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80019ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80019ee:	fb03 f102 	mul.w	r1, r3, r2
 80019f2:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80019f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80019fa:	fb02 f303 	mul.w	r3, r2, r3
 80019fe:	18ca      	adds	r2, r1, r3
 8001a00:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001a04:	fba3 8903 	umull	r8, r9, r3, r3
 8001a08:	eb02 0309 	add.w	r3, r2, r9
 8001a0c:	4699      	mov	r9, r3
 8001a0e:	4b9f      	ldr	r3, [pc, #636]	@ (8001c8c <compensate_pressure+0x2cc>)
 8001a10:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001a14:	b21b      	sxth	r3, r3
 8001a16:	17da      	asrs	r2, r3, #31
 8001a18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001a1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001a20:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001a24:	4603      	mov	r3, r0
 8001a26:	fb03 f209 	mul.w	r2, r3, r9
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	fb08 f303 	mul.w	r3, r8, r3
 8001a30:	4413      	add	r3, r2
 8001a32:	4602      	mov	r2, r0
 8001a34:	fba8 2102 	umull	r2, r1, r8, r2
 8001a38:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 8001a3c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001a40:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001a44:	4413      	add	r3, r2
 8001a46:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001a4a:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8001a4e:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8001a52:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) devv.dig_P5) << 17);
 8001a56:	4b8d      	ldr	r3, [pc, #564]	@ (8001c8c <compensate_pressure+0x2cc>)
 8001a58:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	17da      	asrs	r2, r3, #31
 8001a60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001a64:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001a68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001a6c:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001a70:	462a      	mov	r2, r5
 8001a72:	fb02 f203 	mul.w	r2, r2, r3
 8001a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	fb01 f303 	mul.w	r3, r1, r3
 8001a80:	441a      	add	r2, r3
 8001a82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001a86:	4621      	mov	r1, r4
 8001a88:	fba3 3101 	umull	r3, r1, r3, r1
 8001a8c:	f8c7 110c 	str.w	r1, [r7, #268]	@ 0x10c
 8001a90:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001a98:	18d3      	adds	r3, r2, r3
 8001a9a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001a9e:	f04f 0000 	mov.w	r0, #0
 8001aa2:	f04f 0100 	mov.w	r1, #0
 8001aa6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8001aaa:	462b      	mov	r3, r5
 8001aac:	0459      	lsls	r1, r3, #17
 8001aae:	4622      	mov	r2, r4
 8001ab0:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001ab4:	4623      	mov	r3, r4
 8001ab6:	0458      	lsls	r0, r3, #17
 8001ab8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001abc:	1814      	adds	r4, r2, r0
 8001abe:	64bc      	str	r4, [r7, #72]	@ 0x48
 8001ac0:	414b      	adcs	r3, r1
 8001ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ac4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8001ac8:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) devv.dig_P4) << 35);
 8001acc:	4b6f      	ldr	r3, [pc, #444]	@ (8001c8c <compensate_pressure+0x2cc>)
 8001ace:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	17da      	asrs	r2, r3, #31
 8001ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001ada:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001ade:	f04f 0000 	mov.w	r0, #0
 8001ae2:	f04f 0100 	mov.w	r1, #0
 8001ae6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001aea:	00d9      	lsls	r1, r3, #3
 8001aec:	2000      	movs	r0, #0
 8001aee:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001af2:	1814      	adds	r4, r2, r0
 8001af4:	643c      	str	r4, [r7, #64]	@ 0x40
 8001af6:	414b      	adcs	r3, r1
 8001af8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001afa:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001afe:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) devv.dig_P3) >> 8)
 8001b02:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001b06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001b0a:	fb03 f102 	mul.w	r1, r3, r2
 8001b0e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001b12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001b16:	fb02 f303 	mul.w	r3, r2, r3
 8001b1a:	18ca      	adds	r2, r1, r3
 8001b1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001b20:	fba3 3103 	umull	r3, r1, r3, r3
 8001b24:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 8001b28:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001b30:	18d3      	adds	r3, r2, r3
 8001b32:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001b36:	4b55      	ldr	r3, [pc, #340]	@ (8001c8c <compensate_pressure+0x2cc>)
 8001b38:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	17da      	asrs	r2, r3, #31
 8001b40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001b44:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001b48:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8001b4c:	4622      	mov	r2, r4
 8001b4e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8001b52:	4641      	mov	r1, r8
 8001b54:	fb01 f202 	mul.w	r2, r1, r2
 8001b58:	464d      	mov	r5, r9
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	4621      	mov	r1, r4
 8001b5e:	4603      	mov	r3, r0
 8001b60:	fb03 f305 	mul.w	r3, r3, r5
 8001b64:	4413      	add	r3, r2
 8001b66:	4602      	mov	r2, r0
 8001b68:	4641      	mov	r1, r8
 8001b6a:	fba2 2101 	umull	r2, r1, r2, r1
 8001b6e:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 8001b72:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8001b76:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001b80:	f04f 0000 	mov.w	r0, #0
 8001b84:	f04f 0100 	mov.w	r1, #0
 8001b88:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001b8c:	4623      	mov	r3, r4
 8001b8e:	0a18      	lsrs	r0, r3, #8
 8001b90:	462a      	mov	r2, r5
 8001b92:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001b96:	462b      	mov	r3, r5
 8001b98:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) devv.dig_P2) << 12);
 8001b9a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c8c <compensate_pressure+0x2cc>)
 8001b9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ba0:	b21b      	sxth	r3, r3
 8001ba2:	17da      	asrs	r2, r3, #31
 8001ba4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001ba8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001bac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001bb0:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001bb4:	464a      	mov	r2, r9
 8001bb6:	fb02 f203 	mul.w	r2, r2, r3
 8001bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001bbe:	4644      	mov	r4, r8
 8001bc0:	fb04 f303 	mul.w	r3, r4, r3
 8001bc4:	441a      	add	r2, r3
 8001bc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001bca:	4644      	mov	r4, r8
 8001bcc:	fba3 3404 	umull	r3, r4, r3, r4
 8001bd0:	f8c7 40f4 	str.w	r4, [r7, #244]	@ 0xf4
 8001bd4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bdc:	18d3      	adds	r3, r2, r3
 8001bde:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	f04f 0300 	mov.w	r3, #0
 8001bea:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8001bee:	464c      	mov	r4, r9
 8001bf0:	0323      	lsls	r3, r4, #12
 8001bf2:	46c4      	mov	ip, r8
 8001bf4:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001bf8:	4644      	mov	r4, r8
 8001bfa:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) devv.dig_P3) >> 8)
 8001bfc:	1884      	adds	r4, r0, r2
 8001bfe:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001c00:	eb41 0303 	adc.w	r3, r1, r3
 8001c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c06:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001c0a:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) devv.dig_P1) >> 33;
 8001c0e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001c12:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001c16:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8001c1a:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c8c <compensate_pressure+0x2cc>)
 8001c20:	88db      	ldrh	r3, [r3, #6]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	2200      	movs	r2, #0
 8001c26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001c2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001c2e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8001c32:	4622      	mov	r2, r4
 8001c34:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001c38:	4641      	mov	r1, r8
 8001c3a:	fb01 f202 	mul.w	r2, r1, r2
 8001c3e:	464d      	mov	r5, r9
 8001c40:	4618      	mov	r0, r3
 8001c42:	4621      	mov	r1, r4
 8001c44:	4603      	mov	r3, r0
 8001c46:	fb03 f305 	mul.w	r3, r3, r5
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	4641      	mov	r1, r8
 8001c50:	fba2 2101 	umull	r2, r1, r2, r1
 8001c54:	f8c7 10ec 	str.w	r1, [r7, #236]	@ 0xec
 8001c58:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001c5c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001c60:	4413      	add	r3, r2
 8001c62:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001c72:	4629      	mov	r1, r5
 8001c74:	104a      	asrs	r2, r1, #1
 8001c76:	4629      	mov	r1, r5
 8001c78:	17cb      	asrs	r3, r1, #31
 8001c7a:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 8001c7e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001c82:	4313      	orrs	r3, r2
 8001c84:	d104      	bne.n	8001c90 <compensate_pressure+0x2d0>
		return 0;  // avoid exception caused by division by zero
 8001c86:	2300      	movs	r3, #0
 8001c88:	e15d      	b.n	8001f46 <compensate_pressure+0x586>
 8001c8a:	bf00      	nop
 8001c8c:	200000cc 	.word	0x200000cc
	}

	p = 1048576 - adc_press;
 8001c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001c94:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001c98:	17da      	asrs	r2, r3, #31
 8001c9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c9c:	637a      	str	r2, [r7, #52]	@ 0x34
 8001c9e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001ca2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001ca6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001caa:	105b      	asrs	r3, r3, #1
 8001cac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001cb0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001cb4:	07db      	lsls	r3, r3, #31
 8001cb6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001cba:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001cbe:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8001cc2:	4604      	mov	r4, r0
 8001cc4:	1aa4      	subs	r4, r4, r2
 8001cc6:	f8c7 4080 	str.w	r4, [r7, #128]	@ 0x80
 8001cca:	eb61 0303 	sbc.w	r3, r1, r3
 8001cce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001cd2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001cd6:	4622      	mov	r2, r4
 8001cd8:	462b      	mov	r3, r5
 8001cda:	1891      	adds	r1, r2, r2
 8001cdc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001cde:	415b      	adcs	r3, r3
 8001ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ce2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ce6:	4621      	mov	r1, r4
 8001ce8:	1851      	adds	r1, r2, r1
 8001cea:	6239      	str	r1, [r7, #32]
 8001cec:	4629      	mov	r1, r5
 8001cee:	414b      	adcs	r3, r1
 8001cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cfe:	4649      	mov	r1, r9
 8001d00:	018b      	lsls	r3, r1, #6
 8001d02:	4641      	mov	r1, r8
 8001d04:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d08:	4641      	mov	r1, r8
 8001d0a:	018a      	lsls	r2, r1, #6
 8001d0c:	4641      	mov	r1, r8
 8001d0e:	1889      	adds	r1, r1, r2
 8001d10:	61b9      	str	r1, [r7, #24]
 8001d12:	4649      	mov	r1, r9
 8001d14:	eb43 0101 	adc.w	r1, r3, r1
 8001d18:	61f9      	str	r1, [r7, #28]
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001d26:	4649      	mov	r1, r9
 8001d28:	008b      	lsls	r3, r1, #2
 8001d2a:	46c4      	mov	ip, r8
 8001d2c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001d30:	4641      	mov	r1, r8
 8001d32:	008a      	lsls	r2, r1, #2
 8001d34:	4610      	mov	r0, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	4603      	mov	r3, r0
 8001d3a:	4622      	mov	r2, r4
 8001d3c:	189b      	adds	r3, r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	460b      	mov	r3, r1
 8001d42:	462a      	mov	r2, r5
 8001d44:	eb42 0303 	adc.w	r3, r2, r3
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001d56:	4649      	mov	r1, r9
 8001d58:	008b      	lsls	r3, r1, #2
 8001d5a:	46c4      	mov	ip, r8
 8001d5c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001d60:	4641      	mov	r1, r8
 8001d62:	008a      	lsls	r2, r1, #2
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4622      	mov	r2, r4
 8001d6c:	189b      	adds	r3, r3, r2
 8001d6e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d70:	462b      	mov	r3, r5
 8001d72:	460a      	mov	r2, r1
 8001d74:	eb42 0303 	adc.w	r3, r2, r3
 8001d78:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d7a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001d7e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001d82:	f7ff fa89 	bl	8001298 <__aeabi_ldivmod>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) devv.dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001d8e:	4b71      	ldr	r3, [pc, #452]	@ (8001f54 <compensate_pressure+0x594>)
 8001d90:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001d94:	b21b      	sxth	r3, r3
 8001d96:	17da      	asrs	r2, r3, #31
 8001d98:	673b      	str	r3, [r7, #112]	@ 0x70
 8001d9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8001d9c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001da0:	f04f 0000 	mov.w	r0, #0
 8001da4:	f04f 0100 	mov.w	r1, #0
 8001da8:	0b50      	lsrs	r0, r2, #13
 8001daa:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001dae:	1359      	asrs	r1, r3, #13
 8001db0:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001db4:	462b      	mov	r3, r5
 8001db6:	fb00 f203 	mul.w	r2, r0, r3
 8001dba:	4623      	mov	r3, r4
 8001dbc:	fb03 f301 	mul.w	r3, r3, r1
 8001dc0:	4413      	add	r3, r2
 8001dc2:	4622      	mov	r2, r4
 8001dc4:	fba2 2100 	umull	r2, r1, r2, r0
 8001dc8:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8001dcc:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001dd0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001dda:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001dde:	f04f 0000 	mov.w	r0, #0
 8001de2:	f04f 0100 	mov.w	r1, #0
 8001de6:	0b50      	lsrs	r0, r2, #13
 8001de8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001dec:	1359      	asrs	r1, r3, #13
 8001dee:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001df2:	462b      	mov	r3, r5
 8001df4:	fb00 f203 	mul.w	r2, r0, r3
 8001df8:	4623      	mov	r3, r4
 8001dfa:	fb03 f301 	mul.w	r3, r3, r1
 8001dfe:	4413      	add	r3, r2
 8001e00:	4622      	mov	r2, r4
 8001e02:	fba2 2100 	umull	r2, r1, r2, r0
 8001e06:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8001e0a:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001e0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001e12:	4413      	add	r3, r2
 8001e14:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001e24:	4621      	mov	r1, r4
 8001e26:	0e4a      	lsrs	r2, r1, #25
 8001e28:	4620      	mov	r0, r4
 8001e2a:	4629      	mov	r1, r5
 8001e2c:	460c      	mov	r4, r1
 8001e2e:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001e32:	164b      	asrs	r3, r1, #25
 8001e34:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) devv.dig_P8 * p) >> 19;
 8001e38:	4b46      	ldr	r3, [pc, #280]	@ (8001f54 <compensate_pressure+0x594>)
 8001e3a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001e3e:	b21b      	sxth	r3, r3
 8001e40:	17da      	asrs	r2, r3, #31
 8001e42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001e44:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001e46:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001e4a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001e4e:	462a      	mov	r2, r5
 8001e50:	fb02 f203 	mul.w	r2, r2, r3
 8001e54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001e58:	4621      	mov	r1, r4
 8001e5a:	fb01 f303 	mul.w	r3, r1, r3
 8001e5e:	441a      	add	r2, r3
 8001e60:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001e64:	4621      	mov	r1, r4
 8001e66:	fba3 3101 	umull	r3, r1, r3, r1
 8001e6a:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8001e6e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001e76:	18d3      	adds	r3, r2, r3
 8001e78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001e88:	4621      	mov	r1, r4
 8001e8a:	0cca      	lsrs	r2, r1, #19
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	4629      	mov	r1, r5
 8001e90:	460c      	mov	r4, r1
 8001e92:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001e96:	14cb      	asrs	r3, r1, #19
 8001e98:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) devv.dig_P7 << 4);
 8001e9c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8001ea0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001ea4:	1884      	adds	r4, r0, r2
 8001ea6:	663c      	str	r4, [r7, #96]	@ 0x60
 8001ea8:	eb41 0303 	adc.w	r3, r1, r3
 8001eac:	667b      	str	r3, [r7, #100]	@ 0x64
 8001eae:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001eb2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001eb6:	4621      	mov	r1, r4
 8001eb8:	1889      	adds	r1, r1, r2
 8001eba:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001ebc:	4629      	mov	r1, r5
 8001ebe:	eb43 0101 	adc.w	r1, r3, r1
 8001ec2:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8001ec4:	f04f 0000 	mov.w	r0, #0
 8001ec8:	f04f 0100 	mov.w	r1, #0
 8001ecc:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001ed0:	4623      	mov	r3, r4
 8001ed2:	0a18      	lsrs	r0, r3, #8
 8001ed4:	462a      	mov	r2, r5
 8001ed6:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001eda:	462b      	mov	r3, r5
 8001edc:	1219      	asrs	r1, r3, #8
 8001ede:	4b1d      	ldr	r3, [pc, #116]	@ (8001f54 <compensate_pressure+0x594>)
 8001ee0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	17da      	asrs	r2, r3, #31
 8001ee8:	653b      	str	r3, [r7, #80]	@ 0x50
 8001eea:	657a      	str	r2, [r7, #84]	@ 0x54
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001ef8:	464c      	mov	r4, r9
 8001efa:	0123      	lsls	r3, r4, #4
 8001efc:	46c4      	mov	ip, r8
 8001efe:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001f02:	4644      	mov	r4, r8
 8001f04:	0122      	lsls	r2, r4, #4
 8001f06:	1884      	adds	r4, r0, r2
 8001f08:	60bc      	str	r4, [r7, #8]
 8001f0a:	eb41 0303 	adc.w	r3, r1, r3
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001f14:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p/256;
 8001f18:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	da07      	bge.n	8001f30 <compensate_pressure+0x570>
 8001f20:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001f24:	6039      	str	r1, [r7, #0]
 8001f26:	f143 0300 	adc.w	r3, r3, #0
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f30:	f04f 0000 	mov.w	r0, #0
 8001f34:	f04f 0100 	mov.w	r1, #0
 8001f38:	0a10      	lsrs	r0, r2, #8
 8001f3a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001f3e:	1219      	asrs	r1, r3, #8
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4613      	mov	r3, r2
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f52:	bf00      	nop
 8001f54:	200000cc 	.word	0x200000cc

08001f58 <bmp280_read_fixed>:


int32_t bmp280_read_fixed(){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
	static int32_t temperature;
	static int32_t pressure;

	uint8_t data[3];

	if (read_data(0xf7, data,3)) {
 8001f5e:	463b      	mov	r3, r7
 8001f60:	2203      	movs	r2, #3
 8001f62:	4619      	mov	r1, r3
 8001f64:	20f7      	movs	r0, #247	@ 0xf7
 8001f66:	f7ff fb91 	bl	800168c <read_data>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <bmp280_read_fixed+0x1c>
		return false;
 8001f70:	2300      	movs	r3, #0
 8001f72:	e073      	b.n	800205c <bmp280_read_fixed+0x104>
	}
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001f74:	783b      	ldrb	r3, [r7, #0]
 8001f76:	031a      	lsls	r2, r3, #12
 8001f78:	787b      	ldrb	r3, [r7, #1]
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	78ba      	ldrb	r2, [r7, #2]
 8001f80:	0912      	lsrs	r2, r2, #4
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	4313      	orrs	r3, r2
 8001f86:	4a3c      	ldr	r2, [pc, #240]	@ (8002078 <bmp280_read_fixed+0x120>)
 8001f88:	6013      	str	r3, [r2, #0]

	if (read_data(0xfA, data,3)) {
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	4619      	mov	r1, r3
 8001f90:	20fa      	movs	r0, #250	@ 0xfa
 8001f92:	f7ff fb7b 	bl	800168c <read_data>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <bmp280_read_fixed+0x48>
		return false;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e05d      	b.n	800205c <bmp280_read_fixed+0x104>
	}
	adc_temp = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001fa0:	783b      	ldrb	r3, [r7, #0]
 8001fa2:	031a      	lsls	r2, r3, #12
 8001fa4:	787b      	ldrb	r3, [r7, #1]
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	78ba      	ldrb	r2, [r7, #2]
 8001fac:	0912      	lsrs	r2, r2, #4
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	4a32      	ldr	r2, [pc, #200]	@ (800207c <bmp280_read_fixed+0x124>)
 8001fb4:	6013      	str	r3, [r2, #0]
    temperature = compensate_temperature(adc_temp, &fine_temp);
 8001fb6:	4b31      	ldr	r3, [pc, #196]	@ (800207c <bmp280_read_fixed+0x124>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4931      	ldr	r1, [pc, #196]	@ (8002080 <bmp280_read_fixed+0x128>)
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff fcc5 	bl	800194c <compensate_temperature>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4a2f      	ldr	r2, [pc, #188]	@ (8002084 <bmp280_read_fixed+0x12c>)
 8001fc6:	6013      	str	r3, [r2, #0]
	pressure = compensate_pressure(adc_pressure, fine_temp);
 8001fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8002078 <bmp280_read_fixed+0x120>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a2c      	ldr	r2, [pc, #176]	@ (8002080 <bmp280_read_fixed+0x128>)
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff fcf4 	bl	80019c0 <compensate_pressure>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8002088 <bmp280_read_fixed+0x130>)
 8001fde:	601a      	str	r2, [r3, #0]
	int32_t bmp280_altitude =((44330 * (1.0 - powf((float)pressure/102416,0.1903))))*100 - 100000;// cm
 8001fe0:	4b29      	ldr	r3, [pc, #164]	@ (8002088 <bmp280_read_fixed+0x130>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fee1 	bl	8000dac <__aeabi_i2f>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4927      	ldr	r1, [pc, #156]	@ (800208c <bmp280_read_fixed+0x134>)
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe ffe4 	bl	8000fbc <__aeabi_fdiv>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	4926      	ldr	r1, [pc, #152]	@ (8002090 <bmp280_read_fixed+0x138>)
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f013 f8e7 	bl	80151cc <powf>
 8001ffe:	4603      	mov	r3, r0
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe fa79 	bl	80004f8 <__aeabi_f2d>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	f04f 0000 	mov.w	r0, #0
 800200e:	4921      	ldr	r1, [pc, #132]	@ (8002094 <bmp280_read_fixed+0x13c>)
 8002010:	f7fe f912 	bl	8000238 <__aeabi_dsub>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	a312      	add	r3, pc, #72	@ (adr r3, 8002068 <bmp280_read_fixed+0x110>)
 800201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002022:	f7fe fac1 	bl	80005a8 <__aeabi_dmul>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	4b19      	ldr	r3, [pc, #100]	@ (8002098 <bmp280_read_fixed+0x140>)
 8002034:	f7fe fab8 	bl	80005a8 <__aeabi_dmul>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4610      	mov	r0, r2
 800203e:	4619      	mov	r1, r3
 8002040:	a30b      	add	r3, pc, #44	@ (adr r3, 8002070 <bmp280_read_fixed+0x118>)
 8002042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002046:	f7fe f8f7 	bl	8000238 <__aeabi_dsub>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4610      	mov	r0, r2
 8002050:	4619      	mov	r1, r3
 8002052:	f7fe fd59 	bl	8000b08 <__aeabi_d2iz>
 8002056:	4603      	mov	r3, r0
 8002058:	607b      	str	r3, [r7, #4]
	return bmp280_altitude;
 800205a:	687b      	ldr	r3, [r7, #4]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	f3af 8000 	nop.w
 8002068:	00000000 	.word	0x00000000
 800206c:	40e5a540 	.word	0x40e5a540
 8002070:	00000000 	.word	0x00000000
 8002074:	40f86a00 	.word	0x40f86a00
 8002078:	20000100 	.word	0x20000100
 800207c:	20000104 	.word	0x20000104
 8002080:	20000108 	.word	0x20000108
 8002084:	2000010c 	.word	0x2000010c
 8002088:	20000110 	.word	0x20000110
 800208c:	47c80800 	.word	0x47c80800
 8002090:	3e42de01 	.word	0x3e42de01
 8002094:	3ff00000 	.word	0x3ff00000
 8002098:	40590000 	.word	0x40590000

0800209c <ibus_init>:


static void ibusDataReceive(uint8_t c);

void ibus_init(UART_HandleTypeDef *uartt)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
    for(int i = 0;i < IBUS_MAX_CHANNEL ; i++){
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	e008      	b.n	80020bc <ibus_init+0x20>
      ibusChannelData[i] = 1000;
 80020aa:	4a0d      	ldr	r2, [pc, #52]	@ (80020e0 <ibus_init+0x44>)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80020b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0;i < IBUS_MAX_CHANNEL ; i++){
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	3301      	adds	r3, #1
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2b0d      	cmp	r3, #13
 80020c0:	ddf3      	ble.n	80020aa <ibus_init+0xe>
    }
	uart = uartt;
 80020c2:	4a08      	ldr	r2, [pc, #32]	@ (80020e4 <ibus_init+0x48>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6013      	str	r3, [r2, #0]
#ifdef DMA_MODE
    is_receive_cpl = 0;
	HAL_UART_Receive_DMA(uart,buffer_dma,2*IBUS_BUFFSIZE);
#else 
	HAL_UART_Receive_IT(uart, &rx_buff,1);
 80020c8:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <ibus_init+0x48>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2201      	movs	r2, #1
 80020ce:	4906      	ldr	r1, [pc, #24]	@ (80020e8 <ibus_init+0x4c>)
 80020d0:	4618      	mov	r0, r3
 80020d2:	f00a ff84 	bl	800cfde <HAL_UART_Receive_IT>
#endif
}
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000118 	.word	0x20000118
 80020e4:	20000174 	.word	0x20000174
 80020e8:	20000170 	.word	0x20000170

080020ec <ibus_uart_port>:

UART_HandleTypeDef *ibus_uart_port(){
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
   return uart;
 80020f0:	4b02      	ldr	r3, [pc, #8]	@ (80020fc <ibus_uart_port+0x10>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	20000174 	.word	0x20000174

08002100 <ibus_calback>:

   ibusFrameComplete();
#endif
}

void ibus_calback(){
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0

#ifdef DMA_MODE
	is_receive_cpl = 1;
#else 
	ibusDataReceive(rx_buff);
 8002104:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <ibus_calback+0x20>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f000 f80d 	bl	8002128 <ibusDataReceive>
    HAL_UART_Receive_IT(uart, &rx_buff,1);
 800210e:	4b05      	ldr	r3, [pc, #20]	@ (8002124 <ibus_calback+0x24>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2201      	movs	r2, #1
 8002114:	4902      	ldr	r1, [pc, #8]	@ (8002120 <ibus_calback+0x20>)
 8002116:	4618      	mov	r0, r3
 8002118:	f00a ff61 	bl	800cfde <HAL_UART_Receive_IT>
#endif

}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000170 	.word	0x20000170
 8002124:	20000174 	.word	0x20000174

08002128 <ibusDataReceive>:

static void ibusDataReceive(uint8_t c)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
    uint32_t ibusTime;
    static uint32_t ibusTimeLast;
    static uint8_t ibusFramePosition;

    ibusTime = micros();
 8002132:	4b1b      	ldr	r3, [pc, #108]	@ (80021a0 <ibusDataReceive+0x78>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800213a:	4b1a      	ldr	r3, [pc, #104]	@ (80021a4 <ibusDataReceive+0x7c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4413      	add	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]

    if ((ibusTime - ibusTimeLast) > 3000)
 8002142:	4b19      	ldr	r3, [pc, #100]	@ (80021a8 <ibusDataReceive+0x80>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800214e:	4293      	cmp	r3, r2
 8002150:	d902      	bls.n	8002158 <ibusDataReceive+0x30>
        ibusFramePosition = 0;
 8002152:	4b16      	ldr	r3, [pc, #88]	@ (80021ac <ibusDataReceive+0x84>)
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]

    ibusTimeLast = ibusTime;
 8002158:	4a13      	ldr	r2, [pc, #76]	@ (80021a8 <ibusDataReceive+0x80>)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6013      	str	r3, [r2, #0]

    if (ibusFramePosition == 0 && c != IBUS_SYNCBYTE)
 800215e:	4b13      	ldr	r3, [pc, #76]	@ (80021ac <ibusDataReceive+0x84>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d102      	bne.n	800216c <ibusDataReceive+0x44>
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	2b20      	cmp	r3, #32
 800216a:	d114      	bne.n	8002196 <ibusDataReceive+0x6e>
        return;

    ibus[ibusFramePosition] = (uint8_t)c;
 800216c:	4b0f      	ldr	r3, [pc, #60]	@ (80021ac <ibusDataReceive+0x84>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	4619      	mov	r1, r3
 8002172:	4a0f      	ldr	r2, [pc, #60]	@ (80021b0 <ibusDataReceive+0x88>)
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	5453      	strb	r3, [r2, r1]

    if (ibusFramePosition == IBUS_BUFFSIZE - 1) {
 8002178:	4b0c      	ldr	r3, [pc, #48]	@ (80021ac <ibusDataReceive+0x84>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b1f      	cmp	r3, #31
 800217e:	d103      	bne.n	8002188 <ibusDataReceive+0x60>
        ibusFrameDone = TRUE;
 8002180:	4b0c      	ldr	r3, [pc, #48]	@ (80021b4 <ibusDataReceive+0x8c>)
 8002182:	2201      	movs	r2, #1
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	e007      	b.n	8002198 <ibusDataReceive+0x70>
    } else {
        ibusFramePosition++;
 8002188:	4b08      	ldr	r3, [pc, #32]	@ (80021ac <ibusDataReceive+0x84>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	3301      	adds	r3, #1
 800218e:	b2da      	uxtb	r2, r3
 8002190:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <ibusDataReceive+0x84>)
 8002192:	701a      	strb	r2, [r3, #0]
 8002194:	e000      	b.n	8002198 <ibusDataReceive+0x70>
        return;
 8002196:	bf00      	nop
    }
}
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr
 80021a0:	2000059c 	.word	0x2000059c
 80021a4:	200005a0 	.word	0x200005a0
 80021a8:	20000178 	.word	0x20000178
 80021ac:	2000017c 	.word	0x2000017c
 80021b0:	20000150 	.word	0x20000150
 80021b4:	20000114 	.word	0x20000114

080021b8 <ibusFrameComplete>:

int ibusFrameComplete(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
	
    uint8_t i;
    uint16_t chksum, rxsum;

    if (ibusFrameDone) {
 80021be:	4b63      	ldr	r3, [pc, #396]	@ (800234c <ibusFrameComplete+0x194>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 80bb 	beq.w	800233e <ibusFrameComplete+0x186>
        ibusFrameDone = FALSE;
 80021c8:	4b60      	ldr	r3, [pc, #384]	@ (800234c <ibusFrameComplete+0x194>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]

        chksum = 0xFFFF;
 80021ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021d2:	81bb      	strh	r3, [r7, #12]

        for (i = 0; i < 30; i++)
 80021d4:	2300      	movs	r3, #0
 80021d6:	73fb      	strb	r3, [r7, #15]
 80021d8:	e009      	b.n	80021ee <ibusFrameComplete+0x36>
            chksum -= ibus[i];
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	4a5c      	ldr	r2, [pc, #368]	@ (8002350 <ibusFrameComplete+0x198>)
 80021de:	5cd3      	ldrb	r3, [r2, r3]
 80021e0:	461a      	mov	r2, r3
 80021e2:	89bb      	ldrh	r3, [r7, #12]
 80021e4:	1a9b      	subs	r3, r3, r2
 80021e6:	81bb      	strh	r3, [r7, #12]
        for (i = 0; i < 30; i++)
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	3301      	adds	r3, #1
 80021ec:	73fb      	strb	r3, [r7, #15]
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	2b1d      	cmp	r3, #29
 80021f2:	d9f2      	bls.n	80021da <ibusFrameComplete+0x22>

        rxsum = ibus[30] + (ibus[31] << 8);
 80021f4:	4b56      	ldr	r3, [pc, #344]	@ (8002350 <ibusFrameComplete+0x198>)
 80021f6:	7f9b      	ldrb	r3, [r3, #30]
 80021f8:	461a      	mov	r2, r3
 80021fa:	4b55      	ldr	r3, [pc, #340]	@ (8002350 <ibusFrameComplete+0x198>)
 80021fc:	7fdb      	ldrb	r3, [r3, #31]
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	b29b      	uxth	r3, r3
 8002202:	4413      	add	r3, r2
 8002204:	80fb      	strh	r3, [r7, #6]

        if (chksum == rxsum) {
 8002206:	89ba      	ldrh	r2, [r7, #12]
 8002208:	88fb      	ldrh	r3, [r7, #6]
 800220a:	429a      	cmp	r2, r3
 800220c:	f040 8097 	bne.w	800233e <ibusFrameComplete+0x186>
            ibusChannelData[0] = (ibus[ 3] << 8) + ibus[ 2];
 8002210:	4b4f      	ldr	r3, [pc, #316]	@ (8002350 <ibusFrameComplete+0x198>)
 8002212:	78db      	ldrb	r3, [r3, #3]
 8002214:	021b      	lsls	r3, r3, #8
 8002216:	4a4e      	ldr	r2, [pc, #312]	@ (8002350 <ibusFrameComplete+0x198>)
 8002218:	7892      	ldrb	r2, [r2, #2]
 800221a:	4413      	add	r3, r2
 800221c:	461a      	mov	r2, r3
 800221e:	4b4d      	ldr	r3, [pc, #308]	@ (8002354 <ibusFrameComplete+0x19c>)
 8002220:	601a      	str	r2, [r3, #0]
            ibusChannelData[1] = (ibus[ 5] << 8) + ibus[ 4];
 8002222:	4b4b      	ldr	r3, [pc, #300]	@ (8002350 <ibusFrameComplete+0x198>)
 8002224:	795b      	ldrb	r3, [r3, #5]
 8002226:	021b      	lsls	r3, r3, #8
 8002228:	4a49      	ldr	r2, [pc, #292]	@ (8002350 <ibusFrameComplete+0x198>)
 800222a:	7912      	ldrb	r2, [r2, #4]
 800222c:	4413      	add	r3, r2
 800222e:	461a      	mov	r2, r3
 8002230:	4b48      	ldr	r3, [pc, #288]	@ (8002354 <ibusFrameComplete+0x19c>)
 8002232:	605a      	str	r2, [r3, #4]
            ibusChannelData[2] = (ibus[ 7] << 8) + ibus[ 6];
 8002234:	4b46      	ldr	r3, [pc, #280]	@ (8002350 <ibusFrameComplete+0x198>)
 8002236:	79db      	ldrb	r3, [r3, #7]
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	4a45      	ldr	r2, [pc, #276]	@ (8002350 <ibusFrameComplete+0x198>)
 800223c:	7992      	ldrb	r2, [r2, #6]
 800223e:	4413      	add	r3, r2
 8002240:	461a      	mov	r2, r3
 8002242:	4b44      	ldr	r3, [pc, #272]	@ (8002354 <ibusFrameComplete+0x19c>)
 8002244:	609a      	str	r2, [r3, #8]
            ibusChannelData[3] = (ibus[ 9] << 8) + ibus[ 8];
 8002246:	4b42      	ldr	r3, [pc, #264]	@ (8002350 <ibusFrameComplete+0x198>)
 8002248:	7a5b      	ldrb	r3, [r3, #9]
 800224a:	021b      	lsls	r3, r3, #8
 800224c:	4a40      	ldr	r2, [pc, #256]	@ (8002350 <ibusFrameComplete+0x198>)
 800224e:	7a12      	ldrb	r2, [r2, #8]
 8002250:	4413      	add	r3, r2
 8002252:	461a      	mov	r2, r3
 8002254:	4b3f      	ldr	r3, [pc, #252]	@ (8002354 <ibusFrameComplete+0x19c>)
 8002256:	60da      	str	r2, [r3, #12]
            ibusChannelData[4] = (ibus[11] << 8) + ibus[10];
 8002258:	4b3d      	ldr	r3, [pc, #244]	@ (8002350 <ibusFrameComplete+0x198>)
 800225a:	7adb      	ldrb	r3, [r3, #11]
 800225c:	021b      	lsls	r3, r3, #8
 800225e:	4a3c      	ldr	r2, [pc, #240]	@ (8002350 <ibusFrameComplete+0x198>)
 8002260:	7a92      	ldrb	r2, [r2, #10]
 8002262:	4413      	add	r3, r2
 8002264:	461a      	mov	r2, r3
 8002266:	4b3b      	ldr	r3, [pc, #236]	@ (8002354 <ibusFrameComplete+0x19c>)
 8002268:	611a      	str	r2, [r3, #16]
            ibusChannelData[5] = (ibus[13] << 8) + ibus[12];
 800226a:	4b39      	ldr	r3, [pc, #228]	@ (8002350 <ibusFrameComplete+0x198>)
 800226c:	7b5b      	ldrb	r3, [r3, #13]
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	4a37      	ldr	r2, [pc, #220]	@ (8002350 <ibusFrameComplete+0x198>)
 8002272:	7b12      	ldrb	r2, [r2, #12]
 8002274:	4413      	add	r3, r2
 8002276:	461a      	mov	r2, r3
 8002278:	4b36      	ldr	r3, [pc, #216]	@ (8002354 <ibusFrameComplete+0x19c>)
 800227a:	615a      	str	r2, [r3, #20]
            ibusChannelData[6] = (ibus[15] << 8) + ibus[14];
 800227c:	4b34      	ldr	r3, [pc, #208]	@ (8002350 <ibusFrameComplete+0x198>)
 800227e:	7bdb      	ldrb	r3, [r3, #15]
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	4a33      	ldr	r2, [pc, #204]	@ (8002350 <ibusFrameComplete+0x198>)
 8002284:	7b92      	ldrb	r2, [r2, #14]
 8002286:	4413      	add	r3, r2
 8002288:	461a      	mov	r2, r3
 800228a:	4b32      	ldr	r3, [pc, #200]	@ (8002354 <ibusFrameComplete+0x19c>)
 800228c:	619a      	str	r2, [r3, #24]
            ibusChannelData[7] = (ibus[17] << 8) + ibus[16];
 800228e:	4b30      	ldr	r3, [pc, #192]	@ (8002350 <ibusFrameComplete+0x198>)
 8002290:	7c5b      	ldrb	r3, [r3, #17]
 8002292:	021b      	lsls	r3, r3, #8
 8002294:	4a2e      	ldr	r2, [pc, #184]	@ (8002350 <ibusFrameComplete+0x198>)
 8002296:	7c12      	ldrb	r2, [r2, #16]
 8002298:	4413      	add	r3, r2
 800229a:	461a      	mov	r2, r3
 800229c:	4b2d      	ldr	r3, [pc, #180]	@ (8002354 <ibusFrameComplete+0x19c>)
 800229e:	61da      	str	r2, [r3, #28]
			ibusChannelData[8] = (ibus[19] << 8) + ibus[18];
 80022a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002350 <ibusFrameComplete+0x198>)
 80022a2:	7cdb      	ldrb	r3, [r3, #19]
 80022a4:	021b      	lsls	r3, r3, #8
 80022a6:	4a2a      	ldr	r2, [pc, #168]	@ (8002350 <ibusFrameComplete+0x198>)
 80022a8:	7c92      	ldrb	r2, [r2, #18]
 80022aa:	4413      	add	r3, r2
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b29      	ldr	r3, [pc, #164]	@ (8002354 <ibusFrameComplete+0x19c>)
 80022b0:	621a      	str	r2, [r3, #32]
            ibusChannelData[9] = (ibus[21] << 8) + ibus[20];
 80022b2:	4b27      	ldr	r3, [pc, #156]	@ (8002350 <ibusFrameComplete+0x198>)
 80022b4:	7d5b      	ldrb	r3, [r3, #21]
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	4a25      	ldr	r2, [pc, #148]	@ (8002350 <ibusFrameComplete+0x198>)
 80022ba:	7d12      	ldrb	r2, [r2, #20]
 80022bc:	4413      	add	r3, r2
 80022be:	461a      	mov	r2, r3
 80022c0:	4b24      	ldr	r3, [pc, #144]	@ (8002354 <ibusFrameComplete+0x19c>)
 80022c2:	625a      	str	r2, [r3, #36]	@ 0x24
            ibusChannelData[10] = (ibus[23] << 8) + ibus[22];
 80022c4:	4b22      	ldr	r3, [pc, #136]	@ (8002350 <ibusFrameComplete+0x198>)
 80022c6:	7ddb      	ldrb	r3, [r3, #23]
 80022c8:	021b      	lsls	r3, r3, #8
 80022ca:	4a21      	ldr	r2, [pc, #132]	@ (8002350 <ibusFrameComplete+0x198>)
 80022cc:	7d92      	ldrb	r2, [r2, #22]
 80022ce:	4413      	add	r3, r2
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b20      	ldr	r3, [pc, #128]	@ (8002354 <ibusFrameComplete+0x19c>)
 80022d4:	629a      	str	r2, [r3, #40]	@ 0x28
			ibusChannelData[11] = (ibus[25] << 8) + ibus[24];
 80022d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002350 <ibusFrameComplete+0x198>)
 80022d8:	7e5b      	ldrb	r3, [r3, #25]
 80022da:	021b      	lsls	r3, r3, #8
 80022dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002350 <ibusFrameComplete+0x198>)
 80022de:	7e12      	ldrb	r2, [r2, #24]
 80022e0:	4413      	add	r3, r2
 80022e2:	461a      	mov	r2, r3
 80022e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002354 <ibusFrameComplete+0x19c>)
 80022e6:	62da      	str	r2, [r3, #44]	@ 0x2c
			ibusChannelData[12] = (ibus[27] << 8) + ibus[26];
 80022e8:	4b19      	ldr	r3, [pc, #100]	@ (8002350 <ibusFrameComplete+0x198>)
 80022ea:	7edb      	ldrb	r3, [r3, #27]
 80022ec:	021b      	lsls	r3, r3, #8
 80022ee:	4a18      	ldr	r2, [pc, #96]	@ (8002350 <ibusFrameComplete+0x198>)
 80022f0:	7e92      	ldrb	r2, [r2, #26]
 80022f2:	4413      	add	r3, r2
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b17      	ldr	r3, [pc, #92]	@ (8002354 <ibusFrameComplete+0x19c>)
 80022f8:	631a      	str	r2, [r3, #48]	@ 0x30
			ibusChannelData[13] = (ibus[29] << 8) + ibus[28];
 80022fa:	4b15      	ldr	r3, [pc, #84]	@ (8002350 <ibusFrameComplete+0x198>)
 80022fc:	7f5b      	ldrb	r3, [r3, #29]
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	4a13      	ldr	r2, [pc, #76]	@ (8002350 <ibusFrameComplete+0x198>)
 8002302:	7f12      	ldrb	r2, [r2, #28]
 8002304:	4413      	add	r3, r2
 8002306:	461a      	mov	r2, r3
 8002308:	4b12      	ldr	r3, [pc, #72]	@ (8002354 <ibusFrameComplete+0x19c>)
 800230a:	635a      	str	r2, [r3, #52]	@ 0x34
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 800230c:	2300      	movs	r3, #0
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	e010      	b.n	8002334 <ibusFrameComplete+0x17c>
			    if(ibusChannelData[i] > 2100){
 8002312:	4a10      	ldr	r2, [pc, #64]	@ (8002354 <ibusFrameComplete+0x19c>)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231a:	f640 0234 	movw	r2, #2100	@ 0x834
 800231e:	4293      	cmp	r3, r2
 8002320:	d905      	bls.n	800232e <ibusFrameComplete+0x176>
				    ibusChannelData[i] = 1000;
 8002322:	4a0c      	ldr	r2, [pc, #48]	@ (8002354 <ibusFrameComplete+0x19c>)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800232a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	3301      	adds	r3, #1
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b0d      	cmp	r3, #13
 8002338:	ddeb      	ble.n	8002312 <ibusFrameComplete+0x15a>
				}
			}
            return TRUE;
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <ibusFrameComplete+0x188>
        }
    }
    return FALSE;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20000114 	.word	0x20000114
 8002350:	20000150 	.word	0x20000150
 8002354:	20000118 	.word	0x20000118

08002358 <mpu6050Connection>:

/* Check mpu6050 connection
 * return 1 -> not connected
 * return 0 -> connected
 */ 
int8_t mpu6050Connection(){
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
    isConnected = HAL_I2C_IsDeviceReady(i2c,IMU_DEV_ADDRES, 3, 5);
 800235c:	4b07      	ldr	r3, [pc, #28]	@ (800237c <mpu6050Connection+0x24>)
 800235e:	6818      	ldr	r0, [r3, #0]
 8002360:	2305      	movs	r3, #5
 8002362:	2203      	movs	r2, #3
 8002364:	21d0      	movs	r1, #208	@ 0xd0
 8002366:	f007 fb97 	bl	8009a98 <HAL_I2C_IsDeviceReady>
 800236a:	4603      	mov	r3, r0
 800236c:	b25a      	sxtb	r2, r3
 800236e:	4b04      	ldr	r3, [pc, #16]	@ (8002380 <mpu6050Connection+0x28>)
 8002370:	701a      	strb	r2, [r3, #0]
    return isConnected;
 8002372:	4b03      	ldr	r3, [pc, #12]	@ (8002380 <mpu6050Connection+0x28>)
 8002374:	f993 3000 	ldrsb.w	r3, [r3]
}
 8002378:	4618      	mov	r0, r3
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000180 	.word	0x20000180
 8002380:	20000184 	.word	0x20000184

08002384 <mpu6050_init>:
}

/* configuration mpu6050*/


int8_t mpu6050_init(I2C_HandleTypeDef *hi2c){
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af02      	add	r7, sp, #8
 800238a:	6078      	str	r0, [r7, #4]
	data[1] = (uint8_t)(ACC_2G<<3);
    SPI_write(&data,2);
	return 0;
#endif
#ifdef I2C
  i2c = hi2c;	
 800238c:	4a25      	ldr	r2, [pc, #148]	@ (8002424 <mpu6050_init+0xa0>)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6013      	str	r3, [r2, #0]
	int8_t k = mpu6050Connection();
 8002392:	f7ff ffe1 	bl	8002358 <mpu6050Connection>
 8002396:	4603      	mov	r3, r0
 8002398:	73fb      	strb	r3, [r7, #15]
	if(!k){
 800239a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d13a      	bne.n	8002418 <mpu6050_init+0x94>
		uint8_t buffer[6];	
		buffer[0] = MPU_RA_PWR_MGMT_1; 
 80023a2:	236b      	movs	r3, #107	@ 0x6b
 80023a4:	723b      	strb	r3, [r7, #8]
		buffer[1] = RESET_REG;
 80023a6:	2300      	movs	r3, #0
 80023a8:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 80023aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002424 <mpu6050_init+0xa0>)
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	f107 0208 	add.w	r2, r7, #8
 80023b2:	2301      	movs	r3, #1
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	2302      	movs	r3, #2
 80023b8:	21d0      	movs	r1, #208	@ 0xd0
 80023ba:	f006 fca1 	bl	8008d00 <HAL_I2C_Master_Transmit>
		
		//buffer[0] = CONFIGURATION;
		//buffer[1] = (HZ_5<<0);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);

		buffer[0] = GYRO_REG_CONFIG;
 80023be:	231b      	movs	r3, #27
 80023c0:	723b      	strb	r3, [r7, #8]
		buffer[1] = (GYRO_1000dps<<3);
 80023c2:	2310      	movs	r3, #16
 80023c4:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 80023c6:	4b17      	ldr	r3, [pc, #92]	@ (8002424 <mpu6050_init+0xa0>)
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	f107 0208 	add.w	r2, r7, #8
 80023ce:	2301      	movs	r3, #1
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	2302      	movs	r3, #2
 80023d4:	21d0      	movs	r1, #208	@ 0xd0
 80023d6:	f006 fc93 	bl	8008d00 <HAL_I2C_Master_Transmit>

		buffer[0] = ACC_REG_CONFIG;
 80023da:	231c      	movs	r3, #28
 80023dc:	723b      	strb	r3, [r7, #8]
		buffer[1] = (ACC_16G<<3);
 80023de:	2318      	movs	r3, #24
 80023e0:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 80023e2:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <mpu6050_init+0xa0>)
 80023e4:	6818      	ldr	r0, [r3, #0]
 80023e6:	f107 0208 	add.w	r2, r7, #8
 80023ea:	2301      	movs	r3, #1
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2302      	movs	r3, #2
 80023f0:	21d0      	movs	r1, #208	@ 0xd0
 80023f2:	f006 fc85 	bl	8008d00 <HAL_I2C_Master_Transmit>
		//buffer[1] &= ~(1<<5);
		//buffer[1] |= (1<<5);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
		
		// set aux i2c pass through mode 
		buffer[0] = INT_PIN_CFG;
 80023f6:	2337      	movs	r3, #55	@ 0x37
 80023f8:	723b      	strb	r3, [r7, #8]
		buffer[1] |= (1<<1);
 80023fa:	7a7b      	ldrb	r3, [r7, #9]
 80023fc:	f043 0302 	orr.w	r3, r3, #2
 8002400:	b2db      	uxtb	r3, r3
 8002402:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8002404:	4b07      	ldr	r3, [pc, #28]	@ (8002424 <mpu6050_init+0xa0>)
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	f107 0208 	add.w	r2, r7, #8
 800240c:	2301      	movs	r3, #1
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	2302      	movs	r3, #2
 8002412:	21d0      	movs	r1, #208	@ 0xd0
 8002414:	f006 fc74 	bl	8008d00 <HAL_I2C_Master_Transmit>

	}
	return k;
 8002418:	f997 300f 	ldrsb.w	r3, [r7, #15]
#endif

}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20000180 	.word	0x20000180

08002428 <mpu6050_gyro_get_raw>:
/* Gyro get raw data (Lbs/s)
 * x - rate
 * y - rate
 * z - rate   
 */
void mpu6050_gyro_get_raw(axis3_t *raw){
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af02      	add	r7, sp, #8
 800242e:	6078      	str	r0, [r7, #4]
	  uint8_t buffe[6];
	  buffe[0] = (uint8_t)GYRO_DATA_REG;
 8002430:	2343      	movs	r3, #67	@ 0x43
 8002432:	723b      	strb	r3, [r7, #8]

#ifdef I2C
	  HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 8002434:	4b19      	ldr	r3, [pc, #100]	@ (800249c <mpu6050_gyro_get_raw+0x74>)
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	f107 0208 	add.w	r2, r7, #8
 800243c:	2301      	movs	r3, #1
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	2301      	movs	r3, #1
 8002442:	21d0      	movs	r1, #208	@ 0xd0
 8002444:	f006 fc5c 	bl	8008d00 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 8002448:	4b14      	ldr	r3, [pc, #80]	@ (800249c <mpu6050_gyro_get_raw+0x74>)
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	f107 0208 	add.w	r2, r7, #8
 8002450:	2301      	movs	r3, #1
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	2306      	movs	r3, #6
 8002456:	21d0      	movs	r1, #208	@ 0xd0
 8002458:	f006 fd50 	bl	8008efc <HAL_I2C_Master_Receive>
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_RESET);
	  HAL_SPI_Transmit(&SPI_PORT,&buffe[0],1,1);
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
#endif
	  raw->x = (int16_t)buffe[0]<<8|buffe[1];
 800245c:	7a3b      	ldrb	r3, [r7, #8]
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	b21a      	sxth	r2, r3
 8002462:	7a7b      	ldrb	r3, [r7, #9]
 8002464:	b21b      	sxth	r3, r3
 8002466:	4313      	orrs	r3, r2
 8002468:	b21a      	sxth	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	801a      	strh	r2, [r3, #0]
	  raw->y = (int16_t)buffe[2]<<8|buffe[3];
 800246e:	7abb      	ldrb	r3, [r7, #10]
 8002470:	021b      	lsls	r3, r3, #8
 8002472:	b21a      	sxth	r2, r3
 8002474:	7afb      	ldrb	r3, [r7, #11]
 8002476:	b21b      	sxth	r3, r3
 8002478:	4313      	orrs	r3, r2
 800247a:	b21a      	sxth	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	805a      	strh	r2, [r3, #2]
	  raw->z = (int16_t)buffe[4]<<8|buffe[5];
 8002480:	7b3b      	ldrb	r3, [r7, #12]
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	b21a      	sxth	r2, r3
 8002486:	7b7b      	ldrb	r3, [r7, #13]
 8002488:	b21b      	sxth	r3, r3
 800248a:	4313      	orrs	r3, r2
 800248c:	b21a      	sxth	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	809a      	strh	r2, [r3, #4]
	}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000180 	.word	0x20000180

080024a0 <mpu6050_acc_get_raw>:
/* Acc get raw data
	*  x - axis
	*  y - axis
	*  z - axis   
	*/
void mpu6050_acc_get_raw(axis3_t *k){
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af02      	add	r7, sp, #8
 80024a6:	6078      	str	r0, [r7, #4]
	axis3_t p_val =*k;
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	f107 0310 	add.w	r3, r7, #16
 80024ae:	6810      	ldr	r0, [r2, #0]
 80024b0:	6018      	str	r0, [r3, #0]
 80024b2:	8892      	ldrh	r2, [r2, #4]
 80024b4:	809a      	strh	r2, [r3, #4]
	uint8_t buffe[6];
	buffe[0] = (uint8_t)ACC_DATA_REG;
 80024b6:	233b      	movs	r3, #59	@ 0x3b
 80024b8:	723b      	strb	r3, [r7, #8]
#ifdef I2C
	HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 80024ba:	4b19      	ldr	r3, [pc, #100]	@ (8002520 <mpu6050_acc_get_raw+0x80>)
 80024bc:	6818      	ldr	r0, [r3, #0]
 80024be:	f107 0208 	add.w	r2, r7, #8
 80024c2:	2301      	movs	r3, #1
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	2301      	movs	r3, #1
 80024c8:	21d0      	movs	r1, #208	@ 0xd0
 80024ca:	f006 fc19 	bl	8008d00 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 80024ce:	4b14      	ldr	r3, [pc, #80]	@ (8002520 <mpu6050_acc_get_raw+0x80>)
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	f107 0208 	add.w	r2, r7, #8
 80024d6:	2301      	movs	r3, #1
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	2306      	movs	r3, #6
 80024dc:	21d0      	movs	r1, #208	@ 0xd0
 80024de:	f006 fd0d 	bl	8008efc <HAL_I2C_Master_Receive>
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
*/
      SPI_read(buffe[0],buffe,14);
#endif
	  k->x = (int16_t)buffe[0]<<8|buffe[1];
 80024e2:	7a3b      	ldrb	r3, [r7, #8]
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	b21a      	sxth	r2, r3
 80024e8:	7a7b      	ldrb	r3, [r7, #9]
 80024ea:	b21b      	sxth	r3, r3
 80024ec:	4313      	orrs	r3, r2
 80024ee:	b21a      	sxth	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	801a      	strh	r2, [r3, #0]
	  k->y = (int16_t)buffe[2]<<8|buffe[3];
 80024f4:	7abb      	ldrb	r3, [r7, #10]
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	b21a      	sxth	r2, r3
 80024fa:	7afb      	ldrb	r3, [r7, #11]
 80024fc:	b21b      	sxth	r3, r3
 80024fe:	4313      	orrs	r3, r2
 8002500:	b21a      	sxth	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	805a      	strh	r2, [r3, #2]
	  k->z = (int16_t)buffe[4]<<8|buffe[5];
 8002506:	7b3b      	ldrb	r3, [r7, #12]
 8002508:	021b      	lsls	r3, r3, #8
 800250a:	b21a      	sxth	r2, r3
 800250c:	7b7b      	ldrb	r3, [r7, #13]
 800250e:	b21b      	sxth	r3, r3
 8002510:	4313      	orrs	r3, r2
 8002512:	b21a      	sxth	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	809a      	strh	r2, [r3, #4]
}
 8002518:	bf00      	nop
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000180 	.word	0x20000180

08002524 <qmc5883_init>:
#include "../Lib/axis.h"

const uint8_t qmc_addres = (0x0d<<1);
static I2C_HandleTypeDef *qmc_i2cport;

void qmc5883_init(I2C_HandleTypeDef *i2cport){
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af02      	add	r7, sp, #8
 800252a:	6078      	str	r0, [r7, #4]
	qmc_i2cport = i2cport;
 800252c:	4a12      	ldr	r2, [pc, #72]	@ (8002578 <qmc5883_init+0x54>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6013      	str	r3, [r2, #0]
    uint8_t buf[2];
    buf[0]=0x0b;
 8002532:	230b      	movs	r3, #11
 8002534:	733b      	strb	r3, [r7, #12]
    buf[1]=0X01;
 8002536:	2301      	movs	r3, #1
 8002538:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 800253a:	4b0f      	ldr	r3, [pc, #60]	@ (8002578 <qmc5883_init+0x54>)
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	231a      	movs	r3, #26
 8002540:	4619      	mov	r1, r3
 8002542:	f107 020c 	add.w	r2, r7, #12
 8002546:	2301      	movs	r3, #1
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	2302      	movs	r3, #2
 800254c:	f006 fbd8 	bl	8008d00 <HAL_I2C_Master_Transmit>
    buf[0]=0x09;
 8002550:	2309      	movs	r3, #9
 8002552:	733b      	strb	r3, [r7, #12]
    buf[1]=0X1D;
 8002554:	231d      	movs	r3, #29
 8002556:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 8002558:	4b07      	ldr	r3, [pc, #28]	@ (8002578 <qmc5883_init+0x54>)
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	231a      	movs	r3, #26
 800255e:	4619      	mov	r1, r3
 8002560:	f107 020c 	add.w	r2, r7, #12
 8002564:	2301      	movs	r3, #1
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	2302      	movs	r3, #2
 800256a:	f006 fbc9 	bl	8008d00 <HAL_I2C_Master_Transmit>
}
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000188 	.word	0x20000188

0800257c <qmc_get_raw>:

void qmc_get_raw(axis3_t *axis){
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af04      	add	r7, sp, #16
 8002582:	6078      	str	r0, [r7, #4]
	  uint8_t buf[6]={0};
 8002584:	2300      	movs	r3, #0
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	2300      	movs	r3, #0
 800258a:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Mem_Read(qmc_i2cport,qmc_addres,0x00,1,buf,6,1);
 800258c:	4b16      	ldr	r3, [pc, #88]	@ (80025e8 <qmc_get_raw+0x6c>)
 800258e:	6818      	ldr	r0, [r3, #0]
 8002590:	231a      	movs	r3, #26
 8002592:	4619      	mov	r1, r3
 8002594:	2301      	movs	r3, #1
 8002596:	9302      	str	r3, [sp, #8]
 8002598:	2306      	movs	r3, #6
 800259a:	9301      	str	r3, [sp, #4]
 800259c:	f107 0308 	add.w	r3, r7, #8
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	2301      	movs	r3, #1
 80025a4:	2200      	movs	r2, #0
 80025a6:	f007 f80f 	bl	80095c8 <HAL_I2C_Mem_Read>
	  axis->x=((int16_t)buf[1]<<8|buf[0]) ;
 80025aa:	7a7b      	ldrb	r3, [r7, #9]
 80025ac:	021b      	lsls	r3, r3, #8
 80025ae:	b21a      	sxth	r2, r3
 80025b0:	7a3b      	ldrb	r3, [r7, #8]
 80025b2:	b21b      	sxth	r3, r3
 80025b4:	4313      	orrs	r3, r2
 80025b6:	b21a      	sxth	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	801a      	strh	r2, [r3, #0]
	  axis->y=((int16_t)buf[3]<<8|buf[2]);
 80025bc:	7afb      	ldrb	r3, [r7, #11]
 80025be:	021b      	lsls	r3, r3, #8
 80025c0:	b21a      	sxth	r2, r3
 80025c2:	7abb      	ldrb	r3, [r7, #10]
 80025c4:	b21b      	sxth	r3, r3
 80025c6:	4313      	orrs	r3, r2
 80025c8:	b21a      	sxth	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	805a      	strh	r2, [r3, #2]
	  axis->z=((int16_t)buf[5]<<8|buf[4]);
 80025ce:	7b7b      	ldrb	r3, [r7, #13]
 80025d0:	021b      	lsls	r3, r3, #8
 80025d2:	b21a      	sxth	r2, r3
 80025d4:	7b3b      	ldrb	r3, [r7, #12]
 80025d6:	b21b      	sxth	r3, r3
 80025d8:	4313      	orrs	r3, r2
 80025da:	b21a      	sxth	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	809a      	strh	r2, [r3, #4]
}
 80025e0:	bf00      	nop
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000188 	.word	0x20000188

080025ec <baro_init>:
//#define MS5611

int8_t baro_calib;
int32_t alt_offset;

void baro_init(){
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
    baro_calib = FALSE;
 80025f2:	4b0e      	ldr	r3, [pc, #56]	@ (800262c <baro_init+0x40>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
    alt_offset = 0;
 80025f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002630 <baro_init+0x44>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
#ifdef BMP280
    bmp280_init(&hi2c2);
 80025fe:	480d      	ldr	r0, [pc, #52]	@ (8002634 <baro_init+0x48>)
 8002600:	f7ff f908 	bl	8001814 <bmp280_init>
    for(int i=0; i< 100; i++){
 8002604:	2300      	movs	r3, #0
 8002606:	607b      	str	r3, [r7, #4]
 8002608:	e007      	b.n	800261a <baro_init+0x2e>
    	bmp280_read_fixed();
 800260a:	f7ff fca5 	bl	8001f58 <bmp280_read_fixed>
    	HAL_Delay(5);
 800260e:	2005      	movs	r0, #5
 8002610:	f005 face 	bl	8007bb0 <HAL_Delay>
    for(int i=0; i< 100; i++){
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3301      	adds	r3, #1
 8002618:	607b      	str	r3, [r7, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b63      	cmp	r3, #99	@ 0x63
 800261e:	ddf4      	ble.n	800260a <baro_init+0x1e>
    }
#elif MS5611
    ms5611_init(&hi2c2);
#endif
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	2000018c 	.word	0x2000018c
 8002630:	20000190 	.word	0x20000190
 8002634:	20000898 	.word	0x20000898

08002638 <baro_zero_calibrate>:


void baro_zero_calibrate(){
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
    int32_t altitude = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	607b      	str	r3, [r7, #4]
    static int16_t count = 0;
#ifdef BMP280
    altitude = bmp280_read_fixed();
 8002642:	f7ff fc89 	bl	8001f58 <bmp280_read_fixed>
 8002646:	6078      	str	r0, [r7, #4]
#elif MS5611
    altitude = ms5611_read_fixed();
#endif
    alt_offset += altitude;
 8002648:	4b13      	ldr	r3, [pc, #76]	@ (8002698 <baro_zero_calibrate+0x60>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4413      	add	r3, r2
 8002650:	4a11      	ldr	r2, [pc, #68]	@ (8002698 <baro_zero_calibrate+0x60>)
 8002652:	6013      	str	r3, [r2, #0]
    count ++;
 8002654:	4b11      	ldr	r3, [pc, #68]	@ (800269c <baro_zero_calibrate+0x64>)
 8002656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800265a:	b29b      	uxth	r3, r3
 800265c:	3301      	adds	r3, #1
 800265e:	b29b      	uxth	r3, r3
 8002660:	b21a      	sxth	r2, r3
 8002662:	4b0e      	ldr	r3, [pc, #56]	@ (800269c <baro_zero_calibrate+0x64>)
 8002664:	801a      	strh	r2, [r3, #0]
    if(count > 100){
 8002666:	4b0d      	ldr	r3, [pc, #52]	@ (800269c <baro_zero_calibrate+0x64>)
 8002668:	f9b3 3000 	ldrsh.w	r3, [r3]
 800266c:	2b64      	cmp	r3, #100	@ 0x64
 800266e:	dd0f      	ble.n	8002690 <baro_zero_calibrate+0x58>
        alt_offset /= 100;
 8002670:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <baro_zero_calibrate+0x60>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a0a      	ldr	r2, [pc, #40]	@ (80026a0 <baro_zero_calibrate+0x68>)
 8002676:	fb82 1203 	smull	r1, r2, r2, r3
 800267a:	1152      	asrs	r2, r2, #5
 800267c:	17db      	asrs	r3, r3, #31
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	4a05      	ldr	r2, [pc, #20]	@ (8002698 <baro_zero_calibrate+0x60>)
 8002682:	6013      	str	r3, [r2, #0]
        baro_calib = TRUE;
 8002684:	4b07      	ldr	r3, [pc, #28]	@ (80026a4 <baro_zero_calibrate+0x6c>)
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]
        count = 101;
 800268a:	4b04      	ldr	r3, [pc, #16]	@ (800269c <baro_zero_calibrate+0x64>)
 800268c:	2265      	movs	r2, #101	@ 0x65
 800268e:	801a      	strh	r2, [r3, #0]
    }
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20000190 	.word	0x20000190
 800269c:	20000194 	.word	0x20000194
 80026a0:	51eb851f 	.word	0x51eb851f
 80026a4:	2000018c 	.word	0x2000018c

080026a8 <is_baro_calibration>:

int8_t is_baro_calibration(){
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
      return baro_calib;
 80026ac:	4b03      	ldr	r3, [pc, #12]	@ (80026bc <is_baro_calibration+0x14>)
 80026ae:	f993 3000 	ldrsb.w	r3, [r3]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	2000018c 	.word	0x2000018c

080026c0 <baro_get_altitude>:

int32_t baro_get_altitude(){
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
     if(baro_calib){
 80026c6:	4b09      	ldr	r3, [pc, #36]	@ (80026ec <baro_get_altitude+0x2c>)
 80026c8:	f993 3000 	ldrsb.w	r3, [r3]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <baro_get_altitude+0x22>
        int32_t alt = bmp280_read_fixed() - alt_offset;
 80026d0:	f7ff fc42 	bl	8001f58 <bmp280_read_fixed>
 80026d4:	4602      	mov	r2, r0
 80026d6:	4b06      	ldr	r3, [pc, #24]	@ (80026f0 <baro_get_altitude+0x30>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	607b      	str	r3, [r7, #4]
        return alt;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	e000      	b.n	80026e4 <baro_get_altitude+0x24>
     }
     return 0;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	2000018c 	.word	0x2000018c
 80026f0:	20000190 	.word	0x20000190

080026f4 <black_box_init>:
FRESULT open_state;
int32_t puts_state;
/*
 * init black box
 */
void black_box_init(){
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
	fs.file = &SDFile;
 80026f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002734 <black_box_init+0x40>)
 80026fa:	4a0f      	ldr	r2, [pc, #60]	@ (8002738 <black_box_init+0x44>)
 80026fc:	605a      	str	r2, [r3, #4]
    mount_state = f_mount(&SDFatFS,"",1);
 80026fe:	2201      	movs	r2, #1
 8002700:	490e      	ldr	r1, [pc, #56]	@ (800273c <black_box_init+0x48>)
 8002702:	480f      	ldr	r0, [pc, #60]	@ (8002740 <black_box_init+0x4c>)
 8002704:	f00e fb5c 	bl	8010dc0 <f_mount>
 8002708:	4603      	mov	r3, r0
 800270a:	461a      	mov	r2, r3
 800270c:	4b0d      	ldr	r3, [pc, #52]	@ (8002744 <black_box_init+0x50>)
 800270e:	701a      	strb	r2, [r3, #0]
    open_state = f_open(&SDFile,"flight.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8002710:	2213      	movs	r2, #19
 8002712:	490d      	ldr	r1, [pc, #52]	@ (8002748 <black_box_init+0x54>)
 8002714:	4808      	ldr	r0, [pc, #32]	@ (8002738 <black_box_init+0x44>)
 8002716:	f00e fbbb 	bl	8010e90 <f_open>
 800271a:	4603      	mov	r3, r0
 800271c:	461a      	mov	r2, r3
 800271e:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <black_box_init+0x58>)
 8002720:	701a      	strb	r2, [r3, #0]
    f_lseek (&SDFile,SDFile.fsize);
 8002722:	4b05      	ldr	r3, [pc, #20]	@ (8002738 <black_box_init+0x44>)
 8002724:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002728:	4619      	mov	r1, r3
 800272a:	4803      	ldr	r0, [pc, #12]	@ (8002738 <black_box_init+0x44>)
 800272c:	f00f f8f9 	bl	8011922 <f_lseek>
}
 8002730:	bf00      	nop
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20000198 	.word	0x20000198
 8002738:	200010dc 	.word	0x200010dc
 800273c:	08015ce8 	.word	0x08015ce8
 8002740:	20000ea8 	.word	0x20000ea8
 8002744:	200003a4 	.word	0x200003a4
 8002748:	08015cec 	.word	0x08015cec
 800274c:	200003a5 	.word	0x200003a5

08002750 <black_box_get_file_size>:

uint32_t black_box_get_file_size(){
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
    return SDFile.fsize;
 8002754:	4b03      	ldr	r3, [pc, #12]	@ (8002764 <black_box_get_file_size+0x14>)
 8002756:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
}
 800275a:	4618      	mov	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	200010dc 	.word	0x200010dc

08002768 <black_box_pack_int>:
    fs.buffer_index += index;
}



void black_box_pack_int(int val){
 8002768:	b580      	push	{r7, lr}
 800276a:	b08c      	sub	sp, #48	@ 0x30
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

	fs.indexx=0;
 8002770:	4b48      	ldr	r3, [pc, #288]	@ (8002894 <black_box_pack_int+0x12c>)
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
	int len_str;
	int val_ = val;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	617b      	str	r3, [r7, #20]
	char str_[11];
	memset(str_,0,11);
 800277a:	f107 0308 	add.w	r3, r7, #8
 800277e:	220b      	movs	r2, #11
 8002780:	2100      	movs	r1, #0
 8002782:	4618      	mov	r0, r3
 8002784:	f012 fcac 	bl	80150e0 <memset>
	if(val != 0){
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d02a      	beq.n	80027e4 <black_box_pack_int+0x7c>
		val = abs(val);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	bfb8      	it	lt
 8002794:	425b      	neglt	r3, r3
 8002796:	607b      	str	r3, [r7, #4]
		len_str = intToStr(val,str_,0);
 8002798:	f107 0308 	add.w	r3, r7, #8
 800279c:	2200      	movs	r2, #0
 800279e:	4619      	mov	r1, r3
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f91b 	bl	80029dc <intToStr>
 80027a6:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if(val_ < 0){
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	da2a      	bge.n	8002804 <black_box_pack_int+0x9c>
			for(int i = len_str; i > 0; i--){
 80027ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027b2:	e00e      	b.n	80027d2 <black_box_pack_int+0x6a>
				str_[i] = str_[i - 1];
 80027b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b6:	3b01      	subs	r3, #1
 80027b8:	3330      	adds	r3, #48	@ 0x30
 80027ba:	443b      	add	r3, r7
 80027bc:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 80027c0:	f107 0208 	add.w	r2, r7, #8
 80027c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c6:	4413      	add	r3, r2
 80027c8:	460a      	mov	r2, r1
 80027ca:	701a      	strb	r2, [r3, #0]
			for(int i = len_str; i > 0; i--){
 80027cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ce:	3b01      	subs	r3, #1
 80027d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	dced      	bgt.n	80027b4 <black_box_pack_int+0x4c>
			}
			len_str ++;
 80027d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027da:	3301      	adds	r3, #1
 80027dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			str_[0] = '-';
 80027de:	232d      	movs	r3, #45	@ 0x2d
 80027e0:	723b      	strb	r3, [r7, #8]
 80027e2:	e00f      	b.n	8002804 <black_box_pack_int+0x9c>
		}
	}
	else{
	   fs.buffer[fs.buffer_index] ='0';
 80027e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002894 <black_box_pack_int+0x12c>)
 80027e6:	891b      	ldrh	r3, [r3, #8]
 80027e8:	461a      	mov	r2, r3
 80027ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002894 <black_box_pack_int+0x12c>)
 80027ec:	4413      	add	r3, r2
 80027ee:	2230      	movs	r2, #48	@ 0x30
 80027f0:	729a      	strb	r2, [r3, #10]
	   len_str = 1;
 80027f2:	2301      	movs	r3, #1
 80027f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	   fs.buffer_index ++;
 80027f6:	4b27      	ldr	r3, [pc, #156]	@ (8002894 <black_box_pack_int+0x12c>)
 80027f8:	891b      	ldrh	r3, [r3, #8]
 80027fa:	3301      	adds	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	4b25      	ldr	r3, [pc, #148]	@ (8002894 <black_box_pack_int+0x12c>)
 8002800:	811a      	strh	r2, [r3, #8]
 8002802:	e044      	b.n	800288e <black_box_pack_int+0x126>
		return;
	}
	// copy str to buffer
	int str_idx = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	627b      	str	r3, [r7, #36]	@ 0x24
	int index_flag;
	int max_index = fs.buffer_index + len_str;
 8002808:	4b22      	ldr	r3, [pc, #136]	@ (8002894 <black_box_pack_int+0x12c>)
 800280a:	891b      	ldrh	r3, [r3, #8]
 800280c:	461a      	mov	r2, r3
 800280e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002810:	4413      	add	r3, r2
 8002812:	61fb      	str	r3, [r7, #28]
	if(max_index <=  MAX_BUFFER_SIZE){
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800281a:	dc08      	bgt.n	800282e <black_box_pack_int+0xc6>
		max_index = fs.buffer_index + len_str;
 800281c:	4b1d      	ldr	r3, [pc, #116]	@ (8002894 <black_box_pack_int+0x12c>)
 800281e:	891b      	ldrh	r3, [r3, #8]
 8002820:	461a      	mov	r2, r3
 8002822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002824:	4413      	add	r3, r2
 8002826:	61fb      	str	r3, [r7, #28]
		index_flag = 1;
 8002828:	2301      	movs	r3, #1
 800282a:	623b      	str	r3, [r7, #32]
 800282c:	e004      	b.n	8002838 <black_box_pack_int+0xd0>
	}
	else{
		max_index = MAX_BUFFER_SIZE;
 800282e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002832:	61fb      	str	r3, [r7, #28]
		index_flag = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	623b      	str	r3, [r7, #32]
	}
	for(int j = fs.buffer_index ; j < max_index; j++ ){
 8002838:	4b16      	ldr	r3, [pc, #88]	@ (8002894 <black_box_pack_int+0x12c>)
 800283a:	891b      	ldrh	r3, [r3, #8]
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	e00f      	b.n	8002860 <black_box_pack_int+0xf8>
			fs.buffer[j] = str_[str_idx ++];
 8002840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	627a      	str	r2, [r7, #36]	@ 0x24
 8002846:	3330      	adds	r3, #48	@ 0x30
 8002848:	443b      	add	r3, r7
 800284a:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 800284e:	4a11      	ldr	r2, [pc, #68]	@ (8002894 <black_box_pack_int+0x12c>)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	4413      	add	r3, r2
 8002854:	330a      	adds	r3, #10
 8002856:	460a      	mov	r2, r1
 8002858:	701a      	strb	r2, [r3, #0]
	for(int j = fs.buffer_index ; j < max_index; j++ ){
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	3301      	adds	r3, #1
 800285e:	61bb      	str	r3, [r7, #24]
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	429a      	cmp	r2, r3
 8002866:	dbeb      	blt.n	8002840 <black_box_pack_int+0xd8>
	}
	
	if(index_flag){
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d008      	beq.n	8002880 <black_box_pack_int+0x118>
		fs.buffer_index += len_str;
 800286e:	4b09      	ldr	r3, [pc, #36]	@ (8002894 <black_box_pack_int+0x12c>)
 8002870:	891a      	ldrh	r2, [r3, #8]
 8002872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002874:	b29b      	uxth	r3, r3
 8002876:	4413      	add	r3, r2
 8002878:	b29a      	uxth	r2, r3
 800287a:	4b06      	ldr	r3, [pc, #24]	@ (8002894 <black_box_pack_int+0x12c>)
 800287c:	811a      	strh	r2, [r3, #8]
 800287e:	e006      	b.n	800288e <black_box_pack_int+0x126>
	}
	else{
		fs.buffer_index += MAX_BUFFER_SIZE;
 8002880:	4b04      	ldr	r3, [pc, #16]	@ (8002894 <black_box_pack_int+0x12c>)
 8002882:	891b      	ldrh	r3, [r3, #8]
 8002884:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002888:	b29a      	uxth	r2, r3
 800288a:	4b02      	ldr	r3, [pc, #8]	@ (8002894 <black_box_pack_int+0x12c>)
 800288c:	811a      	strh	r2, [r3, #8]
	}
}
 800288e:	3730      	adds	r7, #48	@ 0x30
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20000198 	.word	0x20000198

08002898 <black_box_pack_str>:


void black_box_pack_str(char *c){
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]

    int i = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 80028a4:	e01c      	b.n	80028e0 <black_box_pack_str+0x48>
        if((fs.buffer_index + i) > MAX_BUFFER_SIZE){
 80028a6:	4b17      	ldr	r3, [pc, #92]	@ (8002904 <black_box_pack_str+0x6c>)
 80028a8:	891b      	ldrh	r3, [r3, #8]
 80028aa:	461a      	mov	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4413      	add	r3, r2
 80028b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028b4:	dd04      	ble.n	80028c0 <black_box_pack_str+0x28>
                fs.buffer_index = MAX_BUFFER_SIZE;
 80028b6:	4b13      	ldr	r3, [pc, #76]	@ (8002904 <black_box_pack_str+0x6c>)
 80028b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028bc:	811a      	strh	r2, [r3, #8]
                return;
 80028be:	e01d      	b.n	80028fc <black_box_pack_str+0x64>
        }
        fs.buffer[fs.buffer_index + i] = c[i];
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	441a      	add	r2, r3
 80028c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002904 <black_box_pack_str+0x6c>)
 80028c8:	891b      	ldrh	r3, [r3, #8]
 80028ca:	4619      	mov	r1, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	440b      	add	r3, r1
 80028d0:	7811      	ldrb	r1, [r2, #0]
 80028d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002904 <black_box_pack_str+0x6c>)
 80028d4:	4413      	add	r3, r2
 80028d6:	460a      	mov	r2, r1
 80028d8:	729a      	strb	r2, [r3, #10]
        i ++;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	3301      	adds	r3, #1
 80028de:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	4413      	add	r3, r2
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1dc      	bne.n	80028a6 <black_box_pack_str+0xe>
    }
    fs.buffer_index += i;
 80028ec:	4b05      	ldr	r3, [pc, #20]	@ (8002904 <black_box_pack_str+0x6c>)
 80028ee:	891a      	ldrh	r2, [r3, #8]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	4b02      	ldr	r3, [pc, #8]	@ (8002904 <black_box_pack_str+0x6c>)
 80028fa:	811a      	strh	r2, [r3, #8]
}
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr
 8002904:	20000198 	.word	0x20000198

08002908 <black_box_pack_char>:

void black_box_pack_char(char c){
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
    fs.buffer[fs.buffer_index ] = c;
 8002912:	4b09      	ldr	r3, [pc, #36]	@ (8002938 <black_box_pack_char+0x30>)
 8002914:	891b      	ldrh	r3, [r3, #8]
 8002916:	461a      	mov	r2, r3
 8002918:	4b07      	ldr	r3, [pc, #28]	@ (8002938 <black_box_pack_char+0x30>)
 800291a:	4413      	add	r3, r2
 800291c:	79fa      	ldrb	r2, [r7, #7]
 800291e:	729a      	strb	r2, [r3, #10]
    fs.buffer_index ++;
 8002920:	4b05      	ldr	r3, [pc, #20]	@ (8002938 <black_box_pack_char+0x30>)
 8002922:	891b      	ldrh	r3, [r3, #8]
 8002924:	3301      	adds	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	4b03      	ldr	r3, [pc, #12]	@ (8002938 <black_box_pack_char+0x30>)
 800292a:	811a      	strh	r2, [r3, #8]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	20000198 	.word	0x20000198

0800293c <black_box_load>:



void black_box_load()
 {
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
	  puts_state = f_puts(fs.buffer,fs.file);
 8002940:	4b0c      	ldr	r3, [pc, #48]	@ (8002974 <black_box_load+0x38>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4619      	mov	r1, r3
 8002946:	480c      	ldr	r0, [pc, #48]	@ (8002978 <black_box_load+0x3c>)
 8002948:	f00f faf7 	bl	8011f3a <f_puts>
 800294c:	4603      	mov	r3, r0
 800294e:	4a0b      	ldr	r2, [pc, #44]	@ (800297c <black_box_load+0x40>)
 8002950:	6013      	str	r3, [r2, #0]
      f_sync(fs.file);
 8002952:	4b08      	ldr	r3, [pc, #32]	@ (8002974 <black_box_load+0x38>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	4618      	mov	r0, r3
 8002958:	f00e ff1a 	bl	8011790 <f_sync>
      memset(fs.buffer,0,MAX_BUFFER_SIZE);
 800295c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002960:	2100      	movs	r1, #0
 8002962:	4805      	ldr	r0, [pc, #20]	@ (8002978 <black_box_load+0x3c>)
 8002964:	f012 fbbc 	bl	80150e0 <memset>
      fs.buffer_index = 0;
 8002968:	4b02      	ldr	r3, [pc, #8]	@ (8002974 <black_box_load+0x38>)
 800296a:	2200      	movs	r2, #0
 800296c:	811a      	strh	r2, [r3, #8]
 }
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000198 	.word	0x20000198
 8002978:	200001a2 	.word	0x200001a2
 800297c:	200003a8 	.word	0x200003a8

08002980 <reverse>:




static void reverse( char *str, int len)
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	3b01      	subs	r3, #1
 8002992:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8002994:	e018      	b.n	80029c8 <reverse+0x48>
        temp = str[i];
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	4413      	add	r3, r2
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	441a      	add	r2, r3
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	440b      	add	r3, r1
 80029ac:	7812      	ldrb	r2, [r2, #0]
 80029ae:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	4413      	add	r3, r2
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	701a      	strb	r2, [r3, #0]
        i++;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	3301      	adds	r3, #1
 80029c0:	617b      	str	r3, [r7, #20]
        j--;
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	3b01      	subs	r3, #1
 80029c6:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	dbe2      	blt.n	8002996 <reverse+0x16>
    }
}
 80029d0:	bf00      	nop
 80029d2:	bf00      	nop
 80029d4:	371c      	adds	r7, #28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <intToStr>:

 static int intToStr(int x,  char *str, int d)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
    while (x) {
 80029e8:	e01f      	b.n	8002a2a <intToStr+0x4e>
        str[fs.indexx++] = (x % 10) + '0';
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002a68 <intToStr+0x8c>)
 80029ee:	fb83 1302 	smull	r1, r3, r3, r2
 80029f2:	1099      	asrs	r1, r3, #2
 80029f4:	17d3      	asrs	r3, r2, #31
 80029f6:	1ac9      	subs	r1, r1, r3
 80029f8:	460b      	mov	r3, r1
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	1ad1      	subs	r1, r2, r3
 8002a02:	b2ca      	uxtb	r2, r1
 8002a04:	4b19      	ldr	r3, [pc, #100]	@ (8002a6c <intToStr+0x90>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	1c59      	adds	r1, r3, #1
 8002a0a:	4818      	ldr	r0, [pc, #96]	@ (8002a6c <intToStr+0x90>)
 8002a0c:	6001      	str	r1, [r0, #0]
 8002a0e:	4619      	mov	r1, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	440b      	add	r3, r1
 8002a14:	3230      	adds	r2, #48	@ 0x30
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4a12      	ldr	r2, [pc, #72]	@ (8002a68 <intToStr+0x8c>)
 8002a1e:	fb82 1203 	smull	r1, r2, r2, r3
 8002a22:	1092      	asrs	r2, r2, #2
 8002a24:	17db      	asrs	r3, r3, #31
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	60fb      	str	r3, [r7, #12]
    while (x) {
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1dc      	bne.n	80029ea <intToStr+0xe>
    }

    while (fs.indexx < d)
 8002a30:	e009      	b.n	8002a46 <intToStr+0x6a>
        str[fs.indexx++] = '0';
 8002a32:	4b0e      	ldr	r3, [pc, #56]	@ (8002a6c <intToStr+0x90>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	490c      	ldr	r1, [pc, #48]	@ (8002a6c <intToStr+0x90>)
 8002a3a:	600a      	str	r2, [r1, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	4413      	add	r3, r2
 8002a42:	2230      	movs	r2, #48	@ 0x30
 8002a44:	701a      	strb	r2, [r3, #0]
    while (fs.indexx < d)
 8002a46:	4b09      	ldr	r3, [pc, #36]	@ (8002a6c <intToStr+0x90>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	dcf0      	bgt.n	8002a32 <intToStr+0x56>
    reverse(str,fs.indexx);
 8002a50:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <intToStr+0x90>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4619      	mov	r1, r3
 8002a56:	68b8      	ldr	r0, [r7, #8]
 8002a58:	f7ff ff92 	bl	8002980 <reverse>
    return fs.indexx;
 8002a5c:	4b03      	ldr	r3, [pc, #12]	@ (8002a6c <intToStr+0x90>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	66666667 	.word	0x66666667
 8002a6c:	20000198 	.word	0x20000198

08002a70 <compassInit>:
int8_t file_open;


/*  Init compass
 */
void compassInit(){
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  calibrate_value.scale_factor_axis[X] = 1.0f;
 8002a74:	4b17      	ldr	r3, [pc, #92]	@ (8002ad4 <compassInit+0x64>)
 8002a76:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002a7a:	60da      	str	r2, [r3, #12]
  calibrate_value.scale_factor_axis[Y] = 1.0f;
 8002a7c:	4b15      	ldr	r3, [pc, #84]	@ (8002ad4 <compassInit+0x64>)
 8002a7e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002a82:	611a      	str	r2, [r3, #16]
  calibrate_value.scale_factor_axis[Z] = 1.0f;
 8002a84:	4b13      	ldr	r3, [pc, #76]	@ (8002ad4 <compassInit+0x64>)
 8002a86:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002a8a:	615a      	str	r2, [r3, #20]

  calibrate_value.hard_iron_calibrate_value[X] = 0;
 8002a8c:	4b11      	ldr	r3, [pc, #68]	@ (8002ad4 <compassInit+0x64>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
  calibrate_value.hard_iron_calibrate_value[Y] = 0;
 8002a92:	4b10      	ldr	r3, [pc, #64]	@ (8002ad4 <compassInit+0x64>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	605a      	str	r2, [r3, #4]
  calibrate_value.hard_iron_calibrate_value[Z] = 0;
 8002a98:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad4 <compassInit+0x64>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
	
  //file_open = black_box_create_file(&calib_file,file_name);
	 
 // epprom init
  AT24Cxx_init(&device_array, 0x00, &hi2c2);
 8002a9e:	4a0e      	ldr	r2, [pc, #56]	@ (8002ad8 <compassInit+0x68>)
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	480e      	ldr	r0, [pc, #56]	@ (8002adc <compassInit+0x6c>)
 8002aa4:	f003 fcd4 	bl	8006450 <AT24Cxx_init>
  AT24Cxx_add_dev(&device_array, 0x01, &hi2c2);
 8002aa8:	4a0b      	ldr	r2, [pc, #44]	@ (8002ad8 <compassInit+0x68>)
 8002aaa:	2101      	movs	r1, #1
 8002aac:	480b      	ldr	r0, [pc, #44]	@ (8002adc <compassInit+0x6c>)
 8002aae:	f003 fd0f 	bl	80064d0 <AT24Cxx_add_dev>

  // init sensor
#ifdef QMC5883
  qmc5883_init(&hi2c1);
 8002ab2:	480b      	ldr	r0, [pc, #44]	@ (8002ae0 <compassInit+0x70>)
 8002ab4:	f7ff fd36 	bl	8002524 <qmc5883_init>
#else
  hmc5883_init(&hi2c2);
#endif
  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){
 8002ab8:	2120      	movs	r1, #32
 8002aba:	480a      	ldr	r0, [pc, #40]	@ (8002ae4 <compassInit+0x74>)
 8002abc:	f005 ff94 	bl	80089e8 <HAL_GPIO_ReadPin>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <compassInit+0x5c>
      compass_calibrate();
 8002ac6:	f000 f8f3 	bl	8002cb0 <compass_calibrate>
  }
  else{
      read_calibrate_file();
  }
}
 8002aca:	e001      	b.n	8002ad0 <compassInit+0x60>
      read_calibrate_file();
 8002acc:	f000 f87c 	bl	8002bc8 <read_calibrate_file>
}
 8002ad0:	bf00      	nop
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	200003d4 	.word	0x200003d4
 8002ad8:	20000898 	.word	0x20000898
 8002adc:	200003b0 	.word	0x200003b0
 8002ae0:	20000844 	.word	0x20000844
 8002ae4:	40010c00 	.word	0x40010c00

08002ae8 <compass_get>:

void compass_get(axis3_t *out){
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
	axis3_t as;
#ifdef QMC5883
         qmc_get_raw(&as);
 8002af0:	f107 0308 	add.w	r3, r7, #8
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff fd41 	bl	800257c <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
    // calibrate ouput
	out->x = (as.x - calibrate_value.hard_iron_calibrate_value[X]);
 8002afa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	4b30      	ldr	r3, [pc, #192]	@ (8002bc4 <compass_get+0xdc>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	b21a      	sxth	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	801a      	strh	r2, [r3, #0]
	out->y = (as.y - calibrate_value.hard_iron_calibrate_value[Y]);
 8002b10:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	4b2b      	ldr	r3, [pc, #172]	@ (8002bc4 <compass_get+0xdc>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	b21a      	sxth	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	805a      	strh	r2, [r3, #2]
	out->z = (as.z - calibrate_value.hard_iron_calibrate_value[Z]);
 8002b26:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	4b25      	ldr	r3, [pc, #148]	@ (8002bc4 <compass_get+0xdc>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	b21a      	sxth	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	809a      	strh	r2, [r3, #4]

    out->x *= calibrate_value.scale_factor_axis[X];
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe f932 	bl	8000dac <__aeabi_i2f>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002bc4 <compass_get+0xdc>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4610      	mov	r0, r2
 8002b52:	f7fe f97f 	bl	8000e54 <__aeabi_fmul>
 8002b56:	4603      	mov	r3, r0
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fe fb57 	bl	800120c <__aeabi_f2iz>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	b21a      	sxth	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	801a      	strh	r2, [r3, #0]
    out->y *= calibrate_value.scale_factor_axis[Y];
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fe f91d 	bl	8000dac <__aeabi_i2f>
 8002b72:	4602      	mov	r2, r0
 8002b74:	4b13      	ldr	r3, [pc, #76]	@ (8002bc4 <compass_get+0xdc>)
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	f7fe f96a 	bl	8000e54 <__aeabi_fmul>
 8002b80:	4603      	mov	r3, r0
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fe fb42 	bl	800120c <__aeabi_f2iz>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	b21a      	sxth	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	805a      	strh	r2, [r3, #2]
    out->z *= calibrate_value.scale_factor_axis[Z];
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe f908 	bl	8000dac <__aeabi_i2f>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	4b09      	ldr	r3, [pc, #36]	@ (8002bc4 <compass_get+0xdc>)
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	f7fe f955 	bl	8000e54 <__aeabi_fmul>
 8002baa:	4603      	mov	r3, r0
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7fe fb2d 	bl	800120c <__aeabi_f2iz>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	b21a      	sxth	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	809a      	strh	r2, [r3, #4]
}
 8002bba:	bf00      	nop
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	200003d4 	.word	0x200003d4

08002bc8 <read_calibrate_file>:

/* read calibrate data from eprrom
 * 
 */

void read_calibrate_file(){
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
	int32_t sum_all = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	607b      	str	r3, [r7, #4]
    AT24Cxx_read_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_value,0x0010,sizeof(cali_mag_t));
 8002bd2:	4b33      	ldr	r3, [pc, #204]	@ (8002ca0 <read_calibrate_file+0xd8>)
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	231c      	movs	r3, #28
 8002bd8:	2210      	movs	r2, #16
 8002bda:	4932      	ldr	r1, [pc, #200]	@ (8002ca4 <read_calibrate_file+0xdc>)
 8002bdc:	f003 fdd1 	bl	8006782 <AT24Cxx_read_byte_buffer>
   	sum_all += calibrate_value.scale_factor_axis[X];
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7fe f8e3 	bl	8000dac <__aeabi_i2f>
 8002be6:	4602      	mov	r2, r0
 8002be8:	4b2e      	ldr	r3, [pc, #184]	@ (8002ca4 <read_calibrate_file+0xdc>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4619      	mov	r1, r3
 8002bee:	4610      	mov	r0, r2
 8002bf0:	f7fe f828 	bl	8000c44 <__addsf3>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fb08 	bl	800120c <__aeabi_f2iz>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Y];
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7fe f8d3 	bl	8000dac <__aeabi_i2f>
 8002c06:	4602      	mov	r2, r0
 8002c08:	4b26      	ldr	r3, [pc, #152]	@ (8002ca4 <read_calibrate_file+0xdc>)
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4610      	mov	r0, r2
 8002c10:	f7fe f818 	bl	8000c44 <__addsf3>
 8002c14:	4603      	mov	r3, r0
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe faf8 	bl	800120c <__aeabi_f2iz>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Z];
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7fe f8c3 	bl	8000dac <__aeabi_i2f>
 8002c26:	4602      	mov	r2, r0
 8002c28:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca4 <read_calibrate_file+0xdc>)
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4610      	mov	r0, r2
 8002c30:	f7fe f808 	bl	8000c44 <__addsf3>
 8002c34:	4603      	mov	r3, r0
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe fae8 	bl	800120c <__aeabi_f2iz>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	607b      	str	r3, [r7, #4]

    sum_all += (int)calibrate_value.hard_iron_calibrate_value[X];
 8002c40:	4b18      	ldr	r3, [pc, #96]	@ (8002ca4 <read_calibrate_file+0xdc>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	4413      	add	r3, r2
 8002c48:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Y];
 8002c4a:	4b16      	ldr	r3, [pc, #88]	@ (8002ca4 <read_calibrate_file+0xdc>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	4413      	add	r3, r2
 8002c52:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Z];
 8002c54:	4b13      	ldr	r3, [pc, #76]	@ (8002ca4 <read_calibrate_file+0xdc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	607b      	str	r3, [r7, #4]

    if(ABS(sum_all - (int)calibrate_value.sum_all_value) > 40){
 8002c5e:	4b11      	ldr	r3, [pc, #68]	@ (8002ca4 <read_calibrate_file+0xdc>)
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	bfb8      	it	lt
 8002c6e:	425b      	neglt	r3, r3
 8002c70:	2b28      	cmp	r3, #40	@ 0x28
 8002c72:	dd11      	ble.n	8002c98 <read_calibrate_file+0xd0>
      while(1){
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002c74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c78:	480b      	ldr	r0, [pc, #44]	@ (8002ca8 <read_calibrate_file+0xe0>)
 8002c7a:	f005 fee4 	bl	8008a46 <HAL_GPIO_TogglePin>
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002c7e:	2120      	movs	r1, #32
 8002c80:	480a      	ldr	r0, [pc, #40]	@ (8002cac <read_calibrate_file+0xe4>)
 8002c82:	f005 fee0 	bl	8008a46 <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8002c86:	2110      	movs	r1, #16
 8002c88:	4808      	ldr	r0, [pc, #32]	@ (8002cac <read_calibrate_file+0xe4>)
 8002c8a:	f005 fedc 	bl	8008a46 <HAL_GPIO_TogglePin>
       HAL_Delay(50); // 10 Hz loop
 8002c8e:	2032      	movs	r0, #50	@ 0x32
 8002c90:	f004 ff8e 	bl	8007bb0 <HAL_Delay>
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002c94:	bf00      	nop
 8002c96:	e7ed      	b.n	8002c74 <read_calibrate_file+0xac>
      }
    }
}
 8002c98:	bf00      	nop
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	200003b0 	.word	0x200003b0
 8002ca4:	200003d4 	.word	0x200003d4
 8002ca8:	40011000 	.word	0x40011000
 8002cac:	40010800 	.word	0x40010800

08002cb0 <compass_calibrate>:


/* Calibrate function
 * write calibrate value to sd card
 */
static void compass_calibrate(){
 8002cb0:	b590      	push	{r4, r7, lr}
 8002cb2:	b095      	sub	sp, #84	@ 0x54
 8002cb4:	af00      	add	r7, sp, #0
    int16_t max_val[] = {-32767,-32767,-32767};
 8002cb6:	4a9f      	ldr	r2, [pc, #636]	@ (8002f34 <compass_calibrate+0x284>)
 8002cb8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002cbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cc0:	6018      	str	r0, [r3, #0]
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	8019      	strh	r1, [r3, #0]
    int16_t min_val[] = {32767, 32767, 32767};
 8002cc6:	4a9c      	ldr	r2, [pc, #624]	@ (8002f38 <compass_calibrate+0x288>)
 8002cc8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002ccc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cd0:	6018      	str	r0, [r3, #0]
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	8019      	strh	r1, [r3, #0]
    uint8_t fist_data = TRUE;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    cali_mag_t calibrate_temp;
    ignore_data = 0;
 8002cdc:	4b97      	ldr	r3, [pc, #604]	@ (8002f3c <compass_calibrate+0x28c>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	801a      	strh	r2, [r3, #0]
    int16_t last_axis[3];
    axis3_t as;

	while(!file_open){
 8002ce2:	e0b5      	b.n	8002e50 <compass_calibrate+0x1a0>
 // read data from sensor
#ifdef QMC5883
         qmc_get_raw(&as);
 8002ce4:	1d3b      	adds	r3, r7, #4
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff fc48 	bl	800257c <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
        if(fist_data){
 8002cec:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00c      	beq.n	8002d0e <compass_calibrate+0x5e>
          last_axis[X] = as.x;
 8002cf4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002cf8:	81bb      	strh	r3, [r7, #12]
          last_axis[Y] = as.y;
 8002cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cfe:	81fb      	strh	r3, [r7, #14]
          last_axis[Z] = as.z;
 8002d00:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002d04:	823b      	strh	r3, [r7, #16]
          fist_data = FALSE;
 8002d06:	2300      	movs	r3, #0
 8002d08:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          continue;
 8002d0c:	e0a0      	b.n	8002e50 <compass_calibrate+0x1a0>
        }
        int16_t delta_x_ = as.x -  last_axis[X];
 8002d0e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        int16_t delta_y_ = as.y -  last_axis[Y];
 8002d22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
        int16_t delta_z_ = as.z -  last_axis[Z];
 8002d36:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        // ignore wrong value and set to zero
        int16_t ckec = sqrt(sq(delta_x_) + sq(delta_y_) + sq(delta_z_));
 8002d4a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002d4e:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	@ 0x4a
 8002d52:	fb03 f202 	mul.w	r2, r3, r2
 8002d56:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 8002d5a:	f9b7 1048 	ldrsh.w	r1, [r7, #72]	@ 0x48
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	441a      	add	r2, r3
 8002d64:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002d68:	f9b7 1046 	ldrsh.w	r1, [r7, #70]	@ 0x46
 8002d6c:	fb01 f303 	mul.w	r3, r1, r3
 8002d70:	4413      	add	r3, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fd fbae 	bl	80004d4 <__aeabi_i2d>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	4619      	mov	r1, r3
 8002d80:	f012 fa00 	bl	8015184 <sqrt>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4610      	mov	r0, r2
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f7fd febc 	bl	8000b08 <__aeabi_d2iz>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
        if(ckec > max_change){
 8002d96:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002d9a:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	dd09      	ble.n	8002db6 <compass_calibrate+0x106>
            fist_data = TRUE; 
 8002da2:	2301      	movs	r3, #1
 8002da4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            ignore_data ++;
 8002da8:	4b64      	ldr	r3, [pc, #400]	@ (8002f3c <compass_calibrate+0x28c>)
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	3301      	adds	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	4b62      	ldr	r3, [pc, #392]	@ (8002f3c <compass_calibrate+0x28c>)
 8002db2:	801a      	strh	r2, [r3, #0]
            continue;
 8002db4:	e04c      	b.n	8002e50 <compass_calibrate+0x1a0>
        }
        last_axis[X] = as.x;
 8002db6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002dba:	81bb      	strh	r3, [r7, #12]
        last_axis[Y] = as.y;
 8002dbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dc0:	81fb      	strh	r3, [r7, #14]
        last_axis[Z] = as.z;
 8002dc2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002dc6:	823b      	strh	r3, [r7, #16]
        // get max value each axis
        if(as.x > max_val[X]) max_val[X] = as.x;
 8002dc8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002dcc:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	dd02      	ble.n	8002dda <compass_calibrate+0x12a>
 8002dd4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002dd8:	873b      	strh	r3, [r7, #56]	@ 0x38
        if(as.y > max_val[Y]) max_val[Y] = as.y;
 8002dda:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002dde:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8002de2:	429a      	cmp	r2, r3
 8002de4:	dd02      	ble.n	8002dec <compass_calibrate+0x13c>
 8002de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dea:	877b      	strh	r3, [r7, #58]	@ 0x3a
        if(as.z > max_val[Z]) max_val[Z] = as.z;
 8002dec:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002df0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8002df4:	429a      	cmp	r2, r3
 8002df6:	dd02      	ble.n	8002dfe <compass_calibrate+0x14e>
 8002df8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002dfc:	87bb      	strh	r3, [r7, #60]	@ 0x3c

        // min value
        if(as.x < min_val[X]) min_val[X] = as.x;
 8002dfe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002e02:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002e06:	429a      	cmp	r2, r3
 8002e08:	da02      	bge.n	8002e10 <compass_calibrate+0x160>
 8002e0a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002e0e:	863b      	strh	r3, [r7, #48]	@ 0x30
        if(as.y < min_val[Y]) min_val[Y] = as.y;
 8002e10:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002e14:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	da02      	bge.n	8002e22 <compass_calibrate+0x172>
 8002e1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e20:	867b      	strh	r3, [r7, #50]	@ 0x32
        if(as.z < min_val[Z]) min_val[Z] = as.z;
 8002e22:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002e26:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	da02      	bge.n	8002e34 <compass_calibrate+0x184>
 8002e2e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002e32:	86bb      	strh	r3, [r7, #52]	@ 0x34
        black_box_pack_str(&calib_file,"\n");
		
		black_box_load(&calib_file);
        black_box_sync(&calib_file);
        */
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8002e34:	2110      	movs	r1, #16
 8002e36:	4842      	ldr	r0, [pc, #264]	@ (8002f40 <compass_calibrate+0x290>)
 8002e38:	f005 fe05 	bl	8008a46 <HAL_GPIO_TogglePin>
        HAL_Delay(20); // 10 Hz loop
 8002e3c:	2014      	movs	r0, #20
 8002e3e:	f004 feb7 	bl	8007bb0 <HAL_Delay>

       if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5) == 0){
 8002e42:	2120      	movs	r1, #32
 8002e44:	483f      	ldr	r0, [pc, #252]	@ (8002f44 <compass_calibrate+0x294>)
 8002e46:	f005 fdcf 	bl	80089e8 <HAL_GPIO_ReadPin>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d006      	beq.n	8002e5e <compass_calibrate+0x1ae>
	while(!file_open){
 8002e50:	4b3d      	ldr	r3, [pc, #244]	@ (8002f48 <compass_calibrate+0x298>)
 8002e52:	f993 3000 	ldrsb.w	r3, [r3]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f43f af44 	beq.w	8002ce4 <compass_calibrate+0x34>
 8002e5c:	e000      	b.n	8002e60 <compass_calibrate+0x1b0>
              break;
 8002e5e:	bf00      	nop
          }
	  }

    // check all min value is negative sign
    if(min_val[X] > 0 || min_val[Y] > 0 || min_val[Z] > 0){
 8002e60:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	dc02      	bgt.n	8002e6e <compass_calibrate+0x1be>
 8002e68:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002e6c:	2b00      	cmp	r3, #0
          // error
    }
    // check all max value is positive sign
    if(max_val[X] < 0 || max_val[Y] < 0 || max_val[Z] < 0){
 8002e6e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	db02      	blt.n	8002e7c <compass_calibrate+0x1cc>
 8002e76:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8002e7a:	2b00      	cmp	r3, #0
          // error
    }
    // calibrate value for each axis
    calibrate_temp.hard_iron_calibrate_value[X] = (int)(max_val[X] + min_val[X])/2;
 8002e7c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8002e80:	461a      	mov	r2, r3
 8002e82:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002e86:	4413      	add	r3, r2
 8002e88:	0fda      	lsrs	r2, r3, #31
 8002e8a:	4413      	add	r3, r2
 8002e8c:	105b      	asrs	r3, r3, #1
 8002e8e:	617b      	str	r3, [r7, #20]
    calibrate_temp.hard_iron_calibrate_value[Y] = (int)(max_val[Y] + min_val[Y])/2;
 8002e90:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8002e94:	461a      	mov	r2, r3
 8002e96:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002e9a:	4413      	add	r3, r2
 8002e9c:	0fda      	lsrs	r2, r3, #31
 8002e9e:	4413      	add	r3, r2
 8002ea0:	105b      	asrs	r3, r3, #1
 8002ea2:	61bb      	str	r3, [r7, #24]
    calibrate_temp.hard_iron_calibrate_value[Z] = (int)(max_val[Z] + min_val[Z])/2;
 8002ea4:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8002eae:	4413      	add	r3, r2
 8002eb0:	0fda      	lsrs	r2, r3, #31
 8002eb2:	4413      	add	r3, r2
 8002eb4:	105b      	asrs	r3, r3, #1
 8002eb6:	61fb      	str	r3, [r7, #28]

    // calculate scale factor for each axis
    int16_t x_ = abs(max_val[X]) + abs(min_val[X]);
 8002eb8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bfb8      	it	lt
 8002ec0:	425b      	neglt	r3, r3
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bfb8      	it	lt
 8002ecc:	425b      	neglt	r3, r3
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    int16_t y_ = abs(max_val[Y]) + abs(min_val[Y]);
 8002ed8:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	bfb8      	it	lt
 8002ee0:	425b      	neglt	r3, r3
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	bfb8      	it	lt
 8002eec:	425b      	neglt	r3, r3
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    int16_t z_ = abs(max_val[Z]) + abs(min_val[Z]);
 8002ef8:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bfb8      	it	lt
 8002f00:	425b      	neglt	r3, r3
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bfb8      	it	lt
 8002f0c:	425b      	neglt	r3, r3
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    // get largest value
    int16_t max_value = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    if(x_ > y_)
 8002f1c:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 8002f20:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8002f24:	429a      	cmp	r2, r3
 8002f26:	dd11      	ble.n	8002f4c <compass_calibrate+0x29c>
        max_value = x_;
 8002f28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002f2c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8002f30:	e010      	b.n	8002f54 <compass_calibrate+0x2a4>
 8002f32:	bf00      	nop
 8002f34:	08015cf8 	.word	0x08015cf8
 8002f38:	08015d00 	.word	0x08015d00
 8002f3c:	200003ac 	.word	0x200003ac
 8002f40:	40010800 	.word	0x40010800
 8002f44:	40010c00 	.word	0x40010c00
 8002f48:	200003f0 	.word	0x200003f0
    else
        max_value = y_;
 8002f4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002f50:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    if(max_value < z_)
 8002f54:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	@ 0x4c
 8002f58:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	da02      	bge.n	8002f66 <compass_calibrate+0x2b6>
        max_value = z_;
 8002f60:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002f62:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

    // caculate scale
    calibrate_temp.scale_factor_axis[X] = (float)x_/max_value;
 8002f66:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fd ff1e 	bl	8000dac <__aeabi_i2f>
 8002f70:	4604      	mov	r4, r0
 8002f72:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fd ff18 	bl	8000dac <__aeabi_i2f>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4620      	mov	r0, r4
 8002f82:	f7fe f81b 	bl	8000fbc <__aeabi_fdiv>
 8002f86:	4603      	mov	r3, r0
 8002f88:	623b      	str	r3, [r7, #32]
    calibrate_temp.scale_factor_axis[Y] = (float)y_/max_value;
 8002f8a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fd ff0c 	bl	8000dac <__aeabi_i2f>
 8002f94:	4604      	mov	r4, r0
 8002f96:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fd ff06 	bl	8000dac <__aeabi_i2f>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	f7fe f809 	bl	8000fbc <__aeabi_fdiv>
 8002faa:	4603      	mov	r3, r0
 8002fac:	627b      	str	r3, [r7, #36]	@ 0x24
    calibrate_temp.scale_factor_axis[Z] = (float)z_/max_value;
 8002fae:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fd fefa 	bl	8000dac <__aeabi_i2f>
 8002fb8:	4604      	mov	r4, r0
 8002fba:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fd fef4 	bl	8000dac <__aeabi_i2f>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4620      	mov	r0, r4
 8002fca:	f7fd fff7 	bl	8000fbc <__aeabi_fdiv>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	62bb      	str	r3, [r7, #40]	@ 0x28

    calibrate_temp.sum_all_value = 0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[X];
 8002fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fd fee7 	bl	8000dac <__aeabi_i2f>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	f7fd fe2d 	bl	8000c44 <__addsf3>
 8002fea:	4603      	mov	r3, r0
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fe f90d 	bl	800120c <__aeabi_f2iz>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Y];
 8002ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fd fed7 	bl	8000dac <__aeabi_i2f>
 8002ffe:	4602      	mov	r2, r0
 8003000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003002:	4619      	mov	r1, r3
 8003004:	4610      	mov	r0, r2
 8003006:	f7fd fe1d 	bl	8000c44 <__addsf3>
 800300a:	4603      	mov	r3, r0
 800300c:	4618      	mov	r0, r3
 800300e:	f7fe f8fd 	bl	800120c <__aeabi_f2iz>
 8003012:	4603      	mov	r3, r0
 8003014:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Z];
 8003016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003018:	4618      	mov	r0, r3
 800301a:	f7fd fec7 	bl	8000dac <__aeabi_i2f>
 800301e:	4602      	mov	r2, r0
 8003020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003022:	4619      	mov	r1, r3
 8003024:	4610      	mov	r0, r2
 8003026:	f7fd fe0d 	bl	8000c44 <__addsf3>
 800302a:	4603      	mov	r3, r0
 800302c:	4618      	mov	r0, r3
 800302e:	f7fe f8ed 	bl	800120c <__aeabi_f2iz>
 8003032:	4603      	mov	r3, r0
 8003034:	62fb      	str	r3, [r7, #44]	@ 0x2c

    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[X];
 8003036:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	4413      	add	r3, r2
 800303c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Y];
 800303e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	4413      	add	r3, r2
 8003044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Z];
 8003046:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	4413      	add	r3, r2
 800304c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // write data to eprrom
    AT24Cxx_write_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_temp, 0x0010, sizeof(cali_mag_t));
 800304e:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <compass_calibrate+0x3c4>)
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	f107 0114 	add.w	r1, r7, #20
 8003056:	231c      	movs	r3, #28
 8003058:	2210      	movs	r2, #16
 800305a:	f003 fa90 	bl	800657e <AT24Cxx_write_byte_buffer>
  
   // black_box_load(&calib_file);
   // black_box_close(&calib_file);
	
	while(1){
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800305e:	2120      	movs	r1, #32
 8003060:	4805      	ldr	r0, [pc, #20]	@ (8003078 <compass_calibrate+0x3c8>)
 8003062:	f005 fcf0 	bl	8008a46 <HAL_GPIO_TogglePin>
      HAL_Delay(1000); // 10 Hz loop
 8003066:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800306a:	f004 fda1 	bl	8007bb0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800306e:	bf00      	nop
 8003070:	e7f5      	b.n	800305e <compass_calibrate+0x3ae>
 8003072:	bf00      	nop
 8003074:	200003b0 	.word	0x200003b0
 8003078:	40010800 	.word	0x40010800

0800307c <gps_init>:

/*  
 * Init function 
 */
void gps_init(UART_HandleTypeDef *uart,uint32_t baudrate)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
	_gpsUartPort = uart;
 8003086:	4a27      	ldr	r2, [pc, #156]	@ (8003124 <gps_init+0xa8>)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6013      	str	r3, [r2, #0]
    _gps.timer_ = millis();
 800308c:	4b26      	ldr	r3, [pc, #152]	@ (8003128 <gps_init+0xac>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003094:	4b25      	ldr	r3, [pc, #148]	@ (800312c <gps_init+0xb0>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4413      	add	r3, r2
 800309a:	4a25      	ldr	r2, [pc, #148]	@ (8003130 <gps_init+0xb4>)
 800309c:	fba2 2303 	umull	r2, r3, r2, r3
 80030a0:	099b      	lsrs	r3, r3, #6
 80030a2:	4a24      	ldr	r2, [pc, #144]	@ (8003134 <gps_init+0xb8>)
 80030a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    // reset all viriables
    _payload_length = 0;
 80030a6:	4b24      	ldr	r3, [pc, #144]	@ (8003138 <gps_init+0xbc>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	801a      	strh	r2, [r3, #0]
    _payload_counter = 0;
 80030ac:	4b23      	ldr	r3, [pc, #140]	@ (800313c <gps_init+0xc0>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	801a      	strh	r2, [r3, #0]
    _msg_id = 0;
 80030b2:	4b23      	ldr	r3, [pc, #140]	@ (8003140 <gps_init+0xc4>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	701a      	strb	r2, [r3, #0]

    // Configuration _gps module
    HAL_UART_Transmit(_gpsUartPort,ubloxInit,sizeof(ubloxInit),1000);
 80030b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003124 <gps_init+0xa8>)
 80030ba:	6818      	ldr	r0, [r3, #0]
 80030bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030c0:	22a8      	movs	r2, #168	@ 0xa8
 80030c2:	4920      	ldr	r1, [pc, #128]	@ (8003144 <gps_init+0xc8>)
 80030c4:	f009 ff08 	bl	800ced8 <HAL_UART_Transmit>
    HAL_Delay(10);
 80030c8:	200a      	movs	r0, #10
 80030ca:	f004 fd71 	bl	8007bb0 <HAL_Delay>
    HAL_UART_Transmit(_gpsUartPort,ubloxSbasInit,sizeof(ubloxSbasInit),1000);
 80030ce:	4b15      	ldr	r3, [pc, #84]	@ (8003124 <gps_init+0xa8>)
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030d6:	2210      	movs	r2, #16
 80030d8:	491b      	ldr	r1, [pc, #108]	@ (8003148 <gps_init+0xcc>)
 80030da:	f009 fefd 	bl	800ced8 <HAL_UART_Transmit>
    HAL_Delay(10);
 80030de:	200a      	movs	r0, #10
 80030e0:	f004 fd66 	bl	8007bb0 <HAL_Delay>
    HAL_UART_Transmit(_gpsUartPort,uart57600,sizeof(uart57600),1000);
 80030e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003124 <gps_init+0xa8>)
 80030e6:	6818      	ldr	r0, [r3, #0]
 80030e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030ec:	221c      	movs	r2, #28
 80030ee:	4917      	ldr	r1, [pc, #92]	@ (800314c <gps_init+0xd0>)
 80030f0:	f009 fef2 	bl	800ced8 <HAL_UART_Transmit>
    HAL_Delay(10);
 80030f4:	200a      	movs	r0, #10
 80030f6:	f004 fd5b 	bl	8007bb0 <HAL_Delay>
    // set baudrate
    _gpsUartPort->Init.BaudRate = baudrate;
 80030fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003124 <gps_init+0xa8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(_gpsUartPort); 
 8003102:	4b08      	ldr	r3, [pc, #32]	@ (8003124 <gps_init+0xa8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f009 fe96 	bl	800ce38 <HAL_UART_Init>

    // read gps using interrup
	HAL_UART_Receive_IT(_gpsUartPort, &_char,ONE_BYTE);
 800310c:	4b05      	ldr	r3, [pc, #20]	@ (8003124 <gps_init+0xa8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2201      	movs	r2, #1
 8003112:	490f      	ldr	r1, [pc, #60]	@ (8003150 <gps_init+0xd4>)
 8003114:	4618      	mov	r0, r3
 8003116:	f009 ff62 	bl	800cfde <HAL_UART_Receive_IT>
}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	2000042c 	.word	0x2000042c
 8003128:	2000059c 	.word	0x2000059c
 800312c:	200005a0 	.word	0x200005a0
 8003130:	10624dd3 	.word	0x10624dd3
 8003134:	200003f4 	.word	0x200003f4
 8003138:	2000043a 	.word	0x2000043a
 800313c:	2000043c 	.word	0x2000043c
 8003140:	20000438 	.word	0x20000438
 8003144:	08015e74 	.word	0x08015e74
 8003148:	20000000 	.word	0x20000000
 800314c:	08015f1c 	.word	0x08015f1c
 8003150:	20000430 	.word	0x20000430

08003154 <gps_uart_port>:

UART_HandleTypeDef *gps_uart_port(){
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
    return _gpsUartPort;
 8003158:	4b02      	ldr	r3, [pc, #8]	@ (8003164 <gps_uart_port+0x10>)
 800315a:	681b      	ldr	r3, [r3, #0]
}
 800315c:	4618      	mov	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr
 8003164:	2000042c 	.word	0x2000042c

08003168 <gps_callback>:
/* 
 * REad gps by using interrup
 */
uint32_t gps_interrupt_count;
void gps_callback()
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
   // parse data
   gps_interrupt_count++;
 800316c:	4b09      	ldr	r3, [pc, #36]	@ (8003194 <gps_callback+0x2c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3301      	adds	r3, #1
 8003172:	4a08      	ldr	r2, [pc, #32]	@ (8003194 <gps_callback+0x2c>)
 8003174:	6013      	str	r3, [r2, #0]
   newdata(_char);
 8003176:	4b08      	ldr	r3, [pc, #32]	@ (8003198 <gps_callback+0x30>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f000 f8f4 	bl	8003368 <newdata>
   HAL_UART_Receive_IT(_gpsUartPort, &_char,ONE_BYTE);
 8003180:	4b06      	ldr	r3, [pc, #24]	@ (800319c <gps_callback+0x34>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2201      	movs	r2, #1
 8003186:	4904      	ldr	r1, [pc, #16]	@ (8003198 <gps_callback+0x30>)
 8003188:	4618      	mov	r0, r3
 800318a:	f009 ff28 	bl	800cfde <HAL_UART_Receive_IT>
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000508 	.word	0x20000508
 8003198:	20000430 	.word	0x20000430
 800319c:	2000042c 	.word	0x2000042c

080031a0 <parse_msg>:
        *ck_a += *data;
        *ck_b += *ck_a;
        data++;
    }
}
static uint8_t parse_msg(){
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
    static uint8_t _new_speed;
    static uint8_t next_fix;
    static uint32_t lastPosUpdateTime;
    static uint8_t _new_position;
    switch (_msg_id) {
 80031a4:	4b66      	ldr	r3, [pc, #408]	@ (8003340 <parse_msg+0x1a0>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b12      	cmp	r3, #18
 80031aa:	dc2b      	bgt.n	8003204 <parse_msg+0x64>
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	f2c0 80ac 	blt.w	800330a <parse_msg+0x16a>
 80031b2:	3b02      	subs	r3, #2
 80031b4:	2b10      	cmp	r3, #16
 80031b6:	f200 80a8 	bhi.w	800330a <parse_msg+0x16a>
 80031ba:	a201      	add	r2, pc, #4	@ (adr r2, 80031c0 <parse_msg+0x20>)
 80031bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c0:	0800320d 	.word	0x0800320d
 80031c4:	0800327f 	.word	0x0800327f
 80031c8:	0800330b 	.word	0x0800330b
 80031cc:	0800330b 	.word	0x0800330b
 80031d0:	080032ab 	.word	0x080032ab
 80031d4:	0800330b 	.word	0x0800330b
 80031d8:	0800330b 	.word	0x0800330b
 80031dc:	0800330b 	.word	0x0800330b
 80031e0:	0800330b 	.word	0x0800330b
 80031e4:	0800330b 	.word	0x0800330b
 80031e8:	0800330b 	.word	0x0800330b
 80031ec:	0800330b 	.word	0x0800330b
 80031f0:	0800330b 	.word	0x0800330b
 80031f4:	0800330b 	.word	0x0800330b
 80031f8:	0800330b 	.word	0x0800330b
 80031fc:	0800330b 	.word	0x0800330b
 8003200:	080032c3 	.word	0x080032c3
 8003204:	2b30      	cmp	r3, #48	@ 0x30
 8003206:	f000 8082 	beq.w	800330e <parse_msg+0x16e>
 800320a:	e07e      	b.n	800330a <parse_msg+0x16a>
        case MSG_POSLLH:
            _gps.position[LON] = _buffer.posllh.longitude;
 800320c:	4b4d      	ldr	r3, [pc, #308]	@ (8003344 <parse_msg+0x1a4>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	4a4d      	ldr	r2, [pc, #308]	@ (8003348 <parse_msg+0x1a8>)
 8003212:	6013      	str	r3, [r2, #0]
            _gps.position[LAT] = _buffer.posllh.latitude;
 8003214:	4b4b      	ldr	r3, [pc, #300]	@ (8003344 <parse_msg+0x1a4>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	4a4b      	ldr	r2, [pc, #300]	@ (8003348 <parse_msg+0x1a8>)
 800321a:	6053      	str	r3, [r2, #4]
            _gps.altitude_msl = _buffer.posllh.altitude_msl;
 800321c:	4b49      	ldr	r3, [pc, #292]	@ (8003344 <parse_msg+0x1a4>)
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	4a49      	ldr	r2, [pc, #292]	@ (8003348 <parse_msg+0x1a8>)
 8003222:	6313      	str	r3, [r2, #48]	@ 0x30
            _gps.horizontalAccuracy = _buffer.posllh.horizontal_accuracy;
 8003224:	4b47      	ldr	r3, [pc, #284]	@ (8003344 <parse_msg+0x1a4>)
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	4a47      	ldr	r2, [pc, #284]	@ (8003348 <parse_msg+0x1a8>)
 800322a:	6213      	str	r3, [r2, #32]
            _gps.VerticalAccuracy = _buffer.posllh.vertical_accuracy;
 800322c:	4b45      	ldr	r3, [pc, #276]	@ (8003344 <parse_msg+0x1a4>)
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	4a45      	ldr	r2, [pc, #276]	@ (8003348 <parse_msg+0x1a8>)
 8003232:	6253      	str	r3, [r2, #36]	@ 0x24
            /* time update position */
            if(lastPosUpdateTime == 0){
 8003234:	4b45      	ldr	r3, [pc, #276]	@ (800334c <parse_msg+0x1ac>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d06a      	beq.n	8003312 <parse_msg+0x172>
                break;
                lastPosUpdateTime = millis();
            }
            _gps.posUpdateTime = millis() - lastPosUpdateTime;
 800323c:	4b44      	ldr	r3, [pc, #272]	@ (8003350 <parse_msg+0x1b0>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003244:	4b43      	ldr	r3, [pc, #268]	@ (8003354 <parse_msg+0x1b4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4413      	add	r3, r2
 800324a:	4a43      	ldr	r2, [pc, #268]	@ (8003358 <parse_msg+0x1b8>)
 800324c:	fba2 2303 	umull	r2, r3, r2, r3
 8003250:	099a      	lsrs	r2, r3, #6
 8003252:	4b3e      	ldr	r3, [pc, #248]	@ (800334c <parse_msg+0x1ac>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	4a3b      	ldr	r2, [pc, #236]	@ (8003348 <parse_msg+0x1a8>)
 800325a:	6293      	str	r3, [r2, #40]	@ 0x28
            lastPosUpdateTime = millis();
 800325c:	4b3c      	ldr	r3, [pc, #240]	@ (8003350 <parse_msg+0x1b0>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003264:	4b3b      	ldr	r3, [pc, #236]	@ (8003354 <parse_msg+0x1b4>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4413      	add	r3, r2
 800326a:	4a3b      	ldr	r2, [pc, #236]	@ (8003358 <parse_msg+0x1b8>)
 800326c:	fba2 2303 	umull	r2, r3, r2, r3
 8003270:	099b      	lsrs	r3, r3, #6
 8003272:	4a36      	ldr	r2, [pc, #216]	@ (800334c <parse_msg+0x1ac>)
 8003274:	6013      	str	r3, [r2, #0]
            /* flag set */
            _new_position = TRUE;
 8003276:	4b39      	ldr	r3, [pc, #228]	@ (800335c <parse_msg+0x1bc>)
 8003278:	2201      	movs	r2, #1
 800327a:	701a      	strb	r2, [r3, #0]
            break;
 800327c:	e04a      	b.n	8003314 <parse_msg+0x174>
        case MSG_STATUS:
            next_fix = (_buffer.status.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.status.fix_type == FIX_3D);
 800327e:	4b31      	ldr	r3, [pc, #196]	@ (8003344 <parse_msg+0x1a4>)
 8003280:	795b      	ldrb	r3, [r3, #5]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <parse_msg+0xf6>
 800328a:	4b2e      	ldr	r3, [pc, #184]	@ (8003344 <parse_msg+0x1a4>)
 800328c:	791b      	ldrb	r3, [r3, #4]
 800328e:	2b03      	cmp	r3, #3
 8003290:	d101      	bne.n	8003296 <parse_msg+0xf6>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <parse_msg+0xf8>
 8003296:	2300      	movs	r3, #0
 8003298:	b2da      	uxtb	r2, r3
 800329a:	4b31      	ldr	r3, [pc, #196]	@ (8003360 <parse_msg+0x1c0>)
 800329c:	701a      	strb	r2, [r3, #0]
            //if (!next_fix)
            //    _gps.fix = FALSE;
            _gps.fix = _buffer.status.fix_type;
 800329e:	4b29      	ldr	r3, [pc, #164]	@ (8003344 <parse_msg+0x1a4>)
 80032a0:	791a      	ldrb	r2, [r3, #4]
 80032a2:	4b29      	ldr	r3, [pc, #164]	@ (8003348 <parse_msg+0x1a8>)
 80032a4:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
            break;
 80032a8:	e034      	b.n	8003314 <parse_msg+0x174>
        case MSG_SOL:
            //next_fix = (_buffer.solution.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.solution.fix_type == FIX_3D);
            //if (!next_fix)
            //    _gps.fix = FALSE;
            _gps.fix = _buffer.solution.fix_type;
 80032aa:	4b26      	ldr	r3, [pc, #152]	@ (8003344 <parse_msg+0x1a4>)
 80032ac:	7a9a      	ldrb	r2, [r3, #10]
 80032ae:	4b26      	ldr	r3, [pc, #152]	@ (8003348 <parse_msg+0x1a8>)
 80032b0:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
            _gps.numSat = _buffer.solution.satellites;
 80032b4:	4b23      	ldr	r3, [pc, #140]	@ (8003344 <parse_msg+0x1a4>)
 80032b6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80032ba:	4b23      	ldr	r3, [pc, #140]	@ (8003348 <parse_msg+0x1a8>)
 80032bc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
            break;
 80032c0:	e028      	b.n	8003314 <parse_msg+0x174>
        case MSG_VELNED:
            _gps.velocity[LAT] = _buffer.velned.ned_north;
 80032c2:	4b20      	ldr	r3, [pc, #128]	@ (8003344 <parse_msg+0x1a4>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4a20      	ldr	r2, [pc, #128]	@ (8003348 <parse_msg+0x1a8>)
 80032c8:	60d3      	str	r3, [r2, #12]
            _gps.velocity[LON] = _buffer.velned.ned_east;
 80032ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003344 <parse_msg+0x1a4>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003348 <parse_msg+0x1a8>)
 80032d0:	6093      	str	r3, [r2, #8]
            _gps.velocity[DOWN] = _buffer.velned.ned_down;
 80032d2:	4b1c      	ldr	r3, [pc, #112]	@ (8003344 <parse_msg+0x1a4>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003348 <parse_msg+0x1a8>)
 80032d8:	6113      	str	r3, [r2, #16]
            _gps.Gspeed = _buffer.velned.speed_2d;
 80032da:	4b1a      	ldr	r3, [pc, #104]	@ (8003344 <parse_msg+0x1a4>)
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	461a      	mov	r2, r3
 80032e0:	4b19      	ldr	r3, [pc, #100]	@ (8003348 <parse_msg+0x1a8>)
 80032e2:	615a      	str	r2, [r3, #20]
            _gps.ground_course = _buffer.velned.heading_2d;
 80032e4:	4b17      	ldr	r3, [pc, #92]	@ (8003344 <parse_msg+0x1a4>)
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	4b17      	ldr	r3, [pc, #92]	@ (8003348 <parse_msg+0x1a8>)
 80032ec:	869a      	strh	r2, [r3, #52]	@ 0x34
            _gps.speedAccuracy = _buffer.velned.speed_accuracy;
 80032ee:	4b15      	ldr	r3, [pc, #84]	@ (8003344 <parse_msg+0x1a4>)
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	461a      	mov	r2, r3
 80032f4:	4b14      	ldr	r3, [pc, #80]	@ (8003348 <parse_msg+0x1a8>)
 80032f6:	619a      	str	r2, [r3, #24]
            _gps.headingAccuracy = _buffer.velned.heading_accuracy;
 80032f8:	4b12      	ldr	r3, [pc, #72]	@ (8003344 <parse_msg+0x1a4>)
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	461a      	mov	r2, r3
 80032fe:	4b12      	ldr	r3, [pc, #72]	@ (8003348 <parse_msg+0x1a8>)
 8003300:	61da      	str	r2, [r3, #28]
            _new_speed = TRUE;
 8003302:	4b18      	ldr	r3, [pc, #96]	@ (8003364 <parse_msg+0x1c4>)
 8003304:	2201      	movs	r2, #1
 8003306:	701a      	strb	r2, [r3, #0]
            break;
 8003308:	e004      	b.n	8003314 <parse_msg+0x174>
            svinfo_rate[0] = svinfo_rate[1];
            svinfo_rate[1] = millis();
            */
            break;
        default:
            return FALSE;
 800330a:	2300      	movs	r3, #0
 800330c:	e014      	b.n	8003338 <parse_msg+0x198>
            break;
 800330e:	bf00      	nop
 8003310:	e000      	b.n	8003314 <parse_msg+0x174>
                break;
 8003312:	bf00      	nop
    }
    if (_new_position && _new_speed) {
 8003314:	4b11      	ldr	r3, [pc, #68]	@ (800335c <parse_msg+0x1bc>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00c      	beq.n	8003336 <parse_msg+0x196>
 800331c:	4b11      	ldr	r3, [pc, #68]	@ (8003364 <parse_msg+0x1c4>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <parse_msg+0x196>
        _new_speed = _new_position = FALSE;
 8003324:	4b0d      	ldr	r3, [pc, #52]	@ (800335c <parse_msg+0x1bc>)
 8003326:	2200      	movs	r2, #0
 8003328:	701a      	strb	r2, [r3, #0]
 800332a:	4b0c      	ldr	r3, [pc, #48]	@ (800335c <parse_msg+0x1bc>)
 800332c:	781a      	ldrb	r2, [r3, #0]
 800332e:	4b0d      	ldr	r3, [pc, #52]	@ (8003364 <parse_msg+0x1c4>)
 8003330:	701a      	strb	r2, [r3, #0]
        return TRUE;
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <parse_msg+0x198>
    }
    return FALSE;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr
 8003340:	20000438 	.word	0x20000438
 8003344:	20000440 	.word	0x20000440
 8003348:	200003f4 	.word	0x200003f4
 800334c:	2000050c 	.word	0x2000050c
 8003350:	2000059c 	.word	0x2000059c
 8003354:	200005a0 	.word	0x200005a0
 8003358:	10624dd3 	.word	0x10624dd3
 800335c:	20000510 	.word	0x20000510
 8003360:	20000511 	.word	0x20000511
 8003364:	20000512 	.word	0x20000512

08003368 <newdata>:

int parse_ok;
static uint8_t newdata(uint8_t data){
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	71fb      	strb	r3, [r7, #7]
    uint8_t parsed = FALSE;
 8003372:	2300      	movs	r3, #0
 8003374:	73fb      	strb	r3, [r7, #15]
    static uint8_t _ck_a;
    static uint8_t _ck_b;
    static uint8_t _step = 0;
    static uint32_t current_time_ms = 0;
    switch (_step) {
 8003376:	4b85      	ldr	r3, [pc, #532]	@ (800358c <newdata+0x224>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b08      	cmp	r3, #8
 800337c:	f200 8100 	bhi.w	8003580 <newdata+0x218>
 8003380:	a201      	add	r2, pc, #4	@ (adr r2, 8003388 <newdata+0x20>)
 8003382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003386:	bf00      	nop
 8003388:	080033ad 	.word	0x080033ad
 800338c:	080033c3 	.word	0x080033c3
 8003390:	080033d7 	.word	0x080033d7
 8003394:	080033f3 	.word	0x080033f3
 8003398:	08003425 	.word	0x08003425
 800339c:	08003459 	.word	0x08003459
 80033a0:	080034b3 	.word	0x080034b3
 80033a4:	0800350b 	.word	0x0800350b
 80033a8:	08003529 	.word	0x08003529
        case 0: // Sync char 1 (0xB5)
            if (PREAMBLE1 == data)
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	2bb5      	cmp	r3, #181	@ 0xb5
 80033b0:	f040 80df 	bne.w	8003572 <newdata+0x20a>
                _step++;
 80033b4:	4b75      	ldr	r3, [pc, #468]	@ (800358c <newdata+0x224>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	3301      	adds	r3, #1
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	4b73      	ldr	r3, [pc, #460]	@ (800358c <newdata+0x224>)
 80033be:	701a      	strb	r2, [r3, #0]
            break;
 80033c0:	e0d7      	b.n	8003572 <newdata+0x20a>
        case 1: // Sync char 2 (0x62)
            if (PREAMBLE2 == data) {
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	2b62      	cmp	r3, #98	@ 0x62
 80033c6:	d106      	bne.n	80033d6 <newdata+0x6e>
                _step++;
 80033c8:	4b70      	ldr	r3, [pc, #448]	@ (800358c <newdata+0x224>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	3301      	adds	r3, #1
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	4b6e      	ldr	r3, [pc, #440]	@ (800358c <newdata+0x224>)
 80033d2:	701a      	strb	r2, [r3, #0]
                break;
 80033d4:	e0d4      	b.n	8003580 <newdata+0x218>
            }
        case 2: // Class
            _step++;
 80033d6:	4b6d      	ldr	r3, [pc, #436]	@ (800358c <newdata+0x224>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	3301      	adds	r3, #1
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	4b6b      	ldr	r3, [pc, #428]	@ (800358c <newdata+0x224>)
 80033e0:	701a      	strb	r2, [r3, #0]
            _ck_b = _ck_a = data;  
 80033e2:	4a6b      	ldr	r2, [pc, #428]	@ (8003590 <newdata+0x228>)
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	7013      	strb	r3, [r2, #0]
 80033e8:	4b69      	ldr	r3, [pc, #420]	@ (8003590 <newdata+0x228>)
 80033ea:	781a      	ldrb	r2, [r3, #0]
 80033ec:	4b69      	ldr	r3, [pc, #420]	@ (8003594 <newdata+0x22c>)
 80033ee:	701a      	strb	r2, [r3, #0]
            break;
 80033f0:	e0c6      	b.n	8003580 <newdata+0x218>
        case 3: // ID
            _step++;
 80033f2:	4b66      	ldr	r3, [pc, #408]	@ (800358c <newdata+0x224>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	3301      	adds	r3, #1
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	4b64      	ldr	r3, [pc, #400]	@ (800358c <newdata+0x224>)
 80033fc:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 80033fe:	4b64      	ldr	r3, [pc, #400]	@ (8003590 <newdata+0x228>)
 8003400:	781a      	ldrb	r2, [r3, #0]
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	4413      	add	r3, r2
 8003406:	b2da      	uxtb	r2, r3
 8003408:	4b61      	ldr	r3, [pc, #388]	@ (8003590 <newdata+0x228>)
 800340a:	701a      	strb	r2, [r3, #0]
 800340c:	4b60      	ldr	r3, [pc, #384]	@ (8003590 <newdata+0x228>)
 800340e:	781a      	ldrb	r2, [r3, #0]
 8003410:	4b60      	ldr	r3, [pc, #384]	@ (8003594 <newdata+0x22c>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	4413      	add	r3, r2
 8003416:	b2da      	uxtb	r2, r3
 8003418:	4b5e      	ldr	r3, [pc, #376]	@ (8003594 <newdata+0x22c>)
 800341a:	701a      	strb	r2, [r3, #0]
            _msg_id = data;
 800341c:	4a5e      	ldr	r2, [pc, #376]	@ (8003598 <newdata+0x230>)
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	7013      	strb	r3, [r2, #0]
            break;
 8003422:	e0ad      	b.n	8003580 <newdata+0x218>
        case 4: 
            _step++;
 8003424:	4b59      	ldr	r3, [pc, #356]	@ (800358c <newdata+0x224>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	3301      	adds	r3, #1
 800342a:	b2da      	uxtb	r2, r3
 800342c:	4b57      	ldr	r3, [pc, #348]	@ (800358c <newdata+0x224>)
 800342e:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 8003430:	4b57      	ldr	r3, [pc, #348]	@ (8003590 <newdata+0x228>)
 8003432:	781a      	ldrb	r2, [r3, #0]
 8003434:	79fb      	ldrb	r3, [r7, #7]
 8003436:	4413      	add	r3, r2
 8003438:	b2da      	uxtb	r2, r3
 800343a:	4b55      	ldr	r3, [pc, #340]	@ (8003590 <newdata+0x228>)
 800343c:	701a      	strb	r2, [r3, #0]
 800343e:	4b54      	ldr	r3, [pc, #336]	@ (8003590 <newdata+0x228>)
 8003440:	781a      	ldrb	r2, [r3, #0]
 8003442:	4b54      	ldr	r3, [pc, #336]	@ (8003594 <newdata+0x22c>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	4413      	add	r3, r2
 8003448:	b2da      	uxtb	r2, r3
 800344a:	4b52      	ldr	r3, [pc, #328]	@ (8003594 <newdata+0x22c>)
 800344c:	701a      	strb	r2, [r3, #0]
            _payload_length = data; 
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	b29a      	uxth	r2, r3
 8003452:	4b52      	ldr	r3, [pc, #328]	@ (800359c <newdata+0x234>)
 8003454:	801a      	strh	r2, [r3, #0]
            break;
 8003456:	e093      	b.n	8003580 <newdata+0x218>
        case 5: 
            _step++;
 8003458:	4b4c      	ldr	r3, [pc, #304]	@ (800358c <newdata+0x224>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	3301      	adds	r3, #1
 800345e:	b2da      	uxtb	r2, r3
 8003460:	4b4a      	ldr	r3, [pc, #296]	@ (800358c <newdata+0x224>)
 8003462:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);      
 8003464:	4b4a      	ldr	r3, [pc, #296]	@ (8003590 <newdata+0x228>)
 8003466:	781a      	ldrb	r2, [r3, #0]
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	4413      	add	r3, r2
 800346c:	b2da      	uxtb	r2, r3
 800346e:	4b48      	ldr	r3, [pc, #288]	@ (8003590 <newdata+0x228>)
 8003470:	701a      	strb	r2, [r3, #0]
 8003472:	4b47      	ldr	r3, [pc, #284]	@ (8003590 <newdata+0x228>)
 8003474:	781a      	ldrb	r2, [r3, #0]
 8003476:	4b47      	ldr	r3, [pc, #284]	@ (8003594 <newdata+0x22c>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	4413      	add	r3, r2
 800347c:	b2da      	uxtb	r2, r3
 800347e:	4b45      	ldr	r3, [pc, #276]	@ (8003594 <newdata+0x22c>)
 8003480:	701a      	strb	r2, [r3, #0]
            _payload_length += (uint16_t)(data << 8);
 8003482:	79fb      	ldrb	r3, [r7, #7]
 8003484:	b29b      	uxth	r3, r3
 8003486:	021b      	lsls	r3, r3, #8
 8003488:	b29a      	uxth	r2, r3
 800348a:	4b44      	ldr	r3, [pc, #272]	@ (800359c <newdata+0x234>)
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	4413      	add	r3, r2
 8003490:	b29a      	uxth	r2, r3
 8003492:	4b42      	ldr	r3, [pc, #264]	@ (800359c <newdata+0x234>)
 8003494:	801a      	strh	r2, [r3, #0]
            if (_payload_length > UBLOX_BUFFER_SIZE) {
 8003496:	4b41      	ldr	r3, [pc, #260]	@ (800359c <newdata+0x234>)
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	2bc8      	cmp	r3, #200	@ 0xc8
 800349c:	d905      	bls.n	80034aa <newdata+0x142>
                _payload_length = 0;
 800349e:	4b3f      	ldr	r3, [pc, #252]	@ (800359c <newdata+0x234>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	801a      	strh	r2, [r3, #0]
                _step = 0;
 80034a4:	4b39      	ldr	r3, [pc, #228]	@ (800358c <newdata+0x224>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]
            }
            _payload_counter = 0;   
 80034aa:	4b3d      	ldr	r3, [pc, #244]	@ (80035a0 <newdata+0x238>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	801a      	strh	r2, [r3, #0]
            break;
 80034b0:	e066      	b.n	8003580 <newdata+0x218>
        case 6:
            _ck_b += (_ck_a += data);     
 80034b2:	4b37      	ldr	r3, [pc, #220]	@ (8003590 <newdata+0x228>)
 80034b4:	781a      	ldrb	r2, [r3, #0]
 80034b6:	79fb      	ldrb	r3, [r7, #7]
 80034b8:	4413      	add	r3, r2
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	4b34      	ldr	r3, [pc, #208]	@ (8003590 <newdata+0x228>)
 80034be:	701a      	strb	r2, [r3, #0]
 80034c0:	4b33      	ldr	r3, [pc, #204]	@ (8003590 <newdata+0x228>)
 80034c2:	781a      	ldrb	r2, [r3, #0]
 80034c4:	4b33      	ldr	r3, [pc, #204]	@ (8003594 <newdata+0x22c>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	4413      	add	r3, r2
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	4b31      	ldr	r3, [pc, #196]	@ (8003594 <newdata+0x22c>)
 80034ce:	701a      	strb	r2, [r3, #0]
            if (_payload_counter < UBLOX_BUFFER_SIZE) {
 80034d0:	4b33      	ldr	r3, [pc, #204]	@ (80035a0 <newdata+0x238>)
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80034d6:	d805      	bhi.n	80034e4 <newdata+0x17c>
                _buffer.bytes[_payload_counter] = data;
 80034d8:	4b31      	ldr	r3, [pc, #196]	@ (80035a0 <newdata+0x238>)
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	4619      	mov	r1, r3
 80034de:	4a31      	ldr	r2, [pc, #196]	@ (80035a4 <newdata+0x23c>)
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	5453      	strb	r3, [r2, r1]
            }
            if (++_payload_counter == _payload_length)
 80034e4:	4b2e      	ldr	r3, [pc, #184]	@ (80035a0 <newdata+0x238>)
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	3301      	adds	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	4b2c      	ldr	r3, [pc, #176]	@ (80035a0 <newdata+0x238>)
 80034ee:	801a      	strh	r2, [r3, #0]
 80034f0:	4b2b      	ldr	r3, [pc, #172]	@ (80035a0 <newdata+0x238>)
 80034f2:	881a      	ldrh	r2, [r3, #0]
 80034f4:	4b29      	ldr	r3, [pc, #164]	@ (800359c <newdata+0x234>)
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d13c      	bne.n	8003576 <newdata+0x20e>
                _step++;
 80034fc:	4b23      	ldr	r3, [pc, #140]	@ (800358c <newdata+0x224>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	3301      	adds	r3, #1
 8003502:	b2da      	uxtb	r2, r3
 8003504:	4b21      	ldr	r3, [pc, #132]	@ (800358c <newdata+0x224>)
 8003506:	701a      	strb	r2, [r3, #0]
            break;
 8003508:	e035      	b.n	8003576 <newdata+0x20e>
        case 7:
            _step++;
 800350a:	4b20      	ldr	r3, [pc, #128]	@ (800358c <newdata+0x224>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	3301      	adds	r3, #1
 8003510:	b2da      	uxtb	r2, r3
 8003512:	4b1e      	ldr	r3, [pc, #120]	@ (800358c <newdata+0x224>)
 8003514:	701a      	strb	r2, [r3, #0]
            if (_ck_a != data)
 8003516:	4b1e      	ldr	r3, [pc, #120]	@ (8003590 <newdata+0x228>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	79fa      	ldrb	r2, [r7, #7]
 800351c:	429a      	cmp	r2, r3
 800351e:	d02c      	beq.n	800357a <newdata+0x212>
                _step = 0;         
 8003520:	4b1a      	ldr	r3, [pc, #104]	@ (800358c <newdata+0x224>)
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
            break;
 8003526:	e028      	b.n	800357a <newdata+0x212>
        case 8:
            _step = 0;
 8003528:	4b18      	ldr	r3, [pc, #96]	@ (800358c <newdata+0x224>)
 800352a:	2200      	movs	r2, #0
 800352c:	701a      	strb	r2, [r3, #0]
            if (_ck_b != data)
 800352e:	4b19      	ldr	r3, [pc, #100]	@ (8003594 <newdata+0x22c>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	79fa      	ldrb	r2, [r7, #7]
 8003534:	429a      	cmp	r2, r3
 8003536:	d122      	bne.n	800357e <newdata+0x216>
                break;   
			 _therad_read_time_ms = micros() - current_time_ms;
 8003538:	4b1b      	ldr	r3, [pc, #108]	@ (80035a8 <newdata+0x240>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003540:	4b1a      	ldr	r3, [pc, #104]	@ (80035ac <newdata+0x244>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	441a      	add	r2, r3
 8003546:	4b1a      	ldr	r3, [pc, #104]	@ (80035b0 <newdata+0x248>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	4a19      	ldr	r2, [pc, #100]	@ (80035b4 <newdata+0x24c>)
 800354e:	6013      	str	r3, [r2, #0]
			 current_time_ms = micros();
 8003550:	4b15      	ldr	r3, [pc, #84]	@ (80035a8 <newdata+0x240>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003558:	4b14      	ldr	r3, [pc, #80]	@ (80035ac <newdata+0x244>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4413      	add	r3, r2
 800355e:	4a14      	ldr	r2, [pc, #80]	@ (80035b0 <newdata+0x248>)
 8003560:	6013      	str	r3, [r2, #0]
            if (parse_msg())
 8003562:	f7ff fe1d 	bl	80031a0 <parse_msg>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d009      	beq.n	8003580 <newdata+0x218>
            {
                parsed = TRUE;
 800356c:	2301      	movs	r3, #1
 800356e:	73fb      	strb	r3, [r7, #15]
 8003570:	e006      	b.n	8003580 <newdata+0x218>
            break;
 8003572:	bf00      	nop
 8003574:	e004      	b.n	8003580 <newdata+0x218>
            break;
 8003576:	bf00      	nop
 8003578:	e002      	b.n	8003580 <newdata+0x218>
            break;
 800357a:	bf00      	nop
 800357c:	e000      	b.n	8003580 <newdata+0x218>
                break;   
 800357e:	bf00      	nop
            }
    } 
    return parsed;
 8003580:	7bfb      	ldrb	r3, [r7, #15]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20000513 	.word	0x20000513
 8003590:	20000514 	.word	0x20000514
 8003594:	20000515 	.word	0x20000515
 8003598:	20000438 	.word	0x20000438
 800359c:	2000043a 	.word	0x2000043a
 80035a0:	2000043c 	.word	0x2000043c
 80035a4:	20000440 	.word	0x20000440
 80035a8:	2000059c 	.word	0x2000059c
 80035ac:	200005a0 	.word	0x200005a0
 80035b0:	20000518 	.word	0x20000518
 80035b4:	20000434 	.word	0x20000434

080035b8 <imu_calibrate>:
  .gyr_lsb = 32.8f
};


static int32_t store_gyro[3];
void imu_calibrate(int16_t *offsx,int16_t *offsy,int16_t *offsz){
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
	axis3_t gyro_;
	integralFBx = 0;
 80035c4:	4b32      	ldr	r3, [pc, #200]	@ (8003690 <imu_calibrate+0xd8>)
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
	integralFBy = 0;
 80035cc:	4b31      	ldr	r3, [pc, #196]	@ (8003694 <imu_calibrate+0xdc>)
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
	integralFBz = 0;
 80035d4:	4b30      	ldr	r3, [pc, #192]	@ (8003698 <imu_calibrate+0xe0>)
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
	for(int i = 0;i < OFFSET_CYCLE; i++){
 80035dc:	2300      	movs	r3, #0
 80035de:	61fb      	str	r3, [r7, #28]
 80035e0:	e01f      	b.n	8003622 <imu_calibrate+0x6a>
		mpu6050_gyro_get_raw(&gyro_);
 80035e2:	f107 0314 	add.w	r3, r7, #20
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fe ff1e 	bl	8002428 <mpu6050_gyro_get_raw>
		store_gyro[X] += gyro_.x;
 80035ec:	4b2b      	ldr	r3, [pc, #172]	@ (800369c <imu_calibrate+0xe4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80035f4:	4413      	add	r3, r2
 80035f6:	4a29      	ldr	r2, [pc, #164]	@ (800369c <imu_calibrate+0xe4>)
 80035f8:	6013      	str	r3, [r2, #0]
    	store_gyro[Y] += gyro_.y;
 80035fa:	4b28      	ldr	r3, [pc, #160]	@ (800369c <imu_calibrate+0xe4>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003602:	4413      	add	r3, r2
 8003604:	4a25      	ldr	r2, [pc, #148]	@ (800369c <imu_calibrate+0xe4>)
 8003606:	6053      	str	r3, [r2, #4]
    	store_gyro[Z] += gyro_.z;
 8003608:	4b24      	ldr	r3, [pc, #144]	@ (800369c <imu_calibrate+0xe4>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003610:	4413      	add	r3, r2
 8003612:	4a22      	ldr	r2, [pc, #136]	@ (800369c <imu_calibrate+0xe4>)
 8003614:	6093      	str	r3, [r2, #8]
		HAL_Delay(1); // delay 1 ms
 8003616:	2001      	movs	r0, #1
 8003618:	f004 faca 	bl	8007bb0 <HAL_Delay>
	for(int i = 0;i < OFFSET_CYCLE; i++){
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	3301      	adds	r3, #1
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003628:	dbdb      	blt.n	80035e2 <imu_calibrate+0x2a>
	}
	*offsx = store_gyro[X] / OFFSET_CYCLE;
 800362a:	4b1c      	ldr	r3, [pc, #112]	@ (800369c <imu_calibrate+0xe4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a1c      	ldr	r2, [pc, #112]	@ (80036a0 <imu_calibrate+0xe8>)
 8003630:	fb82 1203 	smull	r1, r2, r2, r3
 8003634:	1192      	asrs	r2, r2, #6
 8003636:	17db      	asrs	r3, r3, #31
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	b21a      	sxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	801a      	strh	r2, [r3, #0]
	*offsy = store_gyro[Y] / OFFSET_CYCLE;
 8003640:	4b16      	ldr	r3, [pc, #88]	@ (800369c <imu_calibrate+0xe4>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	4a16      	ldr	r2, [pc, #88]	@ (80036a0 <imu_calibrate+0xe8>)
 8003646:	fb82 1203 	smull	r1, r2, r2, r3
 800364a:	1192      	asrs	r2, r2, #6
 800364c:	17db      	asrs	r3, r3, #31
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	b21a      	sxth	r2, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	801a      	strh	r2, [r3, #0]
	*offsz = store_gyro[Z] / OFFSET_CYCLE;
 8003656:	4b11      	ldr	r3, [pc, #68]	@ (800369c <imu_calibrate+0xe4>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	4a11      	ldr	r2, [pc, #68]	@ (80036a0 <imu_calibrate+0xe8>)
 800365c:	fb82 1203 	smull	r1, r2, r2, r3
 8003660:	1192      	asrs	r2, r2, #6
 8003662:	17db      	asrs	r3, r3, #31
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	b21a      	sxth	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	801a      	strh	r2, [r3, #0]
	init_us = millis();
 800366c:	4b0d      	ldr	r3, [pc, #52]	@ (80036a4 <imu_calibrate+0xec>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003674:	4b0c      	ldr	r3, [pc, #48]	@ (80036a8 <imu_calibrate+0xf0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4413      	add	r3, r2
 800367a:	4a09      	ldr	r2, [pc, #36]	@ (80036a0 <imu_calibrate+0xe8>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	099b      	lsrs	r3, r3, #6
 8003682:	4a0a      	ldr	r2, [pc, #40]	@ (80036ac <imu_calibrate+0xf4>)
 8003684:	6013      	str	r3, [r2, #0]
}
 8003686:	bf00      	nop
 8003688:	3720      	adds	r7, #32
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000534 	.word	0x20000534
 8003694:	20000538 	.word	0x20000538
 8003698:	2000053c 	.word	0x2000053c
 800369c:	20000580 	.word	0x20000580
 80036a0:	10624dd3 	.word	0x10624dd3
 80036a4:	2000059c 	.word	0x2000059c
 80036a8:	200005a0 	.word	0x200005a0
 80036ac:	2000057c 	.word	0x2000057c

080036b0 <update_ahrs>:
	m->roll   = atan2_approx(-acc.x, (1/invSqrt_(acc.y * acc.y + acc.z * acc.z)))*180/M_PIf;
}

static int8_t reset_state = 1;
// mahony filter
void update_ahrs(int16_t gx_, int16_t gy_, int16_t gz_, int16_t accx_, int16_t accy_, int16_t accz_,int16_t magx,int16_t magy,int16_t magz,uint32_t micros){
 80036b0:	b5b0      	push	{r4, r5, r7, lr}
 80036b2:	b0a8      	sub	sp, #160	@ 0xa0
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4604      	mov	r4, r0
 80036b8:	4608      	mov	r0, r1
 80036ba:	4611      	mov	r1, r2
 80036bc:	461a      	mov	r2, r3
 80036be:	4623      	mov	r3, r4
 80036c0:	80fb      	strh	r3, [r7, #6]
 80036c2:	4603      	mov	r3, r0
 80036c4:	80bb      	strh	r3, [r7, #4]
 80036c6:	460b      	mov	r3, r1
 80036c8:	807b      	strh	r3, [r7, #2]
 80036ca:	4613      	mov	r3, r2
 80036cc:	803b      	strh	r3, [r7, #0]
    float vx, vy, vz;
    float emz,wx,wy;
    float mx,my,mz,hx,hy,bx,bz;

    static uint32_t last_time_us;
    float dt = (micros - last_time_us)*(1e-6f);
 80036ce:	4bb2      	ldr	r3, [pc, #712]	@ (8003998 <update_ahrs+0x2e8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fd fb63 	bl	8000da4 <__aeabi_ui2f>
 80036de:	4603      	mov	r3, r0
 80036e0:	49ae      	ldr	r1, [pc, #696]	@ (800399c <update_ahrs+0x2ec>)
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fd fbb6 	bl	8000e54 <__aeabi_fmul>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    last_time_us = micros;
 80036ee:	4aaa      	ldr	r2, [pc, #680]	@ (8003998 <update_ahrs+0x2e8>)
 80036f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036f4:	6013      	str	r3, [r2, #0]

	gx = (gx_/config.gyr_lsb) * RAD;
 80036f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fd fb56 	bl	8000dac <__aeabi_i2f>
 8003700:	4602      	mov	r2, r0
 8003702:	4ba7      	ldr	r3, [pc, #668]	@ (80039a0 <update_ahrs+0x2f0>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	4619      	mov	r1, r3
 8003708:	4610      	mov	r0, r2
 800370a:	f7fd fc57 	bl	8000fbc <__aeabi_fdiv>
 800370e:	4603      	mov	r3, r0
 8003710:	49a4      	ldr	r1, [pc, #656]	@ (80039a4 <update_ahrs+0x2f4>)
 8003712:	4618      	mov	r0, r3
 8003714:	f7fd fb9e 	bl	8000e54 <__aeabi_fmul>
 8003718:	4603      	mov	r3, r0
 800371a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	gy = (gy_/config.gyr_lsb) * RAD;
 800371e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003722:	4618      	mov	r0, r3
 8003724:	f7fd fb42 	bl	8000dac <__aeabi_i2f>
 8003728:	4602      	mov	r2, r0
 800372a:	4b9d      	ldr	r3, [pc, #628]	@ (80039a0 <update_ahrs+0x2f0>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	4619      	mov	r1, r3
 8003730:	4610      	mov	r0, r2
 8003732:	f7fd fc43 	bl	8000fbc <__aeabi_fdiv>
 8003736:	4603      	mov	r3, r0
 8003738:	499a      	ldr	r1, [pc, #616]	@ (80039a4 <update_ahrs+0x2f4>)
 800373a:	4618      	mov	r0, r3
 800373c:	f7fd fb8a 	bl	8000e54 <__aeabi_fmul>
 8003740:	4603      	mov	r3, r0
 8003742:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	gz = (gz_/config.gyr_lsb) * RAD;
 8003746:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800374a:	4618      	mov	r0, r3
 800374c:	f7fd fb2e 	bl	8000dac <__aeabi_i2f>
 8003750:	4602      	mov	r2, r0
 8003752:	4b93      	ldr	r3, [pc, #588]	@ (80039a0 <update_ahrs+0x2f0>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	4619      	mov	r1, r3
 8003758:	4610      	mov	r0, r2
 800375a:	f7fd fc2f 	bl	8000fbc <__aeabi_fdiv>
 800375e:	4603      	mov	r3, r0
 8003760:	4990      	ldr	r1, [pc, #576]	@ (80039a4 <update_ahrs+0x2f4>)
 8003762:	4618      	mov	r0, r3
 8003764:	f7fd fb76 	bl	8000e54 <__aeabi_fmul>
 8003768:	4603      	mov	r3, r0
 800376a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	if(!((accx_ == 0) && (accy_ == 0) && ( accz_ == 0))) {
 800376e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d108      	bne.n	8003788 <update_ahrs+0xd8>
 8003776:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d104      	bne.n	8003788 <update_ahrs+0xd8>
 800377e:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 825d 	beq.w	8003c42 <update_ahrs+0x592>
		norm = invSqrt_(accx_ * accx_ + accy_ * accy_ + accz_ * accz_);
 8003788:	f9b7 3000 	ldrsh.w	r3, [r7]
 800378c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003790:	fb03 f202 	mul.w	r2, r3, r2
 8003794:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8003798:	f9b7 10b0 	ldrsh.w	r1, [r7, #176]	@ 0xb0
 800379c:	fb01 f303 	mul.w	r3, r1, r3
 80037a0:	441a      	add	r2, r3
 80037a2:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 80037a6:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	@ 0xb4
 80037aa:	fb01 f303 	mul.w	r3, r1, r3
 80037ae:	4413      	add	r3, r2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fd fafb 	bl	8000dac <__aeabi_i2f>
 80037b6:	4603      	mov	r3, r0
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 ffe3 	bl	8004784 <invSqrt_>
 80037be:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
		acc_x = (float)accx_ * norm;
 80037c2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fd faf0 	bl	8000dac <__aeabi_i2f>
 80037cc:	4603      	mov	r3, r0
 80037ce:	4619      	mov	r1, r3
 80037d0:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80037d4:	f7fd fb3e 	bl	8000e54 <__aeabi_fmul>
 80037d8:	4603      	mov	r3, r0
 80037da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		acc_y = (float)accy_ * norm;
 80037de:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fd fae2 	bl	8000dac <__aeabi_i2f>
 80037e8:	4603      	mov	r3, r0
 80037ea:	4619      	mov	r1, r3
 80037ec:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80037f0:	f7fd fb30 	bl	8000e54 <__aeabi_fmul>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		acc_z = (float)accz_ * norm;
 80037fa:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fd fad4 	bl	8000dac <__aeabi_i2f>
 8003804:	4603      	mov	r3, r0
 8003806:	4619      	mov	r1, r3
 8003808:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800380c:	f7fd fb22 	bl	8000e54 <__aeabi_fmul>
 8003810:	4603      	mov	r3, r0
 8003812:	67fb      	str	r3, [r7, #124]	@ 0x7c

		if(reset_state){
 8003814:	4b64      	ldr	r3, [pc, #400]	@ (80039a8 <update_ahrs+0x2f8>)
 8003816:	f993 3000 	ldrsb.w	r3, [r3]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00d      	beq.n	800383a <update_ahrs+0x18a>
			dcm[0][2] = acc_x;
 800381e:	4a63      	ldr	r2, [pc, #396]	@ (80039ac <update_ahrs+0x2fc>)
 8003820:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003824:	6093      	str	r3, [r2, #8]
			dcm[1][2] = acc_y;
 8003826:	4a61      	ldr	r2, [pc, #388]	@ (80039ac <update_ahrs+0x2fc>)
 8003828:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800382c:	6153      	str	r3, [r2, #20]
			dcm[2][2] = acc_z;
 800382e:	4a5f      	ldr	r2, [pc, #380]	@ (80039ac <update_ahrs+0x2fc>)
 8003830:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003832:	6213      	str	r3, [r2, #32]
			reset_state = 0;
 8003834:	4b5c      	ldr	r3, [pc, #368]	@ (80039a8 <update_ahrs+0x2f8>)
 8003836:	2200      	movs	r2, #0
 8003838:	701a      	strb	r2, [r3, #0]
		}

        if(USE_MAG){
			norm = invSqrt_(magx * magx + magy * magy + magz * magz);
 800383a:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	@ 0xb8
 800383e:	f9b7 20b8 	ldrsh.w	r2, [r7, #184]	@ 0xb8
 8003842:	fb03 f202 	mul.w	r2, r3, r2
 8003846:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 800384a:	f9b7 10bc 	ldrsh.w	r1, [r7, #188]	@ 0xbc
 800384e:	fb01 f303 	mul.w	r3, r1, r3
 8003852:	441a      	add	r2, r3
 8003854:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 8003858:	f9b7 10c0 	ldrsh.w	r1, [r7, #192]	@ 0xc0
 800385c:	fb01 f303 	mul.w	r3, r1, r3
 8003860:	4413      	add	r3, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f7fd faa2 	bl	8000dac <__aeabi_i2f>
 8003868:	4603      	mov	r3, r0
 800386a:	4618      	mov	r0, r3
 800386c:	f000 ff8a 	bl	8004784 <invSqrt_>
 8003870:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
			mx = magx * norm;
 8003874:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	@ 0xb8
 8003878:	4618      	mov	r0, r3
 800387a:	f7fd fa97 	bl	8000dac <__aeabi_i2f>
 800387e:	4603      	mov	r3, r0
 8003880:	4619      	mov	r1, r3
 8003882:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003886:	f7fd fae5 	bl	8000e54 <__aeabi_fmul>
 800388a:	4603      	mov	r3, r0
 800388c:	67bb      	str	r3, [r7, #120]	@ 0x78
			my = magy * norm;
 800388e:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 8003892:	4618      	mov	r0, r3
 8003894:	f7fd fa8a 	bl	8000dac <__aeabi_i2f>
 8003898:	4603      	mov	r3, r0
 800389a:	4619      	mov	r1, r3
 800389c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80038a0:	f7fd fad8 	bl	8000e54 <__aeabi_fmul>
 80038a4:	4603      	mov	r3, r0
 80038a6:	677b      	str	r3, [r7, #116]	@ 0x74
			mz = magz * norm;
 80038a8:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fd fa7d 	bl	8000dac <__aeabi_i2f>
 80038b2:	4603      	mov	r3, r0
 80038b4:	4619      	mov	r1, r3
 80038b6:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80038ba:	f7fd facb 	bl	8000e54 <__aeabi_fmul>
 80038be:	4603      	mov	r3, r0
 80038c0:	673b      	str	r3, [r7, #112]	@ 0x70

			hx = mx * dcm[0][0] + my * dcm[1][0] + mz * dcm[2][0];
 80038c2:	4b3a      	ldr	r3, [pc, #232]	@ (80039ac <update_ahrs+0x2fc>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fd fac3 	bl	8000e54 <__aeabi_fmul>
 80038ce:	4603      	mov	r3, r0
 80038d0:	461c      	mov	r4, r3
 80038d2:	4b36      	ldr	r3, [pc, #216]	@ (80039ac <update_ahrs+0x2fc>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fd fabb 	bl	8000e54 <__aeabi_fmul>
 80038de:	4603      	mov	r3, r0
 80038e0:	4619      	mov	r1, r3
 80038e2:	4620      	mov	r0, r4
 80038e4:	f7fd f9ae 	bl	8000c44 <__addsf3>
 80038e8:	4603      	mov	r3, r0
 80038ea:	461c      	mov	r4, r3
 80038ec:	4b2f      	ldr	r3, [pc, #188]	@ (80039ac <update_ahrs+0x2fc>)
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fd faae 	bl	8000e54 <__aeabi_fmul>
 80038f8:	4603      	mov	r3, r0
 80038fa:	4619      	mov	r1, r3
 80038fc:	4620      	mov	r0, r4
 80038fe:	f7fd f9a1 	bl	8000c44 <__addsf3>
 8003902:	4603      	mov	r3, r0
 8003904:	66fb      	str	r3, [r7, #108]	@ 0x6c
			hy = mx * dcm[0][1] + my * dcm[1][1] + mz * dcm[2][1];
 8003906:	4b29      	ldr	r3, [pc, #164]	@ (80039ac <update_ahrs+0x2fc>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800390c:	4618      	mov	r0, r3
 800390e:	f7fd faa1 	bl	8000e54 <__aeabi_fmul>
 8003912:	4603      	mov	r3, r0
 8003914:	461c      	mov	r4, r3
 8003916:	4b25      	ldr	r3, [pc, #148]	@ (80039ac <update_ahrs+0x2fc>)
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800391c:	4618      	mov	r0, r3
 800391e:	f7fd fa99 	bl	8000e54 <__aeabi_fmul>
 8003922:	4603      	mov	r3, r0
 8003924:	4619      	mov	r1, r3
 8003926:	4620      	mov	r0, r4
 8003928:	f7fd f98c 	bl	8000c44 <__addsf3>
 800392c:	4603      	mov	r3, r0
 800392e:	461c      	mov	r4, r3
 8003930:	4b1e      	ldr	r3, [pc, #120]	@ (80039ac <update_ahrs+0x2fc>)
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8003936:	4618      	mov	r0, r3
 8003938:	f7fd fa8c 	bl	8000e54 <__aeabi_fmul>
 800393c:	4603      	mov	r3, r0
 800393e:	4619      	mov	r1, r3
 8003940:	4620      	mov	r0, r4
 8003942:	f7fd f97f 	bl	8000c44 <__addsf3>
 8003946:	4603      	mov	r3, r0
 8003948:	66bb      	str	r3, [r7, #104]	@ 0x68
			bz = mx * dcm[0][2] + my * dcm[1][2] + mz * dcm[2][2];
 800394a:	4b18      	ldr	r3, [pc, #96]	@ (80039ac <update_ahrs+0x2fc>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8003950:	4618      	mov	r0, r3
 8003952:	f7fd fa7f 	bl	8000e54 <__aeabi_fmul>
 8003956:	4603      	mov	r3, r0
 8003958:	461c      	mov	r4, r3
 800395a:	4b14      	ldr	r3, [pc, #80]	@ (80039ac <update_ahrs+0x2fc>)
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003960:	4618      	mov	r0, r3
 8003962:	f7fd fa77 	bl	8000e54 <__aeabi_fmul>
 8003966:	4603      	mov	r3, r0
 8003968:	4619      	mov	r1, r3
 800396a:	4620      	mov	r0, r4
 800396c:	f7fd f96a 	bl	8000c44 <__addsf3>
 8003970:	4603      	mov	r3, r0
 8003972:	461c      	mov	r4, r3
 8003974:	4b0d      	ldr	r3, [pc, #52]	@ (80039ac <update_ahrs+0x2fc>)
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800397a:	4618      	mov	r0, r3
 800397c:	f7fd fa6a 	bl	8000e54 <__aeabi_fmul>
 8003980:	4603      	mov	r3, r0
 8003982:	4619      	mov	r1, r3
 8003984:	4620      	mov	r0, r4
 8003986:	f7fd f95d 	bl	8000c44 <__addsf3>
 800398a:	4603      	mov	r3, r0
 800398c:	667b      	str	r3, [r7, #100]	@ 0x64

			bx = sqrtf(hx * hx + hy * hy);
 800398e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003990:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003992:	f7fd fa5f 	bl	8000e54 <__aeabi_fmul>
 8003996:	e00b      	b.n	80039b0 <update_ahrs+0x300>
 8003998:	2000058c 	.word	0x2000058c
 800399c:	358637bd 	.word	0x358637bd
 80039a0:	20000018 	.word	0x20000018
 80039a4:	3c8efa35 	.word	0x3c8efa35
 80039a8:	20000024 	.word	0x20000024
 80039ac:	20000558 	.word	0x20000558
 80039b0:	4603      	mov	r3, r0
 80039b2:	461c      	mov	r4, r3
 80039b4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80039b6:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80039b8:	f7fd fa4c 	bl	8000e54 <__aeabi_fmul>
 80039bc:	4603      	mov	r3, r0
 80039be:	4619      	mov	r1, r3
 80039c0:	4620      	mov	r0, r4
 80039c2:	f7fd f93f 	bl	8000c44 <__addsf3>
 80039c6:	4603      	mov	r3, r0
 80039c8:	4618      	mov	r0, r3
 80039ca:	f011 fc4c 	bl	8015266 <sqrtf>
 80039ce:	6638      	str	r0, [r7, #96]	@ 0x60

			wx = bx * dcm[0][0] + bz * dcm[0][2];
 80039d0:	4b75      	ldr	r3, [pc, #468]	@ (8003ba8 <update_ahrs+0x4f8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fd fa3c 	bl	8000e54 <__aeabi_fmul>
 80039dc:	4603      	mov	r3, r0
 80039de:	461c      	mov	r4, r3
 80039e0:	4b71      	ldr	r3, [pc, #452]	@ (8003ba8 <update_ahrs+0x4f8>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fd fa34 	bl	8000e54 <__aeabi_fmul>
 80039ec:	4603      	mov	r3, r0
 80039ee:	4619      	mov	r1, r3
 80039f0:	4620      	mov	r0, r4
 80039f2:	f7fd f927 	bl	8000c44 <__addsf3>
 80039f6:	4603      	mov	r3, r0
 80039f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
			wy = bx * dcm[1][0] + bz * dcm[1][2];
 80039fa:	4b6b      	ldr	r3, [pc, #428]	@ (8003ba8 <update_ahrs+0x4f8>)
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fd fa27 	bl	8000e54 <__aeabi_fmul>
 8003a06:	4603      	mov	r3, r0
 8003a08:	461c      	mov	r4, r3
 8003a0a:	4b67      	ldr	r3, [pc, #412]	@ (8003ba8 <update_ahrs+0x4f8>)
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fd fa1f 	bl	8000e54 <__aeabi_fmul>
 8003a16:	4603      	mov	r3, r0
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	f7fd f912 	bl	8000c44 <__addsf3>
 8003a20:	4603      	mov	r3, r0
 8003a22:	65bb      	str	r3, [r7, #88]	@ 0x58
			emz = mx * wy - my * wx;
 8003a24:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003a26:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8003a28:	f7fd fa14 	bl	8000e54 <__aeabi_fmul>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	461c      	mov	r4, r3
 8003a30:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003a32:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8003a34:	f7fd fa0e 	bl	8000e54 <__aeabi_fmul>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4620      	mov	r0, r4
 8003a3e:	f7fd f8ff 	bl	8000c40 <__aeabi_fsub>
 8003a42:	4603      	mov	r3, r0
 8003a44:	657b      	str	r3, [r7, #84]	@ 0x54
		}
		else{
			emz = 0.0f;
		}

		vx = dcm[0][2];
 8003a46:	4b58      	ldr	r3, [pc, #352]	@ (8003ba8 <update_ahrs+0x4f8>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	653b      	str	r3, [r7, #80]	@ 0x50
		vy = dcm[1][2];
 8003a4c:	4b56      	ldr	r3, [pc, #344]	@ (8003ba8 <update_ahrs+0x4f8>)
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	64fb      	str	r3, [r7, #76]	@ 0x4c
		vz = dcm[2][2];
 8003a52:	4b55      	ldr	r3, [pc, #340]	@ (8003ba8 <update_ahrs+0x4f8>)
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	64bb      	str	r3, [r7, #72]	@ 0x48

		ex = acc_y * vz - acc_z * vy;
 8003a58:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003a5a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003a5e:	f7fd f9f9 	bl	8000e54 <__aeabi_fmul>
 8003a62:	4603      	mov	r3, r0
 8003a64:	461c      	mov	r4, r3
 8003a66:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003a68:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8003a6a:	f7fd f9f3 	bl	8000e54 <__aeabi_fmul>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4619      	mov	r1, r3
 8003a72:	4620      	mov	r0, r4
 8003a74:	f7fd f8e4 	bl	8000c40 <__aeabi_fsub>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	647b      	str	r3, [r7, #68]	@ 0x44
		ey = acc_z * vx - acc_x * vz;
 8003a7c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003a7e:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8003a80:	f7fd f9e8 	bl	8000e54 <__aeabi_fmul>
 8003a84:	4603      	mov	r3, r0
 8003a86:	461c      	mov	r4, r3
 8003a88:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003a8a:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8003a8e:	f7fd f9e1 	bl	8000e54 <__aeabi_fmul>
 8003a92:	4603      	mov	r3, r0
 8003a94:	4619      	mov	r1, r3
 8003a96:	4620      	mov	r0, r4
 8003a98:	f7fd f8d2 	bl	8000c40 <__aeabi_fsub>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	643b      	str	r3, [r7, #64]	@ 0x40
		ez = acc_x * vy - acc_y * vx;
 8003aa0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003aa2:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8003aa6:	f7fd f9d5 	bl	8000e54 <__aeabi_fmul>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	461c      	mov	r4, r3
 8003aae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003ab0:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003ab4:	f7fd f9ce 	bl	8000e54 <__aeabi_fmul>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	4619      	mov	r1, r3
 8003abc:	4620      	mov	r0, r4
 8003abe:	f7fd f8bf 	bl	8000c40 <__aeabi_fsub>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c

		if( Ki_imu  > 0.0f) {
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	f04f 0100 	mov.w	r1, #0
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fd fb7c 	bl	80011cc <__aeabi_fcmpgt>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d06e      	beq.n	8003bb8 <update_ahrs+0x508>
			integralFBx +=  Ki_imu  * ex * dt;
 8003ada:	f04f 0300 	mov.w	r3, #0
 8003ade:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fd f9b7 	bl	8000e54 <__aeabi_fmul>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fd f9b1 	bl	8000e54 <__aeabi_fmul>
 8003af2:	4603      	mov	r3, r0
 8003af4:	461a      	mov	r2, r3
 8003af6:	4b2d      	ldr	r3, [pc, #180]	@ (8003bac <update_ahrs+0x4fc>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4619      	mov	r1, r3
 8003afc:	4610      	mov	r0, r2
 8003afe:	f7fd f8a1 	bl	8000c44 <__addsf3>
 8003b02:	4603      	mov	r3, r0
 8003b04:	461a      	mov	r2, r3
 8003b06:	4b29      	ldr	r3, [pc, #164]	@ (8003bac <update_ahrs+0x4fc>)
 8003b08:	601a      	str	r2, [r3, #0]
			integralFBy +=  Ki_imu  * ey * dt;
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fd f99f 	bl	8000e54 <__aeabi_fmul>
 8003b16:	4603      	mov	r3, r0
 8003b18:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fd f999 	bl	8000e54 <__aeabi_fmul>
 8003b22:	4603      	mov	r3, r0
 8003b24:	461a      	mov	r2, r3
 8003b26:	4b22      	ldr	r3, [pc, #136]	@ (8003bb0 <update_ahrs+0x500>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	f7fd f889 	bl	8000c44 <__addsf3>
 8003b32:	4603      	mov	r3, r0
 8003b34:	461a      	mov	r2, r3
 8003b36:	4b1e      	ldr	r3, [pc, #120]	@ (8003bb0 <update_ahrs+0x500>)
 8003b38:	601a      	str	r2, [r3, #0]
			integralFBz +=  Ki_imu  * ez * dt;
 8003b3a:	f04f 0300 	mov.w	r3, #0
 8003b3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fd f987 	bl	8000e54 <__aeabi_fmul>
 8003b46:	4603      	mov	r3, r0
 8003b48:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fd f981 	bl	8000e54 <__aeabi_fmul>
 8003b52:	4603      	mov	r3, r0
 8003b54:	461a      	mov	r2, r3
 8003b56:	4b17      	ldr	r3, [pc, #92]	@ (8003bb4 <update_ahrs+0x504>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	f7fd f871 	bl	8000c44 <__addsf3>
 8003b62:	4603      	mov	r3, r0
 8003b64:	461a      	mov	r2, r3
 8003b66:	4b13      	ldr	r3, [pc, #76]	@ (8003bb4 <update_ahrs+0x504>)
 8003b68:	601a      	str	r2, [r3, #0]
			gx += integralFBx;
 8003b6a:	4b10      	ldr	r3, [pc, #64]	@ (8003bac <update_ahrs+0x4fc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4619      	mov	r1, r3
 8003b70:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003b74:	f7fd f866 	bl	8000c44 <__addsf3>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
			gy += integralFBy;
 8003b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb0 <update_ahrs+0x500>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4619      	mov	r1, r3
 8003b84:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003b88:	f7fd f85c 	bl	8000c44 <__addsf3>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			gz += integralFBz;
 8003b92:	4b08      	ldr	r3, [pc, #32]	@ (8003bb4 <update_ahrs+0x504>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4619      	mov	r1, r3
 8003b98:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003b9c:	f7fd f852 	bl	8000c44 <__addsf3>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003ba6:	e013      	b.n	8003bd0 <update_ahrs+0x520>
 8003ba8:	20000558 	.word	0x20000558
 8003bac:	20000534 	.word	0x20000534
 8003bb0:	20000538 	.word	0x20000538
 8003bb4:	2000053c 	.word	0x2000053c
		} else {
			integralFBx = 0.0f;
 8003bb8:	4ba4      	ldr	r3, [pc, #656]	@ (8003e4c <update_ahrs+0x79c>)
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8003bc0:	4ba3      	ldr	r3, [pc, #652]	@ (8003e50 <update_ahrs+0x7a0>)
 8003bc2:	f04f 0200 	mov.w	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8003bc8:	4ba2      	ldr	r3, [pc, #648]	@ (8003e54 <update_ahrs+0x7a4>)
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
		}

		gx += Kp_imu * ex;
 8003bd0:	4ba1      	ldr	r3, [pc, #644]	@ (8003e58 <update_ahrs+0x7a8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fd f93c 	bl	8000e54 <__aeabi_fmul>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	4619      	mov	r1, r3
 8003be0:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003be4:	f7fd f82e 	bl	8000c44 <__addsf3>
 8003be8:	4603      	mov	r3, r0
 8003bea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		gy += Kp_imu * ey;
 8003bee:	4b9a      	ldr	r3, [pc, #616]	@ (8003e58 <update_ahrs+0x7a8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fd f92d 	bl	8000e54 <__aeabi_fmul>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003c02:	f7fd f81f 	bl	8000c44 <__addsf3>
 8003c06:	4603      	mov	r3, r0
 8003c08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		gz += Kp_imu * ez + emz * Kp_mag;
 8003c0c:	4b92      	ldr	r3, [pc, #584]	@ (8003e58 <update_ahrs+0x7a8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fd f91e 	bl	8000e54 <__aeabi_fmul>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	461c      	mov	r4, r3
 8003c1c:	4b8f      	ldr	r3, [pc, #572]	@ (8003e5c <update_ahrs+0x7ac>)
 8003c1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fd f917 	bl	8000e54 <__aeabi_fmul>
 8003c26:	4603      	mov	r3, r0
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f7fd f80a 	bl	8000c44 <__addsf3>
 8003c30:	4603      	mov	r3, r0
 8003c32:	4619      	mov	r1, r3
 8003c34:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003c38:	f7fd f804 	bl	8000c44 <__addsf3>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	}

	gx *= (0.5f * dt);
 8003c42:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003c46:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8003c4a:	f7fd f903 	bl	8000e54 <__aeabi_fmul>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	4619      	mov	r1, r3
 8003c52:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003c56:	f7fd f8fd 	bl	8000e54 <__aeabi_fmul>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	gy *= (0.5f * dt);
 8003c60:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003c64:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8003c68:	f7fd f8f4 	bl	8000e54 <__aeabi_fmul>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	4619      	mov	r1, r3
 8003c70:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8003c74:	f7fd f8ee 	bl	8000e54 <__aeabi_fmul>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	gz *= (0.5f * dt);
 8003c7e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003c82:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8003c86:	f7fd f8e5 	bl	8000e54 <__aeabi_fmul>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003c92:	f7fd f8df 	bl	8000e54 <__aeabi_fmul>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	q0 += (-q1 * gx - q2 * gy - q3 * gz);
 8003c9c:	4b70      	ldr	r3, [pc, #448]	@ (8003e60 <update_ahrs+0x7b0>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003ca4:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fd f8d3 	bl	8000e54 <__aeabi_fmul>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	461c      	mov	r4, r3
 8003cb2:	4b6c      	ldr	r3, [pc, #432]	@ (8003e64 <update_ahrs+0x7b4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fd f8ca 	bl	8000e54 <__aeabi_fmul>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	f7fc ffbb 	bl	8000c40 <__aeabi_fsub>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	461c      	mov	r4, r3
 8003cce:	4b66      	ldr	r3, [pc, #408]	@ (8003e68 <update_ahrs+0x7b8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fd f8bc 	bl	8000e54 <__aeabi_fmul>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	4619      	mov	r1, r3
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	f7fc ffad 	bl	8000c40 <__aeabi_fsub>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4b60      	ldr	r3, [pc, #384]	@ (8003e6c <update_ahrs+0x7bc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	f7fc ffa7 	bl	8000c44 <__addsf3>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4b5c      	ldr	r3, [pc, #368]	@ (8003e6c <update_ahrs+0x7bc>)
 8003cfc:	601a      	str	r2, [r3, #0]
	q1 += ( q0 * gx + q2 * gz - q3 * gy);
 8003cfe:	4b5b      	ldr	r3, [pc, #364]	@ (8003e6c <update_ahrs+0x7bc>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fd f8a4 	bl	8000e54 <__aeabi_fmul>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	461c      	mov	r4, r3
 8003d10:	4b54      	ldr	r3, [pc, #336]	@ (8003e64 <update_ahrs+0x7b4>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fd f89b 	bl	8000e54 <__aeabi_fmul>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	4619      	mov	r1, r3
 8003d22:	4620      	mov	r0, r4
 8003d24:	f7fc ff8e 	bl	8000c44 <__addsf3>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	461c      	mov	r4, r3
 8003d2c:	4b4e      	ldr	r3, [pc, #312]	@ (8003e68 <update_ahrs+0x7b8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fd f88d 	bl	8000e54 <__aeabi_fmul>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4620      	mov	r0, r4
 8003d40:	f7fc ff7e 	bl	8000c40 <__aeabi_fsub>
 8003d44:	4603      	mov	r3, r0
 8003d46:	461a      	mov	r2, r3
 8003d48:	4b45      	ldr	r3, [pc, #276]	@ (8003e60 <update_ahrs+0x7b0>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4610      	mov	r0, r2
 8003d50:	f7fc ff78 	bl	8000c44 <__addsf3>
 8003d54:	4603      	mov	r3, r0
 8003d56:	461a      	mov	r2, r3
 8003d58:	4b41      	ldr	r3, [pc, #260]	@ (8003e60 <update_ahrs+0x7b0>)
 8003d5a:	601a      	str	r2, [r3, #0]
	q2 += ( q0 * gy - q1 * gz + q3 * gx);
 8003d5c:	4b43      	ldr	r3, [pc, #268]	@ (8003e6c <update_ahrs+0x7bc>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fd f875 	bl	8000e54 <__aeabi_fmul>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	461c      	mov	r4, r3
 8003d6e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e60 <update_ahrs+0x7b0>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fd f86c 	bl	8000e54 <__aeabi_fmul>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4620      	mov	r0, r4
 8003d82:	f7fc ff5d 	bl	8000c40 <__aeabi_fsub>
 8003d86:	4603      	mov	r3, r0
 8003d88:	461c      	mov	r4, r3
 8003d8a:	4b37      	ldr	r3, [pc, #220]	@ (8003e68 <update_ahrs+0x7b8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fd f85e 	bl	8000e54 <__aeabi_fmul>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4620      	mov	r0, r4
 8003d9e:	f7fc ff51 	bl	8000c44 <__addsf3>
 8003da2:	4603      	mov	r3, r0
 8003da4:	461a      	mov	r2, r3
 8003da6:	4b2f      	ldr	r3, [pc, #188]	@ (8003e64 <update_ahrs+0x7b4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4619      	mov	r1, r3
 8003dac:	4610      	mov	r0, r2
 8003dae:	f7fc ff49 	bl	8000c44 <__addsf3>
 8003db2:	4603      	mov	r3, r0
 8003db4:	461a      	mov	r2, r3
 8003db6:	4b2b      	ldr	r3, [pc, #172]	@ (8003e64 <update_ahrs+0x7b4>)
 8003db8:	601a      	str	r2, [r3, #0]
	q3 += ( q0 * gz + q1 * gy - q2 * gx);
 8003dba:	4b2c      	ldr	r3, [pc, #176]	@ (8003e6c <update_ahrs+0x7bc>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fd f846 	bl	8000e54 <__aeabi_fmul>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	461c      	mov	r4, r3
 8003dcc:	4b24      	ldr	r3, [pc, #144]	@ (8003e60 <update_ahrs+0x7b0>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fd f83d 	bl	8000e54 <__aeabi_fmul>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4620      	mov	r0, r4
 8003de0:	f7fc ff30 	bl	8000c44 <__addsf3>
 8003de4:	4603      	mov	r3, r0
 8003de6:	461c      	mov	r4, r3
 8003de8:	4b1e      	ldr	r3, [pc, #120]	@ (8003e64 <update_ahrs+0x7b4>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fd f82f 	bl	8000e54 <__aeabi_fmul>
 8003df6:	4603      	mov	r3, r0
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	f7fc ff20 	bl	8000c40 <__aeabi_fsub>
 8003e00:	4603      	mov	r3, r0
 8003e02:	461a      	mov	r2, r3
 8003e04:	4b18      	ldr	r3, [pc, #96]	@ (8003e68 <update_ahrs+0x7b8>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	f7fc ff1a 	bl	8000c44 <__addsf3>
 8003e10:	4603      	mov	r3, r0
 8003e12:	461a      	mov	r2, r3
 8003e14:	4b14      	ldr	r3, [pc, #80]	@ (8003e68 <update_ahrs+0x7b8>)
 8003e16:	601a      	str	r2, [r3, #0]

	norm = invSqrt_(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8003e18:	4b14      	ldr	r3, [pc, #80]	@ (8003e6c <update_ahrs+0x7bc>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a13      	ldr	r2, [pc, #76]	@ (8003e6c <update_ahrs+0x7bc>)
 8003e1e:	6812      	ldr	r2, [r2, #0]
 8003e20:	4611      	mov	r1, r2
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fd f816 	bl	8000e54 <__aeabi_fmul>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	461c      	mov	r4, r3
 8003e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e60 <update_ahrs+0x7b0>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a0b      	ldr	r2, [pc, #44]	@ (8003e60 <update_ahrs+0x7b0>)
 8003e32:	6812      	ldr	r2, [r2, #0]
 8003e34:	4611      	mov	r1, r2
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fd f80c 	bl	8000e54 <__aeabi_fmul>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4620      	mov	r0, r4
 8003e42:	f7fc feff 	bl	8000c44 <__addsf3>
 8003e46:	4603      	mov	r3, r0
 8003e48:	461c      	mov	r4, r3
 8003e4a:	e011      	b.n	8003e70 <update_ahrs+0x7c0>
 8003e4c:	20000534 	.word	0x20000534
 8003e50:	20000538 	.word	0x20000538
 8003e54:	2000053c 	.word	0x2000053c
 8003e58:	20000010 	.word	0x20000010
 8003e5c:	40a00000 	.word	0x40a00000
 8003e60:	2000054c 	.word	0x2000054c
 8003e64:	20000550 	.word	0x20000550
 8003e68:	20000554 	.word	0x20000554
 8003e6c:	20000014 	.word	0x20000014
 8003e70:	4b96      	ldr	r3, [pc, #600]	@ (80040cc <update_ahrs+0xa1c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a95      	ldr	r2, [pc, #596]	@ (80040cc <update_ahrs+0xa1c>)
 8003e76:	6812      	ldr	r2, [r2, #0]
 8003e78:	4611      	mov	r1, r2
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fc ffea 	bl	8000e54 <__aeabi_fmul>
 8003e80:	4603      	mov	r3, r0
 8003e82:	4619      	mov	r1, r3
 8003e84:	4620      	mov	r0, r4
 8003e86:	f7fc fedd 	bl	8000c44 <__addsf3>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	461c      	mov	r4, r3
 8003e8e:	4b90      	ldr	r3, [pc, #576]	@ (80040d0 <update_ahrs+0xa20>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a8f      	ldr	r2, [pc, #572]	@ (80040d0 <update_ahrs+0xa20>)
 8003e94:	6812      	ldr	r2, [r2, #0]
 8003e96:	4611      	mov	r1, r2
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fc ffdb 	bl	8000e54 <__aeabi_fmul>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	f7fc fece 	bl	8000c44 <__addsf3>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fc6a 	bl	8004784 <invSqrt_>
 8003eb0:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	q0 *= norm;
 8003eb4:	4b87      	ldr	r3, [pc, #540]	@ (80040d4 <update_ahrs+0xa24>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fc ffc9 	bl	8000e54 <__aeabi_fmul>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4b83      	ldr	r3, [pc, #524]	@ (80040d4 <update_ahrs+0xa24>)
 8003ec8:	601a      	str	r2, [r3, #0]
	q1 *= norm;
 8003eca:	4b83      	ldr	r3, [pc, #524]	@ (80040d8 <update_ahrs+0xa28>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fc ffbe 	bl	8000e54 <__aeabi_fmul>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	461a      	mov	r2, r3
 8003edc:	4b7e      	ldr	r3, [pc, #504]	@ (80040d8 <update_ahrs+0xa28>)
 8003ede:	601a      	str	r2, [r3, #0]
	q2 *= norm;
 8003ee0:	4b7a      	ldr	r3, [pc, #488]	@ (80040cc <update_ahrs+0xa1c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fc ffb3 	bl	8000e54 <__aeabi_fmul>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4b76      	ldr	r3, [pc, #472]	@ (80040cc <update_ahrs+0xa1c>)
 8003ef4:	601a      	str	r2, [r3, #0]
	q3 *= norm;
 8003ef6:	4b76      	ldr	r3, [pc, #472]	@ (80040d0 <update_ahrs+0xa20>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fc ffa8 	bl	8000e54 <__aeabi_fmul>
 8003f04:	4603      	mov	r3, r0
 8003f06:	461a      	mov	r2, r3
 8003f08:	4b71      	ldr	r3, [pc, #452]	@ (80040d0 <update_ahrs+0xa20>)
 8003f0a:	601a      	str	r2, [r3, #0]
	
	float q0q1 = q0*q1;
 8003f0c:	4b71      	ldr	r3, [pc, #452]	@ (80040d4 <update_ahrs+0xa24>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a71      	ldr	r2, [pc, #452]	@ (80040d8 <update_ahrs+0xa28>)
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	4611      	mov	r1, r2
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fc ff9c 	bl	8000e54 <__aeabi_fmul>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
	float q0q2 = q0*q2;
 8003f20:	4b6c      	ldr	r3, [pc, #432]	@ (80040d4 <update_ahrs+0xa24>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a69      	ldr	r2, [pc, #420]	@ (80040cc <update_ahrs+0xa1c>)
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	4611      	mov	r1, r2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fc ff92 	bl	8000e54 <__aeabi_fmul>
 8003f30:	4603      	mov	r3, r0
 8003f32:	637b      	str	r3, [r7, #52]	@ 0x34
	float q0q3 = q0*q3;
 8003f34:	4b67      	ldr	r3, [pc, #412]	@ (80040d4 <update_ahrs+0xa24>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a65      	ldr	r2, [pc, #404]	@ (80040d0 <update_ahrs+0xa20>)
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fc ff88 	bl	8000e54 <__aeabi_fmul>
 8003f44:	4603      	mov	r3, r0
 8003f46:	633b      	str	r3, [r7, #48]	@ 0x30
	float q1q1 = q1*q1;
 8003f48:	4b63      	ldr	r3, [pc, #396]	@ (80040d8 <update_ahrs+0xa28>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a62      	ldr	r2, [pc, #392]	@ (80040d8 <update_ahrs+0xa28>)
 8003f4e:	6812      	ldr	r2, [r2, #0]
 8003f50:	4611      	mov	r1, r2
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fc ff7e 	bl	8000e54 <__aeabi_fmul>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float q1q2 = q1*q2;
 8003f5c:	4b5e      	ldr	r3, [pc, #376]	@ (80040d8 <update_ahrs+0xa28>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a5a      	ldr	r2, [pc, #360]	@ (80040cc <update_ahrs+0xa1c>)
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	4611      	mov	r1, r2
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fc ff74 	bl	8000e54 <__aeabi_fmul>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
	float q1q3 = q1*q3;
 8003f70:	4b59      	ldr	r3, [pc, #356]	@ (80040d8 <update_ahrs+0xa28>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a56      	ldr	r2, [pc, #344]	@ (80040d0 <update_ahrs+0xa20>)
 8003f76:	6812      	ldr	r2, [r2, #0]
 8003f78:	4611      	mov	r1, r2
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fc ff6a 	bl	8000e54 <__aeabi_fmul>
 8003f80:	4603      	mov	r3, r0
 8003f82:	627b      	str	r3, [r7, #36]	@ 0x24
	float q2q2 = q2*q2;
 8003f84:	4b51      	ldr	r3, [pc, #324]	@ (80040cc <update_ahrs+0xa1c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a50      	ldr	r2, [pc, #320]	@ (80040cc <update_ahrs+0xa1c>)
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	4611      	mov	r1, r2
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fc ff60 	bl	8000e54 <__aeabi_fmul>
 8003f94:	4603      	mov	r3, r0
 8003f96:	623b      	str	r3, [r7, #32]
	float q2q3 = q2*q3;
 8003f98:	4b4c      	ldr	r3, [pc, #304]	@ (80040cc <update_ahrs+0xa1c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a4c      	ldr	r2, [pc, #304]	@ (80040d0 <update_ahrs+0xa20>)
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fc ff56 	bl	8000e54 <__aeabi_fmul>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	61fb      	str	r3, [r7, #28]
	float q3q3 = q3*q3;
 8003fac:	4b48      	ldr	r3, [pc, #288]	@ (80040d0 <update_ahrs+0xa20>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a47      	ldr	r2, [pc, #284]	@ (80040d0 <update_ahrs+0xa20>)
 8003fb2:	6812      	ldr	r2, [r2, #0]
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fc ff4c 	bl	8000e54 <__aeabi_fmul>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	61bb      	str	r3, [r7, #24]

	// Quaternion to Rotation matrix
	dcm[0][0] = 2.0f*(0.5f - q2q2  - q3q3);
 8003fc0:	6a39      	ldr	r1, [r7, #32]
 8003fc2:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8003fc6:	f7fc fe3b 	bl	8000c40 <__aeabi_fsub>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	69b9      	ldr	r1, [r7, #24]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fc fe36 	bl	8000c40 <__aeabi_fsub>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fc fe33 	bl	8000c44 <__addsf3>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	4b3e      	ldr	r3, [pc, #248]	@ (80040dc <update_ahrs+0xa2c>)
 8003fe4:	601a      	str	r2, [r3, #0]
	dcm[1][0] = 2.0f*(q1q2 - q0q3);
 8003fe6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fe8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fea:	f7fc fe29 	bl	8000c40 <__aeabi_fsub>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fc fe26 	bl	8000c44 <__addsf3>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	4b37      	ldr	r3, [pc, #220]	@ (80040dc <update_ahrs+0xa2c>)
 8003ffe:	60da      	str	r2, [r3, #12]
	dcm[2][0] = 2.0f*(q1q3 + q0q2);
 8004000:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004002:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004004:	f7fc fe1e 	bl	8000c44 <__addsf3>
 8004008:	4603      	mov	r3, r0
 800400a:	4619      	mov	r1, r3
 800400c:	4618      	mov	r0, r3
 800400e:	f7fc fe19 	bl	8000c44 <__addsf3>
 8004012:	4603      	mov	r3, r0
 8004014:	461a      	mov	r2, r3
 8004016:	4b31      	ldr	r3, [pc, #196]	@ (80040dc <update_ahrs+0xa2c>)
 8004018:	619a      	str	r2, [r3, #24]
	dcm[0][1] = 2.0f*(q1q2 + q0q3);
 800401a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800401c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800401e:	f7fc fe11 	bl	8000c44 <__addsf3>
 8004022:	4603      	mov	r3, r0
 8004024:	4619      	mov	r1, r3
 8004026:	4618      	mov	r0, r3
 8004028:	f7fc fe0c 	bl	8000c44 <__addsf3>
 800402c:	4603      	mov	r3, r0
 800402e:	461a      	mov	r2, r3
 8004030:	4b2a      	ldr	r3, [pc, #168]	@ (80040dc <update_ahrs+0xa2c>)
 8004032:	605a      	str	r2, [r3, #4]
	dcm[1][1] = 2.0f*(0.5f - q1q1 - q3q3);
 8004034:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004036:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 800403a:	f7fc fe01 	bl	8000c40 <__aeabi_fsub>
 800403e:	4603      	mov	r3, r0
 8004040:	69b9      	ldr	r1, [r7, #24]
 8004042:	4618      	mov	r0, r3
 8004044:	f7fc fdfc 	bl	8000c40 <__aeabi_fsub>
 8004048:	4603      	mov	r3, r0
 800404a:	4619      	mov	r1, r3
 800404c:	4618      	mov	r0, r3
 800404e:	f7fc fdf9 	bl	8000c44 <__addsf3>
 8004052:	4603      	mov	r3, r0
 8004054:	461a      	mov	r2, r3
 8004056:	4b21      	ldr	r3, [pc, #132]	@ (80040dc <update_ahrs+0xa2c>)
 8004058:	611a      	str	r2, [r3, #16]
	dcm[2][1] = 2.0f*(q2q3 - q0q1);
 800405a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800405c:	69f8      	ldr	r0, [r7, #28]
 800405e:	f7fc fdef 	bl	8000c40 <__aeabi_fsub>
 8004062:	4603      	mov	r3, r0
 8004064:	4619      	mov	r1, r3
 8004066:	4618      	mov	r0, r3
 8004068:	f7fc fdec 	bl	8000c44 <__addsf3>
 800406c:	4603      	mov	r3, r0
 800406e:	461a      	mov	r2, r3
 8004070:	4b1a      	ldr	r3, [pc, #104]	@ (80040dc <update_ahrs+0xa2c>)
 8004072:	61da      	str	r2, [r3, #28]
	dcm[0][2] = 2.0f*(q1q3 - q0q2);
 8004074:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004076:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004078:	f7fc fde2 	bl	8000c40 <__aeabi_fsub>
 800407c:	4603      	mov	r3, r0
 800407e:	4619      	mov	r1, r3
 8004080:	4618      	mov	r0, r3
 8004082:	f7fc fddf 	bl	8000c44 <__addsf3>
 8004086:	4603      	mov	r3, r0
 8004088:	461a      	mov	r2, r3
 800408a:	4b14      	ldr	r3, [pc, #80]	@ (80040dc <update_ahrs+0xa2c>)
 800408c:	609a      	str	r2, [r3, #8]
	dcm[1][2] = 2.0f*(q2q3 + q0q1);
 800408e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004090:	69f8      	ldr	r0, [r7, #28]
 8004092:	f7fc fdd7 	bl	8000c44 <__addsf3>
 8004096:	4603      	mov	r3, r0
 8004098:	4619      	mov	r1, r3
 800409a:	4618      	mov	r0, r3
 800409c:	f7fc fdd2 	bl	8000c44 <__addsf3>
 80040a0:	4603      	mov	r3, r0
 80040a2:	461a      	mov	r2, r3
 80040a4:	4b0d      	ldr	r3, [pc, #52]	@ (80040dc <update_ahrs+0xa2c>)
 80040a6:	615a      	str	r2, [r3, #20]
	dcm[2][2] = 2.0f*(0.5f - q1q1 - q2q2);
 80040a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040aa:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 80040ae:	f7fc fdc7 	bl	8000c40 <__aeabi_fsub>
 80040b2:	4603      	mov	r3, r0
 80040b4:	6a39      	ldr	r1, [r7, #32]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fc fdc2 	bl	8000c40 <__aeabi_fsub>
 80040bc:	4603      	mov	r3, r0
 80040be:	4619      	mov	r1, r3
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fc fdbf 	bl	8000c44 <__addsf3>
 80040c6:	4603      	mov	r3, r0
 80040c8:	461a      	mov	r2, r3
 80040ca:	e009      	b.n	80040e0 <update_ahrs+0xa30>
 80040cc:	20000550 	.word	0x20000550
 80040d0:	20000554 	.word	0x20000554
 80040d4:	20000014 	.word	0x20000014
 80040d8:	2000054c 	.word	0x2000054c
 80040dc:	20000558 	.word	0x20000558
 80040e0:	4ba3      	ldr	r3, [pc, #652]	@ (8004370 <update_ahrs+0xcc0>)
 80040e2:	621a      	str	r2, [r3, #32]
	
    // Rotate acceleration from Body frame to earth frame
	int16_t acc_Eframex = dcm[0][0]*accx_ + dcm[1][0]*accy_ + dcm[2][0]*accz_;
 80040e4:	4ba2      	ldr	r3, [pc, #648]	@ (8004370 <update_ahrs+0xcc0>)
 80040e6:	681c      	ldr	r4, [r3, #0]
 80040e8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7fc fe5d 	bl	8000dac <__aeabi_i2f>
 80040f2:	4603      	mov	r3, r0
 80040f4:	4619      	mov	r1, r3
 80040f6:	4620      	mov	r0, r4
 80040f8:	f7fc feac 	bl	8000e54 <__aeabi_fmul>
 80040fc:	4603      	mov	r3, r0
 80040fe:	461d      	mov	r5, r3
 8004100:	4b9b      	ldr	r3, [pc, #620]	@ (8004370 <update_ahrs+0xcc0>)
 8004102:	68dc      	ldr	r4, [r3, #12]
 8004104:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8004108:	4618      	mov	r0, r3
 800410a:	f7fc fe4f 	bl	8000dac <__aeabi_i2f>
 800410e:	4603      	mov	r3, r0
 8004110:	4619      	mov	r1, r3
 8004112:	4620      	mov	r0, r4
 8004114:	f7fc fe9e 	bl	8000e54 <__aeabi_fmul>
 8004118:	4603      	mov	r3, r0
 800411a:	4619      	mov	r1, r3
 800411c:	4628      	mov	r0, r5
 800411e:	f7fc fd91 	bl	8000c44 <__addsf3>
 8004122:	4603      	mov	r3, r0
 8004124:	461d      	mov	r5, r3
 8004126:	4b92      	ldr	r3, [pc, #584]	@ (8004370 <update_ahrs+0xcc0>)
 8004128:	699c      	ldr	r4, [r3, #24]
 800412a:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 800412e:	4618      	mov	r0, r3
 8004130:	f7fc fe3c 	bl	8000dac <__aeabi_i2f>
 8004134:	4603      	mov	r3, r0
 8004136:	4619      	mov	r1, r3
 8004138:	4620      	mov	r0, r4
 800413a:	f7fc fe8b 	bl	8000e54 <__aeabi_fmul>
 800413e:	4603      	mov	r3, r0
 8004140:	4619      	mov	r1, r3
 8004142:	4628      	mov	r0, r5
 8004144:	f7fc fd7e 	bl	8000c44 <__addsf3>
 8004148:	4603      	mov	r3, r0
 800414a:	4618      	mov	r0, r3
 800414c:	f7fd f85e 	bl	800120c <__aeabi_f2iz>
 8004150:	4603      	mov	r3, r0
 8004152:	82fb      	strh	r3, [r7, #22]
	int16_t acc_Eframey = dcm[0][1]*accx_ + dcm[1][1]*accy_ + dcm[2][1]*accz_;
 8004154:	4b86      	ldr	r3, [pc, #536]	@ (8004370 <update_ahrs+0xcc0>)
 8004156:	685c      	ldr	r4, [r3, #4]
 8004158:	f9b7 3000 	ldrsh.w	r3, [r7]
 800415c:	4618      	mov	r0, r3
 800415e:	f7fc fe25 	bl	8000dac <__aeabi_i2f>
 8004162:	4603      	mov	r3, r0
 8004164:	4619      	mov	r1, r3
 8004166:	4620      	mov	r0, r4
 8004168:	f7fc fe74 	bl	8000e54 <__aeabi_fmul>
 800416c:	4603      	mov	r3, r0
 800416e:	461d      	mov	r5, r3
 8004170:	4b7f      	ldr	r3, [pc, #508]	@ (8004370 <update_ahrs+0xcc0>)
 8004172:	691c      	ldr	r4, [r3, #16]
 8004174:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8004178:	4618      	mov	r0, r3
 800417a:	f7fc fe17 	bl	8000dac <__aeabi_i2f>
 800417e:	4603      	mov	r3, r0
 8004180:	4619      	mov	r1, r3
 8004182:	4620      	mov	r0, r4
 8004184:	f7fc fe66 	bl	8000e54 <__aeabi_fmul>
 8004188:	4603      	mov	r3, r0
 800418a:	4619      	mov	r1, r3
 800418c:	4628      	mov	r0, r5
 800418e:	f7fc fd59 	bl	8000c44 <__addsf3>
 8004192:	4603      	mov	r3, r0
 8004194:	461d      	mov	r5, r3
 8004196:	4b76      	ldr	r3, [pc, #472]	@ (8004370 <update_ahrs+0xcc0>)
 8004198:	69dc      	ldr	r4, [r3, #28]
 800419a:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fc fe04 	bl	8000dac <__aeabi_i2f>
 80041a4:	4603      	mov	r3, r0
 80041a6:	4619      	mov	r1, r3
 80041a8:	4620      	mov	r0, r4
 80041aa:	f7fc fe53 	bl	8000e54 <__aeabi_fmul>
 80041ae:	4603      	mov	r3, r0
 80041b0:	4619      	mov	r1, r3
 80041b2:	4628      	mov	r0, r5
 80041b4:	f7fc fd46 	bl	8000c44 <__addsf3>
 80041b8:	4603      	mov	r3, r0
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fd f826 	bl	800120c <__aeabi_f2iz>
 80041c0:	4603      	mov	r3, r0
 80041c2:	82bb      	strh	r3, [r7, #20]
	int16_t acc_Eframez = dcm[0][2]*accx_ + dcm[1][2]*accy_ + dcm[2][2]*accz_;
 80041c4:	4b6a      	ldr	r3, [pc, #424]	@ (8004370 <update_ahrs+0xcc0>)
 80041c6:	689c      	ldr	r4, [r3, #8]
 80041c8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fc fded 	bl	8000dac <__aeabi_i2f>
 80041d2:	4603      	mov	r3, r0
 80041d4:	4619      	mov	r1, r3
 80041d6:	4620      	mov	r0, r4
 80041d8:	f7fc fe3c 	bl	8000e54 <__aeabi_fmul>
 80041dc:	4603      	mov	r3, r0
 80041de:	461d      	mov	r5, r3
 80041e0:	4b63      	ldr	r3, [pc, #396]	@ (8004370 <update_ahrs+0xcc0>)
 80041e2:	695c      	ldr	r4, [r3, #20]
 80041e4:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fc fddf 	bl	8000dac <__aeabi_i2f>
 80041ee:	4603      	mov	r3, r0
 80041f0:	4619      	mov	r1, r3
 80041f2:	4620      	mov	r0, r4
 80041f4:	f7fc fe2e 	bl	8000e54 <__aeabi_fmul>
 80041f8:	4603      	mov	r3, r0
 80041fa:	4619      	mov	r1, r3
 80041fc:	4628      	mov	r0, r5
 80041fe:	f7fc fd21 	bl	8000c44 <__addsf3>
 8004202:	4603      	mov	r3, r0
 8004204:	461d      	mov	r5, r3
 8004206:	4b5a      	ldr	r3, [pc, #360]	@ (8004370 <update_ahrs+0xcc0>)
 8004208:	6a1c      	ldr	r4, [r3, #32]
 800420a:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 800420e:	4618      	mov	r0, r3
 8004210:	f7fc fdcc 	bl	8000dac <__aeabi_i2f>
 8004214:	4603      	mov	r3, r0
 8004216:	4619      	mov	r1, r3
 8004218:	4620      	mov	r0, r4
 800421a:	f7fc fe1b 	bl	8000e54 <__aeabi_fmul>
 800421e:	4603      	mov	r3, r0
 8004220:	4619      	mov	r1, r3
 8004222:	4628      	mov	r0, r5
 8004224:	f7fc fd0e 	bl	8000c44 <__addsf3>
 8004228:	4603      	mov	r3, r0
 800422a:	4618      	mov	r0, r3
 800422c:	f7fc ffee 	bl	800120c <__aeabi_f2iz>
 8004230:	4603      	mov	r3, r0
 8004232:	827b      	strh	r3, [r7, #18]
	acc_Eframez -= 2000;
 8004234:	8a7b      	ldrh	r3, [r7, #18]
 8004236:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800423a:	b29b      	uxth	r3, r3
 800423c:	827b      	strh	r3, [r7, #18]


	const float accTrueScale = 9.81f/2000.0f; // 2048
 800423e:	4b4d      	ldr	r3, [pc, #308]	@ (8004374 <update_ahrs+0xcc4>)
 8004240:	60fb      	str	r3, [r7, #12]
	acc_Eframe[X] = acc_Eframex*accTrueScale;
 8004242:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004246:	4618      	mov	r0, r3
 8004248:	f7fc fdb0 	bl	8000dac <__aeabi_i2f>
 800424c:	4603      	mov	r3, r0
 800424e:	68f9      	ldr	r1, [r7, #12]
 8004250:	4618      	mov	r0, r3
 8004252:	f7fc fdff 	bl	8000e54 <__aeabi_fmul>
 8004256:	4603      	mov	r3, r0
 8004258:	461a      	mov	r2, r3
 800425a:	4b47      	ldr	r3, [pc, #284]	@ (8004378 <update_ahrs+0xcc8>)
 800425c:	601a      	str	r2, [r3, #0]
	acc_Eframe[Y] = acc_Eframey*accTrueScale;
 800425e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004262:	4618      	mov	r0, r3
 8004264:	f7fc fda2 	bl	8000dac <__aeabi_i2f>
 8004268:	4603      	mov	r3, r0
 800426a:	68f9      	ldr	r1, [r7, #12]
 800426c:	4618      	mov	r0, r3
 800426e:	f7fc fdf1 	bl	8000e54 <__aeabi_fmul>
 8004272:	4603      	mov	r3, r0
 8004274:	461a      	mov	r2, r3
 8004276:	4b40      	ldr	r3, [pc, #256]	@ (8004378 <update_ahrs+0xcc8>)
 8004278:	605a      	str	r2, [r3, #4]
	acc_Eframe[Z] = acc_Eframez*accTrueScale;
 800427a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800427e:	4618      	mov	r0, r3
 8004280:	f7fc fd94 	bl	8000dac <__aeabi_i2f>
 8004284:	4603      	mov	r3, r0
 8004286:	68f9      	ldr	r1, [r7, #12]
 8004288:	4618      	mov	r0, r3
 800428a:	f7fc fde3 	bl	8000e54 <__aeabi_fmul>
 800428e:	4603      	mov	r3, r0
 8004290:	461a      	mov	r2, r3
 8004292:	4b39      	ldr	r3, [pc, #228]	@ (8004378 <update_ahrs+0xcc8>)
 8004294:	609a      	str	r2, [r3, #8]

	acc_Eframe[X] = fapplyDeadband(acc_Eframe[X],0.02);
 8004296:	4b38      	ldr	r3, [pc, #224]	@ (8004378 <update_ahrs+0xcc8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4938      	ldr	r1, [pc, #224]	@ (800437c <update_ahrs+0xccc>)
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fa47 	bl	8004730 <fapplyDeadband>
 80042a2:	4603      	mov	r3, r0
 80042a4:	4a34      	ldr	r2, [pc, #208]	@ (8004378 <update_ahrs+0xcc8>)
 80042a6:	6013      	str	r3, [r2, #0]
	acc_Eframe[Y] = fapplyDeadband(acc_Eframe[Y],0.02);
 80042a8:	4b33      	ldr	r3, [pc, #204]	@ (8004378 <update_ahrs+0xcc8>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	4933      	ldr	r1, [pc, #204]	@ (800437c <update_ahrs+0xccc>)
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fa3e 	bl	8004730 <fapplyDeadband>
 80042b4:	4603      	mov	r3, r0
 80042b6:	4a30      	ldr	r2, [pc, #192]	@ (8004378 <update_ahrs+0xcc8>)
 80042b8:	6053      	str	r3, [r2, #4]
	acc_Eframe[Z] = fapplyDeadband(acc_Eframe[Z],0.02);
 80042ba:	4b2f      	ldr	r3, [pc, #188]	@ (8004378 <update_ahrs+0xcc8>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	492f      	ldr	r1, [pc, #188]	@ (800437c <update_ahrs+0xccc>)
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 fa35 	bl	8004730 <fapplyDeadband>
 80042c6:	4603      	mov	r3, r0
 80042c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004378 <update_ahrs+0xcc8>)
 80042ca:	6093      	str	r3, [r2, #8]

    if(millis() - init_us < 5000){
 80042cc:	4b2c      	ldr	r3, [pc, #176]	@ (8004380 <update_ahrs+0xcd0>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004384 <update_ahrs+0xcd4>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4413      	add	r3, r2
 80042da:	4a2b      	ldr	r2, [pc, #172]	@ (8004388 <update_ahrs+0xcd8>)
 80042dc:	fba2 2303 	umull	r2, r3, r2, r3
 80042e0:	099a      	lsrs	r2, r3, #6
 80042e2:	4b2a      	ldr	r3, [pc, #168]	@ (800438c <update_ahrs+0xcdc>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	f241 3287 	movw	r2, #4999	@ 0x1387
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d80b      	bhi.n	8004308 <update_ahrs+0xc58>
    	acc_Eframe[X] = 0;
 80042f0:	4b21      	ldr	r3, [pc, #132]	@ (8004378 <update_ahrs+0xcc8>)
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
    	acc_Eframe[Y] = 0;
 80042f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004378 <update_ahrs+0xcc8>)
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	605a      	str	r2, [r3, #4]
    	acc_Eframe[Z] = 0;
 8004300:	4b1d      	ldr	r3, [pc, #116]	@ (8004378 <update_ahrs+0xcc8>)
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	609a      	str	r2, [r3, #8]

	//position_test += velocity_test*0.01f + 0.5* acc_Eframe[Z]* 0.01f * 0.01f;

	//velocity_test += acc_Eframe[Z]*0.01f;

	AHRS.pitch = -atan2_approx(-dcm[0][2],sqrtf(1 - dcm[0][2]*dcm[0][2]))*DEG;
 8004308:	4b19      	ldr	r3, [pc, #100]	@ (8004370 <update_ahrs+0xcc0>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8004310:	4b17      	ldr	r3, [pc, #92]	@ (8004370 <update_ahrs+0xcc0>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	4a16      	ldr	r2, [pc, #88]	@ (8004370 <update_ahrs+0xcc0>)
 8004316:	6892      	ldr	r2, [r2, #8]
 8004318:	4611      	mov	r1, r2
 800431a:	4618      	mov	r0, r3
 800431c:	f7fc fd9a 	bl	8000e54 <__aeabi_fmul>
 8004320:	4603      	mov	r3, r0
 8004322:	4619      	mov	r1, r3
 8004324:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004328:	f7fc fc8a 	bl	8000c40 <__aeabi_fsub>
 800432c:	4603      	mov	r3, r0
 800432e:	4618      	mov	r0, r3
 8004330:	f010 ff99 	bl	8015266 <sqrtf>
 8004334:	4603      	mov	r3, r0
 8004336:	4619      	mov	r1, r3
 8004338:	4620      	mov	r0, r4
 800433a:	f000 f939 	bl	80045b0 <atan2_approx>
 800433e:	4603      	mov	r3, r0
 8004340:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8004344:	4912      	ldr	r1, [pc, #72]	@ (8004390 <update_ahrs+0xce0>)
 8004346:	4618      	mov	r0, r3
 8004348:	f7fc fd84 	bl	8000e54 <__aeabi_fmul>
 800434c:	4603      	mov	r3, r0
 800434e:	461a      	mov	r2, r3
 8004350:	4b10      	ldr	r3, [pc, #64]	@ (8004394 <update_ahrs+0xce4>)
 8004352:	605a      	str	r2, [r3, #4]
	AHRS.roll = -atan2_approx(-dcm[1][2],dcm[2][2])*DEG;
 8004354:	4b06      	ldr	r3, [pc, #24]	@ (8004370 <update_ahrs+0xcc0>)
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800435c:	4a04      	ldr	r2, [pc, #16]	@ (8004370 <update_ahrs+0xcc0>)
 800435e:	6a12      	ldr	r2, [r2, #32]
 8004360:	4611      	mov	r1, r2
 8004362:	4618      	mov	r0, r3
 8004364:	f000 f924 	bl	80045b0 <atan2_approx>
 8004368:	4603      	mov	r3, r0
 800436a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800436e:	e013      	b.n	8004398 <update_ahrs+0xce8>
 8004370:	20000558 	.word	0x20000558
 8004374:	3ba0ba20 	.word	0x3ba0ba20
 8004378:	20000540 	.word	0x20000540
 800437c:	3ca3d70a 	.word	0x3ca3d70a
 8004380:	2000059c 	.word	0x2000059c
 8004384:	200005a0 	.word	0x200005a0
 8004388:	10624dd3 	.word	0x10624dd3
 800438c:	2000057c 	.word	0x2000057c
 8004390:	42652ee0 	.word	0x42652ee0
 8004394:	2000051c 	.word	0x2000051c
 8004398:	4932      	ldr	r1, [pc, #200]	@ (8004464 <update_ahrs+0xdb4>)
 800439a:	4618      	mov	r0, r3
 800439c:	f7fc fd5a 	bl	8000e54 <__aeabi_fmul>
 80043a0:	4603      	mov	r3, r0
 80043a2:	461a      	mov	r2, r3
 80043a4:	4b30      	ldr	r3, [pc, #192]	@ (8004468 <update_ahrs+0xdb8>)
 80043a6:	601a      	str	r2, [r3, #0]
	float yaw_ = -atan2_approx(dcm[0][1],dcm[0][0])*DEG;
 80043a8:	4b30      	ldr	r3, [pc, #192]	@ (800446c <update_ahrs+0xdbc>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	4a2f      	ldr	r2, [pc, #188]	@ (800446c <update_ahrs+0xdbc>)
 80043ae:	6812      	ldr	r2, [r2, #0]
 80043b0:	4611      	mov	r1, r2
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 f8fc 	bl	80045b0 <atan2_approx>
 80043b8:	4603      	mov	r3, r0
 80043ba:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80043be:	4929      	ldr	r1, [pc, #164]	@ (8004464 <update_ahrs+0xdb4>)
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fc fd47 	bl	8000e54 <__aeabi_fmul>
 80043c6:	4603      	mov	r3, r0
 80043c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	if(yaw_ < 0){
 80043cc:	f04f 0100 	mov.w	r1, #0
 80043d0:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80043d4:	f7fc fedc 	bl	8001190 <__aeabi_fcmplt>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d007      	beq.n	80043ee <update_ahrs+0xd3e>
		 yaw_ = 360 + yaw_;
 80043de:	4924      	ldr	r1, [pc, #144]	@ (8004470 <update_ahrs+0xdc0>)
 80043e0:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80043e4:	f7fc fc2e 	bl	8000c44 <__addsf3>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	}
	AHRS.yaw =  yaw_;
 80043ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004468 <update_ahrs+0xdb8>)
 80043f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80043f4:	6093      	str	r3, [r2, #8]
	AHRS.roll_rate  = gx_/config.gyr_lsb;
 80043f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fc fcd6 	bl	8000dac <__aeabi_i2f>
 8004400:	4602      	mov	r2, r0
 8004402:	4b1c      	ldr	r3, [pc, #112]	@ (8004474 <update_ahrs+0xdc4>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	4619      	mov	r1, r3
 8004408:	4610      	mov	r0, r2
 800440a:	f7fc fdd7 	bl	8000fbc <__aeabi_fdiv>
 800440e:	4603      	mov	r3, r0
 8004410:	461a      	mov	r2, r3
 8004412:	4b15      	ldr	r3, [pc, #84]	@ (8004468 <update_ahrs+0xdb8>)
 8004414:	60da      	str	r2, [r3, #12]
	AHRS.pitch_rate = -gy_/config.gyr_lsb;
 8004416:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800441a:	425b      	negs	r3, r3
 800441c:	4618      	mov	r0, r3
 800441e:	f7fc fcc5 	bl	8000dac <__aeabi_i2f>
 8004422:	4602      	mov	r2, r0
 8004424:	4b13      	ldr	r3, [pc, #76]	@ (8004474 <update_ahrs+0xdc4>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	4619      	mov	r1, r3
 800442a:	4610      	mov	r0, r2
 800442c:	f7fc fdc6 	bl	8000fbc <__aeabi_fdiv>
 8004430:	4603      	mov	r3, r0
 8004432:	461a      	mov	r2, r3
 8004434:	4b0c      	ldr	r3, [pc, #48]	@ (8004468 <update_ahrs+0xdb8>)
 8004436:	611a      	str	r2, [r3, #16]
	AHRS.yaw_rate   = -gz_/config.gyr_lsb;
 8004438:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800443c:	425b      	negs	r3, r3
 800443e:	4618      	mov	r0, r3
 8004440:	f7fc fcb4 	bl	8000dac <__aeabi_i2f>
 8004444:	4602      	mov	r2, r0
 8004446:	4b0b      	ldr	r3, [pc, #44]	@ (8004474 <update_ahrs+0xdc4>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	4619      	mov	r1, r3
 800444c:	4610      	mov	r0, r2
 800444e:	f7fc fdb5 	bl	8000fbc <__aeabi_fdiv>
 8004452:	4603      	mov	r3, r0
 8004454:	461a      	mov	r2, r3
 8004456:	4b04      	ldr	r3, [pc, #16]	@ (8004468 <update_ahrs+0xdb8>)
 8004458:	615a      	str	r2, [r3, #20]

}
 800445a:	bf00      	nop
 800445c:	37a0      	adds	r7, #160	@ 0xa0
 800445e:	46bd      	mov	sp, r7
 8004460:	bdb0      	pop	{r4, r5, r7, pc}
 8004462:	bf00      	nop
 8004464:	42652ee0 	.word	0x42652ee0
 8004468:	2000051c 	.word	0x2000051c
 800446c:	20000558 	.word	0x20000558
 8004470:	43b40000 	.word	0x43b40000
 8004474:	20000018 	.word	0x20000018

08004478 <sin_approx>:
#define sinPolyCoef5  8.333017292e-3f                                          // Double:  8.333017291562218127986291618761571373087e-3
#define sinPolyCoef7 -1.980661520e-4f                                          // Double: -1.980661520135080504411629636078917643846e-4
#define sinPolyCoef9  2.600054768e-6f                                          // Double:  2.600054767890361277123254766503271638682e-6
#endif
float sin_approx(float x)
{
 8004478:	b590      	push	{r4, r7, lr}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
    int32_t xint = x;
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7fc fec3 	bl	800120c <__aeabi_f2iz>
 8004486:	4603      	mov	r3, r0
 8004488:	60fb      	str	r3, [r7, #12]
    if (xint < -32 || xint > 32) return 0.0f;                               // Stop here on error input (5 * 360 Deg)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f113 0f20 	cmn.w	r3, #32
 8004490:	db02      	blt.n	8004498 <sin_approx+0x20>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b20      	cmp	r3, #32
 8004496:	dd08      	ble.n	80044aa <sin_approx+0x32>
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	e074      	b.n	8004588 <sin_approx+0x110>
    while (x >  M_PIf) x -= (2.0f * M_PIf);                                 // always wrap input angle to -PI..PI
 800449e:	493c      	ldr	r1, [pc, #240]	@ (8004590 <sin_approx+0x118>)
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7fc fbcd 	bl	8000c40 <__aeabi_fsub>
 80044a6:	4603      	mov	r3, r0
 80044a8:	607b      	str	r3, [r7, #4]
 80044aa:	493a      	ldr	r1, [pc, #232]	@ (8004594 <sin_approx+0x11c>)
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7fc fe8d 	bl	80011cc <__aeabi_fcmpgt>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1f2      	bne.n	800449e <sin_approx+0x26>
    while (x < -M_PIf) x += (2.0f * M_PIf);
 80044b8:	e005      	b.n	80044c6 <sin_approx+0x4e>
 80044ba:	4935      	ldr	r1, [pc, #212]	@ (8004590 <sin_approx+0x118>)
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7fc fbc1 	bl	8000c44 <__addsf3>
 80044c2:	4603      	mov	r3, r0
 80044c4:	607b      	str	r3, [r7, #4]
 80044c6:	4934      	ldr	r1, [pc, #208]	@ (8004598 <sin_approx+0x120>)
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7fc fe61 	bl	8001190 <__aeabi_fcmplt>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1f2      	bne.n	80044ba <sin_approx+0x42>
    if (x >  (0.5f * M_PIf)) x =  (0.5f * M_PIf) - (x - (0.5f * M_PIf));   // We just pick -90..+90 Degree
 80044d4:	4931      	ldr	r1, [pc, #196]	@ (800459c <sin_approx+0x124>)
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fc fe78 	bl	80011cc <__aeabi_fcmpgt>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00b      	beq.n	80044fa <sin_approx+0x82>
 80044e2:	492e      	ldr	r1, [pc, #184]	@ (800459c <sin_approx+0x124>)
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7fc fbab 	bl	8000c40 <__aeabi_fsub>
 80044ea:	4603      	mov	r3, r0
 80044ec:	4619      	mov	r1, r3
 80044ee:	482b      	ldr	r0, [pc, #172]	@ (800459c <sin_approx+0x124>)
 80044f0:	f7fc fba6 	bl	8000c40 <__aeabi_fsub>
 80044f4:	4603      	mov	r3, r0
 80044f6:	607b      	str	r3, [r7, #4]
 80044f8:	e011      	b.n	800451e <sin_approx+0xa6>
    else if (x < -(0.5f * M_PIf)) x = -(0.5f * M_PIf) - ((0.5f * M_PIf) + x);
 80044fa:	4929      	ldr	r1, [pc, #164]	@ (80045a0 <sin_approx+0x128>)
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7fc fe47 	bl	8001190 <__aeabi_fcmplt>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00a      	beq.n	800451e <sin_approx+0xa6>
 8004508:	4924      	ldr	r1, [pc, #144]	@ (800459c <sin_approx+0x124>)
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7fc fb9a 	bl	8000c44 <__addsf3>
 8004510:	4603      	mov	r3, r0
 8004512:	4619      	mov	r1, r3
 8004514:	4822      	ldr	r0, [pc, #136]	@ (80045a0 <sin_approx+0x128>)
 8004516:	f7fc fb93 	bl	8000c40 <__aeabi_fsub>
 800451a:	4603      	mov	r3, r0
 800451c:	607b      	str	r3, [r7, #4]
    float x2 = x * x;
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7fc fc97 	bl	8000e54 <__aeabi_fmul>
 8004526:	4603      	mov	r3, r0
 8004528:	60bb      	str	r3, [r7, #8]
    return x + x * x2 * (sinPolyCoef3 + x2 * (sinPolyCoef5 + x2 * (sinPolyCoef7 + x2 * sinPolyCoef9)));
 800452a:	68b9      	ldr	r1, [r7, #8]
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7fc fc91 	bl	8000e54 <__aeabi_fmul>
 8004532:	4603      	mov	r3, r0
 8004534:	461c      	mov	r4, r3
 8004536:	f04f 0100 	mov.w	r1, #0
 800453a:	68b8      	ldr	r0, [r7, #8]
 800453c:	f7fc fc8a 	bl	8000e54 <__aeabi_fmul>
 8004540:	4603      	mov	r3, r0
 8004542:	4918      	ldr	r1, [pc, #96]	@ (80045a4 <sin_approx+0x12c>)
 8004544:	4618      	mov	r0, r3
 8004546:	f7fc fb7b 	bl	8000c40 <__aeabi_fsub>
 800454a:	4603      	mov	r3, r0
 800454c:	68b9      	ldr	r1, [r7, #8]
 800454e:	4618      	mov	r0, r3
 8004550:	f7fc fc80 	bl	8000e54 <__aeabi_fmul>
 8004554:	4603      	mov	r3, r0
 8004556:	4914      	ldr	r1, [pc, #80]	@ (80045a8 <sin_approx+0x130>)
 8004558:	4618      	mov	r0, r3
 800455a:	f7fc fb73 	bl	8000c44 <__addsf3>
 800455e:	4603      	mov	r3, r0
 8004560:	68b9      	ldr	r1, [r7, #8]
 8004562:	4618      	mov	r0, r3
 8004564:	f7fc fc76 	bl	8000e54 <__aeabi_fmul>
 8004568:	4603      	mov	r3, r0
 800456a:	4910      	ldr	r1, [pc, #64]	@ (80045ac <sin_approx+0x134>)
 800456c:	4618      	mov	r0, r3
 800456e:	f7fc fb67 	bl	8000c40 <__aeabi_fsub>
 8004572:	4603      	mov	r3, r0
 8004574:	4619      	mov	r1, r3
 8004576:	4620      	mov	r0, r4
 8004578:	f7fc fc6c 	bl	8000e54 <__aeabi_fmul>
 800457c:	4603      	mov	r3, r0
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	4618      	mov	r0, r3
 8004582:	f7fc fb5f 	bl	8000c44 <__addsf3>
 8004586:	4603      	mov	r3, r0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	bd90      	pop	{r4, r7, pc}
 8004590:	40c90fdb 	.word	0x40c90fdb
 8004594:	40490fdb 	.word	0x40490fdb
 8004598:	c0490fdb 	.word	0xc0490fdb
 800459c:	3fc90fdb 	.word	0x3fc90fdb
 80045a0:	bfc90fdb 	.word	0xbfc90fdb
 80045a4:	3941e792 	.word	0x3941e792
 80045a8:	3c083097 	.word	0x3c083097
 80045ac:	3e2aa815 	.word	0x3e2aa815

080045b0 <atan2_approx>:
// Initial implementation by Crashpilot1000 (https://github.com/Crashpilot1000/HarakiriWebstore1/blob/396715f73c6fcf859e0db0f34e12fe44bace6483/src/mw.c#L1292)
// Polynomial coefficients by Andor (http://www.dsprelated.com/showthread/comp.dsp/21872-1.php) optimized by Ledvinap to save one multiplication
// Max absolute error 0,000027 degree
// atan2_approx maximum absolute error = 7.152557e-07 rads (4.098114e-05 degree)
float atan2_approx(float y, float x)
{
 80045b0:	b590      	push	{r4, r7, lr}
 80045b2:	b08b      	sub	sp, #44	@ 0x2c
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80045c0:	623b      	str	r3, [r7, #32]
    absY = fabsf(y);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80045c8:	61fb      	str	r3, [r7, #28]
    res  = MAX(absX, absY);
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	61bb      	str	r3, [r7, #24]
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	6979      	ldr	r1, [r7, #20]
 80045d4:	69b8      	ldr	r0, [r7, #24]
 80045d6:	f7fc fdf9 	bl	80011cc <__aeabi_fcmpgt>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <atan2_approx+0x34>
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	e000      	b.n	80045e6 <atan2_approx+0x36>
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (res) res = MIN(absX, absY) / res;
 80045e8:	f04f 0100 	mov.w	r1, #0
 80045ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80045ee:	f7fc fdc5 	bl	800117c <__aeabi_fcmpeq>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d114      	bne.n	8004622 <atan2_approx+0x72>
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	613b      	str	r3, [r7, #16]
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	68f9      	ldr	r1, [r7, #12]
 8004602:	6938      	ldr	r0, [r7, #16]
 8004604:	f7fc fdc4 	bl	8001190 <__aeabi_fcmplt>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <atan2_approx+0x62>
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	e000      	b.n	8004614 <atan2_approx+0x64>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004616:	4618      	mov	r0, r3
 8004618:	f7fc fcd0 	bl	8000fbc <__aeabi_fdiv>
 800461c:	4603      	mov	r3, r0
 800461e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004620:	e002      	b.n	8004628 <atan2_approx+0x78>
    else res = 0.0f;
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	627b      	str	r3, [r7, #36]	@ 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 8004628:	4938      	ldr	r1, [pc, #224]	@ (800470c <atan2_approx+0x15c>)
 800462a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800462c:	f7fc fc12 	bl	8000e54 <__aeabi_fmul>
 8004630:	4603      	mov	r3, r0
 8004632:	4937      	ldr	r1, [pc, #220]	@ (8004710 <atan2_approx+0x160>)
 8004634:	4618      	mov	r0, r3
 8004636:	f7fc fb03 	bl	8000c40 <__aeabi_fsub>
 800463a:	4603      	mov	r3, r0
 800463c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800463e:	4618      	mov	r0, r3
 8004640:	f7fc fc08 	bl	8000e54 <__aeabi_fmul>
 8004644:	4603      	mov	r3, r0
 8004646:	4933      	ldr	r1, [pc, #204]	@ (8004714 <atan2_approx+0x164>)
 8004648:	4618      	mov	r0, r3
 800464a:	f7fc faf9 	bl	8000c40 <__aeabi_fsub>
 800464e:	4603      	mov	r3, r0
 8004650:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004652:	4618      	mov	r0, r3
 8004654:	f7fc fbfe 	bl	8000e54 <__aeabi_fmul>
 8004658:	4603      	mov	r3, r0
 800465a:	492f      	ldr	r1, [pc, #188]	@ (8004718 <atan2_approx+0x168>)
 800465c:	4618      	mov	r0, r3
 800465e:	f7fc faef 	bl	8000c40 <__aeabi_fsub>
 8004662:	4603      	mov	r3, r0
 8004664:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004666:	4618      	mov	r0, r3
 8004668:	f7fc fbf4 	bl	8000e54 <__aeabi_fmul>
 800466c:	4603      	mov	r3, r0
 800466e:	492b      	ldr	r1, [pc, #172]	@ (800471c <atan2_approx+0x16c>)
 8004670:	4618      	mov	r0, r3
 8004672:	f7fc fae5 	bl	8000c40 <__aeabi_fsub>
 8004676:	4603      	mov	r3, r0
 8004678:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 800467c:	4928      	ldr	r1, [pc, #160]	@ (8004720 <atan2_approx+0x170>)
 800467e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004680:	f7fc fbe8 	bl	8000e54 <__aeabi_fmul>
 8004684:	4603      	mov	r3, r0
 8004686:	4927      	ldr	r1, [pc, #156]	@ (8004724 <atan2_approx+0x174>)
 8004688:	4618      	mov	r0, r3
 800468a:	f7fc fadb 	bl	8000c44 <__addsf3>
 800468e:	4603      	mov	r3, r0
 8004690:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004692:	4618      	mov	r0, r3
 8004694:	f7fc fbde 	bl	8000e54 <__aeabi_fmul>
 8004698:	4603      	mov	r3, r0
 800469a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fc fad0 	bl	8000c44 <__addsf3>
 80046a4:	4603      	mov	r3, r0
 80046a6:	4619      	mov	r1, r3
 80046a8:	4620      	mov	r0, r4
 80046aa:	f7fc fc87 	bl	8000fbc <__aeabi_fdiv>
 80046ae:	4603      	mov	r3, r0
 80046b0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 80046b2:	6a39      	ldr	r1, [r7, #32]
 80046b4:	69f8      	ldr	r0, [r7, #28]
 80046b6:	f7fc fd89 	bl	80011cc <__aeabi_fcmpgt>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d005      	beq.n	80046cc <atan2_approx+0x11c>
 80046c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046c2:	4819      	ldr	r0, [pc, #100]	@ (8004728 <atan2_approx+0x178>)
 80046c4:	f7fc fabc 	bl	8000c40 <__aeabi_fsub>
 80046c8:	4603      	mov	r3, r0
 80046ca:	627b      	str	r3, [r7, #36]	@ 0x24
    if (x < 0) res = M_PIf - res;
 80046cc:	f04f 0100 	mov.w	r1, #0
 80046d0:	6838      	ldr	r0, [r7, #0]
 80046d2:	f7fc fd5d 	bl	8001190 <__aeabi_fcmplt>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d005      	beq.n	80046e8 <atan2_approx+0x138>
 80046dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046de:	4813      	ldr	r0, [pc, #76]	@ (800472c <atan2_approx+0x17c>)
 80046e0:	f7fc faae 	bl	8000c40 <__aeabi_fsub>
 80046e4:	4603      	mov	r3, r0
 80046e6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (y < 0) res = -res;
 80046e8:	f04f 0100 	mov.w	r1, #0
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7fc fd4f 	bl	8001190 <__aeabi_fcmplt>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <atan2_approx+0x150>
 80046f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fa:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80046fe:	627b      	str	r3, [r7, #36]	@ 0x24
    return res;
 8004700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004702:	4618      	mov	r0, r3
 8004704:	372c      	adds	r7, #44	@ 0x2c
 8004706:	46bd      	mov	sp, r7
 8004708:	bd90      	pop	{r4, r7, pc}
 800470a:	bf00      	nop
 800470c:	3d4e0939 	.word	0x3d4e0939
 8004710:	3e9eb5e3 	.word	0x3e9eb5e3
 8004714:	3e16fa88 	.word	0x3e16fa88
 8004718:	3f7ffe45 	.word	0x3f7ffe45
 800471c:	34a8dfa7 	.word	0x34a8dfa7
 8004720:	3f24fb99 	.word	0x3f24fb99
 8004724:	3e16a269 	.word	0x3e16a269
 8004728:	3fc90fdb 	.word	0x3fc90fdb
 800472c:	40490fdb 	.word	0x40490fdb

08004730 <fapplyDeadband>:

    return value >= 0 ? value - deadband : value + deadband;
}

float fapplyDeadband(const float value, const float deadband)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
    if (fabsf(value) < deadband) {
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004740:	4619      	mov	r1, r3
 8004742:	6838      	ldr	r0, [r7, #0]
 8004744:	f7fc fd42 	bl	80011cc <__aeabi_fcmpgt>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <fapplyDeadband+0x24>
        return 0;
 800474e:	f04f 0300 	mov.w	r3, #0
 8004752:	e012      	b.n	800477a <fapplyDeadband+0x4a>
    }

    return value >= 0 ? value - deadband : value + deadband;
 8004754:	f04f 0100 	mov.w	r1, #0
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7fc fd2d 	bl	80011b8 <__aeabi_fcmpge>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <fapplyDeadband+0x40>
 8004764:	6839      	ldr	r1, [r7, #0]
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7fc fa6a 	bl	8000c40 <__aeabi_fsub>
 800476c:	4603      	mov	r3, r0
 800476e:	e004      	b.n	800477a <fapplyDeadband+0x4a>
 8004770:	6839      	ldr	r1, [r7, #0]
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7fc fa66 	bl	8000c44 <__addsf3>
 8004778:	4603      	mov	r3, r0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <invSqrt_>:
    return (num << 12) / den;
}


float invSqrt_(float x)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 800478c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7fc fb5f 	bl	8000e54 <__aeabi_fmul>
 8004796:	4603      	mov	r3, r0
 8004798:	617b      	str	r3, [r7, #20]
	float y = x;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800479e:	f107 0310 	add.w	r3, r7, #16
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	105a      	asrs	r2, r3, #1
 80047aa:	4b13      	ldr	r3, [pc, #76]	@ (80047f8 <invSqrt_+0x74>)
 80047ac:	1a9b      	subs	r3, r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80047b0:	f107 030c 	add.w	r3, r7, #12
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	6979      	ldr	r1, [r7, #20]
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fc fb49 	bl	8000e54 <__aeabi_fmul>
 80047c2:	4603      	mov	r3, r0
 80047c4:	461a      	mov	r2, r3
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	4619      	mov	r1, r3
 80047ca:	4610      	mov	r0, r2
 80047cc:	f7fc fb42 	bl	8000e54 <__aeabi_fmul>
 80047d0:	4603      	mov	r3, r0
 80047d2:	4619      	mov	r1, r3
 80047d4:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 80047d8:	f7fc fa32 	bl	8000c40 <__aeabi_fsub>
 80047dc:	4603      	mov	r3, r0
 80047de:	461a      	mov	r2, r3
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	4619      	mov	r1, r3
 80047e4:	4610      	mov	r0, r2
 80047e6:	f7fc fb35 	bl	8000e54 <__aeabi_fmul>
 80047ea:	4603      	mov	r3, r0
 80047ec:	613b      	str	r3, [r7, #16]
	//y = y * (1.5f - (halfx * y * y));
	return y;
 80047ee:	693b      	ldr	r3, [r7, #16]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	5f3759df 	.word	0x5f3759df

080047fc <constrainf>:
    else
        return amt;
}

static inline float constrainf(float amt, float low, float high)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8004808:	68b9      	ldr	r1, [r7, #8]
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f7fc fcc0 	bl	8001190 <__aeabi_fcmplt>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <constrainf+0x1e>
        return low;
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	e009      	b.n	800482e <constrainf+0x32>
    else if (amt > high)
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f7fc fcd5 	bl	80011cc <__aeabi_fcmpgt>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <constrainf+0x30>
        return high;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	e000      	b.n	800482e <constrainf+0x32>
    else
        return amt;
 800482c:	68fb      	ldr	r3, [r7, #12]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <pid_init>:
#include "filter.h"
#include "maths.h"
#include "timer.h"
#include "string.h"

void pid_init(pid_t  *pid_in,float kp, float ki, float kd, float f_cut_D, float maxI){
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	607a      	str	r2, [r7, #4]
 8004842:	603b      	str	r3, [r7, #0]
  memset(pid_in,0,sizeof(pid_t));
 8004844:	2224      	movs	r2, #36	@ 0x24
 8004846:	2100      	movs	r1, #0
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f010 fc49 	bl	80150e0 <memset>
  pid_in->kp = kp;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	601a      	str	r2, [r3, #0]
  pid_in->ki = ki;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	605a      	str	r2, [r3, #4]
  pid_in->kd = kd;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	609a      	str	r2, [r3, #8]
  pid_in->f_cut_D = f_cut_D;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	61da      	str	r2, [r3, #28]
  pid_in->I_range = maxI;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	69fa      	ldr	r2, [r7, #28]
 800486a:	619a      	str	r2, [r3, #24]
  pid_in->last_input = 0;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	611a      	str	r2, [r3, #16]
  pid_in->D_filted = 0;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	615a      	str	r2, [r3, #20]
  pid_in->init = 1;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2020 	strb.w	r2, [r3, #32]
}
 8004884:	bf00      	nop
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <pid_calculate>:

float pid_calculate(pid_t *pid_in,float input, float setpoint,float scaler,float dt){
 800488c:	b590      	push	{r4, r7, lr}
 800488e:	b08b      	sub	sp, #44	@ 0x2c
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
   if(pid_in->init){
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d009      	beq.n	80048b8 <pid_calculate+0x2c>
       pid_in->last_input = input;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	611a      	str	r2, [r3, #16]
       pid_in->init = 0;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2020 	strb.w	r2, [r3, #32]
       return 0.0f;
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	e0a8      	b.n	8004a0a <pid_calculate+0x17e>
   }
   // Caculate P term
   float error = setpoint - input;
 80048b8:	68b9      	ldr	r1, [r7, #8]
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fc f9c0 	bl	8000c40 <__aeabi_fsub>
 80048c0:	4603      	mov	r3, r0
 80048c2:	623b      	str	r3, [r7, #32]
   float output = error*pid_in->kp*scaler;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6a39      	ldr	r1, [r7, #32]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fc fac2 	bl	8000e54 <__aeabi_fmul>
 80048d0:	4603      	mov	r3, r0
 80048d2:	4619      	mov	r1, r3
 80048d4:	6838      	ldr	r0, [r7, #0]
 80048d6:	f7fc fabd 	bl	8000e54 <__aeabi_fmul>
 80048da:	4603      	mov	r3, r0
 80048dc:	627b      	str	r3, [r7, #36]	@ 0x24

   // Caculate I term
   if(pid_in->ki > 0){
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f04f 0100 	mov.w	r1, #0
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fc fc70 	bl	80011cc <__aeabi_fcmpgt>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d02b      	beq.n	800494a <pid_calculate+0xbe>
      pid_in->i_term += error *pid_in->ki *dt;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	68dc      	ldr	r4, [r3, #12]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	6a39      	ldr	r1, [r7, #32]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fc faa9 	bl	8000e54 <__aeabi_fmul>
 8004902:	4603      	mov	r3, r0
 8004904:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004906:	4618      	mov	r0, r3
 8004908:	f7fc faa4 	bl	8000e54 <__aeabi_fmul>
 800490c:	4603      	mov	r3, r0
 800490e:	4619      	mov	r1, r3
 8004910:	4620      	mov	r0, r4
 8004912:	f7fc f997 	bl	8000c44 <__addsf3>
 8004916:	4603      	mov	r3, r0
 8004918:	461a      	mov	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	60da      	str	r2, [r3, #12]
      pid_in->i_term = constrainf(pid_in->i_term,-pid_in->I_range,pid_in->I_range);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	68d8      	ldr	r0, [r3, #12]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	461a      	mov	r2, r3
 8004930:	f7ff ff64 	bl	80047fc <constrainf>
 8004934:	4602      	mov	r2, r0
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	60da      	str	r2, [r3, #12]
      output += pid_in->i_term;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	4619      	mov	r1, r3
 8004940:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004942:	f7fc f97f 	bl	8000c44 <__addsf3>
 8004946:	4603      	mov	r3, r0
 8004948:	627b      	str	r3, [r7, #36]	@ 0x24
   }
   // Caculate D term
   if(pid_in->kd > 0){
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f04f 0100 	mov.w	r1, #0
 8004952:	4618      	mov	r0, r3
 8004954:	f7fc fc3a 	bl	80011cc <__aeabi_fcmpgt>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d054      	beq.n	8004a08 <pid_calculate+0x17c>
        // low pass filter
        float RC = 1.0f / (2 *M_PIf *pid_in->f_cut_D);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	492c      	ldr	r1, [pc, #176]	@ (8004a14 <pid_calculate+0x188>)
 8004964:	4618      	mov	r0, r3
 8004966:	f7fc fa75 	bl	8000e54 <__aeabi_fmul>
 800496a:	4603      	mov	r3, r0
 800496c:	4619      	mov	r1, r3
 800496e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004972:	f7fc fb23 	bl	8000fbc <__aeabi_fdiv>
 8004976:	4603      	mov	r3, r0
 8004978:	61fb      	str	r3, [r7, #28]
        float gain_lpf = dt/(RC + dt);
 800497a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800497c:	69f8      	ldr	r0, [r7, #28]
 800497e:	f7fc f961 	bl	8000c44 <__addsf3>
 8004982:	4603      	mov	r3, r0
 8004984:	4619      	mov	r1, r3
 8004986:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004988:	f7fc fb18 	bl	8000fbc <__aeabi_fdiv>
 800498c:	4603      	mov	r3, r0
 800498e:	61bb      	str	r3, [r7, #24]
        float delta =  (input - pid_in->last_input)*pid_in->kd;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	4619      	mov	r1, r3
 8004996:	68b8      	ldr	r0, [r7, #8]
 8004998:	f7fc f952 	bl	8000c40 <__aeabi_fsub>
 800499c:	4603      	mov	r3, r0
 800499e:	461a      	mov	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	4619      	mov	r1, r3
 80049a6:	4610      	mov	r0, r2
 80049a8:	f7fc fa54 	bl	8000e54 <__aeabi_fmul>
 80049ac:	4603      	mov	r3, r0
 80049ae:	617b      	str	r3, [r7, #20]
        pid_in->last_input = input;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	611a      	str	r2, [r3, #16]
        delta /= dt;
 80049b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80049b8:	6978      	ldr	r0, [r7, #20]
 80049ba:	f7fc faff 	bl	8000fbc <__aeabi_fdiv>
 80049be:	4603      	mov	r3, r0
 80049c0:	617b      	str	r3, [r7, #20]
        pid_in->D_filted += gain_lpf*(delta - pid_in->D_filted);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	695c      	ldr	r4, [r3, #20]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	4619      	mov	r1, r3
 80049cc:	6978      	ldr	r0, [r7, #20]
 80049ce:	f7fc f937 	bl	8000c40 <__aeabi_fsub>
 80049d2:	4603      	mov	r3, r0
 80049d4:	69b9      	ldr	r1, [r7, #24]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fc fa3c 	bl	8000e54 <__aeabi_fmul>
 80049dc:	4603      	mov	r3, r0
 80049de:	4619      	mov	r1, r3
 80049e0:	4620      	mov	r0, r4
 80049e2:	f7fc f92f 	bl	8000c44 <__addsf3>
 80049e6:	4603      	mov	r3, r0
 80049e8:	461a      	mov	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	615a      	str	r2, [r3, #20]
        output -= pid_in->D_filted*scaler;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	6839      	ldr	r1, [r7, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fc fa2d 	bl	8000e54 <__aeabi_fmul>
 80049fa:	4603      	mov	r3, r0
 80049fc:	4619      	mov	r1, r3
 80049fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a00:	f7fc f91e 	bl	8000c40 <__aeabi_fsub>
 8004a04:	4603      	mov	r3, r0
 8004a06:	627b      	str	r3, [r7, #36]	@ 0x24
   }
   return output;
 8004a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	372c      	adds	r7, #44	@ 0x2c
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd90      	pop	{r4, r7, pc}
 8004a12:	bf00      	nop
 8004a14:	40c90fdb 	.word	0x40c90fdb

08004a18 <constrain>:
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	da01      	bge.n	8004a30 <constrain+0x18>
        return low;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	e006      	b.n	8004a3e <constrain+0x26>
    else if (amt > high)
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	dd01      	ble.n	8004a3c <constrain+0x24>
        return high;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	e000      	b.n	8004a3e <constrain+0x26>
        return amt;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr

08004a48 <initPWM>:
uint8_t pwm_lock_status;

/*
 * init pwm 
 */
void initPWM(TIM_HandleTypeDef *htim){
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
	htimm = htim;
 8004a50:	4a1c      	ldr	r2, [pc, #112]	@ (8004ac4 <initPWM+0x7c>)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6013      	str	r3, [r2, #0]
	pr_status = 1;
 8004a56:	4b1c      	ldr	r3, [pc, #112]	@ (8004ac8 <initPWM+0x80>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	701a      	strb	r2, [r3, #0]
	pwm_lock_status = 0;
 8004a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8004acc <initPWM+0x84>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	701a      	strb	r2, [r3, #0]
	pwm_last_update_ms= 0;
 8004a62:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad0 <initPWM+0x88>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(htim,ch1);
 8004a68:	2100      	movs	r1, #0
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f007 fb16 	bl	800c09c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch2);
 8004a70:	2104      	movs	r1, #4
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f007 fb12 	bl	800c09c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch3);
 8004a78:	2108      	movs	r1, #8
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f007 fb0e 	bl	800c09c <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(htim,ch4);
	__HAL_TIM_SetAutoreload(htimm,PWM_RELOAD_AFFTER);
 8004a80:	4b10      	ldr	r3, [pc, #64]	@ (8004ac4 <initPWM+0x7c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac4 <initPWM+0x7c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004a94:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SetCompare (htimm,ch1,1000);
 8004a96:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac4 <initPWM+0x7c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004aa0:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SetCompare (htimm,ch2,1500);
 8004aa2:	4b08      	ldr	r3, [pc, #32]	@ (8004ac4 <initPWM+0x7c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004aac:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SetCompare (htimm,ch3,1500);
 8004aae:	4b05      	ldr	r3, [pc, #20]	@ (8004ac4 <initPWM+0x7c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004ab8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004aba:	bf00      	nop
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000590 	.word	0x20000590
 8004ac8:	20000598 	.word	0x20000598
 8004acc:	20000599 	.word	0x20000599
 8004ad0:	20000594 	.word	0x20000594

08004ad4 <writePwm>:


void writePwm(uint32_t Channel,int16_t dulty,int8_t invert)
{     if( invert){
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	460b      	mov	r3, r1
 8004ade:	807b      	strh	r3, [r7, #2]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	707b      	strb	r3, [r7, #1]
 8004ae4:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d009      	beq.n	8004b00 <writePwm+0x2c>
	    dulty -= 1000;
 8004aec:	887b      	ldrh	r3, [r7, #2]
 8004aee:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	807b      	strh	r3, [r7, #2]
	    dulty  = 2000 - dulty; 
 8004af6:	887b      	ldrh	r3, [r7, #2]
 8004af8:	f5c3 63fa 	rsb	r3, r3, #2000	@ 0x7d0
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	807b      	strh	r3, [r7, #2]
      }
	  dulty = constrain(dulty,1000,2000);
 8004b00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b04:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004b08:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff ff83 	bl	8004a18 <constrain>
 8004b12:	4603      	mov	r3, r0
 8004b14:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d106      	bne.n	8004b2a <writePwm+0x56>
 8004b1c:	4b12      	ldr	r3, [pc, #72]	@ (8004b68 <writePwm+0x94>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004b26:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8004b28:	e019      	b.n	8004b5e <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d106      	bne.n	8004b3e <writePwm+0x6a>
 8004b30:	4b0d      	ldr	r3, [pc, #52]	@ (8004b68 <writePwm+0x94>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b3a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004b3c:	e00f      	b.n	8004b5e <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d106      	bne.n	8004b52 <writePwm+0x7e>
 8004b44:	4b08      	ldr	r3, [pc, #32]	@ (8004b68 <writePwm+0x94>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b4e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8004b50:	e005      	b.n	8004b5e <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8004b52:	4b05      	ldr	r3, [pc, #20]	@ (8004b68 <writePwm+0x94>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b5c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8004b5e:	bf00      	nop
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	20000590 	.word	0x20000590

08004b6c <write_pwm_ctrl>:

void write_pwm_ctrl(uint16_t throtlle,uint16_t servoL,uint16_t servoR){
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	4603      	mov	r3, r0
 8004b74:	80fb      	strh	r3, [r7, #6]
 8004b76:	460b      	mov	r3, r1
 8004b78:	80bb      	strh	r3, [r7, #4]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	807b      	strh	r3, [r7, #2]
      if(pr_status || pwm_lock_status){
 8004b7e:	4b17      	ldr	r3, [pc, #92]	@ (8004bdc <write_pwm_ctrl+0x70>)
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d103      	bne.n	8004b8e <write_pwm_ctrl+0x22>
 8004b86:	4b16      	ldr	r3, [pc, #88]	@ (8004be0 <write_pwm_ctrl+0x74>)
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d008      	beq.n	8004ba0 <write_pwm_ctrl+0x34>
           pwm_last_update_ms = HAL_GetTick();
 8004b8e:	f003 f805 	bl	8007b9c <HAL_GetTick>
 8004b92:	4603      	mov	r3, r0
 8004b94:	4a13      	ldr	r2, [pc, #76]	@ (8004be4 <write_pwm_ctrl+0x78>)
 8004b96:	6013      	str	r3, [r2, #0]
		   pr_status = 0;
 8004b98:	4b10      	ldr	r3, [pc, #64]	@ (8004bdc <write_pwm_ctrl+0x70>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	701a      	strb	r2, [r3, #0]
		   return;
 8004b9e:	e019      	b.n	8004bd4 <write_pwm_ctrl+0x68>
	  }
	 writePwm(TIM_CHANNEL_1,throtlle,INVERT);
 8004ba0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	2000      	movs	r0, #0
 8004baa:	f7ff ff93 	bl	8004ad4 <writePwm>
     writePwm(TIM_CHANNEL_2,servoL,INVERT);
 8004bae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	2004      	movs	r0, #4
 8004bb8:	f7ff ff8c 	bl	8004ad4 <writePwm>
     writePwm(TIM_CHANNEL_3,servoR,NOT_INVERT);
 8004bbc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	2008      	movs	r0, #8
 8004bc6:	f7ff ff85 	bl	8004ad4 <writePwm>
	pwm_last_update_ms = HAL_GetTick();
 8004bca:	f002 ffe7 	bl	8007b9c <HAL_GetTick>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	4a04      	ldr	r2, [pc, #16]	@ (8004be4 <write_pwm_ctrl+0x78>)
 8004bd2:	6013      	str	r3, [r2, #0]
}
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20000598 	.word	0x20000598
 8004be0:	20000599 	.word	0x20000599
 8004be4:	20000594 	.word	0x20000594

08004be8 <timer_start>:
  boottime.sec   = setoverFlow(sec_L,59);
  boottime.min   = setoverFlow((sec_L/60),59);
  boottime.hour  = setoverFlow((sec_L/3600),23);
}

void timer_start(TIM_HandleTypeDef *htimz){
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
	htimmz = htimz;
 8004bf0:	4a05      	ldr	r2, [pc, #20]	@ (8004c08 <timer_start+0x20>)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htimmz);
 8004bf6:	4b04      	ldr	r3, [pc, #16]	@ (8004c08 <timer_start+0x20>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f007 f996 	bl	800bf2c <HAL_TIM_Base_Start_IT>
}
 8004c00:	bf00      	nop
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	2000059c 	.word	0x2000059c

08004c0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004c12:	4b0c      	ldr	r3, [pc, #48]	@ (8004c44 <MX_DMA_Init+0x38>)
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	4a0b      	ldr	r2, [pc, #44]	@ (8004c44 <MX_DMA_Init+0x38>)
 8004c18:	f043 0301 	orr.w	r3, r3, #1
 8004c1c:	6153      	str	r3, [r2, #20]
 8004c1e:	4b09      	ldr	r3, [pc, #36]	@ (8004c44 <MX_DMA_Init+0x38>)
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	607b      	str	r3, [r7, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	2105      	movs	r1, #5
 8004c2e:	200e      	movs	r0, #14
 8004c30:	f003 f897 	bl	8007d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004c34:	200e      	movs	r0, #14
 8004c36:	f003 f8b0 	bl	8007d9a <HAL_NVIC_EnableIRQ>

}
 8004c3a:	bf00      	nop
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	40021000 	.word	0x40021000

08004c48 <HAL_UART_RxCpltCallback>:
#include "../flight/plane.h"

// IQR function
//----------------------------------IQR--Handler-----------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
    if(huart == ibus_uart_port())
 8004c50:	f7fd fa4c 	bl	80020ec <ibus_uart_port>
 8004c54:	4602      	mov	r2, r0
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d102      	bne.n	8004c62 <HAL_UART_RxCpltCallback+0x1a>
	{
		ibus_calback();
 8004c5c:	f7fd fa50 	bl	8002100 <ibus_calback>
    }
    else if(huart == gps_uart_port()){
        gps_callback();
    }
}
 8004c60:	e007      	b.n	8004c72 <HAL_UART_RxCpltCallback+0x2a>
    else if(huart == gps_uart_port()){
 8004c62:	f7fe fa77 	bl	8003154 <gps_uart_port>
 8004c66:	4602      	mov	r2, r0
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d101      	bne.n	8004c72 <HAL_UART_RxCpltCallback+0x2a>
        gps_callback();
 8004c6e:	f7fe fa7b 	bl	8003168 <gps_callback>
}
 8004c72:	bf00      	nop
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
    if(huart == &huart1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a04      	ldr	r2, [pc, #16]	@ (8004c98 <HAL_UART_TxCpltCallback+0x1c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d101      	bne.n	8004c90 <HAL_UART_TxCpltCallback+0x14>
	{
		mavlink_tx_cpl_callback();
 8004c8c:	f002 ff52 	bl	8007b34 <mavlink_tx_cpl_callback>
    }
}
 8004c90:	bf00      	nop
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	20000a4c 	.word	0x20000a4c

08004c9c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4a06      	ldr	r2, [pc, #24]	@ (8004cc4 <vApplicationGetIdleTaskMemory+0x28>)
 8004cac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	4a05      	ldr	r2, [pc, #20]	@ (8004cc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004cb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2280      	movs	r2, #128	@ 0x80
 8004cb8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8004cba:	bf00      	nop
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr
 8004cc4:	200005b8 	.word	0x200005b8
 8004cc8:	2000060c 	.word	0x2000060c

08004ccc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8004ccc:	b5b0      	push	{r4, r5, r7, lr}
 8004cce:	b0a4      	sub	sp, #144	@ 0x90
 8004cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	 timer_start(&htim7);
 8004cd2:	4832      	ldr	r0, [pc, #200]	@ (8004d9c <MX_FREERTOS_Init+0xd0>)
 8004cd4:	f7ff ff88 	bl	8004be8 <timer_start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task1 */
  osThreadDef(task1, ahrs_task, osPriorityHigh, 0, 128);
 8004cd8:	4b31      	ldr	r3, [pc, #196]	@ (8004da0 <MX_FREERTOS_Init+0xd4>)
 8004cda:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8004cde:	461d      	mov	r5, r3
 8004ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ce4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004ce8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 8004cec:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f00d fb85 	bl	8012402 <osThreadCreate>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	4a2a      	ldr	r2, [pc, #168]	@ (8004da4 <MX_FREERTOS_Init+0xd8>)
 8004cfc:	6013      	str	r3, [r2, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, blackbox, osPriorityLow, 0, 512);
 8004cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8004da8 <MX_FREERTOS_Init+0xdc>)
 8004d00:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8004d04:	461d      	mov	r5, r3
 8004d06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004d0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 8004d12:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004d16:	2100      	movs	r1, #0
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f00d fb72 	bl	8012402 <osThreadCreate>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	4a22      	ldr	r2, [pc, #136]	@ (8004dac <MX_FREERTOS_Init+0xe0>)
 8004d22:	6013      	str	r3, [r2, #0]

  /* definition and creation of task3 */
  osThreadDef(task3, led_indicate, osPriorityLow, 0, 128);
 8004d24:	4b22      	ldr	r3, [pc, #136]	@ (8004db0 <MX_FREERTOS_Init+0xe4>)
 8004d26:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8004d2a:	461d      	mov	r5, r3
 8004d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004d34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task3Handle = osThreadCreate(osThread(task3), NULL);
 8004d38:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f00d fb5f 	bl	8012402 <osThreadCreate>
 8004d44:	4603      	mov	r3, r0
 8004d46:	4a1b      	ldr	r2, [pc, #108]	@ (8004db4 <MX_FREERTOS_Init+0xe8>)
 8004d48:	6013      	str	r3, [r2, #0]

  /* definition and creation of task4 */
  osThreadDef(task4, read_sensor, osPriorityRealtime, 0, 128);
 8004d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8004db8 <MX_FREERTOS_Init+0xec>)
 8004d4c:	f107 0420 	add.w	r4, r7, #32
 8004d50:	461d      	mov	r5, r3
 8004d52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004d5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task4Handle = osThreadCreate(osThread(task4), NULL);
 8004d5e:	f107 0320 	add.w	r3, r7, #32
 8004d62:	2100      	movs	r1, #0
 8004d64:	4618      	mov	r0, r3
 8004d66:	f00d fb4c 	bl	8012402 <osThreadCreate>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	4a13      	ldr	r2, [pc, #76]	@ (8004dbc <MX_FREERTOS_Init+0xf0>)
 8004d6e:	6013      	str	r3, [r2, #0]

  /* definition and creation of task5 */
  osThreadDef(task5, mavlinkOSD, osPriorityNormal, 0, 128);
 8004d70:	4b13      	ldr	r3, [pc, #76]	@ (8004dc0 <MX_FREERTOS_Init+0xf4>)
 8004d72:	1d3c      	adds	r4, r7, #4
 8004d74:	461d      	mov	r5, r3
 8004d76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004d7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task5Handle = osThreadCreate(osThread(task5), NULL);
 8004d82:	1d3b      	adds	r3, r7, #4
 8004d84:	2100      	movs	r1, #0
 8004d86:	4618      	mov	r0, r3
 8004d88:	f00d fb3b 	bl	8012402 <osThreadCreate>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	4a0d      	ldr	r2, [pc, #52]	@ (8004dc4 <MX_FREERTOS_Init+0xf8>)
 8004d90:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8004d92:	bf00      	nop
 8004d94:	3790      	adds	r7, #144	@ 0x90
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bdb0      	pop	{r4, r5, r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	20000a04 	.word	0x20000a04
 8004da0:	08015d10 	.word	0x08015d10
 8004da4:	200005a4 	.word	0x200005a4
 8004da8:	08015d34 	.word	0x08015d34
 8004dac:	200005a8 	.word	0x200005a8
 8004db0:	08015d58 	.word	0x08015d58
 8004db4:	200005ac 	.word	0x200005ac
 8004db8:	08015d7c 	.word	0x08015d7c
 8004dbc:	200005b0 	.word	0x200005b0
 8004dc0:	08015da0 	.word	0x08015da0
 8004dc4:	200005b4 	.word	0x200005b4

08004dc8 <ahrs_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ahrs_task */
void ahrs_task(void const * argument)
{
 8004dc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004dcc:	b08b      	sub	sp, #44	@ 0x2c
 8004dce:	af06      	add	r7, sp, #24
 8004dd0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ahrs_task */
	ibus_init(&huart2);
 8004dd2:	484b      	ldr	r0, [pc, #300]	@ (8004f00 <ahrs_task+0x138>)
 8004dd4:	f7fd f962 	bl	800209c <ibus_init>
	gps_init(&huart3,57600);
 8004dd8:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8004ddc:	4849      	ldr	r0, [pc, #292]	@ (8004f04 <ahrs_task+0x13c>)
 8004dde:	f7fe f94d 	bl	800307c <gps_init>
	attitude_ctrl_init();
 8004de2:	f001 fd5d 	bl	80068a0 <attitude_ctrl_init>
	initPWM(&htim3);
 8004de6:	4848      	ldr	r0, [pc, #288]	@ (8004f08 <ahrs_task+0x140>)
 8004de8:	f7ff fe2e 	bl	8004a48 <initPWM>
    baro_init();
 8004dec:	f7fd fbfe 	bl	80025ec <baro_init>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10; // 100 hz loop
 8004df0:	230a      	movs	r3, #10
 8004df2:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 8004df4:	f00e ff44 	bl	8013c80 <xTaskGetTickCount>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4); // for debug
	//timer_calculate_boottime();
    if(is_baro_calibration() == FALSE){
 8004dfc:	f7fd fc54 	bl	80026a8 <is_baro_calibration>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <ahrs_task+0x42>
		baro_zero_calibrate();
 8004e06:	f7fd fc17 	bl	8002638 <baro_zero_calibrate>
	}
    alt_baro = baro_get_altitude();
 8004e0a:	f7fd fc59 	bl	80026c0 <baro_get_altitude>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	4a3e      	ldr	r2, [pc, #248]	@ (8004f0c <ahrs_task+0x144>)
 8004e12:	6013      	str	r3, [r2, #0]
    ibusFrameComplete();
 8004e14:	f7fd f9d0 	bl	80021b8 <ibusFrameComplete>
    update_ahrs(gyro_imu[0],gyro_imu[1],gyro_imu[2],acc_imu[0],acc_imu[1],acc_imu[2],mag_raw[0],mag_raw[1],mag_raw[2],micros());
 8004e18:	4b3d      	ldr	r3, [pc, #244]	@ (8004f10 <ahrs_task+0x148>)
 8004e1a:	f9b3 c000 	ldrsh.w	ip, [r3]
 8004e1e:	4b3c      	ldr	r3, [pc, #240]	@ (8004f10 <ahrs_task+0x148>)
 8004e20:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8004e24:	4b3a      	ldr	r3, [pc, #232]	@ (8004f10 <ahrs_task+0x148>)
 8004e26:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 8004e2a:	4b3a      	ldr	r3, [pc, #232]	@ (8004f14 <ahrs_task+0x14c>)
 8004e2c:	f9b3 9000 	ldrsh.w	r9, [r3]
 8004e30:	4b38      	ldr	r3, [pc, #224]	@ (8004f14 <ahrs_task+0x14c>)
 8004e32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e36:	4a37      	ldr	r2, [pc, #220]	@ (8004f14 <ahrs_task+0x14c>)
 8004e38:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8004e3c:	4936      	ldr	r1, [pc, #216]	@ (8004f18 <ahrs_task+0x150>)
 8004e3e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8004e42:	4835      	ldr	r0, [pc, #212]	@ (8004f18 <ahrs_task+0x150>)
 8004e44:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8004e48:	4c33      	ldr	r4, [pc, #204]	@ (8004f18 <ahrs_task+0x150>)
 8004e4a:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 8004e4e:	4d33      	ldr	r5, [pc, #204]	@ (8004f1c <ahrs_task+0x154>)
 8004e50:	682d      	ldr	r5, [r5, #0]
 8004e52:	682d      	ldr	r5, [r5, #0]
 8004e54:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8004e56:	4d32      	ldr	r5, [pc, #200]	@ (8004f20 <ahrs_task+0x158>)
 8004e58:	682d      	ldr	r5, [r5, #0]
 8004e5a:	4435      	add	r5, r6
 8004e5c:	9505      	str	r5, [sp, #20]
 8004e5e:	9404      	str	r4, [sp, #16]
 8004e60:	9003      	str	r0, [sp, #12]
 8004e62:	9102      	str	r1, [sp, #8]
 8004e64:	9201      	str	r2, [sp, #4]
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	464b      	mov	r3, r9
 8004e6a:	4642      	mov	r2, r8
 8004e6c:	4671      	mov	r1, lr
 8004e6e:	4660      	mov	r0, ip
 8004e70:	f7fe fc1e 	bl	80036b0 <update_ahrs>
    attitude_ctrl(micros());
 8004e74:	4b29      	ldr	r3, [pc, #164]	@ (8004f1c <ahrs_task+0x154>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e7c:	4b28      	ldr	r3, [pc, #160]	@ (8004f20 <ahrs_task+0x158>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4413      	add	r3, r2
 8004e82:	4618      	mov	r0, r3
 8004e84:	f001 fd84 	bl	8006990 <attitude_ctrl>

    /*** Altitude estimate ****/
    static int8_t count_ = 0;
	if(count_ >= 9){
 8004e88:	4b26      	ldr	r3, [pc, #152]	@ (8004f24 <ahrs_task+0x15c>)
 8004e8a:	f993 3000 	ldrsb.w	r3, [r3]
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	dd07      	ble.n	8004ea2 <ahrs_task+0xda>
		altitude_estimate(0.1);
 8004e92:	a119      	add	r1, pc, #100	@ (adr r1, 8004ef8 <ahrs_task+0x130>)
 8004e94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e98:	f002 f93a 	bl	8007110 <altitude_estimate>
		count_ = 0;
 8004e9c:	4b21      	ldr	r3, [pc, #132]	@ (8004f24 <ahrs_task+0x15c>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	701a      	strb	r2, [r3, #0]
	}
	count_ ++;
 8004ea2:	4b20      	ldr	r3, [pc, #128]	@ (8004f24 <ahrs_task+0x15c>)
 8004ea4:	f993 3000 	ldrsb.w	r3, [r3]
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	3301      	adds	r3, #1
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	b25a      	sxtb	r2, r3
 8004eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8004f24 <ahrs_task+0x15c>)
 8004eb2:	701a      	strb	r2, [r3, #0]

    if(ibusChannelData[CH5] < CHANNEL_HIGH ){
 8004eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8004f28 <ahrs_task+0x160>)
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d808      	bhi.n	8004ed2 <ahrs_task+0x10a>
    	 vTaskSuspend(task2Handle);
 8004ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f2c <ahrs_task+0x164>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f00e fc9f 	bl	8013808 <vTaskSuspend>
    	 black_box_reset = TRUE;
 8004eca:	4b19      	ldr	r3, [pc, #100]	@ (8004f30 <ahrs_task+0x168>)
 8004ecc:	2201      	movs	r2, #1
 8004ece:	701a      	strb	r2, [r3, #0]
 8004ed0:	e004      	b.n	8004edc <ahrs_task+0x114>
    }else{
    	 vTaskResume(task2Handle);
 8004ed2:	4b16      	ldr	r3, [pc, #88]	@ (8004f2c <ahrs_task+0x164>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f00e fd66 	bl	80139a8 <vTaskResume>
    }

    //vTaskSuspend(NULL);
    vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8004edc:	f107 0308 	add.w	r3, r7, #8
 8004ee0:	68f9      	ldr	r1, [r7, #12]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f00e fbda 	bl	801369c <vTaskDelayUntil>
    stack_task_ahrs = uxTaskGetStackHighWaterMark( NULL );
 8004ee8:	2000      	movs	r0, #0
 8004eea:	f00f f9a3 	bl	8014234 <uxTaskGetStackHighWaterMark>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	4b10      	ldr	r3, [pc, #64]	@ (8004f34 <ahrs_task+0x16c>)
 8004ef4:	801a      	strh	r2, [r3, #0]
  {
 8004ef6:	e781      	b.n	8004dfc <ahrs_task+0x34>
 8004ef8:	9999999a 	.word	0x9999999a
 8004efc:	3fb99999 	.word	0x3fb99999
 8004f00:	20000a94 	.word	0x20000a94
 8004f04:	20000adc 	.word	0x20000adc
 8004f08:	200009bc 	.word	0x200009bc
 8004f0c:	20000818 	.word	0x20000818
 8004f10:	2000081c 	.word	0x2000081c
 8004f14:	20000824 	.word	0x20000824
 8004f18:	2000082c 	.word	0x2000082c
 8004f1c:	2000059c 	.word	0x2000059c
 8004f20:	200005a0 	.word	0x200005a0
 8004f24:	2000083c 	.word	0x2000083c
 8004f28:	20000118 	.word	0x20000118
 8004f2c:	200005a8 	.word	0x200005a8
 8004f30:	20000832 	.word	0x20000832
 8004f34:	2000080c 	.word	0x2000080c

08004f38 <blackbox>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blackbox */
void blackbox(void const * argument)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08c      	sub	sp, #48	@ 0x30
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blackbox */

	//vTaskSuspend(NULL);
	black_box_init();
 8004f40:	f7fd fbd8 	bl	80026f4 <black_box_init>
	black_box_reset = TRUE;
 8004f44:	4bbe      	ldr	r3, [pc, #760]	@ (8005240 <blackbox+0x308>)
 8004f46:	2201      	movs	r2, #1
 8004f48:	701a      	strb	r2, [r3, #0]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50;  // 25 ms
 8004f4a:	2332      	movs	r3, #50	@ 0x32
 8004f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	xLastWakeTime = xTaskGetTickCount();
 8004f4e:	f00e fe97 	bl	8013c80 <xTaskGetTickCount>
 8004f52:	4603      	mov	r3, r0
 8004f54:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	static uint32_t start_time_ms;
	uint32_t current_time = micros();
 8004f56:	4bbb      	ldr	r3, [pc, #748]	@ (8005244 <blackbox+0x30c>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f5e:	4bba      	ldr	r3, [pc, #744]	@ (8005248 <blackbox+0x310>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4413      	add	r3, r2
 8004f64:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(black_box_reset){
 8004f66:	4bb6      	ldr	r3, [pc, #728]	@ (8005240 <blackbox+0x308>)
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d012      	beq.n	8004f94 <blackbox+0x5c>
    	black_box_pack_str("----------------------------new data----------------------------------------------------------------\n");
 8004f6e:	48b7      	ldr	r0, [pc, #732]	@ (800524c <blackbox+0x314>)
 8004f70:	f7fd fc92 	bl	8002898 <black_box_pack_str>
    	black_box_reset = FALSE;
 8004f74:	4bb2      	ldr	r3, [pc, #712]	@ (8005240 <blackbox+0x308>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	701a      	strb	r2, [r3, #0]
    	start_time_ms = millis();
 8004f7a:	4bb2      	ldr	r3, [pc, #712]	@ (8005244 <blackbox+0x30c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f82:	4bb1      	ldr	r3, [pc, #708]	@ (8005248 <blackbox+0x310>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4413      	add	r3, r2
 8004f88:	4ab1      	ldr	r2, [pc, #708]	@ (8005250 <blackbox+0x318>)
 8004f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8e:	099b      	lsrs	r3, r3, #6
 8004f90:	4ab0      	ldr	r2, [pc, #704]	@ (8005254 <blackbox+0x31c>)
 8004f92:	6013      	str	r3, [r2, #0]
    }
    uint32_t time_ms =  millis() - start_time_ms;
 8004f94:	4bab      	ldr	r3, [pc, #684]	@ (8005244 <blackbox+0x30c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f9c:	4baa      	ldr	r3, [pc, #680]	@ (8005248 <blackbox+0x310>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	4aab      	ldr	r2, [pc, #684]	@ (8005250 <blackbox+0x318>)
 8004fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa8:	099a      	lsrs	r2, r3, #6
 8004faa:	4baa      	ldr	r3, [pc, #680]	@ (8005254 <blackbox+0x31c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	627b      	str	r3, [r7, #36]	@ 0x24

	// control thortle 0 -> 100%
	int throtle = ((int)ibusChannelData[CH3] - 1000)*0.1;
 8004fb2:	4ba9      	ldr	r3, [pc, #676]	@ (8005258 <blackbox+0x320>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fb fa8a 	bl	80004d4 <__aeabi_i2d>
 8004fc0:	a39d      	add	r3, pc, #628	@ (adr r3, 8005238 <blackbox+0x300>)
 8004fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc6:	f7fb faef 	bl	80005a8 <__aeabi_dmul>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	4610      	mov	r0, r2
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	f7fb fd99 	bl	8000b08 <__aeabi_d2iz>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	623b      	str	r3, [r7, #32]

	// tx signal 0 -> 100 %
	int srri = ((int)ibusChannelData[CH11] - 1000)*0.1;
 8004fda:	4b9f      	ldr	r3, [pc, #636]	@ (8005258 <blackbox+0x320>)
 8004fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fde:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fb fa76 	bl	80004d4 <__aeabi_i2d>
 8004fe8:	a393      	add	r3, pc, #588	@ (adr r3, 8005238 <blackbox+0x300>)
 8004fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fee:	f7fb fadb 	bl	80005a8 <__aeabi_dmul>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	f7fb fd85 	bl	8000b08 <__aeabi_d2iz>
 8004ffe:	4603      	mov	r3, r0
 8005000:	61fb      	str	r3, [r7, #28]

	/*** write time  ***/
    black_box_pack_int(time_ms);
 8005002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005004:	4618      	mov	r0, r3
 8005006:	f7fd fbaf 	bl	8002768 <black_box_pack_int>
    black_box_pack_char(' ');
 800500a:	2020      	movs	r0, #32
 800500c:	f7fd fc7c 	bl	8002908 <black_box_pack_char>

	/*---- control parameters ---*/
	black_box_pack_int((int)servoL);
 8005010:	4b92      	ldr	r3, [pc, #584]	@ (800525c <blackbox+0x324>)
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	4618      	mov	r0, r3
 8005016:	f7fd fba7 	bl	8002768 <black_box_pack_int>
    black_box_pack_char(' ');
 800501a:	2020      	movs	r0, #32
 800501c:	f7fd fc74 	bl	8002908 <black_box_pack_char>
	black_box_pack_int((int)servoR);
 8005020:	4b8f      	ldr	r3, [pc, #572]	@ (8005260 <blackbox+0x328>)
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	4618      	mov	r0, r3
 8005026:	f7fd fb9f 	bl	8002768 <black_box_pack_int>
    black_box_pack_char(' ');
 800502a:	2020      	movs	r0, #32
 800502c:	f7fd fc6c 	bl	8002908 <black_box_pack_char>
	black_box_pack_int(throtle);
 8005030:	6a38      	ldr	r0, [r7, #32]
 8005032:	f7fd fb99 	bl	8002768 <black_box_pack_int>
    black_box_pack_char(' ');
 8005036:	2020      	movs	r0, #32
 8005038:	f7fd fc66 	bl	8002908 <black_box_pack_char>
	black_box_pack_int(srri);
 800503c:	69f8      	ldr	r0, [r7, #28]
 800503e:	f7fd fb93 	bl	8002768 <black_box_pack_int>
    black_box_pack_char(' ');
 8005042:	2020      	movs	r0, #32
 8005044:	f7fd fc60 	bl	8002908 <black_box_pack_char>


	/*----- atitude ---------------------*/
	black_box_pack_int((int)(AHRS.roll*100));
 8005048:	4b86      	ldr	r3, [pc, #536]	@ (8005264 <blackbox+0x32c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4986      	ldr	r1, [pc, #536]	@ (8005268 <blackbox+0x330>)
 800504e:	4618      	mov	r0, r3
 8005050:	f7fb ff00 	bl	8000e54 <__aeabi_fmul>
 8005054:	4603      	mov	r3, r0
 8005056:	4618      	mov	r0, r3
 8005058:	f7fc f8d8 	bl	800120c <__aeabi_f2iz>
 800505c:	4603      	mov	r3, r0
 800505e:	4618      	mov	r0, r3
 8005060:	f7fd fb82 	bl	8002768 <black_box_pack_int>
	black_box_pack_char(' ');
 8005064:	2020      	movs	r0, #32
 8005066:	f7fd fc4f 	bl	8002908 <black_box_pack_char>
	black_box_pack_int((int)(roll_desired*100));
 800506a:	4b80      	ldr	r3, [pc, #512]	@ (800526c <blackbox+0x334>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	497e      	ldr	r1, [pc, #504]	@ (8005268 <blackbox+0x330>)
 8005070:	4618      	mov	r0, r3
 8005072:	f7fb feef 	bl	8000e54 <__aeabi_fmul>
 8005076:	4603      	mov	r3, r0
 8005078:	4618      	mov	r0, r3
 800507a:	f7fc f8c7 	bl	800120c <__aeabi_f2iz>
 800507e:	4603      	mov	r3, r0
 8005080:	4618      	mov	r0, r3
 8005082:	f7fd fb71 	bl	8002768 <black_box_pack_int>
	black_box_pack_char(' ');
 8005086:	2020      	movs	r0, #32
 8005088:	f7fd fc3e 	bl	8002908 <black_box_pack_char>
	black_box_pack_int((int)(AHRS.pitch*100));// cm
 800508c:	4b75      	ldr	r3, [pc, #468]	@ (8005264 <blackbox+0x32c>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	4975      	ldr	r1, [pc, #468]	@ (8005268 <blackbox+0x330>)
 8005092:	4618      	mov	r0, r3
 8005094:	f7fb fede 	bl	8000e54 <__aeabi_fmul>
 8005098:	4603      	mov	r3, r0
 800509a:	4618      	mov	r0, r3
 800509c:	f7fc f8b6 	bl	800120c <__aeabi_f2iz>
 80050a0:	4603      	mov	r3, r0
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fd fb60 	bl	8002768 <black_box_pack_int>
	black_box_pack_char(' ');
 80050a8:	2020      	movs	r0, #32
 80050aa:	f7fd fc2d 	bl	8002908 <black_box_pack_char>
	black_box_pack_int((int)(pitch_desired*100));
 80050ae:	4b70      	ldr	r3, [pc, #448]	@ (8005270 <blackbox+0x338>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	496d      	ldr	r1, [pc, #436]	@ (8005268 <blackbox+0x330>)
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fb fecd 	bl	8000e54 <__aeabi_fmul>
 80050ba:	4603      	mov	r3, r0
 80050bc:	4618      	mov	r0, r3
 80050be:	f7fc f8a5 	bl	800120c <__aeabi_f2iz>
 80050c2:	4603      	mov	r3, r0
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7fd fb4f 	bl	8002768 <black_box_pack_int>
	black_box_pack_char(' ');
 80050ca:	2020      	movs	r0, #32
 80050cc:	f7fd fc1c 	bl	8002908 <black_box_pack_char>
	black_box_pack_int((int)(v_estimate*100));
 80050d0:	4b68      	ldr	r3, [pc, #416]	@ (8005274 <blackbox+0x33c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4964      	ldr	r1, [pc, #400]	@ (8005268 <blackbox+0x330>)
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fb febc 	bl	8000e54 <__aeabi_fmul>
 80050dc:	4603      	mov	r3, r0
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fc f894 	bl	800120c <__aeabi_f2iz>
 80050e4:	4603      	mov	r3, r0
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fd fb3e 	bl	8002768 <black_box_pack_int>
	black_box_pack_char(' ');
 80050ec:	2020      	movs	r0, #32
 80050ee:	f7fd fc0b 	bl	8002908 <black_box_pack_char>

	/*------- GPS ----------------------*/
	int16_t vx = _gps.velocity[0];  // cm/s
 80050f2:	4b61      	ldr	r3, [pc, #388]	@ (8005278 <blackbox+0x340>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	837b      	strh	r3, [r7, #26]
    int16_t vy = _gps.velocity[1];  // cm/s
 80050f8:	4b5f      	ldr	r3, [pc, #380]	@ (8005278 <blackbox+0x340>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	833b      	strh	r3, [r7, #24]
    int16_t vz = _gps.velocity[2];  // cm/s
 80050fe:	4b5e      	ldr	r3, [pc, #376]	@ (8005278 <blackbox+0x340>)
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	82fb      	strh	r3, [r7, #22]
    int32_t ground_speed = sqrt(sq(vx) + sq(vy) + sq(vz)) ;
 8005104:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005108:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800510c:	fb03 f202 	mul.w	r2, r3, r2
 8005110:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005114:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 8005118:	fb01 f303 	mul.w	r3, r1, r3
 800511c:	441a      	add	r2, r3
 800511e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005122:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8005126:	fb01 f303 	mul.w	r3, r1, r3
 800512a:	4413      	add	r3, r2
 800512c:	4618      	mov	r0, r3
 800512e:	f7fb f9d1 	bl	80004d4 <__aeabi_i2d>
 8005132:	4602      	mov	r2, r0
 8005134:	460b      	mov	r3, r1
 8005136:	4610      	mov	r0, r2
 8005138:	4619      	mov	r1, r3
 800513a:	f010 f823 	bl	8015184 <sqrt>
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	4610      	mov	r0, r2
 8005144:	4619      	mov	r1, r3
 8005146:	f7fb fcdf 	bl	8000b08 <__aeabi_d2iz>
 800514a:	4603      	mov	r3, r0
 800514c:	613b      	str	r3, [r7, #16]

	black_box_pack_int(_gps.position[0]);
 800514e:	4b4a      	ldr	r3, [pc, #296]	@ (8005278 <blackbox+0x340>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f7fd fb08 	bl	8002768 <black_box_pack_int>
	black_box_pack_char(' ');
 8005158:	2020      	movs	r0, #32
 800515a:	f7fd fbd5 	bl	8002908 <black_box_pack_char>
	black_box_pack_int(_gps.position[1]);
 800515e:	4b46      	ldr	r3, [pc, #280]	@ (8005278 <blackbox+0x340>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	4618      	mov	r0, r3
 8005164:	f7fd fb00 	bl	8002768 <black_box_pack_int>
	black_box_pack_char(' ');
 8005168:	2020      	movs	r0, #32
 800516a:	f7fd fbcd 	bl	8002908 <black_box_pack_char>
	black_box_pack_int(_gps.altitude_msl);
 800516e:	4b42      	ldr	r3, [pc, #264]	@ (8005278 <blackbox+0x340>)
 8005170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005172:	4618      	mov	r0, r3
 8005174:	f7fd faf8 	bl	8002768 <black_box_pack_int>
	black_box_pack_char(' ');
 8005178:	2020      	movs	r0, #32
 800517a:	f7fd fbc5 	bl	8002908 <black_box_pack_char>
	black_box_pack_int(_gps.numSat);
 800517e:	4b3e      	ldr	r3, [pc, #248]	@ (8005278 <blackbox+0x340>)
 8005180:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005184:	4618      	mov	r0, r3
 8005186:	f7fd faef 	bl	8002768 <black_box_pack_int>
	black_box_pack_char(' ');
 800518a:	2020      	movs	r0, #32
 800518c:	f7fd fbbc 	bl	8002908 <black_box_pack_char>
	black_box_pack_int(_gps.fix);
 8005190:	4b39      	ldr	r3, [pc, #228]	@ (8005278 <blackbox+0x340>)
 8005192:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8005196:	4618      	mov	r0, r3
 8005198:	f7fd fae6 	bl	8002768 <black_box_pack_int>
	black_box_pack_char(' ');
 800519c:	2020      	movs	r0, #32
 800519e:	f7fd fbb3 	bl	8002908 <black_box_pack_char>
	black_box_pack_int(ground_speed);
 80051a2:	6938      	ldr	r0, [r7, #16]
 80051a4:	f7fd fae0 	bl	8002768 <black_box_pack_int>
	black_box_pack_char(' ');
 80051a8:	2020      	movs	r0, #32
 80051aa:	f7fd fbad 	bl	8002908 <black_box_pack_char>
	black_box_pack_int(vz);
 80051ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fd fad8 	bl	8002768 <black_box_pack_int>

	/*---- estimate ---------------------------*/
	black_box_pack_char(' ');
 80051b8:	2020      	movs	r0, #32
 80051ba:	f7fd fba5 	bl	8002908 <black_box_pack_char>
	black_box_pack_int((int)(alt_estimate*100)); //cm
 80051be:	4b2f      	ldr	r3, [pc, #188]	@ (800527c <blackbox+0x344>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4929      	ldr	r1, [pc, #164]	@ (8005268 <blackbox+0x330>)
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7fb fe45 	bl	8000e54 <__aeabi_fmul>
 80051ca:	4603      	mov	r3, r0
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7fc f81d 	bl	800120c <__aeabi_f2iz>
 80051d2:	4603      	mov	r3, r0
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7fd fac7 	bl	8002768 <black_box_pack_int>
	black_box_pack_char(' '); 
 80051da:	2020      	movs	r0, #32
 80051dc:	f7fd fb94 	bl	8002908 <black_box_pack_char>
	black_box_pack_int((int)(climb_rate*100));   // cm/s
 80051e0:	4b27      	ldr	r3, [pc, #156]	@ (8005280 <blackbox+0x348>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4920      	ldr	r1, [pc, #128]	@ (8005268 <blackbox+0x330>)
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fb fe34 	bl	8000e54 <__aeabi_fmul>
 80051ec:	4603      	mov	r3, r0
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fc f80c 	bl	800120c <__aeabi_f2iz>
 80051f4:	4603      	mov	r3, r0
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fd fab6 	bl	8002768 <black_box_pack_int>
	black_box_pack_char(' '); 
 80051fc:	2020      	movs	r0, #32
 80051fe:	f7fd fb83 	bl	8002908 <black_box_pack_char>
	black_box_pack_int(alt_baro);   // cm
 8005202:	4b20      	ldr	r3, [pc, #128]	@ (8005284 <blackbox+0x34c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4618      	mov	r0, r3
 8005208:	f7fd faae 	bl	8002768 <black_box_pack_int>

	/*----- end line && load data to sd card- -----*/
	sdcard_fsize = black_box_get_file_size();
 800520c:	f7fd faa0 	bl	8002750 <black_box_get_file_size>
 8005210:	4603      	mov	r3, r0
 8005212:	4a1d      	ldr	r2, [pc, #116]	@ (8005288 <blackbox+0x350>)
 8005214:	6013      	str	r3, [r2, #0]
	black_box_pack_char('\n');
 8005216:	200a      	movs	r0, #10
 8005218:	f7fd fb76 	bl	8002908 <black_box_pack_char>
	black_box_load();
 800521c:	f7fd fb8e 	bl	800293c <black_box_load>

	write_time = micros() - current_time;
 8005220:	4b08      	ldr	r3, [pc, #32]	@ (8005244 <blackbox+0x30c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005228:	4b07      	ldr	r3, [pc, #28]	@ (8005248 <blackbox+0x310>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	441a      	add	r2, r3
 800522e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	4a16      	ldr	r2, [pc, #88]	@ (800528c <blackbox+0x354>)
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	e02b      	b.n	8005290 <blackbox+0x358>
 8005238:	9999999a 	.word	0x9999999a
 800523c:	3fb99999 	.word	0x3fb99999
 8005240:	20000832 	.word	0x20000832
 8005244:	2000059c 	.word	0x2000059c
 8005248:	200005a0 	.word	0x200005a0
 800524c:	08015dbc 	.word	0x08015dbc
 8005250:	10624dd3 	.word	0x10624dd3
 8005254:	20000840 	.word	0x20000840
 8005258:	20000118 	.word	0x20000118
 800525c:	20000b70 	.word	0x20000b70
 8005260:	20000b72 	.word	0x20000b72
 8005264:	2000051c 	.word	0x2000051c
 8005268:	42c80000 	.word	0x42c80000
 800526c:	20000b68 	.word	0x20000b68
 8005270:	20000b6c 	.word	0x20000b6c
 8005274:	20000c68 	.word	0x20000c68
 8005278:	200003f4 	.word	0x200003f4
 800527c:	20000c78 	.word	0x20000c78
 8005280:	20000c7c 	.word	0x20000c7c
 8005284:	20000818 	.word	0x20000818
 8005288:	20000838 	.word	0x20000838
 800528c:	20000834 	.word	0x20000834
	if(write_time > 10 && puts_state != -1){
 8005290:	4b0d      	ldr	r3, [pc, #52]	@ (80052c8 <blackbox+0x390>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b0a      	cmp	r3, #10
 8005296:	d908      	bls.n	80052aa <blackbox+0x372>
 8005298:	4b0c      	ldr	r3, [pc, #48]	@ (80052cc <blackbox+0x394>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a0:	d003      	beq.n	80052aa <blackbox+0x372>
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80052a2:	2110      	movs	r1, #16
 80052a4:	480a      	ldr	r0, [pc, #40]	@ (80052d0 <blackbox+0x398>)
 80052a6:	f003 fbce 	bl	8008a46 <HAL_GPIO_TogglePin>
	}

	vTaskDelayUntil( &xLastWakeTime, xFrequency);
 80052aa:	f107 030c 	add.w	r3, r7, #12
 80052ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052b0:	4618      	mov	r0, r3
 80052b2:	f00e f9f3 	bl	801369c <vTaskDelayUntil>
    stack_task_blackbox = uxTaskGetStackHighWaterMark( NULL );
 80052b6:	2000      	movs	r0, #0
 80052b8:	f00e ffbc 	bl	8014234 <uxTaskGetStackHighWaterMark>
 80052bc:	4603      	mov	r3, r0
 80052be:	b29a      	uxth	r2, r3
 80052c0:	4b04      	ldr	r3, [pc, #16]	@ (80052d4 <blackbox+0x39c>)
 80052c2:	801a      	strh	r2, [r3, #0]
  {
 80052c4:	e647      	b.n	8004f56 <blackbox+0x1e>
 80052c6:	bf00      	nop
 80052c8:	20000834 	.word	0x20000834
 80052cc:	200003a8 	.word	0x200003a8
 80052d0:	40010800 	.word	0x40010800
 80052d4:	20000814 	.word	0x20000814

080052d8 <led_indicate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_indicate */
void led_indicate(void const * argument)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
		delay = 500;
		vTaskSuspend(task2Handle);
	}
	*/
	if(_gps.fix > 1){
 80052e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005314 <led_indicate+0x3c>)
 80052e2:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d903      	bls.n	80052f2 <led_indicate+0x1a>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80052ea:	2120      	movs	r1, #32
 80052ec:	480a      	ldr	r0, [pc, #40]	@ (8005318 <led_indicate+0x40>)
 80052ee:	f003 fbaa 	bl	8008a46 <HAL_GPIO_TogglePin>
	}
	stack_task_led = uxTaskGetStackHighWaterMark( NULL );
 80052f2:	2000      	movs	r0, #0
 80052f4:	f00e ff9e 	bl	8014234 <uxTaskGetStackHighWaterMark>
 80052f8:	4603      	mov	r3, r0
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	4b07      	ldr	r3, [pc, #28]	@ (800531c <led_indicate+0x44>)
 80052fe:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8005300:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005304:	4806      	ldr	r0, [pc, #24]	@ (8005320 <led_indicate+0x48>)
 8005306:	f003 fb9e 	bl	8008a46 <HAL_GPIO_TogglePin>
    osDelay(100);
 800530a:	2064      	movs	r0, #100	@ 0x64
 800530c:	f00d f8c5 	bl	801249a <osDelay>
	if(_gps.fix > 1){
 8005310:	e7e6      	b.n	80052e0 <led_indicate+0x8>
 8005312:	bf00      	nop
 8005314:	200003f4 	.word	0x200003f4
 8005318:	40010800 	.word	0x40010800
 800531c:	2000080e 	.word	0x2000080e
 8005320:	40011000 	.word	0x40011000
 8005324:	00000000 	.word	0x00000000

08005328 <read_sensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_sensor */
void read_sensor(void const * argument)
{
 8005328:	b5b0      	push	{r4, r5, r7, lr}
 800532a:	b08e      	sub	sp, #56	@ 0x38
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN read_sensor */
  /* Infinite loop */
	int16_t gyso_offset[3] = {0,0,0};
 8005330:	2300      	movs	r3, #0
 8005332:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005334:	2300      	movs	r3, #0
 8005336:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005338:	2300      	movs	r3, #0
 800533a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	axis3_t raw;
	uint8_t sample_count = 0;
 800533c:	2300      	movs	r3, #0
 800533e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	int32_t gyro_add[3] = {0,0,0};
 8005342:	2300      	movs	r3, #0
 8005344:	617b      	str	r3, [r7, #20]
 8005346:	2300      	movs	r3, #0
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	2300      	movs	r3, #0
 800534c:	61fb      	str	r3, [r7, #28]
	uint8_t first_loop = 1;
 800534e:	2301      	movs	r3, #1
 8005350:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	compassInit();
 8005354:	f7fd fb8c 	bl	8002a70 <compassInit>
	mpu6050_init(&hi2c2);
 8005358:	488f      	ldr	r0, [pc, #572]	@ (8005598 <read_sensor+0x270>)
 800535a:	f7fd f813 	bl	8002384 <mpu6050_init>
	HAL_Delay(2000);
 800535e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8005362:	f002 fc25 	bl	8007bb0 <HAL_Delay>
	imu_calibrate(&gyso_offset[0],&gyso_offset[1],&gyso_offset[2]);
 8005366:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800536a:	1d1a      	adds	r2, r3, #4
 800536c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005370:	1c99      	adds	r1, r3, #2
 8005372:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005376:	4618      	mov	r0, r3
 8005378:	f7fe f91e 	bl	80035b8 <imu_calibrate>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 2;
 800537c:	2302      	movs	r3, #2
 800537e:	633b      	str	r3, [r7, #48]	@ 0x30
	xLastWakeTime = xTaskGetTickCount();
 8005380:	f00e fc7e 	bl	8013c80 <xTaskGetTickCount>
 8005384:	4603      	mov	r3, r0
 8005386:	613b      	str	r3, [r7, #16]

	for(;;)
	{
		mpu6050_gyro_get_raw(&raw);
 8005388:	f107 0320 	add.w	r3, r7, #32
 800538c:	4618      	mov	r0, r3
 800538e:	f7fd f84b 	bl	8002428 <mpu6050_gyro_get_raw>
		gyro_add[0] += (raw.x - gyso_offset[0]);
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005398:	4619      	mov	r1, r3
 800539a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800539e:	1acb      	subs	r3, r1, r3
 80053a0:	4413      	add	r3, r2
 80053a2:	617b      	str	r3, [r7, #20]
		gyro_add[1] += (raw.y - gyso_offset[1]);
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80053aa:	4619      	mov	r1, r3
 80053ac:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80053b0:	1acb      	subs	r3, r1, r3
 80053b2:	4413      	add	r3, r2
 80053b4:	61bb      	str	r3, [r7, #24]
		gyro_add[2] += (raw.z - gyso_offset[2]);
 80053b6:	69fa      	ldr	r2, [r7, #28]
 80053b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80053bc:	4619      	mov	r1, r3
 80053be:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80053c2:	1acb      	subs	r3, r1, r3
 80053c4:	4413      	add	r3, r2
 80053c6:	61fb      	str	r3, [r7, #28]
		sample_count ++;
 80053c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80053cc:	3301      	adds	r3, #1
 80053ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if(sample_count >= 5){
 80053d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d937      	bls.n	800544a <read_sensor+0x122>
		   axis3_t mag;
		   compass_get(&mag);
 80053da:	f107 0308 	add.w	r3, r7, #8
 80053de:	4618      	mov	r0, r3
 80053e0:	f7fd fb82 	bl	8002ae8 <compass_get>
		   mag_raw[0] = mag.x;
 80053e4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80053e8:	4b6c      	ldr	r3, [pc, #432]	@ (800559c <read_sensor+0x274>)
 80053ea:	801a      	strh	r2, [r3, #0]
		   mag_raw[1] = mag.y;
 80053ec:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80053f0:	4b6a      	ldr	r3, [pc, #424]	@ (800559c <read_sensor+0x274>)
 80053f2:	805a      	strh	r2, [r3, #2]
		   mag_raw[2] = mag.z;
 80053f4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80053f8:	4b68      	ldr	r3, [pc, #416]	@ (800559c <read_sensor+0x274>)
 80053fa:	809a      	strh	r2, [r3, #4]

		   gyro_imu[0] = (int16_t)(gyro_add[0]/5);
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	4a68      	ldr	r2, [pc, #416]	@ (80055a0 <read_sensor+0x278>)
 8005400:	fb82 1203 	smull	r1, r2, r2, r3
 8005404:	1052      	asrs	r2, r2, #1
 8005406:	17db      	asrs	r3, r3, #31
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	b21a      	sxth	r2, r3
 800540c:	4b65      	ldr	r3, [pc, #404]	@ (80055a4 <read_sensor+0x27c>)
 800540e:	801a      	strh	r2, [r3, #0]
		   gyro_imu[1] = (int16_t)(gyro_add[1]/5);
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	4a63      	ldr	r2, [pc, #396]	@ (80055a0 <read_sensor+0x278>)
 8005414:	fb82 1203 	smull	r1, r2, r2, r3
 8005418:	1052      	asrs	r2, r2, #1
 800541a:	17db      	asrs	r3, r3, #31
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	b21a      	sxth	r2, r3
 8005420:	4b60      	ldr	r3, [pc, #384]	@ (80055a4 <read_sensor+0x27c>)
 8005422:	805a      	strh	r2, [r3, #2]
		   gyro_imu[2] = (int16_t)(gyro_add[2]/5);
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	4a5e      	ldr	r2, [pc, #376]	@ (80055a0 <read_sensor+0x278>)
 8005428:	fb82 1203 	smull	r1, r2, r2, r3
 800542c:	1052      	asrs	r2, r2, #1
 800542e:	17db      	asrs	r3, r3, #31
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	b21a      	sxth	r2, r3
 8005434:	4b5b      	ldr	r3, [pc, #364]	@ (80055a4 <read_sensor+0x27c>)
 8005436:	809a      	strh	r2, [r3, #4]
		   gyro_add[0] = 0;
 8005438:	2300      	movs	r3, #0
 800543a:	617b      	str	r3, [r7, #20]
		   gyro_add[1] = 0;
 800543c:	2300      	movs	r3, #0
 800543e:	61bb      	str	r3, [r7, #24]
		   gyro_add[2] = 0;
 8005440:	2300      	movs	r3, #0
 8005442:	61fb      	str	r3, [r7, #28]
		   sample_count = 0;
 8005444:	2300      	movs	r3, #0
 8005446:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		   //vTaskResume(task1Handle);
		}

		raw.x = 0;
 800544a:	2300      	movs	r3, #0
 800544c:	843b      	strh	r3, [r7, #32]
		raw.y = 0;
 800544e:	2300      	movs	r3, #0
 8005450:	847b      	strh	r3, [r7, #34]	@ 0x22
		raw.z = 0;
 8005452:	2300      	movs	r3, #0
 8005454:	84bb      	strh	r3, [r7, #36]	@ 0x24

		mpu6050_acc_get_raw(&raw);
 8005456:	f107 0320 	add.w	r3, r7, #32
 800545a:	4618      	mov	r0, r3
 800545c:	f7fd f820 	bl	80024a0 <mpu6050_acc_get_raw>
		if(first_loop){
 8005460:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00e      	beq.n	8005486 <read_sensor+0x15e>
			acc_imu[0] = raw.x;
 8005468:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800546c:	4b4e      	ldr	r3, [pc, #312]	@ (80055a8 <read_sensor+0x280>)
 800546e:	801a      	strh	r2, [r3, #0]
			acc_imu[1] = raw.y;
 8005470:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8005474:	4b4c      	ldr	r3, [pc, #304]	@ (80055a8 <read_sensor+0x280>)
 8005476:	805a      	strh	r2, [r3, #2]
			acc_imu[2] = raw.z;
 8005478:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800547c:	4b4a      	ldr	r3, [pc, #296]	@ (80055a8 <read_sensor+0x280>)
 800547e:	809a      	strh	r2, [r3, #4]
			first_loop = 0;
 8005480:	2300      	movs	r3, #0
 8005482:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		}
		// low pass filter
		acc_imu[0] += 0.1*(raw.x - acc_imu[0]);
 8005486:	4b48      	ldr	r3, [pc, #288]	@ (80055a8 <read_sensor+0x280>)
 8005488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800548c:	4618      	mov	r0, r3
 800548e:	f7fb f821 	bl	80004d4 <__aeabi_i2d>
 8005492:	4604      	mov	r4, r0
 8005494:	460d      	mov	r5, r1
 8005496:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800549a:	461a      	mov	r2, r3
 800549c:	4b42      	ldr	r3, [pc, #264]	@ (80055a8 <read_sensor+0x280>)
 800549e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7fb f815 	bl	80004d4 <__aeabi_i2d>
 80054aa:	a339      	add	r3, pc, #228	@ (adr r3, 8005590 <read_sensor+0x268>)
 80054ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b0:	f7fb f87a 	bl	80005a8 <__aeabi_dmul>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	4620      	mov	r0, r4
 80054ba:	4629      	mov	r1, r5
 80054bc:	f7fa febe 	bl	800023c <__adddf3>
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	4610      	mov	r0, r2
 80054c6:	4619      	mov	r1, r3
 80054c8:	f7fb fb1e 	bl	8000b08 <__aeabi_d2iz>
 80054cc:	4603      	mov	r3, r0
 80054ce:	b21a      	sxth	r2, r3
 80054d0:	4b35      	ldr	r3, [pc, #212]	@ (80055a8 <read_sensor+0x280>)
 80054d2:	801a      	strh	r2, [r3, #0]
		acc_imu[1] += 0.1*(raw.y - acc_imu[1]);
 80054d4:	4b34      	ldr	r3, [pc, #208]	@ (80055a8 <read_sensor+0x280>)
 80054d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fa fffa 	bl	80004d4 <__aeabi_i2d>
 80054e0:	4604      	mov	r4, r0
 80054e2:	460d      	mov	r5, r1
 80054e4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80054e8:	461a      	mov	r2, r3
 80054ea:	4b2f      	ldr	r3, [pc, #188]	@ (80055a8 <read_sensor+0x280>)
 80054ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fa ffee 	bl	80004d4 <__aeabi_i2d>
 80054f8:	a325      	add	r3, pc, #148	@ (adr r3, 8005590 <read_sensor+0x268>)
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	f7fb f853 	bl	80005a8 <__aeabi_dmul>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4620      	mov	r0, r4
 8005508:	4629      	mov	r1, r5
 800550a:	f7fa fe97 	bl	800023c <__adddf3>
 800550e:	4602      	mov	r2, r0
 8005510:	460b      	mov	r3, r1
 8005512:	4610      	mov	r0, r2
 8005514:	4619      	mov	r1, r3
 8005516:	f7fb faf7 	bl	8000b08 <__aeabi_d2iz>
 800551a:	4603      	mov	r3, r0
 800551c:	b21a      	sxth	r2, r3
 800551e:	4b22      	ldr	r3, [pc, #136]	@ (80055a8 <read_sensor+0x280>)
 8005520:	805a      	strh	r2, [r3, #2]
		acc_imu[2] += 0.1*(raw.z - acc_imu[2]);
 8005522:	4b21      	ldr	r3, [pc, #132]	@ (80055a8 <read_sensor+0x280>)
 8005524:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005528:	4618      	mov	r0, r3
 800552a:	f7fa ffd3 	bl	80004d4 <__aeabi_i2d>
 800552e:	4604      	mov	r4, r0
 8005530:	460d      	mov	r5, r1
 8005532:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8005536:	461a      	mov	r2, r3
 8005538:	4b1b      	ldr	r3, [pc, #108]	@ (80055a8 <read_sensor+0x280>)
 800553a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	4618      	mov	r0, r3
 8005542:	f7fa ffc7 	bl	80004d4 <__aeabi_i2d>
 8005546:	a312      	add	r3, pc, #72	@ (adr r3, 8005590 <read_sensor+0x268>)
 8005548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554c:	f7fb f82c 	bl	80005a8 <__aeabi_dmul>
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	4620      	mov	r0, r4
 8005556:	4629      	mov	r1, r5
 8005558:	f7fa fe70 	bl	800023c <__adddf3>
 800555c:	4602      	mov	r2, r0
 800555e:	460b      	mov	r3, r1
 8005560:	4610      	mov	r0, r2
 8005562:	4619      	mov	r1, r3
 8005564:	f7fb fad0 	bl	8000b08 <__aeabi_d2iz>
 8005568:	4603      	mov	r3, r0
 800556a:	b21a      	sxth	r2, r3
 800556c:	4b0e      	ldr	r3, [pc, #56]	@ (80055a8 <read_sensor+0x280>)
 800556e:	809a      	strh	r2, [r3, #4]
	    stack_task_sensor = uxTaskGetStackHighWaterMark( NULL );
 8005570:	2000      	movs	r0, #0
 8005572:	f00e fe5f 	bl	8014234 <uxTaskGetStackHighWaterMark>
 8005576:	4603      	mov	r3, r0
 8005578:	b29a      	uxth	r2, r3
 800557a:	4b0c      	ldr	r3, [pc, #48]	@ (80055ac <read_sensor+0x284>)
 800557c:	801a      	strh	r2, [r3, #0]
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800557e:	f107 0310 	add.w	r3, r7, #16
 8005582:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005584:	4618      	mov	r0, r3
 8005586:	f00e f889 	bl	801369c <vTaskDelayUntil>
		mpu6050_gyro_get_raw(&raw);
 800558a:	e6fd      	b.n	8005388 <read_sensor+0x60>
 800558c:	f3af 8000 	nop.w
 8005590:	9999999a 	.word	0x9999999a
 8005594:	3fb99999 	.word	0x3fb99999
 8005598:	20000898 	.word	0x20000898
 800559c:	2000082c 	.word	0x2000082c
 80055a0:	66666667 	.word	0x66666667
 80055a4:	2000081c 	.word	0x2000081c
 80055a8:	20000824 	.word	0x20000824
 80055ac:	20000810 	.word	0x20000810

080055b0 <mavlinkOSD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_mavlinkOSD */
void mavlinkOSD(void const * argument)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN mavlinkOSD */
	mavlinkInit(1,1,&huart1,57600);
 80055b8:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 80055bc:	4a0d      	ldr	r2, [pc, #52]	@ (80055f4 <mavlinkOSD+0x44>)
 80055be:	2101      	movs	r1, #1
 80055c0:	2001      	movs	r0, #1
 80055c2:	f002 f965 	bl	8007890 <mavlinkInit>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50;  // 25 ms
 80055c6:	2332      	movs	r3, #50	@ 0x32
 80055c8:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 80055ca:	f00e fb59 	bl	8013c80 <xTaskGetTickCount>
 80055ce:	4603      	mov	r3, r0
 80055d0:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	mavlink_osd();
 80055d2:	f002 f993 	bl	80078fc <mavlink_osd>
	//mavlink_send_heartbeat();
	vTaskDelayUntil( &xLastWakeTime, xFrequency);
 80055d6:	f107 0308 	add.w	r3, r7, #8
 80055da:	68f9      	ldr	r1, [r7, #12]
 80055dc:	4618      	mov	r0, r3
 80055de:	f00e f85d 	bl	801369c <vTaskDelayUntil>
    stack_task_mavOSD = uxTaskGetStackHighWaterMark( NULL );
 80055e2:	2000      	movs	r0, #0
 80055e4:	f00e fe26 	bl	8014234 <uxTaskGetStackHighWaterMark>
 80055e8:	4603      	mov	r3, r0
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	4b02      	ldr	r3, [pc, #8]	@ (80055f8 <mavlinkOSD+0x48>)
 80055ee:	801a      	strh	r2, [r3, #0]
	mavlink_osd();
 80055f0:	bf00      	nop
 80055f2:	e7ee      	b.n	80055d2 <mavlinkOSD+0x22>
 80055f4:	20000a4c 	.word	0x20000a4c
 80055f8:	20000812 	.word	0x20000812

080055fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b088      	sub	sp, #32
 8005600:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005602:	f107 0310 	add.w	r3, r7, #16
 8005606:	2200      	movs	r2, #0
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	605a      	str	r2, [r3, #4]
 800560c:	609a      	str	r2, [r3, #8]
 800560e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005610:	4b46      	ldr	r3, [pc, #280]	@ (800572c <MX_GPIO_Init+0x130>)
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	4a45      	ldr	r2, [pc, #276]	@ (800572c <MX_GPIO_Init+0x130>)
 8005616:	f043 0310 	orr.w	r3, r3, #16
 800561a:	6193      	str	r3, [r2, #24]
 800561c:	4b43      	ldr	r3, [pc, #268]	@ (800572c <MX_GPIO_Init+0x130>)
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	f003 0310 	and.w	r3, r3, #16
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005628:	4b40      	ldr	r3, [pc, #256]	@ (800572c <MX_GPIO_Init+0x130>)
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	4a3f      	ldr	r2, [pc, #252]	@ (800572c <MX_GPIO_Init+0x130>)
 800562e:	f043 0304 	orr.w	r3, r3, #4
 8005632:	6193      	str	r3, [r2, #24]
 8005634:	4b3d      	ldr	r3, [pc, #244]	@ (800572c <MX_GPIO_Init+0x130>)
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	60bb      	str	r3, [r7, #8]
 800563e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005640:	4b3a      	ldr	r3, [pc, #232]	@ (800572c <MX_GPIO_Init+0x130>)
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	4a39      	ldr	r2, [pc, #228]	@ (800572c <MX_GPIO_Init+0x130>)
 8005646:	f043 0308 	orr.w	r3, r3, #8
 800564a:	6193      	str	r3, [r2, #24]
 800564c:	4b37      	ldr	r3, [pc, #220]	@ (800572c <MX_GPIO_Init+0x130>)
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	f003 0308 	and.w	r3, r3, #8
 8005654:	607b      	str	r3, [r7, #4]
 8005656:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005658:	4b34      	ldr	r3, [pc, #208]	@ (800572c <MX_GPIO_Init+0x130>)
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	4a33      	ldr	r2, [pc, #204]	@ (800572c <MX_GPIO_Init+0x130>)
 800565e:	f043 0320 	orr.w	r3, r3, #32
 8005662:	6193      	str	r3, [r2, #24]
 8005664:	4b31      	ldr	r3, [pc, #196]	@ (800572c <MX_GPIO_Init+0x130>)
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	f003 0320 	and.w	r3, r3, #32
 800566c:	603b      	str	r3, [r7, #0]
 800566e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8005670:	2200      	movs	r2, #0
 8005672:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005676:	482e      	ldr	r0, [pc, #184]	@ (8005730 <MX_GPIO_Init+0x134>)
 8005678:	f003 f9cd 	bl	8008a16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800567c:	2200      	movs	r2, #0
 800567e:	2130      	movs	r1, #48	@ 0x30
 8005680:	482c      	ldr	r0, [pc, #176]	@ (8005734 <MX_GPIO_Init+0x138>)
 8005682:	f003 f9c8 	bl	8008a16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8005686:	2200      	movs	r2, #0
 8005688:	21c0      	movs	r1, #192	@ 0xc0
 800568a:	482b      	ldr	r0, [pc, #172]	@ (8005738 <MX_GPIO_Init+0x13c>)
 800568c:	f003 f9c3 	bl	8008a16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8005690:	2200      	movs	r2, #0
 8005692:	2118      	movs	r1, #24
 8005694:	4829      	ldr	r0, [pc, #164]	@ (800573c <MX_GPIO_Init+0x140>)
 8005696:	f003 f9be 	bl	8008a16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800569a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800569e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056a0:	2301      	movs	r3, #1
 80056a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056a4:	2300      	movs	r3, #0
 80056a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056a8:	2302      	movs	r3, #2
 80056aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056ac:	f107 0310 	add.w	r3, r7, #16
 80056b0:	4619      	mov	r1, r3
 80056b2:	481f      	ldr	r0, [pc, #124]	@ (8005730 <MX_GPIO_Init+0x134>)
 80056b4:	f003 f804 	bl	80086c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80056b8:	2330      	movs	r3, #48	@ 0x30
 80056ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056bc:	2301      	movs	r3, #1
 80056be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c0:	2300      	movs	r3, #0
 80056c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056c4:	2302      	movs	r3, #2
 80056c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056c8:	f107 0310 	add.w	r3, r7, #16
 80056cc:	4619      	mov	r1, r3
 80056ce:	4819      	ldr	r0, [pc, #100]	@ (8005734 <MX_GPIO_Init+0x138>)
 80056d0:	f002 fff6 	bl	80086c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80056d4:	23c0      	movs	r3, #192	@ 0xc0
 80056d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056d8:	2301      	movs	r3, #1
 80056da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056dc:	2300      	movs	r3, #0
 80056de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056e0:	2302      	movs	r3, #2
 80056e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80056e4:	f107 0310 	add.w	r3, r7, #16
 80056e8:	4619      	mov	r1, r3
 80056ea:	4813      	ldr	r0, [pc, #76]	@ (8005738 <MX_GPIO_Init+0x13c>)
 80056ec:	f002 ffe8 	bl	80086c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80056f0:	2318      	movs	r3, #24
 80056f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056f4:	2301      	movs	r3, #1
 80056f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f8:	2300      	movs	r3, #0
 80056fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056fc:	2302      	movs	r3, #2
 80056fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005700:	f107 0310 	add.w	r3, r7, #16
 8005704:	4619      	mov	r1, r3
 8005706:	480d      	ldr	r0, [pc, #52]	@ (800573c <MX_GPIO_Init+0x140>)
 8005708:	f002 ffda 	bl	80086c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800570c:	2320      	movs	r3, #32
 800570e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005710:	2300      	movs	r3, #0
 8005712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005714:	2302      	movs	r3, #2
 8005716:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005718:	f107 0310 	add.w	r3, r7, #16
 800571c:	4619      	mov	r1, r3
 800571e:	4807      	ldr	r0, [pc, #28]	@ (800573c <MX_GPIO_Init+0x140>)
 8005720:	f002 ffce 	bl	80086c0 <HAL_GPIO_Init>

}
 8005724:	bf00      	nop
 8005726:	3720      	adds	r7, #32
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	40021000 	.word	0x40021000
 8005730:	40011000 	.word	0x40011000
 8005734:	40010800 	.word	0x40010800
 8005738:	40011400 	.word	0x40011400
 800573c:	40010c00 	.word	0x40010c00

08005740 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005744:	4b12      	ldr	r3, [pc, #72]	@ (8005790 <MX_I2C1_Init+0x50>)
 8005746:	4a13      	ldr	r2, [pc, #76]	@ (8005794 <MX_I2C1_Init+0x54>)
 8005748:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800574a:	4b11      	ldr	r3, [pc, #68]	@ (8005790 <MX_I2C1_Init+0x50>)
 800574c:	4a12      	ldr	r2, [pc, #72]	@ (8005798 <MX_I2C1_Init+0x58>)
 800574e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005750:	4b0f      	ldr	r3, [pc, #60]	@ (8005790 <MX_I2C1_Init+0x50>)
 8005752:	2200      	movs	r2, #0
 8005754:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005756:	4b0e      	ldr	r3, [pc, #56]	@ (8005790 <MX_I2C1_Init+0x50>)
 8005758:	2200      	movs	r2, #0
 800575a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800575c:	4b0c      	ldr	r3, [pc, #48]	@ (8005790 <MX_I2C1_Init+0x50>)
 800575e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005762:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005764:	4b0a      	ldr	r3, [pc, #40]	@ (8005790 <MX_I2C1_Init+0x50>)
 8005766:	2200      	movs	r2, #0
 8005768:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800576a:	4b09      	ldr	r3, [pc, #36]	@ (8005790 <MX_I2C1_Init+0x50>)
 800576c:	2200      	movs	r2, #0
 800576e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005770:	4b07      	ldr	r3, [pc, #28]	@ (8005790 <MX_I2C1_Init+0x50>)
 8005772:	2200      	movs	r2, #0
 8005774:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005776:	4b06      	ldr	r3, [pc, #24]	@ (8005790 <MX_I2C1_Init+0x50>)
 8005778:	2200      	movs	r2, #0
 800577a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800577c:	4804      	ldr	r0, [pc, #16]	@ (8005790 <MX_I2C1_Init+0x50>)
 800577e:	f003 f97b 	bl	8008a78 <HAL_I2C_Init>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005788:	f000 f92a 	bl	80059e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800578c:	bf00      	nop
 800578e:	bd80      	pop	{r7, pc}
 8005790:	20000844 	.word	0x20000844
 8005794:	40005400 	.word	0x40005400
 8005798:	00061a80 	.word	0x00061a80

0800579c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80057a0:	4b12      	ldr	r3, [pc, #72]	@ (80057ec <MX_I2C2_Init+0x50>)
 80057a2:	4a13      	ldr	r2, [pc, #76]	@ (80057f0 <MX_I2C2_Init+0x54>)
 80057a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80057a6:	4b11      	ldr	r3, [pc, #68]	@ (80057ec <MX_I2C2_Init+0x50>)
 80057a8:	4a12      	ldr	r2, [pc, #72]	@ (80057f4 <MX_I2C2_Init+0x58>)
 80057aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80057ac:	4b0f      	ldr	r3, [pc, #60]	@ (80057ec <MX_I2C2_Init+0x50>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80057b2:	4b0e      	ldr	r3, [pc, #56]	@ (80057ec <MX_I2C2_Init+0x50>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80057b8:	4b0c      	ldr	r3, [pc, #48]	@ (80057ec <MX_I2C2_Init+0x50>)
 80057ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80057be:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80057c0:	4b0a      	ldr	r3, [pc, #40]	@ (80057ec <MX_I2C2_Init+0x50>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80057c6:	4b09      	ldr	r3, [pc, #36]	@ (80057ec <MX_I2C2_Init+0x50>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80057cc:	4b07      	ldr	r3, [pc, #28]	@ (80057ec <MX_I2C2_Init+0x50>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80057d2:	4b06      	ldr	r3, [pc, #24]	@ (80057ec <MX_I2C2_Init+0x50>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80057d8:	4804      	ldr	r0, [pc, #16]	@ (80057ec <MX_I2C2_Init+0x50>)
 80057da:	f003 f94d 	bl	8008a78 <HAL_I2C_Init>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80057e4:	f000 f8fc 	bl	80059e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80057e8:	bf00      	nop
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	20000898 	.word	0x20000898
 80057f0:	40005800 	.word	0x40005800
 80057f4:	00061a80 	.word	0x00061a80

080057f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08a      	sub	sp, #40	@ 0x28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005800:	f107 0318 	add.w	r3, r7, #24
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]
 8005808:	605a      	str	r2, [r3, #4]
 800580a:	609a      	str	r2, [r3, #8]
 800580c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a2b      	ldr	r2, [pc, #172]	@ (80058c0 <HAL_I2C_MspInit+0xc8>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d124      	bne.n	8005862 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005818:	4b2a      	ldr	r3, [pc, #168]	@ (80058c4 <HAL_I2C_MspInit+0xcc>)
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	4a29      	ldr	r2, [pc, #164]	@ (80058c4 <HAL_I2C_MspInit+0xcc>)
 800581e:	f043 0308 	orr.w	r3, r3, #8
 8005822:	6193      	str	r3, [r2, #24]
 8005824:	4b27      	ldr	r3, [pc, #156]	@ (80058c4 <HAL_I2C_MspInit+0xcc>)
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	617b      	str	r3, [r7, #20]
 800582e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005830:	23c0      	movs	r3, #192	@ 0xc0
 8005832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005834:	2312      	movs	r3, #18
 8005836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005838:	2303      	movs	r3, #3
 800583a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800583c:	f107 0318 	add.w	r3, r7, #24
 8005840:	4619      	mov	r1, r3
 8005842:	4821      	ldr	r0, [pc, #132]	@ (80058c8 <HAL_I2C_MspInit+0xd0>)
 8005844:	f002 ff3c 	bl	80086c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005848:	4b1e      	ldr	r3, [pc, #120]	@ (80058c4 <HAL_I2C_MspInit+0xcc>)
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	4a1d      	ldr	r2, [pc, #116]	@ (80058c4 <HAL_I2C_MspInit+0xcc>)
 800584e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005852:	61d3      	str	r3, [r2, #28]
 8005854:	4b1b      	ldr	r3, [pc, #108]	@ (80058c4 <HAL_I2C_MspInit+0xcc>)
 8005856:	69db      	ldr	r3, [r3, #28]
 8005858:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800585c:	613b      	str	r3, [r7, #16]
 800585e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8005860:	e029      	b.n	80058b6 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a19      	ldr	r2, [pc, #100]	@ (80058cc <HAL_I2C_MspInit+0xd4>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d124      	bne.n	80058b6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800586c:	4b15      	ldr	r3, [pc, #84]	@ (80058c4 <HAL_I2C_MspInit+0xcc>)
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	4a14      	ldr	r2, [pc, #80]	@ (80058c4 <HAL_I2C_MspInit+0xcc>)
 8005872:	f043 0308 	orr.w	r3, r3, #8
 8005876:	6193      	str	r3, [r2, #24]
 8005878:	4b12      	ldr	r3, [pc, #72]	@ (80058c4 <HAL_I2C_MspInit+0xcc>)
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	f003 0308 	and.w	r3, r3, #8
 8005880:	60fb      	str	r3, [r7, #12]
 8005882:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005884:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800588a:	2312      	movs	r3, #18
 800588c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800588e:	2303      	movs	r3, #3
 8005890:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005892:	f107 0318 	add.w	r3, r7, #24
 8005896:	4619      	mov	r1, r3
 8005898:	480b      	ldr	r0, [pc, #44]	@ (80058c8 <HAL_I2C_MspInit+0xd0>)
 800589a:	f002 ff11 	bl	80086c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800589e:	4b09      	ldr	r3, [pc, #36]	@ (80058c4 <HAL_I2C_MspInit+0xcc>)
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	4a08      	ldr	r2, [pc, #32]	@ (80058c4 <HAL_I2C_MspInit+0xcc>)
 80058a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80058a8:	61d3      	str	r3, [r2, #28]
 80058aa:	4b06      	ldr	r3, [pc, #24]	@ (80058c4 <HAL_I2C_MspInit+0xcc>)
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058b2:	60bb      	str	r3, [r7, #8]
 80058b4:	68bb      	ldr	r3, [r7, #8]
}
 80058b6:	bf00      	nop
 80058b8:	3728      	adds	r7, #40	@ 0x28
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	40005400 	.word	0x40005400
 80058c4:	40021000 	.word	0x40021000
 80058c8:	40010c00 	.word	0x40010c00
 80058cc:	40005800 	.word	0x40005800

080058d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80058d4:	f002 f93a 	bl	8007b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80058d8:	f000 f81c 	bl	8005914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80058dc:	f7ff fe8e 	bl	80055fc <MX_GPIO_Init>
  MX_DMA_Init();
 80058e0:	f7ff f994 	bl	8004c0c <MX_DMA_Init>
  MX_I2C1_Init();
 80058e4:	f7ff ff2c 	bl	8005740 <MX_I2C1_Init>
  MX_I2C2_Init();
 80058e8:	f7ff ff58 	bl	800579c <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 80058ec:	f000 f87e 	bl	80059ec <MX_SDIO_SD_Init>
  MX_TIM7_Init();
 80058f0:	f000 fad4 	bl	8005e9c <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80058f4:	f000 fb96 	bl	8006024 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80058f8:	f000 fbbe 	bl	8006078 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80058fc:	f000 fbe6 	bl	80060cc <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8005900:	f000 fa40 	bl	8005d84 <MX_TIM3_Init>
  MX_FATFS_Init();
 8005904:	f008 ff70 	bl	800e7e8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8005908:	f7ff f9e0 	bl	8004ccc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800590c:	f00c fd72 	bl	80123f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005910:	bf00      	nop
 8005912:	e7fd      	b.n	8005910 <main+0x40>

08005914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b090      	sub	sp, #64	@ 0x40
 8005918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800591a:	f107 0318 	add.w	r3, r7, #24
 800591e:	2228      	movs	r2, #40	@ 0x28
 8005920:	2100      	movs	r1, #0
 8005922:	4618      	mov	r0, r3
 8005924:	f00f fbdc 	bl	80150e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005928:	1d3b      	adds	r3, r7, #4
 800592a:	2200      	movs	r2, #0
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	605a      	str	r2, [r3, #4]
 8005930:	609a      	str	r2, [r3, #8]
 8005932:	60da      	str	r2, [r3, #12]
 8005934:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005936:	2301      	movs	r3, #1
 8005938:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800593a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800593e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005940:	2300      	movs	r3, #0
 8005942:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005944:	2301      	movs	r3, #1
 8005946:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005948:	2302      	movs	r3, #2
 800594a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800594c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005950:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005952:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8005956:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005958:	f107 0318 	add.w	r3, r7, #24
 800595c:	4618      	mov	r0, r3
 800595e:	f004 fecd 	bl	800a6fc <HAL_RCC_OscConfig>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8005968:	f000 f83a 	bl	80059e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800596c:	230f      	movs	r3, #15
 800596e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005970:	2302      	movs	r3, #2
 8005972:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005974:	2300      	movs	r3, #0
 8005976:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005978:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800597c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800597e:	2300      	movs	r3, #0
 8005980:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005982:	1d3b      	adds	r3, r7, #4
 8005984:	2102      	movs	r1, #2
 8005986:	4618      	mov	r0, r3
 8005988:	f005 f93a 	bl	800ac00 <HAL_RCC_ClockConfig>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8005992:	f000 f825 	bl	80059e0 <Error_Handler>
  }
}
 8005996:	bf00      	nop
 8005998:	3740      	adds	r7, #64	@ 0x40
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
	...

080059a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059b0:	d102      	bne.n	80059b8 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80059b2:	f002 f8e1 	bl	8007b78 <HAL_IncTick>
  else if(htim->Instance == TIM7){
	  TIMER_CALLBACK();
  }

  /* USER CODE END Callback 1 */
}
 80059b6:	e00b      	b.n	80059d0 <HAL_TIM_PeriodElapsedCallback+0x30>
  else if(htim->Instance == TIM7){
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a06      	ldr	r2, [pc, #24]	@ (80059d8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d106      	bne.n	80059d0 <HAL_TIM_PeriodElapsedCallback+0x30>
	  TIMER_CALLBACK();
 80059c2:	4b06      	ldr	r3, [pc, #24]	@ (80059dc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80059ca:	33ff      	adds	r3, #255	@ 0xff
 80059cc:	4a03      	ldr	r2, [pc, #12]	@ (80059dc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80059ce:	6013      	str	r3, [r2, #0]
}
 80059d0:	bf00      	nop
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	40001400 	.word	0x40001400
 80059dc:	200005a0 	.word	0x200005a0

080059e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80059e0:	b480      	push	{r7}
 80059e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80059e4:	b672      	cpsid	i
}
 80059e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80059e8:	bf00      	nop
 80059ea:	e7fd      	b.n	80059e8 <Error_Handler+0x8>

080059ec <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80059ec:	b480      	push	{r7}
 80059ee:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80059f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005a28 <MX_SDIO_SD_Init+0x3c>)
 80059f2:	4a0e      	ldr	r2, [pc, #56]	@ (8005a2c <MX_SDIO_SD_Init+0x40>)
 80059f4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80059f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005a28 <MX_SDIO_SD_Init+0x3c>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80059fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005a28 <MX_SDIO_SD_Init+0x3c>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005a02:	4b09      	ldr	r3, [pc, #36]	@ (8005a28 <MX_SDIO_SD_Init+0x3c>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8005a08:	4b07      	ldr	r3, [pc, #28]	@ (8005a28 <MX_SDIO_SD_Init+0x3c>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005a0e:	4b06      	ldr	r3, [pc, #24]	@ (8005a28 <MX_SDIO_SD_Init+0x3c>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 255;
 8005a14:	4b04      	ldr	r3, [pc, #16]	@ (8005a28 <MX_SDIO_SD_Init+0x3c>)
 8005a16:	22ff      	movs	r2, #255	@ 0xff
 8005a18:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.ClockDiv = 255;
 8005a1a:	4b03      	ldr	r3, [pc, #12]	@ (8005a28 <MX_SDIO_SD_Init+0x3c>)
 8005a1c:	22ff      	movs	r2, #255	@ 0xff
 8005a1e:	619a      	str	r2, [r3, #24]
  /* USER CODE END SDIO_Init 2 */

}
 8005a20:	bf00      	nop
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bc80      	pop	{r7}
 8005a26:	4770      	bx	lr
 8005a28:	200008ec 	.word	0x200008ec
 8005a2c:	40018000 	.word	0x40018000

08005a30 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08a      	sub	sp, #40	@ 0x28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a38:	f107 0318 	add.w	r3, r7, #24
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]
 8005a40:	605a      	str	r2, [r3, #4]
 8005a42:	609a      	str	r2, [r3, #8]
 8005a44:	60da      	str	r2, [r3, #12]
  if(sdHandle->Instance==SDIO)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a22      	ldr	r2, [pc, #136]	@ (8005ad4 <HAL_SD_MspInit+0xa4>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d13c      	bne.n	8005aca <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8005a50:	4b21      	ldr	r3, [pc, #132]	@ (8005ad8 <HAL_SD_MspInit+0xa8>)
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	4a20      	ldr	r2, [pc, #128]	@ (8005ad8 <HAL_SD_MspInit+0xa8>)
 8005a56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a5a:	6153      	str	r3, [r2, #20]
 8005a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ad8 <HAL_SD_MspInit+0xa8>)
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a64:	617b      	str	r3, [r7, #20]
 8005a66:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a68:	4b1b      	ldr	r3, [pc, #108]	@ (8005ad8 <HAL_SD_MspInit+0xa8>)
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8005ad8 <HAL_SD_MspInit+0xa8>)
 8005a6e:	f043 0310 	orr.w	r3, r3, #16
 8005a72:	6193      	str	r3, [r2, #24]
 8005a74:	4b18      	ldr	r3, [pc, #96]	@ (8005ad8 <HAL_SD_MspInit+0xa8>)
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	f003 0310 	and.w	r3, r3, #16
 8005a7c:	613b      	str	r3, [r7, #16]
 8005a7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a80:	4b15      	ldr	r3, [pc, #84]	@ (8005ad8 <HAL_SD_MspInit+0xa8>)
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	4a14      	ldr	r2, [pc, #80]	@ (8005ad8 <HAL_SD_MspInit+0xa8>)
 8005a86:	f043 0320 	orr.w	r3, r3, #32
 8005a8a:	6193      	str	r3, [r2, #24]
 8005a8c:	4b12      	ldr	r3, [pc, #72]	@ (8005ad8 <HAL_SD_MspInit+0xa8>)
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	f003 0320 	and.w	r3, r3, #32
 8005a94:	60fb      	str	r3, [r7, #12]
 8005a96:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8005a98:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8005a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005aa6:	f107 0318 	add.w	r3, r7, #24
 8005aaa:	4619      	mov	r1, r3
 8005aac:	480b      	ldr	r0, [pc, #44]	@ (8005adc <HAL_SD_MspInit+0xac>)
 8005aae:	f002 fe07 	bl	80086c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005ab2:	2304      	movs	r3, #4
 8005ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005aba:	2303      	movs	r3, #3
 8005abc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005abe:	f107 0318 	add.w	r3, r7, #24
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	4806      	ldr	r0, [pc, #24]	@ (8005ae0 <HAL_SD_MspInit+0xb0>)
 8005ac6:	f002 fdfb 	bl	80086c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8005aca:	bf00      	nop
 8005acc:	3728      	adds	r7, #40	@ 0x28
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40018000 	.word	0x40018000
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	40011000 	.word	0x40011000
 8005ae0:	40011400 	.word	0x40011400

08005ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005aea:	4b18      	ldr	r3, [pc, #96]	@ (8005b4c <HAL_MspInit+0x68>)
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	4a17      	ldr	r2, [pc, #92]	@ (8005b4c <HAL_MspInit+0x68>)
 8005af0:	f043 0301 	orr.w	r3, r3, #1
 8005af4:	6193      	str	r3, [r2, #24]
 8005af6:	4b15      	ldr	r3, [pc, #84]	@ (8005b4c <HAL_MspInit+0x68>)
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	60bb      	str	r3, [r7, #8]
 8005b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b02:	4b12      	ldr	r3, [pc, #72]	@ (8005b4c <HAL_MspInit+0x68>)
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	4a11      	ldr	r2, [pc, #68]	@ (8005b4c <HAL_MspInit+0x68>)
 8005b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b0c:	61d3      	str	r3, [r2, #28]
 8005b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8005b4c <HAL_MspInit+0x68>)
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b16:	607b      	str	r3, [r7, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	210f      	movs	r1, #15
 8005b1e:	f06f 0001 	mvn.w	r0, #1
 8005b22:	f002 f91e 	bl	8007d62 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005b26:	4b0a      	ldr	r3, [pc, #40]	@ (8005b50 <HAL_MspInit+0x6c>)
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005b3a:	60fb      	str	r3, [r7, #12]
 8005b3c:	4a04      	ldr	r2, [pc, #16]	@ (8005b50 <HAL_MspInit+0x6c>)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b42:	bf00      	nop
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	40021000 	.word	0x40021000
 8005b50:	40010000 	.word	0x40010000

08005b54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08e      	sub	sp, #56	@ 0x38
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8005b6a:	4b34      	ldr	r3, [pc, #208]	@ (8005c3c <HAL_InitTick+0xe8>)
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	4a33      	ldr	r2, [pc, #204]	@ (8005c3c <HAL_InitTick+0xe8>)
 8005b70:	f043 0301 	orr.w	r3, r3, #1
 8005b74:	61d3      	str	r3, [r2, #28]
 8005b76:	4b31      	ldr	r3, [pc, #196]	@ (8005c3c <HAL_InitTick+0xe8>)
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005b82:	f107 0210 	add.w	r2, r7, #16
 8005b86:	f107 0314 	add.w	r3, r7, #20
 8005b8a:	4611      	mov	r1, r2
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f005 f9a7 	bl	800aee0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d103      	bne.n	8005ba4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005b9c:	f005 f978 	bl	800ae90 <HAL_RCC_GetPCLK1Freq>
 8005ba0:	6378      	str	r0, [r7, #52]	@ 0x34
 8005ba2:	e004      	b.n	8005bae <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005ba4:	f005 f974 	bl	800ae90 <HAL_RCC_GetPCLK1Freq>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bb0:	4a23      	ldr	r2, [pc, #140]	@ (8005c40 <HAL_InitTick+0xec>)
 8005bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb6:	0c9b      	lsrs	r3, r3, #18
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8005bbc:	4b21      	ldr	r3, [pc, #132]	@ (8005c44 <HAL_InitTick+0xf0>)
 8005bbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005bc2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8005bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8005c44 <HAL_InitTick+0xf0>)
 8005bc6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005bca:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8005bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8005c44 <HAL_InitTick+0xf0>)
 8005bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8005bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8005c44 <HAL_InitTick+0xf0>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8005c44 <HAL_InitTick+0xf0>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005bde:	4b19      	ldr	r3, [pc, #100]	@ (8005c44 <HAL_InitTick+0xf0>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8005be4:	4817      	ldr	r0, [pc, #92]	@ (8005c44 <HAL_InitTick+0xf0>)
 8005be6:	f006 f951 	bl	800be8c <HAL_TIM_Base_Init>
 8005bea:	4603      	mov	r3, r0
 8005bec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8005bf0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d11b      	bne.n	8005c30 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8005bf8:	4812      	ldr	r0, [pc, #72]	@ (8005c44 <HAL_InitTick+0xf0>)
 8005bfa:	f006 f997 	bl	800bf2c <HAL_TIM_Base_Start_IT>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8005c04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d111      	bne.n	8005c30 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005c0c:	201c      	movs	r0, #28
 8005c0e:	f002 f8c4 	bl	8007d9a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2b0f      	cmp	r3, #15
 8005c16:	d808      	bhi.n	8005c2a <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8005c18:	2200      	movs	r2, #0
 8005c1a:	6879      	ldr	r1, [r7, #4]
 8005c1c:	201c      	movs	r0, #28
 8005c1e:	f002 f8a0 	bl	8007d62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005c22:	4a09      	ldr	r2, [pc, #36]	@ (8005c48 <HAL_InitTick+0xf4>)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6013      	str	r3, [r2, #0]
 8005c28:	e002      	b.n	8005c30 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005c30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3738      	adds	r7, #56	@ 0x38
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	40021000 	.word	0x40021000
 8005c40:	431bde83 	.word	0x431bde83
 8005c44:	20000970 	.word	0x20000970
 8005c48:	20000038 	.word	0x20000038

08005c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005c50:	bf00      	nop
 8005c52:	e7fd      	b.n	8005c50 <NMI_Handler+0x4>

08005c54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c58:	bf00      	nop
 8005c5a:	e7fd      	b.n	8005c58 <HardFault_Handler+0x4>

08005c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c60:	bf00      	nop
 8005c62:	e7fd      	b.n	8005c60 <MemManage_Handler+0x4>

08005c64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c64:	b480      	push	{r7}
 8005c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c68:	bf00      	nop
 8005c6a:	e7fd      	b.n	8005c68 <BusFault_Handler+0x4>

08005c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c70:	bf00      	nop
 8005c72:	e7fd      	b.n	8005c70 <UsageFault_Handler+0x4>

08005c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c74:	b480      	push	{r7}
 8005c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c78:	bf00      	nop
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bc80      	pop	{r7}
 8005c7e:	4770      	bx	lr

08005c80 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005c84:	4802      	ldr	r0, [pc, #8]	@ (8005c90 <DMA1_Channel4_IRQHandler+0x10>)
 8005c86:	f002 fab1 	bl	80081ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005c8a:	bf00      	nop
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	20000b24 	.word	0x20000b24

08005c94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005c98:	4802      	ldr	r0, [pc, #8]	@ (8005ca4 <TIM2_IRQHandler+0x10>)
 8005c9a:	f006 fab9 	bl	800c210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005c9e:	bf00      	nop
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20000970 	.word	0x20000970

08005ca8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005cac:	4802      	ldr	r0, [pc, #8]	@ (8005cb8 <TIM3_IRQHandler+0x10>)
 8005cae:	f006 faaf 	bl	800c210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005cb2:	bf00      	nop
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	200009bc 	.word	0x200009bc

08005cbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005cc0:	4802      	ldr	r0, [pc, #8]	@ (8005ccc <USART1_IRQHandler+0x10>)
 8005cc2:	f007 fa21 	bl	800d108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005cc6:	bf00      	nop
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20000a4c 	.word	0x20000a4c

08005cd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005cd4:	4802      	ldr	r0, [pc, #8]	@ (8005ce0 <USART2_IRQHandler+0x10>)
 8005cd6:	f007 fa17 	bl	800d108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005cda:	bf00      	nop
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	20000a94 	.word	0x20000a94

08005ce4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005ce8:	4802      	ldr	r0, [pc, #8]	@ (8005cf4 <USART3_IRQHandler+0x10>)
 8005cea:	f007 fa0d 	bl	800d108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005cee:	bf00      	nop
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	20000adc 	.word	0x20000adc

08005cf8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005cfc:	4802      	ldr	r0, [pc, #8]	@ (8005d08 <TIM7_IRQHandler+0x10>)
 8005cfe:	f006 fa87 	bl	800c210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005d02:	bf00      	nop
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	20000a04 	.word	0x20000a04

08005d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005d14:	4a14      	ldr	r2, [pc, #80]	@ (8005d68 <_sbrk+0x5c>)
 8005d16:	4b15      	ldr	r3, [pc, #84]	@ (8005d6c <_sbrk+0x60>)
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005d20:	4b13      	ldr	r3, [pc, #76]	@ (8005d70 <_sbrk+0x64>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d102      	bne.n	8005d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005d28:	4b11      	ldr	r3, [pc, #68]	@ (8005d70 <_sbrk+0x64>)
 8005d2a:	4a12      	ldr	r2, [pc, #72]	@ (8005d74 <_sbrk+0x68>)
 8005d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005d2e:	4b10      	ldr	r3, [pc, #64]	@ (8005d70 <_sbrk+0x64>)
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4413      	add	r3, r2
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d207      	bcs.n	8005d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005d3c:	f00f f9e8 	bl	8015110 <__errno>
 8005d40:	4603      	mov	r3, r0
 8005d42:	220c      	movs	r2, #12
 8005d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005d46:	f04f 33ff 	mov.w	r3, #4294967295
 8005d4a:	e009      	b.n	8005d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005d4c:	4b08      	ldr	r3, [pc, #32]	@ (8005d70 <_sbrk+0x64>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005d52:	4b07      	ldr	r3, [pc, #28]	@ (8005d70 <_sbrk+0x64>)
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4413      	add	r3, r2
 8005d5a:	4a05      	ldr	r2, [pc, #20]	@ (8005d70 <_sbrk+0x64>)
 8005d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3718      	adds	r7, #24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	2000c000 	.word	0x2000c000
 8005d6c:	00004000 	.word	0x00004000
 8005d70:	200009b8 	.word	0x200009b8
 8005d74:	20002e08 	.word	0x20002e08

08005d78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005d7c:	bf00      	nop
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bc80      	pop	{r7}
 8005d82:	4770      	bx	lr

08005d84 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08e      	sub	sp, #56	@ 0x38
 8005d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005d8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005d8e:	2200      	movs	r2, #0
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	605a      	str	r2, [r3, #4]
 8005d94:	609a      	str	r2, [r3, #8]
 8005d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d98:	f107 0320 	add.w	r3, r7, #32
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005da2:	1d3b      	adds	r3, r7, #4
 8005da4:	2200      	movs	r2, #0
 8005da6:	601a      	str	r2, [r3, #0]
 8005da8:	605a      	str	r2, [r3, #4]
 8005daa:	609a      	str	r2, [r3, #8]
 8005dac:	60da      	str	r2, [r3, #12]
 8005dae:	611a      	str	r2, [r3, #16]
 8005db0:	615a      	str	r2, [r3, #20]
 8005db2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005db4:	4b37      	ldr	r3, [pc, #220]	@ (8005e94 <MX_TIM3_Init+0x110>)
 8005db6:	4a38      	ldr	r2, [pc, #224]	@ (8005e98 <MX_TIM3_Init+0x114>)
 8005db8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8005dba:	4b36      	ldr	r3, [pc, #216]	@ (8005e94 <MX_TIM3_Init+0x110>)
 8005dbc:	2247      	movs	r2, #71	@ 0x47
 8005dbe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dc0:	4b34      	ldr	r3, [pc, #208]	@ (8005e94 <MX_TIM3_Init+0x110>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005dc6:	4b33      	ldr	r3, [pc, #204]	@ (8005e94 <MX_TIM3_Init+0x110>)
 8005dc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005dcc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005dce:	4b31      	ldr	r3, [pc, #196]	@ (8005e94 <MX_TIM3_Init+0x110>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005dd4:	4b2f      	ldr	r3, [pc, #188]	@ (8005e94 <MX_TIM3_Init+0x110>)
 8005dd6:	2280      	movs	r2, #128	@ 0x80
 8005dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005dda:	482e      	ldr	r0, [pc, #184]	@ (8005e94 <MX_TIM3_Init+0x110>)
 8005ddc:	f006 f856 	bl	800be8c <HAL_TIM_Base_Init>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8005de6:	f7ff fdfb 	bl	80059e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005dea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005dee:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005df0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005df4:	4619      	mov	r1, r3
 8005df6:	4827      	ldr	r0, [pc, #156]	@ (8005e94 <MX_TIM3_Init+0x110>)
 8005df8:	f006 fbd4 	bl	800c5a4 <HAL_TIM_ConfigClockSource>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8005e02:	f7ff fded 	bl	80059e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005e06:	4823      	ldr	r0, [pc, #140]	@ (8005e94 <MX_TIM3_Init+0x110>)
 8005e08:	f006 f8f0 	bl	800bfec <HAL_TIM_PWM_Init>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005e12:	f7ff fde5 	bl	80059e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e16:	2300      	movs	r3, #0
 8005e18:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005e1e:	f107 0320 	add.w	r3, r7, #32
 8005e22:	4619      	mov	r1, r3
 8005e24:	481b      	ldr	r0, [pc, #108]	@ (8005e94 <MX_TIM3_Init+0x110>)
 8005e26:	f006 ff89 	bl	800cd3c <HAL_TIMEx_MasterConfigSynchronization>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005e30:	f7ff fdd6 	bl	80059e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005e34:	2360      	movs	r3, #96	@ 0x60
 8005e36:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e40:	2300      	movs	r3, #0
 8005e42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005e44:	1d3b      	adds	r3, r7, #4
 8005e46:	2200      	movs	r2, #0
 8005e48:	4619      	mov	r1, r3
 8005e4a:	4812      	ldr	r0, [pc, #72]	@ (8005e94 <MX_TIM3_Init+0x110>)
 8005e4c:	f006 fae8 	bl	800c420 <HAL_TIM_PWM_ConfigChannel>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8005e56:	f7ff fdc3 	bl	80059e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005e5a:	1d3b      	adds	r3, r7, #4
 8005e5c:	2204      	movs	r2, #4
 8005e5e:	4619      	mov	r1, r3
 8005e60:	480c      	ldr	r0, [pc, #48]	@ (8005e94 <MX_TIM3_Init+0x110>)
 8005e62:	f006 fadd 	bl	800c420 <HAL_TIM_PWM_ConfigChannel>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8005e6c:	f7ff fdb8 	bl	80059e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005e70:	1d3b      	adds	r3, r7, #4
 8005e72:	2208      	movs	r2, #8
 8005e74:	4619      	mov	r1, r3
 8005e76:	4807      	ldr	r0, [pc, #28]	@ (8005e94 <MX_TIM3_Init+0x110>)
 8005e78:	f006 fad2 	bl	800c420 <HAL_TIM_PWM_ConfigChannel>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8005e82:	f7ff fdad 	bl	80059e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005e86:	4803      	ldr	r0, [pc, #12]	@ (8005e94 <MX_TIM3_Init+0x110>)
 8005e88:	f000 f880 	bl	8005f8c <HAL_TIM_MspPostInit>

}
 8005e8c:	bf00      	nop
 8005e8e:	3738      	adds	r7, #56	@ 0x38
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	200009bc 	.word	0x200009bc
 8005e98:	40000400 	.word	0x40000400

08005e9c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ea2:	463b      	mov	r3, r7
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005eaa:	4b15      	ldr	r3, [pc, #84]	@ (8005f00 <MX_TIM7_Init+0x64>)
 8005eac:	4a15      	ldr	r2, [pc, #84]	@ (8005f04 <MX_TIM7_Init+0x68>)
 8005eae:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8005eb0:	4b13      	ldr	r3, [pc, #76]	@ (8005f00 <MX_TIM7_Init+0x64>)
 8005eb2:	2247      	movs	r2, #71	@ 0x47
 8005eb4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005eb6:	4b12      	ldr	r3, [pc, #72]	@ (8005f00 <MX_TIM7_Init+0x64>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8005ebc:	4b10      	ldr	r3, [pc, #64]	@ (8005f00 <MX_TIM7_Init+0x64>)
 8005ebe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ec2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8005f00 <MX_TIM7_Init+0x64>)
 8005ec6:	2280      	movs	r2, #128	@ 0x80
 8005ec8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005eca:	480d      	ldr	r0, [pc, #52]	@ (8005f00 <MX_TIM7_Init+0x64>)
 8005ecc:	f005 ffde 	bl	800be8c <HAL_TIM_Base_Init>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8005ed6:	f7ff fd83 	bl	80059e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005eda:	2300      	movs	r3, #0
 8005edc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005ee2:	463b      	mov	r3, r7
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	4806      	ldr	r0, [pc, #24]	@ (8005f00 <MX_TIM7_Init+0x64>)
 8005ee8:	f006 ff28 	bl	800cd3c <HAL_TIMEx_MasterConfigSynchronization>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8005ef2:	f7ff fd75 	bl	80059e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005ef6:	bf00      	nop
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20000a04 	.word	0x20000a04
 8005f04:	40001400 	.word	0x40001400

08005f08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a1a      	ldr	r2, [pc, #104]	@ (8005f80 <HAL_TIM_Base_MspInit+0x78>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d114      	bne.n	8005f44 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8005f84 <HAL_TIM_Base_MspInit+0x7c>)
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	4a19      	ldr	r2, [pc, #100]	@ (8005f84 <HAL_TIM_Base_MspInit+0x7c>)
 8005f20:	f043 0302 	orr.w	r3, r3, #2
 8005f24:	61d3      	str	r3, [r2, #28]
 8005f26:	4b17      	ldr	r3, [pc, #92]	@ (8005f84 <HAL_TIM_Base_MspInit+0x7c>)
 8005f28:	69db      	ldr	r3, [r3, #28]
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005f32:	2200      	movs	r2, #0
 8005f34:	2105      	movs	r1, #5
 8005f36:	201d      	movs	r0, #29
 8005f38:	f001 ff13 	bl	8007d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005f3c:	201d      	movs	r0, #29
 8005f3e:	f001 ff2c 	bl	8007d9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8005f42:	e018      	b.n	8005f76 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a0f      	ldr	r2, [pc, #60]	@ (8005f88 <HAL_TIM_Base_MspInit+0x80>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d113      	bne.n	8005f76 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f84 <HAL_TIM_Base_MspInit+0x7c>)
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	4a0c      	ldr	r2, [pc, #48]	@ (8005f84 <HAL_TIM_Base_MspInit+0x7c>)
 8005f54:	f043 0320 	orr.w	r3, r3, #32
 8005f58:	61d3      	str	r3, [r2, #28]
 8005f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005f84 <HAL_TIM_Base_MspInit+0x7c>)
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	f003 0320 	and.w	r3, r3, #32
 8005f62:	60bb      	str	r3, [r7, #8]
 8005f64:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8005f66:	2200      	movs	r2, #0
 8005f68:	2105      	movs	r1, #5
 8005f6a:	2037      	movs	r0, #55	@ 0x37
 8005f6c:	f001 fef9 	bl	8007d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005f70:	2037      	movs	r0, #55	@ 0x37
 8005f72:	f001 ff12 	bl	8007d9a <HAL_NVIC_EnableIRQ>
}
 8005f76:	bf00      	nop
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	40000400 	.word	0x40000400
 8005f84:	40021000 	.word	0x40021000
 8005f88:	40001400 	.word	0x40001400

08005f8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f94:	f107 0310 	add.w	r3, r7, #16
 8005f98:	2200      	movs	r2, #0
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	605a      	str	r2, [r3, #4]
 8005f9e:	609a      	str	r2, [r3, #8]
 8005fa0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8006014 <HAL_TIM_MspPostInit+0x88>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d12f      	bne.n	800600c <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fac:	4b1a      	ldr	r3, [pc, #104]	@ (8006018 <HAL_TIM_MspPostInit+0x8c>)
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	4a19      	ldr	r2, [pc, #100]	@ (8006018 <HAL_TIM_MspPostInit+0x8c>)
 8005fb2:	f043 0304 	orr.w	r3, r3, #4
 8005fb6:	6193      	str	r3, [r2, #24]
 8005fb8:	4b17      	ldr	r3, [pc, #92]	@ (8006018 <HAL_TIM_MspPostInit+0x8c>)
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	60fb      	str	r3, [r7, #12]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fc4:	4b14      	ldr	r3, [pc, #80]	@ (8006018 <HAL_TIM_MspPostInit+0x8c>)
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	4a13      	ldr	r2, [pc, #76]	@ (8006018 <HAL_TIM_MspPostInit+0x8c>)
 8005fca:	f043 0308 	orr.w	r3, r3, #8
 8005fce:	6193      	str	r3, [r2, #24]
 8005fd0:	4b11      	ldr	r3, [pc, #68]	@ (8006018 <HAL_TIM_MspPostInit+0x8c>)
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	f003 0308 	and.w	r3, r3, #8
 8005fd8:	60bb      	str	r3, [r7, #8]
 8005fda:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005fdc:	23c0      	movs	r3, #192	@ 0xc0
 8005fde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fe8:	f107 0310 	add.w	r3, r7, #16
 8005fec:	4619      	mov	r1, r3
 8005fee:	480b      	ldr	r0, [pc, #44]	@ (800601c <HAL_TIM_MspPostInit+0x90>)
 8005ff0:	f002 fb66 	bl	80086c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006000:	f107 0310 	add.w	r3, r7, #16
 8006004:	4619      	mov	r1, r3
 8006006:	4806      	ldr	r0, [pc, #24]	@ (8006020 <HAL_TIM_MspPostInit+0x94>)
 8006008:	f002 fb5a 	bl	80086c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800600c:	bf00      	nop
 800600e:	3720      	adds	r7, #32
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	40000400 	.word	0x40000400
 8006018:	40021000 	.word	0x40021000
 800601c:	40010800 	.word	0x40010800
 8006020:	40010c00 	.word	0x40010c00

08006024 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006028:	4b11      	ldr	r3, [pc, #68]	@ (8006070 <MX_USART1_UART_Init+0x4c>)
 800602a:	4a12      	ldr	r2, [pc, #72]	@ (8006074 <MX_USART1_UART_Init+0x50>)
 800602c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800602e:	4b10      	ldr	r3, [pc, #64]	@ (8006070 <MX_USART1_UART_Init+0x4c>)
 8006030:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006034:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006036:	4b0e      	ldr	r3, [pc, #56]	@ (8006070 <MX_USART1_UART_Init+0x4c>)
 8006038:	2200      	movs	r2, #0
 800603a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800603c:	4b0c      	ldr	r3, [pc, #48]	@ (8006070 <MX_USART1_UART_Init+0x4c>)
 800603e:	2200      	movs	r2, #0
 8006040:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006042:	4b0b      	ldr	r3, [pc, #44]	@ (8006070 <MX_USART1_UART_Init+0x4c>)
 8006044:	2200      	movs	r2, #0
 8006046:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006048:	4b09      	ldr	r3, [pc, #36]	@ (8006070 <MX_USART1_UART_Init+0x4c>)
 800604a:	220c      	movs	r2, #12
 800604c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800604e:	4b08      	ldr	r3, [pc, #32]	@ (8006070 <MX_USART1_UART_Init+0x4c>)
 8006050:	2200      	movs	r2, #0
 8006052:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006054:	4b06      	ldr	r3, [pc, #24]	@ (8006070 <MX_USART1_UART_Init+0x4c>)
 8006056:	2200      	movs	r2, #0
 8006058:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800605a:	4805      	ldr	r0, [pc, #20]	@ (8006070 <MX_USART1_UART_Init+0x4c>)
 800605c:	f006 feec 	bl	800ce38 <HAL_UART_Init>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006066:	f7ff fcbb 	bl	80059e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800606a:	bf00      	nop
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	20000a4c 	.word	0x20000a4c
 8006074:	40013800 	.word	0x40013800

08006078 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800607c:	4b11      	ldr	r3, [pc, #68]	@ (80060c4 <MX_USART2_UART_Init+0x4c>)
 800607e:	4a12      	ldr	r2, [pc, #72]	@ (80060c8 <MX_USART2_UART_Init+0x50>)
 8006080:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006082:	4b10      	ldr	r3, [pc, #64]	@ (80060c4 <MX_USART2_UART_Init+0x4c>)
 8006084:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006088:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800608a:	4b0e      	ldr	r3, [pc, #56]	@ (80060c4 <MX_USART2_UART_Init+0x4c>)
 800608c:	2200      	movs	r2, #0
 800608e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006090:	4b0c      	ldr	r3, [pc, #48]	@ (80060c4 <MX_USART2_UART_Init+0x4c>)
 8006092:	2200      	movs	r2, #0
 8006094:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006096:	4b0b      	ldr	r3, [pc, #44]	@ (80060c4 <MX_USART2_UART_Init+0x4c>)
 8006098:	2200      	movs	r2, #0
 800609a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800609c:	4b09      	ldr	r3, [pc, #36]	@ (80060c4 <MX_USART2_UART_Init+0x4c>)
 800609e:	220c      	movs	r2, #12
 80060a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060a2:	4b08      	ldr	r3, [pc, #32]	@ (80060c4 <MX_USART2_UART_Init+0x4c>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80060a8:	4b06      	ldr	r3, [pc, #24]	@ (80060c4 <MX_USART2_UART_Init+0x4c>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80060ae:	4805      	ldr	r0, [pc, #20]	@ (80060c4 <MX_USART2_UART_Init+0x4c>)
 80060b0:	f006 fec2 	bl	800ce38 <HAL_UART_Init>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80060ba:	f7ff fc91 	bl	80059e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80060be:	bf00      	nop
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20000a94 	.word	0x20000a94
 80060c8:	40004400 	.word	0x40004400

080060cc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80060d0:	4b11      	ldr	r3, [pc, #68]	@ (8006118 <MX_USART3_UART_Init+0x4c>)
 80060d2:	4a12      	ldr	r2, [pc, #72]	@ (800611c <MX_USART3_UART_Init+0x50>)
 80060d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80060d6:	4b10      	ldr	r3, [pc, #64]	@ (8006118 <MX_USART3_UART_Init+0x4c>)
 80060d8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80060dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80060de:	4b0e      	ldr	r3, [pc, #56]	@ (8006118 <MX_USART3_UART_Init+0x4c>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80060e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006118 <MX_USART3_UART_Init+0x4c>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80060ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006118 <MX_USART3_UART_Init+0x4c>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80060f0:	4b09      	ldr	r3, [pc, #36]	@ (8006118 <MX_USART3_UART_Init+0x4c>)
 80060f2:	220c      	movs	r2, #12
 80060f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060f6:	4b08      	ldr	r3, [pc, #32]	@ (8006118 <MX_USART3_UART_Init+0x4c>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80060fc:	4b06      	ldr	r3, [pc, #24]	@ (8006118 <MX_USART3_UART_Init+0x4c>)
 80060fe:	2200      	movs	r2, #0
 8006100:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006102:	4805      	ldr	r0, [pc, #20]	@ (8006118 <MX_USART3_UART_Init+0x4c>)
 8006104:	f006 fe98 	bl	800ce38 <HAL_UART_Init>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800610e:	f7ff fc67 	bl	80059e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006112:	bf00      	nop
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20000adc 	.word	0x20000adc
 800611c:	40004800 	.word	0x40004800

08006120 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b08e      	sub	sp, #56	@ 0x38
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006128:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800612c:	2200      	movs	r2, #0
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	605a      	str	r2, [r3, #4]
 8006132:	609a      	str	r2, [r3, #8]
 8006134:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a7c      	ldr	r2, [pc, #496]	@ (800632c <HAL_UART_MspInit+0x20c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d161      	bne.n	8006204 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006140:	4b7b      	ldr	r3, [pc, #492]	@ (8006330 <HAL_UART_MspInit+0x210>)
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	4a7a      	ldr	r2, [pc, #488]	@ (8006330 <HAL_UART_MspInit+0x210>)
 8006146:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800614a:	6193      	str	r3, [r2, #24]
 800614c:	4b78      	ldr	r3, [pc, #480]	@ (8006330 <HAL_UART_MspInit+0x210>)
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006154:	623b      	str	r3, [r7, #32]
 8006156:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006158:	4b75      	ldr	r3, [pc, #468]	@ (8006330 <HAL_UART_MspInit+0x210>)
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	4a74      	ldr	r2, [pc, #464]	@ (8006330 <HAL_UART_MspInit+0x210>)
 800615e:	f043 0304 	orr.w	r3, r3, #4
 8006162:	6193      	str	r3, [r2, #24]
 8006164:	4b72      	ldr	r3, [pc, #456]	@ (8006330 <HAL_UART_MspInit+0x210>)
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	61fb      	str	r3, [r7, #28]
 800616e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006170:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006174:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006176:	2302      	movs	r3, #2
 8006178:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800617a:	2303      	movs	r3, #3
 800617c:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800617e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006182:	4619      	mov	r1, r3
 8006184:	486b      	ldr	r0, [pc, #428]	@ (8006334 <HAL_UART_MspInit+0x214>)
 8006186:	f002 fa9b 	bl	80086c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800618a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800618e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006190:	2300      	movs	r3, #0
 8006192:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006194:	2300      	movs	r3, #0
 8006196:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006198:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800619c:	4619      	mov	r1, r3
 800619e:	4865      	ldr	r0, [pc, #404]	@ (8006334 <HAL_UART_MspInit+0x214>)
 80061a0:	f002 fa8e 	bl	80086c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80061a4:	4b64      	ldr	r3, [pc, #400]	@ (8006338 <HAL_UART_MspInit+0x218>)
 80061a6:	4a65      	ldr	r2, [pc, #404]	@ (800633c <HAL_UART_MspInit+0x21c>)
 80061a8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80061aa:	4b63      	ldr	r3, [pc, #396]	@ (8006338 <HAL_UART_MspInit+0x218>)
 80061ac:	2210      	movs	r2, #16
 80061ae:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80061b0:	4b61      	ldr	r3, [pc, #388]	@ (8006338 <HAL_UART_MspInit+0x218>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80061b6:	4b60      	ldr	r3, [pc, #384]	@ (8006338 <HAL_UART_MspInit+0x218>)
 80061b8:	2280      	movs	r2, #128	@ 0x80
 80061ba:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80061bc:	4b5e      	ldr	r3, [pc, #376]	@ (8006338 <HAL_UART_MspInit+0x218>)
 80061be:	2200      	movs	r2, #0
 80061c0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80061c2:	4b5d      	ldr	r3, [pc, #372]	@ (8006338 <HAL_UART_MspInit+0x218>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80061c8:	4b5b      	ldr	r3, [pc, #364]	@ (8006338 <HAL_UART_MspInit+0x218>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80061ce:	4b5a      	ldr	r3, [pc, #360]	@ (8006338 <HAL_UART_MspInit+0x218>)
 80061d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80061d4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80061d6:	4858      	ldr	r0, [pc, #352]	@ (8006338 <HAL_UART_MspInit+0x218>)
 80061d8:	f001 fdee 	bl	8007db8 <HAL_DMA_Init>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80061e2:	f7ff fbfd 	bl	80059e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a53      	ldr	r2, [pc, #332]	@ (8006338 <HAL_UART_MspInit+0x218>)
 80061ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80061ec:	4a52      	ldr	r2, [pc, #328]	@ (8006338 <HAL_UART_MspInit+0x218>)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80061f2:	2200      	movs	r2, #0
 80061f4:	2105      	movs	r1, #5
 80061f6:	2025      	movs	r0, #37	@ 0x25
 80061f8:	f001 fdb3 	bl	8007d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80061fc:	2025      	movs	r0, #37	@ 0x25
 80061fe:	f001 fdcc 	bl	8007d9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006202:	e08e      	b.n	8006322 <HAL_UART_MspInit+0x202>
  else if(uartHandle->Instance==USART2)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a4d      	ldr	r2, [pc, #308]	@ (8006340 <HAL_UART_MspInit+0x220>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d138      	bne.n	8006280 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART2_CLK_ENABLE();
 800620e:	4b48      	ldr	r3, [pc, #288]	@ (8006330 <HAL_UART_MspInit+0x210>)
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	4a47      	ldr	r2, [pc, #284]	@ (8006330 <HAL_UART_MspInit+0x210>)
 8006214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006218:	61d3      	str	r3, [r2, #28]
 800621a:	4b45      	ldr	r3, [pc, #276]	@ (8006330 <HAL_UART_MspInit+0x210>)
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006222:	61bb      	str	r3, [r7, #24]
 8006224:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006226:	4b42      	ldr	r3, [pc, #264]	@ (8006330 <HAL_UART_MspInit+0x210>)
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	4a41      	ldr	r2, [pc, #260]	@ (8006330 <HAL_UART_MspInit+0x210>)
 800622c:	f043 0304 	orr.w	r3, r3, #4
 8006230:	6193      	str	r3, [r2, #24]
 8006232:	4b3f      	ldr	r3, [pc, #252]	@ (8006330 <HAL_UART_MspInit+0x210>)
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	f003 0304 	and.w	r3, r3, #4
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800623e:	2304      	movs	r3, #4
 8006240:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006242:	2302      	movs	r3, #2
 8006244:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006246:	2303      	movs	r3, #3
 8006248:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800624a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800624e:	4619      	mov	r1, r3
 8006250:	4838      	ldr	r0, [pc, #224]	@ (8006334 <HAL_UART_MspInit+0x214>)
 8006252:	f002 fa35 	bl	80086c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006256:	2308      	movs	r3, #8
 8006258:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800625a:	2300      	movs	r3, #0
 800625c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800625e:	2300      	movs	r3, #0
 8006260:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006262:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006266:	4619      	mov	r1, r3
 8006268:	4832      	ldr	r0, [pc, #200]	@ (8006334 <HAL_UART_MspInit+0x214>)
 800626a:	f002 fa29 	bl	80086c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800626e:	2200      	movs	r2, #0
 8006270:	2105      	movs	r1, #5
 8006272:	2026      	movs	r0, #38	@ 0x26
 8006274:	f001 fd75 	bl	8007d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006278:	2026      	movs	r0, #38	@ 0x26
 800627a:	f001 fd8e 	bl	8007d9a <HAL_NVIC_EnableIRQ>
}
 800627e:	e050      	b.n	8006322 <HAL_UART_MspInit+0x202>
  else if(uartHandle->Instance==USART3)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a2f      	ldr	r2, [pc, #188]	@ (8006344 <HAL_UART_MspInit+0x224>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d14b      	bne.n	8006322 <HAL_UART_MspInit+0x202>
    __HAL_RCC_USART3_CLK_ENABLE();
 800628a:	4b29      	ldr	r3, [pc, #164]	@ (8006330 <HAL_UART_MspInit+0x210>)
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	4a28      	ldr	r2, [pc, #160]	@ (8006330 <HAL_UART_MspInit+0x210>)
 8006290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006294:	61d3      	str	r3, [r2, #28]
 8006296:	4b26      	ldr	r3, [pc, #152]	@ (8006330 <HAL_UART_MspInit+0x210>)
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800629e:	613b      	str	r3, [r7, #16]
 80062a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80062a2:	4b23      	ldr	r3, [pc, #140]	@ (8006330 <HAL_UART_MspInit+0x210>)
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	4a22      	ldr	r2, [pc, #136]	@ (8006330 <HAL_UART_MspInit+0x210>)
 80062a8:	f043 0320 	orr.w	r3, r3, #32
 80062ac:	6193      	str	r3, [r2, #24]
 80062ae:	4b20      	ldr	r3, [pc, #128]	@ (8006330 <HAL_UART_MspInit+0x210>)
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	f003 0320 	and.w	r3, r3, #32
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80062ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80062be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062c0:	2302      	movs	r3, #2
 80062c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80062c4:	2303      	movs	r3, #3
 80062c6:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80062c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062cc:	4619      	mov	r1, r3
 80062ce:	481e      	ldr	r0, [pc, #120]	@ (8006348 <HAL_UART_MspInit+0x228>)
 80062d0:	f002 f9f6 	bl	80086c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80062d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80062d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80062da:	2300      	movs	r3, #0
 80062dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062de:	2300      	movs	r3, #0
 80062e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80062e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062e6:	4619      	mov	r1, r3
 80062e8:	4817      	ldr	r0, [pc, #92]	@ (8006348 <HAL_UART_MspInit+0x228>)
 80062ea:	f002 f9e9 	bl	80086c0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_ENABLE();
 80062ee:	4b17      	ldr	r3, [pc, #92]	@ (800634c <HAL_UART_MspInit+0x22c>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80062f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80062fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80062fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062fe:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8006302:	637b      	str	r3, [r7, #52]	@ 0x34
 8006304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006306:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800630a:	637b      	str	r3, [r7, #52]	@ 0x34
 800630c:	4a0f      	ldr	r2, [pc, #60]	@ (800634c <HAL_UART_MspInit+0x22c>)
 800630e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006310:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006312:	2200      	movs	r2, #0
 8006314:	2105      	movs	r1, #5
 8006316:	2027      	movs	r0, #39	@ 0x27
 8006318:	f001 fd23 	bl	8007d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800631c:	2027      	movs	r0, #39	@ 0x27
 800631e:	f001 fd3c 	bl	8007d9a <HAL_NVIC_EnableIRQ>
}
 8006322:	bf00      	nop
 8006324:	3738      	adds	r7, #56	@ 0x38
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	40013800 	.word	0x40013800
 8006330:	40021000 	.word	0x40021000
 8006334:	40010800 	.word	0x40010800
 8006338:	20000b24 	.word	0x20000b24
 800633c:	40020044 	.word	0x40020044
 8006340:	40004400 	.word	0x40004400
 8006344:	40004800 	.word	0x40004800
 8006348:	40011400 	.word	0x40011400
 800634c:	40010000 	.word	0x40010000

08006350 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006350:	f7ff fd12 	bl	8005d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006354:	480b      	ldr	r0, [pc, #44]	@ (8006384 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8006356:	490c      	ldr	r1, [pc, #48]	@ (8006388 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006358:	4a0c      	ldr	r2, [pc, #48]	@ (800638c <LoopFillZerobss+0x16>)
  movs r3, #0
 800635a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800635c:	e002      	b.n	8006364 <LoopCopyDataInit>

0800635e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800635e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006362:	3304      	adds	r3, #4

08006364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006368:	d3f9      	bcc.n	800635e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800636a:	4a09      	ldr	r2, [pc, #36]	@ (8006390 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800636c:	4c09      	ldr	r4, [pc, #36]	@ (8006394 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800636e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006370:	e001      	b.n	8006376 <LoopFillZerobss>

08006372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006374:	3204      	adds	r2, #4

08006376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006378:	d3fb      	bcc.n	8006372 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800637a:	f00e fecf 	bl	801511c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800637e:	f7ff faa7 	bl	80058d0 <main>
  bx lr
 8006382:	4770      	bx	lr
  ldr r0, =_sdata
 8006384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006388:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 800638c:	080164f0 	.word	0x080164f0
  ldr r2, =_sbss
 8006390:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8006394:	20002e08 	.word	0x20002e08

08006398 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006398:	e7fe      	b.n	8006398 <ADC1_2_IRQHandler>
	...

0800639c <AT24Cxx_get_max_addr>:
#include <stdio.h>

#include "AT24Cxx_stm32_hal.h"

uint16_t AT24Cxx_get_max_addr ( AT24Cxx_device_t* dev )
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	791b      	ldrb	r3, [r3, #4]
 80063a8:	2b05      	cmp	r3, #5
 80063aa:	d820      	bhi.n	80063ee <AT24Cxx_get_max_addr+0x52>
 80063ac:	a201      	add	r2, pc, #4	@ (adr r2, 80063b4 <AT24Cxx_get_max_addr+0x18>)
 80063ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b2:	bf00      	nop
 80063b4:	080063cd 	.word	0x080063cd
 80063b8:	080063d1 	.word	0x080063d1
 80063bc:	080063d7 	.word	0x080063d7
 80063c0:	080063dd 	.word	0x080063dd
 80063c4:	080063e3 	.word	0x080063e3
 80063c8:	080063e9 	.word	0x080063e9
	case AT24C01:
		return AT24C01_MAX_ADDR;
 80063cc:	237f      	movs	r3, #127	@ 0x7f
 80063ce:	e00f      	b.n	80063f0 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C32:
		return AT24C32_MAX_ADDR;
 80063d0:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80063d4:	e00c      	b.n	80063f0 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C64:
		return AT24C64_MAX_ADDR;
 80063d6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80063da:	e009      	b.n	80063f0 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C128:
		return AT24C128_MAX_ADDR;
 80063dc:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 80063e0:	e006      	b.n	80063f0 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C256:
		return AT24C256_MAX_ADDR;
 80063e2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80063e6:	e003      	b.n	80063f0 <AT24Cxx_get_max_addr+0x54>
		break;
		//not supported yet, will overflow
	case AT24C512:
		return AT24C512_MAX_ADDR;
 80063e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80063ec:	e000      	b.n	80063f0 <AT24Cxx_get_max_addr+0x54>
		break;
	default:
		return 0;
 80063ee:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bc80      	pop	{r7}
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop

080063fc <AT24Cxx_get_pg_size>:

uint16_t AT24Cxx_get_pg_size ( AT24Cxx_device_t* dev )
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	791b      	ldrb	r3, [r3, #4]
 8006408:	2b05      	cmp	r3, #5
 800640a:	d81b      	bhi.n	8006444 <AT24Cxx_get_pg_size+0x48>
 800640c:	a201      	add	r2, pc, #4	@ (adr r2, 8006414 <AT24Cxx_get_pg_size+0x18>)
 800640e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006412:	bf00      	nop
 8006414:	0800642d 	.word	0x0800642d
 8006418:	08006431 	.word	0x08006431
 800641c:	08006435 	.word	0x08006435
 8006420:	08006439 	.word	0x08006439
 8006424:	0800643d 	.word	0x0800643d
 8006428:	08006441 	.word	0x08006441
	case AT24C01:
		return AT24C01_PG_SIZE;
 800642c:	2308      	movs	r3, #8
 800642e:	e00a      	b.n	8006446 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C32:
		return AT24C32_PG_SIZE;
 8006430:	2320      	movs	r3, #32
 8006432:	e008      	b.n	8006446 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C64:
		return AT24C64_PG_SIZE;
 8006434:	2320      	movs	r3, #32
 8006436:	e006      	b.n	8006446 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C128:
		return AT24C128_PG_SIZE;
 8006438:	2340      	movs	r3, #64	@ 0x40
 800643a:	e004      	b.n	8006446 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C256:
		return AT24C256_PG_SIZE;
 800643c:	2340      	movs	r3, #64	@ 0x40
 800643e:	e002      	b.n	8006446 <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C512:
		//not supported yet, will overflow
		return AT24C512_PG_SIZE;
 8006440:	2380      	movs	r3, #128	@ 0x80
 8006442:	e000      	b.n	8006446 <AT24Cxx_get_pg_size+0x4a>
		break;
	default:
		return 0;
 8006444:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 8006446:	4618      	mov	r0, r3
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	bc80      	pop	{r7}
 800644e:	4770      	bx	lr

08006450 <AT24Cxx_init>:

AT24Cxx_ERR_TypeDef AT24Cxx_init( AT24Cxx_devices_t* devices, 
	uint8_t init_dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	460b      	mov	r3, r1
 800645a:	607a      	str	r2, [r7, #4]
 800645c:	72fb      	strb	r3, [r7, #11]
	//adds first device to AT32Cxx_devices array
	//further devices should be added by calling AT24Cxx_add_dev()
	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 800645e:	2114      	movs	r1, #20
 8006460:	2001      	movs	r0, #1
 8006462:	f00e fd73 	bl	8014f4c <calloc>
 8006466:	4603      	mov	r3, r0
 8006468:	613b      	str	r3, [r7, #16]
	if ( at == NULL )
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d102      	bne.n	8006476 <AT24Cxx_init+0x26>
		return at_init_err;
 8006470:	f04f 33ff 	mov.w	r3, #4294967295
 8006474:	e028      	b.n	80064c8 <AT24Cxx_init+0x78>

	for(uint8_t i = 0; i < 8; i++)
 8006476:	2300      	movs	r3, #0
 8006478:	75fb      	strb	r3, [r7, #23]
 800647a:	e007      	b.n	800648c <AT24Cxx_init+0x3c>
			devices->devices[i] = 0x00;
 800647c:	7dfa      	ldrb	r2, [r7, #23]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2100      	movs	r1, #0
 8006482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i = 0; i < 8; i++)
 8006486:	7dfb      	ldrb	r3, [r7, #23]
 8006488:	3301      	adds	r3, #1
 800648a:	75fb      	strb	r3, [r7, #23]
 800648c:	7dfb      	ldrb	r3, [r7, #23]
 800648e:	2b07      	cmp	r3, #7
 8006490:	d9f4      	bls.n	800647c <AT24Cxx_init+0x2c>

	at->dev_addr = init_dev_addr;
 8006492:	7afb      	ldrb	r3, [r7, #11]
 8006494:	b29a      	uxth	r2, r3
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	2200      	movs	r2, #0
 800649e:	60da      	str	r2, [r3, #12]
	at->prev_dev = NULL;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	2200      	movs	r2, #0
 80064a4:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	2205      	movs	r2, #5
 80064aa:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	2201      	movs	r2, #1
 80064b6:	721a      	strb	r2, [r3, #8]
	devices->dev_count = 1;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[0] = at;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	601a      	str	r2, [r3, #0]

	return at_ok;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3718      	adds	r7, #24
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <AT24Cxx_add_dev>:

AT24Cxx_ERR_TypeDef AT24Cxx_add_dev( AT24Cxx_devices_t* devices, 
	uint8_t dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	460b      	mov	r3, r1
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	72fb      	strb	r3, [r7, #11]
	if(devices->dev_count == 0 || devices->dev_count > 8)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d004      	beq.n	80064f2 <AT24Cxx_add_dev+0x22>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064ee:	2b08      	cmp	r3, #8
 80064f0:	d902      	bls.n	80064f8 <AT24Cxx_add_dev+0x28>
		return at_add_dev_err;
 80064f2:	f06f 0301 	mvn.w	r3, #1
 80064f6:	e03e      	b.n	8006576 <AT24Cxx_add_dev+0xa6>

	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 80064f8:	2114      	movs	r1, #20
 80064fa:	2001      	movs	r0, #1
 80064fc:	f00e fd26 	bl	8014f4c <calloc>
 8006500:	4603      	mov	r3, r0
 8006502:	617b      	str	r3, [r7, #20]
	if ( at == NULL )
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d102      	bne.n	8006510 <AT24Cxx_add_dev+0x40>
		return at_add_dev_err;
 800650a:	f06f 0301 	mvn.w	r3, #1
 800650e:	e032      	b.n	8006576 <AT24Cxx_add_dev+0xa6>

	at->dev_addr = dev_addr;
 8006510:	7afb      	ldrb	r3, [r7, #11]
 8006512:	b29a      	uxth	r2, r3
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	2200      	movs	r2, #0
 800651c:	60da      	str	r2, [r3, #12]
	at->prev_dev = devices->devices[devices->dev_count-1];
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006524:	1e5a      	subs	r2, r3, #1
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	2205      	movs	r2, #5
 8006534:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	2201      	movs	r2, #1
 8006540:	721a      	strb	r2, [r3, #8]
	devices->dev_count++;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006548:	3301      	adds	r3, #1
 800654a:	b2da      	uxtb	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[devices->dev_count-1] = at;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006558:	1e5a      	subs	r2, r3, #1
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6979      	ldr	r1, [r7, #20]
 800655e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	//update previous device's next device
	devices->devices[devices->dev_count-2]->next_dev = at;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006568:	1e9a      	subs	r2, r3, #2
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	60da      	str	r2, [r3, #12]
	return at_ok;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3718      	adds	r7, #24
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <AT24Cxx_write_byte_buffer>:
	return at_w_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_write_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 800657e:	b5b0      	push	{r4, r5, r7, lr}
 8006580:	b08a      	sub	sp, #40	@ 0x28
 8006582:	af04      	add	r7, sp, #16
 8006584:	60f8      	str	r0, [r7, #12]
 8006586:	60b9      	str	r1, [r7, #8]
 8006588:	4611      	mov	r1, r2
 800658a:	461a      	mov	r2, r3
 800658c:	460b      	mov	r3, r1
 800658e:	80fb      	strh	r3, [r7, #6]
 8006590:	4613      	mov	r3, r2
 8006592:	80bb      	strh	r3, [r7, #4]
	//TODO checks

	uint8_t page_size = AT24Cxx_get_pg_size(dev);
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f7ff ff31 	bl	80063fc <AT24Cxx_get_pg_size>
 800659a:	4603      	mov	r3, r0
 800659c:	75bb      	strb	r3, [r7, #22]

	uint8_t page_remaining = page_size - mem_addr % page_size;
 800659e:	88fb      	ldrh	r3, [r7, #6]
 80065a0:	7dba      	ldrb	r2, [r7, #22]
 80065a2:	fb93 f1f2 	sdiv	r1, r3, r2
 80065a6:	fb01 f202 	mul.w	r2, r1, r2
 80065aa:	1a9b      	subs	r3, r3, r2
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	7dba      	ldrb	r2, [r7, #22]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	757b      	strb	r3, [r7, #21]

	uint8_t page_writes = (buf_length - page_remaining) / page_size;
 80065b4:	88ba      	ldrh	r2, [r7, #4]
 80065b6:	7d7b      	ldrb	r3, [r7, #21]
 80065b8:	1ad2      	subs	r2, r2, r3
 80065ba:	7dbb      	ldrb	r3, [r7, #22]
 80065bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80065c0:	753b      	strb	r3, [r7, #20]
	uint8_t remainder_writes = (buf_length - page_remaining) % page_size;
 80065c2:	88ba      	ldrh	r2, [r7, #4]
 80065c4:	7d7b      	ldrb	r3, [r7, #21]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	7dba      	ldrb	r2, [r7, #22]
 80065ca:	fb93 f1f2 	sdiv	r1, r3, r2
 80065ce:	fb01 f202 	mul.w	r2, r1, r2
 80065d2:	1a9b      	subs	r3, r3, r2
 80065d4:	74fb      	strb	r3, [r7, #19]

	//finish first page
	if((mem_addr + page_remaining) > 0x00 &&
 80065d6:	88fa      	ldrh	r2, [r7, #6]
 80065d8:	7d7b      	ldrb	r3, [r7, #21]
 80065da:	4413      	add	r3, r2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	dd23      	ble.n	8006628 <AT24Cxx_write_byte_buffer+0xaa>
		(mem_addr + page_remaining) < AT24Cxx_get_max_addr(dev)){
 80065e0:	88fa      	ldrh	r2, [r7, #6]
 80065e2:	7d7b      	ldrb	r3, [r7, #21]
 80065e4:	18d4      	adds	r4, r2, r3
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f7ff fed8 	bl	800639c <AT24Cxx_get_max_addr>
 80065ec:	4603      	mov	r3, r0
	if((mem_addr + page_remaining) > 0x00 &&
 80065ee:	429c      	cmp	r4, r3
 80065f0:	da1a      	bge.n	8006628 <AT24Cxx_write_byte_buffer+0xaa>

		while(HAL_I2C_Mem_Write(dev->dev_port,
 80065f2:	bf00      	nop
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	88db      	ldrh	r3, [r3, #6]
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	b21b      	sxth	r3, r3
 8006600:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8006604:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Write(dev->dev_port,
 8006606:	b299      	uxth	r1, r3
 8006608:	7d7b      	ldrb	r3, [r7, #21]
 800660a:	b29b      	uxth	r3, r3
 800660c:	88fa      	ldrh	r2, [r7, #6]
 800660e:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8006612:	9402      	str	r4, [sp, #8]
 8006614:	9301      	str	r3, [sp, #4]
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	2310      	movs	r3, #16
 800661c:	f002 feda 	bl	80093d4 <HAL_I2C_Mem_Write>
 8006620:	4603      	mov	r3, r0
				(uint16_t) mem_addr,
				I2C_MEMADD_SIZE_16BIT,
				data_buf,
				page_remaining,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e6      	bne.n	80065f4 <AT24Cxx_write_byte_buffer+0x76>
	if((mem_addr + page_remaining) > 0x00 &&
 8006626:	e002      	b.n	800662e <AT24Cxx_write_byte_buffer+0xb0>
	}else return at_w_bytes_err;
 8006628:	f06f 0304 	mvn.w	r3, #4
 800662c:	e0a5      	b.n	800677a <AT24Cxx_write_byte_buffer+0x1fc>

	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 800662e:	2300      	movs	r3, #0
 8006630:	75fb      	strb	r3, [r7, #23]
 8006632:	e04e      	b.n	80066d2 <AT24Cxx_write_byte_buffer+0x154>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8006634:	88fa      	ldrh	r2, [r7, #6]
 8006636:	7d7b      	ldrb	r3, [r7, #21]
 8006638:	441a      	add	r2, r3
 800663a:	7dfb      	ldrb	r3, [r7, #23]
 800663c:	7db9      	ldrb	r1, [r7, #22]
 800663e:	fb01 f303 	mul.w	r3, r1, r3
 8006642:	4413      	add	r3, r2
 8006644:	2b00      	cmp	r3, #0
 8006646:	dd3e      	ble.n	80066c6 <AT24Cxx_write_byte_buffer+0x148>
			(mem_addr + page_remaining + (current_page * page_size)) < AT24Cxx_get_max_addr(dev)){
 8006648:	88fa      	ldrh	r2, [r7, #6]
 800664a:	7d7b      	ldrb	r3, [r7, #21]
 800664c:	441a      	add	r2, r3
 800664e:	7dfb      	ldrb	r3, [r7, #23]
 8006650:	7db9      	ldrb	r1, [r7, #22]
 8006652:	fb01 f303 	mul.w	r3, r1, r3
 8006656:	18d4      	adds	r4, r2, r3
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f7ff fe9f 	bl	800639c <AT24Cxx_get_max_addr>
 800665e:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8006660:	429c      	cmp	r4, r3
 8006662:	da30      	bge.n	80066c6 <AT24Cxx_write_byte_buffer+0x148>

				while(HAL_I2C_Mem_Write(dev->dev_port,
 8006664:	bf00      	nop
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6818      	ldr	r0, [r3, #0]
					AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	88db      	ldrh	r3, [r3, #6]
 800666e:	005b      	lsls	r3, r3, #1
 8006670:	b21b      	sxth	r3, r3
 8006672:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8006676:	b21b      	sxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8006678:	b29c      	uxth	r4, r3
					(uint16_t) mem_addr + page_remaining + (current_page * page_size),
 800667a:	7d7b      	ldrb	r3, [r7, #21]
 800667c:	b29a      	uxth	r2, r3
 800667e:	88fb      	ldrh	r3, [r7, #6]
 8006680:	4413      	add	r3, r2
 8006682:	b29a      	uxth	r2, r3
 8006684:	7dfb      	ldrb	r3, [r7, #23]
 8006686:	b29b      	uxth	r3, r3
 8006688:	7db9      	ldrb	r1, [r7, #22]
 800668a:	b289      	uxth	r1, r1
 800668c:	fb01 f303 	mul.w	r3, r1, r3
 8006690:	b29b      	uxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8006692:	4413      	add	r3, r2
 8006694:	b29d      	uxth	r5, r3
					I2C_MEMADD_SIZE_16BIT,
					data_buf + page_remaining + (current_page * page_size),
 8006696:	7d7b      	ldrb	r3, [r7, #21]
 8006698:	7dfa      	ldrb	r2, [r7, #23]
 800669a:	7db9      	ldrb	r1, [r7, #22]
 800669c:	fb01 f202 	mul.w	r2, r1, r2
 80066a0:	4413      	add	r3, r2
				while(HAL_I2C_Mem_Write(dev->dev_port,
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	4413      	add	r3, r2
 80066a6:	7dba      	ldrb	r2, [r7, #22]
 80066a8:	b292      	uxth	r2, r2
 80066aa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80066ae:	9102      	str	r1, [sp, #8]
 80066b0:	9201      	str	r2, [sp, #4]
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	2310      	movs	r3, #16
 80066b6:	462a      	mov	r2, r5
 80066b8:	4621      	mov	r1, r4
 80066ba:	f002 fe8b 	bl	80093d4 <HAL_I2C_Mem_Write>
 80066be:	4603      	mov	r3, r0
					page_size,
					AT24Cxx_I2C_TIMOUT) != HAL_OK);
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1d0      	bne.n	8006666 <AT24Cxx_write_byte_buffer+0xe8>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 80066c4:	e002      	b.n	80066cc <AT24Cxx_write_byte_buffer+0x14e>
		}else return at_w_bytes_err;
 80066c6:	f06f 0304 	mvn.w	r3, #4
 80066ca:	e056      	b.n	800677a <AT24Cxx_write_byte_buffer+0x1fc>
	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 80066cc:	7dfb      	ldrb	r3, [r7, #23]
 80066ce:	3301      	adds	r3, #1
 80066d0:	75fb      	strb	r3, [r7, #23]
 80066d2:	7dfa      	ldrb	r2, [r7, #23]
 80066d4:	7d3b      	ldrb	r3, [r7, #20]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d3ac      	bcc.n	8006634 <AT24Cxx_write_byte_buffer+0xb6>
	}

	if(remainder_writes){
 80066da:	7cfb      	ldrb	r3, [r7, #19]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d04b      	beq.n	8006778 <AT24Cxx_write_byte_buffer+0x1fa>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 80066e0:	88fa      	ldrh	r2, [r7, #6]
 80066e2:	7d7b      	ldrb	r3, [r7, #21]
 80066e4:	441a      	add	r2, r3
 80066e6:	7d3b      	ldrb	r3, [r7, #20]
 80066e8:	7db9      	ldrb	r1, [r7, #22]
 80066ea:	fb01 f303 	mul.w	r3, r1, r3
 80066ee:	4413      	add	r3, r2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	dd3e      	ble.n	8006772 <AT24Cxx_write_byte_buffer+0x1f4>
			(mem_addr + page_remaining + (page_writes * page_size)) < AT24Cxx_get_max_addr(dev)){
 80066f4:	88fa      	ldrh	r2, [r7, #6]
 80066f6:	7d7b      	ldrb	r3, [r7, #21]
 80066f8:	441a      	add	r2, r3
 80066fa:	7d3b      	ldrb	r3, [r7, #20]
 80066fc:	7db9      	ldrb	r1, [r7, #22]
 80066fe:	fb01 f303 	mul.w	r3, r1, r3
 8006702:	18d4      	adds	r4, r2, r3
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f7ff fe49 	bl	800639c <AT24Cxx_get_max_addr>
 800670a:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 800670c:	429c      	cmp	r4, r3
 800670e:	da30      	bge.n	8006772 <AT24Cxx_write_byte_buffer+0x1f4>

			while(HAL_I2C_Mem_Write(dev->dev_port,
 8006710:	bf00      	nop
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	88db      	ldrh	r3, [r3, #6]
 800671a:	005b      	lsls	r3, r3, #1
 800671c:	b21b      	sxth	r3, r3
 800671e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8006722:	b21b      	sxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 8006724:	b29c      	uxth	r4, r3
				(uint16_t) mem_addr + page_remaining + (page_writes * page_size),
 8006726:	7d7b      	ldrb	r3, [r7, #21]
 8006728:	b29a      	uxth	r2, r3
 800672a:	88fb      	ldrh	r3, [r7, #6]
 800672c:	4413      	add	r3, r2
 800672e:	b29a      	uxth	r2, r3
 8006730:	7d3b      	ldrb	r3, [r7, #20]
 8006732:	b29b      	uxth	r3, r3
 8006734:	7db9      	ldrb	r1, [r7, #22]
 8006736:	b289      	uxth	r1, r1
 8006738:	fb01 f303 	mul.w	r3, r1, r3
 800673c:	b29b      	uxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 800673e:	4413      	add	r3, r2
 8006740:	b29d      	uxth	r5, r3
				I2C_MEMADD_SIZE_16BIT,
				data_buf + page_remaining + (page_writes * page_size),
 8006742:	7d7b      	ldrb	r3, [r7, #21]
 8006744:	7d3a      	ldrb	r2, [r7, #20]
 8006746:	7db9      	ldrb	r1, [r7, #22]
 8006748:	fb01 f202 	mul.w	r2, r1, r2
 800674c:	4413      	add	r3, r2
			while(HAL_I2C_Mem_Write(dev->dev_port,
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	4413      	add	r3, r2
 8006752:	7cfa      	ldrb	r2, [r7, #19]
 8006754:	b292      	uxth	r2, r2
 8006756:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800675a:	9102      	str	r1, [sp, #8]
 800675c:	9201      	str	r2, [sp, #4]
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	2310      	movs	r3, #16
 8006762:	462a      	mov	r2, r5
 8006764:	4621      	mov	r1, r4
 8006766:	f002 fe35 	bl	80093d4 <HAL_I2C_Mem_Write>
 800676a:	4603      	mov	r3, r0
				remainder_writes,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1d0      	bne.n	8006712 <AT24Cxx_write_byte_buffer+0x194>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8006770:	e002      	b.n	8006778 <AT24Cxx_write_byte_buffer+0x1fa>
		}else return at_w_bytes_err;
 8006772:	f06f 0304 	mvn.w	r3, #4
 8006776:	e000      	b.n	800677a <AT24Cxx_write_byte_buffer+0x1fc>
	}

	return at_ok;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3718      	adds	r7, #24
 800677e:	46bd      	mov	sp, r7
 8006780:	bdb0      	pop	{r4, r5, r7, pc}

08006782 <AT24Cxx_read_byte_buffer>:
	return at_r_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_read_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b088      	sub	sp, #32
 8006786:	af04      	add	r7, sp, #16
 8006788:	60f8      	str	r0, [r7, #12]
 800678a:	60b9      	str	r1, [r7, #8]
 800678c:	4611      	mov	r1, r2
 800678e:	461a      	mov	r2, r3
 8006790:	460b      	mov	r3, r1
 8006792:	80fb      	strh	r3, [r7, #6]
 8006794:	4613      	mov	r3, r2
 8006796:	80bb      	strh	r3, [r7, #4]
	if(mem_addr > 0x00 && mem_addr < AT24Cxx_get_max_addr(dev)){
 8006798:	88fb      	ldrh	r3, [r7, #6]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d022      	beq.n	80067e4 <AT24Cxx_read_byte_buffer+0x62>
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f7ff fdfc 	bl	800639c <AT24Cxx_get_max_addr>
 80067a4:	4603      	mov	r3, r0
 80067a6:	461a      	mov	r2, r3
 80067a8:	88fb      	ldrh	r3, [r7, #6]
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d21a      	bcs.n	80067e4 <AT24Cxx_read_byte_buffer+0x62>
		while(HAL_I2C_Mem_Read(dev->dev_port,
 80067ae:	bf00      	nop
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_R | (dev->dev_addr << 1) ,
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	88db      	ldrh	r3, [r3, #6]
 80067b8:	005b      	lsls	r3, r3, #1
 80067ba:	b21b      	sxth	r3, r3
 80067bc:	f043 03a1 	orr.w	r3, r3, #161	@ 0xa1
 80067c0:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Read(dev->dev_port,
 80067c2:	b299      	uxth	r1, r3
 80067c4:	88fa      	ldrh	r2, [r7, #6]
 80067c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80067ca:	9302      	str	r3, [sp, #8]
 80067cc:	88bb      	ldrh	r3, [r7, #4]
 80067ce:	9301      	str	r3, [sp, #4]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	2310      	movs	r3, #16
 80067d6:	f002 fef7 	bl	80095c8 <HAL_I2C_Mem_Read>
 80067da:	4603      	mov	r3, r0
				(uint16_t) mem_addr, I2C_MEMADD_SIZE_16BIT, data_buf, buf_length,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e7      	bne.n	80067b0 <AT24Cxx_read_byte_buffer+0x2e>
		return at_ok;
 80067e0:	2300      	movs	r3, #0
 80067e2:	e001      	b.n	80067e8 <AT24Cxx_read_byte_buffer+0x66>
	}
	return at_r_bytes_err;
 80067e4:	f06f 0306 	mvn.w	r3, #6
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <constrain>:
int16_t qPercent(fix12_t q);
int16_t qMultiply(fix12_t q, int16_t input);
fix12_t qConstruct(int16_t num, int16_t den);

static int constrain(int amt, int low, int high)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
    if (amt < low)
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	429a      	cmp	r2, r3
 8006802:	da01      	bge.n	8006808 <constrain+0x18>
        return low;
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	e006      	b.n	8006816 <constrain+0x26>
    else if (amt > high)
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	429a      	cmp	r2, r3
 800680e:	dd01      	ble.n	8006814 <constrain+0x24>
        return high;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	e000      	b.n	8006816 <constrain+0x26>
    else
        return amt;
 8006814:	68fb      	ldr	r3, [r7, #12]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	bc80      	pop	{r7}
 800681e:	4770      	bx	lr

08006820 <constrainf>:

static inline float constrainf(float amt, float low, float high)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
    if (amt < low)
 800682c:	68b9      	ldr	r1, [r7, #8]
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f7fa fcae 	bl	8001190 <__aeabi_fcmplt>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <constrainf+0x1e>
        return low;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	e009      	b.n	8006852 <constrainf+0x32>
    else if (amt > high)
 800683e:	6879      	ldr	r1, [r7, #4]
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f7fa fcc3 	bl	80011cc <__aeabi_fcmpgt>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d001      	beq.n	8006850 <constrainf+0x30>
        return high;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	e000      	b.n	8006852 <constrainf+0x32>
    else
        return amt;
 8006850:	68fb      	ldr	r3, [r7, #12]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
	...

0800685c <pt1FilterGain>:
//#include "scheduler.h"
#include"maths.h"
#include"math.h"

// 1oder
static inline float pt1FilterGain(float f_cut, float dT){
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
    float RC = 1 / (2 * M_PIf * f_cut);
 8006866:	490d      	ldr	r1, [pc, #52]	@ (800689c <pt1FilterGain+0x40>)
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7fa faf3 	bl	8000e54 <__aeabi_fmul>
 800686e:	4603      	mov	r3, r0
 8006870:	4619      	mov	r1, r3
 8006872:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8006876:	f7fa fba1 	bl	8000fbc <__aeabi_fdiv>
 800687a:	4603      	mov	r3, r0
 800687c:	60fb      	str	r3, [r7, #12]
    return dT/ (RC + dT);
 800687e:	6839      	ldr	r1, [r7, #0]
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f7fa f9df 	bl	8000c44 <__addsf3>
 8006886:	4603      	mov	r3, r0
 8006888:	4619      	mov	r1, r3
 800688a:	6838      	ldr	r0, [r7, #0]
 800688c:	f7fa fb96 	bl	8000fbc <__aeabi_fdiv>
 8006890:	4603      	mov	r3, r0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	40c90fdb 	.word	0x40c90fdb

080068a0 <attitude_ctrl_init>:


/*
 *  init pid controller
 **/
void attitude_ctrl_init(){
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af02      	add	r7, sp, #8

   speed_filter_reset = TRUE;
 80068a6:	4b2d      	ldr	r3, [pc, #180]	@ (800695c <attitude_ctrl_init+0xbc>)
 80068a8:	2201      	movs	r2, #1
 80068aa:	701a      	strb	r2, [r3, #0]
   ab_speed_filted = 0.0f;
 80068ac:	4b2c      	ldr	r3, [pc, #176]	@ (8006960 <attitude_ctrl_init+0xc0>)
 80068ae:	f04f 0200 	mov.w	r2, #0
 80068b2:	601a      	str	r2, [r3, #0]
   // init pid 
   pid_init(&roll_angle_pid,3,0,0,F_CUT_OFF,100);
 80068b4:	4b2b      	ldr	r3, [pc, #172]	@ (8006964 <attitude_ctrl_init+0xc4>)
 80068b6:	9301      	str	r3, [sp, #4]
 80068b8:	f04f 0300 	mov.w	r3, #0
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	f04f 0300 	mov.w	r3, #0
 80068c2:	f04f 0200 	mov.w	r2, #0
 80068c6:	4928      	ldr	r1, [pc, #160]	@ (8006968 <attitude_ctrl_init+0xc8>)
 80068c8:	4828      	ldr	r0, [pc, #160]	@ (800696c <attitude_ctrl_init+0xcc>)
 80068ca:	f7fd ffb4 	bl	8004836 <pid_init>
   pid_init(&roll_rate_pid,1.5,2.5,0,0,130);
 80068ce:	4b28      	ldr	r3, [pc, #160]	@ (8006970 <attitude_ctrl_init+0xd0>)
 80068d0:	9301      	str	r3, [sp, #4]
 80068d2:	f04f 0300 	mov.w	r3, #0
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	f04f 0300 	mov.w	r3, #0
 80068dc:	4a25      	ldr	r2, [pc, #148]	@ (8006974 <attitude_ctrl_init+0xd4>)
 80068de:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 80068e2:	4825      	ldr	r0, [pc, #148]	@ (8006978 <attitude_ctrl_init+0xd8>)
 80068e4:	f7fd ffa7 	bl	8004836 <pid_init>

   pid_init(&pitch_angle_pid,3,0,0,F_CUT_OFF,100);
 80068e8:	4b1e      	ldr	r3, [pc, #120]	@ (8006964 <attitude_ctrl_init+0xc4>)
 80068ea:	9301      	str	r3, [sp, #4]
 80068ec:	f04f 0300 	mov.w	r3, #0
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	f04f 0300 	mov.w	r3, #0
 80068f6:	f04f 0200 	mov.w	r2, #0
 80068fa:	491b      	ldr	r1, [pc, #108]	@ (8006968 <attitude_ctrl_init+0xc8>)
 80068fc:	481f      	ldr	r0, [pc, #124]	@ (800697c <attitude_ctrl_init+0xdc>)
 80068fe:	f7fd ff9a 	bl	8004836 <pid_init>
   pid_init(&pitch_rate_pid,1.5,2.5,0,F_CUT_OFF,130);
 8006902:	4b1b      	ldr	r3, [pc, #108]	@ (8006970 <attitude_ctrl_init+0xd0>)
 8006904:	9301      	str	r3, [sp, #4]
 8006906:	f04f 0300 	mov.w	r3, #0
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	f04f 0300 	mov.w	r3, #0
 8006910:	4a18      	ldr	r2, [pc, #96]	@ (8006974 <attitude_ctrl_init+0xd4>)
 8006912:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8006916:	481a      	ldr	r0, [pc, #104]	@ (8006980 <attitude_ctrl_init+0xe0>)
 8006918:	f7fd ff8d 	bl	8004836 <pid_init>

   // rate 
   pid_init(&roll_rate_t,4,0,0,F_CUT_OFF,300);
 800691c:	4b19      	ldr	r3, [pc, #100]	@ (8006984 <attitude_ctrl_init+0xe4>)
 800691e:	9301      	str	r3, [sp, #4]
 8006920:	f04f 0300 	mov.w	r3, #0
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	f04f 0300 	mov.w	r3, #0
 800692a:	f04f 0200 	mov.w	r2, #0
 800692e:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8006932:	4815      	ldr	r0, [pc, #84]	@ (8006988 <attitude_ctrl_init+0xe8>)
 8006934:	f7fd ff7f 	bl	8004836 <pid_init>
   pid_init(&pitch_rate_t,4,0,0,F_CUT_OFF,300);
 8006938:	4b12      	ldr	r3, [pc, #72]	@ (8006984 <attitude_ctrl_init+0xe4>)
 800693a:	9301      	str	r3, [sp, #4]
 800693c:	f04f 0300 	mov.w	r3, #0
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	f04f 0300 	mov.w	r3, #0
 8006946:	f04f 0200 	mov.w	r2, #0
 800694a:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800694e:	480f      	ldr	r0, [pc, #60]	@ (800698c <attitude_ctrl_init+0xec>)
 8006950:	f7fd ff71 	bl	8004836 <pid_init>

}
 8006954:	bf00      	nop
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	20000b74 	.word	0x20000b74
 8006960:	20000c64 	.word	0x20000c64
 8006964:	42c80000 	.word	0x42c80000
 8006968:	40400000 	.word	0x40400000
 800696c:	20000bc0 	.word	0x20000bc0
 8006970:	43020000 	.word	0x43020000
 8006974:	40200000 	.word	0x40200000
 8006978:	20000b78 	.word	0x20000b78
 800697c:	20000be4 	.word	0x20000be4
 8006980:	20000b9c 	.word	0x20000b9c
 8006984:	43960000 	.word	0x43960000
 8006988:	20000c08 	.word	0x20000c08
 800698c:	20000c2c 	.word	0x20000c2c

08006990 <attitude_ctrl>:

void attitude_ctrl(uint32_t micros){
 8006990:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006994:	b09a      	sub	sp, #104	@ 0x68
 8006996:	af02      	add	r7, sp, #8
 8006998:	6078      	str	r0, [r7, #4]
    static uint32_t last_time_us; 
    float dt = (micros - last_time_us)*(1e-6f);
 800699a:	4b9b      	ldr	r3, [pc, #620]	@ (8006c08 <attitude_ctrl+0x278>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7fa f9fe 	bl	8000da4 <__aeabi_ui2f>
 80069a8:	4603      	mov	r3, r0
 80069aa:	4998      	ldr	r1, [pc, #608]	@ (8006c0c <attitude_ctrl+0x27c>)
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7fa fa51 	bl	8000e54 <__aeabi_fmul>
 80069b2:	4603      	mov	r3, r0
 80069b4:	65bb      	str	r3, [r7, #88]	@ 0x58
    last_time_us = micros;
 80069b6:	4a94      	ldr	r2, [pc, #592]	@ (8006c08 <attitude_ctrl+0x278>)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6013      	str	r3, [r2, #0]
    if(dt < 0 || dt > MAX_WAIT_TIME){
 80069bc:	f04f 0100 	mov.w	r1, #0
 80069c0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80069c2:	f7fa fbe5 	bl	8001190 <__aeabi_fcmplt>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f040 837f 	bne.w	80070cc <attitude_ctrl+0x73c>
 80069ce:	4990      	ldr	r1, [pc, #576]	@ (8006c10 <attitude_ctrl+0x280>)
 80069d0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80069d2:	f7fa fbfb 	bl	80011cc <__aeabi_fcmpgt>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f040 8377 	bne.w	80070cc <attitude_ctrl+0x73c>
        return;
    }

    float roll_rate_measurement = AHRS.roll_rate;
 80069de:	4b8d      	ldr	r3, [pc, #564]	@ (8006c14 <attitude_ctrl+0x284>)
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	657b      	str	r3, [r7, #84]	@ 0x54
    float pitch_rate_measurement = AHRS.pitch_rate;
 80069e4:	4b8b      	ldr	r3, [pc, #556]	@ (8006c14 <attitude_ctrl+0x284>)
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	653b      	str	r3, [r7, #80]	@ 0x50

    float roll_measurement = AHRS.roll;
 80069ea:	4b8a      	ldr	r3, [pc, #552]	@ (8006c14 <attitude_ctrl+0x284>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
    float pitch_measurement = AHRS.pitch;
 80069f0:	4b88      	ldr	r3, [pc, #544]	@ (8006c14 <attitude_ctrl+0x284>)
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	64bb      	str	r3, [r7, #72]	@ 0x48

    static float roll_pid_smooth = 0.0f;
    static float pitch_pid_smooth = 0.0f;

    roll_desired = ((int)ibusChannelData[0] - 1500)*0.1f;   /*  -50 <-  -> +50  */ 
 80069f6:	4b88      	ldr	r3, [pc, #544]	@ (8006c18 <attitude_ctrl+0x288>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fa f9d4 	bl	8000dac <__aeabi_i2f>
 8006a04:	4603      	mov	r3, r0
 8006a06:	4982      	ldr	r1, [pc, #520]	@ (8006c10 <attitude_ctrl+0x280>)
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fa fa23 	bl	8000e54 <__aeabi_fmul>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	461a      	mov	r2, r3
 8006a12:	4b82      	ldr	r3, [pc, #520]	@ (8006c1c <attitude_ctrl+0x28c>)
 8006a14:	601a      	str	r2, [r3, #0]
	pitch_desired = ((int)ibusChannelData[1] - 1500)*-0.15f;/*  -75 <-  -> +75  */ 
 8006a16:	4b80      	ldr	r3, [pc, #512]	@ (8006c18 <attitude_ctrl+0x288>)
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fa f9c4 	bl	8000dac <__aeabi_i2f>
 8006a24:	4603      	mov	r3, r0
 8006a26:	497e      	ldr	r1, [pc, #504]	@ (8006c20 <attitude_ctrl+0x290>)
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7fa fa13 	bl	8000e54 <__aeabi_fmul>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	461a      	mov	r2, r3
 8006a32:	4b7c      	ldr	r3, [pc, #496]	@ (8006c24 <attitude_ctrl+0x294>)
 8006a34:	601a      	str	r2, [r3, #0]

    v_estimate = dynamic_speed_esitmate(dt);
 8006a36:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006a38:	f000 fc6a 	bl	8007310 <dynamic_speed_esitmate>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	4a7a      	ldr	r2, [pc, #488]	@ (8006c28 <attitude_ctrl+0x298>)
 8006a40:	6013      	str	r3, [r2, #0]
    if(v_estimate < 0)
 8006a42:	4b79      	ldr	r3, [pc, #484]	@ (8006c28 <attitude_ctrl+0x298>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f04f 0100 	mov.w	r1, #0
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fa fba0 	bl	8001190 <__aeabi_fcmplt>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <attitude_ctrl+0xce>
    	v_estimate = 0;
 8006a56:	4b74      	ldr	r3, [pc, #464]	@ (8006c28 <attitude_ctrl+0x298>)
 8006a58:	f04f 0200 	mov.w	r2, #0
 8006a5c:	601a      	str	r2, [r3, #0]

    // pid scale with velocity
	float pid_velo_scale;
    if(_gps.fix > 1){
 8006a5e:	4b73      	ldr	r3, [pc, #460]	@ (8006c2c <attitude_ctrl+0x29c>)
 8006a60:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	f240 8083 	bls.w	8006b70 <attitude_ctrl+0x1e0>
        float vn = (float)_gps.velocity[0]/100;  // m
 8006a6a:	4b70      	ldr	r3, [pc, #448]	@ (8006c2c <attitude_ctrl+0x29c>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fa f99c 	bl	8000dac <__aeabi_i2f>
 8006a74:	4603      	mov	r3, r0
 8006a76:	496e      	ldr	r1, [pc, #440]	@ (8006c30 <attitude_ctrl+0x2a0>)
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7fa fa9f 	bl	8000fbc <__aeabi_fdiv>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	647b      	str	r3, [r7, #68]	@ 0x44
        float ve = (float)_gps.velocity[1]/100;  // m
 8006a82:	4b6a      	ldr	r3, [pc, #424]	@ (8006c2c <attitude_ctrl+0x29c>)
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fa f990 	bl	8000dac <__aeabi_i2f>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	4968      	ldr	r1, [pc, #416]	@ (8006c30 <attitude_ctrl+0x2a0>)
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fa fa93 	bl	8000fbc <__aeabi_fdiv>
 8006a96:	4603      	mov	r3, r0
 8006a98:	643b      	str	r3, [r7, #64]	@ 0x40
        //float vd = (float)_gps.velocity[2]/100;  // m

        float absolute_velocity = sqrtf(sq(vn) + sq(ve));// + sq(vd));
 8006a9a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006a9c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8006a9e:	f7fa f9d9 	bl	8000e54 <__aeabi_fmul>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	461c      	mov	r4, r3
 8006aa6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006aa8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8006aaa:	f7fa f9d3 	bl	8000e54 <__aeabi_fmul>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	f7fa f8c6 	bl	8000c44 <__addsf3>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	4618      	mov	r0, r3
 8006abc:	f00e fbd3 	bl	8015266 <sqrtf>
 8006ac0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        absolute_velocity = constrainf(absolute_velocity,0,MAX_SPEED); 
 8006ac2:	4a5c      	ldr	r2, [pc, #368]	@ (8006c34 <attitude_ctrl+0x2a4>)
 8006ac4:	f04f 0100 	mov.w	r1, #0
 8006ac8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006aca:	f7ff fea9 	bl	8006820 <constrainf>
 8006ace:	63f8      	str	r0, [r7, #60]	@ 0x3c
        if(speed_filter_reset){
 8006ad0:	4b59      	ldr	r3, [pc, #356]	@ (8006c38 <attitude_ctrl+0x2a8>)
 8006ad2:	f993 3000 	ldrsb.w	r3, [r3]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d005      	beq.n	8006ae6 <attitude_ctrl+0x156>
            ab_speed_filted = absolute_velocity;
 8006ada:	4a58      	ldr	r2, [pc, #352]	@ (8006c3c <attitude_ctrl+0x2ac>)
 8006adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ade:	6013      	str	r3, [r2, #0]
            speed_filter_reset = FALSE;
 8006ae0:	4b55      	ldr	r3, [pc, #340]	@ (8006c38 <attitude_ctrl+0x2a8>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	701a      	strb	r2, [r3, #0]
        }
        ab_speed_filted += pt1FilterGain(10,dt)*(absolute_velocity - ab_speed_filted);
 8006ae6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006ae8:	4855      	ldr	r0, [pc, #340]	@ (8006c40 <attitude_ctrl+0x2b0>)
 8006aea:	f7ff feb7 	bl	800685c <pt1FilterGain>
 8006aee:	4604      	mov	r4, r0
 8006af0:	4b52      	ldr	r3, [pc, #328]	@ (8006c3c <attitude_ctrl+0x2ac>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4619      	mov	r1, r3
 8006af6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006af8:	f7fa f8a2 	bl	8000c40 <__aeabi_fsub>
 8006afc:	4603      	mov	r3, r0
 8006afe:	4619      	mov	r1, r3
 8006b00:	4620      	mov	r0, r4
 8006b02:	f7fa f9a7 	bl	8000e54 <__aeabi_fmul>
 8006b06:	4603      	mov	r3, r0
 8006b08:	461a      	mov	r2, r3
 8006b0a:	4b4c      	ldr	r3, [pc, #304]	@ (8006c3c <attitude_ctrl+0x2ac>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4619      	mov	r1, r3
 8006b10:	4610      	mov	r0, r2
 8006b12:	f7fa f897 	bl	8000c44 <__addsf3>
 8006b16:	4603      	mov	r3, r0
 8006b18:	461a      	mov	r2, r3
 8006b1a:	4b48      	ldr	r3, [pc, #288]	@ (8006c3c <attitude_ctrl+0x2ac>)
 8006b1c:	601a      	str	r2, [r3, #0]
        float speed_temp = constrainf(ab_speed_filted,MINIMUN_SPEED,MAXIMUN_SPEED);
 8006b1e:	4b47      	ldr	r3, [pc, #284]	@ (8006c3c <attitude_ctrl+0x2ac>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a48      	ldr	r2, [pc, #288]	@ (8006c44 <attitude_ctrl+0x2b4>)
 8006b24:	4948      	ldr	r1, [pc, #288]	@ (8006c48 <attitude_ctrl+0x2b8>)
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7ff fe7a 	bl	8006820 <constrainf>
 8006b2c:	63b8      	str	r0, [r7, #56]	@ 0x38
        pid_velo_scale = (float)MINIMUN_SPEED/((float)MINIMUN_SPEED + sq(speed_temp - MINIMUN_SPEED)*0.045f);
 8006b2e:	4946      	ldr	r1, [pc, #280]	@ (8006c48 <attitude_ctrl+0x2b8>)
 8006b30:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006b32:	f7fa f885 	bl	8000c40 <__aeabi_fsub>
 8006b36:	4603      	mov	r3, r0
 8006b38:	461c      	mov	r4, r3
 8006b3a:	4943      	ldr	r1, [pc, #268]	@ (8006c48 <attitude_ctrl+0x2b8>)
 8006b3c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006b3e:	f7fa f87f 	bl	8000c40 <__aeabi_fsub>
 8006b42:	4603      	mov	r3, r0
 8006b44:	4619      	mov	r1, r3
 8006b46:	4620      	mov	r0, r4
 8006b48:	f7fa f984 	bl	8000e54 <__aeabi_fmul>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	493f      	ldr	r1, [pc, #252]	@ (8006c4c <attitude_ctrl+0x2bc>)
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7fa f97f 	bl	8000e54 <__aeabi_fmul>
 8006b56:	4603      	mov	r3, r0
 8006b58:	493b      	ldr	r1, [pc, #236]	@ (8006c48 <attitude_ctrl+0x2b8>)
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fa f872 	bl	8000c44 <__addsf3>
 8006b60:	4603      	mov	r3, r0
 8006b62:	4619      	mov	r1, r3
 8006b64:	4838      	ldr	r0, [pc, #224]	@ (8006c48 <attitude_ctrl+0x2b8>)
 8006b66:	f7fa fa29 	bl	8000fbc <__aeabi_fdiv>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b6e:	e00e      	b.n	8006b8e <attitude_ctrl+0x1fe>
    }
    else{
        speed_filter_reset = TRUE;
 8006b70:	4b31      	ldr	r3, [pc, #196]	@ (8006c38 <attitude_ctrl+0x2a8>)
 8006b72:	2201      	movs	r2, #1
 8006b74:	701a      	strb	r2, [r3, #0]

    	if(ibusChannelData[CH6] > CHANNEL_HIGH){
 8006b76:	4b28      	ldr	r3, [pc, #160]	@ (8006c18 <attitude_ctrl+0x288>)
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d903      	bls.n	8006b8a <attitude_ctrl+0x1fa>
    		pid_velo_scale = 1;
 8006b82:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8006b86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b88:	e001      	b.n	8006b8e <attitude_ctrl+0x1fe>
    	}else{
    		pid_velo_scale = 0.3f;
 8006b8a:	4b31      	ldr	r3, [pc, #196]	@ (8006c50 <attitude_ctrl+0x2c0>)
 8006b8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    	}
    }
    //float v_ = constrainf(v_estimate - 15,0,15);
	//pid_velo_scale = 15.0f/(15.0f + sq(v_)*0.07f);
    const float pid_roll_vel_scale  = constrainf(pid_velo_scale,MIN_PID_SPEED_SCALE,MAX_PID_SPEED_SCALE);
 8006b8e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006b92:	492f      	ldr	r1, [pc, #188]	@ (8006c50 <attitude_ctrl+0x2c0>)
 8006b94:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8006b96:	f7ff fe43 	bl	8006820 <constrainf>
 8006b9a:	6378      	str	r0, [r7, #52]	@ 0x34
    const float pid_pitch_vel_scale = constrainf(pid_velo_scale,MIN_PID_SPEED_SCALE,MAX_PID_SPEED_SCALE);
 8006b9c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006ba0:	492b      	ldr	r1, [pc, #172]	@ (8006c50 <attitude_ctrl+0x2c0>)
 8006ba2:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8006ba4:	f7ff fe3c 	bl	8006820 <constrainf>
 8006ba8:	6338      	str	r0, [r7, #48]	@ 0x30

    // stabilize mode
    if(ibusChannelData[CH5] > CHANNEL_HIGH ){
 8006baa:	4b1b      	ldr	r3, [pc, #108]	@ (8006c18 <attitude_ctrl+0x288>)
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	f240 81dc 	bls.w	8006f70 <attitude_ctrl+0x5e0>
    	if(ibusChannelData[CH9] > CHANNEL_HIGH ){
 8006bb8:	4b17      	ldr	r3, [pc, #92]	@ (8006c18 <attitude_ctrl+0x288>)
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d94f      	bls.n	8006c64 <attitude_ctrl+0x2d4>
			roll_pid_rc_gain = ((int)ibusChannelData[CH7] - 1000)*0.002f;
 8006bc4:	4b14      	ldr	r3, [pc, #80]	@ (8006c18 <attitude_ctrl+0x288>)
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fa f8ed 	bl	8000dac <__aeabi_i2f>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	491f      	ldr	r1, [pc, #124]	@ (8006c54 <attitude_ctrl+0x2c4>)
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fa f93c 	bl	8000e54 <__aeabi_fmul>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	461a      	mov	r2, r3
 8006be0:	4b1d      	ldr	r3, [pc, #116]	@ (8006c58 <attitude_ctrl+0x2c8>)
 8006be2:	601a      	str	r2, [r3, #0]
			roll_trim = ((int)ibusChannelData[CH8] - 1500)*-0.1f;
 8006be4:	4b0c      	ldr	r3, [pc, #48]	@ (8006c18 <attitude_ctrl+0x288>)
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7fa f8dd 	bl	8000dac <__aeabi_i2f>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	4919      	ldr	r1, [pc, #100]	@ (8006c5c <attitude_ctrl+0x2cc>)
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fa f92c 	bl	8000e54 <__aeabi_fmul>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	461a      	mov	r2, r3
 8006c00:	4b17      	ldr	r3, [pc, #92]	@ (8006c60 <attitude_ctrl+0x2d0>)
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	e04e      	b.n	8006ca4 <attitude_ctrl+0x314>
 8006c06:	bf00      	nop
 8006c08:	20000c6c 	.word	0x20000c6c
 8006c0c:	358637bd 	.word	0x358637bd
 8006c10:	3dcccccd 	.word	0x3dcccccd
 8006c14:	2000051c 	.word	0x2000051c
 8006c18:	20000118 	.word	0x20000118
 8006c1c:	20000b68 	.word	0x20000b68
 8006c20:	be19999a 	.word	0xbe19999a
 8006c24:	20000b6c 	.word	0x20000b6c
 8006c28:	20000c68 	.word	0x20000c68
 8006c2c:	200003f4 	.word	0x200003f4
 8006c30:	42c80000 	.word	0x42c80000
 8006c34:	41f00000 	.word	0x41f00000
 8006c38:	20000b74 	.word	0x20000b74
 8006c3c:	20000c64 	.word	0x20000c64
 8006c40:	41200000 	.word	0x41200000
 8006c44:	42040000 	.word	0x42040000
 8006c48:	41400000 	.word	0x41400000
 8006c4c:	3d3851ec 	.word	0x3d3851ec
 8006c50:	3e99999a 	.word	0x3e99999a
 8006c54:	3b03126f 	.word	0x3b03126f
 8006c58:	20000c54 	.word	0x20000c54
 8006c5c:	bdcccccd 	.word	0xbdcccccd
 8006c60:	20000c5c 	.word	0x20000c5c
		}else{
			pitch_pid_rc_gain = ((int)ibusChannelData[CH7] - 1000)*0.002f;
 8006c64:	4b79      	ldr	r3, [pc, #484]	@ (8006e4c <attitude_ctrl+0x4bc>)
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7fa f89d 	bl	8000dac <__aeabi_i2f>
 8006c72:	4603      	mov	r3, r0
 8006c74:	4976      	ldr	r1, [pc, #472]	@ (8006e50 <attitude_ctrl+0x4c0>)
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7fa f8ec 	bl	8000e54 <__aeabi_fmul>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	461a      	mov	r2, r3
 8006c80:	4b74      	ldr	r3, [pc, #464]	@ (8006e54 <attitude_ctrl+0x4c4>)
 8006c82:	601a      	str	r2, [r3, #0]
			pitch_trim = ((int)ibusChannelData[CH8] - 1500)*-0.1f;
 8006c84:	4b71      	ldr	r3, [pc, #452]	@ (8006e4c <attitude_ctrl+0x4bc>)
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7fa f88d 	bl	8000dac <__aeabi_i2f>
 8006c92:	4603      	mov	r3, r0
 8006c94:	4970      	ldr	r1, [pc, #448]	@ (8006e58 <attitude_ctrl+0x4c8>)
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fa f8dc 	bl	8000e54 <__aeabi_fmul>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	4b6e      	ldr	r3, [pc, #440]	@ (8006e5c <attitude_ctrl+0x4cc>)
 8006ca2:	601a      	str	r2, [r3, #0]
		}
        
        // roll axis pid
        float roll_rate_desired =  pid_calculate(&roll_angle_pid,roll_measurement,roll_desired + roll_trim,1.0f,dt);
 8006ca4:	4b6e      	ldr	r3, [pc, #440]	@ (8006e60 <attitude_ctrl+0x4d0>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a6e      	ldr	r2, [pc, #440]	@ (8006e64 <attitude_ctrl+0x4d4>)
 8006caa:	6812      	ldr	r2, [r2, #0]
 8006cac:	4611      	mov	r1, r2
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7f9 ffc8 	bl	8000c44 <__addsf3>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8006cc0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006cc2:	4869      	ldr	r0, [pc, #420]	@ (8006e68 <attitude_ctrl+0x4d8>)
 8006cc4:	f7fd fde2 	bl	800488c <pid_calculate>
 8006cc8:	6278      	str	r0, [r7, #36]	@ 0x24
        roll_rate_desired = constrainf(roll_rate_desired,-ROLL_RATE_LIMIT,ROLL_RATE_LIMIT);
 8006cca:	4a68      	ldr	r2, [pc, #416]	@ (8006e6c <attitude_ctrl+0x4dc>)
 8006ccc:	4968      	ldr	r1, [pc, #416]	@ (8006e70 <attitude_ctrl+0x4e0>)
 8006cce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006cd0:	f7ff fda6 	bl	8006820 <constrainf>
 8006cd4:	6278      	str	r0, [r7, #36]	@ 0x24
        float r_rate_pid  =  pid_calculate(&roll_rate_pid, roll_rate_measurement,roll_rate_desired,pid_roll_vel_scale,dt);
 8006cd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cde:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ce0:	4864      	ldr	r0, [pc, #400]	@ (8006e74 <attitude_ctrl+0x4e4>)
 8006ce2:	f7fd fdd3 	bl	800488c <pid_calculate>
 8006ce6:	6238      	str	r0, [r7, #32]
        float FF_roll = roll_rate_desired*FF_ROLL_GAIN;
 8006ce8:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8006cec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006cee:	f7fa f8b1 	bl	8000e54 <__aeabi_fmul>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	61fb      	str	r3, [r7, #28]
        r_rate_pid = r_rate_pid + FF_roll;
 8006cf6:	69f9      	ldr	r1, [r7, #28]
 8006cf8:	6a38      	ldr	r0, [r7, #32]
 8006cfa:	f7f9 ffa3 	bl	8000c44 <__addsf3>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	623b      	str	r3, [r7, #32]
        roll_pid_smooth += pt1FilterGain(4,dt)*(r_rate_pid - roll_pid_smooth);
 8006d02:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006d04:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 8006d08:	f7ff fda8 	bl	800685c <pt1FilterGain>
 8006d0c:	4604      	mov	r4, r0
 8006d0e:	4b5a      	ldr	r3, [pc, #360]	@ (8006e78 <attitude_ctrl+0x4e8>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4619      	mov	r1, r3
 8006d14:	6a38      	ldr	r0, [r7, #32]
 8006d16:	f7f9 ff93 	bl	8000c40 <__aeabi_fsub>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f7fa f898 	bl	8000e54 <__aeabi_fmul>
 8006d24:	4603      	mov	r3, r0
 8006d26:	461a      	mov	r2, r3
 8006d28:	4b53      	ldr	r3, [pc, #332]	@ (8006e78 <attitude_ctrl+0x4e8>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	4610      	mov	r0, r2
 8006d30:	f7f9 ff88 	bl	8000c44 <__addsf3>
 8006d34:	4603      	mov	r3, r0
 8006d36:	461a      	mov	r2, r3
 8006d38:	4b4f      	ldr	r3, [pc, #316]	@ (8006e78 <attitude_ctrl+0x4e8>)
 8006d3a:	601a      	str	r2, [r3, #0]

        //pitch axis pid
        float pitch_rate_desired =  pid_calculate(&pitch_angle_pid,pitch_measurement,pitch_desired + pitch_trim,0.1f,dt);
 8006d3c:	4b4f      	ldr	r3, [pc, #316]	@ (8006e7c <attitude_ctrl+0x4ec>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a46      	ldr	r2, [pc, #280]	@ (8006e5c <attitude_ctrl+0x4cc>)
 8006d42:	6812      	ldr	r2, [r2, #0]
 8006d44:	4611      	mov	r1, r2
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7f9 ff7c 	bl	8000c44 <__addsf3>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	461a      	mov	r2, r3
 8006d50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	4b4a      	ldr	r3, [pc, #296]	@ (8006e80 <attitude_ctrl+0x4f0>)
 8006d56:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006d58:	484a      	ldr	r0, [pc, #296]	@ (8006e84 <attitude_ctrl+0x4f4>)
 8006d5a:	f7fd fd97 	bl	800488c <pid_calculate>
 8006d5e:	61b8      	str	r0, [r7, #24]
        pitch_rate_desired = constrainf(pitch_rate_desired,-PITCH_RATE_LIMIT,PITCH_RATE_LIMIT);
 8006d60:	4a42      	ldr	r2, [pc, #264]	@ (8006e6c <attitude_ctrl+0x4dc>)
 8006d62:	4943      	ldr	r1, [pc, #268]	@ (8006e70 <attitude_ctrl+0x4e0>)
 8006d64:	69b8      	ldr	r0, [r7, #24]
 8006d66:	f7ff fd5b 	bl	8006820 <constrainf>
 8006d6a:	61b8      	str	r0, [r7, #24]
        float p_rate_pid  =  pid_calculate(&pitch_rate_pid, pitch_rate_measurement,pitch_rate_desired,pid_pitch_vel_scale ,dt);
 8006d6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d6e:	9300      	str	r3, [sp, #0]
 8006d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d72:	69ba      	ldr	r2, [r7, #24]
 8006d74:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006d76:	4844      	ldr	r0, [pc, #272]	@ (8006e88 <attitude_ctrl+0x4f8>)
 8006d78:	f7fd fd88 	bl	800488c <pid_calculate>
 8006d7c:	6178      	str	r0, [r7, #20]
        float FF_pitch = pitch_rate_desired*FF_PITCH_GAIN;
 8006d7e:	4943      	ldr	r1, [pc, #268]	@ (8006e8c <attitude_ctrl+0x4fc>)
 8006d80:	69b8      	ldr	r0, [r7, #24]
 8006d82:	f7fa f867 	bl	8000e54 <__aeabi_fmul>
 8006d86:	4603      	mov	r3, r0
 8006d88:	613b      	str	r3, [r7, #16]
        p_rate_pid = p_rate_pid + FF_pitch;
 8006d8a:	6939      	ldr	r1, [r7, #16]
 8006d8c:	6978      	ldr	r0, [r7, #20]
 8006d8e:	f7f9 ff59 	bl	8000c44 <__addsf3>
 8006d92:	4603      	mov	r3, r0
 8006d94:	617b      	str	r3, [r7, #20]
        pitch_pid_smooth += pt1FilterGain(4,dt)*(p_rate_pid - pitch_pid_smooth);
 8006d96:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006d98:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 8006d9c:	f7ff fd5e 	bl	800685c <pt1FilterGain>
 8006da0:	4604      	mov	r4, r0
 8006da2:	4b3b      	ldr	r3, [pc, #236]	@ (8006e90 <attitude_ctrl+0x500>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4619      	mov	r1, r3
 8006da8:	6978      	ldr	r0, [r7, #20]
 8006daa:	f7f9 ff49 	bl	8000c40 <__aeabi_fsub>
 8006dae:	4603      	mov	r3, r0
 8006db0:	4619      	mov	r1, r3
 8006db2:	4620      	mov	r0, r4
 8006db4:	f7fa f84e 	bl	8000e54 <__aeabi_fmul>
 8006db8:	4603      	mov	r3, r0
 8006dba:	461a      	mov	r2, r3
 8006dbc:	4b34      	ldr	r3, [pc, #208]	@ (8006e90 <attitude_ctrl+0x500>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	4610      	mov	r0, r2
 8006dc4:	f7f9 ff3e 	bl	8000c44 <__addsf3>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	461a      	mov	r2, r3
 8006dcc:	4b30      	ldr	r3, [pc, #192]	@ (8006e90 <attitude_ctrl+0x500>)
 8006dce:	601a      	str	r2, [r3, #0]

        //r_rate_pid = r_rate_pid * roll_pid_rc_gain;
        //p_rate_pid = p_rate_pid * pid_pitch_vel_scale;// * pitch_pid_rc_gain;

		if(ibusChannelData[CH9] > CHANNEL_HIGH ){
 8006dd0:	4b1e      	ldr	r3, [pc, #120]	@ (8006e4c <attitude_ctrl+0x4bc>)
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d961      	bls.n	8006ea0 <attitude_ctrl+0x510>
				int pitch_rc = 1500 - ibusChannelData[CH2];
 8006ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8006e4c <attitude_ctrl+0x4bc>)
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8006de4:	3304      	adds	r3, #4
 8006de6:	60bb      	str	r3, [r7, #8]

				servoL = 1500 - roll_pid_smooth + pitch_rc;
 8006de8:	4b23      	ldr	r3, [pc, #140]	@ (8006e78 <attitude_ctrl+0x4e8>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4619      	mov	r1, r3
 8006dee:	4829      	ldr	r0, [pc, #164]	@ (8006e94 <attitude_ctrl+0x504>)
 8006df0:	f7f9 ff26 	bl	8000c40 <__aeabi_fsub>
 8006df4:	4603      	mov	r3, r0
 8006df6:	461c      	mov	r4, r3
 8006df8:	68b8      	ldr	r0, [r7, #8]
 8006dfa:	f7f9 ffd7 	bl	8000dac <__aeabi_i2f>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	4619      	mov	r1, r3
 8006e02:	4620      	mov	r0, r4
 8006e04:	f7f9 ff1e 	bl	8000c44 <__addsf3>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fa fa24 	bl	8001258 <__aeabi_f2uiz>
 8006e10:	4603      	mov	r3, r0
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	4b20      	ldr	r3, [pc, #128]	@ (8006e98 <attitude_ctrl+0x508>)
 8006e16:	801a      	strh	r2, [r3, #0]
				servoR = 1500 + roll_pid_smooth + pitch_rc;
 8006e18:	4b17      	ldr	r3, [pc, #92]	@ (8006e78 <attitude_ctrl+0x4e8>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	491d      	ldr	r1, [pc, #116]	@ (8006e94 <attitude_ctrl+0x504>)
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7f9 ff10 	bl	8000c44 <__addsf3>
 8006e24:	4603      	mov	r3, r0
 8006e26:	461c      	mov	r4, r3
 8006e28:	68b8      	ldr	r0, [r7, #8]
 8006e2a:	f7f9 ffbf 	bl	8000dac <__aeabi_i2f>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	4619      	mov	r1, r3
 8006e32:	4620      	mov	r0, r4
 8006e34:	f7f9 ff06 	bl	8000c44 <__addsf3>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fa fa0c 	bl	8001258 <__aeabi_f2uiz>
 8006e40:	4603      	mov	r3, r0
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	4b15      	ldr	r3, [pc, #84]	@ (8006e9c <attitude_ctrl+0x50c>)
 8006e46:	801a      	strh	r2, [r3, #0]
 8006e48:	e082      	b.n	8006f50 <attitude_ctrl+0x5c0>
 8006e4a:	bf00      	nop
 8006e4c:	20000118 	.word	0x20000118
 8006e50:	3b03126f 	.word	0x3b03126f
 8006e54:	20000c58 	.word	0x20000c58
 8006e58:	bdcccccd 	.word	0xbdcccccd
 8006e5c:	20000c60 	.word	0x20000c60
 8006e60:	20000b68 	.word	0x20000b68
 8006e64:	20000c5c 	.word	0x20000c5c
 8006e68:	20000bc0 	.word	0x20000bc0
 8006e6c:	42480000 	.word	0x42480000
 8006e70:	c2480000 	.word	0xc2480000
 8006e74:	20000b78 	.word	0x20000b78
 8006e78:	20000c70 	.word	0x20000c70
 8006e7c:	20000b6c 	.word	0x20000b6c
 8006e80:	3dcccccd 	.word	0x3dcccccd
 8006e84:	20000be4 	.word	0x20000be4
 8006e88:	20000b9c 	.word	0x20000b9c
 8006e8c:	41200000 	.word	0x41200000
 8006e90:	20000c74 	.word	0x20000c74
 8006e94:	44bb8000 	.word	0x44bb8000
 8006e98:	20000b70 	.word	0x20000b70
 8006e9c:	20000b72 	.word	0x20000b72
		}else{
				int roll_rc = 1500 - ibusChannelData[CH1];
 8006ea0:	4b91      	ldr	r3, [pc, #580]	@ (80070e8 <attitude_ctrl+0x758>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	60fb      	str	r3, [r7, #12]

				servoL = 1500 +  roll_rc*0.5 + pitch_pid_smooth;
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f7f9 fb11 	bl	80004d4 <__aeabi_i2d>
 8006eb2:	f04f 0200 	mov.w	r2, #0
 8006eb6:	4b8d      	ldr	r3, [pc, #564]	@ (80070ec <attitude_ctrl+0x75c>)
 8006eb8:	f7f9 fb76 	bl	80005a8 <__aeabi_dmul>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	a384      	add	r3, pc, #528	@ (adr r3, 80070d8 <attitude_ctrl+0x748>)
 8006ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eca:	f7f9 f9b7 	bl	800023c <__adddf3>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	4614      	mov	r4, r2
 8006ed4:	461d      	mov	r5, r3
 8006ed6:	4b86      	ldr	r3, [pc, #536]	@ (80070f0 <attitude_ctrl+0x760>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7f9 fb0c 	bl	80004f8 <__aeabi_f2d>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	4629      	mov	r1, r5
 8006ee8:	f7f9 f9a8 	bl	800023c <__adddf3>
 8006eec:	4602      	mov	r2, r0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	f7f9 fe30 	bl	8000b58 <__aeabi_d2uiz>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	4b7d      	ldr	r3, [pc, #500]	@ (80070f4 <attitude_ctrl+0x764>)
 8006efe:	801a      	strh	r2, [r3, #0]
				servoR = 1500 -  roll_rc*0.5 + pitch_pid_smooth;
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f7f9 fae7 	bl	80004d4 <__aeabi_i2d>
 8006f06:	f04f 0200 	mov.w	r2, #0
 8006f0a:	4b78      	ldr	r3, [pc, #480]	@ (80070ec <attitude_ctrl+0x75c>)
 8006f0c:	f7f9 fb4c 	bl	80005a8 <__aeabi_dmul>
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	a170      	add	r1, pc, #448	@ (adr r1, 80070d8 <attitude_ctrl+0x748>)
 8006f16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f1a:	f7f9 f98d 	bl	8000238 <__aeabi_dsub>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	4614      	mov	r4, r2
 8006f24:	461d      	mov	r5, r3
 8006f26:	4b72      	ldr	r3, [pc, #456]	@ (80070f0 <attitude_ctrl+0x760>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7f9 fae4 	bl	80004f8 <__aeabi_f2d>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	4620      	mov	r0, r4
 8006f36:	4629      	mov	r1, r5
 8006f38:	f7f9 f980 	bl	800023c <__adddf3>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4610      	mov	r0, r2
 8006f42:	4619      	mov	r1, r3
 8006f44:	f7f9 fe08 	bl	8000b58 <__aeabi_d2uiz>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	4b6a      	ldr	r3, [pc, #424]	@ (80070f8 <attitude_ctrl+0x768>)
 8006f4e:	801a      	strh	r2, [r3, #0]
		}

		if(ibusChannelData[CH10] > CHANNEL_HIGH ){
 8006f50:	4b65      	ldr	r3, [pc, #404]	@ (80070e8 <attitude_ctrl+0x758>)
 8006f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f54:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	f240 8092 	bls.w	8007082 <attitude_ctrl+0x6f2>
			pitch_rate_pid.i_term = 0;
 8006f5e:	4b67      	ldr	r3, [pc, #412]	@ (80070fc <attitude_ctrl+0x76c>)
 8006f60:	f04f 0200 	mov.w	r2, #0
 8006f64:	60da      	str	r2, [r3, #12]
			roll_rate_pid.i_term = 0;
 8006f66:	4b66      	ldr	r3, [pc, #408]	@ (8007100 <attitude_ctrl+0x770>)
 8006f68:	f04f 0200 	mov.w	r2, #0
 8006f6c:	60da      	str	r2, [r3, #12]
 8006f6e:	e088      	b.n	8007082 <attitude_ctrl+0x6f2>
		}
        
    }
    // manual mode
    else{
        int s1 = 1500 - ibusChannelData[CH1];
 8006f70:	4b5d      	ldr	r3, [pc, #372]	@ (80070e8 <attitude_ctrl+0x758>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8006f78:	3304      	adds	r3, #4
 8006f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int s2 = 1500 - ibusChannelData[CH2];
 8006f7c:	4b5a      	ldr	r3, [pc, #360]	@ (80070e8 <attitude_ctrl+0x758>)
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8006f84:	3304      	adds	r3, #4
 8006f86:	62bb      	str	r3, [r7, #40]	@ 0x28

        smooth_ch1 += 0.8*(s1*0.5 - smooth_ch1);
 8006f88:	4b5e      	ldr	r3, [pc, #376]	@ (8007104 <attitude_ctrl+0x774>)
 8006f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7f9 faa0 	bl	80004d4 <__aeabi_i2d>
 8006f94:	4604      	mov	r4, r0
 8006f96:	460d      	mov	r5, r1
 8006f98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f9a:	f7f9 fa9b 	bl	80004d4 <__aeabi_i2d>
 8006f9e:	f04f 0200 	mov.w	r2, #0
 8006fa2:	4b52      	ldr	r3, [pc, #328]	@ (80070ec <attitude_ctrl+0x75c>)
 8006fa4:	f7f9 fb00 	bl	80005a8 <__aeabi_dmul>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	4690      	mov	r8, r2
 8006fae:	4699      	mov	r9, r3
 8006fb0:	4b54      	ldr	r3, [pc, #336]	@ (8007104 <attitude_ctrl+0x774>)
 8006fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7f9 fa8c 	bl	80004d4 <__aeabi_i2d>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	4640      	mov	r0, r8
 8006fc2:	4649      	mov	r1, r9
 8006fc4:	f7f9 f938 	bl	8000238 <__aeabi_dsub>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	4610      	mov	r0, r2
 8006fce:	4619      	mov	r1, r3
 8006fd0:	a343      	add	r3, pc, #268	@ (adr r3, 80070e0 <attitude_ctrl+0x750>)
 8006fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd6:	f7f9 fae7 	bl	80005a8 <__aeabi_dmul>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	460b      	mov	r3, r1
 8006fde:	4620      	mov	r0, r4
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	f7f9 f92b 	bl	800023c <__adddf3>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4610      	mov	r0, r2
 8006fec:	4619      	mov	r1, r3
 8006fee:	f7f9 fd8b 	bl	8000b08 <__aeabi_d2iz>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	b21a      	sxth	r2, r3
 8006ff6:	4b43      	ldr	r3, [pc, #268]	@ (8007104 <attitude_ctrl+0x774>)
 8006ff8:	801a      	strh	r2, [r3, #0]
        smooth_ch2 += 0.8*(s2 - smooth_ch2);
 8006ffa:	4b43      	ldr	r3, [pc, #268]	@ (8007108 <attitude_ctrl+0x778>)
 8006ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007000:	4618      	mov	r0, r3
 8007002:	f7f9 fa67 	bl	80004d4 <__aeabi_i2d>
 8007006:	4604      	mov	r4, r0
 8007008:	460d      	mov	r5, r1
 800700a:	4b3f      	ldr	r3, [pc, #252]	@ (8007108 <attitude_ctrl+0x778>)
 800700c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007010:	461a      	mov	r2, r3
 8007012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007014:	1a9b      	subs	r3, r3, r2
 8007016:	4618      	mov	r0, r3
 8007018:	f7f9 fa5c 	bl	80004d4 <__aeabi_i2d>
 800701c:	a330      	add	r3, pc, #192	@ (adr r3, 80070e0 <attitude_ctrl+0x750>)
 800701e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007022:	f7f9 fac1 	bl	80005a8 <__aeabi_dmul>
 8007026:	4602      	mov	r2, r0
 8007028:	460b      	mov	r3, r1
 800702a:	4620      	mov	r0, r4
 800702c:	4629      	mov	r1, r5
 800702e:	f7f9 f905 	bl	800023c <__adddf3>
 8007032:	4602      	mov	r2, r0
 8007034:	460b      	mov	r3, r1
 8007036:	4610      	mov	r0, r2
 8007038:	4619      	mov	r1, r3
 800703a:	f7f9 fd65 	bl	8000b08 <__aeabi_d2iz>
 800703e:	4603      	mov	r3, r0
 8007040:	b21a      	sxth	r2, r3
 8007042:	4b31      	ldr	r3, [pc, #196]	@ (8007108 <attitude_ctrl+0x778>)
 8007044:	801a      	strh	r2, [r3, #0]
            
        servoL = 1500 + smooth_ch1 + smooth_ch2;
 8007046:	4b2f      	ldr	r3, [pc, #188]	@ (8007104 <attitude_ctrl+0x774>)
 8007048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800704c:	b29a      	uxth	r2, r3
 800704e:	4b2e      	ldr	r3, [pc, #184]	@ (8007108 <attitude_ctrl+0x778>)
 8007050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007054:	b29b      	uxth	r3, r3
 8007056:	4413      	add	r3, r2
 8007058:	b29b      	uxth	r3, r3
 800705a:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800705e:	b29a      	uxth	r2, r3
 8007060:	4b24      	ldr	r3, [pc, #144]	@ (80070f4 <attitude_ctrl+0x764>)
 8007062:	801a      	strh	r2, [r3, #0]
        servoR = 1500 - smooth_ch1 + smooth_ch2;
 8007064:	4b28      	ldr	r3, [pc, #160]	@ (8007108 <attitude_ctrl+0x778>)
 8007066:	f9b3 3000 	ldrsh.w	r3, [r3]
 800706a:	b29a      	uxth	r2, r3
 800706c:	4b25      	ldr	r3, [pc, #148]	@ (8007104 <attitude_ctrl+0x774>)
 800706e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007072:	b29b      	uxth	r3, r3
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	b29b      	uxth	r3, r3
 8007078:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800707c:	b29a      	uxth	r2, r3
 800707e:	4b1e      	ldr	r3, [pc, #120]	@ (80070f8 <attitude_ctrl+0x768>)
 8007080:	801a      	strh	r2, [r3, #0]
        
    }

    servoL = constrain(servoL,SERVO_MIN_PWM,SERVO_MAX_PWM);
 8007082:	4b1c      	ldr	r3, [pc, #112]	@ (80070f4 <attitude_ctrl+0x764>)
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800708a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800708e:	4618      	mov	r0, r3
 8007090:	f7ff fbae 	bl	80067f0 <constrain>
 8007094:	4603      	mov	r3, r0
 8007096:	b29a      	uxth	r2, r3
 8007098:	4b16      	ldr	r3, [pc, #88]	@ (80070f4 <attitude_ctrl+0x764>)
 800709a:	801a      	strh	r2, [r3, #0]
    servoR = constrain(servoR,SERVO_MIN_PWM,SERVO_MAX_PWM);
 800709c:	4b16      	ldr	r3, [pc, #88]	@ (80070f8 <attitude_ctrl+0x768>)
 800709e:	881b      	ldrh	r3, [r3, #0]
 80070a0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80070a4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7ff fba1 	bl	80067f0 <constrain>
 80070ae:	4603      	mov	r3, r0
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	4b11      	ldr	r3, [pc, #68]	@ (80070f8 <attitude_ctrl+0x768>)
 80070b4:	801a      	strh	r2, [r3, #0]

    write_pwm_ctrl(ibusChannelData[CH3],servoL,servoR);
 80070b6:	4b0c      	ldr	r3, [pc, #48]	@ (80070e8 <attitude_ctrl+0x758>)
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	4a0d      	ldr	r2, [pc, #52]	@ (80070f4 <attitude_ctrl+0x764>)
 80070be:	8811      	ldrh	r1, [r2, #0]
 80070c0:	4a0d      	ldr	r2, [pc, #52]	@ (80070f8 <attitude_ctrl+0x768>)
 80070c2:	8812      	ldrh	r2, [r2, #0]
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7fd fd51 	bl	8004b6c <write_pwm_ctrl>
 80070ca:	e000      	b.n	80070ce <attitude_ctrl+0x73e>
        return;
 80070cc:	bf00      	nop

}
 80070ce:	3760      	adds	r7, #96	@ 0x60
 80070d0:	46bd      	mov	sp, r7
 80070d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80070d6:	bf00      	nop
 80070d8:	00000000 	.word	0x00000000
 80070dc:	40977000 	.word	0x40977000
 80070e0:	9999999a 	.word	0x9999999a
 80070e4:	3fe99999 	.word	0x3fe99999
 80070e8:	20000118 	.word	0x20000118
 80070ec:	3fe00000 	.word	0x3fe00000
 80070f0:	20000c74 	.word	0x20000c74
 80070f4:	20000b70 	.word	0x20000b70
 80070f8:	20000b72 	.word	0x20000b72
 80070fc:	20000b9c 	.word	0x20000b9c
 8007100:	20000b78 	.word	0x20000b78
 8007104:	20000c50 	.word	0x20000c50
 8007108:	20000c52 	.word	0x20000c52
 800710c:	00000000 	.word	0x00000000

08007110 <altitude_estimate>:
#include "../Driver/ms5611.h"

extern float acc_Eframe[];
float alt_estimate,climb_rate;

void altitude_estimate(float dt){
 8007110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007114:	b082      	sub	sp, #8
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
	if(_gps.fix > 2){
 800711a:	4b75      	ldr	r3, [pc, #468]	@ (80072f0 <altitude_estimate+0x1e0>)
 800711c:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8007120:	2b02      	cmp	r3, #2
 8007122:	f240 80b9 	bls.w	8007298 <altitude_estimate+0x188>
		alt_estimate += climb_rate*dt + 0.5*sq(dt)*acc_Eframe[Z];
 8007126:	4b73      	ldr	r3, [pc, #460]	@ (80072f4 <altitude_estimate+0x1e4>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4618      	mov	r0, r3
 800712c:	f7f9 f9e4 	bl	80004f8 <__aeabi_f2d>
 8007130:	4604      	mov	r4, r0
 8007132:	460d      	mov	r5, r1
 8007134:	4b70      	ldr	r3, [pc, #448]	@ (80072f8 <altitude_estimate+0x1e8>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6879      	ldr	r1, [r7, #4]
 800713a:	4618      	mov	r0, r3
 800713c:	f7f9 fe8a 	bl	8000e54 <__aeabi_fmul>
 8007140:	4603      	mov	r3, r0
 8007142:	4618      	mov	r0, r3
 8007144:	f7f9 f9d8 	bl	80004f8 <__aeabi_f2d>
 8007148:	4680      	mov	r8, r0
 800714a:	4689      	mov	r9, r1
 800714c:	6879      	ldr	r1, [r7, #4]
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7f9 fe80 	bl	8000e54 <__aeabi_fmul>
 8007154:	4603      	mov	r3, r0
 8007156:	4618      	mov	r0, r3
 8007158:	f7f9 f9ce 	bl	80004f8 <__aeabi_f2d>
 800715c:	f04f 0200 	mov.w	r2, #0
 8007160:	4b66      	ldr	r3, [pc, #408]	@ (80072fc <altitude_estimate+0x1ec>)
 8007162:	f7f9 fa21 	bl	80005a8 <__aeabi_dmul>
 8007166:	4602      	mov	r2, r0
 8007168:	460b      	mov	r3, r1
 800716a:	4692      	mov	sl, r2
 800716c:	469b      	mov	fp, r3
 800716e:	4b64      	ldr	r3, [pc, #400]	@ (8007300 <altitude_estimate+0x1f0>)
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	4618      	mov	r0, r3
 8007174:	f7f9 f9c0 	bl	80004f8 <__aeabi_f2d>
 8007178:	4602      	mov	r2, r0
 800717a:	460b      	mov	r3, r1
 800717c:	4650      	mov	r0, sl
 800717e:	4659      	mov	r1, fp
 8007180:	f7f9 fa12 	bl	80005a8 <__aeabi_dmul>
 8007184:	4602      	mov	r2, r0
 8007186:	460b      	mov	r3, r1
 8007188:	4640      	mov	r0, r8
 800718a:	4649      	mov	r1, r9
 800718c:	f7f9 f856 	bl	800023c <__adddf3>
 8007190:	4602      	mov	r2, r0
 8007192:	460b      	mov	r3, r1
 8007194:	4620      	mov	r0, r4
 8007196:	4629      	mov	r1, r5
 8007198:	f7f9 f850 	bl	800023c <__adddf3>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	4610      	mov	r0, r2
 80071a2:	4619      	mov	r1, r3
 80071a4:	f7f9 fcf8 	bl	8000b98 <__aeabi_d2f>
 80071a8:	4603      	mov	r3, r0
 80071aa:	4a52      	ldr	r2, [pc, #328]	@ (80072f4 <altitude_estimate+0x1e4>)
 80071ac:	6013      	str	r3, [r2, #0]
		climb_rate += dt*acc_Eframe[Z];
 80071ae:	4b54      	ldr	r3, [pc, #336]	@ (8007300 <altitude_estimate+0x1f0>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	6879      	ldr	r1, [r7, #4]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7f9 fe4d 	bl	8000e54 <__aeabi_fmul>
 80071ba:	4603      	mov	r3, r0
 80071bc:	461a      	mov	r2, r3
 80071be:	4b4e      	ldr	r3, [pc, #312]	@ (80072f8 <altitude_estimate+0x1e8>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4619      	mov	r1, r3
 80071c4:	4610      	mov	r0, r2
 80071c6:	f7f9 fd3d 	bl	8000c44 <__addsf3>
 80071ca:	4603      	mov	r3, r0
 80071cc:	461a      	mov	r2, r3
 80071ce:	4b4a      	ldr	r3, [pc, #296]	@ (80072f8 <altitude_estimate+0x1e8>)
 80071d0:	601a      	str	r2, [r3, #0]
		// correction
		alt_estimate += 0.04*(_gps.altitude_msl/1000.0f - alt_estimate);
 80071d2:	4b48      	ldr	r3, [pc, #288]	@ (80072f4 <altitude_estimate+0x1e4>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7f9 f98e 	bl	80004f8 <__aeabi_f2d>
 80071dc:	4604      	mov	r4, r0
 80071de:	460d      	mov	r5, r1
 80071e0:	4b43      	ldr	r3, [pc, #268]	@ (80072f0 <altitude_estimate+0x1e0>)
 80071e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7f9 fde1 	bl	8000dac <__aeabi_i2f>
 80071ea:	4603      	mov	r3, r0
 80071ec:	4945      	ldr	r1, [pc, #276]	@ (8007304 <altitude_estimate+0x1f4>)
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7f9 fee4 	bl	8000fbc <__aeabi_fdiv>
 80071f4:	4603      	mov	r3, r0
 80071f6:	461a      	mov	r2, r3
 80071f8:	4b3e      	ldr	r3, [pc, #248]	@ (80072f4 <altitude_estimate+0x1e4>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4619      	mov	r1, r3
 80071fe:	4610      	mov	r0, r2
 8007200:	f7f9 fd1e 	bl	8000c40 <__aeabi_fsub>
 8007204:	4603      	mov	r3, r0
 8007206:	4618      	mov	r0, r3
 8007208:	f7f9 f976 	bl	80004f8 <__aeabi_f2d>
 800720c:	a334      	add	r3, pc, #208	@ (adr r3, 80072e0 <altitude_estimate+0x1d0>)
 800720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007212:	f7f9 f9c9 	bl	80005a8 <__aeabi_dmul>
 8007216:	4602      	mov	r2, r0
 8007218:	460b      	mov	r3, r1
 800721a:	4620      	mov	r0, r4
 800721c:	4629      	mov	r1, r5
 800721e:	f7f9 f80d 	bl	800023c <__adddf3>
 8007222:	4602      	mov	r2, r0
 8007224:	460b      	mov	r3, r1
 8007226:	4610      	mov	r0, r2
 8007228:	4619      	mov	r1, r3
 800722a:	f7f9 fcb5 	bl	8000b98 <__aeabi_d2f>
 800722e:	4603      	mov	r3, r0
 8007230:	4a30      	ldr	r2, [pc, #192]	@ (80072f4 <altitude_estimate+0x1e4>)
 8007232:	6013      	str	r3, [r2, #0]
		climb_rate += 0.05*(_gps.velocity[2]/100.0f - climb_rate);
 8007234:	4b30      	ldr	r3, [pc, #192]	@ (80072f8 <altitude_estimate+0x1e8>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4618      	mov	r0, r3
 800723a:	f7f9 f95d 	bl	80004f8 <__aeabi_f2d>
 800723e:	4604      	mov	r4, r0
 8007240:	460d      	mov	r5, r1
 8007242:	4b2b      	ldr	r3, [pc, #172]	@ (80072f0 <altitude_estimate+0x1e0>)
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	4618      	mov	r0, r3
 8007248:	f7f9 fdb0 	bl	8000dac <__aeabi_i2f>
 800724c:	4603      	mov	r3, r0
 800724e:	492e      	ldr	r1, [pc, #184]	@ (8007308 <altitude_estimate+0x1f8>)
 8007250:	4618      	mov	r0, r3
 8007252:	f7f9 feb3 	bl	8000fbc <__aeabi_fdiv>
 8007256:	4603      	mov	r3, r0
 8007258:	461a      	mov	r2, r3
 800725a:	4b27      	ldr	r3, [pc, #156]	@ (80072f8 <altitude_estimate+0x1e8>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4619      	mov	r1, r3
 8007260:	4610      	mov	r0, r2
 8007262:	f7f9 fced 	bl	8000c40 <__aeabi_fsub>
 8007266:	4603      	mov	r3, r0
 8007268:	4618      	mov	r0, r3
 800726a:	f7f9 f945 	bl	80004f8 <__aeabi_f2d>
 800726e:	a31e      	add	r3, pc, #120	@ (adr r3, 80072e8 <altitude_estimate+0x1d8>)
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	f7f9 f998 	bl	80005a8 <__aeabi_dmul>
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	4620      	mov	r0, r4
 800727e:	4629      	mov	r1, r5
 8007280:	f7f8 ffdc 	bl	800023c <__adddf3>
 8007284:	4602      	mov	r2, r0
 8007286:	460b      	mov	r3, r1
 8007288:	4610      	mov	r0, r2
 800728a:	4619      	mov	r1, r3
 800728c:	f7f9 fc84 	bl	8000b98 <__aeabi_d2f>
 8007290:	4603      	mov	r3, r0
 8007292:	4a19      	ldr	r2, [pc, #100]	@ (80072f8 <altitude_estimate+0x1e8>)
 8007294:	6013      	str	r3, [r2, #0]
	}
	else{
		alt_estimate = _gps.altitude_msl/1000.0f;
		climb_rate = _gps.velocity[2]/100.0f;
	}
}
 8007296:	e01b      	b.n	80072d0 <altitude_estimate+0x1c0>
		alt_estimate = _gps.altitude_msl/1000.0f;
 8007298:	4b15      	ldr	r3, [pc, #84]	@ (80072f0 <altitude_estimate+0x1e0>)
 800729a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800729c:	4618      	mov	r0, r3
 800729e:	f7f9 fd85 	bl	8000dac <__aeabi_i2f>
 80072a2:	4603      	mov	r3, r0
 80072a4:	4917      	ldr	r1, [pc, #92]	@ (8007304 <altitude_estimate+0x1f4>)
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7f9 fe88 	bl	8000fbc <__aeabi_fdiv>
 80072ac:	4603      	mov	r3, r0
 80072ae:	461a      	mov	r2, r3
 80072b0:	4b10      	ldr	r3, [pc, #64]	@ (80072f4 <altitude_estimate+0x1e4>)
 80072b2:	601a      	str	r2, [r3, #0]
		climb_rate = _gps.velocity[2]/100.0f;
 80072b4:	4b0e      	ldr	r3, [pc, #56]	@ (80072f0 <altitude_estimate+0x1e0>)
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7f9 fd77 	bl	8000dac <__aeabi_i2f>
 80072be:	4603      	mov	r3, r0
 80072c0:	4911      	ldr	r1, [pc, #68]	@ (8007308 <altitude_estimate+0x1f8>)
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7f9 fe7a 	bl	8000fbc <__aeabi_fdiv>
 80072c8:	4603      	mov	r3, r0
 80072ca:	461a      	mov	r2, r3
 80072cc:	4b0a      	ldr	r3, [pc, #40]	@ (80072f8 <altitude_estimate+0x1e8>)
 80072ce:	601a      	str	r2, [r3, #0]
}
 80072d0:	bf00      	nop
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072da:	bf00      	nop
 80072dc:	f3af 8000 	nop.w
 80072e0:	47ae147b 	.word	0x47ae147b
 80072e4:	3fa47ae1 	.word	0x3fa47ae1
 80072e8:	9999999a 	.word	0x9999999a
 80072ec:	3fa99999 	.word	0x3fa99999
 80072f0:	200003f4 	.word	0x200003f4
 80072f4:	20000c78 	.word	0x20000c78
 80072f8:	20000c7c 	.word	0x20000c7c
 80072fc:	3fe00000 	.word	0x3fe00000
 8007300:	20000540 	.word	0x20000540
 8007304:	447a0000 	.word	0x447a0000
 8007308:	42c80000 	.word	0x42c80000
 800730c:	00000000 	.word	0x00000000

08007310 <dynamic_speed_esitmate>:
static float Cd = 0.01;
static float weigh = 0.8; // kg

static float velocity = 0;

float dynamic_speed_esitmate(float dt){
 8007310:	b5b0      	push	{r4, r5, r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
    float Thrust = (float)(ibusChannelData[CH3] - 1000) * 0.009;
 8007318:	4b41      	ldr	r3, [pc, #260]	@ (8007420 <dynamic_speed_esitmate+0x110>)
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8007320:	4618      	mov	r0, r3
 8007322:	f7f9 fd3f 	bl	8000da4 <__aeabi_ui2f>
 8007326:	4603      	mov	r3, r0
 8007328:	4618      	mov	r0, r3
 800732a:	f7f9 f8e5 	bl	80004f8 <__aeabi_f2d>
 800732e:	a33a      	add	r3, pc, #232	@ (adr r3, 8007418 <dynamic_speed_esitmate+0x108>)
 8007330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007334:	f7f9 f938 	bl	80005a8 <__aeabi_dmul>
 8007338:	4602      	mov	r2, r0
 800733a:	460b      	mov	r3, r1
 800733c:	4610      	mov	r0, r2
 800733e:	4619      	mov	r1, r3
 8007340:	f7f9 fc2a 	bl	8000b98 <__aeabi_d2f>
 8007344:	4603      	mov	r3, r0
 8007346:	60fb      	str	r3, [r7, #12]
    float acc = (Thrust - sign(velocity)*sq(velocity)*Cd + weigh * gravity * sin_approx(AHRS.pitch*RAD))/weigh;
 8007348:	4b36      	ldr	r3, [pc, #216]	@ (8007424 <dynamic_speed_esitmate+0x114>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f04f 0100 	mov.w	r1, #0
 8007350:	4618      	mov	r0, r3
 8007352:	f7f9 ff3b 	bl	80011cc <__aeabi_fcmpgt>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d002      	beq.n	8007362 <dynamic_speed_esitmate+0x52>
 800735c:	f04f 547e 	mov.w	r4, #1065353216	@ 0x3f800000
 8007360:	e000      	b.n	8007364 <dynamic_speed_esitmate+0x54>
 8007362:	4c31      	ldr	r4, [pc, #196]	@ (8007428 <dynamic_speed_esitmate+0x118>)
 8007364:	4b2f      	ldr	r3, [pc, #188]	@ (8007424 <dynamic_speed_esitmate+0x114>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a2e      	ldr	r2, [pc, #184]	@ (8007424 <dynamic_speed_esitmate+0x114>)
 800736a:	6812      	ldr	r2, [r2, #0]
 800736c:	4611      	mov	r1, r2
 800736e:	4618      	mov	r0, r3
 8007370:	f7f9 fd70 	bl	8000e54 <__aeabi_fmul>
 8007374:	4603      	mov	r3, r0
 8007376:	4619      	mov	r1, r3
 8007378:	4620      	mov	r0, r4
 800737a:	f7f9 fd6b 	bl	8000e54 <__aeabi_fmul>
 800737e:	4603      	mov	r3, r0
 8007380:	461a      	mov	r2, r3
 8007382:	4b2a      	ldr	r3, [pc, #168]	@ (800742c <dynamic_speed_esitmate+0x11c>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4619      	mov	r1, r3
 8007388:	4610      	mov	r0, r2
 800738a:	f7f9 fd63 	bl	8000e54 <__aeabi_fmul>
 800738e:	4603      	mov	r3, r0
 8007390:	4619      	mov	r1, r3
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f7f9 fc54 	bl	8000c40 <__aeabi_fsub>
 8007398:	4603      	mov	r3, r0
 800739a:	461c      	mov	r4, r3
 800739c:	4b24      	ldr	r3, [pc, #144]	@ (8007430 <dynamic_speed_esitmate+0x120>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a24      	ldr	r2, [pc, #144]	@ (8007434 <dynamic_speed_esitmate+0x124>)
 80073a2:	6812      	ldr	r2, [r2, #0]
 80073a4:	4611      	mov	r1, r2
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7f9 fd54 	bl	8000e54 <__aeabi_fmul>
 80073ac:	4603      	mov	r3, r0
 80073ae:	461d      	mov	r5, r3
 80073b0:	4b21      	ldr	r3, [pc, #132]	@ (8007438 <dynamic_speed_esitmate+0x128>)
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	4921      	ldr	r1, [pc, #132]	@ (800743c <dynamic_speed_esitmate+0x12c>)
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7f9 fd4c 	bl	8000e54 <__aeabi_fmul>
 80073bc:	4603      	mov	r3, r0
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fd f85a 	bl	8004478 <sin_approx>
 80073c4:	4603      	mov	r3, r0
 80073c6:	4619      	mov	r1, r3
 80073c8:	4628      	mov	r0, r5
 80073ca:	f7f9 fd43 	bl	8000e54 <__aeabi_fmul>
 80073ce:	4603      	mov	r3, r0
 80073d0:	4619      	mov	r1, r3
 80073d2:	4620      	mov	r0, r4
 80073d4:	f7f9 fc36 	bl	8000c44 <__addsf3>
 80073d8:	4603      	mov	r3, r0
 80073da:	461a      	mov	r2, r3
 80073dc:	4b14      	ldr	r3, [pc, #80]	@ (8007430 <dynamic_speed_esitmate+0x120>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4619      	mov	r1, r3
 80073e2:	4610      	mov	r0, r2
 80073e4:	f7f9 fdea 	bl	8000fbc <__aeabi_fdiv>
 80073e8:	4603      	mov	r3, r0
 80073ea:	60bb      	str	r3, [r7, #8]
    velocity += acc*dt;
 80073ec:	6879      	ldr	r1, [r7, #4]
 80073ee:	68b8      	ldr	r0, [r7, #8]
 80073f0:	f7f9 fd30 	bl	8000e54 <__aeabi_fmul>
 80073f4:	4603      	mov	r3, r0
 80073f6:	461a      	mov	r2, r3
 80073f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007424 <dynamic_speed_esitmate+0x114>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4619      	mov	r1, r3
 80073fe:	4610      	mov	r0, r2
 8007400:	f7f9 fc20 	bl	8000c44 <__addsf3>
 8007404:	4603      	mov	r3, r0
 8007406:	461a      	mov	r2, r3
 8007408:	4b06      	ldr	r3, [pc, #24]	@ (8007424 <dynamic_speed_esitmate+0x114>)
 800740a:	601a      	str	r2, [r3, #0]
    return velocity;
 800740c:	4b05      	ldr	r3, [pc, #20]	@ (8007424 <dynamic_speed_esitmate+0x114>)
 800740e:	681b      	ldr	r3, [r3, #0]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bdb0      	pop	{r4, r5, r7, pc}
 8007418:	8d4fdf3b 	.word	0x8d4fdf3b
 800741c:	3f826e97 	.word	0x3f826e97
 8007420:	20000118 	.word	0x20000118
 8007424:	20000c80 	.word	0x20000c80
 8007428:	bf800000 	.word	0xbf800000
 800742c:	20000030 	.word	0x20000030
 8007430:	20000034 	.word	0x20000034
 8007434:	2000002c 	.word	0x2000002c
 8007438:	2000051c 	.word	0x2000051c
 800743c:	3c8efa35 	.word	0x3c8efa35

08007440 <mapI>:
}


#define Feq2Sec(F) (1.0f/F)

static int32_t mapI(int val, int min_in,int max_in,int min_out, int max_out){
 8007440:	b480      	push	{r7}
 8007442:	b087      	sub	sp, #28
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	603b      	str	r3, [r7, #0]
   int out = (val - min_in)*(max_out - min_out)/(max_in - min_in);
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	6a39      	ldr	r1, [r7, #32]
 8007456:	683a      	ldr	r2, [r7, #0]
 8007458:	1a8a      	subs	r2, r1, r2
 800745a:	fb03 f202 	mul.w	r2, r3, r2
 800745e:	6879      	ldr	r1, [r7, #4]
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	1acb      	subs	r3, r1, r3
 8007464:	fb92 f3f3 	sdiv	r3, r2, r3
 8007468:	617b      	str	r3, [r7, #20]
}
 800746a:	bf00      	nop
 800746c:	4618      	mov	r0, r3
 800746e:	371c      	adds	r7, #28
 8007470:	46bd      	mov	sp, r7
 8007472:	bc80      	pop	{r7}
 8007474:	4770      	bx	lr

08007476 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8007476:	b480      	push	{r7}
 8007478:	b085      	sub	sp, #20
 800747a:	af00      	add	r7, sp, #0
 800747c:	4603      	mov	r3, r0
 800747e:	6039      	str	r1, [r7, #0]
 8007480:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	881b      	ldrh	r3, [r3, #0]
 8007486:	b2da      	uxtb	r2, r3
 8007488:	79fb      	ldrb	r3, [r7, #7]
 800748a:	4053      	eors	r3, r2
 800748c:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 800748e:	7bfb      	ldrb	r3, [r7, #15]
 8007490:	011b      	lsls	r3, r3, #4
 8007492:	b25a      	sxtb	r2, r3
 8007494:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007498:	4053      	eors	r3, r2
 800749a:	b25b      	sxtb	r3, r3
 800749c:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	0a1b      	lsrs	r3, r3, #8
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	b21a      	sxth	r2, r3
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	021b      	lsls	r3, r3, #8
 80074ac:	b21b      	sxth	r3, r3
 80074ae:	4053      	eors	r3, r2
 80074b0:	b21a      	sxth	r2, r3
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
 80074b4:	00db      	lsls	r3, r3, #3
 80074b6:	b21b      	sxth	r3, r3
 80074b8:	4053      	eors	r3, r2
 80074ba:	b21a      	sxth	r2, r3
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
 80074be:	091b      	lsrs	r3, r3, #4
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	b21b      	sxth	r3, r3
 80074c4:	4053      	eors	r3, r2
 80074c6:	b21b      	sxth	r3, r3
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	801a      	strh	r2, [r3, #0]
}
 80074ce:	bf00      	nop
 80074d0:	3714      	adds	r7, #20
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bc80      	pop	{r7}
 80074d6:	4770      	bx	lr

080074d8 <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80074e6:	801a      	strh	r2, [r3, #0]
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bc80      	pop	{r7}
 80074f0:	4770      	bx	lr

080074f2 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b084      	sub	sp, #16
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	460b      	mov	r3, r1
 80074fc:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 80074fe:	f107 030e 	add.w	r3, r7, #14
 8007502:	4618      	mov	r0, r3
 8007504:	f7ff ffe8 	bl	80074d8 <crc_init>
	while (length--) {
 8007508:	e009      	b.n	800751e <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	1c5a      	adds	r2, r3, #1
 800750e:	607a      	str	r2, [r7, #4]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	f107 020e 	add.w	r2, r7, #14
 8007516:	4611      	mov	r1, r2
 8007518:	4618      	mov	r0, r3
 800751a:	f7ff ffac 	bl	8007476 <crc_accumulate>
	while (length--) {
 800751e:	887b      	ldrh	r3, [r7, #2]
 8007520:	1e5a      	subs	r2, r3, #1
 8007522:	807a      	strh	r2, [r7, #2]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1f0      	bne.n	800750a <crc_calculate+0x18>
        }
        return crcTmp;
 8007528:	89fb      	ldrh	r3, [r7, #14]
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b086      	sub	sp, #24
 8007536:	af00      	add	r7, sp, #0
 8007538:	60f8      	str	r0, [r7, #12]
 800753a:	60b9      	str	r1, [r7, #8]
 800753c:	4613      	mov	r3, r2
 800753e:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	617b      	str	r3, [r7, #20]
	while (length--) {
 8007544:	e007      	b.n	8007556 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	617a      	str	r2, [r7, #20]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	68f9      	ldr	r1, [r7, #12]
 8007550:	4618      	mov	r0, r3
 8007552:	f7ff ff90 	bl	8007476 <crc_accumulate>
	while (length--) {
 8007556:	88fb      	ldrh	r3, [r7, #6]
 8007558:	1e5a      	subs	r2, r3, #1
 800755a:	80fa      	strh	r2, [r7, #6]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1f2      	bne.n	8007546 <crc_accumulate_buffer+0x14>
        }
}
 8007560:	bf00      	nop
 8007562:	bf00      	nop
 8007564:	3718      	adds	r7, #24
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
	...

0800756c <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	4603      	mov	r3, r0
 8007574:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8007576:	79fa      	ldrb	r2, [r7, #7]
 8007578:	4613      	mov	r3, r2
 800757a:	005b      	lsls	r3, r3, #1
 800757c:	4413      	add	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	4a03      	ldr	r2, [pc, #12]	@ (8007590 <mavlink_get_channel_status+0x24>)
 8007582:	4413      	add	r3, r2
}
 8007584:	4618      	mov	r0, r3
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	bc80      	pop	{r7}
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	20000e68 	.word	0x20000e68

08007594 <mavlink_finalize_message_chan>:
						      uint8_t chan, uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						      uint8_t chan, uint8_t length)
#endif
{
 8007594:	b590      	push	{r4, r7, lr}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	4608      	mov	r0, r1
 800759e:	4611      	mov	r1, r2
 80075a0:	461a      	mov	r2, r3
 80075a2:	4603      	mov	r3, r0
 80075a4:	70fb      	strb	r3, [r7, #3]
 80075a6:	460b      	mov	r3, r1
 80075a8:	70bb      	strb	r3, [r7, #2]
 80075aa:	4613      	mov	r3, r2
 80075ac:	707b      	strb	r3, [r7, #1]
	// This code part is the same for all messages;
	msg->magic = MAVLINK_STX;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	22fe      	movs	r2, #254	@ 0xfe
 80075b2:	709a      	strb	r2, [r3, #2]
	msg->len = length;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	7e3a      	ldrb	r2, [r7, #24]
 80075b8:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	78fa      	ldrb	r2, [r7, #3]
 80075be:	715a      	strb	r2, [r3, #5]
	msg->compid = component_id;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	78ba      	ldrb	r2, [r7, #2]
 80075c4:	719a      	strb	r2, [r3, #6]
	// One sequence number per component
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 80075c6:	787b      	ldrb	r3, [r7, #1]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7ff ffcf 	bl	800756c <mavlink_get_channel_status>
 80075ce:	4603      	mov	r3, r0
 80075d0:	799a      	ldrb	r2, [r3, #6]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	711a      	strb	r2, [r3, #4]
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 80075d6:	787b      	ldrb	r3, [r7, #1]
 80075d8:	4618      	mov	r0, r3
 80075da:	f7ff ffc7 	bl	800756c <mavlink_get_channel_status>
 80075de:	4603      	mov	r3, r0
 80075e0:	799c      	ldrb	r4, [r3, #6]
 80075e2:	787b      	ldrb	r3, [r7, #1]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7ff ffc1 	bl	800756c <mavlink_get_channel_status>
 80075ea:	4603      	mov	r3, r0
 80075ec:	1c62      	adds	r2, r4, #1
 80075ee:	b2d2      	uxtb	r2, r2
 80075f0:	719a      	strb	r2, [r3, #6]
	msg->checksum = crc_calculate(((const uint8_t*)(msg)) + 3, MAVLINK_CORE_HEADER_LEN);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	3303      	adds	r3, #3
 80075f6:	2105      	movs	r1, #5
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7ff ff7a 	bl	80074f2 <crc_calculate>
 80075fe:	4603      	mov	r3, r0
 8007600:	461a      	mov	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	801a      	strh	r2, [r3, #0]
	crc_accumulate_buffer(&msg->checksum, _MAV_PAYLOAD(msg), msg->len);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f103 0108 	add.w	r1, r3, #8
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	78db      	ldrb	r3, [r3, #3]
 8007612:	461a      	mov	r2, r3
 8007614:	f7ff ff8d 	bl	8007532 <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &msg->checksum);
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	7f3b      	ldrb	r3, [r7, #28]
 800761c:	4611      	mov	r1, r2
 800761e:	4618      	mov	r0, r3
 8007620:	f7ff ff29 	bl	8007476 <crc_accumulate>
#endif
	mavlink_ck_a(msg) = (uint8_t)(msg->checksum & 0xFF);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	881b      	ldrh	r3, [r3, #0]
 8007628:	b299      	uxth	r1, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	3308      	adds	r3, #8
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	78d2      	ldrb	r2, [r2, #3]
 8007632:	4413      	add	r3, r2
 8007634:	b2ca      	uxtb	r2, r1
 8007636:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(msg->checksum >> 8);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	881b      	ldrh	r3, [r3, #0]
 800763c:	b29b      	uxth	r3, r3
 800763e:	0a1b      	lsrs	r3, r3, #8
 8007640:	b299      	uxth	r1, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f103 0208 	add.w	r2, r3, #8
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	78db      	ldrb	r3, [r3, #3]
 800764c:	3301      	adds	r3, #1
 800764e:	4413      	add	r3, r2
 8007650:	b2ca      	uxtb	r2, r1
 8007652:	701a      	strb	r2, [r3, #0]

	return length + MAVLINK_NUM_NON_PAYLOAD_BYTES;
 8007654:	7e3b      	ldrb	r3, [r7, #24]
 8007656:	b29b      	uxth	r3, r3
 8007658:	3308      	adds	r3, #8
 800765a:	b29b      	uxth	r3, r3
}
 800765c:	4618      	mov	r0, r3
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	bd90      	pop	{r4, r7, pc}

08007664 <mavlink_finalize_message>:
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
#if MAVLINK_CRC_EXTRA
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t length, uint8_t crc_extra)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af02      	add	r7, sp, #8
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	4608      	mov	r0, r1
 800766e:	4611      	mov	r1, r2
 8007670:	461a      	mov	r2, r3
 8007672:	4603      	mov	r3, r0
 8007674:	70fb      	strb	r3, [r7, #3]
 8007676:	460b      	mov	r3, r1
 8007678:	70bb      	strb	r3, [r7, #2]
 800767a:	4613      	mov	r3, r2
 800767c:	707b      	strb	r3, [r7, #1]
	return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, length, crc_extra);
 800767e:	78ba      	ldrb	r2, [r7, #2]
 8007680:	78f9      	ldrb	r1, [r7, #3]
 8007682:	7c3b      	ldrb	r3, [r7, #16]
 8007684:	9301      	str	r3, [sp, #4]
 8007686:	787b      	ldrb	r3, [r7, #1]
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	2300      	movs	r3, #0
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f7ff ff81 	bl	8007594 <mavlink_finalize_message_chan>
 8007692:	4603      	mov	r3, r0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buffer, const mavlink_message_t *msg)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
	memcpy(buffer, (const uint8_t *)&msg->magic, MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	1c99      	adds	r1, r3, #2
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	78db      	ldrb	r3, [r3, #3]
 80076ae:	3306      	adds	r3, #6
 80076b0:	461a      	mov	r2, r3
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f00d fd58 	bl	8015168 <memcpy>

	uint8_t *ck = buffer + (MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	78db      	ldrb	r3, [r3, #3]
 80076bc:	3306      	adds	r3, #6
 80076be:	461a      	mov	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4413      	add	r3, r2
 80076c4:	60fb      	str	r3, [r7, #12]

	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	881b      	ldrh	r3, [r3, #0]
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	0a1b      	lsrs	r3, r3, #8
 80076da:	b29a      	uxth	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	3301      	adds	r3, #1
 80076e0:	b2d2      	uxtb	r2, r2
 80076e2:	701a      	strb	r2, [r3, #0]

	return MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)msg->len;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	78db      	ldrb	r3, [r3, #3]
 80076e8:	3308      	adds	r3, #8
 80076ea:	b29b      	uxth	r3, r3
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <mavlink_msg_heartbeat_pack>:
 * @param system_status System status flag, see MAV_STATE ENUM
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b088      	sub	sp, #32
 80076f8:	af02      	add	r7, sp, #8
 80076fa:	603a      	str	r2, [r7, #0]
 80076fc:	461a      	mov	r2, r3
 80076fe:	4603      	mov	r3, r0
 8007700:	71fb      	strb	r3, [r7, #7]
 8007702:	460b      	mov	r3, r1
 8007704:	71bb      	strb	r3, [r7, #6]
 8007706:	4613      	mov	r3, r2
 8007708:	717b      	strb	r3, [r7, #5]
	_mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
	mavlink_heartbeat_t packet;
	packet.custom_mode = custom_mode;
 800770a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800770c:	60fb      	str	r3, [r7, #12]
	packet.type = type;
 800770e:	797b      	ldrb	r3, [r7, #5]
 8007710:	743b      	strb	r3, [r7, #16]
	packet.autopilot = autopilot;
 8007712:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007716:	747b      	strb	r3, [r7, #17]
	packet.base_mode = base_mode;
 8007718:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800771c:	74bb      	strb	r3, [r7, #18]
	packet.system_status = system_status;
 800771e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007722:	74fb      	strb	r3, [r7, #19]
	packet.mavlink_version = 3;
 8007724:	2303      	movs	r3, #3
 8007726:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	3308      	adds	r3, #8
 800772c:	f107 010c 	add.w	r1, r7, #12
 8007730:	2209      	movs	r2, #9
 8007732:	4618      	mov	r0, r3
 8007734:	f00d fd18 	bl	8015168 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	2200      	movs	r2, #0
 800773c:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 800773e:	79ba      	ldrb	r2, [r7, #6]
 8007740:	79f9      	ldrb	r1, [r7, #7]
 8007742:	2332      	movs	r3, #50	@ 0x32
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	2309      	movs	r3, #9
 8007748:	6838      	ldr	r0, [r7, #0]
 800774a:	f7ff ff8b 	bl	8007664 <mavlink_finalize_message>
 800774e:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#endif
}
 8007750:	4618      	mov	r0, r3
 8007752:	3718      	adds	r7, #24
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <mavlink_msg_attitude_pack>:
 * @param yawspeed Yaw angular speed (rad/s)
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_attitude_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint32_t time_boot_ms, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b08e      	sub	sp, #56	@ 0x38
 800775c:	af02      	add	r7, sp, #8
 800775e:	60ba      	str	r2, [r7, #8]
 8007760:	607b      	str	r3, [r7, #4]
 8007762:	4603      	mov	r3, r0
 8007764:	73fb      	strb	r3, [r7, #15]
 8007766:	460b      	mov	r3, r1
 8007768:	73bb      	strb	r3, [r7, #14]
	_mav_put_float(buf, 24, yawspeed);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_ATTITUDE_LEN);
#else
	mavlink_attitude_t packet;
	packet.time_boot_ms = time_boot_ms;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	617b      	str	r3, [r7, #20]
	packet.roll = roll;
 800776e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007770:	61bb      	str	r3, [r7, #24]
	packet.pitch = pitch;
 8007772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007774:	61fb      	str	r3, [r7, #28]
	packet.yaw = yaw;
 8007776:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007778:	623b      	str	r3, [r7, #32]
	packet.rollspeed = rollspeed;
 800777a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800777c:	627b      	str	r3, [r7, #36]	@ 0x24
	packet.pitchspeed = pitchspeed;
 800777e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007780:	62bb      	str	r3, [r7, #40]	@ 0x28
	packet.yawspeed = yawspeed;
 8007782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007784:	62fb      	str	r3, [r7, #44]	@ 0x2c

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_ATTITUDE_LEN);
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	3308      	adds	r3, #8
 800778a:	f107 0114 	add.w	r1, r7, #20
 800778e:	221c      	movs	r2, #28
 8007790:	4618      	mov	r0, r3
 8007792:	f00d fce9 	bl	8015168 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_ATTITUDE;
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	221e      	movs	r2, #30
 800779a:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_ATTITUDE_LEN, MAVLINK_MSG_ID_ATTITUDE_CRC);
 800779c:	7bba      	ldrb	r2, [r7, #14]
 800779e:	7bf9      	ldrb	r1, [r7, #15]
 80077a0:	2327      	movs	r3, #39	@ 0x27
 80077a2:	9300      	str	r3, [sp, #0]
 80077a4:	231c      	movs	r3, #28
 80077a6:	68b8      	ldr	r0, [r7, #8]
 80077a8:	f7ff ff5c 	bl	8007664 <mavlink_finalize_message>
 80077ac:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_ATTITUDE_LEN);
#endif
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3730      	adds	r7, #48	@ 0x30
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <mavlink_msg_rc_channels_raw_pack>:
 * @param rssi Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_rc_channels_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint32_t time_boot_ms, uint8_t port, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint8_t rssi)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b08c      	sub	sp, #48	@ 0x30
 80077ba:	af02      	add	r7, sp, #8
 80077bc:	60ba      	str	r2, [r7, #8]
 80077be:	607b      	str	r3, [r7, #4]
 80077c0:	4603      	mov	r3, r0
 80077c2:	73fb      	strb	r3, [r7, #15]
 80077c4:	460b      	mov	r3, r1
 80077c6:	73bb      	strb	r3, [r7, #14]
	_mav_put_uint8_t(buf, 21, rssi);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#else
	mavlink_rc_channels_raw_t packet;
	packet.time_boot_ms = time_boot_ms;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	613b      	str	r3, [r7, #16]
	packet.chan1_raw = chan1_raw;
 80077cc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80077ce:	82bb      	strh	r3, [r7, #20]
	packet.chan2_raw = chan2_raw;
 80077d0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80077d2:	82fb      	strh	r3, [r7, #22]
	packet.chan3_raw = chan3_raw;
 80077d4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80077d6:	833b      	strh	r3, [r7, #24]
	packet.chan4_raw = chan4_raw;
 80077d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80077dc:	837b      	strh	r3, [r7, #26]
	packet.chan5_raw = chan5_raw;
 80077de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80077e2:	83bb      	strh	r3, [r7, #28]
	packet.chan6_raw = chan6_raw;
 80077e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80077e8:	83fb      	strh	r3, [r7, #30]
	packet.chan7_raw = chan7_raw;
 80077ea:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80077ee:	843b      	strh	r3, [r7, #32]
	packet.chan8_raw = chan8_raw;
 80077f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80077f4:	847b      	strh	r3, [r7, #34]	@ 0x22
	packet.port = port;
 80077f6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80077fa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	packet.rssi = rssi;
 80077fe:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8007802:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	3308      	adds	r3, #8
 800780a:	f107 0110 	add.w	r1, r7, #16
 800780e:	2216      	movs	r2, #22
 8007810:	4618      	mov	r0, r3
 8007812:	f00d fca9 	bl	8015168 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_RC_CHANNELS_RAW;
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	2223      	movs	r2, #35	@ 0x23
 800781a:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN, MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC);
 800781c:	7bba      	ldrb	r2, [r7, #14]
 800781e:	7bf9      	ldrb	r1, [r7, #15]
 8007820:	23f4      	movs	r3, #244	@ 0xf4
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	2316      	movs	r3, #22
 8007826:	68b8      	ldr	r0, [r7, #8]
 8007828:	f7ff ff1c 	bl	8007664 <mavlink_finalize_message>
 800782c:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#endif
}
 800782e:	4618      	mov	r0, r3
 8007830:	3728      	adds	r7, #40	@ 0x28
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <mavlink_msg_vfr_hud_pack>:
 * @param climb Current climb rate in meters/second
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_vfr_hud_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b08c      	sub	sp, #48	@ 0x30
 800783a:	af02      	add	r7, sp, #8
 800783c:	60ba      	str	r2, [r7, #8]
 800783e:	607b      	str	r3, [r7, #4]
 8007840:	4603      	mov	r3, r0
 8007842:	73fb      	strb	r3, [r7, #15]
 8007844:	460b      	mov	r3, r1
 8007846:	73bb      	strb	r3, [r7, #14]
	_mav_put_uint16_t(buf, 18, throttle);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_VFR_HUD_LEN);
#else
	mavlink_vfr_hud_t packet;
	packet.airspeed = airspeed;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	617b      	str	r3, [r7, #20]
	packet.groundspeed = groundspeed;
 800784c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784e:	61bb      	str	r3, [r7, #24]
	packet.alt = alt;
 8007850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007852:	61fb      	str	r3, [r7, #28]
	packet.climb = climb;
 8007854:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007856:	623b      	str	r3, [r7, #32]
	packet.heading = heading;
 8007858:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800785a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	packet.throttle = throttle;
 800785c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800785e:	84fb      	strh	r3, [r7, #38]	@ 0x26

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_VFR_HUD_LEN);
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	3308      	adds	r3, #8
 8007864:	f107 0114 	add.w	r1, r7, #20
 8007868:	2214      	movs	r2, #20
 800786a:	4618      	mov	r0, r3
 800786c:	f00d fc7c 	bl	8015168 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_VFR_HUD;
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	224a      	movs	r2, #74	@ 0x4a
 8007874:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
 8007876:	7bba      	ldrb	r2, [r7, #14]
 8007878:	7bf9      	ldrb	r1, [r7, #15]
 800787a:	2314      	movs	r3, #20
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	2314      	movs	r3, #20
 8007880:	68b8      	ldr	r0, [r7, #8]
 8007882:	f7ff feef 	bl	8007664 <mavlink_finalize_message>
 8007886:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_VFR_HUD_LEN);
#endif
}
 8007888:	4618      	mov	r0, r3
 800788a:	3728      	adds	r7, #40	@ 0x28
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <mavlinkInit>:
static int isTxcpl;
uint32_t send_time_us;

extern float v_estimate;

void mavlinkInit(uint8_t syss_id, uint8_t comm_id,UART_HandleTypeDef *uartt,uint32_t baudrate){
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	60ba      	str	r2, [r7, #8]
 8007898:	607b      	str	r3, [r7, #4]
 800789a:	4603      	mov	r3, r0
 800789c:	73fb      	strb	r3, [r7, #15]
 800789e:	460b      	mov	r3, r1
 80078a0:	73bb      	strb	r3, [r7, #14]
    isTxcpl = 1;
 80078a2:	4b10      	ldr	r3, [pc, #64]	@ (80078e4 <mavlinkInit+0x54>)
 80078a4:	2201      	movs	r2, #1
 80078a6:	601a      	str	r2, [r3, #0]
    index_ =0;
 80078a8:	4b0f      	ldr	r3, [pc, #60]	@ (80078e8 <mavlinkInit+0x58>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	701a      	strb	r2, [r3, #0]
	sys_id  = syss_id;
 80078ae:	4a0f      	ldr	r2, [pc, #60]	@ (80078ec <mavlinkInit+0x5c>)
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
 80078b2:	7013      	strb	r3, [r2, #0]
    com_id  = comm_id;
 80078b4:	4a0e      	ldr	r2, [pc, #56]	@ (80078f0 <mavlinkInit+0x60>)
 80078b6:	7bbb      	ldrb	r3, [r7, #14]
 80078b8:	7013      	strb	r3, [r2, #0]
	uart = uartt;
 80078ba:	4a0e      	ldr	r2, [pc, #56]	@ (80078f4 <mavlinkInit+0x64>)
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	6013      	str	r3, [r2, #0]
    uartt->Init.BaudRate = baudrate;
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(uartt);
 80078c6:	68b8      	ldr	r0, [r7, #8]
 80078c8:	f005 fab6 	bl	800ce38 <HAL_UART_Init>
	HAL_UART_Receive_IT(uart, &data,1);
 80078cc:	4b09      	ldr	r3, [pc, #36]	@ (80078f4 <mavlinkInit+0x64>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2201      	movs	r2, #1
 80078d2:	4909      	ldr	r1, [pc, #36]	@ (80078f8 <mavlinkInit+0x68>)
 80078d4:	4618      	mov	r0, r3
 80078d6:	f005 fb82 	bl	800cfde <HAL_UART_Receive_IT>
}
 80078da:	bf00      	nop
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	20000e64 	.word	0x20000e64
 80078e8:	20000d95 	.word	0x20000d95
 80078ec:	20000d96 	.word	0x20000d96
 80078f0:	20000d97 	.word	0x20000d97
 80078f4:	20000d98 	.word	0x20000d98
 80078f8:	20000d94 	.word	0x20000d94

080078fc <mavlink_osd>:
*   Attitude
*   GPS 
*   RC signal
*   heartbeat
*/
void mavlink_osd(){
 80078fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078fe:	b093      	sub	sp, #76	@ 0x4c
 8007900:	af0a      	add	r7, sp, #40	@ 0x28
	static uint8_t count_ = 0;
	static uint8_t count2_ = 0;
	if(isTxcpl)
 8007902:	4b7c      	ldr	r3, [pc, #496]	@ (8007af4 <mavlink_osd+0x1f8>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	f000 80ef 	beq.w	8007aea <mavlink_osd+0x1ee>
	{
		switch (count_)
 800790c:	4b7a      	ldr	r3, [pc, #488]	@ (8007af8 <mavlink_osd+0x1fc>)
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	2b02      	cmp	r3, #2
 8007912:	d071      	beq.n	80079f8 <mavlink_osd+0xfc>
 8007914:	2b02      	cmp	r3, #2
 8007916:	f300 80d8 	bgt.w	8007aca <mavlink_osd+0x1ce>
 800791a:	2b00      	cmp	r3, #0
 800791c:	d002      	beq.n	8007924 <mavlink_osd+0x28>
 800791e:	2b01      	cmp	r3, #1
 8007920:	d02f      	beq.n	8007982 <mavlink_osd+0x86>
 8007922:	e0d2      	b.n	8007aca <mavlink_osd+0x1ce>
		{
		// fast display
		case 0:  
			mavlink_msg_attitude_pack(sys_id,com_id,&msg,0,AHRS.roll*RAD,AHRS.pitch*RAD,0,0,0,0);
 8007924:	4b75      	ldr	r3, [pc, #468]	@ (8007afc <mavlink_osd+0x200>)
 8007926:	781c      	ldrb	r4, [r3, #0]
 8007928:	4b75      	ldr	r3, [pc, #468]	@ (8007b00 <mavlink_osd+0x204>)
 800792a:	781d      	ldrb	r5, [r3, #0]
 800792c:	4b75      	ldr	r3, [pc, #468]	@ (8007b04 <mavlink_osd+0x208>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4975      	ldr	r1, [pc, #468]	@ (8007b08 <mavlink_osd+0x20c>)
 8007932:	4618      	mov	r0, r3
 8007934:	f7f9 fa8e 	bl	8000e54 <__aeabi_fmul>
 8007938:	4603      	mov	r3, r0
 800793a:	461e      	mov	r6, r3
 800793c:	4b71      	ldr	r3, [pc, #452]	@ (8007b04 <mavlink_osd+0x208>)
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	4971      	ldr	r1, [pc, #452]	@ (8007b08 <mavlink_osd+0x20c>)
 8007942:	4618      	mov	r0, r3
 8007944:	f7f9 fa86 	bl	8000e54 <__aeabi_fmul>
 8007948:	4603      	mov	r3, r0
 800794a:	461a      	mov	r2, r3
 800794c:	f04f 0300 	mov.w	r3, #0
 8007950:	9305      	str	r3, [sp, #20]
 8007952:	f04f 0300 	mov.w	r3, #0
 8007956:	9304      	str	r3, [sp, #16]
 8007958:	f04f 0300 	mov.w	r3, #0
 800795c:	9303      	str	r3, [sp, #12]
 800795e:	f04f 0300 	mov.w	r3, #0
 8007962:	9302      	str	r3, [sp, #8]
 8007964:	9201      	str	r2, [sp, #4]
 8007966:	9600      	str	r6, [sp, #0]
 8007968:	2300      	movs	r3, #0
 800796a:	4a68      	ldr	r2, [pc, #416]	@ (8007b0c <mavlink_osd+0x210>)
 800796c:	4629      	mov	r1, r5
 800796e:	4620      	mov	r0, r4
 8007970:	f7ff fef2 	bl	8007758 <mavlink_msg_attitude_pack>
			count_ ++;
 8007974:	4b60      	ldr	r3, [pc, #384]	@ (8007af8 <mavlink_osd+0x1fc>)
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	3301      	adds	r3, #1
 800797a:	b2da      	uxtb	r2, r3
 800797c:	4b5e      	ldr	r3, [pc, #376]	@ (8007af8 <mavlink_osd+0x1fc>)
 800797e:	701a      	strb	r2, [r3, #0]
			break;
 8007980:	e0a3      	b.n	8007aca <mavlink_osd+0x1ce>
		case 1:  
			float airspeed = 314;    // osd in km/h
 8007982:	4b63      	ldr	r3, [pc, #396]	@ (8007b10 <mavlink_osd+0x214>)
 8007984:	61bb      	str	r3, [r7, #24]
			float groundspeed = 57;  // osd in km/h
 8007986:	4b63      	ldr	r3, [pc, #396]	@ (8007b14 <mavlink_osd+0x218>)
 8007988:	617b      	str	r3, [r7, #20]
			uint16_t throttle = (ibusChannelData[CH3] - 1000)*0.1f;
 800798a:	4b63      	ldr	r3, [pc, #396]	@ (8007b18 <mavlink_osd+0x21c>)
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8007992:	4618      	mov	r0, r3
 8007994:	f7f9 fa06 	bl	8000da4 <__aeabi_ui2f>
 8007998:	4603      	mov	r3, r0
 800799a:	4960      	ldr	r1, [pc, #384]	@ (8007b1c <mavlink_osd+0x220>)
 800799c:	4618      	mov	r0, r3
 800799e:	f7f9 fa59 	bl	8000e54 <__aeabi_fmul>
 80079a2:	4603      	mov	r3, r0
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7f9 fc57 	bl	8001258 <__aeabi_f2uiz>
 80079aa:	4603      	mov	r3, r0
 80079ac:	827b      	strh	r3, [r7, #18]
			float alt = 333;
 80079ae:	4b5c      	ldr	r3, [pc, #368]	@ (8007b20 <mavlink_osd+0x224>)
 80079b0:	60fb      	str	r3, [r7, #12]
			float climb = 5;
 80079b2:	4b5c      	ldr	r3, [pc, #368]	@ (8007b24 <mavlink_osd+0x228>)
 80079b4:	60bb      	str	r3, [r7, #8]
			mavlink_msg_vfr_hud_pack(sys_id,com_id,&msg,
 80079b6:	4b51      	ldr	r3, [pc, #324]	@ (8007afc <mavlink_osd+0x200>)
 80079b8:	781c      	ldrb	r4, [r3, #0]
 80079ba:	4b51      	ldr	r3, [pc, #324]	@ (8007b00 <mavlink_osd+0x204>)
 80079bc:	781d      	ldrb	r5, [r3, #0]
						airspeed, groundspeed,AHRS.yaw, throttle,alt, climb);
 80079be:	4b51      	ldr	r3, [pc, #324]	@ (8007b04 <mavlink_osd+0x208>)
 80079c0:	689b      	ldr	r3, [r3, #8]
			mavlink_msg_vfr_hud_pack(sys_id,com_id,&msg,
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7f9 fc22 	bl	800120c <__aeabi_f2iz>
 80079c8:	4603      	mov	r3, r0
 80079ca:	b21b      	sxth	r3, r3
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	9204      	str	r2, [sp, #16]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	9203      	str	r2, [sp, #12]
 80079d4:	8a7a      	ldrh	r2, [r7, #18]
 80079d6:	9202      	str	r2, [sp, #8]
 80079d8:	9301      	str	r3, [sp, #4]
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	4a4a      	ldr	r2, [pc, #296]	@ (8007b0c <mavlink_osd+0x210>)
 80079e2:	4629      	mov	r1, r5
 80079e4:	4620      	mov	r0, r4
 80079e6:	f7ff ff26 	bl	8007836 <mavlink_msg_vfr_hud_pack>
			count_ ++;
 80079ea:	4b43      	ldr	r3, [pc, #268]	@ (8007af8 <mavlink_osd+0x1fc>)
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	3301      	adds	r3, #1
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	4b41      	ldr	r3, [pc, #260]	@ (8007af8 <mavlink_osd+0x1fc>)
 80079f4:	701a      	strb	r2, [r3, #0]
			break;
 80079f6:	e068      	b.n	8007aca <mavlink_osd+0x1ce>
		case 2:
			switch (count2_)
 80079f8:	4b4b      	ldr	r3, [pc, #300]	@ (8007b28 <mavlink_osd+0x22c>)
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d046      	beq.n	8007a8e <mavlink_osd+0x192>
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	dc5f      	bgt.n	8007ac4 <mavlink_osd+0x1c8>
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <mavlink_osd+0x112>
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d007      	beq.n	8007a1c <mavlink_osd+0x120>
 8007a0c:	e05a      	b.n	8007ac4 <mavlink_osd+0x1c8>
			{
			case 0:
				//mavlink_msg_gps_raw_int_pack(sys_id,com_id,&msg,
				//						0, _gps.fix,_gps.position[0],_gps.position[1],1200,
				//						1 , 1 , 2200,0 ,abs(v_estimate));
				count2_ ++;
 8007a0e:	4b46      	ldr	r3, [pc, #280]	@ (8007b28 <mavlink_osd+0x22c>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	3301      	adds	r3, #1
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	4b44      	ldr	r3, [pc, #272]	@ (8007b28 <mavlink_osd+0x22c>)
 8007a18:	701a      	strb	r2, [r3, #0]

				break;
 8007a1a:	e053      	b.n	8007ac4 <mavlink_osd+0x1c8>
			case 1:
			    uint8_t rssi = mapI(ibusChannelData[CH11],1000,2000,0,255);
 8007a1c:	4b3e      	ldr	r3, [pc, #248]	@ (8007b18 <mavlink_osd+0x21c>)
 8007a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a20:	4618      	mov	r0, r3
 8007a22:	23ff      	movs	r3, #255	@ 0xff
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	2300      	movs	r3, #0
 8007a28:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8007a2c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007a30:	f7ff fd06 	bl	8007440 <mapI>
 8007a34:	4603      	mov	r3, r0
 8007a36:	773b      	strb	r3, [r7, #28]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 8007a38:	4b30      	ldr	r3, [pc, #192]	@ (8007afc <mavlink_osd+0x200>)
 8007a3a:	781c      	ldrb	r4, [r3, #0]
 8007a3c:	4b30      	ldr	r3, [pc, #192]	@ (8007b00 <mavlink_osd+0x204>)
 8007a3e:	781d      	ldrb	r5, [r3, #0]
						0,0,ibusChannelData[CH4],ibusChannelData[CH7],ibusChannelData[CH8], 
 8007a40:	4b35      	ldr	r3, [pc, #212]	@ (8007b18 <mavlink_osd+0x21c>)
 8007a42:	68db      	ldr	r3, [r3, #12]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 8007a44:	b29b      	uxth	r3, r3
						0,0,ibusChannelData[CH4],ibusChannelData[CH7],ibusChannelData[CH8], 
 8007a46:	4a34      	ldr	r2, [pc, #208]	@ (8007b18 <mavlink_osd+0x21c>)
 8007a48:	6992      	ldr	r2, [r2, #24]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 8007a4a:	b292      	uxth	r2, r2
						0,0,ibusChannelData[CH4],ibusChannelData[CH7],ibusChannelData[CH8], 
 8007a4c:	4932      	ldr	r1, [pc, #200]	@ (8007b18 <mavlink_osd+0x21c>)
 8007a4e:	69c9      	ldr	r1, [r1, #28]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 8007a50:	b289      	uxth	r1, r1
 8007a52:	7f38      	ldrb	r0, [r7, #28]
 8007a54:	9009      	str	r0, [sp, #36]	@ 0x24
 8007a56:	2000      	movs	r0, #0
 8007a58:	9008      	str	r0, [sp, #32]
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	9007      	str	r0, [sp, #28]
 8007a5e:	2000      	movs	r0, #0
 8007a60:	9006      	str	r0, [sp, #24]
 8007a62:	2000      	movs	r0, #0
 8007a64:	9005      	str	r0, [sp, #20]
 8007a66:	2000      	movs	r0, #0
 8007a68:	9004      	str	r0, [sp, #16]
 8007a6a:	9103      	str	r1, [sp, #12]
 8007a6c:	9202      	str	r2, [sp, #8]
 8007a6e:	9301      	str	r3, [sp, #4]
 8007a70:	2300      	movs	r3, #0
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	2300      	movs	r3, #0
 8007a76:	4a25      	ldr	r2, [pc, #148]	@ (8007b0c <mavlink_osd+0x210>)
 8007a78:	4629      	mov	r1, r5
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f7ff fe9b 	bl	80077b6 <mavlink_msg_rc_channels_raw_pack>
						0,0,0,
						0,0,rssi);
				count2_ ++;
 8007a80:	4b29      	ldr	r3, [pc, #164]	@ (8007b28 <mavlink_osd+0x22c>)
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	3301      	adds	r3, #1
 8007a86:	b2da      	uxtb	r2, r3
 8007a88:	4b27      	ldr	r3, [pc, #156]	@ (8007b28 <mavlink_osd+0x22c>)
 8007a8a:	701a      	strb	r2, [r3, #0]
				break;
 8007a8c:	e01a      	b.n	8007ac4 <mavlink_osd+0x1c8>
			case 2: // send heartbeat
				uint8_t type = MAV_TYPE_FIXED_WING;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	77fb      	strb	r3, [r7, #31]
				uint8_t autopilot = MAV_AUTOPILOT_GENERIC;
 8007a92:	2300      	movs	r3, #0
 8007a94:	77bb      	strb	r3, [r7, #30]
				uint8_t base_mode = MAV_MODE_FLAG_TEST_ENABLED;
 8007a96:	2302      	movs	r3, #2
 8007a98:	777b      	strb	r3, [r7, #29]
				mavlink_msg_heartbeat_pack(sys_id,com_id,&msg,type,autopilot,base_mode,base_mode, MAV_STATE_UNINIT);
 8007a9a:	4b18      	ldr	r3, [pc, #96]	@ (8007afc <mavlink_osd+0x200>)
 8007a9c:	7818      	ldrb	r0, [r3, #0]
 8007a9e:	4b18      	ldr	r3, [pc, #96]	@ (8007b00 <mavlink_osd+0x204>)
 8007aa0:	7819      	ldrb	r1, [r3, #0]
 8007aa2:	7f7b      	ldrb	r3, [r7, #29]
 8007aa4:	7ffa      	ldrb	r2, [r7, #31]
 8007aa6:	2400      	movs	r4, #0
 8007aa8:	9403      	str	r4, [sp, #12]
 8007aaa:	9302      	str	r3, [sp, #8]
 8007aac:	7f7b      	ldrb	r3, [r7, #29]
 8007aae:	9301      	str	r3, [sp, #4]
 8007ab0:	7fbb      	ldrb	r3, [r7, #30]
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	4a15      	ldr	r2, [pc, #84]	@ (8007b0c <mavlink_osd+0x210>)
 8007ab8:	f7ff fe1c 	bl	80076f4 <mavlink_msg_heartbeat_pack>
				count2_ = 0;
 8007abc:	4b1a      	ldr	r3, [pc, #104]	@ (8007b28 <mavlink_osd+0x22c>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	701a      	strb	r2, [r3, #0]
				break;
 8007ac2:	bf00      	nop
				                                     0,q,0,0,0,thrust);
		        count2_ = 0;
				break;
			*/
			}
			count_ = 0;
 8007ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8007af8 <mavlink_osd+0x1fc>)
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	701a      	strb	r2, [r3, #0]
		}
		uint16_t len_data = mavlink_msg_to_send_buffer(buffer__,&msg);
 8007aca:	4910      	ldr	r1, [pc, #64]	@ (8007b0c <mavlink_osd+0x210>)
 8007acc:	4817      	ldr	r0, [pc, #92]	@ (8007b2c <mavlink_osd+0x230>)
 8007ace:	f7ff fde5 	bl	800769c <mavlink_msg_to_send_buffer>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	80fb      	strh	r3, [r7, #6]
	    HAL_UART_Transmit_DMA(uart,buffer__,len_data);
 8007ad6:	4b16      	ldr	r3, [pc, #88]	@ (8007b30 <mavlink_osd+0x234>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	88fa      	ldrh	r2, [r7, #6]
 8007adc:	4913      	ldr	r1, [pc, #76]	@ (8007b2c <mavlink_osd+0x230>)
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f005 faa2 	bl	800d028 <HAL_UART_Transmit_DMA>
	    isTxcpl = 0;
 8007ae4:	4b03      	ldr	r3, [pc, #12]	@ (8007af4 <mavlink_osd+0x1f8>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	601a      	str	r2, [r3, #0]
	}
}
 8007aea:	bf00      	nop
 8007aec:	3724      	adds	r7, #36	@ 0x24
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007af2:	bf00      	nop
 8007af4:	20000e64 	.word	0x20000e64
 8007af8:	20000e98 	.word	0x20000e98
 8007afc:	20000d96 	.word	0x20000d96
 8007b00:	20000d97 	.word	0x20000d97
 8007b04:	2000051c 	.word	0x2000051c
 8007b08:	3c8efa35 	.word	0x3c8efa35
 8007b0c:	20000c84 	.word	0x20000c84
 8007b10:	439d0000 	.word	0x439d0000
 8007b14:	42640000 	.word	0x42640000
 8007b18:	20000118 	.word	0x20000118
 8007b1c:	3dcccccd 	.word	0x3dcccccd
 8007b20:	43a68000 	.word	0x43a68000
 8007b24:	40a00000 	.word	0x40a00000
 8007b28:	20000e99 	.word	0x20000e99
 8007b2c:	20000d9c 	.word	0x20000d9c
 8007b30:	20000d98 	.word	0x20000d98

08007b34 <mavlink_tx_cpl_callback>:
/*
 * 
 */
uint32_t temp;
void mavlink_tx_cpl_callback()
{   
 8007b34:	b480      	push	{r7}
 8007b36:	af00      	add	r7, sp, #0
	//send_time_us = millis() - temp;
	//temp = millis();
	isTxcpl = 1;
 8007b38:	4b03      	ldr	r3, [pc, #12]	@ (8007b48 <mavlink_tx_cpl_callback+0x14>)
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	601a      	str	r2, [r3, #0]
}
 8007b3e:	bf00      	nop
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bc80      	pop	{r7}
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	20000e64 	.word	0x20000e64

08007b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007b50:	4b08      	ldr	r3, [pc, #32]	@ (8007b74 <HAL_Init+0x28>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a07      	ldr	r2, [pc, #28]	@ (8007b74 <HAL_Init+0x28>)
 8007b56:	f043 0310 	orr.w	r3, r3, #16
 8007b5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007b5c:	2003      	movs	r0, #3
 8007b5e:	f000 f8f5 	bl	8007d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007b62:	200f      	movs	r0, #15
 8007b64:	f7fd fff6 	bl	8005b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007b68:	f7fd ffbc 	bl	8005ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	40022000 	.word	0x40022000

08007b78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007b7c:	4b05      	ldr	r3, [pc, #20]	@ (8007b94 <HAL_IncTick+0x1c>)
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	461a      	mov	r2, r3
 8007b82:	4b05      	ldr	r3, [pc, #20]	@ (8007b98 <HAL_IncTick+0x20>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4413      	add	r3, r2
 8007b88:	4a03      	ldr	r2, [pc, #12]	@ (8007b98 <HAL_IncTick+0x20>)
 8007b8a:	6013      	str	r3, [r2, #0]
}
 8007b8c:	bf00      	nop
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bc80      	pop	{r7}
 8007b92:	4770      	bx	lr
 8007b94:	2000003c 	.word	0x2000003c
 8007b98:	20000e9c 	.word	0x20000e9c

08007b9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8007ba0:	4b02      	ldr	r3, [pc, #8]	@ (8007bac <HAL_GetTick+0x10>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bc80      	pop	{r7}
 8007baa:	4770      	bx	lr
 8007bac:	20000e9c 	.word	0x20000e9c

08007bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007bb8:	f7ff fff0 	bl	8007b9c <HAL_GetTick>
 8007bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc8:	d005      	beq.n	8007bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007bca:	4b0a      	ldr	r3, [pc, #40]	@ (8007bf4 <HAL_Delay+0x44>)
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007bd6:	bf00      	nop
 8007bd8:	f7ff ffe0 	bl	8007b9c <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d8f7      	bhi.n	8007bd8 <HAL_Delay+0x28>
  {
  }
}
 8007be8:	bf00      	nop
 8007bea:	bf00      	nop
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	2000003c 	.word	0x2000003c

08007bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f003 0307 	and.w	r3, r3, #7
 8007c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007c08:	4b0c      	ldr	r3, [pc, #48]	@ (8007c3c <__NVIC_SetPriorityGrouping+0x44>)
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007c14:	4013      	ands	r3, r2
 8007c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007c20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007c2a:	4a04      	ldr	r2, [pc, #16]	@ (8007c3c <__NVIC_SetPriorityGrouping+0x44>)
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	60d3      	str	r3, [r2, #12]
}
 8007c30:	bf00      	nop
 8007c32:	3714      	adds	r7, #20
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bc80      	pop	{r7}
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	e000ed00 	.word	0xe000ed00

08007c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007c40:	b480      	push	{r7}
 8007c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c44:	4b04      	ldr	r3, [pc, #16]	@ (8007c58 <__NVIC_GetPriorityGrouping+0x18>)
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	0a1b      	lsrs	r3, r3, #8
 8007c4a:	f003 0307 	and.w	r3, r3, #7
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bc80      	pop	{r7}
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	e000ed00 	.word	0xe000ed00

08007c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	4603      	mov	r3, r0
 8007c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	db0b      	blt.n	8007c86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c6e:	79fb      	ldrb	r3, [r7, #7]
 8007c70:	f003 021f 	and.w	r2, r3, #31
 8007c74:	4906      	ldr	r1, [pc, #24]	@ (8007c90 <__NVIC_EnableIRQ+0x34>)
 8007c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c7a:	095b      	lsrs	r3, r3, #5
 8007c7c:	2001      	movs	r0, #1
 8007c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8007c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007c86:	bf00      	nop
 8007c88:	370c      	adds	r7, #12
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bc80      	pop	{r7}
 8007c8e:	4770      	bx	lr
 8007c90:	e000e100 	.word	0xe000e100

08007c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	6039      	str	r1, [r7, #0]
 8007c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	db0a      	blt.n	8007cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	b2da      	uxtb	r2, r3
 8007cac:	490c      	ldr	r1, [pc, #48]	@ (8007ce0 <__NVIC_SetPriority+0x4c>)
 8007cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cb2:	0112      	lsls	r2, r2, #4
 8007cb4:	b2d2      	uxtb	r2, r2
 8007cb6:	440b      	add	r3, r1
 8007cb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007cbc:	e00a      	b.n	8007cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	4908      	ldr	r1, [pc, #32]	@ (8007ce4 <__NVIC_SetPriority+0x50>)
 8007cc4:	79fb      	ldrb	r3, [r7, #7]
 8007cc6:	f003 030f 	and.w	r3, r3, #15
 8007cca:	3b04      	subs	r3, #4
 8007ccc:	0112      	lsls	r2, r2, #4
 8007cce:	b2d2      	uxtb	r2, r2
 8007cd0:	440b      	add	r3, r1
 8007cd2:	761a      	strb	r2, [r3, #24]
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bc80      	pop	{r7}
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	e000e100 	.word	0xe000e100
 8007ce4:	e000ed00 	.word	0xe000ed00

08007ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b089      	sub	sp, #36	@ 0x24
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f003 0307 	and.w	r3, r3, #7
 8007cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	f1c3 0307 	rsb	r3, r3, #7
 8007d02:	2b04      	cmp	r3, #4
 8007d04:	bf28      	it	cs
 8007d06:	2304      	movcs	r3, #4
 8007d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	2b06      	cmp	r3, #6
 8007d10:	d902      	bls.n	8007d18 <NVIC_EncodePriority+0x30>
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	3b03      	subs	r3, #3
 8007d16:	e000      	b.n	8007d1a <NVIC_EncodePriority+0x32>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	fa02 f303 	lsl.w	r3, r2, r3
 8007d26:	43da      	mvns	r2, r3
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	401a      	ands	r2, r3
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d30:	f04f 31ff 	mov.w	r1, #4294967295
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	fa01 f303 	lsl.w	r3, r1, r3
 8007d3a:	43d9      	mvns	r1, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d40:	4313      	orrs	r3, r2
         );
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3724      	adds	r7, #36	@ 0x24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bc80      	pop	{r7}
 8007d4a:	4770      	bx	lr

08007d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7ff ff4f 	bl	8007bf8 <__NVIC_SetPriorityGrouping>
}
 8007d5a:	bf00      	nop
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b086      	sub	sp, #24
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	4603      	mov	r3, r0
 8007d6a:	60b9      	str	r1, [r7, #8]
 8007d6c:	607a      	str	r2, [r7, #4]
 8007d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007d70:	2300      	movs	r3, #0
 8007d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007d74:	f7ff ff64 	bl	8007c40 <__NVIC_GetPriorityGrouping>
 8007d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	68b9      	ldr	r1, [r7, #8]
 8007d7e:	6978      	ldr	r0, [r7, #20]
 8007d80:	f7ff ffb2 	bl	8007ce8 <NVIC_EncodePriority>
 8007d84:	4602      	mov	r2, r0
 8007d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d8a:	4611      	mov	r1, r2
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7ff ff81 	bl	8007c94 <__NVIC_SetPriority>
}
 8007d92:	bf00      	nop
 8007d94:	3718      	adds	r7, #24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b082      	sub	sp, #8
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	4603      	mov	r3, r0
 8007da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7ff ff57 	bl	8007c5c <__NVIC_EnableIRQ>
}
 8007dae:	bf00      	nop
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
	...

08007db8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e059      	b.n	8007e82 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8007e8c <HAL_DMA_Init+0xd4>)
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d80f      	bhi.n	8007dfa <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	4b2b      	ldr	r3, [pc, #172]	@ (8007e90 <HAL_DMA_Init+0xd8>)
 8007de2:	4413      	add	r3, r2
 8007de4:	4a2b      	ldr	r2, [pc, #172]	@ (8007e94 <HAL_DMA_Init+0xdc>)
 8007de6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dea:	091b      	lsrs	r3, r3, #4
 8007dec:	009a      	lsls	r2, r3, #2
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a28      	ldr	r2, [pc, #160]	@ (8007e98 <HAL_DMA_Init+0xe0>)
 8007df6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007df8:	e00e      	b.n	8007e18 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	461a      	mov	r2, r3
 8007e00:	4b26      	ldr	r3, [pc, #152]	@ (8007e9c <HAL_DMA_Init+0xe4>)
 8007e02:	4413      	add	r3, r2
 8007e04:	4a23      	ldr	r2, [pc, #140]	@ (8007e94 <HAL_DMA_Init+0xdc>)
 8007e06:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0a:	091b      	lsrs	r3, r3, #4
 8007e0c:	009a      	lsls	r2, r3, #2
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a22      	ldr	r2, [pc, #136]	@ (8007ea0 <HAL_DMA_Init+0xe8>)
 8007e16:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8007e2e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8007e32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8007e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	69db      	ldr	r3, [r3, #28]
 8007e5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3714      	adds	r7, #20
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bc80      	pop	{r7}
 8007e8a:	4770      	bx	lr
 8007e8c:	40020407 	.word	0x40020407
 8007e90:	bffdfff8 	.word	0xbffdfff8
 8007e94:	cccccccd 	.word	0xcccccccd
 8007e98:	40020000 	.word	0x40020000
 8007e9c:	bffdfbf8 	.word	0xbffdfbf8
 8007ea0:	40020400 	.word	0x40020400

08007ea4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
 8007eb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d101      	bne.n	8007ec4 <HAL_DMA_Start_IT+0x20>
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	e04b      	b.n	8007f5c <HAL_DMA_Start_IT+0xb8>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d13a      	bne.n	8007f4e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2202      	movs	r2, #2
 8007edc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f022 0201 	bic.w	r2, r2, #1
 8007ef4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	68b9      	ldr	r1, [r7, #8]
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f000 fbb1 	bl	8008664 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d008      	beq.n	8007f1c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f042 020e 	orr.w	r2, r2, #14
 8007f18:	601a      	str	r2, [r3, #0]
 8007f1a:	e00f      	b.n	8007f3c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f022 0204 	bic.w	r2, r2, #4
 8007f2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f042 020a 	orr.w	r2, r2, #10
 8007f3a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f042 0201 	orr.w	r2, r2, #1
 8007f4a:	601a      	str	r2, [r3, #0]
 8007f4c:	e005      	b.n	8007f5a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8007f56:	2302      	movs	r3, #2
 8007f58:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8007f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3718      	adds	r7, #24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d008      	beq.n	8007f8e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2204      	movs	r2, #4
 8007f80:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e020      	b.n	8007fd0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f022 020e 	bic.w	r2, r2, #14
 8007f9c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f022 0201 	bic.w	r2, r2, #1
 8007fac:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8007fbc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8007fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3714      	adds	r7, #20
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bc80      	pop	{r7}
 8007fd8:	4770      	bx	lr
	...

08007fdc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d005      	beq.n	8008000 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2204      	movs	r2, #4
 8007ff8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	73fb      	strb	r3, [r7, #15]
 8007ffe:	e0d6      	b.n	80081ae <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f022 020e 	bic.w	r2, r2, #14
 800800e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f022 0201 	bic.w	r2, r2, #1
 800801e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	461a      	mov	r2, r3
 8008026:	4b64      	ldr	r3, [pc, #400]	@ (80081b8 <HAL_DMA_Abort_IT+0x1dc>)
 8008028:	429a      	cmp	r2, r3
 800802a:	d958      	bls.n	80080de <HAL_DMA_Abort_IT+0x102>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a62      	ldr	r2, [pc, #392]	@ (80081bc <HAL_DMA_Abort_IT+0x1e0>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d04f      	beq.n	80080d6 <HAL_DMA_Abort_IT+0xfa>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a61      	ldr	r2, [pc, #388]	@ (80081c0 <HAL_DMA_Abort_IT+0x1e4>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d048      	beq.n	80080d2 <HAL_DMA_Abort_IT+0xf6>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a5f      	ldr	r2, [pc, #380]	@ (80081c4 <HAL_DMA_Abort_IT+0x1e8>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d040      	beq.n	80080cc <HAL_DMA_Abort_IT+0xf0>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a5e      	ldr	r2, [pc, #376]	@ (80081c8 <HAL_DMA_Abort_IT+0x1ec>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d038      	beq.n	80080c6 <HAL_DMA_Abort_IT+0xea>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a5c      	ldr	r2, [pc, #368]	@ (80081cc <HAL_DMA_Abort_IT+0x1f0>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d030      	beq.n	80080c0 <HAL_DMA_Abort_IT+0xe4>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a5b      	ldr	r2, [pc, #364]	@ (80081d0 <HAL_DMA_Abort_IT+0x1f4>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d028      	beq.n	80080ba <HAL_DMA_Abort_IT+0xde>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a52      	ldr	r2, [pc, #328]	@ (80081b8 <HAL_DMA_Abort_IT+0x1dc>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d020      	beq.n	80080b4 <HAL_DMA_Abort_IT+0xd8>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a57      	ldr	r2, [pc, #348]	@ (80081d4 <HAL_DMA_Abort_IT+0x1f8>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d019      	beq.n	80080b0 <HAL_DMA_Abort_IT+0xd4>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a55      	ldr	r2, [pc, #340]	@ (80081d8 <HAL_DMA_Abort_IT+0x1fc>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d012      	beq.n	80080ac <HAL_DMA_Abort_IT+0xd0>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a54      	ldr	r2, [pc, #336]	@ (80081dc <HAL_DMA_Abort_IT+0x200>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d00a      	beq.n	80080a6 <HAL_DMA_Abort_IT+0xca>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a52      	ldr	r2, [pc, #328]	@ (80081e0 <HAL_DMA_Abort_IT+0x204>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d102      	bne.n	80080a0 <HAL_DMA_Abort_IT+0xc4>
 800809a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800809e:	e01b      	b.n	80080d8 <HAL_DMA_Abort_IT+0xfc>
 80080a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80080a4:	e018      	b.n	80080d8 <HAL_DMA_Abort_IT+0xfc>
 80080a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80080aa:	e015      	b.n	80080d8 <HAL_DMA_Abort_IT+0xfc>
 80080ac:	2310      	movs	r3, #16
 80080ae:	e013      	b.n	80080d8 <HAL_DMA_Abort_IT+0xfc>
 80080b0:	2301      	movs	r3, #1
 80080b2:	e011      	b.n	80080d8 <HAL_DMA_Abort_IT+0xfc>
 80080b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80080b8:	e00e      	b.n	80080d8 <HAL_DMA_Abort_IT+0xfc>
 80080ba:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80080be:	e00b      	b.n	80080d8 <HAL_DMA_Abort_IT+0xfc>
 80080c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80080c4:	e008      	b.n	80080d8 <HAL_DMA_Abort_IT+0xfc>
 80080c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80080ca:	e005      	b.n	80080d8 <HAL_DMA_Abort_IT+0xfc>
 80080cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80080d0:	e002      	b.n	80080d8 <HAL_DMA_Abort_IT+0xfc>
 80080d2:	2310      	movs	r3, #16
 80080d4:	e000      	b.n	80080d8 <HAL_DMA_Abort_IT+0xfc>
 80080d6:	2301      	movs	r3, #1
 80080d8:	4a42      	ldr	r2, [pc, #264]	@ (80081e4 <HAL_DMA_Abort_IT+0x208>)
 80080da:	6053      	str	r3, [r2, #4]
 80080dc:	e057      	b.n	800818e <HAL_DMA_Abort_IT+0x1b2>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a36      	ldr	r2, [pc, #216]	@ (80081bc <HAL_DMA_Abort_IT+0x1e0>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d04f      	beq.n	8008188 <HAL_DMA_Abort_IT+0x1ac>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a34      	ldr	r2, [pc, #208]	@ (80081c0 <HAL_DMA_Abort_IT+0x1e4>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d048      	beq.n	8008184 <HAL_DMA_Abort_IT+0x1a8>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a33      	ldr	r2, [pc, #204]	@ (80081c4 <HAL_DMA_Abort_IT+0x1e8>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d040      	beq.n	800817e <HAL_DMA_Abort_IT+0x1a2>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a31      	ldr	r2, [pc, #196]	@ (80081c8 <HAL_DMA_Abort_IT+0x1ec>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d038      	beq.n	8008178 <HAL_DMA_Abort_IT+0x19c>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a30      	ldr	r2, [pc, #192]	@ (80081cc <HAL_DMA_Abort_IT+0x1f0>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d030      	beq.n	8008172 <HAL_DMA_Abort_IT+0x196>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a2e      	ldr	r2, [pc, #184]	@ (80081d0 <HAL_DMA_Abort_IT+0x1f4>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d028      	beq.n	800816c <HAL_DMA_Abort_IT+0x190>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a26      	ldr	r2, [pc, #152]	@ (80081b8 <HAL_DMA_Abort_IT+0x1dc>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d020      	beq.n	8008166 <HAL_DMA_Abort_IT+0x18a>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a2a      	ldr	r2, [pc, #168]	@ (80081d4 <HAL_DMA_Abort_IT+0x1f8>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d019      	beq.n	8008162 <HAL_DMA_Abort_IT+0x186>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a29      	ldr	r2, [pc, #164]	@ (80081d8 <HAL_DMA_Abort_IT+0x1fc>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d012      	beq.n	800815e <HAL_DMA_Abort_IT+0x182>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a27      	ldr	r2, [pc, #156]	@ (80081dc <HAL_DMA_Abort_IT+0x200>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d00a      	beq.n	8008158 <HAL_DMA_Abort_IT+0x17c>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a26      	ldr	r2, [pc, #152]	@ (80081e0 <HAL_DMA_Abort_IT+0x204>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d102      	bne.n	8008152 <HAL_DMA_Abort_IT+0x176>
 800814c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008150:	e01b      	b.n	800818a <HAL_DMA_Abort_IT+0x1ae>
 8008152:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008156:	e018      	b.n	800818a <HAL_DMA_Abort_IT+0x1ae>
 8008158:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800815c:	e015      	b.n	800818a <HAL_DMA_Abort_IT+0x1ae>
 800815e:	2310      	movs	r3, #16
 8008160:	e013      	b.n	800818a <HAL_DMA_Abort_IT+0x1ae>
 8008162:	2301      	movs	r3, #1
 8008164:	e011      	b.n	800818a <HAL_DMA_Abort_IT+0x1ae>
 8008166:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800816a:	e00e      	b.n	800818a <HAL_DMA_Abort_IT+0x1ae>
 800816c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008170:	e00b      	b.n	800818a <HAL_DMA_Abort_IT+0x1ae>
 8008172:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008176:	e008      	b.n	800818a <HAL_DMA_Abort_IT+0x1ae>
 8008178:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800817c:	e005      	b.n	800818a <HAL_DMA_Abort_IT+0x1ae>
 800817e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008182:	e002      	b.n	800818a <HAL_DMA_Abort_IT+0x1ae>
 8008184:	2310      	movs	r3, #16
 8008186:	e000      	b.n	800818a <HAL_DMA_Abort_IT+0x1ae>
 8008188:	2301      	movs	r3, #1
 800818a:	4a17      	ldr	r2, [pc, #92]	@ (80081e8 <HAL_DMA_Abort_IT+0x20c>)
 800818c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2201      	movs	r2, #1
 8008192:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d003      	beq.n	80081ae <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	4798      	blx	r3
    } 
  }
  return status;
 80081ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	40020080 	.word	0x40020080
 80081bc:	40020008 	.word	0x40020008
 80081c0:	4002001c 	.word	0x4002001c
 80081c4:	40020030 	.word	0x40020030
 80081c8:	40020044 	.word	0x40020044
 80081cc:	40020058 	.word	0x40020058
 80081d0:	4002006c 	.word	0x4002006c
 80081d4:	40020408 	.word	0x40020408
 80081d8:	4002041c 	.word	0x4002041c
 80081dc:	40020430 	.word	0x40020430
 80081e0:	40020444 	.word	0x40020444
 80081e4:	40020400 	.word	0x40020400
 80081e8:	40020000 	.word	0x40020000

080081ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008208:	2204      	movs	r2, #4
 800820a:	409a      	lsls	r2, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	4013      	ands	r3, r2
 8008210:	2b00      	cmp	r3, #0
 8008212:	f000 80f1 	beq.w	80083f8 <HAL_DMA_IRQHandler+0x20c>
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	f003 0304 	and.w	r3, r3, #4
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 80eb 	beq.w	80083f8 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 0320 	and.w	r3, r3, #32
 800822c:	2b00      	cmp	r3, #0
 800822e:	d107      	bne.n	8008240 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f022 0204 	bic.w	r2, r2, #4
 800823e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	461a      	mov	r2, r3
 8008246:	4b5f      	ldr	r3, [pc, #380]	@ (80083c4 <HAL_DMA_IRQHandler+0x1d8>)
 8008248:	429a      	cmp	r2, r3
 800824a:	d958      	bls.n	80082fe <HAL_DMA_IRQHandler+0x112>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a5d      	ldr	r2, [pc, #372]	@ (80083c8 <HAL_DMA_IRQHandler+0x1dc>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d04f      	beq.n	80082f6 <HAL_DMA_IRQHandler+0x10a>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a5c      	ldr	r2, [pc, #368]	@ (80083cc <HAL_DMA_IRQHandler+0x1e0>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d048      	beq.n	80082f2 <HAL_DMA_IRQHandler+0x106>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a5a      	ldr	r2, [pc, #360]	@ (80083d0 <HAL_DMA_IRQHandler+0x1e4>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d040      	beq.n	80082ec <HAL_DMA_IRQHandler+0x100>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a59      	ldr	r2, [pc, #356]	@ (80083d4 <HAL_DMA_IRQHandler+0x1e8>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d038      	beq.n	80082e6 <HAL_DMA_IRQHandler+0xfa>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a57      	ldr	r2, [pc, #348]	@ (80083d8 <HAL_DMA_IRQHandler+0x1ec>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d030      	beq.n	80082e0 <HAL_DMA_IRQHandler+0xf4>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a56      	ldr	r2, [pc, #344]	@ (80083dc <HAL_DMA_IRQHandler+0x1f0>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d028      	beq.n	80082da <HAL_DMA_IRQHandler+0xee>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a4d      	ldr	r2, [pc, #308]	@ (80083c4 <HAL_DMA_IRQHandler+0x1d8>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d020      	beq.n	80082d4 <HAL_DMA_IRQHandler+0xe8>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a52      	ldr	r2, [pc, #328]	@ (80083e0 <HAL_DMA_IRQHandler+0x1f4>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d019      	beq.n	80082d0 <HAL_DMA_IRQHandler+0xe4>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a50      	ldr	r2, [pc, #320]	@ (80083e4 <HAL_DMA_IRQHandler+0x1f8>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d012      	beq.n	80082cc <HAL_DMA_IRQHandler+0xe0>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a4f      	ldr	r2, [pc, #316]	@ (80083e8 <HAL_DMA_IRQHandler+0x1fc>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d00a      	beq.n	80082c6 <HAL_DMA_IRQHandler+0xda>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a4d      	ldr	r2, [pc, #308]	@ (80083ec <HAL_DMA_IRQHandler+0x200>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d102      	bne.n	80082c0 <HAL_DMA_IRQHandler+0xd4>
 80082ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80082be:	e01b      	b.n	80082f8 <HAL_DMA_IRQHandler+0x10c>
 80082c0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80082c4:	e018      	b.n	80082f8 <HAL_DMA_IRQHandler+0x10c>
 80082c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082ca:	e015      	b.n	80082f8 <HAL_DMA_IRQHandler+0x10c>
 80082cc:	2340      	movs	r3, #64	@ 0x40
 80082ce:	e013      	b.n	80082f8 <HAL_DMA_IRQHandler+0x10c>
 80082d0:	2304      	movs	r3, #4
 80082d2:	e011      	b.n	80082f8 <HAL_DMA_IRQHandler+0x10c>
 80082d4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80082d8:	e00e      	b.n	80082f8 <HAL_DMA_IRQHandler+0x10c>
 80082da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80082de:	e00b      	b.n	80082f8 <HAL_DMA_IRQHandler+0x10c>
 80082e0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80082e4:	e008      	b.n	80082f8 <HAL_DMA_IRQHandler+0x10c>
 80082e6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80082ea:	e005      	b.n	80082f8 <HAL_DMA_IRQHandler+0x10c>
 80082ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082f0:	e002      	b.n	80082f8 <HAL_DMA_IRQHandler+0x10c>
 80082f2:	2340      	movs	r3, #64	@ 0x40
 80082f4:	e000      	b.n	80082f8 <HAL_DMA_IRQHandler+0x10c>
 80082f6:	2304      	movs	r3, #4
 80082f8:	4a3d      	ldr	r2, [pc, #244]	@ (80083f0 <HAL_DMA_IRQHandler+0x204>)
 80082fa:	6053      	str	r3, [r2, #4]
 80082fc:	e057      	b.n	80083ae <HAL_DMA_IRQHandler+0x1c2>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a31      	ldr	r2, [pc, #196]	@ (80083c8 <HAL_DMA_IRQHandler+0x1dc>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d04f      	beq.n	80083a8 <HAL_DMA_IRQHandler+0x1bc>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a2f      	ldr	r2, [pc, #188]	@ (80083cc <HAL_DMA_IRQHandler+0x1e0>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d048      	beq.n	80083a4 <HAL_DMA_IRQHandler+0x1b8>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a2e      	ldr	r2, [pc, #184]	@ (80083d0 <HAL_DMA_IRQHandler+0x1e4>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d040      	beq.n	800839e <HAL_DMA_IRQHandler+0x1b2>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a2c      	ldr	r2, [pc, #176]	@ (80083d4 <HAL_DMA_IRQHandler+0x1e8>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d038      	beq.n	8008398 <HAL_DMA_IRQHandler+0x1ac>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a2b      	ldr	r2, [pc, #172]	@ (80083d8 <HAL_DMA_IRQHandler+0x1ec>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d030      	beq.n	8008392 <HAL_DMA_IRQHandler+0x1a6>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a29      	ldr	r2, [pc, #164]	@ (80083dc <HAL_DMA_IRQHandler+0x1f0>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d028      	beq.n	800838c <HAL_DMA_IRQHandler+0x1a0>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a21      	ldr	r2, [pc, #132]	@ (80083c4 <HAL_DMA_IRQHandler+0x1d8>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d020      	beq.n	8008386 <HAL_DMA_IRQHandler+0x19a>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a25      	ldr	r2, [pc, #148]	@ (80083e0 <HAL_DMA_IRQHandler+0x1f4>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d019      	beq.n	8008382 <HAL_DMA_IRQHandler+0x196>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a24      	ldr	r2, [pc, #144]	@ (80083e4 <HAL_DMA_IRQHandler+0x1f8>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d012      	beq.n	800837e <HAL_DMA_IRQHandler+0x192>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a22      	ldr	r2, [pc, #136]	@ (80083e8 <HAL_DMA_IRQHandler+0x1fc>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d00a      	beq.n	8008378 <HAL_DMA_IRQHandler+0x18c>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a21      	ldr	r2, [pc, #132]	@ (80083ec <HAL_DMA_IRQHandler+0x200>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d102      	bne.n	8008372 <HAL_DMA_IRQHandler+0x186>
 800836c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008370:	e01b      	b.n	80083aa <HAL_DMA_IRQHandler+0x1be>
 8008372:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8008376:	e018      	b.n	80083aa <HAL_DMA_IRQHandler+0x1be>
 8008378:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800837c:	e015      	b.n	80083aa <HAL_DMA_IRQHandler+0x1be>
 800837e:	2340      	movs	r3, #64	@ 0x40
 8008380:	e013      	b.n	80083aa <HAL_DMA_IRQHandler+0x1be>
 8008382:	2304      	movs	r3, #4
 8008384:	e011      	b.n	80083aa <HAL_DMA_IRQHandler+0x1be>
 8008386:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800838a:	e00e      	b.n	80083aa <HAL_DMA_IRQHandler+0x1be>
 800838c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008390:	e00b      	b.n	80083aa <HAL_DMA_IRQHandler+0x1be>
 8008392:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8008396:	e008      	b.n	80083aa <HAL_DMA_IRQHandler+0x1be>
 8008398:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800839c:	e005      	b.n	80083aa <HAL_DMA_IRQHandler+0x1be>
 800839e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80083a2:	e002      	b.n	80083aa <HAL_DMA_IRQHandler+0x1be>
 80083a4:	2340      	movs	r3, #64	@ 0x40
 80083a6:	e000      	b.n	80083aa <HAL_DMA_IRQHandler+0x1be>
 80083a8:	2304      	movs	r3, #4
 80083aa:	4a12      	ldr	r2, [pc, #72]	@ (80083f4 <HAL_DMA_IRQHandler+0x208>)
 80083ac:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 8136 	beq.w	8008624 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80083c0:	e130      	b.n	8008624 <HAL_DMA_IRQHandler+0x438>
 80083c2:	bf00      	nop
 80083c4:	40020080 	.word	0x40020080
 80083c8:	40020008 	.word	0x40020008
 80083cc:	4002001c 	.word	0x4002001c
 80083d0:	40020030 	.word	0x40020030
 80083d4:	40020044 	.word	0x40020044
 80083d8:	40020058 	.word	0x40020058
 80083dc:	4002006c 	.word	0x4002006c
 80083e0:	40020408 	.word	0x40020408
 80083e4:	4002041c 	.word	0x4002041c
 80083e8:	40020430 	.word	0x40020430
 80083ec:	40020444 	.word	0x40020444
 80083f0:	40020400 	.word	0x40020400
 80083f4:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083fc:	2202      	movs	r2, #2
 80083fe:	409a      	lsls	r2, r3
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	4013      	ands	r3, r2
 8008404:	2b00      	cmp	r3, #0
 8008406:	f000 80dd 	beq.w	80085c4 <HAL_DMA_IRQHandler+0x3d8>
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	f003 0302 	and.w	r3, r3, #2
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 80d7 	beq.w	80085c4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0320 	and.w	r3, r3, #32
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10b      	bne.n	800843c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f022 020a 	bic.w	r2, r2, #10
 8008432:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	461a      	mov	r2, r3
 8008442:	4b7b      	ldr	r3, [pc, #492]	@ (8008630 <HAL_DMA_IRQHandler+0x444>)
 8008444:	429a      	cmp	r2, r3
 8008446:	d958      	bls.n	80084fa <HAL_DMA_IRQHandler+0x30e>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a79      	ldr	r2, [pc, #484]	@ (8008634 <HAL_DMA_IRQHandler+0x448>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d04f      	beq.n	80084f2 <HAL_DMA_IRQHandler+0x306>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a78      	ldr	r2, [pc, #480]	@ (8008638 <HAL_DMA_IRQHandler+0x44c>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d048      	beq.n	80084ee <HAL_DMA_IRQHandler+0x302>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a76      	ldr	r2, [pc, #472]	@ (800863c <HAL_DMA_IRQHandler+0x450>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d040      	beq.n	80084e8 <HAL_DMA_IRQHandler+0x2fc>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a75      	ldr	r2, [pc, #468]	@ (8008640 <HAL_DMA_IRQHandler+0x454>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d038      	beq.n	80084e2 <HAL_DMA_IRQHandler+0x2f6>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a73      	ldr	r2, [pc, #460]	@ (8008644 <HAL_DMA_IRQHandler+0x458>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d030      	beq.n	80084dc <HAL_DMA_IRQHandler+0x2f0>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a72      	ldr	r2, [pc, #456]	@ (8008648 <HAL_DMA_IRQHandler+0x45c>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d028      	beq.n	80084d6 <HAL_DMA_IRQHandler+0x2ea>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a69      	ldr	r2, [pc, #420]	@ (8008630 <HAL_DMA_IRQHandler+0x444>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d020      	beq.n	80084d0 <HAL_DMA_IRQHandler+0x2e4>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a6e      	ldr	r2, [pc, #440]	@ (800864c <HAL_DMA_IRQHandler+0x460>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d019      	beq.n	80084cc <HAL_DMA_IRQHandler+0x2e0>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a6c      	ldr	r2, [pc, #432]	@ (8008650 <HAL_DMA_IRQHandler+0x464>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d012      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x2dc>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a6b      	ldr	r2, [pc, #428]	@ (8008654 <HAL_DMA_IRQHandler+0x468>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d00a      	beq.n	80084c2 <HAL_DMA_IRQHandler+0x2d6>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a69      	ldr	r2, [pc, #420]	@ (8008658 <HAL_DMA_IRQHandler+0x46c>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d102      	bne.n	80084bc <HAL_DMA_IRQHandler+0x2d0>
 80084b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80084ba:	e01b      	b.n	80084f4 <HAL_DMA_IRQHandler+0x308>
 80084bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80084c0:	e018      	b.n	80084f4 <HAL_DMA_IRQHandler+0x308>
 80084c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80084c6:	e015      	b.n	80084f4 <HAL_DMA_IRQHandler+0x308>
 80084c8:	2320      	movs	r3, #32
 80084ca:	e013      	b.n	80084f4 <HAL_DMA_IRQHandler+0x308>
 80084cc:	2302      	movs	r3, #2
 80084ce:	e011      	b.n	80084f4 <HAL_DMA_IRQHandler+0x308>
 80084d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80084d4:	e00e      	b.n	80084f4 <HAL_DMA_IRQHandler+0x308>
 80084d6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80084da:	e00b      	b.n	80084f4 <HAL_DMA_IRQHandler+0x308>
 80084dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80084e0:	e008      	b.n	80084f4 <HAL_DMA_IRQHandler+0x308>
 80084e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80084e6:	e005      	b.n	80084f4 <HAL_DMA_IRQHandler+0x308>
 80084e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80084ec:	e002      	b.n	80084f4 <HAL_DMA_IRQHandler+0x308>
 80084ee:	2320      	movs	r3, #32
 80084f0:	e000      	b.n	80084f4 <HAL_DMA_IRQHandler+0x308>
 80084f2:	2302      	movs	r3, #2
 80084f4:	4a59      	ldr	r2, [pc, #356]	@ (800865c <HAL_DMA_IRQHandler+0x470>)
 80084f6:	6053      	str	r3, [r2, #4]
 80084f8:	e057      	b.n	80085aa <HAL_DMA_IRQHandler+0x3be>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a4d      	ldr	r2, [pc, #308]	@ (8008634 <HAL_DMA_IRQHandler+0x448>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d04f      	beq.n	80085a4 <HAL_DMA_IRQHandler+0x3b8>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a4b      	ldr	r2, [pc, #300]	@ (8008638 <HAL_DMA_IRQHandler+0x44c>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d048      	beq.n	80085a0 <HAL_DMA_IRQHandler+0x3b4>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a4a      	ldr	r2, [pc, #296]	@ (800863c <HAL_DMA_IRQHandler+0x450>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d040      	beq.n	800859a <HAL_DMA_IRQHandler+0x3ae>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a48      	ldr	r2, [pc, #288]	@ (8008640 <HAL_DMA_IRQHandler+0x454>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d038      	beq.n	8008594 <HAL_DMA_IRQHandler+0x3a8>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a47      	ldr	r2, [pc, #284]	@ (8008644 <HAL_DMA_IRQHandler+0x458>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d030      	beq.n	800858e <HAL_DMA_IRQHandler+0x3a2>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a45      	ldr	r2, [pc, #276]	@ (8008648 <HAL_DMA_IRQHandler+0x45c>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d028      	beq.n	8008588 <HAL_DMA_IRQHandler+0x39c>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a3d      	ldr	r2, [pc, #244]	@ (8008630 <HAL_DMA_IRQHandler+0x444>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d020      	beq.n	8008582 <HAL_DMA_IRQHandler+0x396>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a41      	ldr	r2, [pc, #260]	@ (800864c <HAL_DMA_IRQHandler+0x460>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d019      	beq.n	800857e <HAL_DMA_IRQHandler+0x392>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a40      	ldr	r2, [pc, #256]	@ (8008650 <HAL_DMA_IRQHandler+0x464>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d012      	beq.n	800857a <HAL_DMA_IRQHandler+0x38e>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a3e      	ldr	r2, [pc, #248]	@ (8008654 <HAL_DMA_IRQHandler+0x468>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d00a      	beq.n	8008574 <HAL_DMA_IRQHandler+0x388>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a3d      	ldr	r2, [pc, #244]	@ (8008658 <HAL_DMA_IRQHandler+0x46c>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d102      	bne.n	800856e <HAL_DMA_IRQHandler+0x382>
 8008568:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800856c:	e01b      	b.n	80085a6 <HAL_DMA_IRQHandler+0x3ba>
 800856e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008572:	e018      	b.n	80085a6 <HAL_DMA_IRQHandler+0x3ba>
 8008574:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008578:	e015      	b.n	80085a6 <HAL_DMA_IRQHandler+0x3ba>
 800857a:	2320      	movs	r3, #32
 800857c:	e013      	b.n	80085a6 <HAL_DMA_IRQHandler+0x3ba>
 800857e:	2302      	movs	r3, #2
 8008580:	e011      	b.n	80085a6 <HAL_DMA_IRQHandler+0x3ba>
 8008582:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008586:	e00e      	b.n	80085a6 <HAL_DMA_IRQHandler+0x3ba>
 8008588:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800858c:	e00b      	b.n	80085a6 <HAL_DMA_IRQHandler+0x3ba>
 800858e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008592:	e008      	b.n	80085a6 <HAL_DMA_IRQHandler+0x3ba>
 8008594:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008598:	e005      	b.n	80085a6 <HAL_DMA_IRQHandler+0x3ba>
 800859a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800859e:	e002      	b.n	80085a6 <HAL_DMA_IRQHandler+0x3ba>
 80085a0:	2320      	movs	r3, #32
 80085a2:	e000      	b.n	80085a6 <HAL_DMA_IRQHandler+0x3ba>
 80085a4:	2302      	movs	r3, #2
 80085a6:	4a2e      	ldr	r2, [pc, #184]	@ (8008660 <HAL_DMA_IRQHandler+0x474>)
 80085a8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d034      	beq.n	8008624 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80085c2:	e02f      	b.n	8008624 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085c8:	2208      	movs	r2, #8
 80085ca:	409a      	lsls	r2, r3
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	4013      	ands	r3, r2
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d028      	beq.n	8008626 <HAL_DMA_IRQHandler+0x43a>
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	f003 0308 	and.w	r3, r3, #8
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d023      	beq.n	8008626 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f022 020e 	bic.w	r2, r2, #14
 80085ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085f6:	2101      	movs	r1, #1
 80085f8:	fa01 f202 	lsl.w	r2, r1, r2
 80085fc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2201      	movs	r2, #1
 8008602:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008618:	2b00      	cmp	r3, #0
 800861a:	d004      	beq.n	8008626 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	4798      	blx	r3
    }
  }
  return;
 8008624:	bf00      	nop
 8008626:	bf00      	nop
}
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	40020080 	.word	0x40020080
 8008634:	40020008 	.word	0x40020008
 8008638:	4002001c 	.word	0x4002001c
 800863c:	40020030 	.word	0x40020030
 8008640:	40020044 	.word	0x40020044
 8008644:	40020058 	.word	0x40020058
 8008648:	4002006c 	.word	0x4002006c
 800864c:	40020408 	.word	0x40020408
 8008650:	4002041c 	.word	0x4002041c
 8008654:	40020430 	.word	0x40020430
 8008658:	40020444 	.word	0x40020444
 800865c:	40020400 	.word	0x40020400
 8008660:	40020000 	.word	0x40020000

08008664 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]
 8008670:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800867a:	2101      	movs	r1, #1
 800867c:	fa01 f202 	lsl.w	r2, r1, r2
 8008680:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	683a      	ldr	r2, [r7, #0]
 8008688:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	2b10      	cmp	r3, #16
 8008690:	d108      	bne.n	80086a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80086a2:	e007      	b.n	80086b4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	60da      	str	r2, [r3, #12]
}
 80086b4:	bf00      	nop
 80086b6:	3714      	adds	r7, #20
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bc80      	pop	{r7}
 80086bc:	4770      	bx	lr
	...

080086c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b08b      	sub	sp, #44	@ 0x2c
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80086ca:	2300      	movs	r3, #0
 80086cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80086ce:	2300      	movs	r3, #0
 80086d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80086d2:	e179      	b.n	80089c8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80086d4:	2201      	movs	r2, #1
 80086d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d8:	fa02 f303 	lsl.w	r3, r2, r3
 80086dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	69fa      	ldr	r2, [r7, #28]
 80086e4:	4013      	ands	r3, r2
 80086e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80086e8:	69ba      	ldr	r2, [r7, #24]
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	f040 8168 	bne.w	80089c2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	4a96      	ldr	r2, [pc, #600]	@ (8008950 <HAL_GPIO_Init+0x290>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d05e      	beq.n	80087ba <HAL_GPIO_Init+0xfa>
 80086fc:	4a94      	ldr	r2, [pc, #592]	@ (8008950 <HAL_GPIO_Init+0x290>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d875      	bhi.n	80087ee <HAL_GPIO_Init+0x12e>
 8008702:	4a94      	ldr	r2, [pc, #592]	@ (8008954 <HAL_GPIO_Init+0x294>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d058      	beq.n	80087ba <HAL_GPIO_Init+0xfa>
 8008708:	4a92      	ldr	r2, [pc, #584]	@ (8008954 <HAL_GPIO_Init+0x294>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d86f      	bhi.n	80087ee <HAL_GPIO_Init+0x12e>
 800870e:	4a92      	ldr	r2, [pc, #584]	@ (8008958 <HAL_GPIO_Init+0x298>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d052      	beq.n	80087ba <HAL_GPIO_Init+0xfa>
 8008714:	4a90      	ldr	r2, [pc, #576]	@ (8008958 <HAL_GPIO_Init+0x298>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d869      	bhi.n	80087ee <HAL_GPIO_Init+0x12e>
 800871a:	4a90      	ldr	r2, [pc, #576]	@ (800895c <HAL_GPIO_Init+0x29c>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d04c      	beq.n	80087ba <HAL_GPIO_Init+0xfa>
 8008720:	4a8e      	ldr	r2, [pc, #568]	@ (800895c <HAL_GPIO_Init+0x29c>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d863      	bhi.n	80087ee <HAL_GPIO_Init+0x12e>
 8008726:	4a8e      	ldr	r2, [pc, #568]	@ (8008960 <HAL_GPIO_Init+0x2a0>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d046      	beq.n	80087ba <HAL_GPIO_Init+0xfa>
 800872c:	4a8c      	ldr	r2, [pc, #560]	@ (8008960 <HAL_GPIO_Init+0x2a0>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d85d      	bhi.n	80087ee <HAL_GPIO_Init+0x12e>
 8008732:	2b12      	cmp	r3, #18
 8008734:	d82a      	bhi.n	800878c <HAL_GPIO_Init+0xcc>
 8008736:	2b12      	cmp	r3, #18
 8008738:	d859      	bhi.n	80087ee <HAL_GPIO_Init+0x12e>
 800873a:	a201      	add	r2, pc, #4	@ (adr r2, 8008740 <HAL_GPIO_Init+0x80>)
 800873c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008740:	080087bb 	.word	0x080087bb
 8008744:	08008795 	.word	0x08008795
 8008748:	080087a7 	.word	0x080087a7
 800874c:	080087e9 	.word	0x080087e9
 8008750:	080087ef 	.word	0x080087ef
 8008754:	080087ef 	.word	0x080087ef
 8008758:	080087ef 	.word	0x080087ef
 800875c:	080087ef 	.word	0x080087ef
 8008760:	080087ef 	.word	0x080087ef
 8008764:	080087ef 	.word	0x080087ef
 8008768:	080087ef 	.word	0x080087ef
 800876c:	080087ef 	.word	0x080087ef
 8008770:	080087ef 	.word	0x080087ef
 8008774:	080087ef 	.word	0x080087ef
 8008778:	080087ef 	.word	0x080087ef
 800877c:	080087ef 	.word	0x080087ef
 8008780:	080087ef 	.word	0x080087ef
 8008784:	0800879d 	.word	0x0800879d
 8008788:	080087b1 	.word	0x080087b1
 800878c:	4a75      	ldr	r2, [pc, #468]	@ (8008964 <HAL_GPIO_Init+0x2a4>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d013      	beq.n	80087ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008792:	e02c      	b.n	80087ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	623b      	str	r3, [r7, #32]
          break;
 800879a:	e029      	b.n	80087f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	3304      	adds	r3, #4
 80087a2:	623b      	str	r3, [r7, #32]
          break;
 80087a4:	e024      	b.n	80087f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	3308      	adds	r3, #8
 80087ac:	623b      	str	r3, [r7, #32]
          break;
 80087ae:	e01f      	b.n	80087f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	330c      	adds	r3, #12
 80087b6:	623b      	str	r3, [r7, #32]
          break;
 80087b8:	e01a      	b.n	80087f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d102      	bne.n	80087c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80087c2:	2304      	movs	r3, #4
 80087c4:	623b      	str	r3, [r7, #32]
          break;
 80087c6:	e013      	b.n	80087f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d105      	bne.n	80087dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80087d0:	2308      	movs	r3, #8
 80087d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	69fa      	ldr	r2, [r7, #28]
 80087d8:	611a      	str	r2, [r3, #16]
          break;
 80087da:	e009      	b.n	80087f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80087dc:	2308      	movs	r3, #8
 80087de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	69fa      	ldr	r2, [r7, #28]
 80087e4:	615a      	str	r2, [r3, #20]
          break;
 80087e6:	e003      	b.n	80087f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80087e8:	2300      	movs	r3, #0
 80087ea:	623b      	str	r3, [r7, #32]
          break;
 80087ec:	e000      	b.n	80087f0 <HAL_GPIO_Init+0x130>
          break;
 80087ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	2bff      	cmp	r3, #255	@ 0xff
 80087f4:	d801      	bhi.n	80087fa <HAL_GPIO_Init+0x13a>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	e001      	b.n	80087fe <HAL_GPIO_Init+0x13e>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	3304      	adds	r3, #4
 80087fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	2bff      	cmp	r3, #255	@ 0xff
 8008804:	d802      	bhi.n	800880c <HAL_GPIO_Init+0x14c>
 8008806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	e002      	b.n	8008812 <HAL_GPIO_Init+0x152>
 800880c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880e:	3b08      	subs	r3, #8
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	210f      	movs	r1, #15
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	fa01 f303 	lsl.w	r3, r1, r3
 8008820:	43db      	mvns	r3, r3
 8008822:	401a      	ands	r2, r3
 8008824:	6a39      	ldr	r1, [r7, #32]
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	fa01 f303 	lsl.w	r3, r1, r3
 800882c:	431a      	orrs	r2, r3
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800883a:	2b00      	cmp	r3, #0
 800883c:	f000 80c1 	beq.w	80089c2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008840:	4b49      	ldr	r3, [pc, #292]	@ (8008968 <HAL_GPIO_Init+0x2a8>)
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	4a48      	ldr	r2, [pc, #288]	@ (8008968 <HAL_GPIO_Init+0x2a8>)
 8008846:	f043 0301 	orr.w	r3, r3, #1
 800884a:	6193      	str	r3, [r2, #24]
 800884c:	4b46      	ldr	r3, [pc, #280]	@ (8008968 <HAL_GPIO_Init+0x2a8>)
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	f003 0301 	and.w	r3, r3, #1
 8008854:	60bb      	str	r3, [r7, #8]
 8008856:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008858:	4a44      	ldr	r2, [pc, #272]	@ (800896c <HAL_GPIO_Init+0x2ac>)
 800885a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885c:	089b      	lsrs	r3, r3, #2
 800885e:	3302      	adds	r3, #2
 8008860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008864:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008868:	f003 0303 	and.w	r3, r3, #3
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	220f      	movs	r2, #15
 8008870:	fa02 f303 	lsl.w	r3, r2, r3
 8008874:	43db      	mvns	r3, r3
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	4013      	ands	r3, r2
 800887a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a3c      	ldr	r2, [pc, #240]	@ (8008970 <HAL_GPIO_Init+0x2b0>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d01f      	beq.n	80088c4 <HAL_GPIO_Init+0x204>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a3b      	ldr	r2, [pc, #236]	@ (8008974 <HAL_GPIO_Init+0x2b4>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d019      	beq.n	80088c0 <HAL_GPIO_Init+0x200>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a3a      	ldr	r2, [pc, #232]	@ (8008978 <HAL_GPIO_Init+0x2b8>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d013      	beq.n	80088bc <HAL_GPIO_Init+0x1fc>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a39      	ldr	r2, [pc, #228]	@ (800897c <HAL_GPIO_Init+0x2bc>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d00d      	beq.n	80088b8 <HAL_GPIO_Init+0x1f8>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a38      	ldr	r2, [pc, #224]	@ (8008980 <HAL_GPIO_Init+0x2c0>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d007      	beq.n	80088b4 <HAL_GPIO_Init+0x1f4>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a37      	ldr	r2, [pc, #220]	@ (8008984 <HAL_GPIO_Init+0x2c4>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d101      	bne.n	80088b0 <HAL_GPIO_Init+0x1f0>
 80088ac:	2305      	movs	r3, #5
 80088ae:	e00a      	b.n	80088c6 <HAL_GPIO_Init+0x206>
 80088b0:	2306      	movs	r3, #6
 80088b2:	e008      	b.n	80088c6 <HAL_GPIO_Init+0x206>
 80088b4:	2304      	movs	r3, #4
 80088b6:	e006      	b.n	80088c6 <HAL_GPIO_Init+0x206>
 80088b8:	2303      	movs	r3, #3
 80088ba:	e004      	b.n	80088c6 <HAL_GPIO_Init+0x206>
 80088bc:	2302      	movs	r3, #2
 80088be:	e002      	b.n	80088c6 <HAL_GPIO_Init+0x206>
 80088c0:	2301      	movs	r3, #1
 80088c2:	e000      	b.n	80088c6 <HAL_GPIO_Init+0x206>
 80088c4:	2300      	movs	r3, #0
 80088c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088c8:	f002 0203 	and.w	r2, r2, #3
 80088cc:	0092      	lsls	r2, r2, #2
 80088ce:	4093      	lsls	r3, r2
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80088d6:	4925      	ldr	r1, [pc, #148]	@ (800896c <HAL_GPIO_Init+0x2ac>)
 80088d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088da:	089b      	lsrs	r3, r3, #2
 80088dc:	3302      	adds	r3, #2
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d006      	beq.n	80088fe <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80088f0:	4b25      	ldr	r3, [pc, #148]	@ (8008988 <HAL_GPIO_Init+0x2c8>)
 80088f2:	689a      	ldr	r2, [r3, #8]
 80088f4:	4924      	ldr	r1, [pc, #144]	@ (8008988 <HAL_GPIO_Init+0x2c8>)
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	4313      	orrs	r3, r2
 80088fa:	608b      	str	r3, [r1, #8]
 80088fc:	e006      	b.n	800890c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80088fe:	4b22      	ldr	r3, [pc, #136]	@ (8008988 <HAL_GPIO_Init+0x2c8>)
 8008900:	689a      	ldr	r2, [r3, #8]
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	43db      	mvns	r3, r3
 8008906:	4920      	ldr	r1, [pc, #128]	@ (8008988 <HAL_GPIO_Init+0x2c8>)
 8008908:	4013      	ands	r3, r2
 800890a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008914:	2b00      	cmp	r3, #0
 8008916:	d006      	beq.n	8008926 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008918:	4b1b      	ldr	r3, [pc, #108]	@ (8008988 <HAL_GPIO_Init+0x2c8>)
 800891a:	68da      	ldr	r2, [r3, #12]
 800891c:	491a      	ldr	r1, [pc, #104]	@ (8008988 <HAL_GPIO_Init+0x2c8>)
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	4313      	orrs	r3, r2
 8008922:	60cb      	str	r3, [r1, #12]
 8008924:	e006      	b.n	8008934 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008926:	4b18      	ldr	r3, [pc, #96]	@ (8008988 <HAL_GPIO_Init+0x2c8>)
 8008928:	68da      	ldr	r2, [r3, #12]
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	43db      	mvns	r3, r3
 800892e:	4916      	ldr	r1, [pc, #88]	@ (8008988 <HAL_GPIO_Init+0x2c8>)
 8008930:	4013      	ands	r3, r2
 8008932:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800893c:	2b00      	cmp	r3, #0
 800893e:	d025      	beq.n	800898c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008940:	4b11      	ldr	r3, [pc, #68]	@ (8008988 <HAL_GPIO_Init+0x2c8>)
 8008942:	685a      	ldr	r2, [r3, #4]
 8008944:	4910      	ldr	r1, [pc, #64]	@ (8008988 <HAL_GPIO_Init+0x2c8>)
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	4313      	orrs	r3, r2
 800894a:	604b      	str	r3, [r1, #4]
 800894c:	e025      	b.n	800899a <HAL_GPIO_Init+0x2da>
 800894e:	bf00      	nop
 8008950:	10320000 	.word	0x10320000
 8008954:	10310000 	.word	0x10310000
 8008958:	10220000 	.word	0x10220000
 800895c:	10210000 	.word	0x10210000
 8008960:	10120000 	.word	0x10120000
 8008964:	10110000 	.word	0x10110000
 8008968:	40021000 	.word	0x40021000
 800896c:	40010000 	.word	0x40010000
 8008970:	40010800 	.word	0x40010800
 8008974:	40010c00 	.word	0x40010c00
 8008978:	40011000 	.word	0x40011000
 800897c:	40011400 	.word	0x40011400
 8008980:	40011800 	.word	0x40011800
 8008984:	40011c00 	.word	0x40011c00
 8008988:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800898c:	4b15      	ldr	r3, [pc, #84]	@ (80089e4 <HAL_GPIO_Init+0x324>)
 800898e:	685a      	ldr	r2, [r3, #4]
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	43db      	mvns	r3, r3
 8008994:	4913      	ldr	r1, [pc, #76]	@ (80089e4 <HAL_GPIO_Init+0x324>)
 8008996:	4013      	ands	r3, r2
 8008998:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d006      	beq.n	80089b4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80089a6:	4b0f      	ldr	r3, [pc, #60]	@ (80089e4 <HAL_GPIO_Init+0x324>)
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	490e      	ldr	r1, [pc, #56]	@ (80089e4 <HAL_GPIO_Init+0x324>)
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	600b      	str	r3, [r1, #0]
 80089b2:	e006      	b.n	80089c2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80089b4:	4b0b      	ldr	r3, [pc, #44]	@ (80089e4 <HAL_GPIO_Init+0x324>)
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	43db      	mvns	r3, r3
 80089bc:	4909      	ldr	r1, [pc, #36]	@ (80089e4 <HAL_GPIO_Init+0x324>)
 80089be:	4013      	ands	r3, r2
 80089c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80089c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c4:	3301      	adds	r3, #1
 80089c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ce:	fa22 f303 	lsr.w	r3, r2, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f47f ae7e 	bne.w	80086d4 <HAL_GPIO_Init+0x14>
  }
}
 80089d8:	bf00      	nop
 80089da:	bf00      	nop
 80089dc:	372c      	adds	r7, #44	@ 0x2c
 80089de:	46bd      	mov	sp, r7
 80089e0:	bc80      	pop	{r7}
 80089e2:	4770      	bx	lr
 80089e4:	40010400 	.word	0x40010400

080089e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	460b      	mov	r3, r1
 80089f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	689a      	ldr	r2, [r3, #8]
 80089f8:	887b      	ldrh	r3, [r7, #2]
 80089fa:	4013      	ands	r3, r2
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d002      	beq.n	8008a06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008a00:	2301      	movs	r3, #1
 8008a02:	73fb      	strb	r3, [r7, #15]
 8008a04:	e001      	b.n	8008a0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008a06:	2300      	movs	r3, #0
 8008a08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3714      	adds	r7, #20
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bc80      	pop	{r7}
 8008a14:	4770      	bx	lr

08008a16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b083      	sub	sp, #12
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	460b      	mov	r3, r1
 8008a20:	807b      	strh	r3, [r7, #2]
 8008a22:	4613      	mov	r3, r2
 8008a24:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008a26:	787b      	ldrb	r3, [r7, #1]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d003      	beq.n	8008a34 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008a2c:	887a      	ldrh	r2, [r7, #2]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008a32:	e003      	b.n	8008a3c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008a34:	887b      	ldrh	r3, [r7, #2]
 8008a36:	041a      	lsls	r2, r3, #16
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	611a      	str	r2, [r3, #16]
}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bc80      	pop	{r7}
 8008a44:	4770      	bx	lr

08008a46 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008a46:	b480      	push	{r7}
 8008a48:	b085      	sub	sp, #20
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	460b      	mov	r3, r1
 8008a50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008a58:	887a      	ldrh	r2, [r7, #2]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	041a      	lsls	r2, r3, #16
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	43d9      	mvns	r1, r3
 8008a64:	887b      	ldrh	r3, [r7, #2]
 8008a66:	400b      	ands	r3, r1
 8008a68:	431a      	orrs	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	611a      	str	r2, [r3, #16]
}
 8008a6e:	bf00      	nop
 8008a70:	3714      	adds	r7, #20
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bc80      	pop	{r7}
 8008a76:	4770      	bx	lr

08008a78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d101      	bne.n	8008a8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e12b      	b.n	8008ce2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d106      	bne.n	8008aa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f7fc feaa 	bl	80057f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2224      	movs	r2, #36	@ 0x24
 8008aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f022 0201 	bic.w	r2, r2, #1
 8008aba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008aca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008ada:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008adc:	f002 f9d8 	bl	800ae90 <HAL_RCC_GetPCLK1Freq>
 8008ae0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	4a81      	ldr	r2, [pc, #516]	@ (8008cec <HAL_I2C_Init+0x274>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d807      	bhi.n	8008afc <HAL_I2C_Init+0x84>
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	4a80      	ldr	r2, [pc, #512]	@ (8008cf0 <HAL_I2C_Init+0x278>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	bf94      	ite	ls
 8008af4:	2301      	movls	r3, #1
 8008af6:	2300      	movhi	r3, #0
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	e006      	b.n	8008b0a <HAL_I2C_Init+0x92>
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	4a7d      	ldr	r2, [pc, #500]	@ (8008cf4 <HAL_I2C_Init+0x27c>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	bf94      	ite	ls
 8008b04:	2301      	movls	r3, #1
 8008b06:	2300      	movhi	r3, #0
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e0e7      	b.n	8008ce2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	4a78      	ldr	r2, [pc, #480]	@ (8008cf8 <HAL_I2C_Init+0x280>)
 8008b16:	fba2 2303 	umull	r2, r3, r2, r3
 8008b1a:	0c9b      	lsrs	r3, r3, #18
 8008b1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68ba      	ldr	r2, [r7, #8]
 8008b2e:	430a      	orrs	r2, r1
 8008b30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	6a1b      	ldr	r3, [r3, #32]
 8008b38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	4a6a      	ldr	r2, [pc, #424]	@ (8008cec <HAL_I2C_Init+0x274>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d802      	bhi.n	8008b4c <HAL_I2C_Init+0xd4>
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	e009      	b.n	8008b60 <HAL_I2C_Init+0xe8>
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008b52:	fb02 f303 	mul.w	r3, r2, r3
 8008b56:	4a69      	ldr	r2, [pc, #420]	@ (8008cfc <HAL_I2C_Init+0x284>)
 8008b58:	fba2 2303 	umull	r2, r3, r2, r3
 8008b5c:	099b      	lsrs	r3, r3, #6
 8008b5e:	3301      	adds	r3, #1
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	6812      	ldr	r2, [r2, #0]
 8008b64:	430b      	orrs	r3, r1
 8008b66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008b72:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	495c      	ldr	r1, [pc, #368]	@ (8008cec <HAL_I2C_Init+0x274>)
 8008b7c:	428b      	cmp	r3, r1
 8008b7e:	d819      	bhi.n	8008bb4 <HAL_I2C_Init+0x13c>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	1e59      	subs	r1, r3, #1
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	005b      	lsls	r3, r3, #1
 8008b8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b8e:	1c59      	adds	r1, r3, #1
 8008b90:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008b94:	400b      	ands	r3, r1
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00a      	beq.n	8008bb0 <HAL_I2C_Init+0x138>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	1e59      	subs	r1, r3, #1
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	005b      	lsls	r3, r3, #1
 8008ba4:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ba8:	3301      	adds	r3, #1
 8008baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bae:	e051      	b.n	8008c54 <HAL_I2C_Init+0x1dc>
 8008bb0:	2304      	movs	r3, #4
 8008bb2:	e04f      	b.n	8008c54 <HAL_I2C_Init+0x1dc>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d111      	bne.n	8008be0 <HAL_I2C_Init+0x168>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	1e58      	subs	r0, r3, #1
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6859      	ldr	r1, [r3, #4]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	005b      	lsls	r3, r3, #1
 8008bc8:	440b      	add	r3, r1
 8008bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8008bce:	3301      	adds	r3, #1
 8008bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	bf0c      	ite	eq
 8008bd8:	2301      	moveq	r3, #1
 8008bda:	2300      	movne	r3, #0
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	e012      	b.n	8008c06 <HAL_I2C_Init+0x18e>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	1e58      	subs	r0, r3, #1
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6859      	ldr	r1, [r3, #4]
 8008be8:	460b      	mov	r3, r1
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	440b      	add	r3, r1
 8008bee:	0099      	lsls	r1, r3, #2
 8008bf0:	440b      	add	r3, r1
 8008bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	bf0c      	ite	eq
 8008c00:	2301      	moveq	r3, #1
 8008c02:	2300      	movne	r3, #0
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d001      	beq.n	8008c0e <HAL_I2C_Init+0x196>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e022      	b.n	8008c54 <HAL_I2C_Init+0x1dc>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10e      	bne.n	8008c34 <HAL_I2C_Init+0x1bc>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	1e58      	subs	r0, r3, #1
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6859      	ldr	r1, [r3, #4]
 8008c1e:	460b      	mov	r3, r1
 8008c20:	005b      	lsls	r3, r3, #1
 8008c22:	440b      	add	r3, r1
 8008c24:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c28:	3301      	adds	r3, #1
 8008c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c32:	e00f      	b.n	8008c54 <HAL_I2C_Init+0x1dc>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	1e58      	subs	r0, r3, #1
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6859      	ldr	r1, [r3, #4]
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	440b      	add	r3, r1
 8008c42:	0099      	lsls	r1, r3, #2
 8008c44:	440b      	add	r3, r1
 8008c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008c54:	6879      	ldr	r1, [r7, #4]
 8008c56:	6809      	ldr	r1, [r1, #0]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	69da      	ldr	r2, [r3, #28]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	431a      	orrs	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	430a      	orrs	r2, r1
 8008c76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008c82:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	6911      	ldr	r1, [r2, #16]
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	68d2      	ldr	r2, [r2, #12]
 8008c8e:	4311      	orrs	r1, r2
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	6812      	ldr	r2, [r2, #0]
 8008c94:	430b      	orrs	r3, r1
 8008c96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	695a      	ldr	r2, [r3, #20]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	699b      	ldr	r3, [r3, #24]
 8008caa:	431a      	orrs	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	430a      	orrs	r2, r1
 8008cb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f042 0201 	orr.w	r2, r2, #1
 8008cc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2220      	movs	r2, #32
 8008cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	000186a0 	.word	0x000186a0
 8008cf0:	001e847f 	.word	0x001e847f
 8008cf4:	003d08ff 	.word	0x003d08ff
 8008cf8:	431bde83 	.word	0x431bde83
 8008cfc:	10624dd3 	.word	0x10624dd3

08008d00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b088      	sub	sp, #32
 8008d04:	af02      	add	r7, sp, #8
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	607a      	str	r2, [r7, #4]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	817b      	strh	r3, [r7, #10]
 8008d10:	4613      	mov	r3, r2
 8008d12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008d14:	f7fe ff42 	bl	8007b9c <HAL_GetTick>
 8008d18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	2b20      	cmp	r3, #32
 8008d24:	f040 80e0 	bne.w	8008ee8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	2319      	movs	r3, #25
 8008d2e:	2201      	movs	r2, #1
 8008d30:	4970      	ldr	r1, [pc, #448]	@ (8008ef4 <HAL_I2C_Master_Transmit+0x1f4>)
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f001 faac 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d001      	beq.n	8008d42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008d3e:	2302      	movs	r3, #2
 8008d40:	e0d3      	b.n	8008eea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d101      	bne.n	8008d50 <HAL_I2C_Master_Transmit+0x50>
 8008d4c:	2302      	movs	r3, #2
 8008d4e:	e0cc      	b.n	8008eea <HAL_I2C_Master_Transmit+0x1ea>
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 0301 	and.w	r3, r3, #1
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d007      	beq.n	8008d76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f042 0201 	orr.w	r2, r2, #1
 8008d74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008d84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2221      	movs	r2, #33	@ 0x21
 8008d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2210      	movs	r2, #16
 8008d92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	893a      	ldrh	r2, [r7, #8]
 8008da6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	4a50      	ldr	r2, [pc, #320]	@ (8008ef8 <HAL_I2C_Master_Transmit+0x1f8>)
 8008db6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008db8:	8979      	ldrh	r1, [r7, #10]
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	6a3a      	ldr	r2, [r7, #32]
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f000 ff98 	bl	8009cf4 <I2C_MasterRequestWrite>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e08d      	b.n	8008eea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dce:	2300      	movs	r3, #0
 8008dd0:	613b      	str	r3, [r7, #16]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	613b      	str	r3, [r7, #16]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	699b      	ldr	r3, [r3, #24]
 8008de0:	613b      	str	r3, [r7, #16]
 8008de2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008de4:	e066      	b.n	8008eb4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008de6:	697a      	ldr	r2, [r7, #20]
 8008de8:	6a39      	ldr	r1, [r7, #32]
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f001 fb6a 	bl	800a4c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00d      	beq.n	8008e12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dfa:	2b04      	cmp	r3, #4
 8008dfc:	d107      	bne.n	8008e0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e06b      	b.n	8008eea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e16:	781a      	ldrb	r2, [r3, #0]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e22:	1c5a      	adds	r2, r3, #1
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	695b      	ldr	r3, [r3, #20]
 8008e48:	f003 0304 	and.w	r3, r3, #4
 8008e4c:	2b04      	cmp	r3, #4
 8008e4e:	d11b      	bne.n	8008e88 <HAL_I2C_Master_Transmit+0x188>
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d017      	beq.n	8008e88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e5c:	781a      	ldrb	r2, [r3, #0]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e68:	1c5a      	adds	r2, r3, #1
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	3b01      	subs	r3, #1
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e80:	3b01      	subs	r3, #1
 8008e82:	b29a      	uxth	r2, r3
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e88:	697a      	ldr	r2, [r7, #20]
 8008e8a:	6a39      	ldr	r1, [r7, #32]
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f001 fb61 	bl	800a554 <I2C_WaitOnBTFFlagUntilTimeout>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00d      	beq.n	8008eb4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e9c:	2b04      	cmp	r3, #4
 8008e9e:	d107      	bne.n	8008eb0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008eae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e01a      	b.n	8008eea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d194      	bne.n	8008de6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008eca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2220      	movs	r2, #32
 8008ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	e000      	b.n	8008eea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008ee8:	2302      	movs	r3, #2
  }
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3718      	adds	r7, #24
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	00100002 	.word	0x00100002
 8008ef8:	ffff0000 	.word	0xffff0000

08008efc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b08c      	sub	sp, #48	@ 0x30
 8008f00:	af02      	add	r7, sp, #8
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	607a      	str	r2, [r7, #4]
 8008f06:	461a      	mov	r2, r3
 8008f08:	460b      	mov	r3, r1
 8008f0a:	817b      	strh	r3, [r7, #10]
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8008f10:	2300      	movs	r3, #0
 8008f12:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008f14:	f7fe fe42 	bl	8007b9c <HAL_GetTick>
 8008f18:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	2b20      	cmp	r3, #32
 8008f24:	f040 824b 	bne.w	80093be <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	2319      	movs	r3, #25
 8008f2e:	2201      	movs	r2, #1
 8008f30:	497f      	ldr	r1, [pc, #508]	@ (8009130 <HAL_I2C_Master_Receive+0x234>)
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f001 f9ac 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d001      	beq.n	8008f42 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8008f3e:	2302      	movs	r3, #2
 8008f40:	e23e      	b.n	80093c0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d101      	bne.n	8008f50 <HAL_I2C_Master_Receive+0x54>
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	e237      	b.n	80093c0 <HAL_I2C_Master_Receive+0x4c4>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f003 0301 	and.w	r3, r3, #1
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d007      	beq.n	8008f76 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f042 0201 	orr.w	r2, r2, #1
 8008f74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008f84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2222      	movs	r2, #34	@ 0x22
 8008f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2210      	movs	r2, #16
 8008f92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	893a      	ldrh	r2, [r7, #8]
 8008fa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	4a5f      	ldr	r2, [pc, #380]	@ (8009134 <HAL_I2C_Master_Receive+0x238>)
 8008fb6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008fb8:	8979      	ldrh	r1, [r7, #10]
 8008fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f000 ff1a 	bl	8009df8 <I2C_MasterRequestRead>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d001      	beq.n	8008fce <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e1f8      	b.n	80093c0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d113      	bne.n	8008ffe <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	61fb      	str	r3, [r7, #28]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	695b      	ldr	r3, [r3, #20]
 8008fe0:	61fb      	str	r3, [r7, #28]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	61fb      	str	r3, [r7, #28]
 8008fea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ffa:	601a      	str	r2, [r3, #0]
 8008ffc:	e1cc      	b.n	8009398 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009002:	2b01      	cmp	r3, #1
 8009004:	d11e      	bne.n	8009044 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009014:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009016:	b672      	cpsid	i
}
 8009018:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800901a:	2300      	movs	r3, #0
 800901c:	61bb      	str	r3, [r7, #24]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	695b      	ldr	r3, [r3, #20]
 8009024:	61bb      	str	r3, [r7, #24]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	61bb      	str	r3, [r7, #24]
 800902e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800903e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009040:	b662      	cpsie	i
}
 8009042:	e035      	b.n	80090b0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009048:	2b02      	cmp	r3, #2
 800904a:	d11e      	bne.n	800908a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800905a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800905c:	b672      	cpsid	i
}
 800905e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009060:	2300      	movs	r3, #0
 8009062:	617b      	str	r3, [r7, #20]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	695b      	ldr	r3, [r3, #20]
 800906a:	617b      	str	r3, [r7, #20]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	617b      	str	r3, [r7, #20]
 8009074:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009084:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009086:	b662      	cpsie	i
}
 8009088:	e012      	b.n	80090b0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009098:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800909a:	2300      	movs	r3, #0
 800909c:	613b      	str	r3, [r7, #16]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	695b      	ldr	r3, [r3, #20]
 80090a4:	613b      	str	r3, [r7, #16]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	613b      	str	r3, [r7, #16]
 80090ae:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80090b0:	e172      	b.n	8009398 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090b6:	2b03      	cmp	r3, #3
 80090b8:	f200 811f 	bhi.w	80092fa <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d123      	bne.n	800910c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f001 fa8b 	bl	800a5e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d001      	beq.n	80090d8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e173      	b.n	80093c0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	691a      	ldr	r2, [r3, #16]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090e2:	b2d2      	uxtb	r2, r2
 80090e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ea:	1c5a      	adds	r2, r3, #1
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090f4:	3b01      	subs	r3, #1
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009100:	b29b      	uxth	r3, r3
 8009102:	3b01      	subs	r3, #1
 8009104:	b29a      	uxth	r2, r3
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800910a:	e145      	b.n	8009398 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009110:	2b02      	cmp	r3, #2
 8009112:	d152      	bne.n	80091ba <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800911a:	2200      	movs	r2, #0
 800911c:	4906      	ldr	r1, [pc, #24]	@ (8009138 <HAL_I2C_Master_Receive+0x23c>)
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f001 f8b6 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d008      	beq.n	800913c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e148      	b.n	80093c0 <HAL_I2C_Master_Receive+0x4c4>
 800912e:	bf00      	nop
 8009130:	00100002 	.word	0x00100002
 8009134:	ffff0000 	.word	0xffff0000
 8009138:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800913c:	b672      	cpsid	i
}
 800913e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800914e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	691a      	ldr	r2, [r3, #16]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800915a:	b2d2      	uxtb	r2, r2
 800915c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009162:	1c5a      	adds	r2, r3, #1
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800916c:	3b01      	subs	r3, #1
 800916e:	b29a      	uxth	r2, r3
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009178:	b29b      	uxth	r3, r3
 800917a:	3b01      	subs	r3, #1
 800917c:	b29a      	uxth	r2, r3
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009182:	b662      	cpsie	i
}
 8009184:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	691a      	ldr	r2, [r3, #16]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009190:	b2d2      	uxtb	r2, r2
 8009192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009198:	1c5a      	adds	r2, r3, #1
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091a2:	3b01      	subs	r3, #1
 80091a4:	b29a      	uxth	r2, r3
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	3b01      	subs	r3, #1
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80091b8:	e0ee      	b.n	8009398 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80091ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c0:	2200      	movs	r2, #0
 80091c2:	4981      	ldr	r1, [pc, #516]	@ (80093c8 <HAL_I2C_Master_Receive+0x4cc>)
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f001 f863 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	e0f5      	b.n	80093c0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80091e4:	b672      	cpsid	i
}
 80091e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	691a      	ldr	r2, [r3, #16]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091f2:	b2d2      	uxtb	r2, r2
 80091f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091fa:	1c5a      	adds	r2, r3, #1
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009204:	3b01      	subs	r3, #1
 8009206:	b29a      	uxth	r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009210:	b29b      	uxth	r3, r3
 8009212:	3b01      	subs	r3, #1
 8009214:	b29a      	uxth	r2, r3
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800921a:	4b6c      	ldr	r3, [pc, #432]	@ (80093cc <HAL_I2C_Master_Receive+0x4d0>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	08db      	lsrs	r3, r3, #3
 8009220:	4a6b      	ldr	r2, [pc, #428]	@ (80093d0 <HAL_I2C_Master_Receive+0x4d4>)
 8009222:	fba2 2303 	umull	r2, r3, r2, r3
 8009226:	0a1a      	lsrs	r2, r3, #8
 8009228:	4613      	mov	r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4413      	add	r3, r2
 800922e:	00da      	lsls	r2, r3, #3
 8009230:	1ad3      	subs	r3, r2, r3
 8009232:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009234:	6a3b      	ldr	r3, [r7, #32]
 8009236:	3b01      	subs	r3, #1
 8009238:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800923a:	6a3b      	ldr	r3, [r7, #32]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d118      	bne.n	8009272 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2220      	movs	r2, #32
 800924a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800925a:	f043 0220 	orr.w	r2, r3, #32
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009262:	b662      	cpsie	i
}
 8009264:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	e0a6      	b.n	80093c0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	695b      	ldr	r3, [r3, #20]
 8009278:	f003 0304 	and.w	r3, r3, #4
 800927c:	2b04      	cmp	r3, #4
 800927e:	d1d9      	bne.n	8009234 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800928e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	691a      	ldr	r2, [r3, #16]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800929a:	b2d2      	uxtb	r2, r2
 800929c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092a2:	1c5a      	adds	r2, r3, #1
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092ac:	3b01      	subs	r3, #1
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	3b01      	subs	r3, #1
 80092bc:	b29a      	uxth	r2, r3
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80092c2:	b662      	cpsie	i
}
 80092c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	691a      	ldr	r2, [r3, #16]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092d0:	b2d2      	uxtb	r2, r2
 80092d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092d8:	1c5a      	adds	r2, r3, #1
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092e2:	3b01      	subs	r3, #1
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	3b01      	subs	r3, #1
 80092f2:	b29a      	uxth	r2, r3
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80092f8:	e04e      	b.n	8009398 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	f001 f970 	bl	800a5e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e058      	b.n	80093c0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	691a      	ldr	r2, [r3, #16]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009318:	b2d2      	uxtb	r2, r2
 800931a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009320:	1c5a      	adds	r2, r3, #1
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800932a:	3b01      	subs	r3, #1
 800932c:	b29a      	uxth	r2, r3
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009336:	b29b      	uxth	r3, r3
 8009338:	3b01      	subs	r3, #1
 800933a:	b29a      	uxth	r2, r3
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	695b      	ldr	r3, [r3, #20]
 8009346:	f003 0304 	and.w	r3, r3, #4
 800934a:	2b04      	cmp	r3, #4
 800934c:	d124      	bne.n	8009398 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009352:	2b03      	cmp	r3, #3
 8009354:	d107      	bne.n	8009366 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009364:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	691a      	ldr	r2, [r3, #16]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009370:	b2d2      	uxtb	r2, r2
 8009372:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009378:	1c5a      	adds	r2, r3, #1
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009382:	3b01      	subs	r3, #1
 8009384:	b29a      	uxth	r2, r3
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800938e:	b29b      	uxth	r3, r3
 8009390:	3b01      	subs	r3, #1
 8009392:	b29a      	uxth	r2, r3
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800939c:	2b00      	cmp	r3, #0
 800939e:	f47f ae88 	bne.w	80090b2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2220      	movs	r2, #32
 80093a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80093ba:	2300      	movs	r3, #0
 80093bc:	e000      	b.n	80093c0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80093be:	2302      	movs	r3, #2
  }
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3728      	adds	r7, #40	@ 0x28
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	00010004 	.word	0x00010004
 80093cc:	20000028 	.word	0x20000028
 80093d0:	14f8b589 	.word	0x14f8b589

080093d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b088      	sub	sp, #32
 80093d8:	af02      	add	r7, sp, #8
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	4608      	mov	r0, r1
 80093de:	4611      	mov	r1, r2
 80093e0:	461a      	mov	r2, r3
 80093e2:	4603      	mov	r3, r0
 80093e4:	817b      	strh	r3, [r7, #10]
 80093e6:	460b      	mov	r3, r1
 80093e8:	813b      	strh	r3, [r7, #8]
 80093ea:	4613      	mov	r3, r2
 80093ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80093ee:	f7fe fbd5 	bl	8007b9c <HAL_GetTick>
 80093f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	2b20      	cmp	r3, #32
 80093fe:	f040 80d9 	bne.w	80095b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	2319      	movs	r3, #25
 8009408:	2201      	movs	r2, #1
 800940a:	496d      	ldr	r1, [pc, #436]	@ (80095c0 <HAL_I2C_Mem_Write+0x1ec>)
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	f000 ff3f 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d001      	beq.n	800941c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009418:	2302      	movs	r3, #2
 800941a:	e0cc      	b.n	80095b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009422:	2b01      	cmp	r3, #1
 8009424:	d101      	bne.n	800942a <HAL_I2C_Mem_Write+0x56>
 8009426:	2302      	movs	r3, #2
 8009428:	e0c5      	b.n	80095b6 <HAL_I2C_Mem_Write+0x1e2>
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2201      	movs	r2, #1
 800942e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 0301 	and.w	r3, r3, #1
 800943c:	2b01      	cmp	r3, #1
 800943e:	d007      	beq.n	8009450 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f042 0201 	orr.w	r2, r2, #1
 800944e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800945e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2221      	movs	r2, #33	@ 0x21
 8009464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2240      	movs	r2, #64	@ 0x40
 800946c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2200      	movs	r2, #0
 8009474:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6a3a      	ldr	r2, [r7, #32]
 800947a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009480:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009486:	b29a      	uxth	r2, r3
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	4a4d      	ldr	r2, [pc, #308]	@ (80095c4 <HAL_I2C_Mem_Write+0x1f0>)
 8009490:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009492:	88f8      	ldrh	r0, [r7, #6]
 8009494:	893a      	ldrh	r2, [r7, #8]
 8009496:	8979      	ldrh	r1, [r7, #10]
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	9301      	str	r3, [sp, #4]
 800949c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800949e:	9300      	str	r3, [sp, #0]
 80094a0:	4603      	mov	r3, r0
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f000 fd76 	bl	8009f94 <I2C_RequestMemoryWrite>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d052      	beq.n	8009554 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80094ae:	2301      	movs	r3, #1
 80094b0:	e081      	b.n	80095b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094b2:	697a      	ldr	r2, [r7, #20]
 80094b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f001 f804 	bl	800a4c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00d      	beq.n	80094de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094c6:	2b04      	cmp	r3, #4
 80094c8:	d107      	bne.n	80094da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80094d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	e06b      	b.n	80095b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094e2:	781a      	ldrb	r2, [r3, #0]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ee:	1c5a      	adds	r2, r3, #1
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094f8:	3b01      	subs	r3, #1
 80094fa:	b29a      	uxth	r2, r3
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009504:	b29b      	uxth	r3, r3
 8009506:	3b01      	subs	r3, #1
 8009508:	b29a      	uxth	r2, r3
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	695b      	ldr	r3, [r3, #20]
 8009514:	f003 0304 	and.w	r3, r3, #4
 8009518:	2b04      	cmp	r3, #4
 800951a:	d11b      	bne.n	8009554 <HAL_I2C_Mem_Write+0x180>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009520:	2b00      	cmp	r3, #0
 8009522:	d017      	beq.n	8009554 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009528:	781a      	ldrb	r2, [r3, #0]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009534:	1c5a      	adds	r2, r3, #1
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800953e:	3b01      	subs	r3, #1
 8009540:	b29a      	uxth	r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800954a:	b29b      	uxth	r3, r3
 800954c:	3b01      	subs	r3, #1
 800954e:	b29a      	uxth	r2, r3
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009558:	2b00      	cmp	r3, #0
 800955a:	d1aa      	bne.n	80094b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800955c:	697a      	ldr	r2, [r7, #20]
 800955e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	f000 fff7 	bl	800a554 <I2C_WaitOnBTFFlagUntilTimeout>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d00d      	beq.n	8009588 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009570:	2b04      	cmp	r3, #4
 8009572:	d107      	bne.n	8009584 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009582:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	e016      	b.n	80095b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2220      	movs	r2, #32
 800959c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80095b0:	2300      	movs	r3, #0
 80095b2:	e000      	b.n	80095b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80095b4:	2302      	movs	r3, #2
  }
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3718      	adds	r7, #24
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	00100002 	.word	0x00100002
 80095c4:	ffff0000 	.word	0xffff0000

080095c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b08c      	sub	sp, #48	@ 0x30
 80095cc:	af02      	add	r7, sp, #8
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	4608      	mov	r0, r1
 80095d2:	4611      	mov	r1, r2
 80095d4:	461a      	mov	r2, r3
 80095d6:	4603      	mov	r3, r0
 80095d8:	817b      	strh	r3, [r7, #10]
 80095da:	460b      	mov	r3, r1
 80095dc:	813b      	strh	r3, [r7, #8]
 80095de:	4613      	mov	r3, r2
 80095e0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80095e2:	2300      	movs	r3, #0
 80095e4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80095e6:	f7fe fad9 	bl	8007b9c <HAL_GetTick>
 80095ea:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	2b20      	cmp	r3, #32
 80095f6:	f040 8244 	bne.w	8009a82 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80095fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095fc:	9300      	str	r3, [sp, #0]
 80095fe:	2319      	movs	r3, #25
 8009600:	2201      	movs	r2, #1
 8009602:	4982      	ldr	r1, [pc, #520]	@ (800980c <HAL_I2C_Mem_Read+0x244>)
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f000 fe43 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d001      	beq.n	8009614 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009610:	2302      	movs	r3, #2
 8009612:	e237      	b.n	8009a84 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800961a:	2b01      	cmp	r3, #1
 800961c:	d101      	bne.n	8009622 <HAL_I2C_Mem_Read+0x5a>
 800961e:	2302      	movs	r3, #2
 8009620:	e230      	b.n	8009a84 <HAL_I2C_Mem_Read+0x4bc>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2201      	movs	r2, #1
 8009626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 0301 	and.w	r3, r3, #1
 8009634:	2b01      	cmp	r3, #1
 8009636:	d007      	beq.n	8009648 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f042 0201 	orr.w	r2, r2, #1
 8009646:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009656:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2222      	movs	r2, #34	@ 0x22
 800965c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2240      	movs	r2, #64	@ 0x40
 8009664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2200      	movs	r2, #0
 800966c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009672:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8009678:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800967e:	b29a      	uxth	r2, r3
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	4a62      	ldr	r2, [pc, #392]	@ (8009810 <HAL_I2C_Mem_Read+0x248>)
 8009688:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800968a:	88f8      	ldrh	r0, [r7, #6]
 800968c:	893a      	ldrh	r2, [r7, #8]
 800968e:	8979      	ldrh	r1, [r7, #10]
 8009690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009692:	9301      	str	r3, [sp, #4]
 8009694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	4603      	mov	r3, r0
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f000 fd10 	bl	800a0c0 <I2C_RequestMemoryRead>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	e1ec      	b.n	8009a84 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d113      	bne.n	80096da <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096b2:	2300      	movs	r3, #0
 80096b4:	61fb      	str	r3, [r7, #28]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	695b      	ldr	r3, [r3, #20]
 80096bc:	61fb      	str	r3, [r7, #28]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	699b      	ldr	r3, [r3, #24]
 80096c4:	61fb      	str	r3, [r7, #28]
 80096c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80096d6:	601a      	str	r2, [r3, #0]
 80096d8:	e1c0      	b.n	8009a5c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d11e      	bne.n	8009720 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80096f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80096f2:	b672      	cpsid	i
}
 80096f4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096f6:	2300      	movs	r3, #0
 80096f8:	61bb      	str	r3, [r7, #24]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	695b      	ldr	r3, [r3, #20]
 8009700:	61bb      	str	r3, [r7, #24]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	61bb      	str	r3, [r7, #24]
 800970a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800971a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800971c:	b662      	cpsie	i
}
 800971e:	e035      	b.n	800978c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009724:	2b02      	cmp	r3, #2
 8009726:	d11e      	bne.n	8009766 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009736:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009738:	b672      	cpsid	i
}
 800973a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800973c:	2300      	movs	r3, #0
 800973e:	617b      	str	r3, [r7, #20]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	695b      	ldr	r3, [r3, #20]
 8009746:	617b      	str	r3, [r7, #20]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	699b      	ldr	r3, [r3, #24]
 800974e:	617b      	str	r3, [r7, #20]
 8009750:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009760:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009762:	b662      	cpsie	i
}
 8009764:	e012      	b.n	800978c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009774:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009776:	2300      	movs	r3, #0
 8009778:	613b      	str	r3, [r7, #16]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	695b      	ldr	r3, [r3, #20]
 8009780:	613b      	str	r3, [r7, #16]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	613b      	str	r3, [r7, #16]
 800978a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800978c:	e166      	b.n	8009a5c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009792:	2b03      	cmp	r3, #3
 8009794:	f200 811f 	bhi.w	80099d6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800979c:	2b01      	cmp	r3, #1
 800979e:	d123      	bne.n	80097e8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80097a4:	68f8      	ldr	r0, [r7, #12]
 80097a6:	f000 ff1d 	bl	800a5e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d001      	beq.n	80097b4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e167      	b.n	8009a84 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	691a      	ldr	r2, [r3, #16]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097be:	b2d2      	uxtb	r2, r2
 80097c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097c6:	1c5a      	adds	r2, r3, #1
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097d0:	3b01      	subs	r3, #1
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097dc:	b29b      	uxth	r3, r3
 80097de:	3b01      	subs	r3, #1
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80097e6:	e139      	b.n	8009a5c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d152      	bne.n	8009896 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80097f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f6:	2200      	movs	r2, #0
 80097f8:	4906      	ldr	r1, [pc, #24]	@ (8009814 <HAL_I2C_Mem_Read+0x24c>)
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	f000 fd48 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d008      	beq.n	8009818 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	e13c      	b.n	8009a84 <HAL_I2C_Mem_Read+0x4bc>
 800980a:	bf00      	nop
 800980c:	00100002 	.word	0x00100002
 8009810:	ffff0000 	.word	0xffff0000
 8009814:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009818:	b672      	cpsid	i
}
 800981a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800982a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	691a      	ldr	r2, [r3, #16]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009836:	b2d2      	uxtb	r2, r2
 8009838:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800983e:	1c5a      	adds	r2, r3, #1
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009848:	3b01      	subs	r3, #1
 800984a:	b29a      	uxth	r2, r3
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009854:	b29b      	uxth	r3, r3
 8009856:	3b01      	subs	r3, #1
 8009858:	b29a      	uxth	r2, r3
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800985e:	b662      	cpsie	i
}
 8009860:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	691a      	ldr	r2, [r3, #16]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800986c:	b2d2      	uxtb	r2, r2
 800986e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009874:	1c5a      	adds	r2, r3, #1
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800987e:	3b01      	subs	r3, #1
 8009880:	b29a      	uxth	r2, r3
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800988a:	b29b      	uxth	r3, r3
 800988c:	3b01      	subs	r3, #1
 800988e:	b29a      	uxth	r2, r3
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009894:	e0e2      	b.n	8009a5c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009898:	9300      	str	r3, [sp, #0]
 800989a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800989c:	2200      	movs	r2, #0
 800989e:	497b      	ldr	r1, [pc, #492]	@ (8009a8c <HAL_I2C_Mem_Read+0x4c4>)
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f000 fcf5 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d001      	beq.n	80098b0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80098ac:	2301      	movs	r3, #1
 80098ae:	e0e9      	b.n	8009a84 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80098be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80098c0:	b672      	cpsid	i
}
 80098c2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	691a      	ldr	r2, [r3, #16]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098ce:	b2d2      	uxtb	r2, r2
 80098d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098d6:	1c5a      	adds	r2, r3, #1
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098e0:	3b01      	subs	r3, #1
 80098e2:	b29a      	uxth	r2, r3
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	3b01      	subs	r3, #1
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80098f6:	4b66      	ldr	r3, [pc, #408]	@ (8009a90 <HAL_I2C_Mem_Read+0x4c8>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	08db      	lsrs	r3, r3, #3
 80098fc:	4a65      	ldr	r2, [pc, #404]	@ (8009a94 <HAL_I2C_Mem_Read+0x4cc>)
 80098fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009902:	0a1a      	lsrs	r2, r3, #8
 8009904:	4613      	mov	r3, r2
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	4413      	add	r3, r2
 800990a:	00da      	lsls	r2, r3, #3
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009910:	6a3b      	ldr	r3, [r7, #32]
 8009912:	3b01      	subs	r3, #1
 8009914:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009916:	6a3b      	ldr	r3, [r7, #32]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d118      	bne.n	800994e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2220      	movs	r2, #32
 8009926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2200      	movs	r2, #0
 800992e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009936:	f043 0220 	orr.w	r2, r3, #32
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800993e:	b662      	cpsie	i
}
 8009940:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2200      	movs	r2, #0
 8009946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	e09a      	b.n	8009a84 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	695b      	ldr	r3, [r3, #20]
 8009954:	f003 0304 	and.w	r3, r3, #4
 8009958:	2b04      	cmp	r3, #4
 800995a:	d1d9      	bne.n	8009910 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800996a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	691a      	ldr	r2, [r3, #16]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009976:	b2d2      	uxtb	r2, r2
 8009978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800997e:	1c5a      	adds	r2, r3, #1
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009988:	3b01      	subs	r3, #1
 800998a:	b29a      	uxth	r2, r3
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009994:	b29b      	uxth	r3, r3
 8009996:	3b01      	subs	r3, #1
 8009998:	b29a      	uxth	r2, r3
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800999e:	b662      	cpsie	i
}
 80099a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	691a      	ldr	r2, [r3, #16]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ac:	b2d2      	uxtb	r2, r2
 80099ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099b4:	1c5a      	adds	r2, r3, #1
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099be:	3b01      	subs	r3, #1
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	3b01      	subs	r3, #1
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80099d4:	e042      	b.n	8009a5c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099d8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f000 fe02 	bl	800a5e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d001      	beq.n	80099ea <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	e04c      	b.n	8009a84 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	691a      	ldr	r2, [r3, #16]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099f4:	b2d2      	uxtb	r2, r2
 80099f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099fc:	1c5a      	adds	r2, r3, #1
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a06:	3b01      	subs	r3, #1
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	3b01      	subs	r3, #1
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	695b      	ldr	r3, [r3, #20]
 8009a22:	f003 0304 	and.w	r3, r3, #4
 8009a26:	2b04      	cmp	r3, #4
 8009a28:	d118      	bne.n	8009a5c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	691a      	ldr	r2, [r3, #16]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a34:	b2d2      	uxtb	r2, r2
 8009a36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a3c:	1c5a      	adds	r2, r3, #1
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a46:	3b01      	subs	r3, #1
 8009a48:	b29a      	uxth	r2, r3
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	3b01      	subs	r3, #1
 8009a56:	b29a      	uxth	r2, r3
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f47f ae94 	bne.w	800978e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2220      	movs	r2, #32
 8009a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	e000      	b.n	8009a84 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009a82:	2302      	movs	r3, #2
  }
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3728      	adds	r7, #40	@ 0x28
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	00010004 	.word	0x00010004
 8009a90:	20000028 	.word	0x20000028
 8009a94:	14f8b589 	.word	0x14f8b589

08009a98 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b08a      	sub	sp, #40	@ 0x28
 8009a9c:	af02      	add	r7, sp, #8
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	607a      	str	r2, [r7, #4]
 8009aa2:	603b      	str	r3, [r7, #0]
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8009aa8:	f7fe f878 	bl	8007b9c <HAL_GetTick>
 8009aac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	2b20      	cmp	r3, #32
 8009abc:	f040 8111 	bne.w	8009ce2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	2319      	movs	r3, #25
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	4988      	ldr	r1, [pc, #544]	@ (8009cec <HAL_I2C_IsDeviceReady+0x254>)
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f000 fbe0 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d001      	beq.n	8009ada <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8009ad6:	2302      	movs	r3, #2
 8009ad8:	e104      	b.n	8009ce4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d101      	bne.n	8009ae8 <HAL_I2C_IsDeviceReady+0x50>
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	e0fd      	b.n	8009ce4 <HAL_I2C_IsDeviceReady+0x24c>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f003 0301 	and.w	r3, r3, #1
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d007      	beq.n	8009b0e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f042 0201 	orr.w	r2, r2, #1
 8009b0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009b1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2224      	movs	r2, #36	@ 0x24
 8009b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	4a70      	ldr	r2, [pc, #448]	@ (8009cf0 <HAL_I2C_IsDeviceReady+0x258>)
 8009b30:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009b40:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009b4e:	68f8      	ldr	r0, [r7, #12]
 8009b50:	f000 fb9e 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00d      	beq.n	8009b76 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b68:	d103      	bne.n	8009b72 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b70:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8009b72:	2303      	movs	r3, #3
 8009b74:	e0b6      	b.n	8009ce4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009b76:	897b      	ldrh	r3, [r7, #10]
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009b84:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8009b86:	f7fe f809 	bl	8007b9c <HAL_GetTick>
 8009b8a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	695b      	ldr	r3, [r3, #20]
 8009b92:	f003 0302 	and.w	r3, r3, #2
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	bf0c      	ite	eq
 8009b9a:	2301      	moveq	r3, #1
 8009b9c:	2300      	movne	r3, #0
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	695b      	ldr	r3, [r3, #20]
 8009ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bb0:	bf0c      	ite	eq
 8009bb2:	2301      	moveq	r3, #1
 8009bb4:	2300      	movne	r3, #0
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009bba:	e025      	b.n	8009c08 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009bbc:	f7fd ffee 	bl	8007b9c <HAL_GetTick>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	1ad3      	subs	r3, r2, r3
 8009bc6:	683a      	ldr	r2, [r7, #0]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d302      	bcc.n	8009bd2 <HAL_I2C_IsDeviceReady+0x13a>
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d103      	bne.n	8009bda <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	22a0      	movs	r2, #160	@ 0xa0
 8009bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	695b      	ldr	r3, [r3, #20]
 8009be0:	f003 0302 	and.w	r3, r3, #2
 8009be4:	2b02      	cmp	r3, #2
 8009be6:	bf0c      	ite	eq
 8009be8:	2301      	moveq	r3, #1
 8009bea:	2300      	movne	r3, #0
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	695b      	ldr	r3, [r3, #20]
 8009bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bfe:	bf0c      	ite	eq
 8009c00:	2301      	moveq	r3, #1
 8009c02:	2300      	movne	r3, #0
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	2ba0      	cmp	r3, #160	@ 0xa0
 8009c12:	d005      	beq.n	8009c20 <HAL_I2C_IsDeviceReady+0x188>
 8009c14:	7dfb      	ldrb	r3, [r7, #23]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d102      	bne.n	8009c20 <HAL_I2C_IsDeviceReady+0x188>
 8009c1a:	7dbb      	ldrb	r3, [r7, #22]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d0cd      	beq.n	8009bbc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2220      	movs	r2, #32
 8009c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	695b      	ldr	r3, [r3, #20]
 8009c2e:	f003 0302 	and.w	r3, r3, #2
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	d129      	bne.n	8009c8a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009c44:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c46:	2300      	movs	r3, #0
 8009c48:	613b      	str	r3, [r7, #16]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	613b      	str	r3, [r7, #16]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	613b      	str	r3, [r7, #16]
 8009c5a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	9300      	str	r3, [sp, #0]
 8009c60:	2319      	movs	r3, #25
 8009c62:	2201      	movs	r2, #1
 8009c64:	4921      	ldr	r1, [pc, #132]	@ (8009cec <HAL_I2C_IsDeviceReady+0x254>)
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f000 fb12 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d001      	beq.n	8009c76 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8009c72:	2301      	movs	r3, #1
 8009c74:	e036      	b.n	8009ce4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2220      	movs	r2, #32
 8009c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8009c86:	2300      	movs	r3, #0
 8009c88:	e02c      	b.n	8009ce4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009c98:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009ca2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	9300      	str	r3, [sp, #0]
 8009ca8:	2319      	movs	r3, #25
 8009caa:	2201      	movs	r2, #1
 8009cac:	490f      	ldr	r1, [pc, #60]	@ (8009cec <HAL_I2C_IsDeviceReady+0x254>)
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	f000 faee 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d001      	beq.n	8009cbe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e012      	b.n	8009ce4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8009cc4:	69ba      	ldr	r2, [r7, #24]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	f4ff af32 	bcc.w	8009b32 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2220      	movs	r2, #32
 8009cd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e000      	b.n	8009ce4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8009ce2:	2302      	movs	r3, #2
  }
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3720      	adds	r7, #32
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	00100002 	.word	0x00100002
 8009cf0:	ffff0000 	.word	0xffff0000

08009cf4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b088      	sub	sp, #32
 8009cf8:	af02      	add	r7, sp, #8
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	607a      	str	r2, [r7, #4]
 8009cfe:	603b      	str	r3, [r7, #0]
 8009d00:	460b      	mov	r3, r1
 8009d02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d08:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	2b08      	cmp	r3, #8
 8009d0e:	d006      	beq.n	8009d1e <I2C_MasterRequestWrite+0x2a>
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d003      	beq.n	8009d1e <I2C_MasterRequestWrite+0x2a>
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009d1c:	d108      	bne.n	8009d30 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009d2c:	601a      	str	r2, [r3, #0]
 8009d2e:	e00b      	b.n	8009d48 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d34:	2b12      	cmp	r3, #18
 8009d36:	d107      	bne.n	8009d48 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009d46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	9300      	str	r3, [sp, #0]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f000 fa9b 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d00d      	beq.n	8009d7c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d6e:	d103      	bne.n	8009d78 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009d78:	2303      	movs	r3, #3
 8009d7a:	e035      	b.n	8009de8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	691b      	ldr	r3, [r3, #16]
 8009d80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d84:	d108      	bne.n	8009d98 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009d86:	897b      	ldrh	r3, [r7, #10]
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009d94:	611a      	str	r2, [r3, #16]
 8009d96:	e01b      	b.n	8009dd0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009d98:	897b      	ldrh	r3, [r7, #10]
 8009d9a:	11db      	asrs	r3, r3, #7
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	f003 0306 	and.w	r3, r3, #6
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	f063 030f 	orn	r3, r3, #15
 8009da8:	b2da      	uxtb	r2, r3
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	490e      	ldr	r1, [pc, #56]	@ (8009df0 <I2C_MasterRequestWrite+0xfc>)
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f000 fae4 	bl	800a384 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d001      	beq.n	8009dc6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e010      	b.n	8009de8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009dc6:	897b      	ldrh	r3, [r7, #10]
 8009dc8:	b2da      	uxtb	r2, r3
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	4907      	ldr	r1, [pc, #28]	@ (8009df4 <I2C_MasterRequestWrite+0x100>)
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	f000 fad4 	bl	800a384 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d001      	beq.n	8009de6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	e000      	b.n	8009de8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009de6:	2300      	movs	r3, #0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3718      	adds	r7, #24
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	00010008 	.word	0x00010008
 8009df4:	00010002 	.word	0x00010002

08009df8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b088      	sub	sp, #32
 8009dfc:	af02      	add	r7, sp, #8
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	607a      	str	r2, [r7, #4]
 8009e02:	603b      	str	r3, [r7, #0]
 8009e04:	460b      	mov	r3, r1
 8009e06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e0c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009e1c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	2b08      	cmp	r3, #8
 8009e22:	d006      	beq.n	8009e32 <I2C_MasterRequestRead+0x3a>
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d003      	beq.n	8009e32 <I2C_MasterRequestRead+0x3a>
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009e30:	d108      	bne.n	8009e44 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009e40:	601a      	str	r2, [r3, #0]
 8009e42:	e00b      	b.n	8009e5c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e48:	2b11      	cmp	r3, #17
 8009e4a:	d107      	bne.n	8009e5c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009e5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	9300      	str	r3, [sp, #0]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009e68:	68f8      	ldr	r0, [r7, #12]
 8009e6a:	f000 fa11 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d00d      	beq.n	8009e90 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e82:	d103      	bne.n	8009e8c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009e8c:	2303      	movs	r3, #3
 8009e8e:	e079      	b.n	8009f84 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	691b      	ldr	r3, [r3, #16]
 8009e94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e98:	d108      	bne.n	8009eac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009e9a:	897b      	ldrh	r3, [r7, #10]
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	f043 0301 	orr.w	r3, r3, #1
 8009ea2:	b2da      	uxtb	r2, r3
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	611a      	str	r2, [r3, #16]
 8009eaa:	e05f      	b.n	8009f6c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009eac:	897b      	ldrh	r3, [r7, #10]
 8009eae:	11db      	asrs	r3, r3, #7
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	f003 0306 	and.w	r3, r3, #6
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	f063 030f 	orn	r3, r3, #15
 8009ebc:	b2da      	uxtb	r2, r3
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	4930      	ldr	r1, [pc, #192]	@ (8009f8c <I2C_MasterRequestRead+0x194>)
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f000 fa5a 	bl	800a384 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d001      	beq.n	8009eda <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e054      	b.n	8009f84 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009eda:	897b      	ldrh	r3, [r7, #10]
 8009edc:	b2da      	uxtb	r2, r3
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	4929      	ldr	r1, [pc, #164]	@ (8009f90 <I2C_MasterRequestRead+0x198>)
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f000 fa4a 	bl	800a384 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d001      	beq.n	8009efa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e044      	b.n	8009f84 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009efa:	2300      	movs	r3, #0
 8009efc:	613b      	str	r3, [r7, #16]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	695b      	ldr	r3, [r3, #20]
 8009f04:	613b      	str	r3, [r7, #16]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	699b      	ldr	r3, [r3, #24]
 8009f0c:	613b      	str	r3, [r7, #16]
 8009f0e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009f1e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f000 f9af 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00d      	beq.n	8009f54 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f46:	d103      	bne.n	8009f50 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009f4e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8009f50:	2303      	movs	r3, #3
 8009f52:	e017      	b.n	8009f84 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009f54:	897b      	ldrh	r3, [r7, #10]
 8009f56:	11db      	asrs	r3, r3, #7
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	f003 0306 	and.w	r3, r3, #6
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	f063 030e 	orn	r3, r3, #14
 8009f64:	b2da      	uxtb	r2, r3
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	4907      	ldr	r1, [pc, #28]	@ (8009f90 <I2C_MasterRequestRead+0x198>)
 8009f72:	68f8      	ldr	r0, [r7, #12]
 8009f74:	f000 fa06 	bl	800a384 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d001      	beq.n	8009f82 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e000      	b.n	8009f84 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3718      	adds	r7, #24
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	00010008 	.word	0x00010008
 8009f90:	00010002 	.word	0x00010002

08009f94 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b088      	sub	sp, #32
 8009f98:	af02      	add	r7, sp, #8
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	4608      	mov	r0, r1
 8009f9e:	4611      	mov	r1, r2
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	817b      	strh	r3, [r7, #10]
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	813b      	strh	r3, [r7, #8]
 8009faa:	4613      	mov	r3, r2
 8009fac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009fbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fc0:	9300      	str	r3, [sp, #0]
 8009fc2:	6a3b      	ldr	r3, [r7, #32]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	f000 f960 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00d      	beq.n	8009ff2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fe0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fe4:	d103      	bne.n	8009fee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009fec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009fee:	2303      	movs	r3, #3
 8009ff0:	e05f      	b.n	800a0b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009ff2:	897b      	ldrh	r3, [r7, #10]
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a000:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a004:	6a3a      	ldr	r2, [r7, #32]
 800a006:	492d      	ldr	r1, [pc, #180]	@ (800a0bc <I2C_RequestMemoryWrite+0x128>)
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 f9bb 	bl	800a384 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d001      	beq.n	800a018 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	e04c      	b.n	800a0b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a018:	2300      	movs	r3, #0
 800a01a:	617b      	str	r3, [r7, #20]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	695b      	ldr	r3, [r3, #20]
 800a022:	617b      	str	r3, [r7, #20]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	699b      	ldr	r3, [r3, #24]
 800a02a:	617b      	str	r3, [r7, #20]
 800a02c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a02e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a030:	6a39      	ldr	r1, [r7, #32]
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f000 fa46 	bl	800a4c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00d      	beq.n	800a05a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a042:	2b04      	cmp	r3, #4
 800a044:	d107      	bne.n	800a056 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a054:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a056:	2301      	movs	r3, #1
 800a058:	e02b      	b.n	800a0b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a05a:	88fb      	ldrh	r3, [r7, #6]
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d105      	bne.n	800a06c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a060:	893b      	ldrh	r3, [r7, #8]
 800a062:	b2da      	uxtb	r2, r3
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	611a      	str	r2, [r3, #16]
 800a06a:	e021      	b.n	800a0b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a06c:	893b      	ldrh	r3, [r7, #8]
 800a06e:	0a1b      	lsrs	r3, r3, #8
 800a070:	b29b      	uxth	r3, r3
 800a072:	b2da      	uxtb	r2, r3
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a07a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a07c:	6a39      	ldr	r1, [r7, #32]
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f000 fa20 	bl	800a4c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00d      	beq.n	800a0a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a08e:	2b04      	cmp	r3, #4
 800a090:	d107      	bne.n	800a0a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a0a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e005      	b.n	800a0b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a0a6:	893b      	ldrh	r3, [r7, #8]
 800a0a8:	b2da      	uxtb	r2, r3
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a0b0:	2300      	movs	r3, #0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3718      	adds	r7, #24
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	00010002 	.word	0x00010002

0800a0c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b088      	sub	sp, #32
 800a0c4:	af02      	add	r7, sp, #8
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	4608      	mov	r0, r1
 800a0ca:	4611      	mov	r1, r2
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	817b      	strh	r3, [r7, #10]
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	813b      	strh	r3, [r7, #8]
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a0e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a0f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0fc:	9300      	str	r3, [sp, #0]
 800a0fe:	6a3b      	ldr	r3, [r7, #32]
 800a100:	2200      	movs	r2, #0
 800a102:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	f000 f8c2 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00d      	beq.n	800a12e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a11c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a120:	d103      	bne.n	800a12a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a128:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a12a:	2303      	movs	r3, #3
 800a12c:	e0aa      	b.n	800a284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a12e:	897b      	ldrh	r3, [r7, #10]
 800a130:	b2db      	uxtb	r3, r3
 800a132:	461a      	mov	r2, r3
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a13c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a140:	6a3a      	ldr	r2, [r7, #32]
 800a142:	4952      	ldr	r1, [pc, #328]	@ (800a28c <I2C_RequestMemoryRead+0x1cc>)
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f000 f91d 	bl	800a384 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d001      	beq.n	800a154 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	e097      	b.n	800a284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a154:	2300      	movs	r3, #0
 800a156:	617b      	str	r3, [r7, #20]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	695b      	ldr	r3, [r3, #20]
 800a15e:	617b      	str	r3, [r7, #20]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	699b      	ldr	r3, [r3, #24]
 800a166:	617b      	str	r3, [r7, #20]
 800a168:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a16a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a16c:	6a39      	ldr	r1, [r7, #32]
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	f000 f9a8 	bl	800a4c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a174:	4603      	mov	r3, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00d      	beq.n	800a196 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a17e:	2b04      	cmp	r3, #4
 800a180:	d107      	bne.n	800a192 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a190:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	e076      	b.n	800a284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a196:	88fb      	ldrh	r3, [r7, #6]
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d105      	bne.n	800a1a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a19c:	893b      	ldrh	r3, [r7, #8]
 800a19e:	b2da      	uxtb	r2, r3
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	611a      	str	r2, [r3, #16]
 800a1a6:	e021      	b.n	800a1ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a1a8:	893b      	ldrh	r3, [r7, #8]
 800a1aa:	0a1b      	lsrs	r3, r3, #8
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	b2da      	uxtb	r2, r3
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1b8:	6a39      	ldr	r1, [r7, #32]
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f000 f982 	bl	800a4c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00d      	beq.n	800a1e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1ca:	2b04      	cmp	r3, #4
 800a1cc:	d107      	bne.n	800a1de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a1dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e050      	b.n	800a284 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1e2:	893b      	ldrh	r3, [r7, #8]
 800a1e4:	b2da      	uxtb	r2, r3
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1ee:	6a39      	ldr	r1, [r7, #32]
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f000 f967 	bl	800a4c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00d      	beq.n	800a218 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a200:	2b04      	cmp	r3, #4
 800a202:	d107      	bne.n	800a214 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a212:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a214:	2301      	movs	r3, #1
 800a216:	e035      	b.n	800a284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a226:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a22a:	9300      	str	r3, [sp, #0]
 800a22c:	6a3b      	ldr	r3, [r7, #32]
 800a22e:	2200      	movs	r2, #0
 800a230:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f000 f82b 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00d      	beq.n	800a25c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a24a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a24e:	d103      	bne.n	800a258 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a256:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a258:	2303      	movs	r3, #3
 800a25a:	e013      	b.n	800a284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a25c:	897b      	ldrh	r3, [r7, #10]
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	f043 0301 	orr.w	r3, r3, #1
 800a264:	b2da      	uxtb	r2, r3
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26e:	6a3a      	ldr	r2, [r7, #32]
 800a270:	4906      	ldr	r1, [pc, #24]	@ (800a28c <I2C_RequestMemoryRead+0x1cc>)
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f000 f886 	bl	800a384 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d001      	beq.n	800a282 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	e000      	b.n	800a284 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	3718      	adds	r7, #24
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	00010002 	.word	0x00010002

0800a290 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	603b      	str	r3, [r7, #0]
 800a29c:	4613      	mov	r3, r2
 800a29e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a2a0:	e048      	b.n	800a334 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2a8:	d044      	beq.n	800a334 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2aa:	f7fd fc77 	bl	8007b9c <HAL_GetTick>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	1ad3      	subs	r3, r2, r3
 800a2b4:	683a      	ldr	r2, [r7, #0]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d302      	bcc.n	800a2c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d139      	bne.n	800a334 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	0c1b      	lsrs	r3, r3, #16
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d10d      	bne.n	800a2e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	695b      	ldr	r3, [r3, #20]
 800a2d0:	43da      	mvns	r2, r3
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	bf0c      	ite	eq
 800a2dc:	2301      	moveq	r3, #1
 800a2de:	2300      	movne	r3, #0
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	e00c      	b.n	800a300 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	699b      	ldr	r3, [r3, #24]
 800a2ec:	43da      	mvns	r2, r3
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	4013      	ands	r3, r2
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	bf0c      	ite	eq
 800a2f8:	2301      	moveq	r3, #1
 800a2fa:	2300      	movne	r3, #0
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	461a      	mov	r2, r3
 800a300:	79fb      	ldrb	r3, [r7, #7]
 800a302:	429a      	cmp	r2, r3
 800a304:	d116      	bne.n	800a334 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2200      	movs	r2, #0
 800a30a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2220      	movs	r2, #32
 800a310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2200      	movs	r2, #0
 800a318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a320:	f043 0220 	orr.w	r2, r3, #32
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	e023      	b.n	800a37c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	0c1b      	lsrs	r3, r3, #16
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d10d      	bne.n	800a35a <I2C_WaitOnFlagUntilTimeout+0xca>
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	695b      	ldr	r3, [r3, #20]
 800a344:	43da      	mvns	r2, r3
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	4013      	ands	r3, r2
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	bf0c      	ite	eq
 800a350:	2301      	moveq	r3, #1
 800a352:	2300      	movne	r3, #0
 800a354:	b2db      	uxtb	r3, r3
 800a356:	461a      	mov	r2, r3
 800a358:	e00c      	b.n	800a374 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	699b      	ldr	r3, [r3, #24]
 800a360:	43da      	mvns	r2, r3
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	4013      	ands	r3, r2
 800a366:	b29b      	uxth	r3, r3
 800a368:	2b00      	cmp	r3, #0
 800a36a:	bf0c      	ite	eq
 800a36c:	2301      	moveq	r3, #1
 800a36e:	2300      	movne	r3, #0
 800a370:	b2db      	uxtb	r3, r3
 800a372:	461a      	mov	r2, r3
 800a374:	79fb      	ldrb	r3, [r7, #7]
 800a376:	429a      	cmp	r2, r3
 800a378:	d093      	beq.n	800a2a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3710      	adds	r7, #16
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	60b9      	str	r1, [r7, #8]
 800a38e:	607a      	str	r2, [r7, #4]
 800a390:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a392:	e071      	b.n	800a478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	695b      	ldr	r3, [r3, #20]
 800a39a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a39e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3a2:	d123      	bne.n	800a3ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a3b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a3bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2220      	movs	r2, #32
 800a3c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3d8:	f043 0204 	orr.w	r2, r3, #4
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e067      	b.n	800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f2:	d041      	beq.n	800a478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3f4:	f7fd fbd2 	bl	8007b9c <HAL_GetTick>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	429a      	cmp	r2, r3
 800a402:	d302      	bcc.n	800a40a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d136      	bne.n	800a478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	0c1b      	lsrs	r3, r3, #16
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	2b01      	cmp	r3, #1
 800a412:	d10c      	bne.n	800a42e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	43da      	mvns	r2, r3
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	4013      	ands	r3, r2
 800a420:	b29b      	uxth	r3, r3
 800a422:	2b00      	cmp	r3, #0
 800a424:	bf14      	ite	ne
 800a426:	2301      	movne	r3, #1
 800a428:	2300      	moveq	r3, #0
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	e00b      	b.n	800a446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	699b      	ldr	r3, [r3, #24]
 800a434:	43da      	mvns	r2, r3
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	4013      	ands	r3, r2
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	bf14      	ite	ne
 800a440:	2301      	movne	r3, #1
 800a442:	2300      	moveq	r3, #0
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b00      	cmp	r3, #0
 800a448:	d016      	beq.n	800a478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2200      	movs	r2, #0
 800a44e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2220      	movs	r2, #32
 800a454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a464:	f043 0220 	orr.w	r2, r3, #32
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2200      	movs	r2, #0
 800a470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a474:	2301      	movs	r3, #1
 800a476:	e021      	b.n	800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	0c1b      	lsrs	r3, r3, #16
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d10c      	bne.n	800a49c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	695b      	ldr	r3, [r3, #20]
 800a488:	43da      	mvns	r2, r3
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	4013      	ands	r3, r2
 800a48e:	b29b      	uxth	r3, r3
 800a490:	2b00      	cmp	r3, #0
 800a492:	bf14      	ite	ne
 800a494:	2301      	movne	r3, #1
 800a496:	2300      	moveq	r3, #0
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	e00b      	b.n	800a4b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	699b      	ldr	r3, [r3, #24]
 800a4a2:	43da      	mvns	r2, r3
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	4013      	ands	r3, r2
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	bf14      	ite	ne
 800a4ae:	2301      	movne	r3, #1
 800a4b0:	2300      	moveq	r3, #0
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f47f af6d 	bne.w	800a394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3710      	adds	r7, #16
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a4d0:	e034      	b.n	800a53c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a4d2:	68f8      	ldr	r0, [r7, #12]
 800a4d4:	f000 f8e3 	bl	800a69e <I2C_IsAcknowledgeFailed>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d001      	beq.n	800a4e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e034      	b.n	800a54c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e8:	d028      	beq.n	800a53c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4ea:	f7fd fb57 	bl	8007b9c <HAL_GetTick>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	1ad3      	subs	r3, r2, r3
 800a4f4:	68ba      	ldr	r2, [r7, #8]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d302      	bcc.n	800a500 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d11d      	bne.n	800a53c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	695b      	ldr	r3, [r3, #20]
 800a506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a50a:	2b80      	cmp	r3, #128	@ 0x80
 800a50c:	d016      	beq.n	800a53c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2200      	movs	r2, #0
 800a512:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2220      	movs	r2, #32
 800a518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2200      	movs	r2, #0
 800a520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a528:	f043 0220 	orr.w	r2, r3, #32
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2200      	movs	r2, #0
 800a534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	e007      	b.n	800a54c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	695b      	ldr	r3, [r3, #20]
 800a542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a546:	2b80      	cmp	r3, #128	@ 0x80
 800a548:	d1c3      	bne.n	800a4d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a560:	e034      	b.n	800a5cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a562:	68f8      	ldr	r0, [r7, #12]
 800a564:	f000 f89b 	bl	800a69e <I2C_IsAcknowledgeFailed>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d001      	beq.n	800a572 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	e034      	b.n	800a5dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a578:	d028      	beq.n	800a5cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a57a:	f7fd fb0f 	bl	8007b9c <HAL_GetTick>
 800a57e:	4602      	mov	r2, r0
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	1ad3      	subs	r3, r2, r3
 800a584:	68ba      	ldr	r2, [r7, #8]
 800a586:	429a      	cmp	r2, r3
 800a588:	d302      	bcc.n	800a590 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d11d      	bne.n	800a5cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	695b      	ldr	r3, [r3, #20]
 800a596:	f003 0304 	and.w	r3, r3, #4
 800a59a:	2b04      	cmp	r3, #4
 800a59c:	d016      	beq.n	800a5cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2220      	movs	r2, #32
 800a5a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5b8:	f043 0220 	orr.w	r2, r3, #32
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e007      	b.n	800a5dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	695b      	ldr	r3, [r3, #20]
 800a5d2:	f003 0304 	and.w	r3, r3, #4
 800a5d6:	2b04      	cmp	r3, #4
 800a5d8:	d1c3      	bne.n	800a562 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a5da:	2300      	movs	r3, #0
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3710      	adds	r7, #16
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a5f0:	e049      	b.n	800a686 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	695b      	ldr	r3, [r3, #20]
 800a5f8:	f003 0310 	and.w	r3, r3, #16
 800a5fc:	2b10      	cmp	r3, #16
 800a5fe:	d119      	bne.n	800a634 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f06f 0210 	mvn.w	r2, #16
 800a608:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2220      	movs	r2, #32
 800a614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	e030      	b.n	800a696 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a634:	f7fd fab2 	bl	8007b9c <HAL_GetTick>
 800a638:	4602      	mov	r2, r0
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	1ad3      	subs	r3, r2, r3
 800a63e:	68ba      	ldr	r2, [r7, #8]
 800a640:	429a      	cmp	r2, r3
 800a642:	d302      	bcc.n	800a64a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d11d      	bne.n	800a686 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	695b      	ldr	r3, [r3, #20]
 800a650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a654:	2b40      	cmp	r3, #64	@ 0x40
 800a656:	d016      	beq.n	800a686 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2200      	movs	r2, #0
 800a65c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2220      	movs	r2, #32
 800a662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2200      	movs	r2, #0
 800a66a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a672:	f043 0220 	orr.w	r2, r3, #32
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	e007      	b.n	800a696 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	695b      	ldr	r3, [r3, #20]
 800a68c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a690:	2b40      	cmp	r3, #64	@ 0x40
 800a692:	d1ae      	bne.n	800a5f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3710      	adds	r7, #16
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a69e:	b480      	push	{r7}
 800a6a0:	b083      	sub	sp, #12
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	695b      	ldr	r3, [r3, #20]
 800a6ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6b4:	d11b      	bne.n	800a6ee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a6be:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2220      	movs	r2, #32
 800a6ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6da:	f043 0204 	orr.w	r2, r3, #4
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	e000      	b.n	800a6f0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	370c      	adds	r7, #12
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bc80      	pop	{r7}
 800a6f8:	4770      	bx	lr
	...

0800a6fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b086      	sub	sp, #24
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d101      	bne.n	800a70e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	e272      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f003 0301 	and.w	r3, r3, #1
 800a716:	2b00      	cmp	r3, #0
 800a718:	f000 8087 	beq.w	800a82a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a71c:	4b92      	ldr	r3, [pc, #584]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	f003 030c 	and.w	r3, r3, #12
 800a724:	2b04      	cmp	r3, #4
 800a726:	d00c      	beq.n	800a742 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a728:	4b8f      	ldr	r3, [pc, #572]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	f003 030c 	and.w	r3, r3, #12
 800a730:	2b08      	cmp	r3, #8
 800a732:	d112      	bne.n	800a75a <HAL_RCC_OscConfig+0x5e>
 800a734:	4b8c      	ldr	r3, [pc, #560]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a73c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a740:	d10b      	bne.n	800a75a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a742:	4b89      	ldr	r3, [pc, #548]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d06c      	beq.n	800a828 <HAL_RCC_OscConfig+0x12c>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d168      	bne.n	800a828 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	e24c      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a762:	d106      	bne.n	800a772 <HAL_RCC_OscConfig+0x76>
 800a764:	4b80      	ldr	r3, [pc, #512]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a7f      	ldr	r2, [pc, #508]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a76a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a76e:	6013      	str	r3, [r2, #0]
 800a770:	e02e      	b.n	800a7d0 <HAL_RCC_OscConfig+0xd4>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d10c      	bne.n	800a794 <HAL_RCC_OscConfig+0x98>
 800a77a:	4b7b      	ldr	r3, [pc, #492]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a7a      	ldr	r2, [pc, #488]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a780:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a784:	6013      	str	r3, [r2, #0]
 800a786:	4b78      	ldr	r3, [pc, #480]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a77      	ldr	r2, [pc, #476]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a78c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a790:	6013      	str	r3, [r2, #0]
 800a792:	e01d      	b.n	800a7d0 <HAL_RCC_OscConfig+0xd4>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a79c:	d10c      	bne.n	800a7b8 <HAL_RCC_OscConfig+0xbc>
 800a79e:	4b72      	ldr	r3, [pc, #456]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a71      	ldr	r2, [pc, #452]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a7a8:	6013      	str	r3, [r2, #0]
 800a7aa:	4b6f      	ldr	r3, [pc, #444]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4a6e      	ldr	r2, [pc, #440]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a7b4:	6013      	str	r3, [r2, #0]
 800a7b6:	e00b      	b.n	800a7d0 <HAL_RCC_OscConfig+0xd4>
 800a7b8:	4b6b      	ldr	r3, [pc, #428]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a6a      	ldr	r2, [pc, #424]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a7c2:	6013      	str	r3, [r2, #0]
 800a7c4:	4b68      	ldr	r3, [pc, #416]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a67      	ldr	r2, [pc, #412]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a7ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d013      	beq.n	800a800 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7d8:	f7fd f9e0 	bl	8007b9c <HAL_GetTick>
 800a7dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7de:	e008      	b.n	800a7f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7e0:	f7fd f9dc 	bl	8007b9c <HAL_GetTick>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	1ad3      	subs	r3, r2, r3
 800a7ea:	2b64      	cmp	r3, #100	@ 0x64
 800a7ec:	d901      	bls.n	800a7f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	e200      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7f2:	4b5d      	ldr	r3, [pc, #372]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d0f0      	beq.n	800a7e0 <HAL_RCC_OscConfig+0xe4>
 800a7fe:	e014      	b.n	800a82a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a800:	f7fd f9cc 	bl	8007b9c <HAL_GetTick>
 800a804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a806:	e008      	b.n	800a81a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a808:	f7fd f9c8 	bl	8007b9c <HAL_GetTick>
 800a80c:	4602      	mov	r2, r0
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	2b64      	cmp	r3, #100	@ 0x64
 800a814:	d901      	bls.n	800a81a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a816:	2303      	movs	r3, #3
 800a818:	e1ec      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a81a:	4b53      	ldr	r3, [pc, #332]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1f0      	bne.n	800a808 <HAL_RCC_OscConfig+0x10c>
 800a826:	e000      	b.n	800a82a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f003 0302 	and.w	r3, r3, #2
 800a832:	2b00      	cmp	r3, #0
 800a834:	d063      	beq.n	800a8fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a836:	4b4c      	ldr	r3, [pc, #304]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	f003 030c 	and.w	r3, r3, #12
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00b      	beq.n	800a85a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a842:	4b49      	ldr	r3, [pc, #292]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	f003 030c 	and.w	r3, r3, #12
 800a84a:	2b08      	cmp	r3, #8
 800a84c:	d11c      	bne.n	800a888 <HAL_RCC_OscConfig+0x18c>
 800a84e:	4b46      	ldr	r3, [pc, #280]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a856:	2b00      	cmp	r3, #0
 800a858:	d116      	bne.n	800a888 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a85a:	4b43      	ldr	r3, [pc, #268]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f003 0302 	and.w	r3, r3, #2
 800a862:	2b00      	cmp	r3, #0
 800a864:	d005      	beq.n	800a872 <HAL_RCC_OscConfig+0x176>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	691b      	ldr	r3, [r3, #16]
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d001      	beq.n	800a872 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	e1c0      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a872:	4b3d      	ldr	r3, [pc, #244]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	695b      	ldr	r3, [r3, #20]
 800a87e:	00db      	lsls	r3, r3, #3
 800a880:	4939      	ldr	r1, [pc, #228]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a882:	4313      	orrs	r3, r2
 800a884:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a886:	e03a      	b.n	800a8fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d020      	beq.n	800a8d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a890:	4b36      	ldr	r3, [pc, #216]	@ (800a96c <HAL_RCC_OscConfig+0x270>)
 800a892:	2201      	movs	r2, #1
 800a894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a896:	f7fd f981 	bl	8007b9c <HAL_GetTick>
 800a89a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a89c:	e008      	b.n	800a8b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a89e:	f7fd f97d 	bl	8007b9c <HAL_GetTick>
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	1ad3      	subs	r3, r2, r3
 800a8a8:	2b02      	cmp	r3, #2
 800a8aa:	d901      	bls.n	800a8b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a8ac:	2303      	movs	r3, #3
 800a8ae:	e1a1      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8b0:	4b2d      	ldr	r3, [pc, #180]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f003 0302 	and.w	r3, r3, #2
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d0f0      	beq.n	800a89e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8bc:	4b2a      	ldr	r3, [pc, #168]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	695b      	ldr	r3, [r3, #20]
 800a8c8:	00db      	lsls	r3, r3, #3
 800a8ca:	4927      	ldr	r1, [pc, #156]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	600b      	str	r3, [r1, #0]
 800a8d0:	e015      	b.n	800a8fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a8d2:	4b26      	ldr	r3, [pc, #152]	@ (800a96c <HAL_RCC_OscConfig+0x270>)
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8d8:	f7fd f960 	bl	8007b9c <HAL_GetTick>
 800a8dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a8de:	e008      	b.n	800a8f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8e0:	f7fd f95c 	bl	8007b9c <HAL_GetTick>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	1ad3      	subs	r3, r2, r3
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d901      	bls.n	800a8f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a8ee:	2303      	movs	r3, #3
 800a8f0:	e180      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a8f2:	4b1d      	ldr	r3, [pc, #116]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 0302 	and.w	r3, r3, #2
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d1f0      	bne.n	800a8e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f003 0308 	and.w	r3, r3, #8
 800a906:	2b00      	cmp	r3, #0
 800a908:	d03a      	beq.n	800a980 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	699b      	ldr	r3, [r3, #24]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d019      	beq.n	800a946 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a912:	4b17      	ldr	r3, [pc, #92]	@ (800a970 <HAL_RCC_OscConfig+0x274>)
 800a914:	2201      	movs	r2, #1
 800a916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a918:	f7fd f940 	bl	8007b9c <HAL_GetTick>
 800a91c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a91e:	e008      	b.n	800a932 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a920:	f7fd f93c 	bl	8007b9c <HAL_GetTick>
 800a924:	4602      	mov	r2, r0
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	1ad3      	subs	r3, r2, r3
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	d901      	bls.n	800a932 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a92e:	2303      	movs	r3, #3
 800a930:	e160      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a932:	4b0d      	ldr	r3, [pc, #52]	@ (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a936:	f003 0302 	and.w	r3, r3, #2
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d0f0      	beq.n	800a920 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a93e:	2001      	movs	r0, #1
 800a940:	f000 fafe 	bl	800af40 <RCC_Delay>
 800a944:	e01c      	b.n	800a980 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a946:	4b0a      	ldr	r3, [pc, #40]	@ (800a970 <HAL_RCC_OscConfig+0x274>)
 800a948:	2200      	movs	r2, #0
 800a94a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a94c:	f7fd f926 	bl	8007b9c <HAL_GetTick>
 800a950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a952:	e00f      	b.n	800a974 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a954:	f7fd f922 	bl	8007b9c <HAL_GetTick>
 800a958:	4602      	mov	r2, r0
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	1ad3      	subs	r3, r2, r3
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d908      	bls.n	800a974 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a962:	2303      	movs	r3, #3
 800a964:	e146      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
 800a966:	bf00      	nop
 800a968:	40021000 	.word	0x40021000
 800a96c:	42420000 	.word	0x42420000
 800a970:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a974:	4b92      	ldr	r3, [pc, #584]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800a976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a978:	f003 0302 	and.w	r3, r3, #2
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d1e9      	bne.n	800a954 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f003 0304 	and.w	r3, r3, #4
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f000 80a6 	beq.w	800aada <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a98e:	2300      	movs	r3, #0
 800a990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a992:	4b8b      	ldr	r3, [pc, #556]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800a994:	69db      	ldr	r3, [r3, #28]
 800a996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d10d      	bne.n	800a9ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a99e:	4b88      	ldr	r3, [pc, #544]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800a9a0:	69db      	ldr	r3, [r3, #28]
 800a9a2:	4a87      	ldr	r2, [pc, #540]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800a9a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a9a8:	61d3      	str	r3, [r2, #28]
 800a9aa:	4b85      	ldr	r3, [pc, #532]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800a9ac:	69db      	ldr	r3, [r3, #28]
 800a9ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a9b2:	60bb      	str	r3, [r7, #8]
 800a9b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9ba:	4b82      	ldr	r3, [pc, #520]	@ (800abc4 <HAL_RCC_OscConfig+0x4c8>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d118      	bne.n	800a9f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a9c6:	4b7f      	ldr	r3, [pc, #508]	@ (800abc4 <HAL_RCC_OscConfig+0x4c8>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a7e      	ldr	r2, [pc, #504]	@ (800abc4 <HAL_RCC_OscConfig+0x4c8>)
 800a9cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a9d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a9d2:	f7fd f8e3 	bl	8007b9c <HAL_GetTick>
 800a9d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9d8:	e008      	b.n	800a9ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9da:	f7fd f8df 	bl	8007b9c <HAL_GetTick>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	1ad3      	subs	r3, r2, r3
 800a9e4:	2b64      	cmp	r3, #100	@ 0x64
 800a9e6:	d901      	bls.n	800a9ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a9e8:	2303      	movs	r3, #3
 800a9ea:	e103      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9ec:	4b75      	ldr	r3, [pc, #468]	@ (800abc4 <HAL_RCC_OscConfig+0x4c8>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d0f0      	beq.n	800a9da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d106      	bne.n	800aa0e <HAL_RCC_OscConfig+0x312>
 800aa00:	4b6f      	ldr	r3, [pc, #444]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa02:	6a1b      	ldr	r3, [r3, #32]
 800aa04:	4a6e      	ldr	r2, [pc, #440]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa06:	f043 0301 	orr.w	r3, r3, #1
 800aa0a:	6213      	str	r3, [r2, #32]
 800aa0c:	e02d      	b.n	800aa6a <HAL_RCC_OscConfig+0x36e>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d10c      	bne.n	800aa30 <HAL_RCC_OscConfig+0x334>
 800aa16:	4b6a      	ldr	r3, [pc, #424]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa18:	6a1b      	ldr	r3, [r3, #32]
 800aa1a:	4a69      	ldr	r2, [pc, #420]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa1c:	f023 0301 	bic.w	r3, r3, #1
 800aa20:	6213      	str	r3, [r2, #32]
 800aa22:	4b67      	ldr	r3, [pc, #412]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa24:	6a1b      	ldr	r3, [r3, #32]
 800aa26:	4a66      	ldr	r2, [pc, #408]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa28:	f023 0304 	bic.w	r3, r3, #4
 800aa2c:	6213      	str	r3, [r2, #32]
 800aa2e:	e01c      	b.n	800aa6a <HAL_RCC_OscConfig+0x36e>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	2b05      	cmp	r3, #5
 800aa36:	d10c      	bne.n	800aa52 <HAL_RCC_OscConfig+0x356>
 800aa38:	4b61      	ldr	r3, [pc, #388]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa3a:	6a1b      	ldr	r3, [r3, #32]
 800aa3c:	4a60      	ldr	r2, [pc, #384]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa3e:	f043 0304 	orr.w	r3, r3, #4
 800aa42:	6213      	str	r3, [r2, #32]
 800aa44:	4b5e      	ldr	r3, [pc, #376]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa46:	6a1b      	ldr	r3, [r3, #32]
 800aa48:	4a5d      	ldr	r2, [pc, #372]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa4a:	f043 0301 	orr.w	r3, r3, #1
 800aa4e:	6213      	str	r3, [r2, #32]
 800aa50:	e00b      	b.n	800aa6a <HAL_RCC_OscConfig+0x36e>
 800aa52:	4b5b      	ldr	r3, [pc, #364]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa54:	6a1b      	ldr	r3, [r3, #32]
 800aa56:	4a5a      	ldr	r2, [pc, #360]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa58:	f023 0301 	bic.w	r3, r3, #1
 800aa5c:	6213      	str	r3, [r2, #32]
 800aa5e:	4b58      	ldr	r3, [pc, #352]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa60:	6a1b      	ldr	r3, [r3, #32]
 800aa62:	4a57      	ldr	r2, [pc, #348]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa64:	f023 0304 	bic.w	r3, r3, #4
 800aa68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d015      	beq.n	800aa9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa72:	f7fd f893 	bl	8007b9c <HAL_GetTick>
 800aa76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa78:	e00a      	b.n	800aa90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa7a:	f7fd f88f 	bl	8007b9c <HAL_GetTick>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d901      	bls.n	800aa90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800aa8c:	2303      	movs	r3, #3
 800aa8e:	e0b1      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa90:	4b4b      	ldr	r3, [pc, #300]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa92:	6a1b      	ldr	r3, [r3, #32]
 800aa94:	f003 0302 	and.w	r3, r3, #2
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d0ee      	beq.n	800aa7a <HAL_RCC_OscConfig+0x37e>
 800aa9c:	e014      	b.n	800aac8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa9e:	f7fd f87d 	bl	8007b9c <HAL_GetTick>
 800aaa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aaa4:	e00a      	b.n	800aabc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aaa6:	f7fd f879 	bl	8007b9c <HAL_GetTick>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	1ad3      	subs	r3, r2, r3
 800aab0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d901      	bls.n	800aabc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800aab8:	2303      	movs	r3, #3
 800aaba:	e09b      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aabc:	4b40      	ldr	r3, [pc, #256]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aabe:	6a1b      	ldr	r3, [r3, #32]
 800aac0:	f003 0302 	and.w	r3, r3, #2
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d1ee      	bne.n	800aaa6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800aac8:	7dfb      	ldrb	r3, [r7, #23]
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d105      	bne.n	800aada <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aace:	4b3c      	ldr	r3, [pc, #240]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aad0:	69db      	ldr	r3, [r3, #28]
 800aad2:	4a3b      	ldr	r2, [pc, #236]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aad4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aad8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	69db      	ldr	r3, [r3, #28]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	f000 8087 	beq.w	800abf2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aae4:	4b36      	ldr	r3, [pc, #216]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	f003 030c 	and.w	r3, r3, #12
 800aaec:	2b08      	cmp	r3, #8
 800aaee:	d061      	beq.n	800abb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	69db      	ldr	r3, [r3, #28]
 800aaf4:	2b02      	cmp	r3, #2
 800aaf6:	d146      	bne.n	800ab86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aaf8:	4b33      	ldr	r3, [pc, #204]	@ (800abc8 <HAL_RCC_OscConfig+0x4cc>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aafe:	f7fd f84d 	bl	8007b9c <HAL_GetTick>
 800ab02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab04:	e008      	b.n	800ab18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab06:	f7fd f849 	bl	8007b9c <HAL_GetTick>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	1ad3      	subs	r3, r2, r3
 800ab10:	2b02      	cmp	r3, #2
 800ab12:	d901      	bls.n	800ab18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ab14:	2303      	movs	r3, #3
 800ab16:	e06d      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab18:	4b29      	ldr	r3, [pc, #164]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1f0      	bne.n	800ab06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a1b      	ldr	r3, [r3, #32]
 800ab28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab2c:	d108      	bne.n	800ab40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ab2e:	4b24      	ldr	r3, [pc, #144]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	4921      	ldr	r1, [pc, #132]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ab40:	4b1f      	ldr	r3, [pc, #124]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a19      	ldr	r1, [r3, #32]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab50:	430b      	orrs	r3, r1
 800ab52:	491b      	ldr	r1, [pc, #108]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab54:	4313      	orrs	r3, r2
 800ab56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab58:	4b1b      	ldr	r3, [pc, #108]	@ (800abc8 <HAL_RCC_OscConfig+0x4cc>)
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab5e:	f7fd f81d 	bl	8007b9c <HAL_GetTick>
 800ab62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ab64:	e008      	b.n	800ab78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab66:	f7fd f819 	bl	8007b9c <HAL_GetTick>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	1ad3      	subs	r3, r2, r3
 800ab70:	2b02      	cmp	r3, #2
 800ab72:	d901      	bls.n	800ab78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ab74:	2303      	movs	r3, #3
 800ab76:	e03d      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ab78:	4b11      	ldr	r3, [pc, #68]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d0f0      	beq.n	800ab66 <HAL_RCC_OscConfig+0x46a>
 800ab84:	e035      	b.n	800abf2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab86:	4b10      	ldr	r3, [pc, #64]	@ (800abc8 <HAL_RCC_OscConfig+0x4cc>)
 800ab88:	2200      	movs	r2, #0
 800ab8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab8c:	f7fd f806 	bl	8007b9c <HAL_GetTick>
 800ab90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab92:	e008      	b.n	800aba6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab94:	f7fd f802 	bl	8007b9c <HAL_GetTick>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	1ad3      	subs	r3, r2, r3
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	d901      	bls.n	800aba6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800aba2:	2303      	movs	r3, #3
 800aba4:	e026      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aba6:	4b06      	ldr	r3, [pc, #24]	@ (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1f0      	bne.n	800ab94 <HAL_RCC_OscConfig+0x498>
 800abb2:	e01e      	b.n	800abf2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	69db      	ldr	r3, [r3, #28]
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d107      	bne.n	800abcc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800abbc:	2301      	movs	r3, #1
 800abbe:	e019      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
 800abc0:	40021000 	.word	0x40021000
 800abc4:	40007000 	.word	0x40007000
 800abc8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800abcc:	4b0b      	ldr	r3, [pc, #44]	@ (800abfc <HAL_RCC_OscConfig+0x500>)
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6a1b      	ldr	r3, [r3, #32]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d106      	bne.n	800abee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abea:	429a      	cmp	r2, r3
 800abec:	d001      	beq.n	800abf2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	e000      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3718      	adds	r7, #24
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	40021000 	.word	0x40021000

0800ac00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d101      	bne.n	800ac14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	e0d0      	b.n	800adb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ac14:	4b6a      	ldr	r3, [pc, #424]	@ (800adc0 <HAL_RCC_ClockConfig+0x1c0>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f003 0307 	and.w	r3, r3, #7
 800ac1c:	683a      	ldr	r2, [r7, #0]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d910      	bls.n	800ac44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac22:	4b67      	ldr	r3, [pc, #412]	@ (800adc0 <HAL_RCC_ClockConfig+0x1c0>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f023 0207 	bic.w	r2, r3, #7
 800ac2a:	4965      	ldr	r1, [pc, #404]	@ (800adc0 <HAL_RCC_ClockConfig+0x1c0>)
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac32:	4b63      	ldr	r3, [pc, #396]	@ (800adc0 <HAL_RCC_ClockConfig+0x1c0>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f003 0307 	and.w	r3, r3, #7
 800ac3a:	683a      	ldr	r2, [r7, #0]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d001      	beq.n	800ac44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ac40:	2301      	movs	r3, #1
 800ac42:	e0b8      	b.n	800adb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f003 0302 	and.w	r3, r3, #2
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d020      	beq.n	800ac92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f003 0304 	and.w	r3, r3, #4
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d005      	beq.n	800ac68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ac5c:	4b59      	ldr	r3, [pc, #356]	@ (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	4a58      	ldr	r2, [pc, #352]	@ (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ac62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800ac66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f003 0308 	and.w	r3, r3, #8
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d005      	beq.n	800ac80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ac74:	4b53      	ldr	r3, [pc, #332]	@ (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	4a52      	ldr	r2, [pc, #328]	@ (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ac7a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800ac7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac80:	4b50      	ldr	r3, [pc, #320]	@ (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	494d      	ldr	r1, [pc, #308]	@ (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f003 0301 	and.w	r3, r3, #1
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d040      	beq.n	800ad20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	d107      	bne.n	800acb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aca6:	4b47      	ldr	r3, [pc, #284]	@ (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d115      	bne.n	800acde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800acb2:	2301      	movs	r3, #1
 800acb4:	e07f      	b.n	800adb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	2b02      	cmp	r3, #2
 800acbc:	d107      	bne.n	800acce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800acbe:	4b41      	ldr	r3, [pc, #260]	@ (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d109      	bne.n	800acde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800acca:	2301      	movs	r3, #1
 800accc:	e073      	b.n	800adb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800acce:	4b3d      	ldr	r3, [pc, #244]	@ (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 0302 	and.w	r3, r3, #2
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d101      	bne.n	800acde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800acda:	2301      	movs	r3, #1
 800acdc:	e06b      	b.n	800adb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800acde:	4b39      	ldr	r3, [pc, #228]	@ (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	f023 0203 	bic.w	r2, r3, #3
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	4936      	ldr	r1, [pc, #216]	@ (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800acec:	4313      	orrs	r3, r2
 800acee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800acf0:	f7fc ff54 	bl	8007b9c <HAL_GetTick>
 800acf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800acf6:	e00a      	b.n	800ad0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800acf8:	f7fc ff50 	bl	8007b9c <HAL_GetTick>
 800acfc:	4602      	mov	r2, r0
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	1ad3      	subs	r3, r2, r3
 800ad02:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d901      	bls.n	800ad0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ad0a:	2303      	movs	r3, #3
 800ad0c:	e053      	b.n	800adb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad0e:	4b2d      	ldr	r3, [pc, #180]	@ (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	f003 020c 	and.w	r2, r3, #12
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d1eb      	bne.n	800acf8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ad20:	4b27      	ldr	r3, [pc, #156]	@ (800adc0 <HAL_RCC_ClockConfig+0x1c0>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f003 0307 	and.w	r3, r3, #7
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d210      	bcs.n	800ad50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad2e:	4b24      	ldr	r3, [pc, #144]	@ (800adc0 <HAL_RCC_ClockConfig+0x1c0>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f023 0207 	bic.w	r2, r3, #7
 800ad36:	4922      	ldr	r1, [pc, #136]	@ (800adc0 <HAL_RCC_ClockConfig+0x1c0>)
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad3e:	4b20      	ldr	r3, [pc, #128]	@ (800adc0 <HAL_RCC_ClockConfig+0x1c0>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f003 0307 	and.w	r3, r3, #7
 800ad46:	683a      	ldr	r2, [r7, #0]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d001      	beq.n	800ad50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e032      	b.n	800adb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f003 0304 	and.w	r3, r3, #4
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d008      	beq.n	800ad6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ad5c:	4b19      	ldr	r3, [pc, #100]	@ (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	4916      	ldr	r1, [pc, #88]	@ (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f003 0308 	and.w	r3, r3, #8
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d009      	beq.n	800ad8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ad7a:	4b12      	ldr	r3, [pc, #72]	@ (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	00db      	lsls	r3, r3, #3
 800ad88:	490e      	ldr	r1, [pc, #56]	@ (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ad8e:	f000 f821 	bl	800add4 <HAL_RCC_GetSysClockFreq>
 800ad92:	4602      	mov	r2, r0
 800ad94:	4b0b      	ldr	r3, [pc, #44]	@ (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	091b      	lsrs	r3, r3, #4
 800ad9a:	f003 030f 	and.w	r3, r3, #15
 800ad9e:	490a      	ldr	r1, [pc, #40]	@ (800adc8 <HAL_RCC_ClockConfig+0x1c8>)
 800ada0:	5ccb      	ldrb	r3, [r1, r3]
 800ada2:	fa22 f303 	lsr.w	r3, r2, r3
 800ada6:	4a09      	ldr	r2, [pc, #36]	@ (800adcc <HAL_RCC_ClockConfig+0x1cc>)
 800ada8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800adaa:	4b09      	ldr	r3, [pc, #36]	@ (800add0 <HAL_RCC_ClockConfig+0x1d0>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4618      	mov	r0, r3
 800adb0:	f7fa fed0 	bl	8005b54 <HAL_InitTick>

  return HAL_OK;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	40022000 	.word	0x40022000
 800adc4:	40021000 	.word	0x40021000
 800adc8:	08015f38 	.word	0x08015f38
 800adcc:	20000028 	.word	0x20000028
 800add0:	20000038 	.word	0x20000038

0800add4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800add4:	b480      	push	{r7}
 800add6:	b087      	sub	sp, #28
 800add8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800adda:	2300      	movs	r3, #0
 800addc:	60fb      	str	r3, [r7, #12]
 800adde:	2300      	movs	r3, #0
 800ade0:	60bb      	str	r3, [r7, #8]
 800ade2:	2300      	movs	r3, #0
 800ade4:	617b      	str	r3, [r7, #20]
 800ade6:	2300      	movs	r3, #0
 800ade8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800adea:	2300      	movs	r3, #0
 800adec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800adee:	4b1e      	ldr	r3, [pc, #120]	@ (800ae68 <HAL_RCC_GetSysClockFreq+0x94>)
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f003 030c 	and.w	r3, r3, #12
 800adfa:	2b04      	cmp	r3, #4
 800adfc:	d002      	beq.n	800ae04 <HAL_RCC_GetSysClockFreq+0x30>
 800adfe:	2b08      	cmp	r3, #8
 800ae00:	d003      	beq.n	800ae0a <HAL_RCC_GetSysClockFreq+0x36>
 800ae02:	e027      	b.n	800ae54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ae04:	4b19      	ldr	r3, [pc, #100]	@ (800ae6c <HAL_RCC_GetSysClockFreq+0x98>)
 800ae06:	613b      	str	r3, [r7, #16]
      break;
 800ae08:	e027      	b.n	800ae5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	0c9b      	lsrs	r3, r3, #18
 800ae0e:	f003 030f 	and.w	r3, r3, #15
 800ae12:	4a17      	ldr	r2, [pc, #92]	@ (800ae70 <HAL_RCC_GetSysClockFreq+0x9c>)
 800ae14:	5cd3      	ldrb	r3, [r2, r3]
 800ae16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d010      	beq.n	800ae44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ae22:	4b11      	ldr	r3, [pc, #68]	@ (800ae68 <HAL_RCC_GetSysClockFreq+0x94>)
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	0c5b      	lsrs	r3, r3, #17
 800ae28:	f003 0301 	and.w	r3, r3, #1
 800ae2c:	4a11      	ldr	r2, [pc, #68]	@ (800ae74 <HAL_RCC_GetSysClockFreq+0xa0>)
 800ae2e:	5cd3      	ldrb	r3, [r2, r3]
 800ae30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	4a0d      	ldr	r2, [pc, #52]	@ (800ae6c <HAL_RCC_GetSysClockFreq+0x98>)
 800ae36:	fb03 f202 	mul.w	r2, r3, r2
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae40:	617b      	str	r3, [r7, #20]
 800ae42:	e004      	b.n	800ae4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	4a0c      	ldr	r2, [pc, #48]	@ (800ae78 <HAL_RCC_GetSysClockFreq+0xa4>)
 800ae48:	fb02 f303 	mul.w	r3, r2, r3
 800ae4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	613b      	str	r3, [r7, #16]
      break;
 800ae52:	e002      	b.n	800ae5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ae54:	4b05      	ldr	r3, [pc, #20]	@ (800ae6c <HAL_RCC_GetSysClockFreq+0x98>)
 800ae56:	613b      	str	r3, [r7, #16]
      break;
 800ae58:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ae5a:	693b      	ldr	r3, [r7, #16]
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	371c      	adds	r7, #28
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bc80      	pop	{r7}
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop
 800ae68:	40021000 	.word	0x40021000
 800ae6c:	007a1200 	.word	0x007a1200
 800ae70:	08015f50 	.word	0x08015f50
 800ae74:	08015f60 	.word	0x08015f60
 800ae78:	003d0900 	.word	0x003d0900

0800ae7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ae80:	4b02      	ldr	r3, [pc, #8]	@ (800ae8c <HAL_RCC_GetHCLKFreq+0x10>)
 800ae82:	681b      	ldr	r3, [r3, #0]
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bc80      	pop	{r7}
 800ae8a:	4770      	bx	lr
 800ae8c:	20000028 	.word	0x20000028

0800ae90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ae94:	f7ff fff2 	bl	800ae7c <HAL_RCC_GetHCLKFreq>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	4b05      	ldr	r3, [pc, #20]	@ (800aeb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	0a1b      	lsrs	r3, r3, #8
 800aea0:	f003 0307 	and.w	r3, r3, #7
 800aea4:	4903      	ldr	r1, [pc, #12]	@ (800aeb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aea6:	5ccb      	ldrb	r3, [r1, r3]
 800aea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	40021000 	.word	0x40021000
 800aeb4:	08015f48 	.word	0x08015f48

0800aeb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800aebc:	f7ff ffde 	bl	800ae7c <HAL_RCC_GetHCLKFreq>
 800aec0:	4602      	mov	r2, r0
 800aec2:	4b05      	ldr	r3, [pc, #20]	@ (800aed8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	0adb      	lsrs	r3, r3, #11
 800aec8:	f003 0307 	and.w	r3, r3, #7
 800aecc:	4903      	ldr	r1, [pc, #12]	@ (800aedc <HAL_RCC_GetPCLK2Freq+0x24>)
 800aece:	5ccb      	ldrb	r3, [r1, r3]
 800aed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	40021000 	.word	0x40021000
 800aedc:	08015f48 	.word	0x08015f48

0800aee0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	220f      	movs	r2, #15
 800aeee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800aef0:	4b11      	ldr	r3, [pc, #68]	@ (800af38 <HAL_RCC_GetClockConfig+0x58>)
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	f003 0203 	and.w	r2, r3, #3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800aefc:	4b0e      	ldr	r3, [pc, #56]	@ (800af38 <HAL_RCC_GetClockConfig+0x58>)
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800af08:	4b0b      	ldr	r3, [pc, #44]	@ (800af38 <HAL_RCC_GetClockConfig+0x58>)
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800af14:	4b08      	ldr	r3, [pc, #32]	@ (800af38 <HAL_RCC_GetClockConfig+0x58>)
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	08db      	lsrs	r3, r3, #3
 800af1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800af22:	4b06      	ldr	r3, [pc, #24]	@ (800af3c <HAL_RCC_GetClockConfig+0x5c>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f003 0207 	and.w	r2, r3, #7
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800af2e:	bf00      	nop
 800af30:	370c      	adds	r7, #12
 800af32:	46bd      	mov	sp, r7
 800af34:	bc80      	pop	{r7}
 800af36:	4770      	bx	lr
 800af38:	40021000 	.word	0x40021000
 800af3c:	40022000 	.word	0x40022000

0800af40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800af48:	4b0a      	ldr	r3, [pc, #40]	@ (800af74 <RCC_Delay+0x34>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a0a      	ldr	r2, [pc, #40]	@ (800af78 <RCC_Delay+0x38>)
 800af4e:	fba2 2303 	umull	r2, r3, r2, r3
 800af52:	0a5b      	lsrs	r3, r3, #9
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	fb02 f303 	mul.w	r3, r2, r3
 800af5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800af5c:	bf00      	nop
  }
  while (Delay --);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	1e5a      	subs	r2, r3, #1
 800af62:	60fa      	str	r2, [r7, #12]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d1f9      	bne.n	800af5c <RCC_Delay+0x1c>
}
 800af68:	bf00      	nop
 800af6a:	bf00      	nop
 800af6c:	3714      	adds	r7, #20
 800af6e:	46bd      	mov	sp, r7
 800af70:	bc80      	pop	{r7}
 800af72:	4770      	bx	lr
 800af74:	20000028 	.word	0x20000028
 800af78:	10624dd3 	.word	0x10624dd3

0800af7c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d101      	bne.n	800af8e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800af8a:	2301      	movs	r3, #1
 800af8c:	e022      	b.n	800afd4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800af94:	b2db      	uxtb	r3, r3
 800af96:	2b00      	cmp	r3, #0
 800af98:	d105      	bne.n	800afa6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2200      	movs	r2, #0
 800af9e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f7fa fd45 	bl	8005a30 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2203      	movs	r2, #3
 800afaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 f814 	bl	800afdc <HAL_SD_InitCard>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d001      	beq.n	800afbe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800afba:	2301      	movs	r3, #1
 800afbc:	e00a      	b.n	800afd4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2201      	movs	r2, #1
 800afce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800afd2:	2300      	movs	r3, #0
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3708      	adds	r7, #8
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800afdc:	b5b0      	push	{r4, r5, r7, lr}
 800afde:	b08e      	sub	sp, #56	@ 0x38
 800afe0:	af04      	add	r7, sp, #16
 800afe2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800afe4:	2300      	movs	r3, #0
 800afe6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800afe8:	2300      	movs	r3, #0
 800afea:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800afec:	2300      	movs	r3, #0
 800afee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800aff0:	2300      	movs	r3, #0
 800aff2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800aff4:	2300      	movs	r3, #0
 800aff6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800aff8:	2376      	movs	r3, #118	@ 0x76
 800affa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681d      	ldr	r5, [r3, #0]
 800b000:	466c      	mov	r4, sp
 800b002:	f107 0314 	add.w	r3, r7, #20
 800b006:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b00a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b00e:	f107 0308 	add.w	r3, r7, #8
 800b012:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b014:	4628      	mov	r0, r5
 800b016:	f002 fec3 	bl	800dda0 <SDIO_Init>
 800b01a:	4603      	mov	r3, r0
 800b01c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800b020:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b024:	2b00      	cmp	r3, #0
 800b026:	d001      	beq.n	800b02c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b028:	2301      	movs	r3, #1
 800b02a:	e04f      	b.n	800b0cc <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800b02c:	4b29      	ldr	r3, [pc, #164]	@ (800b0d4 <HAL_SD_InitCard+0xf8>)
 800b02e:	2200      	movs	r2, #0
 800b030:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4618      	mov	r0, r3
 800b038:	f002 fef8 	bl	800de2c <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800b03c:	4b25      	ldr	r3, [pc, #148]	@ (800b0d4 <HAL_SD_InitCard+0xf8>)
 800b03e:	2201      	movs	r2, #1
 800b040:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800b042:	2002      	movs	r0, #2
 800b044:	f7fc fdb4 	bl	8007bb0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 fe69 	bl	800bd20 <SD_PowerON>
 800b04e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b050:	6a3b      	ldr	r3, [r7, #32]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00b      	beq.n	800b06e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2201      	movs	r2, #1
 800b05a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b062:	6a3b      	ldr	r3, [r7, #32]
 800b064:	431a      	orrs	r2, r3
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b06a:	2301      	movs	r3, #1
 800b06c:	e02e      	b.n	800b0cc <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 fd87 	bl	800bb82 <SD_InitCard>
 800b074:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b076:	6a3b      	ldr	r3, [r7, #32]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00b      	beq.n	800b094 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2201      	movs	r2, #1
 800b080:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b088:	6a3b      	ldr	r3, [r7, #32]
 800b08a:	431a      	orrs	r2, r3
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b090:	2301      	movs	r3, #1
 800b092:	e01b      	b.n	800b0cc <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b09c:	4618      	mov	r0, r3
 800b09e:	f002 ff51 	bl	800df44 <SDMMC_CmdBlockLength>
 800b0a2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0a4:	6a3b      	ldr	r3, [r7, #32]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00f      	beq.n	800b0ca <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a0a      	ldr	r2, [pc, #40]	@ (800b0d8 <HAL_SD_InitCard+0xfc>)
 800b0b0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0b6:	6a3b      	ldr	r3, [r7, #32]
 800b0b8:	431a      	orrs	r2, r3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e000      	b.n	800b0cc <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3728      	adds	r7, #40	@ 0x28
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bdb0      	pop	{r4, r5, r7, pc}
 800b0d4:	423000a0 	.word	0x423000a0
 800b0d8:	004005ff 	.word	0x004005ff

0800b0dc <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b092      	sub	sp, #72	@ 0x48
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	607a      	str	r2, [r7, #4]
 800b0e8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b0ea:	f7fc fd57 	bl	8007b9c <HAL_GetTick>
 800b0ee:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d107      	bne.n	800b10e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b102:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b10a:	2301      	movs	r3, #1
 800b10c:	e1bd      	b.n	800b48a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b114:	b2db      	uxtb	r3, r3
 800b116:	2b01      	cmp	r3, #1
 800b118:	f040 81b0 	bne.w	800b47c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2200      	movs	r2, #0
 800b120:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b122:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	441a      	add	r2, r3
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d907      	bls.n	800b140 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b134:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800b13c:	2301      	movs	r3, #1
 800b13e:	e1a4      	b.n	800b48a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2203      	movs	r2, #3
 800b144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2200      	movs	r2, #0
 800b14e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b154:	2b01      	cmp	r3, #1
 800b156:	d002      	beq.n	800b15e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800b158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b15a:	025b      	lsls	r3, r3, #9
 800b15c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b15e:	f04f 33ff 	mov.w	r3, #4294967295
 800b162:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	025b      	lsls	r3, r3, #9
 800b168:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b16a:	2390      	movs	r3, #144	@ 0x90
 800b16c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b16e:	2302      	movs	r3, #2
 800b170:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b172:	2300      	movs	r3, #0
 800b174:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800b176:	2301      	movs	r3, #1
 800b178:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f107 0214 	add.w	r2, r7, #20
 800b182:	4611      	mov	r1, r2
 800b184:	4618      	mov	r0, r3
 800b186:	f002 feb2 	bl	800deee <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d90a      	bls.n	800b1a6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2202      	movs	r2, #2
 800b194:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b19c:	4618      	mov	r0, r3
 800b19e:	f002 ff15 	bl	800dfcc <SDMMC_CmdReadMultiBlock>
 800b1a2:	6478      	str	r0, [r7, #68]	@ 0x44
 800b1a4:	e009      	b.n	800b1ba <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f002 fee8 	bl	800df88 <SDMMC_CmdReadSingleBlock>
 800b1b8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b1ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d012      	beq.n	800b1e6 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a7a      	ldr	r2, [pc, #488]	@ (800b3b0 <HAL_SD_ReadBlocks+0x2d4>)
 800b1c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1ce:	431a      	orrs	r2, r3
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	e151      	b.n	800b48a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b1ea:	e061      	b.n	800b2b0 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d03c      	beq.n	800b274 <HAL_SD_ReadBlocks+0x198>
 800b1fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d039      	beq.n	800b274 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800b200:	2300      	movs	r3, #0
 800b202:	643b      	str	r3, [r7, #64]	@ 0x40
 800b204:	e033      	b.n	800b26e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4618      	mov	r0, r3
 800b20c:	f002 fdf2 	bl	800ddf4 <SDIO_ReadFIFO>
 800b210:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800b212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b214:	b2da      	uxtb	r2, r3
 800b216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b218:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b21a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b21c:	3301      	adds	r3, #1
 800b21e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b222:	3b01      	subs	r3, #1
 800b224:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b228:	0a1b      	lsrs	r3, r3, #8
 800b22a:	b2da      	uxtb	r2, r3
 800b22c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b22e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b232:	3301      	adds	r3, #1
 800b234:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b238:	3b01      	subs	r3, #1
 800b23a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b23e:	0c1b      	lsrs	r3, r3, #16
 800b240:	b2da      	uxtb	r2, r3
 800b242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b244:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b248:	3301      	adds	r3, #1
 800b24a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b24c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b24e:	3b01      	subs	r3, #1
 800b250:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b254:	0e1b      	lsrs	r3, r3, #24
 800b256:	b2da      	uxtb	r2, r3
 800b258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b25a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b25c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b25e:	3301      	adds	r3, #1
 800b260:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b264:	3b01      	subs	r3, #1
 800b266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800b268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b26a:	3301      	adds	r3, #1
 800b26c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b26e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b270:	2b07      	cmp	r3, #7
 800b272:	d9c8      	bls.n	800b206 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b274:	f7fc fc92 	bl	8007b9c <HAL_GetTick>
 800b278:	4602      	mov	r2, r0
 800b27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b27c:	1ad3      	subs	r3, r2, r3
 800b27e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b280:	429a      	cmp	r2, r3
 800b282:	d902      	bls.n	800b28a <HAL_SD_ReadBlocks+0x1ae>
 800b284:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b286:	2b00      	cmp	r3, #0
 800b288:	d112      	bne.n	800b2b0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4a48      	ldr	r2, [pc, #288]	@ (800b3b0 <HAL_SD_ReadBlocks+0x2d4>)
 800b290:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b296:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800b2ac:	2303      	movs	r3, #3
 800b2ae:	e0ec      	b.n	800b48a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b2b6:	f240 332a 	movw	r3, #810	@ 0x32a
 800b2ba:	4013      	ands	r3, r2
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d095      	beq.n	800b1ec <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d022      	beq.n	800b314 <HAL_SD_ReadBlocks+0x238>
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d91f      	bls.n	800b314 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2d8:	2b03      	cmp	r3, #3
 800b2da:	d01b      	beq.n	800b314 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f002 fed9 	bl	800e098 <SDMMC_CmdStopTransfer>
 800b2e6:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800b2e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d012      	beq.n	800b314 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a2f      	ldr	r2, [pc, #188]	@ (800b3b0 <HAL_SD_ReadBlocks+0x2d4>)
 800b2f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2fc:	431a      	orrs	r2, r3
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2201      	movs	r2, #1
 800b306:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2200      	movs	r2, #0
 800b30e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800b310:	2301      	movs	r3, #1
 800b312:	e0ba      	b.n	800b48a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b31a:	f003 0308 	and.w	r3, r3, #8
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d012      	beq.n	800b348 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4a22      	ldr	r2, [pc, #136]	@ (800b3b0 <HAL_SD_ReadBlocks+0x2d4>)
 800b328:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b32e:	f043 0208 	orr.w	r2, r3, #8
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2201      	movs	r2, #1
 800b33a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2200      	movs	r2, #0
 800b342:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b344:	2301      	movs	r3, #1
 800b346:	e0a0      	b.n	800b48a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b34e:	f003 0302 	and.w	r3, r3, #2
 800b352:	2b00      	cmp	r3, #0
 800b354:	d012      	beq.n	800b37c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a15      	ldr	r2, [pc, #84]	@ (800b3b0 <HAL_SD_ReadBlocks+0x2d4>)
 800b35c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b362:	f043 0202 	orr.w	r2, r3, #2
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2201      	movs	r2, #1
 800b36e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2200      	movs	r2, #0
 800b376:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b378:	2301      	movs	r3, #1
 800b37a:	e086      	b.n	800b48a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b382:	f003 0320 	and.w	r3, r3, #32
 800b386:	2b00      	cmp	r3, #0
 800b388:	d063      	beq.n	800b452 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4a08      	ldr	r2, [pc, #32]	@ (800b3b0 <HAL_SD_ReadBlocks+0x2d4>)
 800b390:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b396:	f043 0220 	orr.w	r2, r3, #32
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	e06c      	b.n	800b48a <HAL_SD_ReadBlocks+0x3ae>
 800b3b0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f002 fd1b 	bl	800ddf4 <SDIO_ReadFIFO>
 800b3be:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800b3c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3c2:	b2da      	uxtb	r2, r3
 800b3c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3c6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b3c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800b3ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b3d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3d6:	0a1b      	lsrs	r3, r3, #8
 800b3d8:	b2da      	uxtb	r2, r3
 800b3da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3dc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b3de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800b3e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b3ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ec:	0c1b      	lsrs	r3, r3, #16
 800b3ee:	b2da      	uxtb	r2, r3
 800b3f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3f2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b3f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800b3fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3fc:	3b01      	subs	r3, #1
 800b3fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b402:	0e1b      	lsrs	r3, r3, #24
 800b404:	b2da      	uxtb	r2, r3
 800b406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b408:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b40a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b40c:	3301      	adds	r3, #1
 800b40e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800b410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b412:	3b01      	subs	r3, #1
 800b414:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b416:	f7fc fbc1 	bl	8007b9c <HAL_GetTick>
 800b41a:	4602      	mov	r2, r0
 800b41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b41e:	1ad3      	subs	r3, r2, r3
 800b420:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b422:	429a      	cmp	r2, r3
 800b424:	d902      	bls.n	800b42c <HAL_SD_ReadBlocks+0x350>
 800b426:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d112      	bne.n	800b452 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a18      	ldr	r2, [pc, #96]	@ (800b494 <HAL_SD_ReadBlocks+0x3b8>)
 800b432:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b438:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2201      	movs	r2, #1
 800b444:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2200      	movs	r2, #0
 800b44c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800b44e:	2301      	movs	r3, #1
 800b450:	e01b      	b.n	800b48a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b458:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d002      	beq.n	800b466 <HAL_SD_ReadBlocks+0x38a>
 800b460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b462:	2b00      	cmp	r3, #0
 800b464:	d1a6      	bne.n	800b3b4 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800b46e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2201      	movs	r2, #1
 800b474:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800b478:	2300      	movs	r3, #0
 800b47a:	e006      	b.n	800b48a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b480:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b488:	2301      	movs	r3, #1
  }
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3748      	adds	r7, #72	@ 0x48
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	004005ff 	.word	0x004005ff

0800b498 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b092      	sub	sp, #72	@ 0x48
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	607a      	str	r2, [r7, #4]
 800b4a4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b4a6:	f7fc fb79 	bl	8007b9c <HAL_GetTick>
 800b4aa:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d107      	bne.n	800b4ca <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4be:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e166      	b.n	800b798 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	f040 8159 	bne.w	800b78a <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b4de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	441a      	add	r2, r3
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d907      	bls.n	800b4fc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4f0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	e14d      	b.n	800b798 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2203      	movs	r2, #3
 800b500:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2200      	movs	r2, #0
 800b50a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b510:	2b01      	cmp	r3, #1
 800b512:	d002      	beq.n	800b51a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800b514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b516:	025b      	lsls	r3, r3, #9
 800b518:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b51a:	f04f 33ff 	mov.w	r3, #4294967295
 800b51e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	025b      	lsls	r3, r3, #9
 800b524:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b526:	2390      	movs	r3, #144	@ 0x90
 800b528:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800b52a:	2300      	movs	r3, #0
 800b52c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b52e:	2300      	movs	r3, #0
 800b530:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800b532:	2301      	movs	r3, #1
 800b534:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f107 0218 	add.w	r2, r7, #24
 800b53e:	4611      	mov	r1, r2
 800b540:	4618      	mov	r0, r3
 800b542:	f002 fcd4 	bl	800deee <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d90a      	bls.n	800b562 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2220      	movs	r2, #32
 800b550:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b558:	4618      	mov	r0, r3
 800b55a:	f002 fd7b 	bl	800e054 <SDMMC_CmdWriteMultiBlock>
 800b55e:	6478      	str	r0, [r7, #68]	@ 0x44
 800b560:	e009      	b.n	800b576 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2210      	movs	r2, #16
 800b566:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b56e:	4618      	mov	r0, r3
 800b570:	f002 fd4e 	bl	800e010 <SDMMC_CmdWriteSingleBlock>
 800b574:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b576:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d012      	beq.n	800b5a2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a87      	ldr	r2, [pc, #540]	@ (800b7a0 <HAL_SD_WriteBlocks+0x308>)
 800b582:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b588:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b58a:	431a      	orrs	r2, r3
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2201      	movs	r2, #1
 800b594:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2200      	movs	r2, #0
 800b59c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	e0fa      	b.n	800b798 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800b5a2:	69fb      	ldr	r3, [r7, #28]
 800b5a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b5a6:	e065      	b.n	800b674 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d040      	beq.n	800b638 <HAL_SD_WriteBlocks+0x1a0>
 800b5b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d03d      	beq.n	800b638 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800b5bc:	2300      	movs	r3, #0
 800b5be:	643b      	str	r3, [r7, #64]	@ 0x40
 800b5c0:	e037      	b.n	800b632 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800b5c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b5c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b5ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800b5d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	021a      	lsls	r2, r3, #8
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b5e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b5e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800b5ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	041a      	lsls	r2, r3, #16
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b5f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b5fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b600:	3b01      	subs	r3, #1
 800b602:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800b604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	061a      	lsls	r2, r3, #24
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	4313      	orrs	r3, r2
 800b60e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b612:	3301      	adds	r3, #1
 800b614:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800b616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b618:	3b01      	subs	r3, #1
 800b61a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f107 0214 	add.w	r2, r7, #20
 800b624:	4611      	mov	r1, r2
 800b626:	4618      	mov	r0, r3
 800b628:	f002 fbf0 	bl	800de0c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800b62c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b62e:	3301      	adds	r3, #1
 800b630:	643b      	str	r3, [r7, #64]	@ 0x40
 800b632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b634:	2b07      	cmp	r3, #7
 800b636:	d9c4      	bls.n	800b5c2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b638:	f7fc fab0 	bl	8007b9c <HAL_GetTick>
 800b63c:	4602      	mov	r2, r0
 800b63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b640:	1ad3      	subs	r3, r2, r3
 800b642:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b644:	429a      	cmp	r2, r3
 800b646:	d902      	bls.n	800b64e <HAL_SD_WriteBlocks+0x1b6>
 800b648:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d112      	bne.n	800b674 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4a53      	ldr	r2, [pc, #332]	@ (800b7a0 <HAL_SD_WriteBlocks+0x308>)
 800b654:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b65a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b65c:	431a      	orrs	r2, r3
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2201      	movs	r2, #1
 800b666:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2200      	movs	r2, #0
 800b66e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800b670:	2303      	movs	r3, #3
 800b672:	e091      	b.n	800b798 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b67a:	f240 331a 	movw	r3, #794	@ 0x31a
 800b67e:	4013      	ands	r3, r2
 800b680:	2b00      	cmp	r3, #0
 800b682:	d091      	beq.n	800b5a8 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b68a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d022      	beq.n	800b6d8 <HAL_SD_WriteBlocks+0x240>
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	2b01      	cmp	r3, #1
 800b696:	d91f      	bls.n	800b6d8 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b69c:	2b03      	cmp	r3, #3
 800b69e:	d01b      	beq.n	800b6d8 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f002 fcf7 	bl	800e098 <SDMMC_CmdStopTransfer>
 800b6aa:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800b6ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d012      	beq.n	800b6d8 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4a3a      	ldr	r2, [pc, #232]	@ (800b7a0 <HAL_SD_WriteBlocks+0x308>)
 800b6b8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6c0:	431a      	orrs	r2, r3
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	e05f      	b.n	800b798 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6de:	f003 0308 	and.w	r3, r3, #8
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d012      	beq.n	800b70c <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4a2d      	ldr	r2, [pc, #180]	@ (800b7a0 <HAL_SD_WriteBlocks+0x308>)
 800b6ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6f2:	f043 0208 	orr.w	r2, r3, #8
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2200      	movs	r2, #0
 800b706:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b708:	2301      	movs	r3, #1
 800b70a:	e045      	b.n	800b798 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b712:	f003 0302 	and.w	r3, r3, #2
 800b716:	2b00      	cmp	r3, #0
 800b718:	d012      	beq.n	800b740 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4a20      	ldr	r2, [pc, #128]	@ (800b7a0 <HAL_SD_WriteBlocks+0x308>)
 800b720:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b726:	f043 0202 	orr.w	r2, r3, #2
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2201      	movs	r2, #1
 800b732:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2200      	movs	r2, #0
 800b73a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b73c:	2301      	movs	r3, #1
 800b73e:	e02b      	b.n	800b798 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b746:	f003 0310 	and.w	r3, r3, #16
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d012      	beq.n	800b774 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	4a13      	ldr	r2, [pc, #76]	@ (800b7a0 <HAL_SD_WriteBlocks+0x308>)
 800b754:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b75a:	f043 0210 	orr.w	r2, r3, #16
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2201      	movs	r2, #1
 800b766:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	2200      	movs	r2, #0
 800b76e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800b770:	2301      	movs	r3, #1
 800b772:	e011      	b.n	800b798 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f240 523a 	movw	r2, #1338	@ 0x53a
 800b77c:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2201      	movs	r2, #1
 800b782:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800b786:	2300      	movs	r3, #0
 800b788:	e006      	b.n	800b798 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b78e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800b796:	2301      	movs	r3, #1
  }
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3748      	adds	r7, #72	@ 0x48
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	004005ff 	.word	0x004005ff

0800b7a4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7b2:	0f9b      	lsrs	r3, r3, #30
 800b7b4:	b2da      	uxtb	r2, r3
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7be:	0e9b      	lsrs	r3, r3, #26
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	f003 030f 	and.w	r3, r3, #15
 800b7c6:	b2da      	uxtb	r2, r3
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7d0:	0e1b      	lsrs	r3, r3, #24
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	f003 0303 	and.w	r3, r3, #3
 800b7d8:	b2da      	uxtb	r2, r3
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7e2:	0c1b      	lsrs	r3, r3, #16
 800b7e4:	b2da      	uxtb	r2, r3
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7ee:	0a1b      	lsrs	r3, r3, #8
 800b7f0:	b2da      	uxtb	r2, r3
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7fa:	b2da      	uxtb	r2, r3
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b804:	0d1b      	lsrs	r3, r3, #20
 800b806:	b29a      	uxth	r2, r3
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b810:	0c1b      	lsrs	r3, r3, #16
 800b812:	b2db      	uxtb	r3, r3
 800b814:	f003 030f 	and.w	r3, r3, #15
 800b818:	b2da      	uxtb	r2, r3
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b822:	0bdb      	lsrs	r3, r3, #15
 800b824:	b2db      	uxtb	r3, r3
 800b826:	f003 0301 	and.w	r3, r3, #1
 800b82a:	b2da      	uxtb	r2, r3
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b834:	0b9b      	lsrs	r3, r3, #14
 800b836:	b2db      	uxtb	r3, r3
 800b838:	f003 0301 	and.w	r3, r3, #1
 800b83c:	b2da      	uxtb	r2, r3
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b846:	0b5b      	lsrs	r3, r3, #13
 800b848:	b2db      	uxtb	r3, r3
 800b84a:	f003 0301 	and.w	r3, r3, #1
 800b84e:	b2da      	uxtb	r2, r3
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b858:	0b1b      	lsrs	r3, r3, #12
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	f003 0301 	and.w	r3, r3, #1
 800b860:	b2da      	uxtb	r2, r3
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	2200      	movs	r2, #0
 800b86a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b870:	2b00      	cmp	r3, #0
 800b872:	d163      	bne.n	800b93c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b878:	009a      	lsls	r2, r3, #2
 800b87a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800b87e:	4013      	ands	r3, r2
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800b884:	0f92      	lsrs	r2, r2, #30
 800b886:	431a      	orrs	r2, r3
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b890:	0edb      	lsrs	r3, r3, #27
 800b892:	b2db      	uxtb	r3, r3
 800b894:	f003 0307 	and.w	r3, r3, #7
 800b898:	b2da      	uxtb	r2, r3
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8a2:	0e1b      	lsrs	r3, r3, #24
 800b8a4:	b2db      	uxtb	r3, r3
 800b8a6:	f003 0307 	and.w	r3, r3, #7
 800b8aa:	b2da      	uxtb	r2, r3
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8b4:	0d5b      	lsrs	r3, r3, #21
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	f003 0307 	and.w	r3, r3, #7
 800b8bc:	b2da      	uxtb	r2, r3
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8c6:	0c9b      	lsrs	r3, r3, #18
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	f003 0307 	and.w	r3, r3, #7
 800b8ce:	b2da      	uxtb	r2, r3
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8d8:	0bdb      	lsrs	r3, r3, #15
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	f003 0307 	and.w	r3, r3, #7
 800b8e0:	b2da      	uxtb	r2, r3
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	691b      	ldr	r3, [r3, #16]
 800b8ea:	1c5a      	adds	r2, r3, #1
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	7e1b      	ldrb	r3, [r3, #24]
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	f003 0307 	and.w	r3, r3, #7
 800b8fa:	3302      	adds	r3, #2
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800b906:	fb03 f202 	mul.w	r2, r3, r2
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	7a1b      	ldrb	r3, [r3, #8]
 800b912:	b2db      	uxtb	r3, r3
 800b914:	f003 030f 	and.w	r3, r3, #15
 800b918:	2201      	movs	r2, #1
 800b91a:	409a      	lsls	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800b928:	0a52      	lsrs	r2, r2, #9
 800b92a:	fb03 f202 	mul.w	r2, r3, r2
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b938:	661a      	str	r2, [r3, #96]	@ 0x60
 800b93a:	e031      	b.n	800b9a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b940:	2b01      	cmp	r3, #1
 800b942:	d11d      	bne.n	800b980 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b948:	041b      	lsls	r3, r3, #16
 800b94a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b952:	0c1b      	lsrs	r3, r3, #16
 800b954:	431a      	orrs	r2, r3
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	691b      	ldr	r3, [r3, #16]
 800b95e:	3301      	adds	r3, #1
 800b960:	029a      	lsls	r2, r3, #10
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b974:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	661a      	str	r2, [r3, #96]	@ 0x60
 800b97e:	e00f      	b.n	800b9a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a58      	ldr	r2, [pc, #352]	@ (800bae8 <HAL_SD_GetCardCSD+0x344>)
 800b986:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b98c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2201      	movs	r2, #1
 800b998:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b99c:	2301      	movs	r3, #1
 800b99e:	e09d      	b.n	800badc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9a4:	0b9b      	lsrs	r3, r3, #14
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	f003 0301 	and.w	r3, r3, #1
 800b9ac:	b2da      	uxtb	r2, r3
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9b6:	09db      	lsrs	r3, r3, #7
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9be:	b2da      	uxtb	r2, r3
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9ce:	b2da      	uxtb	r2, r3
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9d8:	0fdb      	lsrs	r3, r3, #31
 800b9da:	b2da      	uxtb	r2, r3
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9e4:	0f5b      	lsrs	r3, r3, #29
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	f003 0303 	and.w	r3, r3, #3
 800b9ec:	b2da      	uxtb	r2, r3
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9f6:	0e9b      	lsrs	r3, r3, #26
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	f003 0307 	and.w	r3, r3, #7
 800b9fe:	b2da      	uxtb	r2, r3
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba08:	0d9b      	lsrs	r3, r3, #22
 800ba0a:	b2db      	uxtb	r3, r3
 800ba0c:	f003 030f 	and.w	r3, r3, #15
 800ba10:	b2da      	uxtb	r2, r3
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba1a:	0d5b      	lsrs	r3, r3, #21
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	f003 0301 	and.w	r3, r3, #1
 800ba22:	b2da      	uxtb	r2, r3
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba36:	0c1b      	lsrs	r3, r3, #16
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	f003 0301 	and.w	r3, r3, #1
 800ba3e:	b2da      	uxtb	r2, r3
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba4a:	0bdb      	lsrs	r3, r3, #15
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	f003 0301 	and.w	r3, r3, #1
 800ba52:	b2da      	uxtb	r2, r3
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba5e:	0b9b      	lsrs	r3, r3, #14
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	f003 0301 	and.w	r3, r3, #1
 800ba66:	b2da      	uxtb	r2, r3
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba72:	0b5b      	lsrs	r3, r3, #13
 800ba74:	b2db      	uxtb	r3, r3
 800ba76:	f003 0301 	and.w	r3, r3, #1
 800ba7a:	b2da      	uxtb	r2, r3
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba86:	0b1b      	lsrs	r3, r3, #12
 800ba88:	b2db      	uxtb	r3, r3
 800ba8a:	f003 0301 	and.w	r3, r3, #1
 800ba8e:	b2da      	uxtb	r2, r3
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba9a:	0a9b      	lsrs	r3, r3, #10
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	f003 0303 	and.w	r3, r3, #3
 800baa2:	b2da      	uxtb	r2, r3
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800baae:	0a1b      	lsrs	r3, r3, #8
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	f003 0303 	and.w	r3, r3, #3
 800bab6:	b2da      	uxtb	r2, r3
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bac2:	085b      	lsrs	r3, r3, #1
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800baca:	b2da      	uxtb	r2, r3
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	2201      	movs	r2, #1
 800bad6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800bada:	2300      	movs	r3, #0
}
 800badc:	4618      	mov	r0, r3
 800bade:	370c      	adds	r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bc80      	pop	{r7}
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop
 800bae8:	004005ff 	.word	0x004005ff

0800baec <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800baec:	b480      	push	{r7}
 800baee:	b083      	sub	sp, #12
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800bb36:	2300      	movs	r3, #0
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	370c      	adds	r7, #12
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bc80      	pop	{r7}
 800bb40:	4770      	bx	lr

0800bb42 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b086      	sub	sp, #24
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800bb4e:	f107 030c 	add.w	r3, r7, #12
 800bb52:	4619      	mov	r1, r3
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 f971 	bl	800be3c <SD_SendStatus>
 800bb5a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d005      	beq.n	800bb6e <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	431a      	orrs	r2, r3
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	0a5b      	lsrs	r3, r3, #9
 800bb72:	f003 030f 	and.w	r3, r3, #15
 800bb76:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800bb78:	693b      	ldr	r3, [r7, #16]
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3718      	adds	r7, #24
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}

0800bb82 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bb82:	b5b0      	push	{r4, r5, r7, lr}
 800bb84:	b094      	sub	sp, #80	@ 0x50
 800bb86:	af04      	add	r7, sp, #16
 800bb88:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	4618      	mov	r0, r3
 800bb94:	f002 f957 	bl	800de46 <SDIO_GetPowerState>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d102      	bne.n	800bba4 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bb9e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800bba2:	e0b8      	b.n	800bd16 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bba8:	2b03      	cmp	r3, #3
 800bbaa:	d02f      	beq.n	800bc0c <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f002 fb38 	bl	800e226 <SDMMC_CmdSendCID>
 800bbb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bbb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d001      	beq.n	800bbc2 <SD_InitCard+0x40>
    {
      return errorstate;
 800bbbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbc0:	e0a9      	b.n	800bd16 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	2100      	movs	r1, #0
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f002 f97e 	bl	800deca <SDIO_GetResponse>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	2104      	movs	r1, #4
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f002 f975 	bl	800deca <SDIO_GetResponse>
 800bbe0:	4602      	mov	r2, r0
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2108      	movs	r1, #8
 800bbec:	4618      	mov	r0, r3
 800bbee:	f002 f96c 	bl	800deca <SDIO_GetResponse>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	210c      	movs	r1, #12
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f002 f963 	bl	800deca <SDIO_GetResponse>
 800bc04:	4602      	mov	r2, r0
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc10:	2b03      	cmp	r3, #3
 800bc12:	d00d      	beq.n	800bc30 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f107 020e 	add.w	r2, r7, #14
 800bc1c:	4611      	mov	r1, r2
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f002 fb3e 	bl	800e2a0 <SDMMC_CmdSetRelAdd>
 800bc24:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d001      	beq.n	800bc30 <SD_InitCard+0xae>
    {
      return errorstate;
 800bc2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc2e:	e072      	b.n	800bd16 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc34:	2b03      	cmp	r3, #3
 800bc36:	d036      	beq.n	800bca6 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800bc38:	89fb      	ldrh	r3, [r7, #14]
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc48:	041b      	lsls	r3, r3, #16
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	4610      	mov	r0, r2
 800bc4e:	f002 fb08 	bl	800e262 <SDMMC_CmdSendCSD>
 800bc52:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d001      	beq.n	800bc5e <SD_InitCard+0xdc>
    {
      return errorstate;
 800bc5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc5c:	e05b      	b.n	800bd16 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	2100      	movs	r1, #0
 800bc64:	4618      	mov	r0, r3
 800bc66:	f002 f930 	bl	800deca <SDIO_GetResponse>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2104      	movs	r1, #4
 800bc76:	4618      	mov	r0, r3
 800bc78:	f002 f927 	bl	800deca <SDIO_GetResponse>
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2108      	movs	r1, #8
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f002 f91e 	bl	800deca <SDIO_GetResponse>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	210c      	movs	r1, #12
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f002 f915 	bl	800deca <SDIO_GetResponse>
 800bca0:	4602      	mov	r2, r0
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	2104      	movs	r1, #4
 800bcac:	4618      	mov	r0, r3
 800bcae:	f002 f90c 	bl	800deca <SDIO_GetResponse>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	0d1a      	lsrs	r2, r3, #20
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bcba:	f107 0310 	add.w	r3, r7, #16
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f7ff fd6f 	bl	800b7a4 <HAL_SD_GetCardCSD>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d002      	beq.n	800bcd2 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bccc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800bcd0:	e021      	b.n	800bd16 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6819      	ldr	r1, [r3, #0]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcda:	041b      	lsls	r3, r3, #16
 800bcdc:	2200      	movs	r2, #0
 800bcde:	461c      	mov	r4, r3
 800bce0:	4615      	mov	r5, r2
 800bce2:	4622      	mov	r2, r4
 800bce4:	462b      	mov	r3, r5
 800bce6:	4608      	mov	r0, r1
 800bce8:	f002 f9f8 	bl	800e0dc <SDMMC_CmdSelDesel>
 800bcec:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800bcee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d001      	beq.n	800bcf8 <SD_InitCard+0x176>
  {
    return errorstate;
 800bcf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcf6:	e00e      	b.n	800bd16 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681d      	ldr	r5, [r3, #0]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	466c      	mov	r4, sp
 800bd00:	f103 0210 	add.w	r2, r3, #16
 800bd04:	ca07      	ldmia	r2, {r0, r1, r2}
 800bd06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bd0a:	3304      	adds	r3, #4
 800bd0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd0e:	4628      	mov	r0, r5
 800bd10:	f002 f846 	bl	800dda0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800bd14:	2300      	movs	r3, #0
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3740      	adds	r7, #64	@ 0x40
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800bd20 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b086      	sub	sp, #24
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	617b      	str	r3, [r7, #20]
 800bd30:	2300      	movs	r3, #0
 800bd32:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f002 f9f2 	bl	800e122 <SDMMC_CmdGoIdleState>
 800bd3e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d001      	beq.n	800bd4a <SD_PowerON+0x2a>
  {
    return errorstate;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	e072      	b.n	800be30 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f002 fa05 	bl	800e15e <SDMMC_CmdOperCond>
 800bd54:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d00d      	beq.n	800bd78 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4618      	mov	r0, r3
 800bd68:	f002 f9db 	bl	800e122 <SDMMC_CmdGoIdleState>
 800bd6c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d004      	beq.n	800bd7e <SD_PowerON+0x5e>
    {
      return errorstate;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	e05b      	b.n	800be30 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d137      	bne.n	800bdf6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	2100      	movs	r1, #0
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f002 fa05 	bl	800e19c <SDMMC_CmdAppCommand>
 800bd92:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d02d      	beq.n	800bdf6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bd9a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800bd9e:	e047      	b.n	800be30 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	2100      	movs	r1, #0
 800bda6:	4618      	mov	r0, r3
 800bda8:	f002 f9f8 	bl	800e19c <SDMMC_CmdAppCommand>
 800bdac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d001      	beq.n	800bdb8 <SD_PowerON+0x98>
    {
      return errorstate;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	e03b      	b.n	800be30 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	491e      	ldr	r1, [pc, #120]	@ (800be38 <SD_PowerON+0x118>)
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f002 fa0e 	bl	800e1e0 <SDMMC_CmdAppOperCommand>
 800bdc4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d002      	beq.n	800bdd2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bdcc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800bdd0:	e02e      	b.n	800be30 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	2100      	movs	r1, #0
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f002 f876 	bl	800deca <SDIO_GetResponse>
 800bdde:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	0fdb      	lsrs	r3, r3, #31
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d101      	bne.n	800bdec <SD_PowerON+0xcc>
 800bde8:	2301      	movs	r3, #1
 800bdea:	e000      	b.n	800bdee <SD_PowerON+0xce>
 800bdec:	2300      	movs	r3, #0
 800bdee:	613b      	str	r3, [r7, #16]

    count++;
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d802      	bhi.n	800be06 <SD_PowerON+0xe6>
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d0cc      	beq.n	800bda0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d902      	bls.n	800be16 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800be10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800be14:	e00c      	b.n	800be30 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d003      	beq.n	800be28 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2201      	movs	r2, #1
 800be24:	645a      	str	r2, [r3, #68]	@ 0x44
 800be26:	e002      	b.n	800be2e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800be2e:	2300      	movs	r3, #0
}
 800be30:	4618      	mov	r0, r3
 800be32:	3718      	adds	r7, #24
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}
 800be38:	c1100000 	.word	0xc1100000

0800be3c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d102      	bne.n	800be52 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800be4c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800be50:	e018      	b.n	800be84 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be5a:	041b      	lsls	r3, r3, #16
 800be5c:	4619      	mov	r1, r3
 800be5e:	4610      	mov	r0, r2
 800be60:	f002 fa3f 	bl	800e2e2 <SDMMC_CmdSendStatus>
 800be64:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d001      	beq.n	800be70 <SD_SendStatus+0x34>
  {
    return errorstate;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	e009      	b.n	800be84 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	2100      	movs	r1, #0
 800be76:	4618      	mov	r0, r3
 800be78:	f002 f827 	bl	800deca <SDIO_GetResponse>
 800be7c:	4602      	mov	r2, r0
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800be82:	2300      	movs	r3, #0
}
 800be84:	4618      	mov	r0, r3
 800be86:	3710      	adds	r7, #16
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d101      	bne.n	800be9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800be9a:	2301      	movs	r3, #1
 800be9c:	e041      	b.n	800bf22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d106      	bne.n	800beb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2200      	movs	r2, #0
 800beae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f7fa f828 	bl	8005f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2202      	movs	r2, #2
 800bebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681a      	ldr	r2, [r3, #0]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	3304      	adds	r3, #4
 800bec8:	4619      	mov	r1, r3
 800beca:	4610      	mov	r0, r2
 800becc:	f000 fc56 	bl	800c77c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2201      	movs	r2, #1
 800bed4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2201      	movs	r2, #1
 800bedc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2201      	movs	r2, #1
 800bee4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2201      	movs	r2, #1
 800beec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2201      	movs	r2, #1
 800befc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2201      	movs	r2, #1
 800bf14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bf20:	2300      	movs	r3, #0
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3708      	adds	r7, #8
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
	...

0800bf2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b085      	sub	sp, #20
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d001      	beq.n	800bf44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bf40:	2301      	movs	r3, #1
 800bf42:	e044      	b.n	800bfce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2202      	movs	r2, #2
 800bf48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	68da      	ldr	r2, [r3, #12]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f042 0201 	orr.w	r2, r2, #1
 800bf5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a1d      	ldr	r2, [pc, #116]	@ (800bfd8 <HAL_TIM_Base_Start_IT+0xac>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d018      	beq.n	800bf98 <HAL_TIM_Base_Start_IT+0x6c>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4a1c      	ldr	r2, [pc, #112]	@ (800bfdc <HAL_TIM_Base_Start_IT+0xb0>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d013      	beq.n	800bf98 <HAL_TIM_Base_Start_IT+0x6c>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf78:	d00e      	beq.n	800bf98 <HAL_TIM_Base_Start_IT+0x6c>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	4a18      	ldr	r2, [pc, #96]	@ (800bfe0 <HAL_TIM_Base_Start_IT+0xb4>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d009      	beq.n	800bf98 <HAL_TIM_Base_Start_IT+0x6c>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	4a16      	ldr	r2, [pc, #88]	@ (800bfe4 <HAL_TIM_Base_Start_IT+0xb8>)
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d004      	beq.n	800bf98 <HAL_TIM_Base_Start_IT+0x6c>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	4a15      	ldr	r2, [pc, #84]	@ (800bfe8 <HAL_TIM_Base_Start_IT+0xbc>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d111      	bne.n	800bfbc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	689b      	ldr	r3, [r3, #8]
 800bf9e:	f003 0307 	and.w	r3, r3, #7
 800bfa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2b06      	cmp	r3, #6
 800bfa8:	d010      	beq.n	800bfcc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	681a      	ldr	r2, [r3, #0]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f042 0201 	orr.w	r2, r2, #1
 800bfb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfba:	e007      	b.n	800bfcc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	681a      	ldr	r2, [r3, #0]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f042 0201 	orr.w	r2, r2, #1
 800bfca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bfcc:	2300      	movs	r3, #0
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3714      	adds	r7, #20
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bc80      	pop	{r7}
 800bfd6:	4770      	bx	lr
 800bfd8:	40012c00 	.word	0x40012c00
 800bfdc:	40013400 	.word	0x40013400
 800bfe0:	40000400 	.word	0x40000400
 800bfe4:	40000800 	.word	0x40000800
 800bfe8:	40000c00 	.word	0x40000c00

0800bfec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d101      	bne.n	800bffe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bffa:	2301      	movs	r3, #1
 800bffc:	e041      	b.n	800c082 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c004:	b2db      	uxtb	r3, r3
 800c006:	2b00      	cmp	r3, #0
 800c008:	d106      	bne.n	800c018 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2200      	movs	r2, #0
 800c00e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f000 f839 	bl	800c08a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2202      	movs	r2, #2
 800c01c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681a      	ldr	r2, [r3, #0]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	3304      	adds	r3, #4
 800c028:	4619      	mov	r1, r3
 800c02a:	4610      	mov	r0, r2
 800c02c:	f000 fba6 	bl	800c77c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2201      	movs	r2, #1
 800c034:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2201      	movs	r2, #1
 800c03c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2201      	movs	r2, #1
 800c044:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2201      	movs	r2, #1
 800c04c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2201      	movs	r2, #1
 800c054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2201      	movs	r2, #1
 800c05c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2201      	movs	r2, #1
 800c064:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2201      	movs	r2, #1
 800c06c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2201      	movs	r2, #1
 800c074:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2201      	movs	r2, #1
 800c07c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c080:	2300      	movs	r3, #0
}
 800c082:	4618      	mov	r0, r3
 800c084:	3708      	adds	r7, #8
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}

0800c08a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c08a:	b480      	push	{r7}
 800c08c:	b083      	sub	sp, #12
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c092:	bf00      	nop
 800c094:	370c      	adds	r7, #12
 800c096:	46bd      	mov	sp, r7
 800c098:	bc80      	pop	{r7}
 800c09a:	4770      	bx	lr

0800c09c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d109      	bne.n	800c0c0 <HAL_TIM_PWM_Start+0x24>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	bf14      	ite	ne
 800c0b8:	2301      	movne	r3, #1
 800c0ba:	2300      	moveq	r3, #0
 800c0bc:	b2db      	uxtb	r3, r3
 800c0be:	e022      	b.n	800c106 <HAL_TIM_PWM_Start+0x6a>
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	2b04      	cmp	r3, #4
 800c0c4:	d109      	bne.n	800c0da <HAL_TIM_PWM_Start+0x3e>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c0cc:	b2db      	uxtb	r3, r3
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	bf14      	ite	ne
 800c0d2:	2301      	movne	r3, #1
 800c0d4:	2300      	moveq	r3, #0
 800c0d6:	b2db      	uxtb	r3, r3
 800c0d8:	e015      	b.n	800c106 <HAL_TIM_PWM_Start+0x6a>
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	2b08      	cmp	r3, #8
 800c0de:	d109      	bne.n	800c0f4 <HAL_TIM_PWM_Start+0x58>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c0e6:	b2db      	uxtb	r3, r3
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	bf14      	ite	ne
 800c0ec:	2301      	movne	r3, #1
 800c0ee:	2300      	moveq	r3, #0
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	e008      	b.n	800c106 <HAL_TIM_PWM_Start+0x6a>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	bf14      	ite	ne
 800c100:	2301      	movne	r3, #1
 800c102:	2300      	moveq	r3, #0
 800c104:	b2db      	uxtb	r3, r3
 800c106:	2b00      	cmp	r3, #0
 800c108:	d001      	beq.n	800c10e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c10a:	2301      	movs	r3, #1
 800c10c:	e072      	b.n	800c1f4 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d104      	bne.n	800c11e <HAL_TIM_PWM_Start+0x82>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2202      	movs	r2, #2
 800c118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c11c:	e013      	b.n	800c146 <HAL_TIM_PWM_Start+0xaa>
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	2b04      	cmp	r3, #4
 800c122:	d104      	bne.n	800c12e <HAL_TIM_PWM_Start+0x92>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2202      	movs	r2, #2
 800c128:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c12c:	e00b      	b.n	800c146 <HAL_TIM_PWM_Start+0xaa>
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	2b08      	cmp	r3, #8
 800c132:	d104      	bne.n	800c13e <HAL_TIM_PWM_Start+0xa2>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2202      	movs	r2, #2
 800c138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c13c:	e003      	b.n	800c146 <HAL_TIM_PWM_Start+0xaa>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2202      	movs	r2, #2
 800c142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	2201      	movs	r2, #1
 800c14c:	6839      	ldr	r1, [r7, #0]
 800c14e:	4618      	mov	r0, r3
 800c150:	f000 fdd0 	bl	800ccf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a28      	ldr	r2, [pc, #160]	@ (800c1fc <HAL_TIM_PWM_Start+0x160>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d004      	beq.n	800c168 <HAL_TIM_PWM_Start+0xcc>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a27      	ldr	r2, [pc, #156]	@ (800c200 <HAL_TIM_PWM_Start+0x164>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d101      	bne.n	800c16c <HAL_TIM_PWM_Start+0xd0>
 800c168:	2301      	movs	r3, #1
 800c16a:	e000      	b.n	800c16e <HAL_TIM_PWM_Start+0xd2>
 800c16c:	2300      	movs	r3, #0
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d007      	beq.n	800c182 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c180:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4a1d      	ldr	r2, [pc, #116]	@ (800c1fc <HAL_TIM_PWM_Start+0x160>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d018      	beq.n	800c1be <HAL_TIM_PWM_Start+0x122>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4a1b      	ldr	r2, [pc, #108]	@ (800c200 <HAL_TIM_PWM_Start+0x164>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d013      	beq.n	800c1be <HAL_TIM_PWM_Start+0x122>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c19e:	d00e      	beq.n	800c1be <HAL_TIM_PWM_Start+0x122>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	4a17      	ldr	r2, [pc, #92]	@ (800c204 <HAL_TIM_PWM_Start+0x168>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d009      	beq.n	800c1be <HAL_TIM_PWM_Start+0x122>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4a16      	ldr	r2, [pc, #88]	@ (800c208 <HAL_TIM_PWM_Start+0x16c>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d004      	beq.n	800c1be <HAL_TIM_PWM_Start+0x122>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4a14      	ldr	r2, [pc, #80]	@ (800c20c <HAL_TIM_PWM_Start+0x170>)
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d111      	bne.n	800c1e2 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	689b      	ldr	r3, [r3, #8]
 800c1c4:	f003 0307 	and.w	r3, r3, #7
 800c1c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2b06      	cmp	r3, #6
 800c1ce:	d010      	beq.n	800c1f2 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	681a      	ldr	r2, [r3, #0]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f042 0201 	orr.w	r2, r2, #1
 800c1de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1e0:	e007      	b.n	800c1f2 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f042 0201 	orr.w	r2, r2, #1
 800c1f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c1f2:	2300      	movs	r3, #0
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3710      	adds	r7, #16
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	40012c00 	.word	0x40012c00
 800c200:	40013400 	.word	0x40013400
 800c204:	40000400 	.word	0x40000400
 800c208:	40000800 	.word	0x40000800
 800c20c:	40000c00 	.word	0x40000c00

0800c210 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	691b      	ldr	r3, [r3, #16]
 800c21e:	f003 0302 	and.w	r3, r3, #2
 800c222:	2b02      	cmp	r3, #2
 800c224:	d122      	bne.n	800c26c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	68db      	ldr	r3, [r3, #12]
 800c22c:	f003 0302 	and.w	r3, r3, #2
 800c230:	2b02      	cmp	r3, #2
 800c232:	d11b      	bne.n	800c26c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f06f 0202 	mvn.w	r2, #2
 800c23c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2201      	movs	r2, #1
 800c242:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	699b      	ldr	r3, [r3, #24]
 800c24a:	f003 0303 	and.w	r3, r3, #3
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d003      	beq.n	800c25a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 fa76 	bl	800c744 <HAL_TIM_IC_CaptureCallback>
 800c258:	e005      	b.n	800c266 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f000 fa69 	bl	800c732 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f000 fa78 	bl	800c756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2200      	movs	r2, #0
 800c26a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	691b      	ldr	r3, [r3, #16]
 800c272:	f003 0304 	and.w	r3, r3, #4
 800c276:	2b04      	cmp	r3, #4
 800c278:	d122      	bne.n	800c2c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	f003 0304 	and.w	r3, r3, #4
 800c284:	2b04      	cmp	r3, #4
 800c286:	d11b      	bne.n	800c2c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f06f 0204 	mvn.w	r2, #4
 800c290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2202      	movs	r2, #2
 800c296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	699b      	ldr	r3, [r3, #24]
 800c29e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d003      	beq.n	800c2ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 fa4c 	bl	800c744 <HAL_TIM_IC_CaptureCallback>
 800c2ac:	e005      	b.n	800c2ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f000 fa3f 	bl	800c732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 fa4e 	bl	800c756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2200      	movs	r2, #0
 800c2be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	691b      	ldr	r3, [r3, #16]
 800c2c6:	f003 0308 	and.w	r3, r3, #8
 800c2ca:	2b08      	cmp	r3, #8
 800c2cc:	d122      	bne.n	800c314 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	f003 0308 	and.w	r3, r3, #8
 800c2d8:	2b08      	cmp	r3, #8
 800c2da:	d11b      	bne.n	800c314 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f06f 0208 	mvn.w	r2, #8
 800c2e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2204      	movs	r2, #4
 800c2ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	69db      	ldr	r3, [r3, #28]
 800c2f2:	f003 0303 	and.w	r3, r3, #3
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d003      	beq.n	800c302 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 fa22 	bl	800c744 <HAL_TIM_IC_CaptureCallback>
 800c300:	e005      	b.n	800c30e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f000 fa15 	bl	800c732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f000 fa24 	bl	800c756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2200      	movs	r2, #0
 800c312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	691b      	ldr	r3, [r3, #16]
 800c31a:	f003 0310 	and.w	r3, r3, #16
 800c31e:	2b10      	cmp	r3, #16
 800c320:	d122      	bne.n	800c368 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	68db      	ldr	r3, [r3, #12]
 800c328:	f003 0310 	and.w	r3, r3, #16
 800c32c:	2b10      	cmp	r3, #16
 800c32e:	d11b      	bne.n	800c368 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f06f 0210 	mvn.w	r2, #16
 800c338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2208      	movs	r2, #8
 800c33e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	69db      	ldr	r3, [r3, #28]
 800c346:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d003      	beq.n	800c356 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f000 f9f8 	bl	800c744 <HAL_TIM_IC_CaptureCallback>
 800c354:	e005      	b.n	800c362 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 f9eb 	bl	800c732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f000 f9fa 	bl	800c756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2200      	movs	r2, #0
 800c366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	691b      	ldr	r3, [r3, #16]
 800c36e:	f003 0301 	and.w	r3, r3, #1
 800c372:	2b01      	cmp	r3, #1
 800c374:	d10e      	bne.n	800c394 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	68db      	ldr	r3, [r3, #12]
 800c37c:	f003 0301 	and.w	r3, r3, #1
 800c380:	2b01      	cmp	r3, #1
 800c382:	d107      	bne.n	800c394 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f06f 0201 	mvn.w	r2, #1
 800c38c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f7f9 fb06 	bl	80059a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	691b      	ldr	r3, [r3, #16]
 800c39a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c39e:	2b80      	cmp	r3, #128	@ 0x80
 800c3a0:	d10e      	bne.n	800c3c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3ac:	2b80      	cmp	r3, #128	@ 0x80
 800c3ae:	d107      	bne.n	800c3c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c3b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f000 fd33 	bl	800ce26 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	691b      	ldr	r3, [r3, #16]
 800c3c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3ca:	2b40      	cmp	r3, #64	@ 0x40
 800c3cc:	d10e      	bne.n	800c3ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	68db      	ldr	r3, [r3, #12]
 800c3d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3d8:	2b40      	cmp	r3, #64	@ 0x40
 800c3da:	d107      	bne.n	800c3ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c3e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 f9be 	bl	800c768 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	691b      	ldr	r3, [r3, #16]
 800c3f2:	f003 0320 	and.w	r3, r3, #32
 800c3f6:	2b20      	cmp	r3, #32
 800c3f8:	d10e      	bne.n	800c418 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	f003 0320 	and.w	r3, r3, #32
 800c404:	2b20      	cmp	r3, #32
 800c406:	d107      	bne.n	800c418 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f06f 0220 	mvn.w	r2, #32
 800c410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 fcfe 	bl	800ce14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c418:	bf00      	nop
 800c41a:	3708      	adds	r7, #8
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b086      	sub	sp, #24
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c42c:	2300      	movs	r3, #0
 800c42e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c436:	2b01      	cmp	r3, #1
 800c438:	d101      	bne.n	800c43e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c43a:	2302      	movs	r3, #2
 800c43c:	e0ae      	b.n	800c59c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2201      	movs	r2, #1
 800c442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2b0c      	cmp	r3, #12
 800c44a:	f200 809f 	bhi.w	800c58c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c44e:	a201      	add	r2, pc, #4	@ (adr r2, 800c454 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c454:	0800c489 	.word	0x0800c489
 800c458:	0800c58d 	.word	0x0800c58d
 800c45c:	0800c58d 	.word	0x0800c58d
 800c460:	0800c58d 	.word	0x0800c58d
 800c464:	0800c4c9 	.word	0x0800c4c9
 800c468:	0800c58d 	.word	0x0800c58d
 800c46c:	0800c58d 	.word	0x0800c58d
 800c470:	0800c58d 	.word	0x0800c58d
 800c474:	0800c50b 	.word	0x0800c50b
 800c478:	0800c58d 	.word	0x0800c58d
 800c47c:	0800c58d 	.word	0x0800c58d
 800c480:	0800c58d 	.word	0x0800c58d
 800c484:	0800c54b 	.word	0x0800c54b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	68b9      	ldr	r1, [r7, #8]
 800c48e:	4618      	mov	r0, r3
 800c490:	f000 f9ee 	bl	800c870 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	699a      	ldr	r2, [r3, #24]
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f042 0208 	orr.w	r2, r2, #8
 800c4a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	699a      	ldr	r2, [r3, #24]
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f022 0204 	bic.w	r2, r2, #4
 800c4b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	6999      	ldr	r1, [r3, #24]
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	691a      	ldr	r2, [r3, #16]
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	430a      	orrs	r2, r1
 800c4c4:	619a      	str	r2, [r3, #24]
      break;
 800c4c6:	e064      	b.n	800c592 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	68b9      	ldr	r1, [r7, #8]
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f000 fa3e 	bl	800c950 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	699a      	ldr	r2, [r3, #24]
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c4e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	699a      	ldr	r2, [r3, #24]
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c4f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	6999      	ldr	r1, [r3, #24]
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	691b      	ldr	r3, [r3, #16]
 800c4fe:	021a      	lsls	r2, r3, #8
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	430a      	orrs	r2, r1
 800c506:	619a      	str	r2, [r3, #24]
      break;
 800c508:	e043      	b.n	800c592 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	68b9      	ldr	r1, [r7, #8]
 800c510:	4618      	mov	r0, r3
 800c512:	f000 fa91 	bl	800ca38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	69da      	ldr	r2, [r3, #28]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f042 0208 	orr.w	r2, r2, #8
 800c524:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	69da      	ldr	r2, [r3, #28]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f022 0204 	bic.w	r2, r2, #4
 800c534:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	69d9      	ldr	r1, [r3, #28]
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	691a      	ldr	r2, [r3, #16]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	430a      	orrs	r2, r1
 800c546:	61da      	str	r2, [r3, #28]
      break;
 800c548:	e023      	b.n	800c592 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	68b9      	ldr	r1, [r7, #8]
 800c550:	4618      	mov	r0, r3
 800c552:	f000 fae5 	bl	800cb20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	69da      	ldr	r2, [r3, #28]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c564:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	69da      	ldr	r2, [r3, #28]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c574:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	69d9      	ldr	r1, [r3, #28]
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	691b      	ldr	r3, [r3, #16]
 800c580:	021a      	lsls	r2, r3, #8
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	430a      	orrs	r2, r1
 800c588:	61da      	str	r2, [r3, #28]
      break;
 800c58a:	e002      	b.n	800c592 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c58c:	2301      	movs	r3, #1
 800c58e:	75fb      	strb	r3, [r7, #23]
      break;
 800c590:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2200      	movs	r2, #0
 800c596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c59a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3718      	adds	r7, #24
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d101      	bne.n	800c5c0 <HAL_TIM_ConfigClockSource+0x1c>
 800c5bc:	2302      	movs	r3, #2
 800c5be:	e0b4      	b.n	800c72a <HAL_TIM_ConfigClockSource+0x186>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2202      	movs	r2, #2
 800c5cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c5de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c5e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	68ba      	ldr	r2, [r7, #8]
 800c5ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5f8:	d03e      	beq.n	800c678 <HAL_TIM_ConfigClockSource+0xd4>
 800c5fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5fe:	f200 8087 	bhi.w	800c710 <HAL_TIM_ConfigClockSource+0x16c>
 800c602:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c606:	f000 8086 	beq.w	800c716 <HAL_TIM_ConfigClockSource+0x172>
 800c60a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c60e:	d87f      	bhi.n	800c710 <HAL_TIM_ConfigClockSource+0x16c>
 800c610:	2b70      	cmp	r3, #112	@ 0x70
 800c612:	d01a      	beq.n	800c64a <HAL_TIM_ConfigClockSource+0xa6>
 800c614:	2b70      	cmp	r3, #112	@ 0x70
 800c616:	d87b      	bhi.n	800c710 <HAL_TIM_ConfigClockSource+0x16c>
 800c618:	2b60      	cmp	r3, #96	@ 0x60
 800c61a:	d050      	beq.n	800c6be <HAL_TIM_ConfigClockSource+0x11a>
 800c61c:	2b60      	cmp	r3, #96	@ 0x60
 800c61e:	d877      	bhi.n	800c710 <HAL_TIM_ConfigClockSource+0x16c>
 800c620:	2b50      	cmp	r3, #80	@ 0x50
 800c622:	d03c      	beq.n	800c69e <HAL_TIM_ConfigClockSource+0xfa>
 800c624:	2b50      	cmp	r3, #80	@ 0x50
 800c626:	d873      	bhi.n	800c710 <HAL_TIM_ConfigClockSource+0x16c>
 800c628:	2b40      	cmp	r3, #64	@ 0x40
 800c62a:	d058      	beq.n	800c6de <HAL_TIM_ConfigClockSource+0x13a>
 800c62c:	2b40      	cmp	r3, #64	@ 0x40
 800c62e:	d86f      	bhi.n	800c710 <HAL_TIM_ConfigClockSource+0x16c>
 800c630:	2b30      	cmp	r3, #48	@ 0x30
 800c632:	d064      	beq.n	800c6fe <HAL_TIM_ConfigClockSource+0x15a>
 800c634:	2b30      	cmp	r3, #48	@ 0x30
 800c636:	d86b      	bhi.n	800c710 <HAL_TIM_ConfigClockSource+0x16c>
 800c638:	2b20      	cmp	r3, #32
 800c63a:	d060      	beq.n	800c6fe <HAL_TIM_ConfigClockSource+0x15a>
 800c63c:	2b20      	cmp	r3, #32
 800c63e:	d867      	bhi.n	800c710 <HAL_TIM_ConfigClockSource+0x16c>
 800c640:	2b00      	cmp	r3, #0
 800c642:	d05c      	beq.n	800c6fe <HAL_TIM_ConfigClockSource+0x15a>
 800c644:	2b10      	cmp	r3, #16
 800c646:	d05a      	beq.n	800c6fe <HAL_TIM_ConfigClockSource+0x15a>
 800c648:	e062      	b.n	800c710 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c65a:	f000 fb2c 	bl	800ccb6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	689b      	ldr	r3, [r3, #8]
 800c664:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c66c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	68ba      	ldr	r2, [r7, #8]
 800c674:	609a      	str	r2, [r3, #8]
      break;
 800c676:	e04f      	b.n	800c718 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c688:	f000 fb15 	bl	800ccb6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	689a      	ldr	r2, [r3, #8]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c69a:	609a      	str	r2, [r3, #8]
      break;
 800c69c:	e03c      	b.n	800c718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	f000 fa8c 	bl	800cbc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2150      	movs	r1, #80	@ 0x50
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f000 fae3 	bl	800cc82 <TIM_ITRx_SetConfig>
      break;
 800c6bc:	e02c      	b.n	800c718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	f000 faaa 	bl	800cc24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2160      	movs	r1, #96	@ 0x60
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f000 fad3 	bl	800cc82 <TIM_ITRx_SetConfig>
      break;
 800c6dc:	e01c      	b.n	800c718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	f000 fa6c 	bl	800cbc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2140      	movs	r1, #64	@ 0x40
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f000 fac3 	bl	800cc82 <TIM_ITRx_SetConfig>
      break;
 800c6fc:	e00c      	b.n	800c718 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681a      	ldr	r2, [r3, #0]
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	4619      	mov	r1, r3
 800c708:	4610      	mov	r0, r2
 800c70a:	f000 faba 	bl	800cc82 <TIM_ITRx_SetConfig>
      break;
 800c70e:	e003      	b.n	800c718 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c710:	2301      	movs	r3, #1
 800c712:	73fb      	strb	r3, [r7, #15]
      break;
 800c714:	e000      	b.n	800c718 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c716:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2201      	movs	r2, #1
 800c71c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2200      	movs	r2, #0
 800c724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c728:	7bfb      	ldrb	r3, [r7, #15]
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3710      	adds	r7, #16
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}

0800c732 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c732:	b480      	push	{r7}
 800c734:	b083      	sub	sp, #12
 800c736:	af00      	add	r7, sp, #0
 800c738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c73a:	bf00      	nop
 800c73c:	370c      	adds	r7, #12
 800c73e:	46bd      	mov	sp, r7
 800c740:	bc80      	pop	{r7}
 800c742:	4770      	bx	lr

0800c744 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c744:	b480      	push	{r7}
 800c746:	b083      	sub	sp, #12
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c74c:	bf00      	nop
 800c74e:	370c      	adds	r7, #12
 800c750:	46bd      	mov	sp, r7
 800c752:	bc80      	pop	{r7}
 800c754:	4770      	bx	lr

0800c756 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c756:	b480      	push	{r7}
 800c758:	b083      	sub	sp, #12
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c75e:	bf00      	nop
 800c760:	370c      	adds	r7, #12
 800c762:	46bd      	mov	sp, r7
 800c764:	bc80      	pop	{r7}
 800c766:	4770      	bx	lr

0800c768 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c768:	b480      	push	{r7}
 800c76a:	b083      	sub	sp, #12
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c770:	bf00      	nop
 800c772:	370c      	adds	r7, #12
 800c774:	46bd      	mov	sp, r7
 800c776:	bc80      	pop	{r7}
 800c778:	4770      	bx	lr
	...

0800c77c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c77c:	b480      	push	{r7}
 800c77e:	b085      	sub	sp, #20
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	4a33      	ldr	r2, [pc, #204]	@ (800c85c <TIM_Base_SetConfig+0xe0>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d013      	beq.n	800c7bc <TIM_Base_SetConfig+0x40>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	4a32      	ldr	r2, [pc, #200]	@ (800c860 <TIM_Base_SetConfig+0xe4>)
 800c798:	4293      	cmp	r3, r2
 800c79a:	d00f      	beq.n	800c7bc <TIM_Base_SetConfig+0x40>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7a2:	d00b      	beq.n	800c7bc <TIM_Base_SetConfig+0x40>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	4a2f      	ldr	r2, [pc, #188]	@ (800c864 <TIM_Base_SetConfig+0xe8>)
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	d007      	beq.n	800c7bc <TIM_Base_SetConfig+0x40>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	4a2e      	ldr	r2, [pc, #184]	@ (800c868 <TIM_Base_SetConfig+0xec>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d003      	beq.n	800c7bc <TIM_Base_SetConfig+0x40>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	4a2d      	ldr	r2, [pc, #180]	@ (800c86c <TIM_Base_SetConfig+0xf0>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d108      	bne.n	800c7ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	68fa      	ldr	r2, [r7, #12]
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	4a22      	ldr	r2, [pc, #136]	@ (800c85c <TIM_Base_SetConfig+0xe0>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d013      	beq.n	800c7fe <TIM_Base_SetConfig+0x82>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	4a21      	ldr	r2, [pc, #132]	@ (800c860 <TIM_Base_SetConfig+0xe4>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d00f      	beq.n	800c7fe <TIM_Base_SetConfig+0x82>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7e4:	d00b      	beq.n	800c7fe <TIM_Base_SetConfig+0x82>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	4a1e      	ldr	r2, [pc, #120]	@ (800c864 <TIM_Base_SetConfig+0xe8>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d007      	beq.n	800c7fe <TIM_Base_SetConfig+0x82>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4a1d      	ldr	r2, [pc, #116]	@ (800c868 <TIM_Base_SetConfig+0xec>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d003      	beq.n	800c7fe <TIM_Base_SetConfig+0x82>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	4a1c      	ldr	r2, [pc, #112]	@ (800c86c <TIM_Base_SetConfig+0xf0>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d108      	bne.n	800c810 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	68db      	ldr	r3, [r3, #12]
 800c80a:	68fa      	ldr	r2, [r7, #12]
 800c80c:	4313      	orrs	r3, r2
 800c80e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	695b      	ldr	r3, [r3, #20]
 800c81a:	4313      	orrs	r3, r2
 800c81c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	68fa      	ldr	r2, [r7, #12]
 800c822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	689a      	ldr	r2, [r3, #8]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	4a09      	ldr	r2, [pc, #36]	@ (800c85c <TIM_Base_SetConfig+0xe0>)
 800c838:	4293      	cmp	r3, r2
 800c83a:	d003      	beq.n	800c844 <TIM_Base_SetConfig+0xc8>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	4a08      	ldr	r2, [pc, #32]	@ (800c860 <TIM_Base_SetConfig+0xe4>)
 800c840:	4293      	cmp	r3, r2
 800c842:	d103      	bne.n	800c84c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	691a      	ldr	r2, [r3, #16]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2201      	movs	r2, #1
 800c850:	615a      	str	r2, [r3, #20]
}
 800c852:	bf00      	nop
 800c854:	3714      	adds	r7, #20
 800c856:	46bd      	mov	sp, r7
 800c858:	bc80      	pop	{r7}
 800c85a:	4770      	bx	lr
 800c85c:	40012c00 	.word	0x40012c00
 800c860:	40013400 	.word	0x40013400
 800c864:	40000400 	.word	0x40000400
 800c868:	40000800 	.word	0x40000800
 800c86c:	40000c00 	.word	0x40000c00

0800c870 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c870:	b480      	push	{r7}
 800c872:	b087      	sub	sp, #28
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6a1b      	ldr	r3, [r3, #32]
 800c87e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6a1b      	ldr	r3, [r3, #32]
 800c884:	f023 0201 	bic.w	r2, r3, #1
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	699b      	ldr	r3, [r3, #24]
 800c896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c89e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f023 0303 	bic.w	r3, r3, #3
 800c8a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	68fa      	ldr	r2, [r7, #12]
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	f023 0302 	bic.w	r3, r3, #2
 800c8b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	689b      	ldr	r3, [r3, #8]
 800c8be:	697a      	ldr	r2, [r7, #20]
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	4a20      	ldr	r2, [pc, #128]	@ (800c948 <TIM_OC1_SetConfig+0xd8>)
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d003      	beq.n	800c8d4 <TIM_OC1_SetConfig+0x64>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	4a1f      	ldr	r2, [pc, #124]	@ (800c94c <TIM_OC1_SetConfig+0xdc>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d10c      	bne.n	800c8ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	f023 0308 	bic.w	r3, r3, #8
 800c8da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	68db      	ldr	r3, [r3, #12]
 800c8e0:	697a      	ldr	r2, [r7, #20]
 800c8e2:	4313      	orrs	r3, r2
 800c8e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	f023 0304 	bic.w	r3, r3, #4
 800c8ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	4a15      	ldr	r2, [pc, #84]	@ (800c948 <TIM_OC1_SetConfig+0xd8>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d003      	beq.n	800c8fe <TIM_OC1_SetConfig+0x8e>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	4a14      	ldr	r2, [pc, #80]	@ (800c94c <TIM_OC1_SetConfig+0xdc>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d111      	bne.n	800c922 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c904:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c90c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	695b      	ldr	r3, [r3, #20]
 800c912:	693a      	ldr	r2, [r7, #16]
 800c914:	4313      	orrs	r3, r2
 800c916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	699b      	ldr	r3, [r3, #24]
 800c91c:	693a      	ldr	r2, [r7, #16]
 800c91e:	4313      	orrs	r3, r2
 800c920:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	693a      	ldr	r2, [r7, #16]
 800c926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	68fa      	ldr	r2, [r7, #12]
 800c92c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	685a      	ldr	r2, [r3, #4]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	697a      	ldr	r2, [r7, #20]
 800c93a:	621a      	str	r2, [r3, #32]
}
 800c93c:	bf00      	nop
 800c93e:	371c      	adds	r7, #28
 800c940:	46bd      	mov	sp, r7
 800c942:	bc80      	pop	{r7}
 800c944:	4770      	bx	lr
 800c946:	bf00      	nop
 800c948:	40012c00 	.word	0x40012c00
 800c94c:	40013400 	.word	0x40013400

0800c950 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c950:	b480      	push	{r7}
 800c952:	b087      	sub	sp, #28
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6a1b      	ldr	r3, [r3, #32]
 800c95e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6a1b      	ldr	r3, [r3, #32]
 800c964:	f023 0210 	bic.w	r2, r3, #16
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	699b      	ldr	r3, [r3, #24]
 800c976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c97e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	021b      	lsls	r3, r3, #8
 800c98e:	68fa      	ldr	r2, [r7, #12]
 800c990:	4313      	orrs	r3, r2
 800c992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	f023 0320 	bic.w	r3, r3, #32
 800c99a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	689b      	ldr	r3, [r3, #8]
 800c9a0:	011b      	lsls	r3, r3, #4
 800c9a2:	697a      	ldr	r2, [r7, #20]
 800c9a4:	4313      	orrs	r3, r2
 800c9a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	4a21      	ldr	r2, [pc, #132]	@ (800ca30 <TIM_OC2_SetConfig+0xe0>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d003      	beq.n	800c9b8 <TIM_OC2_SetConfig+0x68>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	4a20      	ldr	r2, [pc, #128]	@ (800ca34 <TIM_OC2_SetConfig+0xe4>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d10d      	bne.n	800c9d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c9be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	68db      	ldr	r3, [r3, #12]
 800c9c4:	011b      	lsls	r3, r3, #4
 800c9c6:	697a      	ldr	r2, [r7, #20]
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c9d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	4a16      	ldr	r2, [pc, #88]	@ (800ca30 <TIM_OC2_SetConfig+0xe0>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d003      	beq.n	800c9e4 <TIM_OC2_SetConfig+0x94>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	4a15      	ldr	r2, [pc, #84]	@ (800ca34 <TIM_OC2_SetConfig+0xe4>)
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d113      	bne.n	800ca0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c9ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c9f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	695b      	ldr	r3, [r3, #20]
 800c9f8:	009b      	lsls	r3, r3, #2
 800c9fa:	693a      	ldr	r2, [r7, #16]
 800c9fc:	4313      	orrs	r3, r2
 800c9fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	699b      	ldr	r3, [r3, #24]
 800ca04:	009b      	lsls	r3, r3, #2
 800ca06:	693a      	ldr	r2, [r7, #16]
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	693a      	ldr	r2, [r7, #16]
 800ca10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	68fa      	ldr	r2, [r7, #12]
 800ca16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	685a      	ldr	r2, [r3, #4]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	697a      	ldr	r2, [r7, #20]
 800ca24:	621a      	str	r2, [r3, #32]
}
 800ca26:	bf00      	nop
 800ca28:	371c      	adds	r7, #28
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bc80      	pop	{r7}
 800ca2e:	4770      	bx	lr
 800ca30:	40012c00 	.word	0x40012c00
 800ca34:	40013400 	.word	0x40013400

0800ca38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b087      	sub	sp, #28
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6a1b      	ldr	r3, [r3, #32]
 800ca46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6a1b      	ldr	r3, [r3, #32]
 800ca4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	69db      	ldr	r3, [r3, #28]
 800ca5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	f023 0303 	bic.w	r3, r3, #3
 800ca6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	68fa      	ldr	r2, [r7, #12]
 800ca76:	4313      	orrs	r3, r2
 800ca78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ca80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	689b      	ldr	r3, [r3, #8]
 800ca86:	021b      	lsls	r3, r3, #8
 800ca88:	697a      	ldr	r2, [r7, #20]
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	4a21      	ldr	r2, [pc, #132]	@ (800cb18 <TIM_OC3_SetConfig+0xe0>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d003      	beq.n	800ca9e <TIM_OC3_SetConfig+0x66>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	4a20      	ldr	r2, [pc, #128]	@ (800cb1c <TIM_OC3_SetConfig+0xe4>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d10d      	bne.n	800caba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800caa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	68db      	ldr	r3, [r3, #12]
 800caaa:	021b      	lsls	r3, r3, #8
 800caac:	697a      	ldr	r2, [r7, #20]
 800caae:	4313      	orrs	r3, r2
 800cab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	4a16      	ldr	r2, [pc, #88]	@ (800cb18 <TIM_OC3_SetConfig+0xe0>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d003      	beq.n	800caca <TIM_OC3_SetConfig+0x92>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	4a15      	ldr	r2, [pc, #84]	@ (800cb1c <TIM_OC3_SetConfig+0xe4>)
 800cac6:	4293      	cmp	r3, r2
 800cac8:	d113      	bne.n	800caf2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	695b      	ldr	r3, [r3, #20]
 800cade:	011b      	lsls	r3, r3, #4
 800cae0:	693a      	ldr	r2, [r7, #16]
 800cae2:	4313      	orrs	r3, r2
 800cae4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	699b      	ldr	r3, [r3, #24]
 800caea:	011b      	lsls	r3, r3, #4
 800caec:	693a      	ldr	r2, [r7, #16]
 800caee:	4313      	orrs	r3, r2
 800caf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	693a      	ldr	r2, [r7, #16]
 800caf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	68fa      	ldr	r2, [r7, #12]
 800cafc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	685a      	ldr	r2, [r3, #4]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	697a      	ldr	r2, [r7, #20]
 800cb0a:	621a      	str	r2, [r3, #32]
}
 800cb0c:	bf00      	nop
 800cb0e:	371c      	adds	r7, #28
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bc80      	pop	{r7}
 800cb14:	4770      	bx	lr
 800cb16:	bf00      	nop
 800cb18:	40012c00 	.word	0x40012c00
 800cb1c:	40013400 	.word	0x40013400

0800cb20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b087      	sub	sp, #28
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6a1b      	ldr	r3, [r3, #32]
 800cb2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6a1b      	ldr	r3, [r3, #32]
 800cb34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	69db      	ldr	r3, [r3, #28]
 800cb46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cb56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	021b      	lsls	r3, r3, #8
 800cb5e:	68fa      	ldr	r2, [r7, #12]
 800cb60:	4313      	orrs	r3, r2
 800cb62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cb6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	689b      	ldr	r3, [r3, #8]
 800cb70:	031b      	lsls	r3, r3, #12
 800cb72:	693a      	ldr	r2, [r7, #16]
 800cb74:	4313      	orrs	r3, r2
 800cb76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	4a11      	ldr	r2, [pc, #68]	@ (800cbc0 <TIM_OC4_SetConfig+0xa0>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d003      	beq.n	800cb88 <TIM_OC4_SetConfig+0x68>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	4a10      	ldr	r2, [pc, #64]	@ (800cbc4 <TIM_OC4_SetConfig+0xa4>)
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d109      	bne.n	800cb9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cb8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	695b      	ldr	r3, [r3, #20]
 800cb94:	019b      	lsls	r3, r3, #6
 800cb96:	697a      	ldr	r2, [r7, #20]
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	697a      	ldr	r2, [r7, #20]
 800cba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	68fa      	ldr	r2, [r7, #12]
 800cba6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	685a      	ldr	r2, [r3, #4]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	693a      	ldr	r2, [r7, #16]
 800cbb4:	621a      	str	r2, [r3, #32]
}
 800cbb6:	bf00      	nop
 800cbb8:	371c      	adds	r7, #28
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bc80      	pop	{r7}
 800cbbe:	4770      	bx	lr
 800cbc0:	40012c00 	.word	0x40012c00
 800cbc4:	40013400 	.word	0x40013400

0800cbc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b087      	sub	sp, #28
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	60f8      	str	r0, [r7, #12]
 800cbd0:	60b9      	str	r1, [r7, #8]
 800cbd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	6a1b      	ldr	r3, [r3, #32]
 800cbd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	6a1b      	ldr	r3, [r3, #32]
 800cbde:	f023 0201 	bic.w	r2, r3, #1
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	699b      	ldr	r3, [r3, #24]
 800cbea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cbf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	011b      	lsls	r3, r3, #4
 800cbf8:	693a      	ldr	r2, [r7, #16]
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	f023 030a 	bic.w	r3, r3, #10
 800cc04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cc06:	697a      	ldr	r2, [r7, #20]
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	4313      	orrs	r3, r2
 800cc0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	693a      	ldr	r2, [r7, #16]
 800cc12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	697a      	ldr	r2, [r7, #20]
 800cc18:	621a      	str	r2, [r3, #32]
}
 800cc1a:	bf00      	nop
 800cc1c:	371c      	adds	r7, #28
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bc80      	pop	{r7}
 800cc22:	4770      	bx	lr

0800cc24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b087      	sub	sp, #28
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	60f8      	str	r0, [r7, #12]
 800cc2c:	60b9      	str	r1, [r7, #8]
 800cc2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	6a1b      	ldr	r3, [r3, #32]
 800cc34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	6a1b      	ldr	r3, [r3, #32]
 800cc3a:	f023 0210 	bic.w	r2, r3, #16
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	699b      	ldr	r3, [r3, #24]
 800cc46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cc4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	031b      	lsls	r3, r3, #12
 800cc54:	693a      	ldr	r2, [r7, #16]
 800cc56:	4313      	orrs	r3, r2
 800cc58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cc60:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	011b      	lsls	r3, r3, #4
 800cc66:	697a      	ldr	r2, [r7, #20]
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	693a      	ldr	r2, [r7, #16]
 800cc70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	697a      	ldr	r2, [r7, #20]
 800cc76:	621a      	str	r2, [r3, #32]
}
 800cc78:	bf00      	nop
 800cc7a:	371c      	adds	r7, #28
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bc80      	pop	{r7}
 800cc80:	4770      	bx	lr

0800cc82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cc82:	b480      	push	{r7}
 800cc84:	b085      	sub	sp, #20
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
 800cc8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	689b      	ldr	r3, [r3, #8]
 800cc90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cc9a:	683a      	ldr	r2, [r7, #0]
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	f043 0307 	orr.w	r3, r3, #7
 800cca4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	68fa      	ldr	r2, [r7, #12]
 800ccaa:	609a      	str	r2, [r3, #8]
}
 800ccac:	bf00      	nop
 800ccae:	3714      	adds	r7, #20
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bc80      	pop	{r7}
 800ccb4:	4770      	bx	lr

0800ccb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ccb6:	b480      	push	{r7}
 800ccb8:	b087      	sub	sp, #28
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	60f8      	str	r0, [r7, #12]
 800ccbe:	60b9      	str	r1, [r7, #8]
 800ccc0:	607a      	str	r2, [r7, #4]
 800ccc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	689b      	ldr	r3, [r3, #8]
 800ccc8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ccd0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	021a      	lsls	r2, r3, #8
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	431a      	orrs	r2, r3
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	4313      	orrs	r3, r2
 800ccde:	697a      	ldr	r2, [r7, #20]
 800cce0:	4313      	orrs	r3, r2
 800cce2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	697a      	ldr	r2, [r7, #20]
 800cce8:	609a      	str	r2, [r3, #8]
}
 800ccea:	bf00      	nop
 800ccec:	371c      	adds	r7, #28
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bc80      	pop	{r7}
 800ccf2:	4770      	bx	lr

0800ccf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b087      	sub	sp, #28
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	60b9      	str	r1, [r7, #8]
 800ccfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	f003 031f 	and.w	r3, r3, #31
 800cd06:	2201      	movs	r2, #1
 800cd08:	fa02 f303 	lsl.w	r3, r2, r3
 800cd0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	6a1a      	ldr	r2, [r3, #32]
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	43db      	mvns	r3, r3
 800cd16:	401a      	ands	r2, r3
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	6a1a      	ldr	r2, [r3, #32]
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	f003 031f 	and.w	r3, r3, #31
 800cd26:	6879      	ldr	r1, [r7, #4]
 800cd28:	fa01 f303 	lsl.w	r3, r1, r3
 800cd2c:	431a      	orrs	r2, r3
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	621a      	str	r2, [r3, #32]
}
 800cd32:	bf00      	nop
 800cd34:	371c      	adds	r7, #28
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bc80      	pop	{r7}
 800cd3a:	4770      	bx	lr

0800cd3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b085      	sub	sp, #20
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cd4c:	2b01      	cmp	r3, #1
 800cd4e:	d101      	bne.n	800cd54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd50:	2302      	movs	r3, #2
 800cd52:	e050      	b.n	800cdf6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2201      	movs	r2, #1
 800cd58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2202      	movs	r2, #2
 800cd60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	685b      	ldr	r3, [r3, #4]
 800cd6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	689b      	ldr	r3, [r3, #8]
 800cd72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	68fa      	ldr	r2, [r7, #12]
 800cd82:	4313      	orrs	r3, r2
 800cd84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	68fa      	ldr	r2, [r7, #12]
 800cd8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4a1b      	ldr	r2, [pc, #108]	@ (800ce00 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d018      	beq.n	800cdca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4a19      	ldr	r2, [pc, #100]	@ (800ce04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d013      	beq.n	800cdca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cdaa:	d00e      	beq.n	800cdca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4a15      	ldr	r2, [pc, #84]	@ (800ce08 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d009      	beq.n	800cdca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a14      	ldr	r2, [pc, #80]	@ (800ce0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d004      	beq.n	800cdca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4a12      	ldr	r2, [pc, #72]	@ (800ce10 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d10c      	bne.n	800cde4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cdd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	68ba      	ldr	r2, [r7, #8]
 800cdd8:	4313      	orrs	r3, r2
 800cdda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	68ba      	ldr	r2, [r7, #8]
 800cde2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2201      	movs	r2, #1
 800cde8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cdf4:	2300      	movs	r3, #0
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3714      	adds	r7, #20
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bc80      	pop	{r7}
 800cdfe:	4770      	bx	lr
 800ce00:	40012c00 	.word	0x40012c00
 800ce04:	40013400 	.word	0x40013400
 800ce08:	40000400 	.word	0x40000400
 800ce0c:	40000800 	.word	0x40000800
 800ce10:	40000c00 	.word	0x40000c00

0800ce14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ce14:	b480      	push	{r7}
 800ce16:	b083      	sub	sp, #12
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ce1c:	bf00      	nop
 800ce1e:	370c      	adds	r7, #12
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bc80      	pop	{r7}
 800ce24:	4770      	bx	lr

0800ce26 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ce26:	b480      	push	{r7}
 800ce28:	b083      	sub	sp, #12
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ce2e:	bf00      	nop
 800ce30:	370c      	adds	r7, #12
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bc80      	pop	{r7}
 800ce36:	4770      	bx	lr

0800ce38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d101      	bne.n	800ce4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ce46:	2301      	movs	r3, #1
 800ce48:	e042      	b.n	800ced0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ce50:	b2db      	uxtb	r3, r3
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d106      	bne.n	800ce64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f7f9 f95e 	bl	8006120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2224      	movs	r2, #36	@ 0x24
 800ce68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	68da      	ldr	r2, [r3, #12]
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ce7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f000 ff01 	bl	800dc84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	691a      	ldr	r2, [r3, #16]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ce90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	695a      	ldr	r2, [r3, #20]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cea0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	68da      	ldr	r2, [r3, #12]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ceb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2220      	movs	r2, #32
 800cebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2220      	movs	r2, #32
 800cec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2200      	movs	r2, #0
 800cecc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800cece:	2300      	movs	r3, #0
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3708      	adds	r7, #8
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}

0800ced8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b08a      	sub	sp, #40	@ 0x28
 800cedc:	af02      	add	r7, sp, #8
 800cede:	60f8      	str	r0, [r7, #12]
 800cee0:	60b9      	str	r1, [r7, #8]
 800cee2:	603b      	str	r3, [r7, #0]
 800cee4:	4613      	mov	r3, r2
 800cee6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cee8:	2300      	movs	r3, #0
 800ceea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cef2:	b2db      	uxtb	r3, r3
 800cef4:	2b20      	cmp	r3, #32
 800cef6:	d16d      	bne.n	800cfd4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d002      	beq.n	800cf04 <HAL_UART_Transmit+0x2c>
 800cefe:	88fb      	ldrh	r3, [r7, #6]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d101      	bne.n	800cf08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cf04:	2301      	movs	r3, #1
 800cf06:	e066      	b.n	800cfd6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2221      	movs	r2, #33	@ 0x21
 800cf12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cf16:	f7fa fe41 	bl	8007b9c <HAL_GetTick>
 800cf1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	88fa      	ldrh	r2, [r7, #6]
 800cf20:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	88fa      	ldrh	r2, [r7, #6]
 800cf26:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	689b      	ldr	r3, [r3, #8]
 800cf2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf30:	d108      	bne.n	800cf44 <HAL_UART_Transmit+0x6c>
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	691b      	ldr	r3, [r3, #16]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d104      	bne.n	800cf44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	61bb      	str	r3, [r7, #24]
 800cf42:	e003      	b.n	800cf4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cf4c:	e02a      	b.n	800cfa4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	9300      	str	r3, [sp, #0]
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	2200      	movs	r2, #0
 800cf56:	2180      	movs	r1, #128	@ 0x80
 800cf58:	68f8      	ldr	r0, [r7, #12]
 800cf5a:	f000 fc29 	bl	800d7b0 <UART_WaitOnFlagUntilTimeout>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d001      	beq.n	800cf68 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800cf64:	2303      	movs	r3, #3
 800cf66:	e036      	b.n	800cfd6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800cf68:	69fb      	ldr	r3, [r7, #28]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d10b      	bne.n	800cf86 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cf6e:	69bb      	ldr	r3, [r7, #24]
 800cf70:	881b      	ldrh	r3, [r3, #0]
 800cf72:	461a      	mov	r2, r3
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cf7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800cf7e:	69bb      	ldr	r3, [r7, #24]
 800cf80:	3302      	adds	r3, #2
 800cf82:	61bb      	str	r3, [r7, #24]
 800cf84:	e007      	b.n	800cf96 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cf86:	69fb      	ldr	r3, [r7, #28]
 800cf88:	781a      	ldrb	r2, [r3, #0]
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cf90:	69fb      	ldr	r3, [r7, #28]
 800cf92:	3301      	adds	r3, #1
 800cf94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cf9a:	b29b      	uxth	r3, r3
 800cf9c:	3b01      	subs	r3, #1
 800cf9e:	b29a      	uxth	r2, r3
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cfa8:	b29b      	uxth	r3, r3
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d1cf      	bne.n	800cf4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	9300      	str	r3, [sp, #0]
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	2140      	movs	r1, #64	@ 0x40
 800cfb8:	68f8      	ldr	r0, [r7, #12]
 800cfba:	f000 fbf9 	bl	800d7b0 <UART_WaitOnFlagUntilTimeout>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d001      	beq.n	800cfc8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800cfc4:	2303      	movs	r3, #3
 800cfc6:	e006      	b.n	800cfd6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	2220      	movs	r2, #32
 800cfcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	e000      	b.n	800cfd6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800cfd4:	2302      	movs	r3, #2
  }
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3720      	adds	r7, #32
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}

0800cfde <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cfde:	b580      	push	{r7, lr}
 800cfe0:	b084      	sub	sp, #16
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	60f8      	str	r0, [r7, #12]
 800cfe6:	60b9      	str	r1, [r7, #8]
 800cfe8:	4613      	mov	r3, r2
 800cfea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cff2:	b2db      	uxtb	r3, r3
 800cff4:	2b20      	cmp	r3, #32
 800cff6:	d112      	bne.n	800d01e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d002      	beq.n	800d004 <HAL_UART_Receive_IT+0x26>
 800cffe:	88fb      	ldrh	r3, [r7, #6]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d101      	bne.n	800d008 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800d004:	2301      	movs	r3, #1
 800d006:	e00b      	b.n	800d020 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2200      	movs	r2, #0
 800d00c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d00e:	88fb      	ldrh	r3, [r7, #6]
 800d010:	461a      	mov	r2, r3
 800d012:	68b9      	ldr	r1, [r7, #8]
 800d014:	68f8      	ldr	r0, [r7, #12]
 800d016:	f000 fc39 	bl	800d88c <UART_Start_Receive_IT>
 800d01a:	4603      	mov	r3, r0
 800d01c:	e000      	b.n	800d020 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800d01e:	2302      	movs	r3, #2
  }
}
 800d020:	4618      	mov	r0, r3
 800d022:	3710      	adds	r7, #16
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}

0800d028 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b08c      	sub	sp, #48	@ 0x30
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	60f8      	str	r0, [r7, #12]
 800d030:	60b9      	str	r1, [r7, #8]
 800d032:	4613      	mov	r3, r2
 800d034:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	2b20      	cmp	r3, #32
 800d040:	d156      	bne.n	800d0f0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d002      	beq.n	800d04e <HAL_UART_Transmit_DMA+0x26>
 800d048:	88fb      	ldrh	r3, [r7, #6]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d101      	bne.n	800d052 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800d04e:	2301      	movs	r3, #1
 800d050:	e04f      	b.n	800d0f2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800d052:	68ba      	ldr	r2, [r7, #8]
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	88fa      	ldrh	r2, [r7, #6]
 800d05c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	88fa      	ldrh	r2, [r7, #6]
 800d062:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2200      	movs	r2, #0
 800d068:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	2221      	movs	r2, #33	@ 0x21
 800d06e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d076:	4a21      	ldr	r2, [pc, #132]	@ (800d0fc <HAL_UART_Transmit_DMA+0xd4>)
 800d078:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d07e:	4a20      	ldr	r2, [pc, #128]	@ (800d100 <HAL_UART_Transmit_DMA+0xd8>)
 800d080:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d086:	4a1f      	ldr	r2, [pc, #124]	@ (800d104 <HAL_UART_Transmit_DMA+0xdc>)
 800d088:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d08e:	2200      	movs	r2, #0
 800d090:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800d092:	f107 0308 	add.w	r3, r7, #8
 800d096:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800d09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d09e:	6819      	ldr	r1, [r3, #0]
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	3304      	adds	r3, #4
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	88fb      	ldrh	r3, [r7, #6]
 800d0aa:	f7fa fefb 	bl	8007ea4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d0b6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	3314      	adds	r3, #20
 800d0be:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0c0:	69bb      	ldr	r3, [r7, #24]
 800d0c2:	e853 3f00 	ldrex	r3, [r3]
 800d0c6:	617b      	str	r3, [r7, #20]
   return(result);
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	3314      	adds	r3, #20
 800d0d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d0d8:	627a      	str	r2, [r7, #36]	@ 0x24
 800d0da:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0dc:	6a39      	ldr	r1, [r7, #32]
 800d0de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0e0:	e841 2300 	strex	r3, r2, [r1]
 800d0e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800d0e6:	69fb      	ldr	r3, [r7, #28]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d1e5      	bne.n	800d0b8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	e000      	b.n	800d0f2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800d0f0:	2302      	movs	r3, #2
  }
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3730      	adds	r7, #48	@ 0x30
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}
 800d0fa:	bf00      	nop
 800d0fc:	0800d667 	.word	0x0800d667
 800d100:	0800d701 	.word	0x0800d701
 800d104:	0800d71d 	.word	0x0800d71d

0800d108 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b0ba      	sub	sp, #232	@ 0xe8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	68db      	ldr	r3, [r3, #12]
 800d120:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	695b      	ldr	r3, [r3, #20]
 800d12a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800d12e:	2300      	movs	r3, #0
 800d130:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800d134:	2300      	movs	r3, #0
 800d136:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d13a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d13e:	f003 030f 	and.w	r3, r3, #15
 800d142:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800d146:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d10f      	bne.n	800d16e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d14e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d152:	f003 0320 	and.w	r3, r3, #32
 800d156:	2b00      	cmp	r3, #0
 800d158:	d009      	beq.n	800d16e <HAL_UART_IRQHandler+0x66>
 800d15a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d15e:	f003 0320 	and.w	r3, r3, #32
 800d162:	2b00      	cmp	r3, #0
 800d164:	d003      	beq.n	800d16e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f000 fccd 	bl	800db06 <UART_Receive_IT>
      return;
 800d16c:	e25b      	b.n	800d626 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d16e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d172:	2b00      	cmp	r3, #0
 800d174:	f000 80de 	beq.w	800d334 <HAL_UART_IRQHandler+0x22c>
 800d178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d17c:	f003 0301 	and.w	r3, r3, #1
 800d180:	2b00      	cmp	r3, #0
 800d182:	d106      	bne.n	800d192 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d188:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	f000 80d1 	beq.w	800d334 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d196:	f003 0301 	and.w	r3, r3, #1
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d00b      	beq.n	800d1b6 <HAL_UART_IRQHandler+0xae>
 800d19e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d1a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d005      	beq.n	800d1b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1ae:	f043 0201 	orr.w	r2, r3, #1
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d1b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1ba:	f003 0304 	and.w	r3, r3, #4
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d00b      	beq.n	800d1da <HAL_UART_IRQHandler+0xd2>
 800d1c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d1c6:	f003 0301 	and.w	r3, r3, #1
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d005      	beq.n	800d1da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1d2:	f043 0202 	orr.w	r2, r3, #2
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d1da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1de:	f003 0302 	and.w	r3, r3, #2
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d00b      	beq.n	800d1fe <HAL_UART_IRQHandler+0xf6>
 800d1e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d1ea:	f003 0301 	and.w	r3, r3, #1
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d005      	beq.n	800d1fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1f6:	f043 0204 	orr.w	r2, r3, #4
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d1fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d202:	f003 0308 	and.w	r3, r3, #8
 800d206:	2b00      	cmp	r3, #0
 800d208:	d011      	beq.n	800d22e <HAL_UART_IRQHandler+0x126>
 800d20a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d20e:	f003 0320 	and.w	r3, r3, #32
 800d212:	2b00      	cmp	r3, #0
 800d214:	d105      	bne.n	800d222 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d21a:	f003 0301 	and.w	r3, r3, #1
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d005      	beq.n	800d22e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d226:	f043 0208 	orr.w	r2, r3, #8
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d232:	2b00      	cmp	r3, #0
 800d234:	f000 81f2 	beq.w	800d61c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d23c:	f003 0320 	and.w	r3, r3, #32
 800d240:	2b00      	cmp	r3, #0
 800d242:	d008      	beq.n	800d256 <HAL_UART_IRQHandler+0x14e>
 800d244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d248:	f003 0320 	and.w	r3, r3, #32
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d002      	beq.n	800d256 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f000 fc58 	bl	800db06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	695b      	ldr	r3, [r3, #20]
 800d25c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d260:	2b00      	cmp	r3, #0
 800d262:	bf14      	ite	ne
 800d264:	2301      	movne	r3, #1
 800d266:	2300      	moveq	r3, #0
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d272:	f003 0308 	and.w	r3, r3, #8
 800d276:	2b00      	cmp	r3, #0
 800d278:	d103      	bne.n	800d282 <HAL_UART_IRQHandler+0x17a>
 800d27a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d04f      	beq.n	800d322 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f000 fb62 	bl	800d94c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	695b      	ldr	r3, [r3, #20]
 800d28e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d292:	2b00      	cmp	r3, #0
 800d294:	d041      	beq.n	800d31a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	3314      	adds	r3, #20
 800d29c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d2a4:	e853 3f00 	ldrex	r3, [r3]
 800d2a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d2ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d2b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d2b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	3314      	adds	r3, #20
 800d2be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d2c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d2c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d2ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d2d2:	e841 2300 	strex	r3, r2, [r1]
 800d2d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d2da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d1d9      	bne.n	800d296 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d013      	beq.n	800d312 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2ee:	4a7e      	ldr	r2, [pc, #504]	@ (800d4e8 <HAL_UART_IRQHandler+0x3e0>)
 800d2f0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7fa fe70 	bl	8007fdc <HAL_DMA_Abort_IT>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d016      	beq.n	800d330 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d308:	687a      	ldr	r2, [r7, #4]
 800d30a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d30c:	4610      	mov	r0, r2
 800d30e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d310:	e00e      	b.n	800d330 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f000 f993 	bl	800d63e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d318:	e00a      	b.n	800d330 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 f98f 	bl	800d63e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d320:	e006      	b.n	800d330 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f000 f98b 	bl	800d63e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2200      	movs	r2, #0
 800d32c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800d32e:	e175      	b.n	800d61c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d330:	bf00      	nop
    return;
 800d332:	e173      	b.n	800d61c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d338:	2b01      	cmp	r3, #1
 800d33a:	f040 814f 	bne.w	800d5dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d33e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d342:	f003 0310 	and.w	r3, r3, #16
 800d346:	2b00      	cmp	r3, #0
 800d348:	f000 8148 	beq.w	800d5dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d34c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d350:	f003 0310 	and.w	r3, r3, #16
 800d354:	2b00      	cmp	r3, #0
 800d356:	f000 8141 	beq.w	800d5dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d35a:	2300      	movs	r3, #0
 800d35c:	60bb      	str	r3, [r7, #8]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	60bb      	str	r3, [r7, #8]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	60bb      	str	r3, [r7, #8]
 800d36e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	695b      	ldr	r3, [r3, #20]
 800d376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	f000 80b6 	beq.w	800d4ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d38c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d390:	2b00      	cmp	r3, #0
 800d392:	f000 8145 	beq.w	800d620 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d39a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	f080 813e 	bcs.w	800d620 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d3aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3b0:	699b      	ldr	r3, [r3, #24]
 800d3b2:	2b20      	cmp	r3, #32
 800d3b4:	f000 8088 	beq.w	800d4c8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	330c      	adds	r3, #12
 800d3be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d3c6:	e853 3f00 	ldrex	r3, [r3]
 800d3ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d3ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d3d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d3d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	330c      	adds	r3, #12
 800d3e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d3e4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d3e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d3f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d3f4:	e841 2300 	strex	r3, r2, [r1]
 800d3f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d3fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d400:	2b00      	cmp	r3, #0
 800d402:	d1d9      	bne.n	800d3b8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	3314      	adds	r3, #20
 800d40a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d40c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d40e:	e853 3f00 	ldrex	r3, [r3]
 800d412:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d414:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d416:	f023 0301 	bic.w	r3, r3, #1
 800d41a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	3314      	adds	r3, #20
 800d424:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d428:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d42c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d42e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d430:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d434:	e841 2300 	strex	r3, r2, [r1]
 800d438:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d43a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d1e1      	bne.n	800d404 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	3314      	adds	r3, #20
 800d446:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d448:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d44a:	e853 3f00 	ldrex	r3, [r3]
 800d44e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d450:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d452:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d456:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	3314      	adds	r3, #20
 800d460:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d464:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d466:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d468:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d46a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d46c:	e841 2300 	strex	r3, r2, [r1]
 800d470:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d472:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d474:	2b00      	cmp	r3, #0
 800d476:	d1e3      	bne.n	800d440 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2220      	movs	r2, #32
 800d47c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2200      	movs	r2, #0
 800d484:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	330c      	adds	r3, #12
 800d48c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d48e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d490:	e853 3f00 	ldrex	r3, [r3]
 800d494:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d496:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d498:	f023 0310 	bic.w	r3, r3, #16
 800d49c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	330c      	adds	r3, #12
 800d4a6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d4aa:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d4ac:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d4b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d4b2:	e841 2300 	strex	r3, r2, [r1]
 800d4b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d4b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d1e3      	bne.n	800d486 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f7fa fd4e 	bl	8007f64 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2202      	movs	r2, #2
 800d4cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d4d6:	b29b      	uxth	r3, r3
 800d4d8:	1ad3      	subs	r3, r2, r3
 800d4da:	b29b      	uxth	r3, r3
 800d4dc:	4619      	mov	r1, r3
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f000 f8b6 	bl	800d650 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d4e4:	e09c      	b.n	800d620 <HAL_UART_IRQHandler+0x518>
 800d4e6:	bf00      	nop
 800d4e8:	0800da11 	.word	0x0800da11
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d4f4:	b29b      	uxth	r3, r3
 800d4f6:	1ad3      	subs	r3, r2, r3
 800d4f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d500:	b29b      	uxth	r3, r3
 800d502:	2b00      	cmp	r3, #0
 800d504:	f000 808e 	beq.w	800d624 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800d508:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	f000 8089 	beq.w	800d624 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	330c      	adds	r3, #12
 800d518:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d51c:	e853 3f00 	ldrex	r3, [r3]
 800d520:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d524:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d528:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	330c      	adds	r3, #12
 800d532:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d536:	647a      	str	r2, [r7, #68]	@ 0x44
 800d538:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d53a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d53c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d53e:	e841 2300 	strex	r3, r2, [r1]
 800d542:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d546:	2b00      	cmp	r3, #0
 800d548:	d1e3      	bne.n	800d512 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	3314      	adds	r3, #20
 800d550:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d554:	e853 3f00 	ldrex	r3, [r3]
 800d558:	623b      	str	r3, [r7, #32]
   return(result);
 800d55a:	6a3b      	ldr	r3, [r7, #32]
 800d55c:	f023 0301 	bic.w	r3, r3, #1
 800d560:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	3314      	adds	r3, #20
 800d56a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d56e:	633a      	str	r2, [r7, #48]	@ 0x30
 800d570:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d572:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d574:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d576:	e841 2300 	strex	r3, r2, [r1]
 800d57a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d1e3      	bne.n	800d54a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2220      	movs	r2, #32
 800d586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2200      	movs	r2, #0
 800d58e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	330c      	adds	r3, #12
 800d596:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	e853 3f00 	ldrex	r3, [r3]
 800d59e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	f023 0310 	bic.w	r3, r3, #16
 800d5a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	330c      	adds	r3, #12
 800d5b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d5b4:	61fa      	str	r2, [r7, #28]
 800d5b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5b8:	69b9      	ldr	r1, [r7, #24]
 800d5ba:	69fa      	ldr	r2, [r7, #28]
 800d5bc:	e841 2300 	strex	r3, r2, [r1]
 800d5c0:	617b      	str	r3, [r7, #20]
   return(result);
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d1e3      	bne.n	800d590 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2202      	movs	r2, #2
 800d5cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d5ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d5d2:	4619      	mov	r1, r3
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f000 f83b 	bl	800d650 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d5da:	e023      	b.n	800d624 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d5dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d5e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d009      	beq.n	800d5fc <HAL_UART_IRQHandler+0x4f4>
 800d5e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d5ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d003      	beq.n	800d5fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f000 fa1f 	bl	800da38 <UART_Transmit_IT>
    return;
 800d5fa:	e014      	b.n	800d626 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d5fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d604:	2b00      	cmp	r3, #0
 800d606:	d00e      	beq.n	800d626 <HAL_UART_IRQHandler+0x51e>
 800d608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d60c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d610:	2b00      	cmp	r3, #0
 800d612:	d008      	beq.n	800d626 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f000 fa5e 	bl	800dad6 <UART_EndTransmit_IT>
    return;
 800d61a:	e004      	b.n	800d626 <HAL_UART_IRQHandler+0x51e>
    return;
 800d61c:	bf00      	nop
 800d61e:	e002      	b.n	800d626 <HAL_UART_IRQHandler+0x51e>
      return;
 800d620:	bf00      	nop
 800d622:	e000      	b.n	800d626 <HAL_UART_IRQHandler+0x51e>
      return;
 800d624:	bf00      	nop
  }
}
 800d626:	37e8      	adds	r7, #232	@ 0xe8
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d62c:	b480      	push	{r7}
 800d62e:	b083      	sub	sp, #12
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800d634:	bf00      	nop
 800d636:	370c      	adds	r7, #12
 800d638:	46bd      	mov	sp, r7
 800d63a:	bc80      	pop	{r7}
 800d63c:	4770      	bx	lr

0800d63e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d63e:	b480      	push	{r7}
 800d640:	b083      	sub	sp, #12
 800d642:	af00      	add	r7, sp, #0
 800d644:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d646:	bf00      	nop
 800d648:	370c      	adds	r7, #12
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bc80      	pop	{r7}
 800d64e:	4770      	bx	lr

0800d650 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d650:	b480      	push	{r7}
 800d652:	b083      	sub	sp, #12
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	460b      	mov	r3, r1
 800d65a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d65c:	bf00      	nop
 800d65e:	370c      	adds	r7, #12
 800d660:	46bd      	mov	sp, r7
 800d662:	bc80      	pop	{r7}
 800d664:	4770      	bx	lr

0800d666 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d666:	b580      	push	{r7, lr}
 800d668:	b090      	sub	sp, #64	@ 0x40
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d672:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f003 0320 	and.w	r3, r3, #32
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d137      	bne.n	800d6f2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800d682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d684:	2200      	movs	r2, #0
 800d686:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	3314      	adds	r3, #20
 800d68e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d692:	e853 3f00 	ldrex	r3, [r3]
 800d696:	623b      	str	r3, [r7, #32]
   return(result);
 800d698:	6a3b      	ldr	r3, [r7, #32]
 800d69a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d69e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d6a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	3314      	adds	r3, #20
 800d6a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d6a8:	633a      	str	r2, [r7, #48]	@ 0x30
 800d6aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d6ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6b0:	e841 2300 	strex	r3, r2, [r1]
 800d6b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d1e5      	bne.n	800d688 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d6bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	330c      	adds	r3, #12
 800d6c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	e853 3f00 	ldrex	r3, [r3]
 800d6ca:	60fb      	str	r3, [r7, #12]
   return(result);
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	330c      	adds	r3, #12
 800d6da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d6dc:	61fa      	str	r2, [r7, #28]
 800d6de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6e0:	69b9      	ldr	r1, [r7, #24]
 800d6e2:	69fa      	ldr	r2, [r7, #28]
 800d6e4:	e841 2300 	strex	r3, r2, [r1]
 800d6e8:	617b      	str	r3, [r7, #20]
   return(result);
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d1e5      	bne.n	800d6bc <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d6f0:	e002      	b.n	800d6f8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d6f2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d6f4:	f7f7 fac2 	bl	8004c7c <HAL_UART_TxCpltCallback>
}
 800d6f8:	bf00      	nop
 800d6fa:	3740      	adds	r7, #64	@ 0x40
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}

0800d700 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b084      	sub	sp, #16
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d70c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d70e:	68f8      	ldr	r0, [r7, #12]
 800d710:	f7ff ff8c 	bl	800d62c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d714:	bf00      	nop
 800d716:	3710      	adds	r7, #16
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800d724:	2300      	movs	r3, #0
 800d726:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d72c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	695b      	ldr	r3, [r3, #20]
 800d734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d738:	2b00      	cmp	r3, #0
 800d73a:	bf14      	ite	ne
 800d73c:	2301      	movne	r3, #1
 800d73e:	2300      	moveq	r3, #0
 800d740:	b2db      	uxtb	r3, r3
 800d742:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d74a:	b2db      	uxtb	r3, r3
 800d74c:	2b21      	cmp	r3, #33	@ 0x21
 800d74e:	d108      	bne.n	800d762 <UART_DMAError+0x46>
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d005      	beq.n	800d762 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	2200      	movs	r2, #0
 800d75a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800d75c:	68b8      	ldr	r0, [r7, #8]
 800d75e:	f000 f8ce 	bl	800d8fe <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	695b      	ldr	r3, [r3, #20]
 800d768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	bf14      	ite	ne
 800d770:	2301      	movne	r3, #1
 800d772:	2300      	moveq	r3, #0
 800d774:	b2db      	uxtb	r3, r3
 800d776:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d77e:	b2db      	uxtb	r3, r3
 800d780:	2b22      	cmp	r3, #34	@ 0x22
 800d782:	d108      	bne.n	800d796 <UART_DMAError+0x7a>
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d005      	beq.n	800d796 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	2200      	movs	r2, #0
 800d78e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800d790:	68b8      	ldr	r0, [r7, #8]
 800d792:	f000 f8db 	bl	800d94c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d79a:	f043 0210 	orr.w	r2, r3, #16
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d7a2:	68b8      	ldr	r0, [r7, #8]
 800d7a4:	f7ff ff4b 	bl	800d63e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d7a8:	bf00      	nop
 800d7aa:	3710      	adds	r7, #16
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b090      	sub	sp, #64	@ 0x40
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	603b      	str	r3, [r7, #0]
 800d7bc:	4613      	mov	r3, r2
 800d7be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d7c0:	e050      	b.n	800d864 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d7c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7c8:	d04c      	beq.n	800d864 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d7ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d007      	beq.n	800d7e0 <UART_WaitOnFlagUntilTimeout+0x30>
 800d7d0:	f7fa f9e4 	bl	8007b9c <HAL_GetTick>
 800d7d4:	4602      	mov	r2, r0
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	1ad3      	subs	r3, r2, r3
 800d7da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	d241      	bcs.n	800d864 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	330c      	adds	r3, #12
 800d7e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7ea:	e853 3f00 	ldrex	r3, [r3]
 800d7ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7f2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800d7f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	330c      	adds	r3, #12
 800d7fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d800:	637a      	str	r2, [r7, #52]	@ 0x34
 800d802:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d804:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d806:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d808:	e841 2300 	strex	r3, r2, [r1]
 800d80c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d80e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d810:	2b00      	cmp	r3, #0
 800d812:	d1e5      	bne.n	800d7e0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	3314      	adds	r3, #20
 800d81a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	e853 3f00 	ldrex	r3, [r3]
 800d822:	613b      	str	r3, [r7, #16]
   return(result);
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	f023 0301 	bic.w	r3, r3, #1
 800d82a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	3314      	adds	r3, #20
 800d832:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d834:	623a      	str	r2, [r7, #32]
 800d836:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d838:	69f9      	ldr	r1, [r7, #28]
 800d83a:	6a3a      	ldr	r2, [r7, #32]
 800d83c:	e841 2300 	strex	r3, r2, [r1]
 800d840:	61bb      	str	r3, [r7, #24]
   return(result);
 800d842:	69bb      	ldr	r3, [r7, #24]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d1e5      	bne.n	800d814 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2220      	movs	r2, #32
 800d84c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	2220      	movs	r2, #32
 800d854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2200      	movs	r2, #0
 800d85c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800d860:	2303      	movs	r3, #3
 800d862:	e00f      	b.n	800d884 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	681a      	ldr	r2, [r3, #0]
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	4013      	ands	r3, r2
 800d86e:	68ba      	ldr	r2, [r7, #8]
 800d870:	429a      	cmp	r2, r3
 800d872:	bf0c      	ite	eq
 800d874:	2301      	moveq	r3, #1
 800d876:	2300      	movne	r3, #0
 800d878:	b2db      	uxtb	r3, r3
 800d87a:	461a      	mov	r2, r3
 800d87c:	79fb      	ldrb	r3, [r7, #7]
 800d87e:	429a      	cmp	r2, r3
 800d880:	d09f      	beq.n	800d7c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d882:	2300      	movs	r3, #0
}
 800d884:	4618      	mov	r0, r3
 800d886:	3740      	adds	r7, #64	@ 0x40
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b085      	sub	sp, #20
 800d890:	af00      	add	r7, sp, #0
 800d892:	60f8      	str	r0, [r7, #12]
 800d894:	60b9      	str	r1, [r7, #8]
 800d896:	4613      	mov	r3, r2
 800d898:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	68ba      	ldr	r2, [r7, #8]
 800d89e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	88fa      	ldrh	r2, [r7, #6]
 800d8a4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	88fa      	ldrh	r2, [r7, #6]
 800d8aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	2222      	movs	r2, #34	@ 0x22
 800d8b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	691b      	ldr	r3, [r3, #16]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d007      	beq.n	800d8d2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	68da      	ldr	r2, [r3, #12]
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d8d0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	695a      	ldr	r2, [r3, #20]
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	f042 0201 	orr.w	r2, r2, #1
 800d8e0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	68da      	ldr	r2, [r3, #12]
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f042 0220 	orr.w	r2, r2, #32
 800d8f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d8f2:	2300      	movs	r3, #0
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3714      	adds	r7, #20
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bc80      	pop	{r7}
 800d8fc:	4770      	bx	lr

0800d8fe <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d8fe:	b480      	push	{r7}
 800d900:	b089      	sub	sp, #36	@ 0x24
 800d902:	af00      	add	r7, sp, #0
 800d904:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	330c      	adds	r3, #12
 800d90c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	e853 3f00 	ldrex	r3, [r3]
 800d914:	60bb      	str	r3, [r7, #8]
   return(result);
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d91c:	61fb      	str	r3, [r7, #28]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	330c      	adds	r3, #12
 800d924:	69fa      	ldr	r2, [r7, #28]
 800d926:	61ba      	str	r2, [r7, #24]
 800d928:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d92a:	6979      	ldr	r1, [r7, #20]
 800d92c:	69ba      	ldr	r2, [r7, #24]
 800d92e:	e841 2300 	strex	r3, r2, [r1]
 800d932:	613b      	str	r3, [r7, #16]
   return(result);
 800d934:	693b      	ldr	r3, [r7, #16]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d1e5      	bne.n	800d906 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2220      	movs	r2, #32
 800d93e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800d942:	bf00      	nop
 800d944:	3724      	adds	r7, #36	@ 0x24
 800d946:	46bd      	mov	sp, r7
 800d948:	bc80      	pop	{r7}
 800d94a:	4770      	bx	lr

0800d94c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b095      	sub	sp, #84	@ 0x54
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	330c      	adds	r3, #12
 800d95a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d95c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d95e:	e853 3f00 	ldrex	r3, [r3]
 800d962:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d966:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d96a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	330c      	adds	r3, #12
 800d972:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d974:	643a      	str	r2, [r7, #64]	@ 0x40
 800d976:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d978:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d97a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d97c:	e841 2300 	strex	r3, r2, [r1]
 800d980:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d984:	2b00      	cmp	r3, #0
 800d986:	d1e5      	bne.n	800d954 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	3314      	adds	r3, #20
 800d98e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d990:	6a3b      	ldr	r3, [r7, #32]
 800d992:	e853 3f00 	ldrex	r3, [r3]
 800d996:	61fb      	str	r3, [r7, #28]
   return(result);
 800d998:	69fb      	ldr	r3, [r7, #28]
 800d99a:	f023 0301 	bic.w	r3, r3, #1
 800d99e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	3314      	adds	r3, #20
 800d9a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d9a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d9aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d9ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9b0:	e841 2300 	strex	r3, r2, [r1]
 800d9b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d1e5      	bne.n	800d988 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d119      	bne.n	800d9f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	330c      	adds	r3, #12
 800d9ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	e853 3f00 	ldrex	r3, [r3]
 800d9d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	f023 0310 	bic.w	r3, r3, #16
 800d9da:	647b      	str	r3, [r7, #68]	@ 0x44
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	330c      	adds	r3, #12
 800d9e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d9e4:	61ba      	str	r2, [r7, #24]
 800d9e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9e8:	6979      	ldr	r1, [r7, #20]
 800d9ea:	69ba      	ldr	r2, [r7, #24]
 800d9ec:	e841 2300 	strex	r3, r2, [r1]
 800d9f0:	613b      	str	r3, [r7, #16]
   return(result);
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d1e5      	bne.n	800d9c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2220      	movs	r2, #32
 800d9fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2200      	movs	r2, #0
 800da04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800da06:	bf00      	nop
 800da08:	3754      	adds	r7, #84	@ 0x54
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bc80      	pop	{r7}
 800da0e:	4770      	bx	lr

0800da10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b084      	sub	sp, #16
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	2200      	movs	r2, #0
 800da22:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2200      	movs	r2, #0
 800da28:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800da2a:	68f8      	ldr	r0, [r7, #12]
 800da2c:	f7ff fe07 	bl	800d63e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da30:	bf00      	nop
 800da32:	3710      	adds	r7, #16
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}

0800da38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800da38:	b480      	push	{r7}
 800da3a:	b085      	sub	sp, #20
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800da46:	b2db      	uxtb	r3, r3
 800da48:	2b21      	cmp	r3, #33	@ 0x21
 800da4a:	d13e      	bne.n	800daca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	689b      	ldr	r3, [r3, #8]
 800da50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da54:	d114      	bne.n	800da80 <UART_Transmit_IT+0x48>
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	691b      	ldr	r3, [r3, #16]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d110      	bne.n	800da80 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6a1b      	ldr	r3, [r3, #32]
 800da62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	881b      	ldrh	r3, [r3, #0]
 800da68:	461a      	mov	r2, r3
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800da72:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6a1b      	ldr	r3, [r3, #32]
 800da78:	1c9a      	adds	r2, r3, #2
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	621a      	str	r2, [r3, #32]
 800da7e:	e008      	b.n	800da92 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6a1b      	ldr	r3, [r3, #32]
 800da84:	1c59      	adds	r1, r3, #1
 800da86:	687a      	ldr	r2, [r7, #4]
 800da88:	6211      	str	r1, [r2, #32]
 800da8a:	781a      	ldrb	r2, [r3, #0]
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800da96:	b29b      	uxth	r3, r3
 800da98:	3b01      	subs	r3, #1
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	687a      	ldr	r2, [r7, #4]
 800da9e:	4619      	mov	r1, r3
 800daa0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d10f      	bne.n	800dac6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	68da      	ldr	r2, [r3, #12]
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dab4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	68da      	ldr	r2, [r3, #12]
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dac4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800dac6:	2300      	movs	r3, #0
 800dac8:	e000      	b.n	800dacc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800daca:	2302      	movs	r3, #2
  }
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3714      	adds	r7, #20
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bc80      	pop	{r7}
 800dad4:	4770      	bx	lr

0800dad6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dad6:	b580      	push	{r7, lr}
 800dad8:	b082      	sub	sp, #8
 800dada:	af00      	add	r7, sp, #0
 800dadc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	68da      	ldr	r2, [r3, #12]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800daec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2220      	movs	r2, #32
 800daf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f7f7 f8c0 	bl	8004c7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800dafc:	2300      	movs	r3, #0
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3708      	adds	r7, #8
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}

0800db06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800db06:	b580      	push	{r7, lr}
 800db08:	b08c      	sub	sp, #48	@ 0x30
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800db14:	b2db      	uxtb	r3, r3
 800db16:	2b22      	cmp	r3, #34	@ 0x22
 800db18:	f040 80ae 	bne.w	800dc78 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	689b      	ldr	r3, [r3, #8]
 800db20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db24:	d117      	bne.n	800db56 <UART_Receive_IT+0x50>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	691b      	ldr	r3, [r3, #16]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d113      	bne.n	800db56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800db2e:	2300      	movs	r3, #0
 800db30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db36:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	685b      	ldr	r3, [r3, #4]
 800db3e:	b29b      	uxth	r3, r3
 800db40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db44:	b29a      	uxth	r2, r3
 800db46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db4e:	1c9a      	adds	r2, r3, #2
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	629a      	str	r2, [r3, #40]	@ 0x28
 800db54:	e026      	b.n	800dba4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800db5c:	2300      	movs	r3, #0
 800db5e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	689b      	ldr	r3, [r3, #8]
 800db64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db68:	d007      	beq.n	800db7a <UART_Receive_IT+0x74>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	689b      	ldr	r3, [r3, #8]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d10a      	bne.n	800db88 <UART_Receive_IT+0x82>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	691b      	ldr	r3, [r3, #16]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d106      	bne.n	800db88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	685b      	ldr	r3, [r3, #4]
 800db80:	b2da      	uxtb	r2, r3
 800db82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db84:	701a      	strb	r2, [r3, #0]
 800db86:	e008      	b.n	800db9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	685b      	ldr	r3, [r3, #4]
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db94:	b2da      	uxtb	r2, r3
 800db96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db9e:	1c5a      	adds	r2, r3, #1
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800dba8:	b29b      	uxth	r3, r3
 800dbaa:	3b01      	subs	r3, #1
 800dbac:	b29b      	uxth	r3, r3
 800dbae:	687a      	ldr	r2, [r7, #4]
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d15d      	bne.n	800dc74 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	68da      	ldr	r2, [r3, #12]
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	f022 0220 	bic.w	r2, r2, #32
 800dbc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	68da      	ldr	r2, [r3, #12]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800dbd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	695a      	ldr	r2, [r3, #20]
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f022 0201 	bic.w	r2, r2, #1
 800dbe6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2220      	movs	r2, #32
 800dbec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbfa:	2b01      	cmp	r3, #1
 800dbfc:	d135      	bne.n	800dc6a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2200      	movs	r2, #0
 800dc02:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	330c      	adds	r3, #12
 800dc0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	e853 3f00 	ldrex	r3, [r3]
 800dc12:	613b      	str	r3, [r7, #16]
   return(result);
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	f023 0310 	bic.w	r3, r3, #16
 800dc1a:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	330c      	adds	r3, #12
 800dc22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc24:	623a      	str	r2, [r7, #32]
 800dc26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc28:	69f9      	ldr	r1, [r7, #28]
 800dc2a:	6a3a      	ldr	r2, [r7, #32]
 800dc2c:	e841 2300 	strex	r3, r2, [r1]
 800dc30:	61bb      	str	r3, [r7, #24]
   return(result);
 800dc32:	69bb      	ldr	r3, [r7, #24]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d1e5      	bne.n	800dc04 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f003 0310 	and.w	r3, r3, #16
 800dc42:	2b10      	cmp	r3, #16
 800dc44:	d10a      	bne.n	800dc5c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800dc46:	2300      	movs	r3, #0
 800dc48:	60fb      	str	r3, [r7, #12]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	60fb      	str	r3, [r7, #12]
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	685b      	ldr	r3, [r3, #4]
 800dc58:	60fb      	str	r3, [r7, #12]
 800dc5a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800dc60:	4619      	mov	r1, r3
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f7ff fcf4 	bl	800d650 <HAL_UARTEx_RxEventCallback>
 800dc68:	e002      	b.n	800dc70 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f7f6 ffec 	bl	8004c48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800dc70:	2300      	movs	r3, #0
 800dc72:	e002      	b.n	800dc7a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800dc74:	2300      	movs	r3, #0
 800dc76:	e000      	b.n	800dc7a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800dc78:	2302      	movs	r3, #2
  }
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3730      	adds	r7, #48	@ 0x30
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
	...

0800dc84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b084      	sub	sp, #16
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	691b      	ldr	r3, [r3, #16]
 800dc92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	68da      	ldr	r2, [r3, #12]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	430a      	orrs	r2, r1
 800dca0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	689a      	ldr	r2, [r3, #8]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	691b      	ldr	r3, [r3, #16]
 800dcaa:	431a      	orrs	r2, r3
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	695b      	ldr	r3, [r3, #20]
 800dcb0:	4313      	orrs	r3, r2
 800dcb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	68db      	ldr	r3, [r3, #12]
 800dcba:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800dcbe:	f023 030c 	bic.w	r3, r3, #12
 800dcc2:	687a      	ldr	r2, [r7, #4]
 800dcc4:	6812      	ldr	r2, [r2, #0]
 800dcc6:	68b9      	ldr	r1, [r7, #8]
 800dcc8:	430b      	orrs	r3, r1
 800dcca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	695b      	ldr	r3, [r3, #20]
 800dcd2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	699a      	ldr	r2, [r3, #24]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	430a      	orrs	r2, r1
 800dce0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	4a2c      	ldr	r2, [pc, #176]	@ (800dd98 <UART_SetConfig+0x114>)
 800dce8:	4293      	cmp	r3, r2
 800dcea:	d103      	bne.n	800dcf4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800dcec:	f7fd f8e4 	bl	800aeb8 <HAL_RCC_GetPCLK2Freq>
 800dcf0:	60f8      	str	r0, [r7, #12]
 800dcf2:	e002      	b.n	800dcfa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800dcf4:	f7fd f8cc 	bl	800ae90 <HAL_RCC_GetPCLK1Freq>
 800dcf8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800dcfa:	68fa      	ldr	r2, [r7, #12]
 800dcfc:	4613      	mov	r3, r2
 800dcfe:	009b      	lsls	r3, r3, #2
 800dd00:	4413      	add	r3, r2
 800dd02:	009a      	lsls	r2, r3, #2
 800dd04:	441a      	add	r2, r3
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	685b      	ldr	r3, [r3, #4]
 800dd0a:	009b      	lsls	r3, r3, #2
 800dd0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd10:	4a22      	ldr	r2, [pc, #136]	@ (800dd9c <UART_SetConfig+0x118>)
 800dd12:	fba2 2303 	umull	r2, r3, r2, r3
 800dd16:	095b      	lsrs	r3, r3, #5
 800dd18:	0119      	lsls	r1, r3, #4
 800dd1a:	68fa      	ldr	r2, [r7, #12]
 800dd1c:	4613      	mov	r3, r2
 800dd1e:	009b      	lsls	r3, r3, #2
 800dd20:	4413      	add	r3, r2
 800dd22:	009a      	lsls	r2, r3, #2
 800dd24:	441a      	add	r2, r3
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	685b      	ldr	r3, [r3, #4]
 800dd2a:	009b      	lsls	r3, r3, #2
 800dd2c:	fbb2 f2f3 	udiv	r2, r2, r3
 800dd30:	4b1a      	ldr	r3, [pc, #104]	@ (800dd9c <UART_SetConfig+0x118>)
 800dd32:	fba3 0302 	umull	r0, r3, r3, r2
 800dd36:	095b      	lsrs	r3, r3, #5
 800dd38:	2064      	movs	r0, #100	@ 0x64
 800dd3a:	fb00 f303 	mul.w	r3, r0, r3
 800dd3e:	1ad3      	subs	r3, r2, r3
 800dd40:	011b      	lsls	r3, r3, #4
 800dd42:	3332      	adds	r3, #50	@ 0x32
 800dd44:	4a15      	ldr	r2, [pc, #84]	@ (800dd9c <UART_SetConfig+0x118>)
 800dd46:	fba2 2303 	umull	r2, r3, r2, r3
 800dd4a:	095b      	lsrs	r3, r3, #5
 800dd4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dd50:	4419      	add	r1, r3
 800dd52:	68fa      	ldr	r2, [r7, #12]
 800dd54:	4613      	mov	r3, r2
 800dd56:	009b      	lsls	r3, r3, #2
 800dd58:	4413      	add	r3, r2
 800dd5a:	009a      	lsls	r2, r3, #2
 800dd5c:	441a      	add	r2, r3
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	685b      	ldr	r3, [r3, #4]
 800dd62:	009b      	lsls	r3, r3, #2
 800dd64:	fbb2 f2f3 	udiv	r2, r2, r3
 800dd68:	4b0c      	ldr	r3, [pc, #48]	@ (800dd9c <UART_SetConfig+0x118>)
 800dd6a:	fba3 0302 	umull	r0, r3, r3, r2
 800dd6e:	095b      	lsrs	r3, r3, #5
 800dd70:	2064      	movs	r0, #100	@ 0x64
 800dd72:	fb00 f303 	mul.w	r3, r0, r3
 800dd76:	1ad3      	subs	r3, r2, r3
 800dd78:	011b      	lsls	r3, r3, #4
 800dd7a:	3332      	adds	r3, #50	@ 0x32
 800dd7c:	4a07      	ldr	r2, [pc, #28]	@ (800dd9c <UART_SetConfig+0x118>)
 800dd7e:	fba2 2303 	umull	r2, r3, r2, r3
 800dd82:	095b      	lsrs	r3, r3, #5
 800dd84:	f003 020f 	and.w	r2, r3, #15
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	440a      	add	r2, r1
 800dd8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800dd90:	bf00      	nop
 800dd92:	3710      	adds	r7, #16
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}
 800dd98:	40013800 	.word	0x40013800
 800dd9c:	51eb851f 	.word	0x51eb851f

0800dda0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800dda0:	b084      	sub	sp, #16
 800dda2:	b480      	push	{r7}
 800dda4:	b085      	sub	sp, #20
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
 800ddaa:	f107 001c 	add.w	r0, r7, #28
 800ddae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ddb6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ddb8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ddba:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ddbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800ddbe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ddc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800ddc2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ddc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800ddc6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ddc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800ddca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ddcc:	68fa      	ldr	r2, [r7, #12]
 800ddce:	4313      	orrs	r3, r2
 800ddd0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	685b      	ldr	r3, [r3, #4]
 800ddd6:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800ddda:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ddde:	68fa      	ldr	r2, [r7, #12]
 800dde0:	431a      	orrs	r2, r3
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800dde6:	2300      	movs	r3, #0
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3714      	adds	r7, #20
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bc80      	pop	{r7}
 800ddf0:	b004      	add	sp, #16
 800ddf2:	4770      	bx	lr

0800ddf4 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b083      	sub	sp, #12
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800de02:	4618      	mov	r0, r3
 800de04:	370c      	adds	r7, #12
 800de06:	46bd      	mov	sp, r7
 800de08:	bc80      	pop	{r7}
 800de0a:	4770      	bx	lr

0800de0c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800de0c:	b480      	push	{r7}
 800de0e:	b083      	sub	sp, #12
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	681a      	ldr	r2, [r3, #0]
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800de20:	2300      	movs	r3, #0
}
 800de22:	4618      	mov	r0, r3
 800de24:	370c      	adds	r7, #12
 800de26:	46bd      	mov	sp, r7
 800de28:	bc80      	pop	{r7}
 800de2a:	4770      	bx	lr

0800de2c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800de2c:	b480      	push	{r7}
 800de2e:	b083      	sub	sp, #12
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2203      	movs	r2, #3
 800de38:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800de3a:	2300      	movs	r3, #0
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	370c      	adds	r7, #12
 800de40:	46bd      	mov	sp, r7
 800de42:	bc80      	pop	{r7}
 800de44:	4770      	bx	lr

0800de46 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800de46:	b480      	push	{r7}
 800de48:	b083      	sub	sp, #12
 800de4a:	af00      	add	r7, sp, #0
 800de4c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	f003 0303 	and.w	r3, r3, #3
}
 800de56:	4618      	mov	r0, r3
 800de58:	370c      	adds	r7, #12
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bc80      	pop	{r7}
 800de5e:	4770      	bx	lr

0800de60 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800de60:	b480      	push	{r7}
 800de62:	b085      	sub	sp, #20
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800de6a:	2300      	movs	r3, #0
 800de6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800de7e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800de84:	431a      	orrs	r2, r3
                       Command->CPSM);
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800de8a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800de8c:	68fa      	ldr	r2, [r7, #12]
 800de8e:	4313      	orrs	r3, r2
 800de90:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	68db      	ldr	r3, [r3, #12]
 800de96:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800de9a:	f023 030f 	bic.w	r3, r3, #15
 800de9e:	68fa      	ldr	r2, [r7, #12]
 800dea0:	431a      	orrs	r2, r3
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800dea6:	2300      	movs	r3, #0
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3714      	adds	r7, #20
 800deac:	46bd      	mov	sp, r7
 800deae:	bc80      	pop	{r7}
 800deb0:	4770      	bx	lr

0800deb2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800deb2:	b480      	push	{r7}
 800deb4:	b083      	sub	sp, #12
 800deb6:	af00      	add	r7, sp, #0
 800deb8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	691b      	ldr	r3, [r3, #16]
 800debe:	b2db      	uxtb	r3, r3
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	370c      	adds	r7, #12
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bc80      	pop	{r7}
 800dec8:	4770      	bx	lr

0800deca <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800deca:	b480      	push	{r7}
 800decc:	b085      	sub	sp, #20
 800dece:	af00      	add	r7, sp, #0
 800ded0:	6078      	str	r0, [r7, #4]
 800ded2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	3314      	adds	r3, #20
 800ded8:	461a      	mov	r2, r3
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	4413      	add	r3, r2
 800dede:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	681b      	ldr	r3, [r3, #0]
}  
 800dee4:	4618      	mov	r0, r3
 800dee6:	3714      	adds	r7, #20
 800dee8:	46bd      	mov	sp, r7
 800deea:	bc80      	pop	{r7}
 800deec:	4770      	bx	lr

0800deee <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800deee:	b480      	push	{r7}
 800def0:	b085      	sub	sp, #20
 800def2:	af00      	add	r7, sp, #0
 800def4:	6078      	str	r0, [r7, #4]
 800def6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800def8:	2300      	movs	r3, #0
 800defa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	681a      	ldr	r2, [r3, #0]
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	685a      	ldr	r2, [r3, #4]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800df14:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800df1a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800df20:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800df22:	68fa      	ldr	r2, [r7, #12]
 800df24:	4313      	orrs	r3, r2
 800df26:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df2c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	431a      	orrs	r2, r3
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800df38:	2300      	movs	r3, #0

}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3714      	adds	r7, #20
 800df3e:	46bd      	mov	sp, r7
 800df40:	bc80      	pop	{r7}
 800df42:	4770      	bx	lr

0800df44 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b088      	sub	sp, #32
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800df52:	2310      	movs	r3, #16
 800df54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800df56:	2340      	movs	r3, #64	@ 0x40
 800df58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800df5a:	2300      	movs	r3, #0
 800df5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800df5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800df62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800df64:	f107 0308 	add.w	r3, r7, #8
 800df68:	4619      	mov	r1, r3
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f7ff ff78 	bl	800de60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800df70:	f241 3288 	movw	r2, #5000	@ 0x1388
 800df74:	2110      	movs	r1, #16
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f000 f9d6 	bl	800e328 <SDMMC_GetCmdResp1>
 800df7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df7e:	69fb      	ldr	r3, [r7, #28]
}
 800df80:	4618      	mov	r0, r3
 800df82:	3720      	adds	r7, #32
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}

0800df88 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b088      	sub	sp, #32
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800df96:	2311      	movs	r3, #17
 800df98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800df9a:	2340      	movs	r3, #64	@ 0x40
 800df9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dfa2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dfa6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dfa8:	f107 0308 	add.w	r3, r7, #8
 800dfac:	4619      	mov	r1, r3
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f7ff ff56 	bl	800de60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800dfb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dfb8:	2111      	movs	r1, #17
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f000 f9b4 	bl	800e328 <SDMMC_GetCmdResp1>
 800dfc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfc2:	69fb      	ldr	r3, [r7, #28]
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3720      	adds	r7, #32
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}

0800dfcc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b088      	sub	sp, #32
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800dfda:	2312      	movs	r3, #18
 800dfdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dfde:	2340      	movs	r3, #64	@ 0x40
 800dfe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dfe6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dfea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dfec:	f107 0308 	add.w	r3, r7, #8
 800dff0:	4619      	mov	r1, r3
 800dff2:	6878      	ldr	r0, [r7, #4]
 800dff4:	f7ff ff34 	bl	800de60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800dff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dffc:	2112      	movs	r1, #18
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 f992 	bl	800e328 <SDMMC_GetCmdResp1>
 800e004:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e006:	69fb      	ldr	r3, [r7, #28]
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3720      	adds	r7, #32
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}

0800e010 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b088      	sub	sp, #32
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e01e:	2318      	movs	r3, #24
 800e020:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e022:	2340      	movs	r3, #64	@ 0x40
 800e024:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e026:	2300      	movs	r3, #0
 800e028:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e02a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e02e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e030:	f107 0308 	add.w	r3, r7, #8
 800e034:	4619      	mov	r1, r3
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f7ff ff12 	bl	800de60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e03c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e040:	2118      	movs	r1, #24
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f000 f970 	bl	800e328 <SDMMC_GetCmdResp1>
 800e048:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e04a:	69fb      	ldr	r3, [r7, #28]
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3720      	adds	r7, #32
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b088      	sub	sp, #32
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e062:	2319      	movs	r3, #25
 800e064:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e066:	2340      	movs	r3, #64	@ 0x40
 800e068:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e06a:	2300      	movs	r3, #0
 800e06c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e06e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e072:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e074:	f107 0308 	add.w	r3, r7, #8
 800e078:	4619      	mov	r1, r3
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f7ff fef0 	bl	800de60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e080:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e084:	2119      	movs	r1, #25
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f000 f94e 	bl	800e328 <SDMMC_GetCmdResp1>
 800e08c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e08e:	69fb      	ldr	r3, [r7, #28]
}
 800e090:	4618      	mov	r0, r3
 800e092:	3720      	adds	r7, #32
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}

0800e098 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b088      	sub	sp, #32
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e0a4:	230c      	movs	r3, #12
 800e0a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e0a8:	2340      	movs	r3, #64	@ 0x40
 800e0aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e0b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e0b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e0b6:	f107 0308 	add.w	r3, r7, #8
 800e0ba:	4619      	mov	r1, r3
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f7ff fecf 	bl	800de60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800e0c2:	4a05      	ldr	r2, [pc, #20]	@ (800e0d8 <SDMMC_CmdStopTransfer+0x40>)
 800e0c4:	210c      	movs	r1, #12
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f000 f92e 	bl	800e328 <SDMMC_GetCmdResp1>
 800e0cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0ce:	69fb      	ldr	r3, [r7, #28]
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3720      	adds	r7, #32
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}
 800e0d8:	05f5e100 	.word	0x05f5e100

0800e0dc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b08a      	sub	sp, #40	@ 0x28
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	60f8      	str	r0, [r7, #12]
 800e0e4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e0ec:	2307      	movs	r3, #7
 800e0ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e0f0:	2340      	movs	r3, #64	@ 0x40
 800e0f2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e0f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e0fc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e0fe:	f107 0310 	add.w	r3, r7, #16
 800e102:	4619      	mov	r1, r3
 800e104:	68f8      	ldr	r0, [r7, #12]
 800e106:	f7ff feab 	bl	800de60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800e10a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e10e:	2107      	movs	r1, #7
 800e110:	68f8      	ldr	r0, [r7, #12]
 800e112:	f000 f909 	bl	800e328 <SDMMC_GetCmdResp1>
 800e116:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800e118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3728      	adds	r7, #40	@ 0x28
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}

0800e122 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800e122:	b580      	push	{r7, lr}
 800e124:	b088      	sub	sp, #32
 800e126:	af00      	add	r7, sp, #0
 800e128:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e12a:	2300      	movs	r3, #0
 800e12c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e12e:	2300      	movs	r3, #0
 800e130:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800e132:	2300      	movs	r3, #0
 800e134:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e136:	2300      	movs	r3, #0
 800e138:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e13a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e13e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e140:	f107 0308 	add.w	r3, r7, #8
 800e144:	4619      	mov	r1, r3
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f7ff fe8a 	bl	800de60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f000 fb21 	bl	800e794 <SDMMC_GetCmdError>
 800e152:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e154:	69fb      	ldr	r3, [r7, #28]
}
 800e156:	4618      	mov	r0, r3
 800e158:	3720      	adds	r7, #32
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}

0800e15e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800e15e:	b580      	push	{r7, lr}
 800e160:	b088      	sub	sp, #32
 800e162:	af00      	add	r7, sp, #0
 800e164:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e166:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800e16a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e16c:	2308      	movs	r3, #8
 800e16e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e170:	2340      	movs	r3, #64	@ 0x40
 800e172:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e174:	2300      	movs	r3, #0
 800e176:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e178:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e17c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e17e:	f107 0308 	add.w	r3, r7, #8
 800e182:	4619      	mov	r1, r3
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f7ff fe6b 	bl	800de60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f000 fab4 	bl	800e6f8 <SDMMC_GetCmdResp7>
 800e190:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e192:	69fb      	ldr	r3, [r7, #28]
}
 800e194:	4618      	mov	r0, r3
 800e196:	3720      	adds	r7, #32
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}

0800e19c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b088      	sub	sp, #32
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
 800e1a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e1aa:	2337      	movs	r3, #55	@ 0x37
 800e1ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e1ae:	2340      	movs	r3, #64	@ 0x40
 800e1b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e1b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e1ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e1bc:	f107 0308 	add.w	r3, r7, #8
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f7ff fe4c 	bl	800de60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800e1c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e1cc:	2137      	movs	r1, #55	@ 0x37
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f000 f8aa 	bl	800e328 <SDMMC_GetCmdResp1>
 800e1d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1d6:	69fb      	ldr	r3, [r7, #28]
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3720      	adds	r7, #32
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}

0800e1e0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b088      	sub	sp, #32
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e1f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e1f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e1f6:	2329      	movs	r3, #41	@ 0x29
 800e1f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e1fa:	2340      	movs	r3, #64	@ 0x40
 800e1fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e1fe:	2300      	movs	r3, #0
 800e200:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e202:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e206:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e208:	f107 0308 	add.w	r3, r7, #8
 800e20c:	4619      	mov	r1, r3
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f7ff fe26 	bl	800de60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	f000 f9bd 	bl	800e594 <SDMMC_GetCmdResp3>
 800e21a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e21c:	69fb      	ldr	r3, [r7, #28]
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3720      	adds	r7, #32
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}

0800e226 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800e226:	b580      	push	{r7, lr}
 800e228:	b088      	sub	sp, #32
 800e22a:	af00      	add	r7, sp, #0
 800e22c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e22e:	2300      	movs	r3, #0
 800e230:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e232:	2302      	movs	r3, #2
 800e234:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e236:	23c0      	movs	r3, #192	@ 0xc0
 800e238:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e23a:	2300      	movs	r3, #0
 800e23c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e23e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e242:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e244:	f107 0308 	add.w	r3, r7, #8
 800e248:	4619      	mov	r1, r3
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f7ff fe08 	bl	800de60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f000 f957 	bl	800e504 <SDMMC_GetCmdResp2>
 800e256:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e258:	69fb      	ldr	r3, [r7, #28]
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	3720      	adds	r7, #32
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}

0800e262 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e262:	b580      	push	{r7, lr}
 800e264:	b088      	sub	sp, #32
 800e266:	af00      	add	r7, sp, #0
 800e268:	6078      	str	r0, [r7, #4]
 800e26a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e270:	2309      	movs	r3, #9
 800e272:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e274:	23c0      	movs	r3, #192	@ 0xc0
 800e276:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e278:	2300      	movs	r3, #0
 800e27a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e27c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e280:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e282:	f107 0308 	add.w	r3, r7, #8
 800e286:	4619      	mov	r1, r3
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f7ff fde9 	bl	800de60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f000 f938 	bl	800e504 <SDMMC_GetCmdResp2>
 800e294:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e296:	69fb      	ldr	r3, [r7, #28]
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3720      	adds	r7, #32
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b088      	sub	sp, #32
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e2ae:	2303      	movs	r3, #3
 800e2b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e2b2:	2340      	movs	r3, #64	@ 0x40
 800e2b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e2ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e2be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e2c0:	f107 0308 	add.w	r3, r7, #8
 800e2c4:	4619      	mov	r1, r3
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f7ff fdca 	bl	800de60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e2cc:	683a      	ldr	r2, [r7, #0]
 800e2ce:	2103      	movs	r1, #3
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f000 f99b 	bl	800e60c <SDMMC_GetCmdResp6>
 800e2d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2d8:	69fb      	ldr	r3, [r7, #28]
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3720      	adds	r7, #32
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}

0800e2e2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e2e2:	b580      	push	{r7, lr}
 800e2e4:	b088      	sub	sp, #32
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	6078      	str	r0, [r7, #4]
 800e2ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e2f0:	230d      	movs	r3, #13
 800e2f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e2f4:	2340      	movs	r3, #64	@ 0x40
 800e2f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e2fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e300:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e302:	f107 0308 	add.w	r3, r7, #8
 800e306:	4619      	mov	r1, r3
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f7ff fda9 	bl	800de60 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800e30e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e312:	210d      	movs	r1, #13
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f000 f807 	bl	800e328 <SDMMC_GetCmdResp1>
 800e31a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e31c:	69fb      	ldr	r3, [r7, #28]
}
 800e31e:	4618      	mov	r0, r3
 800e320:	3720      	adds	r7, #32
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
	...

0800e328 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b088      	sub	sp, #32
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	60f8      	str	r0, [r7, #12]
 800e330:	460b      	mov	r3, r1
 800e332:	607a      	str	r2, [r7, #4]
 800e334:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e336:	4b70      	ldr	r3, [pc, #448]	@ (800e4f8 <SDMMC_GetCmdResp1+0x1d0>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4a70      	ldr	r2, [pc, #448]	@ (800e4fc <SDMMC_GetCmdResp1+0x1d4>)
 800e33c:	fba2 2303 	umull	r2, r3, r2, r3
 800e340:	0a5a      	lsrs	r2, r3, #9
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	fb02 f303 	mul.w	r3, r2, r3
 800e348:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e34a:	69fb      	ldr	r3, [r7, #28]
 800e34c:	1e5a      	subs	r2, r3, #1
 800e34e:	61fa      	str	r2, [r7, #28]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d102      	bne.n	800e35a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e354:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e358:	e0c9      	b.n	800e4ee <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e35e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e360:	69bb      	ldr	r3, [r7, #24]
 800e362:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e366:	2b00      	cmp	r3, #0
 800e368:	d0ef      	beq.n	800e34a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e36a:	69bb      	ldr	r3, [r7, #24]
 800e36c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e370:	2b00      	cmp	r3, #0
 800e372:	d1ea      	bne.n	800e34a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e378:	f003 0304 	and.w	r3, r3, #4
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d004      	beq.n	800e38a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	2204      	movs	r2, #4
 800e384:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e386:	2304      	movs	r3, #4
 800e388:	e0b1      	b.n	800e4ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e38e:	f003 0301 	and.w	r3, r3, #1
 800e392:	2b00      	cmp	r3, #0
 800e394:	d004      	beq.n	800e3a0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	2201      	movs	r2, #1
 800e39a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e39c:	2301      	movs	r3, #1
 800e39e:	e0a6      	b.n	800e4ee <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	22c5      	movs	r2, #197	@ 0xc5
 800e3a4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e3a6:	68f8      	ldr	r0, [r7, #12]
 800e3a8:	f7ff fd83 	bl	800deb2 <SDIO_GetCommandResponse>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	7afb      	ldrb	r3, [r7, #11]
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d001      	beq.n	800e3ba <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	e099      	b.n	800e4ee <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e3ba:	2100      	movs	r1, #0
 800e3bc:	68f8      	ldr	r0, [r7, #12]
 800e3be:	f7ff fd84 	bl	800deca <SDIO_GetResponse>
 800e3c2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e3c4:	697a      	ldr	r2, [r7, #20]
 800e3c6:	4b4e      	ldr	r3, [pc, #312]	@ (800e500 <SDMMC_GetCmdResp1+0x1d8>)
 800e3c8:	4013      	ands	r3, r2
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d101      	bne.n	800e3d2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	e08d      	b.n	800e4ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	da02      	bge.n	800e3de <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e3d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e3dc:	e087      	b.n	800e4ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d001      	beq.n	800e3ec <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e3e8:	2340      	movs	r3, #64	@ 0x40
 800e3ea:	e080      	b.n	800e4ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d001      	beq.n	800e3fa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e3f6:	2380      	movs	r3, #128	@ 0x80
 800e3f8:	e079      	b.n	800e4ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e400:	2b00      	cmp	r3, #0
 800e402:	d002      	beq.n	800e40a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e404:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e408:	e071      	b.n	800e4ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e410:	2b00      	cmp	r3, #0
 800e412:	d002      	beq.n	800e41a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e414:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e418:	e069      	b.n	800e4ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e420:	2b00      	cmp	r3, #0
 800e422:	d002      	beq.n	800e42a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e424:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e428:	e061      	b.n	800e4ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e430:	2b00      	cmp	r3, #0
 800e432:	d002      	beq.n	800e43a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e434:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e438:	e059      	b.n	800e4ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e440:	2b00      	cmp	r3, #0
 800e442:	d002      	beq.n	800e44a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e444:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e448:	e051      	b.n	800e4ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e44a:	697b      	ldr	r3, [r7, #20]
 800e44c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e450:	2b00      	cmp	r3, #0
 800e452:	d002      	beq.n	800e45a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e454:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e458:	e049      	b.n	800e4ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e460:	2b00      	cmp	r3, #0
 800e462:	d002      	beq.n	800e46a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e464:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e468:	e041      	b.n	800e4ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e470:	2b00      	cmp	r3, #0
 800e472:	d002      	beq.n	800e47a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e474:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e478:	e039      	b.n	800e4ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e480:	2b00      	cmp	r3, #0
 800e482:	d002      	beq.n	800e48a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e484:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800e488:	e031      	b.n	800e4ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e48a:	697b      	ldr	r3, [r7, #20]
 800e48c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e490:	2b00      	cmp	r3, #0
 800e492:	d002      	beq.n	800e49a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e494:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800e498:	e029      	b.n	800e4ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d002      	beq.n	800e4aa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e4a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e4a8:	e021      	b.n	800e4ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d002      	beq.n	800e4ba <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e4b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e4b8:	e019      	b.n	800e4ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d002      	beq.n	800e4ca <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e4c4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800e4c8:	e011      	b.n	800e4ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d002      	beq.n	800e4da <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e4d4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800e4d8:	e009      	b.n	800e4ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	f003 0308 	and.w	r3, r3, #8
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d002      	beq.n	800e4ea <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e4e4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800e4e8:	e001      	b.n	800e4ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e4ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3720      	adds	r7, #32
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}
 800e4f6:	bf00      	nop
 800e4f8:	20000028 	.word	0x20000028
 800e4fc:	10624dd3 	.word	0x10624dd3
 800e500:	fdffe008 	.word	0xfdffe008

0800e504 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e504:	b480      	push	{r7}
 800e506:	b085      	sub	sp, #20
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e50c:	4b1f      	ldr	r3, [pc, #124]	@ (800e58c <SDMMC_GetCmdResp2+0x88>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	4a1f      	ldr	r2, [pc, #124]	@ (800e590 <SDMMC_GetCmdResp2+0x8c>)
 800e512:	fba2 2303 	umull	r2, r3, r2, r3
 800e516:	0a5b      	lsrs	r3, r3, #9
 800e518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e51c:	fb02 f303 	mul.w	r3, r2, r3
 800e520:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	1e5a      	subs	r2, r3, #1
 800e526:	60fa      	str	r2, [r7, #12]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d102      	bne.n	800e532 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e52c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e530:	e026      	b.n	800e580 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e536:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d0ef      	beq.n	800e522 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d1ea      	bne.n	800e522 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e550:	f003 0304 	and.w	r3, r3, #4
 800e554:	2b00      	cmp	r3, #0
 800e556:	d004      	beq.n	800e562 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2204      	movs	r2, #4
 800e55c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e55e:	2304      	movs	r3, #4
 800e560:	e00e      	b.n	800e580 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e566:	f003 0301 	and.w	r3, r3, #1
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d004      	beq.n	800e578 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2201      	movs	r2, #1
 800e572:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e574:	2301      	movs	r3, #1
 800e576:	e003      	b.n	800e580 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	22c5      	movs	r2, #197	@ 0xc5
 800e57c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800e57e:	2300      	movs	r3, #0
}
 800e580:	4618      	mov	r0, r3
 800e582:	3714      	adds	r7, #20
 800e584:	46bd      	mov	sp, r7
 800e586:	bc80      	pop	{r7}
 800e588:	4770      	bx	lr
 800e58a:	bf00      	nop
 800e58c:	20000028 	.word	0x20000028
 800e590:	10624dd3 	.word	0x10624dd3

0800e594 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e594:	b480      	push	{r7}
 800e596:	b085      	sub	sp, #20
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e59c:	4b19      	ldr	r3, [pc, #100]	@ (800e604 <SDMMC_GetCmdResp3+0x70>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4a19      	ldr	r2, [pc, #100]	@ (800e608 <SDMMC_GetCmdResp3+0x74>)
 800e5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e5a6:	0a5b      	lsrs	r3, r3, #9
 800e5a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e5ac:	fb02 f303 	mul.w	r3, r2, r3
 800e5b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	1e5a      	subs	r2, r3, #1
 800e5b6:	60fa      	str	r2, [r7, #12]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d102      	bne.n	800e5c2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e5bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e5c0:	e01b      	b.n	800e5fa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e5c6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d0ef      	beq.n	800e5b2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d1ea      	bne.n	800e5b2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e5e0:	f003 0304 	and.w	r3, r3, #4
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d004      	beq.n	800e5f2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2204      	movs	r2, #4
 800e5ec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e5ee:	2304      	movs	r3, #4
 800e5f0:	e003      	b.n	800e5fa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	22c5      	movs	r2, #197	@ 0xc5
 800e5f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e5f8:	2300      	movs	r3, #0
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3714      	adds	r7, #20
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bc80      	pop	{r7}
 800e602:	4770      	bx	lr
 800e604:	20000028 	.word	0x20000028
 800e608:	10624dd3 	.word	0x10624dd3

0800e60c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b088      	sub	sp, #32
 800e610:	af00      	add	r7, sp, #0
 800e612:	60f8      	str	r0, [r7, #12]
 800e614:	460b      	mov	r3, r1
 800e616:	607a      	str	r2, [r7, #4]
 800e618:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e61a:	4b35      	ldr	r3, [pc, #212]	@ (800e6f0 <SDMMC_GetCmdResp6+0xe4>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	4a35      	ldr	r2, [pc, #212]	@ (800e6f4 <SDMMC_GetCmdResp6+0xe8>)
 800e620:	fba2 2303 	umull	r2, r3, r2, r3
 800e624:	0a5b      	lsrs	r3, r3, #9
 800e626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e62a:	fb02 f303 	mul.w	r3, r2, r3
 800e62e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e630:	69fb      	ldr	r3, [r7, #28]
 800e632:	1e5a      	subs	r2, r3, #1
 800e634:	61fa      	str	r2, [r7, #28]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d102      	bne.n	800e640 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e63a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e63e:	e052      	b.n	800e6e6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e644:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e646:	69bb      	ldr	r3, [r7, #24]
 800e648:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d0ef      	beq.n	800e630 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e650:	69bb      	ldr	r3, [r7, #24]
 800e652:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e656:	2b00      	cmp	r3, #0
 800e658:	d1ea      	bne.n	800e630 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e65e:	f003 0304 	and.w	r3, r3, #4
 800e662:	2b00      	cmp	r3, #0
 800e664:	d004      	beq.n	800e670 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2204      	movs	r2, #4
 800e66a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e66c:	2304      	movs	r3, #4
 800e66e:	e03a      	b.n	800e6e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e674:	f003 0301 	and.w	r3, r3, #1
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d004      	beq.n	800e686 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2201      	movs	r2, #1
 800e680:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e682:	2301      	movs	r3, #1
 800e684:	e02f      	b.n	800e6e6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e686:	68f8      	ldr	r0, [r7, #12]
 800e688:	f7ff fc13 	bl	800deb2 <SDIO_GetCommandResponse>
 800e68c:	4603      	mov	r3, r0
 800e68e:	461a      	mov	r2, r3
 800e690:	7afb      	ldrb	r3, [r7, #11]
 800e692:	4293      	cmp	r3, r2
 800e694:	d001      	beq.n	800e69a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e696:	2301      	movs	r3, #1
 800e698:	e025      	b.n	800e6e6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	22c5      	movs	r2, #197	@ 0xc5
 800e69e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e6a0:	2100      	movs	r1, #0
 800e6a2:	68f8      	ldr	r0, [r7, #12]
 800e6a4:	f7ff fc11 	bl	800deca <SDIO_GetResponse>
 800e6a8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d106      	bne.n	800e6c2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	0c1b      	lsrs	r3, r3, #16
 800e6b8:	b29a      	uxth	r2, r3
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	e011      	b.n	800e6e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d002      	beq.n	800e6d2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e6cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e6d0:	e009      	b.n	800e6e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d002      	beq.n	800e6e2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e6dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e6e0:	e001      	b.n	800e6e6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e6e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3720      	adds	r7, #32
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	20000028 	.word	0x20000028
 800e6f4:	10624dd3 	.word	0x10624dd3

0800e6f8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	b085      	sub	sp, #20
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e700:	4b22      	ldr	r3, [pc, #136]	@ (800e78c <SDMMC_GetCmdResp7+0x94>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	4a22      	ldr	r2, [pc, #136]	@ (800e790 <SDMMC_GetCmdResp7+0x98>)
 800e706:	fba2 2303 	umull	r2, r3, r2, r3
 800e70a:	0a5b      	lsrs	r3, r3, #9
 800e70c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e710:	fb02 f303 	mul.w	r3, r2, r3
 800e714:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	1e5a      	subs	r2, r3, #1
 800e71a:	60fa      	str	r2, [r7, #12]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d102      	bne.n	800e726 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e720:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e724:	e02c      	b.n	800e780 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e72a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e732:	2b00      	cmp	r3, #0
 800e734:	d0ef      	beq.n	800e716 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d1ea      	bne.n	800e716 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e744:	f003 0304 	and.w	r3, r3, #4
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d004      	beq.n	800e756 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2204      	movs	r2, #4
 800e750:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e752:	2304      	movs	r3, #4
 800e754:	e014      	b.n	800e780 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e75a:	f003 0301 	and.w	r3, r3, #1
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d004      	beq.n	800e76c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2201      	movs	r2, #1
 800e766:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e768:	2301      	movs	r3, #1
 800e76a:	e009      	b.n	800e780 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e774:	2b00      	cmp	r3, #0
 800e776:	d002      	beq.n	800e77e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2240      	movs	r2, #64	@ 0x40
 800e77c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e77e:	2300      	movs	r3, #0
  
}
 800e780:	4618      	mov	r0, r3
 800e782:	3714      	adds	r7, #20
 800e784:	46bd      	mov	sp, r7
 800e786:	bc80      	pop	{r7}
 800e788:	4770      	bx	lr
 800e78a:	bf00      	nop
 800e78c:	20000028 	.word	0x20000028
 800e790:	10624dd3 	.word	0x10624dd3

0800e794 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800e794:	b480      	push	{r7}
 800e796:	b085      	sub	sp, #20
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e79c:	4b10      	ldr	r3, [pc, #64]	@ (800e7e0 <SDMMC_GetCmdError+0x4c>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4a10      	ldr	r2, [pc, #64]	@ (800e7e4 <SDMMC_GetCmdError+0x50>)
 800e7a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e7a6:	0a5b      	lsrs	r3, r3, #9
 800e7a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e7ac:	fb02 f303 	mul.w	r3, r2, r3
 800e7b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	1e5a      	subs	r2, r3, #1
 800e7b6:	60fa      	str	r2, [r7, #12]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d102      	bne.n	800e7c2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e7bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e7c0:	e009      	b.n	800e7d6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e7c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d0f1      	beq.n	800e7b2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	22c5      	movs	r2, #197	@ 0xc5
 800e7d2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800e7d4:	2300      	movs	r3, #0
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3714      	adds	r7, #20
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bc80      	pop	{r7}
 800e7de:	4770      	bx	lr
 800e7e0:	20000028 	.word	0x20000028
 800e7e4:	10624dd3 	.word	0x10624dd3

0800e7e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e7ec:	4904      	ldr	r1, [pc, #16]	@ (800e800 <MX_FATFS_Init+0x18>)
 800e7ee:	4805      	ldr	r0, [pc, #20]	@ (800e804 <MX_FATFS_Init+0x1c>)
 800e7f0:	f003 fc26 	bl	8012040 <FATFS_LinkDriver>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	4b03      	ldr	r3, [pc, #12]	@ (800e808 <MX_FATFS_Init+0x20>)
 800e7fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e7fc:	bf00      	nop
 800e7fe:	bd80      	pop	{r7, pc}
 800e800:	20000ea4 	.word	0x20000ea4
 800e804:	08015ff4 	.word	0x08015ff4
 800e808:	20000ea0 	.word	0x20000ea0

0800e80c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e80c:	b480      	push	{r7}
 800e80e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e810:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e812:	4618      	mov	r0, r3
 800e814:	46bd      	mov	sp, r7
 800e816:	bc80      	pop	{r7}
 800e818:	4770      	bx	lr
	...

0800e81c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b082      	sub	sp, #8
 800e820:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e822:	2300      	movs	r3, #0
 800e824:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e826:	f000 f86b 	bl	800e900 <BSP_SD_IsDetected>
 800e82a:	4603      	mov	r3, r0
 800e82c:	2b01      	cmp	r3, #1
 800e82e:	d001      	beq.n	800e834 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800e830:	2301      	movs	r3, #1
 800e832:	e005      	b.n	800e840 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800e834:	4804      	ldr	r0, [pc, #16]	@ (800e848 <BSP_SD_Init+0x2c>)
 800e836:	f7fc fba1 	bl	800af7c <HAL_SD_Init>
 800e83a:	4603      	mov	r3, r0
 800e83c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800e83e:	79fb      	ldrb	r3, [r7, #7]
}
 800e840:	4618      	mov	r0, r3
 800e842:	3708      	adds	r7, #8
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}
 800e848:	200008ec 	.word	0x200008ec

0800e84c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b088      	sub	sp, #32
 800e850:	af02      	add	r7, sp, #8
 800e852:	60f8      	str	r0, [r7, #12]
 800e854:	60b9      	str	r1, [r7, #8]
 800e856:	607a      	str	r2, [r7, #4]
 800e858:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e85a:	2300      	movs	r3, #0
 800e85c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	9300      	str	r3, [sp, #0]
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	68ba      	ldr	r2, [r7, #8]
 800e866:	68f9      	ldr	r1, [r7, #12]
 800e868:	4806      	ldr	r0, [pc, #24]	@ (800e884 <BSP_SD_ReadBlocks+0x38>)
 800e86a:	f7fc fc37 	bl	800b0dc <HAL_SD_ReadBlocks>
 800e86e:	4603      	mov	r3, r0
 800e870:	2b00      	cmp	r3, #0
 800e872:	d001      	beq.n	800e878 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e874:	2301      	movs	r3, #1
 800e876:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e878:	7dfb      	ldrb	r3, [r7, #23]
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3718      	adds	r7, #24
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}
 800e882:	bf00      	nop
 800e884:	200008ec 	.word	0x200008ec

0800e888 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b088      	sub	sp, #32
 800e88c:	af02      	add	r7, sp, #8
 800e88e:	60f8      	str	r0, [r7, #12]
 800e890:	60b9      	str	r1, [r7, #8]
 800e892:	607a      	str	r2, [r7, #4]
 800e894:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e896:	2300      	movs	r3, #0
 800e898:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	9300      	str	r3, [sp, #0]
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	68ba      	ldr	r2, [r7, #8]
 800e8a2:	68f9      	ldr	r1, [r7, #12]
 800e8a4:	4806      	ldr	r0, [pc, #24]	@ (800e8c0 <BSP_SD_WriteBlocks+0x38>)
 800e8a6:	f7fc fdf7 	bl	800b498 <HAL_SD_WriteBlocks>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d001      	beq.n	800e8b4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e8b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3718      	adds	r7, #24
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
 800e8be:	bf00      	nop
 800e8c0:	200008ec 	.word	0x200008ec

0800e8c4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e8c8:	4805      	ldr	r0, [pc, #20]	@ (800e8e0 <BSP_SD_GetCardState+0x1c>)
 800e8ca:	f7fd f93a 	bl	800bb42 <HAL_SD_GetCardState>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	2b04      	cmp	r3, #4
 800e8d2:	bf14      	ite	ne
 800e8d4:	2301      	movne	r3, #1
 800e8d6:	2300      	moveq	r3, #0
 800e8d8:	b2db      	uxtb	r3, r3
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	bd80      	pop	{r7, pc}
 800e8de:	bf00      	nop
 800e8e0:	200008ec 	.word	0x200008ec

0800e8e4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b082      	sub	sp, #8
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800e8ec:	6879      	ldr	r1, [r7, #4]
 800e8ee:	4803      	ldr	r0, [pc, #12]	@ (800e8fc <BSP_SD_GetCardInfo+0x18>)
 800e8f0:	f7fd f8fc 	bl	800baec <HAL_SD_GetCardInfo>
}
 800e8f4:	bf00      	nop
 800e8f6:	3708      	adds	r7, #8
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}
 800e8fc:	200008ec 	.word	0x200008ec

0800e900 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e900:	b480      	push	{r7}
 800e902:	b083      	sub	sp, #12
 800e904:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e906:	2301      	movs	r3, #1
 800e908:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800e90a:	79fb      	ldrb	r3, [r7, #7]
 800e90c:	b2db      	uxtb	r3, r3
}
 800e90e:	4618      	mov	r0, r3
 800e910:	370c      	adds	r7, #12
 800e912:	46bd      	mov	sp, r7
 800e914:	bc80      	pop	{r7}
 800e916:	4770      	bx	lr

0800e918 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b084      	sub	sp, #16
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	4603      	mov	r3, r0
 800e920:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e922:	79fb      	ldrb	r3, [r7, #7]
 800e924:	4a08      	ldr	r2, [pc, #32]	@ (800e948 <disk_status+0x30>)
 800e926:	009b      	lsls	r3, r3, #2
 800e928:	4413      	add	r3, r2
 800e92a:	685b      	ldr	r3, [r3, #4]
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	79fa      	ldrb	r2, [r7, #7]
 800e930:	4905      	ldr	r1, [pc, #20]	@ (800e948 <disk_status+0x30>)
 800e932:	440a      	add	r2, r1
 800e934:	7a12      	ldrb	r2, [r2, #8]
 800e936:	4610      	mov	r0, r2
 800e938:	4798      	blx	r3
 800e93a:	4603      	mov	r3, r0
 800e93c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e93e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e940:	4618      	mov	r0, r3
 800e942:	3710      	adds	r7, #16
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}
 800e948:	20001328 	.word	0x20001328

0800e94c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b084      	sub	sp, #16
 800e950:	af00      	add	r7, sp, #0
 800e952:	4603      	mov	r3, r0
 800e954:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e956:	2300      	movs	r3, #0
 800e958:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800e95a:	79fb      	ldrb	r3, [r7, #7]
 800e95c:	4a0d      	ldr	r2, [pc, #52]	@ (800e994 <disk_initialize+0x48>)
 800e95e:	5cd3      	ldrb	r3, [r2, r3]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d111      	bne.n	800e988 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800e964:	79fb      	ldrb	r3, [r7, #7]
 800e966:	4a0b      	ldr	r2, [pc, #44]	@ (800e994 <disk_initialize+0x48>)
 800e968:	2101      	movs	r1, #1
 800e96a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e96c:	79fb      	ldrb	r3, [r7, #7]
 800e96e:	4a09      	ldr	r2, [pc, #36]	@ (800e994 <disk_initialize+0x48>)
 800e970:	009b      	lsls	r3, r3, #2
 800e972:	4413      	add	r3, r2
 800e974:	685b      	ldr	r3, [r3, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	79fa      	ldrb	r2, [r7, #7]
 800e97a:	4906      	ldr	r1, [pc, #24]	@ (800e994 <disk_initialize+0x48>)
 800e97c:	440a      	add	r2, r1
 800e97e:	7a12      	ldrb	r2, [r2, #8]
 800e980:	4610      	mov	r0, r2
 800e982:	4798      	blx	r3
 800e984:	4603      	mov	r3, r0
 800e986:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e988:	7bfb      	ldrb	r3, [r7, #15]
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	3710      	adds	r7, #16
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	20001328 	.word	0x20001328

0800e998 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e998:	b590      	push	{r4, r7, lr}
 800e99a:	b087      	sub	sp, #28
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	60b9      	str	r1, [r7, #8]
 800e9a0:	607a      	str	r2, [r7, #4]
 800e9a2:	603b      	str	r3, [r7, #0]
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e9a8:	7bfb      	ldrb	r3, [r7, #15]
 800e9aa:	4a0a      	ldr	r2, [pc, #40]	@ (800e9d4 <disk_read+0x3c>)
 800e9ac:	009b      	lsls	r3, r3, #2
 800e9ae:	4413      	add	r3, r2
 800e9b0:	685b      	ldr	r3, [r3, #4]
 800e9b2:	689c      	ldr	r4, [r3, #8]
 800e9b4:	7bfb      	ldrb	r3, [r7, #15]
 800e9b6:	4a07      	ldr	r2, [pc, #28]	@ (800e9d4 <disk_read+0x3c>)
 800e9b8:	4413      	add	r3, r2
 800e9ba:	7a18      	ldrb	r0, [r3, #8]
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	687a      	ldr	r2, [r7, #4]
 800e9c0:	68b9      	ldr	r1, [r7, #8]
 800e9c2:	47a0      	blx	r4
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	75fb      	strb	r3, [r7, #23]
  return res;
 800e9c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	371c      	adds	r7, #28
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd90      	pop	{r4, r7, pc}
 800e9d2:	bf00      	nop
 800e9d4:	20001328 	.word	0x20001328

0800e9d8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e9d8:	b590      	push	{r4, r7, lr}
 800e9da:	b087      	sub	sp, #28
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	60b9      	str	r1, [r7, #8]
 800e9e0:	607a      	str	r2, [r7, #4]
 800e9e2:	603b      	str	r3, [r7, #0]
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e9e8:	7bfb      	ldrb	r3, [r7, #15]
 800e9ea:	4a0a      	ldr	r2, [pc, #40]	@ (800ea14 <disk_write+0x3c>)
 800e9ec:	009b      	lsls	r3, r3, #2
 800e9ee:	4413      	add	r3, r2
 800e9f0:	685b      	ldr	r3, [r3, #4]
 800e9f2:	68dc      	ldr	r4, [r3, #12]
 800e9f4:	7bfb      	ldrb	r3, [r7, #15]
 800e9f6:	4a07      	ldr	r2, [pc, #28]	@ (800ea14 <disk_write+0x3c>)
 800e9f8:	4413      	add	r3, r2
 800e9fa:	7a18      	ldrb	r0, [r3, #8]
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	687a      	ldr	r2, [r7, #4]
 800ea00:	68b9      	ldr	r1, [r7, #8]
 800ea02:	47a0      	blx	r4
 800ea04:	4603      	mov	r3, r0
 800ea06:	75fb      	strb	r3, [r7, #23]
  return res;
 800ea08:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	371c      	adds	r7, #28
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd90      	pop	{r4, r7, pc}
 800ea12:	bf00      	nop
 800ea14:	20001328 	.word	0x20001328

0800ea18 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b084      	sub	sp, #16
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	4603      	mov	r3, r0
 800ea20:	603a      	str	r2, [r7, #0]
 800ea22:	71fb      	strb	r3, [r7, #7]
 800ea24:	460b      	mov	r3, r1
 800ea26:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ea28:	79fb      	ldrb	r3, [r7, #7]
 800ea2a:	4a09      	ldr	r2, [pc, #36]	@ (800ea50 <disk_ioctl+0x38>)
 800ea2c:	009b      	lsls	r3, r3, #2
 800ea2e:	4413      	add	r3, r2
 800ea30:	685b      	ldr	r3, [r3, #4]
 800ea32:	691b      	ldr	r3, [r3, #16]
 800ea34:	79fa      	ldrb	r2, [r7, #7]
 800ea36:	4906      	ldr	r1, [pc, #24]	@ (800ea50 <disk_ioctl+0x38>)
 800ea38:	440a      	add	r2, r1
 800ea3a:	7a10      	ldrb	r0, [r2, #8]
 800ea3c:	79b9      	ldrb	r1, [r7, #6]
 800ea3e:	683a      	ldr	r2, [r7, #0]
 800ea40:	4798      	blx	r3
 800ea42:	4603      	mov	r3, r0
 800ea44:	73fb      	strb	r3, [r7, #15]
  return res;
 800ea46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	3710      	adds	r7, #16
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}
 800ea50:	20001328 	.word	0x20001328

0800ea54 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ea54:	b480      	push	{r7}
 800ea56:	b087      	sub	sp, #28
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	60f8      	str	r0, [r7, #12]
 800ea5c:	60b9      	str	r1, [r7, #8]
 800ea5e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800ea68:	e007      	b.n	800ea7a <mem_cpy+0x26>
		*d++ = *s++;
 800ea6a:	693a      	ldr	r2, [r7, #16]
 800ea6c:	1c53      	adds	r3, r2, #1
 800ea6e:	613b      	str	r3, [r7, #16]
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	1c59      	adds	r1, r3, #1
 800ea74:	6179      	str	r1, [r7, #20]
 800ea76:	7812      	ldrb	r2, [r2, #0]
 800ea78:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	1e5a      	subs	r2, r3, #1
 800ea7e:	607a      	str	r2, [r7, #4]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d1f2      	bne.n	800ea6a <mem_cpy+0x16>
}
 800ea84:	bf00      	nop
 800ea86:	bf00      	nop
 800ea88:	371c      	adds	r7, #28
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bc80      	pop	{r7}
 800ea8e:	4770      	bx	lr

0800ea90 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ea90:	b480      	push	{r7}
 800ea92:	b087      	sub	sp, #28
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	60f8      	str	r0, [r7, #12]
 800ea98:	60b9      	str	r1, [r7, #8]
 800ea9a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800eaa0:	e005      	b.n	800eaae <mem_set+0x1e>
		*d++ = (BYTE)val;
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	1c5a      	adds	r2, r3, #1
 800eaa6:	617a      	str	r2, [r7, #20]
 800eaa8:	68ba      	ldr	r2, [r7, #8]
 800eaaa:	b2d2      	uxtb	r2, r2
 800eaac:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	1e5a      	subs	r2, r3, #1
 800eab2:	607a      	str	r2, [r7, #4]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d1f4      	bne.n	800eaa2 <mem_set+0x12>
}
 800eab8:	bf00      	nop
 800eaba:	bf00      	nop
 800eabc:	371c      	adds	r7, #28
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bc80      	pop	{r7}
 800eac2:	4770      	bx	lr

0800eac4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800eac4:	b480      	push	{r7}
 800eac6:	b089      	sub	sp, #36	@ 0x24
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	60f8      	str	r0, [r7, #12]
 800eacc:	60b9      	str	r1, [r7, #8]
 800eace:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	61fb      	str	r3, [r7, #28]
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ead8:	2300      	movs	r3, #0
 800eada:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800eadc:	bf00      	nop
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	1e5a      	subs	r2, r3, #1
 800eae2:	607a      	str	r2, [r7, #4]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d00d      	beq.n	800eb04 <mem_cmp+0x40>
 800eae8:	69fb      	ldr	r3, [r7, #28]
 800eaea:	1c5a      	adds	r2, r3, #1
 800eaec:	61fa      	str	r2, [r7, #28]
 800eaee:	781b      	ldrb	r3, [r3, #0]
 800eaf0:	4619      	mov	r1, r3
 800eaf2:	69bb      	ldr	r3, [r7, #24]
 800eaf4:	1c5a      	adds	r2, r3, #1
 800eaf6:	61ba      	str	r2, [r7, #24]
 800eaf8:	781b      	ldrb	r3, [r3, #0]
 800eafa:	1acb      	subs	r3, r1, r3
 800eafc:	617b      	str	r3, [r7, #20]
 800eafe:	697b      	ldr	r3, [r7, #20]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d0ec      	beq.n	800eade <mem_cmp+0x1a>
	return r;
 800eb04:	697b      	ldr	r3, [r7, #20]
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3724      	adds	r7, #36	@ 0x24
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bc80      	pop	{r7}
 800eb0e:	4770      	bx	lr

0800eb10 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800eb10:	b480      	push	{r7}
 800eb12:	b083      	sub	sp, #12
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800eb1a:	e002      	b.n	800eb22 <chk_chr+0x12>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	3301      	adds	r3, #1
 800eb20:	607b      	str	r3, [r7, #4]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	781b      	ldrb	r3, [r3, #0]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d005      	beq.n	800eb36 <chk_chr+0x26>
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	461a      	mov	r2, r3
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	4293      	cmp	r3, r2
 800eb34:	d1f2      	bne.n	800eb1c <chk_chr+0xc>
	return *str;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	781b      	ldrb	r3, [r3, #0]
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	370c      	adds	r7, #12
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bc80      	pop	{r7}
 800eb42:	4770      	bx	lr

0800eb44 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b082      	sub	sp, #8
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800eb52:	4618      	mov	r0, r3
 800eb54:	f003 fc06 	bl	8012364 <ff_req_grant>
 800eb58:	4603      	mov	r3, r0
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3708      	adds	r7, #8
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}

0800eb62 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800eb62:	b580      	push	{r7, lr}
 800eb64:	b082      	sub	sp, #8
 800eb66:	af00      	add	r7, sp, #0
 800eb68:	6078      	str	r0, [r7, #4]
 800eb6a:	460b      	mov	r3, r1
 800eb6c:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d011      	beq.n	800eb98 <unlock_fs+0x36>
 800eb74:	78fb      	ldrb	r3, [r7, #3]
 800eb76:	2b0c      	cmp	r3, #12
 800eb78:	d00e      	beq.n	800eb98 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 800eb7a:	78fb      	ldrb	r3, [r7, #3]
 800eb7c:	2b0b      	cmp	r3, #11
 800eb7e:	d00b      	beq.n	800eb98 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 800eb80:	78fb      	ldrb	r3, [r7, #3]
 800eb82:	2b09      	cmp	r3, #9
 800eb84:	d008      	beq.n	800eb98 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 800eb86:	78fb      	ldrb	r3, [r7, #3]
 800eb88:	2b0f      	cmp	r3, #15
 800eb8a:	d005      	beq.n	800eb98 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800eb92:	4618      	mov	r0, r3
 800eb94:	f003 fbfb 	bl	801238e <ff_rel_grant>
	}
}
 800eb98:	bf00      	nop
 800eb9a:	3708      	adds	r7, #8
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800eba0:	b480      	push	{r7}
 800eba2:	b085      	sub	sp, #20
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ebaa:	2300      	movs	r3, #0
 800ebac:	60bb      	str	r3, [r7, #8]
 800ebae:	68bb      	ldr	r3, [r7, #8]
 800ebb0:	60fb      	str	r3, [r7, #12]
 800ebb2:	e038      	b.n	800ec26 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800ebb4:	492f      	ldr	r1, [pc, #188]	@ (800ec74 <chk_lock+0xd4>)
 800ebb6:	68fa      	ldr	r2, [r7, #12]
 800ebb8:	4613      	mov	r3, r2
 800ebba:	005b      	lsls	r3, r3, #1
 800ebbc:	4413      	add	r3, r2
 800ebbe:	009b      	lsls	r3, r3, #2
 800ebc0:	440b      	add	r3, r1
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d029      	beq.n	800ec1c <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800ebc8:	492a      	ldr	r1, [pc, #168]	@ (800ec74 <chk_lock+0xd4>)
 800ebca:	68fa      	ldr	r2, [r7, #12]
 800ebcc:	4613      	mov	r3, r2
 800ebce:	005b      	lsls	r3, r3, #1
 800ebd0:	4413      	add	r3, r2
 800ebd2:	009b      	lsls	r3, r3, #2
 800ebd4:	440b      	add	r3, r1
 800ebd6:	681a      	ldr	r2, [r3, #0]
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	d11e      	bne.n	800ec20 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800ebe2:	4924      	ldr	r1, [pc, #144]	@ (800ec74 <chk_lock+0xd4>)
 800ebe4:	68fa      	ldr	r2, [r7, #12]
 800ebe6:	4613      	mov	r3, r2
 800ebe8:	005b      	lsls	r3, r3, #1
 800ebea:	4413      	add	r3, r2
 800ebec:	009b      	lsls	r3, r3, #2
 800ebee:	440b      	add	r3, r1
 800ebf0:	3304      	adds	r3, #4
 800ebf2:	681a      	ldr	r2, [r3, #0]
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	d110      	bne.n	800ec20 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800ebfe:	491d      	ldr	r1, [pc, #116]	@ (800ec74 <chk_lock+0xd4>)
 800ec00:	68fa      	ldr	r2, [r7, #12]
 800ec02:	4613      	mov	r3, r2
 800ec04:	005b      	lsls	r3, r3, #1
 800ec06:	4413      	add	r3, r2
 800ec08:	009b      	lsls	r3, r3, #2
 800ec0a:	440b      	add	r3, r1
 800ec0c:	3308      	adds	r3, #8
 800ec0e:	881a      	ldrh	r2, [r3, #0]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
				Files[i].clu == dp->sclust &&
 800ec16:	429a      	cmp	r2, r3
 800ec18:	d102      	bne.n	800ec20 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800ec1a:	e007      	b.n	800ec2c <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	3301      	adds	r3, #1
 800ec24:	60fb      	str	r3, [r7, #12]
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	2b01      	cmp	r3, #1
 800ec2a:	d9c3      	bls.n	800ebb4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	2b02      	cmp	r3, #2
 800ec30:	d109      	bne.n	800ec46 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d102      	bne.n	800ec3e <chk_lock+0x9e>
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	2b02      	cmp	r3, #2
 800ec3c:	d101      	bne.n	800ec42 <chk_lock+0xa2>
 800ec3e:	2300      	movs	r3, #0
 800ec40:	e013      	b.n	800ec6a <chk_lock+0xca>
 800ec42:	2312      	movs	r3, #18
 800ec44:	e011      	b.n	800ec6a <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d10b      	bne.n	800ec64 <chk_lock+0xc4>
 800ec4c:	4909      	ldr	r1, [pc, #36]	@ (800ec74 <chk_lock+0xd4>)
 800ec4e:	68fa      	ldr	r2, [r7, #12]
 800ec50:	4613      	mov	r3, r2
 800ec52:	005b      	lsls	r3, r3, #1
 800ec54:	4413      	add	r3, r2
 800ec56:	009b      	lsls	r3, r3, #2
 800ec58:	440b      	add	r3, r1
 800ec5a:	330a      	adds	r3, #10
 800ec5c:	881b      	ldrh	r3, [r3, #0]
 800ec5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ec62:	d101      	bne.n	800ec68 <chk_lock+0xc8>
 800ec64:	2310      	movs	r3, #16
 800ec66:	e000      	b.n	800ec6a <chk_lock+0xca>
 800ec68:	2300      	movs	r3, #0
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3714      	adds	r7, #20
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bc80      	pop	{r7}
 800ec72:	4770      	bx	lr
 800ec74:	20001310 	.word	0x20001310

0800ec78 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ec78:	b480      	push	{r7}
 800ec7a:	b083      	sub	sp, #12
 800ec7c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	607b      	str	r3, [r7, #4]
 800ec82:	e002      	b.n	800ec8a <enq_lock+0x12>
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	3301      	adds	r3, #1
 800ec88:	607b      	str	r3, [r7, #4]
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2b01      	cmp	r3, #1
 800ec8e:	d809      	bhi.n	800eca4 <enq_lock+0x2c>
 800ec90:	490a      	ldr	r1, [pc, #40]	@ (800ecbc <enq_lock+0x44>)
 800ec92:	687a      	ldr	r2, [r7, #4]
 800ec94:	4613      	mov	r3, r2
 800ec96:	005b      	lsls	r3, r3, #1
 800ec98:	4413      	add	r3, r2
 800ec9a:	009b      	lsls	r3, r3, #2
 800ec9c:	440b      	add	r3, r1
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d1ef      	bne.n	800ec84 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2b02      	cmp	r3, #2
 800eca8:	bf14      	ite	ne
 800ecaa:	2301      	movne	r3, #1
 800ecac:	2300      	moveq	r3, #0
 800ecae:	b2db      	uxtb	r3, r3
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	370c      	adds	r7, #12
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bc80      	pop	{r7}
 800ecb8:	4770      	bx	lr
 800ecba:	bf00      	nop
 800ecbc:	20001310 	.word	0x20001310

0800ecc0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b085      	sub	sp, #20
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
 800ecc8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ecca:	2300      	movs	r3, #0
 800eccc:	60fb      	str	r3, [r7, #12]
 800ecce:	e02b      	b.n	800ed28 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800ecd0:	4955      	ldr	r1, [pc, #340]	@ (800ee28 <inc_lock+0x168>)
 800ecd2:	68fa      	ldr	r2, [r7, #12]
 800ecd4:	4613      	mov	r3, r2
 800ecd6:	005b      	lsls	r3, r3, #1
 800ecd8:	4413      	add	r3, r2
 800ecda:	009b      	lsls	r3, r3, #2
 800ecdc:	440b      	add	r3, r1
 800ecde:	681a      	ldr	r2, [r3, #0]
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ece6:	429a      	cmp	r2, r3
 800ece8:	d11b      	bne.n	800ed22 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800ecea:	494f      	ldr	r1, [pc, #316]	@ (800ee28 <inc_lock+0x168>)
 800ecec:	68fa      	ldr	r2, [r7, #12]
 800ecee:	4613      	mov	r3, r2
 800ecf0:	005b      	lsls	r3, r3, #1
 800ecf2:	4413      	add	r3, r2
 800ecf4:	009b      	lsls	r3, r3, #2
 800ecf6:	440b      	add	r3, r1
 800ecf8:	3304      	adds	r3, #4
 800ecfa:	681a      	ldr	r2, [r3, #0]
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
		if (Files[i].fs == dp->fs &&
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d10d      	bne.n	800ed22 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800ed06:	4948      	ldr	r1, [pc, #288]	@ (800ee28 <inc_lock+0x168>)
 800ed08:	68fa      	ldr	r2, [r7, #12]
 800ed0a:	4613      	mov	r3, r2
 800ed0c:	005b      	lsls	r3, r3, #1
 800ed0e:	4413      	add	r3, r2
 800ed10:	009b      	lsls	r3, r3, #2
 800ed12:	440b      	add	r3, r1
 800ed14:	3308      	adds	r3, #8
 800ed16:	881a      	ldrh	r2, [r3, #0]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
			Files[i].clu == dp->sclust &&
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d006      	beq.n	800ed30 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	3301      	adds	r3, #1
 800ed26:	60fb      	str	r3, [r7, #12]
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	2b01      	cmp	r3, #1
 800ed2c:	d9d0      	bls.n	800ecd0 <inc_lock+0x10>
 800ed2e:	e000      	b.n	800ed32 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800ed30:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	2b02      	cmp	r3, #2
 800ed36:	d145      	bne.n	800edc4 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	60fb      	str	r3, [r7, #12]
 800ed3c:	e002      	b.n	800ed44 <inc_lock+0x84>
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	3301      	adds	r3, #1
 800ed42:	60fb      	str	r3, [r7, #12]
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	2b01      	cmp	r3, #1
 800ed48:	d809      	bhi.n	800ed5e <inc_lock+0x9e>
 800ed4a:	4937      	ldr	r1, [pc, #220]	@ (800ee28 <inc_lock+0x168>)
 800ed4c:	68fa      	ldr	r2, [r7, #12]
 800ed4e:	4613      	mov	r3, r2
 800ed50:	005b      	lsls	r3, r3, #1
 800ed52:	4413      	add	r3, r2
 800ed54:	009b      	lsls	r3, r3, #2
 800ed56:	440b      	add	r3, r1
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d1ef      	bne.n	800ed3e <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	2b02      	cmp	r3, #2
 800ed62:	d101      	bne.n	800ed68 <inc_lock+0xa8>
 800ed64:	2300      	movs	r3, #0
 800ed66:	e05a      	b.n	800ee1e <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
 800ed6e:	482e      	ldr	r0, [pc, #184]	@ (800ee28 <inc_lock+0x168>)
 800ed70:	68fa      	ldr	r2, [r7, #12]
 800ed72:	4613      	mov	r3, r2
 800ed74:	005b      	lsls	r3, r3, #1
 800ed76:	4413      	add	r3, r2
 800ed78:	009b      	lsls	r3, r3, #2
 800ed7a:	4403      	add	r3, r0
 800ed7c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 800ed84:	4828      	ldr	r0, [pc, #160]	@ (800ee28 <inc_lock+0x168>)
 800ed86:	68fa      	ldr	r2, [r7, #12]
 800ed88:	4613      	mov	r3, r2
 800ed8a:	005b      	lsls	r3, r3, #1
 800ed8c:	4413      	add	r3, r2
 800ed8e:	009b      	lsls	r3, r3, #2
 800ed90:	4403      	add	r3, r0
 800ed92:	3304      	adds	r3, #4
 800ed94:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f8b3 0206 	ldrh.w	r0, [r3, #518]	@ 0x206
 800ed9c:	4922      	ldr	r1, [pc, #136]	@ (800ee28 <inc_lock+0x168>)
 800ed9e:	68fa      	ldr	r2, [r7, #12]
 800eda0:	4613      	mov	r3, r2
 800eda2:	005b      	lsls	r3, r3, #1
 800eda4:	4413      	add	r3, r2
 800eda6:	009b      	lsls	r3, r3, #2
 800eda8:	440b      	add	r3, r1
 800edaa:	3308      	adds	r3, #8
 800edac:	4602      	mov	r2, r0
 800edae:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800edb0:	491d      	ldr	r1, [pc, #116]	@ (800ee28 <inc_lock+0x168>)
 800edb2:	68fa      	ldr	r2, [r7, #12]
 800edb4:	4613      	mov	r3, r2
 800edb6:	005b      	lsls	r3, r3, #1
 800edb8:	4413      	add	r3, r2
 800edba:	009b      	lsls	r3, r3, #2
 800edbc:	440b      	add	r3, r1
 800edbe:	330a      	adds	r3, #10
 800edc0:	2200      	movs	r2, #0
 800edc2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d00c      	beq.n	800ede4 <inc_lock+0x124>
 800edca:	4917      	ldr	r1, [pc, #92]	@ (800ee28 <inc_lock+0x168>)
 800edcc:	68fa      	ldr	r2, [r7, #12]
 800edce:	4613      	mov	r3, r2
 800edd0:	005b      	lsls	r3, r3, #1
 800edd2:	4413      	add	r3, r2
 800edd4:	009b      	lsls	r3, r3, #2
 800edd6:	440b      	add	r3, r1
 800edd8:	330a      	adds	r3, #10
 800edda:	881b      	ldrh	r3, [r3, #0]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d001      	beq.n	800ede4 <inc_lock+0x124>
 800ede0:	2300      	movs	r3, #0
 800ede2:	e01c      	b.n	800ee1e <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d10b      	bne.n	800ee02 <inc_lock+0x142>
 800edea:	490f      	ldr	r1, [pc, #60]	@ (800ee28 <inc_lock+0x168>)
 800edec:	68fa      	ldr	r2, [r7, #12]
 800edee:	4613      	mov	r3, r2
 800edf0:	005b      	lsls	r3, r3, #1
 800edf2:	4413      	add	r3, r2
 800edf4:	009b      	lsls	r3, r3, #2
 800edf6:	440b      	add	r3, r1
 800edf8:	330a      	adds	r3, #10
 800edfa:	881b      	ldrh	r3, [r3, #0]
 800edfc:	3301      	adds	r3, #1
 800edfe:	b299      	uxth	r1, r3
 800ee00:	e001      	b.n	800ee06 <inc_lock+0x146>
 800ee02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ee06:	4808      	ldr	r0, [pc, #32]	@ (800ee28 <inc_lock+0x168>)
 800ee08:	68fa      	ldr	r2, [r7, #12]
 800ee0a:	4613      	mov	r3, r2
 800ee0c:	005b      	lsls	r3, r3, #1
 800ee0e:	4413      	add	r3, r2
 800ee10:	009b      	lsls	r3, r3, #2
 800ee12:	4403      	add	r3, r0
 800ee14:	330a      	adds	r3, #10
 800ee16:	460a      	mov	r2, r1
 800ee18:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	3301      	adds	r3, #1
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3714      	adds	r7, #20
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bc80      	pop	{r7}
 800ee26:	4770      	bx	lr
 800ee28:	20001310 	.word	0x20001310

0800ee2c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b085      	sub	sp, #20
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ee34:	2300      	movs	r3, #0
 800ee36:	60fb      	str	r3, [r7, #12]
 800ee38:	e016      	b.n	800ee68 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ee3a:	4910      	ldr	r1, [pc, #64]	@ (800ee7c <clear_lock+0x50>)
 800ee3c:	68fa      	ldr	r2, [r7, #12]
 800ee3e:	4613      	mov	r3, r2
 800ee40:	005b      	lsls	r3, r3, #1
 800ee42:	4413      	add	r3, r2
 800ee44:	009b      	lsls	r3, r3, #2
 800ee46:	440b      	add	r3, r1
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	687a      	ldr	r2, [r7, #4]
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	d108      	bne.n	800ee62 <clear_lock+0x36>
 800ee50:	490a      	ldr	r1, [pc, #40]	@ (800ee7c <clear_lock+0x50>)
 800ee52:	68fa      	ldr	r2, [r7, #12]
 800ee54:	4613      	mov	r3, r2
 800ee56:	005b      	lsls	r3, r3, #1
 800ee58:	4413      	add	r3, r2
 800ee5a:	009b      	lsls	r3, r3, #2
 800ee5c:	440b      	add	r3, r1
 800ee5e:	2200      	movs	r2, #0
 800ee60:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	3301      	adds	r3, #1
 800ee66:	60fb      	str	r3, [r7, #12]
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	2b01      	cmp	r3, #1
 800ee6c:	d9e5      	bls.n	800ee3a <clear_lock+0xe>
	}
}
 800ee6e:	bf00      	nop
 800ee70:	bf00      	nop
 800ee72:	3714      	adds	r7, #20
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bc80      	pop	{r7}
 800ee78:	4770      	bx	lr
 800ee7a:	bf00      	nop
 800ee7c:	20001310 	.word	0x20001310

0800ee80 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b086      	sub	sp, #24
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ee88:	2300      	movs	r3, #0
 800ee8a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d038      	beq.n	800ef08 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 800ee9c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800eea4:	6879      	ldr	r1, [r7, #4]
 800eea6:	2301      	movs	r3, #1
 800eea8:	697a      	ldr	r2, [r7, #20]
 800eeaa:	f7ff fd95 	bl	800e9d8 <disk_write>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d002      	beq.n	800eeba <sync_window+0x3a>
			res = FR_DISK_ERR;
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	73fb      	strb	r3, [r7, #15]
 800eeb8:	e026      	b.n	800ef08 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2200      	movs	r2, #0
 800eebe:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800eec8:	697a      	ldr	r2, [r7, #20]
 800eeca:	1ad2      	subs	r2, r2, r3
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d218      	bcs.n	800ef08 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800eedc:	613b      	str	r3, [r7, #16]
 800eede:	e010      	b.n	800ef02 <sync_window+0x82>
					wsect += fs->fsize;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800eee6:	697a      	ldr	r2, [r7, #20]
 800eee8:	4413      	add	r3, r2
 800eeea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800eef2:	6879      	ldr	r1, [r7, #4]
 800eef4:	2301      	movs	r3, #1
 800eef6:	697a      	ldr	r2, [r7, #20]
 800eef8:	f7ff fd6e 	bl	800e9d8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eefc:	693b      	ldr	r3, [r7, #16]
 800eefe:	3b01      	subs	r3, #1
 800ef00:	613b      	str	r3, [r7, #16]
 800ef02:	693b      	ldr	r3, [r7, #16]
 800ef04:	2b01      	cmp	r3, #1
 800ef06:	d8eb      	bhi.n	800eee0 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800ef08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	3718      	adds	r7, #24
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}

0800ef12 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800ef12:	b580      	push	{r7, lr}
 800ef14:	b084      	sub	sp, #16
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	6078      	str	r0, [r7, #4]
 800ef1a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 800ef26:	683a      	ldr	r2, [r7, #0]
 800ef28:	429a      	cmp	r2, r3
 800ef2a:	d01b      	beq.n	800ef64 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f7ff ffa7 	bl	800ee80 <sync_window>
 800ef32:	4603      	mov	r3, r0
 800ef34:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ef36:	7bfb      	ldrb	r3, [r7, #15]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d113      	bne.n	800ef64 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800ef42:	6879      	ldr	r1, [r7, #4]
 800ef44:	2301      	movs	r3, #1
 800ef46:	683a      	ldr	r2, [r7, #0]
 800ef48:	f7ff fd26 	bl	800e998 <disk_read>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d004      	beq.n	800ef5c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ef52:	f04f 33ff 	mov.w	r3, #4294967295
 800ef56:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ef58:	2301      	movs	r3, #1
 800ef5a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	683a      	ldr	r2, [r7, #0]
 800ef60:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
		}
	}
	return res;
 800ef64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef66:	4618      	mov	r0, r3
 800ef68:	3710      	adds	r7, #16
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}

0800ef6e <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800ef6e:	b580      	push	{r7, lr}
 800ef70:	b084      	sub	sp, #16
 800ef72:	af00      	add	r7, sp, #0
 800ef74:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ef76:	6878      	ldr	r0, [r7, #4]
 800ef78:	f7ff ff82 	bl	800ee80 <sync_window>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ef80:	7bfb      	ldrb	r3, [r7, #15]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	f040 809b 	bne.w	800f0be <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ef8e:	2b03      	cmp	r3, #3
 800ef90:	f040 8088 	bne.w	800f0a4 <sync_fs+0x136>
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800ef9a:	2b01      	cmp	r3, #1
 800ef9c:	f040 8082 	bne.w	800f0a4 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800efa6:	2100      	movs	r1, #0
 800efa8:	4618      	mov	r0, r3
 800efaa:	f7ff fd71 	bl	800ea90 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2255      	movs	r2, #85	@ 0x55
 800efb2:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	22aa      	movs	r2, #170	@ 0xaa
 800efba:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2252      	movs	r2, #82	@ 0x52
 800efc2:	701a      	strb	r2, [r3, #0]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2252      	movs	r2, #82	@ 0x52
 800efc8:	705a      	strb	r2, [r3, #1]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2261      	movs	r2, #97	@ 0x61
 800efce:	709a      	strb	r2, [r3, #2]
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2241      	movs	r2, #65	@ 0x41
 800efd4:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2272      	movs	r2, #114	@ 0x72
 800efda:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2272      	movs	r2, #114	@ 0x72
 800efe2:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2241      	movs	r2, #65	@ 0x41
 800efea:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2261      	movs	r2, #97	@ 0x61
 800eff2:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800effc:	b2da      	uxtb	r2, r3
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f00a:	b29b      	uxth	r3, r3
 800f00c:	0a1b      	lsrs	r3, r3, #8
 800f00e:	b29b      	uxth	r3, r3
 800f010:	b2da      	uxtb	r2, r3
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f01e:	0c1b      	lsrs	r3, r3, #16
 800f020:	b2da      	uxtb	r2, r3
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f02e:	0e1b      	lsrs	r3, r3, #24
 800f030:	b2da      	uxtb	r2, r3
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f03e:	b2da      	uxtb	r2, r3
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	0a1b      	lsrs	r3, r3, #8
 800f050:	b29b      	uxth	r3, r3
 800f052:	b2da      	uxtb	r2, r3
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f060:	0c1b      	lsrs	r3, r3, #16
 800f062:	b2da      	uxtb	r2, r3
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f070:	0e1b      	lsrs	r3, r3, #24
 800f072:	b2da      	uxtb	r2, r3
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800f080:	1c5a      	adds	r2, r3, #1
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800f08e:	6879      	ldr	r1, [r7, #4]
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 800f096:	2301      	movs	r3, #1
 800f098:	f7ff fc9e 	bl	800e9d8 <disk_write>
			fs->fsi_flag = 0;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	2100      	movs	r1, #0
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f7ff fcb2 	bl	800ea18 <disk_ioctl>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d001      	beq.n	800f0be <sync_fs+0x150>
			res = FR_DISK_ERR;
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f0be:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3710      	adds	r7, #16
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f0c8:	b480      	push	{r7}
 800f0ca:	b083      	sub	sp, #12
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
 800f0d0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	3b02      	subs	r3, #2
 800f0d6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f0de:	3b02      	subs	r3, #2
 800f0e0:	683a      	ldr	r2, [r7, #0]
 800f0e2:	429a      	cmp	r2, r3
 800f0e4:	d301      	bcc.n	800f0ea <clust2sect+0x22>
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	e00a      	b.n	800f100 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800f0f0:	461a      	mov	r2, r3
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	fb03 f202 	mul.w	r2, r3, r2
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800f0fe:	4413      	add	r3, r2
}
 800f100:	4618      	mov	r0, r3
 800f102:	370c      	adds	r7, #12
 800f104:	46bd      	mov	sp, r7
 800f106:	bc80      	pop	{r7}
 800f108:	4770      	bx	lr

0800f10a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800f10a:	b580      	push	{r7, lr}
 800f10c:	b086      	sub	sp, #24
 800f10e:	af00      	add	r7, sp, #0
 800f110:	6078      	str	r0, [r7, #4]
 800f112:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	2b01      	cmp	r3, #1
 800f118:	d905      	bls.n	800f126 <get_fat+0x1c>
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f120:	683a      	ldr	r2, [r7, #0]
 800f122:	429a      	cmp	r2, r3
 800f124:	d302      	bcc.n	800f12c <get_fat+0x22>
		val = 1;	/* Internal error */
 800f126:	2301      	movs	r3, #1
 800f128:	617b      	str	r3, [r7, #20]
 800f12a:	e0a2      	b.n	800f272 <get_fat+0x168>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f12c:	f04f 33ff 	mov.w	r3, #4294967295
 800f130:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f138:	2b03      	cmp	r3, #3
 800f13a:	d067      	beq.n	800f20c <get_fat+0x102>
 800f13c:	2b03      	cmp	r3, #3
 800f13e:	f300 808e 	bgt.w	800f25e <get_fat+0x154>
 800f142:	2b01      	cmp	r3, #1
 800f144:	d002      	beq.n	800f14c <get_fat+0x42>
 800f146:	2b02      	cmp	r3, #2
 800f148:	d03f      	beq.n	800f1ca <get_fat+0xc0>
 800f14a:	e088      	b.n	800f25e <get_fat+0x154>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	60fb      	str	r3, [r7, #12]
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	085b      	lsrs	r3, r3, #1
 800f154:	68fa      	ldr	r2, [r7, #12]
 800f156:	4413      	add	r3, r2
 800f158:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	0a5b      	lsrs	r3, r3, #9
 800f164:	4413      	add	r3, r2
 800f166:	4619      	mov	r1, r3
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f7ff fed2 	bl	800ef12 <move_window>
 800f16e:	4603      	mov	r3, r0
 800f170:	2b00      	cmp	r3, #0
 800f172:	d177      	bne.n	800f264 <get_fat+0x15a>
			wc = fs->win.d8[bc++ % SS(fs)];
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	1c5a      	adds	r2, r3, #1
 800f178:	60fa      	str	r2, [r7, #12]
 800f17a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f17e:	687a      	ldr	r2, [r7, #4]
 800f180:	5cd3      	ldrb	r3, [r2, r3]
 800f182:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	0a5b      	lsrs	r3, r3, #9
 800f18e:	4413      	add	r3, r2
 800f190:	4619      	mov	r1, r3
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f7ff febd 	bl	800ef12 <move_window>
 800f198:	4603      	mov	r3, r0
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d164      	bne.n	800f268 <get_fat+0x15e>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1a4:	687a      	ldr	r2, [r7, #4]
 800f1a6:	5cd3      	ldrb	r3, [r2, r3]
 800f1a8:	021b      	lsls	r3, r3, #8
 800f1aa:	68ba      	ldr	r2, [r7, #8]
 800f1ac:	4313      	orrs	r3, r2
 800f1ae:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	f003 0301 	and.w	r3, r3, #1
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d002      	beq.n	800f1c0 <get_fat+0xb6>
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	091b      	lsrs	r3, r3, #4
 800f1be:	e002      	b.n	800f1c6 <get_fat+0xbc>
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f1c6:	617b      	str	r3, [r7, #20]
			break;
 800f1c8:	e053      	b.n	800f272 <get_fat+0x168>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	0a1b      	lsrs	r3, r3, #8
 800f1d4:	4413      	add	r3, r2
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f7ff fe9a 	bl	800ef12 <move_window>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d143      	bne.n	800f26c <get_fat+0x162>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	005b      	lsls	r3, r3, #1
 800f1e8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f1ec:	687a      	ldr	r2, [r7, #4]
 800f1ee:	4413      	add	r3, r2
 800f1f0:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800f1f2:	693b      	ldr	r3, [r7, #16]
 800f1f4:	3301      	adds	r3, #1
 800f1f6:	781b      	ldrb	r3, [r3, #0]
 800f1f8:	021b      	lsls	r3, r3, #8
 800f1fa:	b21a      	sxth	r2, r3
 800f1fc:	693b      	ldr	r3, [r7, #16]
 800f1fe:	781b      	ldrb	r3, [r3, #0]
 800f200:	b21b      	sxth	r3, r3
 800f202:	4313      	orrs	r3, r2
 800f204:	b21b      	sxth	r3, r3
 800f206:	b29b      	uxth	r3, r3
 800f208:	617b      	str	r3, [r7, #20]
			break;
 800f20a:	e032      	b.n	800f272 <get_fat+0x168>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	09db      	lsrs	r3, r3, #7
 800f216:	4413      	add	r3, r2
 800f218:	4619      	mov	r1, r3
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f7ff fe79 	bl	800ef12 <move_window>
 800f220:	4603      	mov	r3, r0
 800f222:	2b00      	cmp	r3, #0
 800f224:	d124      	bne.n	800f270 <get_fat+0x166>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	009b      	lsls	r3, r3, #2
 800f22a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f22e:	687a      	ldr	r2, [r7, #4]
 800f230:	4413      	add	r3, r2
 800f232:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800f234:	693b      	ldr	r3, [r7, #16]
 800f236:	3303      	adds	r3, #3
 800f238:	781b      	ldrb	r3, [r3, #0]
 800f23a:	061a      	lsls	r2, r3, #24
 800f23c:	693b      	ldr	r3, [r7, #16]
 800f23e:	3302      	adds	r3, #2
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	041b      	lsls	r3, r3, #16
 800f244:	431a      	orrs	r2, r3
 800f246:	693b      	ldr	r3, [r7, #16]
 800f248:	3301      	adds	r3, #1
 800f24a:	781b      	ldrb	r3, [r3, #0]
 800f24c:	021b      	lsls	r3, r3, #8
 800f24e:	4313      	orrs	r3, r2
 800f250:	693a      	ldr	r2, [r7, #16]
 800f252:	7812      	ldrb	r2, [r2, #0]
 800f254:	4313      	orrs	r3, r2
 800f256:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800f25a:	617b      	str	r3, [r7, #20]
			break;
 800f25c:	e009      	b.n	800f272 <get_fat+0x168>

		default:
			val = 1;	/* Internal error */
 800f25e:	2301      	movs	r3, #1
 800f260:	617b      	str	r3, [r7, #20]
 800f262:	e006      	b.n	800f272 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f264:	bf00      	nop
 800f266:	e004      	b.n	800f272 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f268:	bf00      	nop
 800f26a:	e002      	b.n	800f272 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f26c:	bf00      	nop
 800f26e:	e000      	b.n	800f272 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f270:	bf00      	nop
		}
	}

	return val;
 800f272:	697b      	ldr	r3, [r7, #20]
}
 800f274:	4618      	mov	r0, r3
 800f276:	3718      	adds	r7, #24
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b088      	sub	sp, #32
 800f280:	af00      	add	r7, sp, #0
 800f282:	60f8      	str	r0, [r7, #12]
 800f284:	60b9      	str	r1, [r7, #8]
 800f286:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	2b01      	cmp	r3, #1
 800f28c:	d905      	bls.n	800f29a <put_fat+0x1e>
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f294:	68ba      	ldr	r2, [r7, #8]
 800f296:	429a      	cmp	r2, r3
 800f298:	d302      	bcc.n	800f2a0 <put_fat+0x24>
		res = FR_INT_ERR;
 800f29a:	2302      	movs	r3, #2
 800f29c:	77fb      	strb	r3, [r7, #31]
 800f29e:	e0f6      	b.n	800f48e <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f2a6:	2b03      	cmp	r3, #3
 800f2a8:	f000 809e 	beq.w	800f3e8 <put_fat+0x16c>
 800f2ac:	2b03      	cmp	r3, #3
 800f2ae:	f300 80e4 	bgt.w	800f47a <put_fat+0x1fe>
 800f2b2:	2b01      	cmp	r3, #1
 800f2b4:	d002      	beq.n	800f2bc <put_fat+0x40>
 800f2b6:	2b02      	cmp	r3, #2
 800f2b8:	d06f      	beq.n	800f39a <put_fat+0x11e>
 800f2ba:	e0de      	b.n	800f47a <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	617b      	str	r3, [r7, #20]
 800f2c0:	697b      	ldr	r3, [r7, #20]
 800f2c2:	085b      	lsrs	r3, r3, #1
 800f2c4:	697a      	ldr	r2, [r7, #20]
 800f2c6:	4413      	add	r3, r2
 800f2c8:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800f2d0:	697b      	ldr	r3, [r7, #20]
 800f2d2:	0a5b      	lsrs	r3, r3, #9
 800f2d4:	4413      	add	r3, r2
 800f2d6:	4619      	mov	r1, r3
 800f2d8:	68f8      	ldr	r0, [r7, #12]
 800f2da:	f7ff fe1a 	bl	800ef12 <move_window>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f2e2:	7ffb      	ldrb	r3, [r7, #31]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	f040 80cb 	bne.w	800f480 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	1c5a      	adds	r2, r3, #1
 800f2ee:	617a      	str	r2, [r7, #20]
 800f2f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2f4:	68fa      	ldr	r2, [r7, #12]
 800f2f6:	4413      	add	r3, r2
 800f2f8:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	f003 0301 	and.w	r3, r3, #1
 800f300:	2b00      	cmp	r3, #0
 800f302:	d00d      	beq.n	800f320 <put_fat+0xa4>
 800f304:	69bb      	ldr	r3, [r7, #24]
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	b25b      	sxtb	r3, r3
 800f30a:	f003 030f 	and.w	r3, r3, #15
 800f30e:	b25a      	sxtb	r2, r3
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	b2db      	uxtb	r3, r3
 800f314:	011b      	lsls	r3, r3, #4
 800f316:	b25b      	sxtb	r3, r3
 800f318:	4313      	orrs	r3, r2
 800f31a:	b25b      	sxtb	r3, r3
 800f31c:	b2db      	uxtb	r3, r3
 800f31e:	e001      	b.n	800f324 <put_fat+0xa8>
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	b2db      	uxtb	r3, r3
 800f324:	69ba      	ldr	r2, [r7, #24]
 800f326:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	2201      	movs	r2, #1
 800f32c:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	0a5b      	lsrs	r3, r3, #9
 800f33a:	4413      	add	r3, r2
 800f33c:	4619      	mov	r1, r3
 800f33e:	68f8      	ldr	r0, [r7, #12]
 800f340:	f7ff fde7 	bl	800ef12 <move_window>
 800f344:	4603      	mov	r3, r0
 800f346:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f348:	7ffb      	ldrb	r3, [r7, #31]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	f040 809a 	bne.w	800f484 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f356:	68fa      	ldr	r2, [r7, #12]
 800f358:	4413      	add	r3, r2
 800f35a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	f003 0301 	and.w	r3, r3, #1
 800f362:	2b00      	cmp	r3, #0
 800f364:	d003      	beq.n	800f36e <put_fat+0xf2>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	091b      	lsrs	r3, r3, #4
 800f36a:	b2db      	uxtb	r3, r3
 800f36c:	e00e      	b.n	800f38c <put_fat+0x110>
 800f36e:	69bb      	ldr	r3, [r7, #24]
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	b25b      	sxtb	r3, r3
 800f374:	f023 030f 	bic.w	r3, r3, #15
 800f378:	b25a      	sxtb	r2, r3
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	0a1b      	lsrs	r3, r3, #8
 800f37e:	b25b      	sxtb	r3, r3
 800f380:	f003 030f 	and.w	r3, r3, #15
 800f384:	b25b      	sxtb	r3, r3
 800f386:	4313      	orrs	r3, r2
 800f388:	b25b      	sxtb	r3, r3
 800f38a:	b2db      	uxtb	r3, r3
 800f38c:	69ba      	ldr	r2, [r7, #24]
 800f38e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	2201      	movs	r2, #1
 800f394:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800f398:	e079      	b.n	800f48e <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	0a1b      	lsrs	r3, r3, #8
 800f3a4:	4413      	add	r3, r2
 800f3a6:	4619      	mov	r1, r3
 800f3a8:	68f8      	ldr	r0, [r7, #12]
 800f3aa:	f7ff fdb2 	bl	800ef12 <move_window>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f3b2:	7ffb      	ldrb	r3, [r7, #31]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d167      	bne.n	800f488 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	005b      	lsls	r3, r3, #1
 800f3bc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f3c0:	68fa      	ldr	r2, [r7, #12]
 800f3c2:	4413      	add	r3, r2
 800f3c4:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	b2da      	uxtb	r2, r3
 800f3ca:	69bb      	ldr	r3, [r7, #24]
 800f3cc:	701a      	strb	r2, [r3, #0]
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	b29b      	uxth	r3, r3
 800f3d2:	0a1b      	lsrs	r3, r3, #8
 800f3d4:	b29a      	uxth	r2, r3
 800f3d6:	69bb      	ldr	r3, [r7, #24]
 800f3d8:	3301      	adds	r3, #1
 800f3da:	b2d2      	uxtb	r2, r2
 800f3dc:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2201      	movs	r2, #1
 800f3e2:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800f3e6:	e052      	b.n	800f48e <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	09db      	lsrs	r3, r3, #7
 800f3f2:	4413      	add	r3, r2
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	68f8      	ldr	r0, [r7, #12]
 800f3f8:	f7ff fd8b 	bl	800ef12 <move_window>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f400:	7ffb      	ldrb	r3, [r7, #31]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d142      	bne.n	800f48c <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	009b      	lsls	r3, r3, #2
 800f40a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f40e:	68fa      	ldr	r2, [r7, #12]
 800f410:	4413      	add	r3, r2
 800f412:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800f414:	69bb      	ldr	r3, [r7, #24]
 800f416:	3303      	adds	r3, #3
 800f418:	781b      	ldrb	r3, [r3, #0]
 800f41a:	061a      	lsls	r2, r3, #24
 800f41c:	69bb      	ldr	r3, [r7, #24]
 800f41e:	3302      	adds	r3, #2
 800f420:	781b      	ldrb	r3, [r3, #0]
 800f422:	041b      	lsls	r3, r3, #16
 800f424:	431a      	orrs	r2, r3
 800f426:	69bb      	ldr	r3, [r7, #24]
 800f428:	3301      	adds	r3, #1
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	021b      	lsls	r3, r3, #8
 800f42e:	4313      	orrs	r3, r2
 800f430:	69ba      	ldr	r2, [r7, #24]
 800f432:	7812      	ldrb	r2, [r2, #0]
 800f434:	4313      	orrs	r3, r2
 800f436:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800f43a:	687a      	ldr	r2, [r7, #4]
 800f43c:	4313      	orrs	r3, r2
 800f43e:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	b2da      	uxtb	r2, r3
 800f444:	69bb      	ldr	r3, [r7, #24]
 800f446:	701a      	strb	r2, [r3, #0]
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	b29b      	uxth	r3, r3
 800f44c:	0a1b      	lsrs	r3, r3, #8
 800f44e:	b29a      	uxth	r2, r3
 800f450:	69bb      	ldr	r3, [r7, #24]
 800f452:	3301      	adds	r3, #1
 800f454:	b2d2      	uxtb	r2, r2
 800f456:	701a      	strb	r2, [r3, #0]
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	0c1a      	lsrs	r2, r3, #16
 800f45c:	69bb      	ldr	r3, [r7, #24]
 800f45e:	3302      	adds	r3, #2
 800f460:	b2d2      	uxtb	r2, r2
 800f462:	701a      	strb	r2, [r3, #0]
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	0e1a      	lsrs	r2, r3, #24
 800f468:	69bb      	ldr	r3, [r7, #24]
 800f46a:	3303      	adds	r3, #3
 800f46c:	b2d2      	uxtb	r2, r2
 800f46e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	2201      	movs	r2, #1
 800f474:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800f478:	e009      	b.n	800f48e <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800f47a:	2302      	movs	r3, #2
 800f47c:	77fb      	strb	r3, [r7, #31]
 800f47e:	e006      	b.n	800f48e <put_fat+0x212>
			if (res != FR_OK) break;
 800f480:	bf00      	nop
 800f482:	e004      	b.n	800f48e <put_fat+0x212>
			if (res != FR_OK) break;
 800f484:	bf00      	nop
 800f486:	e002      	b.n	800f48e <put_fat+0x212>
			if (res != FR_OK) break;
 800f488:	bf00      	nop
 800f48a:	e000      	b.n	800f48e <put_fat+0x212>
			if (res != FR_OK) break;
 800f48c:	bf00      	nop
		}
	}

	return res;
 800f48e:	7ffb      	ldrb	r3, [r7, #31]
}
 800f490:	4618      	mov	r0, r3
 800f492:	3720      	adds	r7, #32
 800f494:	46bd      	mov	sp, r7
 800f496:	bd80      	pop	{r7, pc}

0800f498 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b084      	sub	sp, #16
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	2b01      	cmp	r3, #1
 800f4a6:	d905      	bls.n	800f4b4 <remove_chain+0x1c>
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f4ae:	683a      	ldr	r2, [r7, #0]
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	d302      	bcc.n	800f4ba <remove_chain+0x22>
		res = FR_INT_ERR;
 800f4b4:	2302      	movs	r3, #2
 800f4b6:	73fb      	strb	r3, [r7, #15]
 800f4b8:	e043      	b.n	800f542 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800f4be:	e036      	b.n	800f52e <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800f4c0:	6839      	ldr	r1, [r7, #0]
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f7ff fe21 	bl	800f10a <get_fat>
 800f4c8:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d035      	beq.n	800f53c <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	2b01      	cmp	r3, #1
 800f4d4:	d102      	bne.n	800f4dc <remove_chain+0x44>
 800f4d6:	2302      	movs	r3, #2
 800f4d8:	73fb      	strb	r3, [r7, #15]
 800f4da:	e032      	b.n	800f542 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4e2:	d102      	bne.n	800f4ea <remove_chain+0x52>
 800f4e4:	2301      	movs	r3, #1
 800f4e6:	73fb      	strb	r3, [r7, #15]
 800f4e8:	e02b      	b.n	800f542 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	6839      	ldr	r1, [r7, #0]
 800f4ee:	6878      	ldr	r0, [r7, #4]
 800f4f0:	f7ff fec4 	bl	800f27c <put_fat>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800f4f8:	7bfb      	ldrb	r3, [r7, #15]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d120      	bne.n	800f540 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f504:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f508:	d00f      	beq.n	800f52a <remove_chain+0x92>
				fs->free_clust++;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f510:	1c5a      	adds	r2, r3, #1
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				fs->fsi_flag |= 1;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800f51e:	f043 0301 	orr.w	r3, r3, #1
 800f522:	b2da      	uxtb	r2, r3
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f534:	683a      	ldr	r2, [r7, #0]
 800f536:	429a      	cmp	r2, r3
 800f538:	d3c2      	bcc.n	800f4c0 <remove_chain+0x28>
 800f53a:	e002      	b.n	800f542 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800f53c:	bf00      	nop
 800f53e:	e000      	b.n	800f542 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800f540:	bf00      	nop
		}
	}

	return res;
 800f542:	7bfb      	ldrb	r3, [r7, #15]
}
 800f544:	4618      	mov	r0, r3
 800f546:	3710      	adds	r7, #16
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}

0800f54c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b086      	sub	sp, #24
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
 800f554:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d10f      	bne.n	800f57c <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f562:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800f564:	693b      	ldr	r3, [r7, #16]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d005      	beq.n	800f576 <create_chain+0x2a>
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f570:	693a      	ldr	r2, [r7, #16]
 800f572:	429a      	cmp	r2, r3
 800f574:	d31c      	bcc.n	800f5b0 <create_chain+0x64>
 800f576:	2301      	movs	r3, #1
 800f578:	613b      	str	r3, [r7, #16]
 800f57a:	e019      	b.n	800f5b0 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800f57c:	6839      	ldr	r1, [r7, #0]
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f7ff fdc3 	bl	800f10a <get_fat>
 800f584:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	2b01      	cmp	r3, #1
 800f58a:	d801      	bhi.n	800f590 <create_chain+0x44>
 800f58c:	2301      	movs	r3, #1
 800f58e:	e076      	b.n	800f67e <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f596:	d101      	bne.n	800f59c <create_chain+0x50>
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	e070      	b.n	800f67e <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f5a2:	68ba      	ldr	r2, [r7, #8]
 800f5a4:	429a      	cmp	r2, r3
 800f5a6:	d201      	bcs.n	800f5ac <create_chain+0x60>
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	e068      	b.n	800f67e <create_chain+0x132>
		scl = clst;
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800f5b0:	693b      	ldr	r3, [r7, #16]
 800f5b2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	3301      	adds	r3, #1
 800f5b8:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f5c0:	697a      	ldr	r2, [r7, #20]
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d307      	bcc.n	800f5d6 <create_chain+0x8a>
			ncl = 2;
 800f5c6:	2302      	movs	r3, #2
 800f5c8:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800f5ca:	697a      	ldr	r2, [r7, #20]
 800f5cc:	693b      	ldr	r3, [r7, #16]
 800f5ce:	429a      	cmp	r2, r3
 800f5d0:	d901      	bls.n	800f5d6 <create_chain+0x8a>
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	e053      	b.n	800f67e <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800f5d6:	6979      	ldr	r1, [r7, #20]
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f7ff fd96 	bl	800f10a <get_fat>
 800f5de:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d00e      	beq.n	800f604 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5ec:	d002      	beq.n	800f5f4 <create_chain+0xa8>
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	2b01      	cmp	r3, #1
 800f5f2:	d101      	bne.n	800f5f8 <create_chain+0xac>
			return cs;
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	e042      	b.n	800f67e <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800f5f8:	697a      	ldr	r2, [r7, #20]
 800f5fa:	693b      	ldr	r3, [r7, #16]
 800f5fc:	429a      	cmp	r2, r3
 800f5fe:	d1d9      	bne.n	800f5b4 <create_chain+0x68>
 800f600:	2300      	movs	r3, #0
 800f602:	e03c      	b.n	800f67e <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800f604:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800f606:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 800f60a:	6979      	ldr	r1, [r7, #20]
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	f7ff fe35 	bl	800f27c <put_fat>
 800f612:	4603      	mov	r3, r0
 800f614:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800f616:	7bfb      	ldrb	r3, [r7, #15]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d109      	bne.n	800f630 <create_chain+0xe4>
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d006      	beq.n	800f630 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800f622:	697a      	ldr	r2, [r7, #20]
 800f624:	6839      	ldr	r1, [r7, #0]
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f7ff fe28 	bl	800f27c <put_fat>
 800f62c:	4603      	mov	r3, r0
 800f62e:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800f630:	7bfb      	ldrb	r3, [r7, #15]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d11a      	bne.n	800f66c <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	697a      	ldr	r2, [r7, #20]
 800f63a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f648:	d018      	beq.n	800f67c <create_chain+0x130>
			fs->free_clust--;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f650:	1e5a      	subs	r2, r3, #1
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
			fs->fsi_flag |= 1;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800f65e:	f043 0301 	orr.w	r3, r3, #1
 800f662:	b2da      	uxtb	r2, r3
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
 800f66a:	e007      	b.n	800f67c <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800f66c:	7bfb      	ldrb	r3, [r7, #15]
 800f66e:	2b01      	cmp	r3, #1
 800f670:	d102      	bne.n	800f678 <create_chain+0x12c>
 800f672:	f04f 33ff 	mov.w	r3, #4294967295
 800f676:	e000      	b.n	800f67a <create_chain+0x12e>
 800f678:	2301      	movs	r3, #1
 800f67a:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800f67c:	697b      	ldr	r3, [r7, #20]
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3718      	adds	r7, #24
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}

0800f686 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800f686:	b480      	push	{r7}
 800f688:	b087      	sub	sp, #28
 800f68a:	af00      	add	r7, sp, #0
 800f68c:	6078      	str	r0, [r7, #4]
 800f68e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800f696:	3304      	adds	r3, #4
 800f698:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	0a5b      	lsrs	r3, r3, #9
 800f69e:	687a      	ldr	r2, [r7, #4]
 800f6a0:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 800f6a4:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800f6a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f6ae:	693b      	ldr	r3, [r7, #16]
 800f6b0:	1d1a      	adds	r2, r3, #4
 800f6b2:	613a      	str	r2, [r7, #16]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d101      	bne.n	800f6c2 <clmt_clust+0x3c>
 800f6be:	2300      	movs	r3, #0
 800f6c0:	e010      	b.n	800f6e4 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800f6c2:	697a      	ldr	r2, [r7, #20]
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	d307      	bcc.n	800f6da <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800f6ca:	697a      	ldr	r2, [r7, #20]
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	1ad3      	subs	r3, r2, r3
 800f6d0:	617b      	str	r3, [r7, #20]
 800f6d2:	693b      	ldr	r3, [r7, #16]
 800f6d4:	3304      	adds	r3, #4
 800f6d6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f6d8:	e7e9      	b.n	800f6ae <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800f6da:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f6dc:	693b      	ldr	r3, [r7, #16]
 800f6de:	681a      	ldr	r2, [r3, #0]
 800f6e0:	697b      	ldr	r3, [r7, #20]
 800f6e2:	4413      	add	r3, r2
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	371c      	adds	r7, #28
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bc80      	pop	{r7}
 800f6ec:	4770      	bx	lr

0800f6ee <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800f6ee:	b580      	push	{r7, lr}
 800f6f0:	b086      	sub	sp, #24
 800f6f2:	af00      	add	r7, sp, #0
 800f6f4:	6078      	str	r0, [r7, #4]
 800f6f6:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	b29a      	uxth	r2, r3
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800f708:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800f70a:	697b      	ldr	r3, [r7, #20]
 800f70c:	2b01      	cmp	r3, #1
 800f70e:	d007      	beq.n	800f720 <dir_sdi+0x32>
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f716:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f71a:	697a      	ldr	r2, [r7, #20]
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d301      	bcc.n	800f724 <dir_sdi+0x36>
		return FR_INT_ERR;
 800f720:	2302      	movs	r3, #2
 800f722:	e074      	b.n	800f80e <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800f724:	697b      	ldr	r3, [r7, #20]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d10c      	bne.n	800f744 <dir_sdi+0x56>
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f730:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f734:	2b03      	cmp	r3, #3
 800f736:	d105      	bne.n	800f744 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f73e:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800f742:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f744:	697b      	ldr	r3, [r7, #20]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d111      	bne.n	800f76e <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f750:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800f754:	461a      	mov	r2, r3
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	4293      	cmp	r3, r2
 800f75a:	d301      	bcc.n	800f760 <dir_sdi+0x72>
			return FR_INT_ERR;
 800f75c:	2302      	movs	r3, #2
 800f75e:	e056      	b.n	800f80e <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f766:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800f76a:	613b      	str	r3, [r7, #16]
 800f76c:	e032      	b.n	800f7d4 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f774:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800f778:	011b      	lsls	r3, r3, #4
 800f77a:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800f77c:	e01e      	b.n	800f7bc <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f784:	6979      	ldr	r1, [r7, #20]
 800f786:	4618      	mov	r0, r3
 800f788:	f7ff fcbf 	bl	800f10a <get_fat>
 800f78c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f794:	d101      	bne.n	800f79a <dir_sdi+0xac>
 800f796:	2301      	movs	r3, #1
 800f798:	e039      	b.n	800f80e <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800f79a:	697b      	ldr	r3, [r7, #20]
 800f79c:	2b01      	cmp	r3, #1
 800f79e:	d907      	bls.n	800f7b0 <dir_sdi+0xc2>
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f7a6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f7aa:	697a      	ldr	r2, [r7, #20]
 800f7ac:	429a      	cmp	r2, r3
 800f7ae:	d301      	bcc.n	800f7b4 <dir_sdi+0xc6>
				return FR_INT_ERR;
 800f7b0:	2302      	movs	r3, #2
 800f7b2:	e02c      	b.n	800f80e <dir_sdi+0x120>
			idx -= ic;
 800f7b4:	683a      	ldr	r2, [r7, #0]
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	1ad3      	subs	r3, r2, r3
 800f7ba:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800f7bc:	683a      	ldr	r2, [r7, #0]
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	429a      	cmp	r2, r3
 800f7c2:	d2dc      	bcs.n	800f77e <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f7ca:	6979      	ldr	r1, [r7, #20]
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f7ff fc7b 	bl	800f0c8 <clust2sect>
 800f7d2:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	697a      	ldr	r2, [r7, #20]
 800f7d8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	if (!sect) return FR_INT_ERR;
 800f7dc:	693b      	ldr	r3, [r7, #16]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d101      	bne.n	800f7e6 <dir_sdi+0xf8>
 800f7e2:	2302      	movs	r3, #2
 800f7e4:	e013      	b.n	800f80e <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	091a      	lsrs	r2, r3, #4
 800f7ea:	693b      	ldr	r3, [r7, #16]
 800f7ec:	441a      	add	r2, r3
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f7fa:	461a      	mov	r2, r3
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	f003 030f 	and.w	r3, r3, #15
 800f802:	015b      	lsls	r3, r3, #5
 800f804:	441a      	add	r2, r3
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 800f80c:	2300      	movs	r3, #0
}
 800f80e:	4618      	mov	r0, r3
 800f810:	3718      	adds	r7, #24
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}

0800f816 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f816:	b590      	push	{r4, r7, lr}
 800f818:	b087      	sub	sp, #28
 800f81a:	af00      	add	r7, sp, #0
 800f81c:	6078      	str	r0, [r7, #4]
 800f81e:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 800f826:	3301      	adds	r3, #1
 800f828:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	b29b      	uxth	r3, r3
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d004      	beq.n	800f83c <dir_next+0x26>
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d101      	bne.n	800f840 <dir_next+0x2a>
		return FR_NO_FILE;
 800f83c:	2304      	movs	r3, #4
 800f83e:	e0dd      	b.n	800f9fc <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f003 030f 	and.w	r3, r3, #15
 800f846:	2b00      	cmp	r3, #0
 800f848:	f040 80c6 	bne.w	800f9d8 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f852:	1c5a      	adds	r2, r3, #1
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

		if (!dp->clust) {		/* Static table */
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800f860:	2b00      	cmp	r3, #0
 800f862:	d10b      	bne.n	800f87c <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f86a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800f86e:	461a      	mov	r2, r3
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	4293      	cmp	r3, r2
 800f874:	f0c0 80b0 	bcc.w	800f9d8 <dir_next+0x1c2>
				return FR_NO_FILE;
 800f878:	2304      	movs	r3, #4
 800f87a:	e0bf      	b.n	800f9fc <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	091b      	lsrs	r3, r3, #4
 800f880:	687a      	ldr	r2, [r7, #4]
 800f882:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 800f886:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800f88a:	3a01      	subs	r2, #1
 800f88c:	4013      	ands	r3, r2
 800f88e:	2b00      	cmp	r3, #0
 800f890:	f040 80a2 	bne.w	800f9d8 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800f8a0:	4619      	mov	r1, r3
 800f8a2:	4610      	mov	r0, r2
 800f8a4:	f7ff fc31 	bl	800f10a <get_fat>
 800f8a8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800f8aa:	697b      	ldr	r3, [r7, #20]
 800f8ac:	2b01      	cmp	r3, #1
 800f8ae:	d801      	bhi.n	800f8b4 <dir_next+0x9e>
 800f8b0:	2302      	movs	r3, #2
 800f8b2:	e0a3      	b.n	800f9fc <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800f8b4:	697b      	ldr	r3, [r7, #20]
 800f8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8ba:	d101      	bne.n	800f8c0 <dir_next+0xaa>
 800f8bc:	2301      	movs	r3, #1
 800f8be:	e09d      	b.n	800f9fc <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f8c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f8ca:	697a      	ldr	r2, [r7, #20]
 800f8cc:	429a      	cmp	r2, r3
 800f8ce:	d374      	bcc.n	800f9ba <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800f8d0:	683b      	ldr	r3, [r7, #0]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d101      	bne.n	800f8da <dir_next+0xc4>
 800f8d6:	2304      	movs	r3, #4
 800f8d8:	e090      	b.n	800f9fc <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800f8e6:	4619      	mov	r1, r3
 800f8e8:	4610      	mov	r0, r2
 800f8ea:	f7ff fe2f 	bl	800f54c <create_chain>
 800f8ee:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f8f0:	697b      	ldr	r3, [r7, #20]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d101      	bne.n	800f8fa <dir_next+0xe4>
 800f8f6:	2307      	movs	r3, #7
 800f8f8:	e080      	b.n	800f9fc <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	2b01      	cmp	r3, #1
 800f8fe:	d101      	bne.n	800f904 <dir_next+0xee>
 800f900:	2302      	movs	r3, #2
 800f902:	e07b      	b.n	800f9fc <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800f904:	697b      	ldr	r3, [r7, #20]
 800f906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f90a:	d101      	bne.n	800f910 <dir_next+0xfa>
 800f90c:	2301      	movs	r3, #1
 800f90e:	e075      	b.n	800f9fc <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f916:	4618      	mov	r0, r3
 800f918:	f7ff fab2 	bl	800ee80 <sync_window>
 800f91c:	4603      	mov	r3, r0
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d001      	beq.n	800f926 <dir_next+0x110>
 800f922:	2301      	movs	r3, #1
 800f924:	e06a      	b.n	800f9fc <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f92c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f930:	2100      	movs	r1, #0
 800f932:	4618      	mov	r0, r3
 800f934:	f7ff f8ac 	bl	800ea90 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
 800f944:	6979      	ldr	r1, [r7, #20]
 800f946:	4610      	mov	r0, r2
 800f948:	f7ff fbbe 	bl	800f0c8 <clust2sect>
 800f94c:	4603      	mov	r3, r0
 800f94e:	f8c4 3230 	str.w	r3, [r4, #560]	@ 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800f952:	2300      	movs	r3, #0
 800f954:	613b      	str	r3, [r7, #16]
 800f956:	e01b      	b.n	800f990 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f95e:	2201      	movs	r2, #1
 800f960:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f96a:	4618      	mov	r0, r3
 800f96c:	f7ff fa88 	bl	800ee80 <sync_window>
 800f970:	4603      	mov	r3, r0
 800f972:	2b00      	cmp	r3, #0
 800f974:	d001      	beq.n	800f97a <dir_next+0x164>
 800f976:	2301      	movs	r3, #1
 800f978:	e040      	b.n	800f9fc <dir_next+0x1e6>
						dp->fs->winsect++;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f980:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 800f984:	3201      	adds	r2, #1
 800f986:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800f98a:	693b      	ldr	r3, [r7, #16]
 800f98c:	3301      	adds	r3, #1
 800f98e:	613b      	str	r3, [r7, #16]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f996:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800f99a:	461a      	mov	r2, r3
 800f99c:	693b      	ldr	r3, [r7, #16]
 800f99e:	4293      	cmp	r3, r2
 800f9a0:	d3da      	bcc.n	800f958 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f9a8:	f8d3 1230 	ldr.w	r1, [r3, #560]	@ 0x230
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f9b2:	693a      	ldr	r2, [r7, #16]
 800f9b4:	1a8a      	subs	r2, r1, r2
 800f9b6:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	697a      	ldr	r2, [r7, #20]
 800f9be:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f9c8:	6979      	ldr	r1, [r7, #20]
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f7ff fb7c 	bl	800f0c8 <clust2sect>
 800f9d0:	4602      	mov	r2, r0
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	b29a      	uxth	r2, r3
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f9e8:	461a      	mov	r2, r3
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	f003 030f 	and.w	r3, r3, #15
 800f9f0:	015b      	lsls	r3, r3, #5
 800f9f2:	441a      	add	r2, r3
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 800f9fa:	2300      	movs	r3, #0
}
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	371c      	adds	r7, #28
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd90      	pop	{r4, r7, pc}

0800fa04 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b084      	sub	sp, #16
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800fa0e:	2100      	movs	r1, #0
 800fa10:	6878      	ldr	r0, [r7, #4]
 800fa12:	f7ff fe6c 	bl	800f6ee <dir_sdi>
 800fa16:	4603      	mov	r3, r0
 800fa18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fa1a:	7bfb      	ldrb	r3, [r7, #15]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d131      	bne.n	800fa84 <dir_alloc+0x80>
		n = 0;
 800fa20:	2300      	movs	r3, #0
 800fa22:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800fa30:	4619      	mov	r1, r3
 800fa32:	4610      	mov	r0, r2
 800fa34:	f7ff fa6d 	bl	800ef12 <move_window>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800fa3c:	7bfb      	ldrb	r3, [r7, #15]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d11f      	bne.n	800fa82 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fa48:	781b      	ldrb	r3, [r3, #0]
 800fa4a:	2be5      	cmp	r3, #229	@ 0xe5
 800fa4c:	d005      	beq.n	800fa5a <dir_alloc+0x56>
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fa54:	781b      	ldrb	r3, [r3, #0]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d107      	bne.n	800fa6a <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	3301      	adds	r3, #1
 800fa5e:	60bb      	str	r3, [r7, #8]
 800fa60:	68ba      	ldr	r2, [r7, #8]
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	429a      	cmp	r2, r3
 800fa66:	d102      	bne.n	800fa6e <dir_alloc+0x6a>
 800fa68:	e00c      	b.n	800fa84 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800fa6e:	2101      	movs	r1, #1
 800fa70:	6878      	ldr	r0, [r7, #4]
 800fa72:	f7ff fed0 	bl	800f816 <dir_next>
 800fa76:	4603      	mov	r3, r0
 800fa78:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800fa7a:	7bfb      	ldrb	r3, [r7, #15]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d0d1      	beq.n	800fa24 <dir_alloc+0x20>
 800fa80:	e000      	b.n	800fa84 <dir_alloc+0x80>
			if (res != FR_OK) break;
 800fa82:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800fa84:	7bfb      	ldrb	r3, [r7, #15]
 800fa86:	2b04      	cmp	r3, #4
 800fa88:	d101      	bne.n	800fa8e <dir_alloc+0x8a>
 800fa8a:	2307      	movs	r3, #7
 800fa8c:	73fb      	strb	r3, [r7, #15]
	return res;
 800fa8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa90:	4618      	mov	r0, r3
 800fa92:	3710      	adds	r7, #16
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}

0800fa98 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800fa98:	b480      	push	{r7}
 800fa9a:	b085      	sub	sp, #20
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	331b      	adds	r3, #27
 800faa6:	781b      	ldrb	r3, [r3, #0]
 800faa8:	021b      	lsls	r3, r3, #8
 800faaa:	b21a      	sxth	r2, r3
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	331a      	adds	r3, #26
 800fab0:	781b      	ldrb	r3, [r3, #0]
 800fab2:	b21b      	sxth	r3, r3
 800fab4:	4313      	orrs	r3, r2
 800fab6:	b21b      	sxth	r3, r3
 800fab8:	b29b      	uxth	r3, r3
 800faba:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800fac2:	2b03      	cmp	r3, #3
 800fac4:	d10f      	bne.n	800fae6 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	3315      	adds	r3, #21
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	021b      	lsls	r3, r3, #8
 800face:	b21a      	sxth	r2, r3
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	3314      	adds	r3, #20
 800fad4:	781b      	ldrb	r3, [r3, #0]
 800fad6:	b21b      	sxth	r3, r3
 800fad8:	4313      	orrs	r3, r2
 800fada:	b21b      	sxth	r3, r3
 800fadc:	b29b      	uxth	r3, r3
 800fade:	041b      	lsls	r3, r3, #16
 800fae0:	68fa      	ldr	r2, [r7, #12]
 800fae2:	4313      	orrs	r3, r2
 800fae4:	60fb      	str	r3, [r7, #12]

	return cl;
 800fae6:	68fb      	ldr	r3, [r7, #12]
}
 800fae8:	4618      	mov	r0, r3
 800faea:	3714      	adds	r7, #20
 800faec:	46bd      	mov	sp, r7
 800faee:	bc80      	pop	{r7}
 800faf0:	4770      	bx	lr

0800faf2 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800faf2:	b480      	push	{r7}
 800faf4:	b083      	sub	sp, #12
 800faf6:	af00      	add	r7, sp, #0
 800faf8:	6078      	str	r0, [r7, #4]
 800fafa:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	331a      	adds	r3, #26
 800fb00:	683a      	ldr	r2, [r7, #0]
 800fb02:	b2d2      	uxtb	r2, r2
 800fb04:	701a      	strb	r2, [r3, #0]
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	b29b      	uxth	r3, r3
 800fb0a:	0a1b      	lsrs	r3, r3, #8
 800fb0c:	b29a      	uxth	r2, r3
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	331b      	adds	r3, #27
 800fb12:	b2d2      	uxtb	r2, r2
 800fb14:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	0c1a      	lsrs	r2, r3, #16
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	3314      	adds	r3, #20
 800fb1e:	b2d2      	uxtb	r2, r2
 800fb20:	701a      	strb	r2, [r3, #0]
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	0c1b      	lsrs	r3, r3, #16
 800fb26:	b29b      	uxth	r3, r3
 800fb28:	0a1b      	lsrs	r3, r3, #8
 800fb2a:	b29a      	uxth	r2, r3
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	3315      	adds	r3, #21
 800fb30:	b2d2      	uxtb	r2, r2
 800fb32:	701a      	strb	r2, [r3, #0]
}
 800fb34:	bf00      	nop
 800fb36:	370c      	adds	r7, #12
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bc80      	pop	{r7}
 800fb3c:	4770      	bx	lr
	...

0800fb40 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b086      	sub	sp, #24
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
 800fb48:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	781b      	ldrb	r3, [r3, #0]
 800fb4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb52:	1e5a      	subs	r2, r3, #1
 800fb54:	4613      	mov	r3, r2
 800fb56:	005b      	lsls	r3, r3, #1
 800fb58:	4413      	add	r3, r2
 800fb5a:	009b      	lsls	r3, r3, #2
 800fb5c:	4413      	add	r3, r2
 800fb5e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800fb60:	2300      	movs	r3, #0
 800fb62:	613b      	str	r3, [r7, #16]
 800fb64:	2301      	movs	r3, #1
 800fb66:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800fb68:	4a2b      	ldr	r2, [pc, #172]	@ (800fc18 <cmp_lfn+0xd8>)
 800fb6a:	693b      	ldr	r3, [r7, #16]
 800fb6c:	4413      	add	r3, r2
 800fb6e:	781b      	ldrb	r3, [r3, #0]
 800fb70:	3301      	adds	r3, #1
 800fb72:	683a      	ldr	r2, [r7, #0]
 800fb74:	4413      	add	r3, r2
 800fb76:	781b      	ldrb	r3, [r3, #0]
 800fb78:	021b      	lsls	r3, r3, #8
 800fb7a:	b21a      	sxth	r2, r3
 800fb7c:	4926      	ldr	r1, [pc, #152]	@ (800fc18 <cmp_lfn+0xd8>)
 800fb7e:	693b      	ldr	r3, [r7, #16]
 800fb80:	440b      	add	r3, r1
 800fb82:	781b      	ldrb	r3, [r3, #0]
 800fb84:	4619      	mov	r1, r3
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	440b      	add	r3, r1
 800fb8a:	781b      	ldrb	r3, [r3, #0]
 800fb8c:	b21b      	sxth	r3, r3
 800fb8e:	4313      	orrs	r3, r2
 800fb90:	b21b      	sxth	r3, r3
 800fb92:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800fb94:	89fb      	ldrh	r3, [r7, #14]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d019      	beq.n	800fbce <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800fb9a:	89bb      	ldrh	r3, [r7, #12]
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f002 fb87 	bl	80122b0 <ff_wtoupper>
 800fba2:	4603      	mov	r3, r0
 800fba4:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	2bfe      	cmp	r3, #254	@ 0xfe
 800fbaa:	d80e      	bhi.n	800fbca <cmp_lfn+0x8a>
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	1c5a      	adds	r2, r3, #1
 800fbb0:	617a      	str	r2, [r7, #20]
 800fbb2:	005b      	lsls	r3, r3, #1
 800fbb4:	687a      	ldr	r2, [r7, #4]
 800fbb6:	4413      	add	r3, r2
 800fbb8:	881b      	ldrh	r3, [r3, #0]
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f002 fb78 	bl	80122b0 <ff_wtoupper>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	89fb      	ldrh	r3, [r7, #14]
 800fbc6:	4293      	cmp	r3, r2
 800fbc8:	d008      	beq.n	800fbdc <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800fbca:	2300      	movs	r3, #0
 800fbcc:	e01f      	b.n	800fc0e <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800fbce:	89bb      	ldrh	r3, [r7, #12]
 800fbd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fbd4:	4293      	cmp	r3, r2
 800fbd6:	d001      	beq.n	800fbdc <cmp_lfn+0x9c>
 800fbd8:	2300      	movs	r3, #0
 800fbda:	e018      	b.n	800fc0e <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800fbdc:	693b      	ldr	r3, [r7, #16]
 800fbde:	3301      	adds	r3, #1
 800fbe0:	613b      	str	r3, [r7, #16]
 800fbe2:	693b      	ldr	r3, [r7, #16]
 800fbe4:	2b0c      	cmp	r3, #12
 800fbe6:	d9bf      	bls.n	800fb68 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d00b      	beq.n	800fc0c <cmp_lfn+0xcc>
 800fbf4:	89fb      	ldrh	r3, [r7, #14]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d008      	beq.n	800fc0c <cmp_lfn+0xcc>
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	005b      	lsls	r3, r3, #1
 800fbfe:	687a      	ldr	r2, [r7, #4]
 800fc00:	4413      	add	r3, r2
 800fc02:	881b      	ldrh	r3, [r3, #0]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d001      	beq.n	800fc0c <cmp_lfn+0xcc>
		return 0;
 800fc08:	2300      	movs	r3, #0
 800fc0a:	e000      	b.n	800fc0e <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800fc0c:	2301      	movs	r3, #1
}
 800fc0e:	4618      	mov	r0, r3
 800fc10:	3718      	adds	r7, #24
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}
 800fc16:	bf00      	nop
 800fc18:	08015fe4 	.word	0x08015fe4

0800fc1c <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800fc1c:	b480      	push	{r7}
 800fc1e:	b089      	sub	sp, #36	@ 0x24
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	60f8      	str	r0, [r7, #12]
 800fc24:	60b9      	str	r1, [r7, #8]
 800fc26:	4611      	mov	r1, r2
 800fc28:	461a      	mov	r2, r3
 800fc2a:	460b      	mov	r3, r1
 800fc2c:	71fb      	strb	r3, [r7, #7]
 800fc2e:	4613      	mov	r3, r2
 800fc30:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	330d      	adds	r3, #13
 800fc36:	79ba      	ldrb	r2, [r7, #6]
 800fc38:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800fc3a:	68bb      	ldr	r3, [r7, #8]
 800fc3c:	330b      	adds	r3, #11
 800fc3e:	220f      	movs	r2, #15
 800fc40:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800fc42:	68bb      	ldr	r3, [r7, #8]
 800fc44:	330c      	adds	r3, #12
 800fc46:	2200      	movs	r2, #0
 800fc48:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800fc4a:	68bb      	ldr	r3, [r7, #8]
 800fc4c:	331a      	adds	r3, #26
 800fc4e:	2200      	movs	r2, #0
 800fc50:	701a      	strb	r2, [r3, #0]
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	331b      	adds	r3, #27
 800fc56:	2200      	movs	r2, #0
 800fc58:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800fc5a:	79fb      	ldrb	r3, [r7, #7]
 800fc5c:	1e5a      	subs	r2, r3, #1
 800fc5e:	4613      	mov	r3, r2
 800fc60:	005b      	lsls	r3, r3, #1
 800fc62:	4413      	add	r3, r2
 800fc64:	009b      	lsls	r3, r3, #2
 800fc66:	4413      	add	r3, r2
 800fc68:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	82fb      	strh	r3, [r7, #22]
 800fc6e:	2300      	movs	r3, #0
 800fc70:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800fc72:	8afb      	ldrh	r3, [r7, #22]
 800fc74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fc78:	4293      	cmp	r3, r2
 800fc7a:	d007      	beq.n	800fc8c <fit_lfn+0x70>
 800fc7c:	69fb      	ldr	r3, [r7, #28]
 800fc7e:	1c5a      	adds	r2, r3, #1
 800fc80:	61fa      	str	r2, [r7, #28]
 800fc82:	005b      	lsls	r3, r3, #1
 800fc84:	68fa      	ldr	r2, [r7, #12]
 800fc86:	4413      	add	r3, r2
 800fc88:	881b      	ldrh	r3, [r3, #0]
 800fc8a:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800fc8c:	4a1c      	ldr	r2, [pc, #112]	@ (800fd00 <fit_lfn+0xe4>)
 800fc8e:	69bb      	ldr	r3, [r7, #24]
 800fc90:	4413      	add	r3, r2
 800fc92:	781b      	ldrb	r3, [r3, #0]
 800fc94:	461a      	mov	r2, r3
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	4413      	add	r3, r2
 800fc9a:	8afa      	ldrh	r2, [r7, #22]
 800fc9c:	b2d2      	uxtb	r2, r2
 800fc9e:	701a      	strb	r2, [r3, #0]
 800fca0:	8afb      	ldrh	r3, [r7, #22]
 800fca2:	0a1b      	lsrs	r3, r3, #8
 800fca4:	b299      	uxth	r1, r3
 800fca6:	4a16      	ldr	r2, [pc, #88]	@ (800fd00 <fit_lfn+0xe4>)
 800fca8:	69bb      	ldr	r3, [r7, #24]
 800fcaa:	4413      	add	r3, r2
 800fcac:	781b      	ldrb	r3, [r3, #0]
 800fcae:	3301      	adds	r3, #1
 800fcb0:	68ba      	ldr	r2, [r7, #8]
 800fcb2:	4413      	add	r3, r2
 800fcb4:	b2ca      	uxtb	r2, r1
 800fcb6:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800fcb8:	8afb      	ldrh	r3, [r7, #22]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d102      	bne.n	800fcc4 <fit_lfn+0xa8>
 800fcbe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fcc2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800fcc4:	69bb      	ldr	r3, [r7, #24]
 800fcc6:	3301      	adds	r3, #1
 800fcc8:	61bb      	str	r3, [r7, #24]
 800fcca:	69bb      	ldr	r3, [r7, #24]
 800fccc:	2b0c      	cmp	r3, #12
 800fcce:	d9d0      	bls.n	800fc72 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800fcd0:	8afb      	ldrh	r3, [r7, #22]
 800fcd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fcd6:	4293      	cmp	r3, r2
 800fcd8:	d006      	beq.n	800fce8 <fit_lfn+0xcc>
 800fcda:	69fb      	ldr	r3, [r7, #28]
 800fcdc:	005b      	lsls	r3, r3, #1
 800fcde:	68fa      	ldr	r2, [r7, #12]
 800fce0:	4413      	add	r3, r2
 800fce2:	881b      	ldrh	r3, [r3, #0]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d103      	bne.n	800fcf0 <fit_lfn+0xd4>
 800fce8:	79fb      	ldrb	r3, [r7, #7]
 800fcea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fcee:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	79fa      	ldrb	r2, [r7, #7]
 800fcf4:	701a      	strb	r2, [r3, #0]
}
 800fcf6:	bf00      	nop
 800fcf8:	3724      	adds	r7, #36	@ 0x24
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bc80      	pop	{r7}
 800fcfe:	4770      	bx	lr
 800fd00:	08015fe4 	.word	0x08015fe4

0800fd04 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b08c      	sub	sp, #48	@ 0x30
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	60f8      	str	r0, [r7, #12]
 800fd0c:	60b9      	str	r1, [r7, #8]
 800fd0e:	607a      	str	r2, [r7, #4]
 800fd10:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800fd12:	220b      	movs	r2, #11
 800fd14:	68b9      	ldr	r1, [r7, #8]
 800fd16:	68f8      	ldr	r0, [r7, #12]
 800fd18:	f7fe fe9c 	bl	800ea54 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	2b05      	cmp	r3, #5
 800fd20:	d92b      	bls.n	800fd7a <gen_numname+0x76>
		sr = seq;
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800fd26:	e022      	b.n	800fd6e <gen_numname+0x6a>
			wc = *lfn++;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	1c9a      	adds	r2, r3, #2
 800fd2c:	607a      	str	r2, [r7, #4]
 800fd2e:	881b      	ldrh	r3, [r3, #0]
 800fd30:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800fd32:	2300      	movs	r3, #0
 800fd34:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fd36:	e017      	b.n	800fd68 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800fd38:	69fb      	ldr	r3, [r7, #28]
 800fd3a:	005a      	lsls	r2, r3, #1
 800fd3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fd3e:	f003 0301 	and.w	r3, r3, #1
 800fd42:	4413      	add	r3, r2
 800fd44:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800fd46:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fd48:	085b      	lsrs	r3, r3, #1
 800fd4a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800fd4c:	69fb      	ldr	r3, [r7, #28]
 800fd4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d005      	beq.n	800fd62 <gen_numname+0x5e>
 800fd56:	69fb      	ldr	r3, [r7, #28]
 800fd58:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800fd5c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800fd60:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800fd62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd64:	3301      	adds	r3, #1
 800fd66:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fd68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd6a:	2b0f      	cmp	r3, #15
 800fd6c:	d9e4      	bls.n	800fd38 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	881b      	ldrh	r3, [r3, #0]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d1d8      	bne.n	800fd28 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800fd76:	69fb      	ldr	r3, [r7, #28]
 800fd78:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800fd7a:	2307      	movs	r3, #7
 800fd7c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	b2db      	uxtb	r3, r3
 800fd82:	f003 030f 	and.w	r3, r3, #15
 800fd86:	b2db      	uxtb	r3, r3
 800fd88:	3330      	adds	r3, #48	@ 0x30
 800fd8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800fd8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fd92:	2b39      	cmp	r3, #57	@ 0x39
 800fd94:	d904      	bls.n	800fda0 <gen_numname+0x9c>
 800fd96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fd9a:	3307      	adds	r3, #7
 800fd9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800fda0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fda2:	1e5a      	subs	r2, r3, #1
 800fda4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800fda6:	3330      	adds	r3, #48	@ 0x30
 800fda8:	443b      	add	r3, r7
 800fdaa:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800fdae:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	091b      	lsrs	r3, r3, #4
 800fdb6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d1df      	bne.n	800fd7e <gen_numname+0x7a>
	ns[i] = '~';
 800fdbe:	f107 0214 	add.w	r2, r7, #20
 800fdc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdc4:	4413      	add	r3, r2
 800fdc6:	227e      	movs	r2, #126	@ 0x7e
 800fdc8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800fdca:	2300      	movs	r3, #0
 800fdcc:	627b      	str	r3, [r7, #36]	@ 0x24
 800fdce:	e002      	b.n	800fdd6 <gen_numname+0xd2>
 800fdd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdd2:	3301      	adds	r3, #1
 800fdd4:	627b      	str	r3, [r7, #36]	@ 0x24
 800fdd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fdd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdda:	429a      	cmp	r2, r3
 800fddc:	d205      	bcs.n	800fdea <gen_numname+0xe6>
 800fdde:	68fa      	ldr	r2, [r7, #12]
 800fde0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fde2:	4413      	add	r3, r2
 800fde4:	781b      	ldrb	r3, [r3, #0]
 800fde6:	2b20      	cmp	r3, #32
 800fde8:	d1f2      	bne.n	800fdd0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800fdea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdec:	2b07      	cmp	r3, #7
 800fdee:	d807      	bhi.n	800fe00 <gen_numname+0xfc>
 800fdf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdf2:	1c5a      	adds	r2, r3, #1
 800fdf4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800fdf6:	3330      	adds	r3, #48	@ 0x30
 800fdf8:	443b      	add	r3, r7
 800fdfa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800fdfe:	e000      	b.n	800fe02 <gen_numname+0xfe>
 800fe00:	2120      	movs	r1, #32
 800fe02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe04:	1c5a      	adds	r2, r3, #1
 800fe06:	627a      	str	r2, [r7, #36]	@ 0x24
 800fe08:	68fa      	ldr	r2, [r7, #12]
 800fe0a:	4413      	add	r3, r2
 800fe0c:	460a      	mov	r2, r1
 800fe0e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800fe10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe12:	2b07      	cmp	r3, #7
 800fe14:	d9e9      	bls.n	800fdea <gen_numname+0xe6>
}
 800fe16:	bf00      	nop
 800fe18:	bf00      	nop
 800fe1a:	3730      	adds	r7, #48	@ 0x30
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}

0800fe20 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800fe20:	b480      	push	{r7}
 800fe22:	b085      	sub	sp, #20
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800fe28:	2300      	movs	r3, #0
 800fe2a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800fe2c:	230b      	movs	r3, #11
 800fe2e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800fe30:	7bfb      	ldrb	r3, [r7, #15]
 800fe32:	b2da      	uxtb	r2, r3
 800fe34:	0852      	lsrs	r2, r2, #1
 800fe36:	01db      	lsls	r3, r3, #7
 800fe38:	4313      	orrs	r3, r2
 800fe3a:	b2da      	uxtb	r2, r3
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	1c59      	adds	r1, r3, #1
 800fe40:	6079      	str	r1, [r7, #4]
 800fe42:	781b      	ldrb	r3, [r3, #0]
 800fe44:	4413      	add	r3, r2
 800fe46:	73fb      	strb	r3, [r7, #15]
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	3b01      	subs	r3, #1
 800fe4c:	60bb      	str	r3, [r7, #8]
 800fe4e:	68bb      	ldr	r3, [r7, #8]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d1ed      	bne.n	800fe30 <sum_sfn+0x10>
	return sum;
 800fe54:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3714      	adds	r7, #20
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bc80      	pop	{r7}
 800fe5e:	4770      	bx	lr

0800fe60 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b086      	sub	sp, #24
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800fe68:	2100      	movs	r1, #0
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f7ff fc3f 	bl	800f6ee <dir_sdi>
 800fe70:	4603      	mov	r3, r0
 800fe72:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800fe74:	7dfb      	ldrb	r3, [r7, #23]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d001      	beq.n	800fe7e <dir_find+0x1e>
 800fe7a:	7dfb      	ldrb	r3, [r7, #23]
 800fe7c:	e0ac      	b.n	800ffd8 <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800fe7e:	23ff      	movs	r3, #255	@ 0xff
 800fe80:	753b      	strb	r3, [r7, #20]
 800fe82:	7d3b      	ldrb	r3, [r7, #20]
 800fe84:	757b      	strb	r3, [r7, #21]
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fe8c:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	4610      	mov	r0, r2
 800fea0:	f7ff f837 	bl	800ef12 <move_window>
 800fea4:	4603      	mov	r3, r0
 800fea6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fea8:	7dfb      	ldrb	r3, [r7, #23]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	f040 808e 	bne.w	800ffcc <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800feb6:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800feb8:	693b      	ldr	r3, [r7, #16]
 800feba:	781b      	ldrb	r3, [r3, #0]
 800febc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800febe:	7dbb      	ldrb	r3, [r7, #22]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d102      	bne.n	800feca <dir_find+0x6a>
 800fec4:	2304      	movs	r3, #4
 800fec6:	75fb      	strb	r3, [r7, #23]
 800fec8:	e085      	b.n	800ffd6 <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	330b      	adds	r3, #11
 800fece:	781b      	ldrb	r3, [r3, #0]
 800fed0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fed4:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800fed6:	7dbb      	ldrb	r3, [r7, #22]
 800fed8:	2be5      	cmp	r3, #229	@ 0xe5
 800feda:	d007      	beq.n	800feec <dir_find+0x8c>
 800fedc:	7bfb      	ldrb	r3, [r7, #15]
 800fede:	f003 0308 	and.w	r3, r3, #8
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d00a      	beq.n	800fefc <dir_find+0x9c>
 800fee6:	7bfb      	ldrb	r3, [r7, #15]
 800fee8:	2b0f      	cmp	r3, #15
 800feea:	d007      	beq.n	800fefc <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800feec:	23ff      	movs	r3, #255	@ 0xff
 800feee:	757b      	strb	r3, [r7, #21]
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fef6:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
 800fefa:	e05c      	b.n	800ffb6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800fefc:	7bfb      	ldrb	r3, [r7, #15]
 800fefe:	2b0f      	cmp	r3, #15
 800ff00:	d133      	bne.n	800ff6a <dir_find+0x10a>
				if (dp->lfn) {
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d054      	beq.n	800ffb6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ff0c:	7dbb      	ldrb	r3, [r7, #22]
 800ff0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d00e      	beq.n	800ff34 <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	7b5b      	ldrb	r3, [r3, #13]
 800ff1a:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800ff1c:	7dbb      	ldrb	r3, [r7, #22]
 800ff1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ff22:	75bb      	strb	r3, [r7, #22]
 800ff24:	7dbb      	ldrb	r3, [r7, #22]
 800ff26:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800ff34:	7dba      	ldrb	r2, [r7, #22]
 800ff36:	7d7b      	ldrb	r3, [r7, #21]
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	d113      	bne.n	800ff64 <dir_find+0x104>
 800ff3c:	693b      	ldr	r3, [r7, #16]
 800ff3e:	330d      	adds	r3, #13
 800ff40:	781b      	ldrb	r3, [r3, #0]
 800ff42:	7d3a      	ldrb	r2, [r7, #20]
 800ff44:	429a      	cmp	r2, r3
 800ff46:	d10d      	bne.n	800ff64 <dir_find+0x104>
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800ff4e:	6939      	ldr	r1, [r7, #16]
 800ff50:	4618      	mov	r0, r3
 800ff52:	f7ff fdf5 	bl	800fb40 <cmp_lfn>
 800ff56:	4603      	mov	r3, r0
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d003      	beq.n	800ff64 <dir_find+0x104>
 800ff5c:	7d7b      	ldrb	r3, [r7, #21]
 800ff5e:	3b01      	subs	r3, #1
 800ff60:	b2db      	uxtb	r3, r3
 800ff62:	e000      	b.n	800ff66 <dir_find+0x106>
 800ff64:	23ff      	movs	r3, #255	@ 0xff
 800ff66:	757b      	strb	r3, [r7, #21]
 800ff68:	e025      	b.n	800ffb6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800ff6a:	7d7b      	ldrb	r3, [r7, #21]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d107      	bne.n	800ff80 <dir_find+0x120>
 800ff70:	6938      	ldr	r0, [r7, #16]
 800ff72:	f7ff ff55 	bl	800fe20 <sum_sfn>
 800ff76:	4603      	mov	r3, r0
 800ff78:	461a      	mov	r2, r3
 800ff7a:	7d3b      	ldrb	r3, [r7, #20]
 800ff7c:	4293      	cmp	r3, r2
 800ff7e:	d027      	beq.n	800ffd0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ff86:	330b      	adds	r3, #11
 800ff88:	781b      	ldrb	r3, [r3, #0]
 800ff8a:	f003 0301 	and.w	r3, r3, #1
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d10a      	bne.n	800ffa8 <dir_find+0x148>
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ff98:	220b      	movs	r2, #11
 800ff9a:	4619      	mov	r1, r3
 800ff9c:	6938      	ldr	r0, [r7, #16]
 800ff9e:	f7fe fd91 	bl	800eac4 <mem_cmp>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d015      	beq.n	800ffd4 <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800ffa8:	23ff      	movs	r3, #255	@ 0xff
 800ffaa:	757b      	strb	r3, [r7, #21]
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ffb2:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800ffb6:	2100      	movs	r1, #0
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f7ff fc2c 	bl	800f816 <dir_next>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ffc2:	7dfb      	ldrb	r3, [r7, #23]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	f43f af63 	beq.w	800fe90 <dir_find+0x30>
 800ffca:	e004      	b.n	800ffd6 <dir_find+0x176>
		if (res != FR_OK) break;
 800ffcc:	bf00      	nop
 800ffce:	e002      	b.n	800ffd6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800ffd0:	bf00      	nop
 800ffd2:	e000      	b.n	800ffd6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800ffd4:	bf00      	nop

	return res;
 800ffd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3718      	adds	r7, #24
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b08c      	sub	sp, #48	@ 0x30
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ffee:	623b      	str	r3, [r7, #32]
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800fff6:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800fff8:	f107 030c 	add.w	r3, r7, #12
 800fffc:	220c      	movs	r2, #12
 800fffe:	6a39      	ldr	r1, [r7, #32]
 8010000:	4618      	mov	r0, r3
 8010002:	f7fe fd27 	bl	800ea54 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8010006:	7dfb      	ldrb	r3, [r7, #23]
 8010008:	f003 0301 	and.w	r3, r3, #1
 801000c:	2b00      	cmp	r3, #0
 801000e:	d037      	beq.n	8010080 <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8010010:	6a3b      	ldr	r3, [r7, #32]
 8010012:	330b      	adds	r3, #11
 8010014:	2200      	movs	r2, #0
 8010016:	701a      	strb	r2, [r3, #0]
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2200      	movs	r2, #0
 801001c:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
		for (n = 1; n < 100; n++) {
 8010020:	2301      	movs	r3, #1
 8010022:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010024:	e013      	b.n	801004e <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8010026:	f107 010c 	add.w	r1, r7, #12
 801002a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801002c:	69fa      	ldr	r2, [r7, #28]
 801002e:	6a38      	ldr	r0, [r7, #32]
 8010030:	f7ff fe68 	bl	800fd04 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8010034:	6878      	ldr	r0, [r7, #4]
 8010036:	f7ff ff13 	bl	800fe60 <dir_find>
 801003a:	4603      	mov	r3, r0
 801003c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8010040:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010044:	2b00      	cmp	r3, #0
 8010046:	d106      	bne.n	8010056 <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 8010048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801004a:	3301      	adds	r3, #1
 801004c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801004e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010050:	2b63      	cmp	r3, #99	@ 0x63
 8010052:	d9e8      	bls.n	8010026 <dir_register+0x46>
 8010054:	e000      	b.n	8010058 <dir_register+0x78>
			if (res != FR_OK) break;
 8010056:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8010058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801005a:	2b64      	cmp	r3, #100	@ 0x64
 801005c:	d101      	bne.n	8010062 <dir_register+0x82>
 801005e:	2307      	movs	r3, #7
 8010060:	e0c5      	b.n	80101ee <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8010062:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010066:	2b04      	cmp	r3, #4
 8010068:	d002      	beq.n	8010070 <dir_register+0x90>
 801006a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801006e:	e0be      	b.n	80101ee <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8010070:	6a3b      	ldr	r3, [r7, #32]
 8010072:	330b      	adds	r3, #11
 8010074:	7dfa      	ldrb	r2, [r7, #23]
 8010076:	701a      	strb	r2, [r3, #0]
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	69fa      	ldr	r2, [r7, #28]
 801007c:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8010080:	7dfb      	ldrb	r3, [r7, #23]
 8010082:	f003 0302 	and.w	r3, r3, #2
 8010086:	2b00      	cmp	r3, #0
 8010088:	d014      	beq.n	80100b4 <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 801008a:	2300      	movs	r3, #0
 801008c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801008e:	e002      	b.n	8010096 <dir_register+0xb6>
 8010090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010092:	3301      	adds	r3, #1
 8010094:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010098:	005b      	lsls	r3, r3, #1
 801009a:	69fa      	ldr	r2, [r7, #28]
 801009c:	4413      	add	r3, r2
 801009e:	881b      	ldrh	r3, [r3, #0]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d1f5      	bne.n	8010090 <dir_register+0xb0>
		nent = (n + 25) / 13;
 80100a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100a6:	3319      	adds	r3, #25
 80100a8:	4a53      	ldr	r2, [pc, #332]	@ (80101f8 <dir_register+0x218>)
 80100aa:	fba2 2303 	umull	r2, r3, r2, r3
 80100ae:	089b      	lsrs	r3, r3, #2
 80100b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80100b2:	e001      	b.n	80100b8 <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 80100b4:	2301      	movs	r3, #1
 80100b6:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80100b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80100ba:	6878      	ldr	r0, [r7, #4]
 80100bc:	f7ff fca2 	bl	800fa04 <dir_alloc>
 80100c0:	4603      	mov	r3, r0
 80100c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80100c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d153      	bne.n	8010176 <dir_register+0x196>
 80100ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100d0:	3b01      	subs	r3, #1
 80100d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80100d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d04d      	beq.n	8010176 <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 80100e0:	461a      	mov	r2, r3
 80100e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100e4:	1ad3      	subs	r3, r2, r3
 80100e6:	4619      	mov	r1, r3
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	f7ff fb00 	bl	800f6ee <dir_sdi>
 80100ee:	4603      	mov	r3, r0
 80100f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80100f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d13c      	bne.n	8010176 <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010102:	4618      	mov	r0, r3
 8010104:	f7ff fe8c 	bl	800fe20 <sum_sfn>
 8010108:	4603      	mov	r3, r0
 801010a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8010118:	4619      	mov	r1, r3
 801011a:	4610      	mov	r0, r2
 801011c:	f7fe fef9 	bl	800ef12 <move_window>
 8010120:	4603      	mov	r3, r0
 8010122:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8010126:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801012a:	2b00      	cmp	r3, #0
 801012c:	d122      	bne.n	8010174 <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f8d3 1214 	ldr.w	r1, [r3, #532]	@ 0x214
 801013a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801013c:	b2da      	uxtb	r2, r3
 801013e:	7efb      	ldrb	r3, [r7, #27]
 8010140:	f7ff fd6c 	bl	800fc1c <fit_lfn>
				dp->fs->wflag = 1;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801014a:	2201      	movs	r2, #1
 801014c:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = dir_next(dp, 0);	/* Next entry */
 8010150:	2100      	movs	r1, #0
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f7ff fb5f 	bl	800f816 <dir_next>
 8010158:	4603      	mov	r3, r0
 801015a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801015e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010162:	2b00      	cmp	r3, #0
 8010164:	d107      	bne.n	8010176 <dir_register+0x196>
 8010166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010168:	3b01      	subs	r3, #1
 801016a:	627b      	str	r3, [r7, #36]	@ 0x24
 801016c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801016e:	2b00      	cmp	r3, #0
 8010170:	d1cc      	bne.n	801010c <dir_register+0x12c>
 8010172:	e000      	b.n	8010176 <dir_register+0x196>
				if (res != FR_OK) break;
 8010174:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8010176:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801017a:	2b00      	cmp	r3, #0
 801017c:	d135      	bne.n	80101ea <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801018a:	4619      	mov	r1, r3
 801018c:	4610      	mov	r0, r2
 801018e:	f7fe fec0 	bl	800ef12 <move_window>
 8010192:	4603      	mov	r3, r0
 8010194:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8010198:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801019c:	2b00      	cmp	r3, #0
 801019e:	d124      	bne.n	80101ea <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80101a6:	2220      	movs	r2, #32
 80101a8:	2100      	movs	r1, #0
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7fe fc70 	bl	800ea90 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f8d3 0214 	ldr.w	r0, [r3, #532]	@ 0x214
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80101bc:	220b      	movs	r2, #11
 80101be:	4619      	mov	r1, r3
 80101c0:	f7fe fc48 	bl	800ea54 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80101ca:	330b      	adds	r3, #11
 80101cc:	781a      	ldrb	r2, [r3, #0]
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80101d4:	330c      	adds	r3, #12
 80101d6:	f002 0218 	and.w	r2, r2, #24
 80101da:	b2d2      	uxtb	r2, r2
 80101dc:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80101e4:	2201      	movs	r2, #1
 80101e6:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		}
	}

	return res;
 80101ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3730      	adds	r7, #48	@ 0x30
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}
 80101f6:	bf00      	nop
 80101f8:	4ec4ec4f 	.word	0x4ec4ec4f

080101fc <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b08a      	sub	sp, #40	@ 0x28
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	613b      	str	r3, [r7, #16]
 801020c:	e002      	b.n	8010214 <create_name+0x18>
 801020e:	693b      	ldr	r3, [r7, #16]
 8010210:	3301      	adds	r3, #1
 8010212:	613b      	str	r3, [r7, #16]
 8010214:	693b      	ldr	r3, [r7, #16]
 8010216:	781b      	ldrb	r3, [r3, #0]
 8010218:	2b2f      	cmp	r3, #47	@ 0x2f
 801021a:	d0f8      	beq.n	801020e <create_name+0x12>
 801021c:	693b      	ldr	r3, [r7, #16]
 801021e:	781b      	ldrb	r3, [r3, #0]
 8010220:	2b5c      	cmp	r3, #92	@ 0x5c
 8010222:	d0f4      	beq.n	801020e <create_name+0x12>
	lfn = dp->lfn;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 801022a:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 801022c:	2300      	movs	r3, #0
 801022e:	617b      	str	r3, [r7, #20]
 8010230:	697b      	ldr	r3, [r7, #20]
 8010232:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8010234:	69bb      	ldr	r3, [r7, #24]
 8010236:	1c5a      	adds	r2, r3, #1
 8010238:	61ba      	str	r2, [r7, #24]
 801023a:	693a      	ldr	r2, [r7, #16]
 801023c:	4413      	add	r3, r2
 801023e:	781b      	ldrb	r3, [r3, #0]
 8010240:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8010242:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010244:	2b1f      	cmp	r3, #31
 8010246:	d92f      	bls.n	80102a8 <create_name+0xac>
 8010248:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801024a:	2b2f      	cmp	r3, #47	@ 0x2f
 801024c:	d02c      	beq.n	80102a8 <create_name+0xac>
 801024e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010250:	2b5c      	cmp	r3, #92	@ 0x5c
 8010252:	d029      	beq.n	80102a8 <create_name+0xac>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	2bfe      	cmp	r3, #254	@ 0xfe
 8010258:	d901      	bls.n	801025e <create_name+0x62>
			return FR_INVALID_NAME;
 801025a:	2306      	movs	r3, #6
 801025c:	e182      	b.n	8010564 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801025e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010260:	b2db      	uxtb	r3, r3
 8010262:	84bb      	strh	r3, [r7, #36]	@ 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8010264:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010266:	2101      	movs	r1, #1
 8010268:	4618      	mov	r0, r3
 801026a:	f001 ffe7 	bl	801223c <ff_convert>
 801026e:	4603      	mov	r3, r0
 8010270:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8010272:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010274:	2b00      	cmp	r3, #0
 8010276:	d101      	bne.n	801027c <create_name+0x80>
 8010278:	2306      	movs	r3, #6
 801027a:	e173      	b.n	8010564 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 801027c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801027e:	2b7f      	cmp	r3, #127	@ 0x7f
 8010280:	d809      	bhi.n	8010296 <create_name+0x9a>
 8010282:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010284:	4619      	mov	r1, r3
 8010286:	488e      	ldr	r0, [pc, #568]	@ (80104c0 <create_name+0x2c4>)
 8010288:	f7fe fc42 	bl	800eb10 <chk_chr>
 801028c:	4603      	mov	r3, r0
 801028e:	2b00      	cmp	r3, #0
 8010290:	d001      	beq.n	8010296 <create_name+0x9a>
			return FR_INVALID_NAME;
 8010292:	2306      	movs	r3, #6
 8010294:	e166      	b.n	8010564 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8010296:	697b      	ldr	r3, [r7, #20]
 8010298:	1c5a      	adds	r2, r3, #1
 801029a:	617a      	str	r2, [r7, #20]
 801029c:	005b      	lsls	r3, r3, #1
 801029e:	68fa      	ldr	r2, [r7, #12]
 80102a0:	4413      	add	r3, r2
 80102a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80102a4:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80102a6:	e7c5      	b.n	8010234 <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80102a8:	693a      	ldr	r2, [r7, #16]
 80102aa:	69bb      	ldr	r3, [r7, #24]
 80102ac:	441a      	add	r2, r3
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80102b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80102b4:	2b1f      	cmp	r3, #31
 80102b6:	d801      	bhi.n	80102bc <create_name+0xc0>
 80102b8:	2304      	movs	r3, #4
 80102ba:	e000      	b.n	80102be <create_name+0xc2>
 80102bc:	2300      	movs	r3, #0
 80102be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 80102c2:	e011      	b.n	80102e8 <create_name+0xec>
		w = lfn[di - 1];
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80102ca:	3b01      	subs	r3, #1
 80102cc:	005b      	lsls	r3, r3, #1
 80102ce:	68fa      	ldr	r2, [r7, #12]
 80102d0:	4413      	add	r3, r2
 80102d2:	881b      	ldrh	r3, [r3, #0]
 80102d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80102d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80102d8:	2b20      	cmp	r3, #32
 80102da:	d002      	beq.n	80102e2 <create_name+0xe6>
 80102dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80102de:	2b2e      	cmp	r3, #46	@ 0x2e
 80102e0:	d106      	bne.n	80102f0 <create_name+0xf4>
		di--;
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	3b01      	subs	r3, #1
 80102e6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d1ea      	bne.n	80102c4 <create_name+0xc8>
 80102ee:	e000      	b.n	80102f2 <create_name+0xf6>
		if (w != ' ' && w != '.') break;
 80102f0:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d101      	bne.n	80102fc <create_name+0x100>
 80102f8:	2306      	movs	r3, #6
 80102fa:	e133      	b.n	8010564 <create_name+0x368>

	lfn[di] = 0;						/* LFN is created */
 80102fc:	697b      	ldr	r3, [r7, #20]
 80102fe:	005b      	lsls	r3, r3, #1
 8010300:	68fa      	ldr	r2, [r7, #12]
 8010302:	4413      	add	r3, r2
 8010304:	2200      	movs	r2, #0
 8010306:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 801030e:	220b      	movs	r2, #11
 8010310:	2120      	movs	r1, #32
 8010312:	4618      	mov	r0, r3
 8010314:	f7fe fbbc 	bl	800ea90 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8010318:	2300      	movs	r3, #0
 801031a:	61bb      	str	r3, [r7, #24]
 801031c:	e002      	b.n	8010324 <create_name+0x128>
 801031e:	69bb      	ldr	r3, [r7, #24]
 8010320:	3301      	adds	r3, #1
 8010322:	61bb      	str	r3, [r7, #24]
 8010324:	69bb      	ldr	r3, [r7, #24]
 8010326:	005b      	lsls	r3, r3, #1
 8010328:	68fa      	ldr	r2, [r7, #12]
 801032a:	4413      	add	r3, r2
 801032c:	881b      	ldrh	r3, [r3, #0]
 801032e:	2b20      	cmp	r3, #32
 8010330:	d0f5      	beq.n	801031e <create_name+0x122>
 8010332:	69bb      	ldr	r3, [r7, #24]
 8010334:	005b      	lsls	r3, r3, #1
 8010336:	68fa      	ldr	r2, [r7, #12]
 8010338:	4413      	add	r3, r2
 801033a:	881b      	ldrh	r3, [r3, #0]
 801033c:	2b2e      	cmp	r3, #46	@ 0x2e
 801033e:	d0ee      	beq.n	801031e <create_name+0x122>
	if (si) cf |= NS_LOSS | NS_LFN;
 8010340:	69bb      	ldr	r3, [r7, #24]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d009      	beq.n	801035a <create_name+0x15e>
 8010346:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801034a:	f043 0303 	orr.w	r3, r3, #3
 801034e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8010352:	e002      	b.n	801035a <create_name+0x15e>
 8010354:	697b      	ldr	r3, [r7, #20]
 8010356:	3b01      	subs	r3, #1
 8010358:	617b      	str	r3, [r7, #20]
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d009      	beq.n	8010374 <create_name+0x178>
 8010360:	697b      	ldr	r3, [r7, #20]
 8010362:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8010366:	3b01      	subs	r3, #1
 8010368:	005b      	lsls	r3, r3, #1
 801036a:	68fa      	ldr	r2, [r7, #12]
 801036c:	4413      	add	r3, r2
 801036e:	881b      	ldrh	r3, [r3, #0]
 8010370:	2b2e      	cmp	r3, #46	@ 0x2e
 8010372:	d1ef      	bne.n	8010354 <create_name+0x158>

	b = i = 0; ni = 8;
 8010374:	2300      	movs	r3, #0
 8010376:	623b      	str	r3, [r7, #32]
 8010378:	2300      	movs	r3, #0
 801037a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801037e:	2308      	movs	r3, #8
 8010380:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8010382:	69bb      	ldr	r3, [r7, #24]
 8010384:	1c5a      	adds	r2, r3, #1
 8010386:	61ba      	str	r2, [r7, #24]
 8010388:	005b      	lsls	r3, r3, #1
 801038a:	68fa      	ldr	r2, [r7, #12]
 801038c:	4413      	add	r3, r2
 801038e:	881b      	ldrh	r3, [r3, #0]
 8010390:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8010392:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010394:	2b00      	cmp	r3, #0
 8010396:	f000 8090 	beq.w	80104ba <create_name+0x2be>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801039a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801039c:	2b20      	cmp	r3, #32
 801039e:	d006      	beq.n	80103ae <create_name+0x1b2>
 80103a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80103a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80103a4:	d10a      	bne.n	80103bc <create_name+0x1c0>
 80103a6:	69ba      	ldr	r2, [r7, #24]
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	429a      	cmp	r2, r3
 80103ac:	d006      	beq.n	80103bc <create_name+0x1c0>
			cf |= NS_LOSS | NS_LFN; continue;
 80103ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80103b2:	f043 0303 	orr.w	r3, r3, #3
 80103b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80103ba:	e07d      	b.n	80104b8 <create_name+0x2bc>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80103bc:	6a3a      	ldr	r2, [r7, #32]
 80103be:	69fb      	ldr	r3, [r7, #28]
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d203      	bcs.n	80103cc <create_name+0x1d0>
 80103c4:	69ba      	ldr	r2, [r7, #24]
 80103c6:	697b      	ldr	r3, [r7, #20]
 80103c8:	429a      	cmp	r2, r3
 80103ca:	d123      	bne.n	8010414 <create_name+0x218>
			if (ni == 11) {				/* Long extension */
 80103cc:	69fb      	ldr	r3, [r7, #28]
 80103ce:	2b0b      	cmp	r3, #11
 80103d0:	d106      	bne.n	80103e0 <create_name+0x1e4>
				cf |= NS_LOSS | NS_LFN; break;
 80103d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80103d6:	f043 0303 	orr.w	r3, r3, #3
 80103da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80103de:	e076      	b.n	80104ce <create_name+0x2d2>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80103e0:	69ba      	ldr	r2, [r7, #24]
 80103e2:	697b      	ldr	r3, [r7, #20]
 80103e4:	429a      	cmp	r2, r3
 80103e6:	d005      	beq.n	80103f4 <create_name+0x1f8>
 80103e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80103ec:	f043 0303 	orr.w	r3, r3, #3
 80103f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80103f4:	69ba      	ldr	r2, [r7, #24]
 80103f6:	697b      	ldr	r3, [r7, #20]
 80103f8:	429a      	cmp	r2, r3
 80103fa:	d867      	bhi.n	80104cc <create_name+0x2d0>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80103fc:	697b      	ldr	r3, [r7, #20]
 80103fe:	61bb      	str	r3, [r7, #24]
 8010400:	2308      	movs	r3, #8
 8010402:	623b      	str	r3, [r7, #32]
 8010404:	230b      	movs	r3, #11
 8010406:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8010408:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801040c:	009b      	lsls	r3, r3, #2
 801040e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010412:	e051      	b.n	80104b8 <create_name+0x2bc>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8010414:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010416:	2b7f      	cmp	r3, #127	@ 0x7f
 8010418:	d914      	bls.n	8010444 <create_name+0x248>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801041a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801041c:	2100      	movs	r1, #0
 801041e:	4618      	mov	r0, r3
 8010420:	f001 ff0c 	bl	801223c <ff_convert>
 8010424:	4603      	mov	r3, r0
 8010426:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8010428:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801042a:	2b00      	cmp	r3, #0
 801042c:	d004      	beq.n	8010438 <create_name+0x23c>
 801042e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010430:	3b80      	subs	r3, #128	@ 0x80
 8010432:	4a24      	ldr	r2, [pc, #144]	@ (80104c4 <create_name+0x2c8>)
 8010434:	5cd3      	ldrb	r3, [r2, r3]
 8010436:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8010438:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801043c:	f043 0302 	orr.w	r3, r3, #2
 8010440:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8010444:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010446:	2b00      	cmp	r3, #0
 8010448:	d007      	beq.n	801045a <create_name+0x25e>
 801044a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801044c:	4619      	mov	r1, r3
 801044e:	481e      	ldr	r0, [pc, #120]	@ (80104c8 <create_name+0x2cc>)
 8010450:	f7fe fb5e 	bl	800eb10 <chk_chr>
 8010454:	4603      	mov	r3, r0
 8010456:	2b00      	cmp	r3, #0
 8010458:	d008      	beq.n	801046c <create_name+0x270>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801045a:	235f      	movs	r3, #95	@ 0x5f
 801045c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801045e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010462:	f043 0303 	orr.w	r3, r3, #3
 8010466:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801046a:	e01b      	b.n	80104a4 <create_name+0x2a8>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801046c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801046e:	2b40      	cmp	r3, #64	@ 0x40
 8010470:	d909      	bls.n	8010486 <create_name+0x28a>
 8010472:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010474:	2b5a      	cmp	r3, #90	@ 0x5a
 8010476:	d806      	bhi.n	8010486 <create_name+0x28a>
					b |= 2;
 8010478:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801047c:	f043 0302 	orr.w	r3, r3, #2
 8010480:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010484:	e00e      	b.n	80104a4 <create_name+0x2a8>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8010486:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010488:	2b60      	cmp	r3, #96	@ 0x60
 801048a:	d90b      	bls.n	80104a4 <create_name+0x2a8>
 801048c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801048e:	2b7a      	cmp	r3, #122	@ 0x7a
 8010490:	d808      	bhi.n	80104a4 <create_name+0x2a8>
						b |= 1; w -= 0x20;
 8010492:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010496:	f043 0301 	orr.w	r3, r3, #1
 801049a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801049e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80104a0:	3b20      	subs	r3, #32
 80104a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80104aa:	6a3b      	ldr	r3, [r7, #32]
 80104ac:	1c59      	adds	r1, r3, #1
 80104ae:	6239      	str	r1, [r7, #32]
 80104b0:	4413      	add	r3, r2
 80104b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80104b4:	b2d2      	uxtb	r2, r2
 80104b6:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 80104b8:	e763      	b.n	8010382 <create_name+0x186>
		if (!w) break;					/* Break on end of the LFN */
 80104ba:	bf00      	nop
 80104bc:	e007      	b.n	80104ce <create_name+0x2d2>
 80104be:	bf00      	nop
 80104c0:	08015e24 	.word	0x08015e24
 80104c4:	08015f64 	.word	0x08015f64
 80104c8:	08015e30 	.word	0x08015e30
			if (si > di) break;			/* No extension */
 80104cc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80104d4:	781b      	ldrb	r3, [r3, #0]
 80104d6:	2be5      	cmp	r3, #229	@ 0xe5
 80104d8:	d104      	bne.n	80104e4 <create_name+0x2e8>
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80104e0:	2205      	movs	r2, #5
 80104e2:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80104e4:	69fb      	ldr	r3, [r7, #28]
 80104e6:	2b08      	cmp	r3, #8
 80104e8:	d104      	bne.n	80104f4 <create_name+0x2f8>
 80104ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80104ee:	009b      	lsls	r3, r3, #2
 80104f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80104f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80104f8:	f003 030c 	and.w	r3, r3, #12
 80104fc:	2b0c      	cmp	r3, #12
 80104fe:	d005      	beq.n	801050c <create_name+0x310>
 8010500:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010504:	f003 0303 	and.w	r3, r3, #3
 8010508:	2b03      	cmp	r3, #3
 801050a:	d105      	bne.n	8010518 <create_name+0x31c>
		cf |= NS_LFN;
 801050c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010510:	f043 0302 	orr.w	r3, r3, #2
 8010514:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8010518:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801051c:	f003 0302 	and.w	r3, r3, #2
 8010520:	2b00      	cmp	r3, #0
 8010522:	d117      	bne.n	8010554 <create_name+0x358>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8010524:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010528:	f003 0303 	and.w	r3, r3, #3
 801052c:	2b01      	cmp	r3, #1
 801052e:	d105      	bne.n	801053c <create_name+0x340>
 8010530:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010534:	f043 0310 	orr.w	r3, r3, #16
 8010538:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801053c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010540:	f003 030c 	and.w	r3, r3, #12
 8010544:	2b04      	cmp	r3, #4
 8010546:	d105      	bne.n	8010554 <create_name+0x358>
 8010548:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801054c:	f043 0308 	orr.w	r3, r3, #8
 8010550:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 801055a:	330b      	adds	r3, #11
 801055c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010560:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010562:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8010564:	4618      	mov	r0, r3
 8010566:	3728      	adds	r7, #40	@ 0x28
 8010568:	46bd      	mov	sp, r7
 801056a:	bd80      	pop	{r7, pc}

0801056c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b084      	sub	sp, #16
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
 8010574:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	781b      	ldrb	r3, [r3, #0]
 801057a:	2b2f      	cmp	r3, #47	@ 0x2f
 801057c:	d003      	beq.n	8010586 <follow_path+0x1a>
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	781b      	ldrb	r3, [r3, #0]
 8010582:	2b5c      	cmp	r3, #92	@ 0x5c
 8010584:	d102      	bne.n	801058c <follow_path+0x20>
		path++;
 8010586:	683b      	ldr	r3, [r7, #0]
 8010588:	3301      	adds	r3, #1
 801058a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	2200      	movs	r2, #0
 8010590:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	781b      	ldrb	r3, [r3, #0]
 8010598:	2b1f      	cmp	r3, #31
 801059a:	d80a      	bhi.n	80105b2 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 801059c:	2100      	movs	r1, #0
 801059e:	6878      	ldr	r0, [r7, #4]
 80105a0:	f7ff f8a5 	bl	800f6ee <dir_sdi>
 80105a4:	4603      	mov	r3, r0
 80105a6:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	2200      	movs	r2, #0
 80105ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80105b0:	e045      	b.n	801063e <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80105b2:	463b      	mov	r3, r7
 80105b4:	4619      	mov	r1, r3
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f7ff fe20 	bl	80101fc <create_name>
 80105bc:	4603      	mov	r3, r0
 80105be:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80105c0:	7bfb      	ldrb	r3, [r7, #15]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d136      	bne.n	8010634 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80105c6:	6878      	ldr	r0, [r7, #4]
 80105c8:	f7ff fc4a 	bl	800fe60 <dir_find>
 80105cc:	4603      	mov	r3, r0
 80105ce:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80105d6:	7adb      	ldrb	r3, [r3, #11]
 80105d8:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80105da:	7bfb      	ldrb	r3, [r7, #15]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d00a      	beq.n	80105f6 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80105e0:	7bfb      	ldrb	r3, [r7, #15]
 80105e2:	2b04      	cmp	r3, #4
 80105e4:	d128      	bne.n	8010638 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80105e6:	7bbb      	ldrb	r3, [r7, #14]
 80105e8:	f003 0304 	and.w	r3, r3, #4
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d123      	bne.n	8010638 <follow_path+0xcc>
 80105f0:	2305      	movs	r3, #5
 80105f2:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80105f4:	e020      	b.n	8010638 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80105f6:	7bbb      	ldrb	r3, [r7, #14]
 80105f8:	f003 0304 	and.w	r3, r3, #4
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d11d      	bne.n	801063c <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010606:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	330b      	adds	r3, #11
 801060c:	781b      	ldrb	r3, [r3, #0]
 801060e:	f003 0310 	and.w	r3, r3, #16
 8010612:	2b00      	cmp	r3, #0
 8010614:	d102      	bne.n	801061c <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8010616:	2305      	movs	r3, #5
 8010618:	73fb      	strb	r3, [r7, #15]
 801061a:	e010      	b.n	801063e <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010622:	68b9      	ldr	r1, [r7, #8]
 8010624:	4618      	mov	r0, r3
 8010626:	f7ff fa37 	bl	800fa98 <ld_clust>
 801062a:	4602      	mov	r2, r0
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010632:	e7be      	b.n	80105b2 <follow_path+0x46>
			if (res != FR_OK) break;
 8010634:	bf00      	nop
 8010636:	e002      	b.n	801063e <follow_path+0xd2>
				break;
 8010638:	bf00      	nop
 801063a:	e000      	b.n	801063e <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801063c:	bf00      	nop
		}
	}

	return res;
 801063e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010640:	4618      	mov	r0, r3
 8010642:	3710      	adds	r7, #16
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}

08010648 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010648:	b480      	push	{r7}
 801064a:	b087      	sub	sp, #28
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010650:	f04f 33ff 	mov.w	r3, #4294967295
 8010654:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d031      	beq.n	80106c2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	617b      	str	r3, [r7, #20]
 8010664:	e002      	b.n	801066c <get_ldnumber+0x24>
 8010666:	697b      	ldr	r3, [r7, #20]
 8010668:	3301      	adds	r3, #1
 801066a:	617b      	str	r3, [r7, #20]
 801066c:	697b      	ldr	r3, [r7, #20]
 801066e:	781b      	ldrb	r3, [r3, #0]
 8010670:	2b1f      	cmp	r3, #31
 8010672:	d903      	bls.n	801067c <get_ldnumber+0x34>
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	781b      	ldrb	r3, [r3, #0]
 8010678:	2b3a      	cmp	r3, #58	@ 0x3a
 801067a:	d1f4      	bne.n	8010666 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801067c:	697b      	ldr	r3, [r7, #20]
 801067e:	781b      	ldrb	r3, [r3, #0]
 8010680:	2b3a      	cmp	r3, #58	@ 0x3a
 8010682:	d11c      	bne.n	80106be <get_ldnumber+0x76>
			tp = *path;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	1c5a      	adds	r2, r3, #1
 801068e:	60fa      	str	r2, [r7, #12]
 8010690:	781b      	ldrb	r3, [r3, #0]
 8010692:	3b30      	subs	r3, #48	@ 0x30
 8010694:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	2b09      	cmp	r3, #9
 801069a:	d80e      	bhi.n	80106ba <get_ldnumber+0x72>
 801069c:	68fa      	ldr	r2, [r7, #12]
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	429a      	cmp	r2, r3
 80106a2:	d10a      	bne.n	80106ba <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80106a4:	68bb      	ldr	r3, [r7, #8]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d107      	bne.n	80106ba <get_ldnumber+0x72>
					vol = (int)i;
 80106aa:	68bb      	ldr	r3, [r7, #8]
 80106ac:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80106ae:	697b      	ldr	r3, [r7, #20]
 80106b0:	3301      	adds	r3, #1
 80106b2:	617b      	str	r3, [r7, #20]
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	697a      	ldr	r2, [r7, #20]
 80106b8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80106ba:	693b      	ldr	r3, [r7, #16]
 80106bc:	e002      	b.n	80106c4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80106be:	2300      	movs	r3, #0
 80106c0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80106c2:	693b      	ldr	r3, [r7, #16]
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	371c      	adds	r7, #28
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bc80      	pop	{r7}
 80106cc:	4770      	bx	lr
	...

080106d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b082      	sub	sp, #8
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	2200      	movs	r2, #0
 80106de:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	f04f 32ff 	mov.w	r2, #4294967295
 80106e8:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80106ec:	6839      	ldr	r1, [r7, #0]
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	f7fe fc0f 	bl	800ef12 <move_window>
 80106f4:	4603      	mov	r3, r0
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d001      	beq.n	80106fe <check_fs+0x2e>
		return 3;
 80106fa:	2303      	movs	r3, #3
 80106fc:	e04a      	b.n	8010794 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010704:	3301      	adds	r3, #1
 8010706:	781b      	ldrb	r3, [r3, #0]
 8010708:	021b      	lsls	r3, r3, #8
 801070a:	b21a      	sxth	r2, r3
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8010712:	b21b      	sxth	r3, r3
 8010714:	4313      	orrs	r3, r2
 8010716:	b21b      	sxth	r3, r3
 8010718:	4a20      	ldr	r2, [pc, #128]	@ (801079c <check_fs+0xcc>)
 801071a:	4293      	cmp	r3, r2
 801071c:	d001      	beq.n	8010722 <check_fs+0x52>
		return 2;
 801071e:	2302      	movs	r3, #2
 8010720:	e038      	b.n	8010794 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	3336      	adds	r3, #54	@ 0x36
 8010726:	3303      	adds	r3, #3
 8010728:	781b      	ldrb	r3, [r3, #0]
 801072a:	061a      	lsls	r2, r3, #24
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	3336      	adds	r3, #54	@ 0x36
 8010730:	3302      	adds	r3, #2
 8010732:	781b      	ldrb	r3, [r3, #0]
 8010734:	041b      	lsls	r3, r3, #16
 8010736:	431a      	orrs	r2, r3
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	3336      	adds	r3, #54	@ 0x36
 801073c:	3301      	adds	r3, #1
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	021b      	lsls	r3, r3, #8
 8010742:	4313      	orrs	r3, r2
 8010744:	687a      	ldr	r2, [r7, #4]
 8010746:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 801074a:	4313      	orrs	r3, r2
 801074c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010750:	4a13      	ldr	r2, [pc, #76]	@ (80107a0 <check_fs+0xd0>)
 8010752:	4293      	cmp	r3, r2
 8010754:	d101      	bne.n	801075a <check_fs+0x8a>
		return 0;
 8010756:	2300      	movs	r3, #0
 8010758:	e01c      	b.n	8010794 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	3352      	adds	r3, #82	@ 0x52
 801075e:	3303      	adds	r3, #3
 8010760:	781b      	ldrb	r3, [r3, #0]
 8010762:	061a      	lsls	r2, r3, #24
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	3352      	adds	r3, #82	@ 0x52
 8010768:	3302      	adds	r3, #2
 801076a:	781b      	ldrb	r3, [r3, #0]
 801076c:	041b      	lsls	r3, r3, #16
 801076e:	431a      	orrs	r2, r3
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	3352      	adds	r3, #82	@ 0x52
 8010774:	3301      	adds	r3, #1
 8010776:	781b      	ldrb	r3, [r3, #0]
 8010778:	021b      	lsls	r3, r3, #8
 801077a:	4313      	orrs	r3, r2
 801077c:	687a      	ldr	r2, [r7, #4]
 801077e:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8010782:	4313      	orrs	r3, r2
 8010784:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010788:	4a05      	ldr	r2, [pc, #20]	@ (80107a0 <check_fs+0xd0>)
 801078a:	4293      	cmp	r3, r2
 801078c:	d101      	bne.n	8010792 <check_fs+0xc2>
		return 0;
 801078e:	2300      	movs	r3, #0
 8010790:	e000      	b.n	8010794 <check_fs+0xc4>

	return 1;
 8010792:	2301      	movs	r3, #1
}
 8010794:	4618      	mov	r0, r3
 8010796:	3708      	adds	r7, #8
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}
 801079c:	ffffaa55 	.word	0xffffaa55
 80107a0:	00544146 	.word	0x00544146

080107a4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b096      	sub	sp, #88	@ 0x58
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	60f8      	str	r0, [r7, #12]
 80107ac:	60b9      	str	r1, [r7, #8]
 80107ae:	4613      	mov	r3, r2
 80107b0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	2200      	movs	r2, #0
 80107b6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80107b8:	68b8      	ldr	r0, [r7, #8]
 80107ba:	f7ff ff45 	bl	8010648 <get_ldnumber>
 80107be:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80107c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	da01      	bge.n	80107ca <find_volume+0x26>
 80107c6:	230b      	movs	r3, #11
 80107c8:	e2b0      	b.n	8010d2c <find_volume+0x588>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80107ca:	4aa1      	ldr	r2, [pc, #644]	@ (8010a50 <find_volume+0x2ac>)
 80107cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80107d2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80107d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d101      	bne.n	80107de <find_volume+0x3a>
 80107da:	230c      	movs	r3, #12
 80107dc:	e2a6      	b.n	8010d2c <find_volume+0x588>

	ENTER_FF(fs);						/* Lock the volume */
 80107de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80107e0:	f7fe f9b0 	bl	800eb44 <lock_fs>
 80107e4:	4603      	mov	r3, r0
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d101      	bne.n	80107ee <find_volume+0x4a>
 80107ea:	230f      	movs	r3, #15
 80107ec:	e29e      	b.n	8010d2c <find_volume+0x588>
	*rfs = fs;							/* Return pointer to the file system object */
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80107f2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80107f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107f6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d01b      	beq.n	8010836 <find_volume+0x92>
		stat = disk_status(fs->drv);
 80107fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010800:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8010804:	4618      	mov	r0, r3
 8010806:	f7fe f887 	bl	800e918 <disk_status>
 801080a:	4603      	mov	r3, r0
 801080c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010810:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010814:	f003 0301 	and.w	r3, r3, #1
 8010818:	2b00      	cmp	r3, #0
 801081a:	d10c      	bne.n	8010836 <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 801081c:	79fb      	ldrb	r3, [r7, #7]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d007      	beq.n	8010832 <find_volume+0x8e>
 8010822:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010826:	f003 0304 	and.w	r3, r3, #4
 801082a:	2b00      	cmp	r3, #0
 801082c:	d001      	beq.n	8010832 <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 801082e:	230a      	movs	r3, #10
 8010830:	e27c      	b.n	8010d2c <find_volume+0x588>
			return FR_OK;				/* The file system object is valid */
 8010832:	2300      	movs	r3, #0
 8010834:	e27a      	b.n	8010d2c <find_volume+0x588>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010838:	2200      	movs	r2, #0
 801083a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801083e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010840:	b2da      	uxtb	r2, r3
 8010842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010844:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801084a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801084e:	4618      	mov	r0, r3
 8010850:	f7fe f87c 	bl	800e94c <disk_initialize>
 8010854:	4603      	mov	r3, r0
 8010856:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 801085a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801085e:	f003 0301 	and.w	r3, r3, #1
 8010862:	2b00      	cmp	r3, #0
 8010864:	d001      	beq.n	801086a <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010866:	2303      	movs	r3, #3
 8010868:	e260      	b.n	8010d2c <find_volume+0x588>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 801086a:	79fb      	ldrb	r3, [r7, #7]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d007      	beq.n	8010880 <find_volume+0xdc>
 8010870:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010874:	f003 0304 	and.w	r3, r3, #4
 8010878:	2b00      	cmp	r3, #0
 801087a:	d001      	beq.n	8010880 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 801087c:	230a      	movs	r3, #10
 801087e:	e255      	b.n	8010d2c <find_volume+0x588>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8010880:	2300      	movs	r3, #0
 8010882:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8010884:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010886:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010888:	f7ff ff22 	bl	80106d0 <check_fs>
 801088c:	4603      	mov	r3, r0
 801088e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8010892:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010896:	2b01      	cmp	r3, #1
 8010898:	d153      	bne.n	8010942 <find_volume+0x19e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 801089a:	2300      	movs	r3, #0
 801089c:	643b      	str	r3, [r7, #64]	@ 0x40
 801089e:	e028      	b.n	80108f2 <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80108a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80108a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80108a4:	011b      	lsls	r3, r3, #4
 80108a6:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80108aa:	4413      	add	r3, r2
 80108ac:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80108ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108b0:	3304      	adds	r3, #4
 80108b2:	781b      	ldrb	r3, [r3, #0]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d012      	beq.n	80108de <find_volume+0x13a>
 80108b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108ba:	330b      	adds	r3, #11
 80108bc:	781b      	ldrb	r3, [r3, #0]
 80108be:	061a      	lsls	r2, r3, #24
 80108c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108c2:	330a      	adds	r3, #10
 80108c4:	781b      	ldrb	r3, [r3, #0]
 80108c6:	041b      	lsls	r3, r3, #16
 80108c8:	431a      	orrs	r2, r3
 80108ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108cc:	3309      	adds	r3, #9
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	021b      	lsls	r3, r3, #8
 80108d2:	4313      	orrs	r3, r2
 80108d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108d6:	3208      	adds	r2, #8
 80108d8:	7812      	ldrb	r2, [r2, #0]
 80108da:	431a      	orrs	r2, r3
 80108dc:	e000      	b.n	80108e0 <find_volume+0x13c>
 80108de:	2200      	movs	r2, #0
 80108e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80108e2:	009b      	lsls	r3, r3, #2
 80108e4:	3358      	adds	r3, #88	@ 0x58
 80108e6:	443b      	add	r3, r7
 80108e8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80108ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80108ee:	3301      	adds	r3, #1
 80108f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80108f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80108f4:	2b03      	cmp	r3, #3
 80108f6:	d9d3      	bls.n	80108a0 <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80108f8:	2300      	movs	r3, #0
 80108fa:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80108fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d002      	beq.n	8010908 <find_volume+0x164>
 8010902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010904:	3b01      	subs	r3, #1
 8010906:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8010908:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801090a:	009b      	lsls	r3, r3, #2
 801090c:	3358      	adds	r3, #88	@ 0x58
 801090e:	443b      	add	r3, r7
 8010910:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010914:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8010916:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010918:	2b00      	cmp	r3, #0
 801091a:	d005      	beq.n	8010928 <find_volume+0x184>
 801091c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801091e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010920:	f7ff fed6 	bl	80106d0 <check_fs>
 8010924:	4603      	mov	r3, r0
 8010926:	e000      	b.n	801092a <find_volume+0x186>
 8010928:	2302      	movs	r3, #2
 801092a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 801092e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010932:	2b00      	cmp	r3, #0
 8010934:	d005      	beq.n	8010942 <find_volume+0x19e>
 8010936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010938:	3301      	adds	r3, #1
 801093a:	643b      	str	r3, [r7, #64]	@ 0x40
 801093c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801093e:	2b03      	cmp	r3, #3
 8010940:	d9e2      	bls.n	8010908 <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010942:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010946:	2b03      	cmp	r3, #3
 8010948:	d101      	bne.n	801094e <find_volume+0x1aa>
 801094a:	2301      	movs	r3, #1
 801094c:	e1ee      	b.n	8010d2c <find_volume+0x588>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 801094e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010952:	2b00      	cmp	r3, #0
 8010954:	d001      	beq.n	801095a <find_volume+0x1b6>
 8010956:	230d      	movs	r3, #13
 8010958:	e1e8      	b.n	8010d2c <find_volume+0x588>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801095a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801095c:	7b1b      	ldrb	r3, [r3, #12]
 801095e:	021b      	lsls	r3, r3, #8
 8010960:	b21a      	sxth	r2, r3
 8010962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010964:	7adb      	ldrb	r3, [r3, #11]
 8010966:	b21b      	sxth	r3, r3
 8010968:	4313      	orrs	r3, r2
 801096a:	b21b      	sxth	r3, r3
 801096c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010970:	d001      	beq.n	8010976 <find_volume+0x1d2>
		return FR_NO_FILESYSTEM;
 8010972:	230d      	movs	r3, #13
 8010974:	e1da      	b.n	8010d2c <find_volume+0x588>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8010976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010978:	7ddb      	ldrb	r3, [r3, #23]
 801097a:	021b      	lsls	r3, r3, #8
 801097c:	b21a      	sxth	r2, r3
 801097e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010980:	7d9b      	ldrb	r3, [r3, #22]
 8010982:	b21b      	sxth	r3, r3
 8010984:	4313      	orrs	r3, r2
 8010986:	b21b      	sxth	r3, r3
 8010988:	b29b      	uxth	r3, r3
 801098a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 801098c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801098e:	2b00      	cmp	r3, #0
 8010990:	d112      	bne.n	80109b8 <find_volume+0x214>
 8010992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010994:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8010998:	061a      	lsls	r2, r3, #24
 801099a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801099c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80109a0:	041b      	lsls	r3, r3, #16
 80109a2:	431a      	orrs	r2, r3
 80109a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109a6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80109aa:	021b      	lsls	r3, r3, #8
 80109ac:	4313      	orrs	r3, r2
 80109ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80109b0:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 80109b4:	4313      	orrs	r3, r2
 80109b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 80109b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80109bc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80109c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109c2:	7c1a      	ldrb	r2, [r3, #16]
 80109c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109c6:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80109ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109cc:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 80109d0:	2b01      	cmp	r3, #1
 80109d2:	d006      	beq.n	80109e2 <find_volume+0x23e>
 80109d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109d6:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 80109da:	2b02      	cmp	r3, #2
 80109dc:	d001      	beq.n	80109e2 <find_volume+0x23e>
		return FR_NO_FILESYSTEM;
 80109de:	230d      	movs	r3, #13
 80109e0:	e1a4      	b.n	8010d2c <find_volume+0x588>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80109e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109e4:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 80109e8:	461a      	mov	r2, r3
 80109ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109ec:	fb02 f303 	mul.w	r3, r2, r3
 80109f0:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80109f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109f4:	7b5a      	ldrb	r2, [r3, #13]
 80109f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109f8:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80109fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109fe:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d00a      	beq.n	8010a1c <find_volume+0x278>
 8010a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a08:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8010a0c:	461a      	mov	r2, r3
 8010a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a10:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8010a14:	3b01      	subs	r3, #1
 8010a16:	4013      	ands	r3, r2
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d001      	beq.n	8010a20 <find_volume+0x27c>
		return FR_NO_FILESYSTEM;
 8010a1c:	230d      	movs	r3, #13
 8010a1e:	e185      	b.n	8010d2c <find_volume+0x588>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8010a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a22:	7c9b      	ldrb	r3, [r3, #18]
 8010a24:	021b      	lsls	r3, r3, #8
 8010a26:	b21a      	sxth	r2, r3
 8010a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a2a:	7c5b      	ldrb	r3, [r3, #17]
 8010a2c:	b21b      	sxth	r3, r3
 8010a2e:	4313      	orrs	r3, r2
 8010a30:	b21b      	sxth	r3, r3
 8010a32:	b29a      	uxth	r2, r3
 8010a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a36:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8010a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a3c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8010a40:	f003 030f 	and.w	r3, r3, #15
 8010a44:	b29b      	uxth	r3, r3
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d004      	beq.n	8010a54 <find_volume+0x2b0>
		return FR_NO_FILESYSTEM;
 8010a4a:	230d      	movs	r3, #13
 8010a4c:	e16e      	b.n	8010d2c <find_volume+0x588>
 8010a4e:	bf00      	nop
 8010a50:	20001308 	.word	0x20001308

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8010a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a56:	7d1b      	ldrb	r3, [r3, #20]
 8010a58:	021b      	lsls	r3, r3, #8
 8010a5a:	b21a      	sxth	r2, r3
 8010a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a5e:	7cdb      	ldrb	r3, [r3, #19]
 8010a60:	b21b      	sxth	r3, r3
 8010a62:	4313      	orrs	r3, r2
 8010a64:	b21b      	sxth	r3, r3
 8010a66:	b29b      	uxth	r3, r3
 8010a68:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8010a6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d112      	bne.n	8010a96 <find_volume+0x2f2>
 8010a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a72:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8010a76:	061a      	lsls	r2, r3, #24
 8010a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a7a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8010a7e:	041b      	lsls	r3, r3, #16
 8010a80:	431a      	orrs	r2, r3
 8010a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a84:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8010a88:	021b      	lsls	r3, r3, #8
 8010a8a:	4313      	orrs	r3, r2
 8010a8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010a8e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8010a92:	4313      	orrs	r3, r2
 8010a94:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8010a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a98:	7bdb      	ldrb	r3, [r3, #15]
 8010a9a:	021b      	lsls	r3, r3, #8
 8010a9c:	b21a      	sxth	r2, r3
 8010a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aa0:	7b9b      	ldrb	r3, [r3, #14]
 8010aa2:	b21b      	sxth	r3, r3
 8010aa4:	4313      	orrs	r3, r2
 8010aa6:	b21b      	sxth	r3, r3
 8010aa8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8010aaa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d101      	bne.n	8010ab4 <find_volume+0x310>
 8010ab0:	230d      	movs	r3, #13
 8010ab2:	e13b      	b.n	8010d2c <find_volume+0x588>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8010ab4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010ab6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ab8:	4413      	add	r3, r2
 8010aba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010abc:	f8b2 2208 	ldrh.w	r2, [r2, #520]	@ 0x208
 8010ac0:	0912      	lsrs	r2, r2, #4
 8010ac2:	b292      	uxth	r2, r2
 8010ac4:	4413      	add	r3, r2
 8010ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010ac8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010acc:	429a      	cmp	r2, r3
 8010ace:	d201      	bcs.n	8010ad4 <find_volume+0x330>
 8010ad0:	230d      	movs	r3, #13
 8010ad2:	e12b      	b.n	8010d2c <find_volume+0x588>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8010ad4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ad8:	1ad3      	subs	r3, r2, r3
 8010ada:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010adc:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8010ae0:	fbb3 f3f2 	udiv	r3, r3, r2
 8010ae4:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8010ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d101      	bne.n	8010af0 <find_volume+0x34c>
 8010aec:	230d      	movs	r3, #13
 8010aee:	e11d      	b.n	8010d2c <find_volume+0x588>
	fmt = FS_FAT12;
 8010af0:	2301      	movs	r3, #1
 8010af2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8010af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010af8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010afc:	4293      	cmp	r3, r2
 8010afe:	d902      	bls.n	8010b06 <find_volume+0x362>
 8010b00:	2302      	movs	r3, #2
 8010b02:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8010b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b08:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010b0c:	4293      	cmp	r3, r2
 8010b0e:	d902      	bls.n	8010b16 <find_volume+0x372>
 8010b10:	2303      	movs	r3, #3
 8010b12:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8010b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b18:	1c9a      	adds	r2, r3, #2
 8010b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b1c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
	fs->volbase = bsect;								/* Volume start sector */
 8010b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b22:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010b24:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8010b28:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010b2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b2c:	441a      	add	r2, r3
 8010b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b30:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 8010b34:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b38:	441a      	add	r2, r3
 8010b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b3c:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
	if (fmt == FS_FAT32) {
 8010b40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010b44:	2b03      	cmp	r3, #3
 8010b46:	d121      	bne.n	8010b8c <find_volume+0x3e8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8010b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b4a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d001      	beq.n	8010b56 <find_volume+0x3b2>
 8010b52:	230d      	movs	r3, #13
 8010b54:	e0ea      	b.n	8010d2c <find_volume+0x588>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8010b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b58:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010b5c:	061a      	lsls	r2, r3, #24
 8010b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b60:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8010b64:	041b      	lsls	r3, r3, #16
 8010b66:	431a      	orrs	r2, r3
 8010b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b6a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010b6e:	021b      	lsls	r3, r3, #8
 8010b70:	4313      	orrs	r3, r2
 8010b72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010b74:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8010b78:	431a      	orrs	r2, r3
 8010b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b7c:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8010b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b82:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010b86:	009b      	lsls	r3, r3, #2
 8010b88:	647b      	str	r3, [r7, #68]	@ 0x44
 8010b8a:	e025      	b.n	8010bd8 <find_volume+0x434>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8010b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b8e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d101      	bne.n	8010b9a <find_volume+0x3f6>
 8010b96:	230d      	movs	r3, #13
 8010b98:	e0c8      	b.n	8010d2c <find_volume+0x588>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8010b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b9c:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 8010ba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ba2:	441a      	add	r2, r3
 8010ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ba6:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010baa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010bae:	2b02      	cmp	r3, #2
 8010bb0:	d104      	bne.n	8010bbc <find_volume+0x418>
 8010bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bb4:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010bb8:	005b      	lsls	r3, r3, #1
 8010bba:	e00c      	b.n	8010bd6 <find_volume+0x432>
 8010bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bbe:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8010bc2:	4613      	mov	r3, r2
 8010bc4:	005b      	lsls	r3, r3, #1
 8010bc6:	4413      	add	r3, r2
 8010bc8:	085a      	lsrs	r2, r3, #1
 8010bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bcc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8010bd0:	f003 0301 	and.w	r3, r3, #1
 8010bd4:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8010bd6:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8010bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bda:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8010bde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010be0:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8010be4:	0a5b      	lsrs	r3, r3, #9
 8010be6:	429a      	cmp	r2, r3
 8010be8:	d201      	bcs.n	8010bee <find_volume+0x44a>
		return FR_NO_FILESYSTEM;
 8010bea:	230d      	movs	r3, #13
 8010bec:	e09e      	b.n	8010d2c <find_volume+0x588>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8010bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8010bf4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8010bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bfa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8010bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c00:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8010c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c06:	2280      	movs	r2, #128	@ 0x80
 8010c08:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8010c0c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010c10:	2b03      	cmp	r3, #3
 8010c12:	d177      	bne.n	8010d04 <find_volume+0x560>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8010c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c16:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010c1a:	021b      	lsls	r3, r3, #8
 8010c1c:	b21a      	sxth	r2, r3
 8010c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010c24:	b21b      	sxth	r3, r3
 8010c26:	4313      	orrs	r3, r2
 8010c28:	b21b      	sxth	r3, r3
 8010c2a:	2b01      	cmp	r3, #1
 8010c2c:	d16a      	bne.n	8010d04 <find_volume+0x560>
		&& move_window(fs, bsect + 1) == FR_OK)
 8010c2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c30:	3301      	adds	r3, #1
 8010c32:	4619      	mov	r1, r3
 8010c34:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010c36:	f7fe f96c 	bl	800ef12 <move_window>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d161      	bne.n	8010d04 <find_volume+0x560>
	{
		fs->fsi_flag = 0;
 8010c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c42:	2200      	movs	r2, #0
 8010c44:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c4a:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8010c4e:	021b      	lsls	r3, r3, #8
 8010c50:	b21a      	sxth	r2, r3
 8010c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c54:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8010c58:	b21b      	sxth	r3, r3
 8010c5a:	4313      	orrs	r3, r2
 8010c5c:	b21b      	sxth	r3, r3
 8010c5e:	4a35      	ldr	r2, [pc, #212]	@ (8010d34 <find_volume+0x590>)
 8010c60:	4293      	cmp	r3, r2
 8010c62:	d14f      	bne.n	8010d04 <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8010c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c66:	78db      	ldrb	r3, [r3, #3]
 8010c68:	061a      	lsls	r2, r3, #24
 8010c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c6c:	789b      	ldrb	r3, [r3, #2]
 8010c6e:	041b      	lsls	r3, r3, #16
 8010c70:	431a      	orrs	r2, r3
 8010c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c74:	785b      	ldrb	r3, [r3, #1]
 8010c76:	021b      	lsls	r3, r3, #8
 8010c78:	4313      	orrs	r3, r2
 8010c7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010c7c:	7812      	ldrb	r2, [r2, #0]
 8010c7e:	4313      	orrs	r3, r2
 8010c80:	4a2d      	ldr	r2, [pc, #180]	@ (8010d38 <find_volume+0x594>)
 8010c82:	4293      	cmp	r3, r2
 8010c84:	d13e      	bne.n	8010d04 <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8010c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c88:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 8010c8c:	061a      	lsls	r2, r3, #24
 8010c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c90:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 8010c94:	041b      	lsls	r3, r3, #16
 8010c96:	431a      	orrs	r2, r3
 8010c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c9a:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 8010c9e:	021b      	lsls	r3, r3, #8
 8010ca0:	4313      	orrs	r3, r2
 8010ca2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010ca4:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8010ca8:	4313      	orrs	r3, r2
 8010caa:	4a24      	ldr	r2, [pc, #144]	@ (8010d3c <find_volume+0x598>)
 8010cac:	4293      	cmp	r3, r2
 8010cae:	d129      	bne.n	8010d04 <find_volume+0x560>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8010cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cb2:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 8010cb6:	061a      	lsls	r2, r3, #24
 8010cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cba:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 8010cbe:	041b      	lsls	r3, r3, #16
 8010cc0:	431a      	orrs	r2, r3
 8010cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cc4:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8010cc8:	021b      	lsls	r3, r3, #8
 8010cca:	4313      	orrs	r3, r2
 8010ccc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010cce:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 8010cd2:	431a      	orrs	r2, r3
 8010cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cd6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8010cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cdc:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 8010ce0:	061a      	lsls	r2, r3, #24
 8010ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ce4:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 8010ce8:	041b      	lsls	r3, r3, #16
 8010cea:	431a      	orrs	r2, r3
 8010cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cee:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 8010cf2:	021b      	lsls	r3, r3, #8
 8010cf4:	4313      	orrs	r3, r2
 8010cf6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010cf8:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 8010cfc:	431a      	orrs	r2, r3
 8010cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d00:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8010d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d06:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8010d0a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8010d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8010d40 <find_volume+0x59c>)
 8010d10:	881b      	ldrh	r3, [r3, #0]
 8010d12:	3301      	adds	r3, #1
 8010d14:	b29a      	uxth	r2, r3
 8010d16:	4b0a      	ldr	r3, [pc, #40]	@ (8010d40 <find_volume+0x59c>)
 8010d18:	801a      	strh	r2, [r3, #0]
 8010d1a:	4b09      	ldr	r3, [pc, #36]	@ (8010d40 <find_volume+0x59c>)
 8010d1c:	881a      	ldrh	r2, [r3, #0]
 8010d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d20:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8010d24:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010d26:	f7fe f881 	bl	800ee2c <clear_lock>
#endif

	return FR_OK;
 8010d2a:	2300      	movs	r3, #0
}
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	3758      	adds	r7, #88	@ 0x58
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}
 8010d34:	ffffaa55 	.word	0xffffaa55
 8010d38:	41615252 	.word	0x41615252
 8010d3c:	61417272 	.word	0x61417272
 8010d40:	2000130c 	.word	0x2000130c

08010d44 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b084      	sub	sp, #16
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d022      	beq.n	8010d9c <validate+0x58>
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d01d      	beq.n	8010d9c <validate+0x58>
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010d66:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d016      	beq.n	8010d9c <validate+0x58>
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010d74:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8010d7e:	429a      	cmp	r2, r3
 8010d80:	d10c      	bne.n	8010d9c <validate+0x58>
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010d88:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	f7fd fdc3 	bl	800e918 <disk_status>
 8010d92:	4603      	mov	r3, r0
 8010d94:	f003 0301 	and.w	r3, r3, #1
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d001      	beq.n	8010da0 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8010d9c:	2309      	movs	r3, #9
 8010d9e:	e00b      	b.n	8010db8 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7fd fecc 	bl	800eb44 <lock_fs>
 8010dac:	4603      	mov	r3, r0
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d101      	bne.n	8010db6 <validate+0x72>
 8010db2:	230f      	movs	r3, #15
 8010db4:	e000      	b.n	8010db8 <validate+0x74>

	return FR_OK;
 8010db6:	2300      	movs	r3, #0
}
 8010db8:	4618      	mov	r0, r3
 8010dba:	3710      	adds	r7, #16
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	bd80      	pop	{r7, pc}

08010dc0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b088      	sub	sp, #32
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	60f8      	str	r0, [r7, #12]
 8010dc8:	60b9      	str	r1, [r7, #8]
 8010dca:	4613      	mov	r3, r2
 8010dcc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010dce:	68bb      	ldr	r3, [r7, #8]
 8010dd0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8010dd2:	f107 0310 	add.w	r3, r7, #16
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	f7ff fc36 	bl	8010648 <get_ldnumber>
 8010ddc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010dde:	69fb      	ldr	r3, [r7, #28]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	da01      	bge.n	8010de8 <f_mount+0x28>
 8010de4:	230b      	movs	r3, #11
 8010de6:	e04c      	b.n	8010e82 <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010de8:	4a28      	ldr	r2, [pc, #160]	@ (8010e8c <f_mount+0xcc>)
 8010dea:	69fb      	ldr	r3, [r7, #28]
 8010dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010df0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010df2:	69bb      	ldr	r3, [r7, #24]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d011      	beq.n	8010e1c <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 8010df8:	69b8      	ldr	r0, [r7, #24]
 8010dfa:	f7fe f817 	bl	800ee2c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8010dfe:	69bb      	ldr	r3, [r7, #24]
 8010e00:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8010e04:	4618      	mov	r0, r3
 8010e06:	f001 faa1 	bl	801234c <ff_del_syncobj>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d101      	bne.n	8010e14 <f_mount+0x54>
 8010e10:	2302      	movs	r3, #2
 8010e12:	e036      	b.n	8010e82 <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010e14:	69bb      	ldr	r3, [r7, #24]
 8010e16:	2200      	movs	r2, #0
 8010e18:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	}

	if (fs) {
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d011      	beq.n	8010e46 <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	2200      	movs	r2, #0
 8010e26:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8010e2a:	69fb      	ldr	r3, [r7, #28]
 8010e2c:	b2da      	uxtb	r2, r3
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8010e34:	4619      	mov	r1, r3
 8010e36:	4610      	mov	r0, r2
 8010e38:	f001 fa68 	bl	801230c <ff_cre_syncobj>
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d101      	bne.n	8010e46 <f_mount+0x86>
 8010e42:	2302      	movs	r3, #2
 8010e44:	e01d      	b.n	8010e82 <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010e46:	68fa      	ldr	r2, [r7, #12]
 8010e48:	4910      	ldr	r1, [pc, #64]	@ (8010e8c <f_mount+0xcc>)
 8010e4a:	69fb      	ldr	r3, [r7, #28]
 8010e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d002      	beq.n	8010e5c <f_mount+0x9c>
 8010e56:	79fb      	ldrb	r3, [r7, #7]
 8010e58:	2b01      	cmp	r3, #1
 8010e5a:	d001      	beq.n	8010e60 <f_mount+0xa0>
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	e010      	b.n	8010e82 <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8010e60:	f107 0108 	add.w	r1, r7, #8
 8010e64:	f107 030c 	add.w	r3, r7, #12
 8010e68:	2200      	movs	r2, #0
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	f7ff fc9a 	bl	80107a4 <find_volume>
 8010e70:	4603      	mov	r3, r0
 8010e72:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	7dfa      	ldrb	r2, [r7, #23]
 8010e78:	4611      	mov	r1, r2
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f7fd fe71 	bl	800eb62 <unlock_fs>
 8010e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3720      	adds	r7, #32
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}
 8010e8a:	bf00      	nop
 8010e8c:	20001308 	.word	0x20001308

08010e90 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	f5ad 6d8b 	sub.w	sp, sp, #1112	@ 0x458
 8010e96:	af00      	add	r7, sp, #0
 8010e98:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010e9c:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010ea0:	6018      	str	r0, [r3, #0]
 8010ea2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010ea6:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8010eaa:	6019      	str	r1, [r3, #0]
 8010eac:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010eb0:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8010eb4:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8010eb6:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010eba:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d101      	bne.n	8010ec8 <f_open+0x38>
 8010ec4:	2309      	movs	r3, #9
 8010ec6:	e267      	b.n	8011398 <f_open+0x508>
	fp->fs = 0;			/* Clear file object */
 8010ec8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010ecc:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8010ed8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010edc:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8010ee0:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8010ee4:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 8010ee8:	7812      	ldrb	r2, [r2, #0]
 8010eea:	f002 021f 	and.w	r2, r2, #31
 8010eee:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8010ef0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010ef4:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8010ef8:	781b      	ldrb	r3, [r3, #0]
 8010efa:	f023 0301 	bic.w	r3, r3, #1
 8010efe:	b2da      	uxtb	r2, r3
 8010f00:	f107 0108 	add.w	r1, r7, #8
 8010f04:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8010f08:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f7ff fc49 	bl	80107a4 <find_volume>
 8010f12:	4603      	mov	r3, r0
 8010f14:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8010f18:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	f040 822d 	bne.w	801137c <f_open+0x4ec>
		INIT_BUF(dj);
 8010f22:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010f26:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8010f2a:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 8010f2e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
 8010f32:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010f36:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8010f3a:	f107 0214 	add.w	r2, r7, #20
 8010f3e:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
		res = follow_path(&dj, path);	/* Follow the file path */
 8010f42:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010f46:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8010f4a:	681a      	ldr	r2, [r3, #0]
 8010f4c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8010f50:	4611      	mov	r1, r2
 8010f52:	4618      	mov	r0, r3
 8010f54:	f7ff fb0a 	bl	801056c <follow_path>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
		dir = dj.dir;
 8010f5e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010f62:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8010f66:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010f6a:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010f6e:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d11b      	bne.n	8010fae <f_open+0x11e>
			if (!dir)	/* Default directory itself */
 8010f76:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d103      	bne.n	8010f86 <f_open+0xf6>
				res = FR_INVALID_NAME;
 8010f7e:	2306      	movs	r3, #6
 8010f80:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 8010f84:	e013      	b.n	8010fae <f_open+0x11e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010f86:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010f8a:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8010f8e:	781b      	ldrb	r3, [r3, #0]
 8010f90:	2b01      	cmp	r3, #1
 8010f92:	bf8c      	ite	hi
 8010f94:	2301      	movhi	r3, #1
 8010f96:	2300      	movls	r3, #0
 8010f98:	b2db      	uxtb	r3, r3
 8010f9a:	461a      	mov	r2, r3
 8010f9c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8010fa0:	4611      	mov	r1, r2
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f7fd fdfc 	bl	800eba0 <chk_lock>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010fae:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010fb2:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8010fb6:	781b      	ldrb	r3, [r3, #0]
 8010fb8:	f003 031c 	and.w	r3, r3, #28
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	f000 80e6 	beq.w	801118e <f_open+0x2fe>
			if (res != FR_OK) {					/* No file, create new */
 8010fc2:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d027      	beq.n	801101a <f_open+0x18a>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8010fca:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 8010fce:	2b04      	cmp	r3, #4
 8010fd0:	d10e      	bne.n	8010ff0 <f_open+0x160>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010fd2:	f7fd fe51 	bl	800ec78 <enq_lock>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d006      	beq.n	8010fea <f_open+0x15a>
 8010fdc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7fe fffd 	bl	800ffe0 <dir_register>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	e000      	b.n	8010fec <f_open+0x15c>
 8010fea:	2312      	movs	r3, #18
 8010fec:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010ff0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8010ff4:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8010ff8:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8010ffc:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 8011000:	7812      	ldrb	r2, [r2, #0]
 8011002:	f042 0208 	orr.w	r2, r2, #8
 8011006:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8011008:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801100c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8011010:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011014:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
 8011018:	e017      	b.n	801104a <f_open+0x1ba>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801101a:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 801101e:	330b      	adds	r3, #11
 8011020:	781b      	ldrb	r3, [r3, #0]
 8011022:	f003 0311 	and.w	r3, r3, #17
 8011026:	2b00      	cmp	r3, #0
 8011028:	d003      	beq.n	8011032 <f_open+0x1a2>
					res = FR_DENIED;
 801102a:	2307      	movs	r3, #7
 801102c:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 8011030:	e00b      	b.n	801104a <f_open+0x1ba>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8011032:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011036:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 801103a:	781b      	ldrb	r3, [r3, #0]
 801103c:	f003 0304 	and.w	r3, r3, #4
 8011040:	2b00      	cmp	r3, #0
 8011042:	d002      	beq.n	801104a <f_open+0x1ba>
						res = FR_EXIST;
 8011044:	2308      	movs	r3, #8
 8011046:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801104a:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 801104e:	2b00      	cmp	r3, #0
 8011050:	f040 80c1 	bne.w	80111d6 <f_open+0x346>
 8011054:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011058:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 801105c:	781b      	ldrb	r3, [r3, #0]
 801105e:	f003 0308 	and.w	r3, r3, #8
 8011062:	2b00      	cmp	r3, #0
 8011064:	f000 80b7 	beq.w	80111d6 <f_open+0x346>
				dw = GET_FATTIME();				/* Created time */
 8011068:	f7fd fbd0 	bl	800e80c <get_fattime>
 801106c:	f8c7 044c 	str.w	r0, [r7, #1100]	@ 0x44c
				ST_DWORD(dir + DIR_CrtTime, dw);
 8011070:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8011074:	330e      	adds	r3, #14
 8011076:	f8d7 244c 	ldr.w	r2, [r7, #1100]	@ 0x44c
 801107a:	b2d2      	uxtb	r2, r2
 801107c:	701a      	strb	r2, [r3, #0]
 801107e:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8011082:	b29b      	uxth	r3, r3
 8011084:	0a1b      	lsrs	r3, r3, #8
 8011086:	b29a      	uxth	r2, r3
 8011088:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 801108c:	330f      	adds	r3, #15
 801108e:	b2d2      	uxtb	r2, r2
 8011090:	701a      	strb	r2, [r3, #0]
 8011092:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8011096:	0c1a      	lsrs	r2, r3, #16
 8011098:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 801109c:	3310      	adds	r3, #16
 801109e:	b2d2      	uxtb	r2, r2
 80110a0:	701a      	strb	r2, [r3, #0]
 80110a2:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 80110a6:	0e1a      	lsrs	r2, r3, #24
 80110a8:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80110ac:	3311      	adds	r3, #17
 80110ae:	b2d2      	uxtb	r2, r2
 80110b0:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80110b2:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80110b6:	330b      	adds	r3, #11
 80110b8:	2200      	movs	r2, #0
 80110ba:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80110bc:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80110c0:	331c      	adds	r3, #28
 80110c2:	2200      	movs	r2, #0
 80110c4:	701a      	strb	r2, [r3, #0]
 80110c6:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80110ca:	331d      	adds	r3, #29
 80110cc:	2200      	movs	r2, #0
 80110ce:	701a      	strb	r2, [r3, #0]
 80110d0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80110d4:	331e      	adds	r3, #30
 80110d6:	2200      	movs	r2, #0
 80110d8:	701a      	strb	r2, [r3, #0]
 80110da:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80110de:	331f      	adds	r3, #31
 80110e0:	2200      	movs	r2, #0
 80110e2:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80110e4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80110e8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80110ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80110f0:	f8d7 1450 	ldr.w	r1, [r7, #1104]	@ 0x450
 80110f4:	4618      	mov	r0, r3
 80110f6:	f7fe fccf 	bl	800fa98 <ld_clust>
 80110fa:	f8c7 0448 	str.w	r0, [r7, #1096]	@ 0x448
				st_clust(dir, 0);				/* cluster = 0 */
 80110fe:	2100      	movs	r1, #0
 8011100:	f8d7 0450 	ldr.w	r0, [r7, #1104]	@ 0x450
 8011104:	f7fe fcf5 	bl	800faf2 <st_clust>
				dj.fs->wflag = 1;
 8011108:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801110c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8011110:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011114:	2201      	movs	r2, #1
 8011116:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 801111a:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 801111e:	2b00      	cmp	r3, #0
 8011120:	d059      	beq.n	80111d6 <f_open+0x346>
					dw = dj.fs->winsect;
 8011122:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011126:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 801112a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801112e:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 8011132:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
					res = remove_chain(dj.fs, cl);
 8011136:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801113a:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 801113e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011142:	f8d7 1448 	ldr.w	r1, [r7, #1096]	@ 0x448
 8011146:	4618      	mov	r0, r3
 8011148:	f7fe f9a6 	bl	800f498 <remove_chain>
 801114c:	4603      	mov	r3, r0
 801114e:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
					if (res == FR_OK) {
 8011152:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 8011156:	2b00      	cmp	r3, #0
 8011158:	d13d      	bne.n	80111d6 <f_open+0x346>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 801115a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801115e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8011162:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011166:	f8d7 2448 	ldr.w	r2, [r7, #1096]	@ 0x448
 801116a:	3a01      	subs	r2, #1
 801116c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
						res = move_window(dj.fs, dw);
 8011170:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011174:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8011178:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801117c:	f8d7 144c 	ldr.w	r1, [r7, #1100]	@ 0x44c
 8011180:	4618      	mov	r0, r3
 8011182:	f7fd fec6 	bl	800ef12 <move_window>
 8011186:	4603      	mov	r3, r0
 8011188:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 801118c:	e023      	b.n	80111d6 <f_open+0x346>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 801118e:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 8011192:	2b00      	cmp	r3, #0
 8011194:	d11f      	bne.n	80111d6 <f_open+0x346>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8011196:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 801119a:	330b      	adds	r3, #11
 801119c:	781b      	ldrb	r3, [r3, #0]
 801119e:	f003 0310 	and.w	r3, r3, #16
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d003      	beq.n	80111ae <f_open+0x31e>
					res = FR_NO_FILE;
 80111a6:	2304      	movs	r3, #4
 80111a8:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 80111ac:	e013      	b.n	80111d6 <f_open+0x346>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80111ae:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80111b2:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 80111b6:	781b      	ldrb	r3, [r3, #0]
 80111b8:	f003 0302 	and.w	r3, r3, #2
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d00a      	beq.n	80111d6 <f_open+0x346>
 80111c0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80111c4:	330b      	adds	r3, #11
 80111c6:	781b      	ldrb	r3, [r3, #0]
 80111c8:	f003 0301 	and.w	r3, r3, #1
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d002      	beq.n	80111d6 <f_open+0x346>
						res = FR_DENIED;
 80111d0:	2307      	movs	r3, #7
 80111d2:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
				}
			}
		}
		if (res == FR_OK) {
 80111d6:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d151      	bne.n	8011282 <f_open+0x3f2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80111de:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80111e2:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 80111e6:	781b      	ldrb	r3, [r3, #0]
 80111e8:	f003 0308 	and.w	r3, r3, #8
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d00b      	beq.n	8011208 <f_open+0x378>
				mode |= FA__WRITTEN;
 80111f0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80111f4:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 80111f8:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 80111fc:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 8011200:	7812      	ldrb	r2, [r2, #0]
 8011202:	f042 0220 	orr.w	r2, r2, #32
 8011206:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8011208:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801120c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8011210:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011214:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 8011218:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801121c:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
			fp->dir_ptr = dir;
 8011226:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801122a:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 8011234:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011238:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801123c:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 8011240:	781b      	ldrb	r3, [r3, #0]
 8011242:	2b01      	cmp	r3, #1
 8011244:	bf8c      	ite	hi
 8011246:	2301      	movhi	r3, #1
 8011248:	2300      	movls	r3, #0
 801124a:	b2db      	uxtb	r3, r3
 801124c:	461a      	mov	r2, r3
 801124e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011252:	4611      	mov	r1, r2
 8011254:	4618      	mov	r0, r3
 8011256:	f7fd fd33 	bl	800ecc0 <inc_lock>
 801125a:	4602      	mov	r2, r0
 801125c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011260:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 801126a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801126e:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8011278:	2b00      	cmp	r3, #0
 801127a:	d102      	bne.n	8011282 <f_open+0x3f2>
 801127c:	2302      	movs	r3, #2
 801127e:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8011282:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 8011286:	2b00      	cmp	r3, #0
 8011288:	d178      	bne.n	801137c <f_open+0x4ec>
			fp->flag = mode;					/* File access mode */
 801128a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801128e:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8011298:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 801129c:	7812      	ldrb	r2, [r2, #0]
 801129e:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			fp->err = 0;						/* Clear error flag */
 80112a2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80112a6:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	2200      	movs	r2, #0
 80112ae:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80112b2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80112b6:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80112ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80112be:	f8d7 1450 	ldr.w	r1, [r7, #1104]	@ 0x450
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7fe fbe8 	bl	800fa98 <ld_clust>
 80112c8:	4602      	mov	r2, r0
 80112ca:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80112ce:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80112d8:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80112dc:	331f      	adds	r3, #31
 80112de:	781b      	ldrb	r3, [r3, #0]
 80112e0:	061a      	lsls	r2, r3, #24
 80112e2:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80112e6:	331e      	adds	r3, #30
 80112e8:	781b      	ldrb	r3, [r3, #0]
 80112ea:	041b      	lsls	r3, r3, #16
 80112ec:	431a      	orrs	r2, r3
 80112ee:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80112f2:	331d      	adds	r3, #29
 80112f4:	781b      	ldrb	r3, [r3, #0]
 80112f6:	021b      	lsls	r3, r3, #8
 80112f8:	4313      	orrs	r3, r2
 80112fa:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 80112fe:	321c      	adds	r2, #28
 8011300:	7812      	ldrb	r2, [r2, #0]
 8011302:	431a      	orrs	r2, r3
 8011304:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011308:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
			fp->fptr = 0;						/* File pointer */
 8011312:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011316:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	2200      	movs	r2, #0
 801131e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			fp->dsect = 0;
 8011322:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011326:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	2200      	movs	r2, #0
 801132e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8011332:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011336:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	2200      	movs	r2, #0
 801133e:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8011342:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011346:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 801134a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 801134e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011352:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
			fp->id = fp->fs->id;
 801135c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011360:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801136a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 801136e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011372:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 801137c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8011380:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8011384:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011388:	f897 2457 	ldrb.w	r2, [r7, #1111]	@ 0x457
 801138c:	4611      	mov	r1, r2
 801138e:	4618      	mov	r0, r3
 8011390:	f7fd fbe7 	bl	800eb62 <unlock_fs>
 8011394:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
}
 8011398:	4618      	mov	r0, r3
 801139a:	f507 678b 	add.w	r7, r7, #1112	@ 0x458
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd80      	pop	{r7, pc}

080113a2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80113a2:	b580      	push	{r7, lr}
 80113a4:	b08a      	sub	sp, #40	@ 0x28
 80113a6:	af00      	add	r7, sp, #0
 80113a8:	60f8      	str	r0, [r7, #12]
 80113aa:	60b9      	str	r1, [r7, #8]
 80113ac:	607a      	str	r2, [r7, #4]
 80113ae:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	2200      	movs	r2, #0
 80113b8:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80113ba:	68f8      	ldr	r0, [r7, #12]
 80113bc:	f7ff fcc2 	bl	8010d44 <validate>
 80113c0:	4603      	mov	r3, r0
 80113c2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80113c4:	7dfb      	ldrb	r3, [r7, #23]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d009      	beq.n	80113de <f_write+0x3c>
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80113d0:	7dfa      	ldrb	r2, [r7, #23]
 80113d2:	4611      	mov	r1, r2
 80113d4:	4618      	mov	r0, r3
 80113d6:	f7fd fbc4 	bl	800eb62 <unlock_fs>
 80113da:	7dfb      	ldrb	r3, [r7, #23]
 80113dc:	e1d4      	b.n	8011788 <f_write+0x3e6>
	if (fp->err)							/* Check error */
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d00d      	beq.n	8011404 <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 80113f4:	4619      	mov	r1, r3
 80113f6:	4610      	mov	r0, r2
 80113f8:	f7fd fbb3 	bl	800eb62 <unlock_fs>
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8011402:	e1c1      	b.n	8011788 <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 801140a:	f003 0302 	and.w	r3, r3, #2
 801140e:	2b00      	cmp	r3, #0
 8011410:	d108      	bne.n	8011424 <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011418:	2107      	movs	r1, #7
 801141a:	4618      	mov	r0, r3
 801141c:	f7fd fba1 	bl	800eb62 <unlock_fs>
 8011420:	2307      	movs	r3, #7
 8011422:	e1b1      	b.n	8011788 <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	441a      	add	r2, r3
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8011434:	429a      	cmp	r2, r3
 8011436:	f080 8182 	bcs.w	801173e <f_write+0x39c>
 801143a:	2300      	movs	r3, #0
 801143c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 801143e:	e17e      	b.n	801173e <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8011446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801144a:	2b00      	cmp	r3, #0
 801144c:	f040 813e 	bne.w	80116cc <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8011456:	0a5b      	lsrs	r3, r3, #9
 8011458:	b2da      	uxtb	r2, r3
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011460:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8011464:	3b01      	subs	r3, #1
 8011466:	b2db      	uxtb	r3, r3
 8011468:	4013      	ands	r3, r2
 801146a:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 801146c:	7dbb      	ldrb	r3, [r7, #22]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d15f      	bne.n	8011532 <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8011478:	2b00      	cmp	r3, #0
 801147a:	d10f      	bne.n	801149c <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8011482:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8011484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011486:	2b00      	cmp	r3, #0
 8011488:	d121      	bne.n	80114ce <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011490:	2100      	movs	r1, #0
 8011492:	4618      	mov	r0, r3
 8011494:	f7fe f85a 	bl	800f54c <create_chain>
 8011498:	6278      	str	r0, [r7, #36]	@ 0x24
 801149a:	e018      	b.n	80114ce <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d008      	beq.n	80114b8 <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80114ac:	4619      	mov	r1, r3
 80114ae:	68f8      	ldr	r0, [r7, #12]
 80114b0:	f7fe f8e9 	bl	800f686 <clmt_clust>
 80114b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80114b6:	e00a      	b.n	80114ce <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80114c4:	4619      	mov	r1, r3
 80114c6:	4610      	mov	r0, r2
 80114c8:	f7fe f840 	bl	800f54c <create_chain>
 80114cc:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80114ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	f000 8139 	beq.w	8011748 <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80114d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114d8:	2b01      	cmp	r3, #1
 80114da:	d10c      	bne.n	80114f6 <f_write+0x154>
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	2202      	movs	r2, #2
 80114e0:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80114ea:	2102      	movs	r1, #2
 80114ec:	4618      	mov	r0, r3
 80114ee:	f7fd fb38 	bl	800eb62 <unlock_fs>
 80114f2:	2302      	movs	r3, #2
 80114f4:	e148      	b.n	8011788 <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80114f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114fc:	d10c      	bne.n	8011518 <f_write+0x176>
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	2201      	movs	r2, #1
 8011502:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801150c:	2101      	movs	r1, #1
 801150e:	4618      	mov	r0, r3
 8011510:	f7fd fb27 	bl	800eb62 <unlock_fs>
 8011514:	2301      	movs	r3, #1
 8011516:	e137      	b.n	8011788 <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801151c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8011526:	2b00      	cmp	r3, #0
 8011528:	d103      	bne.n	8011532 <f_write+0x190>
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801152e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801153c:	2b00      	cmp	r3, #0
 801153e:	d024      	beq.n	801158a <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011546:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 801154a:	68f9      	ldr	r1, [r7, #12]
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8011552:	2301      	movs	r3, #1
 8011554:	f7fd fa40 	bl	800e9d8 <disk_write>
 8011558:	4603      	mov	r3, r0
 801155a:	2b00      	cmp	r3, #0
 801155c:	d00c      	beq.n	8011578 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	2201      	movs	r2, #1
 8011562:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801156c:	2101      	movs	r1, #1
 801156e:	4618      	mov	r0, r3
 8011570:	f7fd faf7 	bl	800eb62 <unlock_fs>
 8011574:	2301      	movs	r3, #1
 8011576:	e107      	b.n	8011788 <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 801157e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011582:	b2da      	uxtb	r2, r3
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011596:	4619      	mov	r1, r3
 8011598:	4610      	mov	r0, r2
 801159a:	f7fd fd95 	bl	800f0c8 <clust2sect>
 801159e:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80115a0:	693b      	ldr	r3, [r7, #16]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d10c      	bne.n	80115c0 <f_write+0x21e>
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	2202      	movs	r2, #2
 80115aa:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80115b4:	2102      	movs	r1, #2
 80115b6:	4618      	mov	r0, r3
 80115b8:	f7fd fad3 	bl	800eb62 <unlock_fs>
 80115bc:	2302      	movs	r3, #2
 80115be:	e0e3      	b.n	8011788 <f_write+0x3e6>
			sect += csect;
 80115c0:	7dbb      	ldrb	r3, [r7, #22]
 80115c2:	693a      	ldr	r2, [r7, #16]
 80115c4:	4413      	add	r3, r2
 80115c6:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	0a5b      	lsrs	r3, r3, #9
 80115cc:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80115ce:	69fb      	ldr	r3, [r7, #28]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d04f      	beq.n	8011674 <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80115d4:	7dba      	ldrb	r2, [r7, #22]
 80115d6:	69fb      	ldr	r3, [r7, #28]
 80115d8:	4413      	add	r3, r2
 80115da:	68fa      	ldr	r2, [r7, #12]
 80115dc:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 80115e0:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 80115e4:	4293      	cmp	r3, r2
 80115e6:	d908      	bls.n	80115fa <f_write+0x258>
					cc = fp->fs->csize - csect;
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80115ee:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80115f2:	461a      	mov	r2, r3
 80115f4:	7dbb      	ldrb	r3, [r7, #22]
 80115f6:	1ad3      	subs	r3, r2, r3
 80115f8:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011600:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8011604:	69fb      	ldr	r3, [r7, #28]
 8011606:	693a      	ldr	r2, [r7, #16]
 8011608:	69b9      	ldr	r1, [r7, #24]
 801160a:	f7fd f9e5 	bl	800e9d8 <disk_write>
 801160e:	4603      	mov	r3, r0
 8011610:	2b00      	cmp	r3, #0
 8011612:	d00c      	beq.n	801162e <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	2201      	movs	r2, #1
 8011618:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011622:	2101      	movs	r1, #1
 8011624:	4618      	mov	r0, r3
 8011626:	f7fd fa9c 	bl	800eb62 <unlock_fs>
 801162a:	2301      	movs	r3, #1
 801162c:	e0ac      	b.n	8011788 <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8011634:	693b      	ldr	r3, [r7, #16]
 8011636:	1ad3      	subs	r3, r2, r3
 8011638:	69fa      	ldr	r2, [r7, #28]
 801163a:	429a      	cmp	r2, r3
 801163c:	d916      	bls.n	801166c <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 801163e:	68f8      	ldr	r0, [r7, #12]
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8011646:	693b      	ldr	r3, [r7, #16]
 8011648:	1ad3      	subs	r3, r2, r3
 801164a:	025b      	lsls	r3, r3, #9
 801164c:	69ba      	ldr	r2, [r7, #24]
 801164e:	4413      	add	r3, r2
 8011650:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011654:	4619      	mov	r1, r3
 8011656:	f7fd f9fd 	bl	800ea54 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011664:	b2da      	uxtb	r2, r3
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 801166c:	69fb      	ldr	r3, [r7, #28]
 801166e:	025b      	lsls	r3, r3, #9
 8011670:	623b      	str	r3, [r7, #32]
				continue;
 8011672:	e04e      	b.n	8011712 <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 801167a:	693a      	ldr	r2, [r7, #16]
 801167c:	429a      	cmp	r2, r3
 801167e:	d021      	beq.n	80116c4 <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 801168c:	429a      	cmp	r2, r3
 801168e:	d219      	bcs.n	80116c4 <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011696:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 801169a:	68f9      	ldr	r1, [r7, #12]
 801169c:	2301      	movs	r3, #1
 801169e:	693a      	ldr	r2, [r7, #16]
 80116a0:	f7fd f97a 	bl	800e998 <disk_read>
 80116a4:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d00c      	beq.n	80116c4 <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	2201      	movs	r2, #1
 80116ae:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80116b8:	2101      	movs	r1, #1
 80116ba:	4618      	mov	r0, r3
 80116bc:	f7fd fa51 	bl	800eb62 <unlock_fs>
 80116c0:	2301      	movs	r3, #1
 80116c2:	e061      	b.n	8011788 <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	693a      	ldr	r2, [r7, #16]
 80116c8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80116d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116d6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80116da:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80116dc:	6a3a      	ldr	r2, [r7, #32]
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	429a      	cmp	r2, r3
 80116e2:	d901      	bls.n	80116e8 <f_write+0x346>
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80116ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116f2:	68fa      	ldr	r2, [r7, #12]
 80116f4:	4413      	add	r3, r2
 80116f6:	6a3a      	ldr	r2, [r7, #32]
 80116f8:	69b9      	ldr	r1, [r7, #24]
 80116fa:	4618      	mov	r0, r3
 80116fc:	f7fd f9aa 	bl	800ea54 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801170a:	b2da      	uxtb	r2, r3
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8011712:	69ba      	ldr	r2, [r7, #24]
 8011714:	6a3b      	ldr	r3, [r7, #32]
 8011716:	4413      	add	r3, r2
 8011718:	61bb      	str	r3, [r7, #24]
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011720:	6a3b      	ldr	r3, [r7, #32]
 8011722:	441a      	add	r2, r3
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	681a      	ldr	r2, [r3, #0]
 801172e:	6a3b      	ldr	r3, [r7, #32]
 8011730:	441a      	add	r2, r3
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	601a      	str	r2, [r3, #0]
 8011736:	687a      	ldr	r2, [r7, #4]
 8011738:	6a3b      	ldr	r3, [r7, #32]
 801173a:	1ad3      	subs	r3, r2, r3
 801173c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	2b00      	cmp	r3, #0
 8011742:	f47f ae7d 	bne.w	8011440 <f_write+0x9e>
 8011746:	e000      	b.n	801174a <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011748:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8011756:	429a      	cmp	r2, r3
 8011758:	d905      	bls.n	8011766 <f_write+0x3c4>
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 801176c:	f043 0320 	orr.w	r3, r3, #32
 8011770:	b2da      	uxtb	r2, r3
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801177e:	2100      	movs	r1, #0
 8011780:	4618      	mov	r0, r3
 8011782:	f7fd f9ee 	bl	800eb62 <unlock_fs>
 8011786:	2300      	movs	r3, #0
}
 8011788:	4618      	mov	r0, r3
 801178a:	3728      	adds	r7, #40	@ 0x28
 801178c:	46bd      	mov	sp, r7
 801178e:	bd80      	pop	{r7, pc}

08011790 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b086      	sub	sp, #24
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8011798:	6878      	ldr	r0, [r7, #4]
 801179a:	f7ff fad3 	bl	8010d44 <validate>
 801179e:	4603      	mov	r3, r0
 80117a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80117a2:	7dfb      	ldrb	r3, [r7, #23]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	f040 80af 	bne.w	8011908 <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80117b0:	f003 0320 	and.w	r3, r3, #32
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	f000 80a7 	beq.w	8011908 <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80117c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d020      	beq.n	801180a <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80117ce:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80117d2:	6879      	ldr	r1, [r7, #4]
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80117da:	2301      	movs	r3, #1
 80117dc:	f7fd f8fc 	bl	800e9d8 <disk_write>
 80117e0:	4603      	mov	r3, r0
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d008      	beq.n	80117f8 <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80117ec:	2101      	movs	r1, #1
 80117ee:	4618      	mov	r0, r3
 80117f0:	f7fd f9b7 	bl	800eb62 <unlock_fs>
 80117f4:	2301      	movs	r3, #1
 80117f6:	e090      	b.n	801191a <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80117fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011802:	b2da      	uxtb	r2, r3
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8011816:	4619      	mov	r1, r3
 8011818:	4610      	mov	r0, r2
 801181a:	f7fd fb7a 	bl	800ef12 <move_window>
 801181e:	4603      	mov	r3, r0
 8011820:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8011822:	7dfb      	ldrb	r3, [r7, #23]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d16f      	bne.n	8011908 <f_sync+0x178>
				dir = fp->dir_ptr;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 801182e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8011830:	693b      	ldr	r3, [r7, #16]
 8011832:	330b      	adds	r3, #11
 8011834:	781a      	ldrb	r2, [r3, #0]
 8011836:	693b      	ldr	r3, [r7, #16]
 8011838:	330b      	adds	r3, #11
 801183a:	f042 0220 	orr.w	r2, r2, #32
 801183e:	b2d2      	uxtb	r2, r2
 8011840:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	331c      	adds	r3, #28
 801184c:	b2d2      	uxtb	r2, r2
 801184e:	701a      	strb	r2, [r3, #0]
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8011856:	b29b      	uxth	r3, r3
 8011858:	0a1b      	lsrs	r3, r3, #8
 801185a:	b29a      	uxth	r2, r3
 801185c:	693b      	ldr	r3, [r7, #16]
 801185e:	331d      	adds	r3, #29
 8011860:	b2d2      	uxtb	r2, r2
 8011862:	701a      	strb	r2, [r3, #0]
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 801186a:	0c1a      	lsrs	r2, r3, #16
 801186c:	693b      	ldr	r3, [r7, #16]
 801186e:	331e      	adds	r3, #30
 8011870:	b2d2      	uxtb	r2, r2
 8011872:	701a      	strb	r2, [r3, #0]
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 801187a:	0e1a      	lsrs	r2, r3, #24
 801187c:	693b      	ldr	r3, [r7, #16]
 801187e:	331f      	adds	r3, #31
 8011880:	b2d2      	uxtb	r2, r2
 8011882:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801188a:	4619      	mov	r1, r3
 801188c:	6938      	ldr	r0, [r7, #16]
 801188e:	f7fe f930 	bl	800faf2 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8011892:	f7fc ffbb 	bl	800e80c <get_fattime>
 8011896:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8011898:	693b      	ldr	r3, [r7, #16]
 801189a:	3316      	adds	r3, #22
 801189c:	68fa      	ldr	r2, [r7, #12]
 801189e:	b2d2      	uxtb	r2, r2
 80118a0:	701a      	strb	r2, [r3, #0]
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	b29b      	uxth	r3, r3
 80118a6:	0a1b      	lsrs	r3, r3, #8
 80118a8:	b29a      	uxth	r2, r3
 80118aa:	693b      	ldr	r3, [r7, #16]
 80118ac:	3317      	adds	r3, #23
 80118ae:	b2d2      	uxtb	r2, r2
 80118b0:	701a      	strb	r2, [r3, #0]
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	0c1a      	lsrs	r2, r3, #16
 80118b6:	693b      	ldr	r3, [r7, #16]
 80118b8:	3318      	adds	r3, #24
 80118ba:	b2d2      	uxtb	r2, r2
 80118bc:	701a      	strb	r2, [r3, #0]
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	0e1a      	lsrs	r2, r3, #24
 80118c2:	693b      	ldr	r3, [r7, #16]
 80118c4:	3319      	adds	r3, #25
 80118c6:	b2d2      	uxtb	r2, r2
 80118c8:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80118ca:	693b      	ldr	r3, [r7, #16]
 80118cc:	3312      	adds	r3, #18
 80118ce:	2200      	movs	r2, #0
 80118d0:	701a      	strb	r2, [r3, #0]
 80118d2:	693b      	ldr	r3, [r7, #16]
 80118d4:	3313      	adds	r3, #19
 80118d6:	2200      	movs	r2, #0
 80118d8:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80118e0:	f023 0320 	bic.w	r3, r3, #32
 80118e4:	b2da      	uxtb	r2, r3
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				fp->fs->wflag = 1;
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80118f2:	2201      	movs	r2, #1
 80118f4:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = sync_fs(fp->fs);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80118fe:	4618      	mov	r0, r3
 8011900:	f7fd fb35 	bl	800ef6e <sync_fs>
 8011904:	4603      	mov	r3, r0
 8011906:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801190e:	7dfa      	ldrb	r2, [r7, #23]
 8011910:	4611      	mov	r1, r2
 8011912:	4618      	mov	r0, r3
 8011914:	f7fd f925 	bl	800eb62 <unlock_fs>
 8011918:	7dfb      	ldrb	r3, [r7, #23]
}
 801191a:	4618      	mov	r0, r3
 801191c:	3718      	adds	r7, #24
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}

08011922 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8011922:	b580      	push	{r7, lr}
 8011924:	b090      	sub	sp, #64	@ 0x40
 8011926:	af00      	add	r7, sp, #0
 8011928:	6078      	str	r0, [r7, #4]
 801192a:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 801192c:	6878      	ldr	r0, [r7, #4]
 801192e:	f7ff fa09 	bl	8010d44 <validate>
 8011932:	4603      	mov	r3, r0
 8011934:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8011938:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801193c:	2b00      	cmp	r3, #0
 801193e:	d00b      	beq.n	8011958 <f_lseek+0x36>
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011946:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801194a:	4611      	mov	r1, r2
 801194c:	4618      	mov	r0, r3
 801194e:	f7fd f908 	bl	800eb62 <unlock_fs>
 8011952:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011956:	e2af      	b.n	8011eb8 <f_lseek+0x596>
	if (fp->err)						/* Check error */
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 801195e:	2b00      	cmp	r3, #0
 8011960:	d00d      	beq.n	801197e <f_lseek+0x5c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 801196e:	4619      	mov	r1, r3
 8011970:	4610      	mov	r0, r2
 8011972:	f7fd f8f6 	bl	800eb62 <unlock_fs>
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 801197c:	e29c      	b.n	8011eb8 <f_lseek+0x596>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8011984:	2b00      	cmp	r3, #0
 8011986:	f000 8115 	beq.w	8011bb4 <f_lseek+0x292>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011990:	d172      	bne.n	8011a78 <f_lseek+0x156>
			tbl = fp->cltbl;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8011998:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801199a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801199c:	1d1a      	adds	r2, r3, #4
 801199e:	627a      	str	r2, [r7, #36]	@ 0x24
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	617b      	str	r3, [r7, #20]
 80119a4:	2302      	movs	r3, #2
 80119a6:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80119ae:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80119b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d04f      	beq.n	8011a56 <f_lseek+0x134>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80119b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119b8:	613b      	str	r3, [r7, #16]
 80119ba:	2300      	movs	r3, #0
 80119bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80119be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119c0:	3302      	adds	r3, #2
 80119c2:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80119c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119c6:	60fb      	str	r3, [r7, #12]
 80119c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119ca:	3301      	adds	r3, #1
 80119cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80119d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80119d6:	4618      	mov	r0, r3
 80119d8:	f7fd fb97 	bl	800f10a <get_fat>
 80119dc:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 80119de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119e0:	2b01      	cmp	r3, #1
 80119e2:	d80c      	bhi.n	80119fe <f_lseek+0xdc>
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	2202      	movs	r2, #2
 80119e8:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80119f2:	2102      	movs	r1, #2
 80119f4:	4618      	mov	r0, r3
 80119f6:	f7fd f8b4 	bl	800eb62 <unlock_fs>
 80119fa:	2302      	movs	r3, #2
 80119fc:	e25c      	b.n	8011eb8 <f_lseek+0x596>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80119fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a04:	d10c      	bne.n	8011a20 <f_lseek+0xfe>
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	2201      	movs	r2, #1
 8011a0a:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011a14:	2101      	movs	r1, #1
 8011a16:	4618      	mov	r0, r3
 8011a18:	f7fd f8a3 	bl	800eb62 <unlock_fs>
 8011a1c:	2301      	movs	r3, #1
 8011a1e:	e24b      	b.n	8011eb8 <f_lseek+0x596>
					} while (cl == pcl + 1);
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	3301      	adds	r3, #1
 8011a24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a26:	429a      	cmp	r2, r3
 8011a28:	d0cc      	beq.n	80119c4 <f_lseek+0xa2>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011a2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011a2c:	697b      	ldr	r3, [r7, #20]
 8011a2e:	429a      	cmp	r2, r3
 8011a30:	d809      	bhi.n	8011a46 <f_lseek+0x124>
						*tbl++ = ncl; *tbl++ = tcl;
 8011a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a34:	1d1a      	adds	r2, r3, #4
 8011a36:	627a      	str	r2, [r7, #36]	@ 0x24
 8011a38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a3a:	601a      	str	r2, [r3, #0]
 8011a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a3e:	1d1a      	adds	r2, r3, #4
 8011a40:	627a      	str	r2, [r7, #36]	@ 0x24
 8011a42:	693a      	ldr	r2, [r7, #16]
 8011a44:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011a4c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8011a50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a52:	429a      	cmp	r2, r3
 8011a54:	d3af      	bcc.n	80119b6 <f_lseek+0x94>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8011a5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011a5e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8011a60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011a62:	697b      	ldr	r3, [r7, #20]
 8011a64:	429a      	cmp	r2, r3
 8011a66:	d803      	bhi.n	8011a70 <f_lseek+0x14e>
				*tbl = 0;		/* Terminate table */
 8011a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	601a      	str	r2, [r3, #0]
 8011a6e:	e218      	b.n	8011ea2 <f_lseek+0x580>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011a70:	2311      	movs	r3, #17
 8011a72:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8011a76:	e214      	b.n	8011ea2 <f_lseek+0x580>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8011a7e:	683a      	ldr	r2, [r7, #0]
 8011a80:	429a      	cmp	r2, r3
 8011a82:	d903      	bls.n	8011a8c <f_lseek+0x16a>
				ofs = fp->fsize;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8011a8a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	683a      	ldr	r2, [r7, #0]
 8011a90:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			if (ofs) {
 8011a94:	683b      	ldr	r3, [r7, #0]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	f000 8203 	beq.w	8011ea2 <f_lseek+0x580>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	3b01      	subs	r3, #1
 8011aa0:	4619      	mov	r1, r3
 8011aa2:	6878      	ldr	r0, [r7, #4]
 8011aa4:	f7fd fdef 	bl	800f686 <clmt_clust>
 8011aa8:	4602      	mov	r2, r0
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011abc:	4619      	mov	r1, r3
 8011abe:	4610      	mov	r0, r2
 8011ac0:	f7fd fb02 	bl	800f0c8 <clust2sect>
 8011ac4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8011ac6:	69bb      	ldr	r3, [r7, #24]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d10c      	bne.n	8011ae6 <f_lseek+0x1c4>
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2202      	movs	r2, #2
 8011ad0:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011ada:	2102      	movs	r1, #2
 8011adc:	4618      	mov	r0, r3
 8011ade:	f7fd f840 	bl	800eb62 <unlock_fs>
 8011ae2:	2302      	movs	r3, #2
 8011ae4:	e1e8      	b.n	8011eb8 <f_lseek+0x596>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8011ae6:	683b      	ldr	r3, [r7, #0]
 8011ae8:	3b01      	subs	r3, #1
 8011aea:	0a5b      	lsrs	r3, r3, #9
 8011aec:	687a      	ldr	r2, [r7, #4]
 8011aee:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 8011af2:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8011af6:	3a01      	subs	r2, #1
 8011af8:	4013      	ands	r3, r2
 8011afa:	69ba      	ldr	r2, [r7, #24]
 8011afc:	4413      	add	r3, r2
 8011afe:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8011b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	f000 81c9 	beq.w	8011ea2 <f_lseek+0x580>
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8011b16:	69ba      	ldr	r2, [r7, #24]
 8011b18:	429a      	cmp	r2, r3
 8011b1a:	f000 81c2 	beq.w	8011ea2 <f_lseek+0x580>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d024      	beq.n	8011b76 <f_lseek+0x254>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011b32:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8011b36:	6879      	ldr	r1, [r7, #4]
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8011b3e:	2301      	movs	r3, #1
 8011b40:	f7fc ff4a 	bl	800e9d8 <disk_write>
 8011b44:	4603      	mov	r3, r0
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d00c      	beq.n	8011b64 <f_lseek+0x242>
							ABORT(fp->fs, FR_DISK_ERR);
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	2201      	movs	r2, #1
 8011b4e:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011b58:	2101      	movs	r1, #1
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f7fd f801 	bl	800eb62 <unlock_fs>
 8011b60:	2301      	movs	r3, #1
 8011b62:	e1a9      	b.n	8011eb8 <f_lseek+0x596>
						fp->flag &= ~FA__DIRTY;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011b6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011b6e:	b2da      	uxtb	r2, r3
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011b7c:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8011b80:	6879      	ldr	r1, [r7, #4]
 8011b82:	2301      	movs	r3, #1
 8011b84:	69ba      	ldr	r2, [r7, #24]
 8011b86:	f7fc ff07 	bl	800e998 <disk_read>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d00c      	beq.n	8011baa <f_lseek+0x288>
						ABORT(fp->fs, FR_DISK_ERR);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	2201      	movs	r2, #1
 8011b94:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011b9e:	2101      	movs	r1, #1
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	f7fc ffde 	bl	800eb62 <unlock_fs>
 8011ba6:	2301      	movs	r3, #1
 8011ba8:	e186      	b.n	8011eb8 <f_lseek+0x596>
#endif
					fp->dsect = dsc;
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	69ba      	ldr	r2, [r7, #24]
 8011bae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
 8011bb2:	e176      	b.n	8011ea2 <f_lseek+0x580>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8011bba:	683a      	ldr	r2, [r7, #0]
 8011bbc:	429a      	cmp	r2, r3
 8011bbe:	d90a      	bls.n	8011bd6 <f_lseek+0x2b4>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011bc6:	f003 0302 	and.w	r3, r3, #2
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d103      	bne.n	8011bd6 <f_lseek+0x2b4>
#endif
			) ofs = fp->fsize;
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8011bd4:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8011bdc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011bde:	2300      	movs	r3, #0
 8011be0:	637b      	str	r3, [r7, #52]	@ 0x34
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011be6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
		if (ofs) {
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	f000 80ea 	beq.w	8011dc6 <f_lseek+0x4a4>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011bf8:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8011bfc:	025b      	lsls	r3, r3, #9
 8011bfe:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011c00:	6a3b      	ldr	r3, [r7, #32]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d01e      	beq.n	8011c44 <f_lseek+0x322>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	1e5a      	subs	r2, r3, #1
 8011c0a:	69fb      	ldr	r3, [r7, #28]
 8011c0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8011c10:	6a3b      	ldr	r3, [r7, #32]
 8011c12:	1e59      	subs	r1, r3, #1
 8011c14:	69fb      	ldr	r3, [r7, #28]
 8011c16:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011c1a:	429a      	cmp	r2, r3
 8011c1c:	d312      	bcc.n	8011c44 <f_lseek+0x322>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8011c1e:	6a3b      	ldr	r3, [r7, #32]
 8011c20:	1e5a      	subs	r2, r3, #1
 8011c22:	69fb      	ldr	r3, [r7, #28]
 8011c24:	425b      	negs	r3, r3
 8011c26:	401a      	ands	r2, r3
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
				ofs -= fp->fptr;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8011c34:	683a      	ldr	r2, [r7, #0]
 8011c36:	1ad3      	subs	r3, r2, r3
 8011c38:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011c40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011c42:	e037      	b.n	8011cb4 <f_lseek+0x392>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8011c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d12c      	bne.n	8011cac <f_lseek+0x38a>
					clst = create_chain(fp->fs, 0);
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011c58:	2100      	movs	r1, #0
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	f7fd fc76 	bl	800f54c <create_chain>
 8011c60:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8011c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c64:	2b01      	cmp	r3, #1
 8011c66:	d10c      	bne.n	8011c82 <f_lseek+0x360>
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	2202      	movs	r2, #2
 8011c6c:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011c76:	2102      	movs	r1, #2
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f7fc ff72 	bl	800eb62 <unlock_fs>
 8011c7e:	2302      	movs	r3, #2
 8011c80:	e11a      	b.n	8011eb8 <f_lseek+0x596>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8011c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c88:	d10c      	bne.n	8011ca4 <f_lseek+0x382>
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	2201      	movs	r2, #1
 8011c8e:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011c98:	2101      	movs	r1, #1
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f7fc ff61 	bl	800eb62 <unlock_fs>
 8011ca0:	2301      	movs	r3, #1
 8011ca2:	e109      	b.n	8011eb8 <f_lseek+0x596>
					fp->sclust = clst;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011ca8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
				}
#endif
				fp->clust = clst;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011cb0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
			}
			if (clst != 0) {
 8011cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	f000 8085 	beq.w	8011dc6 <f_lseek+0x4a4>
				while (ofs > bcs) {						/* Cluster following loop */
 8011cbc:	e055      	b.n	8011d6a <f_lseek+0x448>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011cc4:	f003 0302 	and.w	r3, r3, #2
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d00d      	beq.n	8011ce8 <f_lseek+0x3c6>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011cd2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f7fd fc39 	bl	800f54c <create_chain>
 8011cda:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8011cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d10a      	bne.n	8011cf8 <f_lseek+0x3d6>
							ofs = bcs; break;
 8011ce2:	69fb      	ldr	r3, [r7, #28]
 8011ce4:	603b      	str	r3, [r7, #0]
 8011ce6:	e044      	b.n	8011d72 <f_lseek+0x450>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011cee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f7fd fa0a 	bl	800f10a <get_fat>
 8011cf6:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8011cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cfe:	d10c      	bne.n	8011d1a <f_lseek+0x3f8>
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	2201      	movs	r2, #1
 8011d04:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011d0e:	2101      	movs	r1, #1
 8011d10:	4618      	mov	r0, r3
 8011d12:	f7fc ff26 	bl	800eb62 <unlock_fs>
 8011d16:	2301      	movs	r3, #1
 8011d18:	e0ce      	b.n	8011eb8 <f_lseek+0x596>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8011d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d1c:	2b01      	cmp	r3, #1
 8011d1e:	d907      	bls.n	8011d30 <f_lseek+0x40e>
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011d26:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8011d2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011d2c:	429a      	cmp	r2, r3
 8011d2e:	d30c      	bcc.n	8011d4a <f_lseek+0x428>
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	2202      	movs	r2, #2
 8011d34:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011d3e:	2102      	movs	r1, #2
 8011d40:	4618      	mov	r0, r3
 8011d42:	f7fc ff0e 	bl	800eb62 <unlock_fs>
 8011d46:	2302      	movs	r3, #2
 8011d48:	e0b6      	b.n	8011eb8 <f_lseek+0x596>
					fp->clust = clst;
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011d4e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
					fp->fptr += bcs;
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011d58:	69fb      	ldr	r3, [r7, #28]
 8011d5a:	441a      	add	r2, r3
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
					ofs -= bcs;
 8011d62:	683a      	ldr	r2, [r7, #0]
 8011d64:	69fb      	ldr	r3, [r7, #28]
 8011d66:	1ad3      	subs	r3, r2, r3
 8011d68:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8011d6a:	683a      	ldr	r2, [r7, #0]
 8011d6c:	69fb      	ldr	r3, [r7, #28]
 8011d6e:	429a      	cmp	r2, r3
 8011d70:	d8a5      	bhi.n	8011cbe <f_lseek+0x39c>
				}
				fp->fptr += ofs;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	441a      	add	r2, r3
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
				if (ofs % SS(fp->fs)) {
 8011d82:	683b      	ldr	r3, [r7, #0]
 8011d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d01c      	beq.n	8011dc6 <f_lseek+0x4a4>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011d92:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011d94:	4618      	mov	r0, r3
 8011d96:	f7fd f997 	bl	800f0c8 <clust2sect>
 8011d9a:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8011d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d10c      	bne.n	8011dbc <f_lseek+0x49a>
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	2202      	movs	r2, #2
 8011da6:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011db0:	2102      	movs	r1, #2
 8011db2:	4618      	mov	r0, r3
 8011db4:	f7fc fed5 	bl	800eb62 <unlock_fs>
 8011db8:	2302      	movs	r3, #2
 8011dba:	e07d      	b.n	8011eb8 <f_lseek+0x596>
					nsect += ofs / SS(fp->fs);
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	0a5b      	lsrs	r3, r3, #9
 8011dc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011dc2:	4413      	add	r3, r2
 8011dc4:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8011dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d04f      	beq.n	8011e74 <f_lseek+0x552>
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8011dda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	d049      	beq.n	8011e74 <f_lseek+0x552>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d024      	beq.n	8011e38 <f_lseek+0x516>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011df4:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8011df8:	6879      	ldr	r1, [r7, #4]
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8011e00:	2301      	movs	r3, #1
 8011e02:	f7fc fde9 	bl	800e9d8 <disk_write>
 8011e06:	4603      	mov	r3, r0
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d00c      	beq.n	8011e26 <f_lseek+0x504>
					ABORT(fp->fs, FR_DISK_ERR);
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	2201      	movs	r2, #1
 8011e10:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011e1a:	2101      	movs	r1, #1
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f7fc fea0 	bl	800eb62 <unlock_fs>
 8011e22:	2301      	movs	r3, #1
 8011e24:	e048      	b.n	8011eb8 <f_lseek+0x596>
				fp->flag &= ~FA__DIRTY;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011e2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011e30:	b2da      	uxtb	r2, r3
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011e3e:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8011e42:	6879      	ldr	r1, [r7, #4]
 8011e44:	2301      	movs	r3, #1
 8011e46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011e48:	f7fc fda6 	bl	800e998 <disk_read>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d00c      	beq.n	8011e6c <f_lseek+0x54a>
				ABORT(fp->fs, FR_DISK_ERR);
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	2201      	movs	r2, #1
 8011e56:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011e60:	2101      	movs	r1, #1
 8011e62:	4618      	mov	r0, r3
 8011e64:	f7fc fe7d 	bl	800eb62 <unlock_fs>
 8011e68:	2301      	movs	r3, #1
 8011e6a:	e025      	b.n	8011eb8 <f_lseek+0x596>
#endif
			fp->dsect = nsect;
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011e70:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8011e80:	429a      	cmp	r2, r3
 8011e82:	d90e      	bls.n	8011ea2 <f_lseek+0x580>
			fp->fsize = fp->fptr;
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
			fp->flag |= FA__WRITTEN;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8011e96:	f043 0320 	orr.w	r3, r3, #32
 8011e9a:	b2da      	uxtb	r2, r3
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011ea8:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8011eac:	4611      	mov	r1, r2
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f7fc fe57 	bl	800eb62 <unlock_fs>
 8011eb4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8011eb8:	4618      	mov	r0, r3
 8011eba:	3740      	adds	r7, #64	@ 0x40
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bd80      	pop	{r7, pc}

08011ec0 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b084      	sub	sp, #16
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
 8011ec8:	460b      	mov	r3, r1
 8011eca:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8011ecc:	78fb      	ldrb	r3, [r7, #3]
 8011ece:	2b0a      	cmp	r3, #10
 8011ed0:	d103      	bne.n	8011eda <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8011ed2:	210d      	movs	r1, #13
 8011ed4:	6878      	ldr	r0, [r7, #4]
 8011ed6:	f7ff fff3 	bl	8011ec0 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	685b      	ldr	r3, [r3, #4]
 8011ede:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	db25      	blt.n	8011f32 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	1c5a      	adds	r2, r3, #1
 8011eea:	60fa      	str	r2, [r7, #12]
 8011eec:	687a      	ldr	r2, [r7, #4]
 8011eee:	4413      	add	r3, r2
 8011ef0:	78fa      	ldrb	r2, [r7, #3]
 8011ef2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	2b3c      	cmp	r3, #60	@ 0x3c
 8011ef8:	dd12      	ble.n	8011f20 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	6818      	ldr	r0, [r3, #0]
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f103 010c 	add.w	r1, r3, #12
 8011f04:	68fa      	ldr	r2, [r7, #12]
 8011f06:	f107 0308 	add.w	r3, r7, #8
 8011f0a:	f7ff fa4a 	bl	80113a2 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8011f0e:	68ba      	ldr	r2, [r7, #8]
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	429a      	cmp	r2, r3
 8011f14:	d101      	bne.n	8011f1a <putc_bfd+0x5a>
 8011f16:	2300      	movs	r3, #0
 8011f18:	e001      	b.n	8011f1e <putc_bfd+0x5e>
 8011f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8011f1e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	68fa      	ldr	r2, [r7, #12]
 8011f24:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	689b      	ldr	r3, [r3, #8]
 8011f2a:	1c5a      	adds	r2, r3, #1
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	609a      	str	r2, [r3, #8]
 8011f30:	e000      	b.n	8011f34 <putc_bfd+0x74>
	if (i < 0) return;
 8011f32:	bf00      	nop
}
 8011f34:	3710      	adds	r7, #16
 8011f36:	46bd      	mov	sp, r7
 8011f38:	bd80      	pop	{r7, pc}

08011f3a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8011f3a:	b590      	push	{r4, r7, lr}
 8011f3c:	b097      	sub	sp, #92	@ 0x5c
 8011f3e:	af00      	add	r7, sp, #0
 8011f40:	6078      	str	r0, [r7, #4]
 8011f42:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8011f48:	2300      	movs	r3, #0
 8011f4a:	613b      	str	r3, [r7, #16]
 8011f4c:	693b      	ldr	r3, [r7, #16]
 8011f4e:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8011f50:	e009      	b.n	8011f66 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	1c5a      	adds	r2, r3, #1
 8011f56:	607a      	str	r2, [r7, #4]
 8011f58:	781a      	ldrb	r2, [r3, #0]
 8011f5a:	f107 030c 	add.w	r3, r7, #12
 8011f5e:	4611      	mov	r1, r2
 8011f60:	4618      	mov	r0, r3
 8011f62:	f7ff ffad 	bl	8011ec0 <putc_bfd>
	while (*str)			/* Put the string */
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	781b      	ldrb	r3, [r3, #0]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d1f1      	bne.n	8011f52 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8011f6e:	693b      	ldr	r3, [r7, #16]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	db15      	blt.n	8011fa0 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8011f74:	68f8      	ldr	r0, [r7, #12]
 8011f76:	693b      	ldr	r3, [r7, #16]
 8011f78:	461c      	mov	r4, r3
 8011f7a:	f107 0208 	add.w	r2, r7, #8
 8011f7e:	f107 030c 	add.w	r3, r7, #12
 8011f82:	f103 010c 	add.w	r1, r3, #12
 8011f86:	4613      	mov	r3, r2
 8011f88:	4622      	mov	r2, r4
 8011f8a:	f7ff fa0a 	bl	80113a2 <f_write>
 8011f8e:	4603      	mov	r3, r0
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d105      	bne.n	8011fa0 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8011f94:	693b      	ldr	r3, [r7, #16]
 8011f96:	68ba      	ldr	r2, [r7, #8]
 8011f98:	4293      	cmp	r3, r2
 8011f9a:	d101      	bne.n	8011fa0 <f_puts+0x66>
 8011f9c:	697b      	ldr	r3, [r7, #20]
 8011f9e:	e001      	b.n	8011fa4 <f_puts+0x6a>
	return EOF;
 8011fa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	375c      	adds	r7, #92	@ 0x5c
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	bd90      	pop	{r4, r7, pc}

08011fac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011fac:	b480      	push	{r7}
 8011fae:	b087      	sub	sp, #28
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	60f8      	str	r0, [r7, #12]
 8011fb4:	60b9      	str	r1, [r7, #8]
 8011fb6:	4613      	mov	r3, r2
 8011fb8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011fba:	2301      	movs	r3, #1
 8011fbc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8011fc2:	4b1e      	ldr	r3, [pc, #120]	@ (801203c <FATFS_LinkDriverEx+0x90>)
 8011fc4:	7a5b      	ldrb	r3, [r3, #9]
 8011fc6:	b2db      	uxtb	r3, r3
 8011fc8:	2b01      	cmp	r3, #1
 8011fca:	d831      	bhi.n	8012030 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011fcc:	4b1b      	ldr	r3, [pc, #108]	@ (801203c <FATFS_LinkDriverEx+0x90>)
 8011fce:	7a5b      	ldrb	r3, [r3, #9]
 8011fd0:	b2db      	uxtb	r3, r3
 8011fd2:	461a      	mov	r2, r3
 8011fd4:	4b19      	ldr	r3, [pc, #100]	@ (801203c <FATFS_LinkDriverEx+0x90>)
 8011fd6:	2100      	movs	r1, #0
 8011fd8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8011fda:	4b18      	ldr	r3, [pc, #96]	@ (801203c <FATFS_LinkDriverEx+0x90>)
 8011fdc:	7a5b      	ldrb	r3, [r3, #9]
 8011fde:	b2db      	uxtb	r3, r3
 8011fe0:	4a16      	ldr	r2, [pc, #88]	@ (801203c <FATFS_LinkDriverEx+0x90>)
 8011fe2:	009b      	lsls	r3, r3, #2
 8011fe4:	4413      	add	r3, r2
 8011fe6:	68fa      	ldr	r2, [r7, #12]
 8011fe8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8011fea:	4b14      	ldr	r3, [pc, #80]	@ (801203c <FATFS_LinkDriverEx+0x90>)
 8011fec:	7a5b      	ldrb	r3, [r3, #9]
 8011fee:	b2db      	uxtb	r3, r3
 8011ff0:	461a      	mov	r2, r3
 8011ff2:	4b12      	ldr	r3, [pc, #72]	@ (801203c <FATFS_LinkDriverEx+0x90>)
 8011ff4:	4413      	add	r3, r2
 8011ff6:	79fa      	ldrb	r2, [r7, #7]
 8011ff8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011ffa:	4b10      	ldr	r3, [pc, #64]	@ (801203c <FATFS_LinkDriverEx+0x90>)
 8011ffc:	7a5b      	ldrb	r3, [r3, #9]
 8011ffe:	b2db      	uxtb	r3, r3
 8012000:	1c5a      	adds	r2, r3, #1
 8012002:	b2d1      	uxtb	r1, r2
 8012004:	4a0d      	ldr	r2, [pc, #52]	@ (801203c <FATFS_LinkDriverEx+0x90>)
 8012006:	7251      	strb	r1, [r2, #9]
 8012008:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801200a:	7dbb      	ldrb	r3, [r7, #22]
 801200c:	3330      	adds	r3, #48	@ 0x30
 801200e:	b2da      	uxtb	r2, r3
 8012010:	68bb      	ldr	r3, [r7, #8]
 8012012:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012014:	68bb      	ldr	r3, [r7, #8]
 8012016:	3301      	adds	r3, #1
 8012018:	223a      	movs	r2, #58	@ 0x3a
 801201a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801201c:	68bb      	ldr	r3, [r7, #8]
 801201e:	3302      	adds	r3, #2
 8012020:	222f      	movs	r2, #47	@ 0x2f
 8012022:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012024:	68bb      	ldr	r3, [r7, #8]
 8012026:	3303      	adds	r3, #3
 8012028:	2200      	movs	r2, #0
 801202a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801202c:	2300      	movs	r3, #0
 801202e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8012030:	7dfb      	ldrb	r3, [r7, #23]
}
 8012032:	4618      	mov	r0, r3
 8012034:	371c      	adds	r7, #28
 8012036:	46bd      	mov	sp, r7
 8012038:	bc80      	pop	{r7}
 801203a:	4770      	bx	lr
 801203c:	20001328 	.word	0x20001328

08012040 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b082      	sub	sp, #8
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
 8012048:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801204a:	2200      	movs	r2, #0
 801204c:	6839      	ldr	r1, [r7, #0]
 801204e:	6878      	ldr	r0, [r7, #4]
 8012050:	f7ff ffac 	bl	8011fac <FATFS_LinkDriverEx>
 8012054:	4603      	mov	r3, r0
}
 8012056:	4618      	mov	r0, r3
 8012058:	3708      	adds	r7, #8
 801205a:	46bd      	mov	sp, r7
 801205c:	bd80      	pop	{r7, pc}
	...

08012060 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b082      	sub	sp, #8
 8012064:	af00      	add	r7, sp, #0
 8012066:	4603      	mov	r3, r0
 8012068:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801206a:	4b0b      	ldr	r3, [pc, #44]	@ (8012098 <SD_initialize+0x38>)
 801206c:	2201      	movs	r2, #1
 801206e:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8012070:	f7fc fbd4 	bl	800e81c <BSP_SD_Init>
 8012074:	4603      	mov	r3, r0
 8012076:	2b00      	cmp	r3, #0
 8012078:	d107      	bne.n	801208a <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801207a:	4b07      	ldr	r3, [pc, #28]	@ (8012098 <SD_initialize+0x38>)
 801207c:	781b      	ldrb	r3, [r3, #0]
 801207e:	b2db      	uxtb	r3, r3
 8012080:	f023 0301 	bic.w	r3, r3, #1
 8012084:	b2da      	uxtb	r2, r3
 8012086:	4b04      	ldr	r3, [pc, #16]	@ (8012098 <SD_initialize+0x38>)
 8012088:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801208a:	4b03      	ldr	r3, [pc, #12]	@ (8012098 <SD_initialize+0x38>)
 801208c:	781b      	ldrb	r3, [r3, #0]
 801208e:	b2db      	uxtb	r3, r3
}
 8012090:	4618      	mov	r0, r3
 8012092:	3708      	adds	r7, #8
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}
 8012098:	2000003d 	.word	0x2000003d

0801209c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b082      	sub	sp, #8
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	4603      	mov	r3, r0
 80120a4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80120a6:	4b0b      	ldr	r3, [pc, #44]	@ (80120d4 <SD_status+0x38>)
 80120a8:	2201      	movs	r2, #1
 80120aa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80120ac:	f7fc fc0a 	bl	800e8c4 <BSP_SD_GetCardState>
 80120b0:	4603      	mov	r3, r0
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d107      	bne.n	80120c6 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80120b6:	4b07      	ldr	r3, [pc, #28]	@ (80120d4 <SD_status+0x38>)
 80120b8:	781b      	ldrb	r3, [r3, #0]
 80120ba:	b2db      	uxtb	r3, r3
 80120bc:	f023 0301 	bic.w	r3, r3, #1
 80120c0:	b2da      	uxtb	r2, r3
 80120c2:	4b04      	ldr	r3, [pc, #16]	@ (80120d4 <SD_status+0x38>)
 80120c4:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 80120c6:	4b03      	ldr	r3, [pc, #12]	@ (80120d4 <SD_status+0x38>)
 80120c8:	781b      	ldrb	r3, [r3, #0]
 80120ca:	b2db      	uxtb	r3, r3
}
 80120cc:	4618      	mov	r0, r3
 80120ce:	3708      	adds	r7, #8
 80120d0:	46bd      	mov	sp, r7
 80120d2:	bd80      	pop	{r7, pc}
 80120d4:	2000003d 	.word	0x2000003d

080120d8 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b086      	sub	sp, #24
 80120dc:	af00      	add	r7, sp, #0
 80120de:	60b9      	str	r1, [r7, #8]
 80120e0:	607a      	str	r2, [r7, #4]
 80120e2:	603b      	str	r3, [r7, #0]
 80120e4:	4603      	mov	r3, r0
 80120e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80120e8:	2301      	movs	r3, #1
 80120ea:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 80120ec:	4b0f      	ldr	r3, [pc, #60]	@ (801212c <SD_read+0x54>)
 80120ee:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 80120f0:	4b0f      	ldr	r3, [pc, #60]	@ (8012130 <SD_read+0x58>)
 80120f2:	683a      	ldr	r2, [r7, #0]
 80120f4:	6879      	ldr	r1, [r7, #4]
 80120f6:	68b8      	ldr	r0, [r7, #8]
 80120f8:	f7fc fba8 	bl	800e84c <BSP_SD_ReadBlocks>
 80120fc:	4603      	mov	r3, r0
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d10e      	bne.n	8012120 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8012102:	e006      	b.n	8012112 <SD_read+0x3a>
    {
      if (timeout-- == 0)
 8012104:	693b      	ldr	r3, [r7, #16]
 8012106:	1e5a      	subs	r2, r3, #1
 8012108:	613a      	str	r2, [r7, #16]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d101      	bne.n	8012112 <SD_read+0x3a>
      {
        return RES_ERROR;
 801210e:	2301      	movs	r3, #1
 8012110:	e007      	b.n	8012122 <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8012112:	f7fc fbd7 	bl	800e8c4 <BSP_SD_GetCardState>
 8012116:	4603      	mov	r3, r0
 8012118:	2b00      	cmp	r3, #0
 801211a:	d1f3      	bne.n	8012104 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 801211c:	2300      	movs	r3, #0
 801211e:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8012120:	7dfb      	ldrb	r3, [r7, #23]
}
 8012122:	4618      	mov	r0, r3
 8012124:	3718      	adds	r7, #24
 8012126:	46bd      	mov	sp, r7
 8012128:	bd80      	pop	{r7, pc}
 801212a:	bf00      	nop
 801212c:	000186a0 	.word	0x000186a0
 8012130:	05f5e100 	.word	0x05f5e100

08012134 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b086      	sub	sp, #24
 8012138:	af00      	add	r7, sp, #0
 801213a:	60b9      	str	r1, [r7, #8]
 801213c:	607a      	str	r2, [r7, #4]
 801213e:	603b      	str	r3, [r7, #0]
 8012140:	4603      	mov	r3, r0
 8012142:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012144:	2301      	movs	r3, #1
 8012146:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8012148:	4b0f      	ldr	r3, [pc, #60]	@ (8012188 <SD_write+0x54>)
 801214a:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 801214c:	4b0f      	ldr	r3, [pc, #60]	@ (801218c <SD_write+0x58>)
 801214e:	683a      	ldr	r2, [r7, #0]
 8012150:	6879      	ldr	r1, [r7, #4]
 8012152:	68b8      	ldr	r0, [r7, #8]
 8012154:	f7fc fb98 	bl	800e888 <BSP_SD_WriteBlocks>
 8012158:	4603      	mov	r3, r0
 801215a:	2b00      	cmp	r3, #0
 801215c:	d10e      	bne.n	801217c <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 801215e:	e006      	b.n	801216e <SD_write+0x3a>
    {
      if (timeout-- == 0)
 8012160:	693b      	ldr	r3, [r7, #16]
 8012162:	1e5a      	subs	r2, r3, #1
 8012164:	613a      	str	r2, [r7, #16]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d101      	bne.n	801216e <SD_write+0x3a>
      {
        return RES_ERROR;
 801216a:	2301      	movs	r3, #1
 801216c:	e007      	b.n	801217e <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 801216e:	f7fc fba9 	bl	800e8c4 <BSP_SD_GetCardState>
 8012172:	4603      	mov	r3, r0
 8012174:	2b00      	cmp	r3, #0
 8012176:	d1f3      	bne.n	8012160 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 8012178:	2300      	movs	r3, #0
 801217a:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 801217c:	7dfb      	ldrb	r3, [r7, #23]
}
 801217e:	4618      	mov	r0, r3
 8012180:	3718      	adds	r7, #24
 8012182:	46bd      	mov	sp, r7
 8012184:	bd80      	pop	{r7, pc}
 8012186:	bf00      	nop
 8012188:	000186a0 	.word	0x000186a0
 801218c:	05f5e100 	.word	0x05f5e100

08012190 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b08c      	sub	sp, #48	@ 0x30
 8012194:	af00      	add	r7, sp, #0
 8012196:	4603      	mov	r3, r0
 8012198:	603a      	str	r2, [r7, #0]
 801219a:	71fb      	strb	r3, [r7, #7]
 801219c:	460b      	mov	r3, r1
 801219e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80121a0:	2301      	movs	r3, #1
 80121a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80121a6:	4b24      	ldr	r3, [pc, #144]	@ (8012238 <SD_ioctl+0xa8>)
 80121a8:	781b      	ldrb	r3, [r3, #0]
 80121aa:	b2db      	uxtb	r3, r3
 80121ac:	f003 0301 	and.w	r3, r3, #1
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d001      	beq.n	80121b8 <SD_ioctl+0x28>
 80121b4:	2303      	movs	r3, #3
 80121b6:	e03b      	b.n	8012230 <SD_ioctl+0xa0>
  
  switch (cmd)
 80121b8:	79bb      	ldrb	r3, [r7, #6]
 80121ba:	2b03      	cmp	r3, #3
 80121bc:	d833      	bhi.n	8012226 <SD_ioctl+0x96>
 80121be:	a201      	add	r2, pc, #4	@ (adr r2, 80121c4 <SD_ioctl+0x34>)
 80121c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121c4:	080121d5 	.word	0x080121d5
 80121c8:	080121dd 	.word	0x080121dd
 80121cc:	080121f5 	.word	0x080121f5
 80121d0:	0801220f 	.word	0x0801220f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80121d4:	2300      	movs	r3, #0
 80121d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80121da:	e027      	b.n	801222c <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80121dc:	f107 030c 	add.w	r3, r7, #12
 80121e0:	4618      	mov	r0, r3
 80121e2:	f7fc fb7f 	bl	800e8e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80121e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80121e8:	683b      	ldr	r3, [r7, #0]
 80121ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80121ec:	2300      	movs	r3, #0
 80121ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80121f2:	e01b      	b.n	801222c <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80121f4:	f107 030c 	add.w	r3, r7, #12
 80121f8:	4618      	mov	r0, r3
 80121fa:	f7fc fb73 	bl	800e8e4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80121fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012200:	b29a      	uxth	r2, r3
 8012202:	683b      	ldr	r3, [r7, #0]
 8012204:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012206:	2300      	movs	r3, #0
 8012208:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801220c:	e00e      	b.n	801222c <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801220e:	f107 030c 	add.w	r3, r7, #12
 8012212:	4618      	mov	r0, r3
 8012214:	f7fc fb66 	bl	800e8e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8012218:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801221a:	683b      	ldr	r3, [r7, #0]
 801221c:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801221e:	2300      	movs	r3, #0
 8012220:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8012224:	e002      	b.n	801222c <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 8012226:	2304      	movs	r3, #4
 8012228:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }
  
  return res;
 801222c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012230:	4618      	mov	r0, r3
 8012232:	3730      	adds	r7, #48	@ 0x30
 8012234:	46bd      	mov	sp, r7
 8012236:	bd80      	pop	{r7, pc}
 8012238:	2000003d 	.word	0x2000003d

0801223c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 801223c:	b480      	push	{r7}
 801223e:	b085      	sub	sp, #20
 8012240:	af00      	add	r7, sp, #0
 8012242:	4603      	mov	r3, r0
 8012244:	6039      	str	r1, [r7, #0]
 8012246:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8012248:	88fb      	ldrh	r3, [r7, #6]
 801224a:	2b7f      	cmp	r3, #127	@ 0x7f
 801224c:	d802      	bhi.n	8012254 <ff_convert+0x18>
		c = chr;
 801224e:	88fb      	ldrh	r3, [r7, #6]
 8012250:	81fb      	strh	r3, [r7, #14]
 8012252:	e025      	b.n	80122a0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8012254:	683b      	ldr	r3, [r7, #0]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d00b      	beq.n	8012272 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801225a:	88fb      	ldrh	r3, [r7, #6]
 801225c:	2bff      	cmp	r3, #255	@ 0xff
 801225e:	d805      	bhi.n	801226c <ff_convert+0x30>
 8012260:	88fb      	ldrh	r3, [r7, #6]
 8012262:	3b80      	subs	r3, #128	@ 0x80
 8012264:	4a11      	ldr	r2, [pc, #68]	@ (80122ac <ff_convert+0x70>)
 8012266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801226a:	e000      	b.n	801226e <ff_convert+0x32>
 801226c:	2300      	movs	r3, #0
 801226e:	81fb      	strh	r3, [r7, #14]
 8012270:	e016      	b.n	80122a0 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8012272:	2300      	movs	r3, #0
 8012274:	81fb      	strh	r3, [r7, #14]
 8012276:	e009      	b.n	801228c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8012278:	89fb      	ldrh	r3, [r7, #14]
 801227a:	4a0c      	ldr	r2, [pc, #48]	@ (80122ac <ff_convert+0x70>)
 801227c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012280:	88fa      	ldrh	r2, [r7, #6]
 8012282:	429a      	cmp	r2, r3
 8012284:	d006      	beq.n	8012294 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8012286:	89fb      	ldrh	r3, [r7, #14]
 8012288:	3301      	adds	r3, #1
 801228a:	81fb      	strh	r3, [r7, #14]
 801228c:	89fb      	ldrh	r3, [r7, #14]
 801228e:	2b7f      	cmp	r3, #127	@ 0x7f
 8012290:	d9f2      	bls.n	8012278 <ff_convert+0x3c>
 8012292:	e000      	b.n	8012296 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8012294:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8012296:	89fb      	ldrh	r3, [r7, #14]
 8012298:	3380      	adds	r3, #128	@ 0x80
 801229a:	b29b      	uxth	r3, r3
 801229c:	b2db      	uxtb	r3, r3
 801229e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80122a0:	89fb      	ldrh	r3, [r7, #14]
}
 80122a2:	4618      	mov	r0, r3
 80122a4:	3714      	adds	r7, #20
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bc80      	pop	{r7}
 80122aa:	4770      	bx	lr
 80122ac:	08016008 	.word	0x08016008

080122b0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 80122b0:	b480      	push	{r7}
 80122b2:	b085      	sub	sp, #20
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	4603      	mov	r3, r0
 80122b8:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80122ba:	2300      	movs	r3, #0
 80122bc:	60fb      	str	r3, [r7, #12]
 80122be:	e002      	b.n	80122c6 <ff_wtoupper+0x16>
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	3301      	adds	r3, #1
 80122c4:	60fb      	str	r3, [r7, #12]
 80122c6:	4a0f      	ldr	r2, [pc, #60]	@ (8012304 <ff_wtoupper+0x54>)
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d006      	beq.n	80122e0 <ff_wtoupper+0x30>
 80122d2:	4a0c      	ldr	r2, [pc, #48]	@ (8012304 <ff_wtoupper+0x54>)
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80122da:	88fa      	ldrh	r2, [r7, #6]
 80122dc:	429a      	cmp	r2, r3
 80122de:	d1ef      	bne.n	80122c0 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80122e0:	4a08      	ldr	r2, [pc, #32]	@ (8012304 <ff_wtoupper+0x54>)
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d004      	beq.n	80122f6 <ff_wtoupper+0x46>
 80122ec:	4a06      	ldr	r2, [pc, #24]	@ (8012308 <ff_wtoupper+0x58>)
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80122f4:	e000      	b.n	80122f8 <ff_wtoupper+0x48>
 80122f6:	88fb      	ldrh	r3, [r7, #6]
}
 80122f8:	4618      	mov	r0, r3
 80122fa:	3714      	adds	r7, #20
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bc80      	pop	{r7}
 8012300:	4770      	bx	lr
 8012302:	bf00      	nop
 8012304:	08016108 	.word	0x08016108
 8012308:	080162e8 	.word	0x080162e8

0801230c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b086      	sub	sp, #24
 8012310:	af00      	add	r7, sp, #0
 8012312:	4603      	mov	r3, r0
 8012314:	6039      	str	r1, [r7, #0]
 8012316:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 8012318:	2300      	movs	r3, #0
 801231a:	60fb      	str	r3, [r7, #12]
 801231c:	2300      	movs	r3, #0
 801231e:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 8012320:	f107 030c 	add.w	r3, r7, #12
 8012324:	2101      	movs	r1, #1
 8012326:	4618      	mov	r0, r3
 8012328:	f000 f8cb 	bl	80124c2 <osSemaphoreCreate>
 801232c:	4602      	mov	r2, r0
 801232e:	683b      	ldr	r3, [r7, #0]
 8012330:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 8012332:	683b      	ldr	r3, [r7, #0]
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	2b00      	cmp	r3, #0
 8012338:	bf14      	ite	ne
 801233a:	2301      	movne	r3, #1
 801233c:	2300      	moveq	r3, #0
 801233e:	b2db      	uxtb	r3, r3
 8012340:	617b      	str	r3, [r7, #20]
  
  return ret;
 8012342:	697b      	ldr	r3, [r7, #20]
}
 8012344:	4618      	mov	r0, r3
 8012346:	3718      	adds	r7, #24
 8012348:	46bd      	mov	sp, r7
 801234a:	bd80      	pop	{r7, pc}

0801234c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b082      	sub	sp, #8
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 8012354:	6878      	ldr	r0, [r7, #4]
 8012356:	f000 f96b 	bl	8012630 <osSemaphoreDelete>
  return 1;
 801235a:	2301      	movs	r3, #1
}
 801235c:	4618      	mov	r0, r3
 801235e:	3708      	adds	r7, #8
 8012360:	46bd      	mov	sp, r7
 8012362:	bd80      	pop	{r7, pc}

08012364 <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b084      	sub	sp, #16
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 801236c:	2300      	movs	r3, #0
 801236e:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8012370:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012374:	6878      	ldr	r0, [r7, #4]
 8012376:	f000 f8d7 	bl	8012528 <osSemaphoreWait>
 801237a:	4603      	mov	r3, r0
 801237c:	2b00      	cmp	r3, #0
 801237e:	d101      	bne.n	8012384 <ff_req_grant+0x20>
  {
    ret = 1;
 8012380:	2301      	movs	r3, #1
 8012382:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8012384:	68fb      	ldr	r3, [r7, #12]
}
 8012386:	4618      	mov	r0, r3
 8012388:	3710      	adds	r7, #16
 801238a:	46bd      	mov	sp, r7
 801238c:	bd80      	pop	{r7, pc}

0801238e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801238e:	b580      	push	{r7, lr}
 8012390:	b082      	sub	sp, #8
 8012392:	af00      	add	r7, sp, #0
 8012394:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 8012396:	6878      	ldr	r0, [r7, #4]
 8012398:	f000 f914 	bl	80125c4 <osSemaphoreRelease>
}
 801239c:	bf00      	nop
 801239e:	3708      	adds	r7, #8
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}

080123a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80123a4:	b480      	push	{r7}
 80123a6:	b085      	sub	sp, #20
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	4603      	mov	r3, r0
 80123ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80123ae:	2300      	movs	r3, #0
 80123b0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80123b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80123b6:	2b84      	cmp	r3, #132	@ 0x84
 80123b8:	d005      	beq.n	80123c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80123ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	4413      	add	r3, r2
 80123c2:	3303      	adds	r3, #3
 80123c4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80123c6:	68fb      	ldr	r3, [r7, #12]
}
 80123c8:	4618      	mov	r0, r3
 80123ca:	3714      	adds	r7, #20
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bc80      	pop	{r7}
 80123d0:	4770      	bx	lr

080123d2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80123d2:	b480      	push	{r7}
 80123d4:	b083      	sub	sp, #12
 80123d6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80123d8:	f3ef 8305 	mrs	r3, IPSR
 80123dc:	607b      	str	r3, [r7, #4]
  return(result);
 80123de:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	bf14      	ite	ne
 80123e4:	2301      	movne	r3, #1
 80123e6:	2300      	moveq	r3, #0
 80123e8:	b2db      	uxtb	r3, r3
}
 80123ea:	4618      	mov	r0, r3
 80123ec:	370c      	adds	r7, #12
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bc80      	pop	{r7}
 80123f2:	4770      	bx	lr

080123f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80123f8:	f001 fb34 	bl	8013a64 <vTaskStartScheduler>
  
  return osOK;
 80123fc:	2300      	movs	r3, #0
}
 80123fe:	4618      	mov	r0, r3
 8012400:	bd80      	pop	{r7, pc}

08012402 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012402:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012404:	b089      	sub	sp, #36	@ 0x24
 8012406:	af04      	add	r7, sp, #16
 8012408:	6078      	str	r0, [r7, #4]
 801240a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	695b      	ldr	r3, [r3, #20]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d020      	beq.n	8012456 <osThreadCreate+0x54>
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	699b      	ldr	r3, [r3, #24]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d01c      	beq.n	8012456 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	685c      	ldr	r4, [r3, #4]
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	691e      	ldr	r6, [r3, #16]
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801242e:	4618      	mov	r0, r3
 8012430:	f7ff ffb8 	bl	80123a4 <makeFreeRtosPriority>
 8012434:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	695b      	ldr	r3, [r3, #20]
 801243a:	687a      	ldr	r2, [r7, #4]
 801243c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801243e:	9202      	str	r2, [sp, #8]
 8012440:	9301      	str	r3, [sp, #4]
 8012442:	9100      	str	r1, [sp, #0]
 8012444:	683b      	ldr	r3, [r7, #0]
 8012446:	4632      	mov	r2, r6
 8012448:	4629      	mov	r1, r5
 801244a:	4620      	mov	r0, r4
 801244c:	f000 ff90 	bl	8013370 <xTaskCreateStatic>
 8012450:	4603      	mov	r3, r0
 8012452:	60fb      	str	r3, [r7, #12]
 8012454:	e01c      	b.n	8012490 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	685c      	ldr	r4, [r3, #4]
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012462:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801246a:	4618      	mov	r0, r3
 801246c:	f7ff ff9a 	bl	80123a4 <makeFreeRtosPriority>
 8012470:	4602      	mov	r2, r0
 8012472:	f107 030c 	add.w	r3, r7, #12
 8012476:	9301      	str	r3, [sp, #4]
 8012478:	9200      	str	r2, [sp, #0]
 801247a:	683b      	ldr	r3, [r7, #0]
 801247c:	4632      	mov	r2, r6
 801247e:	4629      	mov	r1, r5
 8012480:	4620      	mov	r0, r4
 8012482:	f000 ffd4 	bl	801342e <xTaskCreate>
 8012486:	4603      	mov	r3, r0
 8012488:	2b01      	cmp	r3, #1
 801248a:	d001      	beq.n	8012490 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801248c:	2300      	movs	r3, #0
 801248e:	e000      	b.n	8012492 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8012490:	68fb      	ldr	r3, [r7, #12]
}
 8012492:	4618      	mov	r0, r3
 8012494:	3714      	adds	r7, #20
 8012496:	46bd      	mov	sp, r7
 8012498:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801249a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801249a:	b580      	push	{r7, lr}
 801249c:	b084      	sub	sp, #16
 801249e:	af00      	add	r7, sp, #0
 80124a0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d001      	beq.n	80124b0 <osDelay+0x16>
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	e000      	b.n	80124b2 <osDelay+0x18>
 80124b0:	2301      	movs	r3, #1
 80124b2:	4618      	mov	r0, r3
 80124b4:	f001 f972 	bl	801379c <vTaskDelay>
  
  return osOK;
 80124b8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80124ba:	4618      	mov	r0, r3
 80124bc:	3710      	adds	r7, #16
 80124be:	46bd      	mov	sp, r7
 80124c0:	bd80      	pop	{r7, pc}

080124c2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80124c2:	b580      	push	{r7, lr}
 80124c4:	b086      	sub	sp, #24
 80124c6:	af02      	add	r7, sp, #8
 80124c8:	6078      	str	r0, [r7, #4]
 80124ca:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	685b      	ldr	r3, [r3, #4]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d00f      	beq.n	80124f4 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80124d4:	683b      	ldr	r3, [r7, #0]
 80124d6:	2b01      	cmp	r3, #1
 80124d8:	d10a      	bne.n	80124f0 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	685b      	ldr	r3, [r3, #4]
 80124de:	2203      	movs	r2, #3
 80124e0:	9200      	str	r2, [sp, #0]
 80124e2:	2200      	movs	r2, #0
 80124e4:	2100      	movs	r1, #0
 80124e6:	2001      	movs	r0, #1
 80124e8:	f000 f9ce 	bl	8012888 <xQueueGenericCreateStatic>
 80124ec:	4603      	mov	r3, r0
 80124ee:	e016      	b.n	801251e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80124f0:	2300      	movs	r3, #0
 80124f2:	e014      	b.n	801251e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	2b01      	cmp	r3, #1
 80124f8:	d110      	bne.n	801251c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80124fa:	2203      	movs	r2, #3
 80124fc:	2100      	movs	r1, #0
 80124fe:	2001      	movs	r0, #1
 8012500:	f000 fa3e 	bl	8012980 <xQueueGenericCreate>
 8012504:	60f8      	str	r0, [r7, #12]
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d005      	beq.n	8012518 <osSemaphoreCreate+0x56>
 801250c:	2300      	movs	r3, #0
 801250e:	2200      	movs	r2, #0
 8012510:	2100      	movs	r1, #0
 8012512:	68f8      	ldr	r0, [r7, #12]
 8012514:	f000 fa92 	bl	8012a3c <xQueueGenericSend>
      return sema;
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	e000      	b.n	801251e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 801251c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 801251e:	4618      	mov	r0, r3
 8012520:	3710      	adds	r7, #16
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}
	...

08012528 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b084      	sub	sp, #16
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
 8012530:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012532:	2300      	movs	r3, #0
 8012534:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d101      	bne.n	8012540 <osSemaphoreWait+0x18>
    return osErrorParameter;
 801253c:	2380      	movs	r3, #128	@ 0x80
 801253e:	e03a      	b.n	80125b6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8012540:	2300      	movs	r3, #0
 8012542:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8012544:	683b      	ldr	r3, [r7, #0]
 8012546:	f1b3 3fff 	cmp.w	r3, #4294967295
 801254a:	d103      	bne.n	8012554 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 801254c:	f04f 33ff 	mov.w	r3, #4294967295
 8012550:	60fb      	str	r3, [r7, #12]
 8012552:	e009      	b.n	8012568 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8012554:	683b      	ldr	r3, [r7, #0]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d006      	beq.n	8012568 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d101      	bne.n	8012568 <osSemaphoreWait+0x40>
      ticks = 1;
 8012564:	2301      	movs	r3, #1
 8012566:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8012568:	f7ff ff33 	bl	80123d2 <inHandlerMode>
 801256c:	4603      	mov	r3, r0
 801256e:	2b00      	cmp	r3, #0
 8012570:	d017      	beq.n	80125a2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012572:	f107 0308 	add.w	r3, r7, #8
 8012576:	461a      	mov	r2, r3
 8012578:	2100      	movs	r1, #0
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f000 fd00 	bl	8012f80 <xQueueReceiveFromISR>
 8012580:	4603      	mov	r3, r0
 8012582:	2b01      	cmp	r3, #1
 8012584:	d001      	beq.n	801258a <osSemaphoreWait+0x62>
      return osErrorOS;
 8012586:	23ff      	movs	r3, #255	@ 0xff
 8012588:	e015      	b.n	80125b6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801258a:	68bb      	ldr	r3, [r7, #8]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d011      	beq.n	80125b4 <osSemaphoreWait+0x8c>
 8012590:	4b0b      	ldr	r3, [pc, #44]	@ (80125c0 <osSemaphoreWait+0x98>)
 8012592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012596:	601a      	str	r2, [r3, #0]
 8012598:	f3bf 8f4f 	dsb	sy
 801259c:	f3bf 8f6f 	isb	sy
 80125a0:	e008      	b.n	80125b4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80125a2:	68f9      	ldr	r1, [r7, #12]
 80125a4:	6878      	ldr	r0, [r7, #4]
 80125a6:	f000 fbdb 	bl	8012d60 <xQueueSemaphoreTake>
 80125aa:	4603      	mov	r3, r0
 80125ac:	2b01      	cmp	r3, #1
 80125ae:	d001      	beq.n	80125b4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80125b0:	23ff      	movs	r3, #255	@ 0xff
 80125b2:	e000      	b.n	80125b6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80125b4:	2300      	movs	r3, #0
}
 80125b6:	4618      	mov	r0, r3
 80125b8:	3710      	adds	r7, #16
 80125ba:	46bd      	mov	sp, r7
 80125bc:	bd80      	pop	{r7, pc}
 80125be:	bf00      	nop
 80125c0:	e000ed04 	.word	0xe000ed04

080125c4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b084      	sub	sp, #16
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80125cc:	2300      	movs	r3, #0
 80125ce:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80125d0:	2300      	movs	r3, #0
 80125d2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80125d4:	f7ff fefd 	bl	80123d2 <inHandlerMode>
 80125d8:	4603      	mov	r3, r0
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d016      	beq.n	801260c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80125de:	f107 0308 	add.w	r3, r7, #8
 80125e2:	4619      	mov	r1, r3
 80125e4:	6878      	ldr	r0, [r7, #4]
 80125e6:	f000 fb2b 	bl	8012c40 <xQueueGiveFromISR>
 80125ea:	4603      	mov	r3, r0
 80125ec:	2b01      	cmp	r3, #1
 80125ee:	d001      	beq.n	80125f4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80125f0:	23ff      	movs	r3, #255	@ 0xff
 80125f2:	e017      	b.n	8012624 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80125f4:	68bb      	ldr	r3, [r7, #8]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d013      	beq.n	8012622 <osSemaphoreRelease+0x5e>
 80125fa:	4b0c      	ldr	r3, [pc, #48]	@ (801262c <osSemaphoreRelease+0x68>)
 80125fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012600:	601a      	str	r2, [r3, #0]
 8012602:	f3bf 8f4f 	dsb	sy
 8012606:	f3bf 8f6f 	isb	sy
 801260a:	e00a      	b.n	8012622 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 801260c:	2300      	movs	r3, #0
 801260e:	2200      	movs	r2, #0
 8012610:	2100      	movs	r1, #0
 8012612:	6878      	ldr	r0, [r7, #4]
 8012614:	f000 fa12 	bl	8012a3c <xQueueGenericSend>
 8012618:	4603      	mov	r3, r0
 801261a:	2b01      	cmp	r3, #1
 801261c:	d001      	beq.n	8012622 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801261e:	23ff      	movs	r3, #255	@ 0xff
 8012620:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8012622:	68fb      	ldr	r3, [r7, #12]
}
 8012624:	4618      	mov	r0, r3
 8012626:	3710      	adds	r7, #16
 8012628:	46bd      	mov	sp, r7
 801262a:	bd80      	pop	{r7, pc}
 801262c:	e000ed04 	.word	0xe000ed04

08012630 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b082      	sub	sp, #8
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8012638:	f7ff fecb 	bl	80123d2 <inHandlerMode>
 801263c:	4603      	mov	r3, r0
 801263e:	2b00      	cmp	r3, #0
 8012640:	d001      	beq.n	8012646 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8012642:	2382      	movs	r3, #130	@ 0x82
 8012644:	e003      	b.n	801264e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8012646:	6878      	ldr	r0, [r7, #4]
 8012648:	f000 fd1c 	bl	8013084 <vQueueDelete>

  return osOK; 
 801264c:	2300      	movs	r3, #0
}
 801264e:	4618      	mov	r0, r3
 8012650:	3708      	adds	r7, #8
 8012652:	46bd      	mov	sp, r7
 8012654:	bd80      	pop	{r7, pc}

08012656 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012656:	b480      	push	{r7}
 8012658:	b083      	sub	sp, #12
 801265a:	af00      	add	r7, sp, #0
 801265c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	f103 0208 	add.w	r2, r3, #8
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	f04f 32ff 	mov.w	r2, #4294967295
 801266e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	f103 0208 	add.w	r2, r3, #8
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	f103 0208 	add.w	r2, r3, #8
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	2200      	movs	r2, #0
 8012688:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801268a:	bf00      	nop
 801268c:	370c      	adds	r7, #12
 801268e:	46bd      	mov	sp, r7
 8012690:	bc80      	pop	{r7}
 8012692:	4770      	bx	lr

08012694 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012694:	b480      	push	{r7}
 8012696:	b083      	sub	sp, #12
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	2200      	movs	r2, #0
 80126a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80126a2:	bf00      	nop
 80126a4:	370c      	adds	r7, #12
 80126a6:	46bd      	mov	sp, r7
 80126a8:	bc80      	pop	{r7}
 80126aa:	4770      	bx	lr

080126ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80126ac:	b480      	push	{r7}
 80126ae:	b085      	sub	sp, #20
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
 80126b4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	685b      	ldr	r3, [r3, #4]
 80126ba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80126bc:	683b      	ldr	r3, [r7, #0]
 80126be:	68fa      	ldr	r2, [r7, #12]
 80126c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	689a      	ldr	r2, [r3, #8]
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	689b      	ldr	r3, [r3, #8]
 80126ce:	683a      	ldr	r2, [r7, #0]
 80126d0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	683a      	ldr	r2, [r7, #0]
 80126d6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80126d8:	683b      	ldr	r3, [r7, #0]
 80126da:	687a      	ldr	r2, [r7, #4]
 80126dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	1c5a      	adds	r2, r3, #1
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	601a      	str	r2, [r3, #0]
}
 80126e8:	bf00      	nop
 80126ea:	3714      	adds	r7, #20
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bc80      	pop	{r7}
 80126f0:	4770      	bx	lr

080126f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80126f2:	b480      	push	{r7}
 80126f4:	b085      	sub	sp, #20
 80126f6:	af00      	add	r7, sp, #0
 80126f8:	6078      	str	r0, [r7, #4]
 80126fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012702:	68bb      	ldr	r3, [r7, #8]
 8012704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012708:	d103      	bne.n	8012712 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	691b      	ldr	r3, [r3, #16]
 801270e:	60fb      	str	r3, [r7, #12]
 8012710:	e00c      	b.n	801272c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	3308      	adds	r3, #8
 8012716:	60fb      	str	r3, [r7, #12]
 8012718:	e002      	b.n	8012720 <vListInsert+0x2e>
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	685b      	ldr	r3, [r3, #4]
 801271e:	60fb      	str	r3, [r7, #12]
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	685b      	ldr	r3, [r3, #4]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	68ba      	ldr	r2, [r7, #8]
 8012728:	429a      	cmp	r2, r3
 801272a:	d2f6      	bcs.n	801271a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	685a      	ldr	r2, [r3, #4]
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012734:	683b      	ldr	r3, [r7, #0]
 8012736:	685b      	ldr	r3, [r3, #4]
 8012738:	683a      	ldr	r2, [r7, #0]
 801273a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801273c:	683b      	ldr	r3, [r7, #0]
 801273e:	68fa      	ldr	r2, [r7, #12]
 8012740:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	683a      	ldr	r2, [r7, #0]
 8012746:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	687a      	ldr	r2, [r7, #4]
 801274c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	1c5a      	adds	r2, r3, #1
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	601a      	str	r2, [r3, #0]
}
 8012758:	bf00      	nop
 801275a:	3714      	adds	r7, #20
 801275c:	46bd      	mov	sp, r7
 801275e:	bc80      	pop	{r7}
 8012760:	4770      	bx	lr

08012762 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012762:	b480      	push	{r7}
 8012764:	b085      	sub	sp, #20
 8012766:	af00      	add	r7, sp, #0
 8012768:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	691b      	ldr	r3, [r3, #16]
 801276e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	685b      	ldr	r3, [r3, #4]
 8012774:	687a      	ldr	r2, [r7, #4]
 8012776:	6892      	ldr	r2, [r2, #8]
 8012778:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	689b      	ldr	r3, [r3, #8]
 801277e:	687a      	ldr	r2, [r7, #4]
 8012780:	6852      	ldr	r2, [r2, #4]
 8012782:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	685b      	ldr	r3, [r3, #4]
 8012788:	687a      	ldr	r2, [r7, #4]
 801278a:	429a      	cmp	r2, r3
 801278c:	d103      	bne.n	8012796 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	689a      	ldr	r2, [r3, #8]
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	2200      	movs	r2, #0
 801279a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	1e5a      	subs	r2, r3, #1
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	681b      	ldr	r3, [r3, #0]
}
 80127aa:	4618      	mov	r0, r3
 80127ac:	3714      	adds	r7, #20
 80127ae:	46bd      	mov	sp, r7
 80127b0:	bc80      	pop	{r7}
 80127b2:	4770      	bx	lr

080127b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b084      	sub	sp, #16
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
 80127bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d10b      	bne.n	80127e0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80127c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127cc:	f383 8811 	msr	BASEPRI, r3
 80127d0:	f3bf 8f6f 	isb	sy
 80127d4:	f3bf 8f4f 	dsb	sy
 80127d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80127da:	bf00      	nop
 80127dc:	bf00      	nop
 80127de:	e7fd      	b.n	80127dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80127e0:	f002 f8d4 	bl	801498c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	681a      	ldr	r2, [r3, #0]
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80127ec:	68f9      	ldr	r1, [r7, #12]
 80127ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80127f0:	fb01 f303 	mul.w	r3, r1, r3
 80127f4:	441a      	add	r2, r3
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	2200      	movs	r2, #0
 80127fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	681a      	ldr	r2, [r3, #0]
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	681a      	ldr	r2, [r3, #0]
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012810:	3b01      	subs	r3, #1
 8012812:	68f9      	ldr	r1, [r7, #12]
 8012814:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012816:	fb01 f303 	mul.w	r3, r1, r3
 801281a:	441a      	add	r2, r3
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	22ff      	movs	r2, #255	@ 0xff
 8012824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	22ff      	movs	r2, #255	@ 0xff
 801282c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8012830:	683b      	ldr	r3, [r7, #0]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d114      	bne.n	8012860 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	691b      	ldr	r3, [r3, #16]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d01a      	beq.n	8012874 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	3310      	adds	r3, #16
 8012842:	4618      	mov	r0, r3
 8012844:	f001 fb6a 	bl	8013f1c <xTaskRemoveFromEventList>
 8012848:	4603      	mov	r3, r0
 801284a:	2b00      	cmp	r3, #0
 801284c:	d012      	beq.n	8012874 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801284e:	4b0d      	ldr	r3, [pc, #52]	@ (8012884 <xQueueGenericReset+0xd0>)
 8012850:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012854:	601a      	str	r2, [r3, #0]
 8012856:	f3bf 8f4f 	dsb	sy
 801285a:	f3bf 8f6f 	isb	sy
 801285e:	e009      	b.n	8012874 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	3310      	adds	r3, #16
 8012864:	4618      	mov	r0, r3
 8012866:	f7ff fef6 	bl	8012656 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	3324      	adds	r3, #36	@ 0x24
 801286e:	4618      	mov	r0, r3
 8012870:	f7ff fef1 	bl	8012656 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012874:	f002 f8ba 	bl	80149ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012878:	2301      	movs	r3, #1
}
 801287a:	4618      	mov	r0, r3
 801287c:	3710      	adds	r7, #16
 801287e:	46bd      	mov	sp, r7
 8012880:	bd80      	pop	{r7, pc}
 8012882:	bf00      	nop
 8012884:	e000ed04 	.word	0xe000ed04

08012888 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012888:	b580      	push	{r7, lr}
 801288a:	b08e      	sub	sp, #56	@ 0x38
 801288c:	af02      	add	r7, sp, #8
 801288e:	60f8      	str	r0, [r7, #12]
 8012890:	60b9      	str	r1, [r7, #8]
 8012892:	607a      	str	r2, [r7, #4]
 8012894:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d10b      	bne.n	80128b4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 801289c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128a0:	f383 8811 	msr	BASEPRI, r3
 80128a4:	f3bf 8f6f 	isb	sy
 80128a8:	f3bf 8f4f 	dsb	sy
 80128ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80128ae:	bf00      	nop
 80128b0:	bf00      	nop
 80128b2:	e7fd      	b.n	80128b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d10b      	bne.n	80128d2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80128ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128be:	f383 8811 	msr	BASEPRI, r3
 80128c2:	f3bf 8f6f 	isb	sy
 80128c6:	f3bf 8f4f 	dsb	sy
 80128ca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80128cc:	bf00      	nop
 80128ce:	bf00      	nop
 80128d0:	e7fd      	b.n	80128ce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d002      	beq.n	80128de <xQueueGenericCreateStatic+0x56>
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d001      	beq.n	80128e2 <xQueueGenericCreateStatic+0x5a>
 80128de:	2301      	movs	r3, #1
 80128e0:	e000      	b.n	80128e4 <xQueueGenericCreateStatic+0x5c>
 80128e2:	2300      	movs	r3, #0
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d10b      	bne.n	8012900 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80128e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128ec:	f383 8811 	msr	BASEPRI, r3
 80128f0:	f3bf 8f6f 	isb	sy
 80128f4:	f3bf 8f4f 	dsb	sy
 80128f8:	623b      	str	r3, [r7, #32]
}
 80128fa:	bf00      	nop
 80128fc:	bf00      	nop
 80128fe:	e7fd      	b.n	80128fc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d102      	bne.n	801290c <xQueueGenericCreateStatic+0x84>
 8012906:	68bb      	ldr	r3, [r7, #8]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d101      	bne.n	8012910 <xQueueGenericCreateStatic+0x88>
 801290c:	2301      	movs	r3, #1
 801290e:	e000      	b.n	8012912 <xQueueGenericCreateStatic+0x8a>
 8012910:	2300      	movs	r3, #0
 8012912:	2b00      	cmp	r3, #0
 8012914:	d10b      	bne.n	801292e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8012916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801291a:	f383 8811 	msr	BASEPRI, r3
 801291e:	f3bf 8f6f 	isb	sy
 8012922:	f3bf 8f4f 	dsb	sy
 8012926:	61fb      	str	r3, [r7, #28]
}
 8012928:	bf00      	nop
 801292a:	bf00      	nop
 801292c:	e7fd      	b.n	801292a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801292e:	2348      	movs	r3, #72	@ 0x48
 8012930:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012932:	697b      	ldr	r3, [r7, #20]
 8012934:	2b48      	cmp	r3, #72	@ 0x48
 8012936:	d00b      	beq.n	8012950 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8012938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801293c:	f383 8811 	msr	BASEPRI, r3
 8012940:	f3bf 8f6f 	isb	sy
 8012944:	f3bf 8f4f 	dsb	sy
 8012948:	61bb      	str	r3, [r7, #24]
}
 801294a:	bf00      	nop
 801294c:	bf00      	nop
 801294e:	e7fd      	b.n	801294c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012950:	683b      	ldr	r3, [r7, #0]
 8012952:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8012954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012956:	2b00      	cmp	r3, #0
 8012958:	d00d      	beq.n	8012976 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801295a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801295c:	2201      	movs	r2, #1
 801295e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012962:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8012966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012968:	9300      	str	r3, [sp, #0]
 801296a:	4613      	mov	r3, r2
 801296c:	687a      	ldr	r2, [r7, #4]
 801296e:	68b9      	ldr	r1, [r7, #8]
 8012970:	68f8      	ldr	r0, [r7, #12]
 8012972:	f000 f844 	bl	80129fe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8012976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8012978:	4618      	mov	r0, r3
 801297a:	3730      	adds	r7, #48	@ 0x30
 801297c:	46bd      	mov	sp, r7
 801297e:	bd80      	pop	{r7, pc}

08012980 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012980:	b580      	push	{r7, lr}
 8012982:	b08a      	sub	sp, #40	@ 0x28
 8012984:	af02      	add	r7, sp, #8
 8012986:	60f8      	str	r0, [r7, #12]
 8012988:	60b9      	str	r1, [r7, #8]
 801298a:	4613      	mov	r3, r2
 801298c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d10b      	bne.n	80129ac <xQueueGenericCreate+0x2c>
	__asm volatile
 8012994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012998:	f383 8811 	msr	BASEPRI, r3
 801299c:	f3bf 8f6f 	isb	sy
 80129a0:	f3bf 8f4f 	dsb	sy
 80129a4:	613b      	str	r3, [r7, #16]
}
 80129a6:	bf00      	nop
 80129a8:	bf00      	nop
 80129aa:	e7fd      	b.n	80129a8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80129ac:	68bb      	ldr	r3, [r7, #8]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d102      	bne.n	80129b8 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80129b2:	2300      	movs	r3, #0
 80129b4:	61fb      	str	r3, [r7, #28]
 80129b6:	e004      	b.n	80129c2 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	68ba      	ldr	r2, [r7, #8]
 80129bc:	fb02 f303 	mul.w	r3, r2, r3
 80129c0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80129c2:	69fb      	ldr	r3, [r7, #28]
 80129c4:	3348      	adds	r3, #72	@ 0x48
 80129c6:	4618      	mov	r0, r3
 80129c8:	f002 f8e2 	bl	8014b90 <pvPortMalloc>
 80129cc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80129ce:	69bb      	ldr	r3, [r7, #24]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d00f      	beq.n	80129f4 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80129d4:	69bb      	ldr	r3, [r7, #24]
 80129d6:	3348      	adds	r3, #72	@ 0x48
 80129d8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80129da:	69bb      	ldr	r3, [r7, #24]
 80129dc:	2200      	movs	r2, #0
 80129de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80129e2:	79fa      	ldrb	r2, [r7, #7]
 80129e4:	69bb      	ldr	r3, [r7, #24]
 80129e6:	9300      	str	r3, [sp, #0]
 80129e8:	4613      	mov	r3, r2
 80129ea:	697a      	ldr	r2, [r7, #20]
 80129ec:	68b9      	ldr	r1, [r7, #8]
 80129ee:	68f8      	ldr	r0, [r7, #12]
 80129f0:	f000 f805 	bl	80129fe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80129f4:	69bb      	ldr	r3, [r7, #24]
	}
 80129f6:	4618      	mov	r0, r3
 80129f8:	3720      	adds	r7, #32
 80129fa:	46bd      	mov	sp, r7
 80129fc:	bd80      	pop	{r7, pc}

080129fe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80129fe:	b580      	push	{r7, lr}
 8012a00:	b084      	sub	sp, #16
 8012a02:	af00      	add	r7, sp, #0
 8012a04:	60f8      	str	r0, [r7, #12]
 8012a06:	60b9      	str	r1, [r7, #8]
 8012a08:	607a      	str	r2, [r7, #4]
 8012a0a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012a0c:	68bb      	ldr	r3, [r7, #8]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d103      	bne.n	8012a1a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012a12:	69bb      	ldr	r3, [r7, #24]
 8012a14:	69ba      	ldr	r2, [r7, #24]
 8012a16:	601a      	str	r2, [r3, #0]
 8012a18:	e002      	b.n	8012a20 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012a1a:	69bb      	ldr	r3, [r7, #24]
 8012a1c:	687a      	ldr	r2, [r7, #4]
 8012a1e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012a20:	69bb      	ldr	r3, [r7, #24]
 8012a22:	68fa      	ldr	r2, [r7, #12]
 8012a24:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012a26:	69bb      	ldr	r3, [r7, #24]
 8012a28:	68ba      	ldr	r2, [r7, #8]
 8012a2a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012a2c:	2101      	movs	r1, #1
 8012a2e:	69b8      	ldr	r0, [r7, #24]
 8012a30:	f7ff fec0 	bl	80127b4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012a34:	bf00      	nop
 8012a36:	3710      	adds	r7, #16
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	bd80      	pop	{r7, pc}

08012a3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b08e      	sub	sp, #56	@ 0x38
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	60f8      	str	r0, [r7, #12]
 8012a44:	60b9      	str	r1, [r7, #8]
 8012a46:	607a      	str	r2, [r7, #4]
 8012a48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8012a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d10b      	bne.n	8012a70 <xQueueGenericSend+0x34>
	__asm volatile
 8012a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a5c:	f383 8811 	msr	BASEPRI, r3
 8012a60:	f3bf 8f6f 	isb	sy
 8012a64:	f3bf 8f4f 	dsb	sy
 8012a68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012a6a:	bf00      	nop
 8012a6c:	bf00      	nop
 8012a6e:	e7fd      	b.n	8012a6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012a70:	68bb      	ldr	r3, [r7, #8]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d103      	bne.n	8012a7e <xQueueGenericSend+0x42>
 8012a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d101      	bne.n	8012a82 <xQueueGenericSend+0x46>
 8012a7e:	2301      	movs	r3, #1
 8012a80:	e000      	b.n	8012a84 <xQueueGenericSend+0x48>
 8012a82:	2300      	movs	r3, #0
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d10b      	bne.n	8012aa0 <xQueueGenericSend+0x64>
	__asm volatile
 8012a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a8c:	f383 8811 	msr	BASEPRI, r3
 8012a90:	f3bf 8f6f 	isb	sy
 8012a94:	f3bf 8f4f 	dsb	sy
 8012a98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012a9a:	bf00      	nop
 8012a9c:	bf00      	nop
 8012a9e:	e7fd      	b.n	8012a9c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012aa0:	683b      	ldr	r3, [r7, #0]
 8012aa2:	2b02      	cmp	r3, #2
 8012aa4:	d103      	bne.n	8012aae <xQueueGenericSend+0x72>
 8012aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012aaa:	2b01      	cmp	r3, #1
 8012aac:	d101      	bne.n	8012ab2 <xQueueGenericSend+0x76>
 8012aae:	2301      	movs	r3, #1
 8012ab0:	e000      	b.n	8012ab4 <xQueueGenericSend+0x78>
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d10b      	bne.n	8012ad0 <xQueueGenericSend+0x94>
	__asm volatile
 8012ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012abc:	f383 8811 	msr	BASEPRI, r3
 8012ac0:	f3bf 8f6f 	isb	sy
 8012ac4:	f3bf 8f4f 	dsb	sy
 8012ac8:	623b      	str	r3, [r7, #32]
}
 8012aca:	bf00      	nop
 8012acc:	bf00      	nop
 8012ace:	e7fd      	b.n	8012acc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012ad0:	f001 fc20 	bl	8014314 <xTaskGetSchedulerState>
 8012ad4:	4603      	mov	r3, r0
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d102      	bne.n	8012ae0 <xQueueGenericSend+0xa4>
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d101      	bne.n	8012ae4 <xQueueGenericSend+0xa8>
 8012ae0:	2301      	movs	r3, #1
 8012ae2:	e000      	b.n	8012ae6 <xQueueGenericSend+0xaa>
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d10b      	bne.n	8012b02 <xQueueGenericSend+0xc6>
	__asm volatile
 8012aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012aee:	f383 8811 	msr	BASEPRI, r3
 8012af2:	f3bf 8f6f 	isb	sy
 8012af6:	f3bf 8f4f 	dsb	sy
 8012afa:	61fb      	str	r3, [r7, #28]
}
 8012afc:	bf00      	nop
 8012afe:	bf00      	nop
 8012b00:	e7fd      	b.n	8012afe <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012b02:	f001 ff43 	bl	801498c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b0e:	429a      	cmp	r2, r3
 8012b10:	d302      	bcc.n	8012b18 <xQueueGenericSend+0xdc>
 8012b12:	683b      	ldr	r3, [r7, #0]
 8012b14:	2b02      	cmp	r3, #2
 8012b16:	d129      	bne.n	8012b6c <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012b18:	683a      	ldr	r2, [r7, #0]
 8012b1a:	68b9      	ldr	r1, [r7, #8]
 8012b1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012b1e:	f000 faec 	bl	80130fa <prvCopyDataToQueue>
 8012b22:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d010      	beq.n	8012b4e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b2e:	3324      	adds	r3, #36	@ 0x24
 8012b30:	4618      	mov	r0, r3
 8012b32:	f001 f9f3 	bl	8013f1c <xTaskRemoveFromEventList>
 8012b36:	4603      	mov	r3, r0
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d013      	beq.n	8012b64 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012b3c:	4b3f      	ldr	r3, [pc, #252]	@ (8012c3c <xQueueGenericSend+0x200>)
 8012b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012b42:	601a      	str	r2, [r3, #0]
 8012b44:	f3bf 8f4f 	dsb	sy
 8012b48:	f3bf 8f6f 	isb	sy
 8012b4c:	e00a      	b.n	8012b64 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d007      	beq.n	8012b64 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012b54:	4b39      	ldr	r3, [pc, #228]	@ (8012c3c <xQueueGenericSend+0x200>)
 8012b56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012b5a:	601a      	str	r2, [r3, #0]
 8012b5c:	f3bf 8f4f 	dsb	sy
 8012b60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012b64:	f001 ff42 	bl	80149ec <vPortExitCritical>
				return pdPASS;
 8012b68:	2301      	movs	r3, #1
 8012b6a:	e063      	b.n	8012c34 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d103      	bne.n	8012b7a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012b72:	f001 ff3b 	bl	80149ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012b76:	2300      	movs	r3, #0
 8012b78:	e05c      	b.n	8012c34 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d106      	bne.n	8012b8e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012b80:	f107 0314 	add.w	r3, r7, #20
 8012b84:	4618      	mov	r0, r3
 8012b86:	f001 fa2d 	bl	8013fe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012b8a:	2301      	movs	r3, #1
 8012b8c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012b8e:	f001 ff2d 	bl	80149ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012b92:	f000 ffc9 	bl	8013b28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012b96:	f001 fef9 	bl	801498c <vPortEnterCritical>
 8012b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012ba0:	b25b      	sxtb	r3, r3
 8012ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ba6:	d103      	bne.n	8012bb0 <xQueueGenericSend+0x174>
 8012ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012baa:	2200      	movs	r2, #0
 8012bac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012bb6:	b25b      	sxtb	r3, r3
 8012bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bbc:	d103      	bne.n	8012bc6 <xQueueGenericSend+0x18a>
 8012bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012bc6:	f001 ff11 	bl	80149ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012bca:	1d3a      	adds	r2, r7, #4
 8012bcc:	f107 0314 	add.w	r3, r7, #20
 8012bd0:	4611      	mov	r1, r2
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f001 fa1c 	bl	8014010 <xTaskCheckForTimeOut>
 8012bd8:	4603      	mov	r3, r0
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d124      	bne.n	8012c28 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012bde:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012be0:	f000 fb83 	bl	80132ea <prvIsQueueFull>
 8012be4:	4603      	mov	r3, r0
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d018      	beq.n	8012c1c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bec:	3310      	adds	r3, #16
 8012bee:	687a      	ldr	r2, [r7, #4]
 8012bf0:	4611      	mov	r1, r2
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	f001 f96c 	bl	8013ed0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012bf8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012bfa:	f000 fb0e 	bl	801321a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012bfe:	f000 ffa1 	bl	8013b44 <xTaskResumeAll>
 8012c02:	4603      	mov	r3, r0
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	f47f af7c 	bne.w	8012b02 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8012c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8012c3c <xQueueGenericSend+0x200>)
 8012c0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012c10:	601a      	str	r2, [r3, #0]
 8012c12:	f3bf 8f4f 	dsb	sy
 8012c16:	f3bf 8f6f 	isb	sy
 8012c1a:	e772      	b.n	8012b02 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012c1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012c1e:	f000 fafc 	bl	801321a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012c22:	f000 ff8f 	bl	8013b44 <xTaskResumeAll>
 8012c26:	e76c      	b.n	8012b02 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012c28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012c2a:	f000 faf6 	bl	801321a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012c2e:	f000 ff89 	bl	8013b44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012c32:	2300      	movs	r3, #0
		}
	}
}
 8012c34:	4618      	mov	r0, r3
 8012c36:	3738      	adds	r7, #56	@ 0x38
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	bd80      	pop	{r7, pc}
 8012c3c:	e000ed04 	.word	0xe000ed04

08012c40 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b08e      	sub	sp, #56	@ 0x38
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
 8012c48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d10b      	bne.n	8012c6c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8012c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c58:	f383 8811 	msr	BASEPRI, r3
 8012c5c:	f3bf 8f6f 	isb	sy
 8012c60:	f3bf 8f4f 	dsb	sy
 8012c64:	623b      	str	r3, [r7, #32]
}
 8012c66:	bf00      	nop
 8012c68:	bf00      	nop
 8012c6a:	e7fd      	b.n	8012c68 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d00b      	beq.n	8012c8c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8012c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c78:	f383 8811 	msr	BASEPRI, r3
 8012c7c:	f3bf 8f6f 	isb	sy
 8012c80:	f3bf 8f4f 	dsb	sy
 8012c84:	61fb      	str	r3, [r7, #28]
}
 8012c86:	bf00      	nop
 8012c88:	bf00      	nop
 8012c8a:	e7fd      	b.n	8012c88 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8012c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d103      	bne.n	8012c9c <xQueueGiveFromISR+0x5c>
 8012c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c96:	685b      	ldr	r3, [r3, #4]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d101      	bne.n	8012ca0 <xQueueGiveFromISR+0x60>
 8012c9c:	2301      	movs	r3, #1
 8012c9e:	e000      	b.n	8012ca2 <xQueueGiveFromISR+0x62>
 8012ca0:	2300      	movs	r3, #0
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d10b      	bne.n	8012cbe <xQueueGiveFromISR+0x7e>
	__asm volatile
 8012ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012caa:	f383 8811 	msr	BASEPRI, r3
 8012cae:	f3bf 8f6f 	isb	sy
 8012cb2:	f3bf 8f4f 	dsb	sy
 8012cb6:	61bb      	str	r3, [r7, #24]
}
 8012cb8:	bf00      	nop
 8012cba:	bf00      	nop
 8012cbc:	e7fd      	b.n	8012cba <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012cbe:	f001 ff27 	bl	8014b10 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012cc2:	f3ef 8211 	mrs	r2, BASEPRI
 8012cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cca:	f383 8811 	msr	BASEPRI, r3
 8012cce:	f3bf 8f6f 	isb	sy
 8012cd2:	f3bf 8f4f 	dsb	sy
 8012cd6:	617a      	str	r2, [r7, #20]
 8012cd8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012cda:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ce2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012ce8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012cea:	429a      	cmp	r2, r3
 8012cec:	d22b      	bcs.n	8012d46 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cf0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012cf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cfa:	1c5a      	adds	r2, r3, #1
 8012cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cfe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012d00:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d08:	d112      	bne.n	8012d30 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d016      	beq.n	8012d40 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d14:	3324      	adds	r3, #36	@ 0x24
 8012d16:	4618      	mov	r0, r3
 8012d18:	f001 f900 	bl	8013f1c <xTaskRemoveFromEventList>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d00e      	beq.n	8012d40 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012d22:	683b      	ldr	r3, [r7, #0]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d00b      	beq.n	8012d40 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012d28:	683b      	ldr	r3, [r7, #0]
 8012d2a:	2201      	movs	r2, #1
 8012d2c:	601a      	str	r2, [r3, #0]
 8012d2e:	e007      	b.n	8012d40 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012d30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d34:	3301      	adds	r3, #1
 8012d36:	b2db      	uxtb	r3, r3
 8012d38:	b25a      	sxtb	r2, r3
 8012d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8012d40:	2301      	movs	r3, #1
 8012d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8012d44:	e001      	b.n	8012d4a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012d46:	2300      	movs	r3, #0
 8012d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8012d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d4c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012d54:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8012d58:	4618      	mov	r0, r3
 8012d5a:	3738      	adds	r7, #56	@ 0x38
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd80      	pop	{r7, pc}

08012d60 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b08e      	sub	sp, #56	@ 0x38
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
 8012d68:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012d72:	2300      	movs	r3, #0
 8012d74:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d10b      	bne.n	8012d94 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8012d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d80:	f383 8811 	msr	BASEPRI, r3
 8012d84:	f3bf 8f6f 	isb	sy
 8012d88:	f3bf 8f4f 	dsb	sy
 8012d8c:	623b      	str	r3, [r7, #32]
}
 8012d8e:	bf00      	nop
 8012d90:	bf00      	nop
 8012d92:	e7fd      	b.n	8012d90 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d00b      	beq.n	8012db4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8012d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012da0:	f383 8811 	msr	BASEPRI, r3
 8012da4:	f3bf 8f6f 	isb	sy
 8012da8:	f3bf 8f4f 	dsb	sy
 8012dac:	61fb      	str	r3, [r7, #28]
}
 8012dae:	bf00      	nop
 8012db0:	bf00      	nop
 8012db2:	e7fd      	b.n	8012db0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012db4:	f001 faae 	bl	8014314 <xTaskGetSchedulerState>
 8012db8:	4603      	mov	r3, r0
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d102      	bne.n	8012dc4 <xQueueSemaphoreTake+0x64>
 8012dbe:	683b      	ldr	r3, [r7, #0]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d101      	bne.n	8012dc8 <xQueueSemaphoreTake+0x68>
 8012dc4:	2301      	movs	r3, #1
 8012dc6:	e000      	b.n	8012dca <xQueueSemaphoreTake+0x6a>
 8012dc8:	2300      	movs	r3, #0
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d10b      	bne.n	8012de6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8012dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012dd2:	f383 8811 	msr	BASEPRI, r3
 8012dd6:	f3bf 8f6f 	isb	sy
 8012dda:	f3bf 8f4f 	dsb	sy
 8012dde:	61bb      	str	r3, [r7, #24]
}
 8012de0:	bf00      	nop
 8012de2:	bf00      	nop
 8012de4:	e7fd      	b.n	8012de2 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8012de6:	f001 fdd1 	bl	801498c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012dee:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d024      	beq.n	8012e40 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012df8:	1e5a      	subs	r2, r3, #1
 8012dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dfc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d104      	bne.n	8012e10 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8012e06:	f001 fc53 	bl	80146b0 <pvTaskIncrementMutexHeldCount>
 8012e0a:	4602      	mov	r2, r0
 8012e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e0e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e12:	691b      	ldr	r3, [r3, #16]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d00f      	beq.n	8012e38 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e1a:	3310      	adds	r3, #16
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	f001 f87d 	bl	8013f1c <xTaskRemoveFromEventList>
 8012e22:	4603      	mov	r3, r0
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d007      	beq.n	8012e38 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012e28:	4b54      	ldr	r3, [pc, #336]	@ (8012f7c <xQueueSemaphoreTake+0x21c>)
 8012e2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012e2e:	601a      	str	r2, [r3, #0]
 8012e30:	f3bf 8f4f 	dsb	sy
 8012e34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012e38:	f001 fdd8 	bl	80149ec <vPortExitCritical>
				return pdPASS;
 8012e3c:	2301      	movs	r3, #1
 8012e3e:	e098      	b.n	8012f72 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012e40:	683b      	ldr	r3, [r7, #0]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d112      	bne.n	8012e6c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d00b      	beq.n	8012e64 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8012e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e50:	f383 8811 	msr	BASEPRI, r3
 8012e54:	f3bf 8f6f 	isb	sy
 8012e58:	f3bf 8f4f 	dsb	sy
 8012e5c:	617b      	str	r3, [r7, #20]
}
 8012e5e:	bf00      	nop
 8012e60:	bf00      	nop
 8012e62:	e7fd      	b.n	8012e60 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012e64:	f001 fdc2 	bl	80149ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012e68:	2300      	movs	r3, #0
 8012e6a:	e082      	b.n	8012f72 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d106      	bne.n	8012e80 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012e72:	f107 030c 	add.w	r3, r7, #12
 8012e76:	4618      	mov	r0, r3
 8012e78:	f001 f8b4 	bl	8013fe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012e7c:	2301      	movs	r3, #1
 8012e7e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012e80:	f001 fdb4 	bl	80149ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012e84:	f000 fe50 	bl	8013b28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012e88:	f001 fd80 	bl	801498c <vPortEnterCritical>
 8012e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e8e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012e92:	b25b      	sxtb	r3, r3
 8012e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e98:	d103      	bne.n	8012ea2 <xQueueSemaphoreTake+0x142>
 8012e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ea4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012ea8:	b25b      	sxtb	r3, r3
 8012eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012eae:	d103      	bne.n	8012eb8 <xQueueSemaphoreTake+0x158>
 8012eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012eb8:	f001 fd98 	bl	80149ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012ebc:	463a      	mov	r2, r7
 8012ebe:	f107 030c 	add.w	r3, r7, #12
 8012ec2:	4611      	mov	r1, r2
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f001 f8a3 	bl	8014010 <xTaskCheckForTimeOut>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d132      	bne.n	8012f36 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012ed0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012ed2:	f000 f9f4 	bl	80132be <prvIsQueueEmpty>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d026      	beq.n	8012f2a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d109      	bne.n	8012ef8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8012ee4:	f001 fd52 	bl	801498c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8012ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012eea:	685b      	ldr	r3, [r3, #4]
 8012eec:	4618      	mov	r0, r3
 8012eee:	f001 fa2f 	bl	8014350 <xTaskPriorityInherit>
 8012ef2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8012ef4:	f001 fd7a 	bl	80149ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012efa:	3324      	adds	r3, #36	@ 0x24
 8012efc:	683a      	ldr	r2, [r7, #0]
 8012efe:	4611      	mov	r1, r2
 8012f00:	4618      	mov	r0, r3
 8012f02:	f000 ffe5 	bl	8013ed0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012f06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012f08:	f000 f987 	bl	801321a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012f0c:	f000 fe1a 	bl	8013b44 <xTaskResumeAll>
 8012f10:	4603      	mov	r3, r0
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	f47f af67 	bne.w	8012de6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8012f18:	4b18      	ldr	r3, [pc, #96]	@ (8012f7c <xQueueSemaphoreTake+0x21c>)
 8012f1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012f1e:	601a      	str	r2, [r3, #0]
 8012f20:	f3bf 8f4f 	dsb	sy
 8012f24:	f3bf 8f6f 	isb	sy
 8012f28:	e75d      	b.n	8012de6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012f2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012f2c:	f000 f975 	bl	801321a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012f30:	f000 fe08 	bl	8013b44 <xTaskResumeAll>
 8012f34:	e757      	b.n	8012de6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012f36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012f38:	f000 f96f 	bl	801321a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012f3c:	f000 fe02 	bl	8013b44 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012f40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012f42:	f000 f9bc 	bl	80132be <prvIsQueueEmpty>
 8012f46:	4603      	mov	r3, r0
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	f43f af4c 	beq.w	8012de6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d00d      	beq.n	8012f70 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8012f54:	f001 fd1a 	bl	801498c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012f58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012f5a:	f000 f8b7 	bl	80130cc <prvGetDisinheritPriorityAfterTimeout>
 8012f5e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8012f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f62:	685b      	ldr	r3, [r3, #4]
 8012f64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012f66:	4618      	mov	r0, r3
 8012f68:	f001 fb00 	bl	801456c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012f6c:	f001 fd3e 	bl	80149ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012f70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8012f72:	4618      	mov	r0, r3
 8012f74:	3738      	adds	r7, #56	@ 0x38
 8012f76:	46bd      	mov	sp, r7
 8012f78:	bd80      	pop	{r7, pc}
 8012f7a:	bf00      	nop
 8012f7c:	e000ed04 	.word	0xe000ed04

08012f80 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b08e      	sub	sp, #56	@ 0x38
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	60f8      	str	r0, [r7, #12]
 8012f88:	60b9      	str	r1, [r7, #8]
 8012f8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8012f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d10b      	bne.n	8012fae <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8012f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f9a:	f383 8811 	msr	BASEPRI, r3
 8012f9e:	f3bf 8f6f 	isb	sy
 8012fa2:	f3bf 8f4f 	dsb	sy
 8012fa6:	623b      	str	r3, [r7, #32]
}
 8012fa8:	bf00      	nop
 8012faa:	bf00      	nop
 8012fac:	e7fd      	b.n	8012faa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012fae:	68bb      	ldr	r3, [r7, #8]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d103      	bne.n	8012fbc <xQueueReceiveFromISR+0x3c>
 8012fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d101      	bne.n	8012fc0 <xQueueReceiveFromISR+0x40>
 8012fbc:	2301      	movs	r3, #1
 8012fbe:	e000      	b.n	8012fc2 <xQueueReceiveFromISR+0x42>
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d10b      	bne.n	8012fde <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8012fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fca:	f383 8811 	msr	BASEPRI, r3
 8012fce:	f3bf 8f6f 	isb	sy
 8012fd2:	f3bf 8f4f 	dsb	sy
 8012fd6:	61fb      	str	r3, [r7, #28]
}
 8012fd8:	bf00      	nop
 8012fda:	bf00      	nop
 8012fdc:	e7fd      	b.n	8012fda <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012fde:	f001 fd97 	bl	8014b10 <vPortValidateInterruptPriority>
	__asm volatile
 8012fe2:	f3ef 8211 	mrs	r2, BASEPRI
 8012fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fea:	f383 8811 	msr	BASEPRI, r3
 8012fee:	f3bf 8f6f 	isb	sy
 8012ff2:	f3bf 8f4f 	dsb	sy
 8012ff6:	61ba      	str	r2, [r7, #24]
 8012ff8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012ffa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013002:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013006:	2b00      	cmp	r3, #0
 8013008:	d02f      	beq.n	801306a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801300a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801300c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013010:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013014:	68b9      	ldr	r1, [r7, #8]
 8013016:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013018:	f000 f8d9 	bl	80131ce <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801301c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801301e:	1e5a      	subs	r2, r3, #1
 8013020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013022:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013024:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013028:	f1b3 3fff 	cmp.w	r3, #4294967295
 801302c:	d112      	bne.n	8013054 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801302e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013030:	691b      	ldr	r3, [r3, #16]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d016      	beq.n	8013064 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013038:	3310      	adds	r3, #16
 801303a:	4618      	mov	r0, r3
 801303c:	f000 ff6e 	bl	8013f1c <xTaskRemoveFromEventList>
 8013040:	4603      	mov	r3, r0
 8013042:	2b00      	cmp	r3, #0
 8013044:	d00e      	beq.n	8013064 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d00b      	beq.n	8013064 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	2201      	movs	r2, #1
 8013050:	601a      	str	r2, [r3, #0]
 8013052:	e007      	b.n	8013064 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013054:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013058:	3301      	adds	r3, #1
 801305a:	b2db      	uxtb	r3, r3
 801305c:	b25a      	sxtb	r2, r3
 801305e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8013064:	2301      	movs	r3, #1
 8013066:	637b      	str	r3, [r7, #52]	@ 0x34
 8013068:	e001      	b.n	801306e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 801306a:	2300      	movs	r3, #0
 801306c:	637b      	str	r3, [r7, #52]	@ 0x34
 801306e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013070:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013072:	693b      	ldr	r3, [r7, #16]
 8013074:	f383 8811 	msr	BASEPRI, r3
}
 8013078:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801307a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801307c:	4618      	mov	r0, r3
 801307e:	3738      	adds	r7, #56	@ 0x38
 8013080:	46bd      	mov	sp, r7
 8013082:	bd80      	pop	{r7, pc}

08013084 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b084      	sub	sp, #16
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d10b      	bne.n	80130ae <vQueueDelete+0x2a>
	__asm volatile
 8013096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801309a:	f383 8811 	msr	BASEPRI, r3
 801309e:	f3bf 8f6f 	isb	sy
 80130a2:	f3bf 8f4f 	dsb	sy
 80130a6:	60bb      	str	r3, [r7, #8]
}
 80130a8:	bf00      	nop
 80130aa:	bf00      	nop
 80130ac:	e7fd      	b.n	80130aa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80130ae:	68f8      	ldr	r0, [r7, #12]
 80130b0:	f000 f934 	bl	801331c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d102      	bne.n	80130c4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80130be:	68f8      	ldr	r0, [r7, #12]
 80130c0:	f001 fe2e 	bl	8014d20 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80130c4:	bf00      	nop
 80130c6:	3710      	adds	r7, #16
 80130c8:	46bd      	mov	sp, r7
 80130ca:	bd80      	pop	{r7, pc}

080130cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80130cc:	b480      	push	{r7}
 80130ce:	b085      	sub	sp, #20
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d006      	beq.n	80130ea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	f1c3 0307 	rsb	r3, r3, #7
 80130e6:	60fb      	str	r3, [r7, #12]
 80130e8:	e001      	b.n	80130ee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80130ea:	2300      	movs	r3, #0
 80130ec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80130ee:	68fb      	ldr	r3, [r7, #12]
	}
 80130f0:	4618      	mov	r0, r3
 80130f2:	3714      	adds	r7, #20
 80130f4:	46bd      	mov	sp, r7
 80130f6:	bc80      	pop	{r7}
 80130f8:	4770      	bx	lr

080130fa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80130fa:	b580      	push	{r7, lr}
 80130fc:	b086      	sub	sp, #24
 80130fe:	af00      	add	r7, sp, #0
 8013100:	60f8      	str	r0, [r7, #12]
 8013102:	60b9      	str	r1, [r7, #8]
 8013104:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013106:	2300      	movs	r3, #0
 8013108:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801310e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013114:	2b00      	cmp	r3, #0
 8013116:	d10d      	bne.n	8013134 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d14d      	bne.n	80131bc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	685b      	ldr	r3, [r3, #4]
 8013124:	4618      	mov	r0, r3
 8013126:	f001 f999 	bl	801445c <xTaskPriorityDisinherit>
 801312a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	2200      	movs	r2, #0
 8013130:	605a      	str	r2, [r3, #4]
 8013132:	e043      	b.n	80131bc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d119      	bne.n	801316e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	6898      	ldr	r0, [r3, #8]
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013142:	461a      	mov	r2, r3
 8013144:	68b9      	ldr	r1, [r7, #8]
 8013146:	f002 f80f 	bl	8015168 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	689a      	ldr	r2, [r3, #8]
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013152:	441a      	add	r2, r3
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	689a      	ldr	r2, [r3, #8]
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	685b      	ldr	r3, [r3, #4]
 8013160:	429a      	cmp	r2, r3
 8013162:	d32b      	bcc.n	80131bc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	681a      	ldr	r2, [r3, #0]
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	609a      	str	r2, [r3, #8]
 801316c:	e026      	b.n	80131bc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	68d8      	ldr	r0, [r3, #12]
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013176:	461a      	mov	r2, r3
 8013178:	68b9      	ldr	r1, [r7, #8]
 801317a:	f001 fff5 	bl	8015168 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	68da      	ldr	r2, [r3, #12]
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013186:	425b      	negs	r3, r3
 8013188:	441a      	add	r2, r3
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	68da      	ldr	r2, [r3, #12]
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	429a      	cmp	r2, r3
 8013198:	d207      	bcs.n	80131aa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	685a      	ldr	r2, [r3, #4]
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80131a2:	425b      	negs	r3, r3
 80131a4:	441a      	add	r2, r3
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	2b02      	cmp	r3, #2
 80131ae:	d105      	bne.n	80131bc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80131b0:	693b      	ldr	r3, [r7, #16]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d002      	beq.n	80131bc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80131b6:	693b      	ldr	r3, [r7, #16]
 80131b8:	3b01      	subs	r3, #1
 80131ba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80131bc:	693b      	ldr	r3, [r7, #16]
 80131be:	1c5a      	adds	r2, r3, #1
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80131c4:	697b      	ldr	r3, [r7, #20]
}
 80131c6:	4618      	mov	r0, r3
 80131c8:	3718      	adds	r7, #24
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bd80      	pop	{r7, pc}

080131ce <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80131ce:	b580      	push	{r7, lr}
 80131d0:	b082      	sub	sp, #8
 80131d2:	af00      	add	r7, sp, #0
 80131d4:	6078      	str	r0, [r7, #4]
 80131d6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d018      	beq.n	8013212 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	68da      	ldr	r2, [r3, #12]
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80131e8:	441a      	add	r2, r3
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	68da      	ldr	r2, [r3, #12]
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	685b      	ldr	r3, [r3, #4]
 80131f6:	429a      	cmp	r2, r3
 80131f8:	d303      	bcc.n	8013202 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	681a      	ldr	r2, [r3, #0]
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	68d9      	ldr	r1, [r3, #12]
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801320a:	461a      	mov	r2, r3
 801320c:	6838      	ldr	r0, [r7, #0]
 801320e:	f001 ffab 	bl	8015168 <memcpy>
	}
}
 8013212:	bf00      	nop
 8013214:	3708      	adds	r7, #8
 8013216:	46bd      	mov	sp, r7
 8013218:	bd80      	pop	{r7, pc}

0801321a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801321a:	b580      	push	{r7, lr}
 801321c:	b084      	sub	sp, #16
 801321e:	af00      	add	r7, sp, #0
 8013220:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013222:	f001 fbb3 	bl	801498c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801322c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801322e:	e011      	b.n	8013254 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013234:	2b00      	cmp	r3, #0
 8013236:	d012      	beq.n	801325e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	3324      	adds	r3, #36	@ 0x24
 801323c:	4618      	mov	r0, r3
 801323e:	f000 fe6d 	bl	8013f1c <xTaskRemoveFromEventList>
 8013242:	4603      	mov	r3, r0
 8013244:	2b00      	cmp	r3, #0
 8013246:	d001      	beq.n	801324c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013248:	f000 ff46 	bl	80140d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801324c:	7bfb      	ldrb	r3, [r7, #15]
 801324e:	3b01      	subs	r3, #1
 8013250:	b2db      	uxtb	r3, r3
 8013252:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013258:	2b00      	cmp	r3, #0
 801325a:	dce9      	bgt.n	8013230 <prvUnlockQueue+0x16>
 801325c:	e000      	b.n	8013260 <prvUnlockQueue+0x46>
					break;
 801325e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	22ff      	movs	r2, #255	@ 0xff
 8013264:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8013268:	f001 fbc0 	bl	80149ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801326c:	f001 fb8e 	bl	801498c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013276:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013278:	e011      	b.n	801329e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	691b      	ldr	r3, [r3, #16]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d012      	beq.n	80132a8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	3310      	adds	r3, #16
 8013286:	4618      	mov	r0, r3
 8013288:	f000 fe48 	bl	8013f1c <xTaskRemoveFromEventList>
 801328c:	4603      	mov	r3, r0
 801328e:	2b00      	cmp	r3, #0
 8013290:	d001      	beq.n	8013296 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013292:	f000 ff21 	bl	80140d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013296:	7bbb      	ldrb	r3, [r7, #14]
 8013298:	3b01      	subs	r3, #1
 801329a:	b2db      	uxtb	r3, r3
 801329c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801329e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	dce9      	bgt.n	801327a <prvUnlockQueue+0x60>
 80132a6:	e000      	b.n	80132aa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80132a8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	22ff      	movs	r2, #255	@ 0xff
 80132ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80132b2:	f001 fb9b 	bl	80149ec <vPortExitCritical>
}
 80132b6:	bf00      	nop
 80132b8:	3710      	adds	r7, #16
 80132ba:	46bd      	mov	sp, r7
 80132bc:	bd80      	pop	{r7, pc}

080132be <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80132be:	b580      	push	{r7, lr}
 80132c0:	b084      	sub	sp, #16
 80132c2:	af00      	add	r7, sp, #0
 80132c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80132c6:	f001 fb61 	bl	801498c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d102      	bne.n	80132d8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80132d2:	2301      	movs	r3, #1
 80132d4:	60fb      	str	r3, [r7, #12]
 80132d6:	e001      	b.n	80132dc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80132d8:	2300      	movs	r3, #0
 80132da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80132dc:	f001 fb86 	bl	80149ec <vPortExitCritical>

	return xReturn;
 80132e0:	68fb      	ldr	r3, [r7, #12]
}
 80132e2:	4618      	mov	r0, r3
 80132e4:	3710      	adds	r7, #16
 80132e6:	46bd      	mov	sp, r7
 80132e8:	bd80      	pop	{r7, pc}

080132ea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80132ea:	b580      	push	{r7, lr}
 80132ec:	b084      	sub	sp, #16
 80132ee:	af00      	add	r7, sp, #0
 80132f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80132f2:	f001 fb4b 	bl	801498c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80132fe:	429a      	cmp	r2, r3
 8013300:	d102      	bne.n	8013308 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013302:	2301      	movs	r3, #1
 8013304:	60fb      	str	r3, [r7, #12]
 8013306:	e001      	b.n	801330c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013308:	2300      	movs	r3, #0
 801330a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801330c:	f001 fb6e 	bl	80149ec <vPortExitCritical>

	return xReturn;
 8013310:	68fb      	ldr	r3, [r7, #12]
}
 8013312:	4618      	mov	r0, r3
 8013314:	3710      	adds	r7, #16
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
	...

0801331c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801331c:	b480      	push	{r7}
 801331e:	b085      	sub	sp, #20
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013324:	2300      	movs	r3, #0
 8013326:	60fb      	str	r3, [r7, #12]
 8013328:	e016      	b.n	8013358 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801332a:	4a10      	ldr	r2, [pc, #64]	@ (801336c <vQueueUnregisterQueue+0x50>)
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	00db      	lsls	r3, r3, #3
 8013330:	4413      	add	r3, r2
 8013332:	685b      	ldr	r3, [r3, #4]
 8013334:	687a      	ldr	r2, [r7, #4]
 8013336:	429a      	cmp	r2, r3
 8013338:	d10b      	bne.n	8013352 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801333a:	4a0c      	ldr	r2, [pc, #48]	@ (801336c <vQueueUnregisterQueue+0x50>)
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	2100      	movs	r1, #0
 8013340:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013344:	4a09      	ldr	r2, [pc, #36]	@ (801336c <vQueueUnregisterQueue+0x50>)
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	00db      	lsls	r3, r3, #3
 801334a:	4413      	add	r3, r2
 801334c:	2200      	movs	r2, #0
 801334e:	605a      	str	r2, [r3, #4]
				break;
 8013350:	e006      	b.n	8013360 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	3301      	adds	r3, #1
 8013356:	60fb      	str	r3, [r7, #12]
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	2b07      	cmp	r3, #7
 801335c:	d9e5      	bls.n	801332a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801335e:	bf00      	nop
 8013360:	bf00      	nop
 8013362:	3714      	adds	r7, #20
 8013364:	46bd      	mov	sp, r7
 8013366:	bc80      	pop	{r7}
 8013368:	4770      	bx	lr
 801336a:	bf00      	nop
 801336c:	20001334 	.word	0x20001334

08013370 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013370:	b580      	push	{r7, lr}
 8013372:	b08e      	sub	sp, #56	@ 0x38
 8013374:	af04      	add	r7, sp, #16
 8013376:	60f8      	str	r0, [r7, #12]
 8013378:	60b9      	str	r1, [r7, #8]
 801337a:	607a      	str	r2, [r7, #4]
 801337c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801337e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013380:	2b00      	cmp	r3, #0
 8013382:	d10b      	bne.n	801339c <xTaskCreateStatic+0x2c>
	__asm volatile
 8013384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013388:	f383 8811 	msr	BASEPRI, r3
 801338c:	f3bf 8f6f 	isb	sy
 8013390:	f3bf 8f4f 	dsb	sy
 8013394:	623b      	str	r3, [r7, #32]
}
 8013396:	bf00      	nop
 8013398:	bf00      	nop
 801339a:	e7fd      	b.n	8013398 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801339c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d10b      	bne.n	80133ba <xTaskCreateStatic+0x4a>
	__asm volatile
 80133a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133a6:	f383 8811 	msr	BASEPRI, r3
 80133aa:	f3bf 8f6f 	isb	sy
 80133ae:	f3bf 8f4f 	dsb	sy
 80133b2:	61fb      	str	r3, [r7, #28]
}
 80133b4:	bf00      	nop
 80133b6:	bf00      	nop
 80133b8:	e7fd      	b.n	80133b6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80133ba:	2354      	movs	r3, #84	@ 0x54
 80133bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80133be:	693b      	ldr	r3, [r7, #16]
 80133c0:	2b54      	cmp	r3, #84	@ 0x54
 80133c2:	d00b      	beq.n	80133dc <xTaskCreateStatic+0x6c>
	__asm volatile
 80133c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133c8:	f383 8811 	msr	BASEPRI, r3
 80133cc:	f3bf 8f6f 	isb	sy
 80133d0:	f3bf 8f4f 	dsb	sy
 80133d4:	61bb      	str	r3, [r7, #24]
}
 80133d6:	bf00      	nop
 80133d8:	bf00      	nop
 80133da:	e7fd      	b.n	80133d8 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80133dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d01e      	beq.n	8013420 <xTaskCreateStatic+0xb0>
 80133e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d01b      	beq.n	8013420 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80133e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133ea:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80133ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80133f0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80133f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133f4:	2202      	movs	r2, #2
 80133f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80133fa:	2300      	movs	r3, #0
 80133fc:	9303      	str	r3, [sp, #12]
 80133fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013400:	9302      	str	r3, [sp, #8]
 8013402:	f107 0314 	add.w	r3, r7, #20
 8013406:	9301      	str	r3, [sp, #4]
 8013408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801340a:	9300      	str	r3, [sp, #0]
 801340c:	683b      	ldr	r3, [r7, #0]
 801340e:	687a      	ldr	r2, [r7, #4]
 8013410:	68b9      	ldr	r1, [r7, #8]
 8013412:	68f8      	ldr	r0, [r7, #12]
 8013414:	f000 f850 	bl	80134b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013418:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801341a:	f000 f8d5 	bl	80135c8 <prvAddNewTaskToReadyList>
 801341e:	e001      	b.n	8013424 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8013420:	2300      	movs	r3, #0
 8013422:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013424:	697b      	ldr	r3, [r7, #20]
	}
 8013426:	4618      	mov	r0, r3
 8013428:	3728      	adds	r7, #40	@ 0x28
 801342a:	46bd      	mov	sp, r7
 801342c:	bd80      	pop	{r7, pc}

0801342e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801342e:	b580      	push	{r7, lr}
 8013430:	b08c      	sub	sp, #48	@ 0x30
 8013432:	af04      	add	r7, sp, #16
 8013434:	60f8      	str	r0, [r7, #12]
 8013436:	60b9      	str	r1, [r7, #8]
 8013438:	603b      	str	r3, [r7, #0]
 801343a:	4613      	mov	r3, r2
 801343c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801343e:	88fb      	ldrh	r3, [r7, #6]
 8013440:	009b      	lsls	r3, r3, #2
 8013442:	4618      	mov	r0, r3
 8013444:	f001 fba4 	bl	8014b90 <pvPortMalloc>
 8013448:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801344a:	697b      	ldr	r3, [r7, #20]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d00e      	beq.n	801346e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8013450:	2054      	movs	r0, #84	@ 0x54
 8013452:	f001 fb9d 	bl	8014b90 <pvPortMalloc>
 8013456:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013458:	69fb      	ldr	r3, [r7, #28]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d003      	beq.n	8013466 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801345e:	69fb      	ldr	r3, [r7, #28]
 8013460:	697a      	ldr	r2, [r7, #20]
 8013462:	631a      	str	r2, [r3, #48]	@ 0x30
 8013464:	e005      	b.n	8013472 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013466:	6978      	ldr	r0, [r7, #20]
 8013468:	f001 fc5a 	bl	8014d20 <vPortFree>
 801346c:	e001      	b.n	8013472 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801346e:	2300      	movs	r3, #0
 8013470:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013472:	69fb      	ldr	r3, [r7, #28]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d017      	beq.n	80134a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013478:	69fb      	ldr	r3, [r7, #28]
 801347a:	2200      	movs	r2, #0
 801347c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013480:	88fa      	ldrh	r2, [r7, #6]
 8013482:	2300      	movs	r3, #0
 8013484:	9303      	str	r3, [sp, #12]
 8013486:	69fb      	ldr	r3, [r7, #28]
 8013488:	9302      	str	r3, [sp, #8]
 801348a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801348c:	9301      	str	r3, [sp, #4]
 801348e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013490:	9300      	str	r3, [sp, #0]
 8013492:	683b      	ldr	r3, [r7, #0]
 8013494:	68b9      	ldr	r1, [r7, #8]
 8013496:	68f8      	ldr	r0, [r7, #12]
 8013498:	f000 f80e 	bl	80134b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801349c:	69f8      	ldr	r0, [r7, #28]
 801349e:	f000 f893 	bl	80135c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80134a2:	2301      	movs	r3, #1
 80134a4:	61bb      	str	r3, [r7, #24]
 80134a6:	e002      	b.n	80134ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80134a8:	f04f 33ff 	mov.w	r3, #4294967295
 80134ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80134ae:	69bb      	ldr	r3, [r7, #24]
	}
 80134b0:	4618      	mov	r0, r3
 80134b2:	3720      	adds	r7, #32
 80134b4:	46bd      	mov	sp, r7
 80134b6:	bd80      	pop	{r7, pc}

080134b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b088      	sub	sp, #32
 80134bc:	af00      	add	r7, sp, #0
 80134be:	60f8      	str	r0, [r7, #12]
 80134c0:	60b9      	str	r1, [r7, #8]
 80134c2:	607a      	str	r2, [r7, #4]
 80134c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80134c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134c8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	009b      	lsls	r3, r3, #2
 80134ce:	461a      	mov	r2, r3
 80134d0:	21a5      	movs	r1, #165	@ 0xa5
 80134d2:	f001 fe05 	bl	80150e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80134d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80134e0:	3b01      	subs	r3, #1
 80134e2:	009b      	lsls	r3, r3, #2
 80134e4:	4413      	add	r3, r2
 80134e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80134e8:	69bb      	ldr	r3, [r7, #24]
 80134ea:	f023 0307 	bic.w	r3, r3, #7
 80134ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80134f0:	69bb      	ldr	r3, [r7, #24]
 80134f2:	f003 0307 	and.w	r3, r3, #7
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d00b      	beq.n	8013512 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80134fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134fe:	f383 8811 	msr	BASEPRI, r3
 8013502:	f3bf 8f6f 	isb	sy
 8013506:	f3bf 8f4f 	dsb	sy
 801350a:	617b      	str	r3, [r7, #20]
}
 801350c:	bf00      	nop
 801350e:	bf00      	nop
 8013510:	e7fd      	b.n	801350e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013512:	2300      	movs	r3, #0
 8013514:	61fb      	str	r3, [r7, #28]
 8013516:	e012      	b.n	801353e <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013518:	68ba      	ldr	r2, [r7, #8]
 801351a:	69fb      	ldr	r3, [r7, #28]
 801351c:	4413      	add	r3, r2
 801351e:	7819      	ldrb	r1, [r3, #0]
 8013520:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013522:	69fb      	ldr	r3, [r7, #28]
 8013524:	4413      	add	r3, r2
 8013526:	3334      	adds	r3, #52	@ 0x34
 8013528:	460a      	mov	r2, r1
 801352a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 801352c:	68ba      	ldr	r2, [r7, #8]
 801352e:	69fb      	ldr	r3, [r7, #28]
 8013530:	4413      	add	r3, r2
 8013532:	781b      	ldrb	r3, [r3, #0]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d006      	beq.n	8013546 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013538:	69fb      	ldr	r3, [r7, #28]
 801353a:	3301      	adds	r3, #1
 801353c:	61fb      	str	r3, [r7, #28]
 801353e:	69fb      	ldr	r3, [r7, #28]
 8013540:	2b0f      	cmp	r3, #15
 8013542:	d9e9      	bls.n	8013518 <prvInitialiseNewTask+0x60>
 8013544:	e000      	b.n	8013548 <prvInitialiseNewTask+0x90>
		{
			break;
 8013546:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801354a:	2200      	movs	r2, #0
 801354c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013552:	2b06      	cmp	r3, #6
 8013554:	d901      	bls.n	801355a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013556:	2306      	movs	r3, #6
 8013558:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801355a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801355c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801355e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013562:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013564:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013568:	2200      	movs	r2, #0
 801356a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801356c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801356e:	3304      	adds	r3, #4
 8013570:	4618      	mov	r0, r3
 8013572:	f7ff f88f 	bl	8012694 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013578:	3318      	adds	r3, #24
 801357a:	4618      	mov	r0, r3
 801357c:	f7ff f88a 	bl	8012694 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013582:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013584:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013588:	f1c3 0207 	rsb	r2, r3, #7
 801358c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801358e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013594:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013598:	2200      	movs	r2, #0
 801359a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801359c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801359e:	2200      	movs	r2, #0
 80135a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80135a4:	683a      	ldr	r2, [r7, #0]
 80135a6:	68f9      	ldr	r1, [r7, #12]
 80135a8:	69b8      	ldr	r0, [r7, #24]
 80135aa:	f001 f8fb 	bl	80147a4 <pxPortInitialiseStack>
 80135ae:	4602      	mov	r2, r0
 80135b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135b2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80135b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d002      	beq.n	80135c0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80135ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80135be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80135c0:	bf00      	nop
 80135c2:	3720      	adds	r7, #32
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd80      	pop	{r7, pc}

080135c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b082      	sub	sp, #8
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80135d0:	f001 f9dc 	bl	801498c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80135d4:	4b2a      	ldr	r3, [pc, #168]	@ (8013680 <prvAddNewTaskToReadyList+0xb8>)
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	3301      	adds	r3, #1
 80135da:	4a29      	ldr	r2, [pc, #164]	@ (8013680 <prvAddNewTaskToReadyList+0xb8>)
 80135dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80135de:	4b29      	ldr	r3, [pc, #164]	@ (8013684 <prvAddNewTaskToReadyList+0xbc>)
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d109      	bne.n	80135fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80135e6:	4a27      	ldr	r2, [pc, #156]	@ (8013684 <prvAddNewTaskToReadyList+0xbc>)
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80135ec:	4b24      	ldr	r3, [pc, #144]	@ (8013680 <prvAddNewTaskToReadyList+0xb8>)
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	2b01      	cmp	r3, #1
 80135f2:	d110      	bne.n	8013616 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80135f4:	f000 fd94 	bl	8014120 <prvInitialiseTaskLists>
 80135f8:	e00d      	b.n	8013616 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80135fa:	4b23      	ldr	r3, [pc, #140]	@ (8013688 <prvAddNewTaskToReadyList+0xc0>)
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d109      	bne.n	8013616 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013602:	4b20      	ldr	r3, [pc, #128]	@ (8013684 <prvAddNewTaskToReadyList+0xbc>)
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801360c:	429a      	cmp	r2, r3
 801360e:	d802      	bhi.n	8013616 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013610:	4a1c      	ldr	r2, [pc, #112]	@ (8013684 <prvAddNewTaskToReadyList+0xbc>)
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013616:	4b1d      	ldr	r3, [pc, #116]	@ (801368c <prvAddNewTaskToReadyList+0xc4>)
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	3301      	adds	r3, #1
 801361c:	4a1b      	ldr	r2, [pc, #108]	@ (801368c <prvAddNewTaskToReadyList+0xc4>)
 801361e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013624:	2201      	movs	r2, #1
 8013626:	409a      	lsls	r2, r3
 8013628:	4b19      	ldr	r3, [pc, #100]	@ (8013690 <prvAddNewTaskToReadyList+0xc8>)
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	4313      	orrs	r3, r2
 801362e:	4a18      	ldr	r2, [pc, #96]	@ (8013690 <prvAddNewTaskToReadyList+0xc8>)
 8013630:	6013      	str	r3, [r2, #0]
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013636:	4613      	mov	r3, r2
 8013638:	009b      	lsls	r3, r3, #2
 801363a:	4413      	add	r3, r2
 801363c:	009b      	lsls	r3, r3, #2
 801363e:	4a15      	ldr	r2, [pc, #84]	@ (8013694 <prvAddNewTaskToReadyList+0xcc>)
 8013640:	441a      	add	r2, r3
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	3304      	adds	r3, #4
 8013646:	4619      	mov	r1, r3
 8013648:	4610      	mov	r0, r2
 801364a:	f7ff f82f 	bl	80126ac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801364e:	f001 f9cd 	bl	80149ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013652:	4b0d      	ldr	r3, [pc, #52]	@ (8013688 <prvAddNewTaskToReadyList+0xc0>)
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d00e      	beq.n	8013678 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801365a:	4b0a      	ldr	r3, [pc, #40]	@ (8013684 <prvAddNewTaskToReadyList+0xbc>)
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013664:	429a      	cmp	r2, r3
 8013666:	d207      	bcs.n	8013678 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013668:	4b0b      	ldr	r3, [pc, #44]	@ (8013698 <prvAddNewTaskToReadyList+0xd0>)
 801366a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801366e:	601a      	str	r2, [r3, #0]
 8013670:	f3bf 8f4f 	dsb	sy
 8013674:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013678:	bf00      	nop
 801367a:	3708      	adds	r7, #8
 801367c:	46bd      	mov	sp, r7
 801367e:	bd80      	pop	{r7, pc}
 8013680:	20001474 	.word	0x20001474
 8013684:	20001374 	.word	0x20001374
 8013688:	20001480 	.word	0x20001480
 801368c:	20001490 	.word	0x20001490
 8013690:	2000147c 	.word	0x2000147c
 8013694:	20001378 	.word	0x20001378
 8013698:	e000ed04 	.word	0xe000ed04

0801369c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801369c:	b580      	push	{r7, lr}
 801369e:	b08a      	sub	sp, #40	@ 0x28
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	6078      	str	r0, [r7, #4]
 80136a4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80136a6:	2300      	movs	r3, #0
 80136a8:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d10b      	bne.n	80136c8 <vTaskDelayUntil+0x2c>
	__asm volatile
 80136b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136b4:	f383 8811 	msr	BASEPRI, r3
 80136b8:	f3bf 8f6f 	isb	sy
 80136bc:	f3bf 8f4f 	dsb	sy
 80136c0:	617b      	str	r3, [r7, #20]
}
 80136c2:	bf00      	nop
 80136c4:	bf00      	nop
 80136c6:	e7fd      	b.n	80136c4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80136c8:	683b      	ldr	r3, [r7, #0]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d10b      	bne.n	80136e6 <vTaskDelayUntil+0x4a>
	__asm volatile
 80136ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136d2:	f383 8811 	msr	BASEPRI, r3
 80136d6:	f3bf 8f6f 	isb	sy
 80136da:	f3bf 8f4f 	dsb	sy
 80136de:	613b      	str	r3, [r7, #16]
}
 80136e0:	bf00      	nop
 80136e2:	bf00      	nop
 80136e4:	e7fd      	b.n	80136e2 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 80136e6:	4b2a      	ldr	r3, [pc, #168]	@ (8013790 <vTaskDelayUntil+0xf4>)
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d00b      	beq.n	8013706 <vTaskDelayUntil+0x6a>
	__asm volatile
 80136ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136f2:	f383 8811 	msr	BASEPRI, r3
 80136f6:	f3bf 8f6f 	isb	sy
 80136fa:	f3bf 8f4f 	dsb	sy
 80136fe:	60fb      	str	r3, [r7, #12]
}
 8013700:	bf00      	nop
 8013702:	bf00      	nop
 8013704:	e7fd      	b.n	8013702 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8013706:	f000 fa0f 	bl	8013b28 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801370a:	4b22      	ldr	r3, [pc, #136]	@ (8013794 <vTaskDelayUntil+0xf8>)
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	683a      	ldr	r2, [r7, #0]
 8013716:	4413      	add	r3, r2
 8013718:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	6a3a      	ldr	r2, [r7, #32]
 8013720:	429a      	cmp	r2, r3
 8013722:	d20b      	bcs.n	801373c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	69fa      	ldr	r2, [r7, #28]
 801372a:	429a      	cmp	r2, r3
 801372c:	d211      	bcs.n	8013752 <vTaskDelayUntil+0xb6>
 801372e:	69fa      	ldr	r2, [r7, #28]
 8013730:	6a3b      	ldr	r3, [r7, #32]
 8013732:	429a      	cmp	r2, r3
 8013734:	d90d      	bls.n	8013752 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8013736:	2301      	movs	r3, #1
 8013738:	627b      	str	r3, [r7, #36]	@ 0x24
 801373a:	e00a      	b.n	8013752 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	69fa      	ldr	r2, [r7, #28]
 8013742:	429a      	cmp	r2, r3
 8013744:	d303      	bcc.n	801374e <vTaskDelayUntil+0xb2>
 8013746:	69fa      	ldr	r2, [r7, #28]
 8013748:	6a3b      	ldr	r3, [r7, #32]
 801374a:	429a      	cmp	r2, r3
 801374c:	d901      	bls.n	8013752 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 801374e:	2301      	movs	r3, #1
 8013750:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	69fa      	ldr	r2, [r7, #28]
 8013756:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8013758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801375a:	2b00      	cmp	r3, #0
 801375c:	d006      	beq.n	801376c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801375e:	69fa      	ldr	r2, [r7, #28]
 8013760:	6a3b      	ldr	r3, [r7, #32]
 8013762:	1ad3      	subs	r3, r2, r3
 8013764:	2100      	movs	r1, #0
 8013766:	4618      	mov	r0, r3
 8013768:	f000 ffb6 	bl	80146d8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801376c:	f000 f9ea 	bl	8013b44 <xTaskResumeAll>
 8013770:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013772:	69bb      	ldr	r3, [r7, #24]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d107      	bne.n	8013788 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8013778:	4b07      	ldr	r3, [pc, #28]	@ (8013798 <vTaskDelayUntil+0xfc>)
 801377a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801377e:	601a      	str	r2, [r3, #0]
 8013780:	f3bf 8f4f 	dsb	sy
 8013784:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013788:	bf00      	nop
 801378a:	3728      	adds	r7, #40	@ 0x28
 801378c:	46bd      	mov	sp, r7
 801378e:	bd80      	pop	{r7, pc}
 8013790:	2000149c 	.word	0x2000149c
 8013794:	20001478 	.word	0x20001478
 8013798:	e000ed04 	.word	0xe000ed04

0801379c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801379c:	b580      	push	{r7, lr}
 801379e:	b084      	sub	sp, #16
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80137a4:	2300      	movs	r3, #0
 80137a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d018      	beq.n	80137e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80137ae:	4b14      	ldr	r3, [pc, #80]	@ (8013800 <vTaskDelay+0x64>)
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d00b      	beq.n	80137ce <vTaskDelay+0x32>
	__asm volatile
 80137b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137ba:	f383 8811 	msr	BASEPRI, r3
 80137be:	f3bf 8f6f 	isb	sy
 80137c2:	f3bf 8f4f 	dsb	sy
 80137c6:	60bb      	str	r3, [r7, #8]
}
 80137c8:	bf00      	nop
 80137ca:	bf00      	nop
 80137cc:	e7fd      	b.n	80137ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80137ce:	f000 f9ab 	bl	8013b28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80137d2:	2100      	movs	r1, #0
 80137d4:	6878      	ldr	r0, [r7, #4]
 80137d6:	f000 ff7f 	bl	80146d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80137da:	f000 f9b3 	bl	8013b44 <xTaskResumeAll>
 80137de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d107      	bne.n	80137f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80137e6:	4b07      	ldr	r3, [pc, #28]	@ (8013804 <vTaskDelay+0x68>)
 80137e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80137ec:	601a      	str	r2, [r3, #0]
 80137ee:	f3bf 8f4f 	dsb	sy
 80137f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80137f6:	bf00      	nop
 80137f8:	3710      	adds	r7, #16
 80137fa:	46bd      	mov	sp, r7
 80137fc:	bd80      	pop	{r7, pc}
 80137fe:	bf00      	nop
 8013800:	2000149c 	.word	0x2000149c
 8013804:	e000ed04 	.word	0xe000ed04

08013808 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8013808:	b580      	push	{r7, lr}
 801380a:	b084      	sub	sp, #16
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8013810:	f001 f8bc 	bl	801498c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d102      	bne.n	8013820 <vTaskSuspend+0x18>
 801381a:	4b3d      	ldr	r3, [pc, #244]	@ (8013910 <vTaskSuspend+0x108>)
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	e000      	b.n	8013822 <vTaskSuspend+0x1a>
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	3304      	adds	r3, #4
 8013828:	4618      	mov	r0, r3
 801382a:	f7fe ff9a 	bl	8012762 <uxListRemove>
 801382e:	4603      	mov	r3, r0
 8013830:	2b00      	cmp	r3, #0
 8013832:	d115      	bne.n	8013860 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013838:	4936      	ldr	r1, [pc, #216]	@ (8013914 <vTaskSuspend+0x10c>)
 801383a:	4613      	mov	r3, r2
 801383c:	009b      	lsls	r3, r3, #2
 801383e:	4413      	add	r3, r2
 8013840:	009b      	lsls	r3, r3, #2
 8013842:	440b      	add	r3, r1
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d10a      	bne.n	8013860 <vTaskSuspend+0x58>
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801384e:	2201      	movs	r2, #1
 8013850:	fa02 f303 	lsl.w	r3, r2, r3
 8013854:	43da      	mvns	r2, r3
 8013856:	4b30      	ldr	r3, [pc, #192]	@ (8013918 <vTaskSuspend+0x110>)
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	4013      	ands	r3, r2
 801385c:	4a2e      	ldr	r2, [pc, #184]	@ (8013918 <vTaskSuspend+0x110>)
 801385e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013864:	2b00      	cmp	r3, #0
 8013866:	d004      	beq.n	8013872 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	3318      	adds	r3, #24
 801386c:	4618      	mov	r0, r3
 801386e:	f7fe ff78 	bl	8012762 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	3304      	adds	r3, #4
 8013876:	4619      	mov	r1, r3
 8013878:	4828      	ldr	r0, [pc, #160]	@ (801391c <vTaskSuspend+0x114>)
 801387a:	f7fe ff17 	bl	80126ac <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8013884:	b2db      	uxtb	r3, r3
 8013886:	2b01      	cmp	r3, #1
 8013888:	d103      	bne.n	8013892 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	2200      	movs	r2, #0
 801388e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8013892:	f001 f8ab 	bl	80149ec <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8013896:	4b22      	ldr	r3, [pc, #136]	@ (8013920 <vTaskSuspend+0x118>)
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d005      	beq.n	80138aa <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801389e:	f001 f875 	bl	801498c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80138a2:	f000 fd13 	bl	80142cc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80138a6:	f001 f8a1 	bl	80149ec <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80138aa:	4b19      	ldr	r3, [pc, #100]	@ (8013910 <vTaskSuspend+0x108>)
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	68fa      	ldr	r2, [r7, #12]
 80138b0:	429a      	cmp	r2, r3
 80138b2:	d128      	bne.n	8013906 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 80138b4:	4b1a      	ldr	r3, [pc, #104]	@ (8013920 <vTaskSuspend+0x118>)
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d018      	beq.n	80138ee <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80138bc:	4b19      	ldr	r3, [pc, #100]	@ (8013924 <vTaskSuspend+0x11c>)
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d00b      	beq.n	80138dc <vTaskSuspend+0xd4>
	__asm volatile
 80138c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138c8:	f383 8811 	msr	BASEPRI, r3
 80138cc:	f3bf 8f6f 	isb	sy
 80138d0:	f3bf 8f4f 	dsb	sy
 80138d4:	60bb      	str	r3, [r7, #8]
}
 80138d6:	bf00      	nop
 80138d8:	bf00      	nop
 80138da:	e7fd      	b.n	80138d8 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80138dc:	4b12      	ldr	r3, [pc, #72]	@ (8013928 <vTaskSuspend+0x120>)
 80138de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80138e2:	601a      	str	r2, [r3, #0]
 80138e4:	f3bf 8f4f 	dsb	sy
 80138e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80138ec:	e00b      	b.n	8013906 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80138ee:	4b0b      	ldr	r3, [pc, #44]	@ (801391c <vTaskSuspend+0x114>)
 80138f0:	681a      	ldr	r2, [r3, #0]
 80138f2:	4b0e      	ldr	r3, [pc, #56]	@ (801392c <vTaskSuspend+0x124>)
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	429a      	cmp	r2, r3
 80138f8:	d103      	bne.n	8013902 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 80138fa:	4b05      	ldr	r3, [pc, #20]	@ (8013910 <vTaskSuspend+0x108>)
 80138fc:	2200      	movs	r2, #0
 80138fe:	601a      	str	r2, [r3, #0]
	}
 8013900:	e001      	b.n	8013906 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8013902:	f000 fa89 	bl	8013e18 <vTaskSwitchContext>
	}
 8013906:	bf00      	nop
 8013908:	3710      	adds	r7, #16
 801390a:	46bd      	mov	sp, r7
 801390c:	bd80      	pop	{r7, pc}
 801390e:	bf00      	nop
 8013910:	20001374 	.word	0x20001374
 8013914:	20001378 	.word	0x20001378
 8013918:	2000147c 	.word	0x2000147c
 801391c:	20001460 	.word	0x20001460
 8013920:	20001480 	.word	0x20001480
 8013924:	2000149c 	.word	0x2000149c
 8013928:	e000ed04 	.word	0xe000ed04
 801392c:	20001474 	.word	0x20001474

08013930 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8013930:	b480      	push	{r7}
 8013932:	b087      	sub	sp, #28
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8013938:	2300      	movs	r3, #0
 801393a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d10b      	bne.n	801395e <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8013946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801394a:	f383 8811 	msr	BASEPRI, r3
 801394e:	f3bf 8f6f 	isb	sy
 8013952:	f3bf 8f4f 	dsb	sy
 8013956:	60fb      	str	r3, [r7, #12]
}
 8013958:	bf00      	nop
 801395a:	bf00      	nop
 801395c:	e7fd      	b.n	801395a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801395e:	693b      	ldr	r3, [r7, #16]
 8013960:	695b      	ldr	r3, [r3, #20]
 8013962:	4a0f      	ldr	r2, [pc, #60]	@ (80139a0 <prvTaskIsTaskSuspended+0x70>)
 8013964:	4293      	cmp	r3, r2
 8013966:	d101      	bne.n	801396c <prvTaskIsTaskSuspended+0x3c>
 8013968:	2301      	movs	r3, #1
 801396a:	e000      	b.n	801396e <prvTaskIsTaskSuspended+0x3e>
 801396c:	2300      	movs	r3, #0
 801396e:	2b00      	cmp	r3, #0
 8013970:	d00f      	beq.n	8013992 <prvTaskIsTaskSuspended+0x62>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8013972:	693b      	ldr	r3, [r7, #16]
 8013974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013976:	4a0b      	ldr	r2, [pc, #44]	@ (80139a4 <prvTaskIsTaskSuspended+0x74>)
 8013978:	4293      	cmp	r3, r2
 801397a:	d00a      	beq.n	8013992 <prvTaskIsTaskSuspended+0x62>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801397c:	693b      	ldr	r3, [r7, #16]
 801397e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013980:	2b00      	cmp	r3, #0
 8013982:	d101      	bne.n	8013988 <prvTaskIsTaskSuspended+0x58>
 8013984:	2301      	movs	r3, #1
 8013986:	e000      	b.n	801398a <prvTaskIsTaskSuspended+0x5a>
 8013988:	2300      	movs	r3, #0
 801398a:	2b00      	cmp	r3, #0
 801398c:	d001      	beq.n	8013992 <prvTaskIsTaskSuspended+0x62>
				{
					xReturn = pdTRUE;
 801398e:	2301      	movs	r3, #1
 8013990:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013992:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8013994:	4618      	mov	r0, r3
 8013996:	371c      	adds	r7, #28
 8013998:	46bd      	mov	sp, r7
 801399a:	bc80      	pop	{r7}
 801399c:	4770      	bx	lr
 801399e:	bf00      	nop
 80139a0:	20001460 	.word	0x20001460
 80139a4:	20001434 	.word	0x20001434

080139a8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b084      	sub	sp, #16
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d10b      	bne.n	80139d2 <vTaskResume+0x2a>
	__asm volatile
 80139ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139be:	f383 8811 	msr	BASEPRI, r3
 80139c2:	f3bf 8f6f 	isb	sy
 80139c6:	f3bf 8f4f 	dsb	sy
 80139ca:	60bb      	str	r3, [r7, #8]
}
 80139cc:	bf00      	nop
 80139ce:	bf00      	nop
 80139d0:	e7fd      	b.n	80139ce <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d039      	beq.n	8013a4c <vTaskResume+0xa4>
 80139d8:	4b1e      	ldr	r3, [pc, #120]	@ (8013a54 <vTaskResume+0xac>)
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	68fa      	ldr	r2, [r7, #12]
 80139de:	429a      	cmp	r2, r3
 80139e0:	d034      	beq.n	8013a4c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80139e2:	f000 ffd3 	bl	801498c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80139e6:	68f8      	ldr	r0, [r7, #12]
 80139e8:	f7ff ffa2 	bl	8013930 <prvTaskIsTaskSuspended>
 80139ec:	4603      	mov	r3, r0
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d02a      	beq.n	8013a48 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	3304      	adds	r3, #4
 80139f6:	4618      	mov	r0, r3
 80139f8:	f7fe feb3 	bl	8012762 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a00:	2201      	movs	r2, #1
 8013a02:	409a      	lsls	r2, r3
 8013a04:	4b14      	ldr	r3, [pc, #80]	@ (8013a58 <vTaskResume+0xb0>)
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	4313      	orrs	r3, r2
 8013a0a:	4a13      	ldr	r2, [pc, #76]	@ (8013a58 <vTaskResume+0xb0>)
 8013a0c:	6013      	str	r3, [r2, #0]
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013a12:	4613      	mov	r3, r2
 8013a14:	009b      	lsls	r3, r3, #2
 8013a16:	4413      	add	r3, r2
 8013a18:	009b      	lsls	r3, r3, #2
 8013a1a:	4a10      	ldr	r2, [pc, #64]	@ (8013a5c <vTaskResume+0xb4>)
 8013a1c:	441a      	add	r2, r3
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	3304      	adds	r3, #4
 8013a22:	4619      	mov	r1, r3
 8013a24:	4610      	mov	r0, r2
 8013a26:	f7fe fe41 	bl	80126ac <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013a2e:	4b09      	ldr	r3, [pc, #36]	@ (8013a54 <vTaskResume+0xac>)
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a34:	429a      	cmp	r2, r3
 8013a36:	d307      	bcc.n	8013a48 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8013a38:	4b09      	ldr	r3, [pc, #36]	@ (8013a60 <vTaskResume+0xb8>)
 8013a3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013a3e:	601a      	str	r2, [r3, #0]
 8013a40:	f3bf 8f4f 	dsb	sy
 8013a44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8013a48:	f000 ffd0 	bl	80149ec <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013a4c:	bf00      	nop
 8013a4e:	3710      	adds	r7, #16
 8013a50:	46bd      	mov	sp, r7
 8013a52:	bd80      	pop	{r7, pc}
 8013a54:	20001374 	.word	0x20001374
 8013a58:	2000147c 	.word	0x2000147c
 8013a5c:	20001378 	.word	0x20001378
 8013a60:	e000ed04 	.word	0xe000ed04

08013a64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b08a      	sub	sp, #40	@ 0x28
 8013a68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013a6e:	2300      	movs	r3, #0
 8013a70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013a72:	463a      	mov	r2, r7
 8013a74:	1d39      	adds	r1, r7, #4
 8013a76:	f107 0308 	add.w	r3, r7, #8
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	f7f1 f90e 	bl	8004c9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013a80:	6839      	ldr	r1, [r7, #0]
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	68ba      	ldr	r2, [r7, #8]
 8013a86:	9202      	str	r2, [sp, #8]
 8013a88:	9301      	str	r3, [sp, #4]
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	9300      	str	r3, [sp, #0]
 8013a8e:	2300      	movs	r3, #0
 8013a90:	460a      	mov	r2, r1
 8013a92:	491f      	ldr	r1, [pc, #124]	@ (8013b10 <vTaskStartScheduler+0xac>)
 8013a94:	481f      	ldr	r0, [pc, #124]	@ (8013b14 <vTaskStartScheduler+0xb0>)
 8013a96:	f7ff fc6b 	bl	8013370 <xTaskCreateStatic>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	4a1e      	ldr	r2, [pc, #120]	@ (8013b18 <vTaskStartScheduler+0xb4>)
 8013a9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8013b18 <vTaskStartScheduler+0xb4>)
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d002      	beq.n	8013aae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013aa8:	2301      	movs	r3, #1
 8013aaa:	617b      	str	r3, [r7, #20]
 8013aac:	e001      	b.n	8013ab2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013aae:	2300      	movs	r3, #0
 8013ab0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013ab2:	697b      	ldr	r3, [r7, #20]
 8013ab4:	2b01      	cmp	r3, #1
 8013ab6:	d116      	bne.n	8013ae6 <vTaskStartScheduler+0x82>
	__asm volatile
 8013ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013abc:	f383 8811 	msr	BASEPRI, r3
 8013ac0:	f3bf 8f6f 	isb	sy
 8013ac4:	f3bf 8f4f 	dsb	sy
 8013ac8:	613b      	str	r3, [r7, #16]
}
 8013aca:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013acc:	4b13      	ldr	r3, [pc, #76]	@ (8013b1c <vTaskStartScheduler+0xb8>)
 8013ace:	f04f 32ff 	mov.w	r2, #4294967295
 8013ad2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013ad4:	4b12      	ldr	r3, [pc, #72]	@ (8013b20 <vTaskStartScheduler+0xbc>)
 8013ad6:	2201      	movs	r2, #1
 8013ad8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8013ada:	4b12      	ldr	r3, [pc, #72]	@ (8013b24 <vTaskStartScheduler+0xc0>)
 8013adc:	2200      	movs	r2, #0
 8013ade:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013ae0:	f000 fee2 	bl	80148a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013ae4:	e00f      	b.n	8013b06 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013ae6:	697b      	ldr	r3, [r7, #20]
 8013ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aec:	d10b      	bne.n	8013b06 <vTaskStartScheduler+0xa2>
	__asm volatile
 8013aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013af2:	f383 8811 	msr	BASEPRI, r3
 8013af6:	f3bf 8f6f 	isb	sy
 8013afa:	f3bf 8f4f 	dsb	sy
 8013afe:	60fb      	str	r3, [r7, #12]
}
 8013b00:	bf00      	nop
 8013b02:	bf00      	nop
 8013b04:	e7fd      	b.n	8013b02 <vTaskStartScheduler+0x9e>
}
 8013b06:	bf00      	nop
 8013b08:	3718      	adds	r7, #24
 8013b0a:	46bd      	mov	sp, r7
 8013b0c:	bd80      	pop	{r7, pc}
 8013b0e:	bf00      	nop
 8013b10:	08015e6c 	.word	0x08015e6c
 8013b14:	080140f1 	.word	0x080140f1
 8013b18:	20001498 	.word	0x20001498
 8013b1c:	20001494 	.word	0x20001494
 8013b20:	20001480 	.word	0x20001480
 8013b24:	20001478 	.word	0x20001478

08013b28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013b28:	b480      	push	{r7}
 8013b2a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013b2c:	4b04      	ldr	r3, [pc, #16]	@ (8013b40 <vTaskSuspendAll+0x18>)
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	3301      	adds	r3, #1
 8013b32:	4a03      	ldr	r2, [pc, #12]	@ (8013b40 <vTaskSuspendAll+0x18>)
 8013b34:	6013      	str	r3, [r2, #0]
}
 8013b36:	bf00      	nop
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	bc80      	pop	{r7}
 8013b3c:	4770      	bx	lr
 8013b3e:	bf00      	nop
 8013b40:	2000149c 	.word	0x2000149c

08013b44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013b44:	b580      	push	{r7, lr}
 8013b46:	b084      	sub	sp, #16
 8013b48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013b4e:	2300      	movs	r3, #0
 8013b50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013b52:	4b42      	ldr	r3, [pc, #264]	@ (8013c5c <xTaskResumeAll+0x118>)
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d10b      	bne.n	8013b72 <xTaskResumeAll+0x2e>
	__asm volatile
 8013b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b5e:	f383 8811 	msr	BASEPRI, r3
 8013b62:	f3bf 8f6f 	isb	sy
 8013b66:	f3bf 8f4f 	dsb	sy
 8013b6a:	603b      	str	r3, [r7, #0]
}
 8013b6c:	bf00      	nop
 8013b6e:	bf00      	nop
 8013b70:	e7fd      	b.n	8013b6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013b72:	f000 ff0b 	bl	801498c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013b76:	4b39      	ldr	r3, [pc, #228]	@ (8013c5c <xTaskResumeAll+0x118>)
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	3b01      	subs	r3, #1
 8013b7c:	4a37      	ldr	r2, [pc, #220]	@ (8013c5c <xTaskResumeAll+0x118>)
 8013b7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013b80:	4b36      	ldr	r3, [pc, #216]	@ (8013c5c <xTaskResumeAll+0x118>)
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d161      	bne.n	8013c4c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013b88:	4b35      	ldr	r3, [pc, #212]	@ (8013c60 <xTaskResumeAll+0x11c>)
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d05d      	beq.n	8013c4c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013b90:	e02e      	b.n	8013bf0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8013b92:	4b34      	ldr	r3, [pc, #208]	@ (8013c64 <xTaskResumeAll+0x120>)
 8013b94:	68db      	ldr	r3, [r3, #12]
 8013b96:	68db      	ldr	r3, [r3, #12]
 8013b98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	3318      	adds	r3, #24
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f7fe fddf 	bl	8012762 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	3304      	adds	r3, #4
 8013ba8:	4618      	mov	r0, r3
 8013baa:	f7fe fdda 	bl	8012762 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bb2:	2201      	movs	r2, #1
 8013bb4:	409a      	lsls	r2, r3
 8013bb6:	4b2c      	ldr	r3, [pc, #176]	@ (8013c68 <xTaskResumeAll+0x124>)
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	4313      	orrs	r3, r2
 8013bbc:	4a2a      	ldr	r2, [pc, #168]	@ (8013c68 <xTaskResumeAll+0x124>)
 8013bbe:	6013      	str	r3, [r2, #0]
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013bc4:	4613      	mov	r3, r2
 8013bc6:	009b      	lsls	r3, r3, #2
 8013bc8:	4413      	add	r3, r2
 8013bca:	009b      	lsls	r3, r3, #2
 8013bcc:	4a27      	ldr	r2, [pc, #156]	@ (8013c6c <xTaskResumeAll+0x128>)
 8013bce:	441a      	add	r2, r3
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	3304      	adds	r3, #4
 8013bd4:	4619      	mov	r1, r3
 8013bd6:	4610      	mov	r0, r2
 8013bd8:	f7fe fd68 	bl	80126ac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013be0:	4b23      	ldr	r3, [pc, #140]	@ (8013c70 <xTaskResumeAll+0x12c>)
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013be6:	429a      	cmp	r2, r3
 8013be8:	d302      	bcc.n	8013bf0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8013bea:	4b22      	ldr	r3, [pc, #136]	@ (8013c74 <xTaskResumeAll+0x130>)
 8013bec:	2201      	movs	r2, #1
 8013bee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8013c64 <xTaskResumeAll+0x120>)
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d1cc      	bne.n	8013b92 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d001      	beq.n	8013c02 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013bfe:	f000 fb65 	bl	80142cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013c02:	4b1d      	ldr	r3, [pc, #116]	@ (8013c78 <xTaskResumeAll+0x134>)
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d010      	beq.n	8013c30 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013c0e:	f000 f845 	bl	8013c9c <xTaskIncrementTick>
 8013c12:	4603      	mov	r3, r0
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d002      	beq.n	8013c1e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8013c18:	4b16      	ldr	r3, [pc, #88]	@ (8013c74 <xTaskResumeAll+0x130>)
 8013c1a:	2201      	movs	r2, #1
 8013c1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	3b01      	subs	r3, #1
 8013c22:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d1f1      	bne.n	8013c0e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8013c2a:	4b13      	ldr	r3, [pc, #76]	@ (8013c78 <xTaskResumeAll+0x134>)
 8013c2c:	2200      	movs	r2, #0
 8013c2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013c30:	4b10      	ldr	r3, [pc, #64]	@ (8013c74 <xTaskResumeAll+0x130>)
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d009      	beq.n	8013c4c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013c38:	2301      	movs	r3, #1
 8013c3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8013c7c <xTaskResumeAll+0x138>)
 8013c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013c42:	601a      	str	r2, [r3, #0]
 8013c44:	f3bf 8f4f 	dsb	sy
 8013c48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013c4c:	f000 fece 	bl	80149ec <vPortExitCritical>

	return xAlreadyYielded;
 8013c50:	68bb      	ldr	r3, [r7, #8]
}
 8013c52:	4618      	mov	r0, r3
 8013c54:	3710      	adds	r7, #16
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bd80      	pop	{r7, pc}
 8013c5a:	bf00      	nop
 8013c5c:	2000149c 	.word	0x2000149c
 8013c60:	20001474 	.word	0x20001474
 8013c64:	20001434 	.word	0x20001434
 8013c68:	2000147c 	.word	0x2000147c
 8013c6c:	20001378 	.word	0x20001378
 8013c70:	20001374 	.word	0x20001374
 8013c74:	20001488 	.word	0x20001488
 8013c78:	20001484 	.word	0x20001484
 8013c7c:	e000ed04 	.word	0xe000ed04

08013c80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013c80:	b480      	push	{r7}
 8013c82:	b083      	sub	sp, #12
 8013c84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013c86:	4b04      	ldr	r3, [pc, #16]	@ (8013c98 <xTaskGetTickCount+0x18>)
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013c8c:	687b      	ldr	r3, [r7, #4]
}
 8013c8e:	4618      	mov	r0, r3
 8013c90:	370c      	adds	r7, #12
 8013c92:	46bd      	mov	sp, r7
 8013c94:	bc80      	pop	{r7}
 8013c96:	4770      	bx	lr
 8013c98:	20001478 	.word	0x20001478

08013c9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b086      	sub	sp, #24
 8013ca0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013ca6:	4b51      	ldr	r3, [pc, #324]	@ (8013dec <xTaskIncrementTick+0x150>)
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	f040 808e 	bne.w	8013dcc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013cb0:	4b4f      	ldr	r3, [pc, #316]	@ (8013df0 <xTaskIncrementTick+0x154>)
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	3301      	adds	r3, #1
 8013cb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013cb8:	4a4d      	ldr	r2, [pc, #308]	@ (8013df0 <xTaskIncrementTick+0x154>)
 8013cba:	693b      	ldr	r3, [r7, #16]
 8013cbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013cbe:	693b      	ldr	r3, [r7, #16]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d121      	bne.n	8013d08 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8013cc4:	4b4b      	ldr	r3, [pc, #300]	@ (8013df4 <xTaskIncrementTick+0x158>)
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d00b      	beq.n	8013ce6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8013cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013cd2:	f383 8811 	msr	BASEPRI, r3
 8013cd6:	f3bf 8f6f 	isb	sy
 8013cda:	f3bf 8f4f 	dsb	sy
 8013cde:	603b      	str	r3, [r7, #0]
}
 8013ce0:	bf00      	nop
 8013ce2:	bf00      	nop
 8013ce4:	e7fd      	b.n	8013ce2 <xTaskIncrementTick+0x46>
 8013ce6:	4b43      	ldr	r3, [pc, #268]	@ (8013df4 <xTaskIncrementTick+0x158>)
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	60fb      	str	r3, [r7, #12]
 8013cec:	4b42      	ldr	r3, [pc, #264]	@ (8013df8 <xTaskIncrementTick+0x15c>)
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	4a40      	ldr	r2, [pc, #256]	@ (8013df4 <xTaskIncrementTick+0x158>)
 8013cf2:	6013      	str	r3, [r2, #0]
 8013cf4:	4a40      	ldr	r2, [pc, #256]	@ (8013df8 <xTaskIncrementTick+0x15c>)
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	6013      	str	r3, [r2, #0]
 8013cfa:	4b40      	ldr	r3, [pc, #256]	@ (8013dfc <xTaskIncrementTick+0x160>)
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	3301      	adds	r3, #1
 8013d00:	4a3e      	ldr	r2, [pc, #248]	@ (8013dfc <xTaskIncrementTick+0x160>)
 8013d02:	6013      	str	r3, [r2, #0]
 8013d04:	f000 fae2 	bl	80142cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013d08:	4b3d      	ldr	r3, [pc, #244]	@ (8013e00 <xTaskIncrementTick+0x164>)
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	693a      	ldr	r2, [r7, #16]
 8013d0e:	429a      	cmp	r2, r3
 8013d10:	d34d      	bcc.n	8013dae <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013d12:	4b38      	ldr	r3, [pc, #224]	@ (8013df4 <xTaskIncrementTick+0x158>)
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d101      	bne.n	8013d20 <xTaskIncrementTick+0x84>
 8013d1c:	2301      	movs	r3, #1
 8013d1e:	e000      	b.n	8013d22 <xTaskIncrementTick+0x86>
 8013d20:	2300      	movs	r3, #0
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d004      	beq.n	8013d30 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d26:	4b36      	ldr	r3, [pc, #216]	@ (8013e00 <xTaskIncrementTick+0x164>)
 8013d28:	f04f 32ff 	mov.w	r2, #4294967295
 8013d2c:	601a      	str	r2, [r3, #0]
					break;
 8013d2e:	e03e      	b.n	8013dae <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013d30:	4b30      	ldr	r3, [pc, #192]	@ (8013df4 <xTaskIncrementTick+0x158>)
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	68db      	ldr	r3, [r3, #12]
 8013d36:	68db      	ldr	r3, [r3, #12]
 8013d38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013d3a:	68bb      	ldr	r3, [r7, #8]
 8013d3c:	685b      	ldr	r3, [r3, #4]
 8013d3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013d40:	693a      	ldr	r2, [r7, #16]
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	429a      	cmp	r2, r3
 8013d46:	d203      	bcs.n	8013d50 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013d48:	4a2d      	ldr	r2, [pc, #180]	@ (8013e00 <xTaskIncrementTick+0x164>)
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	6013      	str	r3, [r2, #0]
						break;
 8013d4e:	e02e      	b.n	8013dae <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013d50:	68bb      	ldr	r3, [r7, #8]
 8013d52:	3304      	adds	r3, #4
 8013d54:	4618      	mov	r0, r3
 8013d56:	f7fe fd04 	bl	8012762 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013d5a:	68bb      	ldr	r3, [r7, #8]
 8013d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d004      	beq.n	8013d6c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013d62:	68bb      	ldr	r3, [r7, #8]
 8013d64:	3318      	adds	r3, #24
 8013d66:	4618      	mov	r0, r3
 8013d68:	f7fe fcfb 	bl	8012762 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013d6c:	68bb      	ldr	r3, [r7, #8]
 8013d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d70:	2201      	movs	r2, #1
 8013d72:	409a      	lsls	r2, r3
 8013d74:	4b23      	ldr	r3, [pc, #140]	@ (8013e04 <xTaskIncrementTick+0x168>)
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	4313      	orrs	r3, r2
 8013d7a:	4a22      	ldr	r2, [pc, #136]	@ (8013e04 <xTaskIncrementTick+0x168>)
 8013d7c:	6013      	str	r3, [r2, #0]
 8013d7e:	68bb      	ldr	r3, [r7, #8]
 8013d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013d82:	4613      	mov	r3, r2
 8013d84:	009b      	lsls	r3, r3, #2
 8013d86:	4413      	add	r3, r2
 8013d88:	009b      	lsls	r3, r3, #2
 8013d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8013e08 <xTaskIncrementTick+0x16c>)
 8013d8c:	441a      	add	r2, r3
 8013d8e:	68bb      	ldr	r3, [r7, #8]
 8013d90:	3304      	adds	r3, #4
 8013d92:	4619      	mov	r1, r3
 8013d94:	4610      	mov	r0, r2
 8013d96:	f7fe fc89 	bl	80126ac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013d9a:	68bb      	ldr	r3, [r7, #8]
 8013d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8013e0c <xTaskIncrementTick+0x170>)
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013da4:	429a      	cmp	r2, r3
 8013da6:	d3b4      	bcc.n	8013d12 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8013da8:	2301      	movs	r3, #1
 8013daa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013dac:	e7b1      	b.n	8013d12 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013dae:	4b17      	ldr	r3, [pc, #92]	@ (8013e0c <xTaskIncrementTick+0x170>)
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013db4:	4914      	ldr	r1, [pc, #80]	@ (8013e08 <xTaskIncrementTick+0x16c>)
 8013db6:	4613      	mov	r3, r2
 8013db8:	009b      	lsls	r3, r3, #2
 8013dba:	4413      	add	r3, r2
 8013dbc:	009b      	lsls	r3, r3, #2
 8013dbe:	440b      	add	r3, r1
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	2b01      	cmp	r3, #1
 8013dc4:	d907      	bls.n	8013dd6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8013dc6:	2301      	movs	r3, #1
 8013dc8:	617b      	str	r3, [r7, #20]
 8013dca:	e004      	b.n	8013dd6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013dcc:	4b10      	ldr	r3, [pc, #64]	@ (8013e10 <xTaskIncrementTick+0x174>)
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	3301      	adds	r3, #1
 8013dd2:	4a0f      	ldr	r2, [pc, #60]	@ (8013e10 <xTaskIncrementTick+0x174>)
 8013dd4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8013e14 <xTaskIncrementTick+0x178>)
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d001      	beq.n	8013de2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8013dde:	2301      	movs	r3, #1
 8013de0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013de2:	697b      	ldr	r3, [r7, #20]
}
 8013de4:	4618      	mov	r0, r3
 8013de6:	3718      	adds	r7, #24
 8013de8:	46bd      	mov	sp, r7
 8013dea:	bd80      	pop	{r7, pc}
 8013dec:	2000149c 	.word	0x2000149c
 8013df0:	20001478 	.word	0x20001478
 8013df4:	2000142c 	.word	0x2000142c
 8013df8:	20001430 	.word	0x20001430
 8013dfc:	2000148c 	.word	0x2000148c
 8013e00:	20001494 	.word	0x20001494
 8013e04:	2000147c 	.word	0x2000147c
 8013e08:	20001378 	.word	0x20001378
 8013e0c:	20001374 	.word	0x20001374
 8013e10:	20001484 	.word	0x20001484
 8013e14:	20001488 	.word	0x20001488

08013e18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013e18:	b480      	push	{r7}
 8013e1a:	b087      	sub	sp, #28
 8013e1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013e1e:	4b27      	ldr	r3, [pc, #156]	@ (8013ebc <vTaskSwitchContext+0xa4>)
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d003      	beq.n	8013e2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013e26:	4b26      	ldr	r3, [pc, #152]	@ (8013ec0 <vTaskSwitchContext+0xa8>)
 8013e28:	2201      	movs	r2, #1
 8013e2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013e2c:	e040      	b.n	8013eb0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8013e2e:	4b24      	ldr	r3, [pc, #144]	@ (8013ec0 <vTaskSwitchContext+0xa8>)
 8013e30:	2200      	movs	r2, #0
 8013e32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8013e34:	4b23      	ldr	r3, [pc, #140]	@ (8013ec4 <vTaskSwitchContext+0xac>)
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	fab3 f383 	clz	r3, r3
 8013e40:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013e42:	7afb      	ldrb	r3, [r7, #11]
 8013e44:	f1c3 031f 	rsb	r3, r3, #31
 8013e48:	617b      	str	r3, [r7, #20]
 8013e4a:	491f      	ldr	r1, [pc, #124]	@ (8013ec8 <vTaskSwitchContext+0xb0>)
 8013e4c:	697a      	ldr	r2, [r7, #20]
 8013e4e:	4613      	mov	r3, r2
 8013e50:	009b      	lsls	r3, r3, #2
 8013e52:	4413      	add	r3, r2
 8013e54:	009b      	lsls	r3, r3, #2
 8013e56:	440b      	add	r3, r1
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d10b      	bne.n	8013e76 <vTaskSwitchContext+0x5e>
	__asm volatile
 8013e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e62:	f383 8811 	msr	BASEPRI, r3
 8013e66:	f3bf 8f6f 	isb	sy
 8013e6a:	f3bf 8f4f 	dsb	sy
 8013e6e:	607b      	str	r3, [r7, #4]
}
 8013e70:	bf00      	nop
 8013e72:	bf00      	nop
 8013e74:	e7fd      	b.n	8013e72 <vTaskSwitchContext+0x5a>
 8013e76:	697a      	ldr	r2, [r7, #20]
 8013e78:	4613      	mov	r3, r2
 8013e7a:	009b      	lsls	r3, r3, #2
 8013e7c:	4413      	add	r3, r2
 8013e7e:	009b      	lsls	r3, r3, #2
 8013e80:	4a11      	ldr	r2, [pc, #68]	@ (8013ec8 <vTaskSwitchContext+0xb0>)
 8013e82:	4413      	add	r3, r2
 8013e84:	613b      	str	r3, [r7, #16]
 8013e86:	693b      	ldr	r3, [r7, #16]
 8013e88:	685b      	ldr	r3, [r3, #4]
 8013e8a:	685a      	ldr	r2, [r3, #4]
 8013e8c:	693b      	ldr	r3, [r7, #16]
 8013e8e:	605a      	str	r2, [r3, #4]
 8013e90:	693b      	ldr	r3, [r7, #16]
 8013e92:	685a      	ldr	r2, [r3, #4]
 8013e94:	693b      	ldr	r3, [r7, #16]
 8013e96:	3308      	adds	r3, #8
 8013e98:	429a      	cmp	r2, r3
 8013e9a:	d104      	bne.n	8013ea6 <vTaskSwitchContext+0x8e>
 8013e9c:	693b      	ldr	r3, [r7, #16]
 8013e9e:	685b      	ldr	r3, [r3, #4]
 8013ea0:	685a      	ldr	r2, [r3, #4]
 8013ea2:	693b      	ldr	r3, [r7, #16]
 8013ea4:	605a      	str	r2, [r3, #4]
 8013ea6:	693b      	ldr	r3, [r7, #16]
 8013ea8:	685b      	ldr	r3, [r3, #4]
 8013eaa:	68db      	ldr	r3, [r3, #12]
 8013eac:	4a07      	ldr	r2, [pc, #28]	@ (8013ecc <vTaskSwitchContext+0xb4>)
 8013eae:	6013      	str	r3, [r2, #0]
}
 8013eb0:	bf00      	nop
 8013eb2:	371c      	adds	r7, #28
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	bc80      	pop	{r7}
 8013eb8:	4770      	bx	lr
 8013eba:	bf00      	nop
 8013ebc:	2000149c 	.word	0x2000149c
 8013ec0:	20001488 	.word	0x20001488
 8013ec4:	2000147c 	.word	0x2000147c
 8013ec8:	20001378 	.word	0x20001378
 8013ecc:	20001374 	.word	0x20001374

08013ed0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b084      	sub	sp, #16
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	6078      	str	r0, [r7, #4]
 8013ed8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d10b      	bne.n	8013ef8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8013ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ee4:	f383 8811 	msr	BASEPRI, r3
 8013ee8:	f3bf 8f6f 	isb	sy
 8013eec:	f3bf 8f4f 	dsb	sy
 8013ef0:	60fb      	str	r3, [r7, #12]
}
 8013ef2:	bf00      	nop
 8013ef4:	bf00      	nop
 8013ef6:	e7fd      	b.n	8013ef4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013ef8:	4b07      	ldr	r3, [pc, #28]	@ (8013f18 <vTaskPlaceOnEventList+0x48>)
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	3318      	adds	r3, #24
 8013efe:	4619      	mov	r1, r3
 8013f00:	6878      	ldr	r0, [r7, #4]
 8013f02:	f7fe fbf6 	bl	80126f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013f06:	2101      	movs	r1, #1
 8013f08:	6838      	ldr	r0, [r7, #0]
 8013f0a:	f000 fbe5 	bl	80146d8 <prvAddCurrentTaskToDelayedList>
}
 8013f0e:	bf00      	nop
 8013f10:	3710      	adds	r7, #16
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bd80      	pop	{r7, pc}
 8013f16:	bf00      	nop
 8013f18:	20001374 	.word	0x20001374

08013f1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b086      	sub	sp, #24
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	68db      	ldr	r3, [r3, #12]
 8013f28:	68db      	ldr	r3, [r3, #12]
 8013f2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013f2c:	693b      	ldr	r3, [r7, #16]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d10b      	bne.n	8013f4a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8013f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f36:	f383 8811 	msr	BASEPRI, r3
 8013f3a:	f3bf 8f6f 	isb	sy
 8013f3e:	f3bf 8f4f 	dsb	sy
 8013f42:	60fb      	str	r3, [r7, #12]
}
 8013f44:	bf00      	nop
 8013f46:	bf00      	nop
 8013f48:	e7fd      	b.n	8013f46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013f4a:	693b      	ldr	r3, [r7, #16]
 8013f4c:	3318      	adds	r3, #24
 8013f4e:	4618      	mov	r0, r3
 8013f50:	f7fe fc07 	bl	8012762 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013f54:	4b1d      	ldr	r3, [pc, #116]	@ (8013fcc <xTaskRemoveFromEventList+0xb0>)
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d11c      	bne.n	8013f96 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013f5c:	693b      	ldr	r3, [r7, #16]
 8013f5e:	3304      	adds	r3, #4
 8013f60:	4618      	mov	r0, r3
 8013f62:	f7fe fbfe 	bl	8012762 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013f66:	693b      	ldr	r3, [r7, #16]
 8013f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f6a:	2201      	movs	r2, #1
 8013f6c:	409a      	lsls	r2, r3
 8013f6e:	4b18      	ldr	r3, [pc, #96]	@ (8013fd0 <xTaskRemoveFromEventList+0xb4>)
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	4313      	orrs	r3, r2
 8013f74:	4a16      	ldr	r2, [pc, #88]	@ (8013fd0 <xTaskRemoveFromEventList+0xb4>)
 8013f76:	6013      	str	r3, [r2, #0]
 8013f78:	693b      	ldr	r3, [r7, #16]
 8013f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f7c:	4613      	mov	r3, r2
 8013f7e:	009b      	lsls	r3, r3, #2
 8013f80:	4413      	add	r3, r2
 8013f82:	009b      	lsls	r3, r3, #2
 8013f84:	4a13      	ldr	r2, [pc, #76]	@ (8013fd4 <xTaskRemoveFromEventList+0xb8>)
 8013f86:	441a      	add	r2, r3
 8013f88:	693b      	ldr	r3, [r7, #16]
 8013f8a:	3304      	adds	r3, #4
 8013f8c:	4619      	mov	r1, r3
 8013f8e:	4610      	mov	r0, r2
 8013f90:	f7fe fb8c 	bl	80126ac <vListInsertEnd>
 8013f94:	e005      	b.n	8013fa2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013f96:	693b      	ldr	r3, [r7, #16]
 8013f98:	3318      	adds	r3, #24
 8013f9a:	4619      	mov	r1, r3
 8013f9c:	480e      	ldr	r0, [pc, #56]	@ (8013fd8 <xTaskRemoveFromEventList+0xbc>)
 8013f9e:	f7fe fb85 	bl	80126ac <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013fa2:	693b      	ldr	r3, [r7, #16]
 8013fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8013fdc <xTaskRemoveFromEventList+0xc0>)
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fac:	429a      	cmp	r2, r3
 8013fae:	d905      	bls.n	8013fbc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013fb0:	2301      	movs	r3, #1
 8013fb2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8013fe0 <xTaskRemoveFromEventList+0xc4>)
 8013fb6:	2201      	movs	r2, #1
 8013fb8:	601a      	str	r2, [r3, #0]
 8013fba:	e001      	b.n	8013fc0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8013fc0:	697b      	ldr	r3, [r7, #20]
}
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	3718      	adds	r7, #24
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	bd80      	pop	{r7, pc}
 8013fca:	bf00      	nop
 8013fcc:	2000149c 	.word	0x2000149c
 8013fd0:	2000147c 	.word	0x2000147c
 8013fd4:	20001378 	.word	0x20001378
 8013fd8:	20001434 	.word	0x20001434
 8013fdc:	20001374 	.word	0x20001374
 8013fe0:	20001488 	.word	0x20001488

08013fe4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013fe4:	b480      	push	{r7}
 8013fe6:	b083      	sub	sp, #12
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013fec:	4b06      	ldr	r3, [pc, #24]	@ (8014008 <vTaskInternalSetTimeOutState+0x24>)
 8013fee:	681a      	ldr	r2, [r3, #0]
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013ff4:	4b05      	ldr	r3, [pc, #20]	@ (801400c <vTaskInternalSetTimeOutState+0x28>)
 8013ff6:	681a      	ldr	r2, [r3, #0]
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	605a      	str	r2, [r3, #4]
}
 8013ffc:	bf00      	nop
 8013ffe:	370c      	adds	r7, #12
 8014000:	46bd      	mov	sp, r7
 8014002:	bc80      	pop	{r7}
 8014004:	4770      	bx	lr
 8014006:	bf00      	nop
 8014008:	2000148c 	.word	0x2000148c
 801400c:	20001478 	.word	0x20001478

08014010 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014010:	b580      	push	{r7, lr}
 8014012:	b088      	sub	sp, #32
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
 8014018:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d10b      	bne.n	8014038 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8014020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014024:	f383 8811 	msr	BASEPRI, r3
 8014028:	f3bf 8f6f 	isb	sy
 801402c:	f3bf 8f4f 	dsb	sy
 8014030:	613b      	str	r3, [r7, #16]
}
 8014032:	bf00      	nop
 8014034:	bf00      	nop
 8014036:	e7fd      	b.n	8014034 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014038:	683b      	ldr	r3, [r7, #0]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d10b      	bne.n	8014056 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801403e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014042:	f383 8811 	msr	BASEPRI, r3
 8014046:	f3bf 8f6f 	isb	sy
 801404a:	f3bf 8f4f 	dsb	sy
 801404e:	60fb      	str	r3, [r7, #12]
}
 8014050:	bf00      	nop
 8014052:	bf00      	nop
 8014054:	e7fd      	b.n	8014052 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8014056:	f000 fc99 	bl	801498c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801405a:	4b1d      	ldr	r3, [pc, #116]	@ (80140d0 <xTaskCheckForTimeOut+0xc0>)
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	685b      	ldr	r3, [r3, #4]
 8014064:	69ba      	ldr	r2, [r7, #24]
 8014066:	1ad3      	subs	r3, r2, r3
 8014068:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801406a:	683b      	ldr	r3, [r7, #0]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014072:	d102      	bne.n	801407a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014074:	2300      	movs	r3, #0
 8014076:	61fb      	str	r3, [r7, #28]
 8014078:	e023      	b.n	80140c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	681a      	ldr	r2, [r3, #0]
 801407e:	4b15      	ldr	r3, [pc, #84]	@ (80140d4 <xTaskCheckForTimeOut+0xc4>)
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	429a      	cmp	r2, r3
 8014084:	d007      	beq.n	8014096 <xTaskCheckForTimeOut+0x86>
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	685b      	ldr	r3, [r3, #4]
 801408a:	69ba      	ldr	r2, [r7, #24]
 801408c:	429a      	cmp	r2, r3
 801408e:	d302      	bcc.n	8014096 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014090:	2301      	movs	r3, #1
 8014092:	61fb      	str	r3, [r7, #28]
 8014094:	e015      	b.n	80140c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014096:	683b      	ldr	r3, [r7, #0]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	697a      	ldr	r2, [r7, #20]
 801409c:	429a      	cmp	r2, r3
 801409e:	d20b      	bcs.n	80140b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80140a0:	683b      	ldr	r3, [r7, #0]
 80140a2:	681a      	ldr	r2, [r3, #0]
 80140a4:	697b      	ldr	r3, [r7, #20]
 80140a6:	1ad2      	subs	r2, r2, r3
 80140a8:	683b      	ldr	r3, [r7, #0]
 80140aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80140ac:	6878      	ldr	r0, [r7, #4]
 80140ae:	f7ff ff99 	bl	8013fe4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80140b2:	2300      	movs	r3, #0
 80140b4:	61fb      	str	r3, [r7, #28]
 80140b6:	e004      	b.n	80140c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80140b8:	683b      	ldr	r3, [r7, #0]
 80140ba:	2200      	movs	r2, #0
 80140bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80140be:	2301      	movs	r3, #1
 80140c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80140c2:	f000 fc93 	bl	80149ec <vPortExitCritical>

	return xReturn;
 80140c6:	69fb      	ldr	r3, [r7, #28]
}
 80140c8:	4618      	mov	r0, r3
 80140ca:	3720      	adds	r7, #32
 80140cc:	46bd      	mov	sp, r7
 80140ce:	bd80      	pop	{r7, pc}
 80140d0:	20001478 	.word	0x20001478
 80140d4:	2000148c 	.word	0x2000148c

080140d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80140d8:	b480      	push	{r7}
 80140da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80140dc:	4b03      	ldr	r3, [pc, #12]	@ (80140ec <vTaskMissedYield+0x14>)
 80140de:	2201      	movs	r2, #1
 80140e0:	601a      	str	r2, [r3, #0]
}
 80140e2:	bf00      	nop
 80140e4:	46bd      	mov	sp, r7
 80140e6:	bc80      	pop	{r7}
 80140e8:	4770      	bx	lr
 80140ea:	bf00      	nop
 80140ec:	20001488 	.word	0x20001488

080140f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b082      	sub	sp, #8
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80140f8:	f000 f852 	bl	80141a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80140fc:	4b06      	ldr	r3, [pc, #24]	@ (8014118 <prvIdleTask+0x28>)
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	2b01      	cmp	r3, #1
 8014102:	d9f9      	bls.n	80140f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014104:	4b05      	ldr	r3, [pc, #20]	@ (801411c <prvIdleTask+0x2c>)
 8014106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801410a:	601a      	str	r2, [r3, #0]
 801410c:	f3bf 8f4f 	dsb	sy
 8014110:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014114:	e7f0      	b.n	80140f8 <prvIdleTask+0x8>
 8014116:	bf00      	nop
 8014118:	20001378 	.word	0x20001378
 801411c:	e000ed04 	.word	0xe000ed04

08014120 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014120:	b580      	push	{r7, lr}
 8014122:	b082      	sub	sp, #8
 8014124:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014126:	2300      	movs	r3, #0
 8014128:	607b      	str	r3, [r7, #4]
 801412a:	e00c      	b.n	8014146 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801412c:	687a      	ldr	r2, [r7, #4]
 801412e:	4613      	mov	r3, r2
 8014130:	009b      	lsls	r3, r3, #2
 8014132:	4413      	add	r3, r2
 8014134:	009b      	lsls	r3, r3, #2
 8014136:	4a12      	ldr	r2, [pc, #72]	@ (8014180 <prvInitialiseTaskLists+0x60>)
 8014138:	4413      	add	r3, r2
 801413a:	4618      	mov	r0, r3
 801413c:	f7fe fa8b 	bl	8012656 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	3301      	adds	r3, #1
 8014144:	607b      	str	r3, [r7, #4]
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	2b06      	cmp	r3, #6
 801414a:	d9ef      	bls.n	801412c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801414c:	480d      	ldr	r0, [pc, #52]	@ (8014184 <prvInitialiseTaskLists+0x64>)
 801414e:	f7fe fa82 	bl	8012656 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014152:	480d      	ldr	r0, [pc, #52]	@ (8014188 <prvInitialiseTaskLists+0x68>)
 8014154:	f7fe fa7f 	bl	8012656 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014158:	480c      	ldr	r0, [pc, #48]	@ (801418c <prvInitialiseTaskLists+0x6c>)
 801415a:	f7fe fa7c 	bl	8012656 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801415e:	480c      	ldr	r0, [pc, #48]	@ (8014190 <prvInitialiseTaskLists+0x70>)
 8014160:	f7fe fa79 	bl	8012656 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014164:	480b      	ldr	r0, [pc, #44]	@ (8014194 <prvInitialiseTaskLists+0x74>)
 8014166:	f7fe fa76 	bl	8012656 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801416a:	4b0b      	ldr	r3, [pc, #44]	@ (8014198 <prvInitialiseTaskLists+0x78>)
 801416c:	4a05      	ldr	r2, [pc, #20]	@ (8014184 <prvInitialiseTaskLists+0x64>)
 801416e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014170:	4b0a      	ldr	r3, [pc, #40]	@ (801419c <prvInitialiseTaskLists+0x7c>)
 8014172:	4a05      	ldr	r2, [pc, #20]	@ (8014188 <prvInitialiseTaskLists+0x68>)
 8014174:	601a      	str	r2, [r3, #0]
}
 8014176:	bf00      	nop
 8014178:	3708      	adds	r7, #8
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}
 801417e:	bf00      	nop
 8014180:	20001378 	.word	0x20001378
 8014184:	20001404 	.word	0x20001404
 8014188:	20001418 	.word	0x20001418
 801418c:	20001434 	.word	0x20001434
 8014190:	20001448 	.word	0x20001448
 8014194:	20001460 	.word	0x20001460
 8014198:	2000142c 	.word	0x2000142c
 801419c:	20001430 	.word	0x20001430

080141a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b082      	sub	sp, #8
 80141a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80141a6:	e019      	b.n	80141dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80141a8:	f000 fbf0 	bl	801498c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80141ac:	4b10      	ldr	r3, [pc, #64]	@ (80141f0 <prvCheckTasksWaitingTermination+0x50>)
 80141ae:	68db      	ldr	r3, [r3, #12]
 80141b0:	68db      	ldr	r3, [r3, #12]
 80141b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	3304      	adds	r3, #4
 80141b8:	4618      	mov	r0, r3
 80141ba:	f7fe fad2 	bl	8012762 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80141be:	4b0d      	ldr	r3, [pc, #52]	@ (80141f4 <prvCheckTasksWaitingTermination+0x54>)
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	3b01      	subs	r3, #1
 80141c4:	4a0b      	ldr	r2, [pc, #44]	@ (80141f4 <prvCheckTasksWaitingTermination+0x54>)
 80141c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80141c8:	4b0b      	ldr	r3, [pc, #44]	@ (80141f8 <prvCheckTasksWaitingTermination+0x58>)
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	3b01      	subs	r3, #1
 80141ce:	4a0a      	ldr	r2, [pc, #40]	@ (80141f8 <prvCheckTasksWaitingTermination+0x58>)
 80141d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80141d2:	f000 fc0b 	bl	80149ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80141d6:	6878      	ldr	r0, [r7, #4]
 80141d8:	f000 f848 	bl	801426c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80141dc:	4b06      	ldr	r3, [pc, #24]	@ (80141f8 <prvCheckTasksWaitingTermination+0x58>)
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d1e1      	bne.n	80141a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80141e4:	bf00      	nop
 80141e6:	bf00      	nop
 80141e8:	3708      	adds	r7, #8
 80141ea:	46bd      	mov	sp, r7
 80141ec:	bd80      	pop	{r7, pc}
 80141ee:	bf00      	nop
 80141f0:	20001448 	.word	0x20001448
 80141f4:	20001474 	.word	0x20001474
 80141f8:	2000145c 	.word	0x2000145c

080141fc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80141fc:	b480      	push	{r7}
 80141fe:	b085      	sub	sp, #20
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8014204:	2300      	movs	r3, #0
 8014206:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8014208:	e005      	b.n	8014216 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	3301      	adds	r3, #1
 801420e:	607b      	str	r3, [r7, #4]
			ulCount++;
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	3301      	adds	r3, #1
 8014214:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	781b      	ldrb	r3, [r3, #0]
 801421a:	2ba5      	cmp	r3, #165	@ 0xa5
 801421c:	d0f5      	beq.n	801420a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	089b      	lsrs	r3, r3, #2
 8014222:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	b29b      	uxth	r3, r3
	}
 8014228:	4618      	mov	r0, r3
 801422a:	3714      	adds	r7, #20
 801422c:	46bd      	mov	sp, r7
 801422e:	bc80      	pop	{r7}
 8014230:	4770      	bx	lr
	...

08014234 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8014234:	b580      	push	{r7, lr}
 8014236:	b086      	sub	sp, #24
 8014238:	af00      	add	r7, sp, #0
 801423a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	2b00      	cmp	r3, #0
 8014240:	d102      	bne.n	8014248 <uxTaskGetStackHighWaterMark+0x14>
 8014242:	4b09      	ldr	r3, [pc, #36]	@ (8014268 <uxTaskGetStackHighWaterMark+0x34>)
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	e000      	b.n	801424a <uxTaskGetStackHighWaterMark+0x16>
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 801424c:	697b      	ldr	r3, [r7, #20]
 801424e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014250:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8014252:	6938      	ldr	r0, [r7, #16]
 8014254:	f7ff ffd2 	bl	80141fc <prvTaskCheckFreeStackSpace>
 8014258:	4603      	mov	r3, r0
 801425a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 801425c:	68fb      	ldr	r3, [r7, #12]
	}
 801425e:	4618      	mov	r0, r3
 8014260:	3718      	adds	r7, #24
 8014262:	46bd      	mov	sp, r7
 8014264:	bd80      	pop	{r7, pc}
 8014266:	bf00      	nop
 8014268:	20001374 	.word	0x20001374

0801426c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801426c:	b580      	push	{r7, lr}
 801426e:	b084      	sub	sp, #16
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801427a:	2b00      	cmp	r3, #0
 801427c:	d108      	bne.n	8014290 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014282:	4618      	mov	r0, r3
 8014284:	f000 fd4c 	bl	8014d20 <vPortFree>
				vPortFree( pxTCB );
 8014288:	6878      	ldr	r0, [r7, #4]
 801428a:	f000 fd49 	bl	8014d20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801428e:	e019      	b.n	80142c4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8014296:	2b01      	cmp	r3, #1
 8014298:	d103      	bne.n	80142a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801429a:	6878      	ldr	r0, [r7, #4]
 801429c:	f000 fd40 	bl	8014d20 <vPortFree>
	}
 80142a0:	e010      	b.n	80142c4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80142a8:	2b02      	cmp	r3, #2
 80142aa:	d00b      	beq.n	80142c4 <prvDeleteTCB+0x58>
	__asm volatile
 80142ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142b0:	f383 8811 	msr	BASEPRI, r3
 80142b4:	f3bf 8f6f 	isb	sy
 80142b8:	f3bf 8f4f 	dsb	sy
 80142bc:	60fb      	str	r3, [r7, #12]
}
 80142be:	bf00      	nop
 80142c0:	bf00      	nop
 80142c2:	e7fd      	b.n	80142c0 <prvDeleteTCB+0x54>
	}
 80142c4:	bf00      	nop
 80142c6:	3710      	adds	r7, #16
 80142c8:	46bd      	mov	sp, r7
 80142ca:	bd80      	pop	{r7, pc}

080142cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80142cc:	b480      	push	{r7}
 80142ce:	b083      	sub	sp, #12
 80142d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80142d2:	4b0e      	ldr	r3, [pc, #56]	@ (801430c <prvResetNextTaskUnblockTime+0x40>)
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d101      	bne.n	80142e0 <prvResetNextTaskUnblockTime+0x14>
 80142dc:	2301      	movs	r3, #1
 80142de:	e000      	b.n	80142e2 <prvResetNextTaskUnblockTime+0x16>
 80142e0:	2300      	movs	r3, #0
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d004      	beq.n	80142f0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80142e6:	4b0a      	ldr	r3, [pc, #40]	@ (8014310 <prvResetNextTaskUnblockTime+0x44>)
 80142e8:	f04f 32ff 	mov.w	r2, #4294967295
 80142ec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80142ee:	e008      	b.n	8014302 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80142f0:	4b06      	ldr	r3, [pc, #24]	@ (801430c <prvResetNextTaskUnblockTime+0x40>)
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	68db      	ldr	r3, [r3, #12]
 80142f6:	68db      	ldr	r3, [r3, #12]
 80142f8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	685b      	ldr	r3, [r3, #4]
 80142fe:	4a04      	ldr	r2, [pc, #16]	@ (8014310 <prvResetNextTaskUnblockTime+0x44>)
 8014300:	6013      	str	r3, [r2, #0]
}
 8014302:	bf00      	nop
 8014304:	370c      	adds	r7, #12
 8014306:	46bd      	mov	sp, r7
 8014308:	bc80      	pop	{r7}
 801430a:	4770      	bx	lr
 801430c:	2000142c 	.word	0x2000142c
 8014310:	20001494 	.word	0x20001494

08014314 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014314:	b480      	push	{r7}
 8014316:	b083      	sub	sp, #12
 8014318:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801431a:	4b0b      	ldr	r3, [pc, #44]	@ (8014348 <xTaskGetSchedulerState+0x34>)
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d102      	bne.n	8014328 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014322:	2301      	movs	r3, #1
 8014324:	607b      	str	r3, [r7, #4]
 8014326:	e008      	b.n	801433a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014328:	4b08      	ldr	r3, [pc, #32]	@ (801434c <xTaskGetSchedulerState+0x38>)
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d102      	bne.n	8014336 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014330:	2302      	movs	r3, #2
 8014332:	607b      	str	r3, [r7, #4]
 8014334:	e001      	b.n	801433a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014336:	2300      	movs	r3, #0
 8014338:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801433a:	687b      	ldr	r3, [r7, #4]
	}
 801433c:	4618      	mov	r0, r3
 801433e:	370c      	adds	r7, #12
 8014340:	46bd      	mov	sp, r7
 8014342:	bc80      	pop	{r7}
 8014344:	4770      	bx	lr
 8014346:	bf00      	nop
 8014348:	20001480 	.word	0x20001480
 801434c:	2000149c 	.word	0x2000149c

08014350 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014350:	b580      	push	{r7, lr}
 8014352:	b084      	sub	sp, #16
 8014354:	af00      	add	r7, sp, #0
 8014356:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801435c:	2300      	movs	r3, #0
 801435e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d06e      	beq.n	8014444 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014366:	68bb      	ldr	r3, [r7, #8]
 8014368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801436a:	4b39      	ldr	r3, [pc, #228]	@ (8014450 <xTaskPriorityInherit+0x100>)
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014370:	429a      	cmp	r2, r3
 8014372:	d25e      	bcs.n	8014432 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014374:	68bb      	ldr	r3, [r7, #8]
 8014376:	699b      	ldr	r3, [r3, #24]
 8014378:	2b00      	cmp	r3, #0
 801437a:	db06      	blt.n	801438a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801437c:	4b34      	ldr	r3, [pc, #208]	@ (8014450 <xTaskPriorityInherit+0x100>)
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014382:	f1c3 0207 	rsb	r2, r3, #7
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801438a:	68bb      	ldr	r3, [r7, #8]
 801438c:	6959      	ldr	r1, [r3, #20]
 801438e:	68bb      	ldr	r3, [r7, #8]
 8014390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014392:	4613      	mov	r3, r2
 8014394:	009b      	lsls	r3, r3, #2
 8014396:	4413      	add	r3, r2
 8014398:	009b      	lsls	r3, r3, #2
 801439a:	4a2e      	ldr	r2, [pc, #184]	@ (8014454 <xTaskPriorityInherit+0x104>)
 801439c:	4413      	add	r3, r2
 801439e:	4299      	cmp	r1, r3
 80143a0:	d101      	bne.n	80143a6 <xTaskPriorityInherit+0x56>
 80143a2:	2301      	movs	r3, #1
 80143a4:	e000      	b.n	80143a8 <xTaskPriorityInherit+0x58>
 80143a6:	2300      	movs	r3, #0
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d03a      	beq.n	8014422 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80143ac:	68bb      	ldr	r3, [r7, #8]
 80143ae:	3304      	adds	r3, #4
 80143b0:	4618      	mov	r0, r3
 80143b2:	f7fe f9d6 	bl	8012762 <uxListRemove>
 80143b6:	4603      	mov	r3, r0
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d115      	bne.n	80143e8 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80143bc:	68bb      	ldr	r3, [r7, #8]
 80143be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80143c0:	4924      	ldr	r1, [pc, #144]	@ (8014454 <xTaskPriorityInherit+0x104>)
 80143c2:	4613      	mov	r3, r2
 80143c4:	009b      	lsls	r3, r3, #2
 80143c6:	4413      	add	r3, r2
 80143c8:	009b      	lsls	r3, r3, #2
 80143ca:	440b      	add	r3, r1
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d10a      	bne.n	80143e8 <xTaskPriorityInherit+0x98>
 80143d2:	68bb      	ldr	r3, [r7, #8]
 80143d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143d6:	2201      	movs	r2, #1
 80143d8:	fa02 f303 	lsl.w	r3, r2, r3
 80143dc:	43da      	mvns	r2, r3
 80143de:	4b1e      	ldr	r3, [pc, #120]	@ (8014458 <xTaskPriorityInherit+0x108>)
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	4013      	ands	r3, r2
 80143e4:	4a1c      	ldr	r2, [pc, #112]	@ (8014458 <xTaskPriorityInherit+0x108>)
 80143e6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80143e8:	4b19      	ldr	r3, [pc, #100]	@ (8014450 <xTaskPriorityInherit+0x100>)
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80143ee:	68bb      	ldr	r3, [r7, #8]
 80143f0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80143f2:	68bb      	ldr	r3, [r7, #8]
 80143f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143f6:	2201      	movs	r2, #1
 80143f8:	409a      	lsls	r2, r3
 80143fa:	4b17      	ldr	r3, [pc, #92]	@ (8014458 <xTaskPriorityInherit+0x108>)
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	4313      	orrs	r3, r2
 8014400:	4a15      	ldr	r2, [pc, #84]	@ (8014458 <xTaskPriorityInherit+0x108>)
 8014402:	6013      	str	r3, [r2, #0]
 8014404:	68bb      	ldr	r3, [r7, #8]
 8014406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014408:	4613      	mov	r3, r2
 801440a:	009b      	lsls	r3, r3, #2
 801440c:	4413      	add	r3, r2
 801440e:	009b      	lsls	r3, r3, #2
 8014410:	4a10      	ldr	r2, [pc, #64]	@ (8014454 <xTaskPriorityInherit+0x104>)
 8014412:	441a      	add	r2, r3
 8014414:	68bb      	ldr	r3, [r7, #8]
 8014416:	3304      	adds	r3, #4
 8014418:	4619      	mov	r1, r3
 801441a:	4610      	mov	r0, r2
 801441c:	f7fe f946 	bl	80126ac <vListInsertEnd>
 8014420:	e004      	b.n	801442c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014422:	4b0b      	ldr	r3, [pc, #44]	@ (8014450 <xTaskPriorityInherit+0x100>)
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014428:	68bb      	ldr	r3, [r7, #8]
 801442a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801442c:	2301      	movs	r3, #1
 801442e:	60fb      	str	r3, [r7, #12]
 8014430:	e008      	b.n	8014444 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014432:	68bb      	ldr	r3, [r7, #8]
 8014434:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014436:	4b06      	ldr	r3, [pc, #24]	@ (8014450 <xTaskPriorityInherit+0x100>)
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801443c:	429a      	cmp	r2, r3
 801443e:	d201      	bcs.n	8014444 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014440:	2301      	movs	r3, #1
 8014442:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014444:	68fb      	ldr	r3, [r7, #12]
	}
 8014446:	4618      	mov	r0, r3
 8014448:	3710      	adds	r7, #16
 801444a:	46bd      	mov	sp, r7
 801444c:	bd80      	pop	{r7, pc}
 801444e:	bf00      	nop
 8014450:	20001374 	.word	0x20001374
 8014454:	20001378 	.word	0x20001378
 8014458:	2000147c 	.word	0x2000147c

0801445c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801445c:	b580      	push	{r7, lr}
 801445e:	b086      	sub	sp, #24
 8014460:	af00      	add	r7, sp, #0
 8014462:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014468:	2300      	movs	r3, #0
 801446a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d070      	beq.n	8014554 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014472:	4b3b      	ldr	r3, [pc, #236]	@ (8014560 <xTaskPriorityDisinherit+0x104>)
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	693a      	ldr	r2, [r7, #16]
 8014478:	429a      	cmp	r2, r3
 801447a:	d00b      	beq.n	8014494 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 801447c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014480:	f383 8811 	msr	BASEPRI, r3
 8014484:	f3bf 8f6f 	isb	sy
 8014488:	f3bf 8f4f 	dsb	sy
 801448c:	60fb      	str	r3, [r7, #12]
}
 801448e:	bf00      	nop
 8014490:	bf00      	nop
 8014492:	e7fd      	b.n	8014490 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014494:	693b      	ldr	r3, [r7, #16]
 8014496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014498:	2b00      	cmp	r3, #0
 801449a:	d10b      	bne.n	80144b4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 801449c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144a0:	f383 8811 	msr	BASEPRI, r3
 80144a4:	f3bf 8f6f 	isb	sy
 80144a8:	f3bf 8f4f 	dsb	sy
 80144ac:	60bb      	str	r3, [r7, #8]
}
 80144ae:	bf00      	nop
 80144b0:	bf00      	nop
 80144b2:	e7fd      	b.n	80144b0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80144b4:	693b      	ldr	r3, [r7, #16]
 80144b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80144b8:	1e5a      	subs	r2, r3, #1
 80144ba:	693b      	ldr	r3, [r7, #16]
 80144bc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80144be:	693b      	ldr	r3, [r7, #16]
 80144c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80144c2:	693b      	ldr	r3, [r7, #16]
 80144c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80144c6:	429a      	cmp	r2, r3
 80144c8:	d044      	beq.n	8014554 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80144ca:	693b      	ldr	r3, [r7, #16]
 80144cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d140      	bne.n	8014554 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80144d2:	693b      	ldr	r3, [r7, #16]
 80144d4:	3304      	adds	r3, #4
 80144d6:	4618      	mov	r0, r3
 80144d8:	f7fe f943 	bl	8012762 <uxListRemove>
 80144dc:	4603      	mov	r3, r0
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d115      	bne.n	801450e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80144e2:	693b      	ldr	r3, [r7, #16]
 80144e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80144e6:	491f      	ldr	r1, [pc, #124]	@ (8014564 <xTaskPriorityDisinherit+0x108>)
 80144e8:	4613      	mov	r3, r2
 80144ea:	009b      	lsls	r3, r3, #2
 80144ec:	4413      	add	r3, r2
 80144ee:	009b      	lsls	r3, r3, #2
 80144f0:	440b      	add	r3, r1
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d10a      	bne.n	801450e <xTaskPriorityDisinherit+0xb2>
 80144f8:	693b      	ldr	r3, [r7, #16]
 80144fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144fc:	2201      	movs	r2, #1
 80144fe:	fa02 f303 	lsl.w	r3, r2, r3
 8014502:	43da      	mvns	r2, r3
 8014504:	4b18      	ldr	r3, [pc, #96]	@ (8014568 <xTaskPriorityDisinherit+0x10c>)
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	4013      	ands	r3, r2
 801450a:	4a17      	ldr	r2, [pc, #92]	@ (8014568 <xTaskPriorityDisinherit+0x10c>)
 801450c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801450e:	693b      	ldr	r3, [r7, #16]
 8014510:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014512:	693b      	ldr	r3, [r7, #16]
 8014514:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014516:	693b      	ldr	r3, [r7, #16]
 8014518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801451a:	f1c3 0207 	rsb	r2, r3, #7
 801451e:	693b      	ldr	r3, [r7, #16]
 8014520:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014522:	693b      	ldr	r3, [r7, #16]
 8014524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014526:	2201      	movs	r2, #1
 8014528:	409a      	lsls	r2, r3
 801452a:	4b0f      	ldr	r3, [pc, #60]	@ (8014568 <xTaskPriorityDisinherit+0x10c>)
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	4313      	orrs	r3, r2
 8014530:	4a0d      	ldr	r2, [pc, #52]	@ (8014568 <xTaskPriorityDisinherit+0x10c>)
 8014532:	6013      	str	r3, [r2, #0]
 8014534:	693b      	ldr	r3, [r7, #16]
 8014536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014538:	4613      	mov	r3, r2
 801453a:	009b      	lsls	r3, r3, #2
 801453c:	4413      	add	r3, r2
 801453e:	009b      	lsls	r3, r3, #2
 8014540:	4a08      	ldr	r2, [pc, #32]	@ (8014564 <xTaskPriorityDisinherit+0x108>)
 8014542:	441a      	add	r2, r3
 8014544:	693b      	ldr	r3, [r7, #16]
 8014546:	3304      	adds	r3, #4
 8014548:	4619      	mov	r1, r3
 801454a:	4610      	mov	r0, r2
 801454c:	f7fe f8ae 	bl	80126ac <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014550:	2301      	movs	r3, #1
 8014552:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014554:	697b      	ldr	r3, [r7, #20]
	}
 8014556:	4618      	mov	r0, r3
 8014558:	3718      	adds	r7, #24
 801455a:	46bd      	mov	sp, r7
 801455c:	bd80      	pop	{r7, pc}
 801455e:	bf00      	nop
 8014560:	20001374 	.word	0x20001374
 8014564:	20001378 	.word	0x20001378
 8014568:	2000147c 	.word	0x2000147c

0801456c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801456c:	b580      	push	{r7, lr}
 801456e:	b088      	sub	sp, #32
 8014570:	af00      	add	r7, sp, #0
 8014572:	6078      	str	r0, [r7, #4]
 8014574:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801457a:	2301      	movs	r3, #1
 801457c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	2b00      	cmp	r3, #0
 8014582:	f000 808a 	beq.w	801469a <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014586:	69bb      	ldr	r3, [r7, #24]
 8014588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801458a:	2b00      	cmp	r3, #0
 801458c:	d10b      	bne.n	80145a6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 801458e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014592:	f383 8811 	msr	BASEPRI, r3
 8014596:	f3bf 8f6f 	isb	sy
 801459a:	f3bf 8f4f 	dsb	sy
 801459e:	60fb      	str	r3, [r7, #12]
}
 80145a0:	bf00      	nop
 80145a2:	bf00      	nop
 80145a4:	e7fd      	b.n	80145a2 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80145a6:	69bb      	ldr	r3, [r7, #24]
 80145a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80145aa:	683a      	ldr	r2, [r7, #0]
 80145ac:	429a      	cmp	r2, r3
 80145ae:	d902      	bls.n	80145b6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	61fb      	str	r3, [r7, #28]
 80145b4:	e002      	b.n	80145bc <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80145b6:	69bb      	ldr	r3, [r7, #24]
 80145b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80145ba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80145bc:	69bb      	ldr	r3, [r7, #24]
 80145be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145c0:	69fa      	ldr	r2, [r7, #28]
 80145c2:	429a      	cmp	r2, r3
 80145c4:	d069      	beq.n	801469a <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80145c6:	69bb      	ldr	r3, [r7, #24]
 80145c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80145ca:	697a      	ldr	r2, [r7, #20]
 80145cc:	429a      	cmp	r2, r3
 80145ce:	d164      	bne.n	801469a <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80145d0:	4b34      	ldr	r3, [pc, #208]	@ (80146a4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	69ba      	ldr	r2, [r7, #24]
 80145d6:	429a      	cmp	r2, r3
 80145d8:	d10b      	bne.n	80145f2 <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 80145da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145de:	f383 8811 	msr	BASEPRI, r3
 80145e2:	f3bf 8f6f 	isb	sy
 80145e6:	f3bf 8f4f 	dsb	sy
 80145ea:	60bb      	str	r3, [r7, #8]
}
 80145ec:	bf00      	nop
 80145ee:	bf00      	nop
 80145f0:	e7fd      	b.n	80145ee <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80145f2:	69bb      	ldr	r3, [r7, #24]
 80145f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145f6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80145f8:	69bb      	ldr	r3, [r7, #24]
 80145fa:	69fa      	ldr	r2, [r7, #28]
 80145fc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80145fe:	69bb      	ldr	r3, [r7, #24]
 8014600:	699b      	ldr	r3, [r3, #24]
 8014602:	2b00      	cmp	r3, #0
 8014604:	db04      	blt.n	8014610 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014606:	69fb      	ldr	r3, [r7, #28]
 8014608:	f1c3 0207 	rsb	r2, r3, #7
 801460c:	69bb      	ldr	r3, [r7, #24]
 801460e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014610:	69bb      	ldr	r3, [r7, #24]
 8014612:	6959      	ldr	r1, [r3, #20]
 8014614:	693a      	ldr	r2, [r7, #16]
 8014616:	4613      	mov	r3, r2
 8014618:	009b      	lsls	r3, r3, #2
 801461a:	4413      	add	r3, r2
 801461c:	009b      	lsls	r3, r3, #2
 801461e:	4a22      	ldr	r2, [pc, #136]	@ (80146a8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014620:	4413      	add	r3, r2
 8014622:	4299      	cmp	r1, r3
 8014624:	d101      	bne.n	801462a <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8014626:	2301      	movs	r3, #1
 8014628:	e000      	b.n	801462c <vTaskPriorityDisinheritAfterTimeout+0xc0>
 801462a:	2300      	movs	r3, #0
 801462c:	2b00      	cmp	r3, #0
 801462e:	d034      	beq.n	801469a <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014630:	69bb      	ldr	r3, [r7, #24]
 8014632:	3304      	adds	r3, #4
 8014634:	4618      	mov	r0, r3
 8014636:	f7fe f894 	bl	8012762 <uxListRemove>
 801463a:	4603      	mov	r3, r0
 801463c:	2b00      	cmp	r3, #0
 801463e:	d115      	bne.n	801466c <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014640:	69bb      	ldr	r3, [r7, #24]
 8014642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014644:	4918      	ldr	r1, [pc, #96]	@ (80146a8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014646:	4613      	mov	r3, r2
 8014648:	009b      	lsls	r3, r3, #2
 801464a:	4413      	add	r3, r2
 801464c:	009b      	lsls	r3, r3, #2
 801464e:	440b      	add	r3, r1
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d10a      	bne.n	801466c <vTaskPriorityDisinheritAfterTimeout+0x100>
 8014656:	69bb      	ldr	r3, [r7, #24]
 8014658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801465a:	2201      	movs	r2, #1
 801465c:	fa02 f303 	lsl.w	r3, r2, r3
 8014660:	43da      	mvns	r2, r3
 8014662:	4b12      	ldr	r3, [pc, #72]	@ (80146ac <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	4013      	ands	r3, r2
 8014668:	4a10      	ldr	r2, [pc, #64]	@ (80146ac <vTaskPriorityDisinheritAfterTimeout+0x140>)
 801466a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801466c:	69bb      	ldr	r3, [r7, #24]
 801466e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014670:	2201      	movs	r2, #1
 8014672:	409a      	lsls	r2, r3
 8014674:	4b0d      	ldr	r3, [pc, #52]	@ (80146ac <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	4313      	orrs	r3, r2
 801467a:	4a0c      	ldr	r2, [pc, #48]	@ (80146ac <vTaskPriorityDisinheritAfterTimeout+0x140>)
 801467c:	6013      	str	r3, [r2, #0]
 801467e:	69bb      	ldr	r3, [r7, #24]
 8014680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014682:	4613      	mov	r3, r2
 8014684:	009b      	lsls	r3, r3, #2
 8014686:	4413      	add	r3, r2
 8014688:	009b      	lsls	r3, r3, #2
 801468a:	4a07      	ldr	r2, [pc, #28]	@ (80146a8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801468c:	441a      	add	r2, r3
 801468e:	69bb      	ldr	r3, [r7, #24]
 8014690:	3304      	adds	r3, #4
 8014692:	4619      	mov	r1, r3
 8014694:	4610      	mov	r0, r2
 8014696:	f7fe f809 	bl	80126ac <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801469a:	bf00      	nop
 801469c:	3720      	adds	r7, #32
 801469e:	46bd      	mov	sp, r7
 80146a0:	bd80      	pop	{r7, pc}
 80146a2:	bf00      	nop
 80146a4:	20001374 	.word	0x20001374
 80146a8:	20001378 	.word	0x20001378
 80146ac:	2000147c 	.word	0x2000147c

080146b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80146b0:	b480      	push	{r7}
 80146b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80146b4:	4b07      	ldr	r3, [pc, #28]	@ (80146d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d004      	beq.n	80146c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80146bc:	4b05      	ldr	r3, [pc, #20]	@ (80146d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80146c2:	3201      	adds	r2, #1
 80146c4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80146c6:	4b03      	ldr	r3, [pc, #12]	@ (80146d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80146c8:	681b      	ldr	r3, [r3, #0]
	}
 80146ca:	4618      	mov	r0, r3
 80146cc:	46bd      	mov	sp, r7
 80146ce:	bc80      	pop	{r7}
 80146d0:	4770      	bx	lr
 80146d2:	bf00      	nop
 80146d4:	20001374 	.word	0x20001374

080146d8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	b084      	sub	sp, #16
 80146dc:	af00      	add	r7, sp, #0
 80146de:	6078      	str	r0, [r7, #4]
 80146e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80146e2:	4b29      	ldr	r3, [pc, #164]	@ (8014788 <prvAddCurrentTaskToDelayedList+0xb0>)
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80146e8:	4b28      	ldr	r3, [pc, #160]	@ (801478c <prvAddCurrentTaskToDelayedList+0xb4>)
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	3304      	adds	r3, #4
 80146ee:	4618      	mov	r0, r3
 80146f0:	f7fe f837 	bl	8012762 <uxListRemove>
 80146f4:	4603      	mov	r3, r0
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d10b      	bne.n	8014712 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80146fa:	4b24      	ldr	r3, [pc, #144]	@ (801478c <prvAddCurrentTaskToDelayedList+0xb4>)
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014700:	2201      	movs	r2, #1
 8014702:	fa02 f303 	lsl.w	r3, r2, r3
 8014706:	43da      	mvns	r2, r3
 8014708:	4b21      	ldr	r3, [pc, #132]	@ (8014790 <prvAddCurrentTaskToDelayedList+0xb8>)
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	4013      	ands	r3, r2
 801470e:	4a20      	ldr	r2, [pc, #128]	@ (8014790 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014710:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014718:	d10a      	bne.n	8014730 <prvAddCurrentTaskToDelayedList+0x58>
 801471a:	683b      	ldr	r3, [r7, #0]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d007      	beq.n	8014730 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014720:	4b1a      	ldr	r3, [pc, #104]	@ (801478c <prvAddCurrentTaskToDelayedList+0xb4>)
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	3304      	adds	r3, #4
 8014726:	4619      	mov	r1, r3
 8014728:	481a      	ldr	r0, [pc, #104]	@ (8014794 <prvAddCurrentTaskToDelayedList+0xbc>)
 801472a:	f7fd ffbf 	bl	80126ac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801472e:	e026      	b.n	801477e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014730:	68fa      	ldr	r2, [r7, #12]
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	4413      	add	r3, r2
 8014736:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014738:	4b14      	ldr	r3, [pc, #80]	@ (801478c <prvAddCurrentTaskToDelayedList+0xb4>)
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	68ba      	ldr	r2, [r7, #8]
 801473e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014740:	68ba      	ldr	r2, [r7, #8]
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	429a      	cmp	r2, r3
 8014746:	d209      	bcs.n	801475c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014748:	4b13      	ldr	r3, [pc, #76]	@ (8014798 <prvAddCurrentTaskToDelayedList+0xc0>)
 801474a:	681a      	ldr	r2, [r3, #0]
 801474c:	4b0f      	ldr	r3, [pc, #60]	@ (801478c <prvAddCurrentTaskToDelayedList+0xb4>)
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	3304      	adds	r3, #4
 8014752:	4619      	mov	r1, r3
 8014754:	4610      	mov	r0, r2
 8014756:	f7fd ffcc 	bl	80126f2 <vListInsert>
}
 801475a:	e010      	b.n	801477e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801475c:	4b0f      	ldr	r3, [pc, #60]	@ (801479c <prvAddCurrentTaskToDelayedList+0xc4>)
 801475e:	681a      	ldr	r2, [r3, #0]
 8014760:	4b0a      	ldr	r3, [pc, #40]	@ (801478c <prvAddCurrentTaskToDelayedList+0xb4>)
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	3304      	adds	r3, #4
 8014766:	4619      	mov	r1, r3
 8014768:	4610      	mov	r0, r2
 801476a:	f7fd ffc2 	bl	80126f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801476e:	4b0c      	ldr	r3, [pc, #48]	@ (80147a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	68ba      	ldr	r2, [r7, #8]
 8014774:	429a      	cmp	r2, r3
 8014776:	d202      	bcs.n	801477e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014778:	4a09      	ldr	r2, [pc, #36]	@ (80147a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 801477a:	68bb      	ldr	r3, [r7, #8]
 801477c:	6013      	str	r3, [r2, #0]
}
 801477e:	bf00      	nop
 8014780:	3710      	adds	r7, #16
 8014782:	46bd      	mov	sp, r7
 8014784:	bd80      	pop	{r7, pc}
 8014786:	bf00      	nop
 8014788:	20001478 	.word	0x20001478
 801478c:	20001374 	.word	0x20001374
 8014790:	2000147c 	.word	0x2000147c
 8014794:	20001460 	.word	0x20001460
 8014798:	20001430 	.word	0x20001430
 801479c:	2000142c 	.word	0x2000142c
 80147a0:	20001494 	.word	0x20001494

080147a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80147a4:	b480      	push	{r7}
 80147a6:	b085      	sub	sp, #20
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	60f8      	str	r0, [r7, #12]
 80147ac:	60b9      	str	r1, [r7, #8]
 80147ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	3b04      	subs	r3, #4
 80147b4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80147bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	3b04      	subs	r3, #4
 80147c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80147c4:	68bb      	ldr	r3, [r7, #8]
 80147c6:	f023 0201 	bic.w	r2, r3, #1
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	3b04      	subs	r3, #4
 80147d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80147d4:	4a08      	ldr	r2, [pc, #32]	@ (80147f8 <pxPortInitialiseStack+0x54>)
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	3b14      	subs	r3, #20
 80147de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80147e0:	687a      	ldr	r2, [r7, #4]
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	3b20      	subs	r3, #32
 80147ea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80147ec:	68fb      	ldr	r3, [r7, #12]
}
 80147ee:	4618      	mov	r0, r3
 80147f0:	3714      	adds	r7, #20
 80147f2:	46bd      	mov	sp, r7
 80147f4:	bc80      	pop	{r7}
 80147f6:	4770      	bx	lr
 80147f8:	080147fd 	.word	0x080147fd

080147fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80147fc:	b480      	push	{r7}
 80147fe:	b085      	sub	sp, #20
 8014800:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8014802:	2300      	movs	r3, #0
 8014804:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014806:	4b12      	ldr	r3, [pc, #72]	@ (8014850 <prvTaskExitError+0x54>)
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801480e:	d00b      	beq.n	8014828 <prvTaskExitError+0x2c>
	__asm volatile
 8014810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014814:	f383 8811 	msr	BASEPRI, r3
 8014818:	f3bf 8f6f 	isb	sy
 801481c:	f3bf 8f4f 	dsb	sy
 8014820:	60fb      	str	r3, [r7, #12]
}
 8014822:	bf00      	nop
 8014824:	bf00      	nop
 8014826:	e7fd      	b.n	8014824 <prvTaskExitError+0x28>
	__asm volatile
 8014828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801482c:	f383 8811 	msr	BASEPRI, r3
 8014830:	f3bf 8f6f 	isb	sy
 8014834:	f3bf 8f4f 	dsb	sy
 8014838:	60bb      	str	r3, [r7, #8]
}
 801483a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801483c:	bf00      	nop
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d0fc      	beq.n	801483e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014844:	bf00      	nop
 8014846:	bf00      	nop
 8014848:	3714      	adds	r7, #20
 801484a:	46bd      	mov	sp, r7
 801484c:	bc80      	pop	{r7}
 801484e:	4770      	bx	lr
 8014850:	20000040 	.word	0x20000040
	...

08014860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014860:	4b07      	ldr	r3, [pc, #28]	@ (8014880 <pxCurrentTCBConst2>)
 8014862:	6819      	ldr	r1, [r3, #0]
 8014864:	6808      	ldr	r0, [r1, #0]
 8014866:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801486a:	f380 8809 	msr	PSP, r0
 801486e:	f3bf 8f6f 	isb	sy
 8014872:	f04f 0000 	mov.w	r0, #0
 8014876:	f380 8811 	msr	BASEPRI, r0
 801487a:	f04e 0e0d 	orr.w	lr, lr, #13
 801487e:	4770      	bx	lr

08014880 <pxCurrentTCBConst2>:
 8014880:	20001374 	.word	0x20001374
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014884:	bf00      	nop
 8014886:	bf00      	nop

08014888 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8014888:	4806      	ldr	r0, [pc, #24]	@ (80148a4 <prvPortStartFirstTask+0x1c>)
 801488a:	6800      	ldr	r0, [r0, #0]
 801488c:	6800      	ldr	r0, [r0, #0]
 801488e:	f380 8808 	msr	MSP, r0
 8014892:	b662      	cpsie	i
 8014894:	b661      	cpsie	f
 8014896:	f3bf 8f4f 	dsb	sy
 801489a:	f3bf 8f6f 	isb	sy
 801489e:	df00      	svc	0
 80148a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80148a2:	bf00      	nop
 80148a4:	e000ed08 	.word	0xe000ed08

080148a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b084      	sub	sp, #16
 80148ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80148ae:	4b32      	ldr	r3, [pc, #200]	@ (8014978 <xPortStartScheduler+0xd0>)
 80148b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	781b      	ldrb	r3, [r3, #0]
 80148b6:	b2db      	uxtb	r3, r3
 80148b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	22ff      	movs	r2, #255	@ 0xff
 80148be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	781b      	ldrb	r3, [r3, #0]
 80148c4:	b2db      	uxtb	r3, r3
 80148c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80148c8:	78fb      	ldrb	r3, [r7, #3]
 80148ca:	b2db      	uxtb	r3, r3
 80148cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80148d0:	b2da      	uxtb	r2, r3
 80148d2:	4b2a      	ldr	r3, [pc, #168]	@ (801497c <xPortStartScheduler+0xd4>)
 80148d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80148d6:	4b2a      	ldr	r3, [pc, #168]	@ (8014980 <xPortStartScheduler+0xd8>)
 80148d8:	2207      	movs	r2, #7
 80148da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80148dc:	e009      	b.n	80148f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80148de:	4b28      	ldr	r3, [pc, #160]	@ (8014980 <xPortStartScheduler+0xd8>)
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	3b01      	subs	r3, #1
 80148e4:	4a26      	ldr	r2, [pc, #152]	@ (8014980 <xPortStartScheduler+0xd8>)
 80148e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80148e8:	78fb      	ldrb	r3, [r7, #3]
 80148ea:	b2db      	uxtb	r3, r3
 80148ec:	005b      	lsls	r3, r3, #1
 80148ee:	b2db      	uxtb	r3, r3
 80148f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80148f2:	78fb      	ldrb	r3, [r7, #3]
 80148f4:	b2db      	uxtb	r3, r3
 80148f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80148fa:	2b80      	cmp	r3, #128	@ 0x80
 80148fc:	d0ef      	beq.n	80148de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80148fe:	4b20      	ldr	r3, [pc, #128]	@ (8014980 <xPortStartScheduler+0xd8>)
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	f1c3 0307 	rsb	r3, r3, #7
 8014906:	2b04      	cmp	r3, #4
 8014908:	d00b      	beq.n	8014922 <xPortStartScheduler+0x7a>
	__asm volatile
 801490a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801490e:	f383 8811 	msr	BASEPRI, r3
 8014912:	f3bf 8f6f 	isb	sy
 8014916:	f3bf 8f4f 	dsb	sy
 801491a:	60bb      	str	r3, [r7, #8]
}
 801491c:	bf00      	nop
 801491e:	bf00      	nop
 8014920:	e7fd      	b.n	801491e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014922:	4b17      	ldr	r3, [pc, #92]	@ (8014980 <xPortStartScheduler+0xd8>)
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	021b      	lsls	r3, r3, #8
 8014928:	4a15      	ldr	r2, [pc, #84]	@ (8014980 <xPortStartScheduler+0xd8>)
 801492a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801492c:	4b14      	ldr	r3, [pc, #80]	@ (8014980 <xPortStartScheduler+0xd8>)
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014934:	4a12      	ldr	r2, [pc, #72]	@ (8014980 <xPortStartScheduler+0xd8>)
 8014936:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	b2da      	uxtb	r2, r3
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014940:	4b10      	ldr	r3, [pc, #64]	@ (8014984 <xPortStartScheduler+0xdc>)
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	4a0f      	ldr	r2, [pc, #60]	@ (8014984 <xPortStartScheduler+0xdc>)
 8014946:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801494a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801494c:	4b0d      	ldr	r3, [pc, #52]	@ (8014984 <xPortStartScheduler+0xdc>)
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	4a0c      	ldr	r2, [pc, #48]	@ (8014984 <xPortStartScheduler+0xdc>)
 8014952:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8014956:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014958:	f000 f8b8 	bl	8014acc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801495c:	4b0a      	ldr	r3, [pc, #40]	@ (8014988 <xPortStartScheduler+0xe0>)
 801495e:	2200      	movs	r2, #0
 8014960:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014962:	f7ff ff91 	bl	8014888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014966:	f7ff fa57 	bl	8013e18 <vTaskSwitchContext>
	prvTaskExitError();
 801496a:	f7ff ff47 	bl	80147fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801496e:	2300      	movs	r3, #0
}
 8014970:	4618      	mov	r0, r3
 8014972:	3710      	adds	r7, #16
 8014974:	46bd      	mov	sp, r7
 8014976:	bd80      	pop	{r7, pc}
 8014978:	e000e400 	.word	0xe000e400
 801497c:	200014a0 	.word	0x200014a0
 8014980:	200014a4 	.word	0x200014a4
 8014984:	e000ed20 	.word	0xe000ed20
 8014988:	20000040 	.word	0x20000040

0801498c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801498c:	b480      	push	{r7}
 801498e:	b083      	sub	sp, #12
 8014990:	af00      	add	r7, sp, #0
	__asm volatile
 8014992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014996:	f383 8811 	msr	BASEPRI, r3
 801499a:	f3bf 8f6f 	isb	sy
 801499e:	f3bf 8f4f 	dsb	sy
 80149a2:	607b      	str	r3, [r7, #4]
}
 80149a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80149a6:	4b0f      	ldr	r3, [pc, #60]	@ (80149e4 <vPortEnterCritical+0x58>)
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	3301      	adds	r3, #1
 80149ac:	4a0d      	ldr	r2, [pc, #52]	@ (80149e4 <vPortEnterCritical+0x58>)
 80149ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80149b0:	4b0c      	ldr	r3, [pc, #48]	@ (80149e4 <vPortEnterCritical+0x58>)
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	2b01      	cmp	r3, #1
 80149b6:	d110      	bne.n	80149da <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80149b8:	4b0b      	ldr	r3, [pc, #44]	@ (80149e8 <vPortEnterCritical+0x5c>)
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	b2db      	uxtb	r3, r3
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d00b      	beq.n	80149da <vPortEnterCritical+0x4e>
	__asm volatile
 80149c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149c6:	f383 8811 	msr	BASEPRI, r3
 80149ca:	f3bf 8f6f 	isb	sy
 80149ce:	f3bf 8f4f 	dsb	sy
 80149d2:	603b      	str	r3, [r7, #0]
}
 80149d4:	bf00      	nop
 80149d6:	bf00      	nop
 80149d8:	e7fd      	b.n	80149d6 <vPortEnterCritical+0x4a>
	}
}
 80149da:	bf00      	nop
 80149dc:	370c      	adds	r7, #12
 80149de:	46bd      	mov	sp, r7
 80149e0:	bc80      	pop	{r7}
 80149e2:	4770      	bx	lr
 80149e4:	20000040 	.word	0x20000040
 80149e8:	e000ed04 	.word	0xe000ed04

080149ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80149ec:	b480      	push	{r7}
 80149ee:	b083      	sub	sp, #12
 80149f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80149f2:	4b12      	ldr	r3, [pc, #72]	@ (8014a3c <vPortExitCritical+0x50>)
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d10b      	bne.n	8014a12 <vPortExitCritical+0x26>
	__asm volatile
 80149fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149fe:	f383 8811 	msr	BASEPRI, r3
 8014a02:	f3bf 8f6f 	isb	sy
 8014a06:	f3bf 8f4f 	dsb	sy
 8014a0a:	607b      	str	r3, [r7, #4]
}
 8014a0c:	bf00      	nop
 8014a0e:	bf00      	nop
 8014a10:	e7fd      	b.n	8014a0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014a12:	4b0a      	ldr	r3, [pc, #40]	@ (8014a3c <vPortExitCritical+0x50>)
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	3b01      	subs	r3, #1
 8014a18:	4a08      	ldr	r2, [pc, #32]	@ (8014a3c <vPortExitCritical+0x50>)
 8014a1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014a1c:	4b07      	ldr	r3, [pc, #28]	@ (8014a3c <vPortExitCritical+0x50>)
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d105      	bne.n	8014a30 <vPortExitCritical+0x44>
 8014a24:	2300      	movs	r3, #0
 8014a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014a28:	683b      	ldr	r3, [r7, #0]
 8014a2a:	f383 8811 	msr	BASEPRI, r3
}
 8014a2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014a30:	bf00      	nop
 8014a32:	370c      	adds	r7, #12
 8014a34:	46bd      	mov	sp, r7
 8014a36:	bc80      	pop	{r7}
 8014a38:	4770      	bx	lr
 8014a3a:	bf00      	nop
 8014a3c:	20000040 	.word	0x20000040

08014a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014a40:	f3ef 8009 	mrs	r0, PSP
 8014a44:	f3bf 8f6f 	isb	sy
 8014a48:	4b0d      	ldr	r3, [pc, #52]	@ (8014a80 <pxCurrentTCBConst>)
 8014a4a:	681a      	ldr	r2, [r3, #0]
 8014a4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014a50:	6010      	str	r0, [r2, #0]
 8014a52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8014a56:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8014a5a:	f380 8811 	msr	BASEPRI, r0
 8014a5e:	f7ff f9db 	bl	8013e18 <vTaskSwitchContext>
 8014a62:	f04f 0000 	mov.w	r0, #0
 8014a66:	f380 8811 	msr	BASEPRI, r0
 8014a6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014a6e:	6819      	ldr	r1, [r3, #0]
 8014a70:	6808      	ldr	r0, [r1, #0]
 8014a72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014a76:	f380 8809 	msr	PSP, r0
 8014a7a:	f3bf 8f6f 	isb	sy
 8014a7e:	4770      	bx	lr

08014a80 <pxCurrentTCBConst>:
 8014a80:	20001374 	.word	0x20001374
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014a84:	bf00      	nop
 8014a86:	bf00      	nop

08014a88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b082      	sub	sp, #8
 8014a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8014a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a92:	f383 8811 	msr	BASEPRI, r3
 8014a96:	f3bf 8f6f 	isb	sy
 8014a9a:	f3bf 8f4f 	dsb	sy
 8014a9e:	607b      	str	r3, [r7, #4]
}
 8014aa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014aa2:	f7ff f8fb 	bl	8013c9c <xTaskIncrementTick>
 8014aa6:	4603      	mov	r3, r0
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d003      	beq.n	8014ab4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014aac:	4b06      	ldr	r3, [pc, #24]	@ (8014ac8 <SysTick_Handler+0x40>)
 8014aae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014ab2:	601a      	str	r2, [r3, #0]
 8014ab4:	2300      	movs	r3, #0
 8014ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014ab8:	683b      	ldr	r3, [r7, #0]
 8014aba:	f383 8811 	msr	BASEPRI, r3
}
 8014abe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014ac0:	bf00      	nop
 8014ac2:	3708      	adds	r7, #8
 8014ac4:	46bd      	mov	sp, r7
 8014ac6:	bd80      	pop	{r7, pc}
 8014ac8:	e000ed04 	.word	0xe000ed04

08014acc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014acc:	b480      	push	{r7}
 8014ace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8014afc <vPortSetupTimerInterrupt+0x30>)
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8014b00 <vPortSetupTimerInterrupt+0x34>)
 8014ad8:	2200      	movs	r2, #0
 8014ada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014adc:	4b09      	ldr	r3, [pc, #36]	@ (8014b04 <vPortSetupTimerInterrupt+0x38>)
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	4a09      	ldr	r2, [pc, #36]	@ (8014b08 <vPortSetupTimerInterrupt+0x3c>)
 8014ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8014ae6:	099b      	lsrs	r3, r3, #6
 8014ae8:	4a08      	ldr	r2, [pc, #32]	@ (8014b0c <vPortSetupTimerInterrupt+0x40>)
 8014aea:	3b01      	subs	r3, #1
 8014aec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014aee:	4b03      	ldr	r3, [pc, #12]	@ (8014afc <vPortSetupTimerInterrupt+0x30>)
 8014af0:	2207      	movs	r2, #7
 8014af2:	601a      	str	r2, [r3, #0]
}
 8014af4:	bf00      	nop
 8014af6:	46bd      	mov	sp, r7
 8014af8:	bc80      	pop	{r7}
 8014afa:	4770      	bx	lr
 8014afc:	e000e010 	.word	0xe000e010
 8014b00:	e000e018 	.word	0xe000e018
 8014b04:	20000028 	.word	0x20000028
 8014b08:	10624dd3 	.word	0x10624dd3
 8014b0c:	e000e014 	.word	0xe000e014

08014b10 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014b10:	b480      	push	{r7}
 8014b12:	b085      	sub	sp, #20
 8014b14:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014b16:	f3ef 8305 	mrs	r3, IPSR
 8014b1a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	2b0f      	cmp	r3, #15
 8014b20:	d915      	bls.n	8014b4e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014b22:	4a17      	ldr	r2, [pc, #92]	@ (8014b80 <vPortValidateInterruptPriority+0x70>)
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	4413      	add	r3, r2
 8014b28:	781b      	ldrb	r3, [r3, #0]
 8014b2a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014b2c:	4b15      	ldr	r3, [pc, #84]	@ (8014b84 <vPortValidateInterruptPriority+0x74>)
 8014b2e:	781b      	ldrb	r3, [r3, #0]
 8014b30:	7afa      	ldrb	r2, [r7, #11]
 8014b32:	429a      	cmp	r2, r3
 8014b34:	d20b      	bcs.n	8014b4e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8014b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b3a:	f383 8811 	msr	BASEPRI, r3
 8014b3e:	f3bf 8f6f 	isb	sy
 8014b42:	f3bf 8f4f 	dsb	sy
 8014b46:	607b      	str	r3, [r7, #4]
}
 8014b48:	bf00      	nop
 8014b4a:	bf00      	nop
 8014b4c:	e7fd      	b.n	8014b4a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8014b88 <vPortValidateInterruptPriority+0x78>)
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8014b56:	4b0d      	ldr	r3, [pc, #52]	@ (8014b8c <vPortValidateInterruptPriority+0x7c>)
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	429a      	cmp	r2, r3
 8014b5c:	d90b      	bls.n	8014b76 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8014b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b62:	f383 8811 	msr	BASEPRI, r3
 8014b66:	f3bf 8f6f 	isb	sy
 8014b6a:	f3bf 8f4f 	dsb	sy
 8014b6e:	603b      	str	r3, [r7, #0]
}
 8014b70:	bf00      	nop
 8014b72:	bf00      	nop
 8014b74:	e7fd      	b.n	8014b72 <vPortValidateInterruptPriority+0x62>
	}
 8014b76:	bf00      	nop
 8014b78:	3714      	adds	r7, #20
 8014b7a:	46bd      	mov	sp, r7
 8014b7c:	bc80      	pop	{r7}
 8014b7e:	4770      	bx	lr
 8014b80:	e000e3f0 	.word	0xe000e3f0
 8014b84:	200014a0 	.word	0x200014a0
 8014b88:	e000ed0c 	.word	0xe000ed0c
 8014b8c:	200014a4 	.word	0x200014a4

08014b90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b08a      	sub	sp, #40	@ 0x28
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014b98:	2300      	movs	r3, #0
 8014b9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014b9c:	f7fe ffc4 	bl	8013b28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014ba0:	4b5a      	ldr	r3, [pc, #360]	@ (8014d0c <pvPortMalloc+0x17c>)
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d101      	bne.n	8014bac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014ba8:	f000 f916 	bl	8014dd8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014bac:	4b58      	ldr	r3, [pc, #352]	@ (8014d10 <pvPortMalloc+0x180>)
 8014bae:	681a      	ldr	r2, [r3, #0]
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	4013      	ands	r3, r2
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	f040 8090 	bne.w	8014cda <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d01e      	beq.n	8014bfe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8014bc0:	2208      	movs	r2, #8
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	4413      	add	r3, r2
 8014bc6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	f003 0307 	and.w	r3, r3, #7
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d015      	beq.n	8014bfe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	f023 0307 	bic.w	r3, r3, #7
 8014bd8:	3308      	adds	r3, #8
 8014bda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	f003 0307 	and.w	r3, r3, #7
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d00b      	beq.n	8014bfe <pvPortMalloc+0x6e>
	__asm volatile
 8014be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bea:	f383 8811 	msr	BASEPRI, r3
 8014bee:	f3bf 8f6f 	isb	sy
 8014bf2:	f3bf 8f4f 	dsb	sy
 8014bf6:	617b      	str	r3, [r7, #20]
}
 8014bf8:	bf00      	nop
 8014bfa:	bf00      	nop
 8014bfc:	e7fd      	b.n	8014bfa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d06a      	beq.n	8014cda <pvPortMalloc+0x14a>
 8014c04:	4b43      	ldr	r3, [pc, #268]	@ (8014d14 <pvPortMalloc+0x184>)
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	687a      	ldr	r2, [r7, #4]
 8014c0a:	429a      	cmp	r2, r3
 8014c0c:	d865      	bhi.n	8014cda <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014c0e:	4b42      	ldr	r3, [pc, #264]	@ (8014d18 <pvPortMalloc+0x188>)
 8014c10:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014c12:	4b41      	ldr	r3, [pc, #260]	@ (8014d18 <pvPortMalloc+0x188>)
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014c18:	e004      	b.n	8014c24 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8014c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c1c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c26:	685b      	ldr	r3, [r3, #4]
 8014c28:	687a      	ldr	r2, [r7, #4]
 8014c2a:	429a      	cmp	r2, r3
 8014c2c:	d903      	bls.n	8014c36 <pvPortMalloc+0xa6>
 8014c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d1f1      	bne.n	8014c1a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014c36:	4b35      	ldr	r3, [pc, #212]	@ (8014d0c <pvPortMalloc+0x17c>)
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014c3c:	429a      	cmp	r2, r3
 8014c3e:	d04c      	beq.n	8014cda <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014c40:	6a3b      	ldr	r3, [r7, #32]
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	2208      	movs	r2, #8
 8014c46:	4413      	add	r3, r2
 8014c48:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c4c:	681a      	ldr	r2, [r3, #0]
 8014c4e:	6a3b      	ldr	r3, [r7, #32]
 8014c50:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c54:	685a      	ldr	r2, [r3, #4]
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	1ad2      	subs	r2, r2, r3
 8014c5a:	2308      	movs	r3, #8
 8014c5c:	005b      	lsls	r3, r3, #1
 8014c5e:	429a      	cmp	r2, r3
 8014c60:	d920      	bls.n	8014ca4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	4413      	add	r3, r2
 8014c68:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014c6a:	69bb      	ldr	r3, [r7, #24]
 8014c6c:	f003 0307 	and.w	r3, r3, #7
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d00b      	beq.n	8014c8c <pvPortMalloc+0xfc>
	__asm volatile
 8014c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c78:	f383 8811 	msr	BASEPRI, r3
 8014c7c:	f3bf 8f6f 	isb	sy
 8014c80:	f3bf 8f4f 	dsb	sy
 8014c84:	613b      	str	r3, [r7, #16]
}
 8014c86:	bf00      	nop
 8014c88:	bf00      	nop
 8014c8a:	e7fd      	b.n	8014c88 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c8e:	685a      	ldr	r2, [r3, #4]
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	1ad2      	subs	r2, r2, r3
 8014c94:	69bb      	ldr	r3, [r7, #24]
 8014c96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c9a:	687a      	ldr	r2, [r7, #4]
 8014c9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014c9e:	69b8      	ldr	r0, [r7, #24]
 8014ca0:	f000 f8fc 	bl	8014e9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8014d14 <pvPortMalloc+0x184>)
 8014ca6:	681a      	ldr	r2, [r3, #0]
 8014ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014caa:	685b      	ldr	r3, [r3, #4]
 8014cac:	1ad3      	subs	r3, r2, r3
 8014cae:	4a19      	ldr	r2, [pc, #100]	@ (8014d14 <pvPortMalloc+0x184>)
 8014cb0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014cb2:	4b18      	ldr	r3, [pc, #96]	@ (8014d14 <pvPortMalloc+0x184>)
 8014cb4:	681a      	ldr	r2, [r3, #0]
 8014cb6:	4b19      	ldr	r3, [pc, #100]	@ (8014d1c <pvPortMalloc+0x18c>)
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	429a      	cmp	r2, r3
 8014cbc:	d203      	bcs.n	8014cc6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014cbe:	4b15      	ldr	r3, [pc, #84]	@ (8014d14 <pvPortMalloc+0x184>)
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	4a16      	ldr	r2, [pc, #88]	@ (8014d1c <pvPortMalloc+0x18c>)
 8014cc4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cc8:	685a      	ldr	r2, [r3, #4]
 8014cca:	4b11      	ldr	r3, [pc, #68]	@ (8014d10 <pvPortMalloc+0x180>)
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	431a      	orrs	r2, r3
 8014cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cd2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cd6:	2200      	movs	r2, #0
 8014cd8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014cda:	f7fe ff33 	bl	8013b44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014cde:	69fb      	ldr	r3, [r7, #28]
 8014ce0:	f003 0307 	and.w	r3, r3, #7
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d00b      	beq.n	8014d00 <pvPortMalloc+0x170>
	__asm volatile
 8014ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014cec:	f383 8811 	msr	BASEPRI, r3
 8014cf0:	f3bf 8f6f 	isb	sy
 8014cf4:	f3bf 8f4f 	dsb	sy
 8014cf8:	60fb      	str	r3, [r7, #12]
}
 8014cfa:	bf00      	nop
 8014cfc:	bf00      	nop
 8014cfe:	e7fd      	b.n	8014cfc <pvPortMalloc+0x16c>
	return pvReturn;
 8014d00:	69fb      	ldr	r3, [r7, #28]
}
 8014d02:	4618      	mov	r0, r3
 8014d04:	3728      	adds	r7, #40	@ 0x28
 8014d06:	46bd      	mov	sp, r7
 8014d08:	bd80      	pop	{r7, pc}
 8014d0a:	bf00      	nop
 8014d0c:	20002cb0 	.word	0x20002cb0
 8014d10:	20002cbc 	.word	0x20002cbc
 8014d14:	20002cb4 	.word	0x20002cb4
 8014d18:	20002ca8 	.word	0x20002ca8
 8014d1c:	20002cb8 	.word	0x20002cb8

08014d20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014d20:	b580      	push	{r7, lr}
 8014d22:	b086      	sub	sp, #24
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d04a      	beq.n	8014dc8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014d32:	2308      	movs	r3, #8
 8014d34:	425b      	negs	r3, r3
 8014d36:	697a      	ldr	r2, [r7, #20]
 8014d38:	4413      	add	r3, r2
 8014d3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014d3c:	697b      	ldr	r3, [r7, #20]
 8014d3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014d40:	693b      	ldr	r3, [r7, #16]
 8014d42:	685a      	ldr	r2, [r3, #4]
 8014d44:	4b22      	ldr	r3, [pc, #136]	@ (8014dd0 <vPortFree+0xb0>)
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	4013      	ands	r3, r2
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d10b      	bne.n	8014d66 <vPortFree+0x46>
	__asm volatile
 8014d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d52:	f383 8811 	msr	BASEPRI, r3
 8014d56:	f3bf 8f6f 	isb	sy
 8014d5a:	f3bf 8f4f 	dsb	sy
 8014d5e:	60fb      	str	r3, [r7, #12]
}
 8014d60:	bf00      	nop
 8014d62:	bf00      	nop
 8014d64:	e7fd      	b.n	8014d62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014d66:	693b      	ldr	r3, [r7, #16]
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d00b      	beq.n	8014d86 <vPortFree+0x66>
	__asm volatile
 8014d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d72:	f383 8811 	msr	BASEPRI, r3
 8014d76:	f3bf 8f6f 	isb	sy
 8014d7a:	f3bf 8f4f 	dsb	sy
 8014d7e:	60bb      	str	r3, [r7, #8]
}
 8014d80:	bf00      	nop
 8014d82:	bf00      	nop
 8014d84:	e7fd      	b.n	8014d82 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014d86:	693b      	ldr	r3, [r7, #16]
 8014d88:	685a      	ldr	r2, [r3, #4]
 8014d8a:	4b11      	ldr	r3, [pc, #68]	@ (8014dd0 <vPortFree+0xb0>)
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	4013      	ands	r3, r2
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d019      	beq.n	8014dc8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014d94:	693b      	ldr	r3, [r7, #16]
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d115      	bne.n	8014dc8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014d9c:	693b      	ldr	r3, [r7, #16]
 8014d9e:	685a      	ldr	r2, [r3, #4]
 8014da0:	4b0b      	ldr	r3, [pc, #44]	@ (8014dd0 <vPortFree+0xb0>)
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	43db      	mvns	r3, r3
 8014da6:	401a      	ands	r2, r3
 8014da8:	693b      	ldr	r3, [r7, #16]
 8014daa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014dac:	f7fe febc 	bl	8013b28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014db0:	693b      	ldr	r3, [r7, #16]
 8014db2:	685a      	ldr	r2, [r3, #4]
 8014db4:	4b07      	ldr	r3, [pc, #28]	@ (8014dd4 <vPortFree+0xb4>)
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	4413      	add	r3, r2
 8014dba:	4a06      	ldr	r2, [pc, #24]	@ (8014dd4 <vPortFree+0xb4>)
 8014dbc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014dbe:	6938      	ldr	r0, [r7, #16]
 8014dc0:	f000 f86c 	bl	8014e9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014dc4:	f7fe febe 	bl	8013b44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014dc8:	bf00      	nop
 8014dca:	3718      	adds	r7, #24
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	bd80      	pop	{r7, pc}
 8014dd0:	20002cbc 	.word	0x20002cbc
 8014dd4:	20002cb4 	.word	0x20002cb4

08014dd8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014dd8:	b480      	push	{r7}
 8014dda:	b085      	sub	sp, #20
 8014ddc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014dde:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8014de2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014de4:	4b27      	ldr	r3, [pc, #156]	@ (8014e84 <prvHeapInit+0xac>)
 8014de6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	f003 0307 	and.w	r3, r3, #7
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d00c      	beq.n	8014e0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	3307      	adds	r3, #7
 8014df6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	f023 0307 	bic.w	r3, r3, #7
 8014dfe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014e00:	68ba      	ldr	r2, [r7, #8]
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	1ad3      	subs	r3, r2, r3
 8014e06:	4a1f      	ldr	r2, [pc, #124]	@ (8014e84 <prvHeapInit+0xac>)
 8014e08:	4413      	add	r3, r2
 8014e0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014e10:	4a1d      	ldr	r2, [pc, #116]	@ (8014e88 <prvHeapInit+0xb0>)
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014e16:	4b1c      	ldr	r3, [pc, #112]	@ (8014e88 <prvHeapInit+0xb0>)
 8014e18:	2200      	movs	r2, #0
 8014e1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	68ba      	ldr	r2, [r7, #8]
 8014e20:	4413      	add	r3, r2
 8014e22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014e24:	2208      	movs	r2, #8
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	1a9b      	subs	r3, r3, r2
 8014e2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	f023 0307 	bic.w	r3, r3, #7
 8014e32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	4a15      	ldr	r2, [pc, #84]	@ (8014e8c <prvHeapInit+0xb4>)
 8014e38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014e3a:	4b14      	ldr	r3, [pc, #80]	@ (8014e8c <prvHeapInit+0xb4>)
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	2200      	movs	r2, #0
 8014e40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014e42:	4b12      	ldr	r3, [pc, #72]	@ (8014e8c <prvHeapInit+0xb4>)
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	2200      	movs	r2, #0
 8014e48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014e4e:	683b      	ldr	r3, [r7, #0]
 8014e50:	68fa      	ldr	r2, [r7, #12]
 8014e52:	1ad2      	subs	r2, r2, r3
 8014e54:	683b      	ldr	r3, [r7, #0]
 8014e56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014e58:	4b0c      	ldr	r3, [pc, #48]	@ (8014e8c <prvHeapInit+0xb4>)
 8014e5a:	681a      	ldr	r2, [r3, #0]
 8014e5c:	683b      	ldr	r3, [r7, #0]
 8014e5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014e60:	683b      	ldr	r3, [r7, #0]
 8014e62:	685b      	ldr	r3, [r3, #4]
 8014e64:	4a0a      	ldr	r2, [pc, #40]	@ (8014e90 <prvHeapInit+0xb8>)
 8014e66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014e68:	683b      	ldr	r3, [r7, #0]
 8014e6a:	685b      	ldr	r3, [r3, #4]
 8014e6c:	4a09      	ldr	r2, [pc, #36]	@ (8014e94 <prvHeapInit+0xbc>)
 8014e6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014e70:	4b09      	ldr	r3, [pc, #36]	@ (8014e98 <prvHeapInit+0xc0>)
 8014e72:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8014e76:	601a      	str	r2, [r3, #0]
}
 8014e78:	bf00      	nop
 8014e7a:	3714      	adds	r7, #20
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	bc80      	pop	{r7}
 8014e80:	4770      	bx	lr
 8014e82:	bf00      	nop
 8014e84:	200014a8 	.word	0x200014a8
 8014e88:	20002ca8 	.word	0x20002ca8
 8014e8c:	20002cb0 	.word	0x20002cb0
 8014e90:	20002cb8 	.word	0x20002cb8
 8014e94:	20002cb4 	.word	0x20002cb4
 8014e98:	20002cbc 	.word	0x20002cbc

08014e9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014e9c:	b480      	push	{r7}
 8014e9e:	b085      	sub	sp, #20
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014ea4:	4b27      	ldr	r3, [pc, #156]	@ (8014f44 <prvInsertBlockIntoFreeList+0xa8>)
 8014ea6:	60fb      	str	r3, [r7, #12]
 8014ea8:	e002      	b.n	8014eb0 <prvInsertBlockIntoFreeList+0x14>
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	60fb      	str	r3, [r7, #12]
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	687a      	ldr	r2, [r7, #4]
 8014eb6:	429a      	cmp	r2, r3
 8014eb8:	d8f7      	bhi.n	8014eaa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	685b      	ldr	r3, [r3, #4]
 8014ec2:	68ba      	ldr	r2, [r7, #8]
 8014ec4:	4413      	add	r3, r2
 8014ec6:	687a      	ldr	r2, [r7, #4]
 8014ec8:	429a      	cmp	r2, r3
 8014eca:	d108      	bne.n	8014ede <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	685a      	ldr	r2, [r3, #4]
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	685b      	ldr	r3, [r3, #4]
 8014ed4:	441a      	add	r2, r3
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	685b      	ldr	r3, [r3, #4]
 8014ee6:	68ba      	ldr	r2, [r7, #8]
 8014ee8:	441a      	add	r2, r3
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	429a      	cmp	r2, r3
 8014ef0:	d118      	bne.n	8014f24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	681a      	ldr	r2, [r3, #0]
 8014ef6:	4b14      	ldr	r3, [pc, #80]	@ (8014f48 <prvInsertBlockIntoFreeList+0xac>)
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	429a      	cmp	r2, r3
 8014efc:	d00d      	beq.n	8014f1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	685a      	ldr	r2, [r3, #4]
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	685b      	ldr	r3, [r3, #4]
 8014f08:	441a      	add	r2, r3
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	681a      	ldr	r2, [r3, #0]
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	601a      	str	r2, [r3, #0]
 8014f18:	e008      	b.n	8014f2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8014f48 <prvInsertBlockIntoFreeList+0xac>)
 8014f1c:	681a      	ldr	r2, [r3, #0]
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	601a      	str	r2, [r3, #0]
 8014f22:	e003      	b.n	8014f2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	681a      	ldr	r2, [r3, #0]
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014f2c:	68fa      	ldr	r2, [r7, #12]
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	429a      	cmp	r2, r3
 8014f32:	d002      	beq.n	8014f3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	687a      	ldr	r2, [r7, #4]
 8014f38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014f3a:	bf00      	nop
 8014f3c:	3714      	adds	r7, #20
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	bc80      	pop	{r7}
 8014f42:	4770      	bx	lr
 8014f44:	20002ca8 	.word	0x20002ca8
 8014f48:	20002cb0 	.word	0x20002cb0

08014f4c <calloc>:
 8014f4c:	4b02      	ldr	r3, [pc, #8]	@ (8014f58 <calloc+0xc>)
 8014f4e:	460a      	mov	r2, r1
 8014f50:	4601      	mov	r1, r0
 8014f52:	6818      	ldr	r0, [r3, #0]
 8014f54:	f000 b802 	b.w	8014f5c <_calloc_r>
 8014f58:	20000044 	.word	0x20000044

08014f5c <_calloc_r>:
 8014f5c:	b570      	push	{r4, r5, r6, lr}
 8014f5e:	fba1 5402 	umull	r5, r4, r1, r2
 8014f62:	b93c      	cbnz	r4, 8014f74 <_calloc_r+0x18>
 8014f64:	4629      	mov	r1, r5
 8014f66:	f000 f82f 	bl	8014fc8 <_malloc_r>
 8014f6a:	4606      	mov	r6, r0
 8014f6c:	b928      	cbnz	r0, 8014f7a <_calloc_r+0x1e>
 8014f6e:	2600      	movs	r6, #0
 8014f70:	4630      	mov	r0, r6
 8014f72:	bd70      	pop	{r4, r5, r6, pc}
 8014f74:	220c      	movs	r2, #12
 8014f76:	6002      	str	r2, [r0, #0]
 8014f78:	e7f9      	b.n	8014f6e <_calloc_r+0x12>
 8014f7a:	462a      	mov	r2, r5
 8014f7c:	4621      	mov	r1, r4
 8014f7e:	f000 f8af 	bl	80150e0 <memset>
 8014f82:	e7f5      	b.n	8014f70 <_calloc_r+0x14>

08014f84 <sbrk_aligned>:
 8014f84:	b570      	push	{r4, r5, r6, lr}
 8014f86:	4e0f      	ldr	r6, [pc, #60]	@ (8014fc4 <sbrk_aligned+0x40>)
 8014f88:	460c      	mov	r4, r1
 8014f8a:	6831      	ldr	r1, [r6, #0]
 8014f8c:	4605      	mov	r5, r0
 8014f8e:	b911      	cbnz	r1, 8014f96 <sbrk_aligned+0x12>
 8014f90:	f000 f8ae 	bl	80150f0 <_sbrk_r>
 8014f94:	6030      	str	r0, [r6, #0]
 8014f96:	4621      	mov	r1, r4
 8014f98:	4628      	mov	r0, r5
 8014f9a:	f000 f8a9 	bl	80150f0 <_sbrk_r>
 8014f9e:	1c43      	adds	r3, r0, #1
 8014fa0:	d103      	bne.n	8014faa <sbrk_aligned+0x26>
 8014fa2:	f04f 34ff 	mov.w	r4, #4294967295
 8014fa6:	4620      	mov	r0, r4
 8014fa8:	bd70      	pop	{r4, r5, r6, pc}
 8014faa:	1cc4      	adds	r4, r0, #3
 8014fac:	f024 0403 	bic.w	r4, r4, #3
 8014fb0:	42a0      	cmp	r0, r4
 8014fb2:	d0f8      	beq.n	8014fa6 <sbrk_aligned+0x22>
 8014fb4:	1a21      	subs	r1, r4, r0
 8014fb6:	4628      	mov	r0, r5
 8014fb8:	f000 f89a 	bl	80150f0 <_sbrk_r>
 8014fbc:	3001      	adds	r0, #1
 8014fbe:	d1f2      	bne.n	8014fa6 <sbrk_aligned+0x22>
 8014fc0:	e7ef      	b.n	8014fa2 <sbrk_aligned+0x1e>
 8014fc2:	bf00      	nop
 8014fc4:	20002cc0 	.word	0x20002cc0

08014fc8 <_malloc_r>:
 8014fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014fcc:	1ccd      	adds	r5, r1, #3
 8014fce:	f025 0503 	bic.w	r5, r5, #3
 8014fd2:	3508      	adds	r5, #8
 8014fd4:	2d0c      	cmp	r5, #12
 8014fd6:	bf38      	it	cc
 8014fd8:	250c      	movcc	r5, #12
 8014fda:	2d00      	cmp	r5, #0
 8014fdc:	4606      	mov	r6, r0
 8014fde:	db01      	blt.n	8014fe4 <_malloc_r+0x1c>
 8014fe0:	42a9      	cmp	r1, r5
 8014fe2:	d904      	bls.n	8014fee <_malloc_r+0x26>
 8014fe4:	230c      	movs	r3, #12
 8014fe6:	6033      	str	r3, [r6, #0]
 8014fe8:	2000      	movs	r0, #0
 8014fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014fee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80150c4 <_malloc_r+0xfc>
 8014ff2:	f000 f869 	bl	80150c8 <__malloc_lock>
 8014ff6:	f8d8 3000 	ldr.w	r3, [r8]
 8014ffa:	461c      	mov	r4, r3
 8014ffc:	bb44      	cbnz	r4, 8015050 <_malloc_r+0x88>
 8014ffe:	4629      	mov	r1, r5
 8015000:	4630      	mov	r0, r6
 8015002:	f7ff ffbf 	bl	8014f84 <sbrk_aligned>
 8015006:	1c43      	adds	r3, r0, #1
 8015008:	4604      	mov	r4, r0
 801500a:	d158      	bne.n	80150be <_malloc_r+0xf6>
 801500c:	f8d8 4000 	ldr.w	r4, [r8]
 8015010:	4627      	mov	r7, r4
 8015012:	2f00      	cmp	r7, #0
 8015014:	d143      	bne.n	801509e <_malloc_r+0xd6>
 8015016:	2c00      	cmp	r4, #0
 8015018:	d04b      	beq.n	80150b2 <_malloc_r+0xea>
 801501a:	6823      	ldr	r3, [r4, #0]
 801501c:	4639      	mov	r1, r7
 801501e:	4630      	mov	r0, r6
 8015020:	eb04 0903 	add.w	r9, r4, r3
 8015024:	f000 f864 	bl	80150f0 <_sbrk_r>
 8015028:	4581      	cmp	r9, r0
 801502a:	d142      	bne.n	80150b2 <_malloc_r+0xea>
 801502c:	6821      	ldr	r1, [r4, #0]
 801502e:	4630      	mov	r0, r6
 8015030:	1a6d      	subs	r5, r5, r1
 8015032:	4629      	mov	r1, r5
 8015034:	f7ff ffa6 	bl	8014f84 <sbrk_aligned>
 8015038:	3001      	adds	r0, #1
 801503a:	d03a      	beq.n	80150b2 <_malloc_r+0xea>
 801503c:	6823      	ldr	r3, [r4, #0]
 801503e:	442b      	add	r3, r5
 8015040:	6023      	str	r3, [r4, #0]
 8015042:	f8d8 3000 	ldr.w	r3, [r8]
 8015046:	685a      	ldr	r2, [r3, #4]
 8015048:	bb62      	cbnz	r2, 80150a4 <_malloc_r+0xdc>
 801504a:	f8c8 7000 	str.w	r7, [r8]
 801504e:	e00f      	b.n	8015070 <_malloc_r+0xa8>
 8015050:	6822      	ldr	r2, [r4, #0]
 8015052:	1b52      	subs	r2, r2, r5
 8015054:	d420      	bmi.n	8015098 <_malloc_r+0xd0>
 8015056:	2a0b      	cmp	r2, #11
 8015058:	d917      	bls.n	801508a <_malloc_r+0xc2>
 801505a:	1961      	adds	r1, r4, r5
 801505c:	42a3      	cmp	r3, r4
 801505e:	6025      	str	r5, [r4, #0]
 8015060:	bf18      	it	ne
 8015062:	6059      	strne	r1, [r3, #4]
 8015064:	6863      	ldr	r3, [r4, #4]
 8015066:	bf08      	it	eq
 8015068:	f8c8 1000 	streq.w	r1, [r8]
 801506c:	5162      	str	r2, [r4, r5]
 801506e:	604b      	str	r3, [r1, #4]
 8015070:	4630      	mov	r0, r6
 8015072:	f000 f82f 	bl	80150d4 <__malloc_unlock>
 8015076:	f104 000b 	add.w	r0, r4, #11
 801507a:	1d23      	adds	r3, r4, #4
 801507c:	f020 0007 	bic.w	r0, r0, #7
 8015080:	1ac2      	subs	r2, r0, r3
 8015082:	bf1c      	itt	ne
 8015084:	1a1b      	subne	r3, r3, r0
 8015086:	50a3      	strne	r3, [r4, r2]
 8015088:	e7af      	b.n	8014fea <_malloc_r+0x22>
 801508a:	6862      	ldr	r2, [r4, #4]
 801508c:	42a3      	cmp	r3, r4
 801508e:	bf0c      	ite	eq
 8015090:	f8c8 2000 	streq.w	r2, [r8]
 8015094:	605a      	strne	r2, [r3, #4]
 8015096:	e7eb      	b.n	8015070 <_malloc_r+0xa8>
 8015098:	4623      	mov	r3, r4
 801509a:	6864      	ldr	r4, [r4, #4]
 801509c:	e7ae      	b.n	8014ffc <_malloc_r+0x34>
 801509e:	463c      	mov	r4, r7
 80150a0:	687f      	ldr	r7, [r7, #4]
 80150a2:	e7b6      	b.n	8015012 <_malloc_r+0x4a>
 80150a4:	461a      	mov	r2, r3
 80150a6:	685b      	ldr	r3, [r3, #4]
 80150a8:	42a3      	cmp	r3, r4
 80150aa:	d1fb      	bne.n	80150a4 <_malloc_r+0xdc>
 80150ac:	2300      	movs	r3, #0
 80150ae:	6053      	str	r3, [r2, #4]
 80150b0:	e7de      	b.n	8015070 <_malloc_r+0xa8>
 80150b2:	230c      	movs	r3, #12
 80150b4:	4630      	mov	r0, r6
 80150b6:	6033      	str	r3, [r6, #0]
 80150b8:	f000 f80c 	bl	80150d4 <__malloc_unlock>
 80150bc:	e794      	b.n	8014fe8 <_malloc_r+0x20>
 80150be:	6005      	str	r5, [r0, #0]
 80150c0:	e7d6      	b.n	8015070 <_malloc_r+0xa8>
 80150c2:	bf00      	nop
 80150c4:	20002cc4 	.word	0x20002cc4

080150c8 <__malloc_lock>:
 80150c8:	4801      	ldr	r0, [pc, #4]	@ (80150d0 <__malloc_lock+0x8>)
 80150ca:	f000 b84b 	b.w	8015164 <__retarget_lock_acquire_recursive>
 80150ce:	bf00      	nop
 80150d0:	20002e04 	.word	0x20002e04

080150d4 <__malloc_unlock>:
 80150d4:	4801      	ldr	r0, [pc, #4]	@ (80150dc <__malloc_unlock+0x8>)
 80150d6:	f000 b846 	b.w	8015166 <__retarget_lock_release_recursive>
 80150da:	bf00      	nop
 80150dc:	20002e04 	.word	0x20002e04

080150e0 <memset>:
 80150e0:	4603      	mov	r3, r0
 80150e2:	4402      	add	r2, r0
 80150e4:	4293      	cmp	r3, r2
 80150e6:	d100      	bne.n	80150ea <memset+0xa>
 80150e8:	4770      	bx	lr
 80150ea:	f803 1b01 	strb.w	r1, [r3], #1
 80150ee:	e7f9      	b.n	80150e4 <memset+0x4>

080150f0 <_sbrk_r>:
 80150f0:	b538      	push	{r3, r4, r5, lr}
 80150f2:	2300      	movs	r3, #0
 80150f4:	4d05      	ldr	r5, [pc, #20]	@ (801510c <_sbrk_r+0x1c>)
 80150f6:	4604      	mov	r4, r0
 80150f8:	4608      	mov	r0, r1
 80150fa:	602b      	str	r3, [r5, #0]
 80150fc:	f7f0 fe06 	bl	8005d0c <_sbrk>
 8015100:	1c43      	adds	r3, r0, #1
 8015102:	d102      	bne.n	801510a <_sbrk_r+0x1a>
 8015104:	682b      	ldr	r3, [r5, #0]
 8015106:	b103      	cbz	r3, 801510a <_sbrk_r+0x1a>
 8015108:	6023      	str	r3, [r4, #0]
 801510a:	bd38      	pop	{r3, r4, r5, pc}
 801510c:	20002e00 	.word	0x20002e00

08015110 <__errno>:
 8015110:	4b01      	ldr	r3, [pc, #4]	@ (8015118 <__errno+0x8>)
 8015112:	6818      	ldr	r0, [r3, #0]
 8015114:	4770      	bx	lr
 8015116:	bf00      	nop
 8015118:	20000044 	.word	0x20000044

0801511c <__libc_init_array>:
 801511c:	b570      	push	{r4, r5, r6, lr}
 801511e:	2600      	movs	r6, #0
 8015120:	4d0c      	ldr	r5, [pc, #48]	@ (8015154 <__libc_init_array+0x38>)
 8015122:	4c0d      	ldr	r4, [pc, #52]	@ (8015158 <__libc_init_array+0x3c>)
 8015124:	1b64      	subs	r4, r4, r5
 8015126:	10a4      	asrs	r4, r4, #2
 8015128:	42a6      	cmp	r6, r4
 801512a:	d109      	bne.n	8015140 <__libc_init_array+0x24>
 801512c:	f000 fdd0 	bl	8015cd0 <_init>
 8015130:	2600      	movs	r6, #0
 8015132:	4d0a      	ldr	r5, [pc, #40]	@ (801515c <__libc_init_array+0x40>)
 8015134:	4c0a      	ldr	r4, [pc, #40]	@ (8015160 <__libc_init_array+0x44>)
 8015136:	1b64      	subs	r4, r4, r5
 8015138:	10a4      	asrs	r4, r4, #2
 801513a:	42a6      	cmp	r6, r4
 801513c:	d105      	bne.n	801514a <__libc_init_array+0x2e>
 801513e:	bd70      	pop	{r4, r5, r6, pc}
 8015140:	f855 3b04 	ldr.w	r3, [r5], #4
 8015144:	4798      	blx	r3
 8015146:	3601      	adds	r6, #1
 8015148:	e7ee      	b.n	8015128 <__libc_init_array+0xc>
 801514a:	f855 3b04 	ldr.w	r3, [r5], #4
 801514e:	4798      	blx	r3
 8015150:	3601      	adds	r6, #1
 8015152:	e7f2      	b.n	801513a <__libc_init_array+0x1e>
 8015154:	080164e8 	.word	0x080164e8
 8015158:	080164e8 	.word	0x080164e8
 801515c:	080164e8 	.word	0x080164e8
 8015160:	080164ec 	.word	0x080164ec

08015164 <__retarget_lock_acquire_recursive>:
 8015164:	4770      	bx	lr

08015166 <__retarget_lock_release_recursive>:
 8015166:	4770      	bx	lr

08015168 <memcpy>:
 8015168:	440a      	add	r2, r1
 801516a:	4291      	cmp	r1, r2
 801516c:	f100 33ff 	add.w	r3, r0, #4294967295
 8015170:	d100      	bne.n	8015174 <memcpy+0xc>
 8015172:	4770      	bx	lr
 8015174:	b510      	push	{r4, lr}
 8015176:	f811 4b01 	ldrb.w	r4, [r1], #1
 801517a:	4291      	cmp	r1, r2
 801517c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015180:	d1f9      	bne.n	8015176 <memcpy+0xe>
 8015182:	bd10      	pop	{r4, pc}

08015184 <sqrt>:
 8015184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015186:	4606      	mov	r6, r0
 8015188:	460f      	mov	r7, r1
 801518a:	f000 f88f 	bl	80152ac <__ieee754_sqrt>
 801518e:	4632      	mov	r2, r6
 8015190:	4604      	mov	r4, r0
 8015192:	460d      	mov	r5, r1
 8015194:	463b      	mov	r3, r7
 8015196:	4630      	mov	r0, r6
 8015198:	4639      	mov	r1, r7
 801519a:	f7eb fc9f 	bl	8000adc <__aeabi_dcmpun>
 801519e:	b990      	cbnz	r0, 80151c6 <sqrt+0x42>
 80151a0:	2200      	movs	r2, #0
 80151a2:	2300      	movs	r3, #0
 80151a4:	4630      	mov	r0, r6
 80151a6:	4639      	mov	r1, r7
 80151a8:	f7eb fc70 	bl	8000a8c <__aeabi_dcmplt>
 80151ac:	b158      	cbz	r0, 80151c6 <sqrt+0x42>
 80151ae:	f7ff ffaf 	bl	8015110 <__errno>
 80151b2:	2321      	movs	r3, #33	@ 0x21
 80151b4:	2200      	movs	r2, #0
 80151b6:	6003      	str	r3, [r0, #0]
 80151b8:	2300      	movs	r3, #0
 80151ba:	4610      	mov	r0, r2
 80151bc:	4619      	mov	r1, r3
 80151be:	f7eb fb1d 	bl	80007fc <__aeabi_ddiv>
 80151c2:	4604      	mov	r4, r0
 80151c4:	460d      	mov	r5, r1
 80151c6:	4620      	mov	r0, r4
 80151c8:	4629      	mov	r1, r5
 80151ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080151cc <powf>:
 80151cc:	b570      	push	{r4, r5, r6, lr}
 80151ce:	460c      	mov	r4, r1
 80151d0:	4606      	mov	r6, r0
 80151d2:	f000 f9b1 	bl	8015538 <__ieee754_powf>
 80151d6:	4621      	mov	r1, r4
 80151d8:	4605      	mov	r5, r0
 80151da:	4620      	mov	r0, r4
 80151dc:	f7ec f800 	bl	80011e0 <__aeabi_fcmpun>
 80151e0:	bb68      	cbnz	r0, 801523e <powf+0x72>
 80151e2:	2100      	movs	r1, #0
 80151e4:	4630      	mov	r0, r6
 80151e6:	f7eb ffc9 	bl	800117c <__aeabi_fcmpeq>
 80151ea:	b190      	cbz	r0, 8015212 <powf+0x46>
 80151ec:	2100      	movs	r1, #0
 80151ee:	4620      	mov	r0, r4
 80151f0:	f7eb ffc4 	bl	800117c <__aeabi_fcmpeq>
 80151f4:	2800      	cmp	r0, #0
 80151f6:	d133      	bne.n	8015260 <powf+0x94>
 80151f8:	4620      	mov	r0, r4
 80151fa:	f000 f84e 	bl	801529a <finitef>
 80151fe:	b1f0      	cbz	r0, 801523e <powf+0x72>
 8015200:	2100      	movs	r1, #0
 8015202:	4620      	mov	r0, r4
 8015204:	f7eb ffc4 	bl	8001190 <__aeabi_fcmplt>
 8015208:	b1c8      	cbz	r0, 801523e <powf+0x72>
 801520a:	f7ff ff81 	bl	8015110 <__errno>
 801520e:	2322      	movs	r3, #34	@ 0x22
 8015210:	e014      	b.n	801523c <powf+0x70>
 8015212:	4628      	mov	r0, r5
 8015214:	f000 f841 	bl	801529a <finitef>
 8015218:	b998      	cbnz	r0, 8015242 <powf+0x76>
 801521a:	4630      	mov	r0, r6
 801521c:	f000 f83d 	bl	801529a <finitef>
 8015220:	b178      	cbz	r0, 8015242 <powf+0x76>
 8015222:	4620      	mov	r0, r4
 8015224:	f000 f839 	bl	801529a <finitef>
 8015228:	b158      	cbz	r0, 8015242 <powf+0x76>
 801522a:	4629      	mov	r1, r5
 801522c:	4628      	mov	r0, r5
 801522e:	f7eb ffd7 	bl	80011e0 <__aeabi_fcmpun>
 8015232:	2800      	cmp	r0, #0
 8015234:	d0e9      	beq.n	801520a <powf+0x3e>
 8015236:	f7ff ff6b 	bl	8015110 <__errno>
 801523a:	2321      	movs	r3, #33	@ 0x21
 801523c:	6003      	str	r3, [r0, #0]
 801523e:	4628      	mov	r0, r5
 8015240:	bd70      	pop	{r4, r5, r6, pc}
 8015242:	2100      	movs	r1, #0
 8015244:	4628      	mov	r0, r5
 8015246:	f7eb ff99 	bl	800117c <__aeabi_fcmpeq>
 801524a:	2800      	cmp	r0, #0
 801524c:	d0f7      	beq.n	801523e <powf+0x72>
 801524e:	4630      	mov	r0, r6
 8015250:	f000 f823 	bl	801529a <finitef>
 8015254:	2800      	cmp	r0, #0
 8015256:	d0f2      	beq.n	801523e <powf+0x72>
 8015258:	4620      	mov	r0, r4
 801525a:	f000 f81e 	bl	801529a <finitef>
 801525e:	e7d3      	b.n	8015208 <powf+0x3c>
 8015260:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8015264:	e7eb      	b.n	801523e <powf+0x72>

08015266 <sqrtf>:
 8015266:	b538      	push	{r3, r4, r5, lr}
 8015268:	4605      	mov	r5, r0
 801526a:	f000 f8f5 	bl	8015458 <__ieee754_sqrtf>
 801526e:	4629      	mov	r1, r5
 8015270:	4604      	mov	r4, r0
 8015272:	4628      	mov	r0, r5
 8015274:	f7eb ffb4 	bl	80011e0 <__aeabi_fcmpun>
 8015278:	b968      	cbnz	r0, 8015296 <sqrtf+0x30>
 801527a:	2100      	movs	r1, #0
 801527c:	4628      	mov	r0, r5
 801527e:	f7eb ff87 	bl	8001190 <__aeabi_fcmplt>
 8015282:	b140      	cbz	r0, 8015296 <sqrtf+0x30>
 8015284:	f7ff ff44 	bl	8015110 <__errno>
 8015288:	2321      	movs	r3, #33	@ 0x21
 801528a:	2100      	movs	r1, #0
 801528c:	6003      	str	r3, [r0, #0]
 801528e:	4608      	mov	r0, r1
 8015290:	f7eb fe94 	bl	8000fbc <__aeabi_fdiv>
 8015294:	4604      	mov	r4, r0
 8015296:	4620      	mov	r0, r4
 8015298:	bd38      	pop	{r3, r4, r5, pc}

0801529a <finitef>:
 801529a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801529e:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80152a2:	bfac      	ite	ge
 80152a4:	2000      	movge	r0, #0
 80152a6:	2001      	movlt	r0, #1
 80152a8:	4770      	bx	lr
	...

080152ac <__ieee754_sqrt>:
 80152ac:	4a67      	ldr	r2, [pc, #412]	@ (801544c <__ieee754_sqrt+0x1a0>)
 80152ae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152b2:	438a      	bics	r2, r1
 80152b4:	4606      	mov	r6, r0
 80152b6:	460f      	mov	r7, r1
 80152b8:	460b      	mov	r3, r1
 80152ba:	4604      	mov	r4, r0
 80152bc:	d10e      	bne.n	80152dc <__ieee754_sqrt+0x30>
 80152be:	4602      	mov	r2, r0
 80152c0:	f7eb f972 	bl	80005a8 <__aeabi_dmul>
 80152c4:	4602      	mov	r2, r0
 80152c6:	460b      	mov	r3, r1
 80152c8:	4630      	mov	r0, r6
 80152ca:	4639      	mov	r1, r7
 80152cc:	f7ea ffb6 	bl	800023c <__adddf3>
 80152d0:	4606      	mov	r6, r0
 80152d2:	460f      	mov	r7, r1
 80152d4:	4630      	mov	r0, r6
 80152d6:	4639      	mov	r1, r7
 80152d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152dc:	2900      	cmp	r1, #0
 80152de:	dc0c      	bgt.n	80152fa <__ieee754_sqrt+0x4e>
 80152e0:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80152e4:	4302      	orrs	r2, r0
 80152e6:	d0f5      	beq.n	80152d4 <__ieee754_sqrt+0x28>
 80152e8:	b189      	cbz	r1, 801530e <__ieee754_sqrt+0x62>
 80152ea:	4602      	mov	r2, r0
 80152ec:	f7ea ffa4 	bl	8000238 <__aeabi_dsub>
 80152f0:	4602      	mov	r2, r0
 80152f2:	460b      	mov	r3, r1
 80152f4:	f7eb fa82 	bl	80007fc <__aeabi_ddiv>
 80152f8:	e7ea      	b.n	80152d0 <__ieee754_sqrt+0x24>
 80152fa:	150a      	asrs	r2, r1, #20
 80152fc:	d115      	bne.n	801532a <__ieee754_sqrt+0x7e>
 80152fe:	2100      	movs	r1, #0
 8015300:	e009      	b.n	8015316 <__ieee754_sqrt+0x6a>
 8015302:	0ae3      	lsrs	r3, r4, #11
 8015304:	3a15      	subs	r2, #21
 8015306:	0564      	lsls	r4, r4, #21
 8015308:	2b00      	cmp	r3, #0
 801530a:	d0fa      	beq.n	8015302 <__ieee754_sqrt+0x56>
 801530c:	e7f7      	b.n	80152fe <__ieee754_sqrt+0x52>
 801530e:	460a      	mov	r2, r1
 8015310:	e7fa      	b.n	8015308 <__ieee754_sqrt+0x5c>
 8015312:	005b      	lsls	r3, r3, #1
 8015314:	3101      	adds	r1, #1
 8015316:	02d8      	lsls	r0, r3, #11
 8015318:	d5fb      	bpl.n	8015312 <__ieee754_sqrt+0x66>
 801531a:	1e48      	subs	r0, r1, #1
 801531c:	1a12      	subs	r2, r2, r0
 801531e:	f1c1 0020 	rsb	r0, r1, #32
 8015322:	fa24 f000 	lsr.w	r0, r4, r0
 8015326:	4303      	orrs	r3, r0
 8015328:	408c      	lsls	r4, r1
 801532a:	2600      	movs	r6, #0
 801532c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8015330:	2116      	movs	r1, #22
 8015332:	07d2      	lsls	r2, r2, #31
 8015334:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8015338:	4632      	mov	r2, r6
 801533a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801533e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015342:	bf5c      	itt	pl
 8015344:	005b      	lslpl	r3, r3, #1
 8015346:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 801534a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801534e:	bf58      	it	pl
 8015350:	0064      	lslpl	r4, r4, #1
 8015352:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8015356:	107f      	asrs	r7, r7, #1
 8015358:	0064      	lsls	r4, r4, #1
 801535a:	1815      	adds	r5, r2, r0
 801535c:	429d      	cmp	r5, r3
 801535e:	bfde      	ittt	le
 8015360:	182a      	addle	r2, r5, r0
 8015362:	1b5b      	suble	r3, r3, r5
 8015364:	1836      	addle	r6, r6, r0
 8015366:	0fe5      	lsrs	r5, r4, #31
 8015368:	3901      	subs	r1, #1
 801536a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801536e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8015372:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8015376:	d1f0      	bne.n	801535a <__ieee754_sqrt+0xae>
 8015378:	460d      	mov	r5, r1
 801537a:	f04f 0a20 	mov.w	sl, #32
 801537e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8015382:	429a      	cmp	r2, r3
 8015384:	eb01 0c00 	add.w	ip, r1, r0
 8015388:	db02      	blt.n	8015390 <__ieee754_sqrt+0xe4>
 801538a:	d113      	bne.n	80153b4 <__ieee754_sqrt+0x108>
 801538c:	45a4      	cmp	ip, r4
 801538e:	d811      	bhi.n	80153b4 <__ieee754_sqrt+0x108>
 8015390:	f1bc 0f00 	cmp.w	ip, #0
 8015394:	eb0c 0100 	add.w	r1, ip, r0
 8015398:	da42      	bge.n	8015420 <__ieee754_sqrt+0x174>
 801539a:	2900      	cmp	r1, #0
 801539c:	db40      	blt.n	8015420 <__ieee754_sqrt+0x174>
 801539e:	f102 0e01 	add.w	lr, r2, #1
 80153a2:	1a9b      	subs	r3, r3, r2
 80153a4:	4672      	mov	r2, lr
 80153a6:	45a4      	cmp	ip, r4
 80153a8:	bf88      	it	hi
 80153aa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80153ae:	eba4 040c 	sub.w	r4, r4, ip
 80153b2:	4405      	add	r5, r0
 80153b4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80153b8:	f1ba 0a01 	subs.w	sl, sl, #1
 80153bc:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80153c0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80153c4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80153c8:	d1db      	bne.n	8015382 <__ieee754_sqrt+0xd6>
 80153ca:	431c      	orrs	r4, r3
 80153cc:	d01a      	beq.n	8015404 <__ieee754_sqrt+0x158>
 80153ce:	4c20      	ldr	r4, [pc, #128]	@ (8015450 <__ieee754_sqrt+0x1a4>)
 80153d0:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8015454 <__ieee754_sqrt+0x1a8>
 80153d4:	e9d4 0100 	ldrd	r0, r1, [r4]
 80153d8:	e9db 2300 	ldrd	r2, r3, [fp]
 80153dc:	f7ea ff2c 	bl	8000238 <__aeabi_dsub>
 80153e0:	e9d4 8900 	ldrd	r8, r9, [r4]
 80153e4:	4602      	mov	r2, r0
 80153e6:	460b      	mov	r3, r1
 80153e8:	4640      	mov	r0, r8
 80153ea:	4649      	mov	r1, r9
 80153ec:	f7eb fb58 	bl	8000aa0 <__aeabi_dcmple>
 80153f0:	b140      	cbz	r0, 8015404 <__ieee754_sqrt+0x158>
 80153f2:	e9d4 0100 	ldrd	r0, r1, [r4]
 80153f6:	e9db 2300 	ldrd	r2, r3, [fp]
 80153fa:	f1b5 3fff 	cmp.w	r5, #4294967295
 80153fe:	d111      	bne.n	8015424 <__ieee754_sqrt+0x178>
 8015400:	4655      	mov	r5, sl
 8015402:	3601      	adds	r6, #1
 8015404:	1072      	asrs	r2, r6, #1
 8015406:	086b      	lsrs	r3, r5, #1
 8015408:	07f1      	lsls	r1, r6, #31
 801540a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801540e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8015412:	bf48      	it	mi
 8015414:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8015418:	4618      	mov	r0, r3
 801541a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 801541e:	e757      	b.n	80152d0 <__ieee754_sqrt+0x24>
 8015420:	4696      	mov	lr, r2
 8015422:	e7be      	b.n	80153a2 <__ieee754_sqrt+0xf6>
 8015424:	f7ea ff0a 	bl	800023c <__adddf3>
 8015428:	e9d4 8900 	ldrd	r8, r9, [r4]
 801542c:	4602      	mov	r2, r0
 801542e:	460b      	mov	r3, r1
 8015430:	4640      	mov	r0, r8
 8015432:	4649      	mov	r1, r9
 8015434:	f7eb fb2a 	bl	8000a8c <__aeabi_dcmplt>
 8015438:	b120      	cbz	r0, 8015444 <__ieee754_sqrt+0x198>
 801543a:	1ca8      	adds	r0, r5, #2
 801543c:	bf08      	it	eq
 801543e:	3601      	addeq	r6, #1
 8015440:	3502      	adds	r5, #2
 8015442:	e7df      	b.n	8015404 <__ieee754_sqrt+0x158>
 8015444:	1c6b      	adds	r3, r5, #1
 8015446:	f023 0501 	bic.w	r5, r3, #1
 801544a:	e7db      	b.n	8015404 <__ieee754_sqrt+0x158>
 801544c:	7ff00000 	.word	0x7ff00000
 8015450:	200000a0 	.word	0x200000a0
 8015454:	20000098 	.word	0x20000098

08015458 <__ieee754_sqrtf>:
 8015458:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 801545c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8015460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015464:	4603      	mov	r3, r0
 8015466:	4604      	mov	r4, r0
 8015468:	d30a      	bcc.n	8015480 <__ieee754_sqrtf+0x28>
 801546a:	4601      	mov	r1, r0
 801546c:	f7eb fcf2 	bl	8000e54 <__aeabi_fmul>
 8015470:	4601      	mov	r1, r0
 8015472:	4620      	mov	r0, r4
 8015474:	f7eb fbe6 	bl	8000c44 <__addsf3>
 8015478:	4604      	mov	r4, r0
 801547a:	4620      	mov	r0, r4
 801547c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015480:	2a00      	cmp	r2, #0
 8015482:	d0fa      	beq.n	801547a <__ieee754_sqrtf+0x22>
 8015484:	2800      	cmp	r0, #0
 8015486:	da06      	bge.n	8015496 <__ieee754_sqrtf+0x3e>
 8015488:	4601      	mov	r1, r0
 801548a:	f7eb fbd9 	bl	8000c40 <__aeabi_fsub>
 801548e:	4601      	mov	r1, r0
 8015490:	f7eb fd94 	bl	8000fbc <__aeabi_fdiv>
 8015494:	e7f0      	b.n	8015478 <__ieee754_sqrtf+0x20>
 8015496:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 801549a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 801549e:	d03e      	beq.n	801551e <__ieee754_sqrtf+0xc6>
 80154a0:	2400      	movs	r4, #0
 80154a2:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 80154a6:	07ca      	lsls	r2, r1, #31
 80154a8:	f04f 0019 	mov.w	r0, #25
 80154ac:	4626      	mov	r6, r4
 80154ae:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80154b2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80154b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80154ba:	bf58      	it	pl
 80154bc:	005b      	lslpl	r3, r3, #1
 80154be:	106d      	asrs	r5, r5, #1
 80154c0:	005b      	lsls	r3, r3, #1
 80154c2:	1872      	adds	r2, r6, r1
 80154c4:	429a      	cmp	r2, r3
 80154c6:	bfcf      	iteee	gt
 80154c8:	461a      	movgt	r2, r3
 80154ca:	1856      	addle	r6, r2, r1
 80154cc:	1864      	addle	r4, r4, r1
 80154ce:	1a9a      	suble	r2, r3, r2
 80154d0:	3801      	subs	r0, #1
 80154d2:	ea4f 0342 	mov.w	r3, r2, lsl #1
 80154d6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80154da:	d1f2      	bne.n	80154c2 <__ieee754_sqrtf+0x6a>
 80154dc:	b1ba      	cbz	r2, 801550e <__ieee754_sqrtf+0xb6>
 80154de:	4e14      	ldr	r6, [pc, #80]	@ (8015530 <__ieee754_sqrtf+0xd8>)
 80154e0:	4f14      	ldr	r7, [pc, #80]	@ (8015534 <__ieee754_sqrtf+0xdc>)
 80154e2:	6830      	ldr	r0, [r6, #0]
 80154e4:	6839      	ldr	r1, [r7, #0]
 80154e6:	f7eb fbab 	bl	8000c40 <__aeabi_fsub>
 80154ea:	f8d6 8000 	ldr.w	r8, [r6]
 80154ee:	4601      	mov	r1, r0
 80154f0:	4640      	mov	r0, r8
 80154f2:	f7eb fe57 	bl	80011a4 <__aeabi_fcmple>
 80154f6:	b150      	cbz	r0, 801550e <__ieee754_sqrtf+0xb6>
 80154f8:	6830      	ldr	r0, [r6, #0]
 80154fa:	6839      	ldr	r1, [r7, #0]
 80154fc:	f7eb fba2 	bl	8000c44 <__addsf3>
 8015500:	6836      	ldr	r6, [r6, #0]
 8015502:	4601      	mov	r1, r0
 8015504:	4630      	mov	r0, r6
 8015506:	f7eb fe43 	bl	8001190 <__aeabi_fcmplt>
 801550a:	b168      	cbz	r0, 8015528 <__ieee754_sqrtf+0xd0>
 801550c:	3402      	adds	r4, #2
 801550e:	1064      	asrs	r4, r4, #1
 8015510:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8015514:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8015518:	e7af      	b.n	801547a <__ieee754_sqrtf+0x22>
 801551a:	005b      	lsls	r3, r3, #1
 801551c:	3201      	adds	r2, #1
 801551e:	0218      	lsls	r0, r3, #8
 8015520:	d5fb      	bpl.n	801551a <__ieee754_sqrtf+0xc2>
 8015522:	3a01      	subs	r2, #1
 8015524:	1a89      	subs	r1, r1, r2
 8015526:	e7bb      	b.n	80154a0 <__ieee754_sqrtf+0x48>
 8015528:	3401      	adds	r4, #1
 801552a:	f024 0401 	bic.w	r4, r4, #1
 801552e:	e7ee      	b.n	801550e <__ieee754_sqrtf+0xb6>
 8015530:	200000ac 	.word	0x200000ac
 8015534:	200000a8 	.word	0x200000a8

08015538 <__ieee754_powf>:
 8015538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801553c:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 8015540:	4680      	mov	r8, r0
 8015542:	460f      	mov	r7, r1
 8015544:	4606      	mov	r6, r0
 8015546:	460c      	mov	r4, r1
 8015548:	b087      	sub	sp, #28
 801554a:	d10c      	bne.n	8015566 <__ieee754_powf+0x2e>
 801554c:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 8015550:	0076      	lsls	r6, r6, #1
 8015552:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8015556:	f240 8336 	bls.w	8015bc6 <__ieee754_powf+0x68e>
 801555a:	4639      	mov	r1, r7
 801555c:	4640      	mov	r0, r8
 801555e:	f7eb fb71 	bl	8000c44 <__addsf3>
 8015562:	4601      	mov	r1, r0
 8015564:	e03e      	b.n	80155e4 <__ieee754_powf+0xac>
 8015566:	f020 4900 	bic.w	r9, r0, #2147483648	@ 0x80000000
 801556a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801556e:	d802      	bhi.n	8015576 <__ieee754_powf+0x3e>
 8015570:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8015574:	d908      	bls.n	8015588 <__ieee754_powf+0x50>
 8015576:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 801557a:	d1ee      	bne.n	801555a <__ieee754_powf+0x22>
 801557c:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8015580:	0064      	lsls	r4, r4, #1
 8015582:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8015586:	e7e6      	b.n	8015556 <__ieee754_powf+0x1e>
 8015588:	2800      	cmp	r0, #0
 801558a:	da1e      	bge.n	80155ca <__ieee754_powf+0x92>
 801558c:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 8015590:	d22c      	bcs.n	80155ec <__ieee754_powf+0xb4>
 8015592:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8015596:	d333      	bcc.n	8015600 <__ieee754_powf+0xc8>
 8015598:	ea4f 53eb 	mov.w	r3, fp, asr #23
 801559c:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80155a0:	fa4b f503 	asr.w	r5, fp, r3
 80155a4:	fa05 f303 	lsl.w	r3, r5, r3
 80155a8:	455b      	cmp	r3, fp
 80155aa:	d127      	bne.n	80155fc <__ieee754_powf+0xc4>
 80155ac:	f005 0501 	and.w	r5, r5, #1
 80155b0:	f1c5 0502 	rsb	r5, r5, #2
 80155b4:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 80155b8:	d123      	bne.n	8015602 <__ieee754_powf+0xca>
 80155ba:	2c00      	cmp	r4, #0
 80155bc:	4641      	mov	r1, r8
 80155be:	da11      	bge.n	80155e4 <__ieee754_powf+0xac>
 80155c0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80155c4:	f7eb fcfa 	bl	8000fbc <__aeabi_fdiv>
 80155c8:	e7cb      	b.n	8015562 <__ieee754_powf+0x2a>
 80155ca:	2500      	movs	r5, #0
 80155cc:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 80155d0:	d1f0      	bne.n	80155b4 <__ieee754_powf+0x7c>
 80155d2:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80155d6:	f000 82f6 	beq.w	8015bc6 <__ieee754_powf+0x68e>
 80155da:	d909      	bls.n	80155f0 <__ieee754_powf+0xb8>
 80155dc:	2c00      	cmp	r4, #0
 80155de:	f2c0 82f5 	blt.w	8015bcc <__ieee754_powf+0x694>
 80155e2:	4639      	mov	r1, r7
 80155e4:	4608      	mov	r0, r1
 80155e6:	b007      	add	sp, #28
 80155e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155ec:	2502      	movs	r5, #2
 80155ee:	e7ed      	b.n	80155cc <__ieee754_powf+0x94>
 80155f0:	2c00      	cmp	r4, #0
 80155f2:	f280 82eb 	bge.w	8015bcc <__ieee754_powf+0x694>
 80155f6:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 80155fa:	e7f3      	b.n	80155e4 <__ieee754_powf+0xac>
 80155fc:	2500      	movs	r5, #0
 80155fe:	e7d9      	b.n	80155b4 <__ieee754_powf+0x7c>
 8015600:	2500      	movs	r5, #0
 8015602:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8015606:	d104      	bne.n	8015612 <__ieee754_powf+0xda>
 8015608:	4641      	mov	r1, r8
 801560a:	4640      	mov	r0, r8
 801560c:	f7eb fc22 	bl	8000e54 <__aeabi_fmul>
 8015610:	e7a7      	b.n	8015562 <__ieee754_powf+0x2a>
 8015612:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8015616:	d107      	bne.n	8015628 <__ieee754_powf+0xf0>
 8015618:	2e00      	cmp	r6, #0
 801561a:	db05      	blt.n	8015628 <__ieee754_powf+0xf0>
 801561c:	4640      	mov	r0, r8
 801561e:	b007      	add	sp, #28
 8015620:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015624:	f7ff bf18 	b.w	8015458 <__ieee754_sqrtf>
 8015628:	4640      	mov	r0, r8
 801562a:	f000 fae3 	bl	8015bf4 <fabsf>
 801562e:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8015632:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8015636:	46ca      	mov	sl, r9
 8015638:	4601      	mov	r1, r0
 801563a:	d002      	beq.n	8015642 <__ieee754_powf+0x10a>
 801563c:	f1b9 0f00 	cmp.w	r9, #0
 8015640:	d117      	bne.n	8015672 <__ieee754_powf+0x13a>
 8015642:	2c00      	cmp	r4, #0
 8015644:	da04      	bge.n	8015650 <__ieee754_powf+0x118>
 8015646:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 801564a:	f7eb fcb7 	bl	8000fbc <__aeabi_fdiv>
 801564e:	4601      	mov	r1, r0
 8015650:	2e00      	cmp	r6, #0
 8015652:	dac7      	bge.n	80155e4 <__ieee754_powf+0xac>
 8015654:	f1a9 597e 	sub.w	r9, r9, #1065353216	@ 0x3f800000
 8015658:	ea59 0905 	orrs.w	r9, r9, r5
 801565c:	d104      	bne.n	8015668 <__ieee754_powf+0x130>
 801565e:	4608      	mov	r0, r1
 8015660:	f7eb faee 	bl	8000c40 <__aeabi_fsub>
 8015664:	4601      	mov	r1, r0
 8015666:	e7ad      	b.n	80155c4 <__ieee754_powf+0x8c>
 8015668:	2d01      	cmp	r5, #1
 801566a:	d1bb      	bne.n	80155e4 <__ieee754_powf+0xac>
 801566c:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8015670:	e777      	b.n	8015562 <__ieee754_powf+0x2a>
 8015672:	0ff3      	lsrs	r3, r6, #31
 8015674:	3b01      	subs	r3, #1
 8015676:	9303      	str	r3, [sp, #12]
 8015678:	432b      	orrs	r3, r5
 801567a:	d101      	bne.n	8015680 <__ieee754_powf+0x148>
 801567c:	4641      	mov	r1, r8
 801567e:	e7ee      	b.n	801565e <__ieee754_powf+0x126>
 8015680:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 8015684:	f240 809e 	bls.w	80157c4 <__ieee754_powf+0x28c>
 8015688:	4b47      	ldr	r3, [pc, #284]	@ (80157a8 <__ieee754_powf+0x270>)
 801568a:	4599      	cmp	r9, r3
 801568c:	d807      	bhi.n	801569e <__ieee754_powf+0x166>
 801568e:	2c00      	cmp	r4, #0
 8015690:	da0a      	bge.n	80156a8 <__ieee754_powf+0x170>
 8015692:	2000      	movs	r0, #0
 8015694:	b007      	add	sp, #28
 8015696:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801569a:	f000 bb14 	b.w	8015cc6 <__math_oflowf>
 801569e:	4b43      	ldr	r3, [pc, #268]	@ (80157ac <__ieee754_powf+0x274>)
 80156a0:	4599      	cmp	r9, r3
 80156a2:	d907      	bls.n	80156b4 <__ieee754_powf+0x17c>
 80156a4:	2c00      	cmp	r4, #0
 80156a6:	dcf4      	bgt.n	8015692 <__ieee754_powf+0x15a>
 80156a8:	2000      	movs	r0, #0
 80156aa:	b007      	add	sp, #28
 80156ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156b0:	f000 bb05 	b.w	8015cbe <__math_uflowf>
 80156b4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80156b8:	f7eb fac2 	bl	8000c40 <__aeabi_fsub>
 80156bc:	493c      	ldr	r1, [pc, #240]	@ (80157b0 <__ieee754_powf+0x278>)
 80156be:	4606      	mov	r6, r0
 80156c0:	f7eb fbc8 	bl	8000e54 <__aeabi_fmul>
 80156c4:	493b      	ldr	r1, [pc, #236]	@ (80157b4 <__ieee754_powf+0x27c>)
 80156c6:	4680      	mov	r8, r0
 80156c8:	4630      	mov	r0, r6
 80156ca:	f7eb fbc3 	bl	8000e54 <__aeabi_fmul>
 80156ce:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 80156d2:	4681      	mov	r9, r0
 80156d4:	4630      	mov	r0, r6
 80156d6:	f7eb fbbd 	bl	8000e54 <__aeabi_fmul>
 80156da:	4601      	mov	r1, r0
 80156dc:	4836      	ldr	r0, [pc, #216]	@ (80157b8 <__ieee754_powf+0x280>)
 80156de:	f7eb faaf 	bl	8000c40 <__aeabi_fsub>
 80156e2:	4631      	mov	r1, r6
 80156e4:	f7eb fbb6 	bl	8000e54 <__aeabi_fmul>
 80156e8:	4601      	mov	r1, r0
 80156ea:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 80156ee:	f7eb faa7 	bl	8000c40 <__aeabi_fsub>
 80156f2:	4631      	mov	r1, r6
 80156f4:	4682      	mov	sl, r0
 80156f6:	4630      	mov	r0, r6
 80156f8:	f7eb fbac 	bl	8000e54 <__aeabi_fmul>
 80156fc:	4601      	mov	r1, r0
 80156fe:	4650      	mov	r0, sl
 8015700:	f7eb fba8 	bl	8000e54 <__aeabi_fmul>
 8015704:	492d      	ldr	r1, [pc, #180]	@ (80157bc <__ieee754_powf+0x284>)
 8015706:	f7eb fba5 	bl	8000e54 <__aeabi_fmul>
 801570a:	4601      	mov	r1, r0
 801570c:	4648      	mov	r0, r9
 801570e:	f7eb fa97 	bl	8000c40 <__aeabi_fsub>
 8015712:	4601      	mov	r1, r0
 8015714:	4606      	mov	r6, r0
 8015716:	4640      	mov	r0, r8
 8015718:	f7eb fa94 	bl	8000c44 <__addsf3>
 801571c:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8015720:	f02b 0b0f 	bic.w	fp, fp, #15
 8015724:	4641      	mov	r1, r8
 8015726:	4658      	mov	r0, fp
 8015728:	f7eb fa8a 	bl	8000c40 <__aeabi_fsub>
 801572c:	4601      	mov	r1, r0
 801572e:	4630      	mov	r0, r6
 8015730:	f7eb fa86 	bl	8000c40 <__aeabi_fsub>
 8015734:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8015738:	9b03      	ldr	r3, [sp, #12]
 801573a:	3d01      	subs	r5, #1
 801573c:	f024 040f 	bic.w	r4, r4, #15
 8015740:	431d      	orrs	r5, r3
 8015742:	4606      	mov	r6, r0
 8015744:	4621      	mov	r1, r4
 8015746:	4638      	mov	r0, r7
 8015748:	bf14      	ite	ne
 801574a:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 801574e:	4d1c      	ldreq	r5, [pc, #112]	@ (80157c0 <__ieee754_powf+0x288>)
 8015750:	f7eb fa76 	bl	8000c40 <__aeabi_fsub>
 8015754:	4659      	mov	r1, fp
 8015756:	f7eb fb7d 	bl	8000e54 <__aeabi_fmul>
 801575a:	4639      	mov	r1, r7
 801575c:	4680      	mov	r8, r0
 801575e:	4630      	mov	r0, r6
 8015760:	f7eb fb78 	bl	8000e54 <__aeabi_fmul>
 8015764:	4601      	mov	r1, r0
 8015766:	4640      	mov	r0, r8
 8015768:	f7eb fa6c 	bl	8000c44 <__addsf3>
 801576c:	4621      	mov	r1, r4
 801576e:	4606      	mov	r6, r0
 8015770:	4658      	mov	r0, fp
 8015772:	f7eb fb6f 	bl	8000e54 <__aeabi_fmul>
 8015776:	4601      	mov	r1, r0
 8015778:	4607      	mov	r7, r0
 801577a:	4630      	mov	r0, r6
 801577c:	f7eb fa62 	bl	8000c44 <__addsf3>
 8015780:	2800      	cmp	r0, #0
 8015782:	4604      	mov	r4, r0
 8015784:	4680      	mov	r8, r0
 8015786:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 801578a:	f340 8141 	ble.w	8015a10 <__ieee754_powf+0x4d8>
 801578e:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8015792:	f240 812a 	bls.w	80159ea <__ieee754_powf+0x4b2>
 8015796:	2100      	movs	r1, #0
 8015798:	4628      	mov	r0, r5
 801579a:	f7eb fcf9 	bl	8001190 <__aeabi_fcmplt>
 801579e:	3800      	subs	r0, #0
 80157a0:	bf18      	it	ne
 80157a2:	2001      	movne	r0, #1
 80157a4:	e776      	b.n	8015694 <__ieee754_powf+0x15c>
 80157a6:	bf00      	nop
 80157a8:	3f7ffff3 	.word	0x3f7ffff3
 80157ac:	3f800007 	.word	0x3f800007
 80157b0:	3fb8aa00 	.word	0x3fb8aa00
 80157b4:	36eca570 	.word	0x36eca570
 80157b8:	3eaaaaab 	.word	0x3eaaaaab
 80157bc:	3fb8aa3b 	.word	0x3fb8aa3b
 80157c0:	bf800000 	.word	0xbf800000
 80157c4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80157c8:	f040 810b 	bne.w	80159e2 <__ieee754_powf+0x4aa>
 80157cc:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 80157d0:	f7eb fb40 	bl	8000e54 <__aeabi_fmul>
 80157d4:	f06f 0217 	mvn.w	r2, #23
 80157d8:	4682      	mov	sl, r0
 80157da:	ea4f 53ea 	mov.w	r3, sl, asr #23
 80157de:	3b7f      	subs	r3, #127	@ 0x7f
 80157e0:	441a      	add	r2, r3
 80157e2:	4b96      	ldr	r3, [pc, #600]	@ (8015a3c <__ieee754_powf+0x504>)
 80157e4:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 80157e8:	459a      	cmp	sl, r3
 80157ea:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 80157ee:	dd06      	ble.n	80157fe <__ieee754_powf+0x2c6>
 80157f0:	4b93      	ldr	r3, [pc, #588]	@ (8015a40 <__ieee754_powf+0x508>)
 80157f2:	459a      	cmp	sl, r3
 80157f4:	f340 80f7 	ble.w	80159e6 <__ieee754_powf+0x4ae>
 80157f8:	3201      	adds	r2, #1
 80157fa:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 80157fe:	2300      	movs	r3, #0
 8015800:	9301      	str	r3, [sp, #4]
 8015802:	9205      	str	r2, [sp, #20]
 8015804:	4b8f      	ldr	r3, [pc, #572]	@ (8015a44 <__ieee754_powf+0x50c>)
 8015806:	9a01      	ldr	r2, [sp, #4]
 8015808:	4630      	mov	r0, r6
 801580a:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 801580e:	46b2      	mov	sl, r6
 8015810:	4659      	mov	r1, fp
 8015812:	f7eb fa15 	bl	8000c40 <__aeabi_fsub>
 8015816:	4631      	mov	r1, r6
 8015818:	4681      	mov	r9, r0
 801581a:	4658      	mov	r0, fp
 801581c:	f7eb fa12 	bl	8000c44 <__addsf3>
 8015820:	4601      	mov	r1, r0
 8015822:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8015826:	f7eb fbc9 	bl	8000fbc <__aeabi_fdiv>
 801582a:	4601      	mov	r1, r0
 801582c:	9004      	str	r0, [sp, #16]
 801582e:	4648      	mov	r0, r9
 8015830:	f7eb fb10 	bl	8000e54 <__aeabi_fmul>
 8015834:	9002      	str	r0, [sp, #8]
 8015836:	9b02      	ldr	r3, [sp, #8]
 8015838:	1076      	asrs	r6, r6, #1
 801583a:	f423 687f 	bic.w	r8, r3, #4080	@ 0xff0
 801583e:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 8015842:	9b01      	ldr	r3, [sp, #4]
 8015844:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 8015848:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 801584c:	f028 080f 	bic.w	r8, r8, #15
 8015850:	4631      	mov	r1, r6
 8015852:	4640      	mov	r0, r8
 8015854:	f7eb fafe 	bl	8000e54 <__aeabi_fmul>
 8015858:	4601      	mov	r1, r0
 801585a:	4648      	mov	r0, r9
 801585c:	f7eb f9f0 	bl	8000c40 <__aeabi_fsub>
 8015860:	4659      	mov	r1, fp
 8015862:	4681      	mov	r9, r0
 8015864:	4630      	mov	r0, r6
 8015866:	f7eb f9eb 	bl	8000c40 <__aeabi_fsub>
 801586a:	4601      	mov	r1, r0
 801586c:	4650      	mov	r0, sl
 801586e:	f7eb f9e7 	bl	8000c40 <__aeabi_fsub>
 8015872:	4641      	mov	r1, r8
 8015874:	f7eb faee 	bl	8000e54 <__aeabi_fmul>
 8015878:	4601      	mov	r1, r0
 801587a:	4648      	mov	r0, r9
 801587c:	f7eb f9e0 	bl	8000c40 <__aeabi_fsub>
 8015880:	9b04      	ldr	r3, [sp, #16]
 8015882:	4619      	mov	r1, r3
 8015884:	f7eb fae6 	bl	8000e54 <__aeabi_fmul>
 8015888:	9902      	ldr	r1, [sp, #8]
 801588a:	4683      	mov	fp, r0
 801588c:	4608      	mov	r0, r1
 801588e:	f7eb fae1 	bl	8000e54 <__aeabi_fmul>
 8015892:	4606      	mov	r6, r0
 8015894:	496c      	ldr	r1, [pc, #432]	@ (8015a48 <__ieee754_powf+0x510>)
 8015896:	f7eb fadd 	bl	8000e54 <__aeabi_fmul>
 801589a:	496c      	ldr	r1, [pc, #432]	@ (8015a4c <__ieee754_powf+0x514>)
 801589c:	f7eb f9d2 	bl	8000c44 <__addsf3>
 80158a0:	4631      	mov	r1, r6
 80158a2:	f7eb fad7 	bl	8000e54 <__aeabi_fmul>
 80158a6:	496a      	ldr	r1, [pc, #424]	@ (8015a50 <__ieee754_powf+0x518>)
 80158a8:	f7eb f9cc 	bl	8000c44 <__addsf3>
 80158ac:	4631      	mov	r1, r6
 80158ae:	f7eb fad1 	bl	8000e54 <__aeabi_fmul>
 80158b2:	4968      	ldr	r1, [pc, #416]	@ (8015a54 <__ieee754_powf+0x51c>)
 80158b4:	f7eb f9c6 	bl	8000c44 <__addsf3>
 80158b8:	4631      	mov	r1, r6
 80158ba:	f7eb facb 	bl	8000e54 <__aeabi_fmul>
 80158be:	4966      	ldr	r1, [pc, #408]	@ (8015a58 <__ieee754_powf+0x520>)
 80158c0:	f7eb f9c0 	bl	8000c44 <__addsf3>
 80158c4:	4631      	mov	r1, r6
 80158c6:	f7eb fac5 	bl	8000e54 <__aeabi_fmul>
 80158ca:	4964      	ldr	r1, [pc, #400]	@ (8015a5c <__ieee754_powf+0x524>)
 80158cc:	f7eb f9ba 	bl	8000c44 <__addsf3>
 80158d0:	4631      	mov	r1, r6
 80158d2:	4681      	mov	r9, r0
 80158d4:	4630      	mov	r0, r6
 80158d6:	f7eb fabd 	bl	8000e54 <__aeabi_fmul>
 80158da:	4601      	mov	r1, r0
 80158dc:	4648      	mov	r0, r9
 80158de:	f7eb fab9 	bl	8000e54 <__aeabi_fmul>
 80158e2:	4606      	mov	r6, r0
 80158e4:	4641      	mov	r1, r8
 80158e6:	9802      	ldr	r0, [sp, #8]
 80158e8:	f7eb f9ac 	bl	8000c44 <__addsf3>
 80158ec:	4659      	mov	r1, fp
 80158ee:	f7eb fab1 	bl	8000e54 <__aeabi_fmul>
 80158f2:	4631      	mov	r1, r6
 80158f4:	f7eb f9a6 	bl	8000c44 <__addsf3>
 80158f8:	4641      	mov	r1, r8
 80158fa:	4681      	mov	r9, r0
 80158fc:	4640      	mov	r0, r8
 80158fe:	f7eb faa9 	bl	8000e54 <__aeabi_fmul>
 8015902:	4957      	ldr	r1, [pc, #348]	@ (8015a60 <__ieee754_powf+0x528>)
 8015904:	4682      	mov	sl, r0
 8015906:	f7eb f99d 	bl	8000c44 <__addsf3>
 801590a:	4649      	mov	r1, r9
 801590c:	f7eb f99a 	bl	8000c44 <__addsf3>
 8015910:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8015914:	f026 060f 	bic.w	r6, r6, #15
 8015918:	4631      	mov	r1, r6
 801591a:	4640      	mov	r0, r8
 801591c:	f7eb fa9a 	bl	8000e54 <__aeabi_fmul>
 8015920:	494f      	ldr	r1, [pc, #316]	@ (8015a60 <__ieee754_powf+0x528>)
 8015922:	4680      	mov	r8, r0
 8015924:	4630      	mov	r0, r6
 8015926:	f7eb f98b 	bl	8000c40 <__aeabi_fsub>
 801592a:	4651      	mov	r1, sl
 801592c:	f7eb f988 	bl	8000c40 <__aeabi_fsub>
 8015930:	4601      	mov	r1, r0
 8015932:	4648      	mov	r0, r9
 8015934:	f7eb f984 	bl	8000c40 <__aeabi_fsub>
 8015938:	9902      	ldr	r1, [sp, #8]
 801593a:	f7eb fa8b 	bl	8000e54 <__aeabi_fmul>
 801593e:	4631      	mov	r1, r6
 8015940:	4681      	mov	r9, r0
 8015942:	4658      	mov	r0, fp
 8015944:	f7eb fa86 	bl	8000e54 <__aeabi_fmul>
 8015948:	4601      	mov	r1, r0
 801594a:	4648      	mov	r0, r9
 801594c:	f7eb f97a 	bl	8000c44 <__addsf3>
 8015950:	4682      	mov	sl, r0
 8015952:	4601      	mov	r1, r0
 8015954:	4640      	mov	r0, r8
 8015956:	f7eb f975 	bl	8000c44 <__addsf3>
 801595a:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 801595e:	f026 060f 	bic.w	r6, r6, #15
 8015962:	4630      	mov	r0, r6
 8015964:	493f      	ldr	r1, [pc, #252]	@ (8015a64 <__ieee754_powf+0x52c>)
 8015966:	f7eb fa75 	bl	8000e54 <__aeabi_fmul>
 801596a:	4641      	mov	r1, r8
 801596c:	4681      	mov	r9, r0
 801596e:	4630      	mov	r0, r6
 8015970:	f7eb f966 	bl	8000c40 <__aeabi_fsub>
 8015974:	4601      	mov	r1, r0
 8015976:	4650      	mov	r0, sl
 8015978:	f7eb f962 	bl	8000c40 <__aeabi_fsub>
 801597c:	493a      	ldr	r1, [pc, #232]	@ (8015a68 <__ieee754_powf+0x530>)
 801597e:	f7eb fa69 	bl	8000e54 <__aeabi_fmul>
 8015982:	493a      	ldr	r1, [pc, #232]	@ (8015a6c <__ieee754_powf+0x534>)
 8015984:	4680      	mov	r8, r0
 8015986:	4630      	mov	r0, r6
 8015988:	f7eb fa64 	bl	8000e54 <__aeabi_fmul>
 801598c:	4601      	mov	r1, r0
 801598e:	4640      	mov	r0, r8
 8015990:	f7eb f958 	bl	8000c44 <__addsf3>
 8015994:	4b36      	ldr	r3, [pc, #216]	@ (8015a70 <__ieee754_powf+0x538>)
 8015996:	9a01      	ldr	r2, [sp, #4]
 8015998:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801599c:	f7eb f952 	bl	8000c44 <__addsf3>
 80159a0:	9a05      	ldr	r2, [sp, #20]
 80159a2:	4606      	mov	r6, r0
 80159a4:	4610      	mov	r0, r2
 80159a6:	f7eb fa01 	bl	8000dac <__aeabi_i2f>
 80159aa:	4680      	mov	r8, r0
 80159ac:	4b31      	ldr	r3, [pc, #196]	@ (8015a74 <__ieee754_powf+0x53c>)
 80159ae:	9a01      	ldr	r2, [sp, #4]
 80159b0:	4631      	mov	r1, r6
 80159b2:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 80159b6:	4648      	mov	r0, r9
 80159b8:	f7eb f944 	bl	8000c44 <__addsf3>
 80159bc:	4651      	mov	r1, sl
 80159be:	f7eb f941 	bl	8000c44 <__addsf3>
 80159c2:	4641      	mov	r1, r8
 80159c4:	f7eb f93e 	bl	8000c44 <__addsf3>
 80159c8:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 80159cc:	f02b 0b0f 	bic.w	fp, fp, #15
 80159d0:	4641      	mov	r1, r8
 80159d2:	4658      	mov	r0, fp
 80159d4:	f7eb f934 	bl	8000c40 <__aeabi_fsub>
 80159d8:	4651      	mov	r1, sl
 80159da:	f7eb f931 	bl	8000c40 <__aeabi_fsub>
 80159de:	4649      	mov	r1, r9
 80159e0:	e6a2      	b.n	8015728 <__ieee754_powf+0x1f0>
 80159e2:	2200      	movs	r2, #0
 80159e4:	e6f9      	b.n	80157da <__ieee754_powf+0x2a2>
 80159e6:	2301      	movs	r3, #1
 80159e8:	e70a      	b.n	8015800 <__ieee754_powf+0x2c8>
 80159ea:	d149      	bne.n	8015a80 <__ieee754_powf+0x548>
 80159ec:	4922      	ldr	r1, [pc, #136]	@ (8015a78 <__ieee754_powf+0x540>)
 80159ee:	4630      	mov	r0, r6
 80159f0:	f7eb f928 	bl	8000c44 <__addsf3>
 80159f4:	4639      	mov	r1, r7
 80159f6:	4681      	mov	r9, r0
 80159f8:	4620      	mov	r0, r4
 80159fa:	f7eb f921 	bl	8000c40 <__aeabi_fsub>
 80159fe:	4601      	mov	r1, r0
 8015a00:	4648      	mov	r0, r9
 8015a02:	f7eb fbe3 	bl	80011cc <__aeabi_fcmpgt>
 8015a06:	2800      	cmp	r0, #0
 8015a08:	f47f aec5 	bne.w	8015796 <__ieee754_powf+0x25e>
 8015a0c:	2386      	movs	r3, #134	@ 0x86
 8015a0e:	e03c      	b.n	8015a8a <__ieee754_powf+0x552>
 8015a10:	4a1a      	ldr	r2, [pc, #104]	@ (8015a7c <__ieee754_powf+0x544>)
 8015a12:	4293      	cmp	r3, r2
 8015a14:	d907      	bls.n	8015a26 <__ieee754_powf+0x4ee>
 8015a16:	2100      	movs	r1, #0
 8015a18:	4628      	mov	r0, r5
 8015a1a:	f7eb fbb9 	bl	8001190 <__aeabi_fcmplt>
 8015a1e:	3800      	subs	r0, #0
 8015a20:	bf18      	it	ne
 8015a22:	2001      	movne	r0, #1
 8015a24:	e641      	b.n	80156aa <__ieee754_powf+0x172>
 8015a26:	d12b      	bne.n	8015a80 <__ieee754_powf+0x548>
 8015a28:	4639      	mov	r1, r7
 8015a2a:	f7eb f909 	bl	8000c40 <__aeabi_fsub>
 8015a2e:	4631      	mov	r1, r6
 8015a30:	f7eb fbc2 	bl	80011b8 <__aeabi_fcmpge>
 8015a34:	2800      	cmp	r0, #0
 8015a36:	d0e9      	beq.n	8015a0c <__ieee754_powf+0x4d4>
 8015a38:	e7ed      	b.n	8015a16 <__ieee754_powf+0x4de>
 8015a3a:	bf00      	nop
 8015a3c:	001cc471 	.word	0x001cc471
 8015a40:	005db3d6 	.word	0x005db3d6
 8015a44:	080164d8 	.word	0x080164d8
 8015a48:	3e53f142 	.word	0x3e53f142
 8015a4c:	3e6c3255 	.word	0x3e6c3255
 8015a50:	3e8ba305 	.word	0x3e8ba305
 8015a54:	3eaaaaab 	.word	0x3eaaaaab
 8015a58:	3edb6db7 	.word	0x3edb6db7
 8015a5c:	3f19999a 	.word	0x3f19999a
 8015a60:	40400000 	.word	0x40400000
 8015a64:	3f763800 	.word	0x3f763800
 8015a68:	3f76384f 	.word	0x3f76384f
 8015a6c:	369dc3a0 	.word	0x369dc3a0
 8015a70:	080164c8 	.word	0x080164c8
 8015a74:	080164d0 	.word	0x080164d0
 8015a78:	3338aa3c 	.word	0x3338aa3c
 8015a7c:	43160000 	.word	0x43160000
 8015a80:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8015a84:	f240 809b 	bls.w	8015bbe <__ieee754_powf+0x686>
 8015a88:	15db      	asrs	r3, r3, #23
 8015a8a:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 8015a8e:	3b7e      	subs	r3, #126	@ 0x7e
 8015a90:	411c      	asrs	r4, r3
 8015a92:	4444      	add	r4, r8
 8015a94:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 8015a98:	494d      	ldr	r1, [pc, #308]	@ (8015bd0 <__ieee754_powf+0x698>)
 8015a9a:	3b7f      	subs	r3, #127	@ 0x7f
 8015a9c:	4119      	asrs	r1, r3
 8015a9e:	4021      	ands	r1, r4
 8015aa0:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8015aa4:	f1c3 0317 	rsb	r3, r3, #23
 8015aa8:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 8015aac:	4638      	mov	r0, r7
 8015aae:	411c      	asrs	r4, r3
 8015ab0:	f1b8 0f00 	cmp.w	r8, #0
 8015ab4:	bfb8      	it	lt
 8015ab6:	4264      	neglt	r4, r4
 8015ab8:	f7eb f8c2 	bl	8000c40 <__aeabi_fsub>
 8015abc:	4607      	mov	r7, r0
 8015abe:	4631      	mov	r1, r6
 8015ac0:	4638      	mov	r0, r7
 8015ac2:	f7eb f8bf 	bl	8000c44 <__addsf3>
 8015ac6:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 8015aca:	f028 080f 	bic.w	r8, r8, #15
 8015ace:	4640      	mov	r0, r8
 8015ad0:	4940      	ldr	r1, [pc, #256]	@ (8015bd4 <__ieee754_powf+0x69c>)
 8015ad2:	f7eb f9bf 	bl	8000e54 <__aeabi_fmul>
 8015ad6:	4639      	mov	r1, r7
 8015ad8:	4681      	mov	r9, r0
 8015ada:	4640      	mov	r0, r8
 8015adc:	f7eb f8b0 	bl	8000c40 <__aeabi_fsub>
 8015ae0:	4601      	mov	r1, r0
 8015ae2:	4630      	mov	r0, r6
 8015ae4:	f7eb f8ac 	bl	8000c40 <__aeabi_fsub>
 8015ae8:	493b      	ldr	r1, [pc, #236]	@ (8015bd8 <__ieee754_powf+0x6a0>)
 8015aea:	f7eb f9b3 	bl	8000e54 <__aeabi_fmul>
 8015aee:	493b      	ldr	r1, [pc, #236]	@ (8015bdc <__ieee754_powf+0x6a4>)
 8015af0:	4606      	mov	r6, r0
 8015af2:	4640      	mov	r0, r8
 8015af4:	f7eb f9ae 	bl	8000e54 <__aeabi_fmul>
 8015af8:	4601      	mov	r1, r0
 8015afa:	4630      	mov	r0, r6
 8015afc:	f7eb f8a2 	bl	8000c44 <__addsf3>
 8015b00:	4607      	mov	r7, r0
 8015b02:	4601      	mov	r1, r0
 8015b04:	4648      	mov	r0, r9
 8015b06:	f7eb f89d 	bl	8000c44 <__addsf3>
 8015b0a:	4649      	mov	r1, r9
 8015b0c:	4606      	mov	r6, r0
 8015b0e:	f7eb f897 	bl	8000c40 <__aeabi_fsub>
 8015b12:	4601      	mov	r1, r0
 8015b14:	4638      	mov	r0, r7
 8015b16:	f7eb f893 	bl	8000c40 <__aeabi_fsub>
 8015b1a:	4631      	mov	r1, r6
 8015b1c:	4680      	mov	r8, r0
 8015b1e:	4630      	mov	r0, r6
 8015b20:	f7eb f998 	bl	8000e54 <__aeabi_fmul>
 8015b24:	4607      	mov	r7, r0
 8015b26:	492e      	ldr	r1, [pc, #184]	@ (8015be0 <__ieee754_powf+0x6a8>)
 8015b28:	f7eb f994 	bl	8000e54 <__aeabi_fmul>
 8015b2c:	492d      	ldr	r1, [pc, #180]	@ (8015be4 <__ieee754_powf+0x6ac>)
 8015b2e:	f7eb f887 	bl	8000c40 <__aeabi_fsub>
 8015b32:	4639      	mov	r1, r7
 8015b34:	f7eb f98e 	bl	8000e54 <__aeabi_fmul>
 8015b38:	492b      	ldr	r1, [pc, #172]	@ (8015be8 <__ieee754_powf+0x6b0>)
 8015b3a:	f7eb f883 	bl	8000c44 <__addsf3>
 8015b3e:	4639      	mov	r1, r7
 8015b40:	f7eb f988 	bl	8000e54 <__aeabi_fmul>
 8015b44:	4929      	ldr	r1, [pc, #164]	@ (8015bec <__ieee754_powf+0x6b4>)
 8015b46:	f7eb f87b 	bl	8000c40 <__aeabi_fsub>
 8015b4a:	4639      	mov	r1, r7
 8015b4c:	f7eb f982 	bl	8000e54 <__aeabi_fmul>
 8015b50:	4927      	ldr	r1, [pc, #156]	@ (8015bf0 <__ieee754_powf+0x6b8>)
 8015b52:	f7eb f877 	bl	8000c44 <__addsf3>
 8015b56:	4639      	mov	r1, r7
 8015b58:	f7eb f97c 	bl	8000e54 <__aeabi_fmul>
 8015b5c:	4601      	mov	r1, r0
 8015b5e:	4630      	mov	r0, r6
 8015b60:	f7eb f86e 	bl	8000c40 <__aeabi_fsub>
 8015b64:	4607      	mov	r7, r0
 8015b66:	4601      	mov	r1, r0
 8015b68:	4630      	mov	r0, r6
 8015b6a:	f7eb f973 	bl	8000e54 <__aeabi_fmul>
 8015b6e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8015b72:	4681      	mov	r9, r0
 8015b74:	4638      	mov	r0, r7
 8015b76:	f7eb f863 	bl	8000c40 <__aeabi_fsub>
 8015b7a:	4601      	mov	r1, r0
 8015b7c:	4648      	mov	r0, r9
 8015b7e:	f7eb fa1d 	bl	8000fbc <__aeabi_fdiv>
 8015b82:	4641      	mov	r1, r8
 8015b84:	4607      	mov	r7, r0
 8015b86:	4630      	mov	r0, r6
 8015b88:	f7eb f964 	bl	8000e54 <__aeabi_fmul>
 8015b8c:	4641      	mov	r1, r8
 8015b8e:	f7eb f859 	bl	8000c44 <__addsf3>
 8015b92:	4601      	mov	r1, r0
 8015b94:	4638      	mov	r0, r7
 8015b96:	f7eb f853 	bl	8000c40 <__aeabi_fsub>
 8015b9a:	4631      	mov	r1, r6
 8015b9c:	f7eb f850 	bl	8000c40 <__aeabi_fsub>
 8015ba0:	4601      	mov	r1, r0
 8015ba2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8015ba6:	f7eb f84b 	bl	8000c40 <__aeabi_fsub>
 8015baa:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8015bae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8015bb2:	da06      	bge.n	8015bc2 <__ieee754_powf+0x68a>
 8015bb4:	4621      	mov	r1, r4
 8015bb6:	f000 f821 	bl	8015bfc <scalbnf>
 8015bba:	4629      	mov	r1, r5
 8015bbc:	e526      	b.n	801560c <__ieee754_powf+0xd4>
 8015bbe:	2400      	movs	r4, #0
 8015bc0:	e77d      	b.n	8015abe <__ieee754_powf+0x586>
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	e7f9      	b.n	8015bba <__ieee754_powf+0x682>
 8015bc6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8015bca:	e50b      	b.n	80155e4 <__ieee754_powf+0xac>
 8015bcc:	2100      	movs	r1, #0
 8015bce:	e509      	b.n	80155e4 <__ieee754_powf+0xac>
 8015bd0:	ff800000 	.word	0xff800000
 8015bd4:	3f317200 	.word	0x3f317200
 8015bd8:	3f317218 	.word	0x3f317218
 8015bdc:	35bfbe8c 	.word	0x35bfbe8c
 8015be0:	3331bb4c 	.word	0x3331bb4c
 8015be4:	35ddea0e 	.word	0x35ddea0e
 8015be8:	388ab355 	.word	0x388ab355
 8015bec:	3b360b61 	.word	0x3b360b61
 8015bf0:	3e2aaaab 	.word	0x3e2aaaab

08015bf4 <fabsf>:
 8015bf4:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8015bf8:	4770      	bx	lr
	...

08015bfc <scalbnf>:
 8015bfc:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8015c00:	b538      	push	{r3, r4, r5, lr}
 8015c02:	4603      	mov	r3, r0
 8015c04:	460d      	mov	r5, r1
 8015c06:	4604      	mov	r4, r0
 8015c08:	d02e      	beq.n	8015c68 <scalbnf+0x6c>
 8015c0a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8015c0e:	d304      	bcc.n	8015c1a <scalbnf+0x1e>
 8015c10:	4601      	mov	r1, r0
 8015c12:	f7eb f817 	bl	8000c44 <__addsf3>
 8015c16:	4603      	mov	r3, r0
 8015c18:	e026      	b.n	8015c68 <scalbnf+0x6c>
 8015c1a:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8015c1e:	d118      	bne.n	8015c52 <scalbnf+0x56>
 8015c20:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8015c24:	f7eb f916 	bl	8000e54 <__aeabi_fmul>
 8015c28:	4a17      	ldr	r2, [pc, #92]	@ (8015c88 <scalbnf+0x8c>)
 8015c2a:	4603      	mov	r3, r0
 8015c2c:	4295      	cmp	r5, r2
 8015c2e:	db0c      	blt.n	8015c4a <scalbnf+0x4e>
 8015c30:	4604      	mov	r4, r0
 8015c32:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8015c36:	3a19      	subs	r2, #25
 8015c38:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8015c3c:	428d      	cmp	r5, r1
 8015c3e:	dd0a      	ble.n	8015c56 <scalbnf+0x5a>
 8015c40:	4912      	ldr	r1, [pc, #72]	@ (8015c8c <scalbnf+0x90>)
 8015c42:	4618      	mov	r0, r3
 8015c44:	f361 001e 	bfi	r0, r1, #0, #31
 8015c48:	e000      	b.n	8015c4c <scalbnf+0x50>
 8015c4a:	4911      	ldr	r1, [pc, #68]	@ (8015c90 <scalbnf+0x94>)
 8015c4c:	f7eb f902 	bl	8000e54 <__aeabi_fmul>
 8015c50:	e7e1      	b.n	8015c16 <scalbnf+0x1a>
 8015c52:	0dd2      	lsrs	r2, r2, #23
 8015c54:	e7f0      	b.n	8015c38 <scalbnf+0x3c>
 8015c56:	1951      	adds	r1, r2, r5
 8015c58:	29fe      	cmp	r1, #254	@ 0xfe
 8015c5a:	dcf1      	bgt.n	8015c40 <scalbnf+0x44>
 8015c5c:	2900      	cmp	r1, #0
 8015c5e:	dd05      	ble.n	8015c6c <scalbnf+0x70>
 8015c60:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8015c64:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8015c68:	4618      	mov	r0, r3
 8015c6a:	bd38      	pop	{r3, r4, r5, pc}
 8015c6c:	f111 0f16 	cmn.w	r1, #22
 8015c70:	da01      	bge.n	8015c76 <scalbnf+0x7a>
 8015c72:	4907      	ldr	r1, [pc, #28]	@ (8015c90 <scalbnf+0x94>)
 8015c74:	e7e5      	b.n	8015c42 <scalbnf+0x46>
 8015c76:	f101 0019 	add.w	r0, r1, #25
 8015c7a:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8015c7e:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8015c82:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8015c86:	e7e1      	b.n	8015c4c <scalbnf+0x50>
 8015c88:	ffff3cb0 	.word	0xffff3cb0
 8015c8c:	7149f2ca 	.word	0x7149f2ca
 8015c90:	0da24260 	.word	0x0da24260

08015c94 <with_errnof>:
 8015c94:	b538      	push	{r3, r4, r5, lr}
 8015c96:	4604      	mov	r4, r0
 8015c98:	460d      	mov	r5, r1
 8015c9a:	f7ff fa39 	bl	8015110 <__errno>
 8015c9e:	6005      	str	r5, [r0, #0]
 8015ca0:	4620      	mov	r0, r4
 8015ca2:	bd38      	pop	{r3, r4, r5, pc}

08015ca4 <xflowf>:
 8015ca4:	b508      	push	{r3, lr}
 8015ca6:	b140      	cbz	r0, 8015cba <xflowf+0x16>
 8015ca8:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8015cac:	f7eb f8d2 	bl	8000e54 <__aeabi_fmul>
 8015cb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015cb4:	2122      	movs	r1, #34	@ 0x22
 8015cb6:	f7ff bfed 	b.w	8015c94 <with_errnof>
 8015cba:	4608      	mov	r0, r1
 8015cbc:	e7f6      	b.n	8015cac <xflowf+0x8>

08015cbe <__math_uflowf>:
 8015cbe:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8015cc2:	f7ff bfef 	b.w	8015ca4 <xflowf>

08015cc6 <__math_oflowf>:
 8015cc6:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8015cca:	f7ff bfeb 	b.w	8015ca4 <xflowf>
	...

08015cd0 <_init>:
 8015cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cd2:	bf00      	nop
 8015cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015cd6:	bc08      	pop	{r3}
 8015cd8:	469e      	mov	lr, r3
 8015cda:	4770      	bx	lr

08015cdc <_fini>:
 8015cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cde:	bf00      	nop
 8015ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ce2:	bc08      	pop	{r3}
 8015ce4:	469e      	mov	lr, r3
 8015ce6:	4770      	bx	lr
