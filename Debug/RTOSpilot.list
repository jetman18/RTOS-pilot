
RTOSpilot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012184  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000075c  08012374  08012374  00013374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ad0  08012ad0  000140a0  2**0
                  CONTENTS
  4 .ARM          00000000  08012ad0  08012ad0  000140a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012ad0  08012ad0  000140a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ad0  08012ad0  00013ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012ad4  08012ad4  00013ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08012ad8  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000038cc  200000a0  08012b78  000140a0  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2000396c  08012b78  0001496c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000140a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026429  00000000  00000000  000140c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000665a  00000000  00000000  0003a4f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020d8  00000000  00000000  00040b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001967  00000000  00000000  00042c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000808d  00000000  00000000  0004458f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ee76  00000000  00000000  0004c61c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad2ad  00000000  00000000  0007b492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012873f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e20  00000000  00000000  00128784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001315a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000a0 	.word	0x200000a0
 800020c:	00000000 	.word	0x00000000
 8000210:	0801235c 	.word	0x0801235c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000a4 	.word	0x200000a4
 800022c:	0801235c 	.word	0x0801235c

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_frsub>:
 8000bf8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bfc:	e002      	b.n	8000c04 <__addsf3>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fsub>:
 8000c00:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c04 <__addsf3>:
 8000c04:	0042      	lsls	r2, r0, #1
 8000c06:	bf1f      	itttt	ne
 8000c08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c0c:	ea92 0f03 	teqne	r2, r3
 8000c10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c18:	d06a      	beq.n	8000cf0 <__addsf3+0xec>
 8000c1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c22:	bfc1      	itttt	gt
 8000c24:	18d2      	addgt	r2, r2, r3
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	4048      	eorgt	r0, r1
 8000c2a:	4041      	eorgt	r1, r0
 8000c2c:	bfb8      	it	lt
 8000c2e:	425b      	neglt	r3, r3
 8000c30:	2b19      	cmp	r3, #25
 8000c32:	bf88      	it	hi
 8000c34:	4770      	bxhi	lr
 8000c36:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c4a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c4e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4249      	negne	r1, r1
 8000c56:	ea92 0f03 	teq	r2, r3
 8000c5a:	d03f      	beq.n	8000cdc <__addsf3+0xd8>
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	fa41 fc03 	asr.w	ip, r1, r3
 8000c64:	eb10 000c 	adds.w	r0, r0, ip
 8000c68:	f1c3 0320 	rsb	r3, r3, #32
 8000c6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c70:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__addsf3+0x78>
 8000c76:	4249      	negs	r1, r1
 8000c78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c7c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c80:	d313      	bcc.n	8000caa <__addsf3+0xa6>
 8000c82:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c86:	d306      	bcc.n	8000c96 <__addsf3+0x92>
 8000c88:	0840      	lsrs	r0, r0, #1
 8000c8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8e:	f102 0201 	add.w	r2, r2, #1
 8000c92:	2afe      	cmp	r2, #254	@ 0xfe
 8000c94:	d251      	bcs.n	8000d3a <__addsf3+0x136>
 8000c96:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9e:	bf08      	it	eq
 8000ca0:	f020 0001 	biceq.w	r0, r0, #1
 8000ca4:	ea40 0003 	orr.w	r0, r0, r3
 8000ca8:	4770      	bx	lr
 8000caa:	0049      	lsls	r1, r1, #1
 8000cac:	eb40 0000 	adc.w	r0, r0, r0
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb8:	d2ed      	bcs.n	8000c96 <__addsf3+0x92>
 8000cba:	fab0 fc80 	clz	ip, r0
 8000cbe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cc2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cca:	bfaa      	itet	ge
 8000ccc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd0:	4252      	neglt	r2, r2
 8000cd2:	4318      	orrge	r0, r3
 8000cd4:	bfbc      	itt	lt
 8000cd6:	40d0      	lsrlt	r0, r2
 8000cd8:	4318      	orrlt	r0, r3
 8000cda:	4770      	bx	lr
 8000cdc:	f092 0f00 	teq	r2, #0
 8000ce0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ce4:	bf06      	itte	eq
 8000ce6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cea:	3201      	addeq	r2, #1
 8000cec:	3b01      	subne	r3, #1
 8000cee:	e7b5      	b.n	8000c5c <__addsf3+0x58>
 8000cf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	bf18      	it	ne
 8000cfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfe:	d021      	beq.n	8000d44 <__addsf3+0x140>
 8000d00:	ea92 0f03 	teq	r2, r3
 8000d04:	d004      	beq.n	8000d10 <__addsf3+0x10c>
 8000d06:	f092 0f00 	teq	r2, #0
 8000d0a:	bf08      	it	eq
 8000d0c:	4608      	moveq	r0, r1
 8000d0e:	4770      	bx	lr
 8000d10:	ea90 0f01 	teq	r0, r1
 8000d14:	bf1c      	itt	ne
 8000d16:	2000      	movne	r0, #0
 8000d18:	4770      	bxne	lr
 8000d1a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d1e:	d104      	bne.n	8000d2a <__addsf3+0x126>
 8000d20:	0040      	lsls	r0, r0, #1
 8000d22:	bf28      	it	cs
 8000d24:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d28:	4770      	bx	lr
 8000d2a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d2e:	bf3c      	itt	cc
 8000d30:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d34:	4770      	bxcc	lr
 8000d36:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d3a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d42:	4770      	bx	lr
 8000d44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d48:	bf16      	itet	ne
 8000d4a:	4608      	movne	r0, r1
 8000d4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d50:	4601      	movne	r1, r0
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	bf06      	itte	eq
 8000d56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d5a:	ea90 0f01 	teqeq	r0, r1
 8000d5e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_ui2f>:
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e004      	b.n	8000d74 <__aeabi_i2f+0x8>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_i2f>:
 8000d6c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d70:	bf48      	it	mi
 8000d72:	4240      	negmi	r0, r0
 8000d74:	ea5f 0c00 	movs.w	ip, r0
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d80:	4601      	mov	r1, r0
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	e01c      	b.n	8000dc2 <__aeabi_l2f+0x2a>

08000d88 <__aeabi_ul2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e00a      	b.n	8000dac <__aeabi_l2f+0x14>
 8000d96:	bf00      	nop

08000d98 <__aeabi_l2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000da4:	d502      	bpl.n	8000dac <__aeabi_l2f+0x14>
 8000da6:	4240      	negs	r0, r0
 8000da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dac:	ea5f 0c01 	movs.w	ip, r1
 8000db0:	bf02      	ittt	eq
 8000db2:	4684      	moveq	ip, r0
 8000db4:	4601      	moveq	r1, r0
 8000db6:	2000      	moveq	r0, #0
 8000db8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000dbc:	bf08      	it	eq
 8000dbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dc2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dc6:	fabc f28c 	clz	r2, ip
 8000dca:	3a08      	subs	r2, #8
 8000dcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd0:	db10      	blt.n	8000df4 <__aeabi_l2f+0x5c>
 8000dd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000de4:	fa20 f202 	lsr.w	r2, r0, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f102 0220 	add.w	r2, r2, #32
 8000df8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfc:	f1c2 0220 	rsb	r2, r2, #32
 8000e00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e04:	fa21 f202 	lsr.w	r2, r1, r2
 8000e08:	eb43 0002 	adc.w	r0, r3, r2
 8000e0c:	bf08      	it	eq
 8000e0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_fmul>:
 8000e14:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e1c:	bf1e      	ittt	ne
 8000e1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e22:	ea92 0f0c 	teqne	r2, ip
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d06f      	beq.n	8000f0c <__aeabi_fmul+0xf8>
 8000e2c:	441a      	add	r2, r3
 8000e2e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e32:	0240      	lsls	r0, r0, #9
 8000e34:	bf18      	it	ne
 8000e36:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e3a:	d01e      	beq.n	8000e7a <__aeabi_fmul+0x66>
 8000e3c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e40:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e44:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e48:	fba0 3101 	umull	r3, r1, r0, r1
 8000e4c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e50:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e54:	bf3e      	ittt	cc
 8000e56:	0049      	lslcc	r1, r1, #1
 8000e58:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	ea40 0001 	orr.w	r0, r0, r1
 8000e62:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e66:	2afd      	cmp	r2, #253	@ 0xfd
 8000e68:	d81d      	bhi.n	8000ea6 <__aeabi_fmul+0x92>
 8000e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e72:	bf08      	it	eq
 8000e74:	f020 0001 	biceq.w	r0, r0, #1
 8000e78:	4770      	bx	lr
 8000e7a:	f090 0f00 	teq	r0, #0
 8000e7e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e82:	bf08      	it	eq
 8000e84:	0249      	lsleq	r1, r1, #9
 8000e86:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e8a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e8e:	3a7f      	subs	r2, #127	@ 0x7f
 8000e90:	bfc2      	ittt	gt
 8000e92:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e96:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e9a:	4770      	bxgt	lr
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	f04f 0300 	mov.w	r3, #0
 8000ea4:	3a01      	subs	r2, #1
 8000ea6:	dc5d      	bgt.n	8000f64 <__aeabi_fmul+0x150>
 8000ea8:	f112 0f19 	cmn.w	r2, #25
 8000eac:	bfdc      	itt	le
 8000eae:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000eb2:	4770      	bxle	lr
 8000eb4:	f1c2 0200 	rsb	r2, r2, #0
 8000eb8:	0041      	lsls	r1, r0, #1
 8000eba:	fa21 f102 	lsr.w	r1, r1, r2
 8000ebe:	f1c2 0220 	rsb	r2, r2, #32
 8000ec2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ec6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eca:	f140 0000 	adc.w	r0, r0, #0
 8000ece:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ed2:	bf08      	it	eq
 8000ed4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed8:	4770      	bx	lr
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fmul+0xce>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fmul+0xe6>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e78f      	b.n	8000e2c <__aeabi_fmul+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	bf18      	it	ne
 8000f16:	ea93 0f0c 	teqne	r3, ip
 8000f1a:	d00a      	beq.n	8000f32 <__aeabi_fmul+0x11e>
 8000f1c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f20:	bf18      	it	ne
 8000f22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	d1d8      	bne.n	8000eda <__aeabi_fmul+0xc6>
 8000f28:	ea80 0001 	eor.w	r0, r0, r1
 8000f2c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f30:	4770      	bx	lr
 8000f32:	f090 0f00 	teq	r0, #0
 8000f36:	bf17      	itett	ne
 8000f38:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f3c:	4608      	moveq	r0, r1
 8000f3e:	f091 0f00 	teqne	r1, #0
 8000f42:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f46:	d014      	beq.n	8000f72 <__aeabi_fmul+0x15e>
 8000f48:	ea92 0f0c 	teq	r2, ip
 8000f4c:	d101      	bne.n	8000f52 <__aeabi_fmul+0x13e>
 8000f4e:	0242      	lsls	r2, r0, #9
 8000f50:	d10f      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f52:	ea93 0f0c 	teq	r3, ip
 8000f56:	d103      	bne.n	8000f60 <__aeabi_fmul+0x14c>
 8000f58:	024b      	lsls	r3, r1, #9
 8000f5a:	bf18      	it	ne
 8000f5c:	4608      	movne	r0, r1
 8000f5e:	d108      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f60:	ea80 0001 	eor.w	r0, r0, r1
 8000f64:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f68:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f70:	4770      	bx	lr
 8000f72:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f76:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f7a:	4770      	bx	lr

08000f7c <__aeabi_fdiv>:
 8000f7c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f84:	bf1e      	ittt	ne
 8000f86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f8a:	ea92 0f0c 	teqne	r2, ip
 8000f8e:	ea93 0f0c 	teqne	r3, ip
 8000f92:	d069      	beq.n	8001068 <__aeabi_fdiv+0xec>
 8000f94:	eba2 0203 	sub.w	r2, r2, r3
 8000f98:	ea80 0c01 	eor.w	ip, r0, r1
 8000f9c:	0249      	lsls	r1, r1, #9
 8000f9e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fa2:	d037      	beq.n	8001014 <__aeabi_fdiv+0x98>
 8000fa4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000fa8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	bf38      	it	cc
 8000fb8:	005b      	lslcc	r3, r3, #1
 8000fba:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000fbe:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	bf24      	itt	cs
 8000fc6:	1a5b      	subcs	r3, r3, r1
 8000fc8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fcc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd0:	bf24      	itt	cs
 8000fd2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fd6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fda:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fde:	bf24      	itt	cs
 8000fe0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fe4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fe8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fec:	bf24      	itt	cs
 8000fee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ff2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	bf18      	it	ne
 8000ffa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ffe:	d1e0      	bne.n	8000fc2 <__aeabi_fdiv+0x46>
 8001000:	2afd      	cmp	r2, #253	@ 0xfd
 8001002:	f63f af50 	bhi.w	8000ea6 <__aeabi_fmul+0x92>
 8001006:	428b      	cmp	r3, r1
 8001008:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800100c:	bf08      	it	eq
 800100e:	f020 0001 	biceq.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001018:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800101c:	327f      	adds	r2, #127	@ 0x7f
 800101e:	bfc2      	ittt	gt
 8001020:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001024:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001028:	4770      	bxgt	lr
 800102a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	3a01      	subs	r2, #1
 8001034:	e737      	b.n	8000ea6 <__aeabi_fmul+0x92>
 8001036:	f092 0f00 	teq	r2, #0
 800103a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800103e:	bf02      	ittt	eq
 8001040:	0040      	lsleq	r0, r0, #1
 8001042:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001046:	3a01      	subeq	r2, #1
 8001048:	d0f9      	beq.n	800103e <__aeabi_fdiv+0xc2>
 800104a:	ea40 000c 	orr.w	r0, r0, ip
 800104e:	f093 0f00 	teq	r3, #0
 8001052:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001056:	bf02      	ittt	eq
 8001058:	0049      	lsleq	r1, r1, #1
 800105a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800105e:	3b01      	subeq	r3, #1
 8001060:	d0f9      	beq.n	8001056 <__aeabi_fdiv+0xda>
 8001062:	ea41 010c 	orr.w	r1, r1, ip
 8001066:	e795      	b.n	8000f94 <__aeabi_fdiv+0x18>
 8001068:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800106c:	ea92 0f0c 	teq	r2, ip
 8001070:	d108      	bne.n	8001084 <__aeabi_fdiv+0x108>
 8001072:	0242      	lsls	r2, r0, #9
 8001074:	f47f af7d 	bne.w	8000f72 <__aeabi_fmul+0x15e>
 8001078:	ea93 0f0c 	teq	r3, ip
 800107c:	f47f af70 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 8001080:	4608      	mov	r0, r1
 8001082:	e776      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001084:	ea93 0f0c 	teq	r3, ip
 8001088:	d104      	bne.n	8001094 <__aeabi_fdiv+0x118>
 800108a:	024b      	lsls	r3, r1, #9
 800108c:	f43f af4c 	beq.w	8000f28 <__aeabi_fmul+0x114>
 8001090:	4608      	mov	r0, r1
 8001092:	e76e      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001094:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001098:	bf18      	it	ne
 800109a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800109e:	d1ca      	bne.n	8001036 <__aeabi_fdiv+0xba>
 80010a0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010a4:	f47f af5c 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 80010a8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010ac:	f47f af3c 	bne.w	8000f28 <__aeabi_fmul+0x114>
 80010b0:	e75f      	b.n	8000f72 <__aeabi_fmul+0x15e>
 80010b2:	bf00      	nop

080010b4 <__gesf2>:
 80010b4:	f04f 3cff 	mov.w	ip, #4294967295
 80010b8:	e006      	b.n	80010c8 <__cmpsf2+0x4>
 80010ba:	bf00      	nop

080010bc <__lesf2>:
 80010bc:	f04f 0c01 	mov.w	ip, #1
 80010c0:	e002      	b.n	80010c8 <__cmpsf2+0x4>
 80010c2:	bf00      	nop

080010c4 <__cmpsf2>:
 80010c4:	f04f 0c01 	mov.w	ip, #1
 80010c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d8:	bf18      	it	ne
 80010da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010de:	d011      	beq.n	8001104 <__cmpsf2+0x40>
 80010e0:	b001      	add	sp, #4
 80010e2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010e6:	bf18      	it	ne
 80010e8:	ea90 0f01 	teqne	r0, r1
 80010ec:	bf58      	it	pl
 80010ee:	ebb2 0003 	subspl.w	r0, r2, r3
 80010f2:	bf88      	it	hi
 80010f4:	17c8      	asrhi	r0, r1, #31
 80010f6:	bf38      	it	cc
 80010f8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010fc:	bf18      	it	ne
 80010fe:	f040 0001 	orrne.w	r0, r0, #1
 8001102:	4770      	bx	lr
 8001104:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001108:	d102      	bne.n	8001110 <__cmpsf2+0x4c>
 800110a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800110e:	d105      	bne.n	800111c <__cmpsf2+0x58>
 8001110:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001114:	d1e4      	bne.n	80010e0 <__cmpsf2+0x1c>
 8001116:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800111a:	d0e1      	beq.n	80010e0 <__cmpsf2+0x1c>
 800111c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop

08001124 <__aeabi_cfrcmple>:
 8001124:	4684      	mov	ip, r0
 8001126:	4608      	mov	r0, r1
 8001128:	4661      	mov	r1, ip
 800112a:	e7ff      	b.n	800112c <__aeabi_cfcmpeq>

0800112c <__aeabi_cfcmpeq>:
 800112c:	b50f      	push	{r0, r1, r2, r3, lr}
 800112e:	f7ff ffc9 	bl	80010c4 <__cmpsf2>
 8001132:	2800      	cmp	r0, #0
 8001134:	bf48      	it	mi
 8001136:	f110 0f00 	cmnmi.w	r0, #0
 800113a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800113c <__aeabi_fcmpeq>:
 800113c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001140:	f7ff fff4 	bl	800112c <__aeabi_cfcmpeq>
 8001144:	bf0c      	ite	eq
 8001146:	2001      	moveq	r0, #1
 8001148:	2000      	movne	r0, #0
 800114a:	f85d fb08 	ldr.w	pc, [sp], #8
 800114e:	bf00      	nop

08001150 <__aeabi_fcmplt>:
 8001150:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001154:	f7ff ffea 	bl	800112c <__aeabi_cfcmpeq>
 8001158:	bf34      	ite	cc
 800115a:	2001      	movcc	r0, #1
 800115c:	2000      	movcs	r0, #0
 800115e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001162:	bf00      	nop

08001164 <__aeabi_fcmple>:
 8001164:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001168:	f7ff ffe0 	bl	800112c <__aeabi_cfcmpeq>
 800116c:	bf94      	ite	ls
 800116e:	2001      	movls	r0, #1
 8001170:	2000      	movhi	r0, #0
 8001172:	f85d fb08 	ldr.w	pc, [sp], #8
 8001176:	bf00      	nop

08001178 <__aeabi_fcmpge>:
 8001178:	f84d ed08 	str.w	lr, [sp, #-8]!
 800117c:	f7ff ffd2 	bl	8001124 <__aeabi_cfrcmple>
 8001180:	bf94      	ite	ls
 8001182:	2001      	movls	r0, #1
 8001184:	2000      	movhi	r0, #0
 8001186:	f85d fb08 	ldr.w	pc, [sp], #8
 800118a:	bf00      	nop

0800118c <__aeabi_fcmpgt>:
 800118c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001190:	f7ff ffc8 	bl	8001124 <__aeabi_cfrcmple>
 8001194:	bf34      	ite	cc
 8001196:	2001      	movcc	r0, #1
 8001198:	2000      	movcs	r0, #0
 800119a:	f85d fb08 	ldr.w	pc, [sp], #8
 800119e:	bf00      	nop

080011a0 <__aeabi_fcmpun>:
 80011a0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80011a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011ac:	d102      	bne.n	80011b4 <__aeabi_fcmpun+0x14>
 80011ae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80011b2:	d108      	bne.n	80011c6 <__aeabi_fcmpun+0x26>
 80011b4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011b8:	d102      	bne.n	80011c0 <__aeabi_fcmpun+0x20>
 80011ba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011be:	d102      	bne.n	80011c6 <__aeabi_fcmpun+0x26>
 80011c0:	f04f 0000 	mov.w	r0, #0
 80011c4:	4770      	bx	lr
 80011c6:	f04f 0001 	mov.w	r0, #1
 80011ca:	4770      	bx	lr

080011cc <__aeabi_f2iz>:
 80011cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011d4:	d30f      	bcc.n	80011f6 <__aeabi_f2iz+0x2a>
 80011d6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011de:	d90d      	bls.n	80011fc <__aeabi_f2iz+0x30>
 80011e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011e8:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80011ec:	fa23 f002 	lsr.w	r0, r3, r2
 80011f0:	bf18      	it	ne
 80011f2:	4240      	negne	r0, r0
 80011f4:	4770      	bx	lr
 80011f6:	f04f 0000 	mov.w	r0, #0
 80011fa:	4770      	bx	lr
 80011fc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001200:	d101      	bne.n	8001206 <__aeabi_f2iz+0x3a>
 8001202:	0242      	lsls	r2, r0, #9
 8001204:	d105      	bne.n	8001212 <__aeabi_f2iz+0x46>
 8001206:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800120a:	bf08      	it	eq
 800120c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001210:	4770      	bx	lr
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	4770      	bx	lr

08001218 <ibus_init>:


static void ibusDataReceive(uint8_t c);

void ibus_init(UART_HandleTypeDef *uartt)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
    for(int i = 0;i < IBUS_MAX_CHANNEL ; i++){
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	e008      	b.n	8001238 <ibus_init+0x20>
      ibusChannelData[i] = 1000;
 8001226:	4a0d      	ldr	r2, [pc, #52]	@ (800125c <ibus_init+0x44>)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800122e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0;i < IBUS_MAX_CHANNEL ; i++){
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	3301      	adds	r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b09      	cmp	r3, #9
 800123c:	ddf3      	ble.n	8001226 <ibus_init+0xe>
    }
	uart = uartt;
 800123e:	4a08      	ldr	r2, [pc, #32]	@ (8001260 <ibus_init+0x48>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6013      	str	r3, [r2, #0]
#ifdef DMA_MODE
    is_receive_cpl = 0;
	HAL_UART_Receive_DMA(uart,buffer_dma,2*IBUS_BUFFSIZE);
#else 
	HAL_UART_Receive_IT(uart, &rx_buff,1);
 8001244:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <ibus_init+0x48>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2201      	movs	r2, #1
 800124a:	4906      	ldr	r1, [pc, #24]	@ (8001264 <ibus_init+0x4c>)
 800124c:	4618      	mov	r0, r3
 800124e:	f008 fb62 	bl	8009916 <HAL_UART_Receive_IT>
#endif
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200000c0 	.word	0x200000c0
 8001260:	2000010c 	.word	0x2000010c
 8001264:	20000108 	.word	0x20000108

08001268 <ibus_uart_port>:

UART_HandleTypeDef *ibus_uart_port(){
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
   return uart;
 800126c:	4b02      	ldr	r3, [pc, #8]	@ (8001278 <ibus_uart_port+0x10>)
 800126e:	681b      	ldr	r3, [r3, #0]
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	2000010c 	.word	0x2000010c

0800127c <ibus_calback>:

   ibusFrameComplete();
#endif
}

void ibus_calback(){
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0

#ifdef DMA_MODE
	is_receive_cpl = 1;
#else 
	ibusDataReceive(rx_buff);
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <ibus_calback+0x20>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f000 f80d 	bl	80012a4 <ibusDataReceive>
    HAL_UART_Receive_IT(uart, &rx_buff,1);
 800128a:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <ibus_calback+0x24>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2201      	movs	r2, #1
 8001290:	4902      	ldr	r1, [pc, #8]	@ (800129c <ibus_calback+0x20>)
 8001292:	4618      	mov	r0, r3
 8001294:	f008 fb3f 	bl	8009916 <HAL_UART_Receive_IT>
#endif

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000108 	.word	0x20000108
 80012a0:	2000010c 	.word	0x2000010c

080012a4 <ibusDataReceive>:

static void ibusDataReceive(uint8_t c)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
    uint32_t ibusTime;
    static uint32_t ibusTimeLast;
    static uint8_t ibusFramePosition;

    ibusTime = micros();
 80012ae:	4b1b      	ldr	r3, [pc, #108]	@ (800131c <ibusDataReceive+0x78>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001320 <ibusDataReceive+0x7c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4413      	add	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]

    if ((ibusTime - ibusTimeLast) > 3000)
 80012be:	4b19      	ldr	r3, [pc, #100]	@ (8001324 <ibusDataReceive+0x80>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d902      	bls.n	80012d4 <ibusDataReceive+0x30>
        ibusFramePosition = 0;
 80012ce:	4b16      	ldr	r3, [pc, #88]	@ (8001328 <ibusDataReceive+0x84>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]

    ibusTimeLast = ibusTime;
 80012d4:	4a13      	ldr	r2, [pc, #76]	@ (8001324 <ibusDataReceive+0x80>)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6013      	str	r3, [r2, #0]

    if (ibusFramePosition == 0 && c != IBUS_SYNCBYTE)
 80012da:	4b13      	ldr	r3, [pc, #76]	@ (8001328 <ibusDataReceive+0x84>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d102      	bne.n	80012e8 <ibusDataReceive+0x44>
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	2b20      	cmp	r3, #32
 80012e6:	d114      	bne.n	8001312 <ibusDataReceive+0x6e>
        return;

    ibus[ibusFramePosition] = (uint8_t)c;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <ibusDataReceive+0x84>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	4a0f      	ldr	r2, [pc, #60]	@ (800132c <ibusDataReceive+0x88>)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	5453      	strb	r3, [r2, r1]

    if (ibusFramePosition == IBUS_BUFFSIZE - 1) {
 80012f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001328 <ibusDataReceive+0x84>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b1f      	cmp	r3, #31
 80012fa:	d103      	bne.n	8001304 <ibusDataReceive+0x60>
        ibusFrameDone = TRUE;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <ibusDataReceive+0x8c>)
 80012fe:	2201      	movs	r2, #1
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	e007      	b.n	8001314 <ibusDataReceive+0x70>
    } else {
        ibusFramePosition++;
 8001304:	4b08      	ldr	r3, [pc, #32]	@ (8001328 <ibusDataReceive+0x84>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	3301      	adds	r3, #1
 800130a:	b2da      	uxtb	r2, r3
 800130c:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <ibusDataReceive+0x84>)
 800130e:	701a      	strb	r2, [r3, #0]
 8001310:	e000      	b.n	8001314 <ibusDataReceive+0x70>
        return;
 8001312:	bf00      	nop
    }
}
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	2000132c 	.word	0x2000132c
 8001320:	20001330 	.word	0x20001330
 8001324:	20000110 	.word	0x20000110
 8001328:	20000114 	.word	0x20000114
 800132c:	200000e8 	.word	0x200000e8
 8001330:	200000bc 	.word	0x200000bc

08001334 <ibusFrameComplete>:

int ibusFrameComplete(void)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
	
    uint8_t i;
    uint16_t chksum, rxsum;

    if (ibusFrameDone) {
 800133a:	4b50      	ldr	r3, [pc, #320]	@ (800147c <ibusFrameComplete+0x148>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 8096 	beq.w	8001470 <ibusFrameComplete+0x13c>
        ibusFrameDone = FALSE;
 8001344:	4b4d      	ldr	r3, [pc, #308]	@ (800147c <ibusFrameComplete+0x148>)
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]

        chksum = 0xFFFF;
 800134a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800134e:	81bb      	strh	r3, [r7, #12]

        for (i = 0; i < 30; i++)
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	e009      	b.n	800136a <ibusFrameComplete+0x36>
            chksum -= ibus[i];
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	4a49      	ldr	r2, [pc, #292]	@ (8001480 <ibusFrameComplete+0x14c>)
 800135a:	5cd3      	ldrb	r3, [r2, r3]
 800135c:	461a      	mov	r2, r3
 800135e:	89bb      	ldrh	r3, [r7, #12]
 8001360:	1a9b      	subs	r3, r3, r2
 8001362:	81bb      	strh	r3, [r7, #12]
        for (i = 0; i < 30; i++)
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	3301      	adds	r3, #1
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	2b1d      	cmp	r3, #29
 800136e:	d9f2      	bls.n	8001356 <ibusFrameComplete+0x22>

        rxsum = ibus[30] + (ibus[31] << 8);
 8001370:	4b43      	ldr	r3, [pc, #268]	@ (8001480 <ibusFrameComplete+0x14c>)
 8001372:	7f9b      	ldrb	r3, [r3, #30]
 8001374:	461a      	mov	r2, r3
 8001376:	4b42      	ldr	r3, [pc, #264]	@ (8001480 <ibusFrameComplete+0x14c>)
 8001378:	7fdb      	ldrb	r3, [r3, #31]
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	b29b      	uxth	r3, r3
 800137e:	4413      	add	r3, r2
 8001380:	80fb      	strh	r3, [r7, #6]

        if (chksum == rxsum) {
 8001382:	89ba      	ldrh	r2, [r7, #12]
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	429a      	cmp	r2, r3
 8001388:	d172      	bne.n	8001470 <ibusFrameComplete+0x13c>
            ibusChannelData[0] = (ibus[ 3] << 8) + ibus[ 2];
 800138a:	4b3d      	ldr	r3, [pc, #244]	@ (8001480 <ibusFrameComplete+0x14c>)
 800138c:	78db      	ldrb	r3, [r3, #3]
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	4a3b      	ldr	r2, [pc, #236]	@ (8001480 <ibusFrameComplete+0x14c>)
 8001392:	7892      	ldrb	r2, [r2, #2]
 8001394:	4413      	add	r3, r2
 8001396:	461a      	mov	r2, r3
 8001398:	4b3a      	ldr	r3, [pc, #232]	@ (8001484 <ibusFrameComplete+0x150>)
 800139a:	601a      	str	r2, [r3, #0]
            ibusChannelData[1] = (ibus[ 5] << 8) + ibus[ 4];
 800139c:	4b38      	ldr	r3, [pc, #224]	@ (8001480 <ibusFrameComplete+0x14c>)
 800139e:	795b      	ldrb	r3, [r3, #5]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	4a37      	ldr	r2, [pc, #220]	@ (8001480 <ibusFrameComplete+0x14c>)
 80013a4:	7912      	ldrb	r2, [r2, #4]
 80013a6:	4413      	add	r3, r2
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b36      	ldr	r3, [pc, #216]	@ (8001484 <ibusFrameComplete+0x150>)
 80013ac:	605a      	str	r2, [r3, #4]
            ibusChannelData[2] = (ibus[ 7] << 8) + ibus[ 6];
 80013ae:	4b34      	ldr	r3, [pc, #208]	@ (8001480 <ibusFrameComplete+0x14c>)
 80013b0:	79db      	ldrb	r3, [r3, #7]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	4a32      	ldr	r2, [pc, #200]	@ (8001480 <ibusFrameComplete+0x14c>)
 80013b6:	7992      	ldrb	r2, [r2, #6]
 80013b8:	4413      	add	r3, r2
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b31      	ldr	r3, [pc, #196]	@ (8001484 <ibusFrameComplete+0x150>)
 80013be:	609a      	str	r2, [r3, #8]
            ibusChannelData[3] = (ibus[ 9] << 8) + ibus[ 8];
 80013c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001480 <ibusFrameComplete+0x14c>)
 80013c2:	7a5b      	ldrb	r3, [r3, #9]
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	4a2e      	ldr	r2, [pc, #184]	@ (8001480 <ibusFrameComplete+0x14c>)
 80013c8:	7a12      	ldrb	r2, [r2, #8]
 80013ca:	4413      	add	r3, r2
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001484 <ibusFrameComplete+0x150>)
 80013d0:	60da      	str	r2, [r3, #12]
            ibusChannelData[4] = (ibus[11] << 8) + ibus[10];
 80013d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001480 <ibusFrameComplete+0x14c>)
 80013d4:	7adb      	ldrb	r3, [r3, #11]
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	4a29      	ldr	r2, [pc, #164]	@ (8001480 <ibusFrameComplete+0x14c>)
 80013da:	7a92      	ldrb	r2, [r2, #10]
 80013dc:	4413      	add	r3, r2
 80013de:	461a      	mov	r2, r3
 80013e0:	4b28      	ldr	r3, [pc, #160]	@ (8001484 <ibusFrameComplete+0x150>)
 80013e2:	611a      	str	r2, [r3, #16]
            ibusChannelData[5] = (ibus[13] << 8) + ibus[12];
 80013e4:	4b26      	ldr	r3, [pc, #152]	@ (8001480 <ibusFrameComplete+0x14c>)
 80013e6:	7b5b      	ldrb	r3, [r3, #13]
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	4a25      	ldr	r2, [pc, #148]	@ (8001480 <ibusFrameComplete+0x14c>)
 80013ec:	7b12      	ldrb	r2, [r2, #12]
 80013ee:	4413      	add	r3, r2
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b24      	ldr	r3, [pc, #144]	@ (8001484 <ibusFrameComplete+0x150>)
 80013f4:	615a      	str	r2, [r3, #20]
            ibusChannelData[6] = (ibus[15] << 8) + ibus[14];
 80013f6:	4b22      	ldr	r3, [pc, #136]	@ (8001480 <ibusFrameComplete+0x14c>)
 80013f8:	7bdb      	ldrb	r3, [r3, #15]
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	4a20      	ldr	r2, [pc, #128]	@ (8001480 <ibusFrameComplete+0x14c>)
 80013fe:	7b92      	ldrb	r2, [r2, #14]
 8001400:	4413      	add	r3, r2
 8001402:	461a      	mov	r2, r3
 8001404:	4b1f      	ldr	r3, [pc, #124]	@ (8001484 <ibusFrameComplete+0x150>)
 8001406:	619a      	str	r2, [r3, #24]
            ibusChannelData[7] = (ibus[17] << 8) + ibus[16];
 8001408:	4b1d      	ldr	r3, [pc, #116]	@ (8001480 <ibusFrameComplete+0x14c>)
 800140a:	7c5b      	ldrb	r3, [r3, #17]
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	4a1c      	ldr	r2, [pc, #112]	@ (8001480 <ibusFrameComplete+0x14c>)
 8001410:	7c12      	ldrb	r2, [r2, #16]
 8001412:	4413      	add	r3, r2
 8001414:	461a      	mov	r2, r3
 8001416:	4b1b      	ldr	r3, [pc, #108]	@ (8001484 <ibusFrameComplete+0x150>)
 8001418:	61da      	str	r2, [r3, #28]
			ibusChannelData[8] = (ibus[19] << 8) + ibus[18];
 800141a:	4b19      	ldr	r3, [pc, #100]	@ (8001480 <ibusFrameComplete+0x14c>)
 800141c:	7cdb      	ldrb	r3, [r3, #19]
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	4a17      	ldr	r2, [pc, #92]	@ (8001480 <ibusFrameComplete+0x14c>)
 8001422:	7c92      	ldrb	r2, [r2, #18]
 8001424:	4413      	add	r3, r2
 8001426:	461a      	mov	r2, r3
 8001428:	4b16      	ldr	r3, [pc, #88]	@ (8001484 <ibusFrameComplete+0x150>)
 800142a:	621a      	str	r2, [r3, #32]
            ibusChannelData[9] = (ibus[21] << 8) + ibus[20];
 800142c:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <ibusFrameComplete+0x14c>)
 800142e:	7d5b      	ldrb	r3, [r3, #21]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	4a13      	ldr	r2, [pc, #76]	@ (8001480 <ibusFrameComplete+0x14c>)
 8001434:	7d12      	ldrb	r2, [r2, #20]
 8001436:	4413      	add	r3, r2
 8001438:	461a      	mov	r2, r3
 800143a:	4b12      	ldr	r3, [pc, #72]	@ (8001484 <ibusFrameComplete+0x150>)
 800143c:	625a      	str	r2, [r3, #36]	@ 0x24
			
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	e010      	b.n	8001466 <ibusFrameComplete+0x132>
			    if(ibusChannelData[i] > 2100){
 8001444:	4a0f      	ldr	r2, [pc, #60]	@ (8001484 <ibusFrameComplete+0x150>)
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144c:	f640 0234 	movw	r2, #2100	@ 0x834
 8001450:	4293      	cmp	r3, r2
 8001452:	d905      	bls.n	8001460 <ibusFrameComplete+0x12c>
				    ibusChannelData[i] = 1000;
 8001454:	4a0b      	ldr	r2, [pc, #44]	@ (8001484 <ibusFrameComplete+0x150>)
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800145c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	3301      	adds	r3, #1
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	2b09      	cmp	r3, #9
 800146a:	ddeb      	ble.n	8001444 <ibusFrameComplete+0x110>
				}
			}
            return TRUE;
 800146c:	2301      	movs	r3, #1
 800146e:	e000      	b.n	8001472 <ibusFrameComplete+0x13e>
        }
    }
    return FALSE;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	200000bc 	.word	0x200000bc
 8001480:	200000e8 	.word	0x200000e8
 8001484:	200000c0 	.word	0x200000c0

08001488 <mpu6050Connection>:

/* Check mpu6050 connection
 * return 1 -> not connected
 * return 0 -> connected
 */ 
int8_t mpu6050Connection(){
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
    isConnected = HAL_I2C_IsDeviceReady(i2c,IMU_DEV_ADDRES, 3, 5);
 800148c:	4b07      	ldr	r3, [pc, #28]	@ (80014ac <mpu6050Connection+0x24>)
 800148e:	6818      	ldr	r0, [r3, #0]
 8001490:	2305      	movs	r3, #5
 8001492:	2203      	movs	r2, #3
 8001494:	21d0      	movs	r1, #208	@ 0xd0
 8001496:	f005 f879 	bl	800658c <HAL_I2C_IsDeviceReady>
 800149a:	4603      	mov	r3, r0
 800149c:	b25a      	sxtb	r2, r3
 800149e:	4b04      	ldr	r3, [pc, #16]	@ (80014b0 <mpu6050Connection+0x28>)
 80014a0:	701a      	strb	r2, [r3, #0]
    return isConnected;
 80014a2:	4b03      	ldr	r3, [pc, #12]	@ (80014b0 <mpu6050Connection+0x28>)
 80014a4:	f993 3000 	ldrsb.w	r3, [r3]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000118 	.word	0x20000118
 80014b0:	2000011c 	.word	0x2000011c

080014b4 <mpu6050_init>:
}

/* configuration mpu6050*/


int8_t mpu6050_init(I2C_HandleTypeDef *hi2c){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af02      	add	r7, sp, #8
 80014ba:	6078      	str	r0, [r7, #4]
	data[1] = (uint8_t)(ACC_2G<<3);
    SPI_write(&data,2);
	return 0;
#endif
#ifdef I2C
  i2c = hi2c;	
 80014bc:	4a25      	ldr	r2, [pc, #148]	@ (8001554 <mpu6050_init+0xa0>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6013      	str	r3, [r2, #0]
	int8_t k = mpu6050Connection();
 80014c2:	f7ff ffe1 	bl	8001488 <mpu6050Connection>
 80014c6:	4603      	mov	r3, r0
 80014c8:	73fb      	strb	r3, [r7, #15]
	if(!k){
 80014ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d13a      	bne.n	8001548 <mpu6050_init+0x94>
		uint8_t buffer[6];	
		buffer[0] = MPU_RA_PWR_MGMT_1; 
 80014d2:	236b      	movs	r3, #107	@ 0x6b
 80014d4:	723b      	strb	r3, [r7, #8]
		buffer[1] = RESET_REG;
 80014d6:	2300      	movs	r3, #0
 80014d8:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 80014da:	4b1e      	ldr	r3, [pc, #120]	@ (8001554 <mpu6050_init+0xa0>)
 80014dc:	6818      	ldr	r0, [r3, #0]
 80014de:	f107 0208 	add.w	r2, r7, #8
 80014e2:	2301      	movs	r3, #1
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2302      	movs	r3, #2
 80014e8:	21d0      	movs	r1, #208	@ 0xd0
 80014ea:	f004 f983 	bl	80057f4 <HAL_I2C_Master_Transmit>
		
		//buffer[0] = CONFIGURATION;
		//buffer[1] = (HZ_5<<0);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);

		buffer[0] = GYRO_REG_CONFIG;
 80014ee:	231b      	movs	r3, #27
 80014f0:	723b      	strb	r3, [r7, #8]
		buffer[1] = (GYRO_1000dps<<3);
 80014f2:	2310      	movs	r3, #16
 80014f4:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 80014f6:	4b17      	ldr	r3, [pc, #92]	@ (8001554 <mpu6050_init+0xa0>)
 80014f8:	6818      	ldr	r0, [r3, #0]
 80014fa:	f107 0208 	add.w	r2, r7, #8
 80014fe:	2301      	movs	r3, #1
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2302      	movs	r3, #2
 8001504:	21d0      	movs	r1, #208	@ 0xd0
 8001506:	f004 f975 	bl	80057f4 <HAL_I2C_Master_Transmit>

		buffer[0] = ACC_REG_CONFIG;
 800150a:	231c      	movs	r3, #28
 800150c:	723b      	strb	r3, [r7, #8]
		buffer[1] = (ACC_16G<<3);
 800150e:	2318      	movs	r3, #24
 8001510:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8001512:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <mpu6050_init+0xa0>)
 8001514:	6818      	ldr	r0, [r3, #0]
 8001516:	f107 0208 	add.w	r2, r7, #8
 800151a:	2301      	movs	r3, #1
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	2302      	movs	r3, #2
 8001520:	21d0      	movs	r1, #208	@ 0xd0
 8001522:	f004 f967 	bl	80057f4 <HAL_I2C_Master_Transmit>
		//buffer[1] &= ~(1<<5);
		//buffer[1] |= (1<<5);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
		
		// set aux i2c pass through mode 
		buffer[0] = INT_PIN_CFG;
 8001526:	2337      	movs	r3, #55	@ 0x37
 8001528:	723b      	strb	r3, [r7, #8]
		buffer[1] |= (1<<1);
 800152a:	7a7b      	ldrb	r3, [r7, #9]
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	b2db      	uxtb	r3, r3
 8001532:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8001534:	4b07      	ldr	r3, [pc, #28]	@ (8001554 <mpu6050_init+0xa0>)
 8001536:	6818      	ldr	r0, [r3, #0]
 8001538:	f107 0208 	add.w	r2, r7, #8
 800153c:	2301      	movs	r3, #1
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2302      	movs	r3, #2
 8001542:	21d0      	movs	r1, #208	@ 0xd0
 8001544:	f004 f956 	bl	80057f4 <HAL_I2C_Master_Transmit>

	}
	return k;
 8001548:	f997 300f 	ldrsb.w	r3, [r7, #15]
#endif

}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000118 	.word	0x20000118

08001558 <mpu6050_gyro_get_raw>:
/* Gyro get raw data (Lbs/s)
 * x - rate
 * y - rate
 * z - rate   
 */
void mpu6050_gyro_get_raw(axis3_t *raw){
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af02      	add	r7, sp, #8
 800155e:	6078      	str	r0, [r7, #4]
	  uint8_t buffe[6];
	  buffe[0] = (uint8_t)GYRO_DATA_REG;
 8001560:	2343      	movs	r3, #67	@ 0x43
 8001562:	723b      	strb	r3, [r7, #8]

#ifdef I2C
	  HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 8001564:	4b19      	ldr	r3, [pc, #100]	@ (80015cc <mpu6050_gyro_get_raw+0x74>)
 8001566:	6818      	ldr	r0, [r3, #0]
 8001568:	f107 0208 	add.w	r2, r7, #8
 800156c:	2301      	movs	r3, #1
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2301      	movs	r3, #1
 8001572:	21d0      	movs	r1, #208	@ 0xd0
 8001574:	f004 f93e 	bl	80057f4 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 8001578:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <mpu6050_gyro_get_raw+0x74>)
 800157a:	6818      	ldr	r0, [r3, #0]
 800157c:	f107 0208 	add.w	r2, r7, #8
 8001580:	2301      	movs	r3, #1
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2306      	movs	r3, #6
 8001586:	21d0      	movs	r1, #208	@ 0xd0
 8001588:	f004 fa32 	bl	80059f0 <HAL_I2C_Master_Receive>
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_RESET);
	  HAL_SPI_Transmit(&SPI_PORT,&buffe[0],1,1);
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
#endif
	  raw->x = (int16_t)buffe[0]<<8|buffe[1];
 800158c:	7a3b      	ldrb	r3, [r7, #8]
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	b21a      	sxth	r2, r3
 8001592:	7a7b      	ldrb	r3, [r7, #9]
 8001594:	b21b      	sxth	r3, r3
 8001596:	4313      	orrs	r3, r2
 8001598:	b21a      	sxth	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	801a      	strh	r2, [r3, #0]
	  raw->y = (int16_t)buffe[2]<<8|buffe[3];
 800159e:	7abb      	ldrb	r3, [r7, #10]
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	7afb      	ldrb	r3, [r7, #11]
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	4313      	orrs	r3, r2
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	805a      	strh	r2, [r3, #2]
	  raw->z = (int16_t)buffe[4]<<8|buffe[5];
 80015b0:	7b3b      	ldrb	r3, [r7, #12]
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	7b7b      	ldrb	r3, [r7, #13]
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b21a      	sxth	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	809a      	strh	r2, [r3, #4]
	}
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000118 	.word	0x20000118

080015d0 <mpu6050_acc_get_raw>:
/* Acc get raw data
	*  x - axis
	*  y - axis
	*  z - axis   
	*/
void mpu6050_acc_get_raw(axis3_t *k){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	6078      	str	r0, [r7, #4]
	axis3_t p_val =*k;
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	6810      	ldr	r0, [r2, #0]
 80015e0:	6018      	str	r0, [r3, #0]
 80015e2:	8892      	ldrh	r2, [r2, #4]
 80015e4:	809a      	strh	r2, [r3, #4]
	uint8_t buffe[6];
	buffe[0] = (uint8_t)ACC_DATA_REG;
 80015e6:	233b      	movs	r3, #59	@ 0x3b
 80015e8:	723b      	strb	r3, [r7, #8]
#ifdef I2C
	HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 80015ea:	4b19      	ldr	r3, [pc, #100]	@ (8001650 <mpu6050_acc_get_raw+0x80>)
 80015ec:	6818      	ldr	r0, [r3, #0]
 80015ee:	f107 0208 	add.w	r2, r7, #8
 80015f2:	2301      	movs	r3, #1
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2301      	movs	r3, #1
 80015f8:	21d0      	movs	r1, #208	@ 0xd0
 80015fa:	f004 f8fb 	bl	80057f4 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 80015fe:	4b14      	ldr	r3, [pc, #80]	@ (8001650 <mpu6050_acc_get_raw+0x80>)
 8001600:	6818      	ldr	r0, [r3, #0]
 8001602:	f107 0208 	add.w	r2, r7, #8
 8001606:	2301      	movs	r3, #1
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	2306      	movs	r3, #6
 800160c:	21d0      	movs	r1, #208	@ 0xd0
 800160e:	f004 f9ef 	bl	80059f0 <HAL_I2C_Master_Receive>
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
*/
      SPI_read(buffe[0],buffe,14);
#endif
	  k->x = (int16_t)buffe[0]<<8|buffe[1];
 8001612:	7a3b      	ldrb	r3, [r7, #8]
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	b21a      	sxth	r2, r3
 8001618:	7a7b      	ldrb	r3, [r7, #9]
 800161a:	b21b      	sxth	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	b21a      	sxth	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	801a      	strh	r2, [r3, #0]
	  k->y = (int16_t)buffe[2]<<8|buffe[3];
 8001624:	7abb      	ldrb	r3, [r7, #10]
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	b21a      	sxth	r2, r3
 800162a:	7afb      	ldrb	r3, [r7, #11]
 800162c:	b21b      	sxth	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	b21a      	sxth	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	805a      	strh	r2, [r3, #2]
	  k->z = (int16_t)buffe[4]<<8|buffe[5];
 8001636:	7b3b      	ldrb	r3, [r7, #12]
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	b21a      	sxth	r2, r3
 800163c:	7b7b      	ldrb	r3, [r7, #13]
 800163e:	b21b      	sxth	r3, r3
 8001640:	4313      	orrs	r3, r2
 8001642:	b21a      	sxth	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	809a      	strh	r2, [r3, #4]
}
 8001648:	bf00      	nop
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000118 	.word	0x20000118

08001654 <qmc5883_init>:
#include "../Lib/axis.h"

const uint8_t qmc_addres = (0x0d<<1);
static I2C_HandleTypeDef *qmc_i2cport;

void qmc5883_init(I2C_HandleTypeDef *i2cport){
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af02      	add	r7, sp, #8
 800165a:	6078      	str	r0, [r7, #4]
	qmc_i2cport = i2cport;
 800165c:	4a12      	ldr	r2, [pc, #72]	@ (80016a8 <qmc5883_init+0x54>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6013      	str	r3, [r2, #0]
    uint8_t buf[2];
    buf[0]=0x0b;
 8001662:	230b      	movs	r3, #11
 8001664:	733b      	strb	r3, [r7, #12]
    buf[1]=0X01;
 8001666:	2301      	movs	r3, #1
 8001668:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 800166a:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <qmc5883_init+0x54>)
 800166c:	6818      	ldr	r0, [r3, #0]
 800166e:	231a      	movs	r3, #26
 8001670:	4619      	mov	r1, r3
 8001672:	f107 020c 	add.w	r2, r7, #12
 8001676:	2301      	movs	r3, #1
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	2302      	movs	r3, #2
 800167c:	f004 f8ba 	bl	80057f4 <HAL_I2C_Master_Transmit>
    buf[0]=0x09;
 8001680:	2309      	movs	r3, #9
 8001682:	733b      	strb	r3, [r7, #12]
    buf[1]=0X1D;
 8001684:	231d      	movs	r3, #29
 8001686:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 8001688:	4b07      	ldr	r3, [pc, #28]	@ (80016a8 <qmc5883_init+0x54>)
 800168a:	6818      	ldr	r0, [r3, #0]
 800168c:	231a      	movs	r3, #26
 800168e:	4619      	mov	r1, r3
 8001690:	f107 020c 	add.w	r2, r7, #12
 8001694:	2301      	movs	r3, #1
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	2302      	movs	r3, #2
 800169a:	f004 f8ab 	bl	80057f4 <HAL_I2C_Master_Transmit>
}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000120 	.word	0x20000120

080016ac <qmc_get_raw>:

void qmc_get_raw(axis3_t *axis){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af04      	add	r7, sp, #16
 80016b2:	6078      	str	r0, [r7, #4]
	  uint8_t buf[6]={0};
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	2300      	movs	r3, #0
 80016ba:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Mem_Read(qmc_i2cport,qmc_addres,0x00,1,buf,6,1);
 80016bc:	4b16      	ldr	r3, [pc, #88]	@ (8001718 <qmc_get_raw+0x6c>)
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	231a      	movs	r3, #26
 80016c2:	4619      	mov	r1, r3
 80016c4:	2301      	movs	r3, #1
 80016c6:	9302      	str	r3, [sp, #8]
 80016c8:	2306      	movs	r3, #6
 80016ca:	9301      	str	r3, [sp, #4]
 80016cc:	f107 0308 	add.w	r3, r7, #8
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	2301      	movs	r3, #1
 80016d4:	2200      	movs	r2, #0
 80016d6:	f004 fcf1 	bl	80060bc <HAL_I2C_Mem_Read>
	  axis->x=((int16_t)buf[1]<<8|buf[0]) ;
 80016da:	7a7b      	ldrb	r3, [r7, #9]
 80016dc:	021b      	lsls	r3, r3, #8
 80016de:	b21a      	sxth	r2, r3
 80016e0:	7a3b      	ldrb	r3, [r7, #8]
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	4313      	orrs	r3, r2
 80016e6:	b21a      	sxth	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	801a      	strh	r2, [r3, #0]
	  axis->y=((int16_t)buf[3]<<8|buf[2]);
 80016ec:	7afb      	ldrb	r3, [r7, #11]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	7abb      	ldrb	r3, [r7, #10]
 80016f4:	b21b      	sxth	r3, r3
 80016f6:	4313      	orrs	r3, r2
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	805a      	strh	r2, [r3, #2]
	  axis->z=((int16_t)buf[5]<<8|buf[4]);
 80016fe:	7b7b      	ldrb	r3, [r7, #13]
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	b21a      	sxth	r2, r3
 8001704:	7b3b      	ldrb	r3, [r7, #12]
 8001706:	b21b      	sxth	r3, r3
 8001708:	4313      	orrs	r3, r2
 800170a:	b21a      	sxth	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	809a      	strh	r2, [r3, #4]
}
 8001710:	bf00      	nop
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000120 	.word	0x20000120

0800171c <black_box_init>:
static int Float_to_string(float f, uint8_t places, char strOut[]);

/*
 * init black box
 */
int black_box_init(){
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	isSdcard_write = 0;
 8001720:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <black_box_init+0x3c>)
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
    isSdcard_valid = 0;
 8001726:	4b0d      	ldr	r3, [pc, #52]	@ (800175c <black_box_init+0x40>)
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
    mount_state = f_mount(&_fs,"", 1);
 800172c:	2201      	movs	r2, #1
 800172e:	490c      	ldr	r1, [pc, #48]	@ (8001760 <black_box_init+0x44>)
 8001730:	480c      	ldr	r0, [pc, #48]	@ (8001764 <black_box_init+0x48>)
 8001732:	f00c f8a7 	bl	800d884 <f_mount>
 8001736:	4603      	mov	r3, r0
 8001738:	461a      	mov	r2, r3
 800173a:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <black_box_init+0x4c>)
 800173c:	701a      	strb	r2, [r3, #0]
	if( mount_state != FR_OK ){
 800173e:	4b0a      	ldr	r3, [pc, #40]	@ (8001768 <black_box_init+0x4c>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d005      	beq.n	8001752 <black_box_init+0x36>
        isSdcard_valid = 1;
 8001746:	4b05      	ldr	r3, [pc, #20]	@ (800175c <black_box_init+0x40>)
 8001748:	2201      	movs	r2, #1
 800174a:	701a      	strb	r2, [r3, #0]
        return -1;
 800174c:	f04f 33ff 	mov.w	r3, #4294967295
 8001750:	e000      	b.n	8001754 <black_box_init+0x38>
    }

    return 0;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20001159 	.word	0x20001159
 800175c:	20001158 	.word	0x20001158
 8001760:	08012374 	.word	0x08012374
 8001764:	20000124 	.word	0x20000124
 8001768:	2000115a 	.word	0x2000115a

0800176c <black_box_create_file>:

int black_box_create_file(black_box_file_t *fs,char *file_name){
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
   if(isSdcard_valid){
 8001776:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <black_box_create_file+0x60>)
 8001778:	f993 3000 	ldrsb.w	r3, [r3]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <black_box_create_file+0x18>
       return 0;
 8001780:	2300      	movs	r3, #0
 8001782:	e01e      	b.n	80017c2 <black_box_create_file+0x56>
   } 
    fs->buffer_index = 0;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800178a:	2200      	movs	r2, #0
 800178c:	861a      	strh	r2, [r3, #48]	@ 0x30
    uint8_t open = f_open(&fs->file,file_name, FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3304      	adds	r3, #4
 8001792:	220b      	movs	r2, #11
 8001794:	6839      	ldr	r1, [r7, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f00c f8e0 	bl	800d95c <f_open>
 800179c:	4603      	mov	r3, r0
 800179e:	73fb      	strb	r3, [r7, #15]
    f_lseek(&fs->file,fs->file.fsize);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	1d1a      	adds	r2, r3, #4
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	4619      	mov	r1, r3
 80017ae:	4610      	mov	r0, r2
 80017b0:	f00c ff80 	bl	800e6b4 <f_lseek>
    if(open == FR_OK){
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <black_box_create_file+0x52>
        return 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	e001      	b.n	80017c2 <black_box_create_file+0x56>
    }
   
   return -1;
 80017be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20001158 	.word	0x20001158

080017d0 <black_box_pack_int>:
/*
 *  Description: Convert a integer number to string and write to buffer
 *  Input (int type [-2147483647 2147483647] )
 */

void black_box_pack_int(black_box_file_t *fs,int val){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08c      	sub	sp, #48	@ 0x30
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
    if(isSdcard_valid){
 80017da:	4b59      	ldr	r3, [pc, #356]	@ (8001940 <black_box_pack_int+0x170>)
 80017dc:	f993 3000 	ldrsb.w	r3, [r3]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f040 80a9 	bne.w	8001938 <black_box_pack_int+0x168>
        return;
	}
	fs->indexx=0;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
	int len_str;
	int val_ = val;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	617b      	str	r3, [r7, #20]
	char str_[11];
	memset(str_,0,11);
 80017f0:	f107 0308 	add.w	r3, r7, #8
 80017f4:	220b      	movs	r2, #11
 80017f6:	2100      	movs	r1, #0
 80017f8:	4618      	mov	r0, r3
 80017fa:	f010 fbd9 	bl	8011fb0 <memset>
	if(val != 0){
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d02a      	beq.n	800185a <black_box_pack_int+0x8a>
		val = abs(val);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	bfb8      	it	lt
 800180a:	425b      	neglt	r3, r3
 800180c:	603b      	str	r3, [r7, #0]
		len_str = intToStr(fs,val,str_,0);
 800180e:	f107 0208 	add.w	r2, r7, #8
 8001812:	2300      	movs	r3, #0
 8001814:	6839      	ldr	r1, [r7, #0]
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f956 	bl	8001ac8 <intToStr>
 800181c:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if(val_ < 0){
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	2b00      	cmp	r3, #0
 8001822:	da33      	bge.n	800188c <black_box_pack_int+0xbc>
			for(int i = len_str; i > 0; i--){
 8001824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001826:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001828:	e00e      	b.n	8001848 <black_box_pack_int+0x78>
				str_[i] = str_[i - 1];
 800182a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800182c:	3b01      	subs	r3, #1
 800182e:	3330      	adds	r3, #48	@ 0x30
 8001830:	443b      	add	r3, r7
 8001832:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 8001836:	f107 0208 	add.w	r2, r7, #8
 800183a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800183c:	4413      	add	r3, r2
 800183e:	460a      	mov	r2, r1
 8001840:	701a      	strb	r2, [r3, #0]
			for(int i = len_str; i > 0; i--){
 8001842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001844:	3b01      	subs	r3, #1
 8001846:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800184a:	2b00      	cmp	r3, #0
 800184c:	dced      	bgt.n	800182a <black_box_pack_int+0x5a>
			}
			len_str ++;
 800184e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001850:	3301      	adds	r3, #1
 8001852:	62fb      	str	r3, [r7, #44]	@ 0x2c
			str_[0] = '-';
 8001854:	232d      	movs	r3, #45	@ 0x2d
 8001856:	723b      	strb	r3, [r7, #8]
 8001858:	e018      	b.n	800188c <black_box_pack_int+0xbc>
		}
	}
	else{
	   fs->buffer[fs->buffer_index] ='0';
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001860:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001862:	461a      	mov	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4413      	add	r3, r2
 8001868:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800186c:	3312      	adds	r3, #18
 800186e:	2230      	movs	r2, #48	@ 0x30
 8001870:	701a      	strb	r2, [r3, #0]
	   len_str = 1;
 8001872:	2301      	movs	r3, #1
 8001874:	62fb      	str	r3, [r7, #44]	@ 0x2c
	   fs->buffer_index ++;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800187c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800187e:	3301      	adds	r3, #1
 8001880:	b29a      	uxth	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001888:	861a      	strh	r2, [r3, #48]	@ 0x30
		return;
 800188a:	e056      	b.n	800193a <black_box_pack_int+0x16a>
	}
	// copy str to buffer
	int str_idx = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24
	int index_flag;
	int max_index = fs->buffer_index + len_str;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001896:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001898:	461a      	mov	r2, r3
 800189a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800189c:	4413      	add	r3, r2
 800189e:	61fb      	str	r3, [r7, #28]
	if(max_index <=  MAX_BUFFER_SIZE){
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80018a6:	dc0a      	bgt.n	80018be <black_box_pack_int+0xee>
		max_index = fs->buffer_index + len_str;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018ae:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80018b0:	461a      	mov	r2, r3
 80018b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b4:	4413      	add	r3, r2
 80018b6:	61fb      	str	r3, [r7, #28]
		index_flag = 1;
 80018b8:	2301      	movs	r3, #1
 80018ba:	623b      	str	r3, [r7, #32]
 80018bc:	e004      	b.n	80018c8 <black_box_pack_int+0xf8>
	}
	else{
		max_index = MAX_BUFFER_SIZE;
 80018be:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80018c2:	61fb      	str	r3, [r7, #28]
		index_flag = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	623b      	str	r3, [r7, #32]
	}
	for(int j = fs->buffer_index ; j < max_index; j++ ){
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018ce:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80018d0:	61bb      	str	r3, [r7, #24]
 80018d2:	e011      	b.n	80018f8 <black_box_pack_int+0x128>
			fs->buffer[j] = str_[str_idx ++];
 80018d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80018da:	3330      	adds	r3, #48	@ 0x30
 80018dc:	443b      	add	r3, r7
 80018de:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	4413      	add	r3, r2
 80018e8:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80018ec:	3312      	adds	r3, #18
 80018ee:	460a      	mov	r2, r1
 80018f0:	701a      	strb	r2, [r3, #0]
	for(int j = fs->buffer_index ; j < max_index; j++ ){
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	3301      	adds	r3, #1
 80018f6:	61bb      	str	r3, [r7, #24]
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	dbe9      	blt.n	80018d4 <black_box_pack_int+0x104>
	}
	
	if(index_flag){
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00c      	beq.n	8001920 <black_box_pack_int+0x150>
		fs->buffer_index += len_str;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800190c:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800190e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001910:	b29b      	uxth	r3, r3
 8001912:	4413      	add	r3, r2
 8001914:	b29a      	uxth	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800191c:	861a      	strh	r2, [r3, #48]	@ 0x30
 800191e:	e00c      	b.n	800193a <black_box_pack_int+0x16a>
	}
	else{
		fs->buffer_index += MAX_BUFFER_SIZE;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001926:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001928:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800192c:	b29a      	uxth	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001934:	861a      	strh	r2, [r3, #48]	@ 0x30
 8001936:	e000      	b.n	800193a <black_box_pack_int+0x16a>
        return;
 8001938:	bf00      	nop
	}
}
 800193a:	3730      	adds	r7, #48	@ 0x30
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20001158 	.word	0x20001158

08001944 <black_box_pack_str>:

/*
 * Description: Write str to buffer
 */
void black_box_pack_str(black_box_file_t *fs,const char *c){
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
    if(isSdcard_valid){
 800194e:	4b23      	ldr	r3, [pc, #140]	@ (80019dc <black_box_pack_str+0x98>)
 8001950:	f993 3000 	ldrsb.w	r3, [r3]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d13b      	bne.n	80019d0 <black_box_pack_str+0x8c>
        return;
    }
    int i = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 800195c:	e025      	b.n	80019aa <black_box_pack_str+0x66>
        if((fs->buffer_index + i) > MAX_BUFFER_SIZE){
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001964:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001966:	461a      	mov	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001970:	dd06      	ble.n	8001980 <black_box_pack_str+0x3c>
                fs->buffer_index = MAX_BUFFER_SIZE;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001978:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800197c:	861a      	strh	r2, [r3, #48]	@ 0x30
                return;
 800197e:	e028      	b.n	80019d2 <black_box_pack_str+0x8e>
        }
        fs->buffer[fs->buffer_index + i] = c[i];
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	441a      	add	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800198c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800198e:	4619      	mov	r1, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	440b      	add	r3, r1
 8001994:	7811      	ldrb	r1, [r2, #0]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800199e:	3312      	adds	r3, #18
 80019a0:	460a      	mov	r2, r1
 80019a2:	701a      	strb	r2, [r3, #0]
        i ++;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	3301      	adds	r3, #1
 80019a8:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1d3      	bne.n	800195e <black_box_pack_str+0x1a>
    }
    fs->buffer_index += i;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019bc:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019cc:	861a      	strh	r2, [r3, #48]	@ 0x30
 80019ce:	e000      	b.n	80019d2 <black_box_pack_str+0x8e>
        return;
 80019d0:	bf00      	nop
}
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20001158 	.word	0x20001158

080019e0 <black_box_load>:

/*
 * Description: Write buffer to sd card
 */
void black_box_load(black_box_file_t *fs)
 {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
      if(isSdcard_valid)
 80019e8:	4b13      	ldr	r3, [pc, #76]	@ (8001a38 <black_box_load+0x58>)
 80019ea:	f993 3000 	ldrsb.w	r3, [r3]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d11d      	bne.n	8001a2e <black_box_load+0x4e>
		  return; 
	// __disable_irq();	  
      isSdcard_write = f_puts(fs->buffer,&fs->file);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 80019f8:	3312      	adds	r3, #18
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	3204      	adds	r2, #4
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f00d fa05 	bl	800ee10 <f_puts>
 8001a06:	4603      	mov	r3, r0
 8001a08:	b25a      	sxtb	r2, r3
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <black_box_load+0x5c>)
 8001a0c:	701a      	strb	r2, [r3, #0]
	//__enable_irq();

      memset(fs->buffer,0,sizeof(fs->buffer));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8001a14:	3312      	adds	r3, #18
 8001a16:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f010 fac7 	bl	8011fb0 <memset>
      fs->buffer_index = 0;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a28:	2200      	movs	r2, #0
 8001a2a:	861a      	strh	r2, [r3, #48]	@ 0x30
 8001a2c:	e000      	b.n	8001a30 <black_box_load+0x50>
		  return; 
 8001a2e:	bf00      	nop
 }
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20001158 	.word	0x20001158
 8001a3c:	20001159 	.word	0x20001159

08001a40 <black_box_sync>:

/*
 * Description: sync file
 */
void black_box_sync(black_box_file_t *fs)
 { 
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	 if(isSdcard_valid)
 8001a48:	4b07      	ldr	r3, [pc, #28]	@ (8001a68 <black_box_sync+0x28>)
 8001a4a:	f993 3000 	ldrsb.w	r3, [r3]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d105      	bne.n	8001a5e <black_box_sync+0x1e>
	    return;
	 f_sync(&fs->file);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3304      	adds	r3, #4
 8001a56:	4618      	mov	r0, r3
 8001a58:	f00c fd4d 	bl	800e4f6 <f_sync>
 8001a5c:	e000      	b.n	8001a60 <black_box_sync+0x20>
	    return;
 8001a5e:	bf00      	nop
 }
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20001158 	.word	0x20001158

08001a6c <reverse>:
     return (uint32_t)(fre_clust * pfs->csize * 0.5);
 }


static void reverse( char *str, int len)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b087      	sub	sp, #28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001a80:	e018      	b.n	8001ab4 <reverse+0x48>
        temp = str[i];
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	4413      	add	r3, r2
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	441a      	add	r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	440b      	add	r3, r1
 8001a98:	7812      	ldrb	r2, [r2, #0]
 8001a9a:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	701a      	strb	r2, [r3, #0]
        i++;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	617b      	str	r3, [r7, #20]
        j--;
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	dbe2      	blt.n	8001a82 <reverse+0x16>
    }
}
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
 8001ac0:	371c      	adds	r7, #28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <intToStr>:

 static int intToStr(black_box_file_t *fs,int x,  char *str, int d)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
    while (x) {
 8001ad6:	e01f      	b.n	8001b18 <intToStr+0x50>
        str[fs->indexx++] = (x % 10) + '0';
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	4b1f      	ldr	r3, [pc, #124]	@ (8001b58 <intToStr+0x90>)
 8001adc:	fb83 1302 	smull	r1, r3, r3, r2
 8001ae0:	1099      	asrs	r1, r3, #2
 8001ae2:	17d3      	asrs	r3, r2, #31
 8001ae4:	1ac9      	subs	r1, r1, r3
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	440b      	add	r3, r1
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	1ad1      	subs	r1, r2, r3
 8001af0:	b2ca      	uxtb	r2, r1
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	1c58      	adds	r0, r3, #1
 8001af8:	68f9      	ldr	r1, [r7, #12]
 8001afa:	6008      	str	r0, [r1, #0]
 8001afc:	4619      	mov	r1, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	440b      	add	r3, r1
 8001b02:	3230      	adds	r2, #48	@ 0x30
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	4a13      	ldr	r2, [pc, #76]	@ (8001b58 <intToStr+0x90>)
 8001b0c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b10:	1092      	asrs	r2, r2, #2
 8001b12:	17db      	asrs	r3, r3, #31
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	60bb      	str	r3, [r7, #8]
    while (x) {
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1dc      	bne.n	8001ad8 <intToStr+0x10>
    }

    while (fs->indexx < d)
 8001b1e:	e009      	b.n	8001b34 <intToStr+0x6c>
        str[fs->indexx++] = '0';
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	1c59      	adds	r1, r3, #1
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	6011      	str	r1, [r2, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4413      	add	r3, r2
 8001b30:	2230      	movs	r2, #48	@ 0x30
 8001b32:	701a      	strb	r2, [r3, #0]
    while (fs->indexx < d)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	dcf0      	bgt.n	8001b20 <intToStr+0x58>
    reverse(str,fs->indexx);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4619      	mov	r1, r3
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff ff91 	bl	8001a6c <reverse>
    return fs->indexx;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	66666667 	.word	0x66666667

08001b5c <compassInit>:
int8_t file_open;


/*  Init compass
 */
void compassInit(){
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  calibrate_value.scale_factor_axis[X] = 1.0f;
 8001b60:	4b17      	ldr	r3, [pc, #92]	@ (8001bc0 <compassInit+0x64>)
 8001b62:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001b66:	60da      	str	r2, [r3, #12]
  calibrate_value.scale_factor_axis[Y] = 1.0f;
 8001b68:	4b15      	ldr	r3, [pc, #84]	@ (8001bc0 <compassInit+0x64>)
 8001b6a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001b6e:	611a      	str	r2, [r3, #16]
  calibrate_value.scale_factor_axis[Z] = 1.0f;
 8001b70:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <compassInit+0x64>)
 8001b72:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001b76:	615a      	str	r2, [r3, #20]

  calibrate_value.hard_iron_calibrate_value[X] = 0;
 8001b78:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <compassInit+0x64>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
  calibrate_value.hard_iron_calibrate_value[Y] = 0;
 8001b7e:	4b10      	ldr	r3, [pc, #64]	@ (8001bc0 <compassInit+0x64>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	605a      	str	r2, [r3, #4]
  calibrate_value.hard_iron_calibrate_value[Z] = 0;
 8001b84:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc0 <compassInit+0x64>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
	
  //file_open = black_box_create_file(&calib_file,file_name);
	 
 // epprom init
  AT24Cxx_init(&device_array, 0x00, &hi2c2);
 8001b8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc4 <compassInit+0x68>)
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	480e      	ldr	r0, [pc, #56]	@ (8001bc8 <compassInit+0x6c>)
 8001b90:	f002 fec8 	bl	8004924 <AT24Cxx_init>
  AT24Cxx_add_dev(&device_array, 0x01, &hi2c2);
 8001b94:	4a0b      	ldr	r2, [pc, #44]	@ (8001bc4 <compassInit+0x68>)
 8001b96:	2101      	movs	r1, #1
 8001b98:	480b      	ldr	r0, [pc, #44]	@ (8001bc8 <compassInit+0x6c>)
 8001b9a:	f002 ff03 	bl	80049a4 <AT24Cxx_add_dev>

  // init sensor
#ifdef QMC5883
  qmc5883_init(&hi2c1);
 8001b9e:	480b      	ldr	r0, [pc, #44]	@ (8001bcc <compassInit+0x70>)
 8001ba0:	f7ff fd58 	bl	8001654 <qmc5883_init>
#else
  hmc5883_init(&hi2c2);
#endif
  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){
 8001ba4:	2120      	movs	r1, #32
 8001ba6:	480a      	ldr	r0, [pc, #40]	@ (8001bd0 <compassInit+0x74>)
 8001ba8:	f003 fc98 	bl	80054dc <HAL_GPIO_ReadPin>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <compassInit+0x5c>
      compass_calibrate();
 8001bb2:	f000 f8f3 	bl	8001d9c <compass_calibrate>
  }
  else{
      read_calibrate_file();
  }
}
 8001bb6:	e001      	b.n	8001bbc <compassInit+0x60>
      read_calibrate_file();
 8001bb8:	f000 f87c 	bl	8001cb4 <read_calibrate_file>
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20001184 	.word	0x20001184
 8001bc4:	200027d4 	.word	0x200027d4
 8001bc8:	20001160 	.word	0x20001160
 8001bcc:	20002780 	.word	0x20002780
 8001bd0:	40010c00 	.word	0x40010c00

08001bd4 <compass_get>:

void compass_get(axis3_t *out){
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	axis3_t as;
#ifdef QMC5883
         qmc_get_raw(&as);
 8001bdc:	f107 0308 	add.w	r3, r7, #8
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fd63 	bl	80016ac <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
    // calibrate ouput
	out->x = (as.x - calibrate_value.hard_iron_calibrate_value[X]);
 8001be6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	4b30      	ldr	r3, [pc, #192]	@ (8001cb0 <compass_get+0xdc>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	b21a      	sxth	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	801a      	strh	r2, [r3, #0]
	out->y = (as.y - calibrate_value.hard_iron_calibrate_value[Y]);
 8001bfc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	4b2b      	ldr	r3, [pc, #172]	@ (8001cb0 <compass_get+0xdc>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	b21a      	sxth	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	805a      	strh	r2, [r3, #2]
	out->z = (as.z - calibrate_value.hard_iron_calibrate_value[Z]);
 8001c12:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	4b25      	ldr	r3, [pc, #148]	@ (8001cb0 <compass_get+0xdc>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	b21a      	sxth	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	809a      	strh	r2, [r3, #4]

    out->x *= calibrate_value.scale_factor_axis[X];
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff f89c 	bl	8000d6c <__aeabi_i2f>
 8001c34:	4602      	mov	r2, r0
 8001c36:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb0 <compass_get+0xdc>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	f7ff f8e9 	bl	8000e14 <__aeabi_fmul>
 8001c42:	4603      	mov	r3, r0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fac1 	bl	80011cc <__aeabi_f2iz>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	b21a      	sxth	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	801a      	strh	r2, [r3, #0]
    out->y *= calibrate_value.scale_factor_axis[Y];
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff f887 	bl	8000d6c <__aeabi_i2f>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	4b13      	ldr	r3, [pc, #76]	@ (8001cb0 <compass_get+0xdc>)
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	4619      	mov	r1, r3
 8001c66:	4610      	mov	r0, r2
 8001c68:	f7ff f8d4 	bl	8000e14 <__aeabi_fmul>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff faac 	bl	80011cc <__aeabi_f2iz>
 8001c74:	4603      	mov	r3, r0
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	805a      	strh	r2, [r3, #2]
    out->z *= calibrate_value.scale_factor_axis[Z];
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff f872 	bl	8000d6c <__aeabi_i2f>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <compass_get+0xdc>)
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4610      	mov	r0, r2
 8001c92:	f7ff f8bf 	bl	8000e14 <__aeabi_fmul>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff fa97 	bl	80011cc <__aeabi_f2iz>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	b21a      	sxth	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	809a      	strh	r2, [r3, #4]
}
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20001184 	.word	0x20001184

08001cb4 <read_calibrate_file>:

/* read calibrate data from eprrom
 * 
 */

void read_calibrate_file(){
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
	int32_t sum_all = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	607b      	str	r3, [r7, #4]
    AT24Cxx_read_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_value,0x0010,sizeof(cali_mag_t));
 8001cbe:	4b33      	ldr	r3, [pc, #204]	@ (8001d8c <read_calibrate_file+0xd8>)
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	231c      	movs	r3, #28
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	4932      	ldr	r1, [pc, #200]	@ (8001d90 <read_calibrate_file+0xdc>)
 8001cc8:	f002 ffc5 	bl	8004c56 <AT24Cxx_read_byte_buffer>
   	sum_all += calibrate_value.scale_factor_axis[X];
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff f84d 	bl	8000d6c <__aeabi_i2f>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	4b2e      	ldr	r3, [pc, #184]	@ (8001d90 <read_calibrate_file+0xdc>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4610      	mov	r0, r2
 8001cdc:	f7fe ff92 	bl	8000c04 <__addsf3>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fa72 	bl	80011cc <__aeabi_f2iz>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Y];
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff f83d 	bl	8000d6c <__aeabi_i2f>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	4b26      	ldr	r3, [pc, #152]	@ (8001d90 <read_calibrate_file+0xdc>)
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	f7fe ff82 	bl	8000c04 <__addsf3>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fa62 	bl	80011cc <__aeabi_f2iz>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Z];
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff f82d 	bl	8000d6c <__aeabi_i2f>
 8001d12:	4602      	mov	r2, r0
 8001d14:	4b1e      	ldr	r3, [pc, #120]	@ (8001d90 <read_calibrate_file+0xdc>)
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	f7fe ff72 	bl	8000c04 <__addsf3>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fa52 	bl	80011cc <__aeabi_f2iz>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	607b      	str	r3, [r7, #4]

    sum_all += (int)calibrate_value.hard_iron_calibrate_value[X];
 8001d2c:	4b18      	ldr	r3, [pc, #96]	@ (8001d90 <read_calibrate_file+0xdc>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	4413      	add	r3, r2
 8001d34:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Y];
 8001d36:	4b16      	ldr	r3, [pc, #88]	@ (8001d90 <read_calibrate_file+0xdc>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Z];
 8001d40:	4b13      	ldr	r3, [pc, #76]	@ (8001d90 <read_calibrate_file+0xdc>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	4413      	add	r3, r2
 8001d48:	607b      	str	r3, [r7, #4]

    if(ABS(sum_all - (int)calibrate_value.sum_all_value) > 40){
 8001d4a:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <read_calibrate_file+0xdc>)
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	bfb8      	it	lt
 8001d5a:	425b      	neglt	r3, r3
 8001d5c:	2b28      	cmp	r3, #40	@ 0x28
 8001d5e:	dd11      	ble.n	8001d84 <read_calibrate_file+0xd0>
      while(1){
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001d60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d64:	480b      	ldr	r0, [pc, #44]	@ (8001d94 <read_calibrate_file+0xe0>)
 8001d66:	f003 fbe8 	bl	800553a <HAL_GPIO_TogglePin>
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001d6a:	2120      	movs	r1, #32
 8001d6c:	480a      	ldr	r0, [pc, #40]	@ (8001d98 <read_calibrate_file+0xe4>)
 8001d6e:	f003 fbe4 	bl	800553a <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001d72:	2110      	movs	r1, #16
 8001d74:	4808      	ldr	r0, [pc, #32]	@ (8001d98 <read_calibrate_file+0xe4>)
 8001d76:	f003 fbe0 	bl	800553a <HAL_GPIO_TogglePin>
       HAL_Delay(50); // 10 Hz loop
 8001d7a:	2032      	movs	r0, #50	@ 0x32
 8001d7c:	f002 ffd4 	bl	8004d28 <HAL_Delay>
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001d80:	bf00      	nop
 8001d82:	e7ed      	b.n	8001d60 <read_calibrate_file+0xac>
      }
    }
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20001160 	.word	0x20001160
 8001d90:	20001184 	.word	0x20001184
 8001d94:	40011000 	.word	0x40011000
 8001d98:	40010800 	.word	0x40010800

08001d9c <compass_calibrate>:


/* Calibrate function
 * write calibrate value to sd card
 */
static void compass_calibrate(){
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b095      	sub	sp, #84	@ 0x54
 8001da0:	af00      	add	r7, sp, #0
    int16_t max_val[] = {-32767,-32767,-32767};
 8001da2:	4a9f      	ldr	r2, [pc, #636]	@ (8002020 <compass_calibrate+0x284>)
 8001da4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001da8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dac:	6018      	str	r0, [r3, #0]
 8001dae:	3304      	adds	r3, #4
 8001db0:	8019      	strh	r1, [r3, #0]
    int16_t min_val[] = {32767, 32767, 32767};
 8001db2:	4a9c      	ldr	r2, [pc, #624]	@ (8002024 <compass_calibrate+0x288>)
 8001db4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001db8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dbc:	6018      	str	r0, [r3, #0]
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	8019      	strh	r1, [r3, #0]
    uint8_t fist_data = TRUE;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    cali_mag_t calibrate_temp;
    ignore_data = 0;
 8001dc8:	4b97      	ldr	r3, [pc, #604]	@ (8002028 <compass_calibrate+0x28c>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	801a      	strh	r2, [r3, #0]
    int16_t last_axis[3];
    axis3_t as;

	while(!file_open){
 8001dce:	e0b5      	b.n	8001f3c <compass_calibrate+0x1a0>
 // read data from sensor
#ifdef QMC5883
         qmc_get_raw(&as);
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fc6a 	bl	80016ac <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
        if(fist_data){
 8001dd8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00c      	beq.n	8001dfa <compass_calibrate+0x5e>
          last_axis[X] = as.x;
 8001de0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001de4:	81bb      	strh	r3, [r7, #12]
          last_axis[Y] = as.y;
 8001de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dea:	81fb      	strh	r3, [r7, #14]
          last_axis[Z] = as.z;
 8001dec:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001df0:	823b      	strh	r3, [r7, #16]
          fist_data = FALSE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          continue;
 8001df8:	e0a0      	b.n	8001f3c <compass_calibrate+0x1a0>
        }
        int16_t delta_x_ = as.x -  last_axis[X];
 8001dfa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        int16_t delta_y_ = as.y -  last_axis[Y];
 8001e0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
        int16_t delta_z_ = as.z -  last_axis[Z];
 8001e22:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        // ignore wrong value and set to zero
        int16_t ckec = sqrt(sq(delta_x_) + sq(delta_y_) + sq(delta_z_));
 8001e36:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001e3a:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	@ 0x4a
 8001e3e:	fb03 f202 	mul.w	r2, r3, r2
 8001e42:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 8001e46:	f9b7 1048 	ldrsh.w	r1, [r7, #72]	@ 0x48
 8001e4a:	fb01 f303 	mul.w	r3, r1, r3
 8001e4e:	441a      	add	r2, r3
 8001e50:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8001e54:	f9b7 1046 	ldrsh.w	r1, [r7, #70]	@ 0x46
 8001e58:	fb01 f303 	mul.w	r3, r1, r3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fb38 	bl	80004d4 <__aeabi_i2d>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f010 f8f2 	bl	8012054 <sqrt>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	f7fe fe46 	bl	8000b08 <__aeabi_d2iz>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
        if(ckec > max_change){
 8001e82:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001e86:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	dd09      	ble.n	8001ea2 <compass_calibrate+0x106>
            fist_data = TRUE; 
 8001e8e:	2301      	movs	r3, #1
 8001e90:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            ignore_data ++;
 8001e94:	4b64      	ldr	r3, [pc, #400]	@ (8002028 <compass_calibrate+0x28c>)
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	4b62      	ldr	r3, [pc, #392]	@ (8002028 <compass_calibrate+0x28c>)
 8001e9e:	801a      	strh	r2, [r3, #0]
            continue;
 8001ea0:	e04c      	b.n	8001f3c <compass_calibrate+0x1a0>
        }
        last_axis[X] = as.x;
 8001ea2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ea6:	81bb      	strh	r3, [r7, #12]
        last_axis[Y] = as.y;
 8001ea8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eac:	81fb      	strh	r3, [r7, #14]
        last_axis[Z] = as.z;
 8001eae:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001eb2:	823b      	strh	r3, [r7, #16]
        // get max value each axis
        if(as.x > max_val[X]) max_val[X] = as.x;
 8001eb4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001eb8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	dd02      	ble.n	8001ec6 <compass_calibrate+0x12a>
 8001ec0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ec4:	873b      	strh	r3, [r7, #56]	@ 0x38
        if(as.y > max_val[Y]) max_val[Y] = as.y;
 8001ec6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001eca:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	dd02      	ble.n	8001ed8 <compass_calibrate+0x13c>
 8001ed2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ed6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        if(as.z > max_val[Z]) max_val[Z] = as.z;
 8001ed8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001edc:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	dd02      	ble.n	8001eea <compass_calibrate+0x14e>
 8001ee4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ee8:	87bb      	strh	r3, [r7, #60]	@ 0x3c

        // min value
        if(as.x < min_val[X]) min_val[X] = as.x;
 8001eea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001eee:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	da02      	bge.n	8001efc <compass_calibrate+0x160>
 8001ef6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001efa:	863b      	strh	r3, [r7, #48]	@ 0x30
        if(as.y < min_val[Y]) min_val[Y] = as.y;
 8001efc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f00:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001f04:	429a      	cmp	r2, r3
 8001f06:	da02      	bge.n	8001f0e <compass_calibrate+0x172>
 8001f08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f0c:	867b      	strh	r3, [r7, #50]	@ 0x32
        if(as.z < min_val[Z]) min_val[Z] = as.z;
 8001f0e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001f12:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001f16:	429a      	cmp	r2, r3
 8001f18:	da02      	bge.n	8001f20 <compass_calibrate+0x184>
 8001f1a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001f1e:	86bb      	strh	r3, [r7, #52]	@ 0x34
        black_box_pack_str(&calib_file,"\n");
		
		black_box_load(&calib_file);
        black_box_sync(&calib_file);
        */
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001f20:	2110      	movs	r1, #16
 8001f22:	4842      	ldr	r0, [pc, #264]	@ (800202c <compass_calibrate+0x290>)
 8001f24:	f003 fb09 	bl	800553a <HAL_GPIO_TogglePin>
        HAL_Delay(20); // 10 Hz loop
 8001f28:	2014      	movs	r0, #20
 8001f2a:	f002 fefd 	bl	8004d28 <HAL_Delay>

       if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5) == 0){
 8001f2e:	2120      	movs	r1, #32
 8001f30:	483f      	ldr	r0, [pc, #252]	@ (8002030 <compass_calibrate+0x294>)
 8001f32:	f003 fad3 	bl	80054dc <HAL_GPIO_ReadPin>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d006      	beq.n	8001f4a <compass_calibrate+0x1ae>
	while(!file_open){
 8001f3c:	4b3d      	ldr	r3, [pc, #244]	@ (8002034 <compass_calibrate+0x298>)
 8001f3e:	f993 3000 	ldrsb.w	r3, [r3]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f43f af44 	beq.w	8001dd0 <compass_calibrate+0x34>
 8001f48:	e000      	b.n	8001f4c <compass_calibrate+0x1b0>
              break;
 8001f4a:	bf00      	nop
          }
	  }

    // check all min value is negative sign
    if(min_val[X] > 0 || min_val[Y] > 0 || min_val[Z] > 0){
 8001f4c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	dc02      	bgt.n	8001f5a <compass_calibrate+0x1be>
 8001f54:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001f58:	2b00      	cmp	r3, #0
          // error
    }
    // check all max value is positive sign
    if(max_val[X] < 0 || max_val[Y] < 0 || max_val[Z] < 0){
 8001f5a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	db02      	blt.n	8001f68 <compass_calibrate+0x1cc>
 8001f62:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001f66:	2b00      	cmp	r3, #0
          // error
    }
    // calibrate value for each axis
    calibrate_temp.hard_iron_calibrate_value[X] = (int)(max_val[X] + min_val[X])/2;
 8001f68:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001f72:	4413      	add	r3, r2
 8001f74:	0fda      	lsrs	r2, r3, #31
 8001f76:	4413      	add	r3, r2
 8001f78:	105b      	asrs	r3, r3, #1
 8001f7a:	617b      	str	r3, [r7, #20]
    calibrate_temp.hard_iron_calibrate_value[Y] = (int)(max_val[Y] + min_val[Y])/2;
 8001f7c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001f80:	461a      	mov	r2, r3
 8001f82:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001f86:	4413      	add	r3, r2
 8001f88:	0fda      	lsrs	r2, r3, #31
 8001f8a:	4413      	add	r3, r2
 8001f8c:	105b      	asrs	r3, r3, #1
 8001f8e:	61bb      	str	r3, [r7, #24]
    calibrate_temp.hard_iron_calibrate_value[Z] = (int)(max_val[Z] + min_val[Z])/2;
 8001f90:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001f94:	461a      	mov	r2, r3
 8001f96:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001f9a:	4413      	add	r3, r2
 8001f9c:	0fda      	lsrs	r2, r3, #31
 8001f9e:	4413      	add	r3, r2
 8001fa0:	105b      	asrs	r3, r3, #1
 8001fa2:	61fb      	str	r3, [r7, #28]

    // calculate scale factor for each axis
    int16_t x_ = abs(max_val[X]) + abs(min_val[X]);
 8001fa4:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	bfb8      	it	lt
 8001fac:	425b      	neglt	r3, r3
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bfb8      	it	lt
 8001fb8:	425b      	neglt	r3, r3
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    int16_t y_ = abs(max_val[Y]) + abs(min_val[Y]);
 8001fc4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	bfb8      	it	lt
 8001fcc:	425b      	neglt	r3, r3
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	bfb8      	it	lt
 8001fd8:	425b      	neglt	r3, r3
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	4413      	add	r3, r2
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    int16_t z_ = abs(max_val[Z]) + abs(min_val[Z]);
 8001fe4:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	bfb8      	it	lt
 8001fec:	425b      	neglt	r3, r3
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bfb8      	it	lt
 8001ff8:	425b      	neglt	r3, r3
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    // get largest value
    int16_t max_value = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    if(x_ > y_)
 8002008:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 800200c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8002010:	429a      	cmp	r2, r3
 8002012:	dd11      	ble.n	8002038 <compass_calibrate+0x29c>
        max_value = x_;
 8002014:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002018:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800201c:	e010      	b.n	8002040 <compass_calibrate+0x2a4>
 800201e:	bf00      	nop
 8002020:	08012378 	.word	0x08012378
 8002024:	08012380 	.word	0x08012380
 8002028:	2000115c 	.word	0x2000115c
 800202c:	40010800 	.word	0x40010800
 8002030:	40010c00 	.word	0x40010c00
 8002034:	200011a0 	.word	0x200011a0
    else
        max_value = y_;
 8002038:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800203c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    if(max_value < z_)
 8002040:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	@ 0x4c
 8002044:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8002048:	429a      	cmp	r2, r3
 800204a:	da02      	bge.n	8002052 <compass_calibrate+0x2b6>
        max_value = z_;
 800204c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800204e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

    // caculate scale
    calibrate_temp.scale_factor_axis[X] = (float)x_/max_value;
 8002052:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fe88 	bl	8000d6c <__aeabi_i2f>
 800205c:	4604      	mov	r4, r0
 800205e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fe82 	bl	8000d6c <__aeabi_i2f>
 8002068:	4603      	mov	r3, r0
 800206a:	4619      	mov	r1, r3
 800206c:	4620      	mov	r0, r4
 800206e:	f7fe ff85 	bl	8000f7c <__aeabi_fdiv>
 8002072:	4603      	mov	r3, r0
 8002074:	623b      	str	r3, [r7, #32]
    calibrate_temp.scale_factor_axis[Y] = (float)y_/max_value;
 8002076:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe fe76 	bl	8000d6c <__aeabi_i2f>
 8002080:	4604      	mov	r4, r0
 8002082:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fe70 	bl	8000d6c <__aeabi_i2f>
 800208c:	4603      	mov	r3, r0
 800208e:	4619      	mov	r1, r3
 8002090:	4620      	mov	r0, r4
 8002092:	f7fe ff73 	bl	8000f7c <__aeabi_fdiv>
 8002096:	4603      	mov	r3, r0
 8002098:	627b      	str	r3, [r7, #36]	@ 0x24
    calibrate_temp.scale_factor_axis[Z] = (float)z_/max_value;
 800209a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fe64 	bl	8000d6c <__aeabi_i2f>
 80020a4:	4604      	mov	r4, r0
 80020a6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe fe5e 	bl	8000d6c <__aeabi_i2f>
 80020b0:	4603      	mov	r3, r0
 80020b2:	4619      	mov	r1, r3
 80020b4:	4620      	mov	r0, r4
 80020b6:	f7fe ff61 	bl	8000f7c <__aeabi_fdiv>
 80020ba:	4603      	mov	r3, r0
 80020bc:	62bb      	str	r3, [r7, #40]	@ 0x28

    calibrate_temp.sum_all_value = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[X];
 80020c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fe51 	bl	8000d6c <__aeabi_i2f>
 80020ca:	4602      	mov	r2, r0
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	4619      	mov	r1, r3
 80020d0:	4610      	mov	r0, r2
 80020d2:	f7fe fd97 	bl	8000c04 <__addsf3>
 80020d6:	4603      	mov	r3, r0
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff f877 	bl	80011cc <__aeabi_f2iz>
 80020de:	4603      	mov	r3, r0
 80020e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Y];
 80020e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe fe41 	bl	8000d6c <__aeabi_i2f>
 80020ea:	4602      	mov	r2, r0
 80020ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ee:	4619      	mov	r1, r3
 80020f0:	4610      	mov	r0, r2
 80020f2:	f7fe fd87 	bl	8000c04 <__addsf3>
 80020f6:	4603      	mov	r3, r0
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff f867 	bl	80011cc <__aeabi_f2iz>
 80020fe:	4603      	mov	r3, r0
 8002100:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Z];
 8002102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe fe31 	bl	8000d6c <__aeabi_i2f>
 800210a:	4602      	mov	r2, r0
 800210c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800210e:	4619      	mov	r1, r3
 8002110:	4610      	mov	r0, r2
 8002112:	f7fe fd77 	bl	8000c04 <__addsf3>
 8002116:	4603      	mov	r3, r0
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff f857 	bl	80011cc <__aeabi_f2iz>
 800211e:	4603      	mov	r3, r0
 8002120:	62fb      	str	r3, [r7, #44]	@ 0x2c

    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[X];
 8002122:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	4413      	add	r3, r2
 8002128:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Y];
 800212a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	4413      	add	r3, r2
 8002130:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Z];
 8002132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	4413      	add	r3, r2
 8002138:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // write data to eprrom
    AT24Cxx_write_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_temp, 0x0010, sizeof(cali_mag_t));
 800213a:	4b09      	ldr	r3, [pc, #36]	@ (8002160 <compass_calibrate+0x3c4>)
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	f107 0114 	add.w	r1, r7, #20
 8002142:	231c      	movs	r3, #28
 8002144:	2210      	movs	r2, #16
 8002146:	f002 fc84 	bl	8004a52 <AT24Cxx_write_byte_buffer>
  
   // black_box_load(&calib_file);
   // black_box_close(&calib_file);
	
	while(1){
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800214a:	2120      	movs	r1, #32
 800214c:	4805      	ldr	r0, [pc, #20]	@ (8002164 <compass_calibrate+0x3c8>)
 800214e:	f003 f9f4 	bl	800553a <HAL_GPIO_TogglePin>
      HAL_Delay(1000); // 10 Hz loop
 8002152:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002156:	f002 fde7 	bl	8004d28 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800215a:	bf00      	nop
 800215c:	e7f5      	b.n	800214a <compass_calibrate+0x3ae>
 800215e:	bf00      	nop
 8002160:	20001160 	.word	0x20001160
 8002164:	40010800 	.word	0x40010800

08002168 <gps_init>:

/*  
 * Init function 
 */
void gps_init(UART_HandleTypeDef *uart,uint32_t baudrate)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
	_gpsUartPort = uart;
 8002172:	4a27      	ldr	r2, [pc, #156]	@ (8002210 <gps_init+0xa8>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6013      	str	r3, [r2, #0]
    _gps.timer_ = millis();
 8002178:	4b26      	ldr	r3, [pc, #152]	@ (8002214 <gps_init+0xac>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002180:	4b25      	ldr	r3, [pc, #148]	@ (8002218 <gps_init+0xb0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4413      	add	r3, r2
 8002186:	4a25      	ldr	r2, [pc, #148]	@ (800221c <gps_init+0xb4>)
 8002188:	fba2 2303 	umull	r2, r3, r2, r3
 800218c:	099b      	lsrs	r3, r3, #6
 800218e:	4a24      	ldr	r2, [pc, #144]	@ (8002220 <gps_init+0xb8>)
 8002190:	62d3      	str	r3, [r2, #44]	@ 0x2c
    // reset all viriables
    _payload_length = 0;
 8002192:	4b24      	ldr	r3, [pc, #144]	@ (8002224 <gps_init+0xbc>)
 8002194:	2200      	movs	r2, #0
 8002196:	801a      	strh	r2, [r3, #0]
    _payload_counter = 0;
 8002198:	4b23      	ldr	r3, [pc, #140]	@ (8002228 <gps_init+0xc0>)
 800219a:	2200      	movs	r2, #0
 800219c:	801a      	strh	r2, [r3, #0]
    _msg_id = 0;
 800219e:	4b23      	ldr	r3, [pc, #140]	@ (800222c <gps_init+0xc4>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]

    // Configuration _gps module
    HAL_UART_Transmit(_gpsUartPort,ubloxInit,sizeof(ubloxInit),1000);
 80021a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002210 <gps_init+0xa8>)
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ac:	22a8      	movs	r2, #168	@ 0xa8
 80021ae:	4920      	ldr	r1, [pc, #128]	@ (8002230 <gps_init+0xc8>)
 80021b0:	f007 fb2e 	bl	8009810 <HAL_UART_Transmit>
    HAL_Delay(10);
 80021b4:	200a      	movs	r0, #10
 80021b6:	f002 fdb7 	bl	8004d28 <HAL_Delay>
    HAL_UART_Transmit(_gpsUartPort,ubloxSbasInit,sizeof(ubloxSbasInit),1000);
 80021ba:	4b15      	ldr	r3, [pc, #84]	@ (8002210 <gps_init+0xa8>)
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021c2:	2210      	movs	r2, #16
 80021c4:	491b      	ldr	r1, [pc, #108]	@ (8002234 <gps_init+0xcc>)
 80021c6:	f007 fb23 	bl	8009810 <HAL_UART_Transmit>
    HAL_Delay(10);
 80021ca:	200a      	movs	r0, #10
 80021cc:	f002 fdac 	bl	8004d28 <HAL_Delay>
    HAL_UART_Transmit(_gpsUartPort,uart57600,sizeof(uart57600),1000);
 80021d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002210 <gps_init+0xa8>)
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021d8:	221c      	movs	r2, #28
 80021da:	4917      	ldr	r1, [pc, #92]	@ (8002238 <gps_init+0xd0>)
 80021dc:	f007 fb18 	bl	8009810 <HAL_UART_Transmit>
    HAL_Delay(10);
 80021e0:	200a      	movs	r0, #10
 80021e2:	f002 fda1 	bl	8004d28 <HAL_Delay>
    // set baudrate
    _gpsUartPort->Init.BaudRate = baudrate;
 80021e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002210 <gps_init+0xa8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(_gpsUartPort); 
 80021ee:	4b08      	ldr	r3, [pc, #32]	@ (8002210 <gps_init+0xa8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f007 fabc 	bl	8009770 <HAL_UART_Init>

    // read gps using interrup
	HAL_UART_Receive_IT(_gpsUartPort, &_char,ONE_BYTE);
 80021f8:	4b05      	ldr	r3, [pc, #20]	@ (8002210 <gps_init+0xa8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2201      	movs	r2, #1
 80021fe:	490f      	ldr	r1, [pc, #60]	@ (800223c <gps_init+0xd4>)
 8002200:	4618      	mov	r0, r3
 8002202:	f007 fb88 	bl	8009916 <HAL_UART_Receive_IT>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	200011dc 	.word	0x200011dc
 8002214:	2000132c 	.word	0x2000132c
 8002218:	20001330 	.word	0x20001330
 800221c:	10624dd3 	.word	0x10624dd3
 8002220:	200011a4 	.word	0x200011a4
 8002224:	200011ea 	.word	0x200011ea
 8002228:	200011ec 	.word	0x200011ec
 800222c:	200011e8 	.word	0x200011e8
 8002230:	0801247c 	.word	0x0801247c
 8002234:	20000000 	.word	0x20000000
 8002238:	08012524 	.word	0x08012524
 800223c:	200011e0 	.word	0x200011e0

08002240 <gps_uart_port>:

UART_HandleTypeDef *gps_uart_port(){
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
    return _gpsUartPort;
 8002244:	4b02      	ldr	r3, [pc, #8]	@ (8002250 <gps_uart_port+0x10>)
 8002246:	681b      	ldr	r3, [r3, #0]
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	200011dc 	.word	0x200011dc

08002254 <gps_callback>:
/* 
 * REad gps by using interrup
 */
uint32_t gps_interrupt_count;
void gps_callback()
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
   // parse data
   gps_interrupt_count++;
 8002258:	4b09      	ldr	r3, [pc, #36]	@ (8002280 <gps_callback+0x2c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	3301      	adds	r3, #1
 800225e:	4a08      	ldr	r2, [pc, #32]	@ (8002280 <gps_callback+0x2c>)
 8002260:	6013      	str	r3, [r2, #0]
   newdata(_char);
 8002262:	4b08      	ldr	r3, [pc, #32]	@ (8002284 <gps_callback+0x30>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f000 f8f6 	bl	8002458 <newdata>
   HAL_UART_Receive_IT(_gpsUartPort, &_char,ONE_BYTE);
 800226c:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <gps_callback+0x34>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2201      	movs	r2, #1
 8002272:	4904      	ldr	r1, [pc, #16]	@ (8002284 <gps_callback+0x30>)
 8002274:	4618      	mov	r0, r3
 8002276:	f007 fb4e 	bl	8009916 <HAL_UART_Receive_IT>
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	200012b8 	.word	0x200012b8
 8002284:	200011e0 	.word	0x200011e0
 8002288:	200011dc 	.word	0x200011dc

0800228c <parse_msg>:
        *ck_a += *data;
        *ck_b += *ck_a;
        data++;
    }
}
static uint8_t parse_msg(){
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
    static uint8_t _new_speed;
    static uint8_t next_fix;
    static uint32_t lastPosUpdateTime;
    static uint8_t _new_position;
    switch (_msg_id) {
 8002290:	4b67      	ldr	r3, [pc, #412]	@ (8002430 <parse_msg+0x1a4>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b12      	cmp	r3, #18
 8002296:	dc2b      	bgt.n	80022f0 <parse_msg+0x64>
 8002298:	2b02      	cmp	r3, #2
 800229a:	f2c0 80ad 	blt.w	80023f8 <parse_msg+0x16c>
 800229e:	3b02      	subs	r3, #2
 80022a0:	2b10      	cmp	r3, #16
 80022a2:	f200 80a9 	bhi.w	80023f8 <parse_msg+0x16c>
 80022a6:	a201      	add	r2, pc, #4	@ (adr r2, 80022ac <parse_msg+0x20>)
 80022a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ac:	080022f9 	.word	0x080022f9
 80022b0:	0800236d 	.word	0x0800236d
 80022b4:	080023f9 	.word	0x080023f9
 80022b8:	080023f9 	.word	0x080023f9
 80022bc:	08002399 	.word	0x08002399
 80022c0:	080023f9 	.word	0x080023f9
 80022c4:	080023f9 	.word	0x080023f9
 80022c8:	080023f9 	.word	0x080023f9
 80022cc:	080023f9 	.word	0x080023f9
 80022d0:	080023f9 	.word	0x080023f9
 80022d4:	080023f9 	.word	0x080023f9
 80022d8:	080023f9 	.word	0x080023f9
 80022dc:	080023f9 	.word	0x080023f9
 80022e0:	080023f9 	.word	0x080023f9
 80022e4:	080023f9 	.word	0x080023f9
 80022e8:	080023f9 	.word	0x080023f9
 80022ec:	080023b1 	.word	0x080023b1
 80022f0:	2b30      	cmp	r3, #48	@ 0x30
 80022f2:	f000 8083 	beq.w	80023fc <parse_msg+0x170>
 80022f6:	e07f      	b.n	80023f8 <parse_msg+0x16c>
        case MSG_POSLLH:
            _gps.position[LON] = _buffer.posllh.longitude;
 80022f8:	4b4e      	ldr	r3, [pc, #312]	@ (8002434 <parse_msg+0x1a8>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	4a4e      	ldr	r2, [pc, #312]	@ (8002438 <parse_msg+0x1ac>)
 80022fe:	6013      	str	r3, [r2, #0]
            _gps.position[LAT] = _buffer.posllh.latitude;
 8002300:	4b4c      	ldr	r3, [pc, #304]	@ (8002434 <parse_msg+0x1a8>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	4a4c      	ldr	r2, [pc, #304]	@ (8002438 <parse_msg+0x1ac>)
 8002306:	6053      	str	r3, [r2, #4]
            _gps.altitude_msl = _buffer.posllh.altitude_msl;
 8002308:	4b4a      	ldr	r3, [pc, #296]	@ (8002434 <parse_msg+0x1a8>)
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	b29a      	uxth	r2, r3
 800230e:	4b4a      	ldr	r3, [pc, #296]	@ (8002438 <parse_msg+0x1ac>)
 8002310:	861a      	strh	r2, [r3, #48]	@ 0x30
            _gps.horizontalAccuracy = _buffer.posllh.horizontal_accuracy;
 8002312:	4b48      	ldr	r3, [pc, #288]	@ (8002434 <parse_msg+0x1a8>)
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	4a48      	ldr	r2, [pc, #288]	@ (8002438 <parse_msg+0x1ac>)
 8002318:	6213      	str	r3, [r2, #32]
            _gps.VerticalAccuracy = _buffer.posllh.vertical_accuracy;
 800231a:	4b46      	ldr	r3, [pc, #280]	@ (8002434 <parse_msg+0x1a8>)
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	4a46      	ldr	r2, [pc, #280]	@ (8002438 <parse_msg+0x1ac>)
 8002320:	6253      	str	r3, [r2, #36]	@ 0x24
            /* time update position */
            if(lastPosUpdateTime == 0){
 8002322:	4b46      	ldr	r3, [pc, #280]	@ (800243c <parse_msg+0x1b0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d06a      	beq.n	8002400 <parse_msg+0x174>
                break;
                lastPosUpdateTime = millis();
            }
            _gps.posUpdateTime = millis() - lastPosUpdateTime;
 800232a:	4b45      	ldr	r3, [pc, #276]	@ (8002440 <parse_msg+0x1b4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002332:	4b44      	ldr	r3, [pc, #272]	@ (8002444 <parse_msg+0x1b8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4413      	add	r3, r2
 8002338:	4a43      	ldr	r2, [pc, #268]	@ (8002448 <parse_msg+0x1bc>)
 800233a:	fba2 2303 	umull	r2, r3, r2, r3
 800233e:	099a      	lsrs	r2, r3, #6
 8002340:	4b3e      	ldr	r3, [pc, #248]	@ (800243c <parse_msg+0x1b0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	4a3c      	ldr	r2, [pc, #240]	@ (8002438 <parse_msg+0x1ac>)
 8002348:	6293      	str	r3, [r2, #40]	@ 0x28
            lastPosUpdateTime = millis();
 800234a:	4b3d      	ldr	r3, [pc, #244]	@ (8002440 <parse_msg+0x1b4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002352:	4b3c      	ldr	r3, [pc, #240]	@ (8002444 <parse_msg+0x1b8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4413      	add	r3, r2
 8002358:	4a3b      	ldr	r2, [pc, #236]	@ (8002448 <parse_msg+0x1bc>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	099b      	lsrs	r3, r3, #6
 8002360:	4a36      	ldr	r2, [pc, #216]	@ (800243c <parse_msg+0x1b0>)
 8002362:	6013      	str	r3, [r2, #0]
            /* flag set */
            _new_position = TRUE;
 8002364:	4b39      	ldr	r3, [pc, #228]	@ (800244c <parse_msg+0x1c0>)
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
            break;
 800236a:	e04a      	b.n	8002402 <parse_msg+0x176>
        case MSG_STATUS:
            next_fix = (_buffer.status.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.status.fix_type == FIX_3D);
 800236c:	4b31      	ldr	r3, [pc, #196]	@ (8002434 <parse_msg+0x1a8>)
 800236e:	795b      	ldrb	r3, [r3, #5]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <parse_msg+0xf8>
 8002378:	4b2e      	ldr	r3, [pc, #184]	@ (8002434 <parse_msg+0x1a8>)
 800237a:	791b      	ldrb	r3, [r3, #4]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d101      	bne.n	8002384 <parse_msg+0xf8>
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <parse_msg+0xfa>
 8002384:	2300      	movs	r3, #0
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b31      	ldr	r3, [pc, #196]	@ (8002450 <parse_msg+0x1c4>)
 800238a:	701a      	strb	r2, [r3, #0]
            //if (!next_fix)
            //    _gps.fix = FALSE;
            _gps.fix = _buffer.status.fix_type;
 800238c:	4b29      	ldr	r3, [pc, #164]	@ (8002434 <parse_msg+0x1a8>)
 800238e:	791a      	ldrb	r2, [r3, #4]
 8002390:	4b29      	ldr	r3, [pc, #164]	@ (8002438 <parse_msg+0x1ac>)
 8002392:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            break;
 8002396:	e034      	b.n	8002402 <parse_msg+0x176>
        case MSG_SOL:
            //next_fix = (_buffer.solution.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.solution.fix_type == FIX_3D);
            //if (!next_fix)
            //    _gps.fix = FALSE;
            _gps.fix = _buffer.solution.fix_type;
 8002398:	4b26      	ldr	r3, [pc, #152]	@ (8002434 <parse_msg+0x1a8>)
 800239a:	7a9a      	ldrb	r2, [r3, #10]
 800239c:	4b26      	ldr	r3, [pc, #152]	@ (8002438 <parse_msg+0x1ac>)
 800239e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            _gps.numSat = _buffer.solution.satellites;
 80023a2:	4b24      	ldr	r3, [pc, #144]	@ (8002434 <parse_msg+0x1a8>)
 80023a4:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80023a8:	4b23      	ldr	r3, [pc, #140]	@ (8002438 <parse_msg+0x1ac>)
 80023aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            break;
 80023ae:	e028      	b.n	8002402 <parse_msg+0x176>
        case MSG_VELNED:
            _gps.velocity[LAT] = _buffer.velned.ned_north;
 80023b0:	4b20      	ldr	r3, [pc, #128]	@ (8002434 <parse_msg+0x1a8>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	4a20      	ldr	r2, [pc, #128]	@ (8002438 <parse_msg+0x1ac>)
 80023b6:	60d3      	str	r3, [r2, #12]
            _gps.velocity[LON] = _buffer.velned.ned_east;
 80023b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002434 <parse_msg+0x1a8>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002438 <parse_msg+0x1ac>)
 80023be:	6093      	str	r3, [r2, #8]
            _gps.velocity[DOWN] = _buffer.velned.ned_down;
 80023c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002434 <parse_msg+0x1a8>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002438 <parse_msg+0x1ac>)
 80023c6:	6113      	str	r3, [r2, #16]
            _gps.Gspeed = _buffer.velned.speed_2d;
 80023c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002434 <parse_msg+0x1a8>)
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	461a      	mov	r2, r3
 80023ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002438 <parse_msg+0x1ac>)
 80023d0:	615a      	str	r2, [r3, #20]
            _gps.ground_course = _buffer.velned.heading_2d;
 80023d2:	4b18      	ldr	r3, [pc, #96]	@ (8002434 <parse_msg+0x1a8>)
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	4b17      	ldr	r3, [pc, #92]	@ (8002438 <parse_msg+0x1ac>)
 80023da:	865a      	strh	r2, [r3, #50]	@ 0x32
            _gps.speedAccuracy = _buffer.velned.speed_accuracy;
 80023dc:	4b15      	ldr	r3, [pc, #84]	@ (8002434 <parse_msg+0x1a8>)
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b15      	ldr	r3, [pc, #84]	@ (8002438 <parse_msg+0x1ac>)
 80023e4:	619a      	str	r2, [r3, #24]
            _gps.headingAccuracy = _buffer.velned.heading_accuracy;
 80023e6:	4b13      	ldr	r3, [pc, #76]	@ (8002434 <parse_msg+0x1a8>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	461a      	mov	r2, r3
 80023ec:	4b12      	ldr	r3, [pc, #72]	@ (8002438 <parse_msg+0x1ac>)
 80023ee:	61da      	str	r2, [r3, #28]
            _new_speed = TRUE;
 80023f0:	4b18      	ldr	r3, [pc, #96]	@ (8002454 <parse_msg+0x1c8>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	701a      	strb	r2, [r3, #0]
            break;
 80023f6:	e004      	b.n	8002402 <parse_msg+0x176>
            svinfo_rate[0] = svinfo_rate[1];
            svinfo_rate[1] = millis();
            */
            break;
        default:
            return FALSE;
 80023f8:	2300      	movs	r3, #0
 80023fa:	e014      	b.n	8002426 <parse_msg+0x19a>
            break;
 80023fc:	bf00      	nop
 80023fe:	e000      	b.n	8002402 <parse_msg+0x176>
                break;
 8002400:	bf00      	nop
    }
    if (_new_position && _new_speed) {
 8002402:	4b12      	ldr	r3, [pc, #72]	@ (800244c <parse_msg+0x1c0>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00c      	beq.n	8002424 <parse_msg+0x198>
 800240a:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <parse_msg+0x1c8>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d008      	beq.n	8002424 <parse_msg+0x198>
        _new_speed = _new_position = FALSE;
 8002412:	4b0e      	ldr	r3, [pc, #56]	@ (800244c <parse_msg+0x1c0>)
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
 8002418:	4b0c      	ldr	r3, [pc, #48]	@ (800244c <parse_msg+0x1c0>)
 800241a:	781a      	ldrb	r2, [r3, #0]
 800241c:	4b0d      	ldr	r3, [pc, #52]	@ (8002454 <parse_msg+0x1c8>)
 800241e:	701a      	strb	r2, [r3, #0]
        return TRUE;
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <parse_msg+0x19a>
    }
    return FALSE;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	200011e8 	.word	0x200011e8
 8002434:	200011f0 	.word	0x200011f0
 8002438:	200011a4 	.word	0x200011a4
 800243c:	200012bc 	.word	0x200012bc
 8002440:	2000132c 	.word	0x2000132c
 8002444:	20001330 	.word	0x20001330
 8002448:	10624dd3 	.word	0x10624dd3
 800244c:	200012c0 	.word	0x200012c0
 8002450:	200012c1 	.word	0x200012c1
 8002454:	200012c2 	.word	0x200012c2

08002458 <newdata>:

int parse_ok;
static uint8_t newdata(uint8_t data){
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
    uint8_t parsed = FALSE;
 8002462:	2300      	movs	r3, #0
 8002464:	73fb      	strb	r3, [r7, #15]
    static uint8_t _ck_a;
    static uint8_t _ck_b;
    static uint8_t _step = 0;
    static uint32_t current_time_ms = 0;
    switch (_step) {
 8002466:	4b85      	ldr	r3, [pc, #532]	@ (800267c <newdata+0x224>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b08      	cmp	r3, #8
 800246c:	f200 8100 	bhi.w	8002670 <newdata+0x218>
 8002470:	a201      	add	r2, pc, #4	@ (adr r2, 8002478 <newdata+0x20>)
 8002472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002476:	bf00      	nop
 8002478:	0800249d 	.word	0x0800249d
 800247c:	080024b3 	.word	0x080024b3
 8002480:	080024c7 	.word	0x080024c7
 8002484:	080024e3 	.word	0x080024e3
 8002488:	08002515 	.word	0x08002515
 800248c:	08002549 	.word	0x08002549
 8002490:	080025a3 	.word	0x080025a3
 8002494:	080025fb 	.word	0x080025fb
 8002498:	08002619 	.word	0x08002619
        case 0: // Sync char 1 (0xB5)
            if (PREAMBLE1 == data)
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	2bb5      	cmp	r3, #181	@ 0xb5
 80024a0:	f040 80df 	bne.w	8002662 <newdata+0x20a>
                _step++;
 80024a4:	4b75      	ldr	r3, [pc, #468]	@ (800267c <newdata+0x224>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	3301      	adds	r3, #1
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	4b73      	ldr	r3, [pc, #460]	@ (800267c <newdata+0x224>)
 80024ae:	701a      	strb	r2, [r3, #0]
            break;
 80024b0:	e0d7      	b.n	8002662 <newdata+0x20a>
        case 1: // Sync char 2 (0x62)
            if (PREAMBLE2 == data) {
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	2b62      	cmp	r3, #98	@ 0x62
 80024b6:	d106      	bne.n	80024c6 <newdata+0x6e>
                _step++;
 80024b8:	4b70      	ldr	r3, [pc, #448]	@ (800267c <newdata+0x224>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	3301      	adds	r3, #1
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	4b6e      	ldr	r3, [pc, #440]	@ (800267c <newdata+0x224>)
 80024c2:	701a      	strb	r2, [r3, #0]
                break;
 80024c4:	e0d4      	b.n	8002670 <newdata+0x218>
            }
        case 2: // Class
            _step++;
 80024c6:	4b6d      	ldr	r3, [pc, #436]	@ (800267c <newdata+0x224>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	3301      	adds	r3, #1
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	4b6b      	ldr	r3, [pc, #428]	@ (800267c <newdata+0x224>)
 80024d0:	701a      	strb	r2, [r3, #0]
            _ck_b = _ck_a = data;  
 80024d2:	4a6b      	ldr	r2, [pc, #428]	@ (8002680 <newdata+0x228>)
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	7013      	strb	r3, [r2, #0]
 80024d8:	4b69      	ldr	r3, [pc, #420]	@ (8002680 <newdata+0x228>)
 80024da:	781a      	ldrb	r2, [r3, #0]
 80024dc:	4b69      	ldr	r3, [pc, #420]	@ (8002684 <newdata+0x22c>)
 80024de:	701a      	strb	r2, [r3, #0]
            break;
 80024e0:	e0c6      	b.n	8002670 <newdata+0x218>
        case 3: // ID
            _step++;
 80024e2:	4b66      	ldr	r3, [pc, #408]	@ (800267c <newdata+0x224>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	3301      	adds	r3, #1
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	4b64      	ldr	r3, [pc, #400]	@ (800267c <newdata+0x224>)
 80024ec:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 80024ee:	4b64      	ldr	r3, [pc, #400]	@ (8002680 <newdata+0x228>)
 80024f0:	781a      	ldrb	r2, [r3, #0]
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	4413      	add	r3, r2
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	4b61      	ldr	r3, [pc, #388]	@ (8002680 <newdata+0x228>)
 80024fa:	701a      	strb	r2, [r3, #0]
 80024fc:	4b60      	ldr	r3, [pc, #384]	@ (8002680 <newdata+0x228>)
 80024fe:	781a      	ldrb	r2, [r3, #0]
 8002500:	4b60      	ldr	r3, [pc, #384]	@ (8002684 <newdata+0x22c>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	4413      	add	r3, r2
 8002506:	b2da      	uxtb	r2, r3
 8002508:	4b5e      	ldr	r3, [pc, #376]	@ (8002684 <newdata+0x22c>)
 800250a:	701a      	strb	r2, [r3, #0]
            _msg_id = data;
 800250c:	4a5e      	ldr	r2, [pc, #376]	@ (8002688 <newdata+0x230>)
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	7013      	strb	r3, [r2, #0]
            break;
 8002512:	e0ad      	b.n	8002670 <newdata+0x218>
        case 4: 
            _step++;
 8002514:	4b59      	ldr	r3, [pc, #356]	@ (800267c <newdata+0x224>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	3301      	adds	r3, #1
 800251a:	b2da      	uxtb	r2, r3
 800251c:	4b57      	ldr	r3, [pc, #348]	@ (800267c <newdata+0x224>)
 800251e:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 8002520:	4b57      	ldr	r3, [pc, #348]	@ (8002680 <newdata+0x228>)
 8002522:	781a      	ldrb	r2, [r3, #0]
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	4413      	add	r3, r2
 8002528:	b2da      	uxtb	r2, r3
 800252a:	4b55      	ldr	r3, [pc, #340]	@ (8002680 <newdata+0x228>)
 800252c:	701a      	strb	r2, [r3, #0]
 800252e:	4b54      	ldr	r3, [pc, #336]	@ (8002680 <newdata+0x228>)
 8002530:	781a      	ldrb	r2, [r3, #0]
 8002532:	4b54      	ldr	r3, [pc, #336]	@ (8002684 <newdata+0x22c>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	4413      	add	r3, r2
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4b52      	ldr	r3, [pc, #328]	@ (8002684 <newdata+0x22c>)
 800253c:	701a      	strb	r2, [r3, #0]
            _payload_length = data; 
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	b29a      	uxth	r2, r3
 8002542:	4b52      	ldr	r3, [pc, #328]	@ (800268c <newdata+0x234>)
 8002544:	801a      	strh	r2, [r3, #0]
            break;
 8002546:	e093      	b.n	8002670 <newdata+0x218>
        case 5: 
            _step++;
 8002548:	4b4c      	ldr	r3, [pc, #304]	@ (800267c <newdata+0x224>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	3301      	adds	r3, #1
 800254e:	b2da      	uxtb	r2, r3
 8002550:	4b4a      	ldr	r3, [pc, #296]	@ (800267c <newdata+0x224>)
 8002552:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);      
 8002554:	4b4a      	ldr	r3, [pc, #296]	@ (8002680 <newdata+0x228>)
 8002556:	781a      	ldrb	r2, [r3, #0]
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	4413      	add	r3, r2
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4b48      	ldr	r3, [pc, #288]	@ (8002680 <newdata+0x228>)
 8002560:	701a      	strb	r2, [r3, #0]
 8002562:	4b47      	ldr	r3, [pc, #284]	@ (8002680 <newdata+0x228>)
 8002564:	781a      	ldrb	r2, [r3, #0]
 8002566:	4b47      	ldr	r3, [pc, #284]	@ (8002684 <newdata+0x22c>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	4413      	add	r3, r2
 800256c:	b2da      	uxtb	r2, r3
 800256e:	4b45      	ldr	r3, [pc, #276]	@ (8002684 <newdata+0x22c>)
 8002570:	701a      	strb	r2, [r3, #0]
            _payload_length += (uint16_t)(data << 8);
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	b29b      	uxth	r3, r3
 8002576:	021b      	lsls	r3, r3, #8
 8002578:	b29a      	uxth	r2, r3
 800257a:	4b44      	ldr	r3, [pc, #272]	@ (800268c <newdata+0x234>)
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	4413      	add	r3, r2
 8002580:	b29a      	uxth	r2, r3
 8002582:	4b42      	ldr	r3, [pc, #264]	@ (800268c <newdata+0x234>)
 8002584:	801a      	strh	r2, [r3, #0]
            if (_payload_length > UBLOX_BUFFER_SIZE) {
 8002586:	4b41      	ldr	r3, [pc, #260]	@ (800268c <newdata+0x234>)
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	2bc8      	cmp	r3, #200	@ 0xc8
 800258c:	d905      	bls.n	800259a <newdata+0x142>
                _payload_length = 0;
 800258e:	4b3f      	ldr	r3, [pc, #252]	@ (800268c <newdata+0x234>)
 8002590:	2200      	movs	r2, #0
 8002592:	801a      	strh	r2, [r3, #0]
                _step = 0;
 8002594:	4b39      	ldr	r3, [pc, #228]	@ (800267c <newdata+0x224>)
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]
            }
            _payload_counter = 0;   
 800259a:	4b3d      	ldr	r3, [pc, #244]	@ (8002690 <newdata+0x238>)
 800259c:	2200      	movs	r2, #0
 800259e:	801a      	strh	r2, [r3, #0]
            break;
 80025a0:	e066      	b.n	8002670 <newdata+0x218>
        case 6:
            _ck_b += (_ck_a += data);     
 80025a2:	4b37      	ldr	r3, [pc, #220]	@ (8002680 <newdata+0x228>)
 80025a4:	781a      	ldrb	r2, [r3, #0]
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	4413      	add	r3, r2
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	4b34      	ldr	r3, [pc, #208]	@ (8002680 <newdata+0x228>)
 80025ae:	701a      	strb	r2, [r3, #0]
 80025b0:	4b33      	ldr	r3, [pc, #204]	@ (8002680 <newdata+0x228>)
 80025b2:	781a      	ldrb	r2, [r3, #0]
 80025b4:	4b33      	ldr	r3, [pc, #204]	@ (8002684 <newdata+0x22c>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	4413      	add	r3, r2
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	4b31      	ldr	r3, [pc, #196]	@ (8002684 <newdata+0x22c>)
 80025be:	701a      	strb	r2, [r3, #0]
            if (_payload_counter < UBLOX_BUFFER_SIZE) {
 80025c0:	4b33      	ldr	r3, [pc, #204]	@ (8002690 <newdata+0x238>)
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	2bc7      	cmp	r3, #199	@ 0xc7
 80025c6:	d805      	bhi.n	80025d4 <newdata+0x17c>
                _buffer.bytes[_payload_counter] = data;
 80025c8:	4b31      	ldr	r3, [pc, #196]	@ (8002690 <newdata+0x238>)
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	4619      	mov	r1, r3
 80025ce:	4a31      	ldr	r2, [pc, #196]	@ (8002694 <newdata+0x23c>)
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	5453      	strb	r3, [r2, r1]
            }
            if (++_payload_counter == _payload_length)
 80025d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002690 <newdata+0x238>)
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	3301      	adds	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002690 <newdata+0x238>)
 80025de:	801a      	strh	r2, [r3, #0]
 80025e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002690 <newdata+0x238>)
 80025e2:	881a      	ldrh	r2, [r3, #0]
 80025e4:	4b29      	ldr	r3, [pc, #164]	@ (800268c <newdata+0x234>)
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d13c      	bne.n	8002666 <newdata+0x20e>
                _step++;
 80025ec:	4b23      	ldr	r3, [pc, #140]	@ (800267c <newdata+0x224>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	3301      	adds	r3, #1
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	4b21      	ldr	r3, [pc, #132]	@ (800267c <newdata+0x224>)
 80025f6:	701a      	strb	r2, [r3, #0]
            break;
 80025f8:	e035      	b.n	8002666 <newdata+0x20e>
        case 7:
            _step++;
 80025fa:	4b20      	ldr	r3, [pc, #128]	@ (800267c <newdata+0x224>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	3301      	adds	r3, #1
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4b1e      	ldr	r3, [pc, #120]	@ (800267c <newdata+0x224>)
 8002604:	701a      	strb	r2, [r3, #0]
            if (_ck_a != data)
 8002606:	4b1e      	ldr	r3, [pc, #120]	@ (8002680 <newdata+0x228>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	79fa      	ldrb	r2, [r7, #7]
 800260c:	429a      	cmp	r2, r3
 800260e:	d02c      	beq.n	800266a <newdata+0x212>
                _step = 0;         
 8002610:	4b1a      	ldr	r3, [pc, #104]	@ (800267c <newdata+0x224>)
 8002612:	2200      	movs	r2, #0
 8002614:	701a      	strb	r2, [r3, #0]
            break;
 8002616:	e028      	b.n	800266a <newdata+0x212>
        case 8:
            _step = 0;
 8002618:	4b18      	ldr	r3, [pc, #96]	@ (800267c <newdata+0x224>)
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
            if (_ck_b != data)
 800261e:	4b19      	ldr	r3, [pc, #100]	@ (8002684 <newdata+0x22c>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	79fa      	ldrb	r2, [r7, #7]
 8002624:	429a      	cmp	r2, r3
 8002626:	d122      	bne.n	800266e <newdata+0x216>
                break;   
			 _therad_read_time_ms = micros() - current_time_ms;
 8002628:	4b1b      	ldr	r3, [pc, #108]	@ (8002698 <newdata+0x240>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002630:	4b1a      	ldr	r3, [pc, #104]	@ (800269c <newdata+0x244>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	441a      	add	r2, r3
 8002636:	4b1a      	ldr	r3, [pc, #104]	@ (80026a0 <newdata+0x248>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	4a19      	ldr	r2, [pc, #100]	@ (80026a4 <newdata+0x24c>)
 800263e:	6013      	str	r3, [r2, #0]
			 current_time_ms = micros();
 8002640:	4b15      	ldr	r3, [pc, #84]	@ (8002698 <newdata+0x240>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002648:	4b14      	ldr	r3, [pc, #80]	@ (800269c <newdata+0x244>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4413      	add	r3, r2
 800264e:	4a14      	ldr	r2, [pc, #80]	@ (80026a0 <newdata+0x248>)
 8002650:	6013      	str	r3, [r2, #0]
            if (parse_msg())
 8002652:	f7ff fe1b 	bl	800228c <parse_msg>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d009      	beq.n	8002670 <newdata+0x218>
            {
                parsed = TRUE;
 800265c:	2301      	movs	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
 8002660:	e006      	b.n	8002670 <newdata+0x218>
            break;
 8002662:	bf00      	nop
 8002664:	e004      	b.n	8002670 <newdata+0x218>
            break;
 8002666:	bf00      	nop
 8002668:	e002      	b.n	8002670 <newdata+0x218>
            break;
 800266a:	bf00      	nop
 800266c:	e000      	b.n	8002670 <newdata+0x218>
                break;   
 800266e:	bf00      	nop
            }
    } 
    return parsed;
 8002670:	7bfb      	ldrb	r3, [r7, #15]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	200012c3 	.word	0x200012c3
 8002680:	200012c4 	.word	0x200012c4
 8002684:	200012c5 	.word	0x200012c5
 8002688:	200011e8 	.word	0x200011e8
 800268c:	200011ea 	.word	0x200011ea
 8002690:	200011ec 	.word	0x200011ec
 8002694:	200011f0 	.word	0x200011f0
 8002698:	2000132c 	.word	0x2000132c
 800269c:	20001330 	.word	0x20001330
 80026a0:	200012c8 	.word	0x200012c8
 80026a4:	200011e4 	.word	0x200011e4

080026a8 <imu_calibrate>:
  .gyr_lsb = 32.8f
};


static int32_t store_gyro[3];
void imu_calibrate(int16_t *offsx,int16_t *offsy,int16_t *offsz){
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
	axis3_t gyro_;
	integralFBx = 0;
 80026b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002764 <imu_calibrate+0xbc>)
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
	integralFBy = 0;
 80026bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002768 <imu_calibrate+0xc0>)
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
	integralFBz = 0;
 80026c4:	4b29      	ldr	r3, [pc, #164]	@ (800276c <imu_calibrate+0xc4>)
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
	for(int i = 0;i < OFFSET_CYCLE; i++){
 80026cc:	2300      	movs	r3, #0
 80026ce:	61fb      	str	r3, [r7, #28]
 80026d0:	e01f      	b.n	8002712 <imu_calibrate+0x6a>
		mpu6050_gyro_get_raw(&gyro_);
 80026d2:	f107 0314 	add.w	r3, r7, #20
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe ff3e 	bl	8001558 <mpu6050_gyro_get_raw>
		store_gyro[X] += gyro_.x;
 80026dc:	4b24      	ldr	r3, [pc, #144]	@ (8002770 <imu_calibrate+0xc8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80026e4:	4413      	add	r3, r2
 80026e6:	4a22      	ldr	r2, [pc, #136]	@ (8002770 <imu_calibrate+0xc8>)
 80026e8:	6013      	str	r3, [r2, #0]
    	store_gyro[Y] += gyro_.y;
 80026ea:	4b21      	ldr	r3, [pc, #132]	@ (8002770 <imu_calibrate+0xc8>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80026f2:	4413      	add	r3, r2
 80026f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002770 <imu_calibrate+0xc8>)
 80026f6:	6053      	str	r3, [r2, #4]
    	store_gyro[Z] += gyro_.z;
 80026f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002770 <imu_calibrate+0xc8>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002700:	4413      	add	r3, r2
 8002702:	4a1b      	ldr	r2, [pc, #108]	@ (8002770 <imu_calibrate+0xc8>)
 8002704:	6093      	str	r3, [r2, #8]
		HAL_Delay(1); // delay 1 ms
 8002706:	2001      	movs	r0, #1
 8002708:	f002 fb0e 	bl	8004d28 <HAL_Delay>
	for(int i = 0;i < OFFSET_CYCLE; i++){
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	3301      	adds	r3, #1
 8002710:	61fb      	str	r3, [r7, #28]
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002718:	dbdb      	blt.n	80026d2 <imu_calibrate+0x2a>
	}
	*offsx = store_gyro[X] / OFFSET_CYCLE;
 800271a:	4b15      	ldr	r3, [pc, #84]	@ (8002770 <imu_calibrate+0xc8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a15      	ldr	r2, [pc, #84]	@ (8002774 <imu_calibrate+0xcc>)
 8002720:	fb82 1203 	smull	r1, r2, r2, r3
 8002724:	1192      	asrs	r2, r2, #6
 8002726:	17db      	asrs	r3, r3, #31
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	b21a      	sxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	801a      	strh	r2, [r3, #0]
	*offsy = store_gyro[Y] / OFFSET_CYCLE;
 8002730:	4b0f      	ldr	r3, [pc, #60]	@ (8002770 <imu_calibrate+0xc8>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4a0f      	ldr	r2, [pc, #60]	@ (8002774 <imu_calibrate+0xcc>)
 8002736:	fb82 1203 	smull	r1, r2, r2, r3
 800273a:	1192      	asrs	r2, r2, #6
 800273c:	17db      	asrs	r3, r3, #31
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	b21a      	sxth	r2, r3
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	801a      	strh	r2, [r3, #0]
	*offsz = store_gyro[Z] / OFFSET_CYCLE;
 8002746:	4b0a      	ldr	r3, [pc, #40]	@ (8002770 <imu_calibrate+0xc8>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	4a0a      	ldr	r2, [pc, #40]	@ (8002774 <imu_calibrate+0xcc>)
 800274c:	fb82 1203 	smull	r1, r2, r2, r3
 8002750:	1192      	asrs	r2, r2, #6
 8002752:	17db      	asrs	r3, r3, #31
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	b21a      	sxth	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	801a      	strh	r2, [r3, #0]
}
 800275c:	bf00      	nop
 800275e:	3720      	adds	r7, #32
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	200012e4 	.word	0x200012e4
 8002768:	200012e8 	.word	0x200012e8
 800276c:	200012ec 	.word	0x200012ec
 8002770:	20001320 	.word	0x20001320
 8002774:	10624dd3 	.word	0x10624dd3

08002778 <update_ahrs>:
	m->roll   = atan2_approx(-acc.x, (1/invSqrt_(acc.y * acc.y + acc.z * acc.z)))*180/M_PIf;
}

static int8_t first_loop = 1;
// mahony filter
void update_ahrs(int16_t gx_, int16_t gy_, int16_t gz_, int16_t accx_, int16_t accy_, int16_t accz_,int16_t magx,int16_t magy,int16_t magz,float dt){
 8002778:	b590      	push	{r4, r7, lr}
 800277a:	b0a7      	sub	sp, #156	@ 0x9c
 800277c:	af00      	add	r7, sp, #0
 800277e:	4604      	mov	r4, r0
 8002780:	4608      	mov	r0, r1
 8002782:	4611      	mov	r1, r2
 8002784:	461a      	mov	r2, r3
 8002786:	4623      	mov	r3, r4
 8002788:	80fb      	strh	r3, [r7, #6]
 800278a:	4603      	mov	r3, r0
 800278c:	80bb      	strh	r3, [r7, #4]
 800278e:	460b      	mov	r3, r1
 8002790:	807b      	strh	r3, [r7, #2]
 8002792:	4613      	mov	r3, r2
 8002794:	803b      	strh	r3, [r7, #0]
    float acc_x,acc_y,acc_z;
    float vx, vy, vz;
    float emx,emy,emz,wx,wy,wz;
    float mx,my,mz,hx,hy,bx,bz;

	gx = (gx_/config.gyr_lsb) * RAD;
 8002796:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe fae6 	bl	8000d6c <__aeabi_i2f>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4baf      	ldr	r3, [pc, #700]	@ (8002a60 <update_ahrs+0x2e8>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	4619      	mov	r1, r3
 80027a8:	4610      	mov	r0, r2
 80027aa:	f7fe fbe7 	bl	8000f7c <__aeabi_fdiv>
 80027ae:	4603      	mov	r3, r0
 80027b0:	49ac      	ldr	r1, [pc, #688]	@ (8002a64 <update_ahrs+0x2ec>)
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe fb2e 	bl	8000e14 <__aeabi_fmul>
 80027b8:	4603      	mov	r3, r0
 80027ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	gy = (gy_/config.gyr_lsb) * RAD;
 80027be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fe fad2 	bl	8000d6c <__aeabi_i2f>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4ba5      	ldr	r3, [pc, #660]	@ (8002a60 <update_ahrs+0x2e8>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	4619      	mov	r1, r3
 80027d0:	4610      	mov	r0, r2
 80027d2:	f7fe fbd3 	bl	8000f7c <__aeabi_fdiv>
 80027d6:	4603      	mov	r3, r0
 80027d8:	49a2      	ldr	r1, [pc, #648]	@ (8002a64 <update_ahrs+0x2ec>)
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe fb1a 	bl	8000e14 <__aeabi_fmul>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	gz = (gz_/config.gyr_lsb) * RAD;
 80027e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe fabe 	bl	8000d6c <__aeabi_i2f>
 80027f0:	4602      	mov	r2, r0
 80027f2:	4b9b      	ldr	r3, [pc, #620]	@ (8002a60 <update_ahrs+0x2e8>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	4619      	mov	r1, r3
 80027f8:	4610      	mov	r0, r2
 80027fa:	f7fe fbbf 	bl	8000f7c <__aeabi_fdiv>
 80027fe:	4603      	mov	r3, r0
 8002800:	4998      	ldr	r1, [pc, #608]	@ (8002a64 <update_ahrs+0x2ec>)
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe fb06 	bl	8000e14 <__aeabi_fmul>
 8002808:	4603      	mov	r3, r0
 800280a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

	if(!((accx_ == 0) && (accy_ == 0) && ( accz_ == 0))) {
 800280e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d108      	bne.n	8002828 <update_ahrs+0xb0>
 8002816:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d104      	bne.n	8002828 <update_ahrs+0xb0>
 800281e:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 828d 	beq.w	8002d42 <update_ahrs+0x5ca>
		norm = invSqrt_(accx_ * accx_ + accy_ * accy_ + accz_ * accz_);
 8002828:	f9b7 3000 	ldrsh.w	r3, [r7]
 800282c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002830:	fb03 f202 	mul.w	r2, r3, r2
 8002834:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 8002838:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	@ 0xa8
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	441a      	add	r2, r3
 8002842:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 8002846:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	4413      	add	r3, r2
 8002850:	4618      	mov	r0, r3
 8002852:	f7fe fa8b 	bl	8000d6c <__aeabi_i2f>
 8002856:	4603      	mov	r3, r0
 8002858:	4618      	mov	r0, r3
 800285a:	f000 fdfb 	bl	8003454 <invSqrt_>
 800285e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
		acc_x = (float)accx_ * norm;
 8002862:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe fa80 	bl	8000d6c <__aeabi_i2f>
 800286c:	4603      	mov	r3, r0
 800286e:	4619      	mov	r1, r3
 8002870:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002874:	f7fe face 	bl	8000e14 <__aeabi_fmul>
 8002878:	4603      	mov	r3, r0
 800287a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		acc_y = (float)accy_ * norm;
 800287e:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe fa72 	bl	8000d6c <__aeabi_i2f>
 8002888:	4603      	mov	r3, r0
 800288a:	4619      	mov	r1, r3
 800288c:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002890:	f7fe fac0 	bl	8000e14 <__aeabi_fmul>
 8002894:	4603      	mov	r3, r0
 8002896:	67fb      	str	r3, [r7, #124]	@ 0x7c
		acc_z = (float)accz_ * norm;
 8002898:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 800289c:	4618      	mov	r0, r3
 800289e:	f7fe fa65 	bl	8000d6c <__aeabi_i2f>
 80028a2:	4603      	mov	r3, r0
 80028a4:	4619      	mov	r1, r3
 80028a6:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80028aa:	f7fe fab3 	bl	8000e14 <__aeabi_fmul>
 80028ae:	4603      	mov	r3, r0
 80028b0:	67bb      	str	r3, [r7, #120]	@ 0x78

		if(first_loop){
 80028b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002a68 <update_ahrs+0x2f0>)
 80028b4:	f993 3000 	ldrsb.w	r3, [r3]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00c      	beq.n	80028d6 <update_ahrs+0x15e>
			dcm[0][2] = acc_x;
 80028bc:	4a6b      	ldr	r2, [pc, #428]	@ (8002a6c <update_ahrs+0x2f4>)
 80028be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028c2:	6093      	str	r3, [r2, #8]
			dcm[1][2] = acc_y;
 80028c4:	4a69      	ldr	r2, [pc, #420]	@ (8002a6c <update_ahrs+0x2f4>)
 80028c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028c8:	6153      	str	r3, [r2, #20]
			dcm[2][2] = acc_z;
 80028ca:	4a68      	ldr	r2, [pc, #416]	@ (8002a6c <update_ahrs+0x2f4>)
 80028cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028ce:	6213      	str	r3, [r2, #32]
			first_loop = 0;
 80028d0:	4b65      	ldr	r3, [pc, #404]	@ (8002a68 <update_ahrs+0x2f0>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	701a      	strb	r2, [r3, #0]
		}

        if(USE_MAG){
			norm = invSqrt_(magx * magx + magy * magy + magz * magz);
 80028d6:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80028da:	f9b7 20b0 	ldrsh.w	r2, [r7, #176]	@ 0xb0
 80028de:	fb03 f202 	mul.w	r2, r3, r2
 80028e2:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 80028e6:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	@ 0xb4
 80028ea:	fb01 f303 	mul.w	r3, r1, r3
 80028ee:	441a      	add	r2, r3
 80028f0:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	@ 0xb8
 80028f4:	f9b7 10b8 	ldrsh.w	r1, [r7, #184]	@ 0xb8
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe fa34 	bl	8000d6c <__aeabi_i2f>
 8002904:	4603      	mov	r3, r0
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fda4 	bl	8003454 <invSqrt_>
 800290c:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
			mx = magx * norm;
 8002910:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe fa29 	bl	8000d6c <__aeabi_i2f>
 800291a:	4603      	mov	r3, r0
 800291c:	4619      	mov	r1, r3
 800291e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002922:	f7fe fa77 	bl	8000e14 <__aeabi_fmul>
 8002926:	4603      	mov	r3, r0
 8002928:	677b      	str	r3, [r7, #116]	@ 0x74
			my = magy * norm;
 800292a:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe fa1c 	bl	8000d6c <__aeabi_i2f>
 8002934:	4603      	mov	r3, r0
 8002936:	4619      	mov	r1, r3
 8002938:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800293c:	f7fe fa6a 	bl	8000e14 <__aeabi_fmul>
 8002940:	4603      	mov	r3, r0
 8002942:	673b      	str	r3, [r7, #112]	@ 0x70
			mz = magz * norm;
 8002944:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	@ 0xb8
 8002948:	4618      	mov	r0, r3
 800294a:	f7fe fa0f 	bl	8000d6c <__aeabi_i2f>
 800294e:	4603      	mov	r3, r0
 8002950:	4619      	mov	r1, r3
 8002952:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002956:	f7fe fa5d 	bl	8000e14 <__aeabi_fmul>
 800295a:	4603      	mov	r3, r0
 800295c:	66fb      	str	r3, [r7, #108]	@ 0x6c

			hx = mx * dcm[0][0] + my * dcm[1][0] + mz * dcm[2][0];
 800295e:	4b43      	ldr	r3, [pc, #268]	@ (8002a6c <update_ahrs+0x2f4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8002964:	4618      	mov	r0, r3
 8002966:	f7fe fa55 	bl	8000e14 <__aeabi_fmul>
 800296a:	4603      	mov	r3, r0
 800296c:	461c      	mov	r4, r3
 800296e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a6c <update_ahrs+0x2f4>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002974:	4618      	mov	r0, r3
 8002976:	f7fe fa4d 	bl	8000e14 <__aeabi_fmul>
 800297a:	4603      	mov	r3, r0
 800297c:	4619      	mov	r1, r3
 800297e:	4620      	mov	r0, r4
 8002980:	f7fe f940 	bl	8000c04 <__addsf3>
 8002984:	4603      	mov	r3, r0
 8002986:	461c      	mov	r4, r3
 8002988:	4b38      	ldr	r3, [pc, #224]	@ (8002a6c <update_ahrs+0x2f4>)
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe fa40 	bl	8000e14 <__aeabi_fmul>
 8002994:	4603      	mov	r3, r0
 8002996:	4619      	mov	r1, r3
 8002998:	4620      	mov	r0, r4
 800299a:	f7fe f933 	bl	8000c04 <__addsf3>
 800299e:	4603      	mov	r3, r0
 80029a0:	66bb      	str	r3, [r7, #104]	@ 0x68
			hy = mx * dcm[0][1] + my * dcm[1][1] + mz * dcm[2][1];
 80029a2:	4b32      	ldr	r3, [pc, #200]	@ (8002a6c <update_ahrs+0x2f4>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fe fa33 	bl	8000e14 <__aeabi_fmul>
 80029ae:	4603      	mov	r3, r0
 80029b0:	461c      	mov	r4, r3
 80029b2:	4b2e      	ldr	r3, [pc, #184]	@ (8002a6c <update_ahrs+0x2f4>)
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fe fa2b 	bl	8000e14 <__aeabi_fmul>
 80029be:	4603      	mov	r3, r0
 80029c0:	4619      	mov	r1, r3
 80029c2:	4620      	mov	r0, r4
 80029c4:	f7fe f91e 	bl	8000c04 <__addsf3>
 80029c8:	4603      	mov	r3, r0
 80029ca:	461c      	mov	r4, r3
 80029cc:	4b27      	ldr	r3, [pc, #156]	@ (8002a6c <update_ahrs+0x2f4>)
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fe fa1e 	bl	8000e14 <__aeabi_fmul>
 80029d8:	4603      	mov	r3, r0
 80029da:	4619      	mov	r1, r3
 80029dc:	4620      	mov	r0, r4
 80029de:	f7fe f911 	bl	8000c04 <__addsf3>
 80029e2:	4603      	mov	r3, r0
 80029e4:	667b      	str	r3, [r7, #100]	@ 0x64
			bz = mx * dcm[0][2] + my * dcm[1][2] + mz * dcm[2][2];
 80029e6:	4b21      	ldr	r3, [pc, #132]	@ (8002a6c <update_ahrs+0x2f4>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fe fa11 	bl	8000e14 <__aeabi_fmul>
 80029f2:	4603      	mov	r3, r0
 80029f4:	461c      	mov	r4, r3
 80029f6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a6c <update_ahrs+0x2f4>)
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fe fa09 	bl	8000e14 <__aeabi_fmul>
 8002a02:	4603      	mov	r3, r0
 8002a04:	4619      	mov	r1, r3
 8002a06:	4620      	mov	r0, r4
 8002a08:	f7fe f8fc 	bl	8000c04 <__addsf3>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	461c      	mov	r4, r3
 8002a10:	4b16      	ldr	r3, [pc, #88]	@ (8002a6c <update_ahrs+0x2f4>)
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe f9fc 	bl	8000e14 <__aeabi_fmul>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4620      	mov	r0, r4
 8002a22:	f7fe f8ef 	bl	8000c04 <__addsf3>
 8002a26:	4603      	mov	r3, r0
 8002a28:	663b      	str	r3, [r7, #96]	@ 0x60

			bx = sqrtf(hx * hx + hy * hy);
 8002a2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002a2c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002a2e:	f7fe f9f1 	bl	8000e14 <__aeabi_fmul>
 8002a32:	4603      	mov	r3, r0
 8002a34:	461c      	mov	r4, r3
 8002a36:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8002a38:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002a3a:	f7fe f9eb 	bl	8000e14 <__aeabi_fmul>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	4619      	mov	r1, r3
 8002a42:	4620      	mov	r0, r4
 8002a44:	f7fe f8de 	bl	8000c04 <__addsf3>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f00f fb26 	bl	801209c <sqrtf>
 8002a50:	65f8      	str	r0, [r7, #92]	@ 0x5c

			wx = bx * dcm[0][0] + bz * dcm[0][2];
 8002a52:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <update_ahrs+0x2f4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe f9db 	bl	8000e14 <__aeabi_fmul>
 8002a5e:	e007      	b.n	8002a70 <update_ahrs+0x2f8>
 8002a60:	20000014 	.word	0x20000014
 8002a64:	3c8efa35 	.word	0x3c8efa35
 8002a68:	20000020 	.word	0x20000020
 8002a6c:	200012fc 	.word	0x200012fc
 8002a70:	4603      	mov	r3, r0
 8002a72:	461c      	mov	r4, r3
 8002a74:	4b8c      	ldr	r3, [pc, #560]	@ (8002ca8 <update_ahrs+0x530>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe f9ca 	bl	8000e14 <__aeabi_fmul>
 8002a80:	4603      	mov	r3, r0
 8002a82:	4619      	mov	r1, r3
 8002a84:	4620      	mov	r0, r4
 8002a86:	f7fe f8bd 	bl	8000c04 <__addsf3>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	65bb      	str	r3, [r7, #88]	@ 0x58
			wy = bx * dcm[1][0] + bz * dcm[1][2];
 8002a8e:	4b86      	ldr	r3, [pc, #536]	@ (8002ca8 <update_ahrs+0x530>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fe f9bd 	bl	8000e14 <__aeabi_fmul>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	461c      	mov	r4, r3
 8002a9e:	4b82      	ldr	r3, [pc, #520]	@ (8002ca8 <update_ahrs+0x530>)
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fe f9b5 	bl	8000e14 <__aeabi_fmul>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	4619      	mov	r1, r3
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f7fe f8a8 	bl	8000c04 <__addsf3>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	657b      	str	r3, [r7, #84]	@ 0x54
			wz = bx * dcm[2][0] + bz * dcm[2][2];
 8002ab8:	4b7b      	ldr	r3, [pc, #492]	@ (8002ca8 <update_ahrs+0x530>)
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe f9a8 	bl	8000e14 <__aeabi_fmul>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	461c      	mov	r4, r3
 8002ac8:	4b77      	ldr	r3, [pc, #476]	@ (8002ca8 <update_ahrs+0x530>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe f9a0 	bl	8000e14 <__aeabi_fmul>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4620      	mov	r0, r4
 8002ada:	f7fe f893 	bl	8000c04 <__addsf3>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	653b      	str	r3, [r7, #80]	@ 0x50

			emx = my * wz - mz * wy;
 8002ae2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002ae4:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002ae6:	f7fe f995 	bl	8000e14 <__aeabi_fmul>
 8002aea:	4603      	mov	r3, r0
 8002aec:	461c      	mov	r4, r3
 8002aee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002af0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002af2:	f7fe f98f 	bl	8000e14 <__aeabi_fmul>
 8002af6:	4603      	mov	r3, r0
 8002af8:	4619      	mov	r1, r3
 8002afa:	4620      	mov	r0, r4
 8002afc:	f7fe f880 	bl	8000c00 <__aeabi_fsub>
 8002b00:	4603      	mov	r3, r0
 8002b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
			emy = mz * wx - mx * wz;
 8002b04:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002b06:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002b08:	f7fe f984 	bl	8000e14 <__aeabi_fmul>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	461c      	mov	r4, r3
 8002b10:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002b12:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002b14:	f7fe f97e 	bl	8000e14 <__aeabi_fmul>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	f7fe f86f 	bl	8000c00 <__aeabi_fsub>
 8002b22:	4603      	mov	r3, r0
 8002b24:	64bb      	str	r3, [r7, #72]	@ 0x48
			emz = mx * wy - my * wx;
 8002b26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b28:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002b2a:	f7fe f973 	bl	8000e14 <__aeabi_fmul>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	461c      	mov	r4, r3
 8002b32:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002b34:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002b36:	f7fe f96d 	bl	8000e14 <__aeabi_fmul>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4620      	mov	r0, r4
 8002b40:	f7fe f85e 	bl	8000c00 <__aeabi_fsub>
 8002b44:	4603      	mov	r3, r0
 8002b46:	647b      	str	r3, [r7, #68]	@ 0x44
			emx = 0.0f;
			emy = 0.0f;
			emz = 0.0f;
		}

		vx = dcm[0][2];
 8002b48:	4b57      	ldr	r3, [pc, #348]	@ (8002ca8 <update_ahrs+0x530>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	643b      	str	r3, [r7, #64]	@ 0x40
		vy = dcm[1][2];
 8002b4e:	4b56      	ldr	r3, [pc, #344]	@ (8002ca8 <update_ahrs+0x530>)
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
		vz = dcm[2][2];
 8002b54:	4b54      	ldr	r3, [pc, #336]	@ (8002ca8 <update_ahrs+0x530>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	63bb      	str	r3, [r7, #56]	@ 0x38

		ex = acc_y * vz - acc_z * vy;
 8002b5a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b5c:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8002b5e:	f7fe f959 	bl	8000e14 <__aeabi_fmul>
 8002b62:	4603      	mov	r3, r0
 8002b64:	461c      	mov	r4, r3
 8002b66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b68:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002b6a:	f7fe f953 	bl	8000e14 <__aeabi_fmul>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4619      	mov	r1, r3
 8002b72:	4620      	mov	r0, r4
 8002b74:	f7fe f844 	bl	8000c00 <__aeabi_fsub>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	637b      	str	r3, [r7, #52]	@ 0x34
		ey = acc_z * vx - acc_x * vz;
 8002b7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b7e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002b80:	f7fe f948 	bl	8000e14 <__aeabi_fmul>
 8002b84:	4603      	mov	r3, r0
 8002b86:	461c      	mov	r4, r3
 8002b88:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b8a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002b8e:	f7fe f941 	bl	8000e14 <__aeabi_fmul>
 8002b92:	4603      	mov	r3, r0
 8002b94:	4619      	mov	r1, r3
 8002b96:	4620      	mov	r0, r4
 8002b98:	f7fe f832 	bl	8000c00 <__aeabi_fsub>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	633b      	str	r3, [r7, #48]	@ 0x30
		ez = acc_x * vy - acc_y * vx;
 8002ba0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ba2:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002ba6:	f7fe f935 	bl	8000e14 <__aeabi_fmul>
 8002baa:	4603      	mov	r3, r0
 8002bac:	461c      	mov	r4, r3
 8002bae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002bb0:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8002bb2:	f7fe f92f 	bl	8000e14 <__aeabi_fmul>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4620      	mov	r0, r4
 8002bbc:	f7fe f820 	bl	8000c00 <__aeabi_fsub>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( Ki_imu  > 0.0f) {
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	f04f 0100 	mov.w	r1, #0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe fadd 	bl	800118c <__aeabi_fcmpgt>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d06f      	beq.n	8002cb8 <update_ahrs+0x540>
			integralFBx +=  Ki_imu  * ex * dt;
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fe f918 	bl	8000e14 <__aeabi_fmul>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe f912 	bl	8000e14 <__aeabi_fmul>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8002cac <update_ahrs+0x534>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	f7fe f802 	bl	8000c04 <__addsf3>
 8002c00:	4603      	mov	r3, r0
 8002c02:	461a      	mov	r2, r3
 8002c04:	4b29      	ldr	r3, [pc, #164]	@ (8002cac <update_ahrs+0x534>)
 8002c06:	601a      	str	r2, [r3, #0]
			integralFBy +=  Ki_imu  * ey * dt;
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe f900 	bl	8000e14 <__aeabi_fmul>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe f8fa 	bl	8000e14 <__aeabi_fmul>
 8002c20:	4603      	mov	r3, r0
 8002c22:	461a      	mov	r2, r3
 8002c24:	4b22      	ldr	r3, [pc, #136]	@ (8002cb0 <update_ahrs+0x538>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	f7fd ffea 	bl	8000c04 <__addsf3>
 8002c30:	4603      	mov	r3, r0
 8002c32:	461a      	mov	r2, r3
 8002c34:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb0 <update_ahrs+0x538>)
 8002c36:	601a      	str	r2, [r3, #0]
			integralFBz +=  Ki_imu  * ez * dt;
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fe f8e8 	bl	8000e14 <__aeabi_fmul>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe f8e2 	bl	8000e14 <__aeabi_fmul>
 8002c50:	4603      	mov	r3, r0
 8002c52:	461a      	mov	r2, r3
 8002c54:	4b17      	ldr	r3, [pc, #92]	@ (8002cb4 <update_ahrs+0x53c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	f7fd ffd2 	bl	8000c04 <__addsf3>
 8002c60:	4603      	mov	r3, r0
 8002c62:	461a      	mov	r2, r3
 8002c64:	4b13      	ldr	r3, [pc, #76]	@ (8002cb4 <update_ahrs+0x53c>)
 8002c66:	601a      	str	r2, [r3, #0]
			gx += integralFBx;
 8002c68:	4b10      	ldr	r3, [pc, #64]	@ (8002cac <update_ahrs+0x534>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002c72:	f7fd ffc7 	bl	8000c04 <__addsf3>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			gy += integralFBy;
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb0 <update_ahrs+0x538>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4619      	mov	r1, r3
 8002c82:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002c86:	f7fd ffbd 	bl	8000c04 <__addsf3>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			gz += integralFBz;
 8002c90:	4b08      	ldr	r3, [pc, #32]	@ (8002cb4 <update_ahrs+0x53c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4619      	mov	r1, r3
 8002c96:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002c9a:	f7fd ffb3 	bl	8000c04 <__addsf3>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002ca4:	e014      	b.n	8002cd0 <update_ahrs+0x558>
 8002ca6:	bf00      	nop
 8002ca8:	200012fc 	.word	0x200012fc
 8002cac:	200012e4 	.word	0x200012e4
 8002cb0:	200012e8 	.word	0x200012e8
 8002cb4:	200012ec 	.word	0x200012ec
		} else {
			integralFBx = 0.0f;
 8002cb8:	4ba5      	ldr	r3, [pc, #660]	@ (8002f50 <update_ahrs+0x7d8>)
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8002cc0:	4ba4      	ldr	r3, [pc, #656]	@ (8002f54 <update_ahrs+0x7dc>)
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8002cc8:	4ba3      	ldr	r3, [pc, #652]	@ (8002f58 <update_ahrs+0x7e0>)
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
		}

		gx += Kp_imu * ex;
 8002cd0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002cd4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fe f89c 	bl	8000e14 <__aeabi_fmul>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	4619      	mov	r1, r3
 8002ce0:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002ce4:	f7fd ff8e 	bl	8000c04 <__addsf3>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		gy += Kp_imu * ey;
 8002cee:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002cf2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fe f88d 	bl	8000e14 <__aeabi_fmul>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002d02:	f7fd ff7f 	bl	8000c04 <__addsf3>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		gz += Kp_imu * ez + emz * Kp_mag;
 8002d0c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002d10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe f87e 	bl	8000e14 <__aeabi_fmul>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	461c      	mov	r4, r3
 8002d1c:	4b8f      	ldr	r3, [pc, #572]	@ (8002f5c <update_ahrs+0x7e4>)
 8002d1e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fe f877 	bl	8000e14 <__aeabi_fmul>
 8002d26:	4603      	mov	r3, r0
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	f7fd ff6a 	bl	8000c04 <__addsf3>
 8002d30:	4603      	mov	r3, r0
 8002d32:	4619      	mov	r1, r3
 8002d34:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002d38:	f7fd ff64 	bl	8000c04 <__addsf3>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	}

	gx *= (0.5f * dt);
 8002d42:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002d46:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8002d4a:	f7fe f863 	bl	8000e14 <__aeabi_fmul>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4619      	mov	r1, r3
 8002d52:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002d56:	f7fe f85d 	bl	8000e14 <__aeabi_fmul>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	gy *= (0.5f * dt);
 8002d60:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002d64:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8002d68:	f7fe f854 	bl	8000e14 <__aeabi_fmul>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	4619      	mov	r1, r3
 8002d70:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002d74:	f7fe f84e 	bl	8000e14 <__aeabi_fmul>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	gz *= (0.5f * dt);
 8002d7e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002d82:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8002d86:	f7fe f845 	bl	8000e14 <__aeabi_fmul>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002d92:	f7fe f83f 	bl	8000e14 <__aeabi_fmul>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

	q0 += (-q1 * gx - q2 * gy - q3 * gz);
 8002d9c:	4b70      	ldr	r3, [pc, #448]	@ (8002f60 <update_ahrs+0x7e8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002da4:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fe f833 	bl	8000e14 <__aeabi_fmul>
 8002dae:	4603      	mov	r3, r0
 8002db0:	461c      	mov	r4, r3
 8002db2:	4b6c      	ldr	r3, [pc, #432]	@ (8002f64 <update_ahrs+0x7ec>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fe f82a 	bl	8000e14 <__aeabi_fmul>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	f7fd ff1b 	bl	8000c00 <__aeabi_fsub>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	461c      	mov	r4, r3
 8002dce:	4b66      	ldr	r3, [pc, #408]	@ (8002f68 <update_ahrs+0x7f0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe f81c 	bl	8000e14 <__aeabi_fmul>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4619      	mov	r1, r3
 8002de0:	4620      	mov	r0, r4
 8002de2:	f7fd ff0d 	bl	8000c00 <__aeabi_fsub>
 8002de6:	4603      	mov	r3, r0
 8002de8:	461a      	mov	r2, r3
 8002dea:	4b60      	ldr	r3, [pc, #384]	@ (8002f6c <update_ahrs+0x7f4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4619      	mov	r1, r3
 8002df0:	4610      	mov	r0, r2
 8002df2:	f7fd ff07 	bl	8000c04 <__addsf3>
 8002df6:	4603      	mov	r3, r0
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4b5c      	ldr	r3, [pc, #368]	@ (8002f6c <update_ahrs+0x7f4>)
 8002dfc:	601a      	str	r2, [r3, #0]
	q1 += ( q0 * gx + q2 * gz - q3 * gy);
 8002dfe:	4b5b      	ldr	r3, [pc, #364]	@ (8002f6c <update_ahrs+0x7f4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fe f804 	bl	8000e14 <__aeabi_fmul>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	461c      	mov	r4, r3
 8002e10:	4b54      	ldr	r3, [pc, #336]	@ (8002f64 <update_ahrs+0x7ec>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fd fffb 	bl	8000e14 <__aeabi_fmul>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4619      	mov	r1, r3
 8002e22:	4620      	mov	r0, r4
 8002e24:	f7fd feee 	bl	8000c04 <__addsf3>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	461c      	mov	r4, r3
 8002e2c:	4b4e      	ldr	r3, [pc, #312]	@ (8002f68 <update_ahrs+0x7f0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fd ffed 	bl	8000e14 <__aeabi_fmul>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4620      	mov	r0, r4
 8002e40:	f7fd fede 	bl	8000c00 <__aeabi_fsub>
 8002e44:	4603      	mov	r3, r0
 8002e46:	461a      	mov	r2, r3
 8002e48:	4b45      	ldr	r3, [pc, #276]	@ (8002f60 <update_ahrs+0x7e8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4610      	mov	r0, r2
 8002e50:	f7fd fed8 	bl	8000c04 <__addsf3>
 8002e54:	4603      	mov	r3, r0
 8002e56:	461a      	mov	r2, r3
 8002e58:	4b41      	ldr	r3, [pc, #260]	@ (8002f60 <update_ahrs+0x7e8>)
 8002e5a:	601a      	str	r2, [r3, #0]
	q2 += ( q0 * gy - q1 * gz + q3 * gx);
 8002e5c:	4b43      	ldr	r3, [pc, #268]	@ (8002f6c <update_ahrs+0x7f4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fd ffd5 	bl	8000e14 <__aeabi_fmul>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	461c      	mov	r4, r3
 8002e6e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f60 <update_ahrs+0x7e8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fd ffcc 	bl	8000e14 <__aeabi_fmul>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4620      	mov	r0, r4
 8002e82:	f7fd febd 	bl	8000c00 <__aeabi_fsub>
 8002e86:	4603      	mov	r3, r0
 8002e88:	461c      	mov	r4, r3
 8002e8a:	4b37      	ldr	r3, [pc, #220]	@ (8002f68 <update_ahrs+0x7f0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fd ffbe 	bl	8000e14 <__aeabi_fmul>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4620      	mov	r0, r4
 8002e9e:	f7fd feb1 	bl	8000c04 <__addsf3>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4b2f      	ldr	r3, [pc, #188]	@ (8002f64 <update_ahrs+0x7ec>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4610      	mov	r0, r2
 8002eae:	f7fd fea9 	bl	8000c04 <__addsf3>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4b2b      	ldr	r3, [pc, #172]	@ (8002f64 <update_ahrs+0x7ec>)
 8002eb8:	601a      	str	r2, [r3, #0]
	q3 += ( q0 * gz + q1 * gy - q2 * gx);
 8002eba:	4b2c      	ldr	r3, [pc, #176]	@ (8002f6c <update_ahrs+0x7f4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fd ffa6 	bl	8000e14 <__aeabi_fmul>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	461c      	mov	r4, r3
 8002ecc:	4b24      	ldr	r3, [pc, #144]	@ (8002f60 <update_ahrs+0x7e8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fd ff9d 	bl	8000e14 <__aeabi_fmul>
 8002eda:	4603      	mov	r3, r0
 8002edc:	4619      	mov	r1, r3
 8002ede:	4620      	mov	r0, r4
 8002ee0:	f7fd fe90 	bl	8000c04 <__addsf3>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	461c      	mov	r4, r3
 8002ee8:	4b1e      	ldr	r3, [pc, #120]	@ (8002f64 <update_ahrs+0x7ec>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fd ff8f 	bl	8000e14 <__aeabi_fmul>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4620      	mov	r0, r4
 8002efc:	f7fd fe80 	bl	8000c00 <__aeabi_fsub>
 8002f00:	4603      	mov	r3, r0
 8002f02:	461a      	mov	r2, r3
 8002f04:	4b18      	ldr	r3, [pc, #96]	@ (8002f68 <update_ahrs+0x7f0>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	f7fd fe7a 	bl	8000c04 <__addsf3>
 8002f10:	4603      	mov	r3, r0
 8002f12:	461a      	mov	r2, r3
 8002f14:	4b14      	ldr	r3, [pc, #80]	@ (8002f68 <update_ahrs+0x7f0>)
 8002f16:	601a      	str	r2, [r3, #0]

	norm = invSqrt_(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002f18:	4b14      	ldr	r3, [pc, #80]	@ (8002f6c <update_ahrs+0x7f4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a13      	ldr	r2, [pc, #76]	@ (8002f6c <update_ahrs+0x7f4>)
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fd ff76 	bl	8000e14 <__aeabi_fmul>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	461c      	mov	r4, r3
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f60 <update_ahrs+0x7e8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a0b      	ldr	r2, [pc, #44]	@ (8002f60 <update_ahrs+0x7e8>)
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fd ff6c 	bl	8000e14 <__aeabi_fmul>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4620      	mov	r0, r4
 8002f42:	f7fd fe5f 	bl	8000c04 <__addsf3>
 8002f46:	4603      	mov	r3, r0
 8002f48:	461c      	mov	r4, r3
 8002f4a:	4b06      	ldr	r3, [pc, #24]	@ (8002f64 <update_ahrs+0x7ec>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	e00f      	b.n	8002f70 <update_ahrs+0x7f8>
 8002f50:	200012e4 	.word	0x200012e4
 8002f54:	200012e8 	.word	0x200012e8
 8002f58:	200012ec 	.word	0x200012ec
 8002f5c:	40a00000 	.word	0x40a00000
 8002f60:	200012f0 	.word	0x200012f0
 8002f64:	200012f4 	.word	0x200012f4
 8002f68:	200012f8 	.word	0x200012f8
 8002f6c:	20000010 	.word	0x20000010
 8002f70:	4a96      	ldr	r2, [pc, #600]	@ (80031cc <update_ahrs+0xa54>)
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	4611      	mov	r1, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fd ff4c 	bl	8000e14 <__aeabi_fmul>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4620      	mov	r0, r4
 8002f82:	f7fd fe3f 	bl	8000c04 <__addsf3>
 8002f86:	4603      	mov	r3, r0
 8002f88:	461c      	mov	r4, r3
 8002f8a:	4b91      	ldr	r3, [pc, #580]	@ (80031d0 <update_ahrs+0xa58>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a90      	ldr	r2, [pc, #576]	@ (80031d0 <update_ahrs+0xa58>)
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fd ff3d 	bl	8000e14 <__aeabi_fmul>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f7fd fe30 	bl	8000c04 <__addsf3>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fa54 	bl	8003454 <invSqrt_>
 8002fac:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	q0 *= norm;
 8002fb0:	4b88      	ldr	r3, [pc, #544]	@ (80031d4 <update_ahrs+0xa5c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fd ff2b 	bl	8000e14 <__aeabi_fmul>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4b84      	ldr	r3, [pc, #528]	@ (80031d4 <update_ahrs+0xa5c>)
 8002fc4:	601a      	str	r2, [r3, #0]
	q1 *= norm;
 8002fc6:	4b84      	ldr	r3, [pc, #528]	@ (80031d8 <update_ahrs+0xa60>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fd ff20 	bl	8000e14 <__aeabi_fmul>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4b7f      	ldr	r3, [pc, #508]	@ (80031d8 <update_ahrs+0xa60>)
 8002fda:	601a      	str	r2, [r3, #0]
	q2 *= norm;
 8002fdc:	4b7b      	ldr	r3, [pc, #492]	@ (80031cc <update_ahrs+0xa54>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fd ff15 	bl	8000e14 <__aeabi_fmul>
 8002fea:	4603      	mov	r3, r0
 8002fec:	461a      	mov	r2, r3
 8002fee:	4b77      	ldr	r3, [pc, #476]	@ (80031cc <update_ahrs+0xa54>)
 8002ff0:	601a      	str	r2, [r3, #0]
	q3 *= norm;
 8002ff2:	4b77      	ldr	r3, [pc, #476]	@ (80031d0 <update_ahrs+0xa58>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd ff0a 	bl	8000e14 <__aeabi_fmul>
 8003000:	4603      	mov	r3, r0
 8003002:	461a      	mov	r2, r3
 8003004:	4b72      	ldr	r3, [pc, #456]	@ (80031d0 <update_ahrs+0xa58>)
 8003006:	601a      	str	r2, [r3, #0]
	
	float q0q1 = q0*q1;
 8003008:	4b72      	ldr	r3, [pc, #456]	@ (80031d4 <update_ahrs+0xa5c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a72      	ldr	r2, [pc, #456]	@ (80031d8 <update_ahrs+0xa60>)
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	4611      	mov	r1, r2
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fefe 	bl	8000e14 <__aeabi_fmul>
 8003018:	4603      	mov	r3, r0
 800301a:	62bb      	str	r3, [r7, #40]	@ 0x28
	float q0q2 = q0*q2;
 800301c:	4b6d      	ldr	r3, [pc, #436]	@ (80031d4 <update_ahrs+0xa5c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a6a      	ldr	r2, [pc, #424]	@ (80031cc <update_ahrs+0xa54>)
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	4611      	mov	r1, r2
 8003026:	4618      	mov	r0, r3
 8003028:	f7fd fef4 	bl	8000e14 <__aeabi_fmul>
 800302c:	4603      	mov	r3, r0
 800302e:	627b      	str	r3, [r7, #36]	@ 0x24
	float q0q3 = q0*q3;
 8003030:	4b68      	ldr	r3, [pc, #416]	@ (80031d4 <update_ahrs+0xa5c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a66      	ldr	r2, [pc, #408]	@ (80031d0 <update_ahrs+0xa58>)
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd feea 	bl	8000e14 <__aeabi_fmul>
 8003040:	4603      	mov	r3, r0
 8003042:	623b      	str	r3, [r7, #32]
	float q1q1 = q1*q1;
 8003044:	4b64      	ldr	r3, [pc, #400]	@ (80031d8 <update_ahrs+0xa60>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a63      	ldr	r2, [pc, #396]	@ (80031d8 <update_ahrs+0xa60>)
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	4611      	mov	r1, r2
 800304e:	4618      	mov	r0, r3
 8003050:	f7fd fee0 	bl	8000e14 <__aeabi_fmul>
 8003054:	4603      	mov	r3, r0
 8003056:	61fb      	str	r3, [r7, #28]
	float q1q2 = q1*q2;
 8003058:	4b5f      	ldr	r3, [pc, #380]	@ (80031d8 <update_ahrs+0xa60>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a5b      	ldr	r2, [pc, #364]	@ (80031cc <update_ahrs+0xa54>)
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f7fd fed6 	bl	8000e14 <__aeabi_fmul>
 8003068:	4603      	mov	r3, r0
 800306a:	61bb      	str	r3, [r7, #24]
	float q1q3 = q1*q3;
 800306c:	4b5a      	ldr	r3, [pc, #360]	@ (80031d8 <update_ahrs+0xa60>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a57      	ldr	r2, [pc, #348]	@ (80031d0 <update_ahrs+0xa58>)
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd fecc 	bl	8000e14 <__aeabi_fmul>
 800307c:	4603      	mov	r3, r0
 800307e:	617b      	str	r3, [r7, #20]
	float q2q2 = q2*q2;
 8003080:	4b52      	ldr	r3, [pc, #328]	@ (80031cc <update_ahrs+0xa54>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a51      	ldr	r2, [pc, #324]	@ (80031cc <update_ahrs+0xa54>)
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	4611      	mov	r1, r2
 800308a:	4618      	mov	r0, r3
 800308c:	f7fd fec2 	bl	8000e14 <__aeabi_fmul>
 8003090:	4603      	mov	r3, r0
 8003092:	613b      	str	r3, [r7, #16]
	float q2q3 = q2*q3;
 8003094:	4b4d      	ldr	r3, [pc, #308]	@ (80031cc <update_ahrs+0xa54>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a4d      	ldr	r2, [pc, #308]	@ (80031d0 <update_ahrs+0xa58>)
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	4611      	mov	r1, r2
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fd feb8 	bl	8000e14 <__aeabi_fmul>
 80030a4:	4603      	mov	r3, r0
 80030a6:	60fb      	str	r3, [r7, #12]
	float q3q3 = q3*q3;
 80030a8:	4b49      	ldr	r3, [pc, #292]	@ (80031d0 <update_ahrs+0xa58>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a48      	ldr	r2, [pc, #288]	@ (80031d0 <update_ahrs+0xa58>)
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	4611      	mov	r1, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fd feae 	bl	8000e14 <__aeabi_fmul>
 80030b8:	4603      	mov	r3, r0
 80030ba:	60bb      	str	r3, [r7, #8]

	// Quaternion to Rotation matrix
	dcm[0][0] = 2.0f*(0.5f - q2q2  - q3q3);
 80030bc:	6939      	ldr	r1, [r7, #16]
 80030be:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 80030c2:	f7fd fd9d 	bl	8000c00 <__aeabi_fsub>
 80030c6:	4603      	mov	r3, r0
 80030c8:	68b9      	ldr	r1, [r7, #8]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fd fd98 	bl	8000c00 <__aeabi_fsub>
 80030d0:	4603      	mov	r3, r0
 80030d2:	4619      	mov	r1, r3
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fd fd95 	bl	8000c04 <__addsf3>
 80030da:	4603      	mov	r3, r0
 80030dc:	461a      	mov	r2, r3
 80030de:	4b3f      	ldr	r3, [pc, #252]	@ (80031dc <update_ahrs+0xa64>)
 80030e0:	601a      	str	r2, [r3, #0]
	dcm[1][0] = 2.0f*(q1q2 - q0q3);
 80030e2:	6a39      	ldr	r1, [r7, #32]
 80030e4:	69b8      	ldr	r0, [r7, #24]
 80030e6:	f7fd fd8b 	bl	8000c00 <__aeabi_fsub>
 80030ea:	4603      	mov	r3, r0
 80030ec:	4619      	mov	r1, r3
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fd fd88 	bl	8000c04 <__addsf3>
 80030f4:	4603      	mov	r3, r0
 80030f6:	461a      	mov	r2, r3
 80030f8:	4b38      	ldr	r3, [pc, #224]	@ (80031dc <update_ahrs+0xa64>)
 80030fa:	60da      	str	r2, [r3, #12]
	dcm[2][0] = 2.0f*(q1q3 + q0q2);
 80030fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030fe:	6978      	ldr	r0, [r7, #20]
 8003100:	f7fd fd80 	bl	8000c04 <__addsf3>
 8003104:	4603      	mov	r3, r0
 8003106:	4619      	mov	r1, r3
 8003108:	4618      	mov	r0, r3
 800310a:	f7fd fd7b 	bl	8000c04 <__addsf3>
 800310e:	4603      	mov	r3, r0
 8003110:	461a      	mov	r2, r3
 8003112:	4b32      	ldr	r3, [pc, #200]	@ (80031dc <update_ahrs+0xa64>)
 8003114:	619a      	str	r2, [r3, #24]
	dcm[0][1] = 2.0f*(q1q2 + q0q3);
 8003116:	6a39      	ldr	r1, [r7, #32]
 8003118:	69b8      	ldr	r0, [r7, #24]
 800311a:	f7fd fd73 	bl	8000c04 <__addsf3>
 800311e:	4603      	mov	r3, r0
 8003120:	4619      	mov	r1, r3
 8003122:	4618      	mov	r0, r3
 8003124:	f7fd fd6e 	bl	8000c04 <__addsf3>
 8003128:	4603      	mov	r3, r0
 800312a:	461a      	mov	r2, r3
 800312c:	4b2b      	ldr	r3, [pc, #172]	@ (80031dc <update_ahrs+0xa64>)
 800312e:	605a      	str	r2, [r3, #4]
	dcm[1][1] = 2.0f*(0.5f - q1q1 - q3q3);
 8003130:	69f9      	ldr	r1, [r7, #28]
 8003132:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8003136:	f7fd fd63 	bl	8000c00 <__aeabi_fsub>
 800313a:	4603      	mov	r3, r0
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	4618      	mov	r0, r3
 8003140:	f7fd fd5e 	bl	8000c00 <__aeabi_fsub>
 8003144:	4603      	mov	r3, r0
 8003146:	4619      	mov	r1, r3
 8003148:	4618      	mov	r0, r3
 800314a:	f7fd fd5b 	bl	8000c04 <__addsf3>
 800314e:	4603      	mov	r3, r0
 8003150:	461a      	mov	r2, r3
 8003152:	4b22      	ldr	r3, [pc, #136]	@ (80031dc <update_ahrs+0xa64>)
 8003154:	611a      	str	r2, [r3, #16]
	dcm[2][1] = 2.0f*(q2q3 - q0q1);
 8003156:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f7fd fd51 	bl	8000c00 <__aeabi_fsub>
 800315e:	4603      	mov	r3, r0
 8003160:	4619      	mov	r1, r3
 8003162:	4618      	mov	r0, r3
 8003164:	f7fd fd4e 	bl	8000c04 <__addsf3>
 8003168:	4603      	mov	r3, r0
 800316a:	461a      	mov	r2, r3
 800316c:	4b1b      	ldr	r3, [pc, #108]	@ (80031dc <update_ahrs+0xa64>)
 800316e:	61da      	str	r2, [r3, #28]
	dcm[0][2] = 2.0f*(q1q3 - q0q2);
 8003170:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003172:	6978      	ldr	r0, [r7, #20]
 8003174:	f7fd fd44 	bl	8000c00 <__aeabi_fsub>
 8003178:	4603      	mov	r3, r0
 800317a:	4619      	mov	r1, r3
 800317c:	4618      	mov	r0, r3
 800317e:	f7fd fd41 	bl	8000c04 <__addsf3>
 8003182:	4603      	mov	r3, r0
 8003184:	461a      	mov	r2, r3
 8003186:	4b15      	ldr	r3, [pc, #84]	@ (80031dc <update_ahrs+0xa64>)
 8003188:	609a      	str	r2, [r3, #8]
	dcm[1][2] = 2.0f*(q2q3 + q0q1);
 800318a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f7fd fd39 	bl	8000c04 <__addsf3>
 8003192:	4603      	mov	r3, r0
 8003194:	4619      	mov	r1, r3
 8003196:	4618      	mov	r0, r3
 8003198:	f7fd fd34 	bl	8000c04 <__addsf3>
 800319c:	4603      	mov	r3, r0
 800319e:	461a      	mov	r2, r3
 80031a0:	4b0e      	ldr	r3, [pc, #56]	@ (80031dc <update_ahrs+0xa64>)
 80031a2:	615a      	str	r2, [r3, #20]
	dcm[2][2] = 2.0f*(0.5f - q1q1 - q2q2);
 80031a4:	69f9      	ldr	r1, [r7, #28]
 80031a6:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 80031aa:	f7fd fd29 	bl	8000c00 <__aeabi_fsub>
 80031ae:	4603      	mov	r3, r0
 80031b0:	6939      	ldr	r1, [r7, #16]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd fd24 	bl	8000c00 <__aeabi_fsub>
 80031b8:	4603      	mov	r3, r0
 80031ba:	4619      	mov	r1, r3
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fd fd21 	bl	8000c04 <__addsf3>
 80031c2:	4603      	mov	r3, r0
 80031c4:	461a      	mov	r2, r3
 80031c6:	4b05      	ldr	r3, [pc, #20]	@ (80031dc <update_ahrs+0xa64>)
 80031c8:	621a      	str	r2, [r3, #32]
 80031ca:	e009      	b.n	80031e0 <update_ahrs+0xa68>
 80031cc:	200012f4 	.word	0x200012f4
 80031d0:	200012f8 	.word	0x200012f8
 80031d4:	20000010 	.word	0x20000010
 80031d8:	200012f0 	.word	0x200012f0
 80031dc:	200012fc 	.word	0x200012fc
    AHRS.roll_rate  = (P + R*cosx*tany + Q*sinx*tany)*DEG;
    AHRS.pitch_rate = (Q*cosx - R*sinx)*DEG;
    AHRS.yaw_rate   = (R*cosx/cosy + Q*sinx/cosy)*DEG;
    */

	AHRS.pitch = -atan2_approx(-dcm[0][2],sqrtf(1 - dcm[0][2]*dcm[0][2]))*DEG;
 80031e0:	4b38      	ldr	r3, [pc, #224]	@ (80032c4 <update_ahrs+0xb4c>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 80031e8:	4b36      	ldr	r3, [pc, #216]	@ (80032c4 <update_ahrs+0xb4c>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4a35      	ldr	r2, [pc, #212]	@ (80032c4 <update_ahrs+0xb4c>)
 80031ee:	6892      	ldr	r2, [r2, #8]
 80031f0:	4611      	mov	r1, r2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fd fe0e 	bl	8000e14 <__aeabi_fmul>
 80031f8:	4603      	mov	r3, r0
 80031fa:	4619      	mov	r1, r3
 80031fc:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003200:	f7fd fcfe 	bl	8000c00 <__aeabi_fsub>
 8003204:	4603      	mov	r3, r0
 8003206:	4618      	mov	r0, r3
 8003208:	f00e ff48 	bl	801209c <sqrtf>
 800320c:	4603      	mov	r3, r0
 800320e:	4619      	mov	r1, r3
 8003210:	4620      	mov	r0, r4
 8003212:	f000 f85f 	bl	80032d4 <atan2_approx>
 8003216:	4603      	mov	r3, r0
 8003218:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800321c:	492a      	ldr	r1, [pc, #168]	@ (80032c8 <update_ahrs+0xb50>)
 800321e:	4618      	mov	r0, r3
 8003220:	f7fd fdf8 	bl	8000e14 <__aeabi_fmul>
 8003224:	4603      	mov	r3, r0
 8003226:	461a      	mov	r2, r3
 8003228:	4b28      	ldr	r3, [pc, #160]	@ (80032cc <update_ahrs+0xb54>)
 800322a:	605a      	str	r2, [r3, #4]
	AHRS.roll = -atan2_approx(-dcm[1][2],dcm[2][2])*DEG;
 800322c:	4b25      	ldr	r3, [pc, #148]	@ (80032c4 <update_ahrs+0xb4c>)
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003234:	4a23      	ldr	r2, [pc, #140]	@ (80032c4 <update_ahrs+0xb4c>)
 8003236:	6a12      	ldr	r2, [r2, #32]
 8003238:	4611      	mov	r1, r2
 800323a:	4618      	mov	r0, r3
 800323c:	f000 f84a 	bl	80032d4 <atan2_approx>
 8003240:	4603      	mov	r3, r0
 8003242:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003246:	4920      	ldr	r1, [pc, #128]	@ (80032c8 <update_ahrs+0xb50>)
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd fde3 	bl	8000e14 <__aeabi_fmul>
 800324e:	4603      	mov	r3, r0
 8003250:	461a      	mov	r2, r3
 8003252:	4b1e      	ldr	r3, [pc, #120]	@ (80032cc <update_ahrs+0xb54>)
 8003254:	601a      	str	r2, [r3, #0]
	float yaw_ = -atan2_approx(dcm[0][1],dcm[0][0])*DEG;
 8003256:	4b1b      	ldr	r3, [pc, #108]	@ (80032c4 <update_ahrs+0xb4c>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	4a1a      	ldr	r2, [pc, #104]	@ (80032c4 <update_ahrs+0xb4c>)
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	4611      	mov	r1, r2
 8003260:	4618      	mov	r0, r3
 8003262:	f000 f837 	bl	80032d4 <atan2_approx>
 8003266:	4603      	mov	r3, r0
 8003268:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800326c:	4916      	ldr	r1, [pc, #88]	@ (80032c8 <update_ahrs+0xb50>)
 800326e:	4618      	mov	r0, r3
 8003270:	f7fd fdd0 	bl	8000e14 <__aeabi_fmul>
 8003274:	4603      	mov	r3, r0
 8003276:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	if(yaw_ < 0){
 800327a:	f04f 0100 	mov.w	r1, #0
 800327e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003282:	f7fd ff65 	bl	8001150 <__aeabi_fcmplt>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d007      	beq.n	800329c <update_ahrs+0xb24>
		 yaw_ = 360 + yaw_;
 800328c:	4910      	ldr	r1, [pc, #64]	@ (80032d0 <update_ahrs+0xb58>)
 800328e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003292:	f7fd fcb7 	bl	8000c04 <__addsf3>
 8003296:	4603      	mov	r3, r0
 8003298:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	}
	AHRS.yaw =  yaw_;
 800329c:	4a0b      	ldr	r2, [pc, #44]	@ (80032cc <update_ahrs+0xb54>)
 800329e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032a2:	6093      	str	r3, [r2, #8]
	AHRS.roll_rate  = gy;
 80032a4:	4a09      	ldr	r2, [pc, #36]	@ (80032cc <update_ahrs+0xb54>)
 80032a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80032aa:	60d3      	str	r3, [r2, #12]
	AHRS.pitch_rate = gx;
 80032ac:	4a07      	ldr	r2, [pc, #28]	@ (80032cc <update_ahrs+0xb54>)
 80032ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032b2:	6113      	str	r3, [r2, #16]
	AHRS.yaw_rate   = gz;
 80032b4:	4a05      	ldr	r2, [pc, #20]	@ (80032cc <update_ahrs+0xb54>)
 80032b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032ba:	6153      	str	r3, [r2, #20]

		
}
 80032bc:	bf00      	nop
 80032be:	379c      	adds	r7, #156	@ 0x9c
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd90      	pop	{r4, r7, pc}
 80032c4:	200012fc 	.word	0x200012fc
 80032c8:	42652ee0 	.word	0x42652ee0
 80032cc:	200012cc 	.word	0x200012cc
 80032d0:	43b40000 	.word	0x43b40000

080032d4 <atan2_approx>:
// Initial implementation by Crashpilot1000 (https://github.com/Crashpilot1000/HarakiriWebstore1/blob/396715f73c6fcf859e0db0f34e12fe44bace6483/src/mw.c#L1292)
// Polynomial coefficients by Andor (http://www.dsprelated.com/showthread/comp.dsp/21872-1.php) optimized by Ledvinap to save one multiplication
// Max absolute error 0,000027 degree
// atan2_approx maximum absolute error = 7.152557e-07 rads (4.098114e-05 degree)
float atan2_approx(float y, float x)
{
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	b08b      	sub	sp, #44	@ 0x2c
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032e4:	623b      	str	r3, [r7, #32]
    absY = fabsf(y);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032ec:	61fb      	str	r3, [r7, #28]
    res  = MAX(absX, absY);
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	61bb      	str	r3, [r7, #24]
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	617b      	str	r3, [r7, #20]
 80032f6:	6979      	ldr	r1, [r7, #20]
 80032f8:	69b8      	ldr	r0, [r7, #24]
 80032fa:	f7fd ff47 	bl	800118c <__aeabi_fcmpgt>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <atan2_approx+0x34>
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	e000      	b.n	800330a <atan2_approx+0x36>
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (res) res = MIN(absX, absY) / res;
 800330c:	f04f 0100 	mov.w	r1, #0
 8003310:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003312:	f7fd ff13 	bl	800113c <__aeabi_fcmpeq>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d114      	bne.n	8003346 <atan2_approx+0x72>
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	68f9      	ldr	r1, [r7, #12]
 8003326:	6938      	ldr	r0, [r7, #16]
 8003328:	f7fd ff12 	bl	8001150 <__aeabi_fcmplt>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <atan2_approx+0x62>
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	e000      	b.n	8003338 <atan2_approx+0x64>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800333a:	4618      	mov	r0, r3
 800333c:	f7fd fe1e 	bl	8000f7c <__aeabi_fdiv>
 8003340:	4603      	mov	r3, r0
 8003342:	627b      	str	r3, [r7, #36]	@ 0x24
 8003344:	e002      	b.n	800334c <atan2_approx+0x78>
    else res = 0.0f;
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	627b      	str	r3, [r7, #36]	@ 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 800334c:	4938      	ldr	r1, [pc, #224]	@ (8003430 <atan2_approx+0x15c>)
 800334e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003350:	f7fd fd60 	bl	8000e14 <__aeabi_fmul>
 8003354:	4603      	mov	r3, r0
 8003356:	4937      	ldr	r1, [pc, #220]	@ (8003434 <atan2_approx+0x160>)
 8003358:	4618      	mov	r0, r3
 800335a:	f7fd fc51 	bl	8000c00 <__aeabi_fsub>
 800335e:	4603      	mov	r3, r0
 8003360:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003362:	4618      	mov	r0, r3
 8003364:	f7fd fd56 	bl	8000e14 <__aeabi_fmul>
 8003368:	4603      	mov	r3, r0
 800336a:	4933      	ldr	r1, [pc, #204]	@ (8003438 <atan2_approx+0x164>)
 800336c:	4618      	mov	r0, r3
 800336e:	f7fd fc47 	bl	8000c00 <__aeabi_fsub>
 8003372:	4603      	mov	r3, r0
 8003374:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003376:	4618      	mov	r0, r3
 8003378:	f7fd fd4c 	bl	8000e14 <__aeabi_fmul>
 800337c:	4603      	mov	r3, r0
 800337e:	492f      	ldr	r1, [pc, #188]	@ (800343c <atan2_approx+0x168>)
 8003380:	4618      	mov	r0, r3
 8003382:	f7fd fc3d 	bl	8000c00 <__aeabi_fsub>
 8003386:	4603      	mov	r3, r0
 8003388:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800338a:	4618      	mov	r0, r3
 800338c:	f7fd fd42 	bl	8000e14 <__aeabi_fmul>
 8003390:	4603      	mov	r3, r0
 8003392:	492b      	ldr	r1, [pc, #172]	@ (8003440 <atan2_approx+0x16c>)
 8003394:	4618      	mov	r0, r3
 8003396:	f7fd fc33 	bl	8000c00 <__aeabi_fsub>
 800339a:	4603      	mov	r3, r0
 800339c:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 80033a0:	4928      	ldr	r1, [pc, #160]	@ (8003444 <atan2_approx+0x170>)
 80033a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80033a4:	f7fd fd36 	bl	8000e14 <__aeabi_fmul>
 80033a8:	4603      	mov	r3, r0
 80033aa:	4927      	ldr	r1, [pc, #156]	@ (8003448 <atan2_approx+0x174>)
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fd fc29 	bl	8000c04 <__addsf3>
 80033b2:	4603      	mov	r3, r0
 80033b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd fd2c 	bl	8000e14 <__aeabi_fmul>
 80033bc:	4603      	mov	r3, r0
 80033be:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd fc1e 	bl	8000c04 <__addsf3>
 80033c8:	4603      	mov	r3, r0
 80033ca:	4619      	mov	r1, r3
 80033cc:	4620      	mov	r0, r4
 80033ce:	f7fd fdd5 	bl	8000f7c <__aeabi_fdiv>
 80033d2:	4603      	mov	r3, r0
 80033d4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 80033d6:	6a39      	ldr	r1, [r7, #32]
 80033d8:	69f8      	ldr	r0, [r7, #28]
 80033da:	f7fd fed7 	bl	800118c <__aeabi_fcmpgt>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <atan2_approx+0x11c>
 80033e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033e6:	4819      	ldr	r0, [pc, #100]	@ (800344c <atan2_approx+0x178>)
 80033e8:	f7fd fc0a 	bl	8000c00 <__aeabi_fsub>
 80033ec:	4603      	mov	r3, r0
 80033ee:	627b      	str	r3, [r7, #36]	@ 0x24
    if (x < 0) res = M_PIf - res;
 80033f0:	f04f 0100 	mov.w	r1, #0
 80033f4:	6838      	ldr	r0, [r7, #0]
 80033f6:	f7fd feab 	bl	8001150 <__aeabi_fcmplt>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <atan2_approx+0x138>
 8003400:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003402:	4813      	ldr	r0, [pc, #76]	@ (8003450 <atan2_approx+0x17c>)
 8003404:	f7fd fbfc 	bl	8000c00 <__aeabi_fsub>
 8003408:	4603      	mov	r3, r0
 800340a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (y < 0) res = -res;
 800340c:	f04f 0100 	mov.w	r1, #0
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7fd fe9d 	bl	8001150 <__aeabi_fcmplt>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <atan2_approx+0x150>
 800341c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003422:	627b      	str	r3, [r7, #36]	@ 0x24
    return res;
 8003424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003426:	4618      	mov	r0, r3
 8003428:	372c      	adds	r7, #44	@ 0x2c
 800342a:	46bd      	mov	sp, r7
 800342c:	bd90      	pop	{r4, r7, pc}
 800342e:	bf00      	nop
 8003430:	3d4e0939 	.word	0x3d4e0939
 8003434:	3e9eb5e3 	.word	0x3e9eb5e3
 8003438:	3e16fa88 	.word	0x3e16fa88
 800343c:	3f7ffe45 	.word	0x3f7ffe45
 8003440:	34a8dfa7 	.word	0x34a8dfa7
 8003444:	3f24fb99 	.word	0x3f24fb99
 8003448:	3e16a269 	.word	0x3e16a269
 800344c:	3fc90fdb 	.word	0x3fc90fdb
 8003450:	40490fdb 	.word	0x40490fdb

08003454 <invSqrt_>:
    return (num << 12) / den;
}


float invSqrt_(float x)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 800345c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7fd fcd7 	bl	8000e14 <__aeabi_fmul>
 8003466:	4603      	mov	r3, r0
 8003468:	617b      	str	r3, [r7, #20]
	float y = x;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800346e:	f107 0310 	add.w	r3, r7, #16
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	105a      	asrs	r2, r3, #1
 800347a:	4b13      	ldr	r3, [pc, #76]	@ (80034c8 <invSqrt_+0x74>)
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8003480:	f107 030c 	add.w	r3, r7, #12
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	6979      	ldr	r1, [r7, #20]
 800348c:	4618      	mov	r0, r3
 800348e:	f7fd fcc1 	bl	8000e14 <__aeabi_fmul>
 8003492:	4603      	mov	r3, r0
 8003494:	461a      	mov	r2, r3
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4619      	mov	r1, r3
 800349a:	4610      	mov	r0, r2
 800349c:	f7fd fcba 	bl	8000e14 <__aeabi_fmul>
 80034a0:	4603      	mov	r3, r0
 80034a2:	4619      	mov	r1, r3
 80034a4:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 80034a8:	f7fd fbaa 	bl	8000c00 <__aeabi_fsub>
 80034ac:	4603      	mov	r3, r0
 80034ae:	461a      	mov	r2, r3
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4619      	mov	r1, r3
 80034b4:	4610      	mov	r0, r2
 80034b6:	f7fd fcad 	bl	8000e14 <__aeabi_fmul>
 80034ba:	4603      	mov	r3, r0
 80034bc:	613b      	str	r3, [r7, #16]
	//y = y * (1.5f - (halfx * y * y));
	return y;
 80034be:	693b      	ldr	r3, [r7, #16]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	5f3759df 	.word	0x5f3759df

080034cc <timer_start>:
  boottime.sec   = setoverFlow(sec_L,59);
  boottime.min   = setoverFlow((sec_L/60),59);
  boottime.hour  = setoverFlow((sec_L/3600),23);
}

void timer_start(TIM_HandleTypeDef *htimz){
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
	htimmz = htimz;
 80034d4:	4a05      	ldr	r2, [pc, #20]	@ (80034ec <timer_start+0x20>)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htimmz);
 80034da:	4b04      	ldr	r3, [pc, #16]	@ (80034ec <timer_start+0x20>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f005 fa9e 	bl	8008a20 <HAL_TIM_Base_Start_IT>
}
 80034e4:	bf00      	nop
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	2000132c 	.word	0x2000132c

080034f0 <HAL_UART_RxCpltCallback>:
#include "../Lib/gps.h"

// IQR function
//----------------------------------IQR--Handler-----------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
    if(huart == ibus_uart_port())
 80034f8:	f7fd feb6 	bl	8001268 <ibus_uart_port>
 80034fc:	4602      	mov	r2, r0
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4293      	cmp	r3, r2
 8003502:	d102      	bne.n	800350a <HAL_UART_RxCpltCallback+0x1a>
	{
		ibus_calback();
 8003504:	f7fd feba 	bl	800127c <ibus_calback>
    }
    else if(huart == gps_uart_port()){
        gps_callback();
    }
}
 8003508:	e007      	b.n	800351a <HAL_UART_RxCpltCallback+0x2a>
    else if(huart == gps_uart_port()){
 800350a:	f7fe fe99 	bl	8002240 <gps_uart_port>
 800350e:	4602      	mov	r2, r0
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4293      	cmp	r3, r2
 8003514:	d101      	bne.n	800351a <HAL_UART_RxCpltCallback+0x2a>
        gps_callback();
 8003516:	f7fe fe9d 	bl	8002254 <gps_callback>
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  //  if(huart == mavlink_uart_port())
//	{
//		mavlink_tx_cpl_callback();
 //   }
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr

08003534 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4a06      	ldr	r2, [pc, #24]	@ (800355c <vApplicationGetIdleTaskMemory+0x28>)
 8003544:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4a05      	ldr	r2, [pc, #20]	@ (8003560 <vApplicationGetIdleTaskMemory+0x2c>)
 800354a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2280      	movs	r2, #128	@ 0x80
 8003550:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003552:	bf00      	nop
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr
 800355c:	20001344 	.word	0x20001344
 8003560:	20001398 	.word	0x20001398

08003564 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003564:	b5b0      	push	{r4, r5, r7, lr}
 8003566:	b09c      	sub	sp, #112	@ 0x70
 8003568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	 timer_start(&htim7);
 800356a:	4828      	ldr	r0, [pc, #160]	@ (800360c <MX_FREERTOS_Init+0xa8>)
 800356c:	f7ff ffae 	bl	80034cc <timer_start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task1 */
  osThreadDef(task1, ahrs_task, osPriorityHigh, 0, 200);
 8003570:	4b27      	ldr	r3, [pc, #156]	@ (8003610 <MX_FREERTOS_Init+0xac>)
 8003572:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8003576:	461d      	mov	r5, r3
 8003578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800357a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800357c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003580:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 8003584:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003588:	2100      	movs	r1, #0
 800358a:	4618      	mov	r0, r3
 800358c:	f00b fea5 	bl	800f2da <osThreadCreate>
 8003590:	4603      	mov	r3, r0
 8003592:	4a20      	ldr	r2, [pc, #128]	@ (8003614 <MX_FREERTOS_Init+0xb0>)
 8003594:	6013      	str	r3, [r2, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, blackbox, osPriorityLow, 0, 200);
 8003596:	4b20      	ldr	r3, [pc, #128]	@ (8003618 <MX_FREERTOS_Init+0xb4>)
 8003598:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800359c:	461d      	mov	r5, r3
 800359e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 80035aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80035ae:	2100      	movs	r1, #0
 80035b0:	4618      	mov	r0, r3
 80035b2:	f00b fe92 	bl	800f2da <osThreadCreate>
 80035b6:	4603      	mov	r3, r0
 80035b8:	4a18      	ldr	r2, [pc, #96]	@ (800361c <MX_FREERTOS_Init+0xb8>)
 80035ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of task3 */
  osThreadDef(task3, led_indicate, osPriorityLow, 0, 128);
 80035bc:	4b18      	ldr	r3, [pc, #96]	@ (8003620 <MX_FREERTOS_Init+0xbc>)
 80035be:	f107 041c 	add.w	r4, r7, #28
 80035c2:	461d      	mov	r5, r3
 80035c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task3Handle = osThreadCreate(osThread(task3), NULL);
 80035d0:	f107 031c 	add.w	r3, r7, #28
 80035d4:	2100      	movs	r1, #0
 80035d6:	4618      	mov	r0, r3
 80035d8:	f00b fe7f 	bl	800f2da <osThreadCreate>
 80035dc:	4603      	mov	r3, r0
 80035de:	4a11      	ldr	r2, [pc, #68]	@ (8003624 <MX_FREERTOS_Init+0xc0>)
 80035e0:	6013      	str	r3, [r2, #0]

  /* definition and creation of task4 */
  osThreadDef(task4, read_sensor, osPriorityRealtime, 0, 128);
 80035e2:	4b11      	ldr	r3, [pc, #68]	@ (8003628 <MX_FREERTOS_Init+0xc4>)
 80035e4:	463c      	mov	r4, r7
 80035e6:	461d      	mov	r5, r3
 80035e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task4Handle = osThreadCreate(osThread(task4), NULL);
 80035f4:	463b      	mov	r3, r7
 80035f6:	2100      	movs	r1, #0
 80035f8:	4618      	mov	r0, r3
 80035fa:	f00b fe6e 	bl	800f2da <osThreadCreate>
 80035fe:	4603      	mov	r3, r0
 8003600:	4a0a      	ldr	r2, [pc, #40]	@ (800362c <MX_FREERTOS_Init+0xc8>)
 8003602:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8003604:	bf00      	nop
 8003606:	3770      	adds	r7, #112	@ 0x70
 8003608:	46bd      	mov	sp, r7
 800360a:	bdb0      	pop	{r4, r5, r7, pc}
 800360c:	20002940 	.word	0x20002940
 8003610:	08012390 	.word	0x08012390
 8003614:	20001334 	.word	0x20001334
 8003618:	080123b4 	.word	0x080123b4
 800361c:	20001338 	.word	0x20001338
 8003620:	080123d8 	.word	0x080123d8
 8003624:	2000133c 	.word	0x2000133c
 8003628:	080123fc 	.word	0x080123fc
 800362c:	20001340 	.word	0x20001340

08003630 <ahrs_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ahrs_task */
void ahrs_task(void const * argument)
{
 8003630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003634:	b08c      	sub	sp, #48	@ 0x30
 8003636:	af06      	add	r7, sp, #24
 8003638:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ahrs_task */
	uint32_t last_call = micros();
 800363a:	4b3f      	ldr	r3, [pc, #252]	@ (8003738 <ahrs_task+0x108>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003642:	4b3e      	ldr	r3, [pc, #248]	@ (800373c <ahrs_task+0x10c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4413      	add	r3, r2
 8003648:	617b      	str	r3, [r7, #20]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10;
 800364a:	230a      	movs	r3, #10
 800364c:	613b      	str	r3, [r7, #16]
	xLastWakeTime = xTaskGetTickCount();
 800364e:	f00d fa83 	bl	8010b58 <xTaskGetTickCount>
 8003652:	4603      	mov	r3, r0
 8003654:	60fb      	str	r3, [r7, #12]
	ibus_init(&huart1);
 8003656:	483a      	ldr	r0, [pc, #232]	@ (8003740 <ahrs_task+0x110>)
 8003658:	f7fd fdde 	bl	8001218 <ibus_init>
	gps_init(&huart3,57600);
 800365c:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8003660:	4838      	ldr	r0, [pc, #224]	@ (8003744 <ahrs_task+0x114>)
 8003662:	f7fe fd81 	bl	8002168 <gps_init>
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4); // for debug
 8003666:	2110      	movs	r1, #16
 8003668:	4837      	ldr	r0, [pc, #220]	@ (8003748 <ahrs_task+0x118>)
 800366a:	f001 ff66 	bl	800553a <HAL_GPIO_TogglePin>

    dt = (micros() - last_call)*(1e-6);
 800366e:	4b32      	ldr	r3, [pc, #200]	@ (8003738 <ahrs_task+0x108>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003676:	4b31      	ldr	r3, [pc, #196]	@ (800373c <ahrs_task+0x10c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	441a      	add	r2, r3
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	4618      	mov	r0, r3
 8003682:	f7fc ff17 	bl	80004b4 <__aeabi_ui2d>
 8003686:	a32a      	add	r3, pc, #168	@ (adr r3, 8003730 <ahrs_task+0x100>)
 8003688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368c:	f7fc ff8c 	bl	80005a8 <__aeabi_dmul>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4610      	mov	r0, r2
 8003696:	4619      	mov	r1, r3
 8003698:	f7fd fa5e 	bl	8000b58 <__aeabi_d2f>
 800369c:	4603      	mov	r3, r0
 800369e:	4a2b      	ldr	r2, [pc, #172]	@ (800374c <ahrs_task+0x11c>)
 80036a0:	6013      	str	r3, [r2, #0]
    last_call = micros();
 80036a2:	4b25      	ldr	r3, [pc, #148]	@ (8003738 <ahrs_task+0x108>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036aa:	4b24      	ldr	r3, [pc, #144]	@ (800373c <ahrs_task+0x10c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4413      	add	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]

    ibusFrameComplete();
 80036b2:	f7fd fe3f 	bl	8001334 <ibusFrameComplete>
    update_ahrs(gyro_imu[0],gyro_imu[1],gyro_imu[2],acc_imu[0],acc_imu[1],acc_imu[2],mag_raw[0],mag_raw[1],mag_raw[2],dt);
 80036b6:	4b26      	ldr	r3, [pc, #152]	@ (8003750 <ahrs_task+0x120>)
 80036b8:	f9b3 6000 	ldrsh.w	r6, [r3]
 80036bc:	4b24      	ldr	r3, [pc, #144]	@ (8003750 <ahrs_task+0x120>)
 80036be:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 80036c2:	4b23      	ldr	r3, [pc, #140]	@ (8003750 <ahrs_task+0x120>)
 80036c4:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 80036c8:	4b22      	ldr	r3, [pc, #136]	@ (8003754 <ahrs_task+0x124>)
 80036ca:	f9b3 8000 	ldrsh.w	r8, [r3]
 80036ce:	4b21      	ldr	r3, [pc, #132]	@ (8003754 <ahrs_task+0x124>)
 80036d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80036d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003754 <ahrs_task+0x124>)
 80036d6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80036da:	491f      	ldr	r1, [pc, #124]	@ (8003758 <ahrs_task+0x128>)
 80036dc:	f9b1 1000 	ldrsh.w	r1, [r1]
 80036e0:	481d      	ldr	r0, [pc, #116]	@ (8003758 <ahrs_task+0x128>)
 80036e2:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 80036e6:	4c1c      	ldr	r4, [pc, #112]	@ (8003758 <ahrs_task+0x128>)
 80036e8:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 80036ec:	4d17      	ldr	r5, [pc, #92]	@ (800374c <ahrs_task+0x11c>)
 80036ee:	682d      	ldr	r5, [r5, #0]
 80036f0:	9505      	str	r5, [sp, #20]
 80036f2:	9404      	str	r4, [sp, #16]
 80036f4:	9003      	str	r0, [sp, #12]
 80036f6:	9102      	str	r1, [sp, #8]
 80036f8:	9201      	str	r2, [sp, #4]
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	4643      	mov	r3, r8
 80036fe:	4672      	mov	r2, lr
 8003700:	4661      	mov	r1, ip
 8003702:	4630      	mov	r0, r6
 8003704:	f7ff f838 	bl	8002778 <update_ahrs>
    vTaskSuspend(NULL);
 8003708:	2000      	movs	r0, #0
 800370a:	f00c ffe9 	bl	80106e0 <vTaskSuspend>
   //osDelay(10);
    vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800370e:	f107 030c 	add.w	r3, r7, #12
 8003712:	6939      	ldr	r1, [r7, #16]
 8003714:	4618      	mov	r0, r3
 8003716:	f00c ff2d 	bl	8010574 <vTaskDelayUntil>
    stack_task_ahrs = uxTaskGetStackHighWaterMark( NULL );
 800371a:	2000      	movs	r0, #0
 800371c:	f00d fcf6 	bl	801110c <uxTaskGetStackHighWaterMark>
 8003720:	4603      	mov	r3, r0
 8003722:	b29a      	uxth	r2, r3
 8003724:	4b0d      	ldr	r3, [pc, #52]	@ (800375c <ahrs_task+0x12c>)
 8003726:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4); // for debug
 8003728:	bf00      	nop
 800372a:	e79c      	b.n	8003666 <ahrs_task+0x36>
 800372c:	f3af 8000 	nop.w
 8003730:	a0b5ed8d 	.word	0xa0b5ed8d
 8003734:	3eb0c6f7 	.word	0x3eb0c6f7
 8003738:	2000132c 	.word	0x2000132c
 800373c:	20001330 	.word	0x20001330
 8003740:	20002988 	.word	0x20002988
 8003744:	20002a18 	.word	0x20002a18
 8003748:	40010c00 	.word	0x40010c00
 800374c:	20001598 	.word	0x20001598
 8003750:	2000159c 	.word	0x2000159c
 8003754:	200015a4 	.word	0x200015a4
 8003758:	200015ac 	.word	0x200015ac
 800375c:	200015b2 	.word	0x200015b2

08003760 <blackbox>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blackbox */
void blackbox(void const * argument)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blackbox */
  //vTaskSuspend(task1Handle);
  vTaskSuspend(NULL);
 8003768:	2000      	movs	r0, #0
 800376a:	f00c ffb9 	bl	80106e0 <vTaskSuspend>
  black_box_init();
 800376e:	f7fd ffd5 	bl	800171c <black_box_init>
  black_box_create_file(&fdata,"fdata.txt");
 8003772:	4929      	ldr	r1, [pc, #164]	@ (8003818 <blackbox+0xb8>)
 8003774:	4829      	ldr	r0, [pc, #164]	@ (800381c <blackbox+0xbc>)
 8003776:	f7fd fff9 	bl	800176c <black_box_create_file>
  /* Infinite loop */
  for(;;)
  {
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);

		black_box_pack_int(&fdata,(int)AHRS.roll);
 800377a:	4b29      	ldr	r3, [pc, #164]	@ (8003820 <blackbox+0xc0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f7fd fd24 	bl	80011cc <__aeabi_f2iz>
 8003784:	4603      	mov	r3, r0
 8003786:	4619      	mov	r1, r3
 8003788:	4824      	ldr	r0, [pc, #144]	@ (800381c <blackbox+0xbc>)
 800378a:	f7fe f821 	bl	80017d0 <black_box_pack_int>
		black_box_pack_str(&fdata," ");
 800378e:	4925      	ldr	r1, [pc, #148]	@ (8003824 <blackbox+0xc4>)
 8003790:	4822      	ldr	r0, [pc, #136]	@ (800381c <blackbox+0xbc>)
 8003792:	f7fe f8d7 	bl	8001944 <black_box_pack_str>

		black_box_pack_int(&fdata,(int)AHRS.pitch);
 8003796:	4b22      	ldr	r3, [pc, #136]	@ (8003820 <blackbox+0xc0>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4618      	mov	r0, r3
 800379c:	f7fd fd16 	bl	80011cc <__aeabi_f2iz>
 80037a0:	4603      	mov	r3, r0
 80037a2:	4619      	mov	r1, r3
 80037a4:	481d      	ldr	r0, [pc, #116]	@ (800381c <blackbox+0xbc>)
 80037a6:	f7fe f813 	bl	80017d0 <black_box_pack_int>
		black_box_pack_str(&fdata," ");
 80037aa:	491e      	ldr	r1, [pc, #120]	@ (8003824 <blackbox+0xc4>)
 80037ac:	481b      	ldr	r0, [pc, #108]	@ (800381c <blackbox+0xbc>)
 80037ae:	f7fe f8c9 	bl	8001944 <black_box_pack_str>

		black_box_pack_int(&fdata,(int)AHRS.yaw);
 80037b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003820 <blackbox+0xc0>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fd fd08 	bl	80011cc <__aeabi_f2iz>
 80037bc:	4603      	mov	r3, r0
 80037be:	4619      	mov	r1, r3
 80037c0:	4816      	ldr	r0, [pc, #88]	@ (800381c <blackbox+0xbc>)
 80037c2:	f7fe f805 	bl	80017d0 <black_box_pack_int>
		black_box_pack_str(&fdata," ");
 80037c6:	4917      	ldr	r1, [pc, #92]	@ (8003824 <blackbox+0xc4>)
 80037c8:	4814      	ldr	r0, [pc, #80]	@ (800381c <blackbox+0xbc>)
 80037ca:	f7fe f8bb 	bl	8001944 <black_box_pack_str>

		black_box_pack_int(&fdata,(int)(millis()/1000));
 80037ce:	4b16      	ldr	r3, [pc, #88]	@ (8003828 <blackbox+0xc8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037d6:	4b15      	ldr	r3, [pc, #84]	@ (800382c <blackbox+0xcc>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4413      	add	r3, r2
 80037dc:	4a14      	ldr	r2, [pc, #80]	@ (8003830 <blackbox+0xd0>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	0c9b      	lsrs	r3, r3, #18
 80037e4:	4619      	mov	r1, r3
 80037e6:	480d      	ldr	r0, [pc, #52]	@ (800381c <blackbox+0xbc>)
 80037e8:	f7fd fff2 	bl	80017d0 <black_box_pack_int>
		black_box_pack_str(&fdata,"\n");
 80037ec:	4911      	ldr	r1, [pc, #68]	@ (8003834 <blackbox+0xd4>)
 80037ee:	480b      	ldr	r0, [pc, #44]	@ (800381c <blackbox+0xbc>)
 80037f0:	f7fe f8a8 	bl	8001944 <black_box_pack_str>

		black_box_load(&fdata);
 80037f4:	4809      	ldr	r0, [pc, #36]	@ (800381c <blackbox+0xbc>)
 80037f6:	f7fe f8f3 	bl	80019e0 <black_box_load>

		black_box_sync(&fdata);
 80037fa:	4808      	ldr	r0, [pc, #32]	@ (800381c <blackbox+0xbc>)
 80037fc:	f7fe f920 	bl	8001a40 <black_box_sync>
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);


	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
    osDelay(100);
 8003800:	2064      	movs	r0, #100	@ 0x64
 8003802:	f00b fdb6 	bl	800f372 <osDelay>
    stack_task_blackbox = uxTaskGetStackHighWaterMark( NULL );
 8003806:	2000      	movs	r0, #0
 8003808:	f00d fc80 	bl	801110c <uxTaskGetStackHighWaterMark>
 800380c:	4603      	mov	r3, r0
 800380e:	b29a      	uxth	r2, r3
 8003810:	4b09      	ldr	r3, [pc, #36]	@ (8003838 <blackbox+0xd8>)
 8003812:	801a      	strh	r2, [r3, #0]
		black_box_pack_int(&fdata,(int)AHRS.roll);
 8003814:	bf00      	nop
 8003816:	e7b0      	b.n	800377a <blackbox+0x1a>
 8003818:	08012418 	.word	0x08012418
 800381c:	200015b4 	.word	0x200015b4
 8003820:	200012cc 	.word	0x200012cc
 8003824:	08012424 	.word	0x08012424
 8003828:	2000132c 	.word	0x2000132c
 800382c:	20001330 	.word	0x20001330
 8003830:	431bde83 	.word	0x431bde83
 8003834:	08012428 	.word	0x08012428
 8003838:	20002778 	.word	0x20002778

0800383c <led_indicate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_indicate */
void led_indicate(void const * argument)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_indicate */
  /* Infinite loop */
  for(;;)
  {
	static uint32_t delay;
	if(fdata.file.err != -1 && ibusChannelData[CH10] > 1700){
 8003844:	4b12      	ldr	r3, [pc, #72]	@ (8003890 <led_indicate+0x54>)
 8003846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003848:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 800384c:	4293      	cmp	r3, r2
 800384e:	d90c      	bls.n	800386a <led_indicate+0x2e>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003850:	2120      	movs	r1, #32
 8003852:	4810      	ldr	r0, [pc, #64]	@ (8003894 <led_indicate+0x58>)
 8003854:	f001 fe71 	bl	800553a <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003858:	2200      	movs	r2, #0
 800385a:	2110      	movs	r1, #16
 800385c:	480d      	ldr	r0, [pc, #52]	@ (8003894 <led_indicate+0x58>)
 800385e:	f001 fe54 	bl	800550a <HAL_GPIO_WritePin>
		delay = 100;
 8003862:	4b0d      	ldr	r3, [pc, #52]	@ (8003898 <led_indicate+0x5c>)
 8003864:	2264      	movs	r2, #100	@ 0x64
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	e00c      	b.n	8003884 <led_indicate+0x48>
	}
	else{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 800386a:	2110      	movs	r1, #16
 800386c:	4809      	ldr	r0, [pc, #36]	@ (8003894 <led_indicate+0x58>)
 800386e:	f001 fe64 	bl	800553a <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003872:	2200      	movs	r2, #0
 8003874:	2120      	movs	r1, #32
 8003876:	4807      	ldr	r0, [pc, #28]	@ (8003894 <led_indicate+0x58>)
 8003878:	f001 fe47 	bl	800550a <HAL_GPIO_WritePin>
		delay = 500;
 800387c:	4b06      	ldr	r3, [pc, #24]	@ (8003898 <led_indicate+0x5c>)
 800387e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003882:	601a      	str	r2, [r3, #0]
	}
    osDelay(delay);
 8003884:	4b04      	ldr	r3, [pc, #16]	@ (8003898 <led_indicate+0x5c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f00b fd72 	bl	800f372 <osDelay>
  {
 800388e:	e7d9      	b.n	8003844 <led_indicate+0x8>
 8003890:	200000c0 	.word	0x200000c0
 8003894:	40010800 	.word	0x40010800
 8003898:	2000277c 	.word	0x2000277c
 800389c:	00000000 	.word	0x00000000

080038a0 <read_sensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_sensor */
void read_sensor(void const * argument)
{
 80038a0:	b5b0      	push	{r4, r5, r7, lr}
 80038a2:	b08e      	sub	sp, #56	@ 0x38
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN readIMU */
 int16_t gyso_offset[3] = {0,0,0};
 80038a8:	2300      	movs	r3, #0
 80038aa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80038ac:	2300      	movs	r3, #0
 80038ae:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80038b0:	2300      	movs	r3, #0
 80038b2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 axis3_t raw;
 uint8_t sample_count = 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 int32_t gyro_add[3] = {0,0,0};
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	2300      	movs	r3, #0
 80038c0:	61bb      	str	r3, [r7, #24]
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
 uint8_t first_loop = 1;
 80038c6:	2301      	movs	r3, #1
 80038c8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 compassInit();
 80038cc:	f7fe f946 	bl	8001b5c <compassInit>
 mpu6050_init(&hi2c2);
 80038d0:	4893      	ldr	r0, [pc, #588]	@ (8003b20 <read_sensor+0x280>)
 80038d2:	f7fd fdef 	bl	80014b4 <mpu6050_init>
 HAL_Delay(2000);
 80038d6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80038da:	f001 fa25 	bl	8004d28 <HAL_Delay>
 imu_calibrate(&gyso_offset[0],&gyso_offset[1],&gyso_offset[2]);
 80038de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038e2:	1d1a      	adds	r2, r3, #4
 80038e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038e8:	1c99      	adds	r1, r3, #2
 80038ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fe feda 	bl	80026a8 <imu_calibrate>

 TickType_t xLastWakeTime;
 const TickType_t xFrequency = 2;
 80038f4:	2302      	movs	r3, #2
 80038f6:	633b      	str	r3, [r7, #48]	@ 0x30
 xLastWakeTime = xTaskGetTickCount();
 80038f8:	f00d f92e 	bl	8010b58 <xTaskGetTickCount>
 80038fc:	4603      	mov	r3, r0
 80038fe:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
	mpu6050_gyro_get_raw(&raw);
 8003900:	f107 0320 	add.w	r3, r7, #32
 8003904:	4618      	mov	r0, r3
 8003906:	f7fd fe27 	bl	8001558 <mpu6050_gyro_get_raw>
	gyro_add[0] += (raw.x - gyso_offset[0]);
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003910:	4619      	mov	r1, r3
 8003912:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8003916:	1acb      	subs	r3, r1, r3
 8003918:	4413      	add	r3, r2
 800391a:	617b      	str	r3, [r7, #20]
	gyro_add[1] += (raw.y - gyso_offset[1]);
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8003922:	4619      	mov	r1, r3
 8003924:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8003928:	1acb      	subs	r3, r1, r3
 800392a:	4413      	add	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
	gyro_add[2] += (raw.z - gyso_offset[2]);
 800392e:	69fa      	ldr	r2, [r7, #28]
 8003930:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8003934:	4619      	mov	r1, r3
 8003936:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800393a:	1acb      	subs	r3, r1, r3
 800393c:	4413      	add	r3, r2
 800393e:	61fb      	str	r3, [r7, #28]
	sample_count ++;
 8003940:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003944:	3301      	adds	r3, #1
 8003946:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if(sample_count >= 5){
 800394a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800394e:	2b04      	cmp	r3, #4
 8003950:	d93c      	bls.n	80039cc <read_sensor+0x12c>
	   axis3_t mag;
	   compass_get(&mag);
 8003952:	f107 0308 	add.w	r3, r7, #8
 8003956:	4618      	mov	r0, r3
 8003958:	f7fe f93c 	bl	8001bd4 <compass_get>
	   mag_raw[0] = mag.x;
 800395c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003960:	4b70      	ldr	r3, [pc, #448]	@ (8003b24 <read_sensor+0x284>)
 8003962:	801a      	strh	r2, [r3, #0]
	   mag_raw[1] = mag.y;
 8003964:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003968:	4b6e      	ldr	r3, [pc, #440]	@ (8003b24 <read_sensor+0x284>)
 800396a:	805a      	strh	r2, [r3, #2]
	   mag_raw[2] = mag.z;
 800396c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003970:	4b6c      	ldr	r3, [pc, #432]	@ (8003b24 <read_sensor+0x284>)
 8003972:	809a      	strh	r2, [r3, #4]

	   gyro_imu[0] = (int16_t)(gyro_add[0]/5);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	4a6c      	ldr	r2, [pc, #432]	@ (8003b28 <read_sensor+0x288>)
 8003978:	fb82 1203 	smull	r1, r2, r2, r3
 800397c:	1052      	asrs	r2, r2, #1
 800397e:	17db      	asrs	r3, r3, #31
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	b21a      	sxth	r2, r3
 8003984:	4b69      	ldr	r3, [pc, #420]	@ (8003b2c <read_sensor+0x28c>)
 8003986:	801a      	strh	r2, [r3, #0]
	   gyro_imu[1] = (int16_t)(gyro_add[1]/5);
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	4a67      	ldr	r2, [pc, #412]	@ (8003b28 <read_sensor+0x288>)
 800398c:	fb82 1203 	smull	r1, r2, r2, r3
 8003990:	1052      	asrs	r2, r2, #1
 8003992:	17db      	asrs	r3, r3, #31
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	b21a      	sxth	r2, r3
 8003998:	4b64      	ldr	r3, [pc, #400]	@ (8003b2c <read_sensor+0x28c>)
 800399a:	805a      	strh	r2, [r3, #2]
	   gyro_imu[2] = (int16_t)(gyro_add[2]/5);
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	4a62      	ldr	r2, [pc, #392]	@ (8003b28 <read_sensor+0x288>)
 80039a0:	fb82 1203 	smull	r1, r2, r2, r3
 80039a4:	1052      	asrs	r2, r2, #1
 80039a6:	17db      	asrs	r3, r3, #31
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	b21a      	sxth	r2, r3
 80039ac:	4b5f      	ldr	r3, [pc, #380]	@ (8003b2c <read_sensor+0x28c>)
 80039ae:	809a      	strh	r2, [r3, #4]
	   gyro_add[0] = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]
	   gyro_add[1] = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	61bb      	str	r3, [r7, #24]
	   gyro_add[2] = 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61fb      	str	r3, [r7, #28]
	   sample_count = 0;
 80039bc:	2300      	movs	r3, #0
 80039be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	   vTaskResume(task1Handle);
 80039c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003b30 <read_sensor+0x290>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f00c ff5a 	bl	8010880 <vTaskResume>
	}

	raw.x = 0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	843b      	strh	r3, [r7, #32]
	raw.y = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	847b      	strh	r3, [r7, #34]	@ 0x22
	raw.z = 0;
 80039d4:	2300      	movs	r3, #0
 80039d6:	84bb      	strh	r3, [r7, #36]	@ 0x24

	mpu6050_acc_get_raw(&raw);
 80039d8:	f107 0320 	add.w	r3, r7, #32
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fd fdf7 	bl	80015d0 <mpu6050_acc_get_raw>
	if(first_loop){
 80039e2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00e      	beq.n	8003a08 <read_sensor+0x168>
		acc_imu[0] = raw.x;
 80039ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80039ee:	4b51      	ldr	r3, [pc, #324]	@ (8003b34 <read_sensor+0x294>)
 80039f0:	801a      	strh	r2, [r3, #0]
		acc_imu[1] = raw.y;
 80039f2:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 80039f6:	4b4f      	ldr	r3, [pc, #316]	@ (8003b34 <read_sensor+0x294>)
 80039f8:	805a      	strh	r2, [r3, #2]
		acc_imu[2] = raw.z;
 80039fa:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80039fe:	4b4d      	ldr	r3, [pc, #308]	@ (8003b34 <read_sensor+0x294>)
 8003a00:	809a      	strh	r2, [r3, #4]
		first_loop = 0;
 8003a02:	2300      	movs	r3, #0
 8003a04:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	}
	// low pass filter
	acc_imu[0] += 0.1*(raw.x - acc_imu[0]);
 8003a08:	4b4a      	ldr	r3, [pc, #296]	@ (8003b34 <read_sensor+0x294>)
 8003a0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fc fd60 	bl	80004d4 <__aeabi_i2d>
 8003a14:	4604      	mov	r4, r0
 8003a16:	460d      	mov	r5, r1
 8003a18:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4b45      	ldr	r3, [pc, #276]	@ (8003b34 <read_sensor+0x294>)
 8003a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fc fd54 	bl	80004d4 <__aeabi_i2d>
 8003a2c:	a33a      	add	r3, pc, #232	@ (adr r3, 8003b18 <read_sensor+0x278>)
 8003a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a32:	f7fc fdb9 	bl	80005a8 <__aeabi_dmul>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	f7fc fbfd 	bl	800023c <__adddf3>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f7fd f85d 	bl	8000b08 <__aeabi_d2iz>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	b21a      	sxth	r2, r3
 8003a52:	4b38      	ldr	r3, [pc, #224]	@ (8003b34 <read_sensor+0x294>)
 8003a54:	801a      	strh	r2, [r3, #0]
	acc_imu[1] += 0.1*(raw.y - acc_imu[1]);
 8003a56:	4b37      	ldr	r3, [pc, #220]	@ (8003b34 <read_sensor+0x294>)
 8003a58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fc fd39 	bl	80004d4 <__aeabi_i2d>
 8003a62:	4604      	mov	r4, r0
 8003a64:	460d      	mov	r5, r1
 8003a66:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	4b31      	ldr	r3, [pc, #196]	@ (8003b34 <read_sensor+0x294>)
 8003a6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fc fd2d 	bl	80004d4 <__aeabi_i2d>
 8003a7a:	a327      	add	r3, pc, #156	@ (adr r3, 8003b18 <read_sensor+0x278>)
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	f7fc fd92 	bl	80005a8 <__aeabi_dmul>
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	4620      	mov	r0, r4
 8003a8a:	4629      	mov	r1, r5
 8003a8c:	f7fc fbd6 	bl	800023c <__adddf3>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4610      	mov	r0, r2
 8003a96:	4619      	mov	r1, r3
 8003a98:	f7fd f836 	bl	8000b08 <__aeabi_d2iz>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	b21a      	sxth	r2, r3
 8003aa0:	4b24      	ldr	r3, [pc, #144]	@ (8003b34 <read_sensor+0x294>)
 8003aa2:	805a      	strh	r2, [r3, #2]
	acc_imu[2] += 0.1*(raw.z - acc_imu[2]);
 8003aa4:	4b23      	ldr	r3, [pc, #140]	@ (8003b34 <read_sensor+0x294>)
 8003aa6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fc fd12 	bl	80004d4 <__aeabi_i2d>
 8003ab0:	4604      	mov	r4, r0
 8003ab2:	460d      	mov	r5, r1
 8003ab4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4b1e      	ldr	r3, [pc, #120]	@ (8003b34 <read_sensor+0x294>)
 8003abc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fc fd06 	bl	80004d4 <__aeabi_i2d>
 8003ac8:	a313      	add	r3, pc, #76	@ (adr r3, 8003b18 <read_sensor+0x278>)
 8003aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ace:	f7fc fd6b 	bl	80005a8 <__aeabi_dmul>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	4629      	mov	r1, r5
 8003ada:	f7fc fbaf 	bl	800023c <__adddf3>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	f7fd f80f 	bl	8000b08 <__aeabi_d2iz>
 8003aea:	4603      	mov	r3, r0
 8003aec:	b21a      	sxth	r2, r3
 8003aee:	4b11      	ldr	r3, [pc, #68]	@ (8003b34 <read_sensor+0x294>)
 8003af0:	809a      	strh	r2, [r3, #4]
    stack_task_sensor = uxTaskGetStackHighWaterMark( NULL );
 8003af2:	2000      	movs	r0, #0
 8003af4:	f00d fb0a 	bl	801110c <uxTaskGetStackHighWaterMark>
 8003af8:	4603      	mov	r3, r0
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	4b0e      	ldr	r3, [pc, #56]	@ (8003b38 <read_sensor+0x298>)
 8003afe:	801a      	strh	r2, [r3, #0]
	vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8003b00:	f107 0310 	add.w	r3, r7, #16
 8003b04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b06:	4618      	mov	r0, r3
 8003b08:	f00c fd34 	bl	8010574 <vTaskDelayUntil>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); // debug
 8003b0c:	2108      	movs	r1, #8
 8003b0e:	480b      	ldr	r0, [pc, #44]	@ (8003b3c <read_sensor+0x29c>)
 8003b10:	f001 fd13 	bl	800553a <HAL_GPIO_TogglePin>
	mpu6050_gyro_get_raw(&raw);
 8003b14:	e6f4      	b.n	8003900 <read_sensor+0x60>
 8003b16:	bf00      	nop
 8003b18:	9999999a 	.word	0x9999999a
 8003b1c:	3fb99999 	.word	0x3fb99999
 8003b20:	200027d4 	.word	0x200027d4
 8003b24:	200015ac 	.word	0x200015ac
 8003b28:	66666667 	.word	0x66666667
 8003b2c:	2000159c 	.word	0x2000159c
 8003b30:	20001334 	.word	0x20001334
 8003b34:	200015a4 	.word	0x200015a4
 8003b38:	2000277a 	.word	0x2000277a
 8003b3c:	40010c00 	.word	0x40010c00

08003b40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b46:	f107 0310 	add.w	r3, r7, #16
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	605a      	str	r2, [r3, #4]
 8003b50:	609a      	str	r2, [r3, #8]
 8003b52:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b54:	4b46      	ldr	r3, [pc, #280]	@ (8003c70 <MX_GPIO_Init+0x130>)
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	4a45      	ldr	r2, [pc, #276]	@ (8003c70 <MX_GPIO_Init+0x130>)
 8003b5a:	f043 0310 	orr.w	r3, r3, #16
 8003b5e:	6193      	str	r3, [r2, #24]
 8003b60:	4b43      	ldr	r3, [pc, #268]	@ (8003c70 <MX_GPIO_Init+0x130>)
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	f003 0310 	and.w	r3, r3, #16
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6c:	4b40      	ldr	r3, [pc, #256]	@ (8003c70 <MX_GPIO_Init+0x130>)
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	4a3f      	ldr	r2, [pc, #252]	@ (8003c70 <MX_GPIO_Init+0x130>)
 8003b72:	f043 0304 	orr.w	r3, r3, #4
 8003b76:	6193      	str	r3, [r2, #24]
 8003b78:	4b3d      	ldr	r3, [pc, #244]	@ (8003c70 <MX_GPIO_Init+0x130>)
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b84:	4b3a      	ldr	r3, [pc, #232]	@ (8003c70 <MX_GPIO_Init+0x130>)
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	4a39      	ldr	r2, [pc, #228]	@ (8003c70 <MX_GPIO_Init+0x130>)
 8003b8a:	f043 0308 	orr.w	r3, r3, #8
 8003b8e:	6193      	str	r3, [r2, #24]
 8003b90:	4b37      	ldr	r3, [pc, #220]	@ (8003c70 <MX_GPIO_Init+0x130>)
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	f003 0308 	and.w	r3, r3, #8
 8003b98:	607b      	str	r3, [r7, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b9c:	4b34      	ldr	r3, [pc, #208]	@ (8003c70 <MX_GPIO_Init+0x130>)
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	4a33      	ldr	r2, [pc, #204]	@ (8003c70 <MX_GPIO_Init+0x130>)
 8003ba2:	f043 0320 	orr.w	r3, r3, #32
 8003ba6:	6193      	str	r3, [r2, #24]
 8003ba8:	4b31      	ldr	r3, [pc, #196]	@ (8003c70 <MX_GPIO_Init+0x130>)
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	f003 0320 	and.w	r3, r3, #32
 8003bb0:	603b      	str	r3, [r7, #0]
 8003bb2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003bba:	482e      	ldr	r0, [pc, #184]	@ (8003c74 <MX_GPIO_Init+0x134>)
 8003bbc:	f001 fca5 	bl	800550a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2130      	movs	r1, #48	@ 0x30
 8003bc4:	482c      	ldr	r0, [pc, #176]	@ (8003c78 <MX_GPIO_Init+0x138>)
 8003bc6:	f001 fca0 	bl	800550a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8003bca:	2200      	movs	r2, #0
 8003bcc:	2180      	movs	r1, #128	@ 0x80
 8003bce:	482b      	ldr	r0, [pc, #172]	@ (8003c7c <MX_GPIO_Init+0x13c>)
 8003bd0:	f001 fc9b 	bl	800550a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	2118      	movs	r1, #24
 8003bd8:	4829      	ldr	r0, [pc, #164]	@ (8003c80 <MX_GPIO_Init+0x140>)
 8003bda:	f001 fc96 	bl	800550a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003bde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003be2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003be4:	2301      	movs	r3, #1
 8003be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bec:	2302      	movs	r3, #2
 8003bee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bf0:	f107 0310 	add.w	r3, r7, #16
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	481f      	ldr	r0, [pc, #124]	@ (8003c74 <MX_GPIO_Init+0x134>)
 8003bf8:	f001 fadc 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003bfc:	2330      	movs	r3, #48	@ 0x30
 8003bfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c00:	2301      	movs	r3, #1
 8003c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c04:	2300      	movs	r3, #0
 8003c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c08:	2302      	movs	r3, #2
 8003c0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c0c:	f107 0310 	add.w	r3, r7, #16
 8003c10:	4619      	mov	r1, r3
 8003c12:	4819      	ldr	r0, [pc, #100]	@ (8003c78 <MX_GPIO_Init+0x138>)
 8003c14:	f001 face 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003c18:	2380      	movs	r3, #128	@ 0x80
 8003c1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c20:	2300      	movs	r3, #0
 8003c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c24:	2302      	movs	r3, #2
 8003c26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c28:	f107 0310 	add.w	r3, r7, #16
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4813      	ldr	r0, [pc, #76]	@ (8003c7c <MX_GPIO_Init+0x13c>)
 8003c30:	f001 fac0 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003c34:	2318      	movs	r3, #24
 8003c36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c40:	2302      	movs	r3, #2
 8003c42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c44:	f107 0310 	add.w	r3, r7, #16
 8003c48:	4619      	mov	r1, r3
 8003c4a:	480d      	ldr	r0, [pc, #52]	@ (8003c80 <MX_GPIO_Init+0x140>)
 8003c4c:	f001 fab2 	bl	80051b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003c50:	2320      	movs	r3, #32
 8003c52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c58:	2302      	movs	r3, #2
 8003c5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c5c:	f107 0310 	add.w	r3, r7, #16
 8003c60:	4619      	mov	r1, r3
 8003c62:	4807      	ldr	r0, [pc, #28]	@ (8003c80 <MX_GPIO_Init+0x140>)
 8003c64:	f001 faa6 	bl	80051b4 <HAL_GPIO_Init>

}
 8003c68:	bf00      	nop
 8003c6a:	3720      	adds	r7, #32
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40021000 	.word	0x40021000
 8003c74:	40011000 	.word	0x40011000
 8003c78:	40010800 	.word	0x40010800
 8003c7c:	40011400 	.word	0x40011400
 8003c80:	40010c00 	.word	0x40010c00

08003c84 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c88:	4b12      	ldr	r3, [pc, #72]	@ (8003cd4 <MX_I2C1_Init+0x50>)
 8003c8a:	4a13      	ldr	r2, [pc, #76]	@ (8003cd8 <MX_I2C1_Init+0x54>)
 8003c8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003c8e:	4b11      	ldr	r3, [pc, #68]	@ (8003cd4 <MX_I2C1_Init+0x50>)
 8003c90:	4a12      	ldr	r2, [pc, #72]	@ (8003cdc <MX_I2C1_Init+0x58>)
 8003c92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c94:	4b0f      	ldr	r3, [pc, #60]	@ (8003cd4 <MX_I2C1_Init+0x50>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8003cd4 <MX_I2C1_Init+0x50>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd4 <MX_I2C1_Init+0x50>)
 8003ca2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003ca6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd4 <MX_I2C1_Init+0x50>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003cae:	4b09      	ldr	r3, [pc, #36]	@ (8003cd4 <MX_I2C1_Init+0x50>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003cb4:	4b07      	ldr	r3, [pc, #28]	@ (8003cd4 <MX_I2C1_Init+0x50>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003cba:	4b06      	ldr	r3, [pc, #24]	@ (8003cd4 <MX_I2C1_Init+0x50>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003cc0:	4804      	ldr	r0, [pc, #16]	@ (8003cd4 <MX_I2C1_Init+0x50>)
 8003cc2:	f001 fc53 	bl	800556c <HAL_I2C_Init>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003ccc:	f000 f928 	bl	8003f20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003cd0:	bf00      	nop
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20002780 	.word	0x20002780
 8003cd8:	40005400 	.word	0x40005400
 8003cdc:	00061a80 	.word	0x00061a80

08003ce0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003ce4:	4b12      	ldr	r3, [pc, #72]	@ (8003d30 <MX_I2C2_Init+0x50>)
 8003ce6:	4a13      	ldr	r2, [pc, #76]	@ (8003d34 <MX_I2C2_Init+0x54>)
 8003ce8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003cea:	4b11      	ldr	r3, [pc, #68]	@ (8003d30 <MX_I2C2_Init+0x50>)
 8003cec:	4a12      	ldr	r2, [pc, #72]	@ (8003d38 <MX_I2C2_Init+0x58>)
 8003cee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8003d30 <MX_I2C2_Init+0x50>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8003d30 <MX_I2C2_Init+0x50>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8003d30 <MX_I2C2_Init+0x50>)
 8003cfe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003d02:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d04:	4b0a      	ldr	r3, [pc, #40]	@ (8003d30 <MX_I2C2_Init+0x50>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003d0a:	4b09      	ldr	r3, [pc, #36]	@ (8003d30 <MX_I2C2_Init+0x50>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d10:	4b07      	ldr	r3, [pc, #28]	@ (8003d30 <MX_I2C2_Init+0x50>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d16:	4b06      	ldr	r3, [pc, #24]	@ (8003d30 <MX_I2C2_Init+0x50>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003d1c:	4804      	ldr	r0, [pc, #16]	@ (8003d30 <MX_I2C2_Init+0x50>)
 8003d1e:	f001 fc25 	bl	800556c <HAL_I2C_Init>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003d28:	f000 f8fa 	bl	8003f20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003d2c:	bf00      	nop
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	200027d4 	.word	0x200027d4
 8003d34:	40005800 	.word	0x40005800
 8003d38:	00061a80 	.word	0x00061a80

08003d3c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08a      	sub	sp, #40	@ 0x28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d44:	f107 0318 	add.w	r3, r7, #24
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	605a      	str	r2, [r3, #4]
 8003d4e:	609a      	str	r2, [r3, #8]
 8003d50:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a2b      	ldr	r2, [pc, #172]	@ (8003e04 <HAL_I2C_MspInit+0xc8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d124      	bne.n	8003da6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8003e08 <HAL_I2C_MspInit+0xcc>)
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	4a29      	ldr	r2, [pc, #164]	@ (8003e08 <HAL_I2C_MspInit+0xcc>)
 8003d62:	f043 0308 	orr.w	r3, r3, #8
 8003d66:	6193      	str	r3, [r2, #24]
 8003d68:	4b27      	ldr	r3, [pc, #156]	@ (8003e08 <HAL_I2C_MspInit+0xcc>)
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d74:	23c0      	movs	r3, #192	@ 0xc0
 8003d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d78:	2312      	movs	r3, #18
 8003d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d80:	f107 0318 	add.w	r3, r7, #24
 8003d84:	4619      	mov	r1, r3
 8003d86:	4821      	ldr	r0, [pc, #132]	@ (8003e0c <HAL_I2C_MspInit+0xd0>)
 8003d88:	f001 fa14 	bl	80051b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8003e08 <HAL_I2C_MspInit+0xcc>)
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	4a1d      	ldr	r2, [pc, #116]	@ (8003e08 <HAL_I2C_MspInit+0xcc>)
 8003d92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003d96:	61d3      	str	r3, [r2, #28]
 8003d98:	4b1b      	ldr	r3, [pc, #108]	@ (8003e08 <HAL_I2C_MspInit+0xcc>)
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003da4:	e029      	b.n	8003dfa <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a19      	ldr	r2, [pc, #100]	@ (8003e10 <HAL_I2C_MspInit+0xd4>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d124      	bne.n	8003dfa <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003db0:	4b15      	ldr	r3, [pc, #84]	@ (8003e08 <HAL_I2C_MspInit+0xcc>)
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	4a14      	ldr	r2, [pc, #80]	@ (8003e08 <HAL_I2C_MspInit+0xcc>)
 8003db6:	f043 0308 	orr.w	r3, r3, #8
 8003dba:	6193      	str	r3, [r2, #24]
 8003dbc:	4b12      	ldr	r3, [pc, #72]	@ (8003e08 <HAL_I2C_MspInit+0xcc>)
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	f003 0308 	and.w	r3, r3, #8
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003dc8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dce:	2312      	movs	r3, #18
 8003dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dd6:	f107 0318 	add.w	r3, r7, #24
 8003dda:	4619      	mov	r1, r3
 8003ddc:	480b      	ldr	r0, [pc, #44]	@ (8003e0c <HAL_I2C_MspInit+0xd0>)
 8003dde:	f001 f9e9 	bl	80051b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003de2:	4b09      	ldr	r3, [pc, #36]	@ (8003e08 <HAL_I2C_MspInit+0xcc>)
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	4a08      	ldr	r2, [pc, #32]	@ (8003e08 <HAL_I2C_MspInit+0xcc>)
 8003de8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003dec:	61d3      	str	r3, [r2, #28]
 8003dee:	4b06      	ldr	r3, [pc, #24]	@ (8003e08 <HAL_I2C_MspInit+0xcc>)
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003df6:	60bb      	str	r3, [r7, #8]
 8003df8:	68bb      	ldr	r3, [r7, #8]
}
 8003dfa:	bf00      	nop
 8003dfc:	3728      	adds	r7, #40	@ 0x28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40005400 	.word	0x40005400
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	40010c00 	.word	0x40010c00
 8003e10:	40005800 	.word	0x40005800

08003e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e18:	f000 ff54 	bl	8004cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e1c:	f000 f81a 	bl	8003e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e20:	f7ff fe8e 	bl	8003b40 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003e24:	f7ff ff2e 	bl	8003c84 <MX_I2C1_Init>
  MX_I2C2_Init();
 8003e28:	f7ff ff5a 	bl	8003ce0 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8003e2c:	f000 f87e 	bl	8003f2c <MX_SDIO_SD_Init>
  MX_TIM7_Init();
 8003e30:	f000 faca 	bl	80043c8 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8003e34:	f000 fb8c 	bl	8004550 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003e38:	f000 fbb4 	bl	80045a4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003e3c:	f000 fbdc 	bl	80045f8 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8003e40:	f007 f828 	bl	800ae94 <MX_FATFS_Init>
  MX_TIM3_Init();
 8003e44:	f000 fa34 	bl	80042b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8003e48:	f7ff fb8c 	bl	8003564 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003e4c:	f00b fa3e 	bl	800f2cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003e50:	bf00      	nop
 8003e52:	e7fd      	b.n	8003e50 <main+0x3c>

08003e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b090      	sub	sp, #64	@ 0x40
 8003e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e5a:	f107 0318 	add.w	r3, r7, #24
 8003e5e:	2228      	movs	r2, #40	@ 0x28
 8003e60:	2100      	movs	r1, #0
 8003e62:	4618      	mov	r0, r3
 8003e64:	f00e f8a4 	bl	8011fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e68:	1d3b      	adds	r3, r7, #4
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	605a      	str	r2, [r3, #4]
 8003e70:	609a      	str	r2, [r3, #8]
 8003e72:	60da      	str	r2, [r3, #12]
 8003e74:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003e76:	2301      	movs	r3, #1
 8003e78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e7a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003e80:	2300      	movs	r3, #0
 8003e82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e84:	2301      	movs	r3, #1
 8003e86:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e88:	2302      	movs	r3, #2
 8003e8a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e8c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003e92:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8003e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e98:	f107 0318 	add.w	r3, r7, #24
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f003 f9a7 	bl	80071f0 <HAL_RCC_OscConfig>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003ea8:	f000 f83a 	bl	8003f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003eac:	230f      	movs	r3, #15
 8003eae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003eb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ebc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003ec2:	1d3b      	adds	r3, r7, #4
 8003ec4:	2102      	movs	r1, #2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f003 fc14 	bl	80076f4 <HAL_RCC_ClockConfig>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003ed2:	f000 f825 	bl	8003f20 <Error_Handler>
  }
}
 8003ed6:	bf00      	nop
 8003ed8:	3740      	adds	r7, #64	@ 0x40
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
	...

08003ee0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ef0:	d102      	bne.n	8003ef8 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8003ef2:	f000 fefd 	bl	8004cf0 <HAL_IncTick>
  else if(htim->Instance == TIM7){
	  TIMER_CALLBACK();
  }

  /* USER CODE END Callback 1 */
}
 8003ef6:	e00b      	b.n	8003f10 <HAL_TIM_PeriodElapsedCallback+0x30>
  else if(htim->Instance == TIM7){
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a06      	ldr	r2, [pc, #24]	@ (8003f18 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d106      	bne.n	8003f10 <HAL_TIM_PeriodElapsedCallback+0x30>
	  TIMER_CALLBACK();
 8003f02:	4b06      	ldr	r3, [pc, #24]	@ (8003f1c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003f0a:	33ff      	adds	r3, #255	@ 0xff
 8003f0c:	4a03      	ldr	r2, [pc, #12]	@ (8003f1c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003f0e:	6013      	str	r3, [r2, #0]
}
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40001400 	.word	0x40001400
 8003f1c:	20001330 	.word	0x20001330

08003f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f24:	b672      	cpsid	i
}
 8003f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f28:	bf00      	nop
 8003f2a:	e7fd      	b.n	8003f28 <Error_Handler+0x8>

08003f2c <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003f30:	4b0d      	ldr	r3, [pc, #52]	@ (8003f68 <MX_SDIO_SD_Init+0x3c>)
 8003f32:	4a0e      	ldr	r2, [pc, #56]	@ (8003f6c <MX_SDIO_SD_Init+0x40>)
 8003f34:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003f36:	4b0c      	ldr	r3, [pc, #48]	@ (8003f68 <MX_SDIO_SD_Init+0x3c>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <MX_SDIO_SD_Init+0x3c>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003f42:	4b09      	ldr	r3, [pc, #36]	@ (8003f68 <MX_SDIO_SD_Init+0x3c>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003f48:	4b07      	ldr	r3, [pc, #28]	@ (8003f68 <MX_SDIO_SD_Init+0x3c>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003f4e:	4b06      	ldr	r3, [pc, #24]	@ (8003f68 <MX_SDIO_SD_Init+0x3c>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 255;
 8003f54:	4b04      	ldr	r3, [pc, #16]	@ (8003f68 <MX_SDIO_SD_Init+0x3c>)
 8003f56:	22ff      	movs	r2, #255	@ 0xff
 8003f58:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.ClockDiv = 255;
 8003f5a:	4b03      	ldr	r3, [pc, #12]	@ (8003f68 <MX_SDIO_SD_Init+0x3c>)
 8003f5c:	22ff      	movs	r2, #255	@ 0xff
 8003f5e:	619a      	str	r2, [r3, #24]
  /* USER CODE END SDIO_Init 2 */

}
 8003f60:	bf00      	nop
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr
 8003f68:	20002828 	.word	0x20002828
 8003f6c:	40018000 	.word	0x40018000

08003f70 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08a      	sub	sp, #40	@ 0x28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f78:	f107 0318 	add.w	r3, r7, #24
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	605a      	str	r2, [r3, #4]
 8003f82:	609a      	str	r2, [r3, #8]
 8003f84:	60da      	str	r2, [r3, #12]
  if(sdHandle->Instance==SDIO)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a22      	ldr	r2, [pc, #136]	@ (8004014 <HAL_SD_MspInit+0xa4>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d13c      	bne.n	800400a <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003f90:	4b21      	ldr	r3, [pc, #132]	@ (8004018 <HAL_SD_MspInit+0xa8>)
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	4a20      	ldr	r2, [pc, #128]	@ (8004018 <HAL_SD_MspInit+0xa8>)
 8003f96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f9a:	6153      	str	r3, [r2, #20]
 8003f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8004018 <HAL_SD_MspInit+0xa8>)
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8004018 <HAL_SD_MspInit+0xa8>)
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	4a1a      	ldr	r2, [pc, #104]	@ (8004018 <HAL_SD_MspInit+0xa8>)
 8003fae:	f043 0310 	orr.w	r3, r3, #16
 8003fb2:	6193      	str	r3, [r2, #24]
 8003fb4:	4b18      	ldr	r3, [pc, #96]	@ (8004018 <HAL_SD_MspInit+0xa8>)
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	f003 0310 	and.w	r3, r3, #16
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fc0:	4b15      	ldr	r3, [pc, #84]	@ (8004018 <HAL_SD_MspInit+0xa8>)
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	4a14      	ldr	r2, [pc, #80]	@ (8004018 <HAL_SD_MspInit+0xa8>)
 8003fc6:	f043 0320 	orr.w	r3, r3, #32
 8003fca:	6193      	str	r3, [r2, #24]
 8003fcc:	4b12      	ldr	r3, [pc, #72]	@ (8004018 <HAL_SD_MspInit+0xa8>)
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8003fd8:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8003fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fde:	2302      	movs	r3, #2
 8003fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fe6:	f107 0318 	add.w	r3, r7, #24
 8003fea:	4619      	mov	r1, r3
 8003fec:	480b      	ldr	r0, [pc, #44]	@ (800401c <HAL_SD_MspInit+0xac>)
 8003fee:	f001 f8e1 	bl	80051b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003ff2:	2304      	movs	r3, #4
 8003ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ffe:	f107 0318 	add.w	r3, r7, #24
 8004002:	4619      	mov	r1, r3
 8004004:	4806      	ldr	r0, [pc, #24]	@ (8004020 <HAL_SD_MspInit+0xb0>)
 8004006:	f001 f8d5 	bl	80051b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800400a:	bf00      	nop
 800400c:	3728      	adds	r7, #40	@ 0x28
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40018000 	.word	0x40018000
 8004018:	40021000 	.word	0x40021000
 800401c:	40011000 	.word	0x40011000
 8004020:	40011400 	.word	0x40011400

08004024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800402a:	4b18      	ldr	r3, [pc, #96]	@ (800408c <HAL_MspInit+0x68>)
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	4a17      	ldr	r2, [pc, #92]	@ (800408c <HAL_MspInit+0x68>)
 8004030:	f043 0301 	orr.w	r3, r3, #1
 8004034:	6193      	str	r3, [r2, #24]
 8004036:	4b15      	ldr	r3, [pc, #84]	@ (800408c <HAL_MspInit+0x68>)
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	60bb      	str	r3, [r7, #8]
 8004040:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004042:	4b12      	ldr	r3, [pc, #72]	@ (800408c <HAL_MspInit+0x68>)
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	4a11      	ldr	r2, [pc, #68]	@ (800408c <HAL_MspInit+0x68>)
 8004048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800404c:	61d3      	str	r3, [r2, #28]
 800404e:	4b0f      	ldr	r3, [pc, #60]	@ (800408c <HAL_MspInit+0x68>)
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004056:	607b      	str	r3, [r7, #4]
 8004058:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800405a:	2200      	movs	r2, #0
 800405c:	210f      	movs	r1, #15
 800405e:	f06f 0001 	mvn.w	r0, #1
 8004062:	f000 ff3a 	bl	8004eda <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004066:	4b0a      	ldr	r3, [pc, #40]	@ (8004090 <HAL_MspInit+0x6c>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	4a04      	ldr	r2, [pc, #16]	@ (8004090 <HAL_MspInit+0x6c>)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004082:	bf00      	nop
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40021000 	.word	0x40021000
 8004090:	40010000 	.word	0x40010000

08004094 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08e      	sub	sp, #56	@ 0x38
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80040aa:	4b34      	ldr	r3, [pc, #208]	@ (800417c <HAL_InitTick+0xe8>)
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	4a33      	ldr	r2, [pc, #204]	@ (800417c <HAL_InitTick+0xe8>)
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	61d3      	str	r3, [r2, #28]
 80040b6:	4b31      	ldr	r3, [pc, #196]	@ (800417c <HAL_InitTick+0xe8>)
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80040c2:	f107 0210 	add.w	r2, r7, #16
 80040c6:	f107 0314 	add.w	r3, r7, #20
 80040ca:	4611      	mov	r1, r2
 80040cc:	4618      	mov	r0, r3
 80040ce:	f003 fc81 	bl	80079d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80040d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d103      	bne.n	80040e4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80040dc:	f003 fc52 	bl	8007984 <HAL_RCC_GetPCLK1Freq>
 80040e0:	6378      	str	r0, [r7, #52]	@ 0x34
 80040e2:	e004      	b.n	80040ee <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80040e4:	f003 fc4e 	bl	8007984 <HAL_RCC_GetPCLK1Freq>
 80040e8:	4603      	mov	r3, r0
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80040ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040f0:	4a23      	ldr	r2, [pc, #140]	@ (8004180 <HAL_InitTick+0xec>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	0c9b      	lsrs	r3, r3, #18
 80040f8:	3b01      	subs	r3, #1
 80040fa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80040fc:	4b21      	ldr	r3, [pc, #132]	@ (8004184 <HAL_InitTick+0xf0>)
 80040fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004102:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8004104:	4b1f      	ldr	r3, [pc, #124]	@ (8004184 <HAL_InitTick+0xf0>)
 8004106:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800410a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800410c:	4a1d      	ldr	r2, [pc, #116]	@ (8004184 <HAL_InitTick+0xf0>)
 800410e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004110:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8004112:	4b1c      	ldr	r3, [pc, #112]	@ (8004184 <HAL_InitTick+0xf0>)
 8004114:	2200      	movs	r2, #0
 8004116:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004118:	4b1a      	ldr	r3, [pc, #104]	@ (8004184 <HAL_InitTick+0xf0>)
 800411a:	2200      	movs	r2, #0
 800411c:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800411e:	4b19      	ldr	r3, [pc, #100]	@ (8004184 <HAL_InitTick+0xf0>)
 8004120:	2200      	movs	r2, #0
 8004122:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8004124:	4817      	ldr	r0, [pc, #92]	@ (8004184 <HAL_InitTick+0xf0>)
 8004126:	f004 fc2b 	bl	8008980 <HAL_TIM_Base_Init>
 800412a:	4603      	mov	r3, r0
 800412c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004130:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004134:	2b00      	cmp	r3, #0
 8004136:	d11b      	bne.n	8004170 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8004138:	4812      	ldr	r0, [pc, #72]	@ (8004184 <HAL_InitTick+0xf0>)
 800413a:	f004 fc71 	bl	8008a20 <HAL_TIM_Base_Start_IT>
 800413e:	4603      	mov	r3, r0
 8004140:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004144:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004148:	2b00      	cmp	r3, #0
 800414a:	d111      	bne.n	8004170 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800414c:	201c      	movs	r0, #28
 800414e:	f000 fee0 	bl	8004f12 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b0f      	cmp	r3, #15
 8004156:	d808      	bhi.n	800416a <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8004158:	2200      	movs	r2, #0
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	201c      	movs	r0, #28
 800415e:	f000 febc 	bl	8004eda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004162:	4a09      	ldr	r2, [pc, #36]	@ (8004188 <HAL_InitTick+0xf4>)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	e002      	b.n	8004170 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004170:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004174:	4618      	mov	r0, r3
 8004176:	3738      	adds	r7, #56	@ 0x38
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40021000 	.word	0x40021000
 8004180:	431bde83 	.word	0x431bde83
 8004184:	200028ac 	.word	0x200028ac
 8004188:	20000028 	.word	0x20000028

0800418c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004190:	bf00      	nop
 8004192:	e7fd      	b.n	8004190 <NMI_Handler+0x4>

08004194 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004198:	bf00      	nop
 800419a:	e7fd      	b.n	8004198 <HardFault_Handler+0x4>

0800419c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041a0:	bf00      	nop
 80041a2:	e7fd      	b.n	80041a0 <MemManage_Handler+0x4>

080041a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041a8:	bf00      	nop
 80041aa:	e7fd      	b.n	80041a8 <BusFault_Handler+0x4>

080041ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041b0:	bf00      	nop
 80041b2:	e7fd      	b.n	80041b0 <UsageFault_Handler+0x4>

080041b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041b8:	bf00      	nop
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr

080041c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80041c4:	4802      	ldr	r0, [pc, #8]	@ (80041d0 <TIM2_IRQHandler+0x10>)
 80041c6:	f004 fce3 	bl	8008b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80041ca:	bf00      	nop
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	200028ac 	.word	0x200028ac

080041d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80041d8:	4802      	ldr	r0, [pc, #8]	@ (80041e4 <TIM3_IRQHandler+0x10>)
 80041da:	f004 fcd9 	bl	8008b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	200028f8 	.word	0x200028f8

080041e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80041ec:	4802      	ldr	r0, [pc, #8]	@ (80041f8 <USART1_IRQHandler+0x10>)
 80041ee:	f005 fbb7 	bl	8009960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80041f2:	bf00      	nop
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20002988 	.word	0x20002988

080041fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004200:	4802      	ldr	r0, [pc, #8]	@ (800420c <USART2_IRQHandler+0x10>)
 8004202:	f005 fbad 	bl	8009960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004206:	bf00      	nop
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	200029d0 	.word	0x200029d0

08004210 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004214:	4802      	ldr	r0, [pc, #8]	@ (8004220 <USART3_IRQHandler+0x10>)
 8004216:	f005 fba3 	bl	8009960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800421a:	bf00      	nop
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	20002a18 	.word	0x20002a18

08004224 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004228:	4802      	ldr	r0, [pc, #8]	@ (8004234 <TIM7_IRQHandler+0x10>)
 800422a:	f004 fcb1 	bl	8008b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800422e:	bf00      	nop
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20002940 	.word	0x20002940

08004238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004240:	4a14      	ldr	r2, [pc, #80]	@ (8004294 <_sbrk+0x5c>)
 8004242:	4b15      	ldr	r3, [pc, #84]	@ (8004298 <_sbrk+0x60>)
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800424c:	4b13      	ldr	r3, [pc, #76]	@ (800429c <_sbrk+0x64>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d102      	bne.n	800425a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004254:	4b11      	ldr	r3, [pc, #68]	@ (800429c <_sbrk+0x64>)
 8004256:	4a12      	ldr	r2, [pc, #72]	@ (80042a0 <_sbrk+0x68>)
 8004258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800425a:	4b10      	ldr	r3, [pc, #64]	@ (800429c <_sbrk+0x64>)
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4413      	add	r3, r2
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	429a      	cmp	r2, r3
 8004266:	d207      	bcs.n	8004278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004268:	f00d feba 	bl	8011fe0 <__errno>
 800426c:	4603      	mov	r3, r0
 800426e:	220c      	movs	r2, #12
 8004270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004272:	f04f 33ff 	mov.w	r3, #4294967295
 8004276:	e009      	b.n	800428c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004278:	4b08      	ldr	r3, [pc, #32]	@ (800429c <_sbrk+0x64>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800427e:	4b07      	ldr	r3, [pc, #28]	@ (800429c <_sbrk+0x64>)
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4413      	add	r3, r2
 8004286:	4a05      	ldr	r2, [pc, #20]	@ (800429c <_sbrk+0x64>)
 8004288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800428a:	68fb      	ldr	r3, [r7, #12]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	2000c000 	.word	0x2000c000
 8004298:	00004000 	.word	0x00004000
 800429c:	200028f4 	.word	0x200028f4
 80042a0:	20003970 	.word	0x20003970

080042a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042a8:	bf00      	nop
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bc80      	pop	{r7}
 80042ae:	4770      	bx	lr

080042b0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08e      	sub	sp, #56	@ 0x38
 80042b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	605a      	str	r2, [r3, #4]
 80042c0:	609a      	str	r2, [r3, #8]
 80042c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042c4:	f107 0320 	add.w	r3, r7, #32
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042ce:	1d3b      	adds	r3, r7, #4
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	605a      	str	r2, [r3, #4]
 80042d6:	609a      	str	r2, [r3, #8]
 80042d8:	60da      	str	r2, [r3, #12]
 80042da:	611a      	str	r2, [r3, #16]
 80042dc:	615a      	str	r2, [r3, #20]
 80042de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80042e0:	4b37      	ldr	r3, [pc, #220]	@ (80043c0 <MX_TIM3_Init+0x110>)
 80042e2:	4a38      	ldr	r2, [pc, #224]	@ (80043c4 <MX_TIM3_Init+0x114>)
 80042e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80042e6:	4b36      	ldr	r3, [pc, #216]	@ (80043c0 <MX_TIM3_Init+0x110>)
 80042e8:	2247      	movs	r2, #71	@ 0x47
 80042ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042ec:	4b34      	ldr	r3, [pc, #208]	@ (80043c0 <MX_TIM3_Init+0x110>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80042f2:	4b33      	ldr	r3, [pc, #204]	@ (80043c0 <MX_TIM3_Init+0x110>)
 80042f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80042f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042fa:	4b31      	ldr	r3, [pc, #196]	@ (80043c0 <MX_TIM3_Init+0x110>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004300:	4b2f      	ldr	r3, [pc, #188]	@ (80043c0 <MX_TIM3_Init+0x110>)
 8004302:	2280      	movs	r2, #128	@ 0x80
 8004304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004306:	482e      	ldr	r0, [pc, #184]	@ (80043c0 <MX_TIM3_Init+0x110>)
 8004308:	f004 fb3a 	bl	8008980 <HAL_TIM_Base_Init>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004312:	f7ff fe05 	bl	8003f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004316:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800431a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800431c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004320:	4619      	mov	r1, r3
 8004322:	4827      	ldr	r0, [pc, #156]	@ (80043c0 <MX_TIM3_Init+0x110>)
 8004324:	f004 fdfe 	bl	8008f24 <HAL_TIM_ConfigClockSource>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800432e:	f7ff fdf7 	bl	8003f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004332:	4823      	ldr	r0, [pc, #140]	@ (80043c0 <MX_TIM3_Init+0x110>)
 8004334:	f004 fbd4 	bl	8008ae0 <HAL_TIM_PWM_Init>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800433e:	f7ff fdef 	bl	8003f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004342:	2300      	movs	r3, #0
 8004344:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004346:	2300      	movs	r3, #0
 8004348:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800434a:	f107 0320 	add.w	r3, r7, #32
 800434e:	4619      	mov	r1, r3
 8004350:	481b      	ldr	r0, [pc, #108]	@ (80043c0 <MX_TIM3_Init+0x110>)
 8004352:	f005 f98f 	bl	8009674 <HAL_TIMEx_MasterConfigSynchronization>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800435c:	f7ff fde0 	bl	8003f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004360:	2360      	movs	r3, #96	@ 0x60
 8004362:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004370:	1d3b      	adds	r3, r7, #4
 8004372:	2200      	movs	r2, #0
 8004374:	4619      	mov	r1, r3
 8004376:	4812      	ldr	r0, [pc, #72]	@ (80043c0 <MX_TIM3_Init+0x110>)
 8004378:	f004 fd12 	bl	8008da0 <HAL_TIM_PWM_ConfigChannel>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004382:	f7ff fdcd 	bl	8003f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004386:	1d3b      	adds	r3, r7, #4
 8004388:	2204      	movs	r2, #4
 800438a:	4619      	mov	r1, r3
 800438c:	480c      	ldr	r0, [pc, #48]	@ (80043c0 <MX_TIM3_Init+0x110>)
 800438e:	f004 fd07 	bl	8008da0 <HAL_TIM_PWM_ConfigChannel>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004398:	f7ff fdc2 	bl	8003f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800439c:	1d3b      	adds	r3, r7, #4
 800439e:	2208      	movs	r2, #8
 80043a0:	4619      	mov	r1, r3
 80043a2:	4807      	ldr	r0, [pc, #28]	@ (80043c0 <MX_TIM3_Init+0x110>)
 80043a4:	f004 fcfc 	bl	8008da0 <HAL_TIM_PWM_ConfigChannel>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80043ae:	f7ff fdb7 	bl	8003f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80043b2:	4803      	ldr	r0, [pc, #12]	@ (80043c0 <MX_TIM3_Init+0x110>)
 80043b4:	f000 f880 	bl	80044b8 <HAL_TIM_MspPostInit>

}
 80043b8:	bf00      	nop
 80043ba:	3738      	adds	r7, #56	@ 0x38
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	200028f8 	.word	0x200028f8
 80043c4:	40000400 	.word	0x40000400

080043c8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043ce:	463b      	mov	r3, r7
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80043d6:	4b15      	ldr	r3, [pc, #84]	@ (800442c <MX_TIM7_Init+0x64>)
 80043d8:	4a15      	ldr	r2, [pc, #84]	@ (8004430 <MX_TIM7_Init+0x68>)
 80043da:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 80043dc:	4b13      	ldr	r3, [pc, #76]	@ (800442c <MX_TIM7_Init+0x64>)
 80043de:	2247      	movs	r2, #71	@ 0x47
 80043e0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043e2:	4b12      	ldr	r3, [pc, #72]	@ (800442c <MX_TIM7_Init+0x64>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80043e8:	4b10      	ldr	r3, [pc, #64]	@ (800442c <MX_TIM7_Init+0x64>)
 80043ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80043ee:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80043f0:	4b0e      	ldr	r3, [pc, #56]	@ (800442c <MX_TIM7_Init+0x64>)
 80043f2:	2280      	movs	r2, #128	@ 0x80
 80043f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80043f6:	480d      	ldr	r0, [pc, #52]	@ (800442c <MX_TIM7_Init+0x64>)
 80043f8:	f004 fac2 	bl	8008980 <HAL_TIM_Base_Init>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8004402:	f7ff fd8d 	bl	8003f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004406:	2300      	movs	r3, #0
 8004408:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800440a:	2300      	movs	r3, #0
 800440c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800440e:	463b      	mov	r3, r7
 8004410:	4619      	mov	r1, r3
 8004412:	4806      	ldr	r0, [pc, #24]	@ (800442c <MX_TIM7_Init+0x64>)
 8004414:	f005 f92e 	bl	8009674 <HAL_TIMEx_MasterConfigSynchronization>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800441e:	f7ff fd7f 	bl	8003f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004422:	bf00      	nop
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	20002940 	.word	0x20002940
 8004430:	40001400 	.word	0x40001400

08004434 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a1a      	ldr	r2, [pc, #104]	@ (80044ac <HAL_TIM_Base_MspInit+0x78>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d114      	bne.n	8004470 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004446:	4b1a      	ldr	r3, [pc, #104]	@ (80044b0 <HAL_TIM_Base_MspInit+0x7c>)
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	4a19      	ldr	r2, [pc, #100]	@ (80044b0 <HAL_TIM_Base_MspInit+0x7c>)
 800444c:	f043 0302 	orr.w	r3, r3, #2
 8004450:	61d3      	str	r3, [r2, #28]
 8004452:	4b17      	ldr	r3, [pc, #92]	@ (80044b0 <HAL_TIM_Base_MspInit+0x7c>)
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800445e:	2200      	movs	r2, #0
 8004460:	2105      	movs	r1, #5
 8004462:	201d      	movs	r0, #29
 8004464:	f000 fd39 	bl	8004eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004468:	201d      	movs	r0, #29
 800446a:	f000 fd52 	bl	8004f12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800446e:	e018      	b.n	80044a2 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a0f      	ldr	r2, [pc, #60]	@ (80044b4 <HAL_TIM_Base_MspInit+0x80>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d113      	bne.n	80044a2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800447a:	4b0d      	ldr	r3, [pc, #52]	@ (80044b0 <HAL_TIM_Base_MspInit+0x7c>)
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	4a0c      	ldr	r2, [pc, #48]	@ (80044b0 <HAL_TIM_Base_MspInit+0x7c>)
 8004480:	f043 0320 	orr.w	r3, r3, #32
 8004484:	61d3      	str	r3, [r2, #28]
 8004486:	4b0a      	ldr	r3, [pc, #40]	@ (80044b0 <HAL_TIM_Base_MspInit+0x7c>)
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	60bb      	str	r3, [r7, #8]
 8004490:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8004492:	2200      	movs	r2, #0
 8004494:	2105      	movs	r1, #5
 8004496:	2037      	movs	r0, #55	@ 0x37
 8004498:	f000 fd1f 	bl	8004eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800449c:	2037      	movs	r0, #55	@ 0x37
 800449e:	f000 fd38 	bl	8004f12 <HAL_NVIC_EnableIRQ>
}
 80044a2:	bf00      	nop
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40000400 	.word	0x40000400
 80044b0:	40021000 	.word	0x40021000
 80044b4:	40001400 	.word	0x40001400

080044b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044c0:	f107 0310 	add.w	r3, r7, #16
 80044c4:	2200      	movs	r2, #0
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	605a      	str	r2, [r3, #4]
 80044ca:	609a      	str	r2, [r3, #8]
 80044cc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004540 <HAL_TIM_MspPostInit+0x88>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d12f      	bne.n	8004538 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004544 <HAL_TIM_MspPostInit+0x8c>)
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	4a19      	ldr	r2, [pc, #100]	@ (8004544 <HAL_TIM_MspPostInit+0x8c>)
 80044de:	f043 0304 	orr.w	r3, r3, #4
 80044e2:	6193      	str	r3, [r2, #24]
 80044e4:	4b17      	ldr	r3, [pc, #92]	@ (8004544 <HAL_TIM_MspPostInit+0x8c>)
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044f0:	4b14      	ldr	r3, [pc, #80]	@ (8004544 <HAL_TIM_MspPostInit+0x8c>)
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	4a13      	ldr	r2, [pc, #76]	@ (8004544 <HAL_TIM_MspPostInit+0x8c>)
 80044f6:	f043 0308 	orr.w	r3, r3, #8
 80044fa:	6193      	str	r3, [r2, #24]
 80044fc:	4b11      	ldr	r3, [pc, #68]	@ (8004544 <HAL_TIM_MspPostInit+0x8c>)
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004508:	23c0      	movs	r3, #192	@ 0xc0
 800450a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450c:	2302      	movs	r3, #2
 800450e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004510:	2302      	movs	r3, #2
 8004512:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004514:	f107 0310 	add.w	r3, r7, #16
 8004518:	4619      	mov	r1, r3
 800451a:	480b      	ldr	r0, [pc, #44]	@ (8004548 <HAL_TIM_MspPostInit+0x90>)
 800451c:	f000 fe4a 	bl	80051b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004520:	2301      	movs	r3, #1
 8004522:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004524:	2302      	movs	r3, #2
 8004526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004528:	2302      	movs	r3, #2
 800452a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800452c:	f107 0310 	add.w	r3, r7, #16
 8004530:	4619      	mov	r1, r3
 8004532:	4806      	ldr	r0, [pc, #24]	@ (800454c <HAL_TIM_MspPostInit+0x94>)
 8004534:	f000 fe3e 	bl	80051b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004538:	bf00      	nop
 800453a:	3720      	adds	r7, #32
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40000400 	.word	0x40000400
 8004544:	40021000 	.word	0x40021000
 8004548:	40010800 	.word	0x40010800
 800454c:	40010c00 	.word	0x40010c00

08004550 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004554:	4b11      	ldr	r3, [pc, #68]	@ (800459c <MX_USART1_UART_Init+0x4c>)
 8004556:	4a12      	ldr	r2, [pc, #72]	@ (80045a0 <MX_USART1_UART_Init+0x50>)
 8004558:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800455a:	4b10      	ldr	r3, [pc, #64]	@ (800459c <MX_USART1_UART_Init+0x4c>)
 800455c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004560:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004562:	4b0e      	ldr	r3, [pc, #56]	@ (800459c <MX_USART1_UART_Init+0x4c>)
 8004564:	2200      	movs	r2, #0
 8004566:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004568:	4b0c      	ldr	r3, [pc, #48]	@ (800459c <MX_USART1_UART_Init+0x4c>)
 800456a:	2200      	movs	r2, #0
 800456c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800456e:	4b0b      	ldr	r3, [pc, #44]	@ (800459c <MX_USART1_UART_Init+0x4c>)
 8004570:	2200      	movs	r2, #0
 8004572:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004574:	4b09      	ldr	r3, [pc, #36]	@ (800459c <MX_USART1_UART_Init+0x4c>)
 8004576:	220c      	movs	r2, #12
 8004578:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800457a:	4b08      	ldr	r3, [pc, #32]	@ (800459c <MX_USART1_UART_Init+0x4c>)
 800457c:	2200      	movs	r2, #0
 800457e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004580:	4b06      	ldr	r3, [pc, #24]	@ (800459c <MX_USART1_UART_Init+0x4c>)
 8004582:	2200      	movs	r2, #0
 8004584:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004586:	4805      	ldr	r0, [pc, #20]	@ (800459c <MX_USART1_UART_Init+0x4c>)
 8004588:	f005 f8f2 	bl	8009770 <HAL_UART_Init>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004592:	f7ff fcc5 	bl	8003f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004596:	bf00      	nop
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	20002988 	.word	0x20002988
 80045a0:	40013800 	.word	0x40013800

080045a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80045a8:	4b11      	ldr	r3, [pc, #68]	@ (80045f0 <MX_USART2_UART_Init+0x4c>)
 80045aa:	4a12      	ldr	r2, [pc, #72]	@ (80045f4 <MX_USART2_UART_Init+0x50>)
 80045ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80045ae:	4b10      	ldr	r3, [pc, #64]	@ (80045f0 <MX_USART2_UART_Init+0x4c>)
 80045b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80045b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80045b6:	4b0e      	ldr	r3, [pc, #56]	@ (80045f0 <MX_USART2_UART_Init+0x4c>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80045bc:	4b0c      	ldr	r3, [pc, #48]	@ (80045f0 <MX_USART2_UART_Init+0x4c>)
 80045be:	2200      	movs	r2, #0
 80045c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80045c2:	4b0b      	ldr	r3, [pc, #44]	@ (80045f0 <MX_USART2_UART_Init+0x4c>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80045c8:	4b09      	ldr	r3, [pc, #36]	@ (80045f0 <MX_USART2_UART_Init+0x4c>)
 80045ca:	220c      	movs	r2, #12
 80045cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045ce:	4b08      	ldr	r3, [pc, #32]	@ (80045f0 <MX_USART2_UART_Init+0x4c>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80045d4:	4b06      	ldr	r3, [pc, #24]	@ (80045f0 <MX_USART2_UART_Init+0x4c>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80045da:	4805      	ldr	r0, [pc, #20]	@ (80045f0 <MX_USART2_UART_Init+0x4c>)
 80045dc:	f005 f8c8 	bl	8009770 <HAL_UART_Init>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80045e6:	f7ff fc9b 	bl	8003f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80045ea:	bf00      	nop
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	200029d0 	.word	0x200029d0
 80045f4:	40004400 	.word	0x40004400

080045f8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80045fc:	4b11      	ldr	r3, [pc, #68]	@ (8004644 <MX_USART3_UART_Init+0x4c>)
 80045fe:	4a12      	ldr	r2, [pc, #72]	@ (8004648 <MX_USART3_UART_Init+0x50>)
 8004600:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004602:	4b10      	ldr	r3, [pc, #64]	@ (8004644 <MX_USART3_UART_Init+0x4c>)
 8004604:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004608:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800460a:	4b0e      	ldr	r3, [pc, #56]	@ (8004644 <MX_USART3_UART_Init+0x4c>)
 800460c:	2200      	movs	r2, #0
 800460e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004610:	4b0c      	ldr	r3, [pc, #48]	@ (8004644 <MX_USART3_UART_Init+0x4c>)
 8004612:	2200      	movs	r2, #0
 8004614:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004616:	4b0b      	ldr	r3, [pc, #44]	@ (8004644 <MX_USART3_UART_Init+0x4c>)
 8004618:	2200      	movs	r2, #0
 800461a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800461c:	4b09      	ldr	r3, [pc, #36]	@ (8004644 <MX_USART3_UART_Init+0x4c>)
 800461e:	220c      	movs	r2, #12
 8004620:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004622:	4b08      	ldr	r3, [pc, #32]	@ (8004644 <MX_USART3_UART_Init+0x4c>)
 8004624:	2200      	movs	r2, #0
 8004626:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004628:	4b06      	ldr	r3, [pc, #24]	@ (8004644 <MX_USART3_UART_Init+0x4c>)
 800462a:	2200      	movs	r2, #0
 800462c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800462e:	4805      	ldr	r0, [pc, #20]	@ (8004644 <MX_USART3_UART_Init+0x4c>)
 8004630:	f005 f89e 	bl	8009770 <HAL_UART_Init>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800463a:	f7ff fc71 	bl	8003f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800463e:	bf00      	nop
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	20002a18 	.word	0x20002a18
 8004648:	40004800 	.word	0x40004800

0800464c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08e      	sub	sp, #56	@ 0x38
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004654:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	605a      	str	r2, [r3, #4]
 800465e:	609a      	str	r2, [r3, #8]
 8004660:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a68      	ldr	r2, [pc, #416]	@ (8004808 <HAL_UART_MspInit+0x1bc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d13a      	bne.n	80046e2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800466c:	4b67      	ldr	r3, [pc, #412]	@ (800480c <HAL_UART_MspInit+0x1c0>)
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	4a66      	ldr	r2, [pc, #408]	@ (800480c <HAL_UART_MspInit+0x1c0>)
 8004672:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004676:	6193      	str	r3, [r2, #24]
 8004678:	4b64      	ldr	r3, [pc, #400]	@ (800480c <HAL_UART_MspInit+0x1c0>)
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004680:	623b      	str	r3, [r7, #32]
 8004682:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004684:	4b61      	ldr	r3, [pc, #388]	@ (800480c <HAL_UART_MspInit+0x1c0>)
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	4a60      	ldr	r2, [pc, #384]	@ (800480c <HAL_UART_MspInit+0x1c0>)
 800468a:	f043 0304 	orr.w	r3, r3, #4
 800468e:	6193      	str	r3, [r2, #24]
 8004690:	4b5e      	ldr	r3, [pc, #376]	@ (800480c <HAL_UART_MspInit+0x1c0>)
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	61fb      	str	r3, [r7, #28]
 800469a:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800469c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80046a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a2:	2302      	movs	r3, #2
 80046a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046a6:	2303      	movs	r3, #3
 80046a8:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046ae:	4619      	mov	r1, r3
 80046b0:	4857      	ldr	r0, [pc, #348]	@ (8004810 <HAL_UART_MspInit+0x1c4>)
 80046b2:	f000 fd7f 	bl	80051b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80046b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046bc:	2300      	movs	r3, #0
 80046be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c0:	2300      	movs	r3, #0
 80046c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046c8:	4619      	mov	r1, r3
 80046ca:	4851      	ldr	r0, [pc, #324]	@ (8004810 <HAL_UART_MspInit+0x1c4>)
 80046cc:	f000 fd72 	bl	80051b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80046d0:	2200      	movs	r2, #0
 80046d2:	2105      	movs	r1, #5
 80046d4:	2025      	movs	r0, #37	@ 0x25
 80046d6:	f000 fc00 	bl	8004eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80046da:	2025      	movs	r0, #37	@ 0x25
 80046dc:	f000 fc19 	bl	8004f12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80046e0:	e08e      	b.n	8004800 <HAL_UART_MspInit+0x1b4>
  else if(uartHandle->Instance==USART2)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a4b      	ldr	r2, [pc, #300]	@ (8004814 <HAL_UART_MspInit+0x1c8>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d138      	bne.n	800475e <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 80046ec:	4b47      	ldr	r3, [pc, #284]	@ (800480c <HAL_UART_MspInit+0x1c0>)
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	4a46      	ldr	r2, [pc, #280]	@ (800480c <HAL_UART_MspInit+0x1c0>)
 80046f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046f6:	61d3      	str	r3, [r2, #28]
 80046f8:	4b44      	ldr	r3, [pc, #272]	@ (800480c <HAL_UART_MspInit+0x1c0>)
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004700:	61bb      	str	r3, [r7, #24]
 8004702:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004704:	4b41      	ldr	r3, [pc, #260]	@ (800480c <HAL_UART_MspInit+0x1c0>)
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	4a40      	ldr	r2, [pc, #256]	@ (800480c <HAL_UART_MspInit+0x1c0>)
 800470a:	f043 0304 	orr.w	r3, r3, #4
 800470e:	6193      	str	r3, [r2, #24]
 8004710:	4b3e      	ldr	r3, [pc, #248]	@ (800480c <HAL_UART_MspInit+0x1c0>)
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	617b      	str	r3, [r7, #20]
 800471a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800471c:	2304      	movs	r3, #4
 800471e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004720:	2302      	movs	r3, #2
 8004722:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004724:	2303      	movs	r3, #3
 8004726:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004728:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800472c:	4619      	mov	r1, r3
 800472e:	4838      	ldr	r0, [pc, #224]	@ (8004810 <HAL_UART_MspInit+0x1c4>)
 8004730:	f000 fd40 	bl	80051b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004734:	2308      	movs	r3, #8
 8004736:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004738:	2300      	movs	r3, #0
 800473a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473c:	2300      	movs	r3, #0
 800473e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004740:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004744:	4619      	mov	r1, r3
 8004746:	4832      	ldr	r0, [pc, #200]	@ (8004810 <HAL_UART_MspInit+0x1c4>)
 8004748:	f000 fd34 	bl	80051b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800474c:	2200      	movs	r2, #0
 800474e:	2105      	movs	r1, #5
 8004750:	2026      	movs	r0, #38	@ 0x26
 8004752:	f000 fbc2 	bl	8004eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004756:	2026      	movs	r0, #38	@ 0x26
 8004758:	f000 fbdb 	bl	8004f12 <HAL_NVIC_EnableIRQ>
}
 800475c:	e050      	b.n	8004800 <HAL_UART_MspInit+0x1b4>
  else if(uartHandle->Instance==USART3)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a2d      	ldr	r2, [pc, #180]	@ (8004818 <HAL_UART_MspInit+0x1cc>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d14b      	bne.n	8004800 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004768:	4b28      	ldr	r3, [pc, #160]	@ (800480c <HAL_UART_MspInit+0x1c0>)
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	4a27      	ldr	r2, [pc, #156]	@ (800480c <HAL_UART_MspInit+0x1c0>)
 800476e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004772:	61d3      	str	r3, [r2, #28]
 8004774:	4b25      	ldr	r3, [pc, #148]	@ (800480c <HAL_UART_MspInit+0x1c0>)
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800477c:	613b      	str	r3, [r7, #16]
 800477e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004780:	4b22      	ldr	r3, [pc, #136]	@ (800480c <HAL_UART_MspInit+0x1c0>)
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	4a21      	ldr	r2, [pc, #132]	@ (800480c <HAL_UART_MspInit+0x1c0>)
 8004786:	f043 0320 	orr.w	r3, r3, #32
 800478a:	6193      	str	r3, [r2, #24]
 800478c:	4b1f      	ldr	r3, [pc, #124]	@ (800480c <HAL_UART_MspInit+0x1c0>)
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004798:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800479c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800479e:	2302      	movs	r3, #2
 80047a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047a2:	2303      	movs	r3, #3
 80047a4:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047aa:	4619      	mov	r1, r3
 80047ac:	481b      	ldr	r0, [pc, #108]	@ (800481c <HAL_UART_MspInit+0x1d0>)
 80047ae:	f000 fd01 	bl	80051b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80047b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80047b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047b8:	2300      	movs	r3, #0
 80047ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047bc:	2300      	movs	r3, #0
 80047be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047c4:	4619      	mov	r1, r3
 80047c6:	4815      	ldr	r0, [pc, #84]	@ (800481c <HAL_UART_MspInit+0x1d0>)
 80047c8:	f000 fcf4 	bl	80051b4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_ENABLE();
 80047cc:	4b14      	ldr	r3, [pc, #80]	@ (8004820 <HAL_UART_MspInit+0x1d4>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80047d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80047d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80047da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047dc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80047e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80047e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80047e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ea:	4a0d      	ldr	r2, [pc, #52]	@ (8004820 <HAL_UART_MspInit+0x1d4>)
 80047ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ee:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80047f0:	2200      	movs	r2, #0
 80047f2:	2105      	movs	r1, #5
 80047f4:	2027      	movs	r0, #39	@ 0x27
 80047f6:	f000 fb70 	bl	8004eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80047fa:	2027      	movs	r0, #39	@ 0x27
 80047fc:	f000 fb89 	bl	8004f12 <HAL_NVIC_EnableIRQ>
}
 8004800:	bf00      	nop
 8004802:	3738      	adds	r7, #56	@ 0x38
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40013800 	.word	0x40013800
 800480c:	40021000 	.word	0x40021000
 8004810:	40010800 	.word	0x40010800
 8004814:	40004400 	.word	0x40004400
 8004818:	40004800 	.word	0x40004800
 800481c:	40011400 	.word	0x40011400
 8004820:	40010000 	.word	0x40010000

08004824 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004824:	f7ff fd3e 	bl	80042a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004828:	480b      	ldr	r0, [pc, #44]	@ (8004858 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800482a:	490c      	ldr	r1, [pc, #48]	@ (800485c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800482c:	4a0c      	ldr	r2, [pc, #48]	@ (8004860 <LoopFillZerobss+0x16>)
  movs r3, #0
 800482e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004830:	e002      	b.n	8004838 <LoopCopyDataInit>

08004832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004836:	3304      	adds	r3, #4

08004838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800483a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800483c:	d3f9      	bcc.n	8004832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800483e:	4a09      	ldr	r2, [pc, #36]	@ (8004864 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004840:	4c09      	ldr	r4, [pc, #36]	@ (8004868 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004844:	e001      	b.n	800484a <LoopFillZerobss>

08004846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004848:	3204      	adds	r2, #4

0800484a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800484a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800484c:	d3fb      	bcc.n	8004846 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800484e:	f00d fbcd 	bl	8011fec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004852:	f7ff fadf 	bl	8003e14 <main>
  bx lr
 8004856:	4770      	bx	lr
  ldr r0, =_sdata
 8004858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800485c:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8004860:	08012ad8 	.word	0x08012ad8
  ldr r2, =_sbss
 8004864:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8004868:	2000396c 	.word	0x2000396c

0800486c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800486c:	e7fe      	b.n	800486c <ADC1_2_IRQHandler>
	...

08004870 <AT24Cxx_get_max_addr>:
#include <stdio.h>

#include "AT24Cxx_stm32_hal.h"

uint16_t AT24Cxx_get_max_addr ( AT24Cxx_device_t* dev )
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	791b      	ldrb	r3, [r3, #4]
 800487c:	2b05      	cmp	r3, #5
 800487e:	d820      	bhi.n	80048c2 <AT24Cxx_get_max_addr+0x52>
 8004880:	a201      	add	r2, pc, #4	@ (adr r2, 8004888 <AT24Cxx_get_max_addr+0x18>)
 8004882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004886:	bf00      	nop
 8004888:	080048a1 	.word	0x080048a1
 800488c:	080048a5 	.word	0x080048a5
 8004890:	080048ab 	.word	0x080048ab
 8004894:	080048b1 	.word	0x080048b1
 8004898:	080048b7 	.word	0x080048b7
 800489c:	080048bd 	.word	0x080048bd
	case AT24C01:
		return AT24C01_MAX_ADDR;
 80048a0:	237f      	movs	r3, #127	@ 0x7f
 80048a2:	e00f      	b.n	80048c4 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C32:
		return AT24C32_MAX_ADDR;
 80048a4:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80048a8:	e00c      	b.n	80048c4 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C64:
		return AT24C64_MAX_ADDR;
 80048aa:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80048ae:	e009      	b.n	80048c4 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C128:
		return AT24C128_MAX_ADDR;
 80048b0:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 80048b4:	e006      	b.n	80048c4 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C256:
		return AT24C256_MAX_ADDR;
 80048b6:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80048ba:	e003      	b.n	80048c4 <AT24Cxx_get_max_addr+0x54>
		break;
		//not supported yet, will overflow
	case AT24C512:
		return AT24C512_MAX_ADDR;
 80048bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80048c0:	e000      	b.n	80048c4 <AT24Cxx_get_max_addr+0x54>
		break;
	default:
		return 0;
 80048c2:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bc80      	pop	{r7}
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop

080048d0 <AT24Cxx_get_pg_size>:

uint16_t AT24Cxx_get_pg_size ( AT24Cxx_device_t* dev )
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	791b      	ldrb	r3, [r3, #4]
 80048dc:	2b05      	cmp	r3, #5
 80048de:	d81b      	bhi.n	8004918 <AT24Cxx_get_pg_size+0x48>
 80048e0:	a201      	add	r2, pc, #4	@ (adr r2, 80048e8 <AT24Cxx_get_pg_size+0x18>)
 80048e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e6:	bf00      	nop
 80048e8:	08004901 	.word	0x08004901
 80048ec:	08004905 	.word	0x08004905
 80048f0:	08004909 	.word	0x08004909
 80048f4:	0800490d 	.word	0x0800490d
 80048f8:	08004911 	.word	0x08004911
 80048fc:	08004915 	.word	0x08004915
	case AT24C01:
		return AT24C01_PG_SIZE;
 8004900:	2308      	movs	r3, #8
 8004902:	e00a      	b.n	800491a <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C32:
		return AT24C32_PG_SIZE;
 8004904:	2320      	movs	r3, #32
 8004906:	e008      	b.n	800491a <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C64:
		return AT24C64_PG_SIZE;
 8004908:	2320      	movs	r3, #32
 800490a:	e006      	b.n	800491a <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C128:
		return AT24C128_PG_SIZE;
 800490c:	2340      	movs	r3, #64	@ 0x40
 800490e:	e004      	b.n	800491a <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C256:
		return AT24C256_PG_SIZE;
 8004910:	2340      	movs	r3, #64	@ 0x40
 8004912:	e002      	b.n	800491a <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C512:
		//not supported yet, will overflow
		return AT24C512_PG_SIZE;
 8004914:	2380      	movs	r3, #128	@ 0x80
 8004916:	e000      	b.n	800491a <AT24Cxx_get_pg_size+0x4a>
		break;
	default:
		return 0;
 8004918:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 800491a:	4618      	mov	r0, r3
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr

08004924 <AT24Cxx_init>:

AT24Cxx_ERR_TypeDef AT24Cxx_init( AT24Cxx_devices_t* devices, 
	uint8_t init_dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	460b      	mov	r3, r1
 800492e:	607a      	str	r2, [r7, #4]
 8004930:	72fb      	strb	r3, [r7, #11]
	//adds first device to AT32Cxx_devices array
	//further devices should be added by calling AT24Cxx_add_dev()
	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 8004932:	2114      	movs	r1, #20
 8004934:	2001      	movs	r0, #1
 8004936:	f00d fa71 	bl	8011e1c <calloc>
 800493a:	4603      	mov	r3, r0
 800493c:	613b      	str	r3, [r7, #16]
	if ( at == NULL )
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d102      	bne.n	800494a <AT24Cxx_init+0x26>
		return at_init_err;
 8004944:	f04f 33ff 	mov.w	r3, #4294967295
 8004948:	e028      	b.n	800499c <AT24Cxx_init+0x78>

	for(uint8_t i = 0; i < 8; i++)
 800494a:	2300      	movs	r3, #0
 800494c:	75fb      	strb	r3, [r7, #23]
 800494e:	e007      	b.n	8004960 <AT24Cxx_init+0x3c>
			devices->devices[i] = 0x00;
 8004950:	7dfa      	ldrb	r2, [r7, #23]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2100      	movs	r1, #0
 8004956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i = 0; i < 8; i++)
 800495a:	7dfb      	ldrb	r3, [r7, #23]
 800495c:	3301      	adds	r3, #1
 800495e:	75fb      	strb	r3, [r7, #23]
 8004960:	7dfb      	ldrb	r3, [r7, #23]
 8004962:	2b07      	cmp	r3, #7
 8004964:	d9f4      	bls.n	8004950 <AT24Cxx_init+0x2c>

	at->dev_addr = init_dev_addr;
 8004966:	7afb      	ldrb	r3, [r7, #11]
 8004968:	b29a      	uxth	r2, r3
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	2200      	movs	r2, #0
 8004972:	60da      	str	r2, [r3, #12]
	at->prev_dev = NULL;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	2200      	movs	r2, #0
 8004978:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	2205      	movs	r2, #5
 800497e:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	2201      	movs	r2, #1
 800498a:	721a      	strb	r2, [r3, #8]
	devices->dev_count = 1;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[0] = at;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	601a      	str	r2, [r3, #0]

	return at_ok;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <AT24Cxx_add_dev>:

AT24Cxx_ERR_TypeDef AT24Cxx_add_dev( AT24Cxx_devices_t* devices, 
	uint8_t dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	460b      	mov	r3, r1
 80049ae:	607a      	str	r2, [r7, #4]
 80049b0:	72fb      	strb	r3, [r7, #11]
	if(devices->dev_count == 0 || devices->dev_count > 8)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d004      	beq.n	80049c6 <AT24Cxx_add_dev+0x22>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d902      	bls.n	80049cc <AT24Cxx_add_dev+0x28>
		return at_add_dev_err;
 80049c6:	f06f 0301 	mvn.w	r3, #1
 80049ca:	e03e      	b.n	8004a4a <AT24Cxx_add_dev+0xa6>

	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 80049cc:	2114      	movs	r1, #20
 80049ce:	2001      	movs	r0, #1
 80049d0:	f00d fa24 	bl	8011e1c <calloc>
 80049d4:	4603      	mov	r3, r0
 80049d6:	617b      	str	r3, [r7, #20]
	if ( at == NULL )
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d102      	bne.n	80049e4 <AT24Cxx_add_dev+0x40>
		return at_add_dev_err;
 80049de:	f06f 0301 	mvn.w	r3, #1
 80049e2:	e032      	b.n	8004a4a <AT24Cxx_add_dev+0xa6>

	at->dev_addr = dev_addr;
 80049e4:	7afb      	ldrb	r3, [r7, #11]
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	2200      	movs	r2, #0
 80049f0:	60da      	str	r2, [r3, #12]
	at->prev_dev = devices->devices[devices->dev_count-1];
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049f8:	1e5a      	subs	r2, r3, #1
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	2205      	movs	r2, #5
 8004a08:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	2201      	movs	r2, #1
 8004a14:	721a      	strb	r2, [r3, #8]
	devices->dev_count++;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[devices->dev_count-1] = at;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a2c:	1e5a      	subs	r2, r3, #1
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6979      	ldr	r1, [r7, #20]
 8004a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	//update previous device's next device
	devices->devices[devices->dev_count-2]->next_dev = at;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a3c:	1e9a      	subs	r2, r3, #2
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	60da      	str	r2, [r3, #12]
	return at_ok;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <AT24Cxx_write_byte_buffer>:
	return at_w_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_write_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 8004a52:	b5b0      	push	{r4, r5, r7, lr}
 8004a54:	b08a      	sub	sp, #40	@ 0x28
 8004a56:	af04      	add	r7, sp, #16
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	4611      	mov	r1, r2
 8004a5e:	461a      	mov	r2, r3
 8004a60:	460b      	mov	r3, r1
 8004a62:	80fb      	strh	r3, [r7, #6]
 8004a64:	4613      	mov	r3, r2
 8004a66:	80bb      	strh	r3, [r7, #4]
	//TODO checks

	uint8_t page_size = AT24Cxx_get_pg_size(dev);
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f7ff ff31 	bl	80048d0 <AT24Cxx_get_pg_size>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	75bb      	strb	r3, [r7, #22]

	uint8_t page_remaining = page_size - mem_addr % page_size;
 8004a72:	88fb      	ldrh	r3, [r7, #6]
 8004a74:	7dba      	ldrb	r2, [r7, #22]
 8004a76:	fb93 f1f2 	sdiv	r1, r3, r2
 8004a7a:	fb01 f202 	mul.w	r2, r1, r2
 8004a7e:	1a9b      	subs	r3, r3, r2
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	7dba      	ldrb	r2, [r7, #22]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	757b      	strb	r3, [r7, #21]

	uint8_t page_writes = (buf_length - page_remaining) / page_size;
 8004a88:	88ba      	ldrh	r2, [r7, #4]
 8004a8a:	7d7b      	ldrb	r3, [r7, #21]
 8004a8c:	1ad2      	subs	r2, r2, r3
 8004a8e:	7dbb      	ldrb	r3, [r7, #22]
 8004a90:	fb92 f3f3 	sdiv	r3, r2, r3
 8004a94:	753b      	strb	r3, [r7, #20]
	uint8_t remainder_writes = (buf_length - page_remaining) % page_size;
 8004a96:	88ba      	ldrh	r2, [r7, #4]
 8004a98:	7d7b      	ldrb	r3, [r7, #21]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	7dba      	ldrb	r2, [r7, #22]
 8004a9e:	fb93 f1f2 	sdiv	r1, r3, r2
 8004aa2:	fb01 f202 	mul.w	r2, r1, r2
 8004aa6:	1a9b      	subs	r3, r3, r2
 8004aa8:	74fb      	strb	r3, [r7, #19]

	//finish first page
	if((mem_addr + page_remaining) > 0x00 &&
 8004aaa:	88fa      	ldrh	r2, [r7, #6]
 8004aac:	7d7b      	ldrb	r3, [r7, #21]
 8004aae:	4413      	add	r3, r2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	dd23      	ble.n	8004afc <AT24Cxx_write_byte_buffer+0xaa>
		(mem_addr + page_remaining) < AT24Cxx_get_max_addr(dev)){
 8004ab4:	88fa      	ldrh	r2, [r7, #6]
 8004ab6:	7d7b      	ldrb	r3, [r7, #21]
 8004ab8:	18d4      	adds	r4, r2, r3
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f7ff fed8 	bl	8004870 <AT24Cxx_get_max_addr>
 8004ac0:	4603      	mov	r3, r0
	if((mem_addr + page_remaining) > 0x00 &&
 8004ac2:	429c      	cmp	r4, r3
 8004ac4:	da1a      	bge.n	8004afc <AT24Cxx_write_byte_buffer+0xaa>

		while(HAL_I2C_Mem_Write(dev->dev_port,
 8004ac6:	bf00      	nop
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	88db      	ldrh	r3, [r3, #6]
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	b21b      	sxth	r3, r3
 8004ad4:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8004ad8:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Write(dev->dev_port,
 8004ada:	b299      	uxth	r1, r3
 8004adc:	7d7b      	ldrb	r3, [r7, #21]
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	88fa      	ldrh	r2, [r7, #6]
 8004ae2:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8004ae6:	9402      	str	r4, [sp, #8]
 8004ae8:	9301      	str	r3, [sp, #4]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	2310      	movs	r3, #16
 8004af0:	f001 f9ea 	bl	8005ec8 <HAL_I2C_Mem_Write>
 8004af4:	4603      	mov	r3, r0
				(uint16_t) mem_addr,
				I2C_MEMADD_SIZE_16BIT,
				data_buf,
				page_remaining,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1e6      	bne.n	8004ac8 <AT24Cxx_write_byte_buffer+0x76>
	if((mem_addr + page_remaining) > 0x00 &&
 8004afa:	e002      	b.n	8004b02 <AT24Cxx_write_byte_buffer+0xb0>
	}else return at_w_bytes_err;
 8004afc:	f06f 0304 	mvn.w	r3, #4
 8004b00:	e0a5      	b.n	8004c4e <AT24Cxx_write_byte_buffer+0x1fc>

	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 8004b02:	2300      	movs	r3, #0
 8004b04:	75fb      	strb	r3, [r7, #23]
 8004b06:	e04e      	b.n	8004ba6 <AT24Cxx_write_byte_buffer+0x154>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8004b08:	88fa      	ldrh	r2, [r7, #6]
 8004b0a:	7d7b      	ldrb	r3, [r7, #21]
 8004b0c:	441a      	add	r2, r3
 8004b0e:	7dfb      	ldrb	r3, [r7, #23]
 8004b10:	7db9      	ldrb	r1, [r7, #22]
 8004b12:	fb01 f303 	mul.w	r3, r1, r3
 8004b16:	4413      	add	r3, r2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	dd3e      	ble.n	8004b9a <AT24Cxx_write_byte_buffer+0x148>
			(mem_addr + page_remaining + (current_page * page_size)) < AT24Cxx_get_max_addr(dev)){
 8004b1c:	88fa      	ldrh	r2, [r7, #6]
 8004b1e:	7d7b      	ldrb	r3, [r7, #21]
 8004b20:	441a      	add	r2, r3
 8004b22:	7dfb      	ldrb	r3, [r7, #23]
 8004b24:	7db9      	ldrb	r1, [r7, #22]
 8004b26:	fb01 f303 	mul.w	r3, r1, r3
 8004b2a:	18d4      	adds	r4, r2, r3
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f7ff fe9f 	bl	8004870 <AT24Cxx_get_max_addr>
 8004b32:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8004b34:	429c      	cmp	r4, r3
 8004b36:	da30      	bge.n	8004b9a <AT24Cxx_write_byte_buffer+0x148>

				while(HAL_I2C_Mem_Write(dev->dev_port,
 8004b38:	bf00      	nop
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6818      	ldr	r0, [r3, #0]
					AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	88db      	ldrh	r3, [r3, #6]
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	b21b      	sxth	r3, r3
 8004b46:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8004b4a:	b21b      	sxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8004b4c:	b29c      	uxth	r4, r3
					(uint16_t) mem_addr + page_remaining + (current_page * page_size),
 8004b4e:	7d7b      	ldrb	r3, [r7, #21]
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	4413      	add	r3, r2
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	7dfb      	ldrb	r3, [r7, #23]
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	7db9      	ldrb	r1, [r7, #22]
 8004b5e:	b289      	uxth	r1, r1
 8004b60:	fb01 f303 	mul.w	r3, r1, r3
 8004b64:	b29b      	uxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8004b66:	4413      	add	r3, r2
 8004b68:	b29d      	uxth	r5, r3
					I2C_MEMADD_SIZE_16BIT,
					data_buf + page_remaining + (current_page * page_size),
 8004b6a:	7d7b      	ldrb	r3, [r7, #21]
 8004b6c:	7dfa      	ldrb	r2, [r7, #23]
 8004b6e:	7db9      	ldrb	r1, [r7, #22]
 8004b70:	fb01 f202 	mul.w	r2, r1, r2
 8004b74:	4413      	add	r3, r2
				while(HAL_I2C_Mem_Write(dev->dev_port,
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	4413      	add	r3, r2
 8004b7a:	7dba      	ldrb	r2, [r7, #22]
 8004b7c:	b292      	uxth	r2, r2
 8004b7e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004b82:	9102      	str	r1, [sp, #8]
 8004b84:	9201      	str	r2, [sp, #4]
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	2310      	movs	r3, #16
 8004b8a:	462a      	mov	r2, r5
 8004b8c:	4621      	mov	r1, r4
 8004b8e:	f001 f99b 	bl	8005ec8 <HAL_I2C_Mem_Write>
 8004b92:	4603      	mov	r3, r0
					page_size,
					AT24Cxx_I2C_TIMOUT) != HAL_OK);
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1d0      	bne.n	8004b3a <AT24Cxx_write_byte_buffer+0xe8>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8004b98:	e002      	b.n	8004ba0 <AT24Cxx_write_byte_buffer+0x14e>
		}else return at_w_bytes_err;
 8004b9a:	f06f 0304 	mvn.w	r3, #4
 8004b9e:	e056      	b.n	8004c4e <AT24Cxx_write_byte_buffer+0x1fc>
	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 8004ba0:	7dfb      	ldrb	r3, [r7, #23]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	75fb      	strb	r3, [r7, #23]
 8004ba6:	7dfa      	ldrb	r2, [r7, #23]
 8004ba8:	7d3b      	ldrb	r3, [r7, #20]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d3ac      	bcc.n	8004b08 <AT24Cxx_write_byte_buffer+0xb6>
	}

	if(remainder_writes){
 8004bae:	7cfb      	ldrb	r3, [r7, #19]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d04b      	beq.n	8004c4c <AT24Cxx_write_byte_buffer+0x1fa>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8004bb4:	88fa      	ldrh	r2, [r7, #6]
 8004bb6:	7d7b      	ldrb	r3, [r7, #21]
 8004bb8:	441a      	add	r2, r3
 8004bba:	7d3b      	ldrb	r3, [r7, #20]
 8004bbc:	7db9      	ldrb	r1, [r7, #22]
 8004bbe:	fb01 f303 	mul.w	r3, r1, r3
 8004bc2:	4413      	add	r3, r2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	dd3e      	ble.n	8004c46 <AT24Cxx_write_byte_buffer+0x1f4>
			(mem_addr + page_remaining + (page_writes * page_size)) < AT24Cxx_get_max_addr(dev)){
 8004bc8:	88fa      	ldrh	r2, [r7, #6]
 8004bca:	7d7b      	ldrb	r3, [r7, #21]
 8004bcc:	441a      	add	r2, r3
 8004bce:	7d3b      	ldrb	r3, [r7, #20]
 8004bd0:	7db9      	ldrb	r1, [r7, #22]
 8004bd2:	fb01 f303 	mul.w	r3, r1, r3
 8004bd6:	18d4      	adds	r4, r2, r3
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f7ff fe49 	bl	8004870 <AT24Cxx_get_max_addr>
 8004bde:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8004be0:	429c      	cmp	r4, r3
 8004be2:	da30      	bge.n	8004c46 <AT24Cxx_write_byte_buffer+0x1f4>

			while(HAL_I2C_Mem_Write(dev->dev_port,
 8004be4:	bf00      	nop
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	88db      	ldrh	r3, [r3, #6]
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	b21b      	sxth	r3, r3
 8004bf2:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8004bf6:	b21b      	sxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 8004bf8:	b29c      	uxth	r4, r3
				(uint16_t) mem_addr + page_remaining + (page_writes * page_size),
 8004bfa:	7d7b      	ldrb	r3, [r7, #21]
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	88fb      	ldrh	r3, [r7, #6]
 8004c00:	4413      	add	r3, r2
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	7d3b      	ldrb	r3, [r7, #20]
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	7db9      	ldrb	r1, [r7, #22]
 8004c0a:	b289      	uxth	r1, r1
 8004c0c:	fb01 f303 	mul.w	r3, r1, r3
 8004c10:	b29b      	uxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 8004c12:	4413      	add	r3, r2
 8004c14:	b29d      	uxth	r5, r3
				I2C_MEMADD_SIZE_16BIT,
				data_buf + page_remaining + (page_writes * page_size),
 8004c16:	7d7b      	ldrb	r3, [r7, #21]
 8004c18:	7d3a      	ldrb	r2, [r7, #20]
 8004c1a:	7db9      	ldrb	r1, [r7, #22]
 8004c1c:	fb01 f202 	mul.w	r2, r1, r2
 8004c20:	4413      	add	r3, r2
			while(HAL_I2C_Mem_Write(dev->dev_port,
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	4413      	add	r3, r2
 8004c26:	7cfa      	ldrb	r2, [r7, #19]
 8004c28:	b292      	uxth	r2, r2
 8004c2a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004c2e:	9102      	str	r1, [sp, #8]
 8004c30:	9201      	str	r2, [sp, #4]
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	2310      	movs	r3, #16
 8004c36:	462a      	mov	r2, r5
 8004c38:	4621      	mov	r1, r4
 8004c3a:	f001 f945 	bl	8005ec8 <HAL_I2C_Mem_Write>
 8004c3e:	4603      	mov	r3, r0
				remainder_writes,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1d0      	bne.n	8004be6 <AT24Cxx_write_byte_buffer+0x194>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8004c44:	e002      	b.n	8004c4c <AT24Cxx_write_byte_buffer+0x1fa>
		}else return at_w_bytes_err;
 8004c46:	f06f 0304 	mvn.w	r3, #4
 8004c4a:	e000      	b.n	8004c4e <AT24Cxx_write_byte_buffer+0x1fc>
	}

	return at_ok;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bdb0      	pop	{r4, r5, r7, pc}

08004c56 <AT24Cxx_read_byte_buffer>:
	return at_r_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_read_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b088      	sub	sp, #32
 8004c5a:	af04      	add	r7, sp, #16
 8004c5c:	60f8      	str	r0, [r7, #12]
 8004c5e:	60b9      	str	r1, [r7, #8]
 8004c60:	4611      	mov	r1, r2
 8004c62:	461a      	mov	r2, r3
 8004c64:	460b      	mov	r3, r1
 8004c66:	80fb      	strh	r3, [r7, #6]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	80bb      	strh	r3, [r7, #4]
	if(mem_addr > 0x00 && mem_addr < AT24Cxx_get_max_addr(dev)){
 8004c6c:	88fb      	ldrh	r3, [r7, #6]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d022      	beq.n	8004cb8 <AT24Cxx_read_byte_buffer+0x62>
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f7ff fdfc 	bl	8004870 <AT24Cxx_get_max_addr>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	88fb      	ldrh	r3, [r7, #6]
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d21a      	bcs.n	8004cb8 <AT24Cxx_read_byte_buffer+0x62>
		while(HAL_I2C_Mem_Read(dev->dev_port,
 8004c82:	bf00      	nop
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_R | (dev->dev_addr << 1) ,
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	88db      	ldrh	r3, [r3, #6]
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	b21b      	sxth	r3, r3
 8004c90:	f043 03a1 	orr.w	r3, r3, #161	@ 0xa1
 8004c94:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Read(dev->dev_port,
 8004c96:	b299      	uxth	r1, r3
 8004c98:	88fa      	ldrh	r2, [r7, #6]
 8004c9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c9e:	9302      	str	r3, [sp, #8]
 8004ca0:	88bb      	ldrh	r3, [r7, #4]
 8004ca2:	9301      	str	r3, [sp, #4]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	2310      	movs	r3, #16
 8004caa:	f001 fa07 	bl	80060bc <HAL_I2C_Mem_Read>
 8004cae:	4603      	mov	r3, r0
				(uint16_t) mem_addr, I2C_MEMADD_SIZE_16BIT, data_buf, buf_length,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1e7      	bne.n	8004c84 <AT24Cxx_read_byte_buffer+0x2e>
		return at_ok;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e001      	b.n	8004cbc <AT24Cxx_read_byte_buffer+0x66>
	}
	return at_r_bytes_err;
 8004cb8:	f06f 0306 	mvn.w	r3, #6
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004cc8:	4b08      	ldr	r3, [pc, #32]	@ (8004cec <HAL_Init+0x28>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a07      	ldr	r2, [pc, #28]	@ (8004cec <HAL_Init+0x28>)
 8004cce:	f043 0310 	orr.w	r3, r3, #16
 8004cd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cd4:	2003      	movs	r0, #3
 8004cd6:	f000 f8f5 	bl	8004ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004cda:	200f      	movs	r0, #15
 8004cdc:	f7ff f9da 	bl	8004094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ce0:	f7ff f9a0 	bl	8004024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	40022000 	.word	0x40022000

08004cf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004cf4:	4b05      	ldr	r3, [pc, #20]	@ (8004d0c <HAL_IncTick+0x1c>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	4b05      	ldr	r3, [pc, #20]	@ (8004d10 <HAL_IncTick+0x20>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4413      	add	r3, r2
 8004d00:	4a03      	ldr	r2, [pc, #12]	@ (8004d10 <HAL_IncTick+0x20>)
 8004d02:	6013      	str	r3, [r2, #0]
}
 8004d04:	bf00      	nop
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bc80      	pop	{r7}
 8004d0a:	4770      	bx	lr
 8004d0c:	2000002c 	.word	0x2000002c
 8004d10:	20002a60 	.word	0x20002a60

08004d14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  return uwTick;
 8004d18:	4b02      	ldr	r3, [pc, #8]	@ (8004d24 <HAL_GetTick+0x10>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bc80      	pop	{r7}
 8004d22:	4770      	bx	lr
 8004d24:	20002a60 	.word	0x20002a60

08004d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d30:	f7ff fff0 	bl	8004d14 <HAL_GetTick>
 8004d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d40:	d005      	beq.n	8004d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d42:	4b0a      	ldr	r3, [pc, #40]	@ (8004d6c <HAL_Delay+0x44>)
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d4e:	bf00      	nop
 8004d50:	f7ff ffe0 	bl	8004d14 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d8f7      	bhi.n	8004d50 <HAL_Delay+0x28>
  {
  }
}
 8004d60:	bf00      	nop
 8004d62:	bf00      	nop
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	2000002c 	.word	0x2000002c

08004d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d80:	4b0c      	ldr	r3, [pc, #48]	@ (8004db4 <__NVIC_SetPriorityGrouping+0x44>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004d9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004da2:	4a04      	ldr	r2, [pc, #16]	@ (8004db4 <__NVIC_SetPriorityGrouping+0x44>)
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	60d3      	str	r3, [r2, #12]
}
 8004da8:	bf00      	nop
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bc80      	pop	{r7}
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	e000ed00 	.word	0xe000ed00

08004db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004dbc:	4b04      	ldr	r3, [pc, #16]	@ (8004dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	0a1b      	lsrs	r3, r3, #8
 8004dc2:	f003 0307 	and.w	r3, r3, #7
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bc80      	pop	{r7}
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	e000ed00 	.word	0xe000ed00

08004dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	4603      	mov	r3, r0
 8004ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	db0b      	blt.n	8004dfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004de6:	79fb      	ldrb	r3, [r7, #7]
 8004de8:	f003 021f 	and.w	r2, r3, #31
 8004dec:	4906      	ldr	r1, [pc, #24]	@ (8004e08 <__NVIC_EnableIRQ+0x34>)
 8004dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df2:	095b      	lsrs	r3, r3, #5
 8004df4:	2001      	movs	r0, #1
 8004df6:	fa00 f202 	lsl.w	r2, r0, r2
 8004dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bc80      	pop	{r7}
 8004e06:	4770      	bx	lr
 8004e08:	e000e100 	.word	0xe000e100

08004e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	4603      	mov	r3, r0
 8004e14:	6039      	str	r1, [r7, #0]
 8004e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	db0a      	blt.n	8004e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	490c      	ldr	r1, [pc, #48]	@ (8004e58 <__NVIC_SetPriority+0x4c>)
 8004e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e2a:	0112      	lsls	r2, r2, #4
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	440b      	add	r3, r1
 8004e30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e34:	e00a      	b.n	8004e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	4908      	ldr	r1, [pc, #32]	@ (8004e5c <__NVIC_SetPriority+0x50>)
 8004e3c:	79fb      	ldrb	r3, [r7, #7]
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	3b04      	subs	r3, #4
 8004e44:	0112      	lsls	r2, r2, #4
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	440b      	add	r3, r1
 8004e4a:	761a      	strb	r2, [r3, #24]
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bc80      	pop	{r7}
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	e000e100 	.word	0xe000e100
 8004e5c:	e000ed00 	.word	0xe000ed00

08004e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b089      	sub	sp, #36	@ 0x24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	f1c3 0307 	rsb	r3, r3, #7
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	bf28      	it	cs
 8004e7e:	2304      	movcs	r3, #4
 8004e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	3304      	adds	r3, #4
 8004e86:	2b06      	cmp	r3, #6
 8004e88:	d902      	bls.n	8004e90 <NVIC_EncodePriority+0x30>
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	3b03      	subs	r3, #3
 8004e8e:	e000      	b.n	8004e92 <NVIC_EncodePriority+0x32>
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e94:	f04f 32ff 	mov.w	r2, #4294967295
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9e:	43da      	mvns	r2, r3
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	401a      	ands	r2, r3
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb2:	43d9      	mvns	r1, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eb8:	4313      	orrs	r3, r2
         );
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3724      	adds	r7, #36	@ 0x24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff ff4f 	bl	8004d70 <__NVIC_SetPriorityGrouping>
}
 8004ed2:	bf00      	nop
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b086      	sub	sp, #24
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	607a      	str	r2, [r7, #4]
 8004ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004eec:	f7ff ff64 	bl	8004db8 <__NVIC_GetPriorityGrouping>
 8004ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	6978      	ldr	r0, [r7, #20]
 8004ef8:	f7ff ffb2 	bl	8004e60 <NVIC_EncodePriority>
 8004efc:	4602      	mov	r2, r0
 8004efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f02:	4611      	mov	r1, r2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7ff ff81 	bl	8004e0c <__NVIC_SetPriority>
}
 8004f0a:	bf00      	nop
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b082      	sub	sp, #8
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	4603      	mov	r3, r0
 8004f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7ff ff57 	bl	8004dd4 <__NVIC_EnableIRQ>
}
 8004f26:	bf00      	nop
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b085      	sub	sp, #20
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d008      	beq.n	8004f58 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2204      	movs	r2, #4
 8004f4a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e020      	b.n	8004f9a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 020e 	bic.w	r2, r2, #14
 8004f66:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0201 	bic.w	r2, r2, #1
 8004f76:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f80:	2101      	movs	r1, #1
 8004f82:	fa01 f202 	lsl.w	r2, r1, r2
 8004f86:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fac:	2300      	movs	r3, #0
 8004fae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d005      	beq.n	8004fc8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	73fb      	strb	r3, [r7, #15]
 8004fc6:	e0d6      	b.n	8005176 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 020e 	bic.w	r2, r2, #14
 8004fd6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0201 	bic.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	461a      	mov	r2, r3
 8004fee:	4b64      	ldr	r3, [pc, #400]	@ (8005180 <HAL_DMA_Abort_IT+0x1dc>)
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d958      	bls.n	80050a6 <HAL_DMA_Abort_IT+0x102>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a62      	ldr	r2, [pc, #392]	@ (8005184 <HAL_DMA_Abort_IT+0x1e0>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d04f      	beq.n	800509e <HAL_DMA_Abort_IT+0xfa>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a61      	ldr	r2, [pc, #388]	@ (8005188 <HAL_DMA_Abort_IT+0x1e4>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d048      	beq.n	800509a <HAL_DMA_Abort_IT+0xf6>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a5f      	ldr	r2, [pc, #380]	@ (800518c <HAL_DMA_Abort_IT+0x1e8>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d040      	beq.n	8005094 <HAL_DMA_Abort_IT+0xf0>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a5e      	ldr	r2, [pc, #376]	@ (8005190 <HAL_DMA_Abort_IT+0x1ec>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d038      	beq.n	800508e <HAL_DMA_Abort_IT+0xea>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a5c      	ldr	r2, [pc, #368]	@ (8005194 <HAL_DMA_Abort_IT+0x1f0>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d030      	beq.n	8005088 <HAL_DMA_Abort_IT+0xe4>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a5b      	ldr	r2, [pc, #364]	@ (8005198 <HAL_DMA_Abort_IT+0x1f4>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d028      	beq.n	8005082 <HAL_DMA_Abort_IT+0xde>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a52      	ldr	r2, [pc, #328]	@ (8005180 <HAL_DMA_Abort_IT+0x1dc>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d020      	beq.n	800507c <HAL_DMA_Abort_IT+0xd8>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a57      	ldr	r2, [pc, #348]	@ (800519c <HAL_DMA_Abort_IT+0x1f8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d019      	beq.n	8005078 <HAL_DMA_Abort_IT+0xd4>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a55      	ldr	r2, [pc, #340]	@ (80051a0 <HAL_DMA_Abort_IT+0x1fc>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d012      	beq.n	8005074 <HAL_DMA_Abort_IT+0xd0>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a54      	ldr	r2, [pc, #336]	@ (80051a4 <HAL_DMA_Abort_IT+0x200>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00a      	beq.n	800506e <HAL_DMA_Abort_IT+0xca>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a52      	ldr	r2, [pc, #328]	@ (80051a8 <HAL_DMA_Abort_IT+0x204>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d102      	bne.n	8005068 <HAL_DMA_Abort_IT+0xc4>
 8005062:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005066:	e01b      	b.n	80050a0 <HAL_DMA_Abort_IT+0xfc>
 8005068:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800506c:	e018      	b.n	80050a0 <HAL_DMA_Abort_IT+0xfc>
 800506e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005072:	e015      	b.n	80050a0 <HAL_DMA_Abort_IT+0xfc>
 8005074:	2310      	movs	r3, #16
 8005076:	e013      	b.n	80050a0 <HAL_DMA_Abort_IT+0xfc>
 8005078:	2301      	movs	r3, #1
 800507a:	e011      	b.n	80050a0 <HAL_DMA_Abort_IT+0xfc>
 800507c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005080:	e00e      	b.n	80050a0 <HAL_DMA_Abort_IT+0xfc>
 8005082:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005086:	e00b      	b.n	80050a0 <HAL_DMA_Abort_IT+0xfc>
 8005088:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800508c:	e008      	b.n	80050a0 <HAL_DMA_Abort_IT+0xfc>
 800508e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005092:	e005      	b.n	80050a0 <HAL_DMA_Abort_IT+0xfc>
 8005094:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005098:	e002      	b.n	80050a0 <HAL_DMA_Abort_IT+0xfc>
 800509a:	2310      	movs	r3, #16
 800509c:	e000      	b.n	80050a0 <HAL_DMA_Abort_IT+0xfc>
 800509e:	2301      	movs	r3, #1
 80050a0:	4a42      	ldr	r2, [pc, #264]	@ (80051ac <HAL_DMA_Abort_IT+0x208>)
 80050a2:	6053      	str	r3, [r2, #4]
 80050a4:	e057      	b.n	8005156 <HAL_DMA_Abort_IT+0x1b2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a36      	ldr	r2, [pc, #216]	@ (8005184 <HAL_DMA_Abort_IT+0x1e0>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d04f      	beq.n	8005150 <HAL_DMA_Abort_IT+0x1ac>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a34      	ldr	r2, [pc, #208]	@ (8005188 <HAL_DMA_Abort_IT+0x1e4>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d048      	beq.n	800514c <HAL_DMA_Abort_IT+0x1a8>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a33      	ldr	r2, [pc, #204]	@ (800518c <HAL_DMA_Abort_IT+0x1e8>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d040      	beq.n	8005146 <HAL_DMA_Abort_IT+0x1a2>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a31      	ldr	r2, [pc, #196]	@ (8005190 <HAL_DMA_Abort_IT+0x1ec>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d038      	beq.n	8005140 <HAL_DMA_Abort_IT+0x19c>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a30      	ldr	r2, [pc, #192]	@ (8005194 <HAL_DMA_Abort_IT+0x1f0>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d030      	beq.n	800513a <HAL_DMA_Abort_IT+0x196>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a2e      	ldr	r2, [pc, #184]	@ (8005198 <HAL_DMA_Abort_IT+0x1f4>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d028      	beq.n	8005134 <HAL_DMA_Abort_IT+0x190>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a26      	ldr	r2, [pc, #152]	@ (8005180 <HAL_DMA_Abort_IT+0x1dc>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d020      	beq.n	800512e <HAL_DMA_Abort_IT+0x18a>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a2a      	ldr	r2, [pc, #168]	@ (800519c <HAL_DMA_Abort_IT+0x1f8>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d019      	beq.n	800512a <HAL_DMA_Abort_IT+0x186>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a29      	ldr	r2, [pc, #164]	@ (80051a0 <HAL_DMA_Abort_IT+0x1fc>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d012      	beq.n	8005126 <HAL_DMA_Abort_IT+0x182>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a27      	ldr	r2, [pc, #156]	@ (80051a4 <HAL_DMA_Abort_IT+0x200>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00a      	beq.n	8005120 <HAL_DMA_Abort_IT+0x17c>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a26      	ldr	r2, [pc, #152]	@ (80051a8 <HAL_DMA_Abort_IT+0x204>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d102      	bne.n	800511a <HAL_DMA_Abort_IT+0x176>
 8005114:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005118:	e01b      	b.n	8005152 <HAL_DMA_Abort_IT+0x1ae>
 800511a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800511e:	e018      	b.n	8005152 <HAL_DMA_Abort_IT+0x1ae>
 8005120:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005124:	e015      	b.n	8005152 <HAL_DMA_Abort_IT+0x1ae>
 8005126:	2310      	movs	r3, #16
 8005128:	e013      	b.n	8005152 <HAL_DMA_Abort_IT+0x1ae>
 800512a:	2301      	movs	r3, #1
 800512c:	e011      	b.n	8005152 <HAL_DMA_Abort_IT+0x1ae>
 800512e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005132:	e00e      	b.n	8005152 <HAL_DMA_Abort_IT+0x1ae>
 8005134:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005138:	e00b      	b.n	8005152 <HAL_DMA_Abort_IT+0x1ae>
 800513a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800513e:	e008      	b.n	8005152 <HAL_DMA_Abort_IT+0x1ae>
 8005140:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005144:	e005      	b.n	8005152 <HAL_DMA_Abort_IT+0x1ae>
 8005146:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800514a:	e002      	b.n	8005152 <HAL_DMA_Abort_IT+0x1ae>
 800514c:	2310      	movs	r3, #16
 800514e:	e000      	b.n	8005152 <HAL_DMA_Abort_IT+0x1ae>
 8005150:	2301      	movs	r3, #1
 8005152:	4a17      	ldr	r2, [pc, #92]	@ (80051b0 <HAL_DMA_Abort_IT+0x20c>)
 8005154:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	4798      	blx	r3
    } 
  }
  return status;
 8005176:	7bfb      	ldrb	r3, [r7, #15]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	40020080 	.word	0x40020080
 8005184:	40020008 	.word	0x40020008
 8005188:	4002001c 	.word	0x4002001c
 800518c:	40020030 	.word	0x40020030
 8005190:	40020044 	.word	0x40020044
 8005194:	40020058 	.word	0x40020058
 8005198:	4002006c 	.word	0x4002006c
 800519c:	40020408 	.word	0x40020408
 80051a0:	4002041c 	.word	0x4002041c
 80051a4:	40020430 	.word	0x40020430
 80051a8:	40020444 	.word	0x40020444
 80051ac:	40020400 	.word	0x40020400
 80051b0:	40020000 	.word	0x40020000

080051b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b08b      	sub	sp, #44	@ 0x2c
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80051be:	2300      	movs	r3, #0
 80051c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80051c2:	2300      	movs	r3, #0
 80051c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051c6:	e179      	b.n	80054bc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80051c8:	2201      	movs	r2, #1
 80051ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69fa      	ldr	r2, [r7, #28]
 80051d8:	4013      	ands	r3, r2
 80051da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	f040 8168 	bne.w	80054b6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	4a96      	ldr	r2, [pc, #600]	@ (8005444 <HAL_GPIO_Init+0x290>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d05e      	beq.n	80052ae <HAL_GPIO_Init+0xfa>
 80051f0:	4a94      	ldr	r2, [pc, #592]	@ (8005444 <HAL_GPIO_Init+0x290>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d875      	bhi.n	80052e2 <HAL_GPIO_Init+0x12e>
 80051f6:	4a94      	ldr	r2, [pc, #592]	@ (8005448 <HAL_GPIO_Init+0x294>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d058      	beq.n	80052ae <HAL_GPIO_Init+0xfa>
 80051fc:	4a92      	ldr	r2, [pc, #584]	@ (8005448 <HAL_GPIO_Init+0x294>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d86f      	bhi.n	80052e2 <HAL_GPIO_Init+0x12e>
 8005202:	4a92      	ldr	r2, [pc, #584]	@ (800544c <HAL_GPIO_Init+0x298>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d052      	beq.n	80052ae <HAL_GPIO_Init+0xfa>
 8005208:	4a90      	ldr	r2, [pc, #576]	@ (800544c <HAL_GPIO_Init+0x298>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d869      	bhi.n	80052e2 <HAL_GPIO_Init+0x12e>
 800520e:	4a90      	ldr	r2, [pc, #576]	@ (8005450 <HAL_GPIO_Init+0x29c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d04c      	beq.n	80052ae <HAL_GPIO_Init+0xfa>
 8005214:	4a8e      	ldr	r2, [pc, #568]	@ (8005450 <HAL_GPIO_Init+0x29c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d863      	bhi.n	80052e2 <HAL_GPIO_Init+0x12e>
 800521a:	4a8e      	ldr	r2, [pc, #568]	@ (8005454 <HAL_GPIO_Init+0x2a0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d046      	beq.n	80052ae <HAL_GPIO_Init+0xfa>
 8005220:	4a8c      	ldr	r2, [pc, #560]	@ (8005454 <HAL_GPIO_Init+0x2a0>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d85d      	bhi.n	80052e2 <HAL_GPIO_Init+0x12e>
 8005226:	2b12      	cmp	r3, #18
 8005228:	d82a      	bhi.n	8005280 <HAL_GPIO_Init+0xcc>
 800522a:	2b12      	cmp	r3, #18
 800522c:	d859      	bhi.n	80052e2 <HAL_GPIO_Init+0x12e>
 800522e:	a201      	add	r2, pc, #4	@ (adr r2, 8005234 <HAL_GPIO_Init+0x80>)
 8005230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005234:	080052af 	.word	0x080052af
 8005238:	08005289 	.word	0x08005289
 800523c:	0800529b 	.word	0x0800529b
 8005240:	080052dd 	.word	0x080052dd
 8005244:	080052e3 	.word	0x080052e3
 8005248:	080052e3 	.word	0x080052e3
 800524c:	080052e3 	.word	0x080052e3
 8005250:	080052e3 	.word	0x080052e3
 8005254:	080052e3 	.word	0x080052e3
 8005258:	080052e3 	.word	0x080052e3
 800525c:	080052e3 	.word	0x080052e3
 8005260:	080052e3 	.word	0x080052e3
 8005264:	080052e3 	.word	0x080052e3
 8005268:	080052e3 	.word	0x080052e3
 800526c:	080052e3 	.word	0x080052e3
 8005270:	080052e3 	.word	0x080052e3
 8005274:	080052e3 	.word	0x080052e3
 8005278:	08005291 	.word	0x08005291
 800527c:	080052a5 	.word	0x080052a5
 8005280:	4a75      	ldr	r2, [pc, #468]	@ (8005458 <HAL_GPIO_Init+0x2a4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d013      	beq.n	80052ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005286:	e02c      	b.n	80052e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	623b      	str	r3, [r7, #32]
          break;
 800528e:	e029      	b.n	80052e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	3304      	adds	r3, #4
 8005296:	623b      	str	r3, [r7, #32]
          break;
 8005298:	e024      	b.n	80052e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	3308      	adds	r3, #8
 80052a0:	623b      	str	r3, [r7, #32]
          break;
 80052a2:	e01f      	b.n	80052e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	330c      	adds	r3, #12
 80052aa:	623b      	str	r3, [r7, #32]
          break;
 80052ac:	e01a      	b.n	80052e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d102      	bne.n	80052bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80052b6:	2304      	movs	r3, #4
 80052b8:	623b      	str	r3, [r7, #32]
          break;
 80052ba:	e013      	b.n	80052e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d105      	bne.n	80052d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80052c4:	2308      	movs	r3, #8
 80052c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	69fa      	ldr	r2, [r7, #28]
 80052cc:	611a      	str	r2, [r3, #16]
          break;
 80052ce:	e009      	b.n	80052e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80052d0:	2308      	movs	r3, #8
 80052d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	69fa      	ldr	r2, [r7, #28]
 80052d8:	615a      	str	r2, [r3, #20]
          break;
 80052da:	e003      	b.n	80052e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80052dc:	2300      	movs	r3, #0
 80052de:	623b      	str	r3, [r7, #32]
          break;
 80052e0:	e000      	b.n	80052e4 <HAL_GPIO_Init+0x130>
          break;
 80052e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	2bff      	cmp	r3, #255	@ 0xff
 80052e8:	d801      	bhi.n	80052ee <HAL_GPIO_Init+0x13a>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	e001      	b.n	80052f2 <HAL_GPIO_Init+0x13e>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	3304      	adds	r3, #4
 80052f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	2bff      	cmp	r3, #255	@ 0xff
 80052f8:	d802      	bhi.n	8005300 <HAL_GPIO_Init+0x14c>
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	e002      	b.n	8005306 <HAL_GPIO_Init+0x152>
 8005300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005302:	3b08      	subs	r3, #8
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	210f      	movs	r1, #15
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	fa01 f303 	lsl.w	r3, r1, r3
 8005314:	43db      	mvns	r3, r3
 8005316:	401a      	ands	r2, r3
 8005318:	6a39      	ldr	r1, [r7, #32]
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	fa01 f303 	lsl.w	r3, r1, r3
 8005320:	431a      	orrs	r2, r3
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 80c1 	beq.w	80054b6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005334:	4b49      	ldr	r3, [pc, #292]	@ (800545c <HAL_GPIO_Init+0x2a8>)
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	4a48      	ldr	r2, [pc, #288]	@ (800545c <HAL_GPIO_Init+0x2a8>)
 800533a:	f043 0301 	orr.w	r3, r3, #1
 800533e:	6193      	str	r3, [r2, #24]
 8005340:	4b46      	ldr	r3, [pc, #280]	@ (800545c <HAL_GPIO_Init+0x2a8>)
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	60bb      	str	r3, [r7, #8]
 800534a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800534c:	4a44      	ldr	r2, [pc, #272]	@ (8005460 <HAL_GPIO_Init+0x2ac>)
 800534e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005350:	089b      	lsrs	r3, r3, #2
 8005352:	3302      	adds	r3, #2
 8005354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005358:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	f003 0303 	and.w	r3, r3, #3
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	220f      	movs	r2, #15
 8005364:	fa02 f303 	lsl.w	r3, r2, r3
 8005368:	43db      	mvns	r3, r3
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4013      	ands	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a3c      	ldr	r2, [pc, #240]	@ (8005464 <HAL_GPIO_Init+0x2b0>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d01f      	beq.n	80053b8 <HAL_GPIO_Init+0x204>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a3b      	ldr	r2, [pc, #236]	@ (8005468 <HAL_GPIO_Init+0x2b4>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d019      	beq.n	80053b4 <HAL_GPIO_Init+0x200>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a3a      	ldr	r2, [pc, #232]	@ (800546c <HAL_GPIO_Init+0x2b8>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d013      	beq.n	80053b0 <HAL_GPIO_Init+0x1fc>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a39      	ldr	r2, [pc, #228]	@ (8005470 <HAL_GPIO_Init+0x2bc>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d00d      	beq.n	80053ac <HAL_GPIO_Init+0x1f8>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a38      	ldr	r2, [pc, #224]	@ (8005474 <HAL_GPIO_Init+0x2c0>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d007      	beq.n	80053a8 <HAL_GPIO_Init+0x1f4>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a37      	ldr	r2, [pc, #220]	@ (8005478 <HAL_GPIO_Init+0x2c4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d101      	bne.n	80053a4 <HAL_GPIO_Init+0x1f0>
 80053a0:	2305      	movs	r3, #5
 80053a2:	e00a      	b.n	80053ba <HAL_GPIO_Init+0x206>
 80053a4:	2306      	movs	r3, #6
 80053a6:	e008      	b.n	80053ba <HAL_GPIO_Init+0x206>
 80053a8:	2304      	movs	r3, #4
 80053aa:	e006      	b.n	80053ba <HAL_GPIO_Init+0x206>
 80053ac:	2303      	movs	r3, #3
 80053ae:	e004      	b.n	80053ba <HAL_GPIO_Init+0x206>
 80053b0:	2302      	movs	r3, #2
 80053b2:	e002      	b.n	80053ba <HAL_GPIO_Init+0x206>
 80053b4:	2301      	movs	r3, #1
 80053b6:	e000      	b.n	80053ba <HAL_GPIO_Init+0x206>
 80053b8:	2300      	movs	r3, #0
 80053ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053bc:	f002 0203 	and.w	r2, r2, #3
 80053c0:	0092      	lsls	r2, r2, #2
 80053c2:	4093      	lsls	r3, r2
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80053ca:	4925      	ldr	r1, [pc, #148]	@ (8005460 <HAL_GPIO_Init+0x2ac>)
 80053cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ce:	089b      	lsrs	r3, r3, #2
 80053d0:	3302      	adds	r3, #2
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d006      	beq.n	80053f2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80053e4:	4b25      	ldr	r3, [pc, #148]	@ (800547c <HAL_GPIO_Init+0x2c8>)
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	4924      	ldr	r1, [pc, #144]	@ (800547c <HAL_GPIO_Init+0x2c8>)
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	608b      	str	r3, [r1, #8]
 80053f0:	e006      	b.n	8005400 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80053f2:	4b22      	ldr	r3, [pc, #136]	@ (800547c <HAL_GPIO_Init+0x2c8>)
 80053f4:	689a      	ldr	r2, [r3, #8]
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	43db      	mvns	r3, r3
 80053fa:	4920      	ldr	r1, [pc, #128]	@ (800547c <HAL_GPIO_Init+0x2c8>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d006      	beq.n	800541a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800540c:	4b1b      	ldr	r3, [pc, #108]	@ (800547c <HAL_GPIO_Init+0x2c8>)
 800540e:	68da      	ldr	r2, [r3, #12]
 8005410:	491a      	ldr	r1, [pc, #104]	@ (800547c <HAL_GPIO_Init+0x2c8>)
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	4313      	orrs	r3, r2
 8005416:	60cb      	str	r3, [r1, #12]
 8005418:	e006      	b.n	8005428 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800541a:	4b18      	ldr	r3, [pc, #96]	@ (800547c <HAL_GPIO_Init+0x2c8>)
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	43db      	mvns	r3, r3
 8005422:	4916      	ldr	r1, [pc, #88]	@ (800547c <HAL_GPIO_Init+0x2c8>)
 8005424:	4013      	ands	r3, r2
 8005426:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d025      	beq.n	8005480 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005434:	4b11      	ldr	r3, [pc, #68]	@ (800547c <HAL_GPIO_Init+0x2c8>)
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	4910      	ldr	r1, [pc, #64]	@ (800547c <HAL_GPIO_Init+0x2c8>)
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	4313      	orrs	r3, r2
 800543e:	604b      	str	r3, [r1, #4]
 8005440:	e025      	b.n	800548e <HAL_GPIO_Init+0x2da>
 8005442:	bf00      	nop
 8005444:	10320000 	.word	0x10320000
 8005448:	10310000 	.word	0x10310000
 800544c:	10220000 	.word	0x10220000
 8005450:	10210000 	.word	0x10210000
 8005454:	10120000 	.word	0x10120000
 8005458:	10110000 	.word	0x10110000
 800545c:	40021000 	.word	0x40021000
 8005460:	40010000 	.word	0x40010000
 8005464:	40010800 	.word	0x40010800
 8005468:	40010c00 	.word	0x40010c00
 800546c:	40011000 	.word	0x40011000
 8005470:	40011400 	.word	0x40011400
 8005474:	40011800 	.word	0x40011800
 8005478:	40011c00 	.word	0x40011c00
 800547c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005480:	4b15      	ldr	r3, [pc, #84]	@ (80054d8 <HAL_GPIO_Init+0x324>)
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	43db      	mvns	r3, r3
 8005488:	4913      	ldr	r1, [pc, #76]	@ (80054d8 <HAL_GPIO_Init+0x324>)
 800548a:	4013      	ands	r3, r2
 800548c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d006      	beq.n	80054a8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800549a:	4b0f      	ldr	r3, [pc, #60]	@ (80054d8 <HAL_GPIO_Init+0x324>)
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	490e      	ldr	r1, [pc, #56]	@ (80054d8 <HAL_GPIO_Init+0x324>)
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	600b      	str	r3, [r1, #0]
 80054a6:	e006      	b.n	80054b6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80054a8:	4b0b      	ldr	r3, [pc, #44]	@ (80054d8 <HAL_GPIO_Init+0x324>)
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	43db      	mvns	r3, r3
 80054b0:	4909      	ldr	r1, [pc, #36]	@ (80054d8 <HAL_GPIO_Init+0x324>)
 80054b2:	4013      	ands	r3, r2
 80054b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80054b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b8:	3301      	adds	r3, #1
 80054ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c2:	fa22 f303 	lsr.w	r3, r2, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f47f ae7e 	bne.w	80051c8 <HAL_GPIO_Init+0x14>
  }
}
 80054cc:	bf00      	nop
 80054ce:	bf00      	nop
 80054d0:	372c      	adds	r7, #44	@ 0x2c
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bc80      	pop	{r7}
 80054d6:	4770      	bx	lr
 80054d8:	40010400 	.word	0x40010400

080054dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	460b      	mov	r3, r1
 80054e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	887b      	ldrh	r3, [r7, #2]
 80054ee:	4013      	ands	r3, r2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80054f4:	2301      	movs	r3, #1
 80054f6:	73fb      	strb	r3, [r7, #15]
 80054f8:	e001      	b.n	80054fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054fa:	2300      	movs	r3, #0
 80054fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	bc80      	pop	{r7}
 8005508:	4770      	bx	lr

0800550a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	460b      	mov	r3, r1
 8005514:	807b      	strh	r3, [r7, #2]
 8005516:	4613      	mov	r3, r2
 8005518:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800551a:	787b      	ldrb	r3, [r7, #1]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005520:	887a      	ldrh	r2, [r7, #2]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005526:	e003      	b.n	8005530 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005528:	887b      	ldrh	r3, [r7, #2]
 800552a:	041a      	lsls	r2, r3, #16
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	611a      	str	r2, [r3, #16]
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr

0800553a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800553a:	b480      	push	{r7}
 800553c:	b085      	sub	sp, #20
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	460b      	mov	r3, r1
 8005544:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800554c:	887a      	ldrh	r2, [r7, #2]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4013      	ands	r3, r2
 8005552:	041a      	lsls	r2, r3, #16
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	43d9      	mvns	r1, r3
 8005558:	887b      	ldrh	r3, [r7, #2]
 800555a:	400b      	ands	r3, r1
 800555c:	431a      	orrs	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	611a      	str	r2, [r3, #16]
}
 8005562:	bf00      	nop
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	bc80      	pop	{r7}
 800556a:	4770      	bx	lr

0800556c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e12b      	b.n	80057d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d106      	bne.n	8005598 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7fe fbd2 	bl	8003d3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2224      	movs	r2, #36	@ 0x24
 800559c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0201 	bic.w	r2, r2, #1
 80055ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80055be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80055d0:	f002 f9d8 	bl	8007984 <HAL_RCC_GetPCLK1Freq>
 80055d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	4a81      	ldr	r2, [pc, #516]	@ (80057e0 <HAL_I2C_Init+0x274>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d807      	bhi.n	80055f0 <HAL_I2C_Init+0x84>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4a80      	ldr	r2, [pc, #512]	@ (80057e4 <HAL_I2C_Init+0x278>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	bf94      	ite	ls
 80055e8:	2301      	movls	r3, #1
 80055ea:	2300      	movhi	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	e006      	b.n	80055fe <HAL_I2C_Init+0x92>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4a7d      	ldr	r2, [pc, #500]	@ (80057e8 <HAL_I2C_Init+0x27c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	bf94      	ite	ls
 80055f8:	2301      	movls	r3, #1
 80055fa:	2300      	movhi	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e0e7      	b.n	80057d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4a78      	ldr	r2, [pc, #480]	@ (80057ec <HAL_I2C_Init+0x280>)
 800560a:	fba2 2303 	umull	r2, r3, r2, r3
 800560e:	0c9b      	lsrs	r3, r3, #18
 8005610:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	430a      	orrs	r2, r1
 8005624:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	4a6a      	ldr	r2, [pc, #424]	@ (80057e0 <HAL_I2C_Init+0x274>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d802      	bhi.n	8005640 <HAL_I2C_Init+0xd4>
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	3301      	adds	r3, #1
 800563e:	e009      	b.n	8005654 <HAL_I2C_Init+0xe8>
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005646:	fb02 f303 	mul.w	r3, r2, r3
 800564a:	4a69      	ldr	r2, [pc, #420]	@ (80057f0 <HAL_I2C_Init+0x284>)
 800564c:	fba2 2303 	umull	r2, r3, r2, r3
 8005650:	099b      	lsrs	r3, r3, #6
 8005652:	3301      	adds	r3, #1
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6812      	ldr	r2, [r2, #0]
 8005658:	430b      	orrs	r3, r1
 800565a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005666:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	495c      	ldr	r1, [pc, #368]	@ (80057e0 <HAL_I2C_Init+0x274>)
 8005670:	428b      	cmp	r3, r1
 8005672:	d819      	bhi.n	80056a8 <HAL_I2C_Init+0x13c>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	1e59      	subs	r1, r3, #1
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005682:	1c59      	adds	r1, r3, #1
 8005684:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005688:	400b      	ands	r3, r1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <HAL_I2C_Init+0x138>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	1e59      	subs	r1, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	fbb1 f3f3 	udiv	r3, r1, r3
 800569c:	3301      	adds	r3, #1
 800569e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056a2:	e051      	b.n	8005748 <HAL_I2C_Init+0x1dc>
 80056a4:	2304      	movs	r3, #4
 80056a6:	e04f      	b.n	8005748 <HAL_I2C_Init+0x1dc>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d111      	bne.n	80056d4 <HAL_I2C_Init+0x168>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	1e58      	subs	r0, r3, #1
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6859      	ldr	r1, [r3, #4]
 80056b8:	460b      	mov	r3, r1
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	440b      	add	r3, r1
 80056be:	fbb0 f3f3 	udiv	r3, r0, r3
 80056c2:	3301      	adds	r3, #1
 80056c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	bf0c      	ite	eq
 80056cc:	2301      	moveq	r3, #1
 80056ce:	2300      	movne	r3, #0
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	e012      	b.n	80056fa <HAL_I2C_Init+0x18e>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	1e58      	subs	r0, r3, #1
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6859      	ldr	r1, [r3, #4]
 80056dc:	460b      	mov	r3, r1
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	440b      	add	r3, r1
 80056e2:	0099      	lsls	r1, r3, #2
 80056e4:	440b      	add	r3, r1
 80056e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80056ea:	3301      	adds	r3, #1
 80056ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	bf0c      	ite	eq
 80056f4:	2301      	moveq	r3, #1
 80056f6:	2300      	movne	r3, #0
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <HAL_I2C_Init+0x196>
 80056fe:	2301      	movs	r3, #1
 8005700:	e022      	b.n	8005748 <HAL_I2C_Init+0x1dc>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10e      	bne.n	8005728 <HAL_I2C_Init+0x1bc>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	1e58      	subs	r0, r3, #1
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6859      	ldr	r1, [r3, #4]
 8005712:	460b      	mov	r3, r1
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	440b      	add	r3, r1
 8005718:	fbb0 f3f3 	udiv	r3, r0, r3
 800571c:	3301      	adds	r3, #1
 800571e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005722:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005726:	e00f      	b.n	8005748 <HAL_I2C_Init+0x1dc>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	1e58      	subs	r0, r3, #1
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6859      	ldr	r1, [r3, #4]
 8005730:	460b      	mov	r3, r1
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	440b      	add	r3, r1
 8005736:	0099      	lsls	r1, r3, #2
 8005738:	440b      	add	r3, r1
 800573a:	fbb0 f3f3 	udiv	r3, r0, r3
 800573e:	3301      	adds	r3, #1
 8005740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005744:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005748:	6879      	ldr	r1, [r7, #4]
 800574a:	6809      	ldr	r1, [r1, #0]
 800574c:	4313      	orrs	r3, r2
 800574e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	69da      	ldr	r2, [r3, #28]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005776:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	6911      	ldr	r1, [r2, #16]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	68d2      	ldr	r2, [r2, #12]
 8005782:	4311      	orrs	r1, r2
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6812      	ldr	r2, [r2, #0]
 8005788:	430b      	orrs	r3, r1
 800578a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	695a      	ldr	r2, [r3, #20]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	431a      	orrs	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f042 0201 	orr.w	r2, r2, #1
 80057b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2220      	movs	r2, #32
 80057c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	000186a0 	.word	0x000186a0
 80057e4:	001e847f 	.word	0x001e847f
 80057e8:	003d08ff 	.word	0x003d08ff
 80057ec:	431bde83 	.word	0x431bde83
 80057f0:	10624dd3 	.word	0x10624dd3

080057f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af02      	add	r7, sp, #8
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	607a      	str	r2, [r7, #4]
 80057fe:	461a      	mov	r2, r3
 8005800:	460b      	mov	r3, r1
 8005802:	817b      	strh	r3, [r7, #10]
 8005804:	4613      	mov	r3, r2
 8005806:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005808:	f7ff fa84 	bl	8004d14 <HAL_GetTick>
 800580c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b20      	cmp	r3, #32
 8005818:	f040 80e0 	bne.w	80059dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	2319      	movs	r3, #25
 8005822:	2201      	movs	r2, #1
 8005824:	4970      	ldr	r1, [pc, #448]	@ (80059e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f001 faac 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005832:	2302      	movs	r3, #2
 8005834:	e0d3      	b.n	80059de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_I2C_Master_Transmit+0x50>
 8005840:	2302      	movs	r3, #2
 8005842:	e0cc      	b.n	80059de <HAL_I2C_Master_Transmit+0x1ea>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b01      	cmp	r3, #1
 8005858:	d007      	beq.n	800586a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f042 0201 	orr.w	r2, r2, #1
 8005868:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005878:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2221      	movs	r2, #33	@ 0x21
 800587e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2210      	movs	r2, #16
 8005886:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	893a      	ldrh	r2, [r7, #8]
 800589a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4a50      	ldr	r2, [pc, #320]	@ (80059ec <HAL_I2C_Master_Transmit+0x1f8>)
 80058aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80058ac:	8979      	ldrh	r1, [r7, #10]
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	6a3a      	ldr	r2, [r7, #32]
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 ff98 	bl	80067e8 <I2C_MasterRequestWrite>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e08d      	b.n	80059de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058c2:	2300      	movs	r3, #0
 80058c4:	613b      	str	r3, [r7, #16]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	613b      	str	r3, [r7, #16]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	613b      	str	r3, [r7, #16]
 80058d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80058d8:	e066      	b.n	80059a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	6a39      	ldr	r1, [r7, #32]
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f001 fb6a 	bl	8006fb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00d      	beq.n	8005906 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d107      	bne.n	8005902 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005900:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e06b      	b.n	80059de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590a:	781a      	ldrb	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005920:	b29b      	uxth	r3, r3
 8005922:	3b01      	subs	r3, #1
 8005924:	b29a      	uxth	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800592e:	3b01      	subs	r3, #1
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	f003 0304 	and.w	r3, r3, #4
 8005940:	2b04      	cmp	r3, #4
 8005942:	d11b      	bne.n	800597c <HAL_I2C_Master_Transmit+0x188>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005948:	2b00      	cmp	r3, #0
 800594a:	d017      	beq.n	800597c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005950:	781a      	ldrb	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005966:	b29b      	uxth	r3, r3
 8005968:	3b01      	subs	r3, #1
 800596a:	b29a      	uxth	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	6a39      	ldr	r1, [r7, #32]
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f001 fb61 	bl	8007048 <I2C_WaitOnBTFFlagUntilTimeout>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00d      	beq.n	80059a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005990:	2b04      	cmp	r3, #4
 8005992:	d107      	bne.n	80059a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e01a      	b.n	80059de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d194      	bne.n	80058da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80059d8:	2300      	movs	r3, #0
 80059da:	e000      	b.n	80059de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80059dc:	2302      	movs	r3, #2
  }
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	00100002 	.word	0x00100002
 80059ec:	ffff0000 	.word	0xffff0000

080059f0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08c      	sub	sp, #48	@ 0x30
 80059f4:	af02      	add	r7, sp, #8
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	607a      	str	r2, [r7, #4]
 80059fa:	461a      	mov	r2, r3
 80059fc:	460b      	mov	r3, r1
 80059fe:	817b      	strh	r3, [r7, #10]
 8005a00:	4613      	mov	r3, r2
 8005a02:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005a04:	2300      	movs	r3, #0
 8005a06:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a08:	f7ff f984 	bl	8004d14 <HAL_GetTick>
 8005a0c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b20      	cmp	r3, #32
 8005a18:	f040 824b 	bne.w	8005eb2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	2319      	movs	r3, #25
 8005a22:	2201      	movs	r2, #1
 8005a24:	497f      	ldr	r1, [pc, #508]	@ (8005c24 <HAL_I2C_Master_Receive+0x234>)
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f001 f9ac 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8005a32:	2302      	movs	r3, #2
 8005a34:	e23e      	b.n	8005eb4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d101      	bne.n	8005a44 <HAL_I2C_Master_Receive+0x54>
 8005a40:	2302      	movs	r3, #2
 8005a42:	e237      	b.n	8005eb4 <HAL_I2C_Master_Receive+0x4c4>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d007      	beq.n	8005a6a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f042 0201 	orr.w	r2, r2, #1
 8005a68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2222      	movs	r2, #34	@ 0x22
 8005a7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2210      	movs	r2, #16
 8005a86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	893a      	ldrh	r2, [r7, #8]
 8005a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	4a5f      	ldr	r2, [pc, #380]	@ (8005c28 <HAL_I2C_Master_Receive+0x238>)
 8005aaa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005aac:	8979      	ldrh	r1, [r7, #10]
 8005aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 ff1a 	bl	80068ec <I2C_MasterRequestRead>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e1f8      	b.n	8005eb4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d113      	bne.n	8005af2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aca:	2300      	movs	r3, #0
 8005acc:	61fb      	str	r3, [r7, #28]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	61fb      	str	r3, [r7, #28]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	61fb      	str	r3, [r7, #28]
 8005ade:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	e1cc      	b.n	8005e8c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d11e      	bne.n	8005b38 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b0a:	b672      	cpsid	i
}
 8005b0c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b0e:	2300      	movs	r3, #0
 8005b10:	61bb      	str	r3, [r7, #24]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	61bb      	str	r3, [r7, #24]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	61bb      	str	r3, [r7, #24]
 8005b22:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005b34:	b662      	cpsie	i
}
 8005b36:	e035      	b.n	8005ba4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d11e      	bne.n	8005b7e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b50:	b672      	cpsid	i
}
 8005b52:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b54:	2300      	movs	r3, #0
 8005b56:	617b      	str	r3, [r7, #20]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005b7a:	b662      	cpsie	i
}
 8005b7c:	e012      	b.n	8005ba4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b8e:	2300      	movs	r3, #0
 8005b90:	613b      	str	r3, [r7, #16]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	613b      	str	r3, [r7, #16]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	613b      	str	r3, [r7, #16]
 8005ba2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005ba4:	e172      	b.n	8005e8c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	f200 811f 	bhi.w	8005dee <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d123      	bne.n	8005c00 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f001 fa8b 	bl	80070d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e173      	b.n	8005eb4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	691a      	ldr	r2, [r3, #16]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bde:	1c5a      	adds	r2, r3, #1
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005be8:	3b01      	subs	r3, #1
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005bfe:	e145      	b.n	8005e8c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d152      	bne.n	8005cae <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c0e:	2200      	movs	r2, #0
 8005c10:	4906      	ldr	r1, [pc, #24]	@ (8005c2c <HAL_I2C_Master_Receive+0x23c>)
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f001 f8b6 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d008      	beq.n	8005c30 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e148      	b.n	8005eb4 <HAL_I2C_Master_Receive+0x4c4>
 8005c22:	bf00      	nop
 8005c24:	00100002 	.word	0x00100002
 8005c28:	ffff0000 	.word	0xffff0000
 8005c2c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005c30:	b672      	cpsid	i
}
 8005c32:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	691a      	ldr	r2, [r3, #16]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005c76:	b662      	cpsie	i
}
 8005c78:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	691a      	ldr	r2, [r3, #16]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c84:	b2d2      	uxtb	r2, r2
 8005c86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c96:	3b01      	subs	r3, #1
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005cac:	e0ee      	b.n	8005e8c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	4981      	ldr	r1, [pc, #516]	@ (8005ebc <HAL_I2C_Master_Receive+0x4cc>)
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f001 f863 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e0f5      	b.n	8005eb4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005cd8:	b672      	cpsid	i
}
 8005cda:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	691a      	ldr	r2, [r3, #16]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d0e:	4b6c      	ldr	r3, [pc, #432]	@ (8005ec0 <HAL_I2C_Master_Receive+0x4d0>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	08db      	lsrs	r3, r3, #3
 8005d14:	4a6b      	ldr	r2, [pc, #428]	@ (8005ec4 <HAL_I2C_Master_Receive+0x4d4>)
 8005d16:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1a:	0a1a      	lsrs	r2, r3, #8
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	00da      	lsls	r2, r3, #3
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d118      	bne.n	8005d66 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4e:	f043 0220 	orr.w	r2, r3, #32
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005d56:	b662      	cpsie	i
}
 8005d58:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e0a6      	b.n	8005eb4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	f003 0304 	and.w	r3, r3, #4
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	d1d9      	bne.n	8005d28 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	691a      	ldr	r2, [r3, #16]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005da0:	3b01      	subs	r3, #1
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	3b01      	subs	r3, #1
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005db6:	b662      	cpsie	i
}
 8005db8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	691a      	ldr	r2, [r3, #16]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc4:	b2d2      	uxtb	r2, r2
 8005dc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dcc:	1c5a      	adds	r2, r3, #1
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005dec:	e04e      	b.n	8005e8c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005df0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f001 f970 	bl	80070d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e058      	b.n	8005eb4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	691a      	ldr	r2, [r3, #16]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0c:	b2d2      	uxtb	r2, r2
 8005e0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	f003 0304 	and.w	r3, r3, #4
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d124      	bne.n	8005e8c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	d107      	bne.n	8005e5a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e58:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	691a      	ldr	r2, [r3, #16]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e76:	3b01      	subs	r3, #1
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	3b01      	subs	r3, #1
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f47f ae88 	bne.w	8005ba6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	e000      	b.n	8005eb4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8005eb2:	2302      	movs	r3, #2
  }
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3728      	adds	r7, #40	@ 0x28
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	00010004 	.word	0x00010004
 8005ec0:	20000024 	.word	0x20000024
 8005ec4:	14f8b589 	.word	0x14f8b589

08005ec8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af02      	add	r7, sp, #8
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	4608      	mov	r0, r1
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	817b      	strh	r3, [r7, #10]
 8005eda:	460b      	mov	r3, r1
 8005edc:	813b      	strh	r3, [r7, #8]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ee2:	f7fe ff17 	bl	8004d14 <HAL_GetTick>
 8005ee6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b20      	cmp	r3, #32
 8005ef2:	f040 80d9 	bne.w	80060a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	2319      	movs	r3, #25
 8005efc:	2201      	movs	r2, #1
 8005efe:	496d      	ldr	r1, [pc, #436]	@ (80060b4 <HAL_I2C_Mem_Write+0x1ec>)
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 ff3f 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e0cc      	b.n	80060aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d101      	bne.n	8005f1e <HAL_I2C_Mem_Write+0x56>
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	e0c5      	b.n	80060aa <HAL_I2C_Mem_Write+0x1e2>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d007      	beq.n	8005f44 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0201 	orr.w	r2, r2, #1
 8005f42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2221      	movs	r2, #33	@ 0x21
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2240      	movs	r2, #64	@ 0x40
 8005f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a3a      	ldr	r2, [r7, #32]
 8005f6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4a4d      	ldr	r2, [pc, #308]	@ (80060b8 <HAL_I2C_Mem_Write+0x1f0>)
 8005f84:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f86:	88f8      	ldrh	r0, [r7, #6]
 8005f88:	893a      	ldrh	r2, [r7, #8]
 8005f8a:	8979      	ldrh	r1, [r7, #10]
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	9301      	str	r3, [sp, #4]
 8005f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	4603      	mov	r3, r0
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 fd76 	bl	8006a88 <I2C_RequestMemoryWrite>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d052      	beq.n	8006048 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e081      	b.n	80060aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f001 f804 	bl	8006fb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00d      	beq.n	8005fd2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d107      	bne.n	8005fce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fcc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e06b      	b.n	80060aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd6:	781a      	ldrb	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b04      	cmp	r3, #4
 800600e:	d11b      	bne.n	8006048 <HAL_I2C_Mem_Write+0x180>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006014:	2b00      	cmp	r3, #0
 8006016:	d017      	beq.n	8006048 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601c:	781a      	ldrb	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006028:	1c5a      	adds	r2, r3, #1
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006032:	3b01      	subs	r3, #1
 8006034:	b29a      	uxth	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800603e:	b29b      	uxth	r3, r3
 8006040:	3b01      	subs	r3, #1
 8006042:	b29a      	uxth	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1aa      	bne.n	8005fa6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 fff7 	bl	8007048 <I2C_WaitOnBTFFlagUntilTimeout>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00d      	beq.n	800607c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006064:	2b04      	cmp	r3, #4
 8006066:	d107      	bne.n	8006078 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006076:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e016      	b.n	80060aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800608a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2220      	movs	r2, #32
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80060a4:	2300      	movs	r3, #0
 80060a6:	e000      	b.n	80060aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80060a8:	2302      	movs	r3, #2
  }
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	00100002 	.word	0x00100002
 80060b8:	ffff0000 	.word	0xffff0000

080060bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08c      	sub	sp, #48	@ 0x30
 80060c0:	af02      	add	r7, sp, #8
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	4608      	mov	r0, r1
 80060c6:	4611      	mov	r1, r2
 80060c8:	461a      	mov	r2, r3
 80060ca:	4603      	mov	r3, r0
 80060cc:	817b      	strh	r3, [r7, #10]
 80060ce:	460b      	mov	r3, r1
 80060d0:	813b      	strh	r3, [r7, #8]
 80060d2:	4613      	mov	r3, r2
 80060d4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80060d6:	2300      	movs	r3, #0
 80060d8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80060da:	f7fe fe1b 	bl	8004d14 <HAL_GetTick>
 80060de:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	f040 8244 	bne.w	8006576 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	2319      	movs	r3, #25
 80060f4:	2201      	movs	r2, #1
 80060f6:	4982      	ldr	r1, [pc, #520]	@ (8006300 <HAL_I2C_Mem_Read+0x244>)
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 fe43 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8006104:	2302      	movs	r3, #2
 8006106:	e237      	b.n	8006578 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800610e:	2b01      	cmp	r3, #1
 8006110:	d101      	bne.n	8006116 <HAL_I2C_Mem_Read+0x5a>
 8006112:	2302      	movs	r3, #2
 8006114:	e230      	b.n	8006578 <HAL_I2C_Mem_Read+0x4bc>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b01      	cmp	r3, #1
 800612a:	d007      	beq.n	800613c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0201 	orr.w	r2, r2, #1
 800613a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800614a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2222      	movs	r2, #34	@ 0x22
 8006150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2240      	movs	r2, #64	@ 0x40
 8006158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006166:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800616c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006172:	b29a      	uxth	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4a62      	ldr	r2, [pc, #392]	@ (8006304 <HAL_I2C_Mem_Read+0x248>)
 800617c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800617e:	88f8      	ldrh	r0, [r7, #6]
 8006180:	893a      	ldrh	r2, [r7, #8]
 8006182:	8979      	ldrh	r1, [r7, #10]
 8006184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006186:	9301      	str	r3, [sp, #4]
 8006188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	4603      	mov	r3, r0
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 fd10 	bl	8006bb4 <I2C_RequestMemoryRead>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e1ec      	b.n	8006578 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d113      	bne.n	80061ce <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061a6:	2300      	movs	r3, #0
 80061a8:	61fb      	str	r3, [r7, #28]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	61fb      	str	r3, [r7, #28]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	61fb      	str	r3, [r7, #28]
 80061ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	e1c0      	b.n	8006550 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d11e      	bne.n	8006214 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80061e6:	b672      	cpsid	i
}
 80061e8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ea:	2300      	movs	r3, #0
 80061ec:	61bb      	str	r3, [r7, #24]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	61bb      	str	r3, [r7, #24]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	61bb      	str	r3, [r7, #24]
 80061fe:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800620e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006210:	b662      	cpsie	i
}
 8006212:	e035      	b.n	8006280 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006218:	2b02      	cmp	r3, #2
 800621a:	d11e      	bne.n	800625a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800622a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800622c:	b672      	cpsid	i
}
 800622e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006230:	2300      	movs	r3, #0
 8006232:	617b      	str	r3, [r7, #20]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006254:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006256:	b662      	cpsie	i
}
 8006258:	e012      	b.n	8006280 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006268:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800626a:	2300      	movs	r3, #0
 800626c:	613b      	str	r3, [r7, #16]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	613b      	str	r3, [r7, #16]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	613b      	str	r3, [r7, #16]
 800627e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006280:	e166      	b.n	8006550 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006286:	2b03      	cmp	r3, #3
 8006288:	f200 811f 	bhi.w	80064ca <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006290:	2b01      	cmp	r3, #1
 8006292:	d123      	bne.n	80062dc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006294:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006296:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 ff1d 	bl	80070d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e167      	b.n	8006578 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691a      	ldr	r2, [r3, #16]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062c4:	3b01      	subs	r3, #1
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	3b01      	subs	r3, #1
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80062da:	e139      	b.n	8006550 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d152      	bne.n	800638a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ea:	2200      	movs	r2, #0
 80062ec:	4906      	ldr	r1, [pc, #24]	@ (8006308 <HAL_I2C_Mem_Read+0x24c>)
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f000 fd48 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d008      	beq.n	800630c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e13c      	b.n	8006578 <HAL_I2C_Mem_Read+0x4bc>
 80062fe:	bf00      	nop
 8006300:	00100002 	.word	0x00100002
 8006304:	ffff0000 	.word	0xffff0000
 8006308:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800630c:	b672      	cpsid	i
}
 800630e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800631e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691a      	ldr	r2, [r3, #16]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800632a:	b2d2      	uxtb	r2, r2
 800632c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800633c:	3b01      	subs	r3, #1
 800633e:	b29a      	uxth	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006348:	b29b      	uxth	r3, r3
 800634a:	3b01      	subs	r3, #1
 800634c:	b29a      	uxth	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006352:	b662      	cpsie	i
}
 8006354:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	691a      	ldr	r2, [r3, #16]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006372:	3b01      	subs	r3, #1
 8006374:	b29a      	uxth	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800637e:	b29b      	uxth	r3, r3
 8006380:	3b01      	subs	r3, #1
 8006382:	b29a      	uxth	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006388:	e0e2      	b.n	8006550 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800638a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006390:	2200      	movs	r2, #0
 8006392:	497b      	ldr	r1, [pc, #492]	@ (8006580 <HAL_I2C_Mem_Read+0x4c4>)
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f000 fcf5 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d001      	beq.n	80063a4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e0e9      	b.n	8006578 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80063b4:	b672      	cpsid	i
}
 80063b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691a      	ldr	r2, [r3, #16]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063d4:	3b01      	subs	r3, #1
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	3b01      	subs	r3, #1
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80063ea:	4b66      	ldr	r3, [pc, #408]	@ (8006584 <HAL_I2C_Mem_Read+0x4c8>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	08db      	lsrs	r3, r3, #3
 80063f0:	4a65      	ldr	r2, [pc, #404]	@ (8006588 <HAL_I2C_Mem_Read+0x4cc>)
 80063f2:	fba2 2303 	umull	r2, r3, r2, r3
 80063f6:	0a1a      	lsrs	r2, r3, #8
 80063f8:	4613      	mov	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	00da      	lsls	r2, r3, #3
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	3b01      	subs	r3, #1
 8006408:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d118      	bne.n	8006442 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2220      	movs	r2, #32
 800641a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800642a:	f043 0220 	orr.w	r2, r3, #32
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006432:	b662      	cpsie	i
}
 8006434:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e09a      	b.n	8006578 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b04      	cmp	r3, #4
 800644e:	d1d9      	bne.n	8006404 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800645e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	691a      	ldr	r2, [r3, #16]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646a:	b2d2      	uxtb	r2, r2
 800646c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006472:	1c5a      	adds	r2, r3, #1
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800647c:	3b01      	subs	r3, #1
 800647e:	b29a      	uxth	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006488:	b29b      	uxth	r3, r3
 800648a:	3b01      	subs	r3, #1
 800648c:	b29a      	uxth	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006492:	b662      	cpsie	i
}
 8006494:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	691a      	ldr	r2, [r3, #16]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a0:	b2d2      	uxtb	r2, r2
 80064a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064b2:	3b01      	subs	r3, #1
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064be:	b29b      	uxth	r3, r3
 80064c0:	3b01      	subs	r3, #1
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80064c8:	e042      	b.n	8006550 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 fe02 	bl	80070d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e04c      	b.n	8006578 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	691a      	ldr	r2, [r3, #16]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064fa:	3b01      	subs	r3, #1
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006506:	b29b      	uxth	r3, r3
 8006508:	3b01      	subs	r3, #1
 800650a:	b29a      	uxth	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	f003 0304 	and.w	r3, r3, #4
 800651a:	2b04      	cmp	r3, #4
 800651c:	d118      	bne.n	8006550 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	691a      	ldr	r2, [r3, #16]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006530:	1c5a      	adds	r2, r3, #1
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800653a:	3b01      	subs	r3, #1
 800653c:	b29a      	uxth	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006546:	b29b      	uxth	r3, r3
 8006548:	3b01      	subs	r3, #1
 800654a:	b29a      	uxth	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006554:	2b00      	cmp	r3, #0
 8006556:	f47f ae94 	bne.w	8006282 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2220      	movs	r2, #32
 800655e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006572:	2300      	movs	r3, #0
 8006574:	e000      	b.n	8006578 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8006576:	2302      	movs	r3, #2
  }
}
 8006578:	4618      	mov	r0, r3
 800657a:	3728      	adds	r7, #40	@ 0x28
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	00010004 	.word	0x00010004
 8006584:	20000024 	.word	0x20000024
 8006588:	14f8b589 	.word	0x14f8b589

0800658c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b08a      	sub	sp, #40	@ 0x28
 8006590:	af02      	add	r7, sp, #8
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	607a      	str	r2, [r7, #4]
 8006596:	603b      	str	r3, [r7, #0]
 8006598:	460b      	mov	r3, r1
 800659a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800659c:	f7fe fbba 	bl	8004d14 <HAL_GetTick>
 80065a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b20      	cmp	r3, #32
 80065b0:	f040 8111 	bne.w	80067d6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	2319      	movs	r3, #25
 80065ba:	2201      	movs	r2, #1
 80065bc:	4988      	ldr	r1, [pc, #544]	@ (80067e0 <HAL_I2C_IsDeviceReady+0x254>)
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f000 fbe0 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80065ca:	2302      	movs	r3, #2
 80065cc:	e104      	b.n	80067d8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d101      	bne.n	80065dc <HAL_I2C_IsDeviceReady+0x50>
 80065d8:	2302      	movs	r3, #2
 80065da:	e0fd      	b.n	80067d8 <HAL_I2C_IsDeviceReady+0x24c>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d007      	beq.n	8006602 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f042 0201 	orr.w	r2, r2, #1
 8006600:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006610:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2224      	movs	r2, #36	@ 0x24
 8006616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4a70      	ldr	r2, [pc, #448]	@ (80067e4 <HAL_I2C_IsDeviceReady+0x258>)
 8006624:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006634:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2200      	movs	r2, #0
 800663e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 fb9e 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00d      	beq.n	800666a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006658:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800665c:	d103      	bne.n	8006666 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006664:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e0b6      	b.n	80067d8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800666a:	897b      	ldrh	r3, [r7, #10]
 800666c:	b2db      	uxtb	r3, r3
 800666e:	461a      	mov	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006678:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800667a:	f7fe fb4b 	bl	8004d14 <HAL_GetTick>
 800667e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b02      	cmp	r3, #2
 800668c:	bf0c      	ite	eq
 800668e:	2301      	moveq	r3, #1
 8006690:	2300      	movne	r3, #0
 8006692:	b2db      	uxtb	r3, r3
 8006694:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066a4:	bf0c      	ite	eq
 80066a6:	2301      	moveq	r3, #1
 80066a8:	2300      	movne	r3, #0
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80066ae:	e025      	b.n	80066fc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80066b0:	f7fe fb30 	bl	8004d14 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d302      	bcc.n	80066c6 <HAL_I2C_IsDeviceReady+0x13a>
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d103      	bne.n	80066ce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	22a0      	movs	r2, #160	@ 0xa0
 80066ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b02      	cmp	r3, #2
 80066da:	bf0c      	ite	eq
 80066dc:	2301      	moveq	r3, #1
 80066de:	2300      	movne	r3, #0
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066f2:	bf0c      	ite	eq
 80066f4:	2301      	moveq	r3, #1
 80066f6:	2300      	movne	r3, #0
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2ba0      	cmp	r3, #160	@ 0xa0
 8006706:	d005      	beq.n	8006714 <HAL_I2C_IsDeviceReady+0x188>
 8006708:	7dfb      	ldrb	r3, [r7, #23]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d102      	bne.n	8006714 <HAL_I2C_IsDeviceReady+0x188>
 800670e:	7dbb      	ldrb	r3, [r7, #22]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d0cd      	beq.n	80066b0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2220      	movs	r2, #32
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b02      	cmp	r3, #2
 8006728:	d129      	bne.n	800677e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006738:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800673a:	2300      	movs	r3, #0
 800673c:	613b      	str	r3, [r7, #16]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	613b      	str	r3, [r7, #16]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	613b      	str	r3, [r7, #16]
 800674e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	2319      	movs	r3, #25
 8006756:	2201      	movs	r2, #1
 8006758:	4921      	ldr	r1, [pc, #132]	@ (80067e0 <HAL_I2C_IsDeviceReady+0x254>)
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f000 fb12 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e036      	b.n	80067d8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2220      	movs	r2, #32
 800676e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	e02c      	b.n	80067d8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800678c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006796:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	2319      	movs	r3, #25
 800679e:	2201      	movs	r2, #1
 80067a0:	490f      	ldr	r1, [pc, #60]	@ (80067e0 <HAL_I2C_IsDeviceReady+0x254>)
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 faee 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e012      	b.n	80067d8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	3301      	adds	r3, #1
 80067b6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	429a      	cmp	r2, r3
 80067be:	f4ff af32 	bcc.w	8006626 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e000      	b.n	80067d8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80067d6:	2302      	movs	r3, #2
  }
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3720      	adds	r7, #32
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	00100002 	.word	0x00100002
 80067e4:	ffff0000 	.word	0xffff0000

080067e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b088      	sub	sp, #32
 80067ec:	af02      	add	r7, sp, #8
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	607a      	str	r2, [r7, #4]
 80067f2:	603b      	str	r3, [r7, #0]
 80067f4:	460b      	mov	r3, r1
 80067f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2b08      	cmp	r3, #8
 8006802:	d006      	beq.n	8006812 <I2C_MasterRequestWrite+0x2a>
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d003      	beq.n	8006812 <I2C_MasterRequestWrite+0x2a>
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006810:	d108      	bne.n	8006824 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	e00b      	b.n	800683c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006828:	2b12      	cmp	r3, #18
 800682a:	d107      	bne.n	800683c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800683a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 fa9b 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00d      	beq.n	8006870 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800685e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006862:	d103      	bne.n	800686c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800686a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e035      	b.n	80068dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006878:	d108      	bne.n	800688c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800687a:	897b      	ldrh	r3, [r7, #10]
 800687c:	b2db      	uxtb	r3, r3
 800687e:	461a      	mov	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006888:	611a      	str	r2, [r3, #16]
 800688a:	e01b      	b.n	80068c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800688c:	897b      	ldrh	r3, [r7, #10]
 800688e:	11db      	asrs	r3, r3, #7
 8006890:	b2db      	uxtb	r3, r3
 8006892:	f003 0306 	and.w	r3, r3, #6
 8006896:	b2db      	uxtb	r3, r3
 8006898:	f063 030f 	orn	r3, r3, #15
 800689c:	b2da      	uxtb	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	490e      	ldr	r1, [pc, #56]	@ (80068e4 <I2C_MasterRequestWrite+0xfc>)
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f000 fae4 	bl	8006e78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e010      	b.n	80068dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80068ba:	897b      	ldrh	r3, [r7, #10]
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	4907      	ldr	r1, [pc, #28]	@ (80068e8 <I2C_MasterRequestWrite+0x100>)
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 fad4 	bl	8006e78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e000      	b.n	80068dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3718      	adds	r7, #24
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	00010008 	.word	0x00010008
 80068e8:	00010002 	.word	0x00010002

080068ec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b088      	sub	sp, #32
 80068f0:	af02      	add	r7, sp, #8
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	607a      	str	r2, [r7, #4]
 80068f6:	603b      	str	r3, [r7, #0]
 80068f8:	460b      	mov	r3, r1
 80068fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006900:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006910:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	2b08      	cmp	r3, #8
 8006916:	d006      	beq.n	8006926 <I2C_MasterRequestRead+0x3a>
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d003      	beq.n	8006926 <I2C_MasterRequestRead+0x3a>
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006924:	d108      	bne.n	8006938 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	e00b      	b.n	8006950 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800693c:	2b11      	cmp	r3, #17
 800693e:	d107      	bne.n	8006950 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800694e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 fa11 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00d      	beq.n	8006984 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006972:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006976:	d103      	bne.n	8006980 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800697e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e079      	b.n	8006a78 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800698c:	d108      	bne.n	80069a0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800698e:	897b      	ldrh	r3, [r7, #10]
 8006990:	b2db      	uxtb	r3, r3
 8006992:	f043 0301 	orr.w	r3, r3, #1
 8006996:	b2da      	uxtb	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	611a      	str	r2, [r3, #16]
 800699e:	e05f      	b.n	8006a60 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80069a0:	897b      	ldrh	r3, [r7, #10]
 80069a2:	11db      	asrs	r3, r3, #7
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	f003 0306 	and.w	r3, r3, #6
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	f063 030f 	orn	r3, r3, #15
 80069b0:	b2da      	uxtb	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	4930      	ldr	r1, [pc, #192]	@ (8006a80 <I2C_MasterRequestRead+0x194>)
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f000 fa5a 	bl	8006e78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e054      	b.n	8006a78 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80069ce:	897b      	ldrh	r3, [r7, #10]
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	4929      	ldr	r1, [pc, #164]	@ (8006a84 <I2C_MasterRequestRead+0x198>)
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 fa4a 	bl	8006e78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e044      	b.n	8006a78 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069ee:	2300      	movs	r3, #0
 80069f0:	613b      	str	r3, [r7, #16]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	613b      	str	r3, [r7, #16]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	613b      	str	r3, [r7, #16]
 8006a02:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a12:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f000 f9af 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00d      	beq.n	8006a48 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a3a:	d103      	bne.n	8006a44 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a42:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e017      	b.n	8006a78 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006a48:	897b      	ldrh	r3, [r7, #10]
 8006a4a:	11db      	asrs	r3, r3, #7
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	f003 0306 	and.w	r3, r3, #6
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	f063 030e 	orn	r3, r3, #14
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	4907      	ldr	r1, [pc, #28]	@ (8006a84 <I2C_MasterRequestRead+0x198>)
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f000 fa06 	bl	8006e78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e000      	b.n	8006a78 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3718      	adds	r7, #24
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	00010008 	.word	0x00010008
 8006a84:	00010002 	.word	0x00010002

08006a88 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b088      	sub	sp, #32
 8006a8c:	af02      	add	r7, sp, #8
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	4608      	mov	r0, r1
 8006a92:	4611      	mov	r1, r2
 8006a94:	461a      	mov	r2, r3
 8006a96:	4603      	mov	r3, r0
 8006a98:	817b      	strh	r3, [r7, #10]
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	813b      	strh	r3, [r7, #8]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ab0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f000 f960 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00d      	beq.n	8006ae6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ad4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ad8:	d103      	bne.n	8006ae2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ae0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e05f      	b.n	8006ba6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ae6:	897b      	ldrh	r3, [r7, #10]
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	461a      	mov	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006af4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af8:	6a3a      	ldr	r2, [r7, #32]
 8006afa:	492d      	ldr	r1, [pc, #180]	@ (8006bb0 <I2C_RequestMemoryWrite+0x128>)
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 f9bb 	bl	8006e78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e04c      	b.n	8006ba6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	617b      	str	r3, [r7, #20]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	617b      	str	r3, [r7, #20]
 8006b20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b24:	6a39      	ldr	r1, [r7, #32]
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f000 fa46 	bl	8006fb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00d      	beq.n	8006b4e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	d107      	bne.n	8006b4a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e02b      	b.n	8006ba6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b4e:	88fb      	ldrh	r3, [r7, #6]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d105      	bne.n	8006b60 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b54:	893b      	ldrh	r3, [r7, #8]
 8006b56:	b2da      	uxtb	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	611a      	str	r2, [r3, #16]
 8006b5e:	e021      	b.n	8006ba4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b60:	893b      	ldrh	r3, [r7, #8]
 8006b62:	0a1b      	lsrs	r3, r3, #8
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b70:	6a39      	ldr	r1, [r7, #32]
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 fa20 	bl	8006fb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00d      	beq.n	8006b9a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	d107      	bne.n	8006b96 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e005      	b.n	8006ba6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b9a:	893b      	ldrh	r3, [r7, #8]
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3718      	adds	r7, #24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	00010002 	.word	0x00010002

08006bb4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b088      	sub	sp, #32
 8006bb8:	af02      	add	r7, sp, #8
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	4608      	mov	r0, r1
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	817b      	strh	r3, [r7, #10]
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	813b      	strh	r3, [r7, #8]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006bdc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006bec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f000 f8c2 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00d      	beq.n	8006c22 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c14:	d103      	bne.n	8006c1e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e0aa      	b.n	8006d78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c22:	897b      	ldrh	r3, [r7, #10]
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	461a      	mov	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006c30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c34:	6a3a      	ldr	r2, [r7, #32]
 8006c36:	4952      	ldr	r1, [pc, #328]	@ (8006d80 <I2C_RequestMemoryRead+0x1cc>)
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 f91d 	bl	8006e78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d001      	beq.n	8006c48 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e097      	b.n	8006d78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c48:	2300      	movs	r3, #0
 8006c4a:	617b      	str	r3, [r7, #20]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	617b      	str	r3, [r7, #20]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	617b      	str	r3, [r7, #20]
 8006c5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c60:	6a39      	ldr	r1, [r7, #32]
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f000 f9a8 	bl	8006fb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00d      	beq.n	8006c8a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c72:	2b04      	cmp	r3, #4
 8006c74:	d107      	bne.n	8006c86 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e076      	b.n	8006d78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c8a:	88fb      	ldrh	r3, [r7, #6]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d105      	bne.n	8006c9c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c90:	893b      	ldrh	r3, [r7, #8]
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	611a      	str	r2, [r3, #16]
 8006c9a:	e021      	b.n	8006ce0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c9c:	893b      	ldrh	r3, [r7, #8]
 8006c9e:	0a1b      	lsrs	r3, r3, #8
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	b2da      	uxtb	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cac:	6a39      	ldr	r1, [r7, #32]
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f000 f982 	bl	8006fb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00d      	beq.n	8006cd6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cbe:	2b04      	cmp	r3, #4
 8006cc0:	d107      	bne.n	8006cd2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e050      	b.n	8006d78 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006cd6:	893b      	ldrh	r3, [r7, #8]
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ce0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ce2:	6a39      	ldr	r1, [r7, #32]
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 f967 	bl	8006fb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00d      	beq.n	8006d0c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf4:	2b04      	cmp	r3, #4
 8006cf6:	d107      	bne.n	8006d08 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d06:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e035      	b.n	8006d78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d1a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1e:	9300      	str	r3, [sp, #0]
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f000 f82b 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00d      	beq.n	8006d50 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d42:	d103      	bne.n	8006d4c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d4a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e013      	b.n	8006d78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006d50:	897b      	ldrh	r3, [r7, #10]
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	f043 0301 	orr.w	r3, r3, #1
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d62:	6a3a      	ldr	r2, [r7, #32]
 8006d64:	4906      	ldr	r1, [pc, #24]	@ (8006d80 <I2C_RequestMemoryRead+0x1cc>)
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f000 f886 	bl	8006e78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d001      	beq.n	8006d76 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e000      	b.n	8006d78 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3718      	adds	r7, #24
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	00010002 	.word	0x00010002

08006d84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	603b      	str	r3, [r7, #0]
 8006d90:	4613      	mov	r3, r2
 8006d92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d94:	e048      	b.n	8006e28 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9c:	d044      	beq.n	8006e28 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d9e:	f7fd ffb9 	bl	8004d14 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d302      	bcc.n	8006db4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d139      	bne.n	8006e28 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	0c1b      	lsrs	r3, r3, #16
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d10d      	bne.n	8006dda <I2C_WaitOnFlagUntilTimeout+0x56>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	695b      	ldr	r3, [r3, #20]
 8006dc4:	43da      	mvns	r2, r3
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	4013      	ands	r3, r2
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	bf0c      	ite	eq
 8006dd0:	2301      	moveq	r3, #1
 8006dd2:	2300      	movne	r3, #0
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	e00c      	b.n	8006df4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	43da      	mvns	r2, r3
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	4013      	ands	r3, r2
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	bf0c      	ite	eq
 8006dec:	2301      	moveq	r3, #1
 8006dee:	2300      	movne	r3, #0
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	461a      	mov	r2, r3
 8006df4:	79fb      	ldrb	r3, [r7, #7]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d116      	bne.n	8006e28 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2220      	movs	r2, #32
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e14:	f043 0220 	orr.w	r2, r3, #32
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e023      	b.n	8006e70 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	0c1b      	lsrs	r3, r3, #16
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d10d      	bne.n	8006e4e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	43da      	mvns	r2, r3
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	bf0c      	ite	eq
 8006e44:	2301      	moveq	r3, #1
 8006e46:	2300      	movne	r3, #0
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	e00c      	b.n	8006e68 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	43da      	mvns	r2, r3
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	4013      	ands	r3, r2
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	bf0c      	ite	eq
 8006e60:	2301      	moveq	r3, #1
 8006e62:	2300      	movne	r3, #0
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	461a      	mov	r2, r3
 8006e68:	79fb      	ldrb	r3, [r7, #7]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d093      	beq.n	8006d96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
 8006e84:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e86:	e071      	b.n	8006f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e96:	d123      	bne.n	8006ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ea6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006eb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ecc:	f043 0204 	orr.w	r2, r3, #4
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e067      	b.n	8006fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee6:	d041      	beq.n	8006f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ee8:	f7fd ff14 	bl	8004d14 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d302      	bcc.n	8006efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d136      	bne.n	8006f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	0c1b      	lsrs	r3, r3, #16
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d10c      	bne.n	8006f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	43da      	mvns	r2, r3
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	4013      	ands	r3, r2
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	bf14      	ite	ne
 8006f1a:	2301      	movne	r3, #1
 8006f1c:	2300      	moveq	r3, #0
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	e00b      	b.n	8006f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	43da      	mvns	r2, r3
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	bf14      	ite	ne
 8006f34:	2301      	movne	r3, #1
 8006f36:	2300      	moveq	r3, #0
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d016      	beq.n	8006f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2220      	movs	r2, #32
 8006f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f58:	f043 0220 	orr.w	r2, r3, #32
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e021      	b.n	8006fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	0c1b      	lsrs	r3, r3, #16
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d10c      	bne.n	8006f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	43da      	mvns	r2, r3
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	4013      	ands	r3, r2
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	bf14      	ite	ne
 8006f88:	2301      	movne	r3, #1
 8006f8a:	2300      	moveq	r3, #0
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	e00b      	b.n	8006fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	43da      	mvns	r2, r3
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	bf14      	ite	ne
 8006fa2:	2301      	movne	r3, #1
 8006fa4:	2300      	moveq	r3, #0
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f47f af6d 	bne.w	8006e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fc4:	e034      	b.n	8007030 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f000 f8e3 	bl	8007192 <I2C_IsAcknowledgeFailed>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e034      	b.n	8007040 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fdc:	d028      	beq.n	8007030 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fde:	f7fd fe99 	bl	8004d14 <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d302      	bcc.n	8006ff4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d11d      	bne.n	8007030 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ffe:	2b80      	cmp	r3, #128	@ 0x80
 8007000:	d016      	beq.n	8007030 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2220      	movs	r2, #32
 800700c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800701c:	f043 0220 	orr.w	r2, r3, #32
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e007      	b.n	8007040 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800703a:	2b80      	cmp	r3, #128	@ 0x80
 800703c:	d1c3      	bne.n	8006fc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007054:	e034      	b.n	80070c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f000 f89b 	bl	8007192 <I2C_IsAcknowledgeFailed>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e034      	b.n	80070d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706c:	d028      	beq.n	80070c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800706e:	f7fd fe51 	bl	8004d14 <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	429a      	cmp	r2, r3
 800707c:	d302      	bcc.n	8007084 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d11d      	bne.n	80070c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	f003 0304 	and.w	r3, r3, #4
 800708e:	2b04      	cmp	r3, #4
 8007090:	d016      	beq.n	80070c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2220      	movs	r2, #32
 800709c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ac:	f043 0220 	orr.w	r2, r3, #32
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e007      	b.n	80070d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	f003 0304 	and.w	r3, r3, #4
 80070ca:	2b04      	cmp	r3, #4
 80070cc:	d1c3      	bne.n	8007056 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80070e4:	e049      	b.n	800717a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	f003 0310 	and.w	r3, r3, #16
 80070f0:	2b10      	cmp	r3, #16
 80070f2:	d119      	bne.n	8007128 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f06f 0210 	mvn.w	r2, #16
 80070fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2220      	movs	r2, #32
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e030      	b.n	800718a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007128:	f7fd fdf4 	bl	8004d14 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	429a      	cmp	r2, r3
 8007136:	d302      	bcc.n	800713e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d11d      	bne.n	800717a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007148:	2b40      	cmp	r3, #64	@ 0x40
 800714a:	d016      	beq.n	800717a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2220      	movs	r2, #32
 8007156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007166:	f043 0220 	orr.w	r2, r3, #32
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e007      	b.n	800718a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007184:	2b40      	cmp	r3, #64	@ 0x40
 8007186:	d1ae      	bne.n	80070e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007192:	b480      	push	{r7}
 8007194:	b083      	sub	sp, #12
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071a8:	d11b      	bne.n	80071e2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80071b2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2220      	movs	r2, #32
 80071be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ce:	f043 0204 	orr.w	r2, r3, #4
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e000      	b.n	80071e4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bc80      	pop	{r7}
 80071ec:	4770      	bx	lr
	...

080071f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b086      	sub	sp, #24
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d101      	bne.n	8007202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e272      	b.n	80076e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	2b00      	cmp	r3, #0
 800720c:	f000 8087 	beq.w	800731e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007210:	4b92      	ldr	r3, [pc, #584]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	f003 030c 	and.w	r3, r3, #12
 8007218:	2b04      	cmp	r3, #4
 800721a:	d00c      	beq.n	8007236 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800721c:	4b8f      	ldr	r3, [pc, #572]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f003 030c 	and.w	r3, r3, #12
 8007224:	2b08      	cmp	r3, #8
 8007226:	d112      	bne.n	800724e <HAL_RCC_OscConfig+0x5e>
 8007228:	4b8c      	ldr	r3, [pc, #560]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007234:	d10b      	bne.n	800724e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007236:	4b89      	ldr	r3, [pc, #548]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d06c      	beq.n	800731c <HAL_RCC_OscConfig+0x12c>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d168      	bne.n	800731c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e24c      	b.n	80076e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007256:	d106      	bne.n	8007266 <HAL_RCC_OscConfig+0x76>
 8007258:	4b80      	ldr	r3, [pc, #512]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a7f      	ldr	r2, [pc, #508]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 800725e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007262:	6013      	str	r3, [r2, #0]
 8007264:	e02e      	b.n	80072c4 <HAL_RCC_OscConfig+0xd4>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10c      	bne.n	8007288 <HAL_RCC_OscConfig+0x98>
 800726e:	4b7b      	ldr	r3, [pc, #492]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a7a      	ldr	r2, [pc, #488]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 8007274:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007278:	6013      	str	r3, [r2, #0]
 800727a:	4b78      	ldr	r3, [pc, #480]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a77      	ldr	r2, [pc, #476]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 8007280:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007284:	6013      	str	r3, [r2, #0]
 8007286:	e01d      	b.n	80072c4 <HAL_RCC_OscConfig+0xd4>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007290:	d10c      	bne.n	80072ac <HAL_RCC_OscConfig+0xbc>
 8007292:	4b72      	ldr	r3, [pc, #456]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a71      	ldr	r2, [pc, #452]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 8007298:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800729c:	6013      	str	r3, [r2, #0]
 800729e:	4b6f      	ldr	r3, [pc, #444]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a6e      	ldr	r2, [pc, #440]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 80072a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072a8:	6013      	str	r3, [r2, #0]
 80072aa:	e00b      	b.n	80072c4 <HAL_RCC_OscConfig+0xd4>
 80072ac:	4b6b      	ldr	r3, [pc, #428]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a6a      	ldr	r2, [pc, #424]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 80072b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072b6:	6013      	str	r3, [r2, #0]
 80072b8:	4b68      	ldr	r3, [pc, #416]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a67      	ldr	r2, [pc, #412]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 80072be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80072c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d013      	beq.n	80072f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072cc:	f7fd fd22 	bl	8004d14 <HAL_GetTick>
 80072d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072d2:	e008      	b.n	80072e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072d4:	f7fd fd1e 	bl	8004d14 <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	2b64      	cmp	r3, #100	@ 0x64
 80072e0:	d901      	bls.n	80072e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e200      	b.n	80076e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072e6:	4b5d      	ldr	r3, [pc, #372]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d0f0      	beq.n	80072d4 <HAL_RCC_OscConfig+0xe4>
 80072f2:	e014      	b.n	800731e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072f4:	f7fd fd0e 	bl	8004d14 <HAL_GetTick>
 80072f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072fa:	e008      	b.n	800730e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072fc:	f7fd fd0a 	bl	8004d14 <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	2b64      	cmp	r3, #100	@ 0x64
 8007308:	d901      	bls.n	800730e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e1ec      	b.n	80076e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800730e:	4b53      	ldr	r3, [pc, #332]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1f0      	bne.n	80072fc <HAL_RCC_OscConfig+0x10c>
 800731a:	e000      	b.n	800731e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800731c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d063      	beq.n	80073f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800732a:	4b4c      	ldr	r3, [pc, #304]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	f003 030c 	and.w	r3, r3, #12
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00b      	beq.n	800734e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007336:	4b49      	ldr	r3, [pc, #292]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f003 030c 	and.w	r3, r3, #12
 800733e:	2b08      	cmp	r3, #8
 8007340:	d11c      	bne.n	800737c <HAL_RCC_OscConfig+0x18c>
 8007342:	4b46      	ldr	r3, [pc, #280]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800734a:	2b00      	cmp	r3, #0
 800734c:	d116      	bne.n	800737c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800734e:	4b43      	ldr	r3, [pc, #268]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d005      	beq.n	8007366 <HAL_RCC_OscConfig+0x176>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d001      	beq.n	8007366 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e1c0      	b.n	80076e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007366:	4b3d      	ldr	r3, [pc, #244]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	00db      	lsls	r3, r3, #3
 8007374:	4939      	ldr	r1, [pc, #228]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 8007376:	4313      	orrs	r3, r2
 8007378:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800737a:	e03a      	b.n	80073f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d020      	beq.n	80073c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007384:	4b36      	ldr	r3, [pc, #216]	@ (8007460 <HAL_RCC_OscConfig+0x270>)
 8007386:	2201      	movs	r2, #1
 8007388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800738a:	f7fd fcc3 	bl	8004d14 <HAL_GetTick>
 800738e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007390:	e008      	b.n	80073a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007392:	f7fd fcbf 	bl	8004d14 <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	2b02      	cmp	r3, #2
 800739e:	d901      	bls.n	80073a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e1a1      	b.n	80076e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073a4:	4b2d      	ldr	r3, [pc, #180]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0302 	and.w	r3, r3, #2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d0f0      	beq.n	8007392 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073b0:	4b2a      	ldr	r3, [pc, #168]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	00db      	lsls	r3, r3, #3
 80073be:	4927      	ldr	r1, [pc, #156]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 80073c0:	4313      	orrs	r3, r2
 80073c2:	600b      	str	r3, [r1, #0]
 80073c4:	e015      	b.n	80073f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073c6:	4b26      	ldr	r3, [pc, #152]	@ (8007460 <HAL_RCC_OscConfig+0x270>)
 80073c8:	2200      	movs	r2, #0
 80073ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073cc:	f7fd fca2 	bl	8004d14 <HAL_GetTick>
 80073d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073d2:	e008      	b.n	80073e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073d4:	f7fd fc9e 	bl	8004d14 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d901      	bls.n	80073e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e180      	b.n	80076e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073e6:	4b1d      	ldr	r3, [pc, #116]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1f0      	bne.n	80073d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0308 	and.w	r3, r3, #8
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d03a      	beq.n	8007474 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d019      	beq.n	800743a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007406:	4b17      	ldr	r3, [pc, #92]	@ (8007464 <HAL_RCC_OscConfig+0x274>)
 8007408:	2201      	movs	r2, #1
 800740a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800740c:	f7fd fc82 	bl	8004d14 <HAL_GetTick>
 8007410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007412:	e008      	b.n	8007426 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007414:	f7fd fc7e 	bl	8004d14 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	2b02      	cmp	r3, #2
 8007420:	d901      	bls.n	8007426 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e160      	b.n	80076e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007426:	4b0d      	ldr	r3, [pc, #52]	@ (800745c <HAL_RCC_OscConfig+0x26c>)
 8007428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	2b00      	cmp	r3, #0
 8007430:	d0f0      	beq.n	8007414 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007432:	2001      	movs	r0, #1
 8007434:	f000 fafe 	bl	8007a34 <RCC_Delay>
 8007438:	e01c      	b.n	8007474 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800743a:	4b0a      	ldr	r3, [pc, #40]	@ (8007464 <HAL_RCC_OscConfig+0x274>)
 800743c:	2200      	movs	r2, #0
 800743e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007440:	f7fd fc68 	bl	8004d14 <HAL_GetTick>
 8007444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007446:	e00f      	b.n	8007468 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007448:	f7fd fc64 	bl	8004d14 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	2b02      	cmp	r3, #2
 8007454:	d908      	bls.n	8007468 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e146      	b.n	80076e8 <HAL_RCC_OscConfig+0x4f8>
 800745a:	bf00      	nop
 800745c:	40021000 	.word	0x40021000
 8007460:	42420000 	.word	0x42420000
 8007464:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007468:	4b92      	ldr	r3, [pc, #584]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 800746a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1e9      	bne.n	8007448 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0304 	and.w	r3, r3, #4
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 80a6 	beq.w	80075ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007482:	2300      	movs	r3, #0
 8007484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007486:	4b8b      	ldr	r3, [pc, #556]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 8007488:	69db      	ldr	r3, [r3, #28]
 800748a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10d      	bne.n	80074ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007492:	4b88      	ldr	r3, [pc, #544]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 8007494:	69db      	ldr	r3, [r3, #28]
 8007496:	4a87      	ldr	r2, [pc, #540]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 8007498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800749c:	61d3      	str	r3, [r2, #28]
 800749e:	4b85      	ldr	r3, [pc, #532]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074a6:	60bb      	str	r3, [r7, #8]
 80074a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074aa:	2301      	movs	r3, #1
 80074ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074ae:	4b82      	ldr	r3, [pc, #520]	@ (80076b8 <HAL_RCC_OscConfig+0x4c8>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d118      	bne.n	80074ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074ba:	4b7f      	ldr	r3, [pc, #508]	@ (80076b8 <HAL_RCC_OscConfig+0x4c8>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a7e      	ldr	r2, [pc, #504]	@ (80076b8 <HAL_RCC_OscConfig+0x4c8>)
 80074c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074c6:	f7fd fc25 	bl	8004d14 <HAL_GetTick>
 80074ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074cc:	e008      	b.n	80074e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074ce:	f7fd fc21 	bl	8004d14 <HAL_GetTick>
 80074d2:	4602      	mov	r2, r0
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	2b64      	cmp	r3, #100	@ 0x64
 80074da:	d901      	bls.n	80074e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	e103      	b.n	80076e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074e0:	4b75      	ldr	r3, [pc, #468]	@ (80076b8 <HAL_RCC_OscConfig+0x4c8>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d0f0      	beq.n	80074ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d106      	bne.n	8007502 <HAL_RCC_OscConfig+0x312>
 80074f4:	4b6f      	ldr	r3, [pc, #444]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	4a6e      	ldr	r2, [pc, #440]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 80074fa:	f043 0301 	orr.w	r3, r3, #1
 80074fe:	6213      	str	r3, [r2, #32]
 8007500:	e02d      	b.n	800755e <HAL_RCC_OscConfig+0x36e>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10c      	bne.n	8007524 <HAL_RCC_OscConfig+0x334>
 800750a:	4b6a      	ldr	r3, [pc, #424]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	4a69      	ldr	r2, [pc, #420]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 8007510:	f023 0301 	bic.w	r3, r3, #1
 8007514:	6213      	str	r3, [r2, #32]
 8007516:	4b67      	ldr	r3, [pc, #412]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	4a66      	ldr	r2, [pc, #408]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 800751c:	f023 0304 	bic.w	r3, r3, #4
 8007520:	6213      	str	r3, [r2, #32]
 8007522:	e01c      	b.n	800755e <HAL_RCC_OscConfig+0x36e>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	2b05      	cmp	r3, #5
 800752a:	d10c      	bne.n	8007546 <HAL_RCC_OscConfig+0x356>
 800752c:	4b61      	ldr	r3, [pc, #388]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 800752e:	6a1b      	ldr	r3, [r3, #32]
 8007530:	4a60      	ldr	r2, [pc, #384]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 8007532:	f043 0304 	orr.w	r3, r3, #4
 8007536:	6213      	str	r3, [r2, #32]
 8007538:	4b5e      	ldr	r3, [pc, #376]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 800753a:	6a1b      	ldr	r3, [r3, #32]
 800753c:	4a5d      	ldr	r2, [pc, #372]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 800753e:	f043 0301 	orr.w	r3, r3, #1
 8007542:	6213      	str	r3, [r2, #32]
 8007544:	e00b      	b.n	800755e <HAL_RCC_OscConfig+0x36e>
 8007546:	4b5b      	ldr	r3, [pc, #364]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	4a5a      	ldr	r2, [pc, #360]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 800754c:	f023 0301 	bic.w	r3, r3, #1
 8007550:	6213      	str	r3, [r2, #32]
 8007552:	4b58      	ldr	r3, [pc, #352]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	4a57      	ldr	r2, [pc, #348]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 8007558:	f023 0304 	bic.w	r3, r3, #4
 800755c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d015      	beq.n	8007592 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007566:	f7fd fbd5 	bl	8004d14 <HAL_GetTick>
 800756a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800756c:	e00a      	b.n	8007584 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800756e:	f7fd fbd1 	bl	8004d14 <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	f241 3288 	movw	r2, #5000	@ 0x1388
 800757c:	4293      	cmp	r3, r2
 800757e:	d901      	bls.n	8007584 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	e0b1      	b.n	80076e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007584:	4b4b      	ldr	r3, [pc, #300]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 8007586:	6a1b      	ldr	r3, [r3, #32]
 8007588:	f003 0302 	and.w	r3, r3, #2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d0ee      	beq.n	800756e <HAL_RCC_OscConfig+0x37e>
 8007590:	e014      	b.n	80075bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007592:	f7fd fbbf 	bl	8004d14 <HAL_GetTick>
 8007596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007598:	e00a      	b.n	80075b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800759a:	f7fd fbbb 	bl	8004d14 <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d901      	bls.n	80075b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e09b      	b.n	80076e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075b0:	4b40      	ldr	r3, [pc, #256]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 80075b2:	6a1b      	ldr	r3, [r3, #32]
 80075b4:	f003 0302 	and.w	r3, r3, #2
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1ee      	bne.n	800759a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80075bc:	7dfb      	ldrb	r3, [r7, #23]
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d105      	bne.n	80075ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075c2:	4b3c      	ldr	r3, [pc, #240]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 80075c4:	69db      	ldr	r3, [r3, #28]
 80075c6:	4a3b      	ldr	r2, [pc, #236]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 80075c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 8087 	beq.w	80076e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80075d8:	4b36      	ldr	r3, [pc, #216]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f003 030c 	and.w	r3, r3, #12
 80075e0:	2b08      	cmp	r3, #8
 80075e2:	d061      	beq.n	80076a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	69db      	ldr	r3, [r3, #28]
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d146      	bne.n	800767a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075ec:	4b33      	ldr	r3, [pc, #204]	@ (80076bc <HAL_RCC_OscConfig+0x4cc>)
 80075ee:	2200      	movs	r2, #0
 80075f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075f2:	f7fd fb8f 	bl	8004d14 <HAL_GetTick>
 80075f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80075f8:	e008      	b.n	800760c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075fa:	f7fd fb8b 	bl	8004d14 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	2b02      	cmp	r3, #2
 8007606:	d901      	bls.n	800760c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007608:	2303      	movs	r3, #3
 800760a:	e06d      	b.n	80076e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800760c:	4b29      	ldr	r3, [pc, #164]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1f0      	bne.n	80075fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007620:	d108      	bne.n	8007634 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007622:	4b24      	ldr	r3, [pc, #144]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	4921      	ldr	r1, [pc, #132]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 8007630:	4313      	orrs	r3, r2
 8007632:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007634:	4b1f      	ldr	r3, [pc, #124]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a19      	ldr	r1, [r3, #32]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007644:	430b      	orrs	r3, r1
 8007646:	491b      	ldr	r1, [pc, #108]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 8007648:	4313      	orrs	r3, r2
 800764a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800764c:	4b1b      	ldr	r3, [pc, #108]	@ (80076bc <HAL_RCC_OscConfig+0x4cc>)
 800764e:	2201      	movs	r2, #1
 8007650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007652:	f7fd fb5f 	bl	8004d14 <HAL_GetTick>
 8007656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007658:	e008      	b.n	800766c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800765a:	f7fd fb5b 	bl	8004d14 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	2b02      	cmp	r3, #2
 8007666:	d901      	bls.n	800766c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e03d      	b.n	80076e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800766c:	4b11      	ldr	r3, [pc, #68]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d0f0      	beq.n	800765a <HAL_RCC_OscConfig+0x46a>
 8007678:	e035      	b.n	80076e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800767a:	4b10      	ldr	r3, [pc, #64]	@ (80076bc <HAL_RCC_OscConfig+0x4cc>)
 800767c:	2200      	movs	r2, #0
 800767e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007680:	f7fd fb48 	bl	8004d14 <HAL_GetTick>
 8007684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007686:	e008      	b.n	800769a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007688:	f7fd fb44 	bl	8004d14 <HAL_GetTick>
 800768c:	4602      	mov	r2, r0
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	2b02      	cmp	r3, #2
 8007694:	d901      	bls.n	800769a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e026      	b.n	80076e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800769a:	4b06      	ldr	r3, [pc, #24]	@ (80076b4 <HAL_RCC_OscConfig+0x4c4>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1f0      	bne.n	8007688 <HAL_RCC_OscConfig+0x498>
 80076a6:	e01e      	b.n	80076e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	69db      	ldr	r3, [r3, #28]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d107      	bne.n	80076c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e019      	b.n	80076e8 <HAL_RCC_OscConfig+0x4f8>
 80076b4:	40021000 	.word	0x40021000
 80076b8:	40007000 	.word	0x40007000
 80076bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80076c0:	4b0b      	ldr	r3, [pc, #44]	@ (80076f0 <HAL_RCC_OscConfig+0x500>)
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a1b      	ldr	r3, [r3, #32]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d106      	bne.n	80076e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076de:	429a      	cmp	r2, r3
 80076e0:	d001      	beq.n	80076e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e000      	b.n	80076e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3718      	adds	r7, #24
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	40021000 	.word	0x40021000

080076f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e0d0      	b.n	80078aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007708:	4b6a      	ldr	r3, [pc, #424]	@ (80078b4 <HAL_RCC_ClockConfig+0x1c0>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0307 	and.w	r3, r3, #7
 8007710:	683a      	ldr	r2, [r7, #0]
 8007712:	429a      	cmp	r2, r3
 8007714:	d910      	bls.n	8007738 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007716:	4b67      	ldr	r3, [pc, #412]	@ (80078b4 <HAL_RCC_ClockConfig+0x1c0>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f023 0207 	bic.w	r2, r3, #7
 800771e:	4965      	ldr	r1, [pc, #404]	@ (80078b4 <HAL_RCC_ClockConfig+0x1c0>)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	4313      	orrs	r3, r2
 8007724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007726:	4b63      	ldr	r3, [pc, #396]	@ (80078b4 <HAL_RCC_ClockConfig+0x1c0>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 0307 	and.w	r3, r3, #7
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	429a      	cmp	r2, r3
 8007732:	d001      	beq.n	8007738 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e0b8      	b.n	80078aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d020      	beq.n	8007786 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0304 	and.w	r3, r3, #4
 800774c:	2b00      	cmp	r3, #0
 800774e:	d005      	beq.n	800775c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007750:	4b59      	ldr	r3, [pc, #356]	@ (80078b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	4a58      	ldr	r2, [pc, #352]	@ (80078b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007756:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800775a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0308 	and.w	r3, r3, #8
 8007764:	2b00      	cmp	r3, #0
 8007766:	d005      	beq.n	8007774 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007768:	4b53      	ldr	r3, [pc, #332]	@ (80078b8 <HAL_RCC_ClockConfig+0x1c4>)
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	4a52      	ldr	r2, [pc, #328]	@ (80078b8 <HAL_RCC_ClockConfig+0x1c4>)
 800776e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8007772:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007774:	4b50      	ldr	r3, [pc, #320]	@ (80078b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	494d      	ldr	r1, [pc, #308]	@ (80078b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007782:	4313      	orrs	r3, r2
 8007784:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0301 	and.w	r3, r3, #1
 800778e:	2b00      	cmp	r3, #0
 8007790:	d040      	beq.n	8007814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d107      	bne.n	80077aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800779a:	4b47      	ldr	r3, [pc, #284]	@ (80078b8 <HAL_RCC_ClockConfig+0x1c4>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d115      	bne.n	80077d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e07f      	b.n	80078aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d107      	bne.n	80077c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077b2:	4b41      	ldr	r3, [pc, #260]	@ (80078b8 <HAL_RCC_ClockConfig+0x1c4>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d109      	bne.n	80077d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e073      	b.n	80078aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077c2:	4b3d      	ldr	r3, [pc, #244]	@ (80078b8 <HAL_RCC_ClockConfig+0x1c4>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0302 	and.w	r3, r3, #2
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d101      	bne.n	80077d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e06b      	b.n	80078aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80077d2:	4b39      	ldr	r3, [pc, #228]	@ (80078b8 <HAL_RCC_ClockConfig+0x1c4>)
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	f023 0203 	bic.w	r2, r3, #3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	4936      	ldr	r1, [pc, #216]	@ (80078b8 <HAL_RCC_ClockConfig+0x1c4>)
 80077e0:	4313      	orrs	r3, r2
 80077e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80077e4:	f7fd fa96 	bl	8004d14 <HAL_GetTick>
 80077e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077ea:	e00a      	b.n	8007802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077ec:	f7fd fa92 	bl	8004d14 <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d901      	bls.n	8007802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e053      	b.n	80078aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007802:	4b2d      	ldr	r3, [pc, #180]	@ (80078b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f003 020c 	and.w	r2, r3, #12
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	429a      	cmp	r2, r3
 8007812:	d1eb      	bne.n	80077ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007814:	4b27      	ldr	r3, [pc, #156]	@ (80078b4 <HAL_RCC_ClockConfig+0x1c0>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0307 	and.w	r3, r3, #7
 800781c:	683a      	ldr	r2, [r7, #0]
 800781e:	429a      	cmp	r2, r3
 8007820:	d210      	bcs.n	8007844 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007822:	4b24      	ldr	r3, [pc, #144]	@ (80078b4 <HAL_RCC_ClockConfig+0x1c0>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f023 0207 	bic.w	r2, r3, #7
 800782a:	4922      	ldr	r1, [pc, #136]	@ (80078b4 <HAL_RCC_ClockConfig+0x1c0>)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	4313      	orrs	r3, r2
 8007830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007832:	4b20      	ldr	r3, [pc, #128]	@ (80078b4 <HAL_RCC_ClockConfig+0x1c0>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0307 	and.w	r3, r3, #7
 800783a:	683a      	ldr	r2, [r7, #0]
 800783c:	429a      	cmp	r2, r3
 800783e:	d001      	beq.n	8007844 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e032      	b.n	80078aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0304 	and.w	r3, r3, #4
 800784c:	2b00      	cmp	r3, #0
 800784e:	d008      	beq.n	8007862 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007850:	4b19      	ldr	r3, [pc, #100]	@ (80078b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	4916      	ldr	r1, [pc, #88]	@ (80078b8 <HAL_RCC_ClockConfig+0x1c4>)
 800785e:	4313      	orrs	r3, r2
 8007860:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 0308 	and.w	r3, r3, #8
 800786a:	2b00      	cmp	r3, #0
 800786c:	d009      	beq.n	8007882 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800786e:	4b12      	ldr	r3, [pc, #72]	@ (80078b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	00db      	lsls	r3, r3, #3
 800787c:	490e      	ldr	r1, [pc, #56]	@ (80078b8 <HAL_RCC_ClockConfig+0x1c4>)
 800787e:	4313      	orrs	r3, r2
 8007880:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007882:	f000 f821 	bl	80078c8 <HAL_RCC_GetSysClockFreq>
 8007886:	4602      	mov	r2, r0
 8007888:	4b0b      	ldr	r3, [pc, #44]	@ (80078b8 <HAL_RCC_ClockConfig+0x1c4>)
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	091b      	lsrs	r3, r3, #4
 800788e:	f003 030f 	and.w	r3, r3, #15
 8007892:	490a      	ldr	r1, [pc, #40]	@ (80078bc <HAL_RCC_ClockConfig+0x1c8>)
 8007894:	5ccb      	ldrb	r3, [r1, r3]
 8007896:	fa22 f303 	lsr.w	r3, r2, r3
 800789a:	4a09      	ldr	r2, [pc, #36]	@ (80078c0 <HAL_RCC_ClockConfig+0x1cc>)
 800789c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800789e:	4b09      	ldr	r3, [pc, #36]	@ (80078c4 <HAL_RCC_ClockConfig+0x1d0>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7fc fbf6 	bl	8004094 <HAL_InitTick>

  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	40022000 	.word	0x40022000
 80078b8:	40021000 	.word	0x40021000
 80078bc:	08012540 	.word	0x08012540
 80078c0:	20000024 	.word	0x20000024
 80078c4:	20000028 	.word	0x20000028

080078c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80078ce:	2300      	movs	r3, #0
 80078d0:	60fb      	str	r3, [r7, #12]
 80078d2:	2300      	movs	r3, #0
 80078d4:	60bb      	str	r3, [r7, #8]
 80078d6:	2300      	movs	r3, #0
 80078d8:	617b      	str	r3, [r7, #20]
 80078da:	2300      	movs	r3, #0
 80078dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80078de:	2300      	movs	r3, #0
 80078e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80078e2:	4b1e      	ldr	r3, [pc, #120]	@ (800795c <HAL_RCC_GetSysClockFreq+0x94>)
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f003 030c 	and.w	r3, r3, #12
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	d002      	beq.n	80078f8 <HAL_RCC_GetSysClockFreq+0x30>
 80078f2:	2b08      	cmp	r3, #8
 80078f4:	d003      	beq.n	80078fe <HAL_RCC_GetSysClockFreq+0x36>
 80078f6:	e027      	b.n	8007948 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80078f8:	4b19      	ldr	r3, [pc, #100]	@ (8007960 <HAL_RCC_GetSysClockFreq+0x98>)
 80078fa:	613b      	str	r3, [r7, #16]
      break;
 80078fc:	e027      	b.n	800794e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	0c9b      	lsrs	r3, r3, #18
 8007902:	f003 030f 	and.w	r3, r3, #15
 8007906:	4a17      	ldr	r2, [pc, #92]	@ (8007964 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007908:	5cd3      	ldrb	r3, [r2, r3]
 800790a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d010      	beq.n	8007938 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007916:	4b11      	ldr	r3, [pc, #68]	@ (800795c <HAL_RCC_GetSysClockFreq+0x94>)
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	0c5b      	lsrs	r3, r3, #17
 800791c:	f003 0301 	and.w	r3, r3, #1
 8007920:	4a11      	ldr	r2, [pc, #68]	@ (8007968 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007922:	5cd3      	ldrb	r3, [r2, r3]
 8007924:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a0d      	ldr	r2, [pc, #52]	@ (8007960 <HAL_RCC_GetSysClockFreq+0x98>)
 800792a:	fb03 f202 	mul.w	r2, r3, r2
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	fbb2 f3f3 	udiv	r3, r2, r3
 8007934:	617b      	str	r3, [r7, #20]
 8007936:	e004      	b.n	8007942 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a0c      	ldr	r2, [pc, #48]	@ (800796c <HAL_RCC_GetSysClockFreq+0xa4>)
 800793c:	fb02 f303 	mul.w	r3, r2, r3
 8007940:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	613b      	str	r3, [r7, #16]
      break;
 8007946:	e002      	b.n	800794e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007948:	4b05      	ldr	r3, [pc, #20]	@ (8007960 <HAL_RCC_GetSysClockFreq+0x98>)
 800794a:	613b      	str	r3, [r7, #16]
      break;
 800794c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800794e:	693b      	ldr	r3, [r7, #16]
}
 8007950:	4618      	mov	r0, r3
 8007952:	371c      	adds	r7, #28
 8007954:	46bd      	mov	sp, r7
 8007956:	bc80      	pop	{r7}
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	40021000 	.word	0x40021000
 8007960:	007a1200 	.word	0x007a1200
 8007964:	08012558 	.word	0x08012558
 8007968:	08012568 	.word	0x08012568
 800796c:	003d0900 	.word	0x003d0900

08007970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007970:	b480      	push	{r7}
 8007972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007974:	4b02      	ldr	r3, [pc, #8]	@ (8007980 <HAL_RCC_GetHCLKFreq+0x10>)
 8007976:	681b      	ldr	r3, [r3, #0]
}
 8007978:	4618      	mov	r0, r3
 800797a:	46bd      	mov	sp, r7
 800797c:	bc80      	pop	{r7}
 800797e:	4770      	bx	lr
 8007980:	20000024 	.word	0x20000024

08007984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007988:	f7ff fff2 	bl	8007970 <HAL_RCC_GetHCLKFreq>
 800798c:	4602      	mov	r2, r0
 800798e:	4b05      	ldr	r3, [pc, #20]	@ (80079a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	0a1b      	lsrs	r3, r3, #8
 8007994:	f003 0307 	and.w	r3, r3, #7
 8007998:	4903      	ldr	r1, [pc, #12]	@ (80079a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800799a:	5ccb      	ldrb	r3, [r1, r3]
 800799c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	40021000 	.word	0x40021000
 80079a8:	08012550 	.word	0x08012550

080079ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80079b0:	f7ff ffde 	bl	8007970 <HAL_RCC_GetHCLKFreq>
 80079b4:	4602      	mov	r2, r0
 80079b6:	4b05      	ldr	r3, [pc, #20]	@ (80079cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	0adb      	lsrs	r3, r3, #11
 80079bc:	f003 0307 	and.w	r3, r3, #7
 80079c0:	4903      	ldr	r1, [pc, #12]	@ (80079d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079c2:	5ccb      	ldrb	r3, [r1, r3]
 80079c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	40021000 	.word	0x40021000
 80079d0:	08012550 	.word	0x08012550

080079d4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	220f      	movs	r2, #15
 80079e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80079e4:	4b11      	ldr	r3, [pc, #68]	@ (8007a2c <HAL_RCC_GetClockConfig+0x58>)
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f003 0203 	and.w	r2, r3, #3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80079f0:	4b0e      	ldr	r3, [pc, #56]	@ (8007a2c <HAL_RCC_GetClockConfig+0x58>)
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80079fc:	4b0b      	ldr	r3, [pc, #44]	@ (8007a2c <HAL_RCC_GetClockConfig+0x58>)
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007a08:	4b08      	ldr	r3, [pc, #32]	@ (8007a2c <HAL_RCC_GetClockConfig+0x58>)
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	08db      	lsrs	r3, r3, #3
 8007a0e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007a16:	4b06      	ldr	r3, [pc, #24]	@ (8007a30 <HAL_RCC_GetClockConfig+0x5c>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0207 	and.w	r2, r3, #7
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8007a22:	bf00      	nop
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bc80      	pop	{r7}
 8007a2a:	4770      	bx	lr
 8007a2c:	40021000 	.word	0x40021000
 8007a30:	40022000 	.word	0x40022000

08007a34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a68 <RCC_Delay+0x34>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a0a      	ldr	r2, [pc, #40]	@ (8007a6c <RCC_Delay+0x38>)
 8007a42:	fba2 2303 	umull	r2, r3, r2, r3
 8007a46:	0a5b      	lsrs	r3, r3, #9
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	fb02 f303 	mul.w	r3, r2, r3
 8007a4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007a50:	bf00      	nop
  }
  while (Delay --);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	1e5a      	subs	r2, r3, #1
 8007a56:	60fa      	str	r2, [r7, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1f9      	bne.n	8007a50 <RCC_Delay+0x1c>
}
 8007a5c:	bf00      	nop
 8007a5e:	bf00      	nop
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bc80      	pop	{r7}
 8007a66:	4770      	bx	lr
 8007a68:	20000024 	.word	0x20000024
 8007a6c:	10624dd3 	.word	0x10624dd3

08007a70 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d101      	bne.n	8007a82 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e022      	b.n	8007ac8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d105      	bne.n	8007a9a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f7fc fa6b 	bl	8003f70 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2203      	movs	r2, #3
 8007a9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f814 	bl	8007ad0 <HAL_SD_InitCard>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d001      	beq.n	8007ab2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e00a      	b.n	8007ac8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007ad0:	b5b0      	push	{r4, r5, r7, lr}
 8007ad2:	b08e      	sub	sp, #56	@ 0x38
 8007ad4:	af04      	add	r7, sp, #16
 8007ad6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007adc:	2300      	movs	r3, #0
 8007ade:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007aec:	2376      	movs	r3, #118	@ 0x76
 8007aee:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681d      	ldr	r5, [r3, #0]
 8007af4:	466c      	mov	r4, sp
 8007af6:	f107 0314 	add.w	r3, r7, #20
 8007afa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007afe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007b02:	f107 0308 	add.w	r3, r7, #8
 8007b06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b08:	4628      	mov	r0, r5
 8007b0a:	f002 fc9f 	bl	800a44c <SDIO_Init>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8007b14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d001      	beq.n	8007b20 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e04f      	b.n	8007bc0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007b20:	4b29      	ldr	r3, [pc, #164]	@ (8007bc8 <HAL_SD_InitCard+0xf8>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f002 fcd4 	bl	800a4d8 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007b30:	4b25      	ldr	r3, [pc, #148]	@ (8007bc8 <HAL_SD_InitCard+0xf8>)
 8007b32:	2201      	movs	r2, #1
 8007b34:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007b36:	2002      	movs	r0, #2
 8007b38:	f7fd f8f6 	bl	8004d28 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 fe69 	bl	8008814 <SD_PowerON>
 8007b42:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00b      	beq.n	8007b62 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b56:	6a3b      	ldr	r3, [r7, #32]
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e02e      	b.n	8007bc0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fd87 	bl	8008676 <SD_InitCard>
 8007b68:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b6a:	6a3b      	ldr	r3, [r7, #32]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00b      	beq.n	8007b88 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b7c:	6a3b      	ldr	r3, [r7, #32]
 8007b7e:	431a      	orrs	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e01b      	b.n	8007bc0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007b90:	4618      	mov	r0, r3
 8007b92:	f002 fd2d 	bl	800a5f0 <SDMMC_CmdBlockLength>
 8007b96:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00f      	beq.n	8007bbe <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8007bcc <HAL_SD_InitCard+0xfc>)
 8007ba4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007baa:	6a3b      	ldr	r3, [r7, #32]
 8007bac:	431a      	orrs	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e000      	b.n	8007bc0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3728      	adds	r7, #40	@ 0x28
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bdb0      	pop	{r4, r5, r7, pc}
 8007bc8:	423000a0 	.word	0x423000a0
 8007bcc:	004005ff 	.word	0x004005ff

08007bd0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b092      	sub	sp, #72	@ 0x48
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
 8007bdc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007bde:	f7fd f899 	bl	8004d14 <HAL_GetTick>
 8007be2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d107      	bne.n	8007c02 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e1bd      	b.n	8007f7e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	f040 81b0 	bne.w	8007f70 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007c16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	441a      	add	r2, r3
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d907      	bls.n	8007c34 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c28:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e1a4      	b.n	8007f7e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2203      	movs	r2, #3
 8007c38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2200      	movs	r2, #0
 8007c42:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d002      	beq.n	8007c52 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c4e:	025b      	lsls	r3, r3, #9
 8007c50:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007c52:	f04f 33ff 	mov.w	r3, #4294967295
 8007c56:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	025b      	lsls	r3, r3, #9
 8007c5c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007c5e:	2390      	movs	r3, #144	@ 0x90
 8007c60:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007c62:	2302      	movs	r3, #2
 8007c64:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f107 0214 	add.w	r2, r7, #20
 8007c76:	4611      	mov	r1, r2
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f002 fc8e 	bl	800a59a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d90a      	bls.n	8007c9a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2202      	movs	r2, #2
 8007c88:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007c90:	4618      	mov	r0, r3
 8007c92:	f002 fcf1 	bl	800a678 <SDMMC_CmdReadMultiBlock>
 8007c96:	6478      	str	r0, [r7, #68]	@ 0x44
 8007c98:	e009      	b.n	8007cae <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f002 fcc4 	bl	800a634 <SDMMC_CmdReadSingleBlock>
 8007cac:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d012      	beq.n	8007cda <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a7a      	ldr	r2, [pc, #488]	@ (8007ea4 <HAL_SD_ReadBlocks+0x2d4>)
 8007cba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e151      	b.n	8007f7e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007cde:	e061      	b.n	8007da4 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ce6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d03c      	beq.n	8007d68 <HAL_SD_ReadBlocks+0x198>
 8007cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d039      	beq.n	8007d68 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cf8:	e033      	b.n	8007d62 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f002 fbce 	bl	800a4a0 <SDIO_ReadFIFO>
 8007d04:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d08:	b2da      	uxtb	r2, r3
 8007d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d0c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d10:	3301      	adds	r3, #1
 8007d12:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d16:	3b01      	subs	r3, #1
 8007d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d1c:	0a1b      	lsrs	r3, r3, #8
 8007d1e:	b2da      	uxtb	r2, r3
 8007d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d22:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d26:	3301      	adds	r3, #1
 8007d28:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d32:	0c1b      	lsrs	r3, r3, #16
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d38:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007d40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d42:	3b01      	subs	r3, #1
 8007d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d48:	0e1b      	lsrs	r3, r3, #24
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d4e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d52:	3301      	adds	r3, #1
 8007d54:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8007d5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d5e:	3301      	adds	r3, #1
 8007d60:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d64:	2b07      	cmp	r3, #7
 8007d66:	d9c8      	bls.n	8007cfa <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007d68:	f7fc ffd4 	bl	8004d14 <HAL_GetTick>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d902      	bls.n	8007d7e <HAL_SD_ReadBlocks+0x1ae>
 8007d78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d112      	bne.n	8007da4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a48      	ldr	r2, [pc, #288]	@ (8007ea4 <HAL_SD_ReadBlocks+0x2d4>)
 8007d84:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d8a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8007da0:	2303      	movs	r3, #3
 8007da2:	e0ec      	b.n	8007f7e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007daa:	f240 332a 	movw	r3, #810	@ 0x32a
 8007dae:	4013      	ands	r3, r2
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d095      	beq.n	8007ce0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d022      	beq.n	8007e08 <HAL_SD_ReadBlocks+0x238>
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d91f      	bls.n	8007e08 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dcc:	2b03      	cmp	r3, #3
 8007dce:	d01b      	beq.n	8007e08 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f002 fcb5 	bl	800a744 <SDMMC_CmdStopTransfer>
 8007dda:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d012      	beq.n	8007e08 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a2f      	ldr	r2, [pc, #188]	@ (8007ea4 <HAL_SD_ReadBlocks+0x2d4>)
 8007de8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007df0:	431a      	orrs	r2, r3
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e0ba      	b.n	8007f7e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e0e:	f003 0308 	and.w	r3, r3, #8
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d012      	beq.n	8007e3c <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a22      	ldr	r2, [pc, #136]	@ (8007ea4 <HAL_SD_ReadBlocks+0x2d4>)
 8007e1c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e22:	f043 0208 	orr.w	r2, r3, #8
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e0a0      	b.n	8007f7e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e42:	f003 0302 	and.w	r3, r3, #2
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d012      	beq.n	8007e70 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a15      	ldr	r2, [pc, #84]	@ (8007ea4 <HAL_SD_ReadBlocks+0x2d4>)
 8007e50:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e56:	f043 0202 	orr.w	r2, r3, #2
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e086      	b.n	8007f7e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e76:	f003 0320 	and.w	r3, r3, #32
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d063      	beq.n	8007f46 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a08      	ldr	r2, [pc, #32]	@ (8007ea4 <HAL_SD_ReadBlocks+0x2d4>)
 8007e84:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e8a:	f043 0220 	orr.w	r2, r3, #32
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e06c      	b.n	8007f7e <HAL_SD_ReadBlocks+0x3ae>
 8007ea4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4618      	mov	r0, r3
 8007eae:	f002 faf7 	bl	800a4a0 <SDIO_ReadFIFO>
 8007eb2:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8007eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eba:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8007ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eca:	0a1b      	lsrs	r3, r3, #8
 8007ecc:	b2da      	uxtb	r2, r3
 8007ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8007ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eda:	3b01      	subs	r3, #1
 8007edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee0:	0c1b      	lsrs	r3, r3, #16
 8007ee2:	b2da      	uxtb	r2, r3
 8007ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ee6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eea:	3301      	adds	r3, #1
 8007eec:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8007eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef6:	0e1b      	lsrs	r3, r3, #24
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007efc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f00:	3301      	adds	r3, #1
 8007f02:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8007f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f06:	3b01      	subs	r3, #1
 8007f08:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007f0a:	f7fc ff03 	bl	8004d14 <HAL_GetTick>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d902      	bls.n	8007f20 <HAL_SD_ReadBlocks+0x350>
 8007f1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d112      	bne.n	8007f46 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a18      	ldr	r2, [pc, #96]	@ (8007f88 <HAL_SD_ReadBlocks+0x3b8>)
 8007f26:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f2c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e01b      	b.n	8007f7e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d002      	beq.n	8007f5a <HAL_SD_ReadBlocks+0x38a>
 8007f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d1a6      	bne.n	8007ea8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007f62:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	e006      	b.n	8007f7e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f74:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
  }
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3748      	adds	r7, #72	@ 0x48
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	004005ff 	.word	0x004005ff

08007f8c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b092      	sub	sp, #72	@ 0x48
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
 8007f98:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007f9a:	f7fc febb 	bl	8004d14 <HAL_GetTick>
 8007f9e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d107      	bne.n	8007fbe <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fb2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e166      	b.n	800828c <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	f040 8159 	bne.w	800827e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007fd2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	441a      	add	r2, r3
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d907      	bls.n	8007ff0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e14d      	b.n	800828c <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2203      	movs	r2, #3
 8007ff4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008004:	2b01      	cmp	r3, #1
 8008006:	d002      	beq.n	800800e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800800a:	025b      	lsls	r3, r3, #9
 800800c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800800e:	f04f 33ff 	mov.w	r3, #4294967295
 8008012:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	025b      	lsls	r3, r3, #9
 8008018:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800801a:	2390      	movs	r3, #144	@ 0x90
 800801c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800801e:	2300      	movs	r3, #0
 8008020:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008022:	2300      	movs	r3, #0
 8008024:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008026:	2301      	movs	r3, #1
 8008028:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f107 0218 	add.w	r2, r7, #24
 8008032:	4611      	mov	r1, r2
 8008034:	4618      	mov	r0, r3
 8008036:	f002 fab0 	bl	800a59a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d90a      	bls.n	8008056 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2220      	movs	r2, #32
 8008044:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800804c:	4618      	mov	r0, r3
 800804e:	f002 fb57 	bl	800a700 <SDMMC_CmdWriteMultiBlock>
 8008052:	6478      	str	r0, [r7, #68]	@ 0x44
 8008054:	e009      	b.n	800806a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2210      	movs	r2, #16
 800805a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008062:	4618      	mov	r0, r3
 8008064:	f002 fb2a 	bl	800a6bc <SDMMC_CmdWriteSingleBlock>
 8008068:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800806a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800806c:	2b00      	cmp	r3, #0
 800806e:	d012      	beq.n	8008096 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a87      	ldr	r2, [pc, #540]	@ (8008294 <HAL_SD_WriteBlocks+0x308>)
 8008076:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800807c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800807e:	431a      	orrs	r2, r3
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e0fa      	b.n	800828c <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800809a:	e065      	b.n	8008168 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d040      	beq.n	800812c <HAL_SD_WriteBlocks+0x1a0>
 80080aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d03d      	beq.n	800812c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80080b0:	2300      	movs	r3, #0
 80080b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80080b4:	e037      	b.n	8008126 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80080b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80080bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080be:	3301      	adds	r3, #1
 80080c0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80080c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080c4:	3b01      	subs	r3, #1
 80080c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80080c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	021a      	lsls	r2, r3, #8
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80080d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080d6:	3301      	adds	r3, #1
 80080d8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80080da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080dc:	3b01      	subs	r3, #1
 80080de:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80080e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	041a      	lsls	r2, r3, #16
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80080ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080ee:	3301      	adds	r3, #1
 80080f0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80080f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080f4:	3b01      	subs	r3, #1
 80080f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80080f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	061a      	lsls	r2, r3, #24
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	4313      	orrs	r3, r2
 8008102:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008106:	3301      	adds	r3, #1
 8008108:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800810a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800810c:	3b01      	subs	r3, #1
 800810e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f107 0214 	add.w	r2, r7, #20
 8008118:	4611      	mov	r1, r2
 800811a:	4618      	mov	r0, r3
 800811c:	f002 f9cc 	bl	800a4b8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008120:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008122:	3301      	adds	r3, #1
 8008124:	643b      	str	r3, [r7, #64]	@ 0x40
 8008126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008128:	2b07      	cmp	r3, #7
 800812a:	d9c4      	bls.n	80080b6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800812c:	f7fc fdf2 	bl	8004d14 <HAL_GetTick>
 8008130:	4602      	mov	r2, r0
 8008132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008138:	429a      	cmp	r2, r3
 800813a:	d902      	bls.n	8008142 <HAL_SD_WriteBlocks+0x1b6>
 800813c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800813e:	2b00      	cmp	r3, #0
 8008140:	d112      	bne.n	8008168 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a53      	ldr	r2, [pc, #332]	@ (8008294 <HAL_SD_WriteBlocks+0x308>)
 8008148:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800814e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008150:	431a      	orrs	r2, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e091      	b.n	800828c <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800816e:	f240 331a 	movw	r3, #794	@ 0x31a
 8008172:	4013      	ands	r3, r2
 8008174:	2b00      	cmp	r3, #0
 8008176:	d091      	beq.n	800809c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800817e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008182:	2b00      	cmp	r3, #0
 8008184:	d022      	beq.n	80081cc <HAL_SD_WriteBlocks+0x240>
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d91f      	bls.n	80081cc <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008190:	2b03      	cmp	r3, #3
 8008192:	d01b      	beq.n	80081cc <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4618      	mov	r0, r3
 800819a:	f002 fad3 	bl	800a744 <SDMMC_CmdStopTransfer>
 800819e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80081a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d012      	beq.n	80081cc <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a3a      	ldr	r2, [pc, #232]	@ (8008294 <HAL_SD_WriteBlocks+0x308>)
 80081ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081b4:	431a      	orrs	r2, r3
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2200      	movs	r2, #0
 80081c6:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e05f      	b.n	800828c <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081d2:	f003 0308 	and.w	r3, r3, #8
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d012      	beq.n	8008200 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a2d      	ldr	r2, [pc, #180]	@ (8008294 <HAL_SD_WriteBlocks+0x308>)
 80081e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081e6:	f043 0208 	orr.w	r2, r3, #8
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e045      	b.n	800828c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008206:	f003 0302 	and.w	r3, r3, #2
 800820a:	2b00      	cmp	r3, #0
 800820c:	d012      	beq.n	8008234 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a20      	ldr	r2, [pc, #128]	@ (8008294 <HAL_SD_WriteBlocks+0x308>)
 8008214:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800821a:	f043 0202 	orr.w	r2, r3, #2
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	e02b      	b.n	800828c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800823a:	f003 0310 	and.w	r3, r3, #16
 800823e:	2b00      	cmp	r3, #0
 8008240:	d012      	beq.n	8008268 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a13      	ldr	r2, [pc, #76]	@ (8008294 <HAL_SD_WriteBlocks+0x308>)
 8008248:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800824e:	f043 0210 	orr.w	r2, r3, #16
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e011      	b.n	800828c <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008270:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2201      	movs	r2, #1
 8008276:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	e006      	b.n	800828c <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008282:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
  }
}
 800828c:	4618      	mov	r0, r3
 800828e:	3748      	adds	r7, #72	@ 0x48
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	004005ff 	.word	0x004005ff

08008298 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082a6:	0f9b      	lsrs	r3, r3, #30
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082b2:	0e9b      	lsrs	r3, r3, #26
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	f003 030f 	and.w	r3, r3, #15
 80082ba:	b2da      	uxtb	r2, r3
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082c4:	0e1b      	lsrs	r3, r3, #24
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	f003 0303 	and.w	r3, r3, #3
 80082cc:	b2da      	uxtb	r2, r3
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082d6:	0c1b      	lsrs	r3, r3, #16
 80082d8:	b2da      	uxtb	r2, r3
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082e2:	0a1b      	lsrs	r3, r3, #8
 80082e4:	b2da      	uxtb	r2, r3
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082f8:	0d1b      	lsrs	r3, r3, #20
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008304:	0c1b      	lsrs	r3, r3, #16
 8008306:	b2db      	uxtb	r3, r3
 8008308:	f003 030f 	and.w	r3, r3, #15
 800830c:	b2da      	uxtb	r2, r3
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008316:	0bdb      	lsrs	r3, r3, #15
 8008318:	b2db      	uxtb	r3, r3
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	b2da      	uxtb	r2, r3
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008328:	0b9b      	lsrs	r3, r3, #14
 800832a:	b2db      	uxtb	r3, r3
 800832c:	f003 0301 	and.w	r3, r3, #1
 8008330:	b2da      	uxtb	r2, r3
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800833a:	0b5b      	lsrs	r3, r3, #13
 800833c:	b2db      	uxtb	r3, r3
 800833e:	f003 0301 	and.w	r3, r3, #1
 8008342:	b2da      	uxtb	r2, r3
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800834c:	0b1b      	lsrs	r3, r3, #12
 800834e:	b2db      	uxtb	r3, r3
 8008350:	f003 0301 	and.w	r3, r3, #1
 8008354:	b2da      	uxtb	r2, r3
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	2200      	movs	r2, #0
 800835e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008364:	2b00      	cmp	r3, #0
 8008366:	d163      	bne.n	8008430 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800836c:	009a      	lsls	r2, r3, #2
 800836e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008372:	4013      	ands	r3, r2
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008378:	0f92      	lsrs	r2, r2, #30
 800837a:	431a      	orrs	r2, r3
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008384:	0edb      	lsrs	r3, r3, #27
 8008386:	b2db      	uxtb	r3, r3
 8008388:	f003 0307 	and.w	r3, r3, #7
 800838c:	b2da      	uxtb	r2, r3
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008396:	0e1b      	lsrs	r3, r3, #24
 8008398:	b2db      	uxtb	r3, r3
 800839a:	f003 0307 	and.w	r3, r3, #7
 800839e:	b2da      	uxtb	r2, r3
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083a8:	0d5b      	lsrs	r3, r3, #21
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	f003 0307 	and.w	r3, r3, #7
 80083b0:	b2da      	uxtb	r2, r3
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083ba:	0c9b      	lsrs	r3, r3, #18
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	f003 0307 	and.w	r3, r3, #7
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083cc:	0bdb      	lsrs	r3, r3, #15
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	f003 0307 	and.w	r3, r3, #7
 80083d4:	b2da      	uxtb	r2, r3
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	1c5a      	adds	r2, r3, #1
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	7e1b      	ldrb	r3, [r3, #24]
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	f003 0307 	and.w	r3, r3, #7
 80083ee:	3302      	adds	r3, #2
 80083f0:	2201      	movs	r2, #1
 80083f2:	fa02 f303 	lsl.w	r3, r2, r3
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80083fa:	fb03 f202 	mul.w	r2, r3, r2
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	7a1b      	ldrb	r3, [r3, #8]
 8008406:	b2db      	uxtb	r3, r3
 8008408:	f003 030f 	and.w	r3, r3, #15
 800840c:	2201      	movs	r2, #1
 800840e:	409a      	lsls	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800841c:	0a52      	lsrs	r2, r2, #9
 800841e:	fb03 f202 	mul.w	r2, r3, r2
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800842c:	661a      	str	r2, [r3, #96]	@ 0x60
 800842e:	e031      	b.n	8008494 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008434:	2b01      	cmp	r3, #1
 8008436:	d11d      	bne.n	8008474 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800843c:	041b      	lsls	r3, r3, #16
 800843e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008446:	0c1b      	lsrs	r3, r3, #16
 8008448:	431a      	orrs	r2, r3
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	3301      	adds	r3, #1
 8008454:	029a      	lsls	r2, r3, #10
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008468:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	661a      	str	r2, [r3, #96]	@ 0x60
 8008472:	e00f      	b.n	8008494 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a58      	ldr	r2, [pc, #352]	@ (80085dc <HAL_SD_GetCardCSD+0x344>)
 800847a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008480:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e09d      	b.n	80085d0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008498:	0b9b      	lsrs	r3, r3, #14
 800849a:	b2db      	uxtb	r3, r3
 800849c:	f003 0301 	and.w	r3, r3, #1
 80084a0:	b2da      	uxtb	r2, r3
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084aa:	09db      	lsrs	r3, r3, #7
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084b2:	b2da      	uxtb	r2, r3
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084c2:	b2da      	uxtb	r2, r3
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084cc:	0fdb      	lsrs	r3, r3, #31
 80084ce:	b2da      	uxtb	r2, r3
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084d8:	0f5b      	lsrs	r3, r3, #29
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	f003 0303 	and.w	r3, r3, #3
 80084e0:	b2da      	uxtb	r2, r3
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084ea:	0e9b      	lsrs	r3, r3, #26
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	f003 0307 	and.w	r3, r3, #7
 80084f2:	b2da      	uxtb	r2, r3
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084fc:	0d9b      	lsrs	r3, r3, #22
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	f003 030f 	and.w	r3, r3, #15
 8008504:	b2da      	uxtb	r2, r3
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800850e:	0d5b      	lsrs	r3, r3, #21
 8008510:	b2db      	uxtb	r3, r3
 8008512:	f003 0301 	and.w	r3, r3, #1
 8008516:	b2da      	uxtb	r2, r3
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800852a:	0c1b      	lsrs	r3, r3, #16
 800852c:	b2db      	uxtb	r3, r3
 800852e:	f003 0301 	and.w	r3, r3, #1
 8008532:	b2da      	uxtb	r2, r3
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800853e:	0bdb      	lsrs	r3, r3, #15
 8008540:	b2db      	uxtb	r3, r3
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	b2da      	uxtb	r2, r3
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008552:	0b9b      	lsrs	r3, r3, #14
 8008554:	b2db      	uxtb	r3, r3
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	b2da      	uxtb	r2, r3
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008566:	0b5b      	lsrs	r3, r3, #13
 8008568:	b2db      	uxtb	r3, r3
 800856a:	f003 0301 	and.w	r3, r3, #1
 800856e:	b2da      	uxtb	r2, r3
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800857a:	0b1b      	lsrs	r3, r3, #12
 800857c:	b2db      	uxtb	r3, r3
 800857e:	f003 0301 	and.w	r3, r3, #1
 8008582:	b2da      	uxtb	r2, r3
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800858e:	0a9b      	lsrs	r3, r3, #10
 8008590:	b2db      	uxtb	r3, r3
 8008592:	f003 0303 	and.w	r3, r3, #3
 8008596:	b2da      	uxtb	r2, r3
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085a2:	0a1b      	lsrs	r3, r3, #8
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	f003 0303 	and.w	r3, r3, #3
 80085aa:	b2da      	uxtb	r2, r3
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085b6:	085b      	lsrs	r3, r3, #1
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085be:	b2da      	uxtb	r2, r3
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bc80      	pop	{r7}
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	004005ff 	.word	0x004005ff

080085e0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	bc80      	pop	{r7}
 8008634:	4770      	bx	lr

08008636 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b086      	sub	sp, #24
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800863e:	2300      	movs	r3, #0
 8008640:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008642:	f107 030c 	add.w	r3, r7, #12
 8008646:	4619      	mov	r1, r3
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f971 	bl	8008930 <SD_SendStatus>
 800864e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d005      	beq.n	8008662 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	431a      	orrs	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	0a5b      	lsrs	r3, r3, #9
 8008666:	f003 030f 	and.w	r3, r3, #15
 800866a:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800866c:	693b      	ldr	r3, [r7, #16]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3718      	adds	r7, #24
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008676:	b5b0      	push	{r4, r5, r7, lr}
 8008678:	b094      	sub	sp, #80	@ 0x50
 800867a:	af04      	add	r7, sp, #16
 800867c:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800867e:	2301      	movs	r3, #1
 8008680:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4618      	mov	r0, r3
 8008688:	f001 ff33 	bl	800a4f2 <SDIO_GetPowerState>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d102      	bne.n	8008698 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008692:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008696:	e0b8      	b.n	800880a <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800869c:	2b03      	cmp	r3, #3
 800869e:	d02f      	beq.n	8008700 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4618      	mov	r0, r3
 80086a6:	f002 f914 	bl	800a8d2 <SDMMC_CmdSendCID>
 80086aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80086ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d001      	beq.n	80086b6 <SD_InitCard+0x40>
    {
      return errorstate;
 80086b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086b4:	e0a9      	b.n	800880a <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2100      	movs	r1, #0
 80086bc:	4618      	mov	r0, r3
 80086be:	f001 ff5a 	bl	800a576 <SDIO_GetResponse>
 80086c2:	4602      	mov	r2, r0
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2104      	movs	r1, #4
 80086ce:	4618      	mov	r0, r3
 80086d0:	f001 ff51 	bl	800a576 <SDIO_GetResponse>
 80086d4:	4602      	mov	r2, r0
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2108      	movs	r1, #8
 80086e0:	4618      	mov	r0, r3
 80086e2:	f001 ff48 	bl	800a576 <SDIO_GetResponse>
 80086e6:	4602      	mov	r2, r0
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	210c      	movs	r1, #12
 80086f2:	4618      	mov	r0, r3
 80086f4:	f001 ff3f 	bl	800a576 <SDIO_GetResponse>
 80086f8:	4602      	mov	r2, r0
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008704:	2b03      	cmp	r3, #3
 8008706:	d00d      	beq.n	8008724 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f107 020e 	add.w	r2, r7, #14
 8008710:	4611      	mov	r1, r2
 8008712:	4618      	mov	r0, r3
 8008714:	f002 f91a 	bl	800a94c <SDMMC_CmdSetRelAdd>
 8008718:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800871a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800871c:	2b00      	cmp	r3, #0
 800871e:	d001      	beq.n	8008724 <SD_InitCard+0xae>
    {
      return errorstate;
 8008720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008722:	e072      	b.n	800880a <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008728:	2b03      	cmp	r3, #3
 800872a:	d036      	beq.n	800879a <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800872c:	89fb      	ldrh	r3, [r7, #14]
 800872e:	461a      	mov	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800873c:	041b      	lsls	r3, r3, #16
 800873e:	4619      	mov	r1, r3
 8008740:	4610      	mov	r0, r2
 8008742:	f002 f8e4 	bl	800a90e <SDMMC_CmdSendCSD>
 8008746:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <SD_InitCard+0xdc>
    {
      return errorstate;
 800874e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008750:	e05b      	b.n	800880a <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2100      	movs	r1, #0
 8008758:	4618      	mov	r0, r3
 800875a:	f001 ff0c 	bl	800a576 <SDIO_GetResponse>
 800875e:	4602      	mov	r2, r0
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2104      	movs	r1, #4
 800876a:	4618      	mov	r0, r3
 800876c:	f001 ff03 	bl	800a576 <SDIO_GetResponse>
 8008770:	4602      	mov	r2, r0
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2108      	movs	r1, #8
 800877c:	4618      	mov	r0, r3
 800877e:	f001 fefa 	bl	800a576 <SDIO_GetResponse>
 8008782:	4602      	mov	r2, r0
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	210c      	movs	r1, #12
 800878e:	4618      	mov	r0, r3
 8008790:	f001 fef1 	bl	800a576 <SDIO_GetResponse>
 8008794:	4602      	mov	r2, r0
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2104      	movs	r1, #4
 80087a0:	4618      	mov	r0, r3
 80087a2:	f001 fee8 	bl	800a576 <SDIO_GetResponse>
 80087a6:	4603      	mov	r3, r0
 80087a8:	0d1a      	lsrs	r2, r3, #20
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80087ae:	f107 0310 	add.w	r3, r7, #16
 80087b2:	4619      	mov	r1, r3
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f7ff fd6f 	bl	8008298 <HAL_SD_GetCardCSD>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d002      	beq.n	80087c6 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087c0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80087c4:	e021      	b.n	800880a <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6819      	ldr	r1, [r3, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087ce:	041b      	lsls	r3, r3, #16
 80087d0:	2200      	movs	r2, #0
 80087d2:	461c      	mov	r4, r3
 80087d4:	4615      	mov	r5, r2
 80087d6:	4622      	mov	r2, r4
 80087d8:	462b      	mov	r3, r5
 80087da:	4608      	mov	r0, r1
 80087dc:	f001 ffd4 	bl	800a788 <SDMMC_CmdSelDesel>
 80087e0:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80087e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d001      	beq.n	80087ec <SD_InitCard+0x176>
  {
    return errorstate;
 80087e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087ea:	e00e      	b.n	800880a <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681d      	ldr	r5, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	466c      	mov	r4, sp
 80087f4:	f103 0210 	add.w	r2, r3, #16
 80087f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80087fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80087fe:	3304      	adds	r3, #4
 8008800:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008802:	4628      	mov	r0, r5
 8008804:	f001 fe22 	bl	800a44c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3740      	adds	r7, #64	@ 0x40
 800880e:	46bd      	mov	sp, r7
 8008810:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008814 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800881c:	2300      	movs	r3, #0
 800881e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008820:	2300      	movs	r3, #0
 8008822:	617b      	str	r3, [r7, #20]
 8008824:	2300      	movs	r3, #0
 8008826:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4618      	mov	r0, r3
 800882e:	f001 ffce 	bl	800a7ce <SDMMC_CmdGoIdleState>
 8008832:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <SD_PowerON+0x2a>
  {
    return errorstate;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	e072      	b.n	8008924 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4618      	mov	r0, r3
 8008844:	f001 ffe1 	bl	800a80a <SDMMC_CmdOperCond>
 8008848:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00d      	beq.n	800886c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4618      	mov	r0, r3
 800885c:	f001 ffb7 	bl	800a7ce <SDMMC_CmdGoIdleState>
 8008860:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d004      	beq.n	8008872 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	e05b      	b.n	8008924 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008876:	2b01      	cmp	r3, #1
 8008878:	d137      	bne.n	80088ea <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2100      	movs	r1, #0
 8008880:	4618      	mov	r0, r3
 8008882:	f001 ffe1 	bl	800a848 <SDMMC_CmdAppCommand>
 8008886:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d02d      	beq.n	80088ea <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800888e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008892:	e047      	b.n	8008924 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2100      	movs	r1, #0
 800889a:	4618      	mov	r0, r3
 800889c:	f001 ffd4 	bl	800a848 <SDMMC_CmdAppCommand>
 80088a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d001      	beq.n	80088ac <SD_PowerON+0x98>
    {
      return errorstate;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	e03b      	b.n	8008924 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	491e      	ldr	r1, [pc, #120]	@ (800892c <SD_PowerON+0x118>)
 80088b2:	4618      	mov	r0, r3
 80088b4:	f001 ffea 	bl	800a88c <SDMMC_CmdAppOperCommand>
 80088b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d002      	beq.n	80088c6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088c0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80088c4:	e02e      	b.n	8008924 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2100      	movs	r1, #0
 80088cc:	4618      	mov	r0, r3
 80088ce:	f001 fe52 	bl	800a576 <SDIO_GetResponse>
 80088d2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	0fdb      	lsrs	r3, r3, #31
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d101      	bne.n	80088e0 <SD_PowerON+0xcc>
 80088dc:	2301      	movs	r3, #1
 80088de:	e000      	b.n	80088e2 <SD_PowerON+0xce>
 80088e0:	2300      	movs	r3, #0
 80088e2:	613b      	str	r3, [r7, #16]

    count++;
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	3301      	adds	r3, #1
 80088e8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d802      	bhi.n	80088fa <SD_PowerON+0xe6>
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d0cc      	beq.n	8008894 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008900:	4293      	cmp	r3, r2
 8008902:	d902      	bls.n	800890a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008904:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008908:	e00c      	b.n	8008924 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008910:	2b00      	cmp	r3, #0
 8008912:	d003      	beq.n	800891c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	645a      	str	r2, [r3, #68]	@ 0x44
 800891a:	e002      	b.n	8008922 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3718      	adds	r7, #24
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	c1100000 	.word	0xc1100000

08008930 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d102      	bne.n	8008946 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008940:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008944:	e018      	b.n	8008978 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800894e:	041b      	lsls	r3, r3, #16
 8008950:	4619      	mov	r1, r3
 8008952:	4610      	mov	r0, r2
 8008954:	f002 f81b 	bl	800a98e <SDMMC_CmdSendStatus>
 8008958:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d001      	beq.n	8008964 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	e009      	b.n	8008978 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2100      	movs	r1, #0
 800896a:	4618      	mov	r0, r3
 800896c:	f001 fe03 	bl	800a576 <SDIO_GetResponse>
 8008970:	4602      	mov	r2, r0
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d101      	bne.n	8008992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	e041      	b.n	8008a16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b00      	cmp	r3, #0
 800899c:	d106      	bne.n	80089ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7fb fd44 	bl	8004434 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2202      	movs	r2, #2
 80089b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	3304      	adds	r3, #4
 80089bc:	4619      	mov	r1, r3
 80089be:	4610      	mov	r0, r2
 80089c0:	f000 fb9c 	bl	80090fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
	...

08008a20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d001      	beq.n	8008a38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	e044      	b.n	8008ac2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68da      	ldr	r2, [r3, #12]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f042 0201 	orr.w	r2, r2, #1
 8008a4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a1d      	ldr	r2, [pc, #116]	@ (8008acc <HAL_TIM_Base_Start_IT+0xac>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d018      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x6c>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8008ad0 <HAL_TIM_Base_Start_IT+0xb0>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d013      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x6c>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a6c:	d00e      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x6c>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a18      	ldr	r2, [pc, #96]	@ (8008ad4 <HAL_TIM_Base_Start_IT+0xb4>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d009      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x6c>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a16      	ldr	r2, [pc, #88]	@ (8008ad8 <HAL_TIM_Base_Start_IT+0xb8>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d004      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0x6c>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a15      	ldr	r2, [pc, #84]	@ (8008adc <HAL_TIM_Base_Start_IT+0xbc>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d111      	bne.n	8008ab0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f003 0307 	and.w	r3, r3, #7
 8008a96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2b06      	cmp	r3, #6
 8008a9c:	d010      	beq.n	8008ac0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f042 0201 	orr.w	r2, r2, #1
 8008aac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aae:	e007      	b.n	8008ac0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f042 0201 	orr.w	r2, r2, #1
 8008abe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3714      	adds	r7, #20
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bc80      	pop	{r7}
 8008aca:	4770      	bx	lr
 8008acc:	40012c00 	.word	0x40012c00
 8008ad0:	40013400 	.word	0x40013400
 8008ad4:	40000400 	.word	0x40000400
 8008ad8:	40000800 	.word	0x40000800
 8008adc:	40000c00 	.word	0x40000c00

08008ae0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d101      	bne.n	8008af2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e041      	b.n	8008b76 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d106      	bne.n	8008b0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f839 	bl	8008b7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2202      	movs	r2, #2
 8008b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	3304      	adds	r3, #4
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	4610      	mov	r0, r2
 8008b20:	f000 faec 	bl	80090fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3708      	adds	r7, #8
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b083      	sub	sp, #12
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008b86:	bf00      	nop
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bc80      	pop	{r7}
 8008b8e:	4770      	bx	lr

08008b90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	f003 0302 	and.w	r3, r3, #2
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d122      	bne.n	8008bec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	f003 0302 	and.w	r3, r3, #2
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d11b      	bne.n	8008bec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f06f 0202 	mvn.w	r2, #2
 8008bbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	f003 0303 	and.w	r3, r3, #3
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d003      	beq.n	8008bda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 fa76 	bl	80090c4 <HAL_TIM_IC_CaptureCallback>
 8008bd8:	e005      	b.n	8008be6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fa69 	bl	80090b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 fa78 	bl	80090d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	f003 0304 	and.w	r3, r3, #4
 8008bf6:	2b04      	cmp	r3, #4
 8008bf8:	d122      	bne.n	8008c40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	f003 0304 	and.w	r3, r3, #4
 8008c04:	2b04      	cmp	r3, #4
 8008c06:	d11b      	bne.n	8008c40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f06f 0204 	mvn.w	r2, #4
 8008c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2202      	movs	r2, #2
 8008c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	699b      	ldr	r3, [r3, #24]
 8008c1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d003      	beq.n	8008c2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 fa4c 	bl	80090c4 <HAL_TIM_IC_CaptureCallback>
 8008c2c:	e005      	b.n	8008c3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fa3f 	bl	80090b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 fa4e 	bl	80090d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	f003 0308 	and.w	r3, r3, #8
 8008c4a:	2b08      	cmp	r3, #8
 8008c4c:	d122      	bne.n	8008c94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	f003 0308 	and.w	r3, r3, #8
 8008c58:	2b08      	cmp	r3, #8
 8008c5a:	d11b      	bne.n	8008c94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f06f 0208 	mvn.w	r2, #8
 8008c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2204      	movs	r2, #4
 8008c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	69db      	ldr	r3, [r3, #28]
 8008c72:	f003 0303 	and.w	r3, r3, #3
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d003      	beq.n	8008c82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fa22 	bl	80090c4 <HAL_TIM_IC_CaptureCallback>
 8008c80:	e005      	b.n	8008c8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fa15 	bl	80090b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fa24 	bl	80090d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	f003 0310 	and.w	r3, r3, #16
 8008c9e:	2b10      	cmp	r3, #16
 8008ca0:	d122      	bne.n	8008ce8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	f003 0310 	and.w	r3, r3, #16
 8008cac:	2b10      	cmp	r3, #16
 8008cae:	d11b      	bne.n	8008ce8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f06f 0210 	mvn.w	r2, #16
 8008cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2208      	movs	r2, #8
 8008cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	69db      	ldr	r3, [r3, #28]
 8008cc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d003      	beq.n	8008cd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f9f8 	bl	80090c4 <HAL_TIM_IC_CaptureCallback>
 8008cd4:	e005      	b.n	8008ce2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f9eb 	bl	80090b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f9fa 	bl	80090d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	f003 0301 	and.w	r3, r3, #1
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d10e      	bne.n	8008d14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	f003 0301 	and.w	r3, r3, #1
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d107      	bne.n	8008d14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f06f 0201 	mvn.w	r2, #1
 8008d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f7fb f8e6 	bl	8003ee0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d1e:	2b80      	cmp	r3, #128	@ 0x80
 8008d20:	d10e      	bne.n	8008d40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d2c:	2b80      	cmp	r3, #128	@ 0x80
 8008d2e:	d107      	bne.n	8008d40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fd0f 	bl	800975e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d4a:	2b40      	cmp	r3, #64	@ 0x40
 8008d4c:	d10e      	bne.n	8008d6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d58:	2b40      	cmp	r3, #64	@ 0x40
 8008d5a:	d107      	bne.n	8008d6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f9be 	bl	80090e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	691b      	ldr	r3, [r3, #16]
 8008d72:	f003 0320 	and.w	r3, r3, #32
 8008d76:	2b20      	cmp	r3, #32
 8008d78:	d10e      	bne.n	8008d98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	f003 0320 	and.w	r3, r3, #32
 8008d84:	2b20      	cmp	r3, #32
 8008d86:	d107      	bne.n	8008d98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f06f 0220 	mvn.w	r2, #32
 8008d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fcda 	bl	800974c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d98:	bf00      	nop
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008dac:	2300      	movs	r3, #0
 8008dae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d101      	bne.n	8008dbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008dba:	2302      	movs	r3, #2
 8008dbc:	e0ae      	b.n	8008f1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b0c      	cmp	r3, #12
 8008dca:	f200 809f 	bhi.w	8008f0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008dce:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd4:	08008e09 	.word	0x08008e09
 8008dd8:	08008f0d 	.word	0x08008f0d
 8008ddc:	08008f0d 	.word	0x08008f0d
 8008de0:	08008f0d 	.word	0x08008f0d
 8008de4:	08008e49 	.word	0x08008e49
 8008de8:	08008f0d 	.word	0x08008f0d
 8008dec:	08008f0d 	.word	0x08008f0d
 8008df0:	08008f0d 	.word	0x08008f0d
 8008df4:	08008e8b 	.word	0x08008e8b
 8008df8:	08008f0d 	.word	0x08008f0d
 8008dfc:	08008f0d 	.word	0x08008f0d
 8008e00:	08008f0d 	.word	0x08008f0d
 8008e04:	08008ecb 	.word	0x08008ecb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	68b9      	ldr	r1, [r7, #8]
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f000 f9ee 	bl	80091f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	699a      	ldr	r2, [r3, #24]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f042 0208 	orr.w	r2, r2, #8
 8008e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	699a      	ldr	r2, [r3, #24]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f022 0204 	bic.w	r2, r2, #4
 8008e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	6999      	ldr	r1, [r3, #24]
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	691a      	ldr	r2, [r3, #16]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	430a      	orrs	r2, r1
 8008e44:	619a      	str	r2, [r3, #24]
      break;
 8008e46:	e064      	b.n	8008f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68b9      	ldr	r1, [r7, #8]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 fa3e 	bl	80092d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	699a      	ldr	r2, [r3, #24]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	699a      	ldr	r2, [r3, #24]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6999      	ldr	r1, [r3, #24]
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	021a      	lsls	r2, r3, #8
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	430a      	orrs	r2, r1
 8008e86:	619a      	str	r2, [r3, #24]
      break;
 8008e88:	e043      	b.n	8008f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68b9      	ldr	r1, [r7, #8]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 fa91 	bl	80093b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	69da      	ldr	r2, [r3, #28]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f042 0208 	orr.w	r2, r2, #8
 8008ea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	69da      	ldr	r2, [r3, #28]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f022 0204 	bic.w	r2, r2, #4
 8008eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	69d9      	ldr	r1, [r3, #28]
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	691a      	ldr	r2, [r3, #16]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	430a      	orrs	r2, r1
 8008ec6:	61da      	str	r2, [r3, #28]
      break;
 8008ec8:	e023      	b.n	8008f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68b9      	ldr	r1, [r7, #8]
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f000 fae5 	bl	80094a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	69da      	ldr	r2, [r3, #28]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ee4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	69da      	ldr	r2, [r3, #28]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	69d9      	ldr	r1, [r3, #28]
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	021a      	lsls	r2, r3, #8
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	430a      	orrs	r2, r1
 8008f08:	61da      	str	r2, [r3, #28]
      break;
 8008f0a:	e002      	b.n	8008f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8008f10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3718      	adds	r7, #24
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d101      	bne.n	8008f40 <HAL_TIM_ConfigClockSource+0x1c>
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	e0b4      	b.n	80090aa <HAL_TIM_ConfigClockSource+0x186>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2202      	movs	r2, #2
 8008f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f78:	d03e      	beq.n	8008ff8 <HAL_TIM_ConfigClockSource+0xd4>
 8008f7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f7e:	f200 8087 	bhi.w	8009090 <HAL_TIM_ConfigClockSource+0x16c>
 8008f82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f86:	f000 8086 	beq.w	8009096 <HAL_TIM_ConfigClockSource+0x172>
 8008f8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f8e:	d87f      	bhi.n	8009090 <HAL_TIM_ConfigClockSource+0x16c>
 8008f90:	2b70      	cmp	r3, #112	@ 0x70
 8008f92:	d01a      	beq.n	8008fca <HAL_TIM_ConfigClockSource+0xa6>
 8008f94:	2b70      	cmp	r3, #112	@ 0x70
 8008f96:	d87b      	bhi.n	8009090 <HAL_TIM_ConfigClockSource+0x16c>
 8008f98:	2b60      	cmp	r3, #96	@ 0x60
 8008f9a:	d050      	beq.n	800903e <HAL_TIM_ConfigClockSource+0x11a>
 8008f9c:	2b60      	cmp	r3, #96	@ 0x60
 8008f9e:	d877      	bhi.n	8009090 <HAL_TIM_ConfigClockSource+0x16c>
 8008fa0:	2b50      	cmp	r3, #80	@ 0x50
 8008fa2:	d03c      	beq.n	800901e <HAL_TIM_ConfigClockSource+0xfa>
 8008fa4:	2b50      	cmp	r3, #80	@ 0x50
 8008fa6:	d873      	bhi.n	8009090 <HAL_TIM_ConfigClockSource+0x16c>
 8008fa8:	2b40      	cmp	r3, #64	@ 0x40
 8008faa:	d058      	beq.n	800905e <HAL_TIM_ConfigClockSource+0x13a>
 8008fac:	2b40      	cmp	r3, #64	@ 0x40
 8008fae:	d86f      	bhi.n	8009090 <HAL_TIM_ConfigClockSource+0x16c>
 8008fb0:	2b30      	cmp	r3, #48	@ 0x30
 8008fb2:	d064      	beq.n	800907e <HAL_TIM_ConfigClockSource+0x15a>
 8008fb4:	2b30      	cmp	r3, #48	@ 0x30
 8008fb6:	d86b      	bhi.n	8009090 <HAL_TIM_ConfigClockSource+0x16c>
 8008fb8:	2b20      	cmp	r3, #32
 8008fba:	d060      	beq.n	800907e <HAL_TIM_ConfigClockSource+0x15a>
 8008fbc:	2b20      	cmp	r3, #32
 8008fbe:	d867      	bhi.n	8009090 <HAL_TIM_ConfigClockSource+0x16c>
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d05c      	beq.n	800907e <HAL_TIM_ConfigClockSource+0x15a>
 8008fc4:	2b10      	cmp	r3, #16
 8008fc6:	d05a      	beq.n	800907e <HAL_TIM_ConfigClockSource+0x15a>
 8008fc8:	e062      	b.n	8009090 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008fda:	f000 fb2c 	bl	8009636 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008fec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	609a      	str	r2, [r3, #8]
      break;
 8008ff6:	e04f      	b.n	8009098 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009008:	f000 fb15 	bl	8009636 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	689a      	ldr	r2, [r3, #8]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800901a:	609a      	str	r2, [r3, #8]
      break;
 800901c:	e03c      	b.n	8009098 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800902a:	461a      	mov	r2, r3
 800902c:	f000 fa8c 	bl	8009548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2150      	movs	r1, #80	@ 0x50
 8009036:	4618      	mov	r0, r3
 8009038:	f000 fae3 	bl	8009602 <TIM_ITRx_SetConfig>
      break;
 800903c:	e02c      	b.n	8009098 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800904a:	461a      	mov	r2, r3
 800904c:	f000 faaa 	bl	80095a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2160      	movs	r1, #96	@ 0x60
 8009056:	4618      	mov	r0, r3
 8009058:	f000 fad3 	bl	8009602 <TIM_ITRx_SetConfig>
      break;
 800905c:	e01c      	b.n	8009098 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800906a:	461a      	mov	r2, r3
 800906c:	f000 fa6c 	bl	8009548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2140      	movs	r1, #64	@ 0x40
 8009076:	4618      	mov	r0, r3
 8009078:	f000 fac3 	bl	8009602 <TIM_ITRx_SetConfig>
      break;
 800907c:	e00c      	b.n	8009098 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4619      	mov	r1, r3
 8009088:	4610      	mov	r0, r2
 800908a:	f000 faba 	bl	8009602 <TIM_ITRx_SetConfig>
      break;
 800908e:	e003      	b.n	8009098 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	73fb      	strb	r3, [r7, #15]
      break;
 8009094:	e000      	b.n	8009098 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009096:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80090a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b083      	sub	sp, #12
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80090ba:	bf00      	nop
 80090bc:	370c      	adds	r7, #12
 80090be:	46bd      	mov	sp, r7
 80090c0:	bc80      	pop	{r7}
 80090c2:	4770      	bx	lr

080090c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80090cc:	bf00      	nop
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bc80      	pop	{r7}
 80090d4:	4770      	bx	lr

080090d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80090d6:	b480      	push	{r7}
 80090d8:	b083      	sub	sp, #12
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80090de:	bf00      	nop
 80090e0:	370c      	adds	r7, #12
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bc80      	pop	{r7}
 80090e6:	4770      	bx	lr

080090e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80090f0:	bf00      	nop
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bc80      	pop	{r7}
 80090f8:	4770      	bx	lr
	...

080090fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a33      	ldr	r2, [pc, #204]	@ (80091dc <TIM_Base_SetConfig+0xe0>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d013      	beq.n	800913c <TIM_Base_SetConfig+0x40>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a32      	ldr	r2, [pc, #200]	@ (80091e0 <TIM_Base_SetConfig+0xe4>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d00f      	beq.n	800913c <TIM_Base_SetConfig+0x40>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009122:	d00b      	beq.n	800913c <TIM_Base_SetConfig+0x40>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a2f      	ldr	r2, [pc, #188]	@ (80091e4 <TIM_Base_SetConfig+0xe8>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d007      	beq.n	800913c <TIM_Base_SetConfig+0x40>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a2e      	ldr	r2, [pc, #184]	@ (80091e8 <TIM_Base_SetConfig+0xec>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d003      	beq.n	800913c <TIM_Base_SetConfig+0x40>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a2d      	ldr	r2, [pc, #180]	@ (80091ec <TIM_Base_SetConfig+0xf0>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d108      	bne.n	800914e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	4313      	orrs	r3, r2
 800914c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a22      	ldr	r2, [pc, #136]	@ (80091dc <TIM_Base_SetConfig+0xe0>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d013      	beq.n	800917e <TIM_Base_SetConfig+0x82>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a21      	ldr	r2, [pc, #132]	@ (80091e0 <TIM_Base_SetConfig+0xe4>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d00f      	beq.n	800917e <TIM_Base_SetConfig+0x82>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009164:	d00b      	beq.n	800917e <TIM_Base_SetConfig+0x82>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4a1e      	ldr	r2, [pc, #120]	@ (80091e4 <TIM_Base_SetConfig+0xe8>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d007      	beq.n	800917e <TIM_Base_SetConfig+0x82>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a1d      	ldr	r2, [pc, #116]	@ (80091e8 <TIM_Base_SetConfig+0xec>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d003      	beq.n	800917e <TIM_Base_SetConfig+0x82>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a1c      	ldr	r2, [pc, #112]	@ (80091ec <TIM_Base_SetConfig+0xf0>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d108      	bne.n	8009190 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	4313      	orrs	r3, r2
 800918e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	4313      	orrs	r3, r2
 800919c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	68fa      	ldr	r2, [r7, #12]
 80091a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	689a      	ldr	r2, [r3, #8]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a09      	ldr	r2, [pc, #36]	@ (80091dc <TIM_Base_SetConfig+0xe0>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d003      	beq.n	80091c4 <TIM_Base_SetConfig+0xc8>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a08      	ldr	r2, [pc, #32]	@ (80091e0 <TIM_Base_SetConfig+0xe4>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d103      	bne.n	80091cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	691a      	ldr	r2, [r3, #16]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	615a      	str	r2, [r3, #20]
}
 80091d2:	bf00      	nop
 80091d4:	3714      	adds	r7, #20
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bc80      	pop	{r7}
 80091da:	4770      	bx	lr
 80091dc:	40012c00 	.word	0x40012c00
 80091e0:	40013400 	.word	0x40013400
 80091e4:	40000400 	.word	0x40000400
 80091e8:	40000800 	.word	0x40000800
 80091ec:	40000c00 	.word	0x40000c00

080091f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b087      	sub	sp, #28
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a1b      	ldr	r3, [r3, #32]
 80091fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6a1b      	ldr	r3, [r3, #32]
 8009204:	f023 0201 	bic.w	r2, r3, #1
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800921e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f023 0303 	bic.w	r3, r3, #3
 8009226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	4313      	orrs	r3, r2
 8009230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	f023 0302 	bic.w	r3, r3, #2
 8009238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	697a      	ldr	r2, [r7, #20]
 8009240:	4313      	orrs	r3, r2
 8009242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a20      	ldr	r2, [pc, #128]	@ (80092c8 <TIM_OC1_SetConfig+0xd8>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d003      	beq.n	8009254 <TIM_OC1_SetConfig+0x64>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4a1f      	ldr	r2, [pc, #124]	@ (80092cc <TIM_OC1_SetConfig+0xdc>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d10c      	bne.n	800926e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	f023 0308 	bic.w	r3, r3, #8
 800925a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	4313      	orrs	r3, r2
 8009264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	f023 0304 	bic.w	r3, r3, #4
 800926c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a15      	ldr	r2, [pc, #84]	@ (80092c8 <TIM_OC1_SetConfig+0xd8>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d003      	beq.n	800927e <TIM_OC1_SetConfig+0x8e>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a14      	ldr	r2, [pc, #80]	@ (80092cc <TIM_OC1_SetConfig+0xdc>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d111      	bne.n	80092a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800928c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	695b      	ldr	r3, [r3, #20]
 8009292:	693a      	ldr	r2, [r7, #16]
 8009294:	4313      	orrs	r3, r2
 8009296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	699b      	ldr	r3, [r3, #24]
 800929c:	693a      	ldr	r2, [r7, #16]
 800929e:	4313      	orrs	r3, r2
 80092a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	693a      	ldr	r2, [r7, #16]
 80092a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	685a      	ldr	r2, [r3, #4]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	697a      	ldr	r2, [r7, #20]
 80092ba:	621a      	str	r2, [r3, #32]
}
 80092bc:	bf00      	nop
 80092be:	371c      	adds	r7, #28
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bc80      	pop	{r7}
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	40012c00 	.word	0x40012c00
 80092cc:	40013400 	.word	0x40013400

080092d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b087      	sub	sp, #28
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a1b      	ldr	r3, [r3, #32]
 80092e4:	f023 0210 	bic.w	r2, r3, #16
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	021b      	lsls	r3, r3, #8
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	4313      	orrs	r3, r2
 8009312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	f023 0320 	bic.w	r3, r3, #32
 800931a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	011b      	lsls	r3, r3, #4
 8009322:	697a      	ldr	r2, [r7, #20]
 8009324:	4313      	orrs	r3, r2
 8009326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4a21      	ldr	r2, [pc, #132]	@ (80093b0 <TIM_OC2_SetConfig+0xe0>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d003      	beq.n	8009338 <TIM_OC2_SetConfig+0x68>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a20      	ldr	r2, [pc, #128]	@ (80093b4 <TIM_OC2_SetConfig+0xe4>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d10d      	bne.n	8009354 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800933e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	011b      	lsls	r3, r3, #4
 8009346:	697a      	ldr	r2, [r7, #20]
 8009348:	4313      	orrs	r3, r2
 800934a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009352:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	4a16      	ldr	r2, [pc, #88]	@ (80093b0 <TIM_OC2_SetConfig+0xe0>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d003      	beq.n	8009364 <TIM_OC2_SetConfig+0x94>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a15      	ldr	r2, [pc, #84]	@ (80093b4 <TIM_OC2_SetConfig+0xe4>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d113      	bne.n	800938c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800936a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009372:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	695b      	ldr	r3, [r3, #20]
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	693a      	ldr	r2, [r7, #16]
 800937c:	4313      	orrs	r3, r2
 800937e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	699b      	ldr	r3, [r3, #24]
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	693a      	ldr	r2, [r7, #16]
 8009388:	4313      	orrs	r3, r2
 800938a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	693a      	ldr	r2, [r7, #16]
 8009390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	697a      	ldr	r2, [r7, #20]
 80093a4:	621a      	str	r2, [r3, #32]
}
 80093a6:	bf00      	nop
 80093a8:	371c      	adds	r7, #28
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bc80      	pop	{r7}
 80093ae:	4770      	bx	lr
 80093b0:	40012c00 	.word	0x40012c00
 80093b4:	40013400 	.word	0x40013400

080093b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b087      	sub	sp, #28
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6a1b      	ldr	r3, [r3, #32]
 80093c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6a1b      	ldr	r3, [r3, #32]
 80093cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	69db      	ldr	r3, [r3, #28]
 80093de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f023 0303 	bic.w	r3, r3, #3
 80093ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009400:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	021b      	lsls	r3, r3, #8
 8009408:	697a      	ldr	r2, [r7, #20]
 800940a:	4313      	orrs	r3, r2
 800940c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4a21      	ldr	r2, [pc, #132]	@ (8009498 <TIM_OC3_SetConfig+0xe0>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d003      	beq.n	800941e <TIM_OC3_SetConfig+0x66>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4a20      	ldr	r2, [pc, #128]	@ (800949c <TIM_OC3_SetConfig+0xe4>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d10d      	bne.n	800943a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009424:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	021b      	lsls	r3, r3, #8
 800942c:	697a      	ldr	r2, [r7, #20]
 800942e:	4313      	orrs	r3, r2
 8009430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a16      	ldr	r2, [pc, #88]	@ (8009498 <TIM_OC3_SetConfig+0xe0>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d003      	beq.n	800944a <TIM_OC3_SetConfig+0x92>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a15      	ldr	r2, [pc, #84]	@ (800949c <TIM_OC3_SetConfig+0xe4>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d113      	bne.n	8009472 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	695b      	ldr	r3, [r3, #20]
 800945e:	011b      	lsls	r3, r3, #4
 8009460:	693a      	ldr	r2, [r7, #16]
 8009462:	4313      	orrs	r3, r2
 8009464:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	699b      	ldr	r3, [r3, #24]
 800946a:	011b      	lsls	r3, r3, #4
 800946c:	693a      	ldr	r2, [r7, #16]
 800946e:	4313      	orrs	r3, r2
 8009470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	685a      	ldr	r2, [r3, #4]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	697a      	ldr	r2, [r7, #20]
 800948a:	621a      	str	r2, [r3, #32]
}
 800948c:	bf00      	nop
 800948e:	371c      	adds	r7, #28
 8009490:	46bd      	mov	sp, r7
 8009492:	bc80      	pop	{r7}
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	40012c00 	.word	0x40012c00
 800949c:	40013400 	.word	0x40013400

080094a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b087      	sub	sp, #28
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6a1b      	ldr	r3, [r3, #32]
 80094ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6a1b      	ldr	r3, [r3, #32]
 80094b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	69db      	ldr	r3, [r3, #28]
 80094c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	021b      	lsls	r3, r3, #8
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	4313      	orrs	r3, r2
 80094e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80094ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	031b      	lsls	r3, r3, #12
 80094f2:	693a      	ldr	r2, [r7, #16]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a11      	ldr	r2, [pc, #68]	@ (8009540 <TIM_OC4_SetConfig+0xa0>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d003      	beq.n	8009508 <TIM_OC4_SetConfig+0x68>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a10      	ldr	r2, [pc, #64]	@ (8009544 <TIM_OC4_SetConfig+0xa4>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d109      	bne.n	800951c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800950e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	695b      	ldr	r3, [r3, #20]
 8009514:	019b      	lsls	r3, r3, #6
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	4313      	orrs	r3, r2
 800951a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	697a      	ldr	r2, [r7, #20]
 8009520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	685a      	ldr	r2, [r3, #4]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	693a      	ldr	r2, [r7, #16]
 8009534:	621a      	str	r2, [r3, #32]
}
 8009536:	bf00      	nop
 8009538:	371c      	adds	r7, #28
 800953a:	46bd      	mov	sp, r7
 800953c:	bc80      	pop	{r7}
 800953e:	4770      	bx	lr
 8009540:	40012c00 	.word	0x40012c00
 8009544:	40013400 	.word	0x40013400

08009548 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009548:	b480      	push	{r7}
 800954a:	b087      	sub	sp, #28
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6a1b      	ldr	r3, [r3, #32]
 8009558:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6a1b      	ldr	r3, [r3, #32]
 800955e:	f023 0201 	bic.w	r2, r3, #1
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	011b      	lsls	r3, r3, #4
 8009578:	693a      	ldr	r2, [r7, #16]
 800957a:	4313      	orrs	r3, r2
 800957c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	f023 030a 	bic.w	r3, r3, #10
 8009584:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009586:	697a      	ldr	r2, [r7, #20]
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	4313      	orrs	r3, r2
 800958c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	693a      	ldr	r2, [r7, #16]
 8009592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	697a      	ldr	r2, [r7, #20]
 8009598:	621a      	str	r2, [r3, #32]
}
 800959a:	bf00      	nop
 800959c:	371c      	adds	r7, #28
 800959e:	46bd      	mov	sp, r7
 80095a0:	bc80      	pop	{r7}
 80095a2:	4770      	bx	lr

080095a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b087      	sub	sp, #28
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6a1b      	ldr	r3, [r3, #32]
 80095b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6a1b      	ldr	r3, [r3, #32]
 80095ba:	f023 0210 	bic.w	r2, r3, #16
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80095ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	031b      	lsls	r3, r3, #12
 80095d4:	693a      	ldr	r2, [r7, #16]
 80095d6:	4313      	orrs	r3, r2
 80095d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80095e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	011b      	lsls	r3, r3, #4
 80095e6:	697a      	ldr	r2, [r7, #20]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	693a      	ldr	r2, [r7, #16]
 80095f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	697a      	ldr	r2, [r7, #20]
 80095f6:	621a      	str	r2, [r3, #32]
}
 80095f8:	bf00      	nop
 80095fa:	371c      	adds	r7, #28
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bc80      	pop	{r7}
 8009600:	4770      	bx	lr

08009602 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009602:	b480      	push	{r7}
 8009604:	b085      	sub	sp, #20
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
 800960a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009618:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800961a:	683a      	ldr	r2, [r7, #0]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	4313      	orrs	r3, r2
 8009620:	f043 0307 	orr.w	r3, r3, #7
 8009624:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	609a      	str	r2, [r3, #8]
}
 800962c:	bf00      	nop
 800962e:	3714      	adds	r7, #20
 8009630:	46bd      	mov	sp, r7
 8009632:	bc80      	pop	{r7}
 8009634:	4770      	bx	lr

08009636 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009636:	b480      	push	{r7}
 8009638:	b087      	sub	sp, #28
 800963a:	af00      	add	r7, sp, #0
 800963c:	60f8      	str	r0, [r7, #12]
 800963e:	60b9      	str	r1, [r7, #8]
 8009640:	607a      	str	r2, [r7, #4]
 8009642:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009650:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	021a      	lsls	r2, r3, #8
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	431a      	orrs	r2, r3
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	4313      	orrs	r3, r2
 800965e:	697a      	ldr	r2, [r7, #20]
 8009660:	4313      	orrs	r3, r2
 8009662:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	609a      	str	r2, [r3, #8]
}
 800966a:	bf00      	nop
 800966c:	371c      	adds	r7, #28
 800966e:	46bd      	mov	sp, r7
 8009670:	bc80      	pop	{r7}
 8009672:	4770      	bx	lr

08009674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009674:	b480      	push	{r7}
 8009676:	b085      	sub	sp, #20
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009684:	2b01      	cmp	r3, #1
 8009686:	d101      	bne.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009688:	2302      	movs	r3, #2
 800968a:	e050      	b.n	800972e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2202      	movs	r2, #2
 8009698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a1b      	ldr	r2, [pc, #108]	@ (8009738 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d018      	beq.n	8009702 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a19      	ldr	r2, [pc, #100]	@ (800973c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d013      	beq.n	8009702 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096e2:	d00e      	beq.n	8009702 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a15      	ldr	r2, [pc, #84]	@ (8009740 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d009      	beq.n	8009702 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a14      	ldr	r2, [pc, #80]	@ (8009744 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d004      	beq.n	8009702 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a12      	ldr	r2, [pc, #72]	@ (8009748 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d10c      	bne.n	800971c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009708:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	68ba      	ldr	r2, [r7, #8]
 8009710:	4313      	orrs	r3, r2
 8009712:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3714      	adds	r7, #20
 8009732:	46bd      	mov	sp, r7
 8009734:	bc80      	pop	{r7}
 8009736:	4770      	bx	lr
 8009738:	40012c00 	.word	0x40012c00
 800973c:	40013400 	.word	0x40013400
 8009740:	40000400 	.word	0x40000400
 8009744:	40000800 	.word	0x40000800
 8009748:	40000c00 	.word	0x40000c00

0800974c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009754:	bf00      	nop
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	bc80      	pop	{r7}
 800975c:	4770      	bx	lr

0800975e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800975e:	b480      	push	{r7}
 8009760:	b083      	sub	sp, #12
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009766:	bf00      	nop
 8009768:	370c      	adds	r7, #12
 800976a:	46bd      	mov	sp, r7
 800976c:	bc80      	pop	{r7}
 800976e:	4770      	bx	lr

08009770 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d101      	bne.n	8009782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e042      	b.n	8009808 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009788:	b2db      	uxtb	r3, r3
 800978a:	2b00      	cmp	r3, #0
 800978c:	d106      	bne.n	800979c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f7fa ff58 	bl	800464c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2224      	movs	r2, #36	@ 0x24
 80097a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68da      	ldr	r2, [r3, #12]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80097b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fdbb 	bl	800a330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	691a      	ldr	r2, [r3, #16]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80097c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	695a      	ldr	r2, [r3, #20]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80097d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68da      	ldr	r2, [r3, #12]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80097e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2220      	movs	r2, #32
 80097f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2220      	movs	r2, #32
 80097fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b08a      	sub	sp, #40	@ 0x28
 8009814:	af02      	add	r7, sp, #8
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	603b      	str	r3, [r7, #0]
 800981c:	4613      	mov	r3, r2
 800981e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009820:	2300      	movs	r3, #0
 8009822:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800982a:	b2db      	uxtb	r3, r3
 800982c:	2b20      	cmp	r3, #32
 800982e:	d16d      	bne.n	800990c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d002      	beq.n	800983c <HAL_UART_Transmit+0x2c>
 8009836:	88fb      	ldrh	r3, [r7, #6]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d101      	bne.n	8009840 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	e066      	b.n	800990e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2200      	movs	r2, #0
 8009844:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2221      	movs	r2, #33	@ 0x21
 800984a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800984e:	f7fb fa61 	bl	8004d14 <HAL_GetTick>
 8009852:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	88fa      	ldrh	r2, [r7, #6]
 8009858:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	88fa      	ldrh	r2, [r7, #6]
 800985e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009868:	d108      	bne.n	800987c <HAL_UART_Transmit+0x6c>
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	691b      	ldr	r3, [r3, #16]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d104      	bne.n	800987c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009872:	2300      	movs	r3, #0
 8009874:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	61bb      	str	r3, [r7, #24]
 800987a:	e003      	b.n	8009884 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009880:	2300      	movs	r3, #0
 8009882:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009884:	e02a      	b.n	80098dc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	2200      	movs	r2, #0
 800988e:	2180      	movs	r1, #128	@ 0x80
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f000 fb0b 	bl	8009eac <UART_WaitOnFlagUntilTimeout>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d001      	beq.n	80098a0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800989c:	2303      	movs	r3, #3
 800989e:	e036      	b.n	800990e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d10b      	bne.n	80098be <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	881b      	ldrh	r3, [r3, #0]
 80098aa:	461a      	mov	r2, r3
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	3302      	adds	r3, #2
 80098ba:	61bb      	str	r3, [r7, #24]
 80098bc:	e007      	b.n	80098ce <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	781a      	ldrb	r2, [r3, #0]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	3301      	adds	r3, #1
 80098cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	3b01      	subs	r3, #1
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d1cf      	bne.n	8009886 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	2200      	movs	r2, #0
 80098ee:	2140      	movs	r1, #64	@ 0x40
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f000 fadb 	bl	8009eac <UART_WaitOnFlagUntilTimeout>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d001      	beq.n	8009900 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80098fc:	2303      	movs	r3, #3
 80098fe:	e006      	b.n	800990e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2220      	movs	r2, #32
 8009904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009908:	2300      	movs	r3, #0
 800990a:	e000      	b.n	800990e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800990c:	2302      	movs	r3, #2
  }
}
 800990e:	4618      	mov	r0, r3
 8009910:	3720      	adds	r7, #32
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b084      	sub	sp, #16
 800991a:	af00      	add	r7, sp, #0
 800991c:	60f8      	str	r0, [r7, #12]
 800991e:	60b9      	str	r1, [r7, #8]
 8009920:	4613      	mov	r3, r2
 8009922:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800992a:	b2db      	uxtb	r3, r3
 800992c:	2b20      	cmp	r3, #32
 800992e:	d112      	bne.n	8009956 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d002      	beq.n	800993c <HAL_UART_Receive_IT+0x26>
 8009936:	88fb      	ldrh	r3, [r7, #6]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d101      	bne.n	8009940 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800993c:	2301      	movs	r3, #1
 800993e:	e00b      	b.n	8009958 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2200      	movs	r2, #0
 8009944:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009946:	88fb      	ldrh	r3, [r7, #6]
 8009948:	461a      	mov	r2, r3
 800994a:	68b9      	ldr	r1, [r7, #8]
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f000 fb1b 	bl	8009f88 <UART_Start_Receive_IT>
 8009952:	4603      	mov	r3, r0
 8009954:	e000      	b.n	8009958 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009956:	2302      	movs	r3, #2
  }
}
 8009958:	4618      	mov	r0, r3
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b0ba      	sub	sp, #232	@ 0xe8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	695b      	ldr	r3, [r3, #20]
 8009982:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009986:	2300      	movs	r3, #0
 8009988:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800998c:	2300      	movs	r3, #0
 800998e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009996:	f003 030f 	and.w	r3, r3, #15
 800999a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800999e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d10f      	bne.n	80099c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80099a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099aa:	f003 0320 	and.w	r3, r3, #32
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d009      	beq.n	80099c6 <HAL_UART_IRQHandler+0x66>
 80099b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099b6:	f003 0320 	and.w	r3, r3, #32
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d003      	beq.n	80099c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fbf8 	bl	800a1b4 <UART_Receive_IT>
      return;
 80099c4:	e25b      	b.n	8009e7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80099c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f000 80de 	beq.w	8009b8c <HAL_UART_IRQHandler+0x22c>
 80099d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099d4:	f003 0301 	and.w	r3, r3, #1
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d106      	bne.n	80099ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80099dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	f000 80d1 	beq.w	8009b8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80099ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099ee:	f003 0301 	and.w	r3, r3, #1
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00b      	beq.n	8009a0e <HAL_UART_IRQHandler+0xae>
 80099f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d005      	beq.n	8009a0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a06:	f043 0201 	orr.w	r2, r3, #1
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a12:	f003 0304 	and.w	r3, r3, #4
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00b      	beq.n	8009a32 <HAL_UART_IRQHandler+0xd2>
 8009a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a1e:	f003 0301 	and.w	r3, r3, #1
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d005      	beq.n	8009a32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a2a:	f043 0202 	orr.w	r2, r3, #2
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a36:	f003 0302 	and.w	r3, r3, #2
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d00b      	beq.n	8009a56 <HAL_UART_IRQHandler+0xf6>
 8009a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a42:	f003 0301 	and.w	r3, r3, #1
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d005      	beq.n	8009a56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a4e:	f043 0204 	orr.w	r2, r3, #4
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a5a:	f003 0308 	and.w	r3, r3, #8
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d011      	beq.n	8009a86 <HAL_UART_IRQHandler+0x126>
 8009a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a66:	f003 0320 	and.w	r3, r3, #32
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d105      	bne.n	8009a7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a72:	f003 0301 	and.w	r3, r3, #1
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d005      	beq.n	8009a86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a7e:	f043 0208 	orr.w	r2, r3, #8
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f000 81f2 	beq.w	8009e74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a94:	f003 0320 	and.w	r3, r3, #32
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d008      	beq.n	8009aae <HAL_UART_IRQHandler+0x14e>
 8009a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009aa0:	f003 0320 	and.w	r3, r3, #32
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d002      	beq.n	8009aae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 fb83 	bl	800a1b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	695b      	ldr	r3, [r3, #20]
 8009ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	bf14      	ite	ne
 8009abc:	2301      	movne	r3, #1
 8009abe:	2300      	moveq	r3, #0
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aca:	f003 0308 	and.w	r3, r3, #8
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d103      	bne.n	8009ada <HAL_UART_IRQHandler+0x17a>
 8009ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d04f      	beq.n	8009b7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fa8d 	bl	8009ffa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	695b      	ldr	r3, [r3, #20]
 8009ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d041      	beq.n	8009b72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	3314      	adds	r3, #20
 8009af4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009afc:	e853 3f00 	ldrex	r3, [r3]
 8009b00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009b08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	3314      	adds	r3, #20
 8009b16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009b1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009b26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009b2a:	e841 2300 	strex	r3, r2, [r1]
 8009b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1d9      	bne.n	8009aee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d013      	beq.n	8009b6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b46:	4a7e      	ldr	r2, [pc, #504]	@ (8009d40 <HAL_UART_IRQHandler+0x3e0>)
 8009b48:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7fb fa28 	bl	8004fa4 <HAL_DMA_Abort_IT>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d016      	beq.n	8009b88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009b64:	4610      	mov	r0, r2
 8009b66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b68:	e00e      	b.n	8009b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f98a 	bl	8009e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b70:	e00a      	b.n	8009b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 f986 	bl	8009e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b78:	e006      	b.n	8009b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f982 	bl	8009e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009b86:	e175      	b.n	8009e74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b88:	bf00      	nop
    return;
 8009b8a:	e173      	b.n	8009e74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	f040 814f 	bne.w	8009e34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b9a:	f003 0310 	and.w	r3, r3, #16
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f000 8148 	beq.w	8009e34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ba8:	f003 0310 	and.w	r3, r3, #16
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f000 8141 	beq.w	8009e34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	60bb      	str	r3, [r7, #8]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	60bb      	str	r3, [r7, #8]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	60bb      	str	r3, [r7, #8]
 8009bc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	695b      	ldr	r3, [r3, #20]
 8009bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	f000 80b6 	beq.w	8009d44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009be4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 8145 	beq.w	8009e78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	f080 813e 	bcs.w	8009e78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009c02:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c08:	699b      	ldr	r3, [r3, #24]
 8009c0a:	2b20      	cmp	r3, #32
 8009c0c:	f000 8088 	beq.w	8009d20 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	330c      	adds	r3, #12
 8009c16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009c1e:	e853 3f00 	ldrex	r3, [r3]
 8009c22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009c26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009c2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c2e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	330c      	adds	r3, #12
 8009c38:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009c3c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009c40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c44:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009c48:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009c4c:	e841 2300 	strex	r3, r2, [r1]
 8009c50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1d9      	bne.n	8009c10 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	3314      	adds	r3, #20
 8009c62:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c66:	e853 3f00 	ldrex	r3, [r3]
 8009c6a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009c6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c6e:	f023 0301 	bic.w	r3, r3, #1
 8009c72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	3314      	adds	r3, #20
 8009c7c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009c80:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009c84:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c86:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009c88:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009c8c:	e841 2300 	strex	r3, r2, [r1]
 8009c90:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009c92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1e1      	bne.n	8009c5c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	3314      	adds	r3, #20
 8009c9e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ca2:	e853 3f00 	ldrex	r3, [r3]
 8009ca6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009ca8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009caa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009cae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	3314      	adds	r3, #20
 8009cb8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009cbc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009cbe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009cc2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009cc4:	e841 2300 	strex	r3, r2, [r1]
 8009cc8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009cca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d1e3      	bne.n	8009c98 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2220      	movs	r2, #32
 8009cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	330c      	adds	r3, #12
 8009ce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ce8:	e853 3f00 	ldrex	r3, [r3]
 8009cec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009cee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cf0:	f023 0310 	bic.w	r3, r3, #16
 8009cf4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	330c      	adds	r3, #12
 8009cfe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009d02:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009d04:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009d08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d0a:	e841 2300 	strex	r3, r2, [r1]
 8009d0e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009d10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d1e3      	bne.n	8009cde <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7fb f907 	bl	8004f2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2202      	movs	r2, #2
 8009d24:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	4619      	mov	r1, r3
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 f8ad 	bl	8009e96 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009d3c:	e09c      	b.n	8009e78 <HAL_UART_IRQHandler+0x518>
 8009d3e:	bf00      	nop
 8009d40:	0800a0bf 	.word	0x0800a0bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	1ad3      	subs	r3, r2, r3
 8009d50:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	f000 808e 	beq.w	8009e7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009d60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f000 8089 	beq.w	8009e7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	330c      	adds	r3, #12
 8009d70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d74:	e853 3f00 	ldrex	r3, [r3]
 8009d78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	330c      	adds	r3, #12
 8009d8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009d8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009d90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d96:	e841 2300 	strex	r3, r2, [r1]
 8009d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d1e3      	bne.n	8009d6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	3314      	adds	r3, #20
 8009da8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dac:	e853 3f00 	ldrex	r3, [r3]
 8009db0:	623b      	str	r3, [r7, #32]
   return(result);
 8009db2:	6a3b      	ldr	r3, [r7, #32]
 8009db4:	f023 0301 	bic.w	r3, r3, #1
 8009db8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	3314      	adds	r3, #20
 8009dc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009dc6:	633a      	str	r2, [r7, #48]	@ 0x30
 8009dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dce:	e841 2300 	strex	r3, r2, [r1]
 8009dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1e3      	bne.n	8009da2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2220      	movs	r2, #32
 8009dde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	330c      	adds	r3, #12
 8009dee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	e853 3f00 	ldrex	r3, [r3]
 8009df6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f023 0310 	bic.w	r3, r3, #16
 8009dfe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	330c      	adds	r3, #12
 8009e08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009e0c:	61fa      	str	r2, [r7, #28]
 8009e0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e10:	69b9      	ldr	r1, [r7, #24]
 8009e12:	69fa      	ldr	r2, [r7, #28]
 8009e14:	e841 2300 	strex	r3, r2, [r1]
 8009e18:	617b      	str	r3, [r7, #20]
   return(result);
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d1e3      	bne.n	8009de8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2202      	movs	r2, #2
 8009e24:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009e26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f832 	bl	8009e96 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009e32:	e023      	b.n	8009e7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d009      	beq.n	8009e54 <HAL_UART_IRQHandler+0x4f4>
 8009e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d003      	beq.n	8009e54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 f94a 	bl	800a0e6 <UART_Transmit_IT>
    return;
 8009e52:	e014      	b.n	8009e7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00e      	beq.n	8009e7e <HAL_UART_IRQHandler+0x51e>
 8009e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d008      	beq.n	8009e7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 f989 	bl	800a184 <UART_EndTransmit_IT>
    return;
 8009e72:	e004      	b.n	8009e7e <HAL_UART_IRQHandler+0x51e>
    return;
 8009e74:	bf00      	nop
 8009e76:	e002      	b.n	8009e7e <HAL_UART_IRQHandler+0x51e>
      return;
 8009e78:	bf00      	nop
 8009e7a:	e000      	b.n	8009e7e <HAL_UART_IRQHandler+0x51e>
      return;
 8009e7c:	bf00      	nop
  }
}
 8009e7e:	37e8      	adds	r7, #232	@ 0xe8
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009e8c:	bf00      	nop
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bc80      	pop	{r7}
 8009e94:	4770      	bx	lr

08009e96 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009e96:	b480      	push	{r7}
 8009e98:	b083      	sub	sp, #12
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009ea2:	bf00      	nop
 8009ea4:	370c      	adds	r7, #12
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bc80      	pop	{r7}
 8009eaa:	4770      	bx	lr

08009eac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b090      	sub	sp, #64	@ 0x40
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	603b      	str	r3, [r7, #0]
 8009eb8:	4613      	mov	r3, r2
 8009eba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ebc:	e050      	b.n	8009f60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ebe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec4:	d04c      	beq.n	8009f60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009ec6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d007      	beq.n	8009edc <UART_WaitOnFlagUntilTimeout+0x30>
 8009ecc:	f7fa ff22 	bl	8004d14 <HAL_GetTick>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	1ad3      	subs	r3, r2, r3
 8009ed6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d241      	bcs.n	8009f60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	330c      	adds	r3, #12
 8009ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee6:	e853 3f00 	ldrex	r3, [r3]
 8009eea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eee:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	330c      	adds	r3, #12
 8009efa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009efc:	637a      	str	r2, [r7, #52]	@ 0x34
 8009efe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009f02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f04:	e841 2300 	strex	r3, r2, [r1]
 8009f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d1e5      	bne.n	8009edc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	3314      	adds	r3, #20
 8009f16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	e853 3f00 	ldrex	r3, [r3]
 8009f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	f023 0301 	bic.w	r3, r3, #1
 8009f26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	3314      	adds	r3, #20
 8009f2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f30:	623a      	str	r2, [r7, #32]
 8009f32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f34:	69f9      	ldr	r1, [r7, #28]
 8009f36:	6a3a      	ldr	r2, [r7, #32]
 8009f38:	e841 2300 	strex	r3, r2, [r1]
 8009f3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f3e:	69bb      	ldr	r3, [r7, #24]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d1e5      	bne.n	8009f10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2220      	movs	r2, #32
 8009f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2220      	movs	r2, #32
 8009f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8009f5c:	2303      	movs	r3, #3
 8009f5e:	e00f      	b.n	8009f80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	4013      	ands	r3, r2
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	bf0c      	ite	eq
 8009f70:	2301      	moveq	r3, #1
 8009f72:	2300      	movne	r3, #0
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	461a      	mov	r2, r3
 8009f78:	79fb      	ldrb	r3, [r7, #7]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d09f      	beq.n	8009ebe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009f7e:	2300      	movs	r3, #0
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3740      	adds	r7, #64	@ 0x40
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	4613      	mov	r3, r2
 8009f94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	68ba      	ldr	r2, [r7, #8]
 8009f9a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	88fa      	ldrh	r2, [r7, #6]
 8009fa0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	88fa      	ldrh	r2, [r7, #6]
 8009fa6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2222      	movs	r2, #34	@ 0x22
 8009fb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d007      	beq.n	8009fce <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68da      	ldr	r2, [r3, #12]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009fcc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	695a      	ldr	r2, [r3, #20]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f042 0201 	orr.w	r2, r2, #1
 8009fdc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68da      	ldr	r2, [r3, #12]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f042 0220 	orr.w	r2, r2, #32
 8009fec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3714      	adds	r7, #20
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bc80      	pop	{r7}
 8009ff8:	4770      	bx	lr

08009ffa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ffa:	b480      	push	{r7}
 8009ffc:	b095      	sub	sp, #84	@ 0x54
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	330c      	adds	r3, #12
 800a008:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a00c:	e853 3f00 	ldrex	r3, [r3]
 800a010:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a014:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a018:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	330c      	adds	r3, #12
 800a020:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a022:	643a      	str	r2, [r7, #64]	@ 0x40
 800a024:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a026:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a028:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a02a:	e841 2300 	strex	r3, r2, [r1]
 800a02e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1e5      	bne.n	800a002 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	3314      	adds	r3, #20
 800a03c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03e:	6a3b      	ldr	r3, [r7, #32]
 800a040:	e853 3f00 	ldrex	r3, [r3]
 800a044:	61fb      	str	r3, [r7, #28]
   return(result);
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	f023 0301 	bic.w	r3, r3, #1
 800a04c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	3314      	adds	r3, #20
 800a054:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a056:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a058:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a05c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a05e:	e841 2300 	strex	r3, r2, [r1]
 800a062:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1e5      	bne.n	800a036 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d119      	bne.n	800a0a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	330c      	adds	r3, #12
 800a078:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	e853 3f00 	ldrex	r3, [r3]
 800a080:	60bb      	str	r3, [r7, #8]
   return(result);
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	f023 0310 	bic.w	r3, r3, #16
 800a088:	647b      	str	r3, [r7, #68]	@ 0x44
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	330c      	adds	r3, #12
 800a090:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a092:	61ba      	str	r2, [r7, #24]
 800a094:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a096:	6979      	ldr	r1, [r7, #20]
 800a098:	69ba      	ldr	r2, [r7, #24]
 800a09a:	e841 2300 	strex	r3, r2, [r1]
 800a09e:	613b      	str	r3, [r7, #16]
   return(result);
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1e5      	bne.n	800a072 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2220      	movs	r2, #32
 800a0aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a0b4:	bf00      	nop
 800a0b6:	3754      	adds	r7, #84	@ 0x54
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bc80      	pop	{r7}
 800a0bc:	4770      	bx	lr

0800a0be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b084      	sub	sp, #16
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f7ff fed3 	bl	8009e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0de:	bf00      	nop
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a0e6:	b480      	push	{r7}
 800a0e8:	b085      	sub	sp, #20
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	2b21      	cmp	r3, #33	@ 0x21
 800a0f8:	d13e      	bne.n	800a178 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a102:	d114      	bne.n	800a12e <UART_Transmit_IT+0x48>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	691b      	ldr	r3, [r3, #16]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d110      	bne.n	800a12e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a1b      	ldr	r3, [r3, #32]
 800a110:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	881b      	ldrh	r3, [r3, #0]
 800a116:	461a      	mov	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a120:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a1b      	ldr	r3, [r3, #32]
 800a126:	1c9a      	adds	r2, r3, #2
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	621a      	str	r2, [r3, #32]
 800a12c:	e008      	b.n	800a140 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a1b      	ldr	r3, [r3, #32]
 800a132:	1c59      	adds	r1, r3, #1
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	6211      	str	r1, [r2, #32]
 800a138:	781a      	ldrb	r2, [r3, #0]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a144:	b29b      	uxth	r3, r3
 800a146:	3b01      	subs	r3, #1
 800a148:	b29b      	uxth	r3, r3
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	4619      	mov	r1, r3
 800a14e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a150:	2b00      	cmp	r3, #0
 800a152:	d10f      	bne.n	800a174 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68da      	ldr	r2, [r3, #12]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a162:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68da      	ldr	r2, [r3, #12]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a172:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a174:	2300      	movs	r3, #0
 800a176:	e000      	b.n	800a17a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a178:	2302      	movs	r3, #2
  }
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3714      	adds	r7, #20
 800a17e:	46bd      	mov	sp, r7
 800a180:	bc80      	pop	{r7}
 800a182:	4770      	bx	lr

0800a184 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68da      	ldr	r2, [r3, #12]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a19a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2220      	movs	r2, #32
 800a1a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f7f9 f9bc 	bl	8003522 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a1aa:	2300      	movs	r3, #0
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3708      	adds	r7, #8
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b08c      	sub	sp, #48	@ 0x30
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	2b22      	cmp	r3, #34	@ 0x22
 800a1c6:	f040 80ae 	bne.w	800a326 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1d2:	d117      	bne.n	800a204 <UART_Receive_IT+0x50>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d113      	bne.n	800a204 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1fc:	1c9a      	adds	r2, r3, #2
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	629a      	str	r2, [r3, #40]	@ 0x28
 800a202:	e026      	b.n	800a252 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a208:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a20a:	2300      	movs	r3, #0
 800a20c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a216:	d007      	beq.n	800a228 <UART_Receive_IT+0x74>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d10a      	bne.n	800a236 <UART_Receive_IT+0x82>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d106      	bne.n	800a236 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	b2da      	uxtb	r2, r3
 800a230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a232:	701a      	strb	r2, [r3, #0]
 800a234:	e008      	b.n	800a248 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a242:	b2da      	uxtb	r2, r3
 800a244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a246:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a24c:	1c5a      	adds	r2, r3, #1
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a256:	b29b      	uxth	r3, r3
 800a258:	3b01      	subs	r3, #1
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	4619      	mov	r1, r3
 800a260:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a262:	2b00      	cmp	r3, #0
 800a264:	d15d      	bne.n	800a322 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	68da      	ldr	r2, [r3, #12]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f022 0220 	bic.w	r2, r2, #32
 800a274:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68da      	ldr	r2, [r3, #12]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a284:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	695a      	ldr	r2, [r3, #20]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f022 0201 	bic.w	r2, r2, #1
 800a294:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2220      	movs	r2, #32
 800a29a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d135      	bne.n	800a318 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	330c      	adds	r3, #12
 800a2b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	e853 3f00 	ldrex	r3, [r3]
 800a2c0:	613b      	str	r3, [r7, #16]
   return(result);
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	f023 0310 	bic.w	r3, r3, #16
 800a2c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	330c      	adds	r3, #12
 800a2d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2d2:	623a      	str	r2, [r7, #32]
 800a2d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d6:	69f9      	ldr	r1, [r7, #28]
 800a2d8:	6a3a      	ldr	r2, [r7, #32]
 800a2da:	e841 2300 	strex	r3, r2, [r1]
 800a2de:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1e5      	bne.n	800a2b2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f003 0310 	and.w	r3, r3, #16
 800a2f0:	2b10      	cmp	r3, #16
 800a2f2:	d10a      	bne.n	800a30a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	60fb      	str	r3, [r7, #12]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	60fb      	str	r3, [r7, #12]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	60fb      	str	r3, [r7, #12]
 800a308:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a30e:	4619      	mov	r1, r3
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f7ff fdc0 	bl	8009e96 <HAL_UARTEx_RxEventCallback>
 800a316:	e002      	b.n	800a31e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f7f9 f8e9 	bl	80034f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	e002      	b.n	800a328 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a322:	2300      	movs	r3, #0
 800a324:	e000      	b.n	800a328 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a326:	2302      	movs	r3, #2
  }
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3730      	adds	r7, #48	@ 0x30
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	68da      	ldr	r2, [r3, #12]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	430a      	orrs	r2, r1
 800a34c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	689a      	ldr	r2, [r3, #8]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	431a      	orrs	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	695b      	ldr	r3, [r3, #20]
 800a35c:	4313      	orrs	r3, r2
 800a35e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800a36a:	f023 030c 	bic.w	r3, r3, #12
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	6812      	ldr	r2, [r2, #0]
 800a372:	68b9      	ldr	r1, [r7, #8]
 800a374:	430b      	orrs	r3, r1
 800a376:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	695b      	ldr	r3, [r3, #20]
 800a37e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	699a      	ldr	r2, [r3, #24]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	430a      	orrs	r2, r1
 800a38c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a2c      	ldr	r2, [pc, #176]	@ (800a444 <UART_SetConfig+0x114>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d103      	bne.n	800a3a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a398:	f7fd fb08 	bl	80079ac <HAL_RCC_GetPCLK2Freq>
 800a39c:	60f8      	str	r0, [r7, #12]
 800a39e:	e002      	b.n	800a3a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a3a0:	f7fd faf0 	bl	8007984 <HAL_RCC_GetPCLK1Freq>
 800a3a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a3a6:	68fa      	ldr	r2, [r7, #12]
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	4413      	add	r3, r2
 800a3ae:	009a      	lsls	r2, r3, #2
 800a3b0:	441a      	add	r2, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3bc:	4a22      	ldr	r2, [pc, #136]	@ (800a448 <UART_SetConfig+0x118>)
 800a3be:	fba2 2303 	umull	r2, r3, r2, r3
 800a3c2:	095b      	lsrs	r3, r3, #5
 800a3c4:	0119      	lsls	r1, r3, #4
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	4413      	add	r3, r2
 800a3ce:	009a      	lsls	r2, r3, #2
 800a3d0:	441a      	add	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	fbb2 f2f3 	udiv	r2, r2, r3
 800a3dc:	4b1a      	ldr	r3, [pc, #104]	@ (800a448 <UART_SetConfig+0x118>)
 800a3de:	fba3 0302 	umull	r0, r3, r3, r2
 800a3e2:	095b      	lsrs	r3, r3, #5
 800a3e4:	2064      	movs	r0, #100	@ 0x64
 800a3e6:	fb00 f303 	mul.w	r3, r0, r3
 800a3ea:	1ad3      	subs	r3, r2, r3
 800a3ec:	011b      	lsls	r3, r3, #4
 800a3ee:	3332      	adds	r3, #50	@ 0x32
 800a3f0:	4a15      	ldr	r2, [pc, #84]	@ (800a448 <UART_SetConfig+0x118>)
 800a3f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3f6:	095b      	lsrs	r3, r3, #5
 800a3f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a3fc:	4419      	add	r1, r3
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	4613      	mov	r3, r2
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4413      	add	r3, r2
 800a406:	009a      	lsls	r2, r3, #2
 800a408:	441a      	add	r2, r3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	009b      	lsls	r3, r3, #2
 800a410:	fbb2 f2f3 	udiv	r2, r2, r3
 800a414:	4b0c      	ldr	r3, [pc, #48]	@ (800a448 <UART_SetConfig+0x118>)
 800a416:	fba3 0302 	umull	r0, r3, r3, r2
 800a41a:	095b      	lsrs	r3, r3, #5
 800a41c:	2064      	movs	r0, #100	@ 0x64
 800a41e:	fb00 f303 	mul.w	r3, r0, r3
 800a422:	1ad3      	subs	r3, r2, r3
 800a424:	011b      	lsls	r3, r3, #4
 800a426:	3332      	adds	r3, #50	@ 0x32
 800a428:	4a07      	ldr	r2, [pc, #28]	@ (800a448 <UART_SetConfig+0x118>)
 800a42a:	fba2 2303 	umull	r2, r3, r2, r3
 800a42e:	095b      	lsrs	r3, r3, #5
 800a430:	f003 020f 	and.w	r2, r3, #15
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	440a      	add	r2, r1
 800a43a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a43c:	bf00      	nop
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}
 800a444:	40013800 	.word	0x40013800
 800a448:	51eb851f 	.word	0x51eb851f

0800a44c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a44c:	b084      	sub	sp, #16
 800a44e:	b480      	push	{r7}
 800a450:	b085      	sub	sp, #20
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
 800a456:	f107 001c 	add.w	r0, r7, #28
 800a45a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a45e:	2300      	movs	r3, #0
 800a460:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a462:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a464:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a466:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800a46a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a46c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800a46e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800a472:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800a476:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a478:	68fa      	ldr	r2, [r7, #12]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800a486:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a48a:	68fa      	ldr	r2, [r7, #12]
 800a48c:	431a      	orrs	r2, r3
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a492:	2300      	movs	r3, #0
}
 800a494:	4618      	mov	r0, r3
 800a496:	3714      	adds	r7, #20
 800a498:	46bd      	mov	sp, r7
 800a49a:	bc80      	pop	{r7}
 800a49c:	b004      	add	sp, #16
 800a49e:	4770      	bx	lr

0800a4a0 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	370c      	adds	r7, #12
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bc80      	pop	{r7}
 800a4b6:	4770      	bx	lr

0800a4b8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	370c      	adds	r7, #12
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bc80      	pop	{r7}
 800a4d6:	4770      	bx	lr

0800a4d8 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2203      	movs	r2, #3
 800a4e4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bc80      	pop	{r7}
 800a4f0:	4770      	bx	lr

0800a4f2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a4f2:	b480      	push	{r7}
 800a4f4:	b083      	sub	sp, #12
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f003 0303 	and.w	r3, r3, #3
}
 800a502:	4618      	mov	r0, r3
 800a504:	370c      	adds	r7, #12
 800a506:	46bd      	mov	sp, r7
 800a508:	bc80      	pop	{r7}
 800a50a:	4770      	bx	lr

0800a50c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b085      	sub	sp, #20
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a516:	2300      	movs	r3, #0
 800a518:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a52a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a530:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a536:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	4313      	orrs	r3, r2
 800a53c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a546:	f023 030f 	bic.w	r3, r3, #15
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	431a      	orrs	r2, r3
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a552:	2300      	movs	r3, #0
}
 800a554:	4618      	mov	r0, r3
 800a556:	3714      	adds	r7, #20
 800a558:	46bd      	mov	sp, r7
 800a55a:	bc80      	pop	{r7}
 800a55c:	4770      	bx	lr

0800a55e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a55e:	b480      	push	{r7}
 800a560:	b083      	sub	sp, #12
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	691b      	ldr	r3, [r3, #16]
 800a56a:	b2db      	uxtb	r3, r3
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	bc80      	pop	{r7}
 800a574:	4770      	bx	lr

0800a576 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a576:	b480      	push	{r7}
 800a578:	b085      	sub	sp, #20
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
 800a57e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	3314      	adds	r3, #20
 800a584:	461a      	mov	r2, r3
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	4413      	add	r3, r2
 800a58a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
}  
 800a590:	4618      	mov	r0, r3
 800a592:	3714      	adds	r7, #20
 800a594:	46bd      	mov	sp, r7
 800a596:	bc80      	pop	{r7}
 800a598:	4770      	bx	lr

0800a59a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a59a:	b480      	push	{r7}
 800a59c:	b085      	sub	sp, #20
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
 800a5a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	685a      	ldr	r2, [r3, #4]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a5c0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a5c6:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a5cc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5d8:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	431a      	orrs	r2, r3
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a5e4:	2300      	movs	r3, #0

}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3714      	adds	r7, #20
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bc80      	pop	{r7}
 800a5ee:	4770      	bx	lr

0800a5f0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b088      	sub	sp, #32
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a5fe:	2310      	movs	r3, #16
 800a600:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a602:	2340      	movs	r3, #64	@ 0x40
 800a604:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a606:	2300      	movs	r3, #0
 800a608:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a60a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a60e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a610:	f107 0308 	add.w	r3, r7, #8
 800a614:	4619      	mov	r1, r3
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f7ff ff78 	bl	800a50c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a61c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a620:	2110      	movs	r1, #16
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 f9d6 	bl	800a9d4 <SDMMC_GetCmdResp1>
 800a628:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a62a:	69fb      	ldr	r3, [r7, #28]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3720      	adds	r7, #32
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b088      	sub	sp, #32
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a642:	2311      	movs	r3, #17
 800a644:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a646:	2340      	movs	r3, #64	@ 0x40
 800a648:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a64a:	2300      	movs	r3, #0
 800a64c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a64e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a652:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a654:	f107 0308 	add.w	r3, r7, #8
 800a658:	4619      	mov	r1, r3
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f7ff ff56 	bl	800a50c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a660:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a664:	2111      	movs	r1, #17
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 f9b4 	bl	800a9d4 <SDMMC_GetCmdResp1>
 800a66c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a66e:	69fb      	ldr	r3, [r7, #28]
}
 800a670:	4618      	mov	r0, r3
 800a672:	3720      	adds	r7, #32
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b088      	sub	sp, #32
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a686:	2312      	movs	r3, #18
 800a688:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a68a:	2340      	movs	r3, #64	@ 0x40
 800a68c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a68e:	2300      	movs	r3, #0
 800a690:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a692:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a696:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a698:	f107 0308 	add.w	r3, r7, #8
 800a69c:	4619      	mov	r1, r3
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f7ff ff34 	bl	800a50c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a6a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6a8:	2112      	movs	r1, #18
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 f992 	bl	800a9d4 <SDMMC_GetCmdResp1>
 800a6b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6b2:	69fb      	ldr	r3, [r7, #28]
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3720      	adds	r7, #32
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b088      	sub	sp, #32
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a6ca:	2318      	movs	r3, #24
 800a6cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a6ce:	2340      	movs	r3, #64	@ 0x40
 800a6d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6dc:	f107 0308 	add.w	r3, r7, #8
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f7ff ff12 	bl	800a50c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a6e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6ec:	2118      	movs	r1, #24
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 f970 	bl	800a9d4 <SDMMC_GetCmdResp1>
 800a6f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6f6:	69fb      	ldr	r3, [r7, #28]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3720      	adds	r7, #32
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b088      	sub	sp, #32
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a70e:	2319      	movs	r3, #25
 800a710:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a712:	2340      	movs	r3, #64	@ 0x40
 800a714:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a716:	2300      	movs	r3, #0
 800a718:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a71a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a71e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a720:	f107 0308 	add.w	r3, r7, #8
 800a724:	4619      	mov	r1, r3
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f7ff fef0 	bl	800a50c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a72c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a730:	2119      	movs	r1, #25
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f000 f94e 	bl	800a9d4 <SDMMC_GetCmdResp1>
 800a738:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a73a:	69fb      	ldr	r3, [r7, #28]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3720      	adds	r7, #32
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b088      	sub	sp, #32
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a74c:	2300      	movs	r3, #0
 800a74e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a750:	230c      	movs	r3, #12
 800a752:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a754:	2340      	movs	r3, #64	@ 0x40
 800a756:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a758:	2300      	movs	r3, #0
 800a75a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a75c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a760:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a762:	f107 0308 	add.w	r3, r7, #8
 800a766:	4619      	mov	r1, r3
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f7ff fecf 	bl	800a50c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a76e:	4a05      	ldr	r2, [pc, #20]	@ (800a784 <SDMMC_CmdStopTransfer+0x40>)
 800a770:	210c      	movs	r1, #12
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 f92e 	bl	800a9d4 <SDMMC_GetCmdResp1>
 800a778:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a77a:	69fb      	ldr	r3, [r7, #28]
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3720      	adds	r7, #32
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}
 800a784:	05f5e100 	.word	0x05f5e100

0800a788 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b08a      	sub	sp, #40	@ 0x28
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a798:	2307      	movs	r3, #7
 800a79a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a79c:	2340      	movs	r3, #64	@ 0x40
 800a79e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7a8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7aa:	f107 0310 	add.w	r3, r7, #16
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f7ff feab 	bl	800a50c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a7b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7ba:	2107      	movs	r1, #7
 800a7bc:	68f8      	ldr	r0, [r7, #12]
 800a7be:	f000 f909 	bl	800a9d4 <SDMMC_GetCmdResp1>
 800a7c2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3728      	adds	r7, #40	@ 0x28
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b088      	sub	sp, #32
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7ec:	f107 0308 	add.w	r3, r7, #8
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f7ff fe8a 	bl	800a50c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 fb21 	bl	800ae40 <SDMMC_GetCmdError>
 800a7fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a800:	69fb      	ldr	r3, [r7, #28]
}
 800a802:	4618      	mov	r0, r3
 800a804:	3720      	adds	r7, #32
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}

0800a80a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a80a:	b580      	push	{r7, lr}
 800a80c:	b088      	sub	sp, #32
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a812:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a816:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a818:	2308      	movs	r3, #8
 800a81a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a81c:	2340      	movs	r3, #64	@ 0x40
 800a81e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a820:	2300      	movs	r3, #0
 800a822:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a824:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a828:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a82a:	f107 0308 	add.w	r3, r7, #8
 800a82e:	4619      	mov	r1, r3
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f7ff fe6b 	bl	800a50c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 fab4 	bl	800ada4 <SDMMC_GetCmdResp7>
 800a83c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a83e:	69fb      	ldr	r3, [r7, #28]
}
 800a840:	4618      	mov	r0, r3
 800a842:	3720      	adds	r7, #32
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b088      	sub	sp, #32
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a856:	2337      	movs	r3, #55	@ 0x37
 800a858:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a85a:	2340      	movs	r3, #64	@ 0x40
 800a85c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a85e:	2300      	movs	r3, #0
 800a860:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a862:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a866:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a868:	f107 0308 	add.w	r3, r7, #8
 800a86c:	4619      	mov	r1, r3
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f7ff fe4c 	bl	800a50c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a874:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a878:	2137      	movs	r1, #55	@ 0x37
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 f8aa 	bl	800a9d4 <SDMMC_GetCmdResp1>
 800a880:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a882:	69fb      	ldr	r3, [r7, #28]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3720      	adds	r7, #32
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b088      	sub	sp, #32
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a89c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a8a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a8a2:	2329      	movs	r3, #41	@ 0x29
 800a8a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a8a6:	2340      	movs	r3, #64	@ 0x40
 800a8a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a8ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a8b4:	f107 0308 	add.w	r3, r7, #8
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f7ff fe26 	bl	800a50c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 f9bd 	bl	800ac40 <SDMMC_GetCmdResp3>
 800a8c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8c8:	69fb      	ldr	r3, [r7, #28]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3720      	adds	r7, #32
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b088      	sub	sp, #32
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a8de:	2302      	movs	r3, #2
 800a8e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a8e2:	23c0      	movs	r3, #192	@ 0xc0
 800a8e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a8ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a8f0:	f107 0308 	add.w	r3, r7, #8
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f7ff fe08 	bl	800a50c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 f957 	bl	800abb0 <SDMMC_GetCmdResp2>
 800a902:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a904:	69fb      	ldr	r3, [r7, #28]
}
 800a906:	4618      	mov	r0, r3
 800a908:	3720      	adds	r7, #32
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b088      	sub	sp, #32
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a91c:	2309      	movs	r3, #9
 800a91e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a920:	23c0      	movs	r3, #192	@ 0xc0
 800a922:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a924:	2300      	movs	r3, #0
 800a926:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a928:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a92c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a92e:	f107 0308 	add.w	r3, r7, #8
 800a932:	4619      	mov	r1, r3
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f7ff fde9 	bl	800a50c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 f938 	bl	800abb0 <SDMMC_GetCmdResp2>
 800a940:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a942:	69fb      	ldr	r3, [r7, #28]
}
 800a944:	4618      	mov	r0, r3
 800a946:	3720      	adds	r7, #32
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b088      	sub	sp, #32
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a956:	2300      	movs	r3, #0
 800a958:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a95a:	2303      	movs	r3, #3
 800a95c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a95e:	2340      	movs	r3, #64	@ 0x40
 800a960:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a962:	2300      	movs	r3, #0
 800a964:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a966:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a96a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a96c:	f107 0308 	add.w	r3, r7, #8
 800a970:	4619      	mov	r1, r3
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f7ff fdca 	bl	800a50c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a978:	683a      	ldr	r2, [r7, #0]
 800a97a:	2103      	movs	r1, #3
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 f99b 	bl	800acb8 <SDMMC_GetCmdResp6>
 800a982:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a984:	69fb      	ldr	r3, [r7, #28]
}
 800a986:	4618      	mov	r0, r3
 800a988:	3720      	adds	r7, #32
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b088      	sub	sp, #32
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
 800a996:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a99c:	230d      	movs	r3, #13
 800a99e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a9a0:	2340      	movs	r3, #64	@ 0x40
 800a9a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9ae:	f107 0308 	add.w	r3, r7, #8
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f7ff fda9 	bl	800a50c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a9ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9be:	210d      	movs	r1, #13
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 f807 	bl	800a9d4 <SDMMC_GetCmdResp1>
 800a9c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9c8:	69fb      	ldr	r3, [r7, #28]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3720      	adds	r7, #32
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
	...

0800a9d4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b088      	sub	sp, #32
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	460b      	mov	r3, r1
 800a9de:	607a      	str	r2, [r7, #4]
 800a9e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a9e2:	4b70      	ldr	r3, [pc, #448]	@ (800aba4 <SDMMC_GetCmdResp1+0x1d0>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4a70      	ldr	r2, [pc, #448]	@ (800aba8 <SDMMC_GetCmdResp1+0x1d4>)
 800a9e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a9ec:	0a5a      	lsrs	r2, r3, #9
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	fb02 f303 	mul.w	r3, r2, r3
 800a9f4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a9f6:	69fb      	ldr	r3, [r7, #28]
 800a9f8:	1e5a      	subs	r2, r3, #1
 800a9fa:	61fa      	str	r2, [r7, #28]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d102      	bne.n	800aa06 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa00:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aa04:	e0c9      	b.n	800ab9a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa0a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa0c:	69bb      	ldr	r3, [r7, #24]
 800aa0e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d0ef      	beq.n	800a9f6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d1ea      	bne.n	800a9f6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa24:	f003 0304 	and.w	r3, r3, #4
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d004      	beq.n	800aa36 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2204      	movs	r2, #4
 800aa30:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa32:	2304      	movs	r3, #4
 800aa34:	e0b1      	b.n	800ab9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa3a:	f003 0301 	and.w	r3, r3, #1
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d004      	beq.n	800aa4c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2201      	movs	r2, #1
 800aa46:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	e0a6      	b.n	800ab9a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	22c5      	movs	r2, #197	@ 0xc5
 800aa50:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	f7ff fd83 	bl	800a55e <SDIO_GetCommandResponse>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	7afb      	ldrb	r3, [r7, #11]
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d001      	beq.n	800aa66 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa62:	2301      	movs	r3, #1
 800aa64:	e099      	b.n	800ab9a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800aa66:	2100      	movs	r1, #0
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	f7ff fd84 	bl	800a576 <SDIO_GetResponse>
 800aa6e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800aa70:	697a      	ldr	r2, [r7, #20]
 800aa72:	4b4e      	ldr	r3, [pc, #312]	@ (800abac <SDMMC_GetCmdResp1+0x1d8>)
 800aa74:	4013      	ands	r3, r2
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d101      	bne.n	800aa7e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	e08d      	b.n	800ab9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	da02      	bge.n	800aa8a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800aa84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800aa88:	e087      	b.n	800ab9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d001      	beq.n	800aa98 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800aa94:	2340      	movs	r3, #64	@ 0x40
 800aa96:	e080      	b.n	800ab9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d001      	beq.n	800aaa6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800aaa2:	2380      	movs	r3, #128	@ 0x80
 800aaa4:	e079      	b.n	800ab9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d002      	beq.n	800aab6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800aab0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aab4:	e071      	b.n	800ab9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d002      	beq.n	800aac6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800aac0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aac4:	e069      	b.n	800ab9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d002      	beq.n	800aad6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800aad0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aad4:	e061      	b.n	800ab9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d002      	beq.n	800aae6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800aae0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aae4:	e059      	b.n	800ab9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d002      	beq.n	800aaf6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aaf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aaf4:	e051      	b.n	800ab9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d002      	beq.n	800ab06 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ab00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ab04:	e049      	b.n	800ab9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d002      	beq.n	800ab16 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ab10:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ab14:	e041      	b.n	800ab9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d002      	beq.n	800ab26 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ab20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab24:	e039      	b.n	800ab9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d002      	beq.n	800ab36 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ab30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ab34:	e031      	b.n	800ab9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d002      	beq.n	800ab46 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ab40:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ab44:	e029      	b.n	800ab9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d002      	beq.n	800ab56 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ab50:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ab54:	e021      	b.n	800ab9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d002      	beq.n	800ab66 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ab60:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ab64:	e019      	b.n	800ab9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d002      	beq.n	800ab76 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ab70:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ab74:	e011      	b.n	800ab9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d002      	beq.n	800ab86 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ab80:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ab84:	e009      	b.n	800ab9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	f003 0308 	and.w	r3, r3, #8
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d002      	beq.n	800ab96 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ab90:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800ab94:	e001      	b.n	800ab9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ab96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3720      	adds	r7, #32
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	20000024 	.word	0x20000024
 800aba8:	10624dd3 	.word	0x10624dd3
 800abac:	fdffe008 	.word	0xfdffe008

0800abb0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b085      	sub	sp, #20
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800abb8:	4b1f      	ldr	r3, [pc, #124]	@ (800ac38 <SDMMC_GetCmdResp2+0x88>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a1f      	ldr	r2, [pc, #124]	@ (800ac3c <SDMMC_GetCmdResp2+0x8c>)
 800abbe:	fba2 2303 	umull	r2, r3, r2, r3
 800abc2:	0a5b      	lsrs	r3, r3, #9
 800abc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abc8:	fb02 f303 	mul.w	r3, r2, r3
 800abcc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	1e5a      	subs	r2, r3, #1
 800abd2:	60fa      	str	r2, [r7, #12]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d102      	bne.n	800abde <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800abd8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800abdc:	e026      	b.n	800ac2c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abe2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800abea:	2b00      	cmp	r3, #0
 800abec:	d0ef      	beq.n	800abce <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d1ea      	bne.n	800abce <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abfc:	f003 0304 	and.w	r3, r3, #4
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d004      	beq.n	800ac0e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2204      	movs	r2, #4
 800ac08:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac0a:	2304      	movs	r3, #4
 800ac0c:	e00e      	b.n	800ac2c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac12:	f003 0301 	and.w	r3, r3, #1
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d004      	beq.n	800ac24 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac20:	2301      	movs	r3, #1
 800ac22:	e003      	b.n	800ac2c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	22c5      	movs	r2, #197	@ 0xc5
 800ac28:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ac2a:	2300      	movs	r3, #0
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3714      	adds	r7, #20
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bc80      	pop	{r7}
 800ac34:	4770      	bx	lr
 800ac36:	bf00      	nop
 800ac38:	20000024 	.word	0x20000024
 800ac3c:	10624dd3 	.word	0x10624dd3

0800ac40 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b085      	sub	sp, #20
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ac48:	4b19      	ldr	r3, [pc, #100]	@ (800acb0 <SDMMC_GetCmdResp3+0x70>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a19      	ldr	r2, [pc, #100]	@ (800acb4 <SDMMC_GetCmdResp3+0x74>)
 800ac4e:	fba2 2303 	umull	r2, r3, r2, r3
 800ac52:	0a5b      	lsrs	r3, r3, #9
 800ac54:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac58:	fb02 f303 	mul.w	r3, r2, r3
 800ac5c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	1e5a      	subs	r2, r3, #1
 800ac62:	60fa      	str	r2, [r7, #12]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d102      	bne.n	800ac6e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac68:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ac6c:	e01b      	b.n	800aca6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac72:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d0ef      	beq.n	800ac5e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d1ea      	bne.n	800ac5e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac8c:	f003 0304 	and.w	r3, r3, #4
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d004      	beq.n	800ac9e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2204      	movs	r2, #4
 800ac98:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac9a:	2304      	movs	r3, #4
 800ac9c:	e003      	b.n	800aca6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	22c5      	movs	r2, #197	@ 0xc5
 800aca2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3714      	adds	r7, #20
 800acaa:	46bd      	mov	sp, r7
 800acac:	bc80      	pop	{r7}
 800acae:	4770      	bx	lr
 800acb0:	20000024 	.word	0x20000024
 800acb4:	10624dd3 	.word	0x10624dd3

0800acb8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b088      	sub	sp, #32
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	460b      	mov	r3, r1
 800acc2:	607a      	str	r2, [r7, #4]
 800acc4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800acc6:	4b35      	ldr	r3, [pc, #212]	@ (800ad9c <SDMMC_GetCmdResp6+0xe4>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a35      	ldr	r2, [pc, #212]	@ (800ada0 <SDMMC_GetCmdResp6+0xe8>)
 800accc:	fba2 2303 	umull	r2, r3, r2, r3
 800acd0:	0a5b      	lsrs	r3, r3, #9
 800acd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acd6:	fb02 f303 	mul.w	r3, r2, r3
 800acda:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	1e5a      	subs	r2, r3, #1
 800ace0:	61fa      	str	r2, [r7, #28]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d102      	bne.n	800acec <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ace6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800acea:	e052      	b.n	800ad92 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acf0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800acf2:	69bb      	ldr	r3, [r7, #24]
 800acf4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d0ef      	beq.n	800acdc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d1ea      	bne.n	800acdc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad0a:	f003 0304 	and.w	r3, r3, #4
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d004      	beq.n	800ad1c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2204      	movs	r2, #4
 800ad16:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad18:	2304      	movs	r3, #4
 800ad1a:	e03a      	b.n	800ad92 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad20:	f003 0301 	and.w	r3, r3, #1
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d004      	beq.n	800ad32 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	e02f      	b.n	800ad92 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f7ff fc13 	bl	800a55e <SDIO_GetCommandResponse>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	7afb      	ldrb	r3, [r7, #11]
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d001      	beq.n	800ad46 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad42:	2301      	movs	r3, #1
 800ad44:	e025      	b.n	800ad92 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	22c5      	movs	r2, #197	@ 0xc5
 800ad4a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f7ff fc11 	bl	800a576 <SDIO_GetResponse>
 800ad54:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d106      	bne.n	800ad6e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	0c1b      	lsrs	r3, r3, #16
 800ad64:	b29a      	uxth	r2, r3
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	e011      	b.n	800ad92 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d002      	beq.n	800ad7e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ad78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ad7c:	e009      	b.n	800ad92 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d002      	beq.n	800ad8e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ad88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad8c:	e001      	b.n	800ad92 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ad8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3720      	adds	r7, #32
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	20000024 	.word	0x20000024
 800ada0:	10624dd3 	.word	0x10624dd3

0800ada4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800adac:	4b22      	ldr	r3, [pc, #136]	@ (800ae38 <SDMMC_GetCmdResp7+0x94>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a22      	ldr	r2, [pc, #136]	@ (800ae3c <SDMMC_GetCmdResp7+0x98>)
 800adb2:	fba2 2303 	umull	r2, r3, r2, r3
 800adb6:	0a5b      	lsrs	r3, r3, #9
 800adb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800adbc:	fb02 f303 	mul.w	r3, r2, r3
 800adc0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	1e5a      	subs	r2, r3, #1
 800adc6:	60fa      	str	r2, [r7, #12]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d102      	bne.n	800add2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800adcc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800add0:	e02c      	b.n	800ae2c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800add6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d0ef      	beq.n	800adc2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d1ea      	bne.n	800adc2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adf0:	f003 0304 	and.w	r3, r3, #4
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d004      	beq.n	800ae02 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2204      	movs	r2, #4
 800adfc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800adfe:	2304      	movs	r3, #4
 800ae00:	e014      	b.n	800ae2c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae06:	f003 0301 	and.w	r3, r3, #1
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d004      	beq.n	800ae18 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2201      	movs	r2, #1
 800ae12:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae14:	2301      	movs	r3, #1
 800ae16:	e009      	b.n	800ae2c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d002      	beq.n	800ae2a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2240      	movs	r2, #64	@ 0x40
 800ae28:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ae2a:	2300      	movs	r3, #0
  
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3714      	adds	r7, #20
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bc80      	pop	{r7}
 800ae34:	4770      	bx	lr
 800ae36:	bf00      	nop
 800ae38:	20000024 	.word	0x20000024
 800ae3c:	10624dd3 	.word	0x10624dd3

0800ae40 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b085      	sub	sp, #20
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ae48:	4b10      	ldr	r3, [pc, #64]	@ (800ae8c <SDMMC_GetCmdError+0x4c>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a10      	ldr	r2, [pc, #64]	@ (800ae90 <SDMMC_GetCmdError+0x50>)
 800ae4e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae52:	0a5b      	lsrs	r3, r3, #9
 800ae54:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae58:	fb02 f303 	mul.w	r3, r2, r3
 800ae5c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	1e5a      	subs	r2, r3, #1
 800ae62:	60fa      	str	r2, [r7, #12]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d102      	bne.n	800ae6e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae68:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ae6c:	e009      	b.n	800ae82 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d0f1      	beq.n	800ae5e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	22c5      	movs	r2, #197	@ 0xc5
 800ae7e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800ae80:	2300      	movs	r3, #0
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3714      	adds	r7, #20
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bc80      	pop	{r7}
 800ae8a:	4770      	bx	lr
 800ae8c:	20000024 	.word	0x20000024
 800ae90:	10624dd3 	.word	0x10624dd3

0800ae94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ae98:	4904      	ldr	r1, [pc, #16]	@ (800aeac <MX_FATFS_Init+0x18>)
 800ae9a:	4805      	ldr	r0, [pc, #20]	@ (800aeb0 <MX_FATFS_Init+0x1c>)
 800ae9c:	f004 f83c 	bl	800ef18 <FATFS_LinkDriver>
 800aea0:	4603      	mov	r3, r0
 800aea2:	461a      	mov	r2, r3
 800aea4:	4b03      	ldr	r3, [pc, #12]	@ (800aeb4 <MX_FATFS_Init+0x20>)
 800aea6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aea8:	bf00      	nop
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	20002a68 	.word	0x20002a68
 800aeb0:	080125fc 	.word	0x080125fc
 800aeb4:	20002a64 	.word	0x20002a64

0800aeb8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800aebc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bc80      	pop	{r7}
 800aec4:	4770      	bx	lr
	...

0800aec8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800aece:	2300      	movs	r3, #0
 800aed0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800aed2:	f000 f86b 	bl	800afac <BSP_SD_IsDetected>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d001      	beq.n	800aee0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800aedc:	2301      	movs	r3, #1
 800aede:	e005      	b.n	800aeec <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800aee0:	4804      	ldr	r0, [pc, #16]	@ (800aef4 <BSP_SD_Init+0x2c>)
 800aee2:	f7fc fdc5 	bl	8007a70 <HAL_SD_Init>
 800aee6:	4603      	mov	r3, r0
 800aee8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800aeea:	79fb      	ldrb	r3, [r7, #7]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3708      	adds	r7, #8
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	20002828 	.word	0x20002828

0800aef8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b088      	sub	sp, #32
 800aefc:	af02      	add	r7, sp, #8
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]
 800af04:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800af06:	2300      	movs	r3, #0
 800af08:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	9300      	str	r3, [sp, #0]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	68ba      	ldr	r2, [r7, #8]
 800af12:	68f9      	ldr	r1, [r7, #12]
 800af14:	4806      	ldr	r0, [pc, #24]	@ (800af30 <BSP_SD_ReadBlocks+0x38>)
 800af16:	f7fc fe5b 	bl	8007bd0 <HAL_SD_ReadBlocks>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d001      	beq.n	800af24 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800af24:	7dfb      	ldrb	r3, [r7, #23]
}
 800af26:	4618      	mov	r0, r3
 800af28:	3718      	adds	r7, #24
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	20002828 	.word	0x20002828

0800af34 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b088      	sub	sp, #32
 800af38:	af02      	add	r7, sp, #8
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
 800af40:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800af42:	2300      	movs	r3, #0
 800af44:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	9300      	str	r3, [sp, #0]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	68ba      	ldr	r2, [r7, #8]
 800af4e:	68f9      	ldr	r1, [r7, #12]
 800af50:	4806      	ldr	r0, [pc, #24]	@ (800af6c <BSP_SD_WriteBlocks+0x38>)
 800af52:	f7fd f81b 	bl	8007f8c <HAL_SD_WriteBlocks>
 800af56:	4603      	mov	r3, r0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d001      	beq.n	800af60 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800af5c:	2301      	movs	r3, #1
 800af5e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800af60:	7dfb      	ldrb	r3, [r7, #23]
}
 800af62:	4618      	mov	r0, r3
 800af64:	3718      	adds	r7, #24
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	20002828 	.word	0x20002828

0800af70 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800af74:	4805      	ldr	r0, [pc, #20]	@ (800af8c <BSP_SD_GetCardState+0x1c>)
 800af76:	f7fd fb5e 	bl	8008636 <HAL_SD_GetCardState>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b04      	cmp	r3, #4
 800af7e:	bf14      	ite	ne
 800af80:	2301      	movne	r3, #1
 800af82:	2300      	moveq	r3, #0
 800af84:	b2db      	uxtb	r3, r3
}
 800af86:	4618      	mov	r0, r3
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	20002828 	.word	0x20002828

0800af90 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800af98:	6879      	ldr	r1, [r7, #4]
 800af9a:	4803      	ldr	r0, [pc, #12]	@ (800afa8 <BSP_SD_GetCardInfo+0x18>)
 800af9c:	f7fd fb20 	bl	80085e0 <HAL_SD_GetCardInfo>
}
 800afa0:	bf00      	nop
 800afa2:	3708      	adds	r7, #8
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}
 800afa8:	20002828 	.word	0x20002828

0800afac <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800afb2:	2301      	movs	r3, #1
 800afb4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800afb6:	79fb      	ldrb	r3, [r7, #7]
 800afb8:	b2db      	uxtb	r3, r3
}
 800afba:	4618      	mov	r0, r3
 800afbc:	370c      	adds	r7, #12
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bc80      	pop	{r7}
 800afc2:	4770      	bx	lr

0800afc4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	4603      	mov	r3, r0
 800afcc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800afce:	79fb      	ldrb	r3, [r7, #7]
 800afd0:	4a08      	ldr	r2, [pc, #32]	@ (800aff4 <disk_status+0x30>)
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	4413      	add	r3, r2
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	79fa      	ldrb	r2, [r7, #7]
 800afdc:	4905      	ldr	r1, [pc, #20]	@ (800aff4 <disk_status+0x30>)
 800afde:	440a      	add	r2, r1
 800afe0:	7a12      	ldrb	r2, [r2, #8]
 800afe2:	4610      	mov	r0, r2
 800afe4:	4798      	blx	r3
 800afe6:	4603      	mov	r3, r0
 800afe8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800afea:	7bfb      	ldrb	r3, [r7, #15]
}
 800afec:	4618      	mov	r0, r3
 800afee:	3710      	adds	r7, #16
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	20002a8c 	.word	0x20002a8c

0800aff8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	4603      	mov	r3, r0
 800b000:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b002:	2300      	movs	r3, #0
 800b004:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800b006:	79fb      	ldrb	r3, [r7, #7]
 800b008:	4a0d      	ldr	r2, [pc, #52]	@ (800b040 <disk_initialize+0x48>)
 800b00a:	5cd3      	ldrb	r3, [r2, r3]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d111      	bne.n	800b034 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800b010:	79fb      	ldrb	r3, [r7, #7]
 800b012:	4a0b      	ldr	r2, [pc, #44]	@ (800b040 <disk_initialize+0x48>)
 800b014:	2101      	movs	r1, #1
 800b016:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b018:	79fb      	ldrb	r3, [r7, #7]
 800b01a:	4a09      	ldr	r2, [pc, #36]	@ (800b040 <disk_initialize+0x48>)
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	4413      	add	r3, r2
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	79fa      	ldrb	r2, [r7, #7]
 800b026:	4906      	ldr	r1, [pc, #24]	@ (800b040 <disk_initialize+0x48>)
 800b028:	440a      	add	r2, r1
 800b02a:	7a12      	ldrb	r2, [r2, #8]
 800b02c:	4610      	mov	r0, r2
 800b02e:	4798      	blx	r3
 800b030:	4603      	mov	r3, r0
 800b032:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b034:	7bfb      	ldrb	r3, [r7, #15]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3710      	adds	r7, #16
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	20002a8c 	.word	0x20002a8c

0800b044 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b044:	b590      	push	{r4, r7, lr}
 800b046:	b087      	sub	sp, #28
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60b9      	str	r1, [r7, #8]
 800b04c:	607a      	str	r2, [r7, #4]
 800b04e:	603b      	str	r3, [r7, #0]
 800b050:	4603      	mov	r3, r0
 800b052:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b054:	7bfb      	ldrb	r3, [r7, #15]
 800b056:	4a0a      	ldr	r2, [pc, #40]	@ (800b080 <disk_read+0x3c>)
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	4413      	add	r3, r2
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	689c      	ldr	r4, [r3, #8]
 800b060:	7bfb      	ldrb	r3, [r7, #15]
 800b062:	4a07      	ldr	r2, [pc, #28]	@ (800b080 <disk_read+0x3c>)
 800b064:	4413      	add	r3, r2
 800b066:	7a18      	ldrb	r0, [r3, #8]
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	68b9      	ldr	r1, [r7, #8]
 800b06e:	47a0      	blx	r4
 800b070:	4603      	mov	r3, r0
 800b072:	75fb      	strb	r3, [r7, #23]
  return res;
 800b074:	7dfb      	ldrb	r3, [r7, #23]
}
 800b076:	4618      	mov	r0, r3
 800b078:	371c      	adds	r7, #28
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd90      	pop	{r4, r7, pc}
 800b07e:	bf00      	nop
 800b080:	20002a8c 	.word	0x20002a8c

0800b084 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b084:	b590      	push	{r4, r7, lr}
 800b086:	b087      	sub	sp, #28
 800b088:	af00      	add	r7, sp, #0
 800b08a:	60b9      	str	r1, [r7, #8]
 800b08c:	607a      	str	r2, [r7, #4]
 800b08e:	603b      	str	r3, [r7, #0]
 800b090:	4603      	mov	r3, r0
 800b092:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b094:	7bfb      	ldrb	r3, [r7, #15]
 800b096:	4a0a      	ldr	r2, [pc, #40]	@ (800b0c0 <disk_write+0x3c>)
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	4413      	add	r3, r2
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	68dc      	ldr	r4, [r3, #12]
 800b0a0:	7bfb      	ldrb	r3, [r7, #15]
 800b0a2:	4a07      	ldr	r2, [pc, #28]	@ (800b0c0 <disk_write+0x3c>)
 800b0a4:	4413      	add	r3, r2
 800b0a6:	7a18      	ldrb	r0, [r3, #8]
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	68b9      	ldr	r1, [r7, #8]
 800b0ae:	47a0      	blx	r4
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	75fb      	strb	r3, [r7, #23]
  return res;
 800b0b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	371c      	adds	r7, #28
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd90      	pop	{r4, r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	20002a8c 	.word	0x20002a8c

0800b0c4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	603a      	str	r2, [r7, #0]
 800b0ce:	71fb      	strb	r3, [r7, #7]
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b0d4:	79fb      	ldrb	r3, [r7, #7]
 800b0d6:	4a09      	ldr	r2, [pc, #36]	@ (800b0fc <disk_ioctl+0x38>)
 800b0d8:	009b      	lsls	r3, r3, #2
 800b0da:	4413      	add	r3, r2
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	691b      	ldr	r3, [r3, #16]
 800b0e0:	79fa      	ldrb	r2, [r7, #7]
 800b0e2:	4906      	ldr	r1, [pc, #24]	@ (800b0fc <disk_ioctl+0x38>)
 800b0e4:	440a      	add	r2, r1
 800b0e6:	7a10      	ldrb	r0, [r2, #8]
 800b0e8:	79b9      	ldrb	r1, [r7, #6]
 800b0ea:	683a      	ldr	r2, [r7, #0]
 800b0ec:	4798      	blx	r3
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	73fb      	strb	r3, [r7, #15]
  return res;
 800b0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3710      	adds	r7, #16
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	20002a8c 	.word	0x20002a8c

0800b100 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b100:	b480      	push	{r7}
 800b102:	b087      	sub	sp, #28
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800b114:	e007      	b.n	800b126 <mem_cpy+0x26>
		*d++ = *s++;
 800b116:	693a      	ldr	r2, [r7, #16]
 800b118:	1c53      	adds	r3, r2, #1
 800b11a:	613b      	str	r3, [r7, #16]
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	1c59      	adds	r1, r3, #1
 800b120:	6179      	str	r1, [r7, #20]
 800b122:	7812      	ldrb	r2, [r2, #0]
 800b124:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	1e5a      	subs	r2, r3, #1
 800b12a:	607a      	str	r2, [r7, #4]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1f2      	bne.n	800b116 <mem_cpy+0x16>
}
 800b130:	bf00      	nop
 800b132:	bf00      	nop
 800b134:	371c      	adds	r7, #28
 800b136:	46bd      	mov	sp, r7
 800b138:	bc80      	pop	{r7}
 800b13a:	4770      	bx	lr

0800b13c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b13c:	b480      	push	{r7}
 800b13e:	b087      	sub	sp, #28
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800b14c:	e005      	b.n	800b15a <mem_set+0x1e>
		*d++ = (BYTE)val;
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	1c5a      	adds	r2, r3, #1
 800b152:	617a      	str	r2, [r7, #20]
 800b154:	68ba      	ldr	r2, [r7, #8]
 800b156:	b2d2      	uxtb	r2, r2
 800b158:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	1e5a      	subs	r2, r3, #1
 800b15e:	607a      	str	r2, [r7, #4]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d1f4      	bne.n	800b14e <mem_set+0x12>
}
 800b164:	bf00      	nop
 800b166:	bf00      	nop
 800b168:	371c      	adds	r7, #28
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bc80      	pop	{r7}
 800b16e:	4770      	bx	lr

0800b170 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800b170:	b480      	push	{r7}
 800b172:	b089      	sub	sp, #36	@ 0x24
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	61fb      	str	r3, [r7, #28]
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b184:	2300      	movs	r3, #0
 800b186:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800b188:	bf00      	nop
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	1e5a      	subs	r2, r3, #1
 800b18e:	607a      	str	r2, [r7, #4]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d00d      	beq.n	800b1b0 <mem_cmp+0x40>
 800b194:	69fb      	ldr	r3, [r7, #28]
 800b196:	1c5a      	adds	r2, r3, #1
 800b198:	61fa      	str	r2, [r7, #28]
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	4619      	mov	r1, r3
 800b19e:	69bb      	ldr	r3, [r7, #24]
 800b1a0:	1c5a      	adds	r2, r3, #1
 800b1a2:	61ba      	str	r2, [r7, #24]
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	1acb      	subs	r3, r1, r3
 800b1a8:	617b      	str	r3, [r7, #20]
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d0ec      	beq.n	800b18a <mem_cmp+0x1a>
	return r;
 800b1b0:	697b      	ldr	r3, [r7, #20]
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3724      	adds	r7, #36	@ 0x24
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bc80      	pop	{r7}
 800b1ba:	4770      	bx	lr

0800b1bc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b1c6:	e002      	b.n	800b1ce <chk_chr+0x12>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	607b      	str	r3, [r7, #4]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d005      	beq.n	800b1e2 <chk_chr+0x26>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	461a      	mov	r2, r3
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d1f2      	bne.n	800b1c8 <chk_chr+0xc>
	return *str;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	781b      	ldrb	r3, [r3, #0]
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	370c      	adds	r7, #12
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bc80      	pop	{r7}
 800b1ee:	4770      	bx	lr

0800b1f0 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1fe:	68db      	ldr	r3, [r3, #12]
 800b200:	4618      	mov	r0, r3
 800b202:	f004 f81b 	bl	800f23c <ff_req_grant>
 800b206:	4603      	mov	r3, r0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3708      	adds	r7, #8
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	460b      	mov	r3, r1
 800b21a:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d012      	beq.n	800b248 <unlock_fs+0x38>
 800b222:	78fb      	ldrb	r3, [r7, #3]
 800b224:	2b0c      	cmp	r3, #12
 800b226:	d00f      	beq.n	800b248 <unlock_fs+0x38>
		res != FR_NOT_ENABLED &&
 800b228:	78fb      	ldrb	r3, [r7, #3]
 800b22a:	2b0b      	cmp	r3, #11
 800b22c:	d00c      	beq.n	800b248 <unlock_fs+0x38>
		res != FR_INVALID_DRIVE &&
 800b22e:	78fb      	ldrb	r3, [r7, #3]
 800b230:	2b09      	cmp	r3, #9
 800b232:	d009      	beq.n	800b248 <unlock_fs+0x38>
		res != FR_INVALID_OBJECT &&
 800b234:	78fb      	ldrb	r3, [r7, #3]
 800b236:	2b0f      	cmp	r3, #15
 800b238:	d006      	beq.n	800b248 <unlock_fs+0x38>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b240:	68db      	ldr	r3, [r3, #12]
 800b242:	4618      	mov	r0, r3
 800b244:	f004 f80f 	bl	800f266 <ff_rel_grant>
	}
}
 800b248:	bf00      	nop
 800b24a:	3708      	adds	r7, #8
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b250:	b480      	push	{r7}
 800b252:	b085      	sub	sp, #20
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b25a:	2300      	movs	r3, #0
 800b25c:	60bb      	str	r3, [r7, #8]
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	60fb      	str	r3, [r7, #12]
 800b262:	e03b      	b.n	800b2dc <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 800b264:	4931      	ldr	r1, [pc, #196]	@ (800b32c <chk_lock+0xdc>)
 800b266:	68fa      	ldr	r2, [r7, #12]
 800b268:	4613      	mov	r3, r2
 800b26a:	005b      	lsls	r3, r3, #1
 800b26c:	4413      	add	r3, r2
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	440b      	add	r3, r1
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d02c      	beq.n	800b2d2 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800b278:	492c      	ldr	r1, [pc, #176]	@ (800b32c <chk_lock+0xdc>)
 800b27a:	68fa      	ldr	r2, [r7, #12]
 800b27c:	4613      	mov	r3, r2
 800b27e:	005b      	lsls	r3, r3, #1
 800b280:	4413      	add	r3, r2
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	440b      	add	r3, r1
 800b286:	681a      	ldr	r2, [r3, #0]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	429a      	cmp	r2, r3
 800b292:	d120      	bne.n	800b2d6 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 800b294:	4925      	ldr	r1, [pc, #148]	@ (800b32c <chk_lock+0xdc>)
 800b296:	68fa      	ldr	r2, [r7, #12]
 800b298:	4613      	mov	r3, r2
 800b29a:	005b      	lsls	r3, r3, #1
 800b29c:	4413      	add	r3, r2
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	440b      	add	r3, r1
 800b2a2:	3304      	adds	r3, #4
 800b2a4:	681a      	ldr	r2, [r3, #0]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2ac:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d111      	bne.n	800b2d6 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800b2b2:	491e      	ldr	r1, [pc, #120]	@ (800b32c <chk_lock+0xdc>)
 800b2b4:	68fa      	ldr	r2, [r7, #12]
 800b2b6:	4613      	mov	r3, r2
 800b2b8:	005b      	lsls	r3, r3, #1
 800b2ba:	4413      	add	r3, r2
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	440b      	add	r3, r1
 800b2c0:	3308      	adds	r3, #8
 800b2c2:	881a      	ldrh	r2, [r3, #0]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2ca:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d102      	bne.n	800b2d6 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800b2d0:	e007      	b.n	800b2e2 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	3301      	adds	r3, #1
 800b2da:	60fb      	str	r3, [r7, #12]
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d9c0      	bls.n	800b264 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2b02      	cmp	r3, #2
 800b2e6:	d109      	bne.n	800b2fc <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d102      	bne.n	800b2f4 <chk_lock+0xa4>
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	2b02      	cmp	r3, #2
 800b2f2:	d101      	bne.n	800b2f8 <chk_lock+0xa8>
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	e013      	b.n	800b320 <chk_lock+0xd0>
 800b2f8:	2312      	movs	r3, #18
 800b2fa:	e011      	b.n	800b320 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d10b      	bne.n	800b31a <chk_lock+0xca>
 800b302:	490a      	ldr	r1, [pc, #40]	@ (800b32c <chk_lock+0xdc>)
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	4613      	mov	r3, r2
 800b308:	005b      	lsls	r3, r3, #1
 800b30a:	4413      	add	r3, r2
 800b30c:	009b      	lsls	r3, r3, #2
 800b30e:	440b      	add	r3, r1
 800b310:	330a      	adds	r3, #10
 800b312:	881b      	ldrh	r3, [r3, #0]
 800b314:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b318:	d101      	bne.n	800b31e <chk_lock+0xce>
 800b31a:	2310      	movs	r3, #16
 800b31c:	e000      	b.n	800b320 <chk_lock+0xd0>
 800b31e:	2300      	movs	r3, #0
}
 800b320:	4618      	mov	r0, r3
 800b322:	3714      	adds	r7, #20
 800b324:	46bd      	mov	sp, r7
 800b326:	bc80      	pop	{r7}
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop
 800b32c:	20002a74 	.word	0x20002a74

0800b330 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b336:	2300      	movs	r3, #0
 800b338:	607b      	str	r3, [r7, #4]
 800b33a:	e002      	b.n	800b342 <enq_lock+0x12>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	3301      	adds	r3, #1
 800b340:	607b      	str	r3, [r7, #4]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2b01      	cmp	r3, #1
 800b346:	d809      	bhi.n	800b35c <enq_lock+0x2c>
 800b348:	490a      	ldr	r1, [pc, #40]	@ (800b374 <enq_lock+0x44>)
 800b34a:	687a      	ldr	r2, [r7, #4]
 800b34c:	4613      	mov	r3, r2
 800b34e:	005b      	lsls	r3, r3, #1
 800b350:	4413      	add	r3, r2
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	440b      	add	r3, r1
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d1ef      	bne.n	800b33c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2b02      	cmp	r3, #2
 800b360:	bf14      	ite	ne
 800b362:	2301      	movne	r3, #1
 800b364:	2300      	moveq	r3, #0
 800b366:	b2db      	uxtb	r3, r3
}
 800b368:	4618      	mov	r0, r3
 800b36a:	370c      	adds	r7, #12
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bc80      	pop	{r7}
 800b370:	4770      	bx	lr
 800b372:	bf00      	nop
 800b374:	20002a74 	.word	0x20002a74

0800b378 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b378:	b480      	push	{r7}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b382:	2300      	movs	r3, #0
 800b384:	60fb      	str	r3, [r7, #12]
 800b386:	e02e      	b.n	800b3e6 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 800b388:	4958      	ldr	r1, [pc, #352]	@ (800b4ec <inc_lock+0x174>)
 800b38a:	68fa      	ldr	r2, [r7, #12]
 800b38c:	4613      	mov	r3, r2
 800b38e:	005b      	lsls	r3, r3, #1
 800b390:	4413      	add	r3, r2
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	440b      	add	r3, r1
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d11d      	bne.n	800b3e0 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 800b3a4:	4951      	ldr	r1, [pc, #324]	@ (800b4ec <inc_lock+0x174>)
 800b3a6:	68fa      	ldr	r2, [r7, #12]
 800b3a8:	4613      	mov	r3, r2
 800b3aa:	005b      	lsls	r3, r3, #1
 800b3ac:	4413      	add	r3, r2
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	440b      	add	r3, r1
 800b3b2:	3304      	adds	r3, #4
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3bc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d10e      	bne.n	800b3e0 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 800b3c2:	494a      	ldr	r1, [pc, #296]	@ (800b4ec <inc_lock+0x174>)
 800b3c4:	68fa      	ldr	r2, [r7, #12]
 800b3c6:	4613      	mov	r3, r2
 800b3c8:	005b      	lsls	r3, r3, #1
 800b3ca:	4413      	add	r3, r2
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	440b      	add	r3, r1
 800b3d0:	3308      	adds	r3, #8
 800b3d2:	881a      	ldrh	r2, [r3, #0]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3da:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d006      	beq.n	800b3ee <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	60fb      	str	r3, [r7, #12]
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d9cd      	bls.n	800b388 <inc_lock+0x10>
 800b3ec:	e000      	b.n	800b3f0 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 800b3ee:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2b02      	cmp	r3, #2
 800b3f4:	d148      	bne.n	800b488 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	60fb      	str	r3, [r7, #12]
 800b3fa:	e002      	b.n	800b402 <inc_lock+0x8a>
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	3301      	adds	r3, #1
 800b400:	60fb      	str	r3, [r7, #12]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2b01      	cmp	r3, #1
 800b406:	d809      	bhi.n	800b41c <inc_lock+0xa4>
 800b408:	4938      	ldr	r1, [pc, #224]	@ (800b4ec <inc_lock+0x174>)
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	4613      	mov	r3, r2
 800b40e:	005b      	lsls	r3, r3, #1
 800b410:	4413      	add	r3, r2
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	440b      	add	r3, r1
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d1ef      	bne.n	800b3fc <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2b02      	cmp	r3, #2
 800b420:	d101      	bne.n	800b426 <inc_lock+0xae>
 800b422:	2300      	movs	r3, #0
 800b424:	e05d      	b.n	800b4e2 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b42c:	6819      	ldr	r1, [r3, #0]
 800b42e:	482f      	ldr	r0, [pc, #188]	@ (800b4ec <inc_lock+0x174>)
 800b430:	68fa      	ldr	r2, [r7, #12]
 800b432:	4613      	mov	r3, r2
 800b434:	005b      	lsls	r3, r3, #1
 800b436:	4413      	add	r3, r2
 800b438:	009b      	lsls	r3, r3, #2
 800b43a:	4403      	add	r3, r0
 800b43c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b444:	6899      	ldr	r1, [r3, #8]
 800b446:	4829      	ldr	r0, [pc, #164]	@ (800b4ec <inc_lock+0x174>)
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	4613      	mov	r3, r2
 800b44c:	005b      	lsls	r3, r3, #1
 800b44e:	4413      	add	r3, r2
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	4403      	add	r3, r0
 800b454:	3304      	adds	r3, #4
 800b456:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b45e:	88d8      	ldrh	r0, [r3, #6]
 800b460:	4922      	ldr	r1, [pc, #136]	@ (800b4ec <inc_lock+0x174>)
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	4613      	mov	r3, r2
 800b466:	005b      	lsls	r3, r3, #1
 800b468:	4413      	add	r3, r2
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	440b      	add	r3, r1
 800b46e:	3308      	adds	r3, #8
 800b470:	4602      	mov	r2, r0
 800b472:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800b474:	491d      	ldr	r1, [pc, #116]	@ (800b4ec <inc_lock+0x174>)
 800b476:	68fa      	ldr	r2, [r7, #12]
 800b478:	4613      	mov	r3, r2
 800b47a:	005b      	lsls	r3, r3, #1
 800b47c:	4413      	add	r3, r2
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	440b      	add	r3, r1
 800b482:	330a      	adds	r3, #10
 800b484:	2200      	movs	r2, #0
 800b486:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00c      	beq.n	800b4a8 <inc_lock+0x130>
 800b48e:	4917      	ldr	r1, [pc, #92]	@ (800b4ec <inc_lock+0x174>)
 800b490:	68fa      	ldr	r2, [r7, #12]
 800b492:	4613      	mov	r3, r2
 800b494:	005b      	lsls	r3, r3, #1
 800b496:	4413      	add	r3, r2
 800b498:	009b      	lsls	r3, r3, #2
 800b49a:	440b      	add	r3, r1
 800b49c:	330a      	adds	r3, #10
 800b49e:	881b      	ldrh	r3, [r3, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d001      	beq.n	800b4a8 <inc_lock+0x130>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	e01c      	b.n	800b4e2 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d10b      	bne.n	800b4c6 <inc_lock+0x14e>
 800b4ae:	490f      	ldr	r1, [pc, #60]	@ (800b4ec <inc_lock+0x174>)
 800b4b0:	68fa      	ldr	r2, [r7, #12]
 800b4b2:	4613      	mov	r3, r2
 800b4b4:	005b      	lsls	r3, r3, #1
 800b4b6:	4413      	add	r3, r2
 800b4b8:	009b      	lsls	r3, r3, #2
 800b4ba:	440b      	add	r3, r1
 800b4bc:	330a      	adds	r3, #10
 800b4be:	881b      	ldrh	r3, [r3, #0]
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	b299      	uxth	r1, r3
 800b4c4:	e001      	b.n	800b4ca <inc_lock+0x152>
 800b4c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b4ca:	4808      	ldr	r0, [pc, #32]	@ (800b4ec <inc_lock+0x174>)
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	005b      	lsls	r3, r3, #1
 800b4d2:	4413      	add	r3, r2
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	4403      	add	r3, r0
 800b4d8:	330a      	adds	r3, #10
 800b4da:	460a      	mov	r2, r1
 800b4dc:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	3301      	adds	r3, #1
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3714      	adds	r7, #20
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bc80      	pop	{r7}
 800b4ea:	4770      	bx	lr
 800b4ec:	20002a74 	.word	0x20002a74

0800b4f0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b085      	sub	sp, #20
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	60fb      	str	r3, [r7, #12]
 800b4fc:	e016      	b.n	800b52c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b4fe:	4910      	ldr	r1, [pc, #64]	@ (800b540 <clear_lock+0x50>)
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	4613      	mov	r3, r2
 800b504:	005b      	lsls	r3, r3, #1
 800b506:	4413      	add	r3, r2
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	440b      	add	r3, r1
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	429a      	cmp	r2, r3
 800b512:	d108      	bne.n	800b526 <clear_lock+0x36>
 800b514:	490a      	ldr	r1, [pc, #40]	@ (800b540 <clear_lock+0x50>)
 800b516:	68fa      	ldr	r2, [r7, #12]
 800b518:	4613      	mov	r3, r2
 800b51a:	005b      	lsls	r3, r3, #1
 800b51c:	4413      	add	r3, r2
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	440b      	add	r3, r1
 800b522:	2200      	movs	r2, #0
 800b524:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	3301      	adds	r3, #1
 800b52a:	60fb      	str	r3, [r7, #12]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d9e5      	bls.n	800b4fe <clear_lock+0xe>
	}
}
 800b532:	bf00      	nop
 800b534:	bf00      	nop
 800b536:	3714      	adds	r7, #20
 800b538:	46bd      	mov	sp, r7
 800b53a:	bc80      	pop	{r7}
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	20002a74 	.word	0x20002a74

0800b544 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b54c:	2300      	movs	r3, #0
 800b54e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b556:	791b      	ldrb	r3, [r3, #4]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d040      	beq.n	800b5de <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b564:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b56c:	7858      	ldrb	r0, [r3, #1]
 800b56e:	6879      	ldr	r1, [r7, #4]
 800b570:	2301      	movs	r3, #1
 800b572:	697a      	ldr	r2, [r7, #20]
 800b574:	f7ff fd86 	bl	800b084 <disk_write>
 800b578:	4603      	mov	r3, r0
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d002      	beq.n	800b584 <sync_window+0x40>
			res = FR_DISK_ERR;
 800b57e:	2301      	movs	r3, #1
 800b580:	73fb      	strb	r3, [r7, #15]
 800b582:	e02c      	b.n	800b5de <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b58a:	2200      	movs	r2, #0
 800b58c:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b596:	697a      	ldr	r2, [r7, #20]
 800b598:	1ad2      	subs	r2, r2, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5a0:	69db      	ldr	r3, [r3, #28]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d21b      	bcs.n	800b5de <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5ac:	78db      	ldrb	r3, [r3, #3]
 800b5ae:	613b      	str	r3, [r7, #16]
 800b5b0:	e012      	b.n	800b5d8 <sync_window+0x94>
					wsect += fs->fsize;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5b8:	69db      	ldr	r3, [r3, #28]
 800b5ba:	697a      	ldr	r2, [r7, #20]
 800b5bc:	4413      	add	r3, r2
 800b5be:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5c6:	7858      	ldrb	r0, [r3, #1]
 800b5c8:	6879      	ldr	r1, [r7, #4]
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	697a      	ldr	r2, [r7, #20]
 800b5ce:	f7ff fd59 	bl	800b084 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	3b01      	subs	r3, #1
 800b5d6:	613b      	str	r3, [r7, #16]
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	2b01      	cmp	r3, #1
 800b5dc:	d8e9      	bhi.n	800b5b2 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 800b5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3718      	adds	r7, #24
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5fe:	683a      	ldr	r2, [r7, #0]
 800b600:	429a      	cmp	r2, r3
 800b602:	d01e      	beq.n	800b642 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f7ff ff9d 	bl	800b544 <sync_window>
 800b60a:	4603      	mov	r3, r0
 800b60c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b60e:	7bfb      	ldrb	r3, [r7, #15]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d116      	bne.n	800b642 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b61a:	7858      	ldrb	r0, [r3, #1]
 800b61c:	6879      	ldr	r1, [r7, #4]
 800b61e:	2301      	movs	r3, #1
 800b620:	683a      	ldr	r2, [r7, #0]
 800b622:	f7ff fd0f 	bl	800b044 <disk_read>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d004      	beq.n	800b636 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b62c:	f04f 33ff 	mov.w	r3, #4294967295
 800b630:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b632:	2301      	movs	r3, #1
 800b634:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b63c:	461a      	mov	r2, r3
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	6313      	str	r3, [r2, #48]	@ 0x30
		}
	}
	return res;
 800b642:	7bfb      	ldrb	r3, [r7, #15]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3710      	adds	r7, #16
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f7ff ff75 	bl	800b544 <sync_window>
 800b65a:	4603      	mov	r3, r0
 800b65c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b65e:	7bfb      	ldrb	r3, [r7, #15]
 800b660:	2b00      	cmp	r3, #0
 800b662:	f040 80ad 	bne.w	800b7c0 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	2b03      	cmp	r3, #3
 800b670:	f040 8098 	bne.w	800b7a4 <sync_fs+0x158>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b67a:	795b      	ldrb	r3, [r3, #5]
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	f040 8091 	bne.w	800b7a4 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b68a:	895b      	ldrh	r3, [r3, #10]
 800b68c:	461a      	mov	r2, r3
 800b68e:	2100      	movs	r1, #0
 800b690:	f7ff fd54 	bl	800b13c <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2255      	movs	r2, #85	@ 0x55
 800b698:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	22aa      	movs	r2, #170	@ 0xaa
 800b6a0:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2252      	movs	r2, #82	@ 0x52
 800b6a8:	701a      	strb	r2, [r3, #0]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2252      	movs	r2, #82	@ 0x52
 800b6ae:	705a      	strb	r2, [r3, #1]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2261      	movs	r2, #97	@ 0x61
 800b6b4:	709a      	strb	r2, [r3, #2]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2241      	movs	r2, #65	@ 0x41
 800b6ba:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2272      	movs	r2, #114	@ 0x72
 800b6c0:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2272      	movs	r2, #114	@ 0x72
 800b6c8:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2241      	movs	r2, #65	@ 0x41
 800b6d0:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2261      	movs	r2, #97	@ 0x61
 800b6d8:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b6e2:	695b      	ldr	r3, [r3, #20]
 800b6e4:	b2da      	uxtb	r2, r3
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b6f2:	695b      	ldr	r3, [r3, #20]
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	0a1b      	lsrs	r3, r3, #8
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	b2da      	uxtb	r2, r3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b708:	695b      	ldr	r3, [r3, #20]
 800b70a:	0c1b      	lsrs	r3, r3, #16
 800b70c:	b2da      	uxtb	r2, r3
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b71a:	695b      	ldr	r3, [r3, #20]
 800b71c:	0e1b      	lsrs	r3, r3, #24
 800b71e:	b2da      	uxtb	r2, r3
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b72c:	691b      	ldr	r3, [r3, #16]
 800b72e:	b2da      	uxtb	r2, r3
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b73c:	691b      	ldr	r3, [r3, #16]
 800b73e:	b29b      	uxth	r3, r3
 800b740:	0a1b      	lsrs	r3, r3, #8
 800b742:	b29b      	uxth	r3, r3
 800b744:	b2da      	uxtb	r2, r3
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b752:	691b      	ldr	r3, [r3, #16]
 800b754:	0c1b      	lsrs	r3, r3, #16
 800b756:	b2da      	uxtb	r2, r3
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b764:	691b      	ldr	r3, [r3, #16]
 800b766:	0e1b      	lsrs	r3, r3, #24
 800b768:	b2da      	uxtb	r2, r3
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b776:	6a1b      	ldr	r3, [r3, #32]
 800b778:	3301      	adds	r3, #1
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b780:	6313      	str	r3, [r2, #48]	@ 0x30
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b788:	7858      	ldrb	r0, [r3, #1]
 800b78a:	6879      	ldr	r1, [r7, #4]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b792:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b794:	2301      	movs	r3, #1
 800b796:	f7ff fc75 	bl	800b084 <disk_write>
			fs->fsi_flag = 0;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7aa:	785b      	ldrb	r3, [r3, #1]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	2100      	movs	r1, #0
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7ff fc87 	bl	800b0c4 <disk_ioctl>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d001      	beq.n	800b7c0 <sync_fs+0x174>
			res = FR_DISK_ERR;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b7c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3710      	adds	r7, #16
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}

0800b7ca <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b7ca:	b480      	push	{r7}
 800b7cc:	b083      	sub	sp, #12
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
 800b7d2:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	3b02      	subs	r3, #2
 800b7d8:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7e0:	699b      	ldr	r3, [r3, #24]
 800b7e2:	3b02      	subs	r3, #2
 800b7e4:	683a      	ldr	r2, [r7, #0]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d301      	bcc.n	800b7ee <clust2sect+0x24>
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	e00c      	b.n	800b808 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7f4:	789b      	ldrb	r3, [r3, #2]
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	fb03 f202 	mul.w	r2, r3, r2
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b806:	4413      	add	r3, r2
}
 800b808:	4618      	mov	r0, r3
 800b80a:	370c      	adds	r7, #12
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bc80      	pop	{r7}
 800b810:	4770      	bx	lr

0800b812 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800b812:	b580      	push	{r7, lr}
 800b814:	b086      	sub	sp, #24
 800b816:	af00      	add	r7, sp, #0
 800b818:	6078      	str	r0, [r7, #4]
 800b81a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d906      	bls.n	800b830 <get_fat+0x1e>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b828:	699b      	ldr	r3, [r3, #24]
 800b82a:	683a      	ldr	r2, [r7, #0]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d302      	bcc.n	800b836 <get_fat+0x24>
		val = 1;	/* Internal error */
 800b830:	2301      	movs	r3, #1
 800b832:	617b      	str	r3, [r7, #20]
 800b834:	e0e3      	b.n	800b9fe <get_fat+0x1ec>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b836:	f04f 33ff 	mov.w	r3, #4294967295
 800b83a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	2b03      	cmp	r3, #3
 800b846:	f000 8097 	beq.w	800b978 <get_fat+0x166>
 800b84a:	2b03      	cmp	r3, #3
 800b84c:	f300 80cd 	bgt.w	800b9ea <get_fat+0x1d8>
 800b850:	2b01      	cmp	r3, #1
 800b852:	d002      	beq.n	800b85a <get_fat+0x48>
 800b854:	2b02      	cmp	r3, #2
 800b856:	d05e      	beq.n	800b916 <get_fat+0x104>
 800b858:	e0c7      	b.n	800b9ea <get_fat+0x1d8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	60fb      	str	r3, [r7, #12]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	085b      	lsrs	r3, r3, #1
 800b862:	68fa      	ldr	r2, [r7, #12]
 800b864:	4413      	add	r3, r2
 800b866:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b86e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b876:	895b      	ldrh	r3, [r3, #10]
 800b878:	4619      	mov	r1, r3
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b880:	4413      	add	r3, r2
 800b882:	4619      	mov	r1, r3
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f7ff feaf 	bl	800b5e8 <move_window>
 800b88a:	4603      	mov	r3, r0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f040 80af 	bne.w	800b9f0 <get_fat+0x1de>
			wc = fs->win.d8[bc++ % SS(fs)];
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	1c5a      	adds	r2, r3, #1
 800b896:	60fa      	str	r2, [r7, #12]
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b89e:	8952      	ldrh	r2, [r2, #10]
 800b8a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8a4:	fb01 f202 	mul.w	r2, r1, r2
 800b8a8:	1a9b      	subs	r3, r3, r2
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	5cd3      	ldrb	r3, [r2, r3]
 800b8ae:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b8b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b8be:	895b      	ldrh	r3, [r3, #10]
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	fbb3 f3f1 	udiv	r3, r3, r1
 800b8c8:	4413      	add	r3, r2
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f7ff fe8b 	bl	800b5e8 <move_window>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f040 808d 	bne.w	800b9f4 <get_fat+0x1e2>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b8e0:	895b      	ldrh	r3, [r3, #10]
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8ea:	fb01 f202 	mul.w	r2, r1, r2
 800b8ee:	1a9b      	subs	r3, r3, r2
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	5cd3      	ldrb	r3, [r2, r3]
 800b8f4:	021b      	lsls	r3, r3, #8
 800b8f6:	68ba      	ldr	r2, [r7, #8]
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	f003 0301 	and.w	r3, r3, #1
 800b902:	2b00      	cmp	r3, #0
 800b904:	d002      	beq.n	800b90c <get_fat+0xfa>
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	091b      	lsrs	r3, r3, #4
 800b90a:	e002      	b.n	800b912 <get_fat+0x100>
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b912:	617b      	str	r3, [r7, #20]
			break;
 800b914:	e073      	b.n	800b9fe <get_fat+0x1ec>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b91c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b924:	895b      	ldrh	r3, [r3, #10]
 800b926:	085b      	lsrs	r3, r3, #1
 800b928:	b29b      	uxth	r3, r3
 800b92a:	4619      	mov	r1, r3
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b932:	4413      	add	r3, r2
 800b934:	4619      	mov	r1, r3
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f7ff fe56 	bl	800b5e8 <move_window>
 800b93c:	4603      	mov	r3, r0
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d15a      	bne.n	800b9f8 <get_fat+0x1e6>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	005b      	lsls	r3, r3, #1
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b94c:	8952      	ldrh	r2, [r2, #10]
 800b94e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b952:	fb01 f202 	mul.w	r2, r1, r2
 800b956:	1a9b      	subs	r3, r3, r2
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	4413      	add	r3, r2
 800b95c:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	3301      	adds	r3, #1
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	021b      	lsls	r3, r3, #8
 800b966:	b21a      	sxth	r2, r3
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	b21b      	sxth	r3, r3
 800b96e:	4313      	orrs	r3, r2
 800b970:	b21b      	sxth	r3, r3
 800b972:	b29b      	uxth	r3, r3
 800b974:	617b      	str	r3, [r7, #20]
			break;
 800b976:	e042      	b.n	800b9fe <get_fat+0x1ec>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b97e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b986:	895b      	ldrh	r3, [r3, #10]
 800b988:	089b      	lsrs	r3, r3, #2
 800b98a:	b29b      	uxth	r3, r3
 800b98c:	4619      	mov	r1, r3
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	fbb3 f3f1 	udiv	r3, r3, r1
 800b994:	4413      	add	r3, r2
 800b996:	4619      	mov	r1, r3
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f7ff fe25 	bl	800b5e8 <move_window>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d12b      	bne.n	800b9fc <get_fat+0x1ea>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	009b      	lsls	r3, r3, #2
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b9ae:	8952      	ldrh	r2, [r2, #10]
 800b9b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b9b4:	fb01 f202 	mul.w	r2, r1, r2
 800b9b8:	1a9b      	subs	r3, r3, r2
 800b9ba:	687a      	ldr	r2, [r7, #4]
 800b9bc:	4413      	add	r3, r2
 800b9be:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	3303      	adds	r3, #3
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	061a      	lsls	r2, r3, #24
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	3302      	adds	r3, #2
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	041b      	lsls	r3, r3, #16
 800b9d0:	431a      	orrs	r2, r3
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	021b      	lsls	r3, r3, #8
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	693a      	ldr	r2, [r7, #16]
 800b9de:	7812      	ldrb	r2, [r2, #0]
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b9e6:	617b      	str	r3, [r7, #20]
			break;
 800b9e8:	e009      	b.n	800b9fe <get_fat+0x1ec>

		default:
			val = 1;	/* Internal error */
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	617b      	str	r3, [r7, #20]
 800b9ee:	e006      	b.n	800b9fe <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b9f0:	bf00      	nop
 800b9f2:	e004      	b.n	800b9fe <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b9f4:	bf00      	nop
 800b9f6:	e002      	b.n	800b9fe <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b9f8:	bf00      	nop
 800b9fa:	e000      	b.n	800b9fe <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b9fc:	bf00      	nop
		}
	}

	return val;
 800b9fe:	697b      	ldr	r3, [r7, #20]
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3718      	adds	r7, #24
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b088      	sub	sp, #32
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	d906      	bls.n	800ba28 <put_fat+0x20>
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ba20:	699b      	ldr	r3, [r3, #24]
 800ba22:	68ba      	ldr	r2, [r7, #8]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d302      	bcc.n	800ba2e <put_fat+0x26>
		res = FR_INT_ERR;
 800ba28:	2302      	movs	r3, #2
 800ba2a:	77fb      	strb	r3, [r7, #31]
 800ba2c:	e13a      	b.n	800bca4 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	2b03      	cmp	r3, #3
 800ba38:	f000 80d0 	beq.w	800bbdc <put_fat+0x1d4>
 800ba3c:	2b03      	cmp	r3, #3
 800ba3e:	f300 8127 	bgt.w	800bc90 <put_fat+0x288>
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d003      	beq.n	800ba4e <put_fat+0x46>
 800ba46:	2b02      	cmp	r3, #2
 800ba48:	f000 808f 	beq.w	800bb6a <put_fat+0x162>
 800ba4c:	e120      	b.n	800bc90 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	617b      	str	r3, [r7, #20]
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	085b      	lsrs	r3, r3, #1
 800ba56:	697a      	ldr	r2, [r7, #20]
 800ba58:	4413      	add	r3, r2
 800ba5a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ba62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ba6a:	895b      	ldrh	r3, [r3, #10]
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba74:	4413      	add	r3, r2
 800ba76:	4619      	mov	r1, r3
 800ba78:	68f8      	ldr	r0, [r7, #12]
 800ba7a:	f7ff fdb5 	bl	800b5e8 <move_window>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ba82:	7ffb      	ldrb	r3, [r7, #31]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	f040 8106 	bne.w	800bc96 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	1c5a      	adds	r2, r3, #1
 800ba8e:	617a      	str	r2, [r7, #20]
 800ba90:	68fa      	ldr	r2, [r7, #12]
 800ba92:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ba96:	8952      	ldrh	r2, [r2, #10]
 800ba98:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba9c:	fb01 f202 	mul.w	r2, r1, r2
 800baa0:	1a9b      	subs	r3, r3, r2
 800baa2:	68fa      	ldr	r2, [r7, #12]
 800baa4:	4413      	add	r3, r2
 800baa6:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	f003 0301 	and.w	r3, r3, #1
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00d      	beq.n	800bace <put_fat+0xc6>
 800bab2:	69bb      	ldr	r3, [r7, #24]
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	b25b      	sxtb	r3, r3
 800bab8:	f003 030f 	and.w	r3, r3, #15
 800babc:	b25a      	sxtb	r2, r3
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	011b      	lsls	r3, r3, #4
 800bac4:	b25b      	sxtb	r3, r3
 800bac6:	4313      	orrs	r3, r2
 800bac8:	b25b      	sxtb	r3, r3
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	e001      	b.n	800bad2 <put_fat+0xca>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	b2db      	uxtb	r3, r3
 800bad2:	69ba      	ldr	r2, [r7, #24]
 800bad4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800badc:	2201      	movs	r2, #1
 800bade:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bae6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800baee:	895b      	ldrh	r3, [r3, #10]
 800baf0:	4619      	mov	r1, r3
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	fbb3 f3f1 	udiv	r3, r3, r1
 800baf8:	4413      	add	r3, r2
 800bafa:	4619      	mov	r1, r3
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	f7ff fd73 	bl	800b5e8 <move_window>
 800bb02:	4603      	mov	r3, r0
 800bb04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bb06:	7ffb      	ldrb	r3, [r7, #31]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	f040 80c6 	bne.w	800bc9a <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bb14:	895b      	ldrh	r3, [r3, #10]
 800bb16:	461a      	mov	r2, r3
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb1e:	fb01 f202 	mul.w	r2, r1, r2
 800bb22:	1a9b      	subs	r3, r3, r2
 800bb24:	68fa      	ldr	r2, [r7, #12]
 800bb26:	4413      	add	r3, r2
 800bb28:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	f003 0301 	and.w	r3, r3, #1
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d003      	beq.n	800bb3c <put_fat+0x134>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	091b      	lsrs	r3, r3, #4
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	e00e      	b.n	800bb5a <put_fat+0x152>
 800bb3c:	69bb      	ldr	r3, [r7, #24]
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	b25b      	sxtb	r3, r3
 800bb42:	f023 030f 	bic.w	r3, r3, #15
 800bb46:	b25a      	sxtb	r2, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	0a1b      	lsrs	r3, r3, #8
 800bb4c:	b25b      	sxtb	r3, r3
 800bb4e:	f003 030f 	and.w	r3, r3, #15
 800bb52:	b25b      	sxtb	r3, r3
 800bb54:	4313      	orrs	r3, r2
 800bb56:	b25b      	sxtb	r3, r3
 800bb58:	b2db      	uxtb	r3, r3
 800bb5a:	69ba      	ldr	r2, [r7, #24]
 800bb5c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bb64:	2201      	movs	r2, #1
 800bb66:	711a      	strb	r2, [r3, #4]
			break;
 800bb68:	e09c      	b.n	800bca4 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bb70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bb78:	895b      	ldrh	r3, [r3, #10]
 800bb7a:	085b      	lsrs	r3, r3, #1
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	4619      	mov	r1, r3
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb86:	4413      	add	r3, r2
 800bb88:	4619      	mov	r1, r3
 800bb8a:	68f8      	ldr	r0, [r7, #12]
 800bb8c:	f7ff fd2c 	bl	800b5e8 <move_window>
 800bb90:	4603      	mov	r3, r0
 800bb92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bb94:	7ffb      	ldrb	r3, [r7, #31]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	f040 8081 	bne.w	800bc9e <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	005b      	lsls	r3, r3, #1
 800bba0:	68fa      	ldr	r2, [r7, #12]
 800bba2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800bba6:	8952      	ldrh	r2, [r2, #10]
 800bba8:	fbb3 f1f2 	udiv	r1, r3, r2
 800bbac:	fb01 f202 	mul.w	r2, r1, r2
 800bbb0:	1a9b      	subs	r3, r3, r2
 800bbb2:	68fa      	ldr	r2, [r7, #12]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	b2da      	uxtb	r2, r3
 800bbbc:	69bb      	ldr	r3, [r7, #24]
 800bbbe:	701a      	strb	r2, [r3, #0]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	b29b      	uxth	r3, r3
 800bbc4:	0a1b      	lsrs	r3, r3, #8
 800bbc6:	b29a      	uxth	r2, r3
 800bbc8:	69bb      	ldr	r3, [r7, #24]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	b2d2      	uxtb	r2, r2
 800bbce:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	711a      	strb	r2, [r3, #4]
			break;
 800bbda:	e063      	b.n	800bca4 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bbe2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bbea:	895b      	ldrh	r3, [r3, #10]
 800bbec:	089b      	lsrs	r3, r3, #2
 800bbee:	b29b      	uxth	r3, r3
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	fbb3 f3f1 	udiv	r3, r3, r1
 800bbf8:	4413      	add	r3, r2
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	68f8      	ldr	r0, [r7, #12]
 800bbfe:	f7ff fcf3 	bl	800b5e8 <move_window>
 800bc02:	4603      	mov	r3, r0
 800bc04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bc06:	7ffb      	ldrb	r3, [r7, #31]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d14a      	bne.n	800bca2 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	009b      	lsls	r3, r3, #2
 800bc10:	68fa      	ldr	r2, [r7, #12]
 800bc12:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800bc16:	8952      	ldrh	r2, [r2, #10]
 800bc18:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc1c:	fb01 f202 	mul.w	r2, r1, r2
 800bc20:	1a9b      	subs	r3, r3, r2
 800bc22:	68fa      	ldr	r2, [r7, #12]
 800bc24:	4413      	add	r3, r2
 800bc26:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800bc28:	69bb      	ldr	r3, [r7, #24]
 800bc2a:	3303      	adds	r3, #3
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	061a      	lsls	r2, r3, #24
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	3302      	adds	r3, #2
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	041b      	lsls	r3, r3, #16
 800bc38:	431a      	orrs	r2, r3
 800bc3a:	69bb      	ldr	r3, [r7, #24]
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	021b      	lsls	r3, r3, #8
 800bc42:	4313      	orrs	r3, r2
 800bc44:	69ba      	ldr	r2, [r7, #24]
 800bc46:	7812      	ldrb	r2, [r2, #0]
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	4313      	orrs	r3, r2
 800bc52:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	b2da      	uxtb	r2, r3
 800bc58:	69bb      	ldr	r3, [r7, #24]
 800bc5a:	701a      	strb	r2, [r3, #0]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	0a1b      	lsrs	r3, r3, #8
 800bc62:	b29a      	uxth	r2, r3
 800bc64:	69bb      	ldr	r3, [r7, #24]
 800bc66:	3301      	adds	r3, #1
 800bc68:	b2d2      	uxtb	r2, r2
 800bc6a:	701a      	strb	r2, [r3, #0]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	0c1a      	lsrs	r2, r3, #16
 800bc70:	69bb      	ldr	r3, [r7, #24]
 800bc72:	3302      	adds	r3, #2
 800bc74:	b2d2      	uxtb	r2, r2
 800bc76:	701a      	strb	r2, [r3, #0]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	0e1a      	lsrs	r2, r3, #24
 800bc7c:	69bb      	ldr	r3, [r7, #24]
 800bc7e:	3303      	adds	r3, #3
 800bc80:	b2d2      	uxtb	r2, r2
 800bc82:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	711a      	strb	r2, [r3, #4]
			break;
 800bc8e:	e009      	b.n	800bca4 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 800bc90:	2302      	movs	r3, #2
 800bc92:	77fb      	strb	r3, [r7, #31]
 800bc94:	e006      	b.n	800bca4 <put_fat+0x29c>
			if (res != FR_OK) break;
 800bc96:	bf00      	nop
 800bc98:	e004      	b.n	800bca4 <put_fat+0x29c>
			if (res != FR_OK) break;
 800bc9a:	bf00      	nop
 800bc9c:	e002      	b.n	800bca4 <put_fat+0x29c>
			if (res != FR_OK) break;
 800bc9e:	bf00      	nop
 800bca0:	e000      	b.n	800bca4 <put_fat+0x29c>
			if (res != FR_OK) break;
 800bca2:	bf00      	nop
		}
	}

	return res;
 800bca4:	7ffb      	ldrb	r3, [r7, #31]
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3720      	adds	r7, #32
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}

0800bcae <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b084      	sub	sp, #16
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
 800bcb6:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	2b01      	cmp	r3, #1
 800bcbc:	d906      	bls.n	800bccc <remove_chain+0x1e>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bcc4:	699b      	ldr	r3, [r3, #24]
 800bcc6:	683a      	ldr	r2, [r7, #0]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d302      	bcc.n	800bcd2 <remove_chain+0x24>
		res = FR_INT_ERR;
 800bccc:	2302      	movs	r3, #2
 800bcce:	73fb      	strb	r3, [r7, #15]
 800bcd0:	e049      	b.n	800bd66 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800bcd6:	e03b      	b.n	800bd50 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800bcd8:	6839      	ldr	r1, [r7, #0]
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f7ff fd99 	bl	800b812 <get_fat>
 800bce0:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d03b      	beq.n	800bd60 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d102      	bne.n	800bcf4 <remove_chain+0x46>
 800bcee:	2302      	movs	r3, #2
 800bcf0:	73fb      	strb	r3, [r7, #15]
 800bcf2:	e038      	b.n	800bd66 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcfa:	d102      	bne.n	800bd02 <remove_chain+0x54>
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	73fb      	strb	r3, [r7, #15]
 800bd00:	e031      	b.n	800bd66 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800bd02:	2200      	movs	r2, #0
 800bd04:	6839      	ldr	r1, [r7, #0]
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f7ff fe7e 	bl	800ba08 <put_fat>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800bd10:	7bfb      	ldrb	r3, [r7, #15]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d126      	bne.n	800bd64 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd1c:	695b      	ldr	r3, [r3, #20]
 800bd1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd22:	d013      	beq.n	800bd4c <remove_chain+0x9e>
				fs->free_clust++;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd2a:	695b      	ldr	r3, [r3, #20]
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800bd34:	6153      	str	r3, [r2, #20]
				fs->fsi_flag |= 1;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd3c:	795b      	ldrb	r3, [r3, #5]
 800bd3e:	f043 0301 	orr.w	r3, r3, #1
 800bd42:	b2da      	uxtb	r2, r3
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd4a:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd56:	699b      	ldr	r3, [r3, #24]
 800bd58:	683a      	ldr	r2, [r7, #0]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d3bc      	bcc.n	800bcd8 <remove_chain+0x2a>
 800bd5e:	e002      	b.n	800bd66 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 800bd60:	bf00      	nop
 800bd62:	e000      	b.n	800bd66 <remove_chain+0xb8>
			if (res != FR_OK) break;
 800bd64:	bf00      	nop
		}
	}

	return res;
 800bd66:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3710      	adds	r7, #16
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b086      	sub	sp, #24
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d111      	bne.n	800bda4 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd86:	691b      	ldr	r3, [r3, #16]
 800bd88:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d006      	beq.n	800bd9e <create_chain+0x2e>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd96:	699b      	ldr	r3, [r3, #24]
 800bd98:	693a      	ldr	r2, [r7, #16]
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d31d      	bcc.n	800bdda <create_chain+0x6a>
 800bd9e:	2301      	movs	r3, #1
 800bda0:	613b      	str	r3, [r7, #16]
 800bda2:	e01a      	b.n	800bdda <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800bda4:	6839      	ldr	r1, [r7, #0]
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f7ff fd33 	bl	800b812 <get_fat>
 800bdac:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	d801      	bhi.n	800bdb8 <create_chain+0x48>
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	e07f      	b.n	800beb8 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdbe:	d101      	bne.n	800bdc4 <create_chain+0x54>
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	e079      	b.n	800beb8 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bdca:	699b      	ldr	r3, [r3, #24]
 800bdcc:	68ba      	ldr	r2, [r7, #8]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d201      	bcs.n	800bdd6 <create_chain+0x66>
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	e070      	b.n	800beb8 <create_chain+0x148>
		scl = clst;
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	3301      	adds	r3, #1
 800bde2:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bdea:	699b      	ldr	r3, [r3, #24]
 800bdec:	697a      	ldr	r2, [r7, #20]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d307      	bcc.n	800be02 <create_chain+0x92>
			ncl = 2;
 800bdf2:	2302      	movs	r3, #2
 800bdf4:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800bdf6:	697a      	ldr	r2, [r7, #20]
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d901      	bls.n	800be02 <create_chain+0x92>
 800bdfe:	2300      	movs	r3, #0
 800be00:	e05a      	b.n	800beb8 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800be02:	6979      	ldr	r1, [r7, #20]
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f7ff fd04 	bl	800b812 <get_fat>
 800be0a:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d00e      	beq.n	800be30 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be18:	d002      	beq.n	800be20 <create_chain+0xb0>
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	2b01      	cmp	r3, #1
 800be1e:	d101      	bne.n	800be24 <create_chain+0xb4>
			return cs;
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	e049      	b.n	800beb8 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 800be24:	697a      	ldr	r2, [r7, #20]
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d1d8      	bne.n	800bdde <create_chain+0x6e>
 800be2c:	2300      	movs	r3, #0
 800be2e:	e043      	b.n	800beb8 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 800be30:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800be32:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 800be36:	6979      	ldr	r1, [r7, #20]
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f7ff fde5 	bl	800ba08 <put_fat>
 800be3e:	4603      	mov	r3, r0
 800be40:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800be42:	7bfb      	ldrb	r3, [r7, #15]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d109      	bne.n	800be5c <create_chain+0xec>
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d006      	beq.n	800be5c <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800be4e:	697a      	ldr	r2, [r7, #20]
 800be50:	6839      	ldr	r1, [r7, #0]
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f7ff fdd8 	bl	800ba08 <put_fat>
 800be58:	4603      	mov	r3, r0
 800be5a:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800be5c:	7bfb      	ldrb	r3, [r7, #15]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d121      	bne.n	800bea6 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800be68:	461a      	mov	r2, r3
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	6113      	str	r3, [r2, #16]
		if (fs->free_clust != 0xFFFFFFFF) {
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800be74:	695b      	ldr	r3, [r3, #20]
 800be76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be7a:	d01c      	beq.n	800beb6 <create_chain+0x146>
			fs->free_clust--;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800be82:	695b      	ldr	r3, [r3, #20]
 800be84:	3b01      	subs	r3, #1
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800be8c:	6153      	str	r3, [r2, #20]
			fs->fsi_flag |= 1;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800be94:	795b      	ldrb	r3, [r3, #5]
 800be96:	f043 0301 	orr.w	r3, r3, #1
 800be9a:	b2da      	uxtb	r2, r3
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bea2:	715a      	strb	r2, [r3, #5]
 800bea4:	e007      	b.n	800beb6 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800bea6:	7bfb      	ldrb	r3, [r7, #15]
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d102      	bne.n	800beb2 <create_chain+0x142>
 800beac:	f04f 33ff 	mov.w	r3, #4294967295
 800beb0:	e000      	b.n	800beb4 <create_chain+0x144>
 800beb2:	2301      	movs	r3, #1
 800beb4:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800beb6:	697b      	ldr	r3, [r7, #20]
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3718      	adds	r7, #24
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b087      	sub	sp, #28
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bed2:	3304      	adds	r3, #4
 800bed4:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bee2:	895b      	ldrh	r3, [r3, #10]
 800bee4:	461a      	mov	r2, r3
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	fbb3 f3f2 	udiv	r3, r3, r2
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800bef2:	6812      	ldr	r2, [r2, #0]
 800bef4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800bef8:	7892      	ldrb	r2, [r2, #2]
 800befa:	fbb3 f3f2 	udiv	r3, r3, r2
 800befe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	1d1a      	adds	r2, r3, #4
 800bf04:	613a      	str	r2, [r7, #16]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d101      	bne.n	800bf14 <clmt_clust+0x54>
 800bf10:	2300      	movs	r3, #0
 800bf12:	e010      	b.n	800bf36 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 800bf14:	697a      	ldr	r2, [r7, #20]
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d307      	bcc.n	800bf2c <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 800bf1c:	697a      	ldr	r2, [r7, #20]
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	1ad3      	subs	r3, r2, r3
 800bf22:	617b      	str	r3, [r7, #20]
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	3304      	adds	r3, #4
 800bf28:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bf2a:	e7e9      	b.n	800bf00 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 800bf2c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	4413      	add	r3, r2
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	371c      	adds	r7, #28
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bc80      	pop	{r7}
 800bf3e:	4770      	bx	lr

0800bf40 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b086      	sub	sp, #24
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	b29a      	uxth	r2, r3
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf54:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf5c:	689b      	ldr	r3, [r3, #8]
 800bf5e:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	2b01      	cmp	r3, #1
 800bf64:	d009      	beq.n	800bf7a <dir_sdi+0x3a>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf72:	699b      	ldr	r3, [r3, #24]
 800bf74:	697a      	ldr	r2, [r7, #20]
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d301      	bcc.n	800bf7e <dir_sdi+0x3e>
		return FR_INT_ERR;
 800bf7a:	2302      	movs	r3, #2
 800bf7c:	e0aa      	b.n	800c0d4 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d110      	bne.n	800bfa6 <dir_sdi+0x66>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	2b03      	cmp	r3, #3
 800bf94:	d107      	bne.n	800bfa6 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bfa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfa4:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d115      	bne.n	800bfd8 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bfb8:	891b      	ldrh	r3, [r3, #8]
 800bfba:	461a      	mov	r2, r3
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d301      	bcc.n	800bfc6 <dir_sdi+0x86>
			return FR_INT_ERR;
 800bfc2:	2302      	movs	r3, #2
 800bfc4:	e086      	b.n	800c0d4 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bfd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfd4:	613b      	str	r3, [r7, #16]
 800bfd6:	e043      	b.n	800c060 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bfe4:	895b      	ldrh	r3, [r3, #10]
 800bfe6:	095b      	lsrs	r3, r3, #5
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	461a      	mov	r2, r3
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bff8:	789b      	ldrb	r3, [r3, #2]
 800bffa:	fb02 f303 	mul.w	r3, r2, r3
 800bffe:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800c000:	e021      	b.n	800c046 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	6979      	ldr	r1, [r7, #20]
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7ff fc00 	bl	800b812 <get_fat>
 800c012:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c01a:	d101      	bne.n	800c020 <dir_sdi+0xe0>
 800c01c:	2301      	movs	r3, #1
 800c01e:	e059      	b.n	800c0d4 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	2b01      	cmp	r3, #1
 800c024:	d909      	bls.n	800c03a <dir_sdi+0xfa>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c032:	699b      	ldr	r3, [r3, #24]
 800c034:	697a      	ldr	r2, [r7, #20]
 800c036:	429a      	cmp	r2, r3
 800c038:	d301      	bcc.n	800c03e <dir_sdi+0xfe>
				return FR_INT_ERR;
 800c03a:	2302      	movs	r3, #2
 800c03c:	e04a      	b.n	800c0d4 <dir_sdi+0x194>
			idx -= ic;
 800c03e:	683a      	ldr	r2, [r7, #0]
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	1ad3      	subs	r3, r2, r3
 800c044:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800c046:	683a      	ldr	r2, [r7, #0]
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d2d9      	bcs.n	800c002 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	6979      	ldr	r1, [r7, #20]
 800c058:	4618      	mov	r0, r3
 800c05a:	f7ff fbb6 	bl	800b7ca <clust2sect>
 800c05e:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c066:	461a      	mov	r2, r3
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d101      	bne.n	800c076 <dir_sdi+0x136>
 800c072:	2302      	movs	r3, #2
 800c074:	e02e      	b.n	800c0d4 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c082:	895b      	ldrh	r3, [r3, #10]
 800c084:	095b      	lsrs	r3, r3, #5
 800c086:	b29b      	uxth	r3, r3
 800c088:	461a      	mov	r2, r3
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	fbb3 f2f2 	udiv	r2, r3, r2
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	4413      	add	r3, r2
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c09a:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c0b2:	895b      	ldrh	r3, [r3, #10]
 800c0b4:	095b      	lsrs	r3, r3, #5
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	fbb3 f1f2 	udiv	r1, r3, r2
 800c0c0:	fb01 f202 	mul.w	r2, r1, r2
 800c0c4:	1a9b      	subs	r3, r3, r2
 800c0c6:	015b      	lsls	r3, r3, #5
 800c0c8:	4403      	add	r3, r0
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c0d0:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800c0d2:	2300      	movs	r3, #0
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3718      	adds	r7, #24
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c0dc:	b590      	push	{r4, r7, lr}
 800c0de:	b087      	sub	sp, #28
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c0ec:	88db      	ldrh	r3, [r3, #6]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d005      	beq.n	800c106 <dir_next+0x2a>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c100:	691b      	ldr	r3, [r3, #16]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d101      	bne.n	800c10a <dir_next+0x2e>
		return FR_NO_FILE;
 800c106:	2304      	movs	r3, #4
 800c108:	e12e      	b.n	800c368 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c116:	895b      	ldrh	r3, [r3, #10]
 800c118:	095b      	lsrs	r3, r3, #5
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	461a      	mov	r2, r3
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	fbb3 f1f2 	udiv	r1, r3, r2
 800c124:	fb01 f202 	mul.w	r2, r1, r2
 800c128:	1a9b      	subs	r3, r3, r2
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	f040 80fa 	bne.w	800c324 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c136:	691b      	ldr	r3, [r3, #16]
 800c138:	3301      	adds	r3, #1
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c140:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c148:	68db      	ldr	r3, [r3, #12]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d10d      	bne.n	800c16a <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c15a:	891b      	ldrh	r3, [r3, #8]
 800c15c:	461a      	mov	r2, r3
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	4293      	cmp	r3, r2
 800c162:	f0c0 80df 	bcc.w	800c324 <dir_next+0x248>
				return FR_NO_FILE;
 800c166:	2304      	movs	r3, #4
 800c168:	e0fe      	b.n	800c368 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c176:	895b      	ldrh	r3, [r3, #10]
 800c178:	095b      	lsrs	r3, r3, #5
 800c17a:	b29b      	uxth	r3, r3
 800c17c:	461a      	mov	r2, r3
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	fbb3 f3f2 	udiv	r3, r3, r2
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c18a:	6812      	ldr	r2, [r2, #0]
 800c18c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c190:	7892      	ldrb	r2, [r2, #2]
 800c192:	3a01      	subs	r2, #1
 800c194:	4013      	ands	r3, r2
 800c196:	2b00      	cmp	r3, #0
 800c198:	f040 80c4 	bne.w	800c324 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c1a2:	681a      	ldr	r2, [r3, #0]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	4610      	mov	r0, r2
 800c1b0:	f7ff fb2f 	bl	800b812 <get_fat>
 800c1b4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d801      	bhi.n	800c1c0 <dir_next+0xe4>
 800c1bc:	2302      	movs	r3, #2
 800c1be:	e0d3      	b.n	800c368 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1c6:	d101      	bne.n	800c1cc <dir_next+0xf0>
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	e0cd      	b.n	800c368 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c1d8:	699b      	ldr	r3, [r3, #24]
 800c1da:	697a      	ldr	r2, [r7, #20]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	f0c0 808e 	bcc.w	800c2fe <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d101      	bne.n	800c1ec <dir_next+0x110>
 800c1e8:	2304      	movs	r3, #4
 800c1ea:	e0bd      	b.n	800c368 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c1f2:	681a      	ldr	r2, [r3, #0]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c1fa:	68db      	ldr	r3, [r3, #12]
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	4610      	mov	r0, r2
 800c200:	f7ff fdb6 	bl	800bd70 <create_chain>
 800c204:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d101      	bne.n	800c210 <dir_next+0x134>
 800c20c:	2307      	movs	r3, #7
 800c20e:	e0ab      	b.n	800c368 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	2b01      	cmp	r3, #1
 800c214:	d101      	bne.n	800c21a <dir_next+0x13e>
 800c216:	2302      	movs	r3, #2
 800c218:	e0a6      	b.n	800c368 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c220:	d101      	bne.n	800c226 <dir_next+0x14a>
 800c222:	2301      	movs	r3, #1
 800c224:	e0a0      	b.n	800c368 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	4618      	mov	r0, r3
 800c230:	f7ff f988 	bl	800b544 <sync_window>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d001      	beq.n	800c23e <dir_next+0x162>
 800c23a:	2301      	movs	r3, #1
 800c23c:	e094      	b.n	800c368 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	4618      	mov	r0, r3
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c254:	895b      	ldrh	r3, [r3, #10]
 800c256:	461a      	mov	r2, r3
 800c258:	2100      	movs	r1, #0
 800c25a:	f7fe ff6f 	bl	800b13c <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c264:	681a      	ldr	r2, [r3, #0]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c26c:	681c      	ldr	r4, [r3, #0]
 800c26e:	6979      	ldr	r1, [r7, #20]
 800c270:	4610      	mov	r0, r2
 800c272:	f7ff faaa 	bl	800b7ca <clust2sect>
 800c276:	4603      	mov	r3, r0
 800c278:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 800c27c:	6313      	str	r3, [r2, #48]	@ 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800c27e:	2300      	movs	r3, #0
 800c280:	613b      	str	r3, [r7, #16]
 800c282:	e021      	b.n	800c2c8 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c290:	2201      	movs	r2, #1
 800c292:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4618      	mov	r0, r3
 800c29e:	f7ff f951 	bl	800b544 <sync_window>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d001      	beq.n	800c2ac <dir_next+0x1d0>
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	e05d      	b.n	800c368 <dir_next+0x28c>
						dp->fs->winsect++;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 800c2b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c2ba:	3201      	adds	r2, #1
 800c2bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c2c0:	631a      	str	r2, [r3, #48]	@ 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	3301      	adds	r3, #1
 800c2c6:	613b      	str	r3, [r7, #16]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c2d4:	789b      	ldrb	r3, [r3, #2]
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d3d2      	bcc.n	800c284 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c2ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	1acb      	subs	r3, r1, r3
 800c2f8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c2fc:	6313      	str	r3, [r2, #48]	@ 0x30
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c304:	461a      	mov	r2, r3
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	6979      	ldr	r1, [r7, #20]
 800c314:	4618      	mov	r0, r3
 800c316:	f7ff fa58 	bl	800b7ca <clust2sect>
 800c31a:	4602      	mov	r2, r0
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c322:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	b29a      	uxth	r2, r3
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c32e:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4618      	mov	r0, r3
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c346:	895b      	ldrh	r3, [r3, #10]
 800c348:	095b      	lsrs	r3, r3, #5
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	461a      	mov	r2, r3
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	fbb3 f1f2 	udiv	r1, r3, r2
 800c354:	fb01 f202 	mul.w	r2, r1, r2
 800c358:	1a9b      	subs	r3, r3, r2
 800c35a:	015b      	lsls	r3, r3, #5
 800c35c:	4403      	add	r3, r0
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c364:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800c366:	2300      	movs	r3, #0
}
 800c368:	4618      	mov	r0, r3
 800c36a:	371c      	adds	r7, #28
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd90      	pop	{r4, r7, pc}

0800c370 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b084      	sub	sp, #16
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800c37a:	2100      	movs	r1, #0
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f7ff fddf 	bl	800bf40 <dir_sdi>
 800c382:	4603      	mov	r3, r0
 800c384:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c386:	7bfb      	ldrb	r3, [r7, #15]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d135      	bne.n	800c3f8 <dir_alloc+0x88>
		n = 0;
 800c38c:	2300      	movs	r3, #0
 800c38e:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c396:	681a      	ldr	r2, [r3, #0]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c39e:	691b      	ldr	r3, [r3, #16]
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	4610      	mov	r0, r2
 800c3a4:	f7ff f920 	bl	800b5e8 <move_window>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800c3ac:	7bfb      	ldrb	r3, [r7, #15]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d121      	bne.n	800c3f6 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c3b8:	695b      	ldr	r3, [r3, #20]
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	2be5      	cmp	r3, #229	@ 0xe5
 800c3be:	d006      	beq.n	800c3ce <dir_alloc+0x5e>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c3c6:	695b      	ldr	r3, [r3, #20]
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d107      	bne.n	800c3de <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	3301      	adds	r3, #1
 800c3d2:	60bb      	str	r3, [r7, #8]
 800c3d4:	68ba      	ldr	r2, [r7, #8]
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d102      	bne.n	800c3e2 <dir_alloc+0x72>
 800c3dc:	e00c      	b.n	800c3f8 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c3de:	2300      	movs	r3, #0
 800c3e0:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800c3e2:	2101      	movs	r1, #1
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f7ff fe79 	bl	800c0dc <dir_next>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800c3ee:	7bfb      	ldrb	r3, [r7, #15]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d0cd      	beq.n	800c390 <dir_alloc+0x20>
 800c3f4:	e000      	b.n	800c3f8 <dir_alloc+0x88>
			if (res != FR_OK) break;
 800c3f6:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c3f8:	7bfb      	ldrb	r3, [r7, #15]
 800c3fa:	2b04      	cmp	r3, #4
 800c3fc:	d101      	bne.n	800c402 <dir_alloc+0x92>
 800c3fe:	2307      	movs	r3, #7
 800c400:	73fb      	strb	r3, [r7, #15]
	return res;
 800c402:	7bfb      	ldrb	r3, [r7, #15]
}
 800c404:	4618      	mov	r0, r3
 800c406:	3710      	adds	r7, #16
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b085      	sub	sp, #20
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	331b      	adds	r3, #27
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	021b      	lsls	r3, r3, #8
 800c41e:	b21a      	sxth	r2, r3
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	331a      	adds	r3, #26
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	b21b      	sxth	r3, r3
 800c428:	4313      	orrs	r3, r2
 800c42a:	b21b      	sxth	r3, r3
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	2b03      	cmp	r3, #3
 800c43a:	d10f      	bne.n	800c45c <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	3315      	adds	r3, #21
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	021b      	lsls	r3, r3, #8
 800c444:	b21a      	sxth	r2, r3
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	3314      	adds	r3, #20
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	b21b      	sxth	r3, r3
 800c44e:	4313      	orrs	r3, r2
 800c450:	b21b      	sxth	r3, r3
 800c452:	b29b      	uxth	r3, r3
 800c454:	041b      	lsls	r3, r3, #16
 800c456:	68fa      	ldr	r2, [r7, #12]
 800c458:	4313      	orrs	r3, r2
 800c45a:	60fb      	str	r3, [r7, #12]

	return cl;
 800c45c:	68fb      	ldr	r3, [r7, #12]
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3714      	adds	r7, #20
 800c462:	46bd      	mov	sp, r7
 800c464:	bc80      	pop	{r7}
 800c466:	4770      	bx	lr

0800c468 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800c468:	b480      	push	{r7}
 800c46a:	b083      	sub	sp, #12
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	331a      	adds	r3, #26
 800c476:	683a      	ldr	r2, [r7, #0]
 800c478:	b2d2      	uxtb	r2, r2
 800c47a:	701a      	strb	r2, [r3, #0]
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	b29b      	uxth	r3, r3
 800c480:	0a1b      	lsrs	r3, r3, #8
 800c482:	b29a      	uxth	r2, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	331b      	adds	r3, #27
 800c488:	b2d2      	uxtb	r2, r2
 800c48a:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	0c1a      	lsrs	r2, r3, #16
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	3314      	adds	r3, #20
 800c494:	b2d2      	uxtb	r2, r2
 800c496:	701a      	strb	r2, [r3, #0]
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	0c1b      	lsrs	r3, r3, #16
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	0a1b      	lsrs	r3, r3, #8
 800c4a0:	b29a      	uxth	r2, r3
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	3315      	adds	r3, #21
 800c4a6:	b2d2      	uxtb	r2, r2
 800c4a8:	701a      	strb	r2, [r3, #0]
}
 800c4aa:	bf00      	nop
 800c4ac:	370c      	adds	r7, #12
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bc80      	pop	{r7}
 800c4b2:	4770      	bx	lr

0800c4b4 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b086      	sub	sp, #24
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4c6:	1e5a      	subs	r2, r3, #1
 800c4c8:	4613      	mov	r3, r2
 800c4ca:	005b      	lsls	r3, r3, #1
 800c4cc:	4413      	add	r3, r2
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	4413      	add	r3, r2
 800c4d2:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	613b      	str	r3, [r7, #16]
 800c4d8:	2301      	movs	r3, #1
 800c4da:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800c4dc:	4a2b      	ldr	r2, [pc, #172]	@ (800c58c <cmp_lfn+0xd8>)
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	683a      	ldr	r2, [r7, #0]
 800c4e8:	4413      	add	r3, r2
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	021b      	lsls	r3, r3, #8
 800c4ee:	b21a      	sxth	r2, r3
 800c4f0:	4926      	ldr	r1, [pc, #152]	@ (800c58c <cmp_lfn+0xd8>)
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	440b      	add	r3, r1
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	440b      	add	r3, r1
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	b21b      	sxth	r3, r3
 800c502:	4313      	orrs	r3, r2
 800c504:	b21b      	sxth	r3, r3
 800c506:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800c508:	89fb      	ldrh	r3, [r7, #14]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d019      	beq.n	800c542 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800c50e:	89bb      	ldrh	r3, [r7, #12]
 800c510:	4618      	mov	r0, r3
 800c512:	f002 fe39 	bl	800f188 <ff_wtoupper>
 800c516:	4603      	mov	r3, r0
 800c518:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	2bfe      	cmp	r3, #254	@ 0xfe
 800c51e:	d80e      	bhi.n	800c53e <cmp_lfn+0x8a>
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	1c5a      	adds	r2, r3, #1
 800c524:	617a      	str	r2, [r7, #20]
 800c526:	005b      	lsls	r3, r3, #1
 800c528:	687a      	ldr	r2, [r7, #4]
 800c52a:	4413      	add	r3, r2
 800c52c:	881b      	ldrh	r3, [r3, #0]
 800c52e:	4618      	mov	r0, r3
 800c530:	f002 fe2a 	bl	800f188 <ff_wtoupper>
 800c534:	4603      	mov	r3, r0
 800c536:	461a      	mov	r2, r3
 800c538:	89fb      	ldrh	r3, [r7, #14]
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d008      	beq.n	800c550 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800c53e:	2300      	movs	r3, #0
 800c540:	e01f      	b.n	800c582 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800c542:	89bb      	ldrh	r3, [r7, #12]
 800c544:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c548:	4293      	cmp	r3, r2
 800c54a:	d001      	beq.n	800c550 <cmp_lfn+0x9c>
 800c54c:	2300      	movs	r3, #0
 800c54e:	e018      	b.n	800c582 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	3301      	adds	r3, #1
 800c554:	613b      	str	r3, [r7, #16]
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	2b0c      	cmp	r3, #12
 800c55a:	d9bf      	bls.n	800c4dc <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c564:	2b00      	cmp	r3, #0
 800c566:	d00b      	beq.n	800c580 <cmp_lfn+0xcc>
 800c568:	89fb      	ldrh	r3, [r7, #14]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d008      	beq.n	800c580 <cmp_lfn+0xcc>
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	005b      	lsls	r3, r3, #1
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	4413      	add	r3, r2
 800c576:	881b      	ldrh	r3, [r3, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d001      	beq.n	800c580 <cmp_lfn+0xcc>
		return 0;
 800c57c:	2300      	movs	r3, #0
 800c57e:	e000      	b.n	800c582 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800c580:	2301      	movs	r3, #1
}
 800c582:	4618      	mov	r0, r3
 800c584:	3718      	adds	r7, #24
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	080125ec 	.word	0x080125ec

0800c590 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800c590:	b480      	push	{r7}
 800c592:	b089      	sub	sp, #36	@ 0x24
 800c594:	af00      	add	r7, sp, #0
 800c596:	60f8      	str	r0, [r7, #12]
 800c598:	60b9      	str	r1, [r7, #8]
 800c59a:	4611      	mov	r1, r2
 800c59c:	461a      	mov	r2, r3
 800c59e:	460b      	mov	r3, r1
 800c5a0:	71fb      	strb	r3, [r7, #7]
 800c5a2:	4613      	mov	r3, r2
 800c5a4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	330d      	adds	r3, #13
 800c5aa:	79ba      	ldrb	r2, [r7, #6]
 800c5ac:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	330b      	adds	r3, #11
 800c5b2:	220f      	movs	r2, #15
 800c5b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	330c      	adds	r3, #12
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	331a      	adds	r3, #26
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	701a      	strb	r2, [r3, #0]
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	331b      	adds	r3, #27
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800c5ce:	79fb      	ldrb	r3, [r7, #7]
 800c5d0:	1e5a      	subs	r2, r3, #1
 800c5d2:	4613      	mov	r3, r2
 800c5d4:	005b      	lsls	r3, r3, #1
 800c5d6:	4413      	add	r3, r2
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	4413      	add	r3, r2
 800c5dc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	82fb      	strh	r3, [r7, #22]
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800c5e6:	8afb      	ldrh	r3, [r7, #22]
 800c5e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d007      	beq.n	800c600 <fit_lfn+0x70>
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	1c5a      	adds	r2, r3, #1
 800c5f4:	61fa      	str	r2, [r7, #28]
 800c5f6:	005b      	lsls	r3, r3, #1
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	4413      	add	r3, r2
 800c5fc:	881b      	ldrh	r3, [r3, #0]
 800c5fe:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800c600:	4a1c      	ldr	r2, [pc, #112]	@ (800c674 <fit_lfn+0xe4>)
 800c602:	69bb      	ldr	r3, [r7, #24]
 800c604:	4413      	add	r3, r2
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	461a      	mov	r2, r3
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	4413      	add	r3, r2
 800c60e:	8afa      	ldrh	r2, [r7, #22]
 800c610:	b2d2      	uxtb	r2, r2
 800c612:	701a      	strb	r2, [r3, #0]
 800c614:	8afb      	ldrh	r3, [r7, #22]
 800c616:	0a1b      	lsrs	r3, r3, #8
 800c618:	b299      	uxth	r1, r3
 800c61a:	4a16      	ldr	r2, [pc, #88]	@ (800c674 <fit_lfn+0xe4>)
 800c61c:	69bb      	ldr	r3, [r7, #24]
 800c61e:	4413      	add	r3, r2
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	3301      	adds	r3, #1
 800c624:	68ba      	ldr	r2, [r7, #8]
 800c626:	4413      	add	r3, r2
 800c628:	b2ca      	uxtb	r2, r1
 800c62a:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800c62c:	8afb      	ldrh	r3, [r7, #22]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d102      	bne.n	800c638 <fit_lfn+0xa8>
 800c632:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c636:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	3301      	adds	r3, #1
 800c63c:	61bb      	str	r3, [r7, #24]
 800c63e:	69bb      	ldr	r3, [r7, #24]
 800c640:	2b0c      	cmp	r3, #12
 800c642:	d9d0      	bls.n	800c5e6 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800c644:	8afb      	ldrh	r3, [r7, #22]
 800c646:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d006      	beq.n	800c65c <fit_lfn+0xcc>
 800c64e:	69fb      	ldr	r3, [r7, #28]
 800c650:	005b      	lsls	r3, r3, #1
 800c652:	68fa      	ldr	r2, [r7, #12]
 800c654:	4413      	add	r3, r2
 800c656:	881b      	ldrh	r3, [r3, #0]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d103      	bne.n	800c664 <fit_lfn+0xd4>
 800c65c:	79fb      	ldrb	r3, [r7, #7]
 800c65e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c662:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	79fa      	ldrb	r2, [r7, #7]
 800c668:	701a      	strb	r2, [r3, #0]
}
 800c66a:	bf00      	nop
 800c66c:	3724      	adds	r7, #36	@ 0x24
 800c66e:	46bd      	mov	sp, r7
 800c670:	bc80      	pop	{r7}
 800c672:	4770      	bx	lr
 800c674:	080125ec 	.word	0x080125ec

0800c678 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b08c      	sub	sp, #48	@ 0x30
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	60f8      	str	r0, [r7, #12]
 800c680:	60b9      	str	r1, [r7, #8]
 800c682:	607a      	str	r2, [r7, #4]
 800c684:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c686:	220b      	movs	r2, #11
 800c688:	68b9      	ldr	r1, [r7, #8]
 800c68a:	68f8      	ldr	r0, [r7, #12]
 800c68c:	f7fe fd38 	bl	800b100 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	2b05      	cmp	r3, #5
 800c694:	d92b      	bls.n	800c6ee <gen_numname+0x76>
		sr = seq;
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c69a:	e022      	b.n	800c6e2 <gen_numname+0x6a>
			wc = *lfn++;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	1c9a      	adds	r2, r3, #2
 800c6a0:	607a      	str	r2, [r7, #4]
 800c6a2:	881b      	ldrh	r3, [r3, #0]
 800c6a4:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c6aa:	e017      	b.n	800c6dc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	005a      	lsls	r2, r3, #1
 800c6b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c6b2:	f003 0301 	and.w	r3, r3, #1
 800c6b6:	4413      	add	r3, r2
 800c6b8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c6ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c6bc:	085b      	lsrs	r3, r3, #1
 800c6be:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c6c0:	69fb      	ldr	r3, [r7, #28]
 800c6c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d005      	beq.n	800c6d6 <gen_numname+0x5e>
 800c6ca:	69fb      	ldr	r3, [r7, #28]
 800c6cc:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800c6d0:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800c6d4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6d8:	3301      	adds	r3, #1
 800c6da:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6de:	2b0f      	cmp	r3, #15
 800c6e0:	d9e4      	bls.n	800c6ac <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	881b      	ldrh	r3, [r3, #0]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d1d8      	bne.n	800c69c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c6ea:	69fb      	ldr	r3, [r7, #28]
 800c6ec:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c6ee:	2307      	movs	r3, #7
 800c6f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	b2db      	uxtb	r3, r3
 800c6f6:	f003 030f 	and.w	r3, r3, #15
 800c6fa:	b2db      	uxtb	r3, r3
 800c6fc:	3330      	adds	r3, #48	@ 0x30
 800c6fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800c702:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c706:	2b39      	cmp	r3, #57	@ 0x39
 800c708:	d904      	bls.n	800c714 <gen_numname+0x9c>
 800c70a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c70e:	3307      	adds	r3, #7
 800c710:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800c714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c716:	1e5a      	subs	r2, r3, #1
 800c718:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c71a:	3330      	adds	r3, #48	@ 0x30
 800c71c:	443b      	add	r3, r7
 800c71e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800c722:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	091b      	lsrs	r3, r3, #4
 800c72a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d1df      	bne.n	800c6f2 <gen_numname+0x7a>
	ns[i] = '~';
 800c732:	f107 0214 	add.w	r2, r7, #20
 800c736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c738:	4413      	add	r3, r2
 800c73a:	227e      	movs	r2, #126	@ 0x7e
 800c73c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c73e:	2300      	movs	r3, #0
 800c740:	627b      	str	r3, [r7, #36]	@ 0x24
 800c742:	e002      	b.n	800c74a <gen_numname+0xd2>
 800c744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c746:	3301      	adds	r3, #1
 800c748:	627b      	str	r3, [r7, #36]	@ 0x24
 800c74a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c74e:	429a      	cmp	r2, r3
 800c750:	d205      	bcs.n	800c75e <gen_numname+0xe6>
 800c752:	68fa      	ldr	r2, [r7, #12]
 800c754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c756:	4413      	add	r3, r2
 800c758:	781b      	ldrb	r3, [r3, #0]
 800c75a:	2b20      	cmp	r3, #32
 800c75c:	d1f2      	bne.n	800c744 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c75e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c760:	2b07      	cmp	r3, #7
 800c762:	d807      	bhi.n	800c774 <gen_numname+0xfc>
 800c764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c766:	1c5a      	adds	r2, r3, #1
 800c768:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c76a:	3330      	adds	r3, #48	@ 0x30
 800c76c:	443b      	add	r3, r7
 800c76e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c772:	e000      	b.n	800c776 <gen_numname+0xfe>
 800c774:	2120      	movs	r1, #32
 800c776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c778:	1c5a      	adds	r2, r3, #1
 800c77a:	627a      	str	r2, [r7, #36]	@ 0x24
 800c77c:	68fa      	ldr	r2, [r7, #12]
 800c77e:	4413      	add	r3, r2
 800c780:	460a      	mov	r2, r1
 800c782:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c786:	2b07      	cmp	r3, #7
 800c788:	d9e9      	bls.n	800c75e <gen_numname+0xe6>
}
 800c78a:	bf00      	nop
 800c78c:	bf00      	nop
 800c78e:	3730      	adds	r7, #48	@ 0x30
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c794:	b480      	push	{r7}
 800c796:	b085      	sub	sp, #20
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c79c:	2300      	movs	r3, #0
 800c79e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c7a0:	230b      	movs	r3, #11
 800c7a2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800c7a4:	7bfb      	ldrb	r3, [r7, #15]
 800c7a6:	b2da      	uxtb	r2, r3
 800c7a8:	0852      	lsrs	r2, r2, #1
 800c7aa:	01db      	lsls	r3, r3, #7
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	b2da      	uxtb	r2, r3
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	1c59      	adds	r1, r3, #1
 800c7b4:	6079      	str	r1, [r7, #4]
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	4413      	add	r3, r2
 800c7ba:	73fb      	strb	r3, [r7, #15]
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	3b01      	subs	r3, #1
 800c7c0:	60bb      	str	r3, [r7, #8]
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d1ed      	bne.n	800c7a4 <sum_sfn+0x10>
	return sum;
 800c7c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3714      	adds	r7, #20
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bc80      	pop	{r7}
 800c7d2:	4770      	bx	lr

0800c7d4 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b086      	sub	sp, #24
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c7dc:	2100      	movs	r1, #0
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f7ff fbae 	bl	800bf40 <dir_sdi>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c7e8:	7dfb      	ldrb	r3, [r7, #23]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d001      	beq.n	800c7f2 <dir_find+0x1e>
 800c7ee:	7dfb      	ldrb	r3, [r7, #23]
 800c7f0:	e0b8      	b.n	800c964 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800c7f2:	23ff      	movs	r3, #255	@ 0xff
 800c7f4:	753b      	strb	r3, [r7, #20]
 800c7f6:	7d3b      	ldrb	r3, [r7, #20]
 800c7f8:	757b      	strb	r3, [r7, #21]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c800:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c804:	849a      	strh	r2, [r3, #36]	@ 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c80c:	681a      	ldr	r2, [r3, #0]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c814:	691b      	ldr	r3, [r3, #16]
 800c816:	4619      	mov	r1, r3
 800c818:	4610      	mov	r0, r2
 800c81a:	f7fe fee5 	bl	800b5e8 <move_window>
 800c81e:	4603      	mov	r3, r0
 800c820:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c822:	7dfb      	ldrb	r3, [r7, #23]
 800c824:	2b00      	cmp	r3, #0
 800c826:	f040 8097 	bne.w	800c958 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c830:	695b      	ldr	r3, [r3, #20]
 800c832:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c83a:	7dbb      	ldrb	r3, [r7, #22]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d102      	bne.n	800c846 <dir_find+0x72>
 800c840:	2304      	movs	r3, #4
 800c842:	75fb      	strb	r3, [r7, #23]
 800c844:	e08d      	b.n	800c962 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	330b      	adds	r3, #11
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c850:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c852:	7dbb      	ldrb	r3, [r7, #22]
 800c854:	2be5      	cmp	r3, #229	@ 0xe5
 800c856:	d007      	beq.n	800c868 <dir_find+0x94>
 800c858:	7bfb      	ldrb	r3, [r7, #15]
 800c85a:	f003 0308 	and.w	r3, r3, #8
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d00b      	beq.n	800c87a <dir_find+0xa6>
 800c862:	7bfb      	ldrb	r3, [r7, #15]
 800c864:	2b0f      	cmp	r3, #15
 800c866:	d008      	beq.n	800c87a <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800c868:	23ff      	movs	r3, #255	@ 0xff
 800c86a:	757b      	strb	r3, [r7, #21]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c872:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c876:	849a      	strh	r2, [r3, #36]	@ 0x24
 800c878:	e063      	b.n	800c942 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c87a:	7bfb      	ldrb	r3, [r7, #15]
 800c87c:	2b0f      	cmp	r3, #15
 800c87e:	d137      	bne.n	800c8f0 <dir_find+0x11c>
				if (dp->lfn) {
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c886:	6a1b      	ldr	r3, [r3, #32]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d05a      	beq.n	800c942 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c88c:	7dbb      	ldrb	r3, [r7, #22]
 800c88e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c892:	2b00      	cmp	r3, #0
 800c894:	d010      	beq.n	800c8b8 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	7b5b      	ldrb	r3, [r3, #13]
 800c89a:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800c89c:	7dbb      	ldrb	r3, [r7, #22]
 800c89e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8a2:	75bb      	strb	r3, [r7, #22]
 800c8a4:	7dbb      	ldrb	r3, [r7, #22]
 800c8a6:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8ae:	88da      	ldrh	r2, [r3, #6]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8b6:	849a      	strh	r2, [r3, #36]	@ 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800c8b8:	7dba      	ldrb	r2, [r7, #22]
 800c8ba:	7d7b      	ldrb	r3, [r7, #21]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d114      	bne.n	800c8ea <dir_find+0x116>
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	330d      	adds	r3, #13
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	7d3a      	ldrb	r2, [r7, #20]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d10e      	bne.n	800c8ea <dir_find+0x116>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8d2:	6a1b      	ldr	r3, [r3, #32]
 800c8d4:	6939      	ldr	r1, [r7, #16]
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7ff fdec 	bl	800c4b4 <cmp_lfn>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d003      	beq.n	800c8ea <dir_find+0x116>
 800c8e2:	7d7b      	ldrb	r3, [r7, #21]
 800c8e4:	3b01      	subs	r3, #1
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	e000      	b.n	800c8ec <dir_find+0x118>
 800c8ea:	23ff      	movs	r3, #255	@ 0xff
 800c8ec:	757b      	strb	r3, [r7, #21]
 800c8ee:	e028      	b.n	800c942 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800c8f0:	7d7b      	ldrb	r3, [r7, #21]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d107      	bne.n	800c906 <dir_find+0x132>
 800c8f6:	6938      	ldr	r0, [r7, #16]
 800c8f8:	f7ff ff4c 	bl	800c794 <sum_sfn>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	461a      	mov	r2, r3
 800c900:	7d3b      	ldrb	r3, [r7, #20]
 800c902:	4293      	cmp	r3, r2
 800c904:	d02a      	beq.n	800c95c <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c90c:	699b      	ldr	r3, [r3, #24]
 800c90e:	330b      	adds	r3, #11
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	f003 0301 	and.w	r3, r3, #1
 800c916:	2b00      	cmp	r3, #0
 800c918:	d10b      	bne.n	800c932 <dir_find+0x15e>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c920:	699b      	ldr	r3, [r3, #24]
 800c922:	220b      	movs	r2, #11
 800c924:	4619      	mov	r1, r3
 800c926:	6938      	ldr	r0, [r7, #16]
 800c928:	f7fe fc22 	bl	800b170 <mem_cmp>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d016      	beq.n	800c960 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800c932:	23ff      	movs	r3, #255	@ 0xff
 800c934:	757b      	strb	r3, [r7, #21]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c93c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c940:	849a      	strh	r2, [r3, #36]	@ 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800c942:	2100      	movs	r1, #0
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f7ff fbc9 	bl	800c0dc <dir_next>
 800c94a:	4603      	mov	r3, r0
 800c94c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c94e:	7dfb      	ldrb	r3, [r7, #23]
 800c950:	2b00      	cmp	r3, #0
 800c952:	f43f af58 	beq.w	800c806 <dir_find+0x32>
 800c956:	e004      	b.n	800c962 <dir_find+0x18e>
		if (res != FR_OK) break;
 800c958:	bf00      	nop
 800c95a:	e002      	b.n	800c962 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800c95c:	bf00      	nop
 800c95e:	e000      	b.n	800c962 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800c960:	bf00      	nop

	return res;
 800c962:	7dfb      	ldrb	r3, [r7, #23]
}
 800c964:	4618      	mov	r0, r3
 800c966:	3718      	adds	r7, #24
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b08c      	sub	sp, #48	@ 0x30
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c97a:	699b      	ldr	r3, [r3, #24]
 800c97c:	623b      	str	r3, [r7, #32]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c984:	6a1b      	ldr	r3, [r3, #32]
 800c986:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800c988:	f107 030c 	add.w	r3, r7, #12
 800c98c:	220c      	movs	r2, #12
 800c98e:	6a39      	ldr	r1, [r7, #32]
 800c990:	4618      	mov	r0, r3
 800c992:	f7fe fbb5 	bl	800b100 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c996:	7dfb      	ldrb	r3, [r7, #23]
 800c998:	f003 0301 	and.w	r3, r3, #1
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d03b      	beq.n	800ca18 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800c9a0:	6a3b      	ldr	r3, [r7, #32]
 800c9a2:	330b      	adds	r3, #11
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	701a      	strb	r2, [r3, #0]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c9b8:	e013      	b.n	800c9e2 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800c9ba:	f107 010c 	add.w	r1, r7, #12
 800c9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9c0:	69fa      	ldr	r2, [r7, #28]
 800c9c2:	6a38      	ldr	r0, [r7, #32]
 800c9c4:	f7ff fe58 	bl	800c678 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f7ff ff03 	bl	800c7d4 <dir_find>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800c9d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d106      	bne.n	800c9ea <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800c9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9de:	3301      	adds	r3, #1
 800c9e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c9e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9e4:	2b63      	cmp	r3, #99	@ 0x63
 800c9e6:	d9e8      	bls.n	800c9ba <dir_register+0x4e>
 800c9e8:	e000      	b.n	800c9ec <dir_register+0x80>
			if (res != FR_OK) break;
 800c9ea:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c9ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9ee:	2b64      	cmp	r3, #100	@ 0x64
 800c9f0:	d101      	bne.n	800c9f6 <dir_register+0x8a>
 800c9f2:	2307      	movs	r3, #7
 800c9f4:	e0d8      	b.n	800cba8 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c9f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c9fa:	2b04      	cmp	r3, #4
 800c9fc:	d002      	beq.n	800ca04 <dir_register+0x98>
 800c9fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ca02:	e0d1      	b.n	800cba8 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800ca04:	6a3b      	ldr	r3, [r7, #32]
 800ca06:	330b      	adds	r3, #11
 800ca08:	7dfa      	ldrb	r2, [r7, #23]
 800ca0a:	701a      	strb	r2, [r3, #0]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca12:	461a      	mov	r2, r3
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800ca18:	7dfb      	ldrb	r3, [r7, #23]
 800ca1a:	f003 0302 	and.w	r3, r3, #2
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d014      	beq.n	800ca4c <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 800ca22:	2300      	movs	r3, #0
 800ca24:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca26:	e002      	b.n	800ca2e <dir_register+0xc2>
 800ca28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca30:	005b      	lsls	r3, r3, #1
 800ca32:	69fa      	ldr	r2, [r7, #28]
 800ca34:	4413      	add	r3, r2
 800ca36:	881b      	ldrh	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d1f5      	bne.n	800ca28 <dir_register+0xbc>
		nent = (n + 25) / 13;
 800ca3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca3e:	3319      	adds	r3, #25
 800ca40:	4a5b      	ldr	r2, [pc, #364]	@ (800cbb0 <dir_register+0x244>)
 800ca42:	fba2 2303 	umull	r2, r3, r2, r3
 800ca46:	089b      	lsrs	r3, r3, #2
 800ca48:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca4a:	e001      	b.n	800ca50 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ca50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f7ff fc8c 	bl	800c370 <dir_alloc>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ca5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d15b      	bne.n	800cb1e <dir_register+0x1b2>
 800ca66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca68:	3b01      	subs	r3, #1
 800ca6a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d055      	beq.n	800cb1e <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca78:	88db      	ldrh	r3, [r3, #6]
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca7e:	1ad3      	subs	r3, r2, r3
 800ca80:	4619      	mov	r1, r3
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f7ff fa5c 	bl	800bf40 <dir_sdi>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800ca8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d143      	bne.n	800cb1e <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca9c:	699b      	ldr	r3, [r3, #24]
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f7ff fe78 	bl	800c794 <sum_sfn>
 800caa4:	4603      	mov	r3, r0
 800caa6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800caae:	681a      	ldr	r2, [r3, #0]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cab6:	691b      	ldr	r3, [r3, #16]
 800cab8:	4619      	mov	r1, r3
 800caba:	4610      	mov	r0, r2
 800cabc:	f7fe fd94 	bl	800b5e8 <move_window>
 800cac0:	4603      	mov	r3, r0
 800cac2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800cac6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d126      	bne.n	800cb1c <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cad4:	6a18      	ldr	r0, [r3, #32]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cadc:	6959      	ldr	r1, [r3, #20]
 800cade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae0:	b2da      	uxtb	r2, r3
 800cae2:	7efb      	ldrb	r3, [r7, #27]
 800cae4:	f7ff fd54 	bl	800c590 <fit_lfn>
				dp->fs->wflag = 1;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800caf4:	2201      	movs	r2, #1
 800caf6:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 800caf8:	2100      	movs	r1, #0
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f7ff faee 	bl	800c0dc <dir_next>
 800cb00:	4603      	mov	r3, r0
 800cb02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800cb06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d107      	bne.n	800cb1e <dir_register+0x1b2>
 800cb0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb10:	3b01      	subs	r3, #1
 800cb12:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d1c6      	bne.n	800caa8 <dir_register+0x13c>
 800cb1a:	e000      	b.n	800cb1e <dir_register+0x1b2>
				if (res != FR_OK) break;
 800cb1c:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800cb1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d13e      	bne.n	800cba4 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cb2c:	681a      	ldr	r2, [r3, #0]
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cb34:	691b      	ldr	r3, [r3, #16]
 800cb36:	4619      	mov	r1, r3
 800cb38:	4610      	mov	r0, r2
 800cb3a:	f7fe fd55 	bl	800b5e8 <move_window>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800cb44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d12b      	bne.n	800cba4 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cb52:	695b      	ldr	r3, [r3, #20]
 800cb54:	2220      	movs	r2, #32
 800cb56:	2100      	movs	r1, #0
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f7fe faef 	bl	800b13c <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cb64:	6958      	ldr	r0, [r3, #20]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cb6c:	699b      	ldr	r3, [r3, #24]
 800cb6e:	220b      	movs	r2, #11
 800cb70:	4619      	mov	r1, r3
 800cb72:	f7fe fac5 	bl	800b100 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cb7c:	699b      	ldr	r3, [r3, #24]
 800cb7e:	330b      	adds	r3, #11
 800cb80:	781a      	ldrb	r2, [r3, #0]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cb88:	695b      	ldr	r3, [r3, #20]
 800cb8a:	330c      	adds	r3, #12
 800cb8c:	f002 0218 	and.w	r2, r2, #24
 800cb90:	b2d2      	uxtb	r2, r2
 800cb92:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cba0:	2201      	movs	r2, #1
 800cba2:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 800cba4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3730      	adds	r7, #48	@ 0x30
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}
 800cbb0:	4ec4ec4f 	.word	0x4ec4ec4f

0800cbb4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b08a      	sub	sp, #40	@ 0x28
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	613b      	str	r3, [r7, #16]
 800cbc4:	e002      	b.n	800cbcc <create_name+0x18>
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	3301      	adds	r3, #1
 800cbca:	613b      	str	r3, [r7, #16]
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	2b2f      	cmp	r3, #47	@ 0x2f
 800cbd2:	d0f8      	beq.n	800cbc6 <create_name+0x12>
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	2b5c      	cmp	r3, #92	@ 0x5c
 800cbda:	d0f4      	beq.n	800cbc6 <create_name+0x12>
	lfn = dp->lfn;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cbe2:	6a1b      	ldr	r3, [r3, #32]
 800cbe4:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	617b      	str	r3, [r7, #20]
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800cbee:	69bb      	ldr	r3, [r7, #24]
 800cbf0:	1c5a      	adds	r2, r3, #1
 800cbf2:	61ba      	str	r2, [r7, #24]
 800cbf4:	693a      	ldr	r2, [r7, #16]
 800cbf6:	4413      	add	r3, r2
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800cbfc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cbfe:	2b1f      	cmp	r3, #31
 800cc00:	d92f      	bls.n	800cc62 <create_name+0xae>
 800cc02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cc04:	2b2f      	cmp	r3, #47	@ 0x2f
 800cc06:	d02c      	beq.n	800cc62 <create_name+0xae>
 800cc08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cc0a:	2b5c      	cmp	r3, #92	@ 0x5c
 800cc0c:	d029      	beq.n	800cc62 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	2bfe      	cmp	r3, #254	@ 0xfe
 800cc12:	d901      	bls.n	800cc18 <create_name+0x64>
			return FR_INVALID_NAME;
 800cc14:	2306      	movs	r3, #6
 800cc16:	e186      	b.n	800cf26 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 800cc18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cc1a:	b2db      	uxtb	r3, r3
 800cc1c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800cc1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cc20:	2101      	movs	r1, #1
 800cc22:	4618      	mov	r0, r3
 800cc24:	f002 fa76 	bl	800f114 <ff_convert>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800cc2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d101      	bne.n	800cc36 <create_name+0x82>
 800cc32:	2306      	movs	r3, #6
 800cc34:	e177      	b.n	800cf26 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800cc36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cc38:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc3a:	d809      	bhi.n	800cc50 <create_name+0x9c>
 800cc3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cc3e:	4619      	mov	r1, r3
 800cc40:	488e      	ldr	r0, [pc, #568]	@ (800ce7c <create_name+0x2c8>)
 800cc42:	f7fe fabb 	bl	800b1bc <chk_chr>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d001      	beq.n	800cc50 <create_name+0x9c>
			return FR_INVALID_NAME;
 800cc4c:	2306      	movs	r3, #6
 800cc4e:	e16a      	b.n	800cf26 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	1c5a      	adds	r2, r3, #1
 800cc54:	617a      	str	r2, [r7, #20]
 800cc56:	005b      	lsls	r3, r3, #1
 800cc58:	68fa      	ldr	r2, [r7, #12]
 800cc5a:	4413      	add	r3, r2
 800cc5c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800cc5e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800cc60:	e7c5      	b.n	800cbee <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800cc62:	693a      	ldr	r2, [r7, #16]
 800cc64:	69bb      	ldr	r3, [r7, #24]
 800cc66:	441a      	add	r2, r3
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800cc6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cc6e:	2b1f      	cmp	r3, #31
 800cc70:	d801      	bhi.n	800cc76 <create_name+0xc2>
 800cc72:	2304      	movs	r3, #4
 800cc74:	e000      	b.n	800cc78 <create_name+0xc4>
 800cc76:	2300      	movs	r3, #0
 800cc78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800cc7c:	e011      	b.n	800cca2 <create_name+0xee>
		w = lfn[di - 1];
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800cc84:	3b01      	subs	r3, #1
 800cc86:	005b      	lsls	r3, r3, #1
 800cc88:	68fa      	ldr	r2, [r7, #12]
 800cc8a:	4413      	add	r3, r2
 800cc8c:	881b      	ldrh	r3, [r3, #0]
 800cc8e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800cc90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cc92:	2b20      	cmp	r3, #32
 800cc94:	d002      	beq.n	800cc9c <create_name+0xe8>
 800cc96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cc98:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc9a:	d106      	bne.n	800ccaa <create_name+0xf6>
		di--;
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	3b01      	subs	r3, #1
 800cca0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d1ea      	bne.n	800cc7e <create_name+0xca>
 800cca8:	e000      	b.n	800ccac <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800ccaa:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d101      	bne.n	800ccb6 <create_name+0x102>
 800ccb2:	2306      	movs	r3, #6
 800ccb4:	e137      	b.n	800cf26 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	005b      	lsls	r3, r3, #1
 800ccba:	68fa      	ldr	r2, [r7, #12]
 800ccbc:	4413      	add	r3, r2
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ccc8:	699b      	ldr	r3, [r3, #24]
 800ccca:	220b      	movs	r2, #11
 800cccc:	2120      	movs	r1, #32
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7fe fa34 	bl	800b13c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	61bb      	str	r3, [r7, #24]
 800ccd8:	e002      	b.n	800cce0 <create_name+0x12c>
 800ccda:	69bb      	ldr	r3, [r7, #24]
 800ccdc:	3301      	adds	r3, #1
 800ccde:	61bb      	str	r3, [r7, #24]
 800cce0:	69bb      	ldr	r3, [r7, #24]
 800cce2:	005b      	lsls	r3, r3, #1
 800cce4:	68fa      	ldr	r2, [r7, #12]
 800cce6:	4413      	add	r3, r2
 800cce8:	881b      	ldrh	r3, [r3, #0]
 800ccea:	2b20      	cmp	r3, #32
 800ccec:	d0f5      	beq.n	800ccda <create_name+0x126>
 800ccee:	69bb      	ldr	r3, [r7, #24]
 800ccf0:	005b      	lsls	r3, r3, #1
 800ccf2:	68fa      	ldr	r2, [r7, #12]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	881b      	ldrh	r3, [r3, #0]
 800ccf8:	2b2e      	cmp	r3, #46	@ 0x2e
 800ccfa:	d0ee      	beq.n	800ccda <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ccfc:	69bb      	ldr	r3, [r7, #24]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d009      	beq.n	800cd16 <create_name+0x162>
 800cd02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cd06:	f043 0303 	orr.w	r3, r3, #3
 800cd0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800cd0e:	e002      	b.n	800cd16 <create_name+0x162>
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	3b01      	subs	r3, #1
 800cd14:	617b      	str	r3, [r7, #20]
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d009      	beq.n	800cd30 <create_name+0x17c>
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800cd22:	3b01      	subs	r3, #1
 800cd24:	005b      	lsls	r3, r3, #1
 800cd26:	68fa      	ldr	r2, [r7, #12]
 800cd28:	4413      	add	r3, r2
 800cd2a:	881b      	ldrh	r3, [r3, #0]
 800cd2c:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd2e:	d1ef      	bne.n	800cd10 <create_name+0x15c>

	b = i = 0; ni = 8;
 800cd30:	2300      	movs	r3, #0
 800cd32:	623b      	str	r3, [r7, #32]
 800cd34:	2300      	movs	r3, #0
 800cd36:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cd3a:	2308      	movs	r3, #8
 800cd3c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800cd3e:	69bb      	ldr	r3, [r7, #24]
 800cd40:	1c5a      	adds	r2, r3, #1
 800cd42:	61ba      	str	r2, [r7, #24]
 800cd44:	005b      	lsls	r3, r3, #1
 800cd46:	68fa      	ldr	r2, [r7, #12]
 800cd48:	4413      	add	r3, r2
 800cd4a:	881b      	ldrh	r3, [r3, #0]
 800cd4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800cd4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	f000 8091 	beq.w	800ce78 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800cd56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cd58:	2b20      	cmp	r3, #32
 800cd5a:	d006      	beq.n	800cd6a <create_name+0x1b6>
 800cd5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cd5e:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd60:	d10a      	bne.n	800cd78 <create_name+0x1c4>
 800cd62:	69ba      	ldr	r2, [r7, #24]
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d006      	beq.n	800cd78 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 800cd6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cd6e:	f043 0303 	orr.w	r3, r3, #3
 800cd72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cd76:	e07e      	b.n	800ce76 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800cd78:	6a3a      	ldr	r2, [r7, #32]
 800cd7a:	69fb      	ldr	r3, [r7, #28]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d203      	bcs.n	800cd88 <create_name+0x1d4>
 800cd80:	69ba      	ldr	r2, [r7, #24]
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d123      	bne.n	800cdd0 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 800cd88:	69fb      	ldr	r3, [r7, #28]
 800cd8a:	2b0b      	cmp	r3, #11
 800cd8c:	d106      	bne.n	800cd9c <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 800cd8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cd92:	f043 0303 	orr.w	r3, r3, #3
 800cd96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cd9a:	e076      	b.n	800ce8a <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800cd9c:	69ba      	ldr	r2, [r7, #24]
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d005      	beq.n	800cdb0 <create_name+0x1fc>
 800cda4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cda8:	f043 0303 	orr.w	r3, r3, #3
 800cdac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800cdb0:	69ba      	ldr	r2, [r7, #24]
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d867      	bhi.n	800ce88 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	61bb      	str	r3, [r7, #24]
 800cdbc:	2308      	movs	r3, #8
 800cdbe:	623b      	str	r3, [r7, #32]
 800cdc0:	230b      	movs	r3, #11
 800cdc2:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800cdc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cdc8:	009b      	lsls	r3, r3, #2
 800cdca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cdce:	e052      	b.n	800ce76 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800cdd0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cdd2:	2b7f      	cmp	r3, #127	@ 0x7f
 800cdd4:	d914      	bls.n	800ce00 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800cdd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cdd8:	2100      	movs	r1, #0
 800cdda:	4618      	mov	r0, r3
 800cddc:	f002 f99a 	bl	800f114 <ff_convert>
 800cde0:	4603      	mov	r3, r0
 800cde2:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800cde4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d004      	beq.n	800cdf4 <create_name+0x240>
 800cdea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cdec:	3b80      	subs	r3, #128	@ 0x80
 800cdee:	4a24      	ldr	r2, [pc, #144]	@ (800ce80 <create_name+0x2cc>)
 800cdf0:	5cd3      	ldrb	r3, [r2, r3]
 800cdf2:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800cdf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cdf8:	f043 0302 	orr.w	r3, r3, #2
 800cdfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ce00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d007      	beq.n	800ce16 <create_name+0x262>
 800ce06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ce08:	4619      	mov	r1, r3
 800ce0a:	481e      	ldr	r0, [pc, #120]	@ (800ce84 <create_name+0x2d0>)
 800ce0c:	f7fe f9d6 	bl	800b1bc <chk_chr>
 800ce10:	4603      	mov	r3, r0
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d008      	beq.n	800ce28 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ce16:	235f      	movs	r3, #95	@ 0x5f
 800ce18:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ce1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ce1e:	f043 0303 	orr.w	r3, r3, #3
 800ce22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ce26:	e01b      	b.n	800ce60 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ce28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ce2a:	2b40      	cmp	r3, #64	@ 0x40
 800ce2c:	d909      	bls.n	800ce42 <create_name+0x28e>
 800ce2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ce30:	2b5a      	cmp	r3, #90	@ 0x5a
 800ce32:	d806      	bhi.n	800ce42 <create_name+0x28e>
					b |= 2;
 800ce34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ce38:	f043 0302 	orr.w	r3, r3, #2
 800ce3c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ce40:	e00e      	b.n	800ce60 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ce42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ce44:	2b60      	cmp	r3, #96	@ 0x60
 800ce46:	d90b      	bls.n	800ce60 <create_name+0x2ac>
 800ce48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ce4a:	2b7a      	cmp	r3, #122	@ 0x7a
 800ce4c:	d808      	bhi.n	800ce60 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 800ce4e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ce52:	f043 0301 	orr.w	r3, r3, #1
 800ce56:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ce5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ce5c:	3b20      	subs	r3, #32
 800ce5e:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce66:	699a      	ldr	r2, [r3, #24]
 800ce68:	6a3b      	ldr	r3, [r7, #32]
 800ce6a:	1c59      	adds	r1, r3, #1
 800ce6c:	6239      	str	r1, [r7, #32]
 800ce6e:	4413      	add	r3, r2
 800ce70:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ce72:	b2d2      	uxtb	r2, r2
 800ce74:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800ce76:	e762      	b.n	800cd3e <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 800ce78:	bf00      	nop
 800ce7a:	e006      	b.n	800ce8a <create_name+0x2d6>
 800ce7c:	0801242c 	.word	0x0801242c
 800ce80:	0801256c 	.word	0x0801256c
 800ce84:	08012438 	.word	0x08012438
			if (si > di) break;			/* No extension */
 800ce88:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce90:	699b      	ldr	r3, [r3, #24]
 800ce92:	781b      	ldrb	r3, [r3, #0]
 800ce94:	2be5      	cmp	r3, #229	@ 0xe5
 800ce96:	d105      	bne.n	800cea4 <create_name+0x2f0>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce9e:	699b      	ldr	r3, [r3, #24]
 800cea0:	2205      	movs	r2, #5
 800cea2:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800cea4:	69fb      	ldr	r3, [r7, #28]
 800cea6:	2b08      	cmp	r3, #8
 800cea8:	d104      	bne.n	800ceb4 <create_name+0x300>
 800ceaa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ceae:	009b      	lsls	r3, r3, #2
 800ceb0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800ceb4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ceb8:	f003 030c 	and.w	r3, r3, #12
 800cebc:	2b0c      	cmp	r3, #12
 800cebe:	d005      	beq.n	800cecc <create_name+0x318>
 800cec0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cec4:	f003 0303 	and.w	r3, r3, #3
 800cec8:	2b03      	cmp	r3, #3
 800ceca:	d105      	bne.n	800ced8 <create_name+0x324>
		cf |= NS_LFN;
 800cecc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ced0:	f043 0302 	orr.w	r3, r3, #2
 800ced4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ced8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cedc:	f003 0302 	and.w	r3, r3, #2
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d117      	bne.n	800cf14 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800cee4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cee8:	f003 0303 	and.w	r3, r3, #3
 800ceec:	2b01      	cmp	r3, #1
 800ceee:	d105      	bne.n	800cefc <create_name+0x348>
 800cef0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cef4:	f043 0310 	orr.w	r3, r3, #16
 800cef8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800cefc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cf00:	f003 030c 	and.w	r3, r3, #12
 800cf04:	2b04      	cmp	r3, #4
 800cf06:	d105      	bne.n	800cf14 <create_name+0x360>
 800cf08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cf0c:	f043 0308 	orr.w	r3, r3, #8
 800cf10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cf1a:	699b      	ldr	r3, [r3, #24]
 800cf1c:	330b      	adds	r3, #11
 800cf1e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800cf22:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800cf24:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3728      	adds	r7, #40	@ 0x28
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	bf00      	nop

0800cf30 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	2b2f      	cmp	r3, #47	@ 0x2f
 800cf40:	d003      	beq.n	800cf4a <follow_path+0x1a>
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	781b      	ldrb	r3, [r3, #0]
 800cf46:	2b5c      	cmp	r3, #92	@ 0x5c
 800cf48:	d102      	bne.n	800cf50 <follow_path+0x20>
		path++;
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cf56:	461a      	mov	r2, r3
 800cf58:	2300      	movs	r3, #0
 800cf5a:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	2b1f      	cmp	r3, #31
 800cf62:	d80c      	bhi.n	800cf7e <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800cf64:	2100      	movs	r1, #0
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f7fe ffea 	bl	800bf40 <dir_sdi>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cf76:	461a      	mov	r2, r3
 800cf78:	2300      	movs	r3, #0
 800cf7a:	6153      	str	r3, [r2, #20]
 800cf7c:	e049      	b.n	800d012 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cf7e:	463b      	mov	r3, r7
 800cf80:	4619      	mov	r1, r3
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f7ff fe16 	bl	800cbb4 <create_name>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800cf8c:	7bfb      	ldrb	r3, [r7, #15]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d13a      	bne.n	800d008 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f7ff fc1e 	bl	800c7d4 <dir_find>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cfa2:	699b      	ldr	r3, [r3, #24]
 800cfa4:	7adb      	ldrb	r3, [r3, #11]
 800cfa6:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800cfa8:	7bfb      	ldrb	r3, [r7, #15]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d00a      	beq.n	800cfc4 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cfae:	7bfb      	ldrb	r3, [r7, #15]
 800cfb0:	2b04      	cmp	r3, #4
 800cfb2:	d12b      	bne.n	800d00c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cfb4:	7bbb      	ldrb	r3, [r7, #14]
 800cfb6:	f003 0304 	and.w	r3, r3, #4
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d126      	bne.n	800d00c <follow_path+0xdc>
 800cfbe:	2305      	movs	r3, #5
 800cfc0:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800cfc2:	e023      	b.n	800d00c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cfc4:	7bbb      	ldrb	r3, [r7, #14]
 800cfc6:	f003 0304 	and.w	r3, r3, #4
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d120      	bne.n	800d010 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cfd4:	695b      	ldr	r3, [r3, #20]
 800cfd6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	330b      	adds	r3, #11
 800cfdc:	781b      	ldrb	r3, [r3, #0]
 800cfde:	f003 0310 	and.w	r3, r3, #16
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d102      	bne.n	800cfec <follow_path+0xbc>
				res = FR_NO_PATH; break;
 800cfe6:	2305      	movs	r3, #5
 800cfe8:	73fb      	strb	r3, [r7, #15]
 800cfea:	e012      	b.n	800d012 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	68b9      	ldr	r1, [r7, #8]
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7ff fa08 	bl	800c40c <ld_clust>
 800cffc:	4602      	mov	r2, r0
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d004:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d006:	e7ba      	b.n	800cf7e <follow_path+0x4e>
			if (res != FR_OK) break;
 800d008:	bf00      	nop
 800d00a:	e002      	b.n	800d012 <follow_path+0xe2>
				break;
 800d00c:	bf00      	nop
 800d00e:	e000      	b.n	800d012 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d010:	bf00      	nop
		}
	}

	return res;
 800d012:	7bfb      	ldrb	r3, [r7, #15]
}
 800d014:	4618      	mov	r0, r3
 800d016:	3710      	adds	r7, #16
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d01c:	b480      	push	{r7}
 800d01e:	b087      	sub	sp, #28
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d024:	f04f 33ff 	mov.w	r3, #4294967295
 800d028:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d031      	beq.n	800d096 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	617b      	str	r3, [r7, #20]
 800d038:	e002      	b.n	800d040 <get_ldnumber+0x24>
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	3301      	adds	r3, #1
 800d03e:	617b      	str	r3, [r7, #20]
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	2b1f      	cmp	r3, #31
 800d046:	d903      	bls.n	800d050 <get_ldnumber+0x34>
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	2b3a      	cmp	r3, #58	@ 0x3a
 800d04e:	d1f4      	bne.n	800d03a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	2b3a      	cmp	r3, #58	@ 0x3a
 800d056:	d11c      	bne.n	800d092 <get_ldnumber+0x76>
			tp = *path;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	1c5a      	adds	r2, r3, #1
 800d062:	60fa      	str	r2, [r7, #12]
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	3b30      	subs	r3, #48	@ 0x30
 800d068:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	2b09      	cmp	r3, #9
 800d06e:	d80e      	bhi.n	800d08e <get_ldnumber+0x72>
 800d070:	68fa      	ldr	r2, [r7, #12]
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	429a      	cmp	r2, r3
 800d076:	d10a      	bne.n	800d08e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d107      	bne.n	800d08e <get_ldnumber+0x72>
					vol = (int)i;
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	3301      	adds	r3, #1
 800d086:	617b      	str	r3, [r7, #20]
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	697a      	ldr	r2, [r7, #20]
 800d08c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	e002      	b.n	800d098 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d092:	2300      	movs	r3, #0
 800d094:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d096:	693b      	ldr	r3, [r7, #16]
}
 800d098:	4618      	mov	r0, r3
 800d09a:	371c      	adds	r7, #28
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bc80      	pop	{r7}
 800d0a0:	4770      	bx	lr
	...

0800d0a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b082      	sub	sp, #8
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	711a      	strb	r2, [r3, #4]
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d0be:	461a      	mov	r2, r3
 800d0c0:	f04f 33ff 	mov.w	r3, #4294967295
 800d0c4:	6313      	str	r3, [r2, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800d0c6:	6839      	ldr	r1, [r7, #0]
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f7fe fa8d 	bl	800b5e8 <move_window>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d001      	beq.n	800d0d8 <check_fs+0x34>
		return 3;
 800d0d4:	2303      	movs	r3, #3
 800d0d6:	e04a      	b.n	800d16e <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d0de:	3301      	adds	r3, #1
 800d0e0:	781b      	ldrb	r3, [r3, #0]
 800d0e2:	021b      	lsls	r3, r3, #8
 800d0e4:	b21a      	sxth	r2, r3
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 800d0ec:	b21b      	sxth	r3, r3
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	b21b      	sxth	r3, r3
 800d0f2:	4a21      	ldr	r2, [pc, #132]	@ (800d178 <check_fs+0xd4>)
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	d001      	beq.n	800d0fc <check_fs+0x58>
		return 2;
 800d0f8:	2302      	movs	r3, #2
 800d0fa:	e038      	b.n	800d16e <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	3336      	adds	r3, #54	@ 0x36
 800d100:	3303      	adds	r3, #3
 800d102:	781b      	ldrb	r3, [r3, #0]
 800d104:	061a      	lsls	r2, r3, #24
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	3336      	adds	r3, #54	@ 0x36
 800d10a:	3302      	adds	r3, #2
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	041b      	lsls	r3, r3, #16
 800d110:	431a      	orrs	r2, r3
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	3336      	adds	r3, #54	@ 0x36
 800d116:	3301      	adds	r3, #1
 800d118:	781b      	ldrb	r3, [r3, #0]
 800d11a:	021b      	lsls	r3, r3, #8
 800d11c:	4313      	orrs	r3, r2
 800d11e:	687a      	ldr	r2, [r7, #4]
 800d120:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 800d124:	4313      	orrs	r3, r2
 800d126:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d12a:	4a14      	ldr	r2, [pc, #80]	@ (800d17c <check_fs+0xd8>)
 800d12c:	4293      	cmp	r3, r2
 800d12e:	d101      	bne.n	800d134 <check_fs+0x90>
		return 0;
 800d130:	2300      	movs	r3, #0
 800d132:	e01c      	b.n	800d16e <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	3352      	adds	r3, #82	@ 0x52
 800d138:	3303      	adds	r3, #3
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	061a      	lsls	r2, r3, #24
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	3352      	adds	r3, #82	@ 0x52
 800d142:	3302      	adds	r3, #2
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	041b      	lsls	r3, r3, #16
 800d148:	431a      	orrs	r2, r3
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	3352      	adds	r3, #82	@ 0x52
 800d14e:	3301      	adds	r3, #1
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	021b      	lsls	r3, r3, #8
 800d154:	4313      	orrs	r3, r2
 800d156:	687a      	ldr	r2, [r7, #4]
 800d158:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 800d15c:	4313      	orrs	r3, r2
 800d15e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d162:	4a06      	ldr	r2, [pc, #24]	@ (800d17c <check_fs+0xd8>)
 800d164:	4293      	cmp	r3, r2
 800d166:	d101      	bne.n	800d16c <check_fs+0xc8>
		return 0;
 800d168:	2300      	movs	r3, #0
 800d16a:	e000      	b.n	800d16e <check_fs+0xca>

	return 1;
 800d16c:	2301      	movs	r3, #1
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3708      	adds	r7, #8
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
 800d176:	bf00      	nop
 800d178:	ffffaa55 	.word	0xffffaa55
 800d17c:	00544146 	.word	0x00544146

0800d180 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b096      	sub	sp, #88	@ 0x58
 800d184:	af00      	add	r7, sp, #0
 800d186:	60f8      	str	r0, [r7, #12]
 800d188:	60b9      	str	r1, [r7, #8]
 800d18a:	4613      	mov	r3, r2
 800d18c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2200      	movs	r2, #0
 800d192:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d194:	68b8      	ldr	r0, [r7, #8]
 800d196:	f7ff ff41 	bl	800d01c <get_ldnumber>
 800d19a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d19c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	da01      	bge.n	800d1a6 <find_volume+0x26>
 800d1a2:	230b      	movs	r3, #11
 800d1a4:	e319      	b.n	800d7da <find_volume+0x65a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d1a6:	4a9c      	ldr	r2, [pc, #624]	@ (800d418 <find_volume+0x298>)
 800d1a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1ae:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d101      	bne.n	800d1ba <find_volume+0x3a>
 800d1b6:	230c      	movs	r3, #12
 800d1b8:	e30f      	b.n	800d7da <find_volume+0x65a>

	ENTER_FF(fs);						/* Lock the volume */
 800d1ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d1bc:	f7fe f818 	bl	800b1f0 <lock_fs>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d101      	bne.n	800d1ca <find_volume+0x4a>
 800d1c6:	230f      	movs	r3, #15
 800d1c8:	e307      	b.n	800d7da <find_volume+0x65a>
	*rfs = fs;							/* Return pointer to the file system object */
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d1ce:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800d1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d01c      	beq.n	800d216 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800d1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d1e2:	785b      	ldrb	r3, [r3, #1]
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f7fd feed 	bl	800afc4 <disk_status>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d1f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d1f4:	f003 0301 	and.w	r3, r3, #1
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d10c      	bne.n	800d216 <find_volume+0x96>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800d1fc:	79fb      	ldrb	r3, [r7, #7]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d007      	beq.n	800d212 <find_volume+0x92>
 800d202:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d206:	f003 0304 	and.w	r3, r3, #4
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d001      	beq.n	800d212 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800d20e:	230a      	movs	r3, #10
 800d210:	e2e3      	b.n	800d7da <find_volume+0x65a>
			return FR_OK;				/* The file system object is valid */
 800d212:	2300      	movs	r3, #0
 800d214:	e2e1      	b.n	800d7da <find_volume+0x65a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d218:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d21c:	2200      	movs	r2, #0
 800d21e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d222:	b2da      	uxtb	r2, r3
 800d224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d226:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d22a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d22e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d232:	785b      	ldrb	r3, [r3, #1]
 800d234:	4618      	mov	r0, r3
 800d236:	f7fd fedf 	bl	800aff8 <disk_initialize>
 800d23a:	4603      	mov	r3, r0
 800d23c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800d240:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d244:	f003 0301 	and.w	r3, r3, #1
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d001      	beq.n	800d250 <find_volume+0xd0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d24c:	2303      	movs	r3, #3
 800d24e:	e2c4      	b.n	800d7da <find_volume+0x65a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800d250:	79fb      	ldrb	r3, [r7, #7]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d007      	beq.n	800d266 <find_volume+0xe6>
 800d256:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d25a:	f003 0304 	and.w	r3, r3, #4
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d001      	beq.n	800d266 <find_volume+0xe6>
		return FR_WRITE_PROTECTED;
 800d262:	230a      	movs	r3, #10
 800d264:	e2b9      	b.n	800d7da <find_volume+0x65a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800d266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d26c:	7858      	ldrb	r0, [r3, #1]
 800d26e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d270:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d274:	330a      	adds	r3, #10
 800d276:	461a      	mov	r2, r3
 800d278:	2102      	movs	r1, #2
 800d27a:	f7fd ff23 	bl	800b0c4 <disk_ioctl>
 800d27e:	4603      	mov	r3, r0
 800d280:	2b00      	cmp	r3, #0
 800d282:	d10d      	bne.n	800d2a0 <find_volume+0x120>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800d284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d286:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d28a:	895b      	ldrh	r3, [r3, #10]
 800d28c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d290:	d306      	bcc.n	800d2a0 <find_volume+0x120>
 800d292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d294:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d298:	895b      	ldrh	r3, [r3, #10]
 800d29a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d29e:	d901      	bls.n	800d2a4 <find_volume+0x124>
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	e29a      	b.n	800d7da <find_volume+0x65a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800d2a8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d2aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d2ac:	f7ff fefa 	bl	800d0a4 <check_fs>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800d2b6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d2ba:	2b01      	cmp	r3, #1
 800d2bc:	d153      	bne.n	800d366 <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800d2be:	2300      	movs	r3, #0
 800d2c0:	643b      	str	r3, [r7, #64]	@ 0x40
 800d2c2:	e028      	b.n	800d316 <find_volume+0x196>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800d2c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d2c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d2c8:	011b      	lsls	r3, r3, #4
 800d2ca:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d2ce:	4413      	add	r3, r2
 800d2d0:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800d2d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2d4:	3304      	adds	r3, #4
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d012      	beq.n	800d302 <find_volume+0x182>
 800d2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2de:	330b      	adds	r3, #11
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	061a      	lsls	r2, r3, #24
 800d2e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2e6:	330a      	adds	r3, #10
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	041b      	lsls	r3, r3, #16
 800d2ec:	431a      	orrs	r2, r3
 800d2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f0:	3309      	adds	r3, #9
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	021b      	lsls	r3, r3, #8
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2fa:	3208      	adds	r2, #8
 800d2fc:	7812      	ldrb	r2, [r2, #0]
 800d2fe:	431a      	orrs	r2, r3
 800d300:	e000      	b.n	800d304 <find_volume+0x184>
 800d302:	2200      	movs	r2, #0
 800d304:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d306:	009b      	lsls	r3, r3, #2
 800d308:	3358      	adds	r3, #88	@ 0x58
 800d30a:	443b      	add	r3, r7
 800d30c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800d310:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d312:	3301      	adds	r3, #1
 800d314:	643b      	str	r3, [r7, #64]	@ 0x40
 800d316:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d318:	2b03      	cmp	r3, #3
 800d31a:	d9d3      	bls.n	800d2c4 <find_volume+0x144>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800d31c:	2300      	movs	r3, #0
 800d31e:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800d320:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d322:	2b00      	cmp	r3, #0
 800d324:	d002      	beq.n	800d32c <find_volume+0x1ac>
 800d326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d328:	3b01      	subs	r3, #1
 800d32a:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800d32c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	3358      	adds	r3, #88	@ 0x58
 800d332:	443b      	add	r3, r7
 800d334:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d338:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800d33a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d005      	beq.n	800d34c <find_volume+0x1cc>
 800d340:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d342:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d344:	f7ff feae 	bl	800d0a4 <check_fs>
 800d348:	4603      	mov	r3, r0
 800d34a:	e000      	b.n	800d34e <find_volume+0x1ce>
 800d34c:	2302      	movs	r3, #2
 800d34e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800d352:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d356:	2b00      	cmp	r3, #0
 800d358:	d005      	beq.n	800d366 <find_volume+0x1e6>
 800d35a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d35c:	3301      	adds	r3, #1
 800d35e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d360:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d362:	2b03      	cmp	r3, #3
 800d364:	d9e2      	bls.n	800d32c <find_volume+0x1ac>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d366:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d36a:	2b03      	cmp	r3, #3
 800d36c:	d101      	bne.n	800d372 <find_volume+0x1f2>
 800d36e:	2301      	movs	r3, #1
 800d370:	e233      	b.n	800d7da <find_volume+0x65a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800d372:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d376:	2b00      	cmp	r3, #0
 800d378:	d001      	beq.n	800d37e <find_volume+0x1fe>
 800d37a:	230d      	movs	r3, #13
 800d37c:	e22d      	b.n	800d7da <find_volume+0x65a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d37e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d380:	7b1b      	ldrb	r3, [r3, #12]
 800d382:	021b      	lsls	r3, r3, #8
 800d384:	b21a      	sxth	r2, r3
 800d386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d388:	7adb      	ldrb	r3, [r3, #11]
 800d38a:	b21b      	sxth	r3, r3
 800d38c:	4313      	orrs	r3, r2
 800d38e:	b21a      	sxth	r2, r3
 800d390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d392:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d396:	895b      	ldrh	r3, [r3, #10]
 800d398:	b21b      	sxth	r3, r3
 800d39a:	429a      	cmp	r2, r3
 800d39c:	d001      	beq.n	800d3a2 <find_volume+0x222>
		return FR_NO_FILESYSTEM;
 800d39e:	230d      	movs	r3, #13
 800d3a0:	e21b      	b.n	800d7da <find_volume+0x65a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800d3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3a4:	7ddb      	ldrb	r3, [r3, #23]
 800d3a6:	021b      	lsls	r3, r3, #8
 800d3a8:	b21a      	sxth	r2, r3
 800d3aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ac:	7d9b      	ldrb	r3, [r3, #22]
 800d3ae:	b21b      	sxth	r3, r3
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	b21b      	sxth	r3, r3
 800d3b4:	b29b      	uxth	r3, r3
 800d3b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800d3b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d112      	bne.n	800d3e4 <find_volume+0x264>
 800d3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3c0:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800d3c4:	061a      	lsls	r2, r3, #24
 800d3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3c8:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800d3cc:	041b      	lsls	r3, r3, #16
 800d3ce:	431a      	orrs	r2, r3
 800d3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800d3d6:	021b      	lsls	r3, r3, #8
 800d3d8:	4313      	orrs	r3, r2
 800d3da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d3dc:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800d3e0:	4313      	orrs	r3, r2
 800d3e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 800d3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3ee:	61d3      	str	r3, [r2, #28]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800d3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3f2:	7c1a      	ldrb	r2, [r3, #16]
 800d3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d3fa:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800d3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d402:	78db      	ldrb	r3, [r3, #3]
 800d404:	2b01      	cmp	r3, #1
 800d406:	d009      	beq.n	800d41c <find_volume+0x29c>
 800d408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d40a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d40e:	78db      	ldrb	r3, [r3, #3]
 800d410:	2b02      	cmp	r3, #2
 800d412:	d003      	beq.n	800d41c <find_volume+0x29c>
		return FR_NO_FILESYSTEM;
 800d414:	230d      	movs	r3, #13
 800d416:	e1e0      	b.n	800d7da <find_volume+0x65a>
 800d418:	20002a6c 	.word	0x20002a6c
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800d41c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d41e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d422:	78db      	ldrb	r3, [r3, #3]
 800d424:	461a      	mov	r2, r3
 800d426:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d428:	fb02 f303 	mul.w	r3, r2, r3
 800d42c:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800d42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d430:	7b5a      	ldrb	r2, [r3, #13]
 800d432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d434:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d438:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800d43a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d43c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d440:	789b      	ldrb	r3, [r3, #2]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d00c      	beq.n	800d460 <find_volume+0x2e0>
 800d446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d448:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d44c:	789b      	ldrb	r3, [r3, #2]
 800d44e:	461a      	mov	r2, r3
 800d450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d456:	789b      	ldrb	r3, [r3, #2]
 800d458:	3b01      	subs	r3, #1
 800d45a:	4013      	ands	r3, r2
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d001      	beq.n	800d464 <find_volume+0x2e4>
		return FR_NO_FILESYSTEM;
 800d460:	230d      	movs	r3, #13
 800d462:	e1ba      	b.n	800d7da <find_volume+0x65a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800d464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d466:	7c9b      	ldrb	r3, [r3, #18]
 800d468:	021b      	lsls	r3, r3, #8
 800d46a:	b21a      	sxth	r2, r3
 800d46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d46e:	7c5b      	ldrb	r3, [r3, #17]
 800d470:	b21b      	sxth	r3, r3
 800d472:	4313      	orrs	r3, r2
 800d474:	b21b      	sxth	r3, r3
 800d476:	b29a      	uxth	r2, r3
 800d478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d47a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d47e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800d480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d482:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d486:	891b      	ldrh	r3, [r3, #8]
 800d488:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d48a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d48e:	8952      	ldrh	r2, [r2, #10]
 800d490:	0952      	lsrs	r2, r2, #5
 800d492:	b292      	uxth	r2, r2
 800d494:	fbb3 f1f2 	udiv	r1, r3, r2
 800d498:	fb01 f202 	mul.w	r2, r1, r2
 800d49c:	1a9b      	subs	r3, r3, r2
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d001      	beq.n	800d4a8 <find_volume+0x328>
		return FR_NO_FILESYSTEM;
 800d4a4:	230d      	movs	r3, #13
 800d4a6:	e198      	b.n	800d7da <find_volume+0x65a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800d4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4aa:	7d1b      	ldrb	r3, [r3, #20]
 800d4ac:	021b      	lsls	r3, r3, #8
 800d4ae:	b21a      	sxth	r2, r3
 800d4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4b2:	7cdb      	ldrb	r3, [r3, #19]
 800d4b4:	b21b      	sxth	r3, r3
 800d4b6:	4313      	orrs	r3, r2
 800d4b8:	b21b      	sxth	r3, r3
 800d4ba:	b29b      	uxth	r3, r3
 800d4bc:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800d4be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d112      	bne.n	800d4ea <find_volume+0x36a>
 800d4c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4c6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800d4ca:	061a      	lsls	r2, r3, #24
 800d4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ce:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800d4d2:	041b      	lsls	r3, r3, #16
 800d4d4:	431a      	orrs	r2, r3
 800d4d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4d8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d4dc:	021b      	lsls	r3, r3, #8
 800d4de:	4313      	orrs	r3, r2
 800d4e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d4e2:	f892 2020 	ldrb.w	r2, [r2, #32]
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800d4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ec:	7bdb      	ldrb	r3, [r3, #15]
 800d4ee:	021b      	lsls	r3, r3, #8
 800d4f0:	b21a      	sxth	r2, r3
 800d4f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4f4:	7b9b      	ldrb	r3, [r3, #14]
 800d4f6:	b21b      	sxth	r3, r3
 800d4f8:	4313      	orrs	r3, r2
 800d4fa:	b21b      	sxth	r3, r3
 800d4fc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800d4fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d500:	2b00      	cmp	r3, #0
 800d502:	d101      	bne.n	800d508 <find_volume+0x388>
 800d504:	230d      	movs	r3, #13
 800d506:	e168      	b.n	800d7da <find_volume+0x65a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800d508:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d50a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d50c:	4413      	add	r3, r2
 800d50e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d510:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d514:	8911      	ldrh	r1, [r2, #8]
 800d516:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d518:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d51c:	8952      	ldrh	r2, [r2, #10]
 800d51e:	0952      	lsrs	r2, r2, #5
 800d520:	b292      	uxth	r2, r2
 800d522:	fbb1 f2f2 	udiv	r2, r1, r2
 800d526:	b292      	uxth	r2, r2
 800d528:	4413      	add	r3, r2
 800d52a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d52c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d530:	429a      	cmp	r2, r3
 800d532:	d201      	bcs.n	800d538 <find_volume+0x3b8>
 800d534:	230d      	movs	r3, #13
 800d536:	e150      	b.n	800d7da <find_volume+0x65a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800d538:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d53c:	1ad3      	subs	r3, r2, r3
 800d53e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d540:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d544:	7892      	ldrb	r2, [r2, #2]
 800d546:	fbb3 f3f2 	udiv	r3, r3, r2
 800d54a:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800d54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d101      	bne.n	800d556 <find_volume+0x3d6>
 800d552:	230d      	movs	r3, #13
 800d554:	e141      	b.n	800d7da <find_volume+0x65a>
	fmt = FS_FAT12;
 800d556:	2301      	movs	r3, #1
 800d558:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800d55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d55e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d562:	4293      	cmp	r3, r2
 800d564:	d902      	bls.n	800d56c <find_volume+0x3ec>
 800d566:	2302      	movs	r3, #2
 800d568:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800d56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d56e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d572:	4293      	cmp	r3, r2
 800d574:	d902      	bls.n	800d57c <find_volume+0x3fc>
 800d576:	2303      	movs	r3, #3
 800d578:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800d57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d57e:	3302      	adds	r3, #2
 800d580:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d582:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d586:	6193      	str	r3, [r2, #24]
	fs->volbase = bsect;								/* Volume start sector */
 800d588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d58a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d58e:	461a      	mov	r2, r3
 800d590:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d592:	6213      	str	r3, [r2, #32]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800d594:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d596:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d598:	4413      	add	r3, r2
 800d59a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d59c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d5a0:	6253      	str	r3, [r2, #36]	@ 0x24
	fs->database = bsect + sysect;						/* Data start sector */
 800d5a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d5a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5a6:	4413      	add	r3, r2
 800d5a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d5aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d5ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if (fmt == FS_FAT32) {
 800d5b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d5b4:	2b03      	cmp	r3, #3
 800d5b6:	d124      	bne.n	800d602 <find_volume+0x482>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800d5b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d5be:	891b      	ldrh	r3, [r3, #8]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d001      	beq.n	800d5c8 <find_volume+0x448>
 800d5c4:	230d      	movs	r3, #13
 800d5c6:	e108      	b.n	800d7da <find_volume+0x65a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800d5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ca:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d5ce:	061a      	lsls	r2, r3, #24
 800d5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5d2:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800d5d6:	041b      	lsls	r3, r3, #16
 800d5d8:	431a      	orrs	r2, r3
 800d5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d5e0:	021b      	lsls	r3, r3, #8
 800d5e2:	4313      	orrs	r3, r2
 800d5e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d5e6:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 800d5ea:	4313      	orrs	r3, r2
 800d5ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d5ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d5f2:	6293      	str	r3, [r2, #40]	@ 0x28
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800d5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d5fa:	699b      	ldr	r3, [r3, #24]
 800d5fc:	009b      	lsls	r3, r3, #2
 800d5fe:	647b      	str	r3, [r7, #68]	@ 0x44
 800d600:	e02b      	b.n	800d65a <find_volume+0x4da>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800d602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d604:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d608:	891b      	ldrh	r3, [r3, #8]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d101      	bne.n	800d612 <find_volume+0x492>
 800d60e:	230d      	movs	r3, #13
 800d610:	e0e3      	b.n	800d7da <find_volume+0x65a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800d612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d614:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d618:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d61a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d61c:	4413      	add	r3, r2
 800d61e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d620:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d624:	6293      	str	r3, [r2, #40]	@ 0x28
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d626:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d62a:	2b02      	cmp	r3, #2
 800d62c:	d105      	bne.n	800d63a <find_volume+0x4ba>
 800d62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d630:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d634:	699b      	ldr	r3, [r3, #24]
 800d636:	005b      	lsls	r3, r3, #1
 800d638:	e00e      	b.n	800d658 <find_volume+0x4d8>
 800d63a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d63c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d640:	699a      	ldr	r2, [r3, #24]
 800d642:	4613      	mov	r3, r2
 800d644:	005b      	lsls	r3, r3, #1
 800d646:	4413      	add	r3, r2
 800d648:	085a      	lsrs	r2, r3, #1
 800d64a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d64c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d650:	699b      	ldr	r3, [r3, #24]
 800d652:	f003 0301 	and.w	r3, r3, #1
 800d656:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800d658:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800d65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d65c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d660:	69da      	ldr	r2, [r3, #28]
 800d662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d664:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d668:	895b      	ldrh	r3, [r3, #10]
 800d66a:	4619      	mov	r1, r3
 800d66c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d66e:	440b      	add	r3, r1
 800d670:	3b01      	subs	r3, #1
 800d672:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d674:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800d678:	8949      	ldrh	r1, [r1, #10]
 800d67a:	fbb3 f3f1 	udiv	r3, r3, r1
 800d67e:	429a      	cmp	r2, r3
 800d680:	d201      	bcs.n	800d686 <find_volume+0x506>
		return FR_NO_FILESYSTEM;
 800d682:	230d      	movs	r3, #13
 800d684:	e0a9      	b.n	800d7da <find_volume+0x65a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800d686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d688:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d68c:	461a      	mov	r2, r3
 800d68e:	f04f 33ff 	mov.w	r3, #4294967295
 800d692:	6153      	str	r3, [r2, #20]
 800d694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d696:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d69a:	695b      	ldr	r3, [r3, #20]
 800d69c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d69e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d6a2:	6113      	str	r3, [r2, #16]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800d6a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d6aa:	2280      	movs	r2, #128	@ 0x80
 800d6ac:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800d6ae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d6b2:	2b03      	cmp	r3, #3
 800d6b4:	d17a      	bne.n	800d7ac <find_volume+0x62c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800d6b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d6bc:	021b      	lsls	r3, r3, #8
 800d6be:	b21a      	sxth	r2, r3
 800d6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d6c6:	b21b      	sxth	r3, r3
 800d6c8:	4313      	orrs	r3, r2
 800d6ca:	b21b      	sxth	r3, r3
 800d6cc:	2b01      	cmp	r3, #1
 800d6ce:	d16d      	bne.n	800d7ac <find_volume+0x62c>
		&& move_window(fs, bsect + 1) == FR_OK)
 800d6d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	4619      	mov	r1, r3
 800d6d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d6d8:	f7fd ff86 	bl	800b5e8 <move_window>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d164      	bne.n	800d7ac <find_volume+0x62c>
	{
		fs->fsi_flag = 0;
 800d6e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ee:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 800d6f2:	021b      	lsls	r3, r3, #8
 800d6f4:	b21a      	sxth	r2, r3
 800d6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6f8:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 800d6fc:	b21b      	sxth	r3, r3
 800d6fe:	4313      	orrs	r3, r2
 800d700:	b21b      	sxth	r3, r3
 800d702:	4a38      	ldr	r2, [pc, #224]	@ (800d7e4 <find_volume+0x664>)
 800d704:	4293      	cmp	r3, r2
 800d706:	d151      	bne.n	800d7ac <find_volume+0x62c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800d708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d70a:	78db      	ldrb	r3, [r3, #3]
 800d70c:	061a      	lsls	r2, r3, #24
 800d70e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d710:	789b      	ldrb	r3, [r3, #2]
 800d712:	041b      	lsls	r3, r3, #16
 800d714:	431a      	orrs	r2, r3
 800d716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d718:	785b      	ldrb	r3, [r3, #1]
 800d71a:	021b      	lsls	r3, r3, #8
 800d71c:	4313      	orrs	r3, r2
 800d71e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d720:	7812      	ldrb	r2, [r2, #0]
 800d722:	4313      	orrs	r3, r2
 800d724:	4a30      	ldr	r2, [pc, #192]	@ (800d7e8 <find_volume+0x668>)
 800d726:	4293      	cmp	r3, r2
 800d728:	d140      	bne.n	800d7ac <find_volume+0x62c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800d72a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d72c:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 800d730:	061a      	lsls	r2, r3, #24
 800d732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d734:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 800d738:	041b      	lsls	r3, r3, #16
 800d73a:	431a      	orrs	r2, r3
 800d73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d73e:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 800d742:	021b      	lsls	r3, r3, #8
 800d744:	4313      	orrs	r3, r2
 800d746:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d748:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 800d74c:	4313      	orrs	r3, r2
 800d74e:	4a27      	ldr	r2, [pc, #156]	@ (800d7ec <find_volume+0x66c>)
 800d750:	4293      	cmp	r3, r2
 800d752:	d12b      	bne.n	800d7ac <find_volume+0x62c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800d754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d756:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 800d75a:	061a      	lsls	r2, r3, #24
 800d75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d75e:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 800d762:	041b      	lsls	r3, r3, #16
 800d764:	431a      	orrs	r2, r3
 800d766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d768:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 800d76c:	021b      	lsls	r3, r3, #8
 800d76e:	4313      	orrs	r3, r2
 800d770:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d772:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 800d776:	4313      	orrs	r3, r2
 800d778:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d77a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d77e:	6153      	str	r3, [r2, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800d780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d782:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 800d786:	061a      	lsls	r2, r3, #24
 800d788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d78a:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 800d78e:	041b      	lsls	r3, r3, #16
 800d790:	431a      	orrs	r2, r3
 800d792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d794:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 800d798:	021b      	lsls	r3, r3, #8
 800d79a:	4313      	orrs	r3, r2
 800d79c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d79e:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d7a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800d7aa:	6113      	str	r3, [r2, #16]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800d7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d7b8:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800d7ba:	4b0d      	ldr	r3, [pc, #52]	@ (800d7f0 <find_volume+0x670>)
 800d7bc:	881b      	ldrh	r3, [r3, #0]
 800d7be:	3301      	adds	r3, #1
 800d7c0:	b29a      	uxth	r2, r3
 800d7c2:	4b0b      	ldr	r3, [pc, #44]	@ (800d7f0 <find_volume+0x670>)
 800d7c4:	801a      	strh	r2, [r3, #0]
 800d7c6:	4b0a      	ldr	r3, [pc, #40]	@ (800d7f0 <find_volume+0x670>)
 800d7c8:	881a      	ldrh	r2, [r3, #0]
 800d7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d7d0:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800d7d2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d7d4:	f7fd fe8c 	bl	800b4f0 <clear_lock>
#endif

	return FR_OK;
 800d7d8:	2300      	movs	r3, #0
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3758      	adds	r7, #88	@ 0x58
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	ffffaa55 	.word	0xffffaa55
 800d7e8:	41615252 	.word	0x41615252
 800d7ec:	61417272 	.word	0x61417272
 800d7f0:	20002a70 	.word	0x20002a70

0800d7f4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b084      	sub	sp, #16
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d02a      	beq.n	800d85c <validate+0x68>
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d024      	beq.n	800d85c <validate+0x68>
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d01b      	beq.n	800d85c <validate+0x68>
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d830:	88da      	ldrh	r2, [r3, #6]
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d838:	889b      	ldrh	r3, [r3, #4]
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d10e      	bne.n	800d85c <validate+0x68>
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d84a:	785b      	ldrb	r3, [r3, #1]
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7fd fbb9 	bl	800afc4 <disk_status>
 800d852:	4603      	mov	r3, r0
 800d854:	f003 0301 	and.w	r3, r3, #1
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d001      	beq.n	800d860 <validate+0x6c>
		return FR_INVALID_OBJECT;
 800d85c:	2309      	movs	r3, #9
 800d85e:	e00c      	b.n	800d87a <validate+0x86>

	ENTER_FF(fil->fs);		/* Lock file system */
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	4618      	mov	r0, r3
 800d86a:	f7fd fcc1 	bl	800b1f0 <lock_fs>
 800d86e:	4603      	mov	r3, r0
 800d870:	2b00      	cmp	r3, #0
 800d872:	d101      	bne.n	800d878 <validate+0x84>
 800d874:	230f      	movs	r3, #15
 800d876:	e000      	b.n	800d87a <validate+0x86>

	return FR_OK;
 800d878:	2300      	movs	r3, #0
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3710      	adds	r7, #16
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
	...

0800d884 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b088      	sub	sp, #32
 800d888:	af00      	add	r7, sp, #0
 800d88a:	60f8      	str	r0, [r7, #12]
 800d88c:	60b9      	str	r1, [r7, #8]
 800d88e:	4613      	mov	r3, r2
 800d890:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800d896:	f107 0310 	add.w	r3, r7, #16
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7ff fbbe 	bl	800d01c <get_ldnumber>
 800d8a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d8a2:	69fb      	ldr	r3, [r7, #28]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	da01      	bge.n	800d8ac <f_mount+0x28>
 800d8a8:	230b      	movs	r3, #11
 800d8aa:	e050      	b.n	800d94e <f_mount+0xca>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d8ac:	4a2a      	ldr	r2, [pc, #168]	@ (800d958 <f_mount+0xd4>)
 800d8ae:	69fb      	ldr	r3, [r7, #28]
 800d8b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d8b6:	69bb      	ldr	r3, [r7, #24]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d013      	beq.n	800d8e4 <f_mount+0x60>
#if _FS_LOCK
		clear_lock(cfs);
 800d8bc:	69b8      	ldr	r0, [r7, #24]
 800d8be:	f7fd fe17 	bl	800b4f0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d8c8:	68db      	ldr	r3, [r3, #12]
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f001 fcaa 	bl	800f224 <ff_del_syncobj>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d101      	bne.n	800d8da <f_mount+0x56>
 800d8d6:	2302      	movs	r3, #2
 800d8d8:	e039      	b.n	800d94e <f_mount+0xca>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d8da:	69bb      	ldr	r3, [r7, #24]
 800d8dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d013      	beq.n	800d912 <f_mount+0x8e>
		fs->fs_type = 0;				/* Clear new fs object */
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800d8f4:	69fb      	ldr	r3, [r7, #28]
 800d8f6:	b2da      	uxtb	r2, r3
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d8fe:	330c      	adds	r3, #12
 800d900:	4619      	mov	r1, r3
 800d902:	4610      	mov	r0, r2
 800d904:	f001 fc6e 	bl	800f1e4 <ff_cre_syncobj>
 800d908:	4603      	mov	r3, r0
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d101      	bne.n	800d912 <f_mount+0x8e>
 800d90e:	2302      	movs	r3, #2
 800d910:	e01d      	b.n	800d94e <f_mount+0xca>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d912:	68fa      	ldr	r2, [r7, #12]
 800d914:	4910      	ldr	r1, [pc, #64]	@ (800d958 <f_mount+0xd4>)
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d002      	beq.n	800d928 <f_mount+0xa4>
 800d922:	79fb      	ldrb	r3, [r7, #7]
 800d924:	2b01      	cmp	r3, #1
 800d926:	d001      	beq.n	800d92c <f_mount+0xa8>
 800d928:	2300      	movs	r3, #0
 800d92a:	e010      	b.n	800d94e <f_mount+0xca>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800d92c:	f107 0108 	add.w	r1, r7, #8
 800d930:	f107 030c 	add.w	r3, r7, #12
 800d934:	2200      	movs	r2, #0
 800d936:	4618      	mov	r0, r3
 800d938:	f7ff fc22 	bl	800d180 <find_volume>
 800d93c:	4603      	mov	r3, r0
 800d93e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	7dfa      	ldrb	r2, [r7, #23]
 800d944:	4611      	mov	r1, r2
 800d946:	4618      	mov	r0, r3
 800d948:	f7fd fc62 	bl	800b210 <unlock_fs>
 800d94c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3720      	adds	r7, #32
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	20002a6c 	.word	0x20002a6c

0800d95c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	f5ad 5d92 	sub.w	sp, sp, #4672	@ 0x1240
 800d962:	b086      	sub	sp, #24
 800d964:	af00      	add	r7, sp, #0
 800d966:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800d96a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800d96e:	6018      	str	r0, [r3, #0]
 800d970:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800d974:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800d978:	6019      	str	r1, [r3, #0]
 800d97a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800d97e:	f2a3 2351 	subw	r3, r3, #593	@ 0x251
 800d982:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800d984:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800d988:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d101      	bne.n	800d996 <f_open+0x3a>
 800d992:	2309      	movs	r3, #9
 800d994:	e31b      	b.n	800dfce <f_open+0x672>
	fp->fs = 0;			/* Clear file object */
 800d996:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800d99a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800d9aa:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800d9ae:	f2a3 2351 	subw	r3, r3, #593	@ 0x251
 800d9b2:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 800d9b6:	f2a2 2251 	subw	r2, r2, #593	@ 0x251
 800d9ba:	7812      	ldrb	r2, [r2, #0]
 800d9bc:	f002 021f 	and.w	r2, r2, #31
 800d9c0:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800d9c2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800d9c6:	f2a3 2351 	subw	r3, r3, #593	@ 0x251
 800d9ca:	781b      	ldrb	r3, [r3, #0]
 800d9cc:	f023 0301 	bic.w	r3, r3, #1
 800d9d0:	b2da      	uxtb	r2, r3
 800d9d2:	f107 0118 	add.w	r1, r7, #24
 800d9d6:	3910      	subs	r1, #16
 800d9d8:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800d9dc:	3b18      	subs	r3, #24
 800d9de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f7ff fbcc 	bl	800d180 <find_volume>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800d9ee:	f102 0217 	add.w	r2, r2, #23
 800d9f2:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800d9f4:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800d9f8:	f103 0317 	add.w	r3, r3, #23
 800d9fc:	781b      	ldrb	r3, [r3, #0]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	f040 82d3 	bne.w	800dfaa <f_open+0x64e>
		INIT_BUF(dj);
 800da04:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800da08:	461a      	mov	r2, r3
 800da0a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800da0e:	3b04      	subs	r3, #4
 800da10:	f8c2 3fe0 	str.w	r3, [r2, #4064]	@ 0xfe0
 800da14:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800da18:	461a      	mov	r2, r3
 800da1a:	f107 0318 	add.w	r3, r7, #24
 800da1e:	3b04      	subs	r3, #4
 800da20:	f8c2 3fe8 	str.w	r3, [r2, #4072]	@ 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 800da24:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800da28:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800da2c:	681a      	ldr	r2, [r3, #0]
 800da2e:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800da32:	3b18      	subs	r3, #24
 800da34:	4611      	mov	r1, r2
 800da36:	4618      	mov	r0, r3
 800da38:	f7ff fa7a 	bl	800cf30 <follow_path>
 800da3c:	4603      	mov	r3, r0
 800da3e:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800da42:	f102 0217 	add.w	r2, r2, #23
 800da46:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800da48:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800da4c:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 800da50:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800da54:	f102 0210 	add.w	r2, r2, #16
 800da58:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800da5a:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800da5e:	f103 0317 	add.w	r3, r3, #23
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d125      	bne.n	800dab4 <f_open+0x158>
			if (!dir)	/* Default directory itself */
 800da68:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800da6c:	f103 0310 	add.w	r3, r3, #16
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d106      	bne.n	800da84 <f_open+0x128>
				res = FR_INVALID_NAME;
 800da76:	2306      	movs	r3, #6
 800da78:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800da7c:	f102 0217 	add.w	r2, r2, #23
 800da80:	7013      	strb	r3, [r2, #0]
 800da82:	e017      	b.n	800dab4 <f_open+0x158>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800da84:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800da88:	f2a3 2351 	subw	r3, r3, #593	@ 0x251
 800da8c:	781b      	ldrb	r3, [r3, #0]
 800da8e:	2b01      	cmp	r3, #1
 800da90:	bf8c      	ite	hi
 800da92:	2301      	movhi	r3, #1
 800da94:	2300      	movls	r3, #0
 800da96:	b2db      	uxtb	r3, r3
 800da98:	461a      	mov	r2, r3
 800da9a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800da9e:	3b18      	subs	r3, #24
 800daa0:	4611      	mov	r1, r2
 800daa2:	4618      	mov	r0, r3
 800daa4:	f7fd fbd4 	bl	800b250 <chk_lock>
 800daa8:	4603      	mov	r3, r0
 800daaa:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800daae:	f102 0217 	add.w	r2, r2, #23
 800dab2:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dab4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800dab8:	f2a3 2351 	subw	r3, r3, #593	@ 0x251
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	f003 031c 	and.w	r3, r3, #28
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	f000 813f 	beq.w	800dd46 <f_open+0x3ea>
			if (res != FR_OK) {					/* No file, create new */
 800dac8:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800dacc:	f103 0317 	add.w	r3, r3, #23
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d02f      	beq.n	800db36 <f_open+0x1da>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800dad6:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800dada:	f103 0317 	add.w	r3, r3, #23
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	2b04      	cmp	r3, #4
 800dae2:	d112      	bne.n	800db0a <f_open+0x1ae>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dae4:	f7fd fc24 	bl	800b330 <enq_lock>
 800dae8:	4603      	mov	r3, r0
 800daea:	2b00      	cmp	r3, #0
 800daec:	d007      	beq.n	800dafe <f_open+0x1a2>
 800daee:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800daf2:	3b18      	subs	r3, #24
 800daf4:	4618      	mov	r0, r3
 800daf6:	f7fe ff39 	bl	800c96c <dir_register>
 800dafa:	4603      	mov	r3, r0
 800dafc:	e000      	b.n	800db00 <f_open+0x1a4>
 800dafe:	2312      	movs	r3, #18
 800db00:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800db04:	f102 0217 	add.w	r2, r2, #23
 800db08:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800db0a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800db0e:	f2a3 2351 	subw	r3, r3, #593	@ 0x251
 800db12:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 800db16:	f2a2 2251 	subw	r2, r2, #593	@ 0x251
 800db1a:	7812      	ldrb	r2, [r2, #0]
 800db1c:	f042 0208 	orr.w	r2, r2, #8
 800db20:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800db22:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800db26:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 800db2a:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800db2e:	f102 0210 	add.w	r2, r2, #16
 800db32:	6013      	str	r3, [r2, #0]
 800db34:	e020      	b.n	800db78 <f_open+0x21c>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800db36:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800db3a:	f103 0310 	add.w	r3, r3, #16
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	330b      	adds	r3, #11
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	f003 0311 	and.w	r3, r3, #17
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d006      	beq.n	800db5a <f_open+0x1fe>
					res = FR_DENIED;
 800db4c:	2307      	movs	r3, #7
 800db4e:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800db52:	f102 0217 	add.w	r2, r2, #23
 800db56:	7013      	strb	r3, [r2, #0]
 800db58:	e00e      	b.n	800db78 <f_open+0x21c>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800db5a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800db5e:	f2a3 2351 	subw	r3, r3, #593	@ 0x251
 800db62:	781b      	ldrb	r3, [r3, #0]
 800db64:	f003 0304 	and.w	r3, r3, #4
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d005      	beq.n	800db78 <f_open+0x21c>
						res = FR_EXIST;
 800db6c:	2308      	movs	r3, #8
 800db6e:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800db72:	f102 0217 	add.w	r2, r2, #23
 800db76:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800db78:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800db7c:	f103 0317 	add.w	r3, r3, #23
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	f040 8112 	bne.w	800ddac <f_open+0x450>
 800db88:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800db8c:	f2a3 2351 	subw	r3, r3, #593	@ 0x251
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	f003 0308 	and.w	r3, r3, #8
 800db96:	2b00      	cmp	r3, #0
 800db98:	f000 8108 	beq.w	800ddac <f_open+0x450>
				dw = GET_FATTIME();				/* Created time */
 800db9c:	f7fd f98c 	bl	800aeb8 <get_fattime>
 800dba0:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800dba4:	f103 030c 	add.w	r3, r3, #12
 800dba8:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800dbaa:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800dbae:	f103 0310 	add.w	r3, r3, #16
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	330e      	adds	r3, #14
 800dbb6:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800dbba:	f102 020c 	add.w	r2, r2, #12
 800dbbe:	6812      	ldr	r2, [r2, #0]
 800dbc0:	b2d2      	uxtb	r2, r2
 800dbc2:	701a      	strb	r2, [r3, #0]
 800dbc4:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800dbc8:	f103 030c 	add.w	r3, r3, #12
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	0a1b      	lsrs	r3, r3, #8
 800dbd2:	b29a      	uxth	r2, r3
 800dbd4:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800dbd8:	f103 0310 	add.w	r3, r3, #16
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	330f      	adds	r3, #15
 800dbe0:	b2d2      	uxtb	r2, r2
 800dbe2:	701a      	strb	r2, [r3, #0]
 800dbe4:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800dbe8:	f103 030c 	add.w	r3, r3, #12
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	0c1a      	lsrs	r2, r3, #16
 800dbf0:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800dbf4:	f103 0310 	add.w	r3, r3, #16
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	3310      	adds	r3, #16
 800dbfc:	b2d2      	uxtb	r2, r2
 800dbfe:	701a      	strb	r2, [r3, #0]
 800dc00:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800dc04:	f103 030c 	add.w	r3, r3, #12
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	0e1a      	lsrs	r2, r3, #24
 800dc0c:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800dc10:	f103 0310 	add.w	r3, r3, #16
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	3311      	adds	r3, #17
 800dc18:	b2d2      	uxtb	r2, r2
 800dc1a:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800dc1c:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800dc20:	f103 0310 	add.w	r3, r3, #16
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	330b      	adds	r3, #11
 800dc28:	2200      	movs	r2, #0
 800dc2a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800dc2c:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800dc30:	f103 0310 	add.w	r3, r3, #16
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	331c      	adds	r3, #28
 800dc38:	2200      	movs	r2, #0
 800dc3a:	701a      	strb	r2, [r3, #0]
 800dc3c:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800dc40:	f103 0310 	add.w	r3, r3, #16
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	331d      	adds	r3, #29
 800dc48:	2200      	movs	r2, #0
 800dc4a:	701a      	strb	r2, [r3, #0]
 800dc4c:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800dc50:	f103 0310 	add.w	r3, r3, #16
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	331e      	adds	r3, #30
 800dc58:	2200      	movs	r2, #0
 800dc5a:	701a      	strb	r2, [r3, #0]
 800dc5c:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800dc60:	f103 0310 	add.w	r3, r3, #16
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	331f      	adds	r3, #31
 800dc68:	2200      	movs	r2, #0
 800dc6a:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800dc6c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800dc70:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800dc74:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800dc78:	f102 0210 	add.w	r2, r2, #16
 800dc7c:	6811      	ldr	r1, [r2, #0]
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7fe fbc4 	bl	800c40c <ld_clust>
 800dc84:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800dc88:	f103 0308 	add.w	r3, r3, #8
 800dc8c:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800dc8e:	2100      	movs	r1, #0
 800dc90:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800dc94:	f103 0310 	add.w	r3, r3, #16
 800dc98:	6818      	ldr	r0, [r3, #0]
 800dc9a:	f7fe fbe5 	bl	800c468 <st_clust>
				dj.fs->wflag = 1;
 800dc9e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800dca2:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800dca6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dcaa:	2201      	movs	r2, #1
 800dcac:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 800dcae:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800dcb2:	f103 0308 	add.w	r3, r3, #8
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d077      	beq.n	800ddac <f_open+0x450>
					dw = dj.fs->winsect;
 800dcbc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800dcc0:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800dcc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dcc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcca:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800dcce:	f102 020c 	add.w	r2, r2, #12
 800dcd2:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800dcd4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800dcd8:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800dcdc:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800dce0:	f102 0208 	add.w	r2, r2, #8
 800dce4:	6811      	ldr	r1, [r2, #0]
 800dce6:	4618      	mov	r0, r3
 800dce8:	f7fd ffe1 	bl	800bcae <remove_chain>
 800dcec:	4603      	mov	r3, r0
 800dcee:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800dcf2:	f102 0217 	add.w	r2, r2, #23
 800dcf6:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800dcf8:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800dcfc:	f103 0317 	add.w	r3, r3, #23
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d152      	bne.n	800ddac <f_open+0x450>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800dd06:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800dd0a:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	@ 0xfc8
 800dd0e:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800dd12:	f103 0308 	add.w	r3, r3, #8
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	3b01      	subs	r3, #1
 800dd1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800dd1e:	6113      	str	r3, [r2, #16]
						res = move_window(dj.fs, dw);
 800dd20:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800dd24:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800dd28:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800dd2c:	f102 020c 	add.w	r2, r2, #12
 800dd30:	6811      	ldr	r1, [r2, #0]
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7fd fc58 	bl	800b5e8 <move_window>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800dd3e:	f102 0217 	add.w	r2, r2, #23
 800dd42:	7013      	strb	r3, [r2, #0]
 800dd44:	e032      	b.n	800ddac <f_open+0x450>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800dd46:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800dd4a:	f103 0317 	add.w	r3, r3, #23
 800dd4e:	781b      	ldrb	r3, [r3, #0]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d12b      	bne.n	800ddac <f_open+0x450>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800dd54:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800dd58:	f103 0310 	add.w	r3, r3, #16
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	330b      	adds	r3, #11
 800dd60:	781b      	ldrb	r3, [r3, #0]
 800dd62:	f003 0310 	and.w	r3, r3, #16
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d006      	beq.n	800dd78 <f_open+0x41c>
					res = FR_NO_FILE;
 800dd6a:	2304      	movs	r3, #4
 800dd6c:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800dd70:	f102 0217 	add.w	r2, r2, #23
 800dd74:	7013      	strb	r3, [r2, #0]
 800dd76:	e019      	b.n	800ddac <f_open+0x450>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800dd78:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800dd7c:	f2a3 2351 	subw	r3, r3, #593	@ 0x251
 800dd80:	781b      	ldrb	r3, [r3, #0]
 800dd82:	f003 0302 	and.w	r3, r3, #2
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d010      	beq.n	800ddac <f_open+0x450>
 800dd8a:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800dd8e:	f103 0310 	add.w	r3, r3, #16
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	330b      	adds	r3, #11
 800dd96:	781b      	ldrb	r3, [r3, #0]
 800dd98:	f003 0301 	and.w	r3, r3, #1
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d005      	beq.n	800ddac <f_open+0x450>
						res = FR_DENIED;
 800dda0:	2307      	movs	r3, #7
 800dda2:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800dda6:	f102 0217 	add.w	r2, r2, #23
 800ddaa:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800ddac:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800ddb0:	f103 0317 	add.w	r3, r3, #23
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d15c      	bne.n	800de74 <f_open+0x518>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ddba:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800ddbe:	f2a3 2351 	subw	r3, r3, #593	@ 0x251
 800ddc2:	781b      	ldrb	r3, [r3, #0]
 800ddc4:	f003 0308 	and.w	r3, r3, #8
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d00b      	beq.n	800dde4 <f_open+0x488>
				mode |= FA__WRITTEN;
 800ddcc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800ddd0:	f2a3 2351 	subw	r3, r3, #593	@ 0x251
 800ddd4:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 800ddd8:	f2a2 2251 	subw	r2, r2, #593	@ 0x251
 800dddc:	7812      	ldrb	r2, [r2, #0]
 800ddde:	f042 0220 	orr.w	r2, r2, #32
 800dde2:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800dde4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800dde8:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800ddec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ddf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddf2:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 800ddf6:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 800ddfa:	6812      	ldr	r2, [r2, #0]
 800ddfc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800de00:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 800de02:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800de06:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800de10:	461a      	mov	r2, r3
 800de12:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800de16:	f103 0310 	add.w	r3, r3, #16
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800de1e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800de22:	f2a3 2351 	subw	r3, r3, #593	@ 0x251
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	2b01      	cmp	r3, #1
 800de2a:	bf8c      	ite	hi
 800de2c:	2301      	movhi	r3, #1
 800de2e:	2300      	movls	r3, #0
 800de30:	b2db      	uxtb	r3, r3
 800de32:	461a      	mov	r2, r3
 800de34:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800de38:	3b18      	subs	r3, #24
 800de3a:	4611      	mov	r1, r2
 800de3c:	4618      	mov	r0, r3
 800de3e:	f7fd fa9b 	bl	800b378 <inc_lock>
 800de42:	4602      	mov	r2, r0
 800de44:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800de48:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800de52:	629a      	str	r2, [r3, #40]	@ 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800de54:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800de58:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800de62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de64:	2b00      	cmp	r3, #0
 800de66:	d105      	bne.n	800de74 <f_open+0x518>
 800de68:	2302      	movs	r3, #2
 800de6a:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800de6e:	f102 0217 	add.w	r2, r2, #23
 800de72:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800de74:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800de78:	f103 0317 	add.w	r3, r3, #23
 800de7c:	781b      	ldrb	r3, [r3, #0]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	f040 8093 	bne.w	800dfaa <f_open+0x64e>
			fp->flag = mode;					/* File access mode */
 800de84:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800de88:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800de92:	461a      	mov	r2, r3
 800de94:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800de98:	f2a3 2351 	subw	r3, r3, #593	@ 0x251
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 800dea0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800dea4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800deae:	2200      	movs	r2, #0
 800deb0:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800deb2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800deb6:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800deba:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800debe:	f102 0210 	add.w	r2, r2, #16
 800dec2:	6811      	ldr	r1, [r2, #0]
 800dec4:	4618      	mov	r0, r3
 800dec6:	f7fe faa1 	bl	800c40c <ld_clust>
 800deca:	4602      	mov	r2, r0
 800decc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800ded0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800deda:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800dedc:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800dee0:	f103 0310 	add.w	r3, r3, #16
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	331f      	adds	r3, #31
 800dee8:	781b      	ldrb	r3, [r3, #0]
 800deea:	061a      	lsls	r2, r3, #24
 800deec:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800def0:	f103 0310 	add.w	r3, r3, #16
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	331e      	adds	r3, #30
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	041b      	lsls	r3, r3, #16
 800defc:	431a      	orrs	r2, r3
 800defe:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800df02:	f103 0310 	add.w	r3, r3, #16
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	331d      	adds	r3, #29
 800df0a:	781b      	ldrb	r3, [r3, #0]
 800df0c:	021b      	lsls	r3, r3, #8
 800df0e:	4313      	orrs	r3, r2
 800df10:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800df14:	f102 0210 	add.w	r2, r2, #16
 800df18:	6812      	ldr	r2, [r2, #0]
 800df1a:	321c      	adds	r2, #28
 800df1c:	7812      	ldrb	r2, [r2, #0]
 800df1e:	4313      	orrs	r3, r2
 800df20:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 800df24:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 800df28:	6812      	ldr	r2, [r2, #0]
 800df2a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800df2e:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800df30:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800df34:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800df3e:	461a      	mov	r2, r3
 800df40:	2300      	movs	r3, #0
 800df42:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 800df44:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800df48:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800df52:	461a      	mov	r2, r3
 800df54:	2300      	movs	r3, #0
 800df56:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800df58:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800df5c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800df66:	461a      	mov	r2, r3
 800df68:	2300      	movs	r3, #0
 800df6a:	6253      	str	r3, [r2, #36]	@ 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800df6c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800df70:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800df74:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 800df78:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 800df7c:	6812      	ldr	r2, [r2, #0]
 800df7e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800df82:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800df84:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800df88:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800df98:	88da      	ldrh	r2, [r3, #6]
 800df9a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800df9e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dfa8:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800dfaa:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800dfae:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800dfb2:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800dfb6:	f102 0217 	add.w	r2, r2, #23
 800dfba:	7812      	ldrb	r2, [r2, #0]
 800dfbc:	4611      	mov	r1, r2
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7fd f926 	bl	800b210 <unlock_fs>
 800dfc4:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 800dfc8:	f103 0317 	add.w	r3, r3, #23
 800dfcc:	781b      	ldrb	r3, [r3, #0]
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f507 5792 	add.w	r7, r7, #4672	@ 0x1240
 800dfd4:	3718      	adds	r7, #24
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}

0800dfda <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800dfda:	b580      	push	{r7, lr}
 800dfdc:	b08a      	sub	sp, #40	@ 0x28
 800dfde:	af00      	add	r7, sp, #0
 800dfe0:	60f8      	str	r0, [r7, #12]
 800dfe2:	60b9      	str	r1, [r7, #8]
 800dfe4:	607a      	str	r2, [r7, #4]
 800dfe6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	2200      	movs	r2, #0
 800dff0:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800dff2:	68f8      	ldr	r0, [r7, #12]
 800dff4:	f7ff fbfe 	bl	800d7f4 <validate>
 800dff8:	4603      	mov	r3, r0
 800dffa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800dffc:	7dfb      	ldrb	r3, [r7, #23]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d00a      	beq.n	800e018 <f_write+0x3e>
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	7dfa      	ldrb	r2, [r7, #23]
 800e00c:	4611      	mov	r1, r2
 800e00e:	4618      	mov	r0, r3
 800e010:	f7fd f8fe 	bl	800b210 <unlock_fs>
 800e014:	7dfb      	ldrb	r3, [r7, #23]
 800e016:	e26a      	b.n	800e4ee <f_write+0x514>
	if (fp->err)							/* Check error */
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e01e:	79db      	ldrb	r3, [r3, #7]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d010      	beq.n	800e046 <f_write+0x6c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e02a:	681a      	ldr	r2, [r3, #0]
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e032:	79db      	ldrb	r3, [r3, #7]
 800e034:	4619      	mov	r1, r3
 800e036:	4610      	mov	r0, r2
 800e038:	f7fd f8ea 	bl	800b210 <unlock_fs>
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e042:	79db      	ldrb	r3, [r3, #7]
 800e044:	e253      	b.n	800e4ee <f_write+0x514>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e04c:	799b      	ldrb	r3, [r3, #6]
 800e04e:	f003 0302 	and.w	r3, r3, #2
 800e052:	2b00      	cmp	r3, #0
 800e054:	d109      	bne.n	800e06a <f_write+0x90>
		LEAVE_FF(fp->fs, FR_DENIED);
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	2107      	movs	r1, #7
 800e060:	4618      	mov	r0, r3
 800e062:	f7fd f8d5 	bl	800b210 <unlock_fs>
 800e066:	2307      	movs	r3, #7
 800e068:	e241      	b.n	800e4ee <f_write+0x514>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e070:	689a      	ldr	r2, [r3, #8]
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	441a      	add	r2, r3
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e07c:	689b      	ldr	r3, [r3, #8]
 800e07e:	429a      	cmp	r2, r3
 800e080:	f080 8209 	bcs.w	800e496 <f_write+0x4bc>
 800e084:	2300      	movs	r3, #0
 800e086:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800e088:	e205      	b.n	800e496 <f_write+0x4bc>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e090:	689b      	ldr	r3, [r3, #8]
 800e092:	68fa      	ldr	r2, [r7, #12]
 800e094:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800e098:	6812      	ldr	r2, [r2, #0]
 800e09a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800e09e:	8952      	ldrh	r2, [r2, #10]
 800e0a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800e0a4:	fb01 f202 	mul.w	r2, r1, r2
 800e0a8:	1a9b      	subs	r3, r3, r2
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	f040 8199 	bne.w	800e3e2 <f_write+0x408>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e0b6:	689b      	ldr	r3, [r3, #8]
 800e0b8:	68fa      	ldr	r2, [r7, #12]
 800e0ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800e0be:	6812      	ldr	r2, [r2, #0]
 800e0c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800e0c4:	8952      	ldrh	r2, [r2, #10]
 800e0c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0ca:	b2da      	uxtb	r2, r3
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e0d8:	789b      	ldrb	r3, [r3, #2]
 800e0da:	3b01      	subs	r3, #1
 800e0dc:	b2db      	uxtb	r3, r3
 800e0de:	4013      	ands	r3, r2
 800e0e0:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800e0e2:	7dbb      	ldrb	r3, [r7, #22]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d16f      	bne.n	800e1c8 <f_write+0x1ee>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e0ee:	689b      	ldr	r3, [r3, #8]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d111      	bne.n	800e118 <f_write+0x13e>
					clst = fp->sclust;		/* Follow from the origin */
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e0fa:	691b      	ldr	r3, [r3, #16]
 800e0fc:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800e0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e100:	2b00      	cmp	r3, #0
 800e102:	d126      	bne.n	800e152 <f_write+0x178>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	2100      	movs	r1, #0
 800e10e:	4618      	mov	r0, r3
 800e110:	f7fd fe2e 	bl	800bd70 <create_chain>
 800e114:	6278      	str	r0, [r7, #36]	@ 0x24
 800e116:	e01c      	b.n	800e152 <f_write+0x178>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e11e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e120:	2b00      	cmp	r3, #0
 800e122:	d009      	beq.n	800e138 <f_write+0x15e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e12a:	689b      	ldr	r3, [r3, #8]
 800e12c:	4619      	mov	r1, r3
 800e12e:	68f8      	ldr	r0, [r7, #12]
 800e130:	f7fd fec6 	bl	800bec0 <clmt_clust>
 800e134:	6278      	str	r0, [r7, #36]	@ 0x24
 800e136:	e00c      	b.n	800e152 <f_write+0x178>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e13e:	681a      	ldr	r2, [r3, #0]
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e146:	695b      	ldr	r3, [r3, #20]
 800e148:	4619      	mov	r1, r3
 800e14a:	4610      	mov	r0, r2
 800e14c:	f7fd fe10 	bl	800bd70 <create_chain>
 800e150:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e154:	2b00      	cmp	r3, #0
 800e156:	f000 81a3 	beq.w	800e4a0 <f_write+0x4c6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800e15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e15c:	2b01      	cmp	r3, #1
 800e15e:	d10e      	bne.n	800e17e <f_write+0x1a4>
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e166:	2202      	movs	r2, #2
 800e168:	71da      	strb	r2, [r3, #7]
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	2102      	movs	r1, #2
 800e174:	4618      	mov	r0, r3
 800e176:	f7fd f84b 	bl	800b210 <unlock_fs>
 800e17a:	2302      	movs	r3, #2
 800e17c:	e1b7      	b.n	800e4ee <f_write+0x514>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800e17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e180:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e184:	d10e      	bne.n	800e1a4 <f_write+0x1ca>
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e18c:	2201      	movs	r2, #1
 800e18e:	71da      	strb	r2, [r3, #7]
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	2101      	movs	r1, #1
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7fd f838 	bl	800b210 <unlock_fs>
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	e1a4      	b.n	800e4ee <f_write+0x514>
				fp->clust = clst;			/* Update current cluster */
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e1aa:	461a      	mov	r2, r3
 800e1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1ae:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e1b6:	691b      	ldr	r3, [r3, #16]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d105      	bne.n	800e1c8 <f_write+0x1ee>
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e1c2:	461a      	mov	r2, r3
 800e1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1c6:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e1ce:	799b      	ldrb	r3, [r3, #6]
 800e1d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d02b      	beq.n	800e230 <f_write+0x256>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e1e4:	7858      	ldrb	r0, [r3, #1]
 800e1e6:	68f9      	ldr	r1, [r7, #12]
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e1ee:	699a      	ldr	r2, [r3, #24]
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	f7fc ff47 	bl	800b084 <disk_write>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d00e      	beq.n	800e21a <f_write+0x240>
					ABORT(fp->fs, FR_DISK_ERR);
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e202:	2201      	movs	r2, #1
 800e204:	71da      	strb	r2, [r3, #7]
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	2101      	movs	r1, #1
 800e210:	4618      	mov	r0, r3
 800e212:	f7fc fffd 	bl	800b210 <unlock_fs>
 800e216:	2301      	movs	r3, #1
 800e218:	e169      	b.n	800e4ee <f_write+0x514>
				fp->flag &= ~FA__DIRTY;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e220:	799b      	ldrb	r3, [r3, #6]
 800e222:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e226:	b2da      	uxtb	r2, r3
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e22e:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e236:	681a      	ldr	r2, [r3, #0]
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e23e:	695b      	ldr	r3, [r3, #20]
 800e240:	4619      	mov	r1, r3
 800e242:	4610      	mov	r0, r2
 800e244:	f7fd fac1 	bl	800b7ca <clust2sect>
 800e248:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d10e      	bne.n	800e26e <f_write+0x294>
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e256:	2202      	movs	r2, #2
 800e258:	71da      	strb	r2, [r3, #7]
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	2102      	movs	r1, #2
 800e264:	4618      	mov	r0, r3
 800e266:	f7fc ffd3 	bl	800b210 <unlock_fs>
 800e26a:	2302      	movs	r3, #2
 800e26c:	e13f      	b.n	800e4ee <f_write+0x514>
			sect += csect;
 800e26e:	7dbb      	ldrb	r3, [r7, #22]
 800e270:	693a      	ldr	r2, [r7, #16]
 800e272:	4413      	add	r3, r2
 800e274:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e282:	895b      	ldrh	r3, [r3, #10]
 800e284:	461a      	mov	r2, r3
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	fbb3 f3f2 	udiv	r3, r3, r2
 800e28c:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e28e:	69fb      	ldr	r3, [r7, #28]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d071      	beq.n	800e378 <f_write+0x39e>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800e294:	7dba      	ldrb	r2, [r7, #22]
 800e296:	69fb      	ldr	r3, [r7, #28]
 800e298:	4413      	add	r3, r2
 800e29a:	68fa      	ldr	r2, [r7, #12]
 800e29c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800e2a0:	6812      	ldr	r2, [r2, #0]
 800e2a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800e2a6:	7892      	ldrb	r2, [r2, #2]
 800e2a8:	4293      	cmp	r3, r2
 800e2aa:	d90a      	bls.n	800e2c2 <f_write+0x2e8>
					cc = fp->fs->csize - csect;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e2b8:	789b      	ldrb	r3, [r3, #2]
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	7dbb      	ldrb	r3, [r7, #22]
 800e2be:	1ad3      	subs	r3, r2, r3
 800e2c0:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e2ce:	7858      	ldrb	r0, [r3, #1]
 800e2d0:	69fb      	ldr	r3, [r7, #28]
 800e2d2:	693a      	ldr	r2, [r7, #16]
 800e2d4:	69b9      	ldr	r1, [r7, #24]
 800e2d6:	f7fc fed5 	bl	800b084 <disk_write>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d00e      	beq.n	800e2fe <f_write+0x324>
					ABORT(fp->fs, FR_DISK_ERR);
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	71da      	strb	r2, [r3, #7]
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	2101      	movs	r1, #1
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7fc ff8b 	bl	800b210 <unlock_fs>
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	e0f7      	b.n	800e4ee <f_write+0x514>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e304:	699a      	ldr	r2, [r3, #24]
 800e306:	693b      	ldr	r3, [r7, #16]
 800e308:	1ad3      	subs	r3, r2, r3
 800e30a:	69fa      	ldr	r2, [r7, #28]
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d926      	bls.n	800e35e <f_write+0x384>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800e310:	68f8      	ldr	r0, [r7, #12]
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e318:	699a      	ldr	r2, [r3, #24]
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	1ad3      	subs	r3, r2, r3
 800e31e:	68fa      	ldr	r2, [r7, #12]
 800e320:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800e324:	6812      	ldr	r2, [r2, #0]
 800e326:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800e32a:	8952      	ldrh	r2, [r2, #10]
 800e32c:	fb02 f303 	mul.w	r3, r2, r3
 800e330:	69ba      	ldr	r2, [r7, #24]
 800e332:	18d1      	adds	r1, r2, r3
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e340:	895b      	ldrh	r3, [r3, #10]
 800e342:	461a      	mov	r2, r3
 800e344:	f7fc fedc 	bl	800b100 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e34e:	799b      	ldrb	r3, [r3, #6]
 800e350:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e354:	b2da      	uxtb	r2, r3
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e35c:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e36a:	895b      	ldrh	r3, [r3, #10]
 800e36c:	461a      	mov	r2, r3
 800e36e:	69fb      	ldr	r3, [r7, #28]
 800e370:	fb02 f303 	mul.w	r3, r2, r3
 800e374:	623b      	str	r3, [r7, #32]
				continue;
 800e376:	e076      	b.n	800e466 <f_write+0x48c>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e37e:	699b      	ldr	r3, [r3, #24]
 800e380:	693a      	ldr	r2, [r7, #16]
 800e382:	429a      	cmp	r2, r3
 800e384:	d027      	beq.n	800e3d6 <f_write+0x3fc>
				if (fp->fptr < fp->fsize &&
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e38c:	689a      	ldr	r2, [r3, #8]
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e394:	68db      	ldr	r3, [r3, #12]
 800e396:	429a      	cmp	r2, r3
 800e398:	d21d      	bcs.n	800e3d6 <f_write+0x3fc>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e3a6:	7858      	ldrb	r0, [r3, #1]
 800e3a8:	68f9      	ldr	r1, [r7, #12]
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	693a      	ldr	r2, [r7, #16]
 800e3ae:	f7fc fe49 	bl	800b044 <disk_read>
 800e3b2:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d00e      	beq.n	800e3d6 <f_write+0x3fc>
						ABORT(fp->fs, FR_DISK_ERR);
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e3be:	2201      	movs	r2, #1
 800e3c0:	71da      	strb	r2, [r3, #7]
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	2101      	movs	r1, #1
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f7fc ff1f 	bl	800b210 <unlock_fs>
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	e08b      	b.n	800e4ee <f_write+0x514>
			}
#endif
			fp->dsect = sect;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e3dc:	461a      	mov	r2, r3
 800e3de:	693b      	ldr	r3, [r7, #16]
 800e3e0:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e3ee:	895b      	ldrh	r3, [r3, #10]
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e3f8:	689b      	ldr	r3, [r3, #8]
 800e3fa:	68fa      	ldr	r2, [r7, #12]
 800e3fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800e400:	6812      	ldr	r2, [r2, #0]
 800e402:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800e406:	8952      	ldrh	r2, [r2, #10]
 800e408:	fbb3 f1f2 	udiv	r1, r3, r2
 800e40c:	fb01 f202 	mul.w	r2, r1, r2
 800e410:	1a9b      	subs	r3, r3, r2
 800e412:	1ac3      	subs	r3, r0, r3
 800e414:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800e416:	6a3a      	ldr	r2, [r7, #32]
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d901      	bls.n	800e422 <f_write+0x448>
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e428:	689b      	ldr	r3, [r3, #8]
 800e42a:	68fa      	ldr	r2, [r7, #12]
 800e42c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800e430:	6812      	ldr	r2, [r2, #0]
 800e432:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800e436:	8952      	ldrh	r2, [r2, #10]
 800e438:	fbb3 f1f2 	udiv	r1, r3, r2
 800e43c:	fb01 f202 	mul.w	r2, r1, r2
 800e440:	1a9b      	subs	r3, r3, r2
 800e442:	68fa      	ldr	r2, [r7, #12]
 800e444:	4413      	add	r3, r2
 800e446:	6a3a      	ldr	r2, [r7, #32]
 800e448:	69b9      	ldr	r1, [r7, #24]
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7fc fe58 	bl	800b100 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e456:	799b      	ldrb	r3, [r3, #6]
 800e458:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e45c:	b2da      	uxtb	r2, r3
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e464:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800e466:	69ba      	ldr	r2, [r7, #24]
 800e468:	6a3b      	ldr	r3, [r7, #32]
 800e46a:	4413      	add	r3, r2
 800e46c:	61bb      	str	r3, [r7, #24]
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e474:	689a      	ldr	r2, [r3, #8]
 800e476:	6a3b      	ldr	r3, [r7, #32]
 800e478:	4413      	add	r3, r2
 800e47a:	68fa      	ldr	r2, [r7, #12]
 800e47c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800e480:	6093      	str	r3, [r2, #8]
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	681a      	ldr	r2, [r3, #0]
 800e486:	6a3b      	ldr	r3, [r7, #32]
 800e488:	441a      	add	r2, r3
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	601a      	str	r2, [r3, #0]
 800e48e:	687a      	ldr	r2, [r7, #4]
 800e490:	6a3b      	ldr	r3, [r7, #32]
 800e492:	1ad3      	subs	r3, r2, r3
 800e494:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	f47f adf6 	bne.w	800e08a <f_write+0xb0>
 800e49e:	e000      	b.n	800e4a2 <f_write+0x4c8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e4a0:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e4a8:	689a      	ldr	r2, [r3, #8]
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e4b0:	68db      	ldr	r3, [r3, #12]
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d907      	bls.n	800e4c6 <f_write+0x4ec>
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e4bc:	689b      	ldr	r3, [r3, #8]
 800e4be:	68fa      	ldr	r2, [r7, #12]
 800e4c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800e4c4:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e4cc:	799b      	ldrb	r3, [r3, #6]
 800e4ce:	f043 0320 	orr.w	r3, r3, #32
 800e4d2:	b2da      	uxtb	r2, r3
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e4da:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	2100      	movs	r1, #0
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7fc fe92 	bl	800b210 <unlock_fs>
 800e4ec:	2300      	movs	r3, #0
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3728      	adds	r7, #40	@ 0x28
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}

0800e4f6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e4f6:	b580      	push	{r7, lr}
 800e4f8:	b086      	sub	sp, #24
 800e4fa:	af00      	add	r7, sp, #0
 800e4fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f7ff f978 	bl	800d7f4 <validate>
 800e504:	4603      	mov	r3, r0
 800e506:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e508:	7dfb      	ldrb	r3, [r7, #23]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	f040 80c4 	bne.w	800e698 <f_sync+0x1a2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e516:	799b      	ldrb	r3, [r3, #6]
 800e518:	f003 0320 	and.w	r3, r3, #32
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	f000 80bb 	beq.w	800e698 <f_sync+0x1a2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e528:	799b      	ldrb	r3, [r3, #6]
 800e52a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d026      	beq.n	800e580 <f_sync+0x8a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e53e:	7858      	ldrb	r0, [r3, #1]
 800e540:	6879      	ldr	r1, [r7, #4]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e548:	699a      	ldr	r2, [r3, #24]
 800e54a:	2301      	movs	r3, #1
 800e54c:	f7fc fd9a 	bl	800b084 <disk_write>
 800e550:	4603      	mov	r3, r0
 800e552:	2b00      	cmp	r3, #0
 800e554:	d009      	beq.n	800e56a <f_sync+0x74>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	2101      	movs	r1, #1
 800e560:	4618      	mov	r0, r3
 800e562:	f7fc fe55 	bl	800b210 <unlock_fs>
 800e566:	2301      	movs	r3, #1
 800e568:	e0a0      	b.n	800e6ac <f_sync+0x1b6>
				fp->flag &= ~FA__DIRTY;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e570:	799b      	ldrb	r3, [r3, #6]
 800e572:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e576:	b2da      	uxtb	r2, r3
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e57e:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e586:	681a      	ldr	r2, [r3, #0]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e58e:	69db      	ldr	r3, [r3, #28]
 800e590:	4619      	mov	r1, r3
 800e592:	4610      	mov	r0, r2
 800e594:	f7fd f828 	bl	800b5e8 <move_window>
 800e598:	4603      	mov	r3, r0
 800e59a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800e59c:	7dfb      	ldrb	r3, [r7, #23]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d17a      	bne.n	800e698 <f_sync+0x1a2>
				dir = fp->dir_ptr;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e5a8:	6a1b      	ldr	r3, [r3, #32]
 800e5aa:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800e5ac:	693b      	ldr	r3, [r7, #16]
 800e5ae:	330b      	adds	r3, #11
 800e5b0:	781a      	ldrb	r2, [r3, #0]
 800e5b2:	693b      	ldr	r3, [r7, #16]
 800e5b4:	330b      	adds	r3, #11
 800e5b6:	f042 0220 	orr.w	r2, r2, #32
 800e5ba:	b2d2      	uxtb	r2, r2
 800e5bc:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e5c4:	68da      	ldr	r2, [r3, #12]
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	331c      	adds	r3, #28
 800e5ca:	b2d2      	uxtb	r2, r2
 800e5cc:	701a      	strb	r2, [r3, #0]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e5d4:	68db      	ldr	r3, [r3, #12]
 800e5d6:	b29b      	uxth	r3, r3
 800e5d8:	0a1b      	lsrs	r3, r3, #8
 800e5da:	b29a      	uxth	r2, r3
 800e5dc:	693b      	ldr	r3, [r7, #16]
 800e5de:	331d      	adds	r3, #29
 800e5e0:	b2d2      	uxtb	r2, r2
 800e5e2:	701a      	strb	r2, [r3, #0]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e5ea:	68db      	ldr	r3, [r3, #12]
 800e5ec:	0c1a      	lsrs	r2, r3, #16
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	331e      	adds	r3, #30
 800e5f2:	b2d2      	uxtb	r2, r2
 800e5f4:	701a      	strb	r2, [r3, #0]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e5fc:	68db      	ldr	r3, [r3, #12]
 800e5fe:	0e1a      	lsrs	r2, r3, #24
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	331f      	adds	r3, #31
 800e604:	b2d2      	uxtb	r2, r2
 800e606:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e60e:	691b      	ldr	r3, [r3, #16]
 800e610:	4619      	mov	r1, r3
 800e612:	6938      	ldr	r0, [r7, #16]
 800e614:	f7fd ff28 	bl	800c468 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800e618:	f7fc fc4e 	bl	800aeb8 <get_fattime>
 800e61c:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800e61e:	693b      	ldr	r3, [r7, #16]
 800e620:	3316      	adds	r3, #22
 800e622:	68fa      	ldr	r2, [r7, #12]
 800e624:	b2d2      	uxtb	r2, r2
 800e626:	701a      	strb	r2, [r3, #0]
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	0a1b      	lsrs	r3, r3, #8
 800e62e:	b29a      	uxth	r2, r3
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	3317      	adds	r3, #23
 800e634:	b2d2      	uxtb	r2, r2
 800e636:	701a      	strb	r2, [r3, #0]
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	0c1a      	lsrs	r2, r3, #16
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	3318      	adds	r3, #24
 800e640:	b2d2      	uxtb	r2, r2
 800e642:	701a      	strb	r2, [r3, #0]
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	0e1a      	lsrs	r2, r3, #24
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	3319      	adds	r3, #25
 800e64c:	b2d2      	uxtb	r2, r2
 800e64e:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	3312      	adds	r3, #18
 800e654:	2200      	movs	r2, #0
 800e656:	701a      	strb	r2, [r3, #0]
 800e658:	693b      	ldr	r3, [r7, #16]
 800e65a:	3313      	adds	r3, #19
 800e65c:	2200      	movs	r2, #0
 800e65e:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e666:	799b      	ldrb	r3, [r3, #6]
 800e668:	f023 0320 	bic.w	r3, r3, #32
 800e66c:	b2da      	uxtb	r2, r3
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e674:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e682:	2201      	movs	r2, #1
 800e684:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	4618      	mov	r0, r3
 800e690:	f7fc ffdc 	bl	800b64c <sync_fs>
 800e694:	4603      	mov	r3, r0
 800e696:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	7dfa      	ldrb	r2, [r7, #23]
 800e6a2:	4611      	mov	r1, r2
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f7fc fdb3 	bl	800b210 <unlock_fs>
 800e6aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3718      	adds	r7, #24
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b090      	sub	sp, #64	@ 0x40
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f7ff f898 	bl	800d7f4 <validate>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800e6ca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d00c      	beq.n	800e6ec <f_lseek+0x38>
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e6de:	4611      	mov	r1, r2
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f7fc fd95 	bl	800b210 <unlock_fs>
 800e6e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e6ea:	e350      	b.n	800ed8e <f_lseek+0x6da>
	if (fp->err)						/* Check error */
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e6f2:	79db      	ldrb	r3, [r3, #7]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d010      	beq.n	800e71a <f_lseek+0x66>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e6fe:	681a      	ldr	r2, [r3, #0]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e706:	79db      	ldrb	r3, [r3, #7]
 800e708:	4619      	mov	r1, r3
 800e70a:	4610      	mov	r0, r2
 800e70c:	f7fc fd80 	bl	800b210 <unlock_fs>
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e716:	79db      	ldrb	r3, [r3, #7]
 800e718:	e339      	b.n	800ed8e <f_lseek+0x6da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e722:	2b00      	cmp	r3, #0
 800e724:	f000 814c 	beq.w	800e9c0 <f_lseek+0x30c>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e72e:	d17c      	bne.n	800e82a <f_lseek+0x176>
			tbl = fp->cltbl;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e738:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e73c:	1d1a      	adds	r2, r3, #4
 800e73e:	627a      	str	r2, [r7, #36]	@ 0x24
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	617b      	str	r3, [r7, #20]
 800e744:	2302      	movs	r3, #2
 800e746:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e74e:	691b      	ldr	r3, [r3, #16]
 800e750:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800e752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e754:	2b00      	cmp	r3, #0
 800e756:	d056      	beq.n	800e806 <f_lseek+0x152>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e75a:	613b      	str	r3, [r7, #16]
 800e75c:	2300      	movs	r3, #0
 800e75e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e762:	3302      	adds	r3, #2
 800e764:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800e766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e768:	60fb      	str	r3, [r7, #12]
 800e76a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e76c:	3301      	adds	r3, #1
 800e76e:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e77a:	4618      	mov	r0, r3
 800e77c:	f7fd f849 	bl	800b812 <get_fat>
 800e780:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800e782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e784:	2b01      	cmp	r3, #1
 800e786:	d80e      	bhi.n	800e7a6 <f_lseek+0xf2>
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e78e:	2202      	movs	r2, #2
 800e790:	71da      	strb	r2, [r3, #7]
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	2102      	movs	r1, #2
 800e79c:	4618      	mov	r0, r3
 800e79e:	f7fc fd37 	bl	800b210 <unlock_fs>
 800e7a2:	2302      	movs	r3, #2
 800e7a4:	e2f3      	b.n	800ed8e <f_lseek+0x6da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800e7a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ac:	d10e      	bne.n	800e7cc <f_lseek+0x118>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e7b4:	2201      	movs	r2, #1
 800e7b6:	71da      	strb	r2, [r3, #7]
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	2101      	movs	r1, #1
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7fc fd24 	bl	800b210 <unlock_fs>
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	e2e0      	b.n	800ed8e <f_lseek+0x6da>
					} while (cl == pcl + 1);
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	3301      	adds	r3, #1
 800e7d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d0c7      	beq.n	800e766 <f_lseek+0xb2>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e7d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d809      	bhi.n	800e7f2 <f_lseek+0x13e>
						*tbl++ = ncl; *tbl++ = tcl;
 800e7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7e0:	1d1a      	adds	r2, r3, #4
 800e7e2:	627a      	str	r2, [r7, #36]	@ 0x24
 800e7e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e7e6:	601a      	str	r2, [r3, #0]
 800e7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7ea:	1d1a      	adds	r2, r3, #4
 800e7ec:	627a      	str	r2, [r7, #36]	@ 0x24
 800e7ee:	693a      	ldr	r2, [r7, #16]
 800e7f0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e7fe:	699b      	ldr	r3, [r3, #24]
 800e800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e802:	429a      	cmp	r2, r3
 800e804:	d3a8      	bcc.n	800e758 <f_lseek+0xa4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e80c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e80e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e810:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800e812:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	429a      	cmp	r2, r3
 800e818:	d803      	bhi.n	800e822 <f_lseek+0x16e>
				*tbl = 0;		/* Terminate table */
 800e81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e81c:	2200      	movs	r2, #0
 800e81e:	601a      	str	r2, [r3, #0]
 800e820:	e2a9      	b.n	800ed76 <f_lseek+0x6c2>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e822:	2311      	movs	r3, #17
 800e824:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e828:	e2a5      	b.n	800ed76 <f_lseek+0x6c2>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e830:	68db      	ldr	r3, [r3, #12]
 800e832:	683a      	ldr	r2, [r7, #0]
 800e834:	429a      	cmp	r2, r3
 800e836:	d904      	bls.n	800e842 <f_lseek+0x18e>
				ofs = fp->fsize;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e83e:	68db      	ldr	r3, [r3, #12]
 800e840:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e848:	461a      	mov	r2, r3
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	6093      	str	r3, [r2, #8]
			if (ofs) {
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	2b00      	cmp	r3, #0
 800e852:	f000 8290 	beq.w	800ed76 <f_lseek+0x6c2>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	3b01      	subs	r3, #1
 800e85a:	4619      	mov	r1, r3
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f7fd fb2f 	bl	800bec0 <clmt_clust>
 800e862:	4602      	mov	r2, r0
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e86a:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e872:	681a      	ldr	r2, [r3, #0]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e87a:	695b      	ldr	r3, [r3, #20]
 800e87c:	4619      	mov	r1, r3
 800e87e:	4610      	mov	r0, r2
 800e880:	f7fc ffa3 	bl	800b7ca <clust2sect>
 800e884:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800e886:	69bb      	ldr	r3, [r7, #24]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d10e      	bne.n	800e8aa <f_lseek+0x1f6>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e892:	2202      	movs	r2, #2
 800e894:	71da      	strb	r2, [r3, #7]
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	2102      	movs	r1, #2
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7fc fcb5 	bl	800b210 <unlock_fs>
 800e8a6:	2302      	movs	r3, #2
 800e8a8:	e271      	b.n	800ed8e <f_lseek+0x6da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	3b01      	subs	r3, #1
 800e8ae:	687a      	ldr	r2, [r7, #4]
 800e8b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800e8b4:	6812      	ldr	r2, [r2, #0]
 800e8b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800e8ba:	8952      	ldrh	r2, [r2, #10]
 800e8bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800e8c0:	687a      	ldr	r2, [r7, #4]
 800e8c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800e8c6:	6812      	ldr	r2, [r2, #0]
 800e8c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800e8cc:	7892      	ldrb	r2, [r2, #2]
 800e8ce:	3a01      	subs	r2, #1
 800e8d0:	4013      	ands	r3, r2
 800e8d2:	69ba      	ldr	r2, [r7, #24]
 800e8d4:	4413      	add	r3, r2
 800e8d6:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e8de:	689b      	ldr	r3, [r3, #8]
 800e8e0:	687a      	ldr	r2, [r7, #4]
 800e8e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800e8e6:	6812      	ldr	r2, [r2, #0]
 800e8e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800e8ec:	8952      	ldrh	r2, [r2, #10]
 800e8ee:	fbb3 f1f2 	udiv	r1, r3, r2
 800e8f2:	fb01 f202 	mul.w	r2, r1, r2
 800e8f6:	1a9b      	subs	r3, r3, r2
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	f000 823c 	beq.w	800ed76 <f_lseek+0x6c2>
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e904:	699b      	ldr	r3, [r3, #24]
 800e906:	69ba      	ldr	r2, [r7, #24]
 800e908:	429a      	cmp	r2, r3
 800e90a:	f000 8234 	beq.w	800ed76 <f_lseek+0x6c2>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e914:	799b      	ldrb	r3, [r3, #6]
 800e916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d02b      	beq.n	800e976 <f_lseek+0x2c2>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e92a:	7858      	ldrb	r0, [r3, #1]
 800e92c:	6879      	ldr	r1, [r7, #4]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e934:	699a      	ldr	r2, [r3, #24]
 800e936:	2301      	movs	r3, #1
 800e938:	f7fc fba4 	bl	800b084 <disk_write>
 800e93c:	4603      	mov	r3, r0
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d00e      	beq.n	800e960 <f_lseek+0x2ac>
							ABORT(fp->fs, FR_DISK_ERR);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e948:	2201      	movs	r2, #1
 800e94a:	71da      	strb	r2, [r3, #7]
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	2101      	movs	r1, #1
 800e956:	4618      	mov	r0, r3
 800e958:	f7fc fc5a 	bl	800b210 <unlock_fs>
 800e95c:	2301      	movs	r3, #1
 800e95e:	e216      	b.n	800ed8e <f_lseek+0x6da>
						fp->flag &= ~FA__DIRTY;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e966:	799b      	ldrb	r3, [r3, #6]
 800e968:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e96c:	b2da      	uxtb	r2, r3
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e974:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e982:	7858      	ldrb	r0, [r3, #1]
 800e984:	6879      	ldr	r1, [r7, #4]
 800e986:	2301      	movs	r3, #1
 800e988:	69ba      	ldr	r2, [r7, #24]
 800e98a:	f7fc fb5b 	bl	800b044 <disk_read>
 800e98e:	4603      	mov	r3, r0
 800e990:	2b00      	cmp	r3, #0
 800e992:	d00e      	beq.n	800e9b2 <f_lseek+0x2fe>
						ABORT(fp->fs, FR_DISK_ERR);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e99a:	2201      	movs	r2, #1
 800e99c:	71da      	strb	r2, [r3, #7]
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	2101      	movs	r1, #1
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f7fc fc31 	bl	800b210 <unlock_fs>
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	e1ed      	b.n	800ed8e <f_lseek+0x6da>
#endif
					fp->dsect = dsc;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e9b8:	461a      	mov	r2, r3
 800e9ba:	69bb      	ldr	r3, [r7, #24]
 800e9bc:	6193      	str	r3, [r2, #24]
 800e9be:	e1da      	b.n	800ed76 <f_lseek+0x6c2>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e9c6:	68db      	ldr	r3, [r3, #12]
 800e9c8:	683a      	ldr	r2, [r7, #0]
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d90c      	bls.n	800e9e8 <f_lseek+0x334>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e9d4:	799b      	ldrb	r3, [r3, #6]
 800e9d6:	f003 0302 	and.w	r3, r3, #2
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d104      	bne.n	800e9e8 <f_lseek+0x334>
#endif
			) ofs = fp->fsize;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e9e4:	68db      	ldr	r3, [r3, #12]
 800e9e6:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e9ee:	689b      	ldr	r3, [r3, #8]
 800e9f0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e9fc:	461a      	mov	r2, r3
 800e9fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea00:	6093      	str	r3, [r2, #8]
		if (ofs) {
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	f000 8128 	beq.w	800ec5a <f_lseek+0x5a6>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ea16:	789b      	ldrb	r3, [r3, #2]
 800ea18:	461a      	mov	r2, r3
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ea26:	895b      	ldrh	r3, [r3, #10]
 800ea28:	fb02 f303 	mul.w	r3, r2, r3
 800ea2c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ea2e:	6a3b      	ldr	r3, [r7, #32]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d021      	beq.n	800ea78 <f_lseek+0x3c4>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	1e5a      	subs	r2, r3, #1
 800ea38:	69fb      	ldr	r3, [r7, #28]
 800ea3a:	fbb2 f2f3 	udiv	r2, r2, r3
 800ea3e:	6a3b      	ldr	r3, [r7, #32]
 800ea40:	1e59      	subs	r1, r3, #1
 800ea42:	69fb      	ldr	r3, [r7, #28]
 800ea44:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	d315      	bcc.n	800ea78 <f_lseek+0x3c4>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800ea4c:	6a3b      	ldr	r3, [r7, #32]
 800ea4e:	1e5a      	subs	r2, r3, #1
 800ea50:	69fb      	ldr	r3, [r7, #28]
 800ea52:	425b      	negs	r3, r3
 800ea54:	4013      	ands	r3, r2
 800ea56:	687a      	ldr	r2, [r7, #4]
 800ea58:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ea5c:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ea64:	689b      	ldr	r3, [r3, #8]
 800ea66:	683a      	ldr	r2, [r7, #0]
 800ea68:	1ad3      	subs	r3, r2, r3
 800ea6a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ea72:	695b      	ldr	r3, [r3, #20]
 800ea74:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ea76:	e041      	b.n	800eafc <f_lseek+0x448>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ea7e:	691b      	ldr	r3, [r3, #16]
 800ea80:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ea82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d133      	bne.n	800eaf0 <f_lseek+0x43c>
					clst = create_chain(fp->fs, 0);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	2100      	movs	r1, #0
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7fd f96c 	bl	800bd70 <create_chain>
 800ea98:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800ea9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea9c:	2b01      	cmp	r3, #1
 800ea9e:	d10e      	bne.n	800eabe <f_lseek+0x40a>
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eaa6:	2202      	movs	r2, #2
 800eaa8:	71da      	strb	r2, [r3, #7]
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	2102      	movs	r1, #2
 800eab4:	4618      	mov	r0, r3
 800eab6:	f7fc fbab 	bl	800b210 <unlock_fs>
 800eaba:	2302      	movs	r3, #2
 800eabc:	e167      	b.n	800ed8e <f_lseek+0x6da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800eabe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eac4:	d10e      	bne.n	800eae4 <f_lseek+0x430>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eacc:	2201      	movs	r2, #1
 800eace:	71da      	strb	r2, [r3, #7]
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	2101      	movs	r1, #1
 800eada:	4618      	mov	r0, r3
 800eadc:	f7fc fb98 	bl	800b210 <unlock_fs>
 800eae0:	2301      	movs	r3, #1
 800eae2:	e154      	b.n	800ed8e <f_lseek+0x6da>
					fp->sclust = clst;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eaea:	461a      	mov	r2, r3
 800eaec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaee:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eaf6:	461a      	mov	r2, r3
 800eaf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eafa:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 800eafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	f000 80ab 	beq.w	800ec5a <f_lseek+0x5a6>
				while (ofs > bcs) {						/* Cluster following loop */
 800eb04:	e062      	b.n	800ebcc <f_lseek+0x518>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eb0c:	799b      	ldrb	r3, [r3, #6]
 800eb0e:	f003 0302 	and.w	r3, r3, #2
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d00e      	beq.n	800eb34 <f_lseek+0x480>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800eb20:	4618      	mov	r0, r3
 800eb22:	f7fd f925 	bl	800bd70 <create_chain>
 800eb26:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800eb28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d10b      	bne.n	800eb46 <f_lseek+0x492>
							ofs = bcs; break;
 800eb2e:	69fb      	ldr	r3, [r7, #28]
 800eb30:	603b      	str	r3, [r7, #0]
 800eb32:	e04f      	b.n	800ebd4 <f_lseek+0x520>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7fc fe67 	bl	800b812 <get_fat>
 800eb44:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800eb46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb4c:	d10e      	bne.n	800eb6c <f_lseek+0x4b8>
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eb54:	2201      	movs	r2, #1
 800eb56:	71da      	strb	r2, [r3, #7]
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	2101      	movs	r1, #1
 800eb62:	4618      	mov	r0, r3
 800eb64:	f7fc fb54 	bl	800b210 <unlock_fs>
 800eb68:	2301      	movs	r3, #1
 800eb6a:	e110      	b.n	800ed8e <f_lseek+0x6da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800eb6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb6e:	2b01      	cmp	r3, #1
 800eb70:	d909      	bls.n	800eb86 <f_lseek+0x4d2>
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eb7e:	699b      	ldr	r3, [r3, #24]
 800eb80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d30e      	bcc.n	800eba4 <f_lseek+0x4f0>
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eb8c:	2202      	movs	r2, #2
 800eb8e:	71da      	strb	r2, [r3, #7]
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	2102      	movs	r1, #2
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f7fc fb38 	bl	800b210 <unlock_fs>
 800eba0:	2302      	movs	r3, #2
 800eba2:	e0f4      	b.n	800ed8e <f_lseek+0x6da>
					fp->clust = clst;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ebaa:	461a      	mov	r2, r3
 800ebac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebae:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ebb6:	689a      	ldr	r2, [r3, #8]
 800ebb8:	69fb      	ldr	r3, [r7, #28]
 800ebba:	4413      	add	r3, r2
 800ebbc:	687a      	ldr	r2, [r7, #4]
 800ebbe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ebc2:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 800ebc4:	683a      	ldr	r2, [r7, #0]
 800ebc6:	69fb      	ldr	r3, [r7, #28]
 800ebc8:	1ad3      	subs	r3, r2, r3
 800ebca:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800ebcc:	683a      	ldr	r2, [r7, #0]
 800ebce:	69fb      	ldr	r3, [r7, #28]
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d898      	bhi.n	800eb06 <f_lseek+0x452>
				}
				fp->fptr += ofs;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ebda:	689a      	ldr	r2, [r3, #8]
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	4413      	add	r3, r2
 800ebe0:	687a      	ldr	r2, [r7, #4]
 800ebe2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ebe6:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ebf4:	895b      	ldrh	r3, [r3, #10]
 800ebf6:	461a      	mov	r2, r3
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	fbb3 f1f2 	udiv	r1, r3, r2
 800ebfe:	fb01 f202 	mul.w	r2, r1, r2
 800ec02:	1a9b      	subs	r3, r3, r2
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d028      	beq.n	800ec5a <f_lseek+0x5a6>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7fc fdd9 	bl	800b7ca <clust2sect>
 800ec18:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800ec1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d10e      	bne.n	800ec3e <f_lseek+0x58a>
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ec26:	2202      	movs	r2, #2
 800ec28:	71da      	strb	r2, [r3, #7]
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	2102      	movs	r1, #2
 800ec34:	4618      	mov	r0, r3
 800ec36:	f7fc faeb 	bl	800b210 <unlock_fs>
 800ec3a:	2302      	movs	r3, #2
 800ec3c:	e0a7      	b.n	800ed8e <f_lseek+0x6da>
					nsect += ofs / SS(fp->fs);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ec4a:	895b      	ldrh	r3, [r3, #10]
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ec56:	4413      	add	r3, r2
 800ec58:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ec60:	689b      	ldr	r3, [r3, #8]
 800ec62:	687a      	ldr	r2, [r7, #4]
 800ec64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ec68:	6812      	ldr	r2, [r2, #0]
 800ec6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ec6e:	8952      	ldrh	r2, [r2, #10]
 800ec70:	fbb3 f1f2 	udiv	r1, r3, r2
 800ec74:	fb01 f202 	mul.w	r2, r1, r2
 800ec78:	1a9b      	subs	r3, r3, r2
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d05e      	beq.n	800ed3c <f_lseek+0x688>
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ec84:	699b      	ldr	r3, [r3, #24]
 800ec86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	d057      	beq.n	800ed3c <f_lseek+0x688>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ec92:	799b      	ldrb	r3, [r3, #6]
 800ec94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d02b      	beq.n	800ecf4 <f_lseek+0x640>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eca8:	7858      	ldrb	r0, [r3, #1]
 800ecaa:	6879      	ldr	r1, [r7, #4]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ecb2:	699a      	ldr	r2, [r3, #24]
 800ecb4:	2301      	movs	r3, #1
 800ecb6:	f7fc f9e5 	bl	800b084 <disk_write>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d00e      	beq.n	800ecde <f_lseek+0x62a>
					ABORT(fp->fs, FR_DISK_ERR);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ecc6:	2201      	movs	r2, #1
 800ecc8:	71da      	strb	r2, [r3, #7]
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	2101      	movs	r1, #1
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7fc fa9b 	bl	800b210 <unlock_fs>
 800ecda:	2301      	movs	r3, #1
 800ecdc:	e057      	b.n	800ed8e <f_lseek+0x6da>
				fp->flag &= ~FA__DIRTY;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ece4:	799b      	ldrb	r3, [r3, #6]
 800ece6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ecea:	b2da      	uxtb	r2, r3
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ecf2:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ed00:	7858      	ldrb	r0, [r3, #1]
 800ed02:	6879      	ldr	r1, [r7, #4]
 800ed04:	2301      	movs	r3, #1
 800ed06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ed08:	f7fc f99c 	bl	800b044 <disk_read>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d00e      	beq.n	800ed30 <f_lseek+0x67c>
				ABORT(fp->fs, FR_DISK_ERR);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ed18:	2201      	movs	r2, #1
 800ed1a:	71da      	strb	r2, [r3, #7]
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	2101      	movs	r1, #1
 800ed26:	4618      	mov	r0, r3
 800ed28:	f7fc fa72 	bl	800b210 <unlock_fs>
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	e02e      	b.n	800ed8e <f_lseek+0x6da>
#endif
			fp->dsect = nsect;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ed36:	461a      	mov	r2, r3
 800ed38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed3a:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ed42:	689a      	ldr	r2, [r3, #8]
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ed4a:	68db      	ldr	r3, [r3, #12]
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	d912      	bls.n	800ed76 <f_lseek+0x6c2>
			fp->fsize = fp->fptr;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ed56:	689b      	ldr	r3, [r3, #8]
 800ed58:	687a      	ldr	r2, [r7, #4]
 800ed5a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ed5e:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ed66:	799b      	ldrb	r3, [r3, #6]
 800ed68:	f043 0320 	orr.w	r3, r3, #32
 800ed6c:	b2da      	uxtb	r2, r3
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ed74:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800ed82:	4611      	mov	r1, r2
 800ed84:	4618      	mov	r0, r3
 800ed86:	f7fc fa43 	bl	800b210 <unlock_fs>
 800ed8a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3740      	adds	r7, #64	@ 0x40
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}

0800ed96 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800ed96:	b580      	push	{r7, lr}
 800ed98:	b084      	sub	sp, #16
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	6078      	str	r0, [r7, #4]
 800ed9e:	460b      	mov	r3, r1
 800eda0:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800eda2:	78fb      	ldrb	r3, [r7, #3]
 800eda4:	2b0a      	cmp	r3, #10
 800eda6:	d103      	bne.n	800edb0 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800eda8:	210d      	movs	r1, #13
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f7ff fff3 	bl	800ed96 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	685b      	ldr	r3, [r3, #4]
 800edb4:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	db25      	blt.n	800ee08 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	1c5a      	adds	r2, r3, #1
 800edc0:	60fa      	str	r2, [r7, #12]
 800edc2:	687a      	ldr	r2, [r7, #4]
 800edc4:	4413      	add	r3, r2
 800edc6:	78fa      	ldrb	r2, [r7, #3]
 800edc8:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	2b3c      	cmp	r3, #60	@ 0x3c
 800edce:	dd12      	ble.n	800edf6 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	6818      	ldr	r0, [r3, #0]
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f103 010c 	add.w	r1, r3, #12
 800edda:	68fa      	ldr	r2, [r7, #12]
 800eddc:	f107 0308 	add.w	r3, r7, #8
 800ede0:	f7ff f8fb 	bl	800dfda <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800ede4:	68ba      	ldr	r2, [r7, #8]
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	429a      	cmp	r2, r3
 800edea:	d101      	bne.n	800edf0 <putc_bfd+0x5a>
 800edec:	2300      	movs	r3, #0
 800edee:	e001      	b.n	800edf4 <putc_bfd+0x5e>
 800edf0:	f04f 33ff 	mov.w	r3, #4294967295
 800edf4:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	68fa      	ldr	r2, [r7, #12]
 800edfa:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	689b      	ldr	r3, [r3, #8]
 800ee00:	1c5a      	adds	r2, r3, #1
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	609a      	str	r2, [r3, #8]
 800ee06:	e000      	b.n	800ee0a <putc_bfd+0x74>
	if (i < 0) return;
 800ee08:	bf00      	nop
}
 800ee0a:	3710      	adds	r7, #16
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800ee10:	b590      	push	{r4, r7, lr}
 800ee12:	b097      	sub	sp, #92	@ 0x5c
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
 800ee18:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	613b      	str	r3, [r7, #16]
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800ee26:	e009      	b.n	800ee3c <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	1c5a      	adds	r2, r3, #1
 800ee2c:	607a      	str	r2, [r7, #4]
 800ee2e:	781a      	ldrb	r2, [r3, #0]
 800ee30:	f107 030c 	add.w	r3, r7, #12
 800ee34:	4611      	mov	r1, r2
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7ff ffad 	bl	800ed96 <putc_bfd>
	while (*str)			/* Put the string */
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	781b      	ldrb	r3, [r3, #0]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d1f1      	bne.n	800ee28 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800ee44:	693b      	ldr	r3, [r7, #16]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	db15      	blt.n	800ee76 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800ee4a:	68f8      	ldr	r0, [r7, #12]
 800ee4c:	693b      	ldr	r3, [r7, #16]
 800ee4e:	461c      	mov	r4, r3
 800ee50:	f107 0208 	add.w	r2, r7, #8
 800ee54:	f107 030c 	add.w	r3, r7, #12
 800ee58:	f103 010c 	add.w	r1, r3, #12
 800ee5c:	4613      	mov	r3, r2
 800ee5e:	4622      	mov	r2, r4
 800ee60:	f7ff f8bb 	bl	800dfda <f_write>
 800ee64:	4603      	mov	r3, r0
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d105      	bne.n	800ee76 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	68ba      	ldr	r2, [r7, #8]
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	d101      	bne.n	800ee76 <f_puts+0x66>
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	e001      	b.n	800ee7a <f_puts+0x6a>
	return EOF;
 800ee76:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	375c      	adds	r7, #92	@ 0x5c
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd90      	pop	{r4, r7, pc}
	...

0800ee84 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ee84:	b480      	push	{r7}
 800ee86:	b087      	sub	sp, #28
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	60f8      	str	r0, [r7, #12]
 800ee8c:	60b9      	str	r1, [r7, #8]
 800ee8e:	4613      	mov	r3, r2
 800ee90:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ee92:	2301      	movs	r3, #1
 800ee94:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ee96:	2300      	movs	r3, #0
 800ee98:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800ee9a:	4b1e      	ldr	r3, [pc, #120]	@ (800ef14 <FATFS_LinkDriverEx+0x90>)
 800ee9c:	7a5b      	ldrb	r3, [r3, #9]
 800ee9e:	b2db      	uxtb	r3, r3
 800eea0:	2b01      	cmp	r3, #1
 800eea2:	d831      	bhi.n	800ef08 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800eea4:	4b1b      	ldr	r3, [pc, #108]	@ (800ef14 <FATFS_LinkDriverEx+0x90>)
 800eea6:	7a5b      	ldrb	r3, [r3, #9]
 800eea8:	b2db      	uxtb	r3, r3
 800eeaa:	461a      	mov	r2, r3
 800eeac:	4b19      	ldr	r3, [pc, #100]	@ (800ef14 <FATFS_LinkDriverEx+0x90>)
 800eeae:	2100      	movs	r1, #0
 800eeb0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800eeb2:	4b18      	ldr	r3, [pc, #96]	@ (800ef14 <FATFS_LinkDriverEx+0x90>)
 800eeb4:	7a5b      	ldrb	r3, [r3, #9]
 800eeb6:	b2db      	uxtb	r3, r3
 800eeb8:	4a16      	ldr	r2, [pc, #88]	@ (800ef14 <FATFS_LinkDriverEx+0x90>)
 800eeba:	009b      	lsls	r3, r3, #2
 800eebc:	4413      	add	r3, r2
 800eebe:	68fa      	ldr	r2, [r7, #12]
 800eec0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800eec2:	4b14      	ldr	r3, [pc, #80]	@ (800ef14 <FATFS_LinkDriverEx+0x90>)
 800eec4:	7a5b      	ldrb	r3, [r3, #9]
 800eec6:	b2db      	uxtb	r3, r3
 800eec8:	461a      	mov	r2, r3
 800eeca:	4b12      	ldr	r3, [pc, #72]	@ (800ef14 <FATFS_LinkDriverEx+0x90>)
 800eecc:	4413      	add	r3, r2
 800eece:	79fa      	ldrb	r2, [r7, #7]
 800eed0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800eed2:	4b10      	ldr	r3, [pc, #64]	@ (800ef14 <FATFS_LinkDriverEx+0x90>)
 800eed4:	7a5b      	ldrb	r3, [r3, #9]
 800eed6:	b2db      	uxtb	r3, r3
 800eed8:	1c5a      	adds	r2, r3, #1
 800eeda:	b2d1      	uxtb	r1, r2
 800eedc:	4a0d      	ldr	r2, [pc, #52]	@ (800ef14 <FATFS_LinkDriverEx+0x90>)
 800eede:	7251      	strb	r1, [r2, #9]
 800eee0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800eee2:	7dbb      	ldrb	r3, [r7, #22]
 800eee4:	3330      	adds	r3, #48	@ 0x30
 800eee6:	b2da      	uxtb	r2, r3
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	3301      	adds	r3, #1
 800eef0:	223a      	movs	r2, #58	@ 0x3a
 800eef2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800eef4:	68bb      	ldr	r3, [r7, #8]
 800eef6:	3302      	adds	r3, #2
 800eef8:	222f      	movs	r2, #47	@ 0x2f
 800eefa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	3303      	adds	r3, #3
 800ef00:	2200      	movs	r2, #0
 800ef02:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ef04:	2300      	movs	r3, #0
 800ef06:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800ef08:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	371c      	adds	r7, #28
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bc80      	pop	{r7}
 800ef12:	4770      	bx	lr
 800ef14:	20002a8c 	.word	0x20002a8c

0800ef18 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b082      	sub	sp, #8
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
 800ef20:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ef22:	2200      	movs	r2, #0
 800ef24:	6839      	ldr	r1, [r7, #0]
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f7ff ffac 	bl	800ee84 <FATFS_LinkDriverEx>
 800ef2c:	4603      	mov	r3, r0
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	3708      	adds	r7, #8
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}
	...

0800ef38 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	4603      	mov	r3, r0
 800ef40:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ef42:	4b0b      	ldr	r3, [pc, #44]	@ (800ef70 <SD_initialize+0x38>)
 800ef44:	2201      	movs	r2, #1
 800ef46:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 800ef48:	f7fb ffbe 	bl	800aec8 <BSP_SD_Init>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d107      	bne.n	800ef62 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ef52:	4b07      	ldr	r3, [pc, #28]	@ (800ef70 <SD_initialize+0x38>)
 800ef54:	781b      	ldrb	r3, [r3, #0]
 800ef56:	b2db      	uxtb	r3, r3
 800ef58:	f023 0301 	bic.w	r3, r3, #1
 800ef5c:	b2da      	uxtb	r2, r3
 800ef5e:	4b04      	ldr	r3, [pc, #16]	@ (800ef70 <SD_initialize+0x38>)
 800ef60:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ef62:	4b03      	ldr	r3, [pc, #12]	@ (800ef70 <SD_initialize+0x38>)
 800ef64:	781b      	ldrb	r3, [r3, #0]
 800ef66:	b2db      	uxtb	r3, r3
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3708      	adds	r7, #8
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}
 800ef70:	2000002d 	.word	0x2000002d

0800ef74 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b082      	sub	sp, #8
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ef7e:	4b0b      	ldr	r3, [pc, #44]	@ (800efac <SD_status+0x38>)
 800ef80:	2201      	movs	r2, #1
 800ef82:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ef84:	f7fb fff4 	bl	800af70 <BSP_SD_GetCardState>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d107      	bne.n	800ef9e <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ef8e:	4b07      	ldr	r3, [pc, #28]	@ (800efac <SD_status+0x38>)
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	b2db      	uxtb	r3, r3
 800ef94:	f023 0301 	bic.w	r3, r3, #1
 800ef98:	b2da      	uxtb	r2, r3
 800ef9a:	4b04      	ldr	r3, [pc, #16]	@ (800efac <SD_status+0x38>)
 800ef9c:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800ef9e:	4b03      	ldr	r3, [pc, #12]	@ (800efac <SD_status+0x38>)
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	b2db      	uxtb	r3, r3
}
 800efa4:	4618      	mov	r0, r3
 800efa6:	3708      	adds	r7, #8
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}
 800efac:	2000002d 	.word	0x2000002d

0800efb0 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b086      	sub	sp, #24
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	60b9      	str	r1, [r7, #8]
 800efb8:	607a      	str	r2, [r7, #4]
 800efba:	603b      	str	r3, [r7, #0]
 800efbc:	4603      	mov	r3, r0
 800efbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800efc0:	2301      	movs	r3, #1
 800efc2:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800efc4:	4b0f      	ldr	r3, [pc, #60]	@ (800f004 <SD_read+0x54>)
 800efc6:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 800efc8:	4b0f      	ldr	r3, [pc, #60]	@ (800f008 <SD_read+0x58>)
 800efca:	683a      	ldr	r2, [r7, #0]
 800efcc:	6879      	ldr	r1, [r7, #4]
 800efce:	68b8      	ldr	r0, [r7, #8]
 800efd0:	f7fb ff92 	bl	800aef8 <BSP_SD_ReadBlocks>
 800efd4:	4603      	mov	r3, r0
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d10e      	bne.n	800eff8 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800efda:	e006      	b.n	800efea <SD_read+0x3a>
    {
      if (timeout-- == 0)
 800efdc:	693b      	ldr	r3, [r7, #16]
 800efde:	1e5a      	subs	r2, r3, #1
 800efe0:	613a      	str	r2, [r7, #16]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d101      	bne.n	800efea <SD_read+0x3a>
      {
        return RES_ERROR;
 800efe6:	2301      	movs	r3, #1
 800efe8:	e007      	b.n	800effa <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800efea:	f7fb ffc1 	bl	800af70 <BSP_SD_GetCardState>
 800efee:	4603      	mov	r3, r0
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d1f3      	bne.n	800efdc <SD_read+0x2c>
      }
    }
    res = RES_OK;
 800eff4:	2300      	movs	r3, #0
 800eff6:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800eff8:	7dfb      	ldrb	r3, [r7, #23]
}
 800effa:	4618      	mov	r0, r3
 800effc:	3718      	adds	r7, #24
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}
 800f002:	bf00      	nop
 800f004:	000186a0 	.word	0x000186a0
 800f008:	05f5e100 	.word	0x05f5e100

0800f00c <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b086      	sub	sp, #24
 800f010:	af00      	add	r7, sp, #0
 800f012:	60b9      	str	r1, [r7, #8]
 800f014:	607a      	str	r2, [r7, #4]
 800f016:	603b      	str	r3, [r7, #0]
 800f018:	4603      	mov	r3, r0
 800f01a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f01c:	2301      	movs	r3, #1
 800f01e:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800f020:	4b0f      	ldr	r3, [pc, #60]	@ (800f060 <SD_write+0x54>)
 800f022:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 800f024:	4b0f      	ldr	r3, [pc, #60]	@ (800f064 <SD_write+0x58>)
 800f026:	683a      	ldr	r2, [r7, #0]
 800f028:	6879      	ldr	r1, [r7, #4]
 800f02a:	68b8      	ldr	r0, [r7, #8]
 800f02c:	f7fb ff82 	bl	800af34 <BSP_SD_WriteBlocks>
 800f030:	4603      	mov	r3, r0
 800f032:	2b00      	cmp	r3, #0
 800f034:	d10e      	bne.n	800f054 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f036:	e006      	b.n	800f046 <SD_write+0x3a>
    {
      if (timeout-- == 0)
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	1e5a      	subs	r2, r3, #1
 800f03c:	613a      	str	r2, [r7, #16]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d101      	bne.n	800f046 <SD_write+0x3a>
      {
        return RES_ERROR;
 800f042:	2301      	movs	r3, #1
 800f044:	e007      	b.n	800f056 <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f046:	f7fb ff93 	bl	800af70 <BSP_SD_GetCardState>
 800f04a:	4603      	mov	r3, r0
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d1f3      	bne.n	800f038 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 800f050:	2300      	movs	r3, #0
 800f052:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800f054:	7dfb      	ldrb	r3, [r7, #23]
}
 800f056:	4618      	mov	r0, r3
 800f058:	3718      	adds	r7, #24
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
 800f05e:	bf00      	nop
 800f060:	000186a0 	.word	0x000186a0
 800f064:	05f5e100 	.word	0x05f5e100

0800f068 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b08c      	sub	sp, #48	@ 0x30
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	4603      	mov	r3, r0
 800f070:	603a      	str	r2, [r7, #0]
 800f072:	71fb      	strb	r3, [r7, #7]
 800f074:	460b      	mov	r3, r1
 800f076:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f078:	2301      	movs	r3, #1
 800f07a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f07e:	4b24      	ldr	r3, [pc, #144]	@ (800f110 <SD_ioctl+0xa8>)
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	b2db      	uxtb	r3, r3
 800f084:	f003 0301 	and.w	r3, r3, #1
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d001      	beq.n	800f090 <SD_ioctl+0x28>
 800f08c:	2303      	movs	r3, #3
 800f08e:	e03b      	b.n	800f108 <SD_ioctl+0xa0>
  
  switch (cmd)
 800f090:	79bb      	ldrb	r3, [r7, #6]
 800f092:	2b03      	cmp	r3, #3
 800f094:	d833      	bhi.n	800f0fe <SD_ioctl+0x96>
 800f096:	a201      	add	r2, pc, #4	@ (adr r2, 800f09c <SD_ioctl+0x34>)
 800f098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f09c:	0800f0ad 	.word	0x0800f0ad
 800f0a0:	0800f0b5 	.word	0x0800f0b5
 800f0a4:	0800f0cd 	.word	0x0800f0cd
 800f0a8:	0800f0e7 	.word	0x0800f0e7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f0b2:	e027      	b.n	800f104 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f0b4:	f107 030c 	add.w	r3, r7, #12
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f7fb ff69 	bl	800af90 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f0be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f0ca:	e01b      	b.n	800f104 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f0cc:	f107 030c 	add.w	r3, r7, #12
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f7fb ff5d 	bl	800af90 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f0d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0d8:	b29a      	uxth	r2, r3
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f0e4:	e00e      	b.n	800f104 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f0e6:	f107 030c 	add.w	r3, r7, #12
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f7fb ff50 	bl	800af90 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800f0f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f0fc:	e002      	b.n	800f104 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 800f0fe:	2304      	movs	r3, #4
 800f100:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }
  
  return res;
 800f104:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f108:	4618      	mov	r0, r3
 800f10a:	3730      	adds	r7, #48	@ 0x30
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}
 800f110:	2000002d 	.word	0x2000002d

0800f114 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800f114:	b480      	push	{r7}
 800f116:	b085      	sub	sp, #20
 800f118:	af00      	add	r7, sp, #0
 800f11a:	4603      	mov	r3, r0
 800f11c:	6039      	str	r1, [r7, #0]
 800f11e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f120:	88fb      	ldrh	r3, [r7, #6]
 800f122:	2b7f      	cmp	r3, #127	@ 0x7f
 800f124:	d802      	bhi.n	800f12c <ff_convert+0x18>
		c = chr;
 800f126:	88fb      	ldrh	r3, [r7, #6]
 800f128:	81fb      	strh	r3, [r7, #14]
 800f12a:	e025      	b.n	800f178 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d00b      	beq.n	800f14a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f132:	88fb      	ldrh	r3, [r7, #6]
 800f134:	2bff      	cmp	r3, #255	@ 0xff
 800f136:	d805      	bhi.n	800f144 <ff_convert+0x30>
 800f138:	88fb      	ldrh	r3, [r7, #6]
 800f13a:	3b80      	subs	r3, #128	@ 0x80
 800f13c:	4a11      	ldr	r2, [pc, #68]	@ (800f184 <ff_convert+0x70>)
 800f13e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f142:	e000      	b.n	800f146 <ff_convert+0x32>
 800f144:	2300      	movs	r3, #0
 800f146:	81fb      	strh	r3, [r7, #14]
 800f148:	e016      	b.n	800f178 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800f14a:	2300      	movs	r3, #0
 800f14c:	81fb      	strh	r3, [r7, #14]
 800f14e:	e009      	b.n	800f164 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f150:	89fb      	ldrh	r3, [r7, #14]
 800f152:	4a0c      	ldr	r2, [pc, #48]	@ (800f184 <ff_convert+0x70>)
 800f154:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f158:	88fa      	ldrh	r2, [r7, #6]
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d006      	beq.n	800f16c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f15e:	89fb      	ldrh	r3, [r7, #14]
 800f160:	3301      	adds	r3, #1
 800f162:	81fb      	strh	r3, [r7, #14]
 800f164:	89fb      	ldrh	r3, [r7, #14]
 800f166:	2b7f      	cmp	r3, #127	@ 0x7f
 800f168:	d9f2      	bls.n	800f150 <ff_convert+0x3c>
 800f16a:	e000      	b.n	800f16e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f16c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f16e:	89fb      	ldrh	r3, [r7, #14]
 800f170:	3380      	adds	r3, #128	@ 0x80
 800f172:	b29b      	uxth	r3, r3
 800f174:	b2db      	uxtb	r3, r3
 800f176:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f178:	89fb      	ldrh	r3, [r7, #14]
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3714      	adds	r7, #20
 800f17e:	46bd      	mov	sp, r7
 800f180:	bc80      	pop	{r7}
 800f182:	4770      	bx	lr
 800f184:	08012610 	.word	0x08012610

0800f188 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800f188:	b480      	push	{r7}
 800f18a:	b085      	sub	sp, #20
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	4603      	mov	r3, r0
 800f190:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800f192:	2300      	movs	r3, #0
 800f194:	60fb      	str	r3, [r7, #12]
 800f196:	e002      	b.n	800f19e <ff_wtoupper+0x16>
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	3301      	adds	r3, #1
 800f19c:	60fb      	str	r3, [r7, #12]
 800f19e:	4a0f      	ldr	r2, [pc, #60]	@ (800f1dc <ff_wtoupper+0x54>)
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d006      	beq.n	800f1b8 <ff_wtoupper+0x30>
 800f1aa:	4a0c      	ldr	r2, [pc, #48]	@ (800f1dc <ff_wtoupper+0x54>)
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1b2:	88fa      	ldrh	r2, [r7, #6]
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d1ef      	bne.n	800f198 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800f1b8:	4a08      	ldr	r2, [pc, #32]	@ (800f1dc <ff_wtoupper+0x54>)
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d004      	beq.n	800f1ce <ff_wtoupper+0x46>
 800f1c4:	4a06      	ldr	r2, [pc, #24]	@ (800f1e0 <ff_wtoupper+0x58>)
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1cc:	e000      	b.n	800f1d0 <ff_wtoupper+0x48>
 800f1ce:	88fb      	ldrh	r3, [r7, #6]
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3714      	adds	r7, #20
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bc80      	pop	{r7}
 800f1d8:	4770      	bx	lr
 800f1da:	bf00      	nop
 800f1dc:	08012710 	.word	0x08012710
 800f1e0:	080128f0 	.word	0x080128f0

0800f1e4 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b086      	sub	sp, #24
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	6039      	str	r1, [r7, #0]
 800f1ee:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	60fb      	str	r3, [r7, #12]
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 800f1f8:	f107 030c 	add.w	r3, r7, #12
 800f1fc:	2101      	movs	r1, #1
 800f1fe:	4618      	mov	r0, r3
 800f200:	f000 f8cb 	bl	800f39a <osSemaphoreCreate>
 800f204:	4602      	mov	r2, r0
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	bf14      	ite	ne
 800f212:	2301      	movne	r3, #1
 800f214:	2300      	moveq	r3, #0
 800f216:	b2db      	uxtb	r3, r3
 800f218:	617b      	str	r3, [r7, #20]
  
  return ret;
 800f21a:	697b      	ldr	r3, [r7, #20]
}
 800f21c:	4618      	mov	r0, r3
 800f21e:	3718      	adds	r7, #24
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}

0800f224 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b082      	sub	sp, #8
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f000 f96b 	bl	800f508 <osSemaphoreDelete>
  return 1;
 800f232:	2301      	movs	r3, #1
}
 800f234:	4618      	mov	r0, r3
 800f236:	3708      	adds	r7, #8
 800f238:	46bd      	mov	sp, r7
 800f23a:	bd80      	pop	{r7, pc}

0800f23c <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b084      	sub	sp, #16
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800f244:	2300      	movs	r3, #0
 800f246:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800f248:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f000 f8d7 	bl	800f400 <osSemaphoreWait>
 800f252:	4603      	mov	r3, r0
 800f254:	2b00      	cmp	r3, #0
 800f256:	d101      	bne.n	800f25c <ff_req_grant+0x20>
  {
    ret = 1;
 800f258:	2301      	movs	r3, #1
 800f25a:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800f25c:	68fb      	ldr	r3, [r7, #12]
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3710      	adds	r7, #16
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}

0800f266 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800f266:	b580      	push	{r7, lr}
 800f268:	b082      	sub	sp, #8
 800f26a:	af00      	add	r7, sp, #0
 800f26c:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f000 f914 	bl	800f49c <osSemaphoreRelease>
}
 800f274:	bf00      	nop
 800f276:	3708      	adds	r7, #8
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f27c:	b480      	push	{r7}
 800f27e:	b085      	sub	sp, #20
 800f280:	af00      	add	r7, sp, #0
 800f282:	4603      	mov	r3, r0
 800f284:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f286:	2300      	movs	r3, #0
 800f288:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f28a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f28e:	2b84      	cmp	r3, #132	@ 0x84
 800f290:	d005      	beq.n	800f29e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f292:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	4413      	add	r3, r2
 800f29a:	3303      	adds	r3, #3
 800f29c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f29e:	68fb      	ldr	r3, [r7, #12]
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3714      	adds	r7, #20
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bc80      	pop	{r7}
 800f2a8:	4770      	bx	lr

0800f2aa <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f2aa:	b480      	push	{r7}
 800f2ac:	b083      	sub	sp, #12
 800f2ae:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f2b0:	f3ef 8305 	mrs	r3, IPSR
 800f2b4:	607b      	str	r3, [r7, #4]
  return(result);
 800f2b6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	bf14      	ite	ne
 800f2bc:	2301      	movne	r3, #1
 800f2be:	2300      	moveq	r3, #0
 800f2c0:	b2db      	uxtb	r3, r3
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	370c      	adds	r7, #12
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bc80      	pop	{r7}
 800f2ca:	4770      	bx	lr

0800f2cc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f2d0:	f001 fb34 	bl	801093c <vTaskStartScheduler>
  
  return osOK;
 800f2d4:	2300      	movs	r3, #0
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	bd80      	pop	{r7, pc}

0800f2da <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f2da:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2dc:	b089      	sub	sp, #36	@ 0x24
 800f2de:	af04      	add	r7, sp, #16
 800f2e0:	6078      	str	r0, [r7, #4]
 800f2e2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	695b      	ldr	r3, [r3, #20]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d020      	beq.n	800f32e <osThreadCreate+0x54>
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	699b      	ldr	r3, [r3, #24]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d01c      	beq.n	800f32e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	685c      	ldr	r4, [r3, #4]
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	691e      	ldr	r6, [r3, #16]
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f306:	4618      	mov	r0, r3
 800f308:	f7ff ffb8 	bl	800f27c <makeFreeRtosPriority>
 800f30c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	695b      	ldr	r3, [r3, #20]
 800f312:	687a      	ldr	r2, [r7, #4]
 800f314:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f316:	9202      	str	r2, [sp, #8]
 800f318:	9301      	str	r3, [sp, #4]
 800f31a:	9100      	str	r1, [sp, #0]
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	4632      	mov	r2, r6
 800f320:	4629      	mov	r1, r5
 800f322:	4620      	mov	r0, r4
 800f324:	f000 ff90 	bl	8010248 <xTaskCreateStatic>
 800f328:	4603      	mov	r3, r0
 800f32a:	60fb      	str	r3, [r7, #12]
 800f32c:	e01c      	b.n	800f368 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	685c      	ldr	r4, [r3, #4]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f33a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f342:	4618      	mov	r0, r3
 800f344:	f7ff ff9a 	bl	800f27c <makeFreeRtosPriority>
 800f348:	4602      	mov	r2, r0
 800f34a:	f107 030c 	add.w	r3, r7, #12
 800f34e:	9301      	str	r3, [sp, #4]
 800f350:	9200      	str	r2, [sp, #0]
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	4632      	mov	r2, r6
 800f356:	4629      	mov	r1, r5
 800f358:	4620      	mov	r0, r4
 800f35a:	f000 ffd4 	bl	8010306 <xTaskCreate>
 800f35e:	4603      	mov	r3, r0
 800f360:	2b01      	cmp	r3, #1
 800f362:	d001      	beq.n	800f368 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800f364:	2300      	movs	r3, #0
 800f366:	e000      	b.n	800f36a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800f368:	68fb      	ldr	r3, [r7, #12]
}
 800f36a:	4618      	mov	r0, r3
 800f36c:	3714      	adds	r7, #20
 800f36e:	46bd      	mov	sp, r7
 800f370:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f372 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f372:	b580      	push	{r7, lr}
 800f374:	b084      	sub	sp, #16
 800f376:	af00      	add	r7, sp, #0
 800f378:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d001      	beq.n	800f388 <osDelay+0x16>
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	e000      	b.n	800f38a <osDelay+0x18>
 800f388:	2301      	movs	r3, #1
 800f38a:	4618      	mov	r0, r3
 800f38c:	f001 f972 	bl	8010674 <vTaskDelay>
  
  return osOK;
 800f390:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f392:	4618      	mov	r0, r3
 800f394:	3710      	adds	r7, #16
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}

0800f39a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800f39a:	b580      	push	{r7, lr}
 800f39c:	b086      	sub	sp, #24
 800f39e:	af02      	add	r7, sp, #8
 800f3a0:	6078      	str	r0, [r7, #4]
 800f3a2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	685b      	ldr	r3, [r3, #4]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d00f      	beq.n	800f3cc <osSemaphoreCreate+0x32>
    if (count == 1) {
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	2b01      	cmp	r3, #1
 800f3b0:	d10a      	bne.n	800f3c8 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	685b      	ldr	r3, [r3, #4]
 800f3b6:	2203      	movs	r2, #3
 800f3b8:	9200      	str	r2, [sp, #0]
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	2100      	movs	r1, #0
 800f3be:	2001      	movs	r0, #1
 800f3c0:	f000 f9ce 	bl	800f760 <xQueueGenericCreateStatic>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	e016      	b.n	800f3f6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	e014      	b.n	800f3f6 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	2b01      	cmp	r3, #1
 800f3d0:	d110      	bne.n	800f3f4 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800f3d2:	2203      	movs	r2, #3
 800f3d4:	2100      	movs	r1, #0
 800f3d6:	2001      	movs	r0, #1
 800f3d8:	f000 fa3e 	bl	800f858 <xQueueGenericCreate>
 800f3dc:	60f8      	str	r0, [r7, #12]
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d005      	beq.n	800f3f0 <osSemaphoreCreate+0x56>
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	2100      	movs	r1, #0
 800f3ea:	68f8      	ldr	r0, [r7, #12]
 800f3ec:	f000 fa92 	bl	800f914 <xQueueGenericSend>
      return sema;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	e000      	b.n	800f3f6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800f3f4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3710      	adds	r7, #16
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}
	...

0800f400 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b084      	sub	sp, #16
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
 800f408:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f40a:	2300      	movs	r3, #0
 800f40c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d101      	bne.n	800f418 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800f414:	2380      	movs	r3, #128	@ 0x80
 800f416:	e03a      	b.n	800f48e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800f418:	2300      	movs	r3, #0
 800f41a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f422:	d103      	bne.n	800f42c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800f424:	f04f 33ff 	mov.w	r3, #4294967295
 800f428:	60fb      	str	r3, [r7, #12]
 800f42a:	e009      	b.n	800f440 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d006      	beq.n	800f440 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d101      	bne.n	800f440 <osSemaphoreWait+0x40>
      ticks = 1;
 800f43c:	2301      	movs	r3, #1
 800f43e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f440:	f7ff ff33 	bl	800f2aa <inHandlerMode>
 800f444:	4603      	mov	r3, r0
 800f446:	2b00      	cmp	r3, #0
 800f448:	d017      	beq.n	800f47a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f44a:	f107 0308 	add.w	r3, r7, #8
 800f44e:	461a      	mov	r2, r3
 800f450:	2100      	movs	r1, #0
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f000 fd00 	bl	800fe58 <xQueueReceiveFromISR>
 800f458:	4603      	mov	r3, r0
 800f45a:	2b01      	cmp	r3, #1
 800f45c:	d001      	beq.n	800f462 <osSemaphoreWait+0x62>
      return osErrorOS;
 800f45e:	23ff      	movs	r3, #255	@ 0xff
 800f460:	e015      	b.n	800f48e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f462:	68bb      	ldr	r3, [r7, #8]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d011      	beq.n	800f48c <osSemaphoreWait+0x8c>
 800f468:	4b0b      	ldr	r3, [pc, #44]	@ (800f498 <osSemaphoreWait+0x98>)
 800f46a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f46e:	601a      	str	r2, [r3, #0]
 800f470:	f3bf 8f4f 	dsb	sy
 800f474:	f3bf 8f6f 	isb	sy
 800f478:	e008      	b.n	800f48c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800f47a:	68f9      	ldr	r1, [r7, #12]
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f000 fbdb 	bl	800fc38 <xQueueSemaphoreTake>
 800f482:	4603      	mov	r3, r0
 800f484:	2b01      	cmp	r3, #1
 800f486:	d001      	beq.n	800f48c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800f488:	23ff      	movs	r3, #255	@ 0xff
 800f48a:	e000      	b.n	800f48e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800f48c:	2300      	movs	r3, #0
}
 800f48e:	4618      	mov	r0, r3
 800f490:	3710      	adds	r7, #16
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}
 800f496:	bf00      	nop
 800f498:	e000ed04 	.word	0xe000ed04

0800f49c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b084      	sub	sp, #16
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800f4ac:	f7ff fefd 	bl	800f2aa <inHandlerMode>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d016      	beq.n	800f4e4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f4b6:	f107 0308 	add.w	r3, r7, #8
 800f4ba:	4619      	mov	r1, r3
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f000 fb2b 	bl	800fb18 <xQueueGiveFromISR>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	2b01      	cmp	r3, #1
 800f4c6:	d001      	beq.n	800f4cc <osSemaphoreRelease+0x30>
      return osErrorOS;
 800f4c8:	23ff      	movs	r3, #255	@ 0xff
 800f4ca:	e017      	b.n	800f4fc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d013      	beq.n	800f4fa <osSemaphoreRelease+0x5e>
 800f4d2:	4b0c      	ldr	r3, [pc, #48]	@ (800f504 <osSemaphoreRelease+0x68>)
 800f4d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4d8:	601a      	str	r2, [r3, #0]
 800f4da:	f3bf 8f4f 	dsb	sy
 800f4de:	f3bf 8f6f 	isb	sy
 800f4e2:	e00a      	b.n	800f4fa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	2100      	movs	r1, #0
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f000 fa12 	bl	800f914 <xQueueGenericSend>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	2b01      	cmp	r3, #1
 800f4f4:	d001      	beq.n	800f4fa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800f4f6:	23ff      	movs	r3, #255	@ 0xff
 800f4f8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	3710      	adds	r7, #16
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}
 800f504:	e000ed04 	.word	0xe000ed04

0800f508 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b082      	sub	sp, #8
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800f510:	f7ff fecb 	bl	800f2aa <inHandlerMode>
 800f514:	4603      	mov	r3, r0
 800f516:	2b00      	cmp	r3, #0
 800f518:	d001      	beq.n	800f51e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800f51a:	2382      	movs	r3, #130	@ 0x82
 800f51c:	e003      	b.n	800f526 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	f000 fd1c 	bl	800ff5c <vQueueDelete>

  return osOK; 
 800f524:	2300      	movs	r3, #0
}
 800f526:	4618      	mov	r0, r3
 800f528:	3708      	adds	r7, #8
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}

0800f52e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f52e:	b480      	push	{r7}
 800f530:	b083      	sub	sp, #12
 800f532:	af00      	add	r7, sp, #0
 800f534:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f103 0208 	add.w	r2, r3, #8
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f04f 32ff 	mov.w	r2, #4294967295
 800f546:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f103 0208 	add.w	r2, r3, #8
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f103 0208 	add.w	r2, r3, #8
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2200      	movs	r2, #0
 800f560:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f562:	bf00      	nop
 800f564:	370c      	adds	r7, #12
 800f566:	46bd      	mov	sp, r7
 800f568:	bc80      	pop	{r7}
 800f56a:	4770      	bx	lr

0800f56c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f56c:	b480      	push	{r7}
 800f56e:	b083      	sub	sp, #12
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2200      	movs	r2, #0
 800f578:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f57a:	bf00      	nop
 800f57c:	370c      	adds	r7, #12
 800f57e:	46bd      	mov	sp, r7
 800f580:	bc80      	pop	{r7}
 800f582:	4770      	bx	lr

0800f584 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f584:	b480      	push	{r7}
 800f586:	b085      	sub	sp, #20
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	685b      	ldr	r3, [r3, #4]
 800f592:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	68fa      	ldr	r2, [r7, #12]
 800f598:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	689a      	ldr	r2, [r3, #8]
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	689b      	ldr	r3, [r3, #8]
 800f5a6:	683a      	ldr	r2, [r7, #0]
 800f5a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	683a      	ldr	r2, [r7, #0]
 800f5ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	687a      	ldr	r2, [r7, #4]
 800f5b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	1c5a      	adds	r2, r3, #1
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	601a      	str	r2, [r3, #0]
}
 800f5c0:	bf00      	nop
 800f5c2:	3714      	adds	r7, #20
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bc80      	pop	{r7}
 800f5c8:	4770      	bx	lr

0800f5ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f5ca:	b480      	push	{r7}
 800f5cc:	b085      	sub	sp, #20
 800f5ce:	af00      	add	r7, sp, #0
 800f5d0:	6078      	str	r0, [r7, #4]
 800f5d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5e0:	d103      	bne.n	800f5ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	691b      	ldr	r3, [r3, #16]
 800f5e6:	60fb      	str	r3, [r7, #12]
 800f5e8:	e00c      	b.n	800f604 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	3308      	adds	r3, #8
 800f5ee:	60fb      	str	r3, [r7, #12]
 800f5f0:	e002      	b.n	800f5f8 <vListInsert+0x2e>
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	685b      	ldr	r3, [r3, #4]
 800f5f6:	60fb      	str	r3, [r7, #12]
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	685b      	ldr	r3, [r3, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	68ba      	ldr	r2, [r7, #8]
 800f600:	429a      	cmp	r2, r3
 800f602:	d2f6      	bcs.n	800f5f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	685a      	ldr	r2, [r3, #4]
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	685b      	ldr	r3, [r3, #4]
 800f610:	683a      	ldr	r2, [r7, #0]
 800f612:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	68fa      	ldr	r2, [r7, #12]
 800f618:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	683a      	ldr	r2, [r7, #0]
 800f61e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	687a      	ldr	r2, [r7, #4]
 800f624:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	1c5a      	adds	r2, r3, #1
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	601a      	str	r2, [r3, #0]
}
 800f630:	bf00      	nop
 800f632:	3714      	adds	r7, #20
 800f634:	46bd      	mov	sp, r7
 800f636:	bc80      	pop	{r7}
 800f638:	4770      	bx	lr

0800f63a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f63a:	b480      	push	{r7}
 800f63c:	b085      	sub	sp, #20
 800f63e:	af00      	add	r7, sp, #0
 800f640:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	691b      	ldr	r3, [r3, #16]
 800f646:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	685b      	ldr	r3, [r3, #4]
 800f64c:	687a      	ldr	r2, [r7, #4]
 800f64e:	6892      	ldr	r2, [r2, #8]
 800f650:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	689b      	ldr	r3, [r3, #8]
 800f656:	687a      	ldr	r2, [r7, #4]
 800f658:	6852      	ldr	r2, [r2, #4]
 800f65a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	685b      	ldr	r3, [r3, #4]
 800f660:	687a      	ldr	r2, [r7, #4]
 800f662:	429a      	cmp	r2, r3
 800f664:	d103      	bne.n	800f66e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	689a      	ldr	r2, [r3, #8]
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	2200      	movs	r2, #0
 800f672:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	1e5a      	subs	r2, r3, #1
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	681b      	ldr	r3, [r3, #0]
}
 800f682:	4618      	mov	r0, r3
 800f684:	3714      	adds	r7, #20
 800f686:	46bd      	mov	sp, r7
 800f688:	bc80      	pop	{r7}
 800f68a:	4770      	bx	lr

0800f68c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b084      	sub	sp, #16
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
 800f694:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d10b      	bne.n	800f6b8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6a4:	f383 8811 	msr	BASEPRI, r3
 800f6a8:	f3bf 8f6f 	isb	sy
 800f6ac:	f3bf 8f4f 	dsb	sy
 800f6b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f6b2:	bf00      	nop
 800f6b4:	bf00      	nop
 800f6b6:	e7fd      	b.n	800f6b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f6b8:	f002 f8d0 	bl	801185c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	681a      	ldr	r2, [r3, #0]
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6c4:	68f9      	ldr	r1, [r7, #12]
 800f6c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f6c8:	fb01 f303 	mul.w	r3, r1, r3
 800f6cc:	441a      	add	r2, r3
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	681a      	ldr	r2, [r3, #0]
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681a      	ldr	r2, [r3, #0]
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6e8:	3b01      	subs	r3, #1
 800f6ea:	68f9      	ldr	r1, [r7, #12]
 800f6ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f6ee:	fb01 f303 	mul.w	r3, r1, r3
 800f6f2:	441a      	add	r2, r3
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	22ff      	movs	r2, #255	@ 0xff
 800f6fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	22ff      	movs	r2, #255	@ 0xff
 800f704:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d114      	bne.n	800f738 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	691b      	ldr	r3, [r3, #16]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d01a      	beq.n	800f74c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	3310      	adds	r3, #16
 800f71a:	4618      	mov	r0, r3
 800f71c:	f001 fb6a 	bl	8010df4 <xTaskRemoveFromEventList>
 800f720:	4603      	mov	r3, r0
 800f722:	2b00      	cmp	r3, #0
 800f724:	d012      	beq.n	800f74c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f726:	4b0d      	ldr	r3, [pc, #52]	@ (800f75c <xQueueGenericReset+0xd0>)
 800f728:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f72c:	601a      	str	r2, [r3, #0]
 800f72e:	f3bf 8f4f 	dsb	sy
 800f732:	f3bf 8f6f 	isb	sy
 800f736:	e009      	b.n	800f74c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	3310      	adds	r3, #16
 800f73c:	4618      	mov	r0, r3
 800f73e:	f7ff fef6 	bl	800f52e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	3324      	adds	r3, #36	@ 0x24
 800f746:	4618      	mov	r0, r3
 800f748:	f7ff fef1 	bl	800f52e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f74c:	f002 f8b6 	bl	80118bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f750:	2301      	movs	r3, #1
}
 800f752:	4618      	mov	r0, r3
 800f754:	3710      	adds	r7, #16
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}
 800f75a:	bf00      	nop
 800f75c:	e000ed04 	.word	0xe000ed04

0800f760 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f760:	b580      	push	{r7, lr}
 800f762:	b08e      	sub	sp, #56	@ 0x38
 800f764:	af02      	add	r7, sp, #8
 800f766:	60f8      	str	r0, [r7, #12]
 800f768:	60b9      	str	r1, [r7, #8]
 800f76a:	607a      	str	r2, [r7, #4]
 800f76c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d10b      	bne.n	800f78c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800f774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f778:	f383 8811 	msr	BASEPRI, r3
 800f77c:	f3bf 8f6f 	isb	sy
 800f780:	f3bf 8f4f 	dsb	sy
 800f784:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f786:	bf00      	nop
 800f788:	bf00      	nop
 800f78a:	e7fd      	b.n	800f788 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d10b      	bne.n	800f7aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800f792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f796:	f383 8811 	msr	BASEPRI, r3
 800f79a:	f3bf 8f6f 	isb	sy
 800f79e:	f3bf 8f4f 	dsb	sy
 800f7a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f7a4:	bf00      	nop
 800f7a6:	bf00      	nop
 800f7a8:	e7fd      	b.n	800f7a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d002      	beq.n	800f7b6 <xQueueGenericCreateStatic+0x56>
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d001      	beq.n	800f7ba <xQueueGenericCreateStatic+0x5a>
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	e000      	b.n	800f7bc <xQueueGenericCreateStatic+0x5c>
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d10b      	bne.n	800f7d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800f7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7c4:	f383 8811 	msr	BASEPRI, r3
 800f7c8:	f3bf 8f6f 	isb	sy
 800f7cc:	f3bf 8f4f 	dsb	sy
 800f7d0:	623b      	str	r3, [r7, #32]
}
 800f7d2:	bf00      	nop
 800f7d4:	bf00      	nop
 800f7d6:	e7fd      	b.n	800f7d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d102      	bne.n	800f7e4 <xQueueGenericCreateStatic+0x84>
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d101      	bne.n	800f7e8 <xQueueGenericCreateStatic+0x88>
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	e000      	b.n	800f7ea <xQueueGenericCreateStatic+0x8a>
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d10b      	bne.n	800f806 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800f7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7f2:	f383 8811 	msr	BASEPRI, r3
 800f7f6:	f3bf 8f6f 	isb	sy
 800f7fa:	f3bf 8f4f 	dsb	sy
 800f7fe:	61fb      	str	r3, [r7, #28]
}
 800f800:	bf00      	nop
 800f802:	bf00      	nop
 800f804:	e7fd      	b.n	800f802 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f806:	2348      	movs	r3, #72	@ 0x48
 800f808:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	2b48      	cmp	r3, #72	@ 0x48
 800f80e:	d00b      	beq.n	800f828 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800f810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f814:	f383 8811 	msr	BASEPRI, r3
 800f818:	f3bf 8f6f 	isb	sy
 800f81c:	f3bf 8f4f 	dsb	sy
 800f820:	61bb      	str	r3, [r7, #24]
}
 800f822:	bf00      	nop
 800f824:	bf00      	nop
 800f826:	e7fd      	b.n	800f824 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800f82c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d00d      	beq.n	800f84e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f834:	2201      	movs	r2, #1
 800f836:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f83a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f83e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f840:	9300      	str	r3, [sp, #0]
 800f842:	4613      	mov	r3, r2
 800f844:	687a      	ldr	r2, [r7, #4]
 800f846:	68b9      	ldr	r1, [r7, #8]
 800f848:	68f8      	ldr	r0, [r7, #12]
 800f84a:	f000 f844 	bl	800f8d6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800f84e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800f850:	4618      	mov	r0, r3
 800f852:	3730      	adds	r7, #48	@ 0x30
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}

0800f858 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b08a      	sub	sp, #40	@ 0x28
 800f85c:	af02      	add	r7, sp, #8
 800f85e:	60f8      	str	r0, [r7, #12]
 800f860:	60b9      	str	r1, [r7, #8]
 800f862:	4613      	mov	r3, r2
 800f864:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d10b      	bne.n	800f884 <xQueueGenericCreate+0x2c>
	__asm volatile
 800f86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f870:	f383 8811 	msr	BASEPRI, r3
 800f874:	f3bf 8f6f 	isb	sy
 800f878:	f3bf 8f4f 	dsb	sy
 800f87c:	613b      	str	r3, [r7, #16]
}
 800f87e:	bf00      	nop
 800f880:	bf00      	nop
 800f882:	e7fd      	b.n	800f880 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d102      	bne.n	800f890 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f88a:	2300      	movs	r3, #0
 800f88c:	61fb      	str	r3, [r7, #28]
 800f88e:	e004      	b.n	800f89a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	68ba      	ldr	r2, [r7, #8]
 800f894:	fb02 f303 	mul.w	r3, r2, r3
 800f898:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800f89a:	69fb      	ldr	r3, [r7, #28]
 800f89c:	3348      	adds	r3, #72	@ 0x48
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f002 f8de 	bl	8011a60 <pvPortMalloc>
 800f8a4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f8a6:	69bb      	ldr	r3, [r7, #24]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d00f      	beq.n	800f8cc <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800f8ac:	69bb      	ldr	r3, [r7, #24]
 800f8ae:	3348      	adds	r3, #72	@ 0x48
 800f8b0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f8b2:	69bb      	ldr	r3, [r7, #24]
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f8ba:	79fa      	ldrb	r2, [r7, #7]
 800f8bc:	69bb      	ldr	r3, [r7, #24]
 800f8be:	9300      	str	r3, [sp, #0]
 800f8c0:	4613      	mov	r3, r2
 800f8c2:	697a      	ldr	r2, [r7, #20]
 800f8c4:	68b9      	ldr	r1, [r7, #8]
 800f8c6:	68f8      	ldr	r0, [r7, #12]
 800f8c8:	f000 f805 	bl	800f8d6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800f8cc:	69bb      	ldr	r3, [r7, #24]
	}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3720      	adds	r7, #32
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}

0800f8d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f8d6:	b580      	push	{r7, lr}
 800f8d8:	b084      	sub	sp, #16
 800f8da:	af00      	add	r7, sp, #0
 800f8dc:	60f8      	str	r0, [r7, #12]
 800f8de:	60b9      	str	r1, [r7, #8]
 800f8e0:	607a      	str	r2, [r7, #4]
 800f8e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d103      	bne.n	800f8f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f8ea:	69bb      	ldr	r3, [r7, #24]
 800f8ec:	69ba      	ldr	r2, [r7, #24]
 800f8ee:	601a      	str	r2, [r3, #0]
 800f8f0:	e002      	b.n	800f8f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f8f2:	69bb      	ldr	r3, [r7, #24]
 800f8f4:	687a      	ldr	r2, [r7, #4]
 800f8f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f8f8:	69bb      	ldr	r3, [r7, #24]
 800f8fa:	68fa      	ldr	r2, [r7, #12]
 800f8fc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f8fe:	69bb      	ldr	r3, [r7, #24]
 800f900:	68ba      	ldr	r2, [r7, #8]
 800f902:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f904:	2101      	movs	r1, #1
 800f906:	69b8      	ldr	r0, [r7, #24]
 800f908:	f7ff fec0 	bl	800f68c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f90c:	bf00      	nop
 800f90e:	3710      	adds	r7, #16
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}

0800f914 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b08e      	sub	sp, #56	@ 0x38
 800f918:	af00      	add	r7, sp, #0
 800f91a:	60f8      	str	r0, [r7, #12]
 800f91c:	60b9      	str	r1, [r7, #8]
 800f91e:	607a      	str	r2, [r7, #4]
 800f920:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f922:	2300      	movs	r3, #0
 800f924:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d10b      	bne.n	800f948 <xQueueGenericSend+0x34>
	__asm volatile
 800f930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f934:	f383 8811 	msr	BASEPRI, r3
 800f938:	f3bf 8f6f 	isb	sy
 800f93c:	f3bf 8f4f 	dsb	sy
 800f940:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f942:	bf00      	nop
 800f944:	bf00      	nop
 800f946:	e7fd      	b.n	800f944 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d103      	bne.n	800f956 <xQueueGenericSend+0x42>
 800f94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f952:	2b00      	cmp	r3, #0
 800f954:	d101      	bne.n	800f95a <xQueueGenericSend+0x46>
 800f956:	2301      	movs	r3, #1
 800f958:	e000      	b.n	800f95c <xQueueGenericSend+0x48>
 800f95a:	2300      	movs	r3, #0
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d10b      	bne.n	800f978 <xQueueGenericSend+0x64>
	__asm volatile
 800f960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f964:	f383 8811 	msr	BASEPRI, r3
 800f968:	f3bf 8f6f 	isb	sy
 800f96c:	f3bf 8f4f 	dsb	sy
 800f970:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f972:	bf00      	nop
 800f974:	bf00      	nop
 800f976:	e7fd      	b.n	800f974 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	2b02      	cmp	r3, #2
 800f97c:	d103      	bne.n	800f986 <xQueueGenericSend+0x72>
 800f97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f982:	2b01      	cmp	r3, #1
 800f984:	d101      	bne.n	800f98a <xQueueGenericSend+0x76>
 800f986:	2301      	movs	r3, #1
 800f988:	e000      	b.n	800f98c <xQueueGenericSend+0x78>
 800f98a:	2300      	movs	r3, #0
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d10b      	bne.n	800f9a8 <xQueueGenericSend+0x94>
	__asm volatile
 800f990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f994:	f383 8811 	msr	BASEPRI, r3
 800f998:	f3bf 8f6f 	isb	sy
 800f99c:	f3bf 8f4f 	dsb	sy
 800f9a0:	623b      	str	r3, [r7, #32]
}
 800f9a2:	bf00      	nop
 800f9a4:	bf00      	nop
 800f9a6:	e7fd      	b.n	800f9a4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f9a8:	f001 fc20 	bl	80111ec <xTaskGetSchedulerState>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d102      	bne.n	800f9b8 <xQueueGenericSend+0xa4>
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d101      	bne.n	800f9bc <xQueueGenericSend+0xa8>
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	e000      	b.n	800f9be <xQueueGenericSend+0xaa>
 800f9bc:	2300      	movs	r3, #0
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d10b      	bne.n	800f9da <xQueueGenericSend+0xc6>
	__asm volatile
 800f9c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9c6:	f383 8811 	msr	BASEPRI, r3
 800f9ca:	f3bf 8f6f 	isb	sy
 800f9ce:	f3bf 8f4f 	dsb	sy
 800f9d2:	61fb      	str	r3, [r7, #28]
}
 800f9d4:	bf00      	nop
 800f9d6:	bf00      	nop
 800f9d8:	e7fd      	b.n	800f9d6 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f9da:	f001 ff3f 	bl	801185c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d302      	bcc.n	800f9f0 <xQueueGenericSend+0xdc>
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	2b02      	cmp	r3, #2
 800f9ee:	d129      	bne.n	800fa44 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f9f0:	683a      	ldr	r2, [r7, #0]
 800f9f2:	68b9      	ldr	r1, [r7, #8]
 800f9f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f9f6:	f000 faec 	bl	800ffd2 <prvCopyDataToQueue>
 800f9fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d010      	beq.n	800fa26 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fa04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa06:	3324      	adds	r3, #36	@ 0x24
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f001 f9f3 	bl	8010df4 <xTaskRemoveFromEventList>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d013      	beq.n	800fa3c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fa14:	4b3f      	ldr	r3, [pc, #252]	@ (800fb14 <xQueueGenericSend+0x200>)
 800fa16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa1a:	601a      	str	r2, [r3, #0]
 800fa1c:	f3bf 8f4f 	dsb	sy
 800fa20:	f3bf 8f6f 	isb	sy
 800fa24:	e00a      	b.n	800fa3c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fa26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d007      	beq.n	800fa3c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fa2c:	4b39      	ldr	r3, [pc, #228]	@ (800fb14 <xQueueGenericSend+0x200>)
 800fa2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa32:	601a      	str	r2, [r3, #0]
 800fa34:	f3bf 8f4f 	dsb	sy
 800fa38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fa3c:	f001 ff3e 	bl	80118bc <vPortExitCritical>
				return pdPASS;
 800fa40:	2301      	movs	r3, #1
 800fa42:	e063      	b.n	800fb0c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d103      	bne.n	800fa52 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fa4a:	f001 ff37 	bl	80118bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	e05c      	b.n	800fb0c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fa52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d106      	bne.n	800fa66 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fa58:	f107 0314 	add.w	r3, r7, #20
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f001 fa2d 	bl	8010ebc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fa62:	2301      	movs	r3, #1
 800fa64:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fa66:	f001 ff29 	bl	80118bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fa6a:	f000 ffc9 	bl	8010a00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fa6e:	f001 fef5 	bl	801185c <vPortEnterCritical>
 800fa72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fa78:	b25b      	sxtb	r3, r3
 800fa7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa7e:	d103      	bne.n	800fa88 <xQueueGenericSend+0x174>
 800fa80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa82:	2200      	movs	r2, #0
 800fa84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fa88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fa8e:	b25b      	sxtb	r3, r3
 800fa90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa94:	d103      	bne.n	800fa9e <xQueueGenericSend+0x18a>
 800fa96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa98:	2200      	movs	r2, #0
 800fa9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fa9e:	f001 ff0d 	bl	80118bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800faa2:	1d3a      	adds	r2, r7, #4
 800faa4:	f107 0314 	add.w	r3, r7, #20
 800faa8:	4611      	mov	r1, r2
 800faaa:	4618      	mov	r0, r3
 800faac:	f001 fa1c 	bl	8010ee8 <xTaskCheckForTimeOut>
 800fab0:	4603      	mov	r3, r0
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d124      	bne.n	800fb00 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fab6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fab8:	f000 fb83 	bl	80101c2 <prvIsQueueFull>
 800fabc:	4603      	mov	r3, r0
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d018      	beq.n	800faf4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fac4:	3310      	adds	r3, #16
 800fac6:	687a      	ldr	r2, [r7, #4]
 800fac8:	4611      	mov	r1, r2
 800faca:	4618      	mov	r0, r3
 800facc:	f001 f96c 	bl	8010da8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fad0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fad2:	f000 fb0e 	bl	80100f2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fad6:	f000 ffa1 	bl	8010a1c <xTaskResumeAll>
 800fada:	4603      	mov	r3, r0
 800fadc:	2b00      	cmp	r3, #0
 800fade:	f47f af7c 	bne.w	800f9da <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800fae2:	4b0c      	ldr	r3, [pc, #48]	@ (800fb14 <xQueueGenericSend+0x200>)
 800fae4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fae8:	601a      	str	r2, [r3, #0]
 800faea:	f3bf 8f4f 	dsb	sy
 800faee:	f3bf 8f6f 	isb	sy
 800faf2:	e772      	b.n	800f9da <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800faf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800faf6:	f000 fafc 	bl	80100f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fafa:	f000 ff8f 	bl	8010a1c <xTaskResumeAll>
 800fafe:	e76c      	b.n	800f9da <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fb00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fb02:	f000 faf6 	bl	80100f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fb06:	f000 ff89 	bl	8010a1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fb0a:	2300      	movs	r3, #0
		}
	}
}
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3738      	adds	r7, #56	@ 0x38
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}
 800fb14:	e000ed04 	.word	0xe000ed04

0800fb18 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b08e      	sub	sp, #56	@ 0x38
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800fb26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d10b      	bne.n	800fb44 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800fb2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb30:	f383 8811 	msr	BASEPRI, r3
 800fb34:	f3bf 8f6f 	isb	sy
 800fb38:	f3bf 8f4f 	dsb	sy
 800fb3c:	623b      	str	r3, [r7, #32]
}
 800fb3e:	bf00      	nop
 800fb40:	bf00      	nop
 800fb42:	e7fd      	b.n	800fb40 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fb44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d00b      	beq.n	800fb64 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800fb4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb50:	f383 8811 	msr	BASEPRI, r3
 800fb54:	f3bf 8f6f 	isb	sy
 800fb58:	f3bf 8f4f 	dsb	sy
 800fb5c:	61fb      	str	r3, [r7, #28]
}
 800fb5e:	bf00      	nop
 800fb60:	bf00      	nop
 800fb62:	e7fd      	b.n	800fb60 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800fb64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d103      	bne.n	800fb74 <xQueueGiveFromISR+0x5c>
 800fb6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb6e:	685b      	ldr	r3, [r3, #4]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d101      	bne.n	800fb78 <xQueueGiveFromISR+0x60>
 800fb74:	2301      	movs	r3, #1
 800fb76:	e000      	b.n	800fb7a <xQueueGiveFromISR+0x62>
 800fb78:	2300      	movs	r3, #0
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d10b      	bne.n	800fb96 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800fb7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb82:	f383 8811 	msr	BASEPRI, r3
 800fb86:	f3bf 8f6f 	isb	sy
 800fb8a:	f3bf 8f4f 	dsb	sy
 800fb8e:	61bb      	str	r3, [r7, #24]
}
 800fb90:	bf00      	nop
 800fb92:	bf00      	nop
 800fb94:	e7fd      	b.n	800fb92 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fb96:	f001 ff23 	bl	80119e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fb9a:	f3ef 8211 	mrs	r2, BASEPRI
 800fb9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fba2:	f383 8811 	msr	BASEPRI, r3
 800fba6:	f3bf 8f6f 	isb	sy
 800fbaa:	f3bf 8f4f 	dsb	sy
 800fbae:	617a      	str	r2, [r7, #20]
 800fbb0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fbb2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fbb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fbbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fbc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	d22b      	bcs.n	800fc1e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fbc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fbcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fbd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbd2:	1c5a      	adds	r2, r3, #1
 800fbd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbd6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fbd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fbdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbe0:	d112      	bne.n	800fc08 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fbe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d016      	beq.n	800fc18 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fbea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbec:	3324      	adds	r3, #36	@ 0x24
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f001 f900 	bl	8010df4 <xTaskRemoveFromEventList>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d00e      	beq.n	800fc18 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fbfa:	683b      	ldr	r3, [r7, #0]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d00b      	beq.n	800fc18 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	2201      	movs	r2, #1
 800fc04:	601a      	str	r2, [r3, #0]
 800fc06:	e007      	b.n	800fc18 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fc08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fc0c:	3301      	adds	r3, #1
 800fc0e:	b2db      	uxtb	r3, r3
 800fc10:	b25a      	sxtb	r2, r3
 800fc12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fc18:	2301      	movs	r3, #1
 800fc1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc1c:	e001      	b.n	800fc22 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fc1e:	2300      	movs	r3, #0
 800fc20:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc24:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fc2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fc2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	3738      	adds	r7, #56	@ 0x38
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}

0800fc38 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b08e      	sub	sp, #56	@ 0x38
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
 800fc40:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fc42:	2300      	movs	r3, #0
 800fc44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fc4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d10b      	bne.n	800fc6c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800fc54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc58:	f383 8811 	msr	BASEPRI, r3
 800fc5c:	f3bf 8f6f 	isb	sy
 800fc60:	f3bf 8f4f 	dsb	sy
 800fc64:	623b      	str	r3, [r7, #32]
}
 800fc66:	bf00      	nop
 800fc68:	bf00      	nop
 800fc6a:	e7fd      	b.n	800fc68 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fc6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d00b      	beq.n	800fc8c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800fc74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc78:	f383 8811 	msr	BASEPRI, r3
 800fc7c:	f3bf 8f6f 	isb	sy
 800fc80:	f3bf 8f4f 	dsb	sy
 800fc84:	61fb      	str	r3, [r7, #28]
}
 800fc86:	bf00      	nop
 800fc88:	bf00      	nop
 800fc8a:	e7fd      	b.n	800fc88 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fc8c:	f001 faae 	bl	80111ec <xTaskGetSchedulerState>
 800fc90:	4603      	mov	r3, r0
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d102      	bne.n	800fc9c <xQueueSemaphoreTake+0x64>
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d101      	bne.n	800fca0 <xQueueSemaphoreTake+0x68>
 800fc9c:	2301      	movs	r3, #1
 800fc9e:	e000      	b.n	800fca2 <xQueueSemaphoreTake+0x6a>
 800fca0:	2300      	movs	r3, #0
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d10b      	bne.n	800fcbe <xQueueSemaphoreTake+0x86>
	__asm volatile
 800fca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcaa:	f383 8811 	msr	BASEPRI, r3
 800fcae:	f3bf 8f6f 	isb	sy
 800fcb2:	f3bf 8f4f 	dsb	sy
 800fcb6:	61bb      	str	r3, [r7, #24]
}
 800fcb8:	bf00      	nop
 800fcba:	bf00      	nop
 800fcbc:	e7fd      	b.n	800fcba <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800fcbe:	f001 fdcd 	bl	801185c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fcc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcc6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fcc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d024      	beq.n	800fd18 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fcce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcd0:	1e5a      	subs	r2, r3, #1
 800fcd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcd4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fcd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d104      	bne.n	800fce8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800fcde:	f001 fc53 	bl	8011588 <pvTaskIncrementMutexHeldCount>
 800fce2:	4602      	mov	r2, r0
 800fce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fce6:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcea:	691b      	ldr	r3, [r3, #16]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d00f      	beq.n	800fd10 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fcf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcf2:	3310      	adds	r3, #16
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	f001 f87d 	bl	8010df4 <xTaskRemoveFromEventList>
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d007      	beq.n	800fd10 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fd00:	4b54      	ldr	r3, [pc, #336]	@ (800fe54 <xQueueSemaphoreTake+0x21c>)
 800fd02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fd06:	601a      	str	r2, [r3, #0]
 800fd08:	f3bf 8f4f 	dsb	sy
 800fd0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fd10:	f001 fdd4 	bl	80118bc <vPortExitCritical>
				return pdPASS;
 800fd14:	2301      	movs	r3, #1
 800fd16:	e098      	b.n	800fe4a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fd18:	683b      	ldr	r3, [r7, #0]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d112      	bne.n	800fd44 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fd1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d00b      	beq.n	800fd3c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800fd24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd28:	f383 8811 	msr	BASEPRI, r3
 800fd2c:	f3bf 8f6f 	isb	sy
 800fd30:	f3bf 8f4f 	dsb	sy
 800fd34:	617b      	str	r3, [r7, #20]
}
 800fd36:	bf00      	nop
 800fd38:	bf00      	nop
 800fd3a:	e7fd      	b.n	800fd38 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fd3c:	f001 fdbe 	bl	80118bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fd40:	2300      	movs	r3, #0
 800fd42:	e082      	b.n	800fe4a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fd44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d106      	bne.n	800fd58 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fd4a:	f107 030c 	add.w	r3, r7, #12
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f001 f8b4 	bl	8010ebc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fd54:	2301      	movs	r3, #1
 800fd56:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fd58:	f001 fdb0 	bl	80118bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fd5c:	f000 fe50 	bl	8010a00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fd60:	f001 fd7c 	bl	801185c <vPortEnterCritical>
 800fd64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fd6a:	b25b      	sxtb	r3, r3
 800fd6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd70:	d103      	bne.n	800fd7a <xQueueSemaphoreTake+0x142>
 800fd72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd74:	2200      	movs	r2, #0
 800fd76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fd7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fd80:	b25b      	sxtb	r3, r3
 800fd82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd86:	d103      	bne.n	800fd90 <xQueueSemaphoreTake+0x158>
 800fd88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fd90:	f001 fd94 	bl	80118bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fd94:	463a      	mov	r2, r7
 800fd96:	f107 030c 	add.w	r3, r7, #12
 800fd9a:	4611      	mov	r1, r2
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f001 f8a3 	bl	8010ee8 <xTaskCheckForTimeOut>
 800fda2:	4603      	mov	r3, r0
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d132      	bne.n	800fe0e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fda8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fdaa:	f000 f9f4 	bl	8010196 <prvIsQueueEmpty>
 800fdae:	4603      	mov	r3, r0
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d026      	beq.n	800fe02 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fdb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d109      	bne.n	800fdd0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800fdbc:	f001 fd4e 	bl	801185c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800fdc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdc2:	685b      	ldr	r3, [r3, #4]
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f001 fa2f 	bl	8011228 <xTaskPriorityInherit>
 800fdca:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800fdcc:	f001 fd76 	bl	80118bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fdd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdd2:	3324      	adds	r3, #36	@ 0x24
 800fdd4:	683a      	ldr	r2, [r7, #0]
 800fdd6:	4611      	mov	r1, r2
 800fdd8:	4618      	mov	r0, r3
 800fdda:	f000 ffe5 	bl	8010da8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fdde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fde0:	f000 f987 	bl	80100f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fde4:	f000 fe1a 	bl	8010a1c <xTaskResumeAll>
 800fde8:	4603      	mov	r3, r0
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	f47f af67 	bne.w	800fcbe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800fdf0:	4b18      	ldr	r3, [pc, #96]	@ (800fe54 <xQueueSemaphoreTake+0x21c>)
 800fdf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fdf6:	601a      	str	r2, [r3, #0]
 800fdf8:	f3bf 8f4f 	dsb	sy
 800fdfc:	f3bf 8f6f 	isb	sy
 800fe00:	e75d      	b.n	800fcbe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fe02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fe04:	f000 f975 	bl	80100f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fe08:	f000 fe08 	bl	8010a1c <xTaskResumeAll>
 800fe0c:	e757      	b.n	800fcbe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fe0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fe10:	f000 f96f 	bl	80100f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fe14:	f000 fe02 	bl	8010a1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fe18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fe1a:	f000 f9bc 	bl	8010196 <prvIsQueueEmpty>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	f43f af4c 	beq.w	800fcbe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fe26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d00d      	beq.n	800fe48 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800fe2c:	f001 fd16 	bl	801185c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fe30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fe32:	f000 f8b7 	bl	800ffa4 <prvGetDisinheritPriorityAfterTimeout>
 800fe36:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800fe38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe3a:	685b      	ldr	r3, [r3, #4]
 800fe3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f001 fb00 	bl	8011444 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fe44:	f001 fd3a 	bl	80118bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fe48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	3738      	adds	r7, #56	@ 0x38
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	bd80      	pop	{r7, pc}
 800fe52:	bf00      	nop
 800fe54:	e000ed04 	.word	0xe000ed04

0800fe58 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b08e      	sub	sp, #56	@ 0x38
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	60f8      	str	r0, [r7, #12]
 800fe60:	60b9      	str	r1, [r7, #8]
 800fe62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fe68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d10b      	bne.n	800fe86 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800fe6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe72:	f383 8811 	msr	BASEPRI, r3
 800fe76:	f3bf 8f6f 	isb	sy
 800fe7a:	f3bf 8f4f 	dsb	sy
 800fe7e:	623b      	str	r3, [r7, #32]
}
 800fe80:	bf00      	nop
 800fe82:	bf00      	nop
 800fe84:	e7fd      	b.n	800fe82 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d103      	bne.n	800fe94 <xQueueReceiveFromISR+0x3c>
 800fe8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d101      	bne.n	800fe98 <xQueueReceiveFromISR+0x40>
 800fe94:	2301      	movs	r3, #1
 800fe96:	e000      	b.n	800fe9a <xQueueReceiveFromISR+0x42>
 800fe98:	2300      	movs	r3, #0
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d10b      	bne.n	800feb6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800fe9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fea2:	f383 8811 	msr	BASEPRI, r3
 800fea6:	f3bf 8f6f 	isb	sy
 800feaa:	f3bf 8f4f 	dsb	sy
 800feae:	61fb      	str	r3, [r7, #28]
}
 800feb0:	bf00      	nop
 800feb2:	bf00      	nop
 800feb4:	e7fd      	b.n	800feb2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800feb6:	f001 fd93 	bl	80119e0 <vPortValidateInterruptPriority>
	__asm volatile
 800feba:	f3ef 8211 	mrs	r2, BASEPRI
 800febe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fec2:	f383 8811 	msr	BASEPRI, r3
 800fec6:	f3bf 8f6f 	isb	sy
 800feca:	f3bf 8f4f 	dsb	sy
 800fece:	61ba      	str	r2, [r7, #24]
 800fed0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fed2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800feda:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fedc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d02f      	beq.n	800ff42 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fee4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fee8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800feec:	68b9      	ldr	r1, [r7, #8]
 800feee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fef0:	f000 f8d9 	bl	80100a6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fef6:	1e5a      	subs	r2, r3, #1
 800fef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fefa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fefc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ff00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff04:	d112      	bne.n	800ff2c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff08:	691b      	ldr	r3, [r3, #16]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d016      	beq.n	800ff3c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff10:	3310      	adds	r3, #16
 800ff12:	4618      	mov	r0, r3
 800ff14:	f000 ff6e 	bl	8010df4 <xTaskRemoveFromEventList>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d00e      	beq.n	800ff3c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d00b      	beq.n	800ff3c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2201      	movs	r2, #1
 800ff28:	601a      	str	r2, [r3, #0]
 800ff2a:	e007      	b.n	800ff3c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ff2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ff30:	3301      	adds	r3, #1
 800ff32:	b2db      	uxtb	r3, r3
 800ff34:	b25a      	sxtb	r2, r3
 800ff36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ff3c:	2301      	movs	r3, #1
 800ff3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff40:	e001      	b.n	800ff46 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800ff42:	2300      	movs	r3, #0
 800ff44:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff48:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ff4a:	693b      	ldr	r3, [r7, #16]
 800ff4c:	f383 8811 	msr	BASEPRI, r3
}
 800ff50:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ff52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ff54:	4618      	mov	r0, r3
 800ff56:	3738      	adds	r7, #56	@ 0x38
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	bd80      	pop	{r7, pc}

0800ff5c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b084      	sub	sp, #16
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d10b      	bne.n	800ff86 <vQueueDelete+0x2a>
	__asm volatile
 800ff6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff72:	f383 8811 	msr	BASEPRI, r3
 800ff76:	f3bf 8f6f 	isb	sy
 800ff7a:	f3bf 8f4f 	dsb	sy
 800ff7e:	60bb      	str	r3, [r7, #8]
}
 800ff80:	bf00      	nop
 800ff82:	bf00      	nop
 800ff84:	e7fd      	b.n	800ff82 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ff86:	68f8      	ldr	r0, [r7, #12]
 800ff88:	f000 f934 	bl	80101f4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d102      	bne.n	800ff9c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800ff96:	68f8      	ldr	r0, [r7, #12]
 800ff98:	f001 fe2a 	bl	8011bf0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ff9c:	bf00      	nop
 800ff9e:	3710      	adds	r7, #16
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}

0800ffa4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ffa4:	b480      	push	{r7}
 800ffa6:	b085      	sub	sp, #20
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d006      	beq.n	800ffc2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	f1c3 0307 	rsb	r3, r3, #7
 800ffbe:	60fb      	str	r3, [r7, #12]
 800ffc0:	e001      	b.n	800ffc6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
	}
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3714      	adds	r7, #20
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bc80      	pop	{r7}
 800ffd0:	4770      	bx	lr

0800ffd2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ffd2:	b580      	push	{r7, lr}
 800ffd4:	b086      	sub	sp, #24
 800ffd6:	af00      	add	r7, sp, #0
 800ffd8:	60f8      	str	r0, [r7, #12]
 800ffda:	60b9      	str	r1, [r7, #8]
 800ffdc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ffde:	2300      	movs	r3, #0
 800ffe0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffe6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d10d      	bne.n	801000c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d14d      	bne.n	8010094 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	685b      	ldr	r3, [r3, #4]
 800fffc:	4618      	mov	r0, r3
 800fffe:	f001 f999 	bl	8011334 <xTaskPriorityDisinherit>
 8010002:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	2200      	movs	r2, #0
 8010008:	605a      	str	r2, [r3, #4]
 801000a:	e043      	b.n	8010094 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d119      	bne.n	8010046 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	6898      	ldr	r0, [r3, #8]
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801001a:	461a      	mov	r2, r3
 801001c:	68b9      	ldr	r1, [r7, #8]
 801001e:	f002 f80b 	bl	8012038 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	689a      	ldr	r2, [r3, #8]
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801002a:	441a      	add	r2, r3
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	689a      	ldr	r2, [r3, #8]
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	685b      	ldr	r3, [r3, #4]
 8010038:	429a      	cmp	r2, r3
 801003a:	d32b      	bcc.n	8010094 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	681a      	ldr	r2, [r3, #0]
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	609a      	str	r2, [r3, #8]
 8010044:	e026      	b.n	8010094 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	68d8      	ldr	r0, [r3, #12]
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801004e:	461a      	mov	r2, r3
 8010050:	68b9      	ldr	r1, [r7, #8]
 8010052:	f001 fff1 	bl	8012038 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	68da      	ldr	r2, [r3, #12]
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801005e:	425b      	negs	r3, r3
 8010060:	441a      	add	r2, r3
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	68da      	ldr	r2, [r3, #12]
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	429a      	cmp	r2, r3
 8010070:	d207      	bcs.n	8010082 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	685a      	ldr	r2, [r3, #4]
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801007a:	425b      	negs	r3, r3
 801007c:	441a      	add	r2, r3
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	2b02      	cmp	r3, #2
 8010086:	d105      	bne.n	8010094 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010088:	693b      	ldr	r3, [r7, #16]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d002      	beq.n	8010094 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801008e:	693b      	ldr	r3, [r7, #16]
 8010090:	3b01      	subs	r3, #1
 8010092:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	1c5a      	adds	r2, r3, #1
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801009c:	697b      	ldr	r3, [r7, #20]
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3718      	adds	r7, #24
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}

080100a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80100a6:	b580      	push	{r7, lr}
 80100a8:	b082      	sub	sp, #8
 80100aa:	af00      	add	r7, sp, #0
 80100ac:	6078      	str	r0, [r7, #4]
 80100ae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d018      	beq.n	80100ea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	68da      	ldr	r2, [r3, #12]
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100c0:	441a      	add	r2, r3
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	68da      	ldr	r2, [r3, #12]
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	685b      	ldr	r3, [r3, #4]
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d303      	bcc.n	80100da <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681a      	ldr	r2, [r3, #0]
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	68d9      	ldr	r1, [r3, #12]
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100e2:	461a      	mov	r2, r3
 80100e4:	6838      	ldr	r0, [r7, #0]
 80100e6:	f001 ffa7 	bl	8012038 <memcpy>
	}
}
 80100ea:	bf00      	nop
 80100ec:	3708      	adds	r7, #8
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bd80      	pop	{r7, pc}

080100f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80100f2:	b580      	push	{r7, lr}
 80100f4:	b084      	sub	sp, #16
 80100f6:	af00      	add	r7, sp, #0
 80100f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80100fa:	f001 fbaf 	bl	801185c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010104:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010106:	e011      	b.n	801012c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801010c:	2b00      	cmp	r3, #0
 801010e:	d012      	beq.n	8010136 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	3324      	adds	r3, #36	@ 0x24
 8010114:	4618      	mov	r0, r3
 8010116:	f000 fe6d 	bl	8010df4 <xTaskRemoveFromEventList>
 801011a:	4603      	mov	r3, r0
 801011c:	2b00      	cmp	r3, #0
 801011e:	d001      	beq.n	8010124 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010120:	f000 ff46 	bl	8010fb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010124:	7bfb      	ldrb	r3, [r7, #15]
 8010126:	3b01      	subs	r3, #1
 8010128:	b2db      	uxtb	r3, r3
 801012a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801012c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010130:	2b00      	cmp	r3, #0
 8010132:	dce9      	bgt.n	8010108 <prvUnlockQueue+0x16>
 8010134:	e000      	b.n	8010138 <prvUnlockQueue+0x46>
					break;
 8010136:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	22ff      	movs	r2, #255	@ 0xff
 801013c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8010140:	f001 fbbc 	bl	80118bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010144:	f001 fb8a 	bl	801185c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801014e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010150:	e011      	b.n	8010176 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	691b      	ldr	r3, [r3, #16]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d012      	beq.n	8010180 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	3310      	adds	r3, #16
 801015e:	4618      	mov	r0, r3
 8010160:	f000 fe48 	bl	8010df4 <xTaskRemoveFromEventList>
 8010164:	4603      	mov	r3, r0
 8010166:	2b00      	cmp	r3, #0
 8010168:	d001      	beq.n	801016e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801016a:	f000 ff21 	bl	8010fb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801016e:	7bbb      	ldrb	r3, [r7, #14]
 8010170:	3b01      	subs	r3, #1
 8010172:	b2db      	uxtb	r3, r3
 8010174:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010176:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801017a:	2b00      	cmp	r3, #0
 801017c:	dce9      	bgt.n	8010152 <prvUnlockQueue+0x60>
 801017e:	e000      	b.n	8010182 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010180:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	22ff      	movs	r2, #255	@ 0xff
 8010186:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 801018a:	f001 fb97 	bl	80118bc <vPortExitCritical>
}
 801018e:	bf00      	nop
 8010190:	3710      	adds	r7, #16
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}

08010196 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010196:	b580      	push	{r7, lr}
 8010198:	b084      	sub	sp, #16
 801019a:	af00      	add	r7, sp, #0
 801019c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801019e:	f001 fb5d 	bl	801185c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d102      	bne.n	80101b0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80101aa:	2301      	movs	r3, #1
 80101ac:	60fb      	str	r3, [r7, #12]
 80101ae:	e001      	b.n	80101b4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80101b0:	2300      	movs	r3, #0
 80101b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80101b4:	f001 fb82 	bl	80118bc <vPortExitCritical>

	return xReturn;
 80101b8:	68fb      	ldr	r3, [r7, #12]
}
 80101ba:	4618      	mov	r0, r3
 80101bc:	3710      	adds	r7, #16
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}

080101c2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80101c2:	b580      	push	{r7, lr}
 80101c4:	b084      	sub	sp, #16
 80101c6:	af00      	add	r7, sp, #0
 80101c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80101ca:	f001 fb47 	bl	801185c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101d6:	429a      	cmp	r2, r3
 80101d8:	d102      	bne.n	80101e0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80101da:	2301      	movs	r3, #1
 80101dc:	60fb      	str	r3, [r7, #12]
 80101de:	e001      	b.n	80101e4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80101e0:	2300      	movs	r3, #0
 80101e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80101e4:	f001 fb6a 	bl	80118bc <vPortExitCritical>

	return xReturn;
 80101e8:	68fb      	ldr	r3, [r7, #12]
}
 80101ea:	4618      	mov	r0, r3
 80101ec:	3710      	adds	r7, #16
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}
	...

080101f4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80101f4:	b480      	push	{r7}
 80101f6:	b085      	sub	sp, #20
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80101fc:	2300      	movs	r3, #0
 80101fe:	60fb      	str	r3, [r7, #12]
 8010200:	e016      	b.n	8010230 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010202:	4a10      	ldr	r2, [pc, #64]	@ (8010244 <vQueueUnregisterQueue+0x50>)
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	00db      	lsls	r3, r3, #3
 8010208:	4413      	add	r3, r2
 801020a:	685b      	ldr	r3, [r3, #4]
 801020c:	687a      	ldr	r2, [r7, #4]
 801020e:	429a      	cmp	r2, r3
 8010210:	d10b      	bne.n	801022a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010212:	4a0c      	ldr	r2, [pc, #48]	@ (8010244 <vQueueUnregisterQueue+0x50>)
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	2100      	movs	r1, #0
 8010218:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801021c:	4a09      	ldr	r2, [pc, #36]	@ (8010244 <vQueueUnregisterQueue+0x50>)
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	00db      	lsls	r3, r3, #3
 8010222:	4413      	add	r3, r2
 8010224:	2200      	movs	r2, #0
 8010226:	605a      	str	r2, [r3, #4]
				break;
 8010228:	e006      	b.n	8010238 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	3301      	adds	r3, #1
 801022e:	60fb      	str	r3, [r7, #12]
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	2b07      	cmp	r3, #7
 8010234:	d9e5      	bls.n	8010202 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010236:	bf00      	nop
 8010238:	bf00      	nop
 801023a:	3714      	adds	r7, #20
 801023c:	46bd      	mov	sp, r7
 801023e:	bc80      	pop	{r7}
 8010240:	4770      	bx	lr
 8010242:	bf00      	nop
 8010244:	20002a98 	.word	0x20002a98

08010248 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010248:	b580      	push	{r7, lr}
 801024a:	b08e      	sub	sp, #56	@ 0x38
 801024c:	af04      	add	r7, sp, #16
 801024e:	60f8      	str	r0, [r7, #12]
 8010250:	60b9      	str	r1, [r7, #8]
 8010252:	607a      	str	r2, [r7, #4]
 8010254:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010258:	2b00      	cmp	r3, #0
 801025a:	d10b      	bne.n	8010274 <xTaskCreateStatic+0x2c>
	__asm volatile
 801025c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010260:	f383 8811 	msr	BASEPRI, r3
 8010264:	f3bf 8f6f 	isb	sy
 8010268:	f3bf 8f4f 	dsb	sy
 801026c:	623b      	str	r3, [r7, #32]
}
 801026e:	bf00      	nop
 8010270:	bf00      	nop
 8010272:	e7fd      	b.n	8010270 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010276:	2b00      	cmp	r3, #0
 8010278:	d10b      	bne.n	8010292 <xTaskCreateStatic+0x4a>
	__asm volatile
 801027a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801027e:	f383 8811 	msr	BASEPRI, r3
 8010282:	f3bf 8f6f 	isb	sy
 8010286:	f3bf 8f4f 	dsb	sy
 801028a:	61fb      	str	r3, [r7, #28]
}
 801028c:	bf00      	nop
 801028e:	bf00      	nop
 8010290:	e7fd      	b.n	801028e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010292:	2354      	movs	r3, #84	@ 0x54
 8010294:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010296:	693b      	ldr	r3, [r7, #16]
 8010298:	2b54      	cmp	r3, #84	@ 0x54
 801029a:	d00b      	beq.n	80102b4 <xTaskCreateStatic+0x6c>
	__asm volatile
 801029c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102a0:	f383 8811 	msr	BASEPRI, r3
 80102a4:	f3bf 8f6f 	isb	sy
 80102a8:	f3bf 8f4f 	dsb	sy
 80102ac:	61bb      	str	r3, [r7, #24]
}
 80102ae:	bf00      	nop
 80102b0:	bf00      	nop
 80102b2:	e7fd      	b.n	80102b0 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80102b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d01e      	beq.n	80102f8 <xTaskCreateStatic+0xb0>
 80102ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d01b      	beq.n	80102f8 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80102c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102c2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80102c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80102c8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80102ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102cc:	2202      	movs	r2, #2
 80102ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80102d2:	2300      	movs	r3, #0
 80102d4:	9303      	str	r3, [sp, #12]
 80102d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102d8:	9302      	str	r3, [sp, #8]
 80102da:	f107 0314 	add.w	r3, r7, #20
 80102de:	9301      	str	r3, [sp, #4]
 80102e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102e2:	9300      	str	r3, [sp, #0]
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	687a      	ldr	r2, [r7, #4]
 80102e8:	68b9      	ldr	r1, [r7, #8]
 80102ea:	68f8      	ldr	r0, [r7, #12]
 80102ec:	f000 f850 	bl	8010390 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80102f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80102f2:	f000 f8d5 	bl	80104a0 <prvAddNewTaskToReadyList>
 80102f6:	e001      	b.n	80102fc <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80102f8:	2300      	movs	r3, #0
 80102fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80102fc:	697b      	ldr	r3, [r7, #20]
	}
 80102fe:	4618      	mov	r0, r3
 8010300:	3728      	adds	r7, #40	@ 0x28
 8010302:	46bd      	mov	sp, r7
 8010304:	bd80      	pop	{r7, pc}

08010306 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010306:	b580      	push	{r7, lr}
 8010308:	b08c      	sub	sp, #48	@ 0x30
 801030a:	af04      	add	r7, sp, #16
 801030c:	60f8      	str	r0, [r7, #12]
 801030e:	60b9      	str	r1, [r7, #8]
 8010310:	603b      	str	r3, [r7, #0]
 8010312:	4613      	mov	r3, r2
 8010314:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010316:	88fb      	ldrh	r3, [r7, #6]
 8010318:	009b      	lsls	r3, r3, #2
 801031a:	4618      	mov	r0, r3
 801031c:	f001 fba0 	bl	8011a60 <pvPortMalloc>
 8010320:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010322:	697b      	ldr	r3, [r7, #20]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d00e      	beq.n	8010346 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8010328:	2054      	movs	r0, #84	@ 0x54
 801032a:	f001 fb99 	bl	8011a60 <pvPortMalloc>
 801032e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010330:	69fb      	ldr	r3, [r7, #28]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d003      	beq.n	801033e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010336:	69fb      	ldr	r3, [r7, #28]
 8010338:	697a      	ldr	r2, [r7, #20]
 801033a:	631a      	str	r2, [r3, #48]	@ 0x30
 801033c:	e005      	b.n	801034a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801033e:	6978      	ldr	r0, [r7, #20]
 8010340:	f001 fc56 	bl	8011bf0 <vPortFree>
 8010344:	e001      	b.n	801034a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010346:	2300      	movs	r3, #0
 8010348:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801034a:	69fb      	ldr	r3, [r7, #28]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d017      	beq.n	8010380 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010350:	69fb      	ldr	r3, [r7, #28]
 8010352:	2200      	movs	r2, #0
 8010354:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010358:	88fa      	ldrh	r2, [r7, #6]
 801035a:	2300      	movs	r3, #0
 801035c:	9303      	str	r3, [sp, #12]
 801035e:	69fb      	ldr	r3, [r7, #28]
 8010360:	9302      	str	r3, [sp, #8]
 8010362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010364:	9301      	str	r3, [sp, #4]
 8010366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010368:	9300      	str	r3, [sp, #0]
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	68b9      	ldr	r1, [r7, #8]
 801036e:	68f8      	ldr	r0, [r7, #12]
 8010370:	f000 f80e 	bl	8010390 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010374:	69f8      	ldr	r0, [r7, #28]
 8010376:	f000 f893 	bl	80104a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801037a:	2301      	movs	r3, #1
 801037c:	61bb      	str	r3, [r7, #24]
 801037e:	e002      	b.n	8010386 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010380:	f04f 33ff 	mov.w	r3, #4294967295
 8010384:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010386:	69bb      	ldr	r3, [r7, #24]
	}
 8010388:	4618      	mov	r0, r3
 801038a:	3720      	adds	r7, #32
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}

08010390 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b088      	sub	sp, #32
 8010394:	af00      	add	r7, sp, #0
 8010396:	60f8      	str	r0, [r7, #12]
 8010398:	60b9      	str	r1, [r7, #8]
 801039a:	607a      	str	r2, [r7, #4]
 801039c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801039e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103a0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	009b      	lsls	r3, r3, #2
 80103a6:	461a      	mov	r2, r3
 80103a8:	21a5      	movs	r1, #165	@ 0xa5
 80103aa:	f001 fe01 	bl	8011fb0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80103ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80103b8:	3b01      	subs	r3, #1
 80103ba:	009b      	lsls	r3, r3, #2
 80103bc:	4413      	add	r3, r2
 80103be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80103c0:	69bb      	ldr	r3, [r7, #24]
 80103c2:	f023 0307 	bic.w	r3, r3, #7
 80103c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80103c8:	69bb      	ldr	r3, [r7, #24]
 80103ca:	f003 0307 	and.w	r3, r3, #7
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d00b      	beq.n	80103ea <prvInitialiseNewTask+0x5a>
	__asm volatile
 80103d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103d6:	f383 8811 	msr	BASEPRI, r3
 80103da:	f3bf 8f6f 	isb	sy
 80103de:	f3bf 8f4f 	dsb	sy
 80103e2:	617b      	str	r3, [r7, #20]
}
 80103e4:	bf00      	nop
 80103e6:	bf00      	nop
 80103e8:	e7fd      	b.n	80103e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80103ea:	2300      	movs	r3, #0
 80103ec:	61fb      	str	r3, [r7, #28]
 80103ee:	e012      	b.n	8010416 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80103f0:	68ba      	ldr	r2, [r7, #8]
 80103f2:	69fb      	ldr	r3, [r7, #28]
 80103f4:	4413      	add	r3, r2
 80103f6:	7819      	ldrb	r1, [r3, #0]
 80103f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80103fa:	69fb      	ldr	r3, [r7, #28]
 80103fc:	4413      	add	r3, r2
 80103fe:	3334      	adds	r3, #52	@ 0x34
 8010400:	460a      	mov	r2, r1
 8010402:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8010404:	68ba      	ldr	r2, [r7, #8]
 8010406:	69fb      	ldr	r3, [r7, #28]
 8010408:	4413      	add	r3, r2
 801040a:	781b      	ldrb	r3, [r3, #0]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d006      	beq.n	801041e <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010410:	69fb      	ldr	r3, [r7, #28]
 8010412:	3301      	adds	r3, #1
 8010414:	61fb      	str	r3, [r7, #28]
 8010416:	69fb      	ldr	r3, [r7, #28]
 8010418:	2b0f      	cmp	r3, #15
 801041a:	d9e9      	bls.n	80103f0 <prvInitialiseNewTask+0x60>
 801041c:	e000      	b.n	8010420 <prvInitialiseNewTask+0x90>
		{
			break;
 801041e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010422:	2200      	movs	r2, #0
 8010424:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801042a:	2b06      	cmp	r3, #6
 801042c:	d901      	bls.n	8010432 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801042e:	2306      	movs	r3, #6
 8010430:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010434:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010436:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801043a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801043c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801043e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010440:	2200      	movs	r2, #0
 8010442:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010446:	3304      	adds	r3, #4
 8010448:	4618      	mov	r0, r3
 801044a:	f7ff f88f 	bl	800f56c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801044e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010450:	3318      	adds	r3, #24
 8010452:	4618      	mov	r0, r3
 8010454:	f7ff f88a 	bl	800f56c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801045a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801045c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801045e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010460:	f1c3 0207 	rsb	r2, r3, #7
 8010464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010466:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801046a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801046c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801046e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010470:	2200      	movs	r2, #0
 8010472:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010476:	2200      	movs	r2, #0
 8010478:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801047c:	683a      	ldr	r2, [r7, #0]
 801047e:	68f9      	ldr	r1, [r7, #12]
 8010480:	69b8      	ldr	r0, [r7, #24]
 8010482:	f001 f8fb 	bl	801167c <pxPortInitialiseStack>
 8010486:	4602      	mov	r2, r0
 8010488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801048a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 801048c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801048e:	2b00      	cmp	r3, #0
 8010490:	d002      	beq.n	8010498 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010494:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010496:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010498:	bf00      	nop
 801049a:	3720      	adds	r7, #32
 801049c:	46bd      	mov	sp, r7
 801049e:	bd80      	pop	{r7, pc}

080104a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b082      	sub	sp, #8
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80104a8:	f001 f9d8 	bl	801185c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80104ac:	4b2a      	ldr	r3, [pc, #168]	@ (8010558 <prvAddNewTaskToReadyList+0xb8>)
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	3301      	adds	r3, #1
 80104b2:	4a29      	ldr	r2, [pc, #164]	@ (8010558 <prvAddNewTaskToReadyList+0xb8>)
 80104b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80104b6:	4b29      	ldr	r3, [pc, #164]	@ (801055c <prvAddNewTaskToReadyList+0xbc>)
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d109      	bne.n	80104d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80104be:	4a27      	ldr	r2, [pc, #156]	@ (801055c <prvAddNewTaskToReadyList+0xbc>)
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80104c4:	4b24      	ldr	r3, [pc, #144]	@ (8010558 <prvAddNewTaskToReadyList+0xb8>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	2b01      	cmp	r3, #1
 80104ca:	d110      	bne.n	80104ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80104cc:	f000 fd94 	bl	8010ff8 <prvInitialiseTaskLists>
 80104d0:	e00d      	b.n	80104ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80104d2:	4b23      	ldr	r3, [pc, #140]	@ (8010560 <prvAddNewTaskToReadyList+0xc0>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d109      	bne.n	80104ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80104da:	4b20      	ldr	r3, [pc, #128]	@ (801055c <prvAddNewTaskToReadyList+0xbc>)
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d802      	bhi.n	80104ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80104e8:	4a1c      	ldr	r2, [pc, #112]	@ (801055c <prvAddNewTaskToReadyList+0xbc>)
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80104ee:	4b1d      	ldr	r3, [pc, #116]	@ (8010564 <prvAddNewTaskToReadyList+0xc4>)
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	3301      	adds	r3, #1
 80104f4:	4a1b      	ldr	r2, [pc, #108]	@ (8010564 <prvAddNewTaskToReadyList+0xc4>)
 80104f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104fc:	2201      	movs	r2, #1
 80104fe:	409a      	lsls	r2, r3
 8010500:	4b19      	ldr	r3, [pc, #100]	@ (8010568 <prvAddNewTaskToReadyList+0xc8>)
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	4313      	orrs	r3, r2
 8010506:	4a18      	ldr	r2, [pc, #96]	@ (8010568 <prvAddNewTaskToReadyList+0xc8>)
 8010508:	6013      	str	r3, [r2, #0]
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801050e:	4613      	mov	r3, r2
 8010510:	009b      	lsls	r3, r3, #2
 8010512:	4413      	add	r3, r2
 8010514:	009b      	lsls	r3, r3, #2
 8010516:	4a15      	ldr	r2, [pc, #84]	@ (801056c <prvAddNewTaskToReadyList+0xcc>)
 8010518:	441a      	add	r2, r3
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	3304      	adds	r3, #4
 801051e:	4619      	mov	r1, r3
 8010520:	4610      	mov	r0, r2
 8010522:	f7ff f82f 	bl	800f584 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010526:	f001 f9c9 	bl	80118bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801052a:	4b0d      	ldr	r3, [pc, #52]	@ (8010560 <prvAddNewTaskToReadyList+0xc0>)
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d00e      	beq.n	8010550 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010532:	4b0a      	ldr	r3, [pc, #40]	@ (801055c <prvAddNewTaskToReadyList+0xbc>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801053c:	429a      	cmp	r2, r3
 801053e:	d207      	bcs.n	8010550 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010540:	4b0b      	ldr	r3, [pc, #44]	@ (8010570 <prvAddNewTaskToReadyList+0xd0>)
 8010542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010546:	601a      	str	r2, [r3, #0]
 8010548:	f3bf 8f4f 	dsb	sy
 801054c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010550:	bf00      	nop
 8010552:	3708      	adds	r7, #8
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}
 8010558:	20002bd8 	.word	0x20002bd8
 801055c:	20002ad8 	.word	0x20002ad8
 8010560:	20002be4 	.word	0x20002be4
 8010564:	20002bf4 	.word	0x20002bf4
 8010568:	20002be0 	.word	0x20002be0
 801056c:	20002adc 	.word	0x20002adc
 8010570:	e000ed04 	.word	0xe000ed04

08010574 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8010574:	b580      	push	{r7, lr}
 8010576:	b08a      	sub	sp, #40	@ 0x28
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
 801057c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801057e:	2300      	movs	r3, #0
 8010580:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d10b      	bne.n	80105a0 <vTaskDelayUntil+0x2c>
	__asm volatile
 8010588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801058c:	f383 8811 	msr	BASEPRI, r3
 8010590:	f3bf 8f6f 	isb	sy
 8010594:	f3bf 8f4f 	dsb	sy
 8010598:	617b      	str	r3, [r7, #20]
}
 801059a:	bf00      	nop
 801059c:	bf00      	nop
 801059e:	e7fd      	b.n	801059c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d10b      	bne.n	80105be <vTaskDelayUntil+0x4a>
	__asm volatile
 80105a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105aa:	f383 8811 	msr	BASEPRI, r3
 80105ae:	f3bf 8f6f 	isb	sy
 80105b2:	f3bf 8f4f 	dsb	sy
 80105b6:	613b      	str	r3, [r7, #16]
}
 80105b8:	bf00      	nop
 80105ba:	bf00      	nop
 80105bc:	e7fd      	b.n	80105ba <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 80105be:	4b2a      	ldr	r3, [pc, #168]	@ (8010668 <vTaskDelayUntil+0xf4>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d00b      	beq.n	80105de <vTaskDelayUntil+0x6a>
	__asm volatile
 80105c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105ca:	f383 8811 	msr	BASEPRI, r3
 80105ce:	f3bf 8f6f 	isb	sy
 80105d2:	f3bf 8f4f 	dsb	sy
 80105d6:	60fb      	str	r3, [r7, #12]
}
 80105d8:	bf00      	nop
 80105da:	bf00      	nop
 80105dc:	e7fd      	b.n	80105da <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 80105de:	f000 fa0f 	bl	8010a00 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80105e2:	4b22      	ldr	r3, [pc, #136]	@ (801066c <vTaskDelayUntil+0xf8>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	683a      	ldr	r2, [r7, #0]
 80105ee:	4413      	add	r3, r2
 80105f0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	6a3a      	ldr	r2, [r7, #32]
 80105f8:	429a      	cmp	r2, r3
 80105fa:	d20b      	bcs.n	8010614 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	69fa      	ldr	r2, [r7, #28]
 8010602:	429a      	cmp	r2, r3
 8010604:	d211      	bcs.n	801062a <vTaskDelayUntil+0xb6>
 8010606:	69fa      	ldr	r2, [r7, #28]
 8010608:	6a3b      	ldr	r3, [r7, #32]
 801060a:	429a      	cmp	r2, r3
 801060c:	d90d      	bls.n	801062a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 801060e:	2301      	movs	r3, #1
 8010610:	627b      	str	r3, [r7, #36]	@ 0x24
 8010612:	e00a      	b.n	801062a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	69fa      	ldr	r2, [r7, #28]
 801061a:	429a      	cmp	r2, r3
 801061c:	d303      	bcc.n	8010626 <vTaskDelayUntil+0xb2>
 801061e:	69fa      	ldr	r2, [r7, #28]
 8010620:	6a3b      	ldr	r3, [r7, #32]
 8010622:	429a      	cmp	r2, r3
 8010624:	d901      	bls.n	801062a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8010626:	2301      	movs	r3, #1
 8010628:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	69fa      	ldr	r2, [r7, #28]
 801062e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8010630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010632:	2b00      	cmp	r3, #0
 8010634:	d006      	beq.n	8010644 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8010636:	69fa      	ldr	r2, [r7, #28]
 8010638:	6a3b      	ldr	r3, [r7, #32]
 801063a:	1ad3      	subs	r3, r2, r3
 801063c:	2100      	movs	r1, #0
 801063e:	4618      	mov	r0, r3
 8010640:	f000 ffb6 	bl	80115b0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8010644:	f000 f9ea 	bl	8010a1c <xTaskResumeAll>
 8010648:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801064a:	69bb      	ldr	r3, [r7, #24]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d107      	bne.n	8010660 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8010650:	4b07      	ldr	r3, [pc, #28]	@ (8010670 <vTaskDelayUntil+0xfc>)
 8010652:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010656:	601a      	str	r2, [r3, #0]
 8010658:	f3bf 8f4f 	dsb	sy
 801065c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010660:	bf00      	nop
 8010662:	3728      	adds	r7, #40	@ 0x28
 8010664:	46bd      	mov	sp, r7
 8010666:	bd80      	pop	{r7, pc}
 8010668:	20002c00 	.word	0x20002c00
 801066c:	20002bdc 	.word	0x20002bdc
 8010670:	e000ed04 	.word	0xe000ed04

08010674 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010674:	b580      	push	{r7, lr}
 8010676:	b084      	sub	sp, #16
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801067c:	2300      	movs	r3, #0
 801067e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d018      	beq.n	80106b8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010686:	4b14      	ldr	r3, [pc, #80]	@ (80106d8 <vTaskDelay+0x64>)
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d00b      	beq.n	80106a6 <vTaskDelay+0x32>
	__asm volatile
 801068e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010692:	f383 8811 	msr	BASEPRI, r3
 8010696:	f3bf 8f6f 	isb	sy
 801069a:	f3bf 8f4f 	dsb	sy
 801069e:	60bb      	str	r3, [r7, #8]
}
 80106a0:	bf00      	nop
 80106a2:	bf00      	nop
 80106a4:	e7fd      	b.n	80106a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80106a6:	f000 f9ab 	bl	8010a00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80106aa:	2100      	movs	r1, #0
 80106ac:	6878      	ldr	r0, [r7, #4]
 80106ae:	f000 ff7f 	bl	80115b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80106b2:	f000 f9b3 	bl	8010a1c <xTaskResumeAll>
 80106b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d107      	bne.n	80106ce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80106be:	4b07      	ldr	r3, [pc, #28]	@ (80106dc <vTaskDelay+0x68>)
 80106c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80106c4:	601a      	str	r2, [r3, #0]
 80106c6:	f3bf 8f4f 	dsb	sy
 80106ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80106ce:	bf00      	nop
 80106d0:	3710      	adds	r7, #16
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}
 80106d6:	bf00      	nop
 80106d8:	20002c00 	.word	0x20002c00
 80106dc:	e000ed04 	.word	0xe000ed04

080106e0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b084      	sub	sp, #16
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80106e8:	f001 f8b8 	bl	801185c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d102      	bne.n	80106f8 <vTaskSuspend+0x18>
 80106f2:	4b3d      	ldr	r3, [pc, #244]	@ (80107e8 <vTaskSuspend+0x108>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	e000      	b.n	80106fa <vTaskSuspend+0x1a>
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	3304      	adds	r3, #4
 8010700:	4618      	mov	r0, r3
 8010702:	f7fe ff9a 	bl	800f63a <uxListRemove>
 8010706:	4603      	mov	r3, r0
 8010708:	2b00      	cmp	r3, #0
 801070a:	d115      	bne.n	8010738 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010710:	4936      	ldr	r1, [pc, #216]	@ (80107ec <vTaskSuspend+0x10c>)
 8010712:	4613      	mov	r3, r2
 8010714:	009b      	lsls	r3, r3, #2
 8010716:	4413      	add	r3, r2
 8010718:	009b      	lsls	r3, r3, #2
 801071a:	440b      	add	r3, r1
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d10a      	bne.n	8010738 <vTaskSuspend+0x58>
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010726:	2201      	movs	r2, #1
 8010728:	fa02 f303 	lsl.w	r3, r2, r3
 801072c:	43da      	mvns	r2, r3
 801072e:	4b30      	ldr	r3, [pc, #192]	@ (80107f0 <vTaskSuspend+0x110>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	4013      	ands	r3, r2
 8010734:	4a2e      	ldr	r2, [pc, #184]	@ (80107f0 <vTaskSuspend+0x110>)
 8010736:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801073c:	2b00      	cmp	r3, #0
 801073e:	d004      	beq.n	801074a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	3318      	adds	r3, #24
 8010744:	4618      	mov	r0, r3
 8010746:	f7fe ff78 	bl	800f63a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	3304      	adds	r3, #4
 801074e:	4619      	mov	r1, r3
 8010750:	4828      	ldr	r0, [pc, #160]	@ (80107f4 <vTaskSuspend+0x114>)
 8010752:	f7fe ff17 	bl	800f584 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801075c:	b2db      	uxtb	r3, r3
 801075e:	2b01      	cmp	r3, #1
 8010760:	d103      	bne.n	801076a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	2200      	movs	r2, #0
 8010766:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801076a:	f001 f8a7 	bl	80118bc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 801076e:	4b22      	ldr	r3, [pc, #136]	@ (80107f8 <vTaskSuspend+0x118>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d005      	beq.n	8010782 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8010776:	f001 f871 	bl	801185c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801077a:	f000 fd13 	bl	80111a4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801077e:	f001 f89d 	bl	80118bc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8010782:	4b19      	ldr	r3, [pc, #100]	@ (80107e8 <vTaskSuspend+0x108>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	68fa      	ldr	r2, [r7, #12]
 8010788:	429a      	cmp	r2, r3
 801078a:	d128      	bne.n	80107de <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 801078c:	4b1a      	ldr	r3, [pc, #104]	@ (80107f8 <vTaskSuspend+0x118>)
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d018      	beq.n	80107c6 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8010794:	4b19      	ldr	r3, [pc, #100]	@ (80107fc <vTaskSuspend+0x11c>)
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d00b      	beq.n	80107b4 <vTaskSuspend+0xd4>
	__asm volatile
 801079c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107a0:	f383 8811 	msr	BASEPRI, r3
 80107a4:	f3bf 8f6f 	isb	sy
 80107a8:	f3bf 8f4f 	dsb	sy
 80107ac:	60bb      	str	r3, [r7, #8]
}
 80107ae:	bf00      	nop
 80107b0:	bf00      	nop
 80107b2:	e7fd      	b.n	80107b0 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80107b4:	4b12      	ldr	r3, [pc, #72]	@ (8010800 <vTaskSuspend+0x120>)
 80107b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80107ba:	601a      	str	r2, [r3, #0]
 80107bc:	f3bf 8f4f 	dsb	sy
 80107c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80107c4:	e00b      	b.n	80107de <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80107c6:	4b0b      	ldr	r3, [pc, #44]	@ (80107f4 <vTaskSuspend+0x114>)
 80107c8:	681a      	ldr	r2, [r3, #0]
 80107ca:	4b0e      	ldr	r3, [pc, #56]	@ (8010804 <vTaskSuspend+0x124>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	429a      	cmp	r2, r3
 80107d0:	d103      	bne.n	80107da <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 80107d2:	4b05      	ldr	r3, [pc, #20]	@ (80107e8 <vTaskSuspend+0x108>)
 80107d4:	2200      	movs	r2, #0
 80107d6:	601a      	str	r2, [r3, #0]
	}
 80107d8:	e001      	b.n	80107de <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 80107da:	f000 fa89 	bl	8010cf0 <vTaskSwitchContext>
	}
 80107de:	bf00      	nop
 80107e0:	3710      	adds	r7, #16
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}
 80107e6:	bf00      	nop
 80107e8:	20002ad8 	.word	0x20002ad8
 80107ec:	20002adc 	.word	0x20002adc
 80107f0:	20002be0 	.word	0x20002be0
 80107f4:	20002bc4 	.word	0x20002bc4
 80107f8:	20002be4 	.word	0x20002be4
 80107fc:	20002c00 	.word	0x20002c00
 8010800:	e000ed04 	.word	0xe000ed04
 8010804:	20002bd8 	.word	0x20002bd8

08010808 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8010808:	b480      	push	{r7}
 801080a:	b087      	sub	sp, #28
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8010810:	2300      	movs	r3, #0
 8010812:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d10b      	bne.n	8010836 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 801081e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010822:	f383 8811 	msr	BASEPRI, r3
 8010826:	f3bf 8f6f 	isb	sy
 801082a:	f3bf 8f4f 	dsb	sy
 801082e:	60fb      	str	r3, [r7, #12]
}
 8010830:	bf00      	nop
 8010832:	bf00      	nop
 8010834:	e7fd      	b.n	8010832 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010836:	693b      	ldr	r3, [r7, #16]
 8010838:	695b      	ldr	r3, [r3, #20]
 801083a:	4a0f      	ldr	r2, [pc, #60]	@ (8010878 <prvTaskIsTaskSuspended+0x70>)
 801083c:	4293      	cmp	r3, r2
 801083e:	d101      	bne.n	8010844 <prvTaskIsTaskSuspended+0x3c>
 8010840:	2301      	movs	r3, #1
 8010842:	e000      	b.n	8010846 <prvTaskIsTaskSuspended+0x3e>
 8010844:	2300      	movs	r3, #0
 8010846:	2b00      	cmp	r3, #0
 8010848:	d00f      	beq.n	801086a <prvTaskIsTaskSuspended+0x62>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801084a:	693b      	ldr	r3, [r7, #16]
 801084c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801084e:	4a0b      	ldr	r2, [pc, #44]	@ (801087c <prvTaskIsTaskSuspended+0x74>)
 8010850:	4293      	cmp	r3, r2
 8010852:	d00a      	beq.n	801086a <prvTaskIsTaskSuspended+0x62>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8010854:	693b      	ldr	r3, [r7, #16]
 8010856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010858:	2b00      	cmp	r3, #0
 801085a:	d101      	bne.n	8010860 <prvTaskIsTaskSuspended+0x58>
 801085c:	2301      	movs	r3, #1
 801085e:	e000      	b.n	8010862 <prvTaskIsTaskSuspended+0x5a>
 8010860:	2300      	movs	r3, #0
 8010862:	2b00      	cmp	r3, #0
 8010864:	d001      	beq.n	801086a <prvTaskIsTaskSuspended+0x62>
				{
					xReturn = pdTRUE;
 8010866:	2301      	movs	r3, #1
 8010868:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801086a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801086c:	4618      	mov	r0, r3
 801086e:	371c      	adds	r7, #28
 8010870:	46bd      	mov	sp, r7
 8010872:	bc80      	pop	{r7}
 8010874:	4770      	bx	lr
 8010876:	bf00      	nop
 8010878:	20002bc4 	.word	0x20002bc4
 801087c:	20002b98 	.word	0x20002b98

08010880 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8010880:	b580      	push	{r7, lr}
 8010882:	b084      	sub	sp, #16
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d10b      	bne.n	80108aa <vTaskResume+0x2a>
	__asm volatile
 8010892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010896:	f383 8811 	msr	BASEPRI, r3
 801089a:	f3bf 8f6f 	isb	sy
 801089e:	f3bf 8f4f 	dsb	sy
 80108a2:	60bb      	str	r3, [r7, #8]
}
 80108a4:	bf00      	nop
 80108a6:	bf00      	nop
 80108a8:	e7fd      	b.n	80108a6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d039      	beq.n	8010924 <vTaskResume+0xa4>
 80108b0:	4b1e      	ldr	r3, [pc, #120]	@ (801092c <vTaskResume+0xac>)
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	68fa      	ldr	r2, [r7, #12]
 80108b6:	429a      	cmp	r2, r3
 80108b8:	d034      	beq.n	8010924 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80108ba:	f000 ffcf 	bl	801185c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80108be:	68f8      	ldr	r0, [r7, #12]
 80108c0:	f7ff ffa2 	bl	8010808 <prvTaskIsTaskSuspended>
 80108c4:	4603      	mov	r3, r0
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d02a      	beq.n	8010920 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	3304      	adds	r3, #4
 80108ce:	4618      	mov	r0, r3
 80108d0:	f7fe feb3 	bl	800f63a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108d8:	2201      	movs	r2, #1
 80108da:	409a      	lsls	r2, r3
 80108dc:	4b14      	ldr	r3, [pc, #80]	@ (8010930 <vTaskResume+0xb0>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	4313      	orrs	r3, r2
 80108e2:	4a13      	ldr	r2, [pc, #76]	@ (8010930 <vTaskResume+0xb0>)
 80108e4:	6013      	str	r3, [r2, #0]
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108ea:	4613      	mov	r3, r2
 80108ec:	009b      	lsls	r3, r3, #2
 80108ee:	4413      	add	r3, r2
 80108f0:	009b      	lsls	r3, r3, #2
 80108f2:	4a10      	ldr	r2, [pc, #64]	@ (8010934 <vTaskResume+0xb4>)
 80108f4:	441a      	add	r2, r3
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	3304      	adds	r3, #4
 80108fa:	4619      	mov	r1, r3
 80108fc:	4610      	mov	r0, r2
 80108fe:	f7fe fe41 	bl	800f584 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010906:	4b09      	ldr	r3, [pc, #36]	@ (801092c <vTaskResume+0xac>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801090c:	429a      	cmp	r2, r3
 801090e:	d307      	bcc.n	8010920 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8010910:	4b09      	ldr	r3, [pc, #36]	@ (8010938 <vTaskResume+0xb8>)
 8010912:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010916:	601a      	str	r2, [r3, #0]
 8010918:	f3bf 8f4f 	dsb	sy
 801091c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8010920:	f000 ffcc 	bl	80118bc <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010924:	bf00      	nop
 8010926:	3710      	adds	r7, #16
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}
 801092c:	20002ad8 	.word	0x20002ad8
 8010930:	20002be0 	.word	0x20002be0
 8010934:	20002adc 	.word	0x20002adc
 8010938:	e000ed04 	.word	0xe000ed04

0801093c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b08a      	sub	sp, #40	@ 0x28
 8010940:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010942:	2300      	movs	r3, #0
 8010944:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010946:	2300      	movs	r3, #0
 8010948:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801094a:	463a      	mov	r2, r7
 801094c:	1d39      	adds	r1, r7, #4
 801094e:	f107 0308 	add.w	r3, r7, #8
 8010952:	4618      	mov	r0, r3
 8010954:	f7f2 fdee 	bl	8003534 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010958:	6839      	ldr	r1, [r7, #0]
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	68ba      	ldr	r2, [r7, #8]
 801095e:	9202      	str	r2, [sp, #8]
 8010960:	9301      	str	r3, [sp, #4]
 8010962:	2300      	movs	r3, #0
 8010964:	9300      	str	r3, [sp, #0]
 8010966:	2300      	movs	r3, #0
 8010968:	460a      	mov	r2, r1
 801096a:	491f      	ldr	r1, [pc, #124]	@ (80109e8 <vTaskStartScheduler+0xac>)
 801096c:	481f      	ldr	r0, [pc, #124]	@ (80109ec <vTaskStartScheduler+0xb0>)
 801096e:	f7ff fc6b 	bl	8010248 <xTaskCreateStatic>
 8010972:	4603      	mov	r3, r0
 8010974:	4a1e      	ldr	r2, [pc, #120]	@ (80109f0 <vTaskStartScheduler+0xb4>)
 8010976:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010978:	4b1d      	ldr	r3, [pc, #116]	@ (80109f0 <vTaskStartScheduler+0xb4>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d002      	beq.n	8010986 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010980:	2301      	movs	r3, #1
 8010982:	617b      	str	r3, [r7, #20]
 8010984:	e001      	b.n	801098a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010986:	2300      	movs	r3, #0
 8010988:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801098a:	697b      	ldr	r3, [r7, #20]
 801098c:	2b01      	cmp	r3, #1
 801098e:	d116      	bne.n	80109be <vTaskStartScheduler+0x82>
	__asm volatile
 8010990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010994:	f383 8811 	msr	BASEPRI, r3
 8010998:	f3bf 8f6f 	isb	sy
 801099c:	f3bf 8f4f 	dsb	sy
 80109a0:	613b      	str	r3, [r7, #16]
}
 80109a2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80109a4:	4b13      	ldr	r3, [pc, #76]	@ (80109f4 <vTaskStartScheduler+0xb8>)
 80109a6:	f04f 32ff 	mov.w	r2, #4294967295
 80109aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80109ac:	4b12      	ldr	r3, [pc, #72]	@ (80109f8 <vTaskStartScheduler+0xbc>)
 80109ae:	2201      	movs	r2, #1
 80109b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80109b2:	4b12      	ldr	r3, [pc, #72]	@ (80109fc <vTaskStartScheduler+0xc0>)
 80109b4:	2200      	movs	r2, #0
 80109b6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80109b8:	f000 fede 	bl	8011778 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80109bc:	e00f      	b.n	80109de <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80109be:	697b      	ldr	r3, [r7, #20]
 80109c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109c4:	d10b      	bne.n	80109de <vTaskStartScheduler+0xa2>
	__asm volatile
 80109c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109ca:	f383 8811 	msr	BASEPRI, r3
 80109ce:	f3bf 8f6f 	isb	sy
 80109d2:	f3bf 8f4f 	dsb	sy
 80109d6:	60fb      	str	r3, [r7, #12]
}
 80109d8:	bf00      	nop
 80109da:	bf00      	nop
 80109dc:	e7fd      	b.n	80109da <vTaskStartScheduler+0x9e>
}
 80109de:	bf00      	nop
 80109e0:	3718      	adds	r7, #24
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}
 80109e6:	bf00      	nop
 80109e8:	08012474 	.word	0x08012474
 80109ec:	08010fc9 	.word	0x08010fc9
 80109f0:	20002bfc 	.word	0x20002bfc
 80109f4:	20002bf8 	.word	0x20002bf8
 80109f8:	20002be4 	.word	0x20002be4
 80109fc:	20002bdc 	.word	0x20002bdc

08010a00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010a00:	b480      	push	{r7}
 8010a02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010a04:	4b04      	ldr	r3, [pc, #16]	@ (8010a18 <vTaskSuspendAll+0x18>)
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	3301      	adds	r3, #1
 8010a0a:	4a03      	ldr	r2, [pc, #12]	@ (8010a18 <vTaskSuspendAll+0x18>)
 8010a0c:	6013      	str	r3, [r2, #0]
}
 8010a0e:	bf00      	nop
 8010a10:	46bd      	mov	sp, r7
 8010a12:	bc80      	pop	{r7}
 8010a14:	4770      	bx	lr
 8010a16:	bf00      	nop
 8010a18:	20002c00 	.word	0x20002c00

08010a1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b084      	sub	sp, #16
 8010a20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010a22:	2300      	movs	r3, #0
 8010a24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010a26:	2300      	movs	r3, #0
 8010a28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010a2a:	4b42      	ldr	r3, [pc, #264]	@ (8010b34 <xTaskResumeAll+0x118>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d10b      	bne.n	8010a4a <xTaskResumeAll+0x2e>
	__asm volatile
 8010a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a36:	f383 8811 	msr	BASEPRI, r3
 8010a3a:	f3bf 8f6f 	isb	sy
 8010a3e:	f3bf 8f4f 	dsb	sy
 8010a42:	603b      	str	r3, [r7, #0]
}
 8010a44:	bf00      	nop
 8010a46:	bf00      	nop
 8010a48:	e7fd      	b.n	8010a46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010a4a:	f000 ff07 	bl	801185c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010a4e:	4b39      	ldr	r3, [pc, #228]	@ (8010b34 <xTaskResumeAll+0x118>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	3b01      	subs	r3, #1
 8010a54:	4a37      	ldr	r2, [pc, #220]	@ (8010b34 <xTaskResumeAll+0x118>)
 8010a56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010a58:	4b36      	ldr	r3, [pc, #216]	@ (8010b34 <xTaskResumeAll+0x118>)
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d161      	bne.n	8010b24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010a60:	4b35      	ldr	r3, [pc, #212]	@ (8010b38 <xTaskResumeAll+0x11c>)
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d05d      	beq.n	8010b24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010a68:	e02e      	b.n	8010ac8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8010a6a:	4b34      	ldr	r3, [pc, #208]	@ (8010b3c <xTaskResumeAll+0x120>)
 8010a6c:	68db      	ldr	r3, [r3, #12]
 8010a6e:	68db      	ldr	r3, [r3, #12]
 8010a70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	3318      	adds	r3, #24
 8010a76:	4618      	mov	r0, r3
 8010a78:	f7fe fddf 	bl	800f63a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	3304      	adds	r3, #4
 8010a80:	4618      	mov	r0, r3
 8010a82:	f7fe fdda 	bl	800f63a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a8a:	2201      	movs	r2, #1
 8010a8c:	409a      	lsls	r2, r3
 8010a8e:	4b2c      	ldr	r3, [pc, #176]	@ (8010b40 <xTaskResumeAll+0x124>)
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	4313      	orrs	r3, r2
 8010a94:	4a2a      	ldr	r2, [pc, #168]	@ (8010b40 <xTaskResumeAll+0x124>)
 8010a96:	6013      	str	r3, [r2, #0]
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a9c:	4613      	mov	r3, r2
 8010a9e:	009b      	lsls	r3, r3, #2
 8010aa0:	4413      	add	r3, r2
 8010aa2:	009b      	lsls	r3, r3, #2
 8010aa4:	4a27      	ldr	r2, [pc, #156]	@ (8010b44 <xTaskResumeAll+0x128>)
 8010aa6:	441a      	add	r2, r3
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	3304      	adds	r3, #4
 8010aac:	4619      	mov	r1, r3
 8010aae:	4610      	mov	r0, r2
 8010ab0:	f7fe fd68 	bl	800f584 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ab8:	4b23      	ldr	r3, [pc, #140]	@ (8010b48 <xTaskResumeAll+0x12c>)
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010abe:	429a      	cmp	r2, r3
 8010ac0:	d302      	bcc.n	8010ac8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010ac2:	4b22      	ldr	r3, [pc, #136]	@ (8010b4c <xTaskResumeAll+0x130>)
 8010ac4:	2201      	movs	r2, #1
 8010ac6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8010b3c <xTaskResumeAll+0x120>)
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d1cc      	bne.n	8010a6a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d001      	beq.n	8010ada <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010ad6:	f000 fb65 	bl	80111a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010ada:	4b1d      	ldr	r3, [pc, #116]	@ (8010b50 <xTaskResumeAll+0x134>)
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d010      	beq.n	8010b08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010ae6:	f000 f845 	bl	8010b74 <xTaskIncrementTick>
 8010aea:	4603      	mov	r3, r0
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d002      	beq.n	8010af6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010af0:	4b16      	ldr	r3, [pc, #88]	@ (8010b4c <xTaskResumeAll+0x130>)
 8010af2:	2201      	movs	r2, #1
 8010af4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	3b01      	subs	r3, #1
 8010afa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d1f1      	bne.n	8010ae6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8010b02:	4b13      	ldr	r3, [pc, #76]	@ (8010b50 <xTaskResumeAll+0x134>)
 8010b04:	2200      	movs	r2, #0
 8010b06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010b08:	4b10      	ldr	r3, [pc, #64]	@ (8010b4c <xTaskResumeAll+0x130>)
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d009      	beq.n	8010b24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010b10:	2301      	movs	r3, #1
 8010b12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010b14:	4b0f      	ldr	r3, [pc, #60]	@ (8010b54 <xTaskResumeAll+0x138>)
 8010b16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010b1a:	601a      	str	r2, [r3, #0]
 8010b1c:	f3bf 8f4f 	dsb	sy
 8010b20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010b24:	f000 feca 	bl	80118bc <vPortExitCritical>

	return xAlreadyYielded;
 8010b28:	68bb      	ldr	r3, [r7, #8]
}
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	3710      	adds	r7, #16
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}
 8010b32:	bf00      	nop
 8010b34:	20002c00 	.word	0x20002c00
 8010b38:	20002bd8 	.word	0x20002bd8
 8010b3c:	20002b98 	.word	0x20002b98
 8010b40:	20002be0 	.word	0x20002be0
 8010b44:	20002adc 	.word	0x20002adc
 8010b48:	20002ad8 	.word	0x20002ad8
 8010b4c:	20002bec 	.word	0x20002bec
 8010b50:	20002be8 	.word	0x20002be8
 8010b54:	e000ed04 	.word	0xe000ed04

08010b58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010b58:	b480      	push	{r7}
 8010b5a:	b083      	sub	sp, #12
 8010b5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010b5e:	4b04      	ldr	r3, [pc, #16]	@ (8010b70 <xTaskGetTickCount+0x18>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010b64:	687b      	ldr	r3, [r7, #4]
}
 8010b66:	4618      	mov	r0, r3
 8010b68:	370c      	adds	r7, #12
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bc80      	pop	{r7}
 8010b6e:	4770      	bx	lr
 8010b70:	20002bdc 	.word	0x20002bdc

08010b74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b086      	sub	sp, #24
 8010b78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010b7e:	4b51      	ldr	r3, [pc, #324]	@ (8010cc4 <xTaskIncrementTick+0x150>)
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	f040 808e 	bne.w	8010ca4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010b88:	4b4f      	ldr	r3, [pc, #316]	@ (8010cc8 <xTaskIncrementTick+0x154>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	3301      	adds	r3, #1
 8010b8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010b90:	4a4d      	ldr	r2, [pc, #308]	@ (8010cc8 <xTaskIncrementTick+0x154>)
 8010b92:	693b      	ldr	r3, [r7, #16]
 8010b94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010b96:	693b      	ldr	r3, [r7, #16]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d121      	bne.n	8010be0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010b9c:	4b4b      	ldr	r3, [pc, #300]	@ (8010ccc <xTaskIncrementTick+0x158>)
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d00b      	beq.n	8010bbe <xTaskIncrementTick+0x4a>
	__asm volatile
 8010ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010baa:	f383 8811 	msr	BASEPRI, r3
 8010bae:	f3bf 8f6f 	isb	sy
 8010bb2:	f3bf 8f4f 	dsb	sy
 8010bb6:	603b      	str	r3, [r7, #0]
}
 8010bb8:	bf00      	nop
 8010bba:	bf00      	nop
 8010bbc:	e7fd      	b.n	8010bba <xTaskIncrementTick+0x46>
 8010bbe:	4b43      	ldr	r3, [pc, #268]	@ (8010ccc <xTaskIncrementTick+0x158>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	60fb      	str	r3, [r7, #12]
 8010bc4:	4b42      	ldr	r3, [pc, #264]	@ (8010cd0 <xTaskIncrementTick+0x15c>)
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	4a40      	ldr	r2, [pc, #256]	@ (8010ccc <xTaskIncrementTick+0x158>)
 8010bca:	6013      	str	r3, [r2, #0]
 8010bcc:	4a40      	ldr	r2, [pc, #256]	@ (8010cd0 <xTaskIncrementTick+0x15c>)
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	6013      	str	r3, [r2, #0]
 8010bd2:	4b40      	ldr	r3, [pc, #256]	@ (8010cd4 <xTaskIncrementTick+0x160>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	3301      	adds	r3, #1
 8010bd8:	4a3e      	ldr	r2, [pc, #248]	@ (8010cd4 <xTaskIncrementTick+0x160>)
 8010bda:	6013      	str	r3, [r2, #0]
 8010bdc:	f000 fae2 	bl	80111a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010be0:	4b3d      	ldr	r3, [pc, #244]	@ (8010cd8 <xTaskIncrementTick+0x164>)
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	693a      	ldr	r2, [r7, #16]
 8010be6:	429a      	cmp	r2, r3
 8010be8:	d34d      	bcc.n	8010c86 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010bea:	4b38      	ldr	r3, [pc, #224]	@ (8010ccc <xTaskIncrementTick+0x158>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d101      	bne.n	8010bf8 <xTaskIncrementTick+0x84>
 8010bf4:	2301      	movs	r3, #1
 8010bf6:	e000      	b.n	8010bfa <xTaskIncrementTick+0x86>
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d004      	beq.n	8010c08 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010bfe:	4b36      	ldr	r3, [pc, #216]	@ (8010cd8 <xTaskIncrementTick+0x164>)
 8010c00:	f04f 32ff 	mov.w	r2, #4294967295
 8010c04:	601a      	str	r2, [r3, #0]
					break;
 8010c06:	e03e      	b.n	8010c86 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010c08:	4b30      	ldr	r3, [pc, #192]	@ (8010ccc <xTaskIncrementTick+0x158>)
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	68db      	ldr	r3, [r3, #12]
 8010c0e:	68db      	ldr	r3, [r3, #12]
 8010c10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010c12:	68bb      	ldr	r3, [r7, #8]
 8010c14:	685b      	ldr	r3, [r3, #4]
 8010c16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010c18:	693a      	ldr	r2, [r7, #16]
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	429a      	cmp	r2, r3
 8010c1e:	d203      	bcs.n	8010c28 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010c20:	4a2d      	ldr	r2, [pc, #180]	@ (8010cd8 <xTaskIncrementTick+0x164>)
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	6013      	str	r3, [r2, #0]
						break;
 8010c26:	e02e      	b.n	8010c86 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	3304      	adds	r3, #4
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f7fe fd04 	bl	800f63a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010c32:	68bb      	ldr	r3, [r7, #8]
 8010c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d004      	beq.n	8010c44 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010c3a:	68bb      	ldr	r3, [r7, #8]
 8010c3c:	3318      	adds	r3, #24
 8010c3e:	4618      	mov	r0, r3
 8010c40:	f7fe fcfb 	bl	800f63a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010c44:	68bb      	ldr	r3, [r7, #8]
 8010c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c48:	2201      	movs	r2, #1
 8010c4a:	409a      	lsls	r2, r3
 8010c4c:	4b23      	ldr	r3, [pc, #140]	@ (8010cdc <xTaskIncrementTick+0x168>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	4313      	orrs	r3, r2
 8010c52:	4a22      	ldr	r2, [pc, #136]	@ (8010cdc <xTaskIncrementTick+0x168>)
 8010c54:	6013      	str	r3, [r2, #0]
 8010c56:	68bb      	ldr	r3, [r7, #8]
 8010c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c5a:	4613      	mov	r3, r2
 8010c5c:	009b      	lsls	r3, r3, #2
 8010c5e:	4413      	add	r3, r2
 8010c60:	009b      	lsls	r3, r3, #2
 8010c62:	4a1f      	ldr	r2, [pc, #124]	@ (8010ce0 <xTaskIncrementTick+0x16c>)
 8010c64:	441a      	add	r2, r3
 8010c66:	68bb      	ldr	r3, [r7, #8]
 8010c68:	3304      	adds	r3, #4
 8010c6a:	4619      	mov	r1, r3
 8010c6c:	4610      	mov	r0, r2
 8010c6e:	f7fe fc89 	bl	800f584 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c76:	4b1b      	ldr	r3, [pc, #108]	@ (8010ce4 <xTaskIncrementTick+0x170>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c7c:	429a      	cmp	r2, r3
 8010c7e:	d3b4      	bcc.n	8010bea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8010c80:	2301      	movs	r3, #1
 8010c82:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010c84:	e7b1      	b.n	8010bea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010c86:	4b17      	ldr	r3, [pc, #92]	@ (8010ce4 <xTaskIncrementTick+0x170>)
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c8c:	4914      	ldr	r1, [pc, #80]	@ (8010ce0 <xTaskIncrementTick+0x16c>)
 8010c8e:	4613      	mov	r3, r2
 8010c90:	009b      	lsls	r3, r3, #2
 8010c92:	4413      	add	r3, r2
 8010c94:	009b      	lsls	r3, r3, #2
 8010c96:	440b      	add	r3, r1
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	2b01      	cmp	r3, #1
 8010c9c:	d907      	bls.n	8010cae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8010c9e:	2301      	movs	r3, #1
 8010ca0:	617b      	str	r3, [r7, #20]
 8010ca2:	e004      	b.n	8010cae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010ca4:	4b10      	ldr	r3, [pc, #64]	@ (8010ce8 <xTaskIncrementTick+0x174>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	3301      	adds	r3, #1
 8010caa:	4a0f      	ldr	r2, [pc, #60]	@ (8010ce8 <xTaskIncrementTick+0x174>)
 8010cac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010cae:	4b0f      	ldr	r3, [pc, #60]	@ (8010cec <xTaskIncrementTick+0x178>)
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d001      	beq.n	8010cba <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8010cb6:	2301      	movs	r3, #1
 8010cb8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010cba:	697b      	ldr	r3, [r7, #20]
}
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	3718      	adds	r7, #24
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}
 8010cc4:	20002c00 	.word	0x20002c00
 8010cc8:	20002bdc 	.word	0x20002bdc
 8010ccc:	20002b90 	.word	0x20002b90
 8010cd0:	20002b94 	.word	0x20002b94
 8010cd4:	20002bf0 	.word	0x20002bf0
 8010cd8:	20002bf8 	.word	0x20002bf8
 8010cdc:	20002be0 	.word	0x20002be0
 8010ce0:	20002adc 	.word	0x20002adc
 8010ce4:	20002ad8 	.word	0x20002ad8
 8010ce8:	20002be8 	.word	0x20002be8
 8010cec:	20002bec 	.word	0x20002bec

08010cf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010cf0:	b480      	push	{r7}
 8010cf2:	b087      	sub	sp, #28
 8010cf4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010cf6:	4b27      	ldr	r3, [pc, #156]	@ (8010d94 <vTaskSwitchContext+0xa4>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d003      	beq.n	8010d06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010cfe:	4b26      	ldr	r3, [pc, #152]	@ (8010d98 <vTaskSwitchContext+0xa8>)
 8010d00:	2201      	movs	r2, #1
 8010d02:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010d04:	e040      	b.n	8010d88 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8010d06:	4b24      	ldr	r3, [pc, #144]	@ (8010d98 <vTaskSwitchContext+0xa8>)
 8010d08:	2200      	movs	r2, #0
 8010d0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8010d0c:	4b23      	ldr	r3, [pc, #140]	@ (8010d9c <vTaskSwitchContext+0xac>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	fab3 f383 	clz	r3, r3
 8010d18:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010d1a:	7afb      	ldrb	r3, [r7, #11]
 8010d1c:	f1c3 031f 	rsb	r3, r3, #31
 8010d20:	617b      	str	r3, [r7, #20]
 8010d22:	491f      	ldr	r1, [pc, #124]	@ (8010da0 <vTaskSwitchContext+0xb0>)
 8010d24:	697a      	ldr	r2, [r7, #20]
 8010d26:	4613      	mov	r3, r2
 8010d28:	009b      	lsls	r3, r3, #2
 8010d2a:	4413      	add	r3, r2
 8010d2c:	009b      	lsls	r3, r3, #2
 8010d2e:	440b      	add	r3, r1
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d10b      	bne.n	8010d4e <vTaskSwitchContext+0x5e>
	__asm volatile
 8010d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d3a:	f383 8811 	msr	BASEPRI, r3
 8010d3e:	f3bf 8f6f 	isb	sy
 8010d42:	f3bf 8f4f 	dsb	sy
 8010d46:	607b      	str	r3, [r7, #4]
}
 8010d48:	bf00      	nop
 8010d4a:	bf00      	nop
 8010d4c:	e7fd      	b.n	8010d4a <vTaskSwitchContext+0x5a>
 8010d4e:	697a      	ldr	r2, [r7, #20]
 8010d50:	4613      	mov	r3, r2
 8010d52:	009b      	lsls	r3, r3, #2
 8010d54:	4413      	add	r3, r2
 8010d56:	009b      	lsls	r3, r3, #2
 8010d58:	4a11      	ldr	r2, [pc, #68]	@ (8010da0 <vTaskSwitchContext+0xb0>)
 8010d5a:	4413      	add	r3, r2
 8010d5c:	613b      	str	r3, [r7, #16]
 8010d5e:	693b      	ldr	r3, [r7, #16]
 8010d60:	685b      	ldr	r3, [r3, #4]
 8010d62:	685a      	ldr	r2, [r3, #4]
 8010d64:	693b      	ldr	r3, [r7, #16]
 8010d66:	605a      	str	r2, [r3, #4]
 8010d68:	693b      	ldr	r3, [r7, #16]
 8010d6a:	685a      	ldr	r2, [r3, #4]
 8010d6c:	693b      	ldr	r3, [r7, #16]
 8010d6e:	3308      	adds	r3, #8
 8010d70:	429a      	cmp	r2, r3
 8010d72:	d104      	bne.n	8010d7e <vTaskSwitchContext+0x8e>
 8010d74:	693b      	ldr	r3, [r7, #16]
 8010d76:	685b      	ldr	r3, [r3, #4]
 8010d78:	685a      	ldr	r2, [r3, #4]
 8010d7a:	693b      	ldr	r3, [r7, #16]
 8010d7c:	605a      	str	r2, [r3, #4]
 8010d7e:	693b      	ldr	r3, [r7, #16]
 8010d80:	685b      	ldr	r3, [r3, #4]
 8010d82:	68db      	ldr	r3, [r3, #12]
 8010d84:	4a07      	ldr	r2, [pc, #28]	@ (8010da4 <vTaskSwitchContext+0xb4>)
 8010d86:	6013      	str	r3, [r2, #0]
}
 8010d88:	bf00      	nop
 8010d8a:	371c      	adds	r7, #28
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bc80      	pop	{r7}
 8010d90:	4770      	bx	lr
 8010d92:	bf00      	nop
 8010d94:	20002c00 	.word	0x20002c00
 8010d98:	20002bec 	.word	0x20002bec
 8010d9c:	20002be0 	.word	0x20002be0
 8010da0:	20002adc 	.word	0x20002adc
 8010da4:	20002ad8 	.word	0x20002ad8

08010da8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b084      	sub	sp, #16
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
 8010db0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d10b      	bne.n	8010dd0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8010db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dbc:	f383 8811 	msr	BASEPRI, r3
 8010dc0:	f3bf 8f6f 	isb	sy
 8010dc4:	f3bf 8f4f 	dsb	sy
 8010dc8:	60fb      	str	r3, [r7, #12]
}
 8010dca:	bf00      	nop
 8010dcc:	bf00      	nop
 8010dce:	e7fd      	b.n	8010dcc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010dd0:	4b07      	ldr	r3, [pc, #28]	@ (8010df0 <vTaskPlaceOnEventList+0x48>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	3318      	adds	r3, #24
 8010dd6:	4619      	mov	r1, r3
 8010dd8:	6878      	ldr	r0, [r7, #4]
 8010dda:	f7fe fbf6 	bl	800f5ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010dde:	2101      	movs	r1, #1
 8010de0:	6838      	ldr	r0, [r7, #0]
 8010de2:	f000 fbe5 	bl	80115b0 <prvAddCurrentTaskToDelayedList>
}
 8010de6:	bf00      	nop
 8010de8:	3710      	adds	r7, #16
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}
 8010dee:	bf00      	nop
 8010df0:	20002ad8 	.word	0x20002ad8

08010df4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b086      	sub	sp, #24
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	68db      	ldr	r3, [r3, #12]
 8010e00:	68db      	ldr	r3, [r3, #12]
 8010e02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010e04:	693b      	ldr	r3, [r7, #16]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d10b      	bne.n	8010e22 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8010e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e0e:	f383 8811 	msr	BASEPRI, r3
 8010e12:	f3bf 8f6f 	isb	sy
 8010e16:	f3bf 8f4f 	dsb	sy
 8010e1a:	60fb      	str	r3, [r7, #12]
}
 8010e1c:	bf00      	nop
 8010e1e:	bf00      	nop
 8010e20:	e7fd      	b.n	8010e1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010e22:	693b      	ldr	r3, [r7, #16]
 8010e24:	3318      	adds	r3, #24
 8010e26:	4618      	mov	r0, r3
 8010e28:	f7fe fc07 	bl	800f63a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8010ea4 <xTaskRemoveFromEventList+0xb0>)
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d11c      	bne.n	8010e6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010e34:	693b      	ldr	r3, [r7, #16]
 8010e36:	3304      	adds	r3, #4
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f7fe fbfe 	bl	800f63a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010e3e:	693b      	ldr	r3, [r7, #16]
 8010e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e42:	2201      	movs	r2, #1
 8010e44:	409a      	lsls	r2, r3
 8010e46:	4b18      	ldr	r3, [pc, #96]	@ (8010ea8 <xTaskRemoveFromEventList+0xb4>)
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	4313      	orrs	r3, r2
 8010e4c:	4a16      	ldr	r2, [pc, #88]	@ (8010ea8 <xTaskRemoveFromEventList+0xb4>)
 8010e4e:	6013      	str	r3, [r2, #0]
 8010e50:	693b      	ldr	r3, [r7, #16]
 8010e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e54:	4613      	mov	r3, r2
 8010e56:	009b      	lsls	r3, r3, #2
 8010e58:	4413      	add	r3, r2
 8010e5a:	009b      	lsls	r3, r3, #2
 8010e5c:	4a13      	ldr	r2, [pc, #76]	@ (8010eac <xTaskRemoveFromEventList+0xb8>)
 8010e5e:	441a      	add	r2, r3
 8010e60:	693b      	ldr	r3, [r7, #16]
 8010e62:	3304      	adds	r3, #4
 8010e64:	4619      	mov	r1, r3
 8010e66:	4610      	mov	r0, r2
 8010e68:	f7fe fb8c 	bl	800f584 <vListInsertEnd>
 8010e6c:	e005      	b.n	8010e7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010e6e:	693b      	ldr	r3, [r7, #16]
 8010e70:	3318      	adds	r3, #24
 8010e72:	4619      	mov	r1, r3
 8010e74:	480e      	ldr	r0, [pc, #56]	@ (8010eb0 <xTaskRemoveFromEventList+0xbc>)
 8010e76:	f7fe fb85 	bl	800f584 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010e7a:	693b      	ldr	r3, [r7, #16]
 8010e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8010eb4 <xTaskRemoveFromEventList+0xc0>)
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e84:	429a      	cmp	r2, r3
 8010e86:	d905      	bls.n	8010e94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010e88:	2301      	movs	r3, #1
 8010e8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8010eb8 <xTaskRemoveFromEventList+0xc4>)
 8010e8e:	2201      	movs	r2, #1
 8010e90:	601a      	str	r2, [r3, #0]
 8010e92:	e001      	b.n	8010e98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010e94:	2300      	movs	r3, #0
 8010e96:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8010e98:	697b      	ldr	r3, [r7, #20]
}
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	3718      	adds	r7, #24
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	bd80      	pop	{r7, pc}
 8010ea2:	bf00      	nop
 8010ea4:	20002c00 	.word	0x20002c00
 8010ea8:	20002be0 	.word	0x20002be0
 8010eac:	20002adc 	.word	0x20002adc
 8010eb0:	20002b98 	.word	0x20002b98
 8010eb4:	20002ad8 	.word	0x20002ad8
 8010eb8:	20002bec 	.word	0x20002bec

08010ebc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010ebc:	b480      	push	{r7}
 8010ebe:	b083      	sub	sp, #12
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010ec4:	4b06      	ldr	r3, [pc, #24]	@ (8010ee0 <vTaskInternalSetTimeOutState+0x24>)
 8010ec6:	681a      	ldr	r2, [r3, #0]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010ecc:	4b05      	ldr	r3, [pc, #20]	@ (8010ee4 <vTaskInternalSetTimeOutState+0x28>)
 8010ece:	681a      	ldr	r2, [r3, #0]
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	605a      	str	r2, [r3, #4]
}
 8010ed4:	bf00      	nop
 8010ed6:	370c      	adds	r7, #12
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bc80      	pop	{r7}
 8010edc:	4770      	bx	lr
 8010ede:	bf00      	nop
 8010ee0:	20002bf0 	.word	0x20002bf0
 8010ee4:	20002bdc 	.word	0x20002bdc

08010ee8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b088      	sub	sp, #32
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
 8010ef0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d10b      	bne.n	8010f10 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8010ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010efc:	f383 8811 	msr	BASEPRI, r3
 8010f00:	f3bf 8f6f 	isb	sy
 8010f04:	f3bf 8f4f 	dsb	sy
 8010f08:	613b      	str	r3, [r7, #16]
}
 8010f0a:	bf00      	nop
 8010f0c:	bf00      	nop
 8010f0e:	e7fd      	b.n	8010f0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d10b      	bne.n	8010f2e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8010f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f1a:	f383 8811 	msr	BASEPRI, r3
 8010f1e:	f3bf 8f6f 	isb	sy
 8010f22:	f3bf 8f4f 	dsb	sy
 8010f26:	60fb      	str	r3, [r7, #12]
}
 8010f28:	bf00      	nop
 8010f2a:	bf00      	nop
 8010f2c:	e7fd      	b.n	8010f2a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8010f2e:	f000 fc95 	bl	801185c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010f32:	4b1d      	ldr	r3, [pc, #116]	@ (8010fa8 <xTaskCheckForTimeOut+0xc0>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	685b      	ldr	r3, [r3, #4]
 8010f3c:	69ba      	ldr	r2, [r7, #24]
 8010f3e:	1ad3      	subs	r3, r2, r3
 8010f40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010f42:	683b      	ldr	r3, [r7, #0]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f4a:	d102      	bne.n	8010f52 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	61fb      	str	r3, [r7, #28]
 8010f50:	e023      	b.n	8010f9a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	681a      	ldr	r2, [r3, #0]
 8010f56:	4b15      	ldr	r3, [pc, #84]	@ (8010fac <xTaskCheckForTimeOut+0xc4>)
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	429a      	cmp	r2, r3
 8010f5c:	d007      	beq.n	8010f6e <xTaskCheckForTimeOut+0x86>
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	685b      	ldr	r3, [r3, #4]
 8010f62:	69ba      	ldr	r2, [r7, #24]
 8010f64:	429a      	cmp	r2, r3
 8010f66:	d302      	bcc.n	8010f6e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010f68:	2301      	movs	r3, #1
 8010f6a:	61fb      	str	r3, [r7, #28]
 8010f6c:	e015      	b.n	8010f9a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	697a      	ldr	r2, [r7, #20]
 8010f74:	429a      	cmp	r2, r3
 8010f76:	d20b      	bcs.n	8010f90 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	681a      	ldr	r2, [r3, #0]
 8010f7c:	697b      	ldr	r3, [r7, #20]
 8010f7e:	1ad2      	subs	r2, r2, r3
 8010f80:	683b      	ldr	r3, [r7, #0]
 8010f82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	f7ff ff99 	bl	8010ebc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	61fb      	str	r3, [r7, #28]
 8010f8e:	e004      	b.n	8010f9a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	2200      	movs	r2, #0
 8010f94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010f96:	2301      	movs	r3, #1
 8010f98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010f9a:	f000 fc8f 	bl	80118bc <vPortExitCritical>

	return xReturn;
 8010f9e:	69fb      	ldr	r3, [r7, #28]
}
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	3720      	adds	r7, #32
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd80      	pop	{r7, pc}
 8010fa8:	20002bdc 	.word	0x20002bdc
 8010fac:	20002bf0 	.word	0x20002bf0

08010fb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010fb0:	b480      	push	{r7}
 8010fb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010fb4:	4b03      	ldr	r3, [pc, #12]	@ (8010fc4 <vTaskMissedYield+0x14>)
 8010fb6:	2201      	movs	r2, #1
 8010fb8:	601a      	str	r2, [r3, #0]
}
 8010fba:	bf00      	nop
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bc80      	pop	{r7}
 8010fc0:	4770      	bx	lr
 8010fc2:	bf00      	nop
 8010fc4:	20002bec 	.word	0x20002bec

08010fc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b082      	sub	sp, #8
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010fd0:	f000 f852 	bl	8011078 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010fd4:	4b06      	ldr	r3, [pc, #24]	@ (8010ff0 <prvIdleTask+0x28>)
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	2b01      	cmp	r3, #1
 8010fda:	d9f9      	bls.n	8010fd0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010fdc:	4b05      	ldr	r3, [pc, #20]	@ (8010ff4 <prvIdleTask+0x2c>)
 8010fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010fe2:	601a      	str	r2, [r3, #0]
 8010fe4:	f3bf 8f4f 	dsb	sy
 8010fe8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010fec:	e7f0      	b.n	8010fd0 <prvIdleTask+0x8>
 8010fee:	bf00      	nop
 8010ff0:	20002adc 	.word	0x20002adc
 8010ff4:	e000ed04 	.word	0xe000ed04

08010ff8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b082      	sub	sp, #8
 8010ffc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010ffe:	2300      	movs	r3, #0
 8011000:	607b      	str	r3, [r7, #4]
 8011002:	e00c      	b.n	801101e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011004:	687a      	ldr	r2, [r7, #4]
 8011006:	4613      	mov	r3, r2
 8011008:	009b      	lsls	r3, r3, #2
 801100a:	4413      	add	r3, r2
 801100c:	009b      	lsls	r3, r3, #2
 801100e:	4a12      	ldr	r2, [pc, #72]	@ (8011058 <prvInitialiseTaskLists+0x60>)
 8011010:	4413      	add	r3, r2
 8011012:	4618      	mov	r0, r3
 8011014:	f7fe fa8b 	bl	800f52e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	3301      	adds	r3, #1
 801101c:	607b      	str	r3, [r7, #4]
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	2b06      	cmp	r3, #6
 8011022:	d9ef      	bls.n	8011004 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011024:	480d      	ldr	r0, [pc, #52]	@ (801105c <prvInitialiseTaskLists+0x64>)
 8011026:	f7fe fa82 	bl	800f52e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801102a:	480d      	ldr	r0, [pc, #52]	@ (8011060 <prvInitialiseTaskLists+0x68>)
 801102c:	f7fe fa7f 	bl	800f52e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011030:	480c      	ldr	r0, [pc, #48]	@ (8011064 <prvInitialiseTaskLists+0x6c>)
 8011032:	f7fe fa7c 	bl	800f52e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011036:	480c      	ldr	r0, [pc, #48]	@ (8011068 <prvInitialiseTaskLists+0x70>)
 8011038:	f7fe fa79 	bl	800f52e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801103c:	480b      	ldr	r0, [pc, #44]	@ (801106c <prvInitialiseTaskLists+0x74>)
 801103e:	f7fe fa76 	bl	800f52e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011042:	4b0b      	ldr	r3, [pc, #44]	@ (8011070 <prvInitialiseTaskLists+0x78>)
 8011044:	4a05      	ldr	r2, [pc, #20]	@ (801105c <prvInitialiseTaskLists+0x64>)
 8011046:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011048:	4b0a      	ldr	r3, [pc, #40]	@ (8011074 <prvInitialiseTaskLists+0x7c>)
 801104a:	4a05      	ldr	r2, [pc, #20]	@ (8011060 <prvInitialiseTaskLists+0x68>)
 801104c:	601a      	str	r2, [r3, #0]
}
 801104e:	bf00      	nop
 8011050:	3708      	adds	r7, #8
 8011052:	46bd      	mov	sp, r7
 8011054:	bd80      	pop	{r7, pc}
 8011056:	bf00      	nop
 8011058:	20002adc 	.word	0x20002adc
 801105c:	20002b68 	.word	0x20002b68
 8011060:	20002b7c 	.word	0x20002b7c
 8011064:	20002b98 	.word	0x20002b98
 8011068:	20002bac 	.word	0x20002bac
 801106c:	20002bc4 	.word	0x20002bc4
 8011070:	20002b90 	.word	0x20002b90
 8011074:	20002b94 	.word	0x20002b94

08011078 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b082      	sub	sp, #8
 801107c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801107e:	e019      	b.n	80110b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011080:	f000 fbec 	bl	801185c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8011084:	4b10      	ldr	r3, [pc, #64]	@ (80110c8 <prvCheckTasksWaitingTermination+0x50>)
 8011086:	68db      	ldr	r3, [r3, #12]
 8011088:	68db      	ldr	r3, [r3, #12]
 801108a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	3304      	adds	r3, #4
 8011090:	4618      	mov	r0, r3
 8011092:	f7fe fad2 	bl	800f63a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011096:	4b0d      	ldr	r3, [pc, #52]	@ (80110cc <prvCheckTasksWaitingTermination+0x54>)
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	3b01      	subs	r3, #1
 801109c:	4a0b      	ldr	r2, [pc, #44]	@ (80110cc <prvCheckTasksWaitingTermination+0x54>)
 801109e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80110a0:	4b0b      	ldr	r3, [pc, #44]	@ (80110d0 <prvCheckTasksWaitingTermination+0x58>)
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	3b01      	subs	r3, #1
 80110a6:	4a0a      	ldr	r2, [pc, #40]	@ (80110d0 <prvCheckTasksWaitingTermination+0x58>)
 80110a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80110aa:	f000 fc07 	bl	80118bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80110ae:	6878      	ldr	r0, [r7, #4]
 80110b0:	f000 f848 	bl	8011144 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80110b4:	4b06      	ldr	r3, [pc, #24]	@ (80110d0 <prvCheckTasksWaitingTermination+0x58>)
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d1e1      	bne.n	8011080 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80110bc:	bf00      	nop
 80110be:	bf00      	nop
 80110c0:	3708      	adds	r7, #8
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}
 80110c6:	bf00      	nop
 80110c8:	20002bac 	.word	0x20002bac
 80110cc:	20002bd8 	.word	0x20002bd8
 80110d0:	20002bc0 	.word	0x20002bc0

080110d4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80110d4:	b480      	push	{r7}
 80110d6:	b085      	sub	sp, #20
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80110dc:	2300      	movs	r3, #0
 80110de:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80110e0:	e005      	b.n	80110ee <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	3301      	adds	r3, #1
 80110e6:	607b      	str	r3, [r7, #4]
			ulCount++;
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	3301      	adds	r3, #1
 80110ec:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	781b      	ldrb	r3, [r3, #0]
 80110f2:	2ba5      	cmp	r3, #165	@ 0xa5
 80110f4:	d0f5      	beq.n	80110e2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	089b      	lsrs	r3, r3, #2
 80110fa:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	b29b      	uxth	r3, r3
	}
 8011100:	4618      	mov	r0, r3
 8011102:	3714      	adds	r7, #20
 8011104:	46bd      	mov	sp, r7
 8011106:	bc80      	pop	{r7}
 8011108:	4770      	bx	lr
	...

0801110c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 801110c:	b580      	push	{r7, lr}
 801110e:	b086      	sub	sp, #24
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d102      	bne.n	8011120 <uxTaskGetStackHighWaterMark+0x14>
 801111a:	4b09      	ldr	r3, [pc, #36]	@ (8011140 <uxTaskGetStackHighWaterMark+0x34>)
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	e000      	b.n	8011122 <uxTaskGetStackHighWaterMark+0x16>
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8011124:	697b      	ldr	r3, [r7, #20]
 8011126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011128:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 801112a:	6938      	ldr	r0, [r7, #16]
 801112c:	f7ff ffd2 	bl	80110d4 <prvTaskCheckFreeStackSpace>
 8011130:	4603      	mov	r3, r0
 8011132:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8011134:	68fb      	ldr	r3, [r7, #12]
	}
 8011136:	4618      	mov	r0, r3
 8011138:	3718      	adds	r7, #24
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}
 801113e:	bf00      	nop
 8011140:	20002ad8 	.word	0x20002ad8

08011144 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011144:	b580      	push	{r7, lr}
 8011146:	b084      	sub	sp, #16
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8011152:	2b00      	cmp	r3, #0
 8011154:	d108      	bne.n	8011168 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801115a:	4618      	mov	r0, r3
 801115c:	f000 fd48 	bl	8011bf0 <vPortFree>
				vPortFree( pxTCB );
 8011160:	6878      	ldr	r0, [r7, #4]
 8011162:	f000 fd45 	bl	8011bf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011166:	e019      	b.n	801119c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801116e:	2b01      	cmp	r3, #1
 8011170:	d103      	bne.n	801117a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011172:	6878      	ldr	r0, [r7, #4]
 8011174:	f000 fd3c 	bl	8011bf0 <vPortFree>
	}
 8011178:	e010      	b.n	801119c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8011180:	2b02      	cmp	r3, #2
 8011182:	d00b      	beq.n	801119c <prvDeleteTCB+0x58>
	__asm volatile
 8011184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011188:	f383 8811 	msr	BASEPRI, r3
 801118c:	f3bf 8f6f 	isb	sy
 8011190:	f3bf 8f4f 	dsb	sy
 8011194:	60fb      	str	r3, [r7, #12]
}
 8011196:	bf00      	nop
 8011198:	bf00      	nop
 801119a:	e7fd      	b.n	8011198 <prvDeleteTCB+0x54>
	}
 801119c:	bf00      	nop
 801119e:	3710      	adds	r7, #16
 80111a0:	46bd      	mov	sp, r7
 80111a2:	bd80      	pop	{r7, pc}

080111a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80111a4:	b480      	push	{r7}
 80111a6:	b083      	sub	sp, #12
 80111a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80111aa:	4b0e      	ldr	r3, [pc, #56]	@ (80111e4 <prvResetNextTaskUnblockTime+0x40>)
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d101      	bne.n	80111b8 <prvResetNextTaskUnblockTime+0x14>
 80111b4:	2301      	movs	r3, #1
 80111b6:	e000      	b.n	80111ba <prvResetNextTaskUnblockTime+0x16>
 80111b8:	2300      	movs	r3, #0
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d004      	beq.n	80111c8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80111be:	4b0a      	ldr	r3, [pc, #40]	@ (80111e8 <prvResetNextTaskUnblockTime+0x44>)
 80111c0:	f04f 32ff 	mov.w	r2, #4294967295
 80111c4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80111c6:	e008      	b.n	80111da <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80111c8:	4b06      	ldr	r3, [pc, #24]	@ (80111e4 <prvResetNextTaskUnblockTime+0x40>)
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	68db      	ldr	r3, [r3, #12]
 80111ce:	68db      	ldr	r3, [r3, #12]
 80111d0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	685b      	ldr	r3, [r3, #4]
 80111d6:	4a04      	ldr	r2, [pc, #16]	@ (80111e8 <prvResetNextTaskUnblockTime+0x44>)
 80111d8:	6013      	str	r3, [r2, #0]
}
 80111da:	bf00      	nop
 80111dc:	370c      	adds	r7, #12
 80111de:	46bd      	mov	sp, r7
 80111e0:	bc80      	pop	{r7}
 80111e2:	4770      	bx	lr
 80111e4:	20002b90 	.word	0x20002b90
 80111e8:	20002bf8 	.word	0x20002bf8

080111ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80111ec:	b480      	push	{r7}
 80111ee:	b083      	sub	sp, #12
 80111f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80111f2:	4b0b      	ldr	r3, [pc, #44]	@ (8011220 <xTaskGetSchedulerState+0x34>)
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d102      	bne.n	8011200 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80111fa:	2301      	movs	r3, #1
 80111fc:	607b      	str	r3, [r7, #4]
 80111fe:	e008      	b.n	8011212 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011200:	4b08      	ldr	r3, [pc, #32]	@ (8011224 <xTaskGetSchedulerState+0x38>)
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d102      	bne.n	801120e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011208:	2302      	movs	r3, #2
 801120a:	607b      	str	r3, [r7, #4]
 801120c:	e001      	b.n	8011212 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801120e:	2300      	movs	r3, #0
 8011210:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011212:	687b      	ldr	r3, [r7, #4]
	}
 8011214:	4618      	mov	r0, r3
 8011216:	370c      	adds	r7, #12
 8011218:	46bd      	mov	sp, r7
 801121a:	bc80      	pop	{r7}
 801121c:	4770      	bx	lr
 801121e:	bf00      	nop
 8011220:	20002be4 	.word	0x20002be4
 8011224:	20002c00 	.word	0x20002c00

08011228 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011228:	b580      	push	{r7, lr}
 801122a:	b084      	sub	sp, #16
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011234:	2300      	movs	r3, #0
 8011236:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d06e      	beq.n	801131c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801123e:	68bb      	ldr	r3, [r7, #8]
 8011240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011242:	4b39      	ldr	r3, [pc, #228]	@ (8011328 <xTaskPriorityInherit+0x100>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011248:	429a      	cmp	r2, r3
 801124a:	d25e      	bcs.n	801130a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801124c:	68bb      	ldr	r3, [r7, #8]
 801124e:	699b      	ldr	r3, [r3, #24]
 8011250:	2b00      	cmp	r3, #0
 8011252:	db06      	blt.n	8011262 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011254:	4b34      	ldr	r3, [pc, #208]	@ (8011328 <xTaskPriorityInherit+0x100>)
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801125a:	f1c3 0207 	rsb	r2, r3, #7
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	6959      	ldr	r1, [r3, #20]
 8011266:	68bb      	ldr	r3, [r7, #8]
 8011268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801126a:	4613      	mov	r3, r2
 801126c:	009b      	lsls	r3, r3, #2
 801126e:	4413      	add	r3, r2
 8011270:	009b      	lsls	r3, r3, #2
 8011272:	4a2e      	ldr	r2, [pc, #184]	@ (801132c <xTaskPriorityInherit+0x104>)
 8011274:	4413      	add	r3, r2
 8011276:	4299      	cmp	r1, r3
 8011278:	d101      	bne.n	801127e <xTaskPriorityInherit+0x56>
 801127a:	2301      	movs	r3, #1
 801127c:	e000      	b.n	8011280 <xTaskPriorityInherit+0x58>
 801127e:	2300      	movs	r3, #0
 8011280:	2b00      	cmp	r3, #0
 8011282:	d03a      	beq.n	80112fa <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	3304      	adds	r3, #4
 8011288:	4618      	mov	r0, r3
 801128a:	f7fe f9d6 	bl	800f63a <uxListRemove>
 801128e:	4603      	mov	r3, r0
 8011290:	2b00      	cmp	r3, #0
 8011292:	d115      	bne.n	80112c0 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8011294:	68bb      	ldr	r3, [r7, #8]
 8011296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011298:	4924      	ldr	r1, [pc, #144]	@ (801132c <xTaskPriorityInherit+0x104>)
 801129a:	4613      	mov	r3, r2
 801129c:	009b      	lsls	r3, r3, #2
 801129e:	4413      	add	r3, r2
 80112a0:	009b      	lsls	r3, r3, #2
 80112a2:	440b      	add	r3, r1
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d10a      	bne.n	80112c0 <xTaskPriorityInherit+0x98>
 80112aa:	68bb      	ldr	r3, [r7, #8]
 80112ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112ae:	2201      	movs	r2, #1
 80112b0:	fa02 f303 	lsl.w	r3, r2, r3
 80112b4:	43da      	mvns	r2, r3
 80112b6:	4b1e      	ldr	r3, [pc, #120]	@ (8011330 <xTaskPriorityInherit+0x108>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	4013      	ands	r3, r2
 80112bc:	4a1c      	ldr	r2, [pc, #112]	@ (8011330 <xTaskPriorityInherit+0x108>)
 80112be:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80112c0:	4b19      	ldr	r3, [pc, #100]	@ (8011328 <xTaskPriorityInherit+0x100>)
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80112c6:	68bb      	ldr	r3, [r7, #8]
 80112c8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112ce:	2201      	movs	r2, #1
 80112d0:	409a      	lsls	r2, r3
 80112d2:	4b17      	ldr	r3, [pc, #92]	@ (8011330 <xTaskPriorityInherit+0x108>)
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	4313      	orrs	r3, r2
 80112d8:	4a15      	ldr	r2, [pc, #84]	@ (8011330 <xTaskPriorityInherit+0x108>)
 80112da:	6013      	str	r3, [r2, #0]
 80112dc:	68bb      	ldr	r3, [r7, #8]
 80112de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80112e0:	4613      	mov	r3, r2
 80112e2:	009b      	lsls	r3, r3, #2
 80112e4:	4413      	add	r3, r2
 80112e6:	009b      	lsls	r3, r3, #2
 80112e8:	4a10      	ldr	r2, [pc, #64]	@ (801132c <xTaskPriorityInherit+0x104>)
 80112ea:	441a      	add	r2, r3
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	3304      	adds	r3, #4
 80112f0:	4619      	mov	r1, r3
 80112f2:	4610      	mov	r0, r2
 80112f4:	f7fe f946 	bl	800f584 <vListInsertEnd>
 80112f8:	e004      	b.n	8011304 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80112fa:	4b0b      	ldr	r3, [pc, #44]	@ (8011328 <xTaskPriorityInherit+0x100>)
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011300:	68bb      	ldr	r3, [r7, #8]
 8011302:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011304:	2301      	movs	r3, #1
 8011306:	60fb      	str	r3, [r7, #12]
 8011308:	e008      	b.n	801131c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801130e:	4b06      	ldr	r3, [pc, #24]	@ (8011328 <xTaskPriorityInherit+0x100>)
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011314:	429a      	cmp	r2, r3
 8011316:	d201      	bcs.n	801131c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011318:	2301      	movs	r3, #1
 801131a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801131c:	68fb      	ldr	r3, [r7, #12]
	}
 801131e:	4618      	mov	r0, r3
 8011320:	3710      	adds	r7, #16
 8011322:	46bd      	mov	sp, r7
 8011324:	bd80      	pop	{r7, pc}
 8011326:	bf00      	nop
 8011328:	20002ad8 	.word	0x20002ad8
 801132c:	20002adc 	.word	0x20002adc
 8011330:	20002be0 	.word	0x20002be0

08011334 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011334:	b580      	push	{r7, lr}
 8011336:	b086      	sub	sp, #24
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011340:	2300      	movs	r3, #0
 8011342:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d070      	beq.n	801142c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801134a:	4b3b      	ldr	r3, [pc, #236]	@ (8011438 <xTaskPriorityDisinherit+0x104>)
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	693a      	ldr	r2, [r7, #16]
 8011350:	429a      	cmp	r2, r3
 8011352:	d00b      	beq.n	801136c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8011354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011358:	f383 8811 	msr	BASEPRI, r3
 801135c:	f3bf 8f6f 	isb	sy
 8011360:	f3bf 8f4f 	dsb	sy
 8011364:	60fb      	str	r3, [r7, #12]
}
 8011366:	bf00      	nop
 8011368:	bf00      	nop
 801136a:	e7fd      	b.n	8011368 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801136c:	693b      	ldr	r3, [r7, #16]
 801136e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011370:	2b00      	cmp	r3, #0
 8011372:	d10b      	bne.n	801138c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8011374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011378:	f383 8811 	msr	BASEPRI, r3
 801137c:	f3bf 8f6f 	isb	sy
 8011380:	f3bf 8f4f 	dsb	sy
 8011384:	60bb      	str	r3, [r7, #8]
}
 8011386:	bf00      	nop
 8011388:	bf00      	nop
 801138a:	e7fd      	b.n	8011388 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 801138c:	693b      	ldr	r3, [r7, #16]
 801138e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011390:	1e5a      	subs	r2, r3, #1
 8011392:	693b      	ldr	r3, [r7, #16]
 8011394:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011396:	693b      	ldr	r3, [r7, #16]
 8011398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801139a:	693b      	ldr	r3, [r7, #16]
 801139c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801139e:	429a      	cmp	r2, r3
 80113a0:	d044      	beq.n	801142c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80113a2:	693b      	ldr	r3, [r7, #16]
 80113a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d140      	bne.n	801142c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80113aa:	693b      	ldr	r3, [r7, #16]
 80113ac:	3304      	adds	r3, #4
 80113ae:	4618      	mov	r0, r3
 80113b0:	f7fe f943 	bl	800f63a <uxListRemove>
 80113b4:	4603      	mov	r3, r0
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d115      	bne.n	80113e6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80113ba:	693b      	ldr	r3, [r7, #16]
 80113bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113be:	491f      	ldr	r1, [pc, #124]	@ (801143c <xTaskPriorityDisinherit+0x108>)
 80113c0:	4613      	mov	r3, r2
 80113c2:	009b      	lsls	r3, r3, #2
 80113c4:	4413      	add	r3, r2
 80113c6:	009b      	lsls	r3, r3, #2
 80113c8:	440b      	add	r3, r1
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d10a      	bne.n	80113e6 <xTaskPriorityDisinherit+0xb2>
 80113d0:	693b      	ldr	r3, [r7, #16]
 80113d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113d4:	2201      	movs	r2, #1
 80113d6:	fa02 f303 	lsl.w	r3, r2, r3
 80113da:	43da      	mvns	r2, r3
 80113dc:	4b18      	ldr	r3, [pc, #96]	@ (8011440 <xTaskPriorityDisinherit+0x10c>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	4013      	ands	r3, r2
 80113e2:	4a17      	ldr	r2, [pc, #92]	@ (8011440 <xTaskPriorityDisinherit+0x10c>)
 80113e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80113e6:	693b      	ldr	r3, [r7, #16]
 80113e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80113ea:	693b      	ldr	r3, [r7, #16]
 80113ec:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80113ee:	693b      	ldr	r3, [r7, #16]
 80113f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113f2:	f1c3 0207 	rsb	r2, r3, #7
 80113f6:	693b      	ldr	r3, [r7, #16]
 80113f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113fe:	2201      	movs	r2, #1
 8011400:	409a      	lsls	r2, r3
 8011402:	4b0f      	ldr	r3, [pc, #60]	@ (8011440 <xTaskPriorityDisinherit+0x10c>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	4313      	orrs	r3, r2
 8011408:	4a0d      	ldr	r2, [pc, #52]	@ (8011440 <xTaskPriorityDisinherit+0x10c>)
 801140a:	6013      	str	r3, [r2, #0]
 801140c:	693b      	ldr	r3, [r7, #16]
 801140e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011410:	4613      	mov	r3, r2
 8011412:	009b      	lsls	r3, r3, #2
 8011414:	4413      	add	r3, r2
 8011416:	009b      	lsls	r3, r3, #2
 8011418:	4a08      	ldr	r2, [pc, #32]	@ (801143c <xTaskPriorityDisinherit+0x108>)
 801141a:	441a      	add	r2, r3
 801141c:	693b      	ldr	r3, [r7, #16]
 801141e:	3304      	adds	r3, #4
 8011420:	4619      	mov	r1, r3
 8011422:	4610      	mov	r0, r2
 8011424:	f7fe f8ae 	bl	800f584 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011428:	2301      	movs	r3, #1
 801142a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801142c:	697b      	ldr	r3, [r7, #20]
	}
 801142e:	4618      	mov	r0, r3
 8011430:	3718      	adds	r7, #24
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}
 8011436:	bf00      	nop
 8011438:	20002ad8 	.word	0x20002ad8
 801143c:	20002adc 	.word	0x20002adc
 8011440:	20002be0 	.word	0x20002be0

08011444 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011444:	b580      	push	{r7, lr}
 8011446:	b088      	sub	sp, #32
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
 801144c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011452:	2301      	movs	r3, #1
 8011454:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	2b00      	cmp	r3, #0
 801145a:	f000 808a 	beq.w	8011572 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801145e:	69bb      	ldr	r3, [r7, #24]
 8011460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011462:	2b00      	cmp	r3, #0
 8011464:	d10b      	bne.n	801147e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8011466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801146a:	f383 8811 	msr	BASEPRI, r3
 801146e:	f3bf 8f6f 	isb	sy
 8011472:	f3bf 8f4f 	dsb	sy
 8011476:	60fb      	str	r3, [r7, #12]
}
 8011478:	bf00      	nop
 801147a:	bf00      	nop
 801147c:	e7fd      	b.n	801147a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801147e:	69bb      	ldr	r3, [r7, #24]
 8011480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011482:	683a      	ldr	r2, [r7, #0]
 8011484:	429a      	cmp	r2, r3
 8011486:	d902      	bls.n	801148e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	61fb      	str	r3, [r7, #28]
 801148c:	e002      	b.n	8011494 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801148e:	69bb      	ldr	r3, [r7, #24]
 8011490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011492:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011494:	69bb      	ldr	r3, [r7, #24]
 8011496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011498:	69fa      	ldr	r2, [r7, #28]
 801149a:	429a      	cmp	r2, r3
 801149c:	d069      	beq.n	8011572 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801149e:	69bb      	ldr	r3, [r7, #24]
 80114a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80114a2:	697a      	ldr	r2, [r7, #20]
 80114a4:	429a      	cmp	r2, r3
 80114a6:	d164      	bne.n	8011572 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80114a8:	4b34      	ldr	r3, [pc, #208]	@ (801157c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	69ba      	ldr	r2, [r7, #24]
 80114ae:	429a      	cmp	r2, r3
 80114b0:	d10b      	bne.n	80114ca <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 80114b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114b6:	f383 8811 	msr	BASEPRI, r3
 80114ba:	f3bf 8f6f 	isb	sy
 80114be:	f3bf 8f4f 	dsb	sy
 80114c2:	60bb      	str	r3, [r7, #8]
}
 80114c4:	bf00      	nop
 80114c6:	bf00      	nop
 80114c8:	e7fd      	b.n	80114c6 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80114ca:	69bb      	ldr	r3, [r7, #24]
 80114cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114ce:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80114d0:	69bb      	ldr	r3, [r7, #24]
 80114d2:	69fa      	ldr	r2, [r7, #28]
 80114d4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80114d6:	69bb      	ldr	r3, [r7, #24]
 80114d8:	699b      	ldr	r3, [r3, #24]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	db04      	blt.n	80114e8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114de:	69fb      	ldr	r3, [r7, #28]
 80114e0:	f1c3 0207 	rsb	r2, r3, #7
 80114e4:	69bb      	ldr	r3, [r7, #24]
 80114e6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80114e8:	69bb      	ldr	r3, [r7, #24]
 80114ea:	6959      	ldr	r1, [r3, #20]
 80114ec:	693a      	ldr	r2, [r7, #16]
 80114ee:	4613      	mov	r3, r2
 80114f0:	009b      	lsls	r3, r3, #2
 80114f2:	4413      	add	r3, r2
 80114f4:	009b      	lsls	r3, r3, #2
 80114f6:	4a22      	ldr	r2, [pc, #136]	@ (8011580 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80114f8:	4413      	add	r3, r2
 80114fa:	4299      	cmp	r1, r3
 80114fc:	d101      	bne.n	8011502 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 80114fe:	2301      	movs	r3, #1
 8011500:	e000      	b.n	8011504 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8011502:	2300      	movs	r3, #0
 8011504:	2b00      	cmp	r3, #0
 8011506:	d034      	beq.n	8011572 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011508:	69bb      	ldr	r3, [r7, #24]
 801150a:	3304      	adds	r3, #4
 801150c:	4618      	mov	r0, r3
 801150e:	f7fe f894 	bl	800f63a <uxListRemove>
 8011512:	4603      	mov	r3, r0
 8011514:	2b00      	cmp	r3, #0
 8011516:	d115      	bne.n	8011544 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011518:	69bb      	ldr	r3, [r7, #24]
 801151a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801151c:	4918      	ldr	r1, [pc, #96]	@ (8011580 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801151e:	4613      	mov	r3, r2
 8011520:	009b      	lsls	r3, r3, #2
 8011522:	4413      	add	r3, r2
 8011524:	009b      	lsls	r3, r3, #2
 8011526:	440b      	add	r3, r1
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d10a      	bne.n	8011544 <vTaskPriorityDisinheritAfterTimeout+0x100>
 801152e:	69bb      	ldr	r3, [r7, #24]
 8011530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011532:	2201      	movs	r2, #1
 8011534:	fa02 f303 	lsl.w	r3, r2, r3
 8011538:	43da      	mvns	r2, r3
 801153a:	4b12      	ldr	r3, [pc, #72]	@ (8011584 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	4013      	ands	r3, r2
 8011540:	4a10      	ldr	r2, [pc, #64]	@ (8011584 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8011542:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011544:	69bb      	ldr	r3, [r7, #24]
 8011546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011548:	2201      	movs	r2, #1
 801154a:	409a      	lsls	r2, r3
 801154c:	4b0d      	ldr	r3, [pc, #52]	@ (8011584 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	4313      	orrs	r3, r2
 8011552:	4a0c      	ldr	r2, [pc, #48]	@ (8011584 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8011554:	6013      	str	r3, [r2, #0]
 8011556:	69bb      	ldr	r3, [r7, #24]
 8011558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801155a:	4613      	mov	r3, r2
 801155c:	009b      	lsls	r3, r3, #2
 801155e:	4413      	add	r3, r2
 8011560:	009b      	lsls	r3, r3, #2
 8011562:	4a07      	ldr	r2, [pc, #28]	@ (8011580 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8011564:	441a      	add	r2, r3
 8011566:	69bb      	ldr	r3, [r7, #24]
 8011568:	3304      	adds	r3, #4
 801156a:	4619      	mov	r1, r3
 801156c:	4610      	mov	r0, r2
 801156e:	f7fe f809 	bl	800f584 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011572:	bf00      	nop
 8011574:	3720      	adds	r7, #32
 8011576:	46bd      	mov	sp, r7
 8011578:	bd80      	pop	{r7, pc}
 801157a:	bf00      	nop
 801157c:	20002ad8 	.word	0x20002ad8
 8011580:	20002adc 	.word	0x20002adc
 8011584:	20002be0 	.word	0x20002be0

08011588 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8011588:	b480      	push	{r7}
 801158a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801158c:	4b07      	ldr	r3, [pc, #28]	@ (80115ac <pvTaskIncrementMutexHeldCount+0x24>)
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d004      	beq.n	801159e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011594:	4b05      	ldr	r3, [pc, #20]	@ (80115ac <pvTaskIncrementMutexHeldCount+0x24>)
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801159a:	3201      	adds	r2, #1
 801159c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 801159e:	4b03      	ldr	r3, [pc, #12]	@ (80115ac <pvTaskIncrementMutexHeldCount+0x24>)
 80115a0:	681b      	ldr	r3, [r3, #0]
	}
 80115a2:	4618      	mov	r0, r3
 80115a4:	46bd      	mov	sp, r7
 80115a6:	bc80      	pop	{r7}
 80115a8:	4770      	bx	lr
 80115aa:	bf00      	nop
 80115ac:	20002ad8 	.word	0x20002ad8

080115b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b084      	sub	sp, #16
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
 80115b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80115ba:	4b29      	ldr	r3, [pc, #164]	@ (8011660 <prvAddCurrentTaskToDelayedList+0xb0>)
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80115c0:	4b28      	ldr	r3, [pc, #160]	@ (8011664 <prvAddCurrentTaskToDelayedList+0xb4>)
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	3304      	adds	r3, #4
 80115c6:	4618      	mov	r0, r3
 80115c8:	f7fe f837 	bl	800f63a <uxListRemove>
 80115cc:	4603      	mov	r3, r0
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d10b      	bne.n	80115ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80115d2:	4b24      	ldr	r3, [pc, #144]	@ (8011664 <prvAddCurrentTaskToDelayedList+0xb4>)
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115d8:	2201      	movs	r2, #1
 80115da:	fa02 f303 	lsl.w	r3, r2, r3
 80115de:	43da      	mvns	r2, r3
 80115e0:	4b21      	ldr	r3, [pc, #132]	@ (8011668 <prvAddCurrentTaskToDelayedList+0xb8>)
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	4013      	ands	r3, r2
 80115e6:	4a20      	ldr	r2, [pc, #128]	@ (8011668 <prvAddCurrentTaskToDelayedList+0xb8>)
 80115e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115f0:	d10a      	bne.n	8011608 <prvAddCurrentTaskToDelayedList+0x58>
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d007      	beq.n	8011608 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80115f8:	4b1a      	ldr	r3, [pc, #104]	@ (8011664 <prvAddCurrentTaskToDelayedList+0xb4>)
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	3304      	adds	r3, #4
 80115fe:	4619      	mov	r1, r3
 8011600:	481a      	ldr	r0, [pc, #104]	@ (801166c <prvAddCurrentTaskToDelayedList+0xbc>)
 8011602:	f7fd ffbf 	bl	800f584 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011606:	e026      	b.n	8011656 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011608:	68fa      	ldr	r2, [r7, #12]
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	4413      	add	r3, r2
 801160e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011610:	4b14      	ldr	r3, [pc, #80]	@ (8011664 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	68ba      	ldr	r2, [r7, #8]
 8011616:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011618:	68ba      	ldr	r2, [r7, #8]
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	429a      	cmp	r2, r3
 801161e:	d209      	bcs.n	8011634 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011620:	4b13      	ldr	r3, [pc, #76]	@ (8011670 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011622:	681a      	ldr	r2, [r3, #0]
 8011624:	4b0f      	ldr	r3, [pc, #60]	@ (8011664 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	3304      	adds	r3, #4
 801162a:	4619      	mov	r1, r3
 801162c:	4610      	mov	r0, r2
 801162e:	f7fd ffcc 	bl	800f5ca <vListInsert>
}
 8011632:	e010      	b.n	8011656 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011634:	4b0f      	ldr	r3, [pc, #60]	@ (8011674 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011636:	681a      	ldr	r2, [r3, #0]
 8011638:	4b0a      	ldr	r3, [pc, #40]	@ (8011664 <prvAddCurrentTaskToDelayedList+0xb4>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	3304      	adds	r3, #4
 801163e:	4619      	mov	r1, r3
 8011640:	4610      	mov	r0, r2
 8011642:	f7fd ffc2 	bl	800f5ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011646:	4b0c      	ldr	r3, [pc, #48]	@ (8011678 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	68ba      	ldr	r2, [r7, #8]
 801164c:	429a      	cmp	r2, r3
 801164e:	d202      	bcs.n	8011656 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011650:	4a09      	ldr	r2, [pc, #36]	@ (8011678 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011652:	68bb      	ldr	r3, [r7, #8]
 8011654:	6013      	str	r3, [r2, #0]
}
 8011656:	bf00      	nop
 8011658:	3710      	adds	r7, #16
 801165a:	46bd      	mov	sp, r7
 801165c:	bd80      	pop	{r7, pc}
 801165e:	bf00      	nop
 8011660:	20002bdc 	.word	0x20002bdc
 8011664:	20002ad8 	.word	0x20002ad8
 8011668:	20002be0 	.word	0x20002be0
 801166c:	20002bc4 	.word	0x20002bc4
 8011670:	20002b94 	.word	0x20002b94
 8011674:	20002b90 	.word	0x20002b90
 8011678:	20002bf8 	.word	0x20002bf8

0801167c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801167c:	b480      	push	{r7}
 801167e:	b085      	sub	sp, #20
 8011680:	af00      	add	r7, sp, #0
 8011682:	60f8      	str	r0, [r7, #12]
 8011684:	60b9      	str	r1, [r7, #8]
 8011686:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	3b04      	subs	r3, #4
 801168c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011694:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	3b04      	subs	r3, #4
 801169a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	f023 0201 	bic.w	r2, r3, #1
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	3b04      	subs	r3, #4
 80116aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80116ac:	4a08      	ldr	r2, [pc, #32]	@ (80116d0 <pxPortInitialiseStack+0x54>)
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	3b14      	subs	r3, #20
 80116b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80116b8:	687a      	ldr	r2, [r7, #4]
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	3b20      	subs	r3, #32
 80116c2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80116c4:	68fb      	ldr	r3, [r7, #12]
}
 80116c6:	4618      	mov	r0, r3
 80116c8:	3714      	adds	r7, #20
 80116ca:	46bd      	mov	sp, r7
 80116cc:	bc80      	pop	{r7}
 80116ce:	4770      	bx	lr
 80116d0:	080116d5 	.word	0x080116d5

080116d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80116d4:	b480      	push	{r7}
 80116d6:	b085      	sub	sp, #20
 80116d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80116da:	2300      	movs	r3, #0
 80116dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80116de:	4b12      	ldr	r3, [pc, #72]	@ (8011728 <prvTaskExitError+0x54>)
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116e6:	d00b      	beq.n	8011700 <prvTaskExitError+0x2c>
	__asm volatile
 80116e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116ec:	f383 8811 	msr	BASEPRI, r3
 80116f0:	f3bf 8f6f 	isb	sy
 80116f4:	f3bf 8f4f 	dsb	sy
 80116f8:	60fb      	str	r3, [r7, #12]
}
 80116fa:	bf00      	nop
 80116fc:	bf00      	nop
 80116fe:	e7fd      	b.n	80116fc <prvTaskExitError+0x28>
	__asm volatile
 8011700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011704:	f383 8811 	msr	BASEPRI, r3
 8011708:	f3bf 8f6f 	isb	sy
 801170c:	f3bf 8f4f 	dsb	sy
 8011710:	60bb      	str	r3, [r7, #8]
}
 8011712:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011714:	bf00      	nop
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d0fc      	beq.n	8011716 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801171c:	bf00      	nop
 801171e:	bf00      	nop
 8011720:	3714      	adds	r7, #20
 8011722:	46bd      	mov	sp, r7
 8011724:	bc80      	pop	{r7}
 8011726:	4770      	bx	lr
 8011728:	20000030 	.word	0x20000030
 801172c:	00000000 	.word	0x00000000

08011730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011730:	4b07      	ldr	r3, [pc, #28]	@ (8011750 <pxCurrentTCBConst2>)
 8011732:	6819      	ldr	r1, [r3, #0]
 8011734:	6808      	ldr	r0, [r1, #0]
 8011736:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801173a:	f380 8809 	msr	PSP, r0
 801173e:	f3bf 8f6f 	isb	sy
 8011742:	f04f 0000 	mov.w	r0, #0
 8011746:	f380 8811 	msr	BASEPRI, r0
 801174a:	f04e 0e0d 	orr.w	lr, lr, #13
 801174e:	4770      	bx	lr

08011750 <pxCurrentTCBConst2>:
 8011750:	20002ad8 	.word	0x20002ad8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011754:	bf00      	nop
 8011756:	bf00      	nop

08011758 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8011758:	4806      	ldr	r0, [pc, #24]	@ (8011774 <prvPortStartFirstTask+0x1c>)
 801175a:	6800      	ldr	r0, [r0, #0]
 801175c:	6800      	ldr	r0, [r0, #0]
 801175e:	f380 8808 	msr	MSP, r0
 8011762:	b662      	cpsie	i
 8011764:	b661      	cpsie	f
 8011766:	f3bf 8f4f 	dsb	sy
 801176a:	f3bf 8f6f 	isb	sy
 801176e:	df00      	svc	0
 8011770:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011772:	bf00      	nop
 8011774:	e000ed08 	.word	0xe000ed08

08011778 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b084      	sub	sp, #16
 801177c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801177e:	4b32      	ldr	r3, [pc, #200]	@ (8011848 <xPortStartScheduler+0xd0>)
 8011780:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	781b      	ldrb	r3, [r3, #0]
 8011786:	b2db      	uxtb	r3, r3
 8011788:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	22ff      	movs	r2, #255	@ 0xff
 801178e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	781b      	ldrb	r3, [r3, #0]
 8011794:	b2db      	uxtb	r3, r3
 8011796:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011798:	78fb      	ldrb	r3, [r7, #3]
 801179a:	b2db      	uxtb	r3, r3
 801179c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80117a0:	b2da      	uxtb	r2, r3
 80117a2:	4b2a      	ldr	r3, [pc, #168]	@ (801184c <xPortStartScheduler+0xd4>)
 80117a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80117a6:	4b2a      	ldr	r3, [pc, #168]	@ (8011850 <xPortStartScheduler+0xd8>)
 80117a8:	2207      	movs	r2, #7
 80117aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80117ac:	e009      	b.n	80117c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80117ae:	4b28      	ldr	r3, [pc, #160]	@ (8011850 <xPortStartScheduler+0xd8>)
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	3b01      	subs	r3, #1
 80117b4:	4a26      	ldr	r2, [pc, #152]	@ (8011850 <xPortStartScheduler+0xd8>)
 80117b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80117b8:	78fb      	ldrb	r3, [r7, #3]
 80117ba:	b2db      	uxtb	r3, r3
 80117bc:	005b      	lsls	r3, r3, #1
 80117be:	b2db      	uxtb	r3, r3
 80117c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80117c2:	78fb      	ldrb	r3, [r7, #3]
 80117c4:	b2db      	uxtb	r3, r3
 80117c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80117ca:	2b80      	cmp	r3, #128	@ 0x80
 80117cc:	d0ef      	beq.n	80117ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80117ce:	4b20      	ldr	r3, [pc, #128]	@ (8011850 <xPortStartScheduler+0xd8>)
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	f1c3 0307 	rsb	r3, r3, #7
 80117d6:	2b04      	cmp	r3, #4
 80117d8:	d00b      	beq.n	80117f2 <xPortStartScheduler+0x7a>
	__asm volatile
 80117da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117de:	f383 8811 	msr	BASEPRI, r3
 80117e2:	f3bf 8f6f 	isb	sy
 80117e6:	f3bf 8f4f 	dsb	sy
 80117ea:	60bb      	str	r3, [r7, #8]
}
 80117ec:	bf00      	nop
 80117ee:	bf00      	nop
 80117f0:	e7fd      	b.n	80117ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80117f2:	4b17      	ldr	r3, [pc, #92]	@ (8011850 <xPortStartScheduler+0xd8>)
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	021b      	lsls	r3, r3, #8
 80117f8:	4a15      	ldr	r2, [pc, #84]	@ (8011850 <xPortStartScheduler+0xd8>)
 80117fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80117fc:	4b14      	ldr	r3, [pc, #80]	@ (8011850 <xPortStartScheduler+0xd8>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011804:	4a12      	ldr	r2, [pc, #72]	@ (8011850 <xPortStartScheduler+0xd8>)
 8011806:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	b2da      	uxtb	r2, r3
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011810:	4b10      	ldr	r3, [pc, #64]	@ (8011854 <xPortStartScheduler+0xdc>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	4a0f      	ldr	r2, [pc, #60]	@ (8011854 <xPortStartScheduler+0xdc>)
 8011816:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801181a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801181c:	4b0d      	ldr	r3, [pc, #52]	@ (8011854 <xPortStartScheduler+0xdc>)
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	4a0c      	ldr	r2, [pc, #48]	@ (8011854 <xPortStartScheduler+0xdc>)
 8011822:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011826:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011828:	f000 f8b8 	bl	801199c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801182c:	4b0a      	ldr	r3, [pc, #40]	@ (8011858 <xPortStartScheduler+0xe0>)
 801182e:	2200      	movs	r2, #0
 8011830:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011832:	f7ff ff91 	bl	8011758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011836:	f7ff fa5b 	bl	8010cf0 <vTaskSwitchContext>
	prvTaskExitError();
 801183a:	f7ff ff4b 	bl	80116d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801183e:	2300      	movs	r3, #0
}
 8011840:	4618      	mov	r0, r3
 8011842:	3710      	adds	r7, #16
 8011844:	46bd      	mov	sp, r7
 8011846:	bd80      	pop	{r7, pc}
 8011848:	e000e400 	.word	0xe000e400
 801184c:	20002c04 	.word	0x20002c04
 8011850:	20002c08 	.word	0x20002c08
 8011854:	e000ed20 	.word	0xe000ed20
 8011858:	20000030 	.word	0x20000030

0801185c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801185c:	b480      	push	{r7}
 801185e:	b083      	sub	sp, #12
 8011860:	af00      	add	r7, sp, #0
	__asm volatile
 8011862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011866:	f383 8811 	msr	BASEPRI, r3
 801186a:	f3bf 8f6f 	isb	sy
 801186e:	f3bf 8f4f 	dsb	sy
 8011872:	607b      	str	r3, [r7, #4]
}
 8011874:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011876:	4b0f      	ldr	r3, [pc, #60]	@ (80118b4 <vPortEnterCritical+0x58>)
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	3301      	adds	r3, #1
 801187c:	4a0d      	ldr	r2, [pc, #52]	@ (80118b4 <vPortEnterCritical+0x58>)
 801187e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011880:	4b0c      	ldr	r3, [pc, #48]	@ (80118b4 <vPortEnterCritical+0x58>)
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	2b01      	cmp	r3, #1
 8011886:	d110      	bne.n	80118aa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011888:	4b0b      	ldr	r3, [pc, #44]	@ (80118b8 <vPortEnterCritical+0x5c>)
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	b2db      	uxtb	r3, r3
 801188e:	2b00      	cmp	r3, #0
 8011890:	d00b      	beq.n	80118aa <vPortEnterCritical+0x4e>
	__asm volatile
 8011892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011896:	f383 8811 	msr	BASEPRI, r3
 801189a:	f3bf 8f6f 	isb	sy
 801189e:	f3bf 8f4f 	dsb	sy
 80118a2:	603b      	str	r3, [r7, #0]
}
 80118a4:	bf00      	nop
 80118a6:	bf00      	nop
 80118a8:	e7fd      	b.n	80118a6 <vPortEnterCritical+0x4a>
	}
}
 80118aa:	bf00      	nop
 80118ac:	370c      	adds	r7, #12
 80118ae:	46bd      	mov	sp, r7
 80118b0:	bc80      	pop	{r7}
 80118b2:	4770      	bx	lr
 80118b4:	20000030 	.word	0x20000030
 80118b8:	e000ed04 	.word	0xe000ed04

080118bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80118bc:	b480      	push	{r7}
 80118be:	b083      	sub	sp, #12
 80118c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80118c2:	4b12      	ldr	r3, [pc, #72]	@ (801190c <vPortExitCritical+0x50>)
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d10b      	bne.n	80118e2 <vPortExitCritical+0x26>
	__asm volatile
 80118ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118ce:	f383 8811 	msr	BASEPRI, r3
 80118d2:	f3bf 8f6f 	isb	sy
 80118d6:	f3bf 8f4f 	dsb	sy
 80118da:	607b      	str	r3, [r7, #4]
}
 80118dc:	bf00      	nop
 80118de:	bf00      	nop
 80118e0:	e7fd      	b.n	80118de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80118e2:	4b0a      	ldr	r3, [pc, #40]	@ (801190c <vPortExitCritical+0x50>)
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	3b01      	subs	r3, #1
 80118e8:	4a08      	ldr	r2, [pc, #32]	@ (801190c <vPortExitCritical+0x50>)
 80118ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80118ec:	4b07      	ldr	r3, [pc, #28]	@ (801190c <vPortExitCritical+0x50>)
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d105      	bne.n	8011900 <vPortExitCritical+0x44>
 80118f4:	2300      	movs	r3, #0
 80118f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	f383 8811 	msr	BASEPRI, r3
}
 80118fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011900:	bf00      	nop
 8011902:	370c      	adds	r7, #12
 8011904:	46bd      	mov	sp, r7
 8011906:	bc80      	pop	{r7}
 8011908:	4770      	bx	lr
 801190a:	bf00      	nop
 801190c:	20000030 	.word	0x20000030

08011910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011910:	f3ef 8009 	mrs	r0, PSP
 8011914:	f3bf 8f6f 	isb	sy
 8011918:	4b0d      	ldr	r3, [pc, #52]	@ (8011950 <pxCurrentTCBConst>)
 801191a:	681a      	ldr	r2, [r3, #0]
 801191c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8011920:	6010      	str	r0, [r2, #0]
 8011922:	e92d 4008 	stmdb	sp!, {r3, lr}
 8011926:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801192a:	f380 8811 	msr	BASEPRI, r0
 801192e:	f7ff f9df 	bl	8010cf0 <vTaskSwitchContext>
 8011932:	f04f 0000 	mov.w	r0, #0
 8011936:	f380 8811 	msr	BASEPRI, r0
 801193a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801193e:	6819      	ldr	r1, [r3, #0]
 8011940:	6808      	ldr	r0, [r1, #0]
 8011942:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8011946:	f380 8809 	msr	PSP, r0
 801194a:	f3bf 8f6f 	isb	sy
 801194e:	4770      	bx	lr

08011950 <pxCurrentTCBConst>:
 8011950:	20002ad8 	.word	0x20002ad8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011954:	bf00      	nop
 8011956:	bf00      	nop

08011958 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b082      	sub	sp, #8
 801195c:	af00      	add	r7, sp, #0
	__asm volatile
 801195e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011962:	f383 8811 	msr	BASEPRI, r3
 8011966:	f3bf 8f6f 	isb	sy
 801196a:	f3bf 8f4f 	dsb	sy
 801196e:	607b      	str	r3, [r7, #4]
}
 8011970:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011972:	f7ff f8ff 	bl	8010b74 <xTaskIncrementTick>
 8011976:	4603      	mov	r3, r0
 8011978:	2b00      	cmp	r3, #0
 801197a:	d003      	beq.n	8011984 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801197c:	4b06      	ldr	r3, [pc, #24]	@ (8011998 <SysTick_Handler+0x40>)
 801197e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011982:	601a      	str	r2, [r3, #0]
 8011984:	2300      	movs	r3, #0
 8011986:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011988:	683b      	ldr	r3, [r7, #0]
 801198a:	f383 8811 	msr	BASEPRI, r3
}
 801198e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011990:	bf00      	nop
 8011992:	3708      	adds	r7, #8
 8011994:	46bd      	mov	sp, r7
 8011996:	bd80      	pop	{r7, pc}
 8011998:	e000ed04 	.word	0xe000ed04

0801199c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801199c:	b480      	push	{r7}
 801199e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80119a0:	4b0a      	ldr	r3, [pc, #40]	@ (80119cc <vPortSetupTimerInterrupt+0x30>)
 80119a2:	2200      	movs	r2, #0
 80119a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80119a6:	4b0a      	ldr	r3, [pc, #40]	@ (80119d0 <vPortSetupTimerInterrupt+0x34>)
 80119a8:	2200      	movs	r2, #0
 80119aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80119ac:	4b09      	ldr	r3, [pc, #36]	@ (80119d4 <vPortSetupTimerInterrupt+0x38>)
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	4a09      	ldr	r2, [pc, #36]	@ (80119d8 <vPortSetupTimerInterrupt+0x3c>)
 80119b2:	fba2 2303 	umull	r2, r3, r2, r3
 80119b6:	099b      	lsrs	r3, r3, #6
 80119b8:	4a08      	ldr	r2, [pc, #32]	@ (80119dc <vPortSetupTimerInterrupt+0x40>)
 80119ba:	3b01      	subs	r3, #1
 80119bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80119be:	4b03      	ldr	r3, [pc, #12]	@ (80119cc <vPortSetupTimerInterrupt+0x30>)
 80119c0:	2207      	movs	r2, #7
 80119c2:	601a      	str	r2, [r3, #0]
}
 80119c4:	bf00      	nop
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bc80      	pop	{r7}
 80119ca:	4770      	bx	lr
 80119cc:	e000e010 	.word	0xe000e010
 80119d0:	e000e018 	.word	0xe000e018
 80119d4:	20000024 	.word	0x20000024
 80119d8:	10624dd3 	.word	0x10624dd3
 80119dc:	e000e014 	.word	0xe000e014

080119e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80119e0:	b480      	push	{r7}
 80119e2:	b085      	sub	sp, #20
 80119e4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80119e6:	f3ef 8305 	mrs	r3, IPSR
 80119ea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	2b0f      	cmp	r3, #15
 80119f0:	d915      	bls.n	8011a1e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80119f2:	4a17      	ldr	r2, [pc, #92]	@ (8011a50 <vPortValidateInterruptPriority+0x70>)
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	4413      	add	r3, r2
 80119f8:	781b      	ldrb	r3, [r3, #0]
 80119fa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80119fc:	4b15      	ldr	r3, [pc, #84]	@ (8011a54 <vPortValidateInterruptPriority+0x74>)
 80119fe:	781b      	ldrb	r3, [r3, #0]
 8011a00:	7afa      	ldrb	r2, [r7, #11]
 8011a02:	429a      	cmp	r2, r3
 8011a04:	d20b      	bcs.n	8011a1e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8011a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a0a:	f383 8811 	msr	BASEPRI, r3
 8011a0e:	f3bf 8f6f 	isb	sy
 8011a12:	f3bf 8f4f 	dsb	sy
 8011a16:	607b      	str	r3, [r7, #4]
}
 8011a18:	bf00      	nop
 8011a1a:	bf00      	nop
 8011a1c:	e7fd      	b.n	8011a1a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8011a58 <vPortValidateInterruptPriority+0x78>)
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8011a26:	4b0d      	ldr	r3, [pc, #52]	@ (8011a5c <vPortValidateInterruptPriority+0x7c>)
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	429a      	cmp	r2, r3
 8011a2c:	d90b      	bls.n	8011a46 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8011a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a32:	f383 8811 	msr	BASEPRI, r3
 8011a36:	f3bf 8f6f 	isb	sy
 8011a3a:	f3bf 8f4f 	dsb	sy
 8011a3e:	603b      	str	r3, [r7, #0]
}
 8011a40:	bf00      	nop
 8011a42:	bf00      	nop
 8011a44:	e7fd      	b.n	8011a42 <vPortValidateInterruptPriority+0x62>
	}
 8011a46:	bf00      	nop
 8011a48:	3714      	adds	r7, #20
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bc80      	pop	{r7}
 8011a4e:	4770      	bx	lr
 8011a50:	e000e3f0 	.word	0xe000e3f0
 8011a54:	20002c04 	.word	0x20002c04
 8011a58:	e000ed0c 	.word	0xe000ed0c
 8011a5c:	20002c08 	.word	0x20002c08

08011a60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b08a      	sub	sp, #40	@ 0x28
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011a68:	2300      	movs	r3, #0
 8011a6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011a6c:	f7fe ffc8 	bl	8010a00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011a70:	4b5a      	ldr	r3, [pc, #360]	@ (8011bdc <pvPortMalloc+0x17c>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d101      	bne.n	8011a7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011a78:	f000 f916 	bl	8011ca8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011a7c:	4b58      	ldr	r3, [pc, #352]	@ (8011be0 <pvPortMalloc+0x180>)
 8011a7e:	681a      	ldr	r2, [r3, #0]
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	4013      	ands	r3, r2
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	f040 8090 	bne.w	8011baa <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d01e      	beq.n	8011ace <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8011a90:	2208      	movs	r2, #8
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	4413      	add	r3, r2
 8011a96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	f003 0307 	and.w	r3, r3, #7
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d015      	beq.n	8011ace <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	f023 0307 	bic.w	r3, r3, #7
 8011aa8:	3308      	adds	r3, #8
 8011aaa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f003 0307 	and.w	r3, r3, #7
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d00b      	beq.n	8011ace <pvPortMalloc+0x6e>
	__asm volatile
 8011ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011aba:	f383 8811 	msr	BASEPRI, r3
 8011abe:	f3bf 8f6f 	isb	sy
 8011ac2:	f3bf 8f4f 	dsb	sy
 8011ac6:	617b      	str	r3, [r7, #20]
}
 8011ac8:	bf00      	nop
 8011aca:	bf00      	nop
 8011acc:	e7fd      	b.n	8011aca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d06a      	beq.n	8011baa <pvPortMalloc+0x14a>
 8011ad4:	4b43      	ldr	r3, [pc, #268]	@ (8011be4 <pvPortMalloc+0x184>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	687a      	ldr	r2, [r7, #4]
 8011ada:	429a      	cmp	r2, r3
 8011adc:	d865      	bhi.n	8011baa <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011ade:	4b42      	ldr	r3, [pc, #264]	@ (8011be8 <pvPortMalloc+0x188>)
 8011ae0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011ae2:	4b41      	ldr	r3, [pc, #260]	@ (8011be8 <pvPortMalloc+0x188>)
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011ae8:	e004      	b.n	8011af4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8011aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011af6:	685b      	ldr	r3, [r3, #4]
 8011af8:	687a      	ldr	r2, [r7, #4]
 8011afa:	429a      	cmp	r2, r3
 8011afc:	d903      	bls.n	8011b06 <pvPortMalloc+0xa6>
 8011afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d1f1      	bne.n	8011aea <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011b06:	4b35      	ldr	r3, [pc, #212]	@ (8011bdc <pvPortMalloc+0x17c>)
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011b0c:	429a      	cmp	r2, r3
 8011b0e:	d04c      	beq.n	8011baa <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011b10:	6a3b      	ldr	r3, [r7, #32]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	2208      	movs	r2, #8
 8011b16:	4413      	add	r3, r2
 8011b18:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b1c:	681a      	ldr	r2, [r3, #0]
 8011b1e:	6a3b      	ldr	r3, [r7, #32]
 8011b20:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b24:	685a      	ldr	r2, [r3, #4]
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	1ad2      	subs	r2, r2, r3
 8011b2a:	2308      	movs	r3, #8
 8011b2c:	005b      	lsls	r3, r3, #1
 8011b2e:	429a      	cmp	r2, r3
 8011b30:	d920      	bls.n	8011b74 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	4413      	add	r3, r2
 8011b38:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011b3a:	69bb      	ldr	r3, [r7, #24]
 8011b3c:	f003 0307 	and.w	r3, r3, #7
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d00b      	beq.n	8011b5c <pvPortMalloc+0xfc>
	__asm volatile
 8011b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b48:	f383 8811 	msr	BASEPRI, r3
 8011b4c:	f3bf 8f6f 	isb	sy
 8011b50:	f3bf 8f4f 	dsb	sy
 8011b54:	613b      	str	r3, [r7, #16]
}
 8011b56:	bf00      	nop
 8011b58:	bf00      	nop
 8011b5a:	e7fd      	b.n	8011b58 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b5e:	685a      	ldr	r2, [r3, #4]
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	1ad2      	subs	r2, r2, r3
 8011b64:	69bb      	ldr	r3, [r7, #24]
 8011b66:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b6a:	687a      	ldr	r2, [r7, #4]
 8011b6c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011b6e:	69b8      	ldr	r0, [r7, #24]
 8011b70:	f000 f8fc 	bl	8011d6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011b74:	4b1b      	ldr	r3, [pc, #108]	@ (8011be4 <pvPortMalloc+0x184>)
 8011b76:	681a      	ldr	r2, [r3, #0]
 8011b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b7a:	685b      	ldr	r3, [r3, #4]
 8011b7c:	1ad3      	subs	r3, r2, r3
 8011b7e:	4a19      	ldr	r2, [pc, #100]	@ (8011be4 <pvPortMalloc+0x184>)
 8011b80:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011b82:	4b18      	ldr	r3, [pc, #96]	@ (8011be4 <pvPortMalloc+0x184>)
 8011b84:	681a      	ldr	r2, [r3, #0]
 8011b86:	4b19      	ldr	r3, [pc, #100]	@ (8011bec <pvPortMalloc+0x18c>)
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	429a      	cmp	r2, r3
 8011b8c:	d203      	bcs.n	8011b96 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011b8e:	4b15      	ldr	r3, [pc, #84]	@ (8011be4 <pvPortMalloc+0x184>)
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	4a16      	ldr	r2, [pc, #88]	@ (8011bec <pvPortMalloc+0x18c>)
 8011b94:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b98:	685a      	ldr	r2, [r3, #4]
 8011b9a:	4b11      	ldr	r3, [pc, #68]	@ (8011be0 <pvPortMalloc+0x180>)
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	431a      	orrs	r2, r3
 8011ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ba2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011baa:	f7fe ff37 	bl	8010a1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011bae:	69fb      	ldr	r3, [r7, #28]
 8011bb0:	f003 0307 	and.w	r3, r3, #7
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d00b      	beq.n	8011bd0 <pvPortMalloc+0x170>
	__asm volatile
 8011bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bbc:	f383 8811 	msr	BASEPRI, r3
 8011bc0:	f3bf 8f6f 	isb	sy
 8011bc4:	f3bf 8f4f 	dsb	sy
 8011bc8:	60fb      	str	r3, [r7, #12]
}
 8011bca:	bf00      	nop
 8011bcc:	bf00      	nop
 8011bce:	e7fd      	b.n	8011bcc <pvPortMalloc+0x16c>
	return pvReturn;
 8011bd0:	69fb      	ldr	r3, [r7, #28]
}
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	3728      	adds	r7, #40	@ 0x28
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}
 8011bda:	bf00      	nop
 8011bdc:	20003814 	.word	0x20003814
 8011be0:	20003820 	.word	0x20003820
 8011be4:	20003818 	.word	0x20003818
 8011be8:	2000380c 	.word	0x2000380c
 8011bec:	2000381c 	.word	0x2000381c

08011bf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b086      	sub	sp, #24
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d04a      	beq.n	8011c98 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011c02:	2308      	movs	r3, #8
 8011c04:	425b      	negs	r3, r3
 8011c06:	697a      	ldr	r2, [r7, #20]
 8011c08:	4413      	add	r3, r2
 8011c0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011c0c:	697b      	ldr	r3, [r7, #20]
 8011c0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011c10:	693b      	ldr	r3, [r7, #16]
 8011c12:	685a      	ldr	r2, [r3, #4]
 8011c14:	4b22      	ldr	r3, [pc, #136]	@ (8011ca0 <vPortFree+0xb0>)
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	4013      	ands	r3, r2
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d10b      	bne.n	8011c36 <vPortFree+0x46>
	__asm volatile
 8011c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c22:	f383 8811 	msr	BASEPRI, r3
 8011c26:	f3bf 8f6f 	isb	sy
 8011c2a:	f3bf 8f4f 	dsb	sy
 8011c2e:	60fb      	str	r3, [r7, #12]
}
 8011c30:	bf00      	nop
 8011c32:	bf00      	nop
 8011c34:	e7fd      	b.n	8011c32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011c36:	693b      	ldr	r3, [r7, #16]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d00b      	beq.n	8011c56 <vPortFree+0x66>
	__asm volatile
 8011c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c42:	f383 8811 	msr	BASEPRI, r3
 8011c46:	f3bf 8f6f 	isb	sy
 8011c4a:	f3bf 8f4f 	dsb	sy
 8011c4e:	60bb      	str	r3, [r7, #8]
}
 8011c50:	bf00      	nop
 8011c52:	bf00      	nop
 8011c54:	e7fd      	b.n	8011c52 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011c56:	693b      	ldr	r3, [r7, #16]
 8011c58:	685a      	ldr	r2, [r3, #4]
 8011c5a:	4b11      	ldr	r3, [pc, #68]	@ (8011ca0 <vPortFree+0xb0>)
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	4013      	ands	r3, r2
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d019      	beq.n	8011c98 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011c64:	693b      	ldr	r3, [r7, #16]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d115      	bne.n	8011c98 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011c6c:	693b      	ldr	r3, [r7, #16]
 8011c6e:	685a      	ldr	r2, [r3, #4]
 8011c70:	4b0b      	ldr	r3, [pc, #44]	@ (8011ca0 <vPortFree+0xb0>)
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	43db      	mvns	r3, r3
 8011c76:	401a      	ands	r2, r3
 8011c78:	693b      	ldr	r3, [r7, #16]
 8011c7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011c7c:	f7fe fec0 	bl	8010a00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011c80:	693b      	ldr	r3, [r7, #16]
 8011c82:	685a      	ldr	r2, [r3, #4]
 8011c84:	4b07      	ldr	r3, [pc, #28]	@ (8011ca4 <vPortFree+0xb4>)
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	4413      	add	r3, r2
 8011c8a:	4a06      	ldr	r2, [pc, #24]	@ (8011ca4 <vPortFree+0xb4>)
 8011c8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011c8e:	6938      	ldr	r0, [r7, #16]
 8011c90:	f000 f86c 	bl	8011d6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011c94:	f7fe fec2 	bl	8010a1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011c98:	bf00      	nop
 8011c9a:	3718      	adds	r7, #24
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	bd80      	pop	{r7, pc}
 8011ca0:	20003820 	.word	0x20003820
 8011ca4:	20003818 	.word	0x20003818

08011ca8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011ca8:	b480      	push	{r7}
 8011caa:	b085      	sub	sp, #20
 8011cac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011cae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8011cb2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011cb4:	4b27      	ldr	r3, [pc, #156]	@ (8011d54 <prvHeapInit+0xac>)
 8011cb6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	f003 0307 	and.w	r3, r3, #7
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d00c      	beq.n	8011cdc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	3307      	adds	r3, #7
 8011cc6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	f023 0307 	bic.w	r3, r3, #7
 8011cce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011cd0:	68ba      	ldr	r2, [r7, #8]
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	1ad3      	subs	r3, r2, r3
 8011cd6:	4a1f      	ldr	r2, [pc, #124]	@ (8011d54 <prvHeapInit+0xac>)
 8011cd8:	4413      	add	r3, r2
 8011cda:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8011d58 <prvHeapInit+0xb0>)
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8011d58 <prvHeapInit+0xb0>)
 8011ce8:	2200      	movs	r2, #0
 8011cea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	68ba      	ldr	r2, [r7, #8]
 8011cf0:	4413      	add	r3, r2
 8011cf2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011cf4:	2208      	movs	r2, #8
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	1a9b      	subs	r3, r3, r2
 8011cfa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	f023 0307 	bic.w	r3, r3, #7
 8011d02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	4a15      	ldr	r2, [pc, #84]	@ (8011d5c <prvHeapInit+0xb4>)
 8011d08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011d0a:	4b14      	ldr	r3, [pc, #80]	@ (8011d5c <prvHeapInit+0xb4>)
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	2200      	movs	r2, #0
 8011d10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011d12:	4b12      	ldr	r3, [pc, #72]	@ (8011d5c <prvHeapInit+0xb4>)
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	2200      	movs	r2, #0
 8011d18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011d1e:	683b      	ldr	r3, [r7, #0]
 8011d20:	68fa      	ldr	r2, [r7, #12]
 8011d22:	1ad2      	subs	r2, r2, r3
 8011d24:	683b      	ldr	r3, [r7, #0]
 8011d26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011d28:	4b0c      	ldr	r3, [pc, #48]	@ (8011d5c <prvHeapInit+0xb4>)
 8011d2a:	681a      	ldr	r2, [r3, #0]
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011d30:	683b      	ldr	r3, [r7, #0]
 8011d32:	685b      	ldr	r3, [r3, #4]
 8011d34:	4a0a      	ldr	r2, [pc, #40]	@ (8011d60 <prvHeapInit+0xb8>)
 8011d36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011d38:	683b      	ldr	r3, [r7, #0]
 8011d3a:	685b      	ldr	r3, [r3, #4]
 8011d3c:	4a09      	ldr	r2, [pc, #36]	@ (8011d64 <prvHeapInit+0xbc>)
 8011d3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011d40:	4b09      	ldr	r3, [pc, #36]	@ (8011d68 <prvHeapInit+0xc0>)
 8011d42:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8011d46:	601a      	str	r2, [r3, #0]
}
 8011d48:	bf00      	nop
 8011d4a:	3714      	adds	r7, #20
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	bc80      	pop	{r7}
 8011d50:	4770      	bx	lr
 8011d52:	bf00      	nop
 8011d54:	20002c0c 	.word	0x20002c0c
 8011d58:	2000380c 	.word	0x2000380c
 8011d5c:	20003814 	.word	0x20003814
 8011d60:	2000381c 	.word	0x2000381c
 8011d64:	20003818 	.word	0x20003818
 8011d68:	20003820 	.word	0x20003820

08011d6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011d6c:	b480      	push	{r7}
 8011d6e:	b085      	sub	sp, #20
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011d74:	4b27      	ldr	r3, [pc, #156]	@ (8011e14 <prvInsertBlockIntoFreeList+0xa8>)
 8011d76:	60fb      	str	r3, [r7, #12]
 8011d78:	e002      	b.n	8011d80 <prvInsertBlockIntoFreeList+0x14>
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	60fb      	str	r3, [r7, #12]
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	687a      	ldr	r2, [r7, #4]
 8011d86:	429a      	cmp	r2, r3
 8011d88:	d8f7      	bhi.n	8011d7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	685b      	ldr	r3, [r3, #4]
 8011d92:	68ba      	ldr	r2, [r7, #8]
 8011d94:	4413      	add	r3, r2
 8011d96:	687a      	ldr	r2, [r7, #4]
 8011d98:	429a      	cmp	r2, r3
 8011d9a:	d108      	bne.n	8011dae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	685a      	ldr	r2, [r3, #4]
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	685b      	ldr	r3, [r3, #4]
 8011da4:	441a      	add	r2, r3
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	685b      	ldr	r3, [r3, #4]
 8011db6:	68ba      	ldr	r2, [r7, #8]
 8011db8:	441a      	add	r2, r3
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	429a      	cmp	r2, r3
 8011dc0:	d118      	bne.n	8011df4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	681a      	ldr	r2, [r3, #0]
 8011dc6:	4b14      	ldr	r3, [pc, #80]	@ (8011e18 <prvInsertBlockIntoFreeList+0xac>)
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	429a      	cmp	r2, r3
 8011dcc:	d00d      	beq.n	8011dea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	685a      	ldr	r2, [r3, #4]
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	685b      	ldr	r3, [r3, #4]
 8011dd8:	441a      	add	r2, r3
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	681a      	ldr	r2, [r3, #0]
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	601a      	str	r2, [r3, #0]
 8011de8:	e008      	b.n	8011dfc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011dea:	4b0b      	ldr	r3, [pc, #44]	@ (8011e18 <prvInsertBlockIntoFreeList+0xac>)
 8011dec:	681a      	ldr	r2, [r3, #0]
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	601a      	str	r2, [r3, #0]
 8011df2:	e003      	b.n	8011dfc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	681a      	ldr	r2, [r3, #0]
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011dfc:	68fa      	ldr	r2, [r7, #12]
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	429a      	cmp	r2, r3
 8011e02:	d002      	beq.n	8011e0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	687a      	ldr	r2, [r7, #4]
 8011e08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011e0a:	bf00      	nop
 8011e0c:	3714      	adds	r7, #20
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bc80      	pop	{r7}
 8011e12:	4770      	bx	lr
 8011e14:	2000380c 	.word	0x2000380c
 8011e18:	20003814 	.word	0x20003814

08011e1c <calloc>:
 8011e1c:	4b02      	ldr	r3, [pc, #8]	@ (8011e28 <calloc+0xc>)
 8011e1e:	460a      	mov	r2, r1
 8011e20:	4601      	mov	r1, r0
 8011e22:	6818      	ldr	r0, [r3, #0]
 8011e24:	f000 b802 	b.w	8011e2c <_calloc_r>
 8011e28:	20000034 	.word	0x20000034

08011e2c <_calloc_r>:
 8011e2c:	b570      	push	{r4, r5, r6, lr}
 8011e2e:	fba1 5402 	umull	r5, r4, r1, r2
 8011e32:	b93c      	cbnz	r4, 8011e44 <_calloc_r+0x18>
 8011e34:	4629      	mov	r1, r5
 8011e36:	f000 f82f 	bl	8011e98 <_malloc_r>
 8011e3a:	4606      	mov	r6, r0
 8011e3c:	b928      	cbnz	r0, 8011e4a <_calloc_r+0x1e>
 8011e3e:	2600      	movs	r6, #0
 8011e40:	4630      	mov	r0, r6
 8011e42:	bd70      	pop	{r4, r5, r6, pc}
 8011e44:	220c      	movs	r2, #12
 8011e46:	6002      	str	r2, [r0, #0]
 8011e48:	e7f9      	b.n	8011e3e <_calloc_r+0x12>
 8011e4a:	462a      	mov	r2, r5
 8011e4c:	4621      	mov	r1, r4
 8011e4e:	f000 f8af 	bl	8011fb0 <memset>
 8011e52:	e7f5      	b.n	8011e40 <_calloc_r+0x14>

08011e54 <sbrk_aligned>:
 8011e54:	b570      	push	{r4, r5, r6, lr}
 8011e56:	4e0f      	ldr	r6, [pc, #60]	@ (8011e94 <sbrk_aligned+0x40>)
 8011e58:	460c      	mov	r4, r1
 8011e5a:	6831      	ldr	r1, [r6, #0]
 8011e5c:	4605      	mov	r5, r0
 8011e5e:	b911      	cbnz	r1, 8011e66 <sbrk_aligned+0x12>
 8011e60:	f000 f8ae 	bl	8011fc0 <_sbrk_r>
 8011e64:	6030      	str	r0, [r6, #0]
 8011e66:	4621      	mov	r1, r4
 8011e68:	4628      	mov	r0, r5
 8011e6a:	f000 f8a9 	bl	8011fc0 <_sbrk_r>
 8011e6e:	1c43      	adds	r3, r0, #1
 8011e70:	d103      	bne.n	8011e7a <sbrk_aligned+0x26>
 8011e72:	f04f 34ff 	mov.w	r4, #4294967295
 8011e76:	4620      	mov	r0, r4
 8011e78:	bd70      	pop	{r4, r5, r6, pc}
 8011e7a:	1cc4      	adds	r4, r0, #3
 8011e7c:	f024 0403 	bic.w	r4, r4, #3
 8011e80:	42a0      	cmp	r0, r4
 8011e82:	d0f8      	beq.n	8011e76 <sbrk_aligned+0x22>
 8011e84:	1a21      	subs	r1, r4, r0
 8011e86:	4628      	mov	r0, r5
 8011e88:	f000 f89a 	bl	8011fc0 <_sbrk_r>
 8011e8c:	3001      	adds	r0, #1
 8011e8e:	d1f2      	bne.n	8011e76 <sbrk_aligned+0x22>
 8011e90:	e7ef      	b.n	8011e72 <sbrk_aligned+0x1e>
 8011e92:	bf00      	nop
 8011e94:	20003824 	.word	0x20003824

08011e98 <_malloc_r>:
 8011e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e9c:	1ccd      	adds	r5, r1, #3
 8011e9e:	f025 0503 	bic.w	r5, r5, #3
 8011ea2:	3508      	adds	r5, #8
 8011ea4:	2d0c      	cmp	r5, #12
 8011ea6:	bf38      	it	cc
 8011ea8:	250c      	movcc	r5, #12
 8011eaa:	2d00      	cmp	r5, #0
 8011eac:	4606      	mov	r6, r0
 8011eae:	db01      	blt.n	8011eb4 <_malloc_r+0x1c>
 8011eb0:	42a9      	cmp	r1, r5
 8011eb2:	d904      	bls.n	8011ebe <_malloc_r+0x26>
 8011eb4:	230c      	movs	r3, #12
 8011eb6:	6033      	str	r3, [r6, #0]
 8011eb8:	2000      	movs	r0, #0
 8011eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ebe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011f94 <_malloc_r+0xfc>
 8011ec2:	f000 f869 	bl	8011f98 <__malloc_lock>
 8011ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8011eca:	461c      	mov	r4, r3
 8011ecc:	bb44      	cbnz	r4, 8011f20 <_malloc_r+0x88>
 8011ece:	4629      	mov	r1, r5
 8011ed0:	4630      	mov	r0, r6
 8011ed2:	f7ff ffbf 	bl	8011e54 <sbrk_aligned>
 8011ed6:	1c43      	adds	r3, r0, #1
 8011ed8:	4604      	mov	r4, r0
 8011eda:	d158      	bne.n	8011f8e <_malloc_r+0xf6>
 8011edc:	f8d8 4000 	ldr.w	r4, [r8]
 8011ee0:	4627      	mov	r7, r4
 8011ee2:	2f00      	cmp	r7, #0
 8011ee4:	d143      	bne.n	8011f6e <_malloc_r+0xd6>
 8011ee6:	2c00      	cmp	r4, #0
 8011ee8:	d04b      	beq.n	8011f82 <_malloc_r+0xea>
 8011eea:	6823      	ldr	r3, [r4, #0]
 8011eec:	4639      	mov	r1, r7
 8011eee:	4630      	mov	r0, r6
 8011ef0:	eb04 0903 	add.w	r9, r4, r3
 8011ef4:	f000 f864 	bl	8011fc0 <_sbrk_r>
 8011ef8:	4581      	cmp	r9, r0
 8011efa:	d142      	bne.n	8011f82 <_malloc_r+0xea>
 8011efc:	6821      	ldr	r1, [r4, #0]
 8011efe:	4630      	mov	r0, r6
 8011f00:	1a6d      	subs	r5, r5, r1
 8011f02:	4629      	mov	r1, r5
 8011f04:	f7ff ffa6 	bl	8011e54 <sbrk_aligned>
 8011f08:	3001      	adds	r0, #1
 8011f0a:	d03a      	beq.n	8011f82 <_malloc_r+0xea>
 8011f0c:	6823      	ldr	r3, [r4, #0]
 8011f0e:	442b      	add	r3, r5
 8011f10:	6023      	str	r3, [r4, #0]
 8011f12:	f8d8 3000 	ldr.w	r3, [r8]
 8011f16:	685a      	ldr	r2, [r3, #4]
 8011f18:	bb62      	cbnz	r2, 8011f74 <_malloc_r+0xdc>
 8011f1a:	f8c8 7000 	str.w	r7, [r8]
 8011f1e:	e00f      	b.n	8011f40 <_malloc_r+0xa8>
 8011f20:	6822      	ldr	r2, [r4, #0]
 8011f22:	1b52      	subs	r2, r2, r5
 8011f24:	d420      	bmi.n	8011f68 <_malloc_r+0xd0>
 8011f26:	2a0b      	cmp	r2, #11
 8011f28:	d917      	bls.n	8011f5a <_malloc_r+0xc2>
 8011f2a:	1961      	adds	r1, r4, r5
 8011f2c:	42a3      	cmp	r3, r4
 8011f2e:	6025      	str	r5, [r4, #0]
 8011f30:	bf18      	it	ne
 8011f32:	6059      	strne	r1, [r3, #4]
 8011f34:	6863      	ldr	r3, [r4, #4]
 8011f36:	bf08      	it	eq
 8011f38:	f8c8 1000 	streq.w	r1, [r8]
 8011f3c:	5162      	str	r2, [r4, r5]
 8011f3e:	604b      	str	r3, [r1, #4]
 8011f40:	4630      	mov	r0, r6
 8011f42:	f000 f82f 	bl	8011fa4 <__malloc_unlock>
 8011f46:	f104 000b 	add.w	r0, r4, #11
 8011f4a:	1d23      	adds	r3, r4, #4
 8011f4c:	f020 0007 	bic.w	r0, r0, #7
 8011f50:	1ac2      	subs	r2, r0, r3
 8011f52:	bf1c      	itt	ne
 8011f54:	1a1b      	subne	r3, r3, r0
 8011f56:	50a3      	strne	r3, [r4, r2]
 8011f58:	e7af      	b.n	8011eba <_malloc_r+0x22>
 8011f5a:	6862      	ldr	r2, [r4, #4]
 8011f5c:	42a3      	cmp	r3, r4
 8011f5e:	bf0c      	ite	eq
 8011f60:	f8c8 2000 	streq.w	r2, [r8]
 8011f64:	605a      	strne	r2, [r3, #4]
 8011f66:	e7eb      	b.n	8011f40 <_malloc_r+0xa8>
 8011f68:	4623      	mov	r3, r4
 8011f6a:	6864      	ldr	r4, [r4, #4]
 8011f6c:	e7ae      	b.n	8011ecc <_malloc_r+0x34>
 8011f6e:	463c      	mov	r4, r7
 8011f70:	687f      	ldr	r7, [r7, #4]
 8011f72:	e7b6      	b.n	8011ee2 <_malloc_r+0x4a>
 8011f74:	461a      	mov	r2, r3
 8011f76:	685b      	ldr	r3, [r3, #4]
 8011f78:	42a3      	cmp	r3, r4
 8011f7a:	d1fb      	bne.n	8011f74 <_malloc_r+0xdc>
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	6053      	str	r3, [r2, #4]
 8011f80:	e7de      	b.n	8011f40 <_malloc_r+0xa8>
 8011f82:	230c      	movs	r3, #12
 8011f84:	4630      	mov	r0, r6
 8011f86:	6033      	str	r3, [r6, #0]
 8011f88:	f000 f80c 	bl	8011fa4 <__malloc_unlock>
 8011f8c:	e794      	b.n	8011eb8 <_malloc_r+0x20>
 8011f8e:	6005      	str	r5, [r0, #0]
 8011f90:	e7d6      	b.n	8011f40 <_malloc_r+0xa8>
 8011f92:	bf00      	nop
 8011f94:	20003828 	.word	0x20003828

08011f98 <__malloc_lock>:
 8011f98:	4801      	ldr	r0, [pc, #4]	@ (8011fa0 <__malloc_lock+0x8>)
 8011f9a:	f000 b84b 	b.w	8012034 <__retarget_lock_acquire_recursive>
 8011f9e:	bf00      	nop
 8011fa0:	20003968 	.word	0x20003968

08011fa4 <__malloc_unlock>:
 8011fa4:	4801      	ldr	r0, [pc, #4]	@ (8011fac <__malloc_unlock+0x8>)
 8011fa6:	f000 b846 	b.w	8012036 <__retarget_lock_release_recursive>
 8011faa:	bf00      	nop
 8011fac:	20003968 	.word	0x20003968

08011fb0 <memset>:
 8011fb0:	4603      	mov	r3, r0
 8011fb2:	4402      	add	r2, r0
 8011fb4:	4293      	cmp	r3, r2
 8011fb6:	d100      	bne.n	8011fba <memset+0xa>
 8011fb8:	4770      	bx	lr
 8011fba:	f803 1b01 	strb.w	r1, [r3], #1
 8011fbe:	e7f9      	b.n	8011fb4 <memset+0x4>

08011fc0 <_sbrk_r>:
 8011fc0:	b538      	push	{r3, r4, r5, lr}
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	4d05      	ldr	r5, [pc, #20]	@ (8011fdc <_sbrk_r+0x1c>)
 8011fc6:	4604      	mov	r4, r0
 8011fc8:	4608      	mov	r0, r1
 8011fca:	602b      	str	r3, [r5, #0]
 8011fcc:	f7f2 f934 	bl	8004238 <_sbrk>
 8011fd0:	1c43      	adds	r3, r0, #1
 8011fd2:	d102      	bne.n	8011fda <_sbrk_r+0x1a>
 8011fd4:	682b      	ldr	r3, [r5, #0]
 8011fd6:	b103      	cbz	r3, 8011fda <_sbrk_r+0x1a>
 8011fd8:	6023      	str	r3, [r4, #0]
 8011fda:	bd38      	pop	{r3, r4, r5, pc}
 8011fdc:	20003964 	.word	0x20003964

08011fe0 <__errno>:
 8011fe0:	4b01      	ldr	r3, [pc, #4]	@ (8011fe8 <__errno+0x8>)
 8011fe2:	6818      	ldr	r0, [r3, #0]
 8011fe4:	4770      	bx	lr
 8011fe6:	bf00      	nop
 8011fe8:	20000034 	.word	0x20000034

08011fec <__libc_init_array>:
 8011fec:	b570      	push	{r4, r5, r6, lr}
 8011fee:	2600      	movs	r6, #0
 8011ff0:	4d0c      	ldr	r5, [pc, #48]	@ (8012024 <__libc_init_array+0x38>)
 8011ff2:	4c0d      	ldr	r4, [pc, #52]	@ (8012028 <__libc_init_array+0x3c>)
 8011ff4:	1b64      	subs	r4, r4, r5
 8011ff6:	10a4      	asrs	r4, r4, #2
 8011ff8:	42a6      	cmp	r6, r4
 8011ffa:	d109      	bne.n	8012010 <__libc_init_array+0x24>
 8011ffc:	f000 f9ae 	bl	801235c <_init>
 8012000:	2600      	movs	r6, #0
 8012002:	4d0a      	ldr	r5, [pc, #40]	@ (801202c <__libc_init_array+0x40>)
 8012004:	4c0a      	ldr	r4, [pc, #40]	@ (8012030 <__libc_init_array+0x44>)
 8012006:	1b64      	subs	r4, r4, r5
 8012008:	10a4      	asrs	r4, r4, #2
 801200a:	42a6      	cmp	r6, r4
 801200c:	d105      	bne.n	801201a <__libc_init_array+0x2e>
 801200e:	bd70      	pop	{r4, r5, r6, pc}
 8012010:	f855 3b04 	ldr.w	r3, [r5], #4
 8012014:	4798      	blx	r3
 8012016:	3601      	adds	r6, #1
 8012018:	e7ee      	b.n	8011ff8 <__libc_init_array+0xc>
 801201a:	f855 3b04 	ldr.w	r3, [r5], #4
 801201e:	4798      	blx	r3
 8012020:	3601      	adds	r6, #1
 8012022:	e7f2      	b.n	801200a <__libc_init_array+0x1e>
 8012024:	08012ad0 	.word	0x08012ad0
 8012028:	08012ad0 	.word	0x08012ad0
 801202c:	08012ad0 	.word	0x08012ad0
 8012030:	08012ad4 	.word	0x08012ad4

08012034 <__retarget_lock_acquire_recursive>:
 8012034:	4770      	bx	lr

08012036 <__retarget_lock_release_recursive>:
 8012036:	4770      	bx	lr

08012038 <memcpy>:
 8012038:	440a      	add	r2, r1
 801203a:	4291      	cmp	r1, r2
 801203c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012040:	d100      	bne.n	8012044 <memcpy+0xc>
 8012042:	4770      	bx	lr
 8012044:	b510      	push	{r4, lr}
 8012046:	f811 4b01 	ldrb.w	r4, [r1], #1
 801204a:	4291      	cmp	r1, r2
 801204c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012050:	d1f9      	bne.n	8012046 <memcpy+0xe>
 8012052:	bd10      	pop	{r4, pc}

08012054 <sqrt>:
 8012054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012056:	4606      	mov	r6, r0
 8012058:	460f      	mov	r7, r1
 801205a:	f000 f839 	bl	80120d0 <__ieee754_sqrt>
 801205e:	4632      	mov	r2, r6
 8012060:	4604      	mov	r4, r0
 8012062:	460d      	mov	r5, r1
 8012064:	463b      	mov	r3, r7
 8012066:	4630      	mov	r0, r6
 8012068:	4639      	mov	r1, r7
 801206a:	f7ee fd37 	bl	8000adc <__aeabi_dcmpun>
 801206e:	b990      	cbnz	r0, 8012096 <sqrt+0x42>
 8012070:	2200      	movs	r2, #0
 8012072:	2300      	movs	r3, #0
 8012074:	4630      	mov	r0, r6
 8012076:	4639      	mov	r1, r7
 8012078:	f7ee fd08 	bl	8000a8c <__aeabi_dcmplt>
 801207c:	b158      	cbz	r0, 8012096 <sqrt+0x42>
 801207e:	f7ff ffaf 	bl	8011fe0 <__errno>
 8012082:	2321      	movs	r3, #33	@ 0x21
 8012084:	2200      	movs	r2, #0
 8012086:	6003      	str	r3, [r0, #0]
 8012088:	2300      	movs	r3, #0
 801208a:	4610      	mov	r0, r2
 801208c:	4619      	mov	r1, r3
 801208e:	f7ee fbb5 	bl	80007fc <__aeabi_ddiv>
 8012092:	4604      	mov	r4, r0
 8012094:	460d      	mov	r5, r1
 8012096:	4620      	mov	r0, r4
 8012098:	4629      	mov	r1, r5
 801209a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801209c <sqrtf>:
 801209c:	b538      	push	{r3, r4, r5, lr}
 801209e:	4605      	mov	r5, r0
 80120a0:	f000 f8ec 	bl	801227c <__ieee754_sqrtf>
 80120a4:	4629      	mov	r1, r5
 80120a6:	4604      	mov	r4, r0
 80120a8:	4628      	mov	r0, r5
 80120aa:	f7ef f879 	bl	80011a0 <__aeabi_fcmpun>
 80120ae:	b968      	cbnz	r0, 80120cc <sqrtf+0x30>
 80120b0:	2100      	movs	r1, #0
 80120b2:	4628      	mov	r0, r5
 80120b4:	f7ef f84c 	bl	8001150 <__aeabi_fcmplt>
 80120b8:	b140      	cbz	r0, 80120cc <sqrtf+0x30>
 80120ba:	f7ff ff91 	bl	8011fe0 <__errno>
 80120be:	2321      	movs	r3, #33	@ 0x21
 80120c0:	2100      	movs	r1, #0
 80120c2:	6003      	str	r3, [r0, #0]
 80120c4:	4608      	mov	r0, r1
 80120c6:	f7ee ff59 	bl	8000f7c <__aeabi_fdiv>
 80120ca:	4604      	mov	r4, r0
 80120cc:	4620      	mov	r0, r4
 80120ce:	bd38      	pop	{r3, r4, r5, pc}

080120d0 <__ieee754_sqrt>:
 80120d0:	4a67      	ldr	r2, [pc, #412]	@ (8012270 <__ieee754_sqrt+0x1a0>)
 80120d2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120d6:	438a      	bics	r2, r1
 80120d8:	4606      	mov	r6, r0
 80120da:	460f      	mov	r7, r1
 80120dc:	460b      	mov	r3, r1
 80120de:	4604      	mov	r4, r0
 80120e0:	d10e      	bne.n	8012100 <__ieee754_sqrt+0x30>
 80120e2:	4602      	mov	r2, r0
 80120e4:	f7ee fa60 	bl	80005a8 <__aeabi_dmul>
 80120e8:	4602      	mov	r2, r0
 80120ea:	460b      	mov	r3, r1
 80120ec:	4630      	mov	r0, r6
 80120ee:	4639      	mov	r1, r7
 80120f0:	f7ee f8a4 	bl	800023c <__adddf3>
 80120f4:	4606      	mov	r6, r0
 80120f6:	460f      	mov	r7, r1
 80120f8:	4630      	mov	r0, r6
 80120fa:	4639      	mov	r1, r7
 80120fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012100:	2900      	cmp	r1, #0
 8012102:	dc0c      	bgt.n	801211e <__ieee754_sqrt+0x4e>
 8012104:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8012108:	4302      	orrs	r2, r0
 801210a:	d0f5      	beq.n	80120f8 <__ieee754_sqrt+0x28>
 801210c:	b189      	cbz	r1, 8012132 <__ieee754_sqrt+0x62>
 801210e:	4602      	mov	r2, r0
 8012110:	f7ee f892 	bl	8000238 <__aeabi_dsub>
 8012114:	4602      	mov	r2, r0
 8012116:	460b      	mov	r3, r1
 8012118:	f7ee fb70 	bl	80007fc <__aeabi_ddiv>
 801211c:	e7ea      	b.n	80120f4 <__ieee754_sqrt+0x24>
 801211e:	150a      	asrs	r2, r1, #20
 8012120:	d115      	bne.n	801214e <__ieee754_sqrt+0x7e>
 8012122:	2100      	movs	r1, #0
 8012124:	e009      	b.n	801213a <__ieee754_sqrt+0x6a>
 8012126:	0ae3      	lsrs	r3, r4, #11
 8012128:	3a15      	subs	r2, #21
 801212a:	0564      	lsls	r4, r4, #21
 801212c:	2b00      	cmp	r3, #0
 801212e:	d0fa      	beq.n	8012126 <__ieee754_sqrt+0x56>
 8012130:	e7f7      	b.n	8012122 <__ieee754_sqrt+0x52>
 8012132:	460a      	mov	r2, r1
 8012134:	e7fa      	b.n	801212c <__ieee754_sqrt+0x5c>
 8012136:	005b      	lsls	r3, r3, #1
 8012138:	3101      	adds	r1, #1
 801213a:	02d8      	lsls	r0, r3, #11
 801213c:	d5fb      	bpl.n	8012136 <__ieee754_sqrt+0x66>
 801213e:	1e48      	subs	r0, r1, #1
 8012140:	1a12      	subs	r2, r2, r0
 8012142:	f1c1 0020 	rsb	r0, r1, #32
 8012146:	fa24 f000 	lsr.w	r0, r4, r0
 801214a:	4303      	orrs	r3, r0
 801214c:	408c      	lsls	r4, r1
 801214e:	2600      	movs	r6, #0
 8012150:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8012154:	2116      	movs	r1, #22
 8012156:	07d2      	lsls	r2, r2, #31
 8012158:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 801215c:	4632      	mov	r2, r6
 801215e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012162:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012166:	bf5c      	itt	pl
 8012168:	005b      	lslpl	r3, r3, #1
 801216a:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 801216e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012172:	bf58      	it	pl
 8012174:	0064      	lslpl	r4, r4, #1
 8012176:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 801217a:	107f      	asrs	r7, r7, #1
 801217c:	0064      	lsls	r4, r4, #1
 801217e:	1815      	adds	r5, r2, r0
 8012180:	429d      	cmp	r5, r3
 8012182:	bfde      	ittt	le
 8012184:	182a      	addle	r2, r5, r0
 8012186:	1b5b      	suble	r3, r3, r5
 8012188:	1836      	addle	r6, r6, r0
 801218a:	0fe5      	lsrs	r5, r4, #31
 801218c:	3901      	subs	r1, #1
 801218e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8012192:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8012196:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801219a:	d1f0      	bne.n	801217e <__ieee754_sqrt+0xae>
 801219c:	460d      	mov	r5, r1
 801219e:	f04f 0a20 	mov.w	sl, #32
 80121a2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80121a6:	429a      	cmp	r2, r3
 80121a8:	eb01 0c00 	add.w	ip, r1, r0
 80121ac:	db02      	blt.n	80121b4 <__ieee754_sqrt+0xe4>
 80121ae:	d113      	bne.n	80121d8 <__ieee754_sqrt+0x108>
 80121b0:	45a4      	cmp	ip, r4
 80121b2:	d811      	bhi.n	80121d8 <__ieee754_sqrt+0x108>
 80121b4:	f1bc 0f00 	cmp.w	ip, #0
 80121b8:	eb0c 0100 	add.w	r1, ip, r0
 80121bc:	da42      	bge.n	8012244 <__ieee754_sqrt+0x174>
 80121be:	2900      	cmp	r1, #0
 80121c0:	db40      	blt.n	8012244 <__ieee754_sqrt+0x174>
 80121c2:	f102 0e01 	add.w	lr, r2, #1
 80121c6:	1a9b      	subs	r3, r3, r2
 80121c8:	4672      	mov	r2, lr
 80121ca:	45a4      	cmp	ip, r4
 80121cc:	bf88      	it	hi
 80121ce:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80121d2:	eba4 040c 	sub.w	r4, r4, ip
 80121d6:	4405      	add	r5, r0
 80121d8:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80121dc:	f1ba 0a01 	subs.w	sl, sl, #1
 80121e0:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80121e4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80121e8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80121ec:	d1db      	bne.n	80121a6 <__ieee754_sqrt+0xd6>
 80121ee:	431c      	orrs	r4, r3
 80121f0:	d01a      	beq.n	8012228 <__ieee754_sqrt+0x158>
 80121f2:	4c20      	ldr	r4, [pc, #128]	@ (8012274 <__ieee754_sqrt+0x1a4>)
 80121f4:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8012278 <__ieee754_sqrt+0x1a8>
 80121f8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80121fc:	e9db 2300 	ldrd	r2, r3, [fp]
 8012200:	f7ee f81a 	bl	8000238 <__aeabi_dsub>
 8012204:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012208:	4602      	mov	r2, r0
 801220a:	460b      	mov	r3, r1
 801220c:	4640      	mov	r0, r8
 801220e:	4649      	mov	r1, r9
 8012210:	f7ee fc46 	bl	8000aa0 <__aeabi_dcmple>
 8012214:	b140      	cbz	r0, 8012228 <__ieee754_sqrt+0x158>
 8012216:	e9d4 0100 	ldrd	r0, r1, [r4]
 801221a:	e9db 2300 	ldrd	r2, r3, [fp]
 801221e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8012222:	d111      	bne.n	8012248 <__ieee754_sqrt+0x178>
 8012224:	4655      	mov	r5, sl
 8012226:	3601      	adds	r6, #1
 8012228:	1072      	asrs	r2, r6, #1
 801222a:	086b      	lsrs	r3, r5, #1
 801222c:	07f1      	lsls	r1, r6, #31
 801222e:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8012232:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8012236:	bf48      	it	mi
 8012238:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801223c:	4618      	mov	r0, r3
 801223e:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8012242:	e757      	b.n	80120f4 <__ieee754_sqrt+0x24>
 8012244:	4696      	mov	lr, r2
 8012246:	e7be      	b.n	80121c6 <__ieee754_sqrt+0xf6>
 8012248:	f7ed fff8 	bl	800023c <__adddf3>
 801224c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012250:	4602      	mov	r2, r0
 8012252:	460b      	mov	r3, r1
 8012254:	4640      	mov	r0, r8
 8012256:	4649      	mov	r1, r9
 8012258:	f7ee fc18 	bl	8000a8c <__aeabi_dcmplt>
 801225c:	b120      	cbz	r0, 8012268 <__ieee754_sqrt+0x198>
 801225e:	1ca8      	adds	r0, r5, #2
 8012260:	bf08      	it	eq
 8012262:	3601      	addeq	r6, #1
 8012264:	3502      	adds	r5, #2
 8012266:	e7df      	b.n	8012228 <__ieee754_sqrt+0x158>
 8012268:	1c6b      	adds	r3, r5, #1
 801226a:	f023 0501 	bic.w	r5, r3, #1
 801226e:	e7db      	b.n	8012228 <__ieee754_sqrt+0x158>
 8012270:	7ff00000 	.word	0x7ff00000
 8012274:	20000090 	.word	0x20000090
 8012278:	20000088 	.word	0x20000088

0801227c <__ieee754_sqrtf>:
 801227c:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8012280:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8012284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012288:	4603      	mov	r3, r0
 801228a:	4604      	mov	r4, r0
 801228c:	d30a      	bcc.n	80122a4 <__ieee754_sqrtf+0x28>
 801228e:	4601      	mov	r1, r0
 8012290:	f7ee fdc0 	bl	8000e14 <__aeabi_fmul>
 8012294:	4601      	mov	r1, r0
 8012296:	4620      	mov	r0, r4
 8012298:	f7ee fcb4 	bl	8000c04 <__addsf3>
 801229c:	4604      	mov	r4, r0
 801229e:	4620      	mov	r0, r4
 80122a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122a4:	2a00      	cmp	r2, #0
 80122a6:	d0fa      	beq.n	801229e <__ieee754_sqrtf+0x22>
 80122a8:	2800      	cmp	r0, #0
 80122aa:	da06      	bge.n	80122ba <__ieee754_sqrtf+0x3e>
 80122ac:	4601      	mov	r1, r0
 80122ae:	f7ee fca7 	bl	8000c00 <__aeabi_fsub>
 80122b2:	4601      	mov	r1, r0
 80122b4:	f7ee fe62 	bl	8000f7c <__aeabi_fdiv>
 80122b8:	e7f0      	b.n	801229c <__ieee754_sqrtf+0x20>
 80122ba:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 80122be:	ea4f 51e0 	mov.w	r1, r0, asr #23
 80122c2:	d03e      	beq.n	8012342 <__ieee754_sqrtf+0xc6>
 80122c4:	2400      	movs	r4, #0
 80122c6:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 80122ca:	07ca      	lsls	r2, r1, #31
 80122cc:	f04f 0019 	mov.w	r0, #25
 80122d0:	4626      	mov	r6, r4
 80122d2:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80122d6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80122da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80122de:	bf58      	it	pl
 80122e0:	005b      	lslpl	r3, r3, #1
 80122e2:	106d      	asrs	r5, r5, #1
 80122e4:	005b      	lsls	r3, r3, #1
 80122e6:	1872      	adds	r2, r6, r1
 80122e8:	429a      	cmp	r2, r3
 80122ea:	bfcf      	iteee	gt
 80122ec:	461a      	movgt	r2, r3
 80122ee:	1856      	addle	r6, r2, r1
 80122f0:	1864      	addle	r4, r4, r1
 80122f2:	1a9a      	suble	r2, r3, r2
 80122f4:	3801      	subs	r0, #1
 80122f6:	ea4f 0342 	mov.w	r3, r2, lsl #1
 80122fa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80122fe:	d1f2      	bne.n	80122e6 <__ieee754_sqrtf+0x6a>
 8012300:	b1ba      	cbz	r2, 8012332 <__ieee754_sqrtf+0xb6>
 8012302:	4e14      	ldr	r6, [pc, #80]	@ (8012354 <__ieee754_sqrtf+0xd8>)
 8012304:	4f14      	ldr	r7, [pc, #80]	@ (8012358 <__ieee754_sqrtf+0xdc>)
 8012306:	6830      	ldr	r0, [r6, #0]
 8012308:	6839      	ldr	r1, [r7, #0]
 801230a:	f7ee fc79 	bl	8000c00 <__aeabi_fsub>
 801230e:	f8d6 8000 	ldr.w	r8, [r6]
 8012312:	4601      	mov	r1, r0
 8012314:	4640      	mov	r0, r8
 8012316:	f7ee ff25 	bl	8001164 <__aeabi_fcmple>
 801231a:	b150      	cbz	r0, 8012332 <__ieee754_sqrtf+0xb6>
 801231c:	6830      	ldr	r0, [r6, #0]
 801231e:	6839      	ldr	r1, [r7, #0]
 8012320:	f7ee fc70 	bl	8000c04 <__addsf3>
 8012324:	6836      	ldr	r6, [r6, #0]
 8012326:	4601      	mov	r1, r0
 8012328:	4630      	mov	r0, r6
 801232a:	f7ee ff11 	bl	8001150 <__aeabi_fcmplt>
 801232e:	b168      	cbz	r0, 801234c <__ieee754_sqrtf+0xd0>
 8012330:	3402      	adds	r4, #2
 8012332:	1064      	asrs	r4, r4, #1
 8012334:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8012338:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 801233c:	e7af      	b.n	801229e <__ieee754_sqrtf+0x22>
 801233e:	005b      	lsls	r3, r3, #1
 8012340:	3201      	adds	r2, #1
 8012342:	0218      	lsls	r0, r3, #8
 8012344:	d5fb      	bpl.n	801233e <__ieee754_sqrtf+0xc2>
 8012346:	3a01      	subs	r2, #1
 8012348:	1a89      	subs	r1, r1, r2
 801234a:	e7bb      	b.n	80122c4 <__ieee754_sqrtf+0x48>
 801234c:	3401      	adds	r4, #1
 801234e:	f024 0401 	bic.w	r4, r4, #1
 8012352:	e7ee      	b.n	8012332 <__ieee754_sqrtf+0xb6>
 8012354:	2000009c 	.word	0x2000009c
 8012358:	20000098 	.word	0x20000098

0801235c <_init>:
 801235c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801235e:	bf00      	nop
 8012360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012362:	bc08      	pop	{r3}
 8012364:	469e      	mov	lr, r3
 8012366:	4770      	bx	lr

08012368 <_fini>:
 8012368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801236a:	bf00      	nop
 801236c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801236e:	bc08      	pop	{r3}
 8012370:	469e      	mov	lr, r3
 8012372:	4770      	bx	lr
