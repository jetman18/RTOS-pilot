
RTOSpilot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000130e4  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000788  080132d4  080132d4  000142d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013a5c  08013a5c  000150b0  2**0
                  CONTENTS
  4 .ARM          00000000  08013a5c  08013a5c  000150b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013a5c  08013a5c  000150b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013a5c  08013a5c  00014a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013a60  08013a60  00014a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  08013a64  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002cc8  200000b0  08013b14  000150b0  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20002d78  08013b14  00015d78  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000150b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000292b9  00000000  00000000  000150d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007072  00000000  00000000  0003e392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022d8  00000000  00000000  00045408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ad1  00000000  00000000  000476e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b777  00000000  00000000  000491b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000340fe  00000000  00000000  00054928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d28bf  00000000  00000000  00088a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015b2e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009540  00000000  00000000  0015b328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00164868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000b0 	.word	0x200000b0
 800020c:	00000000 	.word	0x00000000
 8000210:	080132bc 	.word	0x080132bc

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000b4 	.word	0x200000b4
 800022c:	080132bc 	.word	0x080132bc

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_frsub>:
 8000bf8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bfc:	e002      	b.n	8000c04 <__addsf3>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fsub>:
 8000c00:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c04 <__addsf3>:
 8000c04:	0042      	lsls	r2, r0, #1
 8000c06:	bf1f      	itttt	ne
 8000c08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c0c:	ea92 0f03 	teqne	r2, r3
 8000c10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c18:	d06a      	beq.n	8000cf0 <__addsf3+0xec>
 8000c1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c22:	bfc1      	itttt	gt
 8000c24:	18d2      	addgt	r2, r2, r3
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	4048      	eorgt	r0, r1
 8000c2a:	4041      	eorgt	r1, r0
 8000c2c:	bfb8      	it	lt
 8000c2e:	425b      	neglt	r3, r3
 8000c30:	2b19      	cmp	r3, #25
 8000c32:	bf88      	it	hi
 8000c34:	4770      	bxhi	lr
 8000c36:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c4a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c4e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4249      	negne	r1, r1
 8000c56:	ea92 0f03 	teq	r2, r3
 8000c5a:	d03f      	beq.n	8000cdc <__addsf3+0xd8>
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	fa41 fc03 	asr.w	ip, r1, r3
 8000c64:	eb10 000c 	adds.w	r0, r0, ip
 8000c68:	f1c3 0320 	rsb	r3, r3, #32
 8000c6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c70:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__addsf3+0x78>
 8000c76:	4249      	negs	r1, r1
 8000c78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c7c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c80:	d313      	bcc.n	8000caa <__addsf3+0xa6>
 8000c82:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c86:	d306      	bcc.n	8000c96 <__addsf3+0x92>
 8000c88:	0840      	lsrs	r0, r0, #1
 8000c8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8e:	f102 0201 	add.w	r2, r2, #1
 8000c92:	2afe      	cmp	r2, #254	@ 0xfe
 8000c94:	d251      	bcs.n	8000d3a <__addsf3+0x136>
 8000c96:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9e:	bf08      	it	eq
 8000ca0:	f020 0001 	biceq.w	r0, r0, #1
 8000ca4:	ea40 0003 	orr.w	r0, r0, r3
 8000ca8:	4770      	bx	lr
 8000caa:	0049      	lsls	r1, r1, #1
 8000cac:	eb40 0000 	adc.w	r0, r0, r0
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb8:	d2ed      	bcs.n	8000c96 <__addsf3+0x92>
 8000cba:	fab0 fc80 	clz	ip, r0
 8000cbe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cc2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cca:	bfaa      	itet	ge
 8000ccc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd0:	4252      	neglt	r2, r2
 8000cd2:	4318      	orrge	r0, r3
 8000cd4:	bfbc      	itt	lt
 8000cd6:	40d0      	lsrlt	r0, r2
 8000cd8:	4318      	orrlt	r0, r3
 8000cda:	4770      	bx	lr
 8000cdc:	f092 0f00 	teq	r2, #0
 8000ce0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ce4:	bf06      	itte	eq
 8000ce6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cea:	3201      	addeq	r2, #1
 8000cec:	3b01      	subne	r3, #1
 8000cee:	e7b5      	b.n	8000c5c <__addsf3+0x58>
 8000cf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	bf18      	it	ne
 8000cfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfe:	d021      	beq.n	8000d44 <__addsf3+0x140>
 8000d00:	ea92 0f03 	teq	r2, r3
 8000d04:	d004      	beq.n	8000d10 <__addsf3+0x10c>
 8000d06:	f092 0f00 	teq	r2, #0
 8000d0a:	bf08      	it	eq
 8000d0c:	4608      	moveq	r0, r1
 8000d0e:	4770      	bx	lr
 8000d10:	ea90 0f01 	teq	r0, r1
 8000d14:	bf1c      	itt	ne
 8000d16:	2000      	movne	r0, #0
 8000d18:	4770      	bxne	lr
 8000d1a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d1e:	d104      	bne.n	8000d2a <__addsf3+0x126>
 8000d20:	0040      	lsls	r0, r0, #1
 8000d22:	bf28      	it	cs
 8000d24:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d28:	4770      	bx	lr
 8000d2a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d2e:	bf3c      	itt	cc
 8000d30:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d34:	4770      	bxcc	lr
 8000d36:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d3a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d42:	4770      	bx	lr
 8000d44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d48:	bf16      	itet	ne
 8000d4a:	4608      	movne	r0, r1
 8000d4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d50:	4601      	movne	r1, r0
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	bf06      	itte	eq
 8000d56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d5a:	ea90 0f01 	teqeq	r0, r1
 8000d5e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_ui2f>:
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e004      	b.n	8000d74 <__aeabi_i2f+0x8>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_i2f>:
 8000d6c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d70:	bf48      	it	mi
 8000d72:	4240      	negmi	r0, r0
 8000d74:	ea5f 0c00 	movs.w	ip, r0
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d80:	4601      	mov	r1, r0
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	e01c      	b.n	8000dc2 <__aeabi_l2f+0x2a>

08000d88 <__aeabi_ul2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e00a      	b.n	8000dac <__aeabi_l2f+0x14>
 8000d96:	bf00      	nop

08000d98 <__aeabi_l2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000da4:	d502      	bpl.n	8000dac <__aeabi_l2f+0x14>
 8000da6:	4240      	negs	r0, r0
 8000da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dac:	ea5f 0c01 	movs.w	ip, r1
 8000db0:	bf02      	ittt	eq
 8000db2:	4684      	moveq	ip, r0
 8000db4:	4601      	moveq	r1, r0
 8000db6:	2000      	moveq	r0, #0
 8000db8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000dbc:	bf08      	it	eq
 8000dbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dc2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dc6:	fabc f28c 	clz	r2, ip
 8000dca:	3a08      	subs	r2, #8
 8000dcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd0:	db10      	blt.n	8000df4 <__aeabi_l2f+0x5c>
 8000dd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000de4:	fa20 f202 	lsr.w	r2, r0, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f102 0220 	add.w	r2, r2, #32
 8000df8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfc:	f1c2 0220 	rsb	r2, r2, #32
 8000e00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e04:	fa21 f202 	lsr.w	r2, r1, r2
 8000e08:	eb43 0002 	adc.w	r0, r3, r2
 8000e0c:	bf08      	it	eq
 8000e0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_fmul>:
 8000e14:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e1c:	bf1e      	ittt	ne
 8000e1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e22:	ea92 0f0c 	teqne	r2, ip
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d06f      	beq.n	8000f0c <__aeabi_fmul+0xf8>
 8000e2c:	441a      	add	r2, r3
 8000e2e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e32:	0240      	lsls	r0, r0, #9
 8000e34:	bf18      	it	ne
 8000e36:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e3a:	d01e      	beq.n	8000e7a <__aeabi_fmul+0x66>
 8000e3c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e40:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e44:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e48:	fba0 3101 	umull	r3, r1, r0, r1
 8000e4c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e50:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e54:	bf3e      	ittt	cc
 8000e56:	0049      	lslcc	r1, r1, #1
 8000e58:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	ea40 0001 	orr.w	r0, r0, r1
 8000e62:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e66:	2afd      	cmp	r2, #253	@ 0xfd
 8000e68:	d81d      	bhi.n	8000ea6 <__aeabi_fmul+0x92>
 8000e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e72:	bf08      	it	eq
 8000e74:	f020 0001 	biceq.w	r0, r0, #1
 8000e78:	4770      	bx	lr
 8000e7a:	f090 0f00 	teq	r0, #0
 8000e7e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e82:	bf08      	it	eq
 8000e84:	0249      	lsleq	r1, r1, #9
 8000e86:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e8a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e8e:	3a7f      	subs	r2, #127	@ 0x7f
 8000e90:	bfc2      	ittt	gt
 8000e92:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e96:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e9a:	4770      	bxgt	lr
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	f04f 0300 	mov.w	r3, #0
 8000ea4:	3a01      	subs	r2, #1
 8000ea6:	dc5d      	bgt.n	8000f64 <__aeabi_fmul+0x150>
 8000ea8:	f112 0f19 	cmn.w	r2, #25
 8000eac:	bfdc      	itt	le
 8000eae:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000eb2:	4770      	bxle	lr
 8000eb4:	f1c2 0200 	rsb	r2, r2, #0
 8000eb8:	0041      	lsls	r1, r0, #1
 8000eba:	fa21 f102 	lsr.w	r1, r1, r2
 8000ebe:	f1c2 0220 	rsb	r2, r2, #32
 8000ec2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ec6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eca:	f140 0000 	adc.w	r0, r0, #0
 8000ece:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ed2:	bf08      	it	eq
 8000ed4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed8:	4770      	bx	lr
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fmul+0xce>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fmul+0xe6>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e78f      	b.n	8000e2c <__aeabi_fmul+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	bf18      	it	ne
 8000f16:	ea93 0f0c 	teqne	r3, ip
 8000f1a:	d00a      	beq.n	8000f32 <__aeabi_fmul+0x11e>
 8000f1c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f20:	bf18      	it	ne
 8000f22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	d1d8      	bne.n	8000eda <__aeabi_fmul+0xc6>
 8000f28:	ea80 0001 	eor.w	r0, r0, r1
 8000f2c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f30:	4770      	bx	lr
 8000f32:	f090 0f00 	teq	r0, #0
 8000f36:	bf17      	itett	ne
 8000f38:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f3c:	4608      	moveq	r0, r1
 8000f3e:	f091 0f00 	teqne	r1, #0
 8000f42:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f46:	d014      	beq.n	8000f72 <__aeabi_fmul+0x15e>
 8000f48:	ea92 0f0c 	teq	r2, ip
 8000f4c:	d101      	bne.n	8000f52 <__aeabi_fmul+0x13e>
 8000f4e:	0242      	lsls	r2, r0, #9
 8000f50:	d10f      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f52:	ea93 0f0c 	teq	r3, ip
 8000f56:	d103      	bne.n	8000f60 <__aeabi_fmul+0x14c>
 8000f58:	024b      	lsls	r3, r1, #9
 8000f5a:	bf18      	it	ne
 8000f5c:	4608      	movne	r0, r1
 8000f5e:	d108      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f60:	ea80 0001 	eor.w	r0, r0, r1
 8000f64:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f68:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f70:	4770      	bx	lr
 8000f72:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f76:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f7a:	4770      	bx	lr

08000f7c <__aeabi_fdiv>:
 8000f7c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f84:	bf1e      	ittt	ne
 8000f86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f8a:	ea92 0f0c 	teqne	r2, ip
 8000f8e:	ea93 0f0c 	teqne	r3, ip
 8000f92:	d069      	beq.n	8001068 <__aeabi_fdiv+0xec>
 8000f94:	eba2 0203 	sub.w	r2, r2, r3
 8000f98:	ea80 0c01 	eor.w	ip, r0, r1
 8000f9c:	0249      	lsls	r1, r1, #9
 8000f9e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fa2:	d037      	beq.n	8001014 <__aeabi_fdiv+0x98>
 8000fa4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000fa8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	bf38      	it	cc
 8000fb8:	005b      	lslcc	r3, r3, #1
 8000fba:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000fbe:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	bf24      	itt	cs
 8000fc6:	1a5b      	subcs	r3, r3, r1
 8000fc8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fcc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd0:	bf24      	itt	cs
 8000fd2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fd6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fda:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fde:	bf24      	itt	cs
 8000fe0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fe4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fe8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fec:	bf24      	itt	cs
 8000fee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ff2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	bf18      	it	ne
 8000ffa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ffe:	d1e0      	bne.n	8000fc2 <__aeabi_fdiv+0x46>
 8001000:	2afd      	cmp	r2, #253	@ 0xfd
 8001002:	f63f af50 	bhi.w	8000ea6 <__aeabi_fmul+0x92>
 8001006:	428b      	cmp	r3, r1
 8001008:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800100c:	bf08      	it	eq
 800100e:	f020 0001 	biceq.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001018:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800101c:	327f      	adds	r2, #127	@ 0x7f
 800101e:	bfc2      	ittt	gt
 8001020:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001024:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001028:	4770      	bxgt	lr
 800102a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	3a01      	subs	r2, #1
 8001034:	e737      	b.n	8000ea6 <__aeabi_fmul+0x92>
 8001036:	f092 0f00 	teq	r2, #0
 800103a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800103e:	bf02      	ittt	eq
 8001040:	0040      	lsleq	r0, r0, #1
 8001042:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001046:	3a01      	subeq	r2, #1
 8001048:	d0f9      	beq.n	800103e <__aeabi_fdiv+0xc2>
 800104a:	ea40 000c 	orr.w	r0, r0, ip
 800104e:	f093 0f00 	teq	r3, #0
 8001052:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001056:	bf02      	ittt	eq
 8001058:	0049      	lsleq	r1, r1, #1
 800105a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800105e:	3b01      	subeq	r3, #1
 8001060:	d0f9      	beq.n	8001056 <__aeabi_fdiv+0xda>
 8001062:	ea41 010c 	orr.w	r1, r1, ip
 8001066:	e795      	b.n	8000f94 <__aeabi_fdiv+0x18>
 8001068:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800106c:	ea92 0f0c 	teq	r2, ip
 8001070:	d108      	bne.n	8001084 <__aeabi_fdiv+0x108>
 8001072:	0242      	lsls	r2, r0, #9
 8001074:	f47f af7d 	bne.w	8000f72 <__aeabi_fmul+0x15e>
 8001078:	ea93 0f0c 	teq	r3, ip
 800107c:	f47f af70 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 8001080:	4608      	mov	r0, r1
 8001082:	e776      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001084:	ea93 0f0c 	teq	r3, ip
 8001088:	d104      	bne.n	8001094 <__aeabi_fdiv+0x118>
 800108a:	024b      	lsls	r3, r1, #9
 800108c:	f43f af4c 	beq.w	8000f28 <__aeabi_fmul+0x114>
 8001090:	4608      	mov	r0, r1
 8001092:	e76e      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001094:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001098:	bf18      	it	ne
 800109a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800109e:	d1ca      	bne.n	8001036 <__aeabi_fdiv+0xba>
 80010a0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010a4:	f47f af5c 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 80010a8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010ac:	f47f af3c 	bne.w	8000f28 <__aeabi_fmul+0x114>
 80010b0:	e75f      	b.n	8000f72 <__aeabi_fmul+0x15e>
 80010b2:	bf00      	nop

080010b4 <__gesf2>:
 80010b4:	f04f 3cff 	mov.w	ip, #4294967295
 80010b8:	e006      	b.n	80010c8 <__cmpsf2+0x4>
 80010ba:	bf00      	nop

080010bc <__lesf2>:
 80010bc:	f04f 0c01 	mov.w	ip, #1
 80010c0:	e002      	b.n	80010c8 <__cmpsf2+0x4>
 80010c2:	bf00      	nop

080010c4 <__cmpsf2>:
 80010c4:	f04f 0c01 	mov.w	ip, #1
 80010c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d8:	bf18      	it	ne
 80010da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010de:	d011      	beq.n	8001104 <__cmpsf2+0x40>
 80010e0:	b001      	add	sp, #4
 80010e2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010e6:	bf18      	it	ne
 80010e8:	ea90 0f01 	teqne	r0, r1
 80010ec:	bf58      	it	pl
 80010ee:	ebb2 0003 	subspl.w	r0, r2, r3
 80010f2:	bf88      	it	hi
 80010f4:	17c8      	asrhi	r0, r1, #31
 80010f6:	bf38      	it	cc
 80010f8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010fc:	bf18      	it	ne
 80010fe:	f040 0001 	orrne.w	r0, r0, #1
 8001102:	4770      	bx	lr
 8001104:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001108:	d102      	bne.n	8001110 <__cmpsf2+0x4c>
 800110a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800110e:	d105      	bne.n	800111c <__cmpsf2+0x58>
 8001110:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001114:	d1e4      	bne.n	80010e0 <__cmpsf2+0x1c>
 8001116:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800111a:	d0e1      	beq.n	80010e0 <__cmpsf2+0x1c>
 800111c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop

08001124 <__aeabi_cfrcmple>:
 8001124:	4684      	mov	ip, r0
 8001126:	4608      	mov	r0, r1
 8001128:	4661      	mov	r1, ip
 800112a:	e7ff      	b.n	800112c <__aeabi_cfcmpeq>

0800112c <__aeabi_cfcmpeq>:
 800112c:	b50f      	push	{r0, r1, r2, r3, lr}
 800112e:	f7ff ffc9 	bl	80010c4 <__cmpsf2>
 8001132:	2800      	cmp	r0, #0
 8001134:	bf48      	it	mi
 8001136:	f110 0f00 	cmnmi.w	r0, #0
 800113a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800113c <__aeabi_fcmpeq>:
 800113c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001140:	f7ff fff4 	bl	800112c <__aeabi_cfcmpeq>
 8001144:	bf0c      	ite	eq
 8001146:	2001      	moveq	r0, #1
 8001148:	2000      	movne	r0, #0
 800114a:	f85d fb08 	ldr.w	pc, [sp], #8
 800114e:	bf00      	nop

08001150 <__aeabi_fcmplt>:
 8001150:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001154:	f7ff ffea 	bl	800112c <__aeabi_cfcmpeq>
 8001158:	bf34      	ite	cc
 800115a:	2001      	movcc	r0, #1
 800115c:	2000      	movcs	r0, #0
 800115e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001162:	bf00      	nop

08001164 <__aeabi_fcmple>:
 8001164:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001168:	f7ff ffe0 	bl	800112c <__aeabi_cfcmpeq>
 800116c:	bf94      	ite	ls
 800116e:	2001      	movls	r0, #1
 8001170:	2000      	movhi	r0, #0
 8001172:	f85d fb08 	ldr.w	pc, [sp], #8
 8001176:	bf00      	nop

08001178 <__aeabi_fcmpge>:
 8001178:	f84d ed08 	str.w	lr, [sp, #-8]!
 800117c:	f7ff ffd2 	bl	8001124 <__aeabi_cfrcmple>
 8001180:	bf94      	ite	ls
 8001182:	2001      	movls	r0, #1
 8001184:	2000      	movhi	r0, #0
 8001186:	f85d fb08 	ldr.w	pc, [sp], #8
 800118a:	bf00      	nop

0800118c <__aeabi_fcmpgt>:
 800118c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001190:	f7ff ffc8 	bl	8001124 <__aeabi_cfrcmple>
 8001194:	bf34      	ite	cc
 8001196:	2001      	movcc	r0, #1
 8001198:	2000      	movcs	r0, #0
 800119a:	f85d fb08 	ldr.w	pc, [sp], #8
 800119e:	bf00      	nop

080011a0 <__aeabi_fcmpun>:
 80011a0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80011a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011ac:	d102      	bne.n	80011b4 <__aeabi_fcmpun+0x14>
 80011ae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80011b2:	d108      	bne.n	80011c6 <__aeabi_fcmpun+0x26>
 80011b4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011b8:	d102      	bne.n	80011c0 <__aeabi_fcmpun+0x20>
 80011ba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011be:	d102      	bne.n	80011c6 <__aeabi_fcmpun+0x26>
 80011c0:	f04f 0000 	mov.w	r0, #0
 80011c4:	4770      	bx	lr
 80011c6:	f04f 0001 	mov.w	r0, #1
 80011ca:	4770      	bx	lr

080011cc <__aeabi_f2iz>:
 80011cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011d4:	d30f      	bcc.n	80011f6 <__aeabi_f2iz+0x2a>
 80011d6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011de:	d90d      	bls.n	80011fc <__aeabi_f2iz+0x30>
 80011e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011e8:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80011ec:	fa23 f002 	lsr.w	r0, r3, r2
 80011f0:	bf18      	it	ne
 80011f2:	4240      	negne	r0, r0
 80011f4:	4770      	bx	lr
 80011f6:	f04f 0000 	mov.w	r0, #0
 80011fa:	4770      	bx	lr
 80011fc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001200:	d101      	bne.n	8001206 <__aeabi_f2iz+0x3a>
 8001202:	0242      	lsls	r2, r0, #9
 8001204:	d105      	bne.n	8001212 <__aeabi_f2iz+0x46>
 8001206:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800120a:	bf08      	it	eq
 800120c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001210:	4770      	bx	lr
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	4770      	bx	lr

08001218 <__aeabi_f2uiz>:
 8001218:	0042      	lsls	r2, r0, #1
 800121a:	d20e      	bcs.n	800123a <__aeabi_f2uiz+0x22>
 800121c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001220:	d30b      	bcc.n	800123a <__aeabi_f2uiz+0x22>
 8001222:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001226:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800122a:	d409      	bmi.n	8001240 <__aeabi_f2uiz+0x28>
 800122c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001230:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001234:	fa23 f002 	lsr.w	r0, r3, r2
 8001238:	4770      	bx	lr
 800123a:	f04f 0000 	mov.w	r0, #0
 800123e:	4770      	bx	lr
 8001240:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001244:	d101      	bne.n	800124a <__aeabi_f2uiz+0x32>
 8001246:	0242      	lsls	r2, r0, #9
 8001248:	d102      	bne.n	8001250 <__aeabi_f2uiz+0x38>
 800124a:	f04f 30ff 	mov.w	r0, #4294967295
 800124e:	4770      	bx	lr
 8001250:	f04f 0000 	mov.w	r0, #0
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop

08001258 <ibus_init>:


static void ibusDataReceive(uint8_t c);

void ibus_init(UART_HandleTypeDef *uartt)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
    for(int i = 0;i < IBUS_MAX_CHANNEL ; i++){
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	e008      	b.n	8001278 <ibus_init+0x20>
      ibusChannelData[i] = 1000;
 8001266:	4a0d      	ldr	r2, [pc, #52]	@ (800129c <ibus_init+0x44>)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800126e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0;i < IBUS_MAX_CHANNEL ; i++){
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3301      	adds	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2b0d      	cmp	r3, #13
 800127c:	ddf3      	ble.n	8001266 <ibus_init+0xe>
    }
	uart = uartt;
 800127e:	4a08      	ldr	r2, [pc, #32]	@ (80012a0 <ibus_init+0x48>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6013      	str	r3, [r2, #0]
#ifdef DMA_MODE
    is_receive_cpl = 0;
	HAL_UART_Receive_DMA(uart,buffer_dma,2*IBUS_BUFFSIZE);
#else 
	HAL_UART_Receive_IT(uart, &rx_buff,1);
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <ibus_init+0x48>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2201      	movs	r2, #1
 800128a:	4906      	ldr	r1, [pc, #24]	@ (80012a4 <ibus_init+0x4c>)
 800128c:	4618      	mov	r0, r3
 800128e:	f00a f926 	bl	800b4de <HAL_UART_Receive_IT>
#endif
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200000d0 	.word	0x200000d0
 80012a0:	2000012c 	.word	0x2000012c
 80012a4:	20000128 	.word	0x20000128

080012a8 <ibus_uart_port>:

UART_HandleTypeDef *ibus_uart_port(){
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
   return uart;
 80012ac:	4b02      	ldr	r3, [pc, #8]	@ (80012b8 <ibus_uart_port+0x10>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	2000012c 	.word	0x2000012c

080012bc <ibus_calback>:

   ibusFrameComplete();
#endif
}

void ibus_calback(){
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0

#ifdef DMA_MODE
	is_receive_cpl = 1;
#else 
	ibusDataReceive(rx_buff);
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <ibus_calback+0x20>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 f80d 	bl	80012e4 <ibusDataReceive>
    HAL_UART_Receive_IT(uart, &rx_buff,1);
 80012ca:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <ibus_calback+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2201      	movs	r2, #1
 80012d0:	4902      	ldr	r1, [pc, #8]	@ (80012dc <ibus_calback+0x20>)
 80012d2:	4618      	mov	r0, r3
 80012d4:	f00a f903 	bl	800b4de <HAL_UART_Receive_IT>
#endif

}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000128 	.word	0x20000128
 80012e0:	2000012c 	.word	0x2000012c

080012e4 <ibusDataReceive>:

static void ibusDataReceive(uint8_t c)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
    uint32_t ibusTime;
    static uint32_t ibusTimeLast;
    static uint8_t ibusFramePosition;

    ibusTime = micros();
 80012ee:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <ibusDataReceive+0x78>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001360 <ibusDataReceive+0x7c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]

    if ((ibusTime - ibusTimeLast) > 3000)
 80012fe:	4b19      	ldr	r3, [pc, #100]	@ (8001364 <ibusDataReceive+0x80>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800130a:	4293      	cmp	r3, r2
 800130c:	d902      	bls.n	8001314 <ibusDataReceive+0x30>
        ibusFramePosition = 0;
 800130e:	4b16      	ldr	r3, [pc, #88]	@ (8001368 <ibusDataReceive+0x84>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]

    ibusTimeLast = ibusTime;
 8001314:	4a13      	ldr	r2, [pc, #76]	@ (8001364 <ibusDataReceive+0x80>)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6013      	str	r3, [r2, #0]

    if (ibusFramePosition == 0 && c != IBUS_SYNCBYTE)
 800131a:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <ibusDataReceive+0x84>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <ibusDataReceive+0x44>
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b20      	cmp	r3, #32
 8001326:	d114      	bne.n	8001352 <ibusDataReceive+0x6e>
        return;

    ibus[ibusFramePosition] = (uint8_t)c;
 8001328:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <ibusDataReceive+0x84>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	4a0f      	ldr	r2, [pc, #60]	@ (800136c <ibusDataReceive+0x88>)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	5453      	strb	r3, [r2, r1]

    if (ibusFramePosition == IBUS_BUFFSIZE - 1) {
 8001334:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <ibusDataReceive+0x84>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b1f      	cmp	r3, #31
 800133a:	d103      	bne.n	8001344 <ibusDataReceive+0x60>
        ibusFrameDone = TRUE;
 800133c:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <ibusDataReceive+0x8c>)
 800133e:	2201      	movs	r2, #1
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	e007      	b.n	8001354 <ibusDataReceive+0x70>
    } else {
        ibusFramePosition++;
 8001344:	4b08      	ldr	r3, [pc, #32]	@ (8001368 <ibusDataReceive+0x84>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	b2da      	uxtb	r2, r3
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <ibusDataReceive+0x84>)
 800134e:	701a      	strb	r2, [r3, #0]
 8001350:	e000      	b.n	8001354 <ibusDataReceive+0x70>
        return;
 8001352:	bf00      	nop
    }
}
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	20000540 	.word	0x20000540
 8001360:	20000544 	.word	0x20000544
 8001364:	20000130 	.word	0x20000130
 8001368:	20000134 	.word	0x20000134
 800136c:	20000108 	.word	0x20000108
 8001370:	200000cc 	.word	0x200000cc

08001374 <ibusFrameComplete>:

int ibusFrameComplete(void)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
	
    uint8_t i;
    uint16_t chksum, rxsum;

    if (ibusFrameDone) {
 800137a:	4b63      	ldr	r3, [pc, #396]	@ (8001508 <ibusFrameComplete+0x194>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 80bb 	beq.w	80014fa <ibusFrameComplete+0x186>
        ibusFrameDone = FALSE;
 8001384:	4b60      	ldr	r3, [pc, #384]	@ (8001508 <ibusFrameComplete+0x194>)
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]

        chksum = 0xFFFF;
 800138a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800138e:	81bb      	strh	r3, [r7, #12]

        for (i = 0; i < 30; i++)
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	e009      	b.n	80013aa <ibusFrameComplete+0x36>
            chksum -= ibus[i];
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	4a5c      	ldr	r2, [pc, #368]	@ (800150c <ibusFrameComplete+0x198>)
 800139a:	5cd3      	ldrb	r3, [r2, r3]
 800139c:	461a      	mov	r2, r3
 800139e:	89bb      	ldrh	r3, [r7, #12]
 80013a0:	1a9b      	subs	r3, r3, r2
 80013a2:	81bb      	strh	r3, [r7, #12]
        for (i = 0; i < 30; i++)
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	3301      	adds	r3, #1
 80013a8:	73fb      	strb	r3, [r7, #15]
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	2b1d      	cmp	r3, #29
 80013ae:	d9f2      	bls.n	8001396 <ibusFrameComplete+0x22>

        rxsum = ibus[30] + (ibus[31] << 8);
 80013b0:	4b56      	ldr	r3, [pc, #344]	@ (800150c <ibusFrameComplete+0x198>)
 80013b2:	7f9b      	ldrb	r3, [r3, #30]
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b55      	ldr	r3, [pc, #340]	@ (800150c <ibusFrameComplete+0x198>)
 80013b8:	7fdb      	ldrb	r3, [r3, #31]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	b29b      	uxth	r3, r3
 80013be:	4413      	add	r3, r2
 80013c0:	80fb      	strh	r3, [r7, #6]

        if (chksum == rxsum) {
 80013c2:	89ba      	ldrh	r2, [r7, #12]
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	f040 8097 	bne.w	80014fa <ibusFrameComplete+0x186>
            ibusChannelData[0] = (ibus[ 3] << 8) + ibus[ 2];
 80013cc:	4b4f      	ldr	r3, [pc, #316]	@ (800150c <ibusFrameComplete+0x198>)
 80013ce:	78db      	ldrb	r3, [r3, #3]
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	4a4e      	ldr	r2, [pc, #312]	@ (800150c <ibusFrameComplete+0x198>)
 80013d4:	7892      	ldrb	r2, [r2, #2]
 80013d6:	4413      	add	r3, r2
 80013d8:	461a      	mov	r2, r3
 80013da:	4b4d      	ldr	r3, [pc, #308]	@ (8001510 <ibusFrameComplete+0x19c>)
 80013dc:	601a      	str	r2, [r3, #0]
            ibusChannelData[1] = (ibus[ 5] << 8) + ibus[ 4];
 80013de:	4b4b      	ldr	r3, [pc, #300]	@ (800150c <ibusFrameComplete+0x198>)
 80013e0:	795b      	ldrb	r3, [r3, #5]
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	4a49      	ldr	r2, [pc, #292]	@ (800150c <ibusFrameComplete+0x198>)
 80013e6:	7912      	ldrb	r2, [r2, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b48      	ldr	r3, [pc, #288]	@ (8001510 <ibusFrameComplete+0x19c>)
 80013ee:	605a      	str	r2, [r3, #4]
            ibusChannelData[2] = (ibus[ 7] << 8) + ibus[ 6];
 80013f0:	4b46      	ldr	r3, [pc, #280]	@ (800150c <ibusFrameComplete+0x198>)
 80013f2:	79db      	ldrb	r3, [r3, #7]
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	4a45      	ldr	r2, [pc, #276]	@ (800150c <ibusFrameComplete+0x198>)
 80013f8:	7992      	ldrb	r2, [r2, #6]
 80013fa:	4413      	add	r3, r2
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b44      	ldr	r3, [pc, #272]	@ (8001510 <ibusFrameComplete+0x19c>)
 8001400:	609a      	str	r2, [r3, #8]
            ibusChannelData[3] = (ibus[ 9] << 8) + ibus[ 8];
 8001402:	4b42      	ldr	r3, [pc, #264]	@ (800150c <ibusFrameComplete+0x198>)
 8001404:	7a5b      	ldrb	r3, [r3, #9]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	4a40      	ldr	r2, [pc, #256]	@ (800150c <ibusFrameComplete+0x198>)
 800140a:	7a12      	ldrb	r2, [r2, #8]
 800140c:	4413      	add	r3, r2
 800140e:	461a      	mov	r2, r3
 8001410:	4b3f      	ldr	r3, [pc, #252]	@ (8001510 <ibusFrameComplete+0x19c>)
 8001412:	60da      	str	r2, [r3, #12]
            ibusChannelData[4] = (ibus[11] << 8) + ibus[10];
 8001414:	4b3d      	ldr	r3, [pc, #244]	@ (800150c <ibusFrameComplete+0x198>)
 8001416:	7adb      	ldrb	r3, [r3, #11]
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	4a3c      	ldr	r2, [pc, #240]	@ (800150c <ibusFrameComplete+0x198>)
 800141c:	7a92      	ldrb	r2, [r2, #10]
 800141e:	4413      	add	r3, r2
 8001420:	461a      	mov	r2, r3
 8001422:	4b3b      	ldr	r3, [pc, #236]	@ (8001510 <ibusFrameComplete+0x19c>)
 8001424:	611a      	str	r2, [r3, #16]
            ibusChannelData[5] = (ibus[13] << 8) + ibus[12];
 8001426:	4b39      	ldr	r3, [pc, #228]	@ (800150c <ibusFrameComplete+0x198>)
 8001428:	7b5b      	ldrb	r3, [r3, #13]
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	4a37      	ldr	r2, [pc, #220]	@ (800150c <ibusFrameComplete+0x198>)
 800142e:	7b12      	ldrb	r2, [r2, #12]
 8001430:	4413      	add	r3, r2
 8001432:	461a      	mov	r2, r3
 8001434:	4b36      	ldr	r3, [pc, #216]	@ (8001510 <ibusFrameComplete+0x19c>)
 8001436:	615a      	str	r2, [r3, #20]
            ibusChannelData[6] = (ibus[15] << 8) + ibus[14];
 8001438:	4b34      	ldr	r3, [pc, #208]	@ (800150c <ibusFrameComplete+0x198>)
 800143a:	7bdb      	ldrb	r3, [r3, #15]
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	4a33      	ldr	r2, [pc, #204]	@ (800150c <ibusFrameComplete+0x198>)
 8001440:	7b92      	ldrb	r2, [r2, #14]
 8001442:	4413      	add	r3, r2
 8001444:	461a      	mov	r2, r3
 8001446:	4b32      	ldr	r3, [pc, #200]	@ (8001510 <ibusFrameComplete+0x19c>)
 8001448:	619a      	str	r2, [r3, #24]
            ibusChannelData[7] = (ibus[17] << 8) + ibus[16];
 800144a:	4b30      	ldr	r3, [pc, #192]	@ (800150c <ibusFrameComplete+0x198>)
 800144c:	7c5b      	ldrb	r3, [r3, #17]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	4a2e      	ldr	r2, [pc, #184]	@ (800150c <ibusFrameComplete+0x198>)
 8001452:	7c12      	ldrb	r2, [r2, #16]
 8001454:	4413      	add	r3, r2
 8001456:	461a      	mov	r2, r3
 8001458:	4b2d      	ldr	r3, [pc, #180]	@ (8001510 <ibusFrameComplete+0x19c>)
 800145a:	61da      	str	r2, [r3, #28]
			ibusChannelData[8] = (ibus[19] << 8) + ibus[18];
 800145c:	4b2b      	ldr	r3, [pc, #172]	@ (800150c <ibusFrameComplete+0x198>)
 800145e:	7cdb      	ldrb	r3, [r3, #19]
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	4a2a      	ldr	r2, [pc, #168]	@ (800150c <ibusFrameComplete+0x198>)
 8001464:	7c92      	ldrb	r2, [r2, #18]
 8001466:	4413      	add	r3, r2
 8001468:	461a      	mov	r2, r3
 800146a:	4b29      	ldr	r3, [pc, #164]	@ (8001510 <ibusFrameComplete+0x19c>)
 800146c:	621a      	str	r2, [r3, #32]
            ibusChannelData[9] = (ibus[21] << 8) + ibus[20];
 800146e:	4b27      	ldr	r3, [pc, #156]	@ (800150c <ibusFrameComplete+0x198>)
 8001470:	7d5b      	ldrb	r3, [r3, #21]
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	4a25      	ldr	r2, [pc, #148]	@ (800150c <ibusFrameComplete+0x198>)
 8001476:	7d12      	ldrb	r2, [r2, #20]
 8001478:	4413      	add	r3, r2
 800147a:	461a      	mov	r2, r3
 800147c:	4b24      	ldr	r3, [pc, #144]	@ (8001510 <ibusFrameComplete+0x19c>)
 800147e:	625a      	str	r2, [r3, #36]	@ 0x24
            ibusChannelData[10] = (ibus[23] << 8) + ibus[22];
 8001480:	4b22      	ldr	r3, [pc, #136]	@ (800150c <ibusFrameComplete+0x198>)
 8001482:	7ddb      	ldrb	r3, [r3, #23]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	4a21      	ldr	r2, [pc, #132]	@ (800150c <ibusFrameComplete+0x198>)
 8001488:	7d92      	ldrb	r2, [r2, #22]
 800148a:	4413      	add	r3, r2
 800148c:	461a      	mov	r2, r3
 800148e:	4b20      	ldr	r3, [pc, #128]	@ (8001510 <ibusFrameComplete+0x19c>)
 8001490:	629a      	str	r2, [r3, #40]	@ 0x28
			ibusChannelData[11] = (ibus[25] << 8) + ibus[24];
 8001492:	4b1e      	ldr	r3, [pc, #120]	@ (800150c <ibusFrameComplete+0x198>)
 8001494:	7e5b      	ldrb	r3, [r3, #25]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	4a1c      	ldr	r2, [pc, #112]	@ (800150c <ibusFrameComplete+0x198>)
 800149a:	7e12      	ldrb	r2, [r2, #24]
 800149c:	4413      	add	r3, r2
 800149e:	461a      	mov	r2, r3
 80014a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <ibusFrameComplete+0x19c>)
 80014a2:	62da      	str	r2, [r3, #44]	@ 0x2c
			ibusChannelData[12] = (ibus[27] << 8) + ibus[26];
 80014a4:	4b19      	ldr	r3, [pc, #100]	@ (800150c <ibusFrameComplete+0x198>)
 80014a6:	7edb      	ldrb	r3, [r3, #27]
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	4a18      	ldr	r2, [pc, #96]	@ (800150c <ibusFrameComplete+0x198>)
 80014ac:	7e92      	ldrb	r2, [r2, #26]
 80014ae:	4413      	add	r3, r2
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <ibusFrameComplete+0x19c>)
 80014b4:	631a      	str	r2, [r3, #48]	@ 0x30
			ibusChannelData[13] = (ibus[29] << 8) + ibus[28];
 80014b6:	4b15      	ldr	r3, [pc, #84]	@ (800150c <ibusFrameComplete+0x198>)
 80014b8:	7f5b      	ldrb	r3, [r3, #29]
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	4a13      	ldr	r2, [pc, #76]	@ (800150c <ibusFrameComplete+0x198>)
 80014be:	7f12      	ldrb	r2, [r2, #28]
 80014c0:	4413      	add	r3, r2
 80014c2:	461a      	mov	r2, r3
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <ibusFrameComplete+0x19c>)
 80014c6:	635a      	str	r2, [r3, #52]	@ 0x34
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	e010      	b.n	80014f0 <ibusFrameComplete+0x17c>
			    if(ibusChannelData[i] > 2100){
 80014ce:	4a10      	ldr	r2, [pc, #64]	@ (8001510 <ibusFrameComplete+0x19c>)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d6:	f640 0234 	movw	r2, #2100	@ 0x834
 80014da:	4293      	cmp	r3, r2
 80014dc:	d905      	bls.n	80014ea <ibusFrameComplete+0x176>
				    ibusChannelData[i] = 1000;
 80014de:	4a0c      	ldr	r2, [pc, #48]	@ (8001510 <ibusFrameComplete+0x19c>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80014e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i =0; i< IBUS_MAX_CHANNEL ;i++){
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	3301      	adds	r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	2b0d      	cmp	r3, #13
 80014f4:	ddeb      	ble.n	80014ce <ibusFrameComplete+0x15a>
				}
			}
            return TRUE;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <ibusFrameComplete+0x188>
        }
    }
    return FALSE;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	200000cc 	.word	0x200000cc
 800150c:	20000108 	.word	0x20000108
 8001510:	200000d0 	.word	0x200000d0

08001514 <mpu6050Connection>:

/* Check mpu6050 connection
 * return 1 -> not connected
 * return 0 -> connected
 */ 
int8_t mpu6050Connection(){
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
    isConnected = HAL_I2C_IsDeviceReady(i2c,IMU_DEV_ADDRES, 3, 5);
 8001518:	4b07      	ldr	r3, [pc, #28]	@ (8001538 <mpu6050Connection+0x24>)
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	2305      	movs	r3, #5
 800151e:	2203      	movs	r2, #3
 8001520:	21d0      	movs	r1, #208	@ 0xd0
 8001522:	f006 fd39 	bl	8007f98 <HAL_I2C_IsDeviceReady>
 8001526:	4603      	mov	r3, r0
 8001528:	b25a      	sxtb	r2, r3
 800152a:	4b04      	ldr	r3, [pc, #16]	@ (800153c <mpu6050Connection+0x28>)
 800152c:	701a      	strb	r2, [r3, #0]
    return isConnected;
 800152e:	4b03      	ldr	r3, [pc, #12]	@ (800153c <mpu6050Connection+0x28>)
 8001530:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001534:	4618      	mov	r0, r3
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000138 	.word	0x20000138
 800153c:	2000013c 	.word	0x2000013c

08001540 <mpu6050_init>:
}

/* configuration mpu6050*/


int8_t mpu6050_init(I2C_HandleTypeDef *hi2c){
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af02      	add	r7, sp, #8
 8001546:	6078      	str	r0, [r7, #4]
	data[1] = (uint8_t)(ACC_2G<<3);
    SPI_write(&data,2);
	return 0;
#endif
#ifdef I2C
  i2c = hi2c;	
 8001548:	4a25      	ldr	r2, [pc, #148]	@ (80015e0 <mpu6050_init+0xa0>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6013      	str	r3, [r2, #0]
	int8_t k = mpu6050Connection();
 800154e:	f7ff ffe1 	bl	8001514 <mpu6050Connection>
 8001552:	4603      	mov	r3, r0
 8001554:	73fb      	strb	r3, [r7, #15]
	if(!k){
 8001556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d13a      	bne.n	80015d4 <mpu6050_init+0x94>
		uint8_t buffer[6];	
		buffer[0] = MPU_RA_PWR_MGMT_1; 
 800155e:	236b      	movs	r3, #107	@ 0x6b
 8001560:	723b      	strb	r3, [r7, #8]
		buffer[1] = RESET_REG;
 8001562:	2300      	movs	r3, #0
 8001564:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8001566:	4b1e      	ldr	r3, [pc, #120]	@ (80015e0 <mpu6050_init+0xa0>)
 8001568:	6818      	ldr	r0, [r3, #0]
 800156a:	f107 0208 	add.w	r2, r7, #8
 800156e:	2301      	movs	r3, #1
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	2302      	movs	r3, #2
 8001574:	21d0      	movs	r1, #208	@ 0xd0
 8001576:	f005 fe43 	bl	8007200 <HAL_I2C_Master_Transmit>
		
		//buffer[0] = CONFIGURATION;
		//buffer[1] = (HZ_5<<0);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);

		buffer[0] = GYRO_REG_CONFIG;
 800157a:	231b      	movs	r3, #27
 800157c:	723b      	strb	r3, [r7, #8]
		buffer[1] = (GYRO_1000dps<<3);
 800157e:	2310      	movs	r3, #16
 8001580:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 8001582:	4b17      	ldr	r3, [pc, #92]	@ (80015e0 <mpu6050_init+0xa0>)
 8001584:	6818      	ldr	r0, [r3, #0]
 8001586:	f107 0208 	add.w	r2, r7, #8
 800158a:	2301      	movs	r3, #1
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	2302      	movs	r3, #2
 8001590:	21d0      	movs	r1, #208	@ 0xd0
 8001592:	f005 fe35 	bl	8007200 <HAL_I2C_Master_Transmit>

		buffer[0] = ACC_REG_CONFIG;
 8001596:	231c      	movs	r3, #28
 8001598:	723b      	strb	r3, [r7, #8]
		buffer[1] = (ACC_16G<<3);
 800159a:	2318      	movs	r3, #24
 800159c:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <mpu6050_init+0xa0>)
 80015a0:	6818      	ldr	r0, [r3, #0]
 80015a2:	f107 0208 	add.w	r2, r7, #8
 80015a6:	2301      	movs	r3, #1
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2302      	movs	r3, #2
 80015ac:	21d0      	movs	r1, #208	@ 0xd0
 80015ae:	f005 fe27 	bl	8007200 <HAL_I2C_Master_Transmit>
		//buffer[1] &= ~(1<<5);
		//buffer[1] |= (1<<5);
		//HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
		
		// set aux i2c pass through mode 
		buffer[0] = INT_PIN_CFG;
 80015b2:	2337      	movs	r3, #55	@ 0x37
 80015b4:	723b      	strb	r3, [r7, #8]
		buffer[1] |= (1<<1);
 80015b6:	7a7b      	ldrb	r3, [r7, #9]
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffer,2,1);
 80015c0:	4b07      	ldr	r3, [pc, #28]	@ (80015e0 <mpu6050_init+0xa0>)
 80015c2:	6818      	ldr	r0, [r3, #0]
 80015c4:	f107 0208 	add.w	r2, r7, #8
 80015c8:	2301      	movs	r3, #1
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2302      	movs	r3, #2
 80015ce:	21d0      	movs	r1, #208	@ 0xd0
 80015d0:	f005 fe16 	bl	8007200 <HAL_I2C_Master_Transmit>

	}
	return k;
 80015d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
#endif

}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000138 	.word	0x20000138

080015e4 <mpu6050_gyro_get_raw>:
/* Gyro get raw data (Lbs/s)
 * x - rate
 * y - rate
 * z - rate   
 */
void mpu6050_gyro_get_raw(axis3_t *raw){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af02      	add	r7, sp, #8
 80015ea:	6078      	str	r0, [r7, #4]
	  uint8_t buffe[6];
	  buffe[0] = (uint8_t)GYRO_DATA_REG;
 80015ec:	2343      	movs	r3, #67	@ 0x43
 80015ee:	723b      	strb	r3, [r7, #8]

#ifdef I2C
	  HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 80015f0:	4b19      	ldr	r3, [pc, #100]	@ (8001658 <mpu6050_gyro_get_raw+0x74>)
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	f107 0208 	add.w	r2, r7, #8
 80015f8:	2301      	movs	r3, #1
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2301      	movs	r3, #1
 80015fe:	21d0      	movs	r1, #208	@ 0xd0
 8001600:	f005 fdfe 	bl	8007200 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 8001604:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <mpu6050_gyro_get_raw+0x74>)
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	f107 0208 	add.w	r2, r7, #8
 800160c:	2301      	movs	r3, #1
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2306      	movs	r3, #6
 8001612:	21d0      	movs	r1, #208	@ 0xd0
 8001614:	f005 fef2 	bl	80073fc <HAL_I2C_Master_Receive>
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_RESET);
	  HAL_SPI_Transmit(&SPI_PORT,&buffe[0],1,1);
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
#endif
	  raw->x = (int16_t)buffe[0]<<8|buffe[1];
 8001618:	7a3b      	ldrb	r3, [r7, #8]
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	b21a      	sxth	r2, r3
 800161e:	7a7b      	ldrb	r3, [r7, #9]
 8001620:	b21b      	sxth	r3, r3
 8001622:	4313      	orrs	r3, r2
 8001624:	b21a      	sxth	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	801a      	strh	r2, [r3, #0]
	  raw->y = (int16_t)buffe[2]<<8|buffe[3];
 800162a:	7abb      	ldrb	r3, [r7, #10]
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	b21a      	sxth	r2, r3
 8001630:	7afb      	ldrb	r3, [r7, #11]
 8001632:	b21b      	sxth	r3, r3
 8001634:	4313      	orrs	r3, r2
 8001636:	b21a      	sxth	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	805a      	strh	r2, [r3, #2]
	  raw->z = (int16_t)buffe[4]<<8|buffe[5];
 800163c:	7b3b      	ldrb	r3, [r7, #12]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	b21a      	sxth	r2, r3
 8001642:	7b7b      	ldrb	r3, [r7, #13]
 8001644:	b21b      	sxth	r3, r3
 8001646:	4313      	orrs	r3, r2
 8001648:	b21a      	sxth	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	809a      	strh	r2, [r3, #4]
	}
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000138 	.word	0x20000138

0800165c <mpu6050_acc_get_raw>:
/* Acc get raw data
	*  x - axis
	*  y - axis
	*  z - axis   
	*/
void mpu6050_acc_get_raw(axis3_t *k){
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af02      	add	r7, sp, #8
 8001662:	6078      	str	r0, [r7, #4]
	axis3_t p_val =*k;
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	f107 0310 	add.w	r3, r7, #16
 800166a:	6810      	ldr	r0, [r2, #0]
 800166c:	6018      	str	r0, [r3, #0]
 800166e:	8892      	ldrh	r2, [r2, #4]
 8001670:	809a      	strh	r2, [r3, #4]
	uint8_t buffe[6];
	buffe[0] = (uint8_t)ACC_DATA_REG;
 8001672:	233b      	movs	r3, #59	@ 0x3b
 8001674:	723b      	strb	r3, [r7, #8]
#ifdef I2C
	HAL_I2C_Master_Transmit(i2c,IMU_DEV_ADDRES,buffe,1,1);
 8001676:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <mpu6050_acc_get_raw+0x80>)
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	f107 0208 	add.w	r2, r7, #8
 800167e:	2301      	movs	r3, #1
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2301      	movs	r3, #1
 8001684:	21d0      	movs	r1, #208	@ 0xd0
 8001686:	f005 fdbb 	bl	8007200 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Receive(i2c,IMU_DEV_ADDRES,buffe,6,1);
 800168a:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <mpu6050_acc_get_raw+0x80>)
 800168c:	6818      	ldr	r0, [r3, #0]
 800168e:	f107 0208 	add.w	r2, r7, #8
 8001692:	2301      	movs	r3, #1
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	2306      	movs	r3, #6
 8001698:	21d0      	movs	r1, #208	@ 0xd0
 800169a:	f005 feaf 	bl	80073fc <HAL_I2C_Master_Receive>
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
*/
      SPI_read(buffe[0],buffe,14);
#endif
	  k->x = (int16_t)buffe[0]<<8|buffe[1];
 800169e:	7a3b      	ldrb	r3, [r7, #8]
 80016a0:	021b      	lsls	r3, r3, #8
 80016a2:	b21a      	sxth	r2, r3
 80016a4:	7a7b      	ldrb	r3, [r7, #9]
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	4313      	orrs	r3, r2
 80016aa:	b21a      	sxth	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	801a      	strh	r2, [r3, #0]
	  k->y = (int16_t)buffe[2]<<8|buffe[3];
 80016b0:	7abb      	ldrb	r3, [r7, #10]
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	7afb      	ldrb	r3, [r7, #11]
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	4313      	orrs	r3, r2
 80016bc:	b21a      	sxth	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	805a      	strh	r2, [r3, #2]
	  k->z = (int16_t)buffe[4]<<8|buffe[5];
 80016c2:	7b3b      	ldrb	r3, [r7, #12]
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	b21a      	sxth	r2, r3
 80016c8:	7b7b      	ldrb	r3, [r7, #13]
 80016ca:	b21b      	sxth	r3, r3
 80016cc:	4313      	orrs	r3, r2
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	809a      	strh	r2, [r3, #4]
}
 80016d4:	bf00      	nop
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000138 	.word	0x20000138

080016e0 <qmc5883_init>:
#include "../Lib/axis.h"

const uint8_t qmc_addres = (0x0d<<1);
static I2C_HandleTypeDef *qmc_i2cport;

void qmc5883_init(I2C_HandleTypeDef *i2cport){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	6078      	str	r0, [r7, #4]
	qmc_i2cport = i2cport;
 80016e8:	4a12      	ldr	r2, [pc, #72]	@ (8001734 <qmc5883_init+0x54>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6013      	str	r3, [r2, #0]
    uint8_t buf[2];
    buf[0]=0x0b;
 80016ee:	230b      	movs	r3, #11
 80016f0:	733b      	strb	r3, [r7, #12]
    buf[1]=0X01;
 80016f2:	2301      	movs	r3, #1
 80016f4:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 80016f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <qmc5883_init+0x54>)
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	231a      	movs	r3, #26
 80016fc:	4619      	mov	r1, r3
 80016fe:	f107 020c 	add.w	r2, r7, #12
 8001702:	2301      	movs	r3, #1
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2302      	movs	r3, #2
 8001708:	f005 fd7a 	bl	8007200 <HAL_I2C_Master_Transmit>
    buf[0]=0x09;
 800170c:	2309      	movs	r3, #9
 800170e:	733b      	strb	r3, [r7, #12]
    buf[1]=0X1D;
 8001710:	231d      	movs	r3, #29
 8001712:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(qmc_i2cport,qmc_addres,buf,2, 1);
 8001714:	4b07      	ldr	r3, [pc, #28]	@ (8001734 <qmc5883_init+0x54>)
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	231a      	movs	r3, #26
 800171a:	4619      	mov	r1, r3
 800171c:	f107 020c 	add.w	r2, r7, #12
 8001720:	2301      	movs	r3, #1
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	2302      	movs	r3, #2
 8001726:	f005 fd6b 	bl	8007200 <HAL_I2C_Master_Transmit>
}
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000140 	.word	0x20000140

08001738 <qmc_get_raw>:

void qmc_get_raw(axis3_t *axis){
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af04      	add	r7, sp, #16
 800173e:	6078      	str	r0, [r7, #4]
	  uint8_t buf[6]={0};
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	2300      	movs	r3, #0
 8001746:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Mem_Read(qmc_i2cport,qmc_addres,0x00,1,buf,6,1);
 8001748:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <qmc_get_raw+0x6c>)
 800174a:	6818      	ldr	r0, [r3, #0]
 800174c:	231a      	movs	r3, #26
 800174e:	4619      	mov	r1, r3
 8001750:	2301      	movs	r3, #1
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	2306      	movs	r3, #6
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	f107 0308 	add.w	r3, r7, #8
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	2301      	movs	r3, #1
 8001760:	2200      	movs	r2, #0
 8001762:	f006 f9b1 	bl	8007ac8 <HAL_I2C_Mem_Read>
	  axis->x=((int16_t)buf[1]<<8|buf[0]) ;
 8001766:	7a7b      	ldrb	r3, [r7, #9]
 8001768:	021b      	lsls	r3, r3, #8
 800176a:	b21a      	sxth	r2, r3
 800176c:	7a3b      	ldrb	r3, [r7, #8]
 800176e:	b21b      	sxth	r3, r3
 8001770:	4313      	orrs	r3, r2
 8001772:	b21a      	sxth	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	801a      	strh	r2, [r3, #0]
	  axis->y=((int16_t)buf[3]<<8|buf[2]);
 8001778:	7afb      	ldrb	r3, [r7, #11]
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	b21a      	sxth	r2, r3
 800177e:	7abb      	ldrb	r3, [r7, #10]
 8001780:	b21b      	sxth	r3, r3
 8001782:	4313      	orrs	r3, r2
 8001784:	b21a      	sxth	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	805a      	strh	r2, [r3, #2]
	  axis->z=((int16_t)buf[5]<<8|buf[4]);
 800178a:	7b7b      	ldrb	r3, [r7, #13]
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	b21a      	sxth	r2, r3
 8001790:	7b3b      	ldrb	r3, [r7, #12]
 8001792:	b21b      	sxth	r3, r3
 8001794:	4313      	orrs	r3, r2
 8001796:	b21a      	sxth	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	809a      	strh	r2, [r3, #4]
}
 800179c:	bf00      	nop
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000140 	.word	0x20000140

080017a8 <black_box_init>:
FRESULT open_state;
int32_t puts_state;
/*
 * init black box
 */
void black_box_init(){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
	fs.file = &SDFile;
 80017ac:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <black_box_init+0x34>)
 80017ae:	4a0c      	ldr	r2, [pc, #48]	@ (80017e0 <black_box_init+0x38>)
 80017b0:	605a      	str	r2, [r3, #4]
    mount_state = f_mount(&SDFatFS,"",1);
 80017b2:	2201      	movs	r2, #1
 80017b4:	490b      	ldr	r1, [pc, #44]	@ (80017e4 <black_box_init+0x3c>)
 80017b6:	480c      	ldr	r0, [pc, #48]	@ (80017e8 <black_box_init+0x40>)
 80017b8:	f00d fd82 	bl	800f2c0 <f_mount>
 80017bc:	4603      	mov	r3, r0
 80017be:	461a      	mov	r2, r3
 80017c0:	4b0a      	ldr	r3, [pc, #40]	@ (80017ec <black_box_init+0x44>)
 80017c2:	701a      	strb	r2, [r3, #0]
    open_state = f_open(&SDFile,"DM.TXT", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 80017c4:	2213      	movs	r2, #19
 80017c6:	490a      	ldr	r1, [pc, #40]	@ (80017f0 <black_box_init+0x48>)
 80017c8:	4805      	ldr	r0, [pc, #20]	@ (80017e0 <black_box_init+0x38>)
 80017ca:	f00d fde1 	bl	800f390 <f_open>
 80017ce:	4603      	mov	r3, r0
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b08      	ldr	r3, [pc, #32]	@ (80017f4 <black_box_init+0x4c>)
 80017d4:	701a      	strb	r2, [r3, #0]
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000144 	.word	0x20000144
 80017e0:	2000104c 	.word	0x2000104c
 80017e4:	080132d4 	.word	0x080132d4
 80017e8:	20000e18 	.word	0x20000e18
 80017ec:	20000350 	.word	0x20000350
 80017f0:	080132d8 	.word	0x080132d8
 80017f4:	20000351 	.word	0x20000351

080017f8 <black_box_pack_int>:
    fs.buffer_index += index;
}



void black_box_pack_int(int val){
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08c      	sub	sp, #48	@ 0x30
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

	fs.indexx=0;
 8001800:	4b48      	ldr	r3, [pc, #288]	@ (8001924 <black_box_pack_int+0x12c>)
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
	int len_str;
	int val_ = val;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	617b      	str	r3, [r7, #20]
	char str_[11];
	memset(str_,0,11);
 800180a:	f107 0308 	add.w	r3, r7, #8
 800180e:	220b      	movs	r2, #11
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f011 fb7c 	bl	8012f10 <memset>
	if(val != 0){
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d02a      	beq.n	8001874 <black_box_pack_int+0x7c>
		val = abs(val);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	bfb8      	it	lt
 8001824:	425b      	neglt	r3, r3
 8001826:	607b      	str	r3, [r7, #4]
		len_str = intToStr(val,str_,0);
 8001828:	f107 0308 	add.w	r3, r7, #8
 800182c:	2200      	movs	r2, #0
 800182e:	4619      	mov	r1, r3
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f91b 	bl	8001a6c <intToStr>
 8001836:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if(val_ < 0){
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	2b00      	cmp	r3, #0
 800183c:	da2a      	bge.n	8001894 <black_box_pack_int+0x9c>
			for(int i = len_str; i > 0; i--){
 800183e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001840:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001842:	e00e      	b.n	8001862 <black_box_pack_int+0x6a>
				str_[i] = str_[i - 1];
 8001844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001846:	3b01      	subs	r3, #1
 8001848:	3330      	adds	r3, #48	@ 0x30
 800184a:	443b      	add	r3, r7
 800184c:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 8001850:	f107 0208 	add.w	r2, r7, #8
 8001854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001856:	4413      	add	r3, r2
 8001858:	460a      	mov	r2, r1
 800185a:	701a      	strb	r2, [r3, #0]
			for(int i = len_str; i > 0; i--){
 800185c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800185e:	3b01      	subs	r3, #1
 8001860:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001864:	2b00      	cmp	r3, #0
 8001866:	dced      	bgt.n	8001844 <black_box_pack_int+0x4c>
			}
			len_str ++;
 8001868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800186a:	3301      	adds	r3, #1
 800186c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			str_[0] = '-';
 800186e:	232d      	movs	r3, #45	@ 0x2d
 8001870:	723b      	strb	r3, [r7, #8]
 8001872:	e00f      	b.n	8001894 <black_box_pack_int+0x9c>
		}
	}
	else{
	   fs.buffer[fs.buffer_index] ='0';
 8001874:	4b2b      	ldr	r3, [pc, #172]	@ (8001924 <black_box_pack_int+0x12c>)
 8001876:	891b      	ldrh	r3, [r3, #8]
 8001878:	461a      	mov	r2, r3
 800187a:	4b2a      	ldr	r3, [pc, #168]	@ (8001924 <black_box_pack_int+0x12c>)
 800187c:	4413      	add	r3, r2
 800187e:	2230      	movs	r2, #48	@ 0x30
 8001880:	729a      	strb	r2, [r3, #10]
	   len_str = 1;
 8001882:	2301      	movs	r3, #1
 8001884:	62fb      	str	r3, [r7, #44]	@ 0x2c
	   fs.buffer_index ++;
 8001886:	4b27      	ldr	r3, [pc, #156]	@ (8001924 <black_box_pack_int+0x12c>)
 8001888:	891b      	ldrh	r3, [r3, #8]
 800188a:	3301      	adds	r3, #1
 800188c:	b29a      	uxth	r2, r3
 800188e:	4b25      	ldr	r3, [pc, #148]	@ (8001924 <black_box_pack_int+0x12c>)
 8001890:	811a      	strh	r2, [r3, #8]
 8001892:	e044      	b.n	800191e <black_box_pack_int+0x126>
		return;
	}
	// copy str to buffer
	int str_idx = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	627b      	str	r3, [r7, #36]	@ 0x24
	int index_flag;
	int max_index = fs.buffer_index + len_str;
 8001898:	4b22      	ldr	r3, [pc, #136]	@ (8001924 <black_box_pack_int+0x12c>)
 800189a:	891b      	ldrh	r3, [r3, #8]
 800189c:	461a      	mov	r2, r3
 800189e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a0:	4413      	add	r3, r2
 80018a2:	61fb      	str	r3, [r7, #28]
	if(max_index <=  MAX_BUFFER_SIZE){
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018aa:	dc08      	bgt.n	80018be <black_box_pack_int+0xc6>
		max_index = fs.buffer_index + len_str;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001924 <black_box_pack_int+0x12c>)
 80018ae:	891b      	ldrh	r3, [r3, #8]
 80018b0:	461a      	mov	r2, r3
 80018b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b4:	4413      	add	r3, r2
 80018b6:	61fb      	str	r3, [r7, #28]
		index_flag = 1;
 80018b8:	2301      	movs	r3, #1
 80018ba:	623b      	str	r3, [r7, #32]
 80018bc:	e004      	b.n	80018c8 <black_box_pack_int+0xd0>
	}
	else{
		max_index = MAX_BUFFER_SIZE;
 80018be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018c2:	61fb      	str	r3, [r7, #28]
		index_flag = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	623b      	str	r3, [r7, #32]
	}
	for(int j = fs.buffer_index ; j < max_index; j++ ){
 80018c8:	4b16      	ldr	r3, [pc, #88]	@ (8001924 <black_box_pack_int+0x12c>)
 80018ca:	891b      	ldrh	r3, [r3, #8]
 80018cc:	61bb      	str	r3, [r7, #24]
 80018ce:	e00f      	b.n	80018f0 <black_box_pack_int+0xf8>
			fs.buffer[j] = str_[str_idx ++];
 80018d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80018d6:	3330      	adds	r3, #48	@ 0x30
 80018d8:	443b      	add	r3, r7
 80018da:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 80018de:	4a11      	ldr	r2, [pc, #68]	@ (8001924 <black_box_pack_int+0x12c>)
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	4413      	add	r3, r2
 80018e4:	330a      	adds	r3, #10
 80018e6:	460a      	mov	r2, r1
 80018e8:	701a      	strb	r2, [r3, #0]
	for(int j = fs.buffer_index ; j < max_index; j++ ){
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	3301      	adds	r3, #1
 80018ee:	61bb      	str	r3, [r7, #24]
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	dbeb      	blt.n	80018d0 <black_box_pack_int+0xd8>
	}
	
	if(index_flag){
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d008      	beq.n	8001910 <black_box_pack_int+0x118>
		fs.buffer_index += len_str;
 80018fe:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <black_box_pack_int+0x12c>)
 8001900:	891a      	ldrh	r2, [r3, #8]
 8001902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001904:	b29b      	uxth	r3, r3
 8001906:	4413      	add	r3, r2
 8001908:	b29a      	uxth	r2, r3
 800190a:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <black_box_pack_int+0x12c>)
 800190c:	811a      	strh	r2, [r3, #8]
 800190e:	e006      	b.n	800191e <black_box_pack_int+0x126>
	}
	else{
		fs.buffer_index += MAX_BUFFER_SIZE;
 8001910:	4b04      	ldr	r3, [pc, #16]	@ (8001924 <black_box_pack_int+0x12c>)
 8001912:	891b      	ldrh	r3, [r3, #8]
 8001914:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001918:	b29a      	uxth	r2, r3
 800191a:	4b02      	ldr	r3, [pc, #8]	@ (8001924 <black_box_pack_int+0x12c>)
 800191c:	811a      	strh	r2, [r3, #8]
	}
}
 800191e:	3730      	adds	r7, #48	@ 0x30
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000144 	.word	0x20000144

08001928 <black_box_pack_str>:


void black_box_pack_str(char *c){
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

    int i = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 8001934:	e01c      	b.n	8001970 <black_box_pack_str+0x48>
        if((fs.buffer_index + i) > MAX_BUFFER_SIZE){
 8001936:	4b17      	ldr	r3, [pc, #92]	@ (8001994 <black_box_pack_str+0x6c>)
 8001938:	891b      	ldrh	r3, [r3, #8]
 800193a:	461a      	mov	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4413      	add	r3, r2
 8001940:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001944:	dd04      	ble.n	8001950 <black_box_pack_str+0x28>
                fs.buffer_index = MAX_BUFFER_SIZE;
 8001946:	4b13      	ldr	r3, [pc, #76]	@ (8001994 <black_box_pack_str+0x6c>)
 8001948:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800194c:	811a      	strh	r2, [r3, #8]
                return;
 800194e:	e01d      	b.n	800198c <black_box_pack_str+0x64>
        }
        fs.buffer[fs.buffer_index + i] = c[i];
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	441a      	add	r2, r3
 8001956:	4b0f      	ldr	r3, [pc, #60]	@ (8001994 <black_box_pack_str+0x6c>)
 8001958:	891b      	ldrh	r3, [r3, #8]
 800195a:	4619      	mov	r1, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	440b      	add	r3, r1
 8001960:	7811      	ldrb	r1, [r2, #0]
 8001962:	4a0c      	ldr	r2, [pc, #48]	@ (8001994 <black_box_pack_str+0x6c>)
 8001964:	4413      	add	r3, r2
 8001966:	460a      	mov	r2, r1
 8001968:	729a      	strb	r2, [r3, #10]
        i ++;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	3301      	adds	r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
    while (c[i]){
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1dc      	bne.n	8001936 <black_box_pack_str+0xe>
    }
    fs.buffer_index += i;
 800197c:	4b05      	ldr	r3, [pc, #20]	@ (8001994 <black_box_pack_str+0x6c>)
 800197e:	891a      	ldrh	r2, [r3, #8]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	b29b      	uxth	r3, r3
 8001984:	4413      	add	r3, r2
 8001986:	b29a      	uxth	r2, r3
 8001988:	4b02      	ldr	r3, [pc, #8]	@ (8001994 <black_box_pack_str+0x6c>)
 800198a:	811a      	strh	r2, [r3, #8]
}
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	20000144 	.word	0x20000144

08001998 <black_box_pack_char>:

void black_box_pack_char(char c){
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
    fs.buffer[fs.buffer_index ] = c;
 80019a2:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <black_box_pack_char+0x30>)
 80019a4:	891b      	ldrh	r3, [r3, #8]
 80019a6:	461a      	mov	r2, r3
 80019a8:	4b07      	ldr	r3, [pc, #28]	@ (80019c8 <black_box_pack_char+0x30>)
 80019aa:	4413      	add	r3, r2
 80019ac:	79fa      	ldrb	r2, [r7, #7]
 80019ae:	729a      	strb	r2, [r3, #10]
    fs.buffer_index ++;
 80019b0:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <black_box_pack_char+0x30>)
 80019b2:	891b      	ldrh	r3, [r3, #8]
 80019b4:	3301      	adds	r3, #1
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	4b03      	ldr	r3, [pc, #12]	@ (80019c8 <black_box_pack_char+0x30>)
 80019ba:	811a      	strh	r2, [r3, #8]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20000144 	.word	0x20000144

080019cc <black_box_load>:



void black_box_load()
 {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
	  puts_state = f_puts(fs.buffer,fs.file);
 80019d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a04 <black_box_load+0x38>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	4619      	mov	r1, r3
 80019d6:	480c      	ldr	r0, [pc, #48]	@ (8001a08 <black_box_load+0x3c>)
 80019d8:	f00e fa60 	bl	800fe9c <f_puts>
 80019dc:	4603      	mov	r3, r0
 80019de:	4a0b      	ldr	r2, [pc, #44]	@ (8001a0c <black_box_load+0x40>)
 80019e0:	6013      	str	r3, [r2, #0]
      f_sync(fs.file);
 80019e2:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <black_box_load+0x38>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f00e f952 	bl	800fc90 <f_sync>
      memset(fs.buffer,0,MAX_BUFFER_SIZE);
 80019ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019f0:	2100      	movs	r1, #0
 80019f2:	4805      	ldr	r0, [pc, #20]	@ (8001a08 <black_box_load+0x3c>)
 80019f4:	f011 fa8c 	bl	8012f10 <memset>
      fs.buffer_index = 0;
 80019f8:	4b02      	ldr	r3, [pc, #8]	@ (8001a04 <black_box_load+0x38>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	811a      	strh	r2, [r3, #8]
 }
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000144 	.word	0x20000144
 8001a08:	2000014e 	.word	0x2000014e
 8001a0c:	20000354 	.word	0x20000354

08001a10 <reverse>:




static void reverse( char *str, int len)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b087      	sub	sp, #28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001a24:	e018      	b.n	8001a58 <reverse+0x48>
        temp = str[i];
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	441a      	add	r2, r3
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	440b      	add	r3, r1
 8001a3c:	7812      	ldrb	r2, [r2, #0]
 8001a3e:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	701a      	strb	r2, [r3, #0]
        i++;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
        j--;
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	dbe2      	blt.n	8001a26 <reverse+0x16>
    }
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	371c      	adds	r7, #28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <intToStr>:

 static int intToStr(int x,  char *str, int d)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
    while (x) {
 8001a78:	e01f      	b.n	8001aba <intToStr+0x4e>
        str[fs.indexx++] = (x % 10) + '0';
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001af8 <intToStr+0x8c>)
 8001a7e:	fb83 1302 	smull	r1, r3, r3, r2
 8001a82:	1099      	asrs	r1, r3, #2
 8001a84:	17d3      	asrs	r3, r2, #31
 8001a86:	1ac9      	subs	r1, r1, r3
 8001a88:	460b      	mov	r3, r1
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	1ad1      	subs	r1, r2, r3
 8001a92:	b2ca      	uxtb	r2, r1
 8001a94:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <intToStr+0x90>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	1c59      	adds	r1, r3, #1
 8001a9a:	4818      	ldr	r0, [pc, #96]	@ (8001afc <intToStr+0x90>)
 8001a9c:	6001      	str	r1, [r0, #0]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	440b      	add	r3, r1
 8001aa4:	3230      	adds	r2, #48	@ 0x30
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4a12      	ldr	r2, [pc, #72]	@ (8001af8 <intToStr+0x8c>)
 8001aae:	fb82 1203 	smull	r1, r2, r2, r3
 8001ab2:	1092      	asrs	r2, r2, #2
 8001ab4:	17db      	asrs	r3, r3, #31
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	60fb      	str	r3, [r7, #12]
    while (x) {
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1dc      	bne.n	8001a7a <intToStr+0xe>
    }

    while (fs.indexx < d)
 8001ac0:	e009      	b.n	8001ad6 <intToStr+0x6a>
        str[fs.indexx++] = '0';
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <intToStr+0x90>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	490c      	ldr	r1, [pc, #48]	@ (8001afc <intToStr+0x90>)
 8001aca:	600a      	str	r2, [r1, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	2230      	movs	r2, #48	@ 0x30
 8001ad4:	701a      	strb	r2, [r3, #0]
    while (fs.indexx < d)
 8001ad6:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <intToStr+0x90>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	dcf0      	bgt.n	8001ac2 <intToStr+0x56>
    reverse(str,fs.indexx);
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <intToStr+0x90>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	68b8      	ldr	r0, [r7, #8]
 8001ae8:	f7ff ff92 	bl	8001a10 <reverse>
    return fs.indexx;
 8001aec:	4b03      	ldr	r3, [pc, #12]	@ (8001afc <intToStr+0x90>)
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	66666667 	.word	0x66666667
 8001afc:	20000144 	.word	0x20000144

08001b00 <compassInit>:
int8_t file_open;


/*  Init compass
 */
void compassInit(){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  calibrate_value.scale_factor_axis[X] = 1.0f;
 8001b04:	4b17      	ldr	r3, [pc, #92]	@ (8001b64 <compassInit+0x64>)
 8001b06:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001b0a:	60da      	str	r2, [r3, #12]
  calibrate_value.scale_factor_axis[Y] = 1.0f;
 8001b0c:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <compassInit+0x64>)
 8001b0e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001b12:	611a      	str	r2, [r3, #16]
  calibrate_value.scale_factor_axis[Z] = 1.0f;
 8001b14:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <compassInit+0x64>)
 8001b16:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001b1a:	615a      	str	r2, [r3, #20]

  calibrate_value.hard_iron_calibrate_value[X] = 0;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <compassInit+0x64>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
  calibrate_value.hard_iron_calibrate_value[Y] = 0;
 8001b22:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <compassInit+0x64>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	605a      	str	r2, [r3, #4]
  calibrate_value.hard_iron_calibrate_value[Z] = 0;
 8001b28:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <compassInit+0x64>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
	
  //file_open = black_box_create_file(&calib_file,file_name);
	 
 // epprom init
  AT24Cxx_init(&device_array, 0x00, &hi2c2);
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b68 <compassInit+0x68>)
 8001b30:	2100      	movs	r1, #0
 8001b32:	480e      	ldr	r0, [pc, #56]	@ (8001b6c <compassInit+0x6c>)
 8001b34:	f003 fb26 	bl	8005184 <AT24Cxx_init>
  AT24Cxx_add_dev(&device_array, 0x01, &hi2c2);
 8001b38:	4a0b      	ldr	r2, [pc, #44]	@ (8001b68 <compassInit+0x68>)
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	480b      	ldr	r0, [pc, #44]	@ (8001b6c <compassInit+0x6c>)
 8001b3e:	f003 fb61 	bl	8005204 <AT24Cxx_add_dev>

  // init sensor
#ifdef QMC5883
  qmc5883_init(&hi2c1);
 8001b42:	480b      	ldr	r0, [pc, #44]	@ (8001b70 <compassInit+0x70>)
 8001b44:	f7ff fdcc 	bl	80016e0 <qmc5883_init>
#else
  hmc5883_init(&hi2c2);
#endif
  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){
 8001b48:	2120      	movs	r1, #32
 8001b4a:	480a      	ldr	r0, [pc, #40]	@ (8001b74 <compassInit+0x74>)
 8001b4c:	f005 f9cc 	bl	8006ee8 <HAL_GPIO_ReadPin>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d002      	beq.n	8001b5c <compassInit+0x5c>
      compass_calibrate();
 8001b56:	f000 f8f3 	bl	8001d40 <compass_calibrate>
  }
  else{
      read_calibrate_file();
  }
}
 8001b5a:	e001      	b.n	8001b60 <compassInit+0x60>
      read_calibrate_file();
 8001b5c:	f000 f87c 	bl	8001c58 <read_calibrate_file>
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000380 	.word	0x20000380
 8001b68:	20000834 	.word	0x20000834
 8001b6c:	2000035c 	.word	0x2000035c
 8001b70:	200007e0 	.word	0x200007e0
 8001b74:	40010c00 	.word	0x40010c00

08001b78 <compass_get>:

void compass_get(axis3_t *out){
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	axis3_t as;
#ifdef QMC5883
         qmc_get_raw(&as);
 8001b80:	f107 0308 	add.w	r3, r7, #8
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fdd7 	bl	8001738 <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
    // calibrate ouput
	out->x = (as.x - calibrate_value.hard_iron_calibrate_value[X]);
 8001b8a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	4b30      	ldr	r3, [pc, #192]	@ (8001c54 <compass_get+0xdc>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	b21a      	sxth	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	801a      	strh	r2, [r3, #0]
	out->y = (as.y - calibrate_value.hard_iron_calibrate_value[Y]);
 8001ba0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c54 <compass_get+0xdc>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	b21a      	sxth	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	805a      	strh	r2, [r3, #2]
	out->z = (as.z - calibrate_value.hard_iron_calibrate_value[Z]);
 8001bb6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	4b25      	ldr	r3, [pc, #148]	@ (8001c54 <compass_get+0xdc>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	b21a      	sxth	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	809a      	strh	r2, [r3, #4]

    out->x *= calibrate_value.scale_factor_axis[X];
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff f8ca 	bl	8000d6c <__aeabi_i2f>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	4b1e      	ldr	r3, [pc, #120]	@ (8001c54 <compass_get+0xdc>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	4619      	mov	r1, r3
 8001be0:	4610      	mov	r0, r2
 8001be2:	f7ff f917 	bl	8000e14 <__aeabi_fmul>
 8001be6:	4603      	mov	r3, r0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff faef 	bl	80011cc <__aeabi_f2iz>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	b21a      	sxth	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	801a      	strh	r2, [r3, #0]
    out->y *= calibrate_value.scale_factor_axis[Y];
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff f8b5 	bl	8000d6c <__aeabi_i2f>
 8001c02:	4602      	mov	r2, r0
 8001c04:	4b13      	ldr	r3, [pc, #76]	@ (8001c54 <compass_get+0xdc>)
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	f7ff f902 	bl	8000e14 <__aeabi_fmul>
 8001c10:	4603      	mov	r3, r0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fada 	bl	80011cc <__aeabi_f2iz>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	b21a      	sxth	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	805a      	strh	r2, [r3, #2]
    out->z *= calibrate_value.scale_factor_axis[Z];
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f8a0 	bl	8000d6c <__aeabi_i2f>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b09      	ldr	r3, [pc, #36]	@ (8001c54 <compass_get+0xdc>)
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	4619      	mov	r1, r3
 8001c34:	4610      	mov	r0, r2
 8001c36:	f7ff f8ed 	bl	8000e14 <__aeabi_fmul>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff fac5 	bl	80011cc <__aeabi_f2iz>
 8001c42:	4603      	mov	r3, r0
 8001c44:	b21a      	sxth	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	809a      	strh	r2, [r3, #4]
}
 8001c4a:	bf00      	nop
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000380 	.word	0x20000380

08001c58 <read_calibrate_file>:

/* read calibrate data from eprrom
 * 
 */

void read_calibrate_file(){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
	int32_t sum_all = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
    AT24Cxx_read_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_value,0x0010,sizeof(cali_mag_t));
 8001c62:	4b33      	ldr	r3, [pc, #204]	@ (8001d30 <read_calibrate_file+0xd8>)
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	231c      	movs	r3, #28
 8001c68:	2210      	movs	r2, #16
 8001c6a:	4932      	ldr	r1, [pc, #200]	@ (8001d34 <read_calibrate_file+0xdc>)
 8001c6c:	f003 fc23 	bl	80054b6 <AT24Cxx_read_byte_buffer>
   	sum_all += calibrate_value.scale_factor_axis[X];
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff f87b 	bl	8000d6c <__aeabi_i2f>
 8001c76:	4602      	mov	r2, r0
 8001c78:	4b2e      	ldr	r3, [pc, #184]	@ (8001d34 <read_calibrate_file+0xdc>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4610      	mov	r0, r2
 8001c80:	f7fe ffc0 	bl	8000c04 <__addsf3>
 8001c84:	4603      	mov	r3, r0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff faa0 	bl	80011cc <__aeabi_f2iz>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Y];
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff f86b 	bl	8000d6c <__aeabi_i2f>
 8001c96:	4602      	mov	r2, r0
 8001c98:	4b26      	ldr	r3, [pc, #152]	@ (8001d34 <read_calibrate_file+0xdc>)
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	f7fe ffb0 	bl	8000c04 <__addsf3>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fa90 	bl	80011cc <__aeabi_f2iz>
 8001cac:	4603      	mov	r3, r0
 8001cae:	607b      	str	r3, [r7, #4]
    sum_all += calibrate_value.scale_factor_axis[Z];
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff f85b 	bl	8000d6c <__aeabi_i2f>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d34 <read_calibrate_file+0xdc>)
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	f7fe ffa0 	bl	8000c04 <__addsf3>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fa80 	bl	80011cc <__aeabi_f2iz>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	607b      	str	r3, [r7, #4]

    sum_all += (int)calibrate_value.hard_iron_calibrate_value[X];
 8001cd0:	4b18      	ldr	r3, [pc, #96]	@ (8001d34 <read_calibrate_file+0xdc>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Y];
 8001cda:	4b16      	ldr	r3, [pc, #88]	@ (8001d34 <read_calibrate_file+0xdc>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	607b      	str	r3, [r7, #4]
    sum_all += (int)calibrate_value.hard_iron_calibrate_value[Z];
 8001ce4:	4b13      	ldr	r3, [pc, #76]	@ (8001d34 <read_calibrate_file+0xdc>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	4413      	add	r3, r2
 8001cec:	607b      	str	r3, [r7, #4]

    if(ABS(sum_all - (int)calibrate_value.sum_all_value) > 40){
 8001cee:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <read_calibrate_file+0xdc>)
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	bfb8      	it	lt
 8001cfe:	425b      	neglt	r3, r3
 8001d00:	2b28      	cmp	r3, #40	@ 0x28
 8001d02:	dd11      	ble.n	8001d28 <read_calibrate_file+0xd0>
      while(1){
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001d04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d08:	480b      	ldr	r0, [pc, #44]	@ (8001d38 <read_calibrate_file+0xe0>)
 8001d0a:	f005 f91c 	bl	8006f46 <HAL_GPIO_TogglePin>
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001d0e:	2120      	movs	r1, #32
 8001d10:	480a      	ldr	r0, [pc, #40]	@ (8001d3c <read_calibrate_file+0xe4>)
 8001d12:	f005 f918 	bl	8006f46 <HAL_GPIO_TogglePin>
       HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001d16:	2110      	movs	r1, #16
 8001d18:	4808      	ldr	r0, [pc, #32]	@ (8001d3c <read_calibrate_file+0xe4>)
 8001d1a:	f005 f914 	bl	8006f46 <HAL_GPIO_TogglePin>
       HAL_Delay(50); // 10 Hz loop
 8001d1e:	2032      	movs	r0, #50	@ 0x32
 8001d20:	f004 f9c6 	bl	80060b0 <HAL_Delay>
	   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001d24:	bf00      	nop
 8001d26:	e7ed      	b.n	8001d04 <read_calibrate_file+0xac>
      }
    }
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	2000035c 	.word	0x2000035c
 8001d34:	20000380 	.word	0x20000380
 8001d38:	40011000 	.word	0x40011000
 8001d3c:	40010800 	.word	0x40010800

08001d40 <compass_calibrate>:


/* Calibrate function
 * write calibrate value to sd card
 */
static void compass_calibrate(){
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b095      	sub	sp, #84	@ 0x54
 8001d44:	af00      	add	r7, sp, #0
    int16_t max_val[] = {-32767,-32767,-32767};
 8001d46:	4a9f      	ldr	r2, [pc, #636]	@ (8001fc4 <compass_calibrate+0x284>)
 8001d48:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d50:	6018      	str	r0, [r3, #0]
 8001d52:	3304      	adds	r3, #4
 8001d54:	8019      	strh	r1, [r3, #0]
    int16_t min_val[] = {32767, 32767, 32767};
 8001d56:	4a9c      	ldr	r2, [pc, #624]	@ (8001fc8 <compass_calibrate+0x288>)
 8001d58:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d60:	6018      	str	r0, [r3, #0]
 8001d62:	3304      	adds	r3, #4
 8001d64:	8019      	strh	r1, [r3, #0]
    uint8_t fist_data = TRUE;
 8001d66:	2301      	movs	r3, #1
 8001d68:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    cali_mag_t calibrate_temp;
    ignore_data = 0;
 8001d6c:	4b97      	ldr	r3, [pc, #604]	@ (8001fcc <compass_calibrate+0x28c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	801a      	strh	r2, [r3, #0]
    int16_t last_axis[3];
    axis3_t as;

	while(!file_open){
 8001d72:	e0b5      	b.n	8001ee0 <compass_calibrate+0x1a0>
 // read data from sensor
#ifdef QMC5883
         qmc_get_raw(&as);
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fcde 	bl	8001738 <qmc_get_raw>
#else
         hmc_get_raw(&as);
#endif
        if(fist_data){
 8001d7c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00c      	beq.n	8001d9e <compass_calibrate+0x5e>
          last_axis[X] = as.x;
 8001d84:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d88:	81bb      	strh	r3, [r7, #12]
          last_axis[Y] = as.y;
 8001d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d8e:	81fb      	strh	r3, [r7, #14]
          last_axis[Z] = as.z;
 8001d90:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001d94:	823b      	strh	r3, [r7, #16]
          fist_data = FALSE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          continue;
 8001d9c:	e0a0      	b.n	8001ee0 <compass_calibrate+0x1a0>
        }
        int16_t delta_x_ = as.x -  last_axis[X];
 8001d9e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        int16_t delta_y_ = as.y -  last_axis[Y];
 8001db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
        int16_t delta_z_ = as.z -  last_axis[Z];
 8001dc6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        // ignore wrong value and set to zero
        int16_t ckec = sqrt(sq(delta_x_) + sq(delta_y_) + sq(delta_z_));
 8001dda:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001dde:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	@ 0x4a
 8001de2:	fb03 f202 	mul.w	r2, r3, r2
 8001de6:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 8001dea:	f9b7 1048 	ldrsh.w	r1, [r7, #72]	@ 0x48
 8001dee:	fb01 f303 	mul.w	r3, r1, r3
 8001df2:	441a      	add	r2, r3
 8001df4:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8001df8:	f9b7 1046 	ldrsh.w	r1, [r7, #70]	@ 0x46
 8001dfc:	fb01 f303 	mul.w	r3, r1, r3
 8001e00:	4413      	add	r3, r2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe fb66 	bl	80004d4 <__aeabi_i2d>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f011 f8d0 	bl	8012fb4 <sqrt>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4610      	mov	r0, r2
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f7fe fe74 	bl	8000b08 <__aeabi_d2iz>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
        if(ckec > max_change){
 8001e26:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001e2a:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	dd09      	ble.n	8001e46 <compass_calibrate+0x106>
            fist_data = TRUE; 
 8001e32:	2301      	movs	r3, #1
 8001e34:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            ignore_data ++;
 8001e38:	4b64      	ldr	r3, [pc, #400]	@ (8001fcc <compass_calibrate+0x28c>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	4b62      	ldr	r3, [pc, #392]	@ (8001fcc <compass_calibrate+0x28c>)
 8001e42:	801a      	strh	r2, [r3, #0]
            continue;
 8001e44:	e04c      	b.n	8001ee0 <compass_calibrate+0x1a0>
        }
        last_axis[X] = as.x;
 8001e46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e4a:	81bb      	strh	r3, [r7, #12]
        last_axis[Y] = as.y;
 8001e4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e50:	81fb      	strh	r3, [r7, #14]
        last_axis[Z] = as.z;
 8001e52:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e56:	823b      	strh	r3, [r7, #16]
        // get max value each axis
        if(as.x > max_val[X]) max_val[X] = as.x;
 8001e58:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001e5c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001e60:	429a      	cmp	r2, r3
 8001e62:	dd02      	ble.n	8001e6a <compass_calibrate+0x12a>
 8001e64:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e68:	873b      	strh	r3, [r7, #56]	@ 0x38
        if(as.y > max_val[Y]) max_val[Y] = as.y;
 8001e6a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e6e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001e72:	429a      	cmp	r2, r3
 8001e74:	dd02      	ble.n	8001e7c <compass_calibrate+0x13c>
 8001e76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e7a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        if(as.z > max_val[Z]) max_val[Z] = as.z;
 8001e7c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001e80:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001e84:	429a      	cmp	r2, r3
 8001e86:	dd02      	ble.n	8001e8e <compass_calibrate+0x14e>
 8001e88:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e8c:	87bb      	strh	r3, [r7, #60]	@ 0x3c

        // min value
        if(as.x < min_val[X]) min_val[X] = as.x;
 8001e8e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001e92:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001e96:	429a      	cmp	r2, r3
 8001e98:	da02      	bge.n	8001ea0 <compass_calibrate+0x160>
 8001e9a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e9e:	863b      	strh	r3, [r7, #48]	@ 0x30
        if(as.y < min_val[Y]) min_val[Y] = as.y;
 8001ea0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ea4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	da02      	bge.n	8001eb2 <compass_calibrate+0x172>
 8001eac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eb0:	867b      	strh	r3, [r7, #50]	@ 0x32
        if(as.z < min_val[Z]) min_val[Z] = as.z;
 8001eb2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001eb6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	da02      	bge.n	8001ec4 <compass_calibrate+0x184>
 8001ebe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ec2:	86bb      	strh	r3, [r7, #52]	@ 0x34
        black_box_pack_str(&calib_file,"\n");
		
		black_box_load(&calib_file);
        black_box_sync(&calib_file);
        */
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001ec4:	2110      	movs	r1, #16
 8001ec6:	4842      	ldr	r0, [pc, #264]	@ (8001fd0 <compass_calibrate+0x290>)
 8001ec8:	f005 f83d 	bl	8006f46 <HAL_GPIO_TogglePin>
        HAL_Delay(20); // 10 Hz loop
 8001ecc:	2014      	movs	r0, #20
 8001ece:	f004 f8ef 	bl	80060b0 <HAL_Delay>

       if(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5) == 0){
 8001ed2:	2120      	movs	r1, #32
 8001ed4:	483f      	ldr	r0, [pc, #252]	@ (8001fd4 <compass_calibrate+0x294>)
 8001ed6:	f005 f807 	bl	8006ee8 <HAL_GPIO_ReadPin>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d006      	beq.n	8001eee <compass_calibrate+0x1ae>
	while(!file_open){
 8001ee0:	4b3d      	ldr	r3, [pc, #244]	@ (8001fd8 <compass_calibrate+0x298>)
 8001ee2:	f993 3000 	ldrsb.w	r3, [r3]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f43f af44 	beq.w	8001d74 <compass_calibrate+0x34>
 8001eec:	e000      	b.n	8001ef0 <compass_calibrate+0x1b0>
              break;
 8001eee:	bf00      	nop
          }
	  }

    // check all min value is negative sign
    if(min_val[X] > 0 || min_val[Y] > 0 || min_val[Z] > 0){
 8001ef0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	dc02      	bgt.n	8001efe <compass_calibrate+0x1be>
 8001ef8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001efc:	2b00      	cmp	r3, #0
          // error
    }
    // check all max value is positive sign
    if(max_val[X] < 0 || max_val[Y] < 0 || max_val[Z] < 0){
 8001efe:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	db02      	blt.n	8001f0c <compass_calibrate+0x1cc>
 8001f06:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001f0a:	2b00      	cmp	r3, #0
          // error
    }
    // calibrate value for each axis
    calibrate_temp.hard_iron_calibrate_value[X] = (int)(max_val[X] + min_val[X])/2;
 8001f0c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001f10:	461a      	mov	r2, r3
 8001f12:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001f16:	4413      	add	r3, r2
 8001f18:	0fda      	lsrs	r2, r3, #31
 8001f1a:	4413      	add	r3, r2
 8001f1c:	105b      	asrs	r3, r3, #1
 8001f1e:	617b      	str	r3, [r7, #20]
    calibrate_temp.hard_iron_calibrate_value[Y] = (int)(max_val[Y] + min_val[Y])/2;
 8001f20:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001f24:	461a      	mov	r2, r3
 8001f26:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001f2a:	4413      	add	r3, r2
 8001f2c:	0fda      	lsrs	r2, r3, #31
 8001f2e:	4413      	add	r3, r2
 8001f30:	105b      	asrs	r3, r3, #1
 8001f32:	61bb      	str	r3, [r7, #24]
    calibrate_temp.hard_iron_calibrate_value[Z] = (int)(max_val[Z] + min_val[Z])/2;
 8001f34:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001f38:	461a      	mov	r2, r3
 8001f3a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001f3e:	4413      	add	r3, r2
 8001f40:	0fda      	lsrs	r2, r3, #31
 8001f42:	4413      	add	r3, r2
 8001f44:	105b      	asrs	r3, r3, #1
 8001f46:	61fb      	str	r3, [r7, #28]

    // calculate scale factor for each axis
    int16_t x_ = abs(max_val[X]) + abs(min_val[X]);
 8001f48:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	bfb8      	it	lt
 8001f50:	425b      	neglt	r3, r3
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	bfb8      	it	lt
 8001f5c:	425b      	neglt	r3, r3
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	4413      	add	r3, r2
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    int16_t y_ = abs(max_val[Y]) + abs(min_val[Y]);
 8001f68:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	bfb8      	it	lt
 8001f70:	425b      	neglt	r3, r3
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	bfb8      	it	lt
 8001f7c:	425b      	neglt	r3, r3
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    int16_t z_ = abs(max_val[Z]) + abs(min_val[Z]);
 8001f88:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bfb8      	it	lt
 8001f90:	425b      	neglt	r3, r3
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	bfb8      	it	lt
 8001f9c:	425b      	neglt	r3, r3
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    // get largest value
    int16_t max_value = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    if(x_ > y_)
 8001fac:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 8001fb0:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	dd11      	ble.n	8001fdc <compass_calibrate+0x29c>
        max_value = x_;
 8001fb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001fbc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8001fc0:	e010      	b.n	8001fe4 <compass_calibrate+0x2a4>
 8001fc2:	bf00      	nop
 8001fc4:	080132e0 	.word	0x080132e0
 8001fc8:	080132e8 	.word	0x080132e8
 8001fcc:	20000358 	.word	0x20000358
 8001fd0:	40010800 	.word	0x40010800
 8001fd4:	40010c00 	.word	0x40010c00
 8001fd8:	2000039c 	.word	0x2000039c
    else
        max_value = y_;
 8001fdc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001fe0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    if(max_value < z_)
 8001fe4:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	@ 0x4c
 8001fe8:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8001fec:	429a      	cmp	r2, r3
 8001fee:	da02      	bge.n	8001ff6 <compass_calibrate+0x2b6>
        max_value = z_;
 8001ff0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001ff2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

    // caculate scale
    calibrate_temp.scale_factor_axis[X] = (float)x_/max_value;
 8001ff6:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe feb6 	bl	8000d6c <__aeabi_i2f>
 8002000:	4604      	mov	r4, r0
 8002002:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe feb0 	bl	8000d6c <__aeabi_i2f>
 800200c:	4603      	mov	r3, r0
 800200e:	4619      	mov	r1, r3
 8002010:	4620      	mov	r0, r4
 8002012:	f7fe ffb3 	bl	8000f7c <__aeabi_fdiv>
 8002016:	4603      	mov	r3, r0
 8002018:	623b      	str	r3, [r7, #32]
    calibrate_temp.scale_factor_axis[Y] = (float)y_/max_value;
 800201a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fea4 	bl	8000d6c <__aeabi_i2f>
 8002024:	4604      	mov	r4, r0
 8002026:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fe9e 	bl	8000d6c <__aeabi_i2f>
 8002030:	4603      	mov	r3, r0
 8002032:	4619      	mov	r1, r3
 8002034:	4620      	mov	r0, r4
 8002036:	f7fe ffa1 	bl	8000f7c <__aeabi_fdiv>
 800203a:	4603      	mov	r3, r0
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
    calibrate_temp.scale_factor_axis[Z] = (float)z_/max_value;
 800203e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe fe92 	bl	8000d6c <__aeabi_i2f>
 8002048:	4604      	mov	r4, r0
 800204a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe fe8c 	bl	8000d6c <__aeabi_i2f>
 8002054:	4603      	mov	r3, r0
 8002056:	4619      	mov	r1, r3
 8002058:	4620      	mov	r0, r4
 800205a:	f7fe ff8f 	bl	8000f7c <__aeabi_fdiv>
 800205e:	4603      	mov	r3, r0
 8002060:	62bb      	str	r3, [r7, #40]	@ 0x28

    calibrate_temp.sum_all_value = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	62fb      	str	r3, [r7, #44]	@ 0x2c

	calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[X];
 8002066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fe7f 	bl	8000d6c <__aeabi_i2f>
 800206e:	4602      	mov	r2, r0
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	4619      	mov	r1, r3
 8002074:	4610      	mov	r0, r2
 8002076:	f7fe fdc5 	bl	8000c04 <__addsf3>
 800207a:	4603      	mov	r3, r0
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff f8a5 	bl	80011cc <__aeabi_f2iz>
 8002082:	4603      	mov	r3, r0
 8002084:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Y];
 8002086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fe6f 	bl	8000d6c <__aeabi_i2f>
 800208e:	4602      	mov	r2, r0
 8002090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002092:	4619      	mov	r1, r3
 8002094:	4610      	mov	r0, r2
 8002096:	f7fe fdb5 	bl	8000c04 <__addsf3>
 800209a:	4603      	mov	r3, r0
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff f895 	bl	80011cc <__aeabi_f2iz>
 80020a2:	4603      	mov	r3, r0
 80020a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += calibrate_temp.scale_factor_axis[Z];
 80020a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fe5f 	bl	8000d6c <__aeabi_i2f>
 80020ae:	4602      	mov	r2, r0
 80020b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020b2:	4619      	mov	r1, r3
 80020b4:	4610      	mov	r0, r2
 80020b6:	f7fe fda5 	bl	8000c04 <__addsf3>
 80020ba:	4603      	mov	r3, r0
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff f885 	bl	80011cc <__aeabi_f2iz>
 80020c2:	4603      	mov	r3, r0
 80020c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[X];
 80020c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	4413      	add	r3, r2
 80020cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Y];
 80020ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	4413      	add	r3, r2
 80020d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    calibrate_temp.sum_all_value += (int)calibrate_temp.hard_iron_calibrate_value[Z];
 80020d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	4413      	add	r3, r2
 80020dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // write data to eprrom
    AT24Cxx_write_byte_buffer(device_array.devices[0],(uint8_t*)&calibrate_temp, 0x0010, sizeof(cali_mag_t));
 80020de:	4b09      	ldr	r3, [pc, #36]	@ (8002104 <compass_calibrate+0x3c4>)
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	f107 0114 	add.w	r1, r7, #20
 80020e6:	231c      	movs	r3, #28
 80020e8:	2210      	movs	r2, #16
 80020ea:	f003 f8e2 	bl	80052b2 <AT24Cxx_write_byte_buffer>
  
   // black_box_load(&calib_file);
   // black_box_close(&calib_file);
	
	while(1){
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80020ee:	2120      	movs	r1, #32
 80020f0:	4805      	ldr	r0, [pc, #20]	@ (8002108 <compass_calibrate+0x3c8>)
 80020f2:	f004 ff28 	bl	8006f46 <HAL_GPIO_TogglePin>
      HAL_Delay(1000); // 10 Hz loop
 80020f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020fa:	f003 ffd9 	bl	80060b0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80020fe:	bf00      	nop
 8002100:	e7f5      	b.n	80020ee <compass_calibrate+0x3ae>
 8002102:	bf00      	nop
 8002104:	2000035c 	.word	0x2000035c
 8002108:	40010800 	.word	0x40010800

0800210c <gps_init>:

/*  
 * Init function 
 */
void gps_init(UART_HandleTypeDef *uart,uint32_t baudrate)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
	_gpsUartPort = uart;
 8002116:	4a27      	ldr	r2, [pc, #156]	@ (80021b4 <gps_init+0xa8>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6013      	str	r3, [r2, #0]
    _gps.timer_ = millis();
 800211c:	4b26      	ldr	r3, [pc, #152]	@ (80021b8 <gps_init+0xac>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002124:	4b25      	ldr	r3, [pc, #148]	@ (80021bc <gps_init+0xb0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4413      	add	r3, r2
 800212a:	4a25      	ldr	r2, [pc, #148]	@ (80021c0 <gps_init+0xb4>)
 800212c:	fba2 2303 	umull	r2, r3, r2, r3
 8002130:	099b      	lsrs	r3, r3, #6
 8002132:	4a24      	ldr	r2, [pc, #144]	@ (80021c4 <gps_init+0xb8>)
 8002134:	62d3      	str	r3, [r2, #44]	@ 0x2c
    // reset all viriables
    _payload_length = 0;
 8002136:	4b24      	ldr	r3, [pc, #144]	@ (80021c8 <gps_init+0xbc>)
 8002138:	2200      	movs	r2, #0
 800213a:	801a      	strh	r2, [r3, #0]
    _payload_counter = 0;
 800213c:	4b23      	ldr	r3, [pc, #140]	@ (80021cc <gps_init+0xc0>)
 800213e:	2200      	movs	r2, #0
 8002140:	801a      	strh	r2, [r3, #0]
    _msg_id = 0;
 8002142:	4b23      	ldr	r3, [pc, #140]	@ (80021d0 <gps_init+0xc4>)
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]

    // Configuration _gps module
    HAL_UART_Transmit(_gpsUartPort,ubloxInit,sizeof(ubloxInit),1000);
 8002148:	4b1a      	ldr	r3, [pc, #104]	@ (80021b4 <gps_init+0xa8>)
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002150:	22a8      	movs	r2, #168	@ 0xa8
 8002152:	4920      	ldr	r1, [pc, #128]	@ (80021d4 <gps_init+0xc8>)
 8002154:	f009 f940 	bl	800b3d8 <HAL_UART_Transmit>
    HAL_Delay(10);
 8002158:	200a      	movs	r0, #10
 800215a:	f003 ffa9 	bl	80060b0 <HAL_Delay>
    HAL_UART_Transmit(_gpsUartPort,ubloxSbasInit,sizeof(ubloxSbasInit),1000);
 800215e:	4b15      	ldr	r3, [pc, #84]	@ (80021b4 <gps_init+0xa8>)
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002166:	2210      	movs	r2, #16
 8002168:	491b      	ldr	r1, [pc, #108]	@ (80021d8 <gps_init+0xcc>)
 800216a:	f009 f935 	bl	800b3d8 <HAL_UART_Transmit>
    HAL_Delay(10);
 800216e:	200a      	movs	r0, #10
 8002170:	f003 ff9e 	bl	80060b0 <HAL_Delay>
    HAL_UART_Transmit(_gpsUartPort,uart57600,sizeof(uart57600),1000);
 8002174:	4b0f      	ldr	r3, [pc, #60]	@ (80021b4 <gps_init+0xa8>)
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800217c:	221c      	movs	r2, #28
 800217e:	4917      	ldr	r1, [pc, #92]	@ (80021dc <gps_init+0xd0>)
 8002180:	f009 f92a 	bl	800b3d8 <HAL_UART_Transmit>
    HAL_Delay(10);
 8002184:	200a      	movs	r0, #10
 8002186:	f003 ff93 	bl	80060b0 <HAL_Delay>
    // set baudrate
    _gpsUartPort->Init.BaudRate = baudrate;
 800218a:	4b0a      	ldr	r3, [pc, #40]	@ (80021b4 <gps_init+0xa8>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(_gpsUartPort); 
 8002192:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <gps_init+0xa8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f009 f8ce 	bl	800b338 <HAL_UART_Init>

    // read gps using interrup
	HAL_UART_Receive_IT(_gpsUartPort, &_char,ONE_BYTE);
 800219c:	4b05      	ldr	r3, [pc, #20]	@ (80021b4 <gps_init+0xa8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2201      	movs	r2, #1
 80021a2:	490f      	ldr	r1, [pc, #60]	@ (80021e0 <gps_init+0xd4>)
 80021a4:	4618      	mov	r0, r3
 80021a6:	f009 f99a 	bl	800b4de <HAL_UART_Receive_IT>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	200003d8 	.word	0x200003d8
 80021b8:	20000540 	.word	0x20000540
 80021bc:	20000544 	.word	0x20000544
 80021c0:	10624dd3 	.word	0x10624dd3
 80021c4:	200003a0 	.word	0x200003a0
 80021c8:	200003e6 	.word	0x200003e6
 80021cc:	200003e8 	.word	0x200003e8
 80021d0:	200003e4 	.word	0x200003e4
 80021d4:	08013408 	.word	0x08013408
 80021d8:	20000000 	.word	0x20000000
 80021dc:	080134b0 	.word	0x080134b0
 80021e0:	200003dc 	.word	0x200003dc

080021e4 <gps_uart_port>:

UART_HandleTypeDef *gps_uart_port(){
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
    return _gpsUartPort;
 80021e8:	4b02      	ldr	r3, [pc, #8]	@ (80021f4 <gps_uart_port+0x10>)
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	200003d8 	.word	0x200003d8

080021f8 <gps_callback>:
/* 
 * REad gps by using interrup
 */
uint32_t gps_interrupt_count;
void gps_callback()
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
   // parse data
   gps_interrupt_count++;
 80021fc:	4b09      	ldr	r3, [pc, #36]	@ (8002224 <gps_callback+0x2c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	3301      	adds	r3, #1
 8002202:	4a08      	ldr	r2, [pc, #32]	@ (8002224 <gps_callback+0x2c>)
 8002204:	6013      	str	r3, [r2, #0]
   newdata(_char);
 8002206:	4b08      	ldr	r3, [pc, #32]	@ (8002228 <gps_callback+0x30>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f000 f8f6 	bl	80023fc <newdata>
   HAL_UART_Receive_IT(_gpsUartPort, &_char,ONE_BYTE);
 8002210:	4b06      	ldr	r3, [pc, #24]	@ (800222c <gps_callback+0x34>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2201      	movs	r2, #1
 8002216:	4904      	ldr	r1, [pc, #16]	@ (8002228 <gps_callback+0x30>)
 8002218:	4618      	mov	r0, r3
 800221a:	f009 f960 	bl	800b4de <HAL_UART_Receive_IT>
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	200004b4 	.word	0x200004b4
 8002228:	200003dc 	.word	0x200003dc
 800222c:	200003d8 	.word	0x200003d8

08002230 <parse_msg>:
        *ck_a += *data;
        *ck_b += *ck_a;
        data++;
    }
}
static uint8_t parse_msg(){
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
    static uint8_t _new_speed;
    static uint8_t next_fix;
    static uint32_t lastPosUpdateTime;
    static uint8_t _new_position;
    switch (_msg_id) {
 8002234:	4b67      	ldr	r3, [pc, #412]	@ (80023d4 <parse_msg+0x1a4>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b12      	cmp	r3, #18
 800223a:	dc2b      	bgt.n	8002294 <parse_msg+0x64>
 800223c:	2b02      	cmp	r3, #2
 800223e:	f2c0 80ad 	blt.w	800239c <parse_msg+0x16c>
 8002242:	3b02      	subs	r3, #2
 8002244:	2b10      	cmp	r3, #16
 8002246:	f200 80a9 	bhi.w	800239c <parse_msg+0x16c>
 800224a:	a201      	add	r2, pc, #4	@ (adr r2, 8002250 <parse_msg+0x20>)
 800224c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002250:	0800229d 	.word	0x0800229d
 8002254:	08002311 	.word	0x08002311
 8002258:	0800239d 	.word	0x0800239d
 800225c:	0800239d 	.word	0x0800239d
 8002260:	0800233d 	.word	0x0800233d
 8002264:	0800239d 	.word	0x0800239d
 8002268:	0800239d 	.word	0x0800239d
 800226c:	0800239d 	.word	0x0800239d
 8002270:	0800239d 	.word	0x0800239d
 8002274:	0800239d 	.word	0x0800239d
 8002278:	0800239d 	.word	0x0800239d
 800227c:	0800239d 	.word	0x0800239d
 8002280:	0800239d 	.word	0x0800239d
 8002284:	0800239d 	.word	0x0800239d
 8002288:	0800239d 	.word	0x0800239d
 800228c:	0800239d 	.word	0x0800239d
 8002290:	08002355 	.word	0x08002355
 8002294:	2b30      	cmp	r3, #48	@ 0x30
 8002296:	f000 8083 	beq.w	80023a0 <parse_msg+0x170>
 800229a:	e07f      	b.n	800239c <parse_msg+0x16c>
        case MSG_POSLLH:
            _gps.position[LON] = _buffer.posllh.longitude;
 800229c:	4b4e      	ldr	r3, [pc, #312]	@ (80023d8 <parse_msg+0x1a8>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4a4e      	ldr	r2, [pc, #312]	@ (80023dc <parse_msg+0x1ac>)
 80022a2:	6013      	str	r3, [r2, #0]
            _gps.position[LAT] = _buffer.posllh.latitude;
 80022a4:	4b4c      	ldr	r3, [pc, #304]	@ (80023d8 <parse_msg+0x1a8>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	4a4c      	ldr	r2, [pc, #304]	@ (80023dc <parse_msg+0x1ac>)
 80022aa:	6053      	str	r3, [r2, #4]
            _gps.altitude_msl = _buffer.posllh.altitude_msl;
 80022ac:	4b4a      	ldr	r3, [pc, #296]	@ (80023d8 <parse_msg+0x1a8>)
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	4b4a      	ldr	r3, [pc, #296]	@ (80023dc <parse_msg+0x1ac>)
 80022b4:	861a      	strh	r2, [r3, #48]	@ 0x30
            _gps.horizontalAccuracy = _buffer.posllh.horizontal_accuracy;
 80022b6:	4b48      	ldr	r3, [pc, #288]	@ (80023d8 <parse_msg+0x1a8>)
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	4a48      	ldr	r2, [pc, #288]	@ (80023dc <parse_msg+0x1ac>)
 80022bc:	6213      	str	r3, [r2, #32]
            _gps.VerticalAccuracy = _buffer.posllh.vertical_accuracy;
 80022be:	4b46      	ldr	r3, [pc, #280]	@ (80023d8 <parse_msg+0x1a8>)
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	4a46      	ldr	r2, [pc, #280]	@ (80023dc <parse_msg+0x1ac>)
 80022c4:	6253      	str	r3, [r2, #36]	@ 0x24
            /* time update position */
            if(lastPosUpdateTime == 0){
 80022c6:	4b46      	ldr	r3, [pc, #280]	@ (80023e0 <parse_msg+0x1b0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d06a      	beq.n	80023a4 <parse_msg+0x174>
                break;
                lastPosUpdateTime = millis();
            }
            _gps.posUpdateTime = millis() - lastPosUpdateTime;
 80022ce:	4b45      	ldr	r3, [pc, #276]	@ (80023e4 <parse_msg+0x1b4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022d6:	4b44      	ldr	r3, [pc, #272]	@ (80023e8 <parse_msg+0x1b8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	4a43      	ldr	r2, [pc, #268]	@ (80023ec <parse_msg+0x1bc>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	099a      	lsrs	r2, r3, #6
 80022e4:	4b3e      	ldr	r3, [pc, #248]	@ (80023e0 <parse_msg+0x1b0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	4a3c      	ldr	r2, [pc, #240]	@ (80023dc <parse_msg+0x1ac>)
 80022ec:	6293      	str	r3, [r2, #40]	@ 0x28
            lastPosUpdateTime = millis();
 80022ee:	4b3d      	ldr	r3, [pc, #244]	@ (80023e4 <parse_msg+0x1b4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022f6:	4b3c      	ldr	r3, [pc, #240]	@ (80023e8 <parse_msg+0x1b8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4413      	add	r3, r2
 80022fc:	4a3b      	ldr	r2, [pc, #236]	@ (80023ec <parse_msg+0x1bc>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	099b      	lsrs	r3, r3, #6
 8002304:	4a36      	ldr	r2, [pc, #216]	@ (80023e0 <parse_msg+0x1b0>)
 8002306:	6013      	str	r3, [r2, #0]
            /* flag set */
            _new_position = TRUE;
 8002308:	4b39      	ldr	r3, [pc, #228]	@ (80023f0 <parse_msg+0x1c0>)
 800230a:	2201      	movs	r2, #1
 800230c:	701a      	strb	r2, [r3, #0]
            break;
 800230e:	e04a      	b.n	80023a6 <parse_msg+0x176>
        case MSG_STATUS:
            next_fix = (_buffer.status.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.status.fix_type == FIX_3D);
 8002310:	4b31      	ldr	r3, [pc, #196]	@ (80023d8 <parse_msg+0x1a8>)
 8002312:	795b      	ldrb	r3, [r3, #5]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <parse_msg+0xf8>
 800231c:	4b2e      	ldr	r3, [pc, #184]	@ (80023d8 <parse_msg+0x1a8>)
 800231e:	791b      	ldrb	r3, [r3, #4]
 8002320:	2b03      	cmp	r3, #3
 8002322:	d101      	bne.n	8002328 <parse_msg+0xf8>
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <parse_msg+0xfa>
 8002328:	2300      	movs	r3, #0
 800232a:	b2da      	uxtb	r2, r3
 800232c:	4b31      	ldr	r3, [pc, #196]	@ (80023f4 <parse_msg+0x1c4>)
 800232e:	701a      	strb	r2, [r3, #0]
            //if (!next_fix)
            //    _gps.fix = FALSE;
            _gps.fix = _buffer.status.fix_type;
 8002330:	4b29      	ldr	r3, [pc, #164]	@ (80023d8 <parse_msg+0x1a8>)
 8002332:	791a      	ldrb	r2, [r3, #4]
 8002334:	4b29      	ldr	r3, [pc, #164]	@ (80023dc <parse_msg+0x1ac>)
 8002336:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            break;
 800233a:	e034      	b.n	80023a6 <parse_msg+0x176>
        case MSG_SOL:
            //next_fix = (_buffer.solution.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.solution.fix_type == FIX_3D);
            //if (!next_fix)
            //    _gps.fix = FALSE;
            _gps.fix = _buffer.solution.fix_type;
 800233c:	4b26      	ldr	r3, [pc, #152]	@ (80023d8 <parse_msg+0x1a8>)
 800233e:	7a9a      	ldrb	r2, [r3, #10]
 8002340:	4b26      	ldr	r3, [pc, #152]	@ (80023dc <parse_msg+0x1ac>)
 8002342:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            _gps.numSat = _buffer.solution.satellites;
 8002346:	4b24      	ldr	r3, [pc, #144]	@ (80023d8 <parse_msg+0x1a8>)
 8002348:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800234c:	4b23      	ldr	r3, [pc, #140]	@ (80023dc <parse_msg+0x1ac>)
 800234e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            break;
 8002352:	e028      	b.n	80023a6 <parse_msg+0x176>
        case MSG_VELNED:
            _gps.velocity[LAT] = _buffer.velned.ned_north;
 8002354:	4b20      	ldr	r3, [pc, #128]	@ (80023d8 <parse_msg+0x1a8>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	4a20      	ldr	r2, [pc, #128]	@ (80023dc <parse_msg+0x1ac>)
 800235a:	60d3      	str	r3, [r2, #12]
            _gps.velocity[LON] = _buffer.velned.ned_east;
 800235c:	4b1e      	ldr	r3, [pc, #120]	@ (80023d8 <parse_msg+0x1a8>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	4a1e      	ldr	r2, [pc, #120]	@ (80023dc <parse_msg+0x1ac>)
 8002362:	6093      	str	r3, [r2, #8]
            _gps.velocity[DOWN] = _buffer.velned.ned_down;
 8002364:	4b1c      	ldr	r3, [pc, #112]	@ (80023d8 <parse_msg+0x1a8>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	4a1c      	ldr	r2, [pc, #112]	@ (80023dc <parse_msg+0x1ac>)
 800236a:	6113      	str	r3, [r2, #16]
            _gps.Gspeed = _buffer.velned.speed_2d;
 800236c:	4b1a      	ldr	r3, [pc, #104]	@ (80023d8 <parse_msg+0x1a8>)
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	461a      	mov	r2, r3
 8002372:	4b1a      	ldr	r3, [pc, #104]	@ (80023dc <parse_msg+0x1ac>)
 8002374:	615a      	str	r2, [r3, #20]
            _gps.ground_course = _buffer.velned.heading_2d;
 8002376:	4b18      	ldr	r3, [pc, #96]	@ (80023d8 <parse_msg+0x1a8>)
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	b29a      	uxth	r2, r3
 800237c:	4b17      	ldr	r3, [pc, #92]	@ (80023dc <parse_msg+0x1ac>)
 800237e:	865a      	strh	r2, [r3, #50]	@ 0x32
            _gps.speedAccuracy = _buffer.velned.speed_accuracy;
 8002380:	4b15      	ldr	r3, [pc, #84]	@ (80023d8 <parse_msg+0x1a8>)
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	461a      	mov	r2, r3
 8002386:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <parse_msg+0x1ac>)
 8002388:	619a      	str	r2, [r3, #24]
            _gps.headingAccuracy = _buffer.velned.heading_accuracy;
 800238a:	4b13      	ldr	r3, [pc, #76]	@ (80023d8 <parse_msg+0x1a8>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	461a      	mov	r2, r3
 8002390:	4b12      	ldr	r3, [pc, #72]	@ (80023dc <parse_msg+0x1ac>)
 8002392:	61da      	str	r2, [r3, #28]
            _new_speed = TRUE;
 8002394:	4b18      	ldr	r3, [pc, #96]	@ (80023f8 <parse_msg+0x1c8>)
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
            break;
 800239a:	e004      	b.n	80023a6 <parse_msg+0x176>
            svinfo_rate[0] = svinfo_rate[1];
            svinfo_rate[1] = millis();
            */
            break;
        default:
            return FALSE;
 800239c:	2300      	movs	r3, #0
 800239e:	e014      	b.n	80023ca <parse_msg+0x19a>
            break;
 80023a0:	bf00      	nop
 80023a2:	e000      	b.n	80023a6 <parse_msg+0x176>
                break;
 80023a4:	bf00      	nop
    }
    if (_new_position && _new_speed) {
 80023a6:	4b12      	ldr	r3, [pc, #72]	@ (80023f0 <parse_msg+0x1c0>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00c      	beq.n	80023c8 <parse_msg+0x198>
 80023ae:	4b12      	ldr	r3, [pc, #72]	@ (80023f8 <parse_msg+0x1c8>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <parse_msg+0x198>
        _new_speed = _new_position = FALSE;
 80023b6:	4b0e      	ldr	r3, [pc, #56]	@ (80023f0 <parse_msg+0x1c0>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
 80023bc:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <parse_msg+0x1c0>)
 80023be:	781a      	ldrb	r2, [r3, #0]
 80023c0:	4b0d      	ldr	r3, [pc, #52]	@ (80023f8 <parse_msg+0x1c8>)
 80023c2:	701a      	strb	r2, [r3, #0]
        return TRUE;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <parse_msg+0x19a>
    }
    return FALSE;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	200003e4 	.word	0x200003e4
 80023d8:	200003ec 	.word	0x200003ec
 80023dc:	200003a0 	.word	0x200003a0
 80023e0:	200004b8 	.word	0x200004b8
 80023e4:	20000540 	.word	0x20000540
 80023e8:	20000544 	.word	0x20000544
 80023ec:	10624dd3 	.word	0x10624dd3
 80023f0:	200004bc 	.word	0x200004bc
 80023f4:	200004bd 	.word	0x200004bd
 80023f8:	200004be 	.word	0x200004be

080023fc <newdata>:

int parse_ok;
static uint8_t newdata(uint8_t data){
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	71fb      	strb	r3, [r7, #7]
    uint8_t parsed = FALSE;
 8002406:	2300      	movs	r3, #0
 8002408:	73fb      	strb	r3, [r7, #15]
    static uint8_t _ck_a;
    static uint8_t _ck_b;
    static uint8_t _step = 0;
    static uint32_t current_time_ms = 0;
    switch (_step) {
 800240a:	4b85      	ldr	r3, [pc, #532]	@ (8002620 <newdata+0x224>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b08      	cmp	r3, #8
 8002410:	f200 8100 	bhi.w	8002614 <newdata+0x218>
 8002414:	a201      	add	r2, pc, #4	@ (adr r2, 800241c <newdata+0x20>)
 8002416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241a:	bf00      	nop
 800241c:	08002441 	.word	0x08002441
 8002420:	08002457 	.word	0x08002457
 8002424:	0800246b 	.word	0x0800246b
 8002428:	08002487 	.word	0x08002487
 800242c:	080024b9 	.word	0x080024b9
 8002430:	080024ed 	.word	0x080024ed
 8002434:	08002547 	.word	0x08002547
 8002438:	0800259f 	.word	0x0800259f
 800243c:	080025bd 	.word	0x080025bd
        case 0: // Sync char 1 (0xB5)
            if (PREAMBLE1 == data)
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	2bb5      	cmp	r3, #181	@ 0xb5
 8002444:	f040 80df 	bne.w	8002606 <newdata+0x20a>
                _step++;
 8002448:	4b75      	ldr	r3, [pc, #468]	@ (8002620 <newdata+0x224>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	3301      	adds	r3, #1
 800244e:	b2da      	uxtb	r2, r3
 8002450:	4b73      	ldr	r3, [pc, #460]	@ (8002620 <newdata+0x224>)
 8002452:	701a      	strb	r2, [r3, #0]
            break;
 8002454:	e0d7      	b.n	8002606 <newdata+0x20a>
        case 1: // Sync char 2 (0x62)
            if (PREAMBLE2 == data) {
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	2b62      	cmp	r3, #98	@ 0x62
 800245a:	d106      	bne.n	800246a <newdata+0x6e>
                _step++;
 800245c:	4b70      	ldr	r3, [pc, #448]	@ (8002620 <newdata+0x224>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	3301      	adds	r3, #1
 8002462:	b2da      	uxtb	r2, r3
 8002464:	4b6e      	ldr	r3, [pc, #440]	@ (8002620 <newdata+0x224>)
 8002466:	701a      	strb	r2, [r3, #0]
                break;
 8002468:	e0d4      	b.n	8002614 <newdata+0x218>
            }
        case 2: // Class
            _step++;
 800246a:	4b6d      	ldr	r3, [pc, #436]	@ (8002620 <newdata+0x224>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	3301      	adds	r3, #1
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4b6b      	ldr	r3, [pc, #428]	@ (8002620 <newdata+0x224>)
 8002474:	701a      	strb	r2, [r3, #0]
            _ck_b = _ck_a = data;  
 8002476:	4a6b      	ldr	r2, [pc, #428]	@ (8002624 <newdata+0x228>)
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	7013      	strb	r3, [r2, #0]
 800247c:	4b69      	ldr	r3, [pc, #420]	@ (8002624 <newdata+0x228>)
 800247e:	781a      	ldrb	r2, [r3, #0]
 8002480:	4b69      	ldr	r3, [pc, #420]	@ (8002628 <newdata+0x22c>)
 8002482:	701a      	strb	r2, [r3, #0]
            break;
 8002484:	e0c6      	b.n	8002614 <newdata+0x218>
        case 3: // ID
            _step++;
 8002486:	4b66      	ldr	r3, [pc, #408]	@ (8002620 <newdata+0x224>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	3301      	adds	r3, #1
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4b64      	ldr	r3, [pc, #400]	@ (8002620 <newdata+0x224>)
 8002490:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 8002492:	4b64      	ldr	r3, [pc, #400]	@ (8002624 <newdata+0x228>)
 8002494:	781a      	ldrb	r2, [r3, #0]
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	4413      	add	r3, r2
 800249a:	b2da      	uxtb	r2, r3
 800249c:	4b61      	ldr	r3, [pc, #388]	@ (8002624 <newdata+0x228>)
 800249e:	701a      	strb	r2, [r3, #0]
 80024a0:	4b60      	ldr	r3, [pc, #384]	@ (8002624 <newdata+0x228>)
 80024a2:	781a      	ldrb	r2, [r3, #0]
 80024a4:	4b60      	ldr	r3, [pc, #384]	@ (8002628 <newdata+0x22c>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	4413      	add	r3, r2
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	4b5e      	ldr	r3, [pc, #376]	@ (8002628 <newdata+0x22c>)
 80024ae:	701a      	strb	r2, [r3, #0]
            _msg_id = data;
 80024b0:	4a5e      	ldr	r2, [pc, #376]	@ (800262c <newdata+0x230>)
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	7013      	strb	r3, [r2, #0]
            break;
 80024b6:	e0ad      	b.n	8002614 <newdata+0x218>
        case 4: 
            _step++;
 80024b8:	4b59      	ldr	r3, [pc, #356]	@ (8002620 <newdata+0x224>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	3301      	adds	r3, #1
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	4b57      	ldr	r3, [pc, #348]	@ (8002620 <newdata+0x224>)
 80024c2:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);       
 80024c4:	4b57      	ldr	r3, [pc, #348]	@ (8002624 <newdata+0x228>)
 80024c6:	781a      	ldrb	r2, [r3, #0]
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	4413      	add	r3, r2
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	4b55      	ldr	r3, [pc, #340]	@ (8002624 <newdata+0x228>)
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	4b54      	ldr	r3, [pc, #336]	@ (8002624 <newdata+0x228>)
 80024d4:	781a      	ldrb	r2, [r3, #0]
 80024d6:	4b54      	ldr	r3, [pc, #336]	@ (8002628 <newdata+0x22c>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4b52      	ldr	r3, [pc, #328]	@ (8002628 <newdata+0x22c>)
 80024e0:	701a      	strb	r2, [r3, #0]
            _payload_length = data; 
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	4b52      	ldr	r3, [pc, #328]	@ (8002630 <newdata+0x234>)
 80024e8:	801a      	strh	r2, [r3, #0]
            break;
 80024ea:	e093      	b.n	8002614 <newdata+0x218>
        case 5: 
            _step++;
 80024ec:	4b4c      	ldr	r3, [pc, #304]	@ (8002620 <newdata+0x224>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	3301      	adds	r3, #1
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	4b4a      	ldr	r3, [pc, #296]	@ (8002620 <newdata+0x224>)
 80024f6:	701a      	strb	r2, [r3, #0]
            _ck_b += (_ck_a += data);      
 80024f8:	4b4a      	ldr	r3, [pc, #296]	@ (8002624 <newdata+0x228>)
 80024fa:	781a      	ldrb	r2, [r3, #0]
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	4413      	add	r3, r2
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4b48      	ldr	r3, [pc, #288]	@ (8002624 <newdata+0x228>)
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	4b47      	ldr	r3, [pc, #284]	@ (8002624 <newdata+0x228>)
 8002508:	781a      	ldrb	r2, [r3, #0]
 800250a:	4b47      	ldr	r3, [pc, #284]	@ (8002628 <newdata+0x22c>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	4413      	add	r3, r2
 8002510:	b2da      	uxtb	r2, r3
 8002512:	4b45      	ldr	r3, [pc, #276]	@ (8002628 <newdata+0x22c>)
 8002514:	701a      	strb	r2, [r3, #0]
            _payload_length += (uint16_t)(data << 8);
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	b29b      	uxth	r3, r3
 800251a:	021b      	lsls	r3, r3, #8
 800251c:	b29a      	uxth	r2, r3
 800251e:	4b44      	ldr	r3, [pc, #272]	@ (8002630 <newdata+0x234>)
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	4413      	add	r3, r2
 8002524:	b29a      	uxth	r2, r3
 8002526:	4b42      	ldr	r3, [pc, #264]	@ (8002630 <newdata+0x234>)
 8002528:	801a      	strh	r2, [r3, #0]
            if (_payload_length > UBLOX_BUFFER_SIZE) {
 800252a:	4b41      	ldr	r3, [pc, #260]	@ (8002630 <newdata+0x234>)
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	2bc8      	cmp	r3, #200	@ 0xc8
 8002530:	d905      	bls.n	800253e <newdata+0x142>
                _payload_length = 0;
 8002532:	4b3f      	ldr	r3, [pc, #252]	@ (8002630 <newdata+0x234>)
 8002534:	2200      	movs	r2, #0
 8002536:	801a      	strh	r2, [r3, #0]
                _step = 0;
 8002538:	4b39      	ldr	r3, [pc, #228]	@ (8002620 <newdata+0x224>)
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
            }
            _payload_counter = 0;   
 800253e:	4b3d      	ldr	r3, [pc, #244]	@ (8002634 <newdata+0x238>)
 8002540:	2200      	movs	r2, #0
 8002542:	801a      	strh	r2, [r3, #0]
            break;
 8002544:	e066      	b.n	8002614 <newdata+0x218>
        case 6:
            _ck_b += (_ck_a += data);     
 8002546:	4b37      	ldr	r3, [pc, #220]	@ (8002624 <newdata+0x228>)
 8002548:	781a      	ldrb	r2, [r3, #0]
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	4413      	add	r3, r2
 800254e:	b2da      	uxtb	r2, r3
 8002550:	4b34      	ldr	r3, [pc, #208]	@ (8002624 <newdata+0x228>)
 8002552:	701a      	strb	r2, [r3, #0]
 8002554:	4b33      	ldr	r3, [pc, #204]	@ (8002624 <newdata+0x228>)
 8002556:	781a      	ldrb	r2, [r3, #0]
 8002558:	4b33      	ldr	r3, [pc, #204]	@ (8002628 <newdata+0x22c>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	4413      	add	r3, r2
 800255e:	b2da      	uxtb	r2, r3
 8002560:	4b31      	ldr	r3, [pc, #196]	@ (8002628 <newdata+0x22c>)
 8002562:	701a      	strb	r2, [r3, #0]
            if (_payload_counter < UBLOX_BUFFER_SIZE) {
 8002564:	4b33      	ldr	r3, [pc, #204]	@ (8002634 <newdata+0x238>)
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	2bc7      	cmp	r3, #199	@ 0xc7
 800256a:	d805      	bhi.n	8002578 <newdata+0x17c>
                _buffer.bytes[_payload_counter] = data;
 800256c:	4b31      	ldr	r3, [pc, #196]	@ (8002634 <newdata+0x238>)
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	4619      	mov	r1, r3
 8002572:	4a31      	ldr	r2, [pc, #196]	@ (8002638 <newdata+0x23c>)
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	5453      	strb	r3, [r2, r1]
            }
            if (++_payload_counter == _payload_length)
 8002578:	4b2e      	ldr	r3, [pc, #184]	@ (8002634 <newdata+0x238>)
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	3301      	adds	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	4b2c      	ldr	r3, [pc, #176]	@ (8002634 <newdata+0x238>)
 8002582:	801a      	strh	r2, [r3, #0]
 8002584:	4b2b      	ldr	r3, [pc, #172]	@ (8002634 <newdata+0x238>)
 8002586:	881a      	ldrh	r2, [r3, #0]
 8002588:	4b29      	ldr	r3, [pc, #164]	@ (8002630 <newdata+0x234>)
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d13c      	bne.n	800260a <newdata+0x20e>
                _step++;
 8002590:	4b23      	ldr	r3, [pc, #140]	@ (8002620 <newdata+0x224>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	3301      	adds	r3, #1
 8002596:	b2da      	uxtb	r2, r3
 8002598:	4b21      	ldr	r3, [pc, #132]	@ (8002620 <newdata+0x224>)
 800259a:	701a      	strb	r2, [r3, #0]
            break;
 800259c:	e035      	b.n	800260a <newdata+0x20e>
        case 7:
            _step++;
 800259e:	4b20      	ldr	r3, [pc, #128]	@ (8002620 <newdata+0x224>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	3301      	adds	r3, #1
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002620 <newdata+0x224>)
 80025a8:	701a      	strb	r2, [r3, #0]
            if (_ck_a != data)
 80025aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002624 <newdata+0x228>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	79fa      	ldrb	r2, [r7, #7]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d02c      	beq.n	800260e <newdata+0x212>
                _step = 0;         
 80025b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002620 <newdata+0x224>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
            break;
 80025ba:	e028      	b.n	800260e <newdata+0x212>
        case 8:
            _step = 0;
 80025bc:	4b18      	ldr	r3, [pc, #96]	@ (8002620 <newdata+0x224>)
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
            if (_ck_b != data)
 80025c2:	4b19      	ldr	r3, [pc, #100]	@ (8002628 <newdata+0x22c>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	79fa      	ldrb	r2, [r7, #7]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d122      	bne.n	8002612 <newdata+0x216>
                break;   
			 _therad_read_time_ms = micros() - current_time_ms;
 80025cc:	4b1b      	ldr	r3, [pc, #108]	@ (800263c <newdata+0x240>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002640 <newdata+0x244>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	441a      	add	r2, r3
 80025da:	4b1a      	ldr	r3, [pc, #104]	@ (8002644 <newdata+0x248>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	4a19      	ldr	r2, [pc, #100]	@ (8002648 <newdata+0x24c>)
 80025e2:	6013      	str	r3, [r2, #0]
			 current_time_ms = micros();
 80025e4:	4b15      	ldr	r3, [pc, #84]	@ (800263c <newdata+0x240>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025ec:	4b14      	ldr	r3, [pc, #80]	@ (8002640 <newdata+0x244>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4413      	add	r3, r2
 80025f2:	4a14      	ldr	r2, [pc, #80]	@ (8002644 <newdata+0x248>)
 80025f4:	6013      	str	r3, [r2, #0]
            if (parse_msg())
 80025f6:	f7ff fe1b 	bl	8002230 <parse_msg>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d009      	beq.n	8002614 <newdata+0x218>
            {
                parsed = TRUE;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
 8002604:	e006      	b.n	8002614 <newdata+0x218>
            break;
 8002606:	bf00      	nop
 8002608:	e004      	b.n	8002614 <newdata+0x218>
            break;
 800260a:	bf00      	nop
 800260c:	e002      	b.n	8002614 <newdata+0x218>
            break;
 800260e:	bf00      	nop
 8002610:	e000      	b.n	8002614 <newdata+0x218>
                break;   
 8002612:	bf00      	nop
            }
    } 
    return parsed;
 8002614:	7bfb      	ldrb	r3, [r7, #15]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	200004bf 	.word	0x200004bf
 8002624:	200004c0 	.word	0x200004c0
 8002628:	200004c1 	.word	0x200004c1
 800262c:	200003e4 	.word	0x200003e4
 8002630:	200003e6 	.word	0x200003e6
 8002634:	200003e8 	.word	0x200003e8
 8002638:	200003ec 	.word	0x200003ec
 800263c:	20000540 	.word	0x20000540
 8002640:	20000544 	.word	0x20000544
 8002644:	200004c4 	.word	0x200004c4
 8002648:	200003e0 	.word	0x200003e0

0800264c <imu_calibrate>:
  .gyr_lsb = 32.8f
};


static int32_t store_gyro[3];
void imu_calibrate(int16_t *offsx,int16_t *offsy,int16_t *offsz){
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
	axis3_t gyro_;
	integralFBx = 0;
 8002658:	4b2b      	ldr	r3, [pc, #172]	@ (8002708 <imu_calibrate+0xbc>)
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
	integralFBy = 0;
 8002660:	4b2a      	ldr	r3, [pc, #168]	@ (800270c <imu_calibrate+0xc0>)
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
	integralFBz = 0;
 8002668:	4b29      	ldr	r3, [pc, #164]	@ (8002710 <imu_calibrate+0xc4>)
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
	for(int i = 0;i < OFFSET_CYCLE; i++){
 8002670:	2300      	movs	r3, #0
 8002672:	61fb      	str	r3, [r7, #28]
 8002674:	e01f      	b.n	80026b6 <imu_calibrate+0x6a>
		mpu6050_gyro_get_raw(&gyro_);
 8002676:	f107 0314 	add.w	r3, r7, #20
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe ffb2 	bl	80015e4 <mpu6050_gyro_get_raw>
		store_gyro[X] += gyro_.x;
 8002680:	4b24      	ldr	r3, [pc, #144]	@ (8002714 <imu_calibrate+0xc8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002688:	4413      	add	r3, r2
 800268a:	4a22      	ldr	r2, [pc, #136]	@ (8002714 <imu_calibrate+0xc8>)
 800268c:	6013      	str	r3, [r2, #0]
    	store_gyro[Y] += gyro_.y;
 800268e:	4b21      	ldr	r3, [pc, #132]	@ (8002714 <imu_calibrate+0xc8>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002696:	4413      	add	r3, r2
 8002698:	4a1e      	ldr	r2, [pc, #120]	@ (8002714 <imu_calibrate+0xc8>)
 800269a:	6053      	str	r3, [r2, #4]
    	store_gyro[Z] += gyro_.z;
 800269c:	4b1d      	ldr	r3, [pc, #116]	@ (8002714 <imu_calibrate+0xc8>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80026a4:	4413      	add	r3, r2
 80026a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002714 <imu_calibrate+0xc8>)
 80026a8:	6093      	str	r3, [r2, #8]
		HAL_Delay(1); // delay 1 ms
 80026aa:	2001      	movs	r0, #1
 80026ac:	f003 fd00 	bl	80060b0 <HAL_Delay>
	for(int i = 0;i < OFFSET_CYCLE; i++){
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	3301      	adds	r3, #1
 80026b4:	61fb      	str	r3, [r7, #28]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026bc:	dbdb      	blt.n	8002676 <imu_calibrate+0x2a>
	}
	*offsx = store_gyro[X] / OFFSET_CYCLE;
 80026be:	4b15      	ldr	r3, [pc, #84]	@ (8002714 <imu_calibrate+0xc8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a15      	ldr	r2, [pc, #84]	@ (8002718 <imu_calibrate+0xcc>)
 80026c4:	fb82 1203 	smull	r1, r2, r2, r3
 80026c8:	1192      	asrs	r2, r2, #6
 80026ca:	17db      	asrs	r3, r3, #31
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	b21a      	sxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	801a      	strh	r2, [r3, #0]
	*offsy = store_gyro[Y] / OFFSET_CYCLE;
 80026d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002714 <imu_calibrate+0xc8>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002718 <imu_calibrate+0xcc>)
 80026da:	fb82 1203 	smull	r1, r2, r2, r3
 80026de:	1192      	asrs	r2, r2, #6
 80026e0:	17db      	asrs	r3, r3, #31
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	b21a      	sxth	r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	801a      	strh	r2, [r3, #0]
	*offsz = store_gyro[Z] / OFFSET_CYCLE;
 80026ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002714 <imu_calibrate+0xc8>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002718 <imu_calibrate+0xcc>)
 80026f0:	fb82 1203 	smull	r1, r2, r2, r3
 80026f4:	1192      	asrs	r2, r2, #6
 80026f6:	17db      	asrs	r3, r3, #31
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	b21a      	sxth	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	801a      	strh	r2, [r3, #0]
}
 8002700:	bf00      	nop
 8002702:	3720      	adds	r7, #32
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	200004e0 	.word	0x200004e0
 800270c:	200004e4 	.word	0x200004e4
 8002710:	200004e8 	.word	0x200004e8
 8002714:	20000528 	.word	0x20000528
 8002718:	10624dd3 	.word	0x10624dd3

0800271c <update_ahrs>:
	m->roll   = atan2_approx(-acc.x, (1/invSqrt_(acc.y * acc.y + acc.z * acc.z)))*180/M_PIf;
}

static int8_t first_loop = 1;
// mahony filter
void update_ahrs(int16_t gx_, int16_t gy_, int16_t gz_, int16_t accx_, int16_t accy_, int16_t accz_,int16_t magx,int16_t magy,int16_t magz,float dt){
 800271c:	b5b0      	push	{r4, r5, r7, lr}
 800271e:	b0a6      	sub	sp, #152	@ 0x98
 8002720:	af00      	add	r7, sp, #0
 8002722:	4604      	mov	r4, r0
 8002724:	4608      	mov	r0, r1
 8002726:	4611      	mov	r1, r2
 8002728:	461a      	mov	r2, r3
 800272a:	4623      	mov	r3, r4
 800272c:	80fb      	strh	r3, [r7, #6]
 800272e:	4603      	mov	r3, r0
 8002730:	80bb      	strh	r3, [r7, #4]
 8002732:	460b      	mov	r3, r1
 8002734:	807b      	strh	r3, [r7, #2]
 8002736:	4613      	mov	r3, r2
 8002738:	803b      	strh	r3, [r7, #0]
    float acc_x,acc_y,acc_z;
    float vx, vy, vz;
    float emz,wx,wy;
    float mx,my,mz,hx,hy,bx,bz;

	gx = (gx_/config.gyr_lsb) * RAD;
 800273a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800273e:	4618      	mov	r0, r3
 8002740:	f7fe fb14 	bl	8000d6c <__aeabi_i2f>
 8002744:	4602      	mov	r2, r0
 8002746:	4baf      	ldr	r3, [pc, #700]	@ (8002a04 <update_ahrs+0x2e8>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	4619      	mov	r1, r3
 800274c:	4610      	mov	r0, r2
 800274e:	f7fe fc15 	bl	8000f7c <__aeabi_fdiv>
 8002752:	4603      	mov	r3, r0
 8002754:	49ac      	ldr	r1, [pc, #688]	@ (8002a08 <update_ahrs+0x2ec>)
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe fb5c 	bl	8000e14 <__aeabi_fmul>
 800275c:	4603      	mov	r3, r0
 800275e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	gy = (gy_/config.gyr_lsb) * RAD;
 8002762:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe fb00 	bl	8000d6c <__aeabi_i2f>
 800276c:	4602      	mov	r2, r0
 800276e:	4ba5      	ldr	r3, [pc, #660]	@ (8002a04 <update_ahrs+0x2e8>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	4619      	mov	r1, r3
 8002774:	4610      	mov	r0, r2
 8002776:	f7fe fc01 	bl	8000f7c <__aeabi_fdiv>
 800277a:	4603      	mov	r3, r0
 800277c:	49a2      	ldr	r1, [pc, #648]	@ (8002a08 <update_ahrs+0x2ec>)
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fb48 	bl	8000e14 <__aeabi_fmul>
 8002784:	4603      	mov	r3, r0
 8002786:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	gz = (gz_/config.gyr_lsb) * RAD;
 800278a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe faec 	bl	8000d6c <__aeabi_i2f>
 8002794:	4602      	mov	r2, r0
 8002796:	4b9b      	ldr	r3, [pc, #620]	@ (8002a04 <update_ahrs+0x2e8>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	4619      	mov	r1, r3
 800279c:	4610      	mov	r0, r2
 800279e:	f7fe fbed 	bl	8000f7c <__aeabi_fdiv>
 80027a2:	4603      	mov	r3, r0
 80027a4:	4998      	ldr	r1, [pc, #608]	@ (8002a08 <update_ahrs+0x2ec>)
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe fb34 	bl	8000e14 <__aeabi_fmul>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

	if(!((accx_ == 0) && (accy_ == 0) && ( accz_ == 0))) {
 80027b2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d108      	bne.n	80027cc <update_ahrs+0xb0>
 80027ba:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d104      	bne.n	80027cc <update_ahrs+0xb0>
 80027c2:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 8255 	beq.w	8002c76 <update_ahrs+0x55a>
		norm = invSqrt_(accx_ * accx_ + accy_ * accy_ + accz_ * accz_);
 80027cc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80027d0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80027d4:	fb03 f202 	mul.w	r2, r3, r2
 80027d8:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 80027dc:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	@ 0xa8
 80027e0:	fb01 f303 	mul.w	r3, r1, r3
 80027e4:	441a      	add	r2, r3
 80027e6:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 80027ea:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 80027ee:	fb01 f303 	mul.w	r3, r1, r3
 80027f2:	4413      	add	r3, r2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fe fab9 	bl	8000d6c <__aeabi_i2f>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 ff67 	bl	80036d0 <invSqrt_>
 8002802:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
		acc_x = (float)accx_ * norm;
 8002806:	f9b7 3000 	ldrsh.w	r3, [r7]
 800280a:	4618      	mov	r0, r3
 800280c:	f7fe faae 	bl	8000d6c <__aeabi_i2f>
 8002810:	4603      	mov	r3, r0
 8002812:	4619      	mov	r1, r3
 8002814:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002818:	f7fe fafc 	bl	8000e14 <__aeabi_fmul>
 800281c:	4603      	mov	r3, r0
 800281e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		acc_y = (float)accy_ * norm;
 8002822:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe faa0 	bl	8000d6c <__aeabi_i2f>
 800282c:	4603      	mov	r3, r0
 800282e:	4619      	mov	r1, r3
 8002830:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002834:	f7fe faee 	bl	8000e14 <__aeabi_fmul>
 8002838:	4603      	mov	r3, r0
 800283a:	67fb      	str	r3, [r7, #124]	@ 0x7c
		acc_z = (float)accz_ * norm;
 800283c:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe fa93 	bl	8000d6c <__aeabi_i2f>
 8002846:	4603      	mov	r3, r0
 8002848:	4619      	mov	r1, r3
 800284a:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800284e:	f7fe fae1 	bl	8000e14 <__aeabi_fmul>
 8002852:	4603      	mov	r3, r0
 8002854:	67bb      	str	r3, [r7, #120]	@ 0x78

		if(first_loop){
 8002856:	4b6d      	ldr	r3, [pc, #436]	@ (8002a0c <update_ahrs+0x2f0>)
 8002858:	f993 3000 	ldrsb.w	r3, [r3]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00c      	beq.n	800287a <update_ahrs+0x15e>
			dcm[0][2] = acc_x;
 8002860:	4a6b      	ldr	r2, [pc, #428]	@ (8002a10 <update_ahrs+0x2f4>)
 8002862:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002866:	6093      	str	r3, [r2, #8]
			dcm[1][2] = acc_y;
 8002868:	4a69      	ldr	r2, [pc, #420]	@ (8002a10 <update_ahrs+0x2f4>)
 800286a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800286c:	6153      	str	r3, [r2, #20]
			dcm[2][2] = acc_z;
 800286e:	4a68      	ldr	r2, [pc, #416]	@ (8002a10 <update_ahrs+0x2f4>)
 8002870:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002872:	6213      	str	r3, [r2, #32]
			first_loop = 0;
 8002874:	4b65      	ldr	r3, [pc, #404]	@ (8002a0c <update_ahrs+0x2f0>)
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]
		}

        if(USE_MAG){
			norm = invSqrt_(magx * magx + magy * magy + magz * magz);
 800287a:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 800287e:	f9b7 20b0 	ldrsh.w	r2, [r7, #176]	@ 0xb0
 8002882:	fb03 f202 	mul.w	r2, r3, r2
 8002886:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 800288a:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	@ 0xb4
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	441a      	add	r2, r3
 8002894:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	@ 0xb8
 8002898:	f9b7 10b8 	ldrsh.w	r1, [r7, #184]	@ 0xb8
 800289c:	fb01 f303 	mul.w	r3, r1, r3
 80028a0:	4413      	add	r3, r2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe fa62 	bl	8000d6c <__aeabi_i2f>
 80028a8:	4603      	mov	r3, r0
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 ff10 	bl	80036d0 <invSqrt_>
 80028b0:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
			mx = magx * norm;
 80028b4:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fe fa57 	bl	8000d6c <__aeabi_i2f>
 80028be:	4603      	mov	r3, r0
 80028c0:	4619      	mov	r1, r3
 80028c2:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80028c6:	f7fe faa5 	bl	8000e14 <__aeabi_fmul>
 80028ca:	4603      	mov	r3, r0
 80028cc:	677b      	str	r3, [r7, #116]	@ 0x74
			my = magy * norm;
 80028ce:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe fa4a 	bl	8000d6c <__aeabi_i2f>
 80028d8:	4603      	mov	r3, r0
 80028da:	4619      	mov	r1, r3
 80028dc:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80028e0:	f7fe fa98 	bl	8000e14 <__aeabi_fmul>
 80028e4:	4603      	mov	r3, r0
 80028e6:	673b      	str	r3, [r7, #112]	@ 0x70
			mz = magz * norm;
 80028e8:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	@ 0xb8
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe fa3d 	bl	8000d6c <__aeabi_i2f>
 80028f2:	4603      	mov	r3, r0
 80028f4:	4619      	mov	r1, r3
 80028f6:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80028fa:	f7fe fa8b 	bl	8000e14 <__aeabi_fmul>
 80028fe:	4603      	mov	r3, r0
 8002900:	66fb      	str	r3, [r7, #108]	@ 0x6c

			hx = mx * dcm[0][0] + my * dcm[1][0] + mz * dcm[2][0];
 8002902:	4b43      	ldr	r3, [pc, #268]	@ (8002a10 <update_ahrs+0x2f4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe fa83 	bl	8000e14 <__aeabi_fmul>
 800290e:	4603      	mov	r3, r0
 8002910:	461c      	mov	r4, r3
 8002912:	4b3f      	ldr	r3, [pc, #252]	@ (8002a10 <update_ahrs+0x2f4>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002918:	4618      	mov	r0, r3
 800291a:	f7fe fa7b 	bl	8000e14 <__aeabi_fmul>
 800291e:	4603      	mov	r3, r0
 8002920:	4619      	mov	r1, r3
 8002922:	4620      	mov	r0, r4
 8002924:	f7fe f96e 	bl	8000c04 <__addsf3>
 8002928:	4603      	mov	r3, r0
 800292a:	461c      	mov	r4, r3
 800292c:	4b38      	ldr	r3, [pc, #224]	@ (8002a10 <update_ahrs+0x2f4>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe fa6e 	bl	8000e14 <__aeabi_fmul>
 8002938:	4603      	mov	r3, r0
 800293a:	4619      	mov	r1, r3
 800293c:	4620      	mov	r0, r4
 800293e:	f7fe f961 	bl	8000c04 <__addsf3>
 8002942:	4603      	mov	r3, r0
 8002944:	66bb      	str	r3, [r7, #104]	@ 0x68
			hy = mx * dcm[0][1] + my * dcm[1][1] + mz * dcm[2][1];
 8002946:	4b32      	ldr	r3, [pc, #200]	@ (8002a10 <update_ahrs+0x2f4>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800294c:	4618      	mov	r0, r3
 800294e:	f7fe fa61 	bl	8000e14 <__aeabi_fmul>
 8002952:	4603      	mov	r3, r0
 8002954:	461c      	mov	r4, r3
 8002956:	4b2e      	ldr	r3, [pc, #184]	@ (8002a10 <update_ahrs+0x2f4>)
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe fa59 	bl	8000e14 <__aeabi_fmul>
 8002962:	4603      	mov	r3, r0
 8002964:	4619      	mov	r1, r3
 8002966:	4620      	mov	r0, r4
 8002968:	f7fe f94c 	bl	8000c04 <__addsf3>
 800296c:	4603      	mov	r3, r0
 800296e:	461c      	mov	r4, r3
 8002970:	4b27      	ldr	r3, [pc, #156]	@ (8002a10 <update_ahrs+0x2f4>)
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fa4c 	bl	8000e14 <__aeabi_fmul>
 800297c:	4603      	mov	r3, r0
 800297e:	4619      	mov	r1, r3
 8002980:	4620      	mov	r0, r4
 8002982:	f7fe f93f 	bl	8000c04 <__addsf3>
 8002986:	4603      	mov	r3, r0
 8002988:	667b      	str	r3, [r7, #100]	@ 0x64
			bz = mx * dcm[0][2] + my * dcm[1][2] + mz * dcm[2][2];
 800298a:	4b21      	ldr	r3, [pc, #132]	@ (8002a10 <update_ahrs+0x2f4>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8002990:	4618      	mov	r0, r3
 8002992:	f7fe fa3f 	bl	8000e14 <__aeabi_fmul>
 8002996:	4603      	mov	r3, r0
 8002998:	461c      	mov	r4, r3
 800299a:	4b1d      	ldr	r3, [pc, #116]	@ (8002a10 <update_ahrs+0x2f4>)
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fe fa37 	bl	8000e14 <__aeabi_fmul>
 80029a6:	4603      	mov	r3, r0
 80029a8:	4619      	mov	r1, r3
 80029aa:	4620      	mov	r0, r4
 80029ac:	f7fe f92a 	bl	8000c04 <__addsf3>
 80029b0:	4603      	mov	r3, r0
 80029b2:	461c      	mov	r4, r3
 80029b4:	4b16      	ldr	r3, [pc, #88]	@ (8002a10 <update_ahrs+0x2f4>)
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe fa2a 	bl	8000e14 <__aeabi_fmul>
 80029c0:	4603      	mov	r3, r0
 80029c2:	4619      	mov	r1, r3
 80029c4:	4620      	mov	r0, r4
 80029c6:	f7fe f91d 	bl	8000c04 <__addsf3>
 80029ca:	4603      	mov	r3, r0
 80029cc:	663b      	str	r3, [r7, #96]	@ 0x60

			bx = sqrtf(hx * hx + hy * hy);
 80029ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80029d0:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80029d2:	f7fe fa1f 	bl	8000e14 <__aeabi_fmul>
 80029d6:	4603      	mov	r3, r0
 80029d8:	461c      	mov	r4, r3
 80029da:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80029dc:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80029de:	f7fe fa19 	bl	8000e14 <__aeabi_fmul>
 80029e2:	4603      	mov	r3, r0
 80029e4:	4619      	mov	r1, r3
 80029e6:	4620      	mov	r0, r4
 80029e8:	f7fe f90c 	bl	8000c04 <__addsf3>
 80029ec:	4603      	mov	r3, r0
 80029ee:	4618      	mov	r0, r3
 80029f0:	f010 fb04 	bl	8012ffc <sqrtf>
 80029f4:	65f8      	str	r0, [r7, #92]	@ 0x5c

			wx = bx * dcm[0][0] + bz * dcm[0][2];
 80029f6:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <update_ahrs+0x2f4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fe fa09 	bl	8000e14 <__aeabi_fmul>
 8002a02:	e007      	b.n	8002a14 <update_ahrs+0x2f8>
 8002a04:	20000018 	.word	0x20000018
 8002a08:	3c8efa35 	.word	0x3c8efa35
 8002a0c:	20000024 	.word	0x20000024
 8002a10:	20000504 	.word	0x20000504
 8002a14:	4603      	mov	r3, r0
 8002a16:	461c      	mov	r4, r3
 8002a18:	4b70      	ldr	r3, [pc, #448]	@ (8002bdc <update_ahrs+0x4c0>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe f9f8 	bl	8000e14 <__aeabi_fmul>
 8002a24:	4603      	mov	r3, r0
 8002a26:	4619      	mov	r1, r3
 8002a28:	4620      	mov	r0, r4
 8002a2a:	f7fe f8eb 	bl	8000c04 <__addsf3>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	65bb      	str	r3, [r7, #88]	@ 0x58
			wy = bx * dcm[1][0] + bz * dcm[1][2];
 8002a32:	4b6a      	ldr	r3, [pc, #424]	@ (8002bdc <update_ahrs+0x4c0>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fe f9eb 	bl	8000e14 <__aeabi_fmul>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	461c      	mov	r4, r3
 8002a42:	4b66      	ldr	r3, [pc, #408]	@ (8002bdc <update_ahrs+0x4c0>)
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fe f9e3 	bl	8000e14 <__aeabi_fmul>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4619      	mov	r1, r3
 8002a52:	4620      	mov	r0, r4
 8002a54:	f7fe f8d6 	bl	8000c04 <__addsf3>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	657b      	str	r3, [r7, #84]	@ 0x54
			emz = mx * wy - my * wx;
 8002a5c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a5e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002a60:	f7fe f9d8 	bl	8000e14 <__aeabi_fmul>
 8002a64:	4603      	mov	r3, r0
 8002a66:	461c      	mov	r4, r3
 8002a68:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002a6a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002a6c:	f7fe f9d2 	bl	8000e14 <__aeabi_fmul>
 8002a70:	4603      	mov	r3, r0
 8002a72:	4619      	mov	r1, r3
 8002a74:	4620      	mov	r0, r4
 8002a76:	f7fe f8c3 	bl	8000c00 <__aeabi_fsub>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	653b      	str	r3, [r7, #80]	@ 0x50
		}
		else{
			emz = 0.0f;
		}

		vx = dcm[0][2];
 8002a7e:	4b57      	ldr	r3, [pc, #348]	@ (8002bdc <update_ahrs+0x4c0>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
		vy = dcm[1][2];
 8002a84:	4b55      	ldr	r3, [pc, #340]	@ (8002bdc <update_ahrs+0x4c0>)
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	64bb      	str	r3, [r7, #72]	@ 0x48
		vz = dcm[2][2];
 8002a8a:	4b54      	ldr	r3, [pc, #336]	@ (8002bdc <update_ahrs+0x4c0>)
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	647b      	str	r3, [r7, #68]	@ 0x44

		ex = acc_y * vz - acc_z * vy;
 8002a90:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002a92:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8002a94:	f7fe f9be 	bl	8000e14 <__aeabi_fmul>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	461c      	mov	r4, r3
 8002a9c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002a9e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002aa0:	f7fe f9b8 	bl	8000e14 <__aeabi_fmul>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	f7fe f8a9 	bl	8000c00 <__aeabi_fsub>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	643b      	str	r3, [r7, #64]	@ 0x40
		ey = acc_z * vx - acc_x * vz;
 8002ab2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002ab4:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002ab6:	f7fe f9ad 	bl	8000e14 <__aeabi_fmul>
 8002aba:	4603      	mov	r3, r0
 8002abc:	461c      	mov	r4, r3
 8002abe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002ac0:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002ac4:	f7fe f9a6 	bl	8000e14 <__aeabi_fmul>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	4619      	mov	r1, r3
 8002acc:	4620      	mov	r0, r4
 8002ace:	f7fe f897 	bl	8000c00 <__aeabi_fsub>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		ez = acc_x * vy - acc_y * vx;
 8002ad6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002ad8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8002adc:	f7fe f99a 	bl	8000e14 <__aeabi_fmul>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	461c      	mov	r4, r3
 8002ae4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002ae6:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8002ae8:	f7fe f994 	bl	8000e14 <__aeabi_fmul>
 8002aec:	4603      	mov	r3, r0
 8002aee:	4619      	mov	r1, r3
 8002af0:	4620      	mov	r0, r4
 8002af2:	f7fe f885 	bl	8000c00 <__aeabi_fsub>
 8002af6:	4603      	mov	r3, r0
 8002af8:	63bb      	str	r3, [r7, #56]	@ 0x38

		if( Ki_imu  > 0.0f) {
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	f04f 0100 	mov.w	r1, #0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe fb42 	bl	800118c <__aeabi_fcmpgt>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d06e      	beq.n	8002bec <update_ahrs+0x4d0>
			integralFBx +=  Ki_imu  * ex * dt;
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fe f97d 	bl	8000e14 <__aeabi_fmul>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe f977 	bl	8000e14 <__aeabi_fmul>
 8002b26:	4603      	mov	r3, r0
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4b2d      	ldr	r3, [pc, #180]	@ (8002be0 <update_ahrs+0x4c4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4610      	mov	r0, r2
 8002b32:	f7fe f867 	bl	8000c04 <__addsf3>
 8002b36:	4603      	mov	r3, r0
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4b29      	ldr	r3, [pc, #164]	@ (8002be0 <update_ahrs+0x4c4>)
 8002b3c:	601a      	str	r2, [r3, #0]
			integralFBy +=  Ki_imu  * ey * dt;
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe f965 	bl	8000e14 <__aeabi_fmul>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fe f95f 	bl	8000e14 <__aeabi_fmul>
 8002b56:	4603      	mov	r3, r0
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4b22      	ldr	r3, [pc, #136]	@ (8002be4 <update_ahrs+0x4c8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4610      	mov	r0, r2
 8002b62:	f7fe f84f 	bl	8000c04 <__addsf3>
 8002b66:	4603      	mov	r3, r0
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002be4 <update_ahrs+0x4c8>)
 8002b6c:	601a      	str	r2, [r3, #0]
			integralFBz +=  Ki_imu  * ez * dt;
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fe f94d 	bl	8000e14 <__aeabi_fmul>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe f947 	bl	8000e14 <__aeabi_fmul>
 8002b86:	4603      	mov	r3, r0
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4b17      	ldr	r3, [pc, #92]	@ (8002be8 <update_ahrs+0x4cc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4610      	mov	r0, r2
 8002b92:	f7fe f837 	bl	8000c04 <__addsf3>
 8002b96:	4603      	mov	r3, r0
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4b13      	ldr	r3, [pc, #76]	@ (8002be8 <update_ahrs+0x4cc>)
 8002b9c:	601a      	str	r2, [r3, #0]
			gx += integralFBx;
 8002b9e:	4b10      	ldr	r3, [pc, #64]	@ (8002be0 <update_ahrs+0x4c4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002ba8:	f7fe f82c 	bl	8000c04 <__addsf3>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			gy += integralFBy;
 8002bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8002be4 <update_ahrs+0x4c8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002bbc:	f7fe f822 	bl	8000c04 <__addsf3>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			gz += integralFBz;
 8002bc6:	4b08      	ldr	r3, [pc, #32]	@ (8002be8 <update_ahrs+0x4cc>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4619      	mov	r1, r3
 8002bcc:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002bd0:	f7fe f818 	bl	8000c04 <__addsf3>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002bda:	e013      	b.n	8002c04 <update_ahrs+0x4e8>
 8002bdc:	20000504 	.word	0x20000504
 8002be0:	200004e0 	.word	0x200004e0
 8002be4:	200004e4 	.word	0x200004e4
 8002be8:	200004e8 	.word	0x200004e8
		} else {
			integralFBx = 0.0f;
 8002bec:	4ba4      	ldr	r3, [pc, #656]	@ (8002e80 <update_ahrs+0x764>)
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8002bf4:	4ba3      	ldr	r3, [pc, #652]	@ (8002e84 <update_ahrs+0x768>)
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8002bfc:	4ba2      	ldr	r3, [pc, #648]	@ (8002e88 <update_ahrs+0x76c>)
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
		}

		gx += Kp_imu * ex;
 8002c04:	4ba1      	ldr	r3, [pc, #644]	@ (8002e8c <update_ahrs+0x770>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe f902 	bl	8000e14 <__aeabi_fmul>
 8002c10:	4603      	mov	r3, r0
 8002c12:	4619      	mov	r1, r3
 8002c14:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002c18:	f7fd fff4 	bl	8000c04 <__addsf3>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		gy += Kp_imu * ey;
 8002c22:	4b9a      	ldr	r3, [pc, #616]	@ (8002e8c <update_ahrs+0x770>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fe f8f3 	bl	8000e14 <__aeabi_fmul>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4619      	mov	r1, r3
 8002c32:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002c36:	f7fd ffe5 	bl	8000c04 <__addsf3>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		gz += Kp_imu * ez + emz * Kp_mag;
 8002c40:	4b92      	ldr	r3, [pc, #584]	@ (8002e8c <update_ahrs+0x770>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fe f8e4 	bl	8000e14 <__aeabi_fmul>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	461c      	mov	r4, r3
 8002c50:	4b8f      	ldr	r3, [pc, #572]	@ (8002e90 <update_ahrs+0x774>)
 8002c52:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fe f8dd 	bl	8000e14 <__aeabi_fmul>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4620      	mov	r0, r4
 8002c60:	f7fd ffd0 	bl	8000c04 <__addsf3>
 8002c64:	4603      	mov	r3, r0
 8002c66:	4619      	mov	r1, r3
 8002c68:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002c6c:	f7fd ffca 	bl	8000c04 <__addsf3>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	}

	gx *= (0.5f * dt);
 8002c76:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002c7a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8002c7e:	f7fe f8c9 	bl	8000e14 <__aeabi_fmul>
 8002c82:	4603      	mov	r3, r0
 8002c84:	4619      	mov	r1, r3
 8002c86:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002c8a:	f7fe f8c3 	bl	8000e14 <__aeabi_fmul>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	gy *= (0.5f * dt);
 8002c94:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002c98:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8002c9c:	f7fe f8ba 	bl	8000e14 <__aeabi_fmul>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002ca8:	f7fe f8b4 	bl	8000e14 <__aeabi_fmul>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	gz *= (0.5f * dt);
 8002cb2:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002cb6:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8002cba:	f7fe f8ab 	bl	8000e14 <__aeabi_fmul>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002cc6:	f7fe f8a5 	bl	8000e14 <__aeabi_fmul>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

	q0 += (-q1 * gx - q2 * gy - q3 * gz);
 8002cd0:	4b70      	ldr	r3, [pc, #448]	@ (8002e94 <update_ahrs+0x778>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002cd8:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7fe f899 	bl	8000e14 <__aeabi_fmul>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	461c      	mov	r4, r3
 8002ce6:	4b6c      	ldr	r3, [pc, #432]	@ (8002e98 <update_ahrs+0x77c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe f890 	bl	8000e14 <__aeabi_fmul>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	f7fd ff81 	bl	8000c00 <__aeabi_fsub>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	461c      	mov	r4, r3
 8002d02:	4b66      	ldr	r3, [pc, #408]	@ (8002e9c <update_ahrs+0x780>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe f882 	bl	8000e14 <__aeabi_fmul>
 8002d10:	4603      	mov	r3, r0
 8002d12:	4619      	mov	r1, r3
 8002d14:	4620      	mov	r0, r4
 8002d16:	f7fd ff73 	bl	8000c00 <__aeabi_fsub>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	4b60      	ldr	r3, [pc, #384]	@ (8002ea0 <update_ahrs+0x784>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4619      	mov	r1, r3
 8002d24:	4610      	mov	r0, r2
 8002d26:	f7fd ff6d 	bl	8000c04 <__addsf3>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ea0 <update_ahrs+0x784>)
 8002d30:	601a      	str	r2, [r3, #0]
	q1 += ( q0 * gx + q2 * gz - q3 * gy);
 8002d32:	4b5b      	ldr	r3, [pc, #364]	@ (8002ea0 <update_ahrs+0x784>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fe f86a 	bl	8000e14 <__aeabi_fmul>
 8002d40:	4603      	mov	r3, r0
 8002d42:	461c      	mov	r4, r3
 8002d44:	4b54      	ldr	r3, [pc, #336]	@ (8002e98 <update_ahrs+0x77c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fe f861 	bl	8000e14 <__aeabi_fmul>
 8002d52:	4603      	mov	r3, r0
 8002d54:	4619      	mov	r1, r3
 8002d56:	4620      	mov	r0, r4
 8002d58:	f7fd ff54 	bl	8000c04 <__addsf3>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	461c      	mov	r4, r3
 8002d60:	4b4e      	ldr	r3, [pc, #312]	@ (8002e9c <update_ahrs+0x780>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fe f853 	bl	8000e14 <__aeabi_fmul>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4619      	mov	r1, r3
 8002d72:	4620      	mov	r0, r4
 8002d74:	f7fd ff44 	bl	8000c00 <__aeabi_fsub>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	4b45      	ldr	r3, [pc, #276]	@ (8002e94 <update_ahrs+0x778>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4619      	mov	r1, r3
 8002d82:	4610      	mov	r0, r2
 8002d84:	f7fd ff3e 	bl	8000c04 <__addsf3>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	4b41      	ldr	r3, [pc, #260]	@ (8002e94 <update_ahrs+0x778>)
 8002d8e:	601a      	str	r2, [r3, #0]
	q2 += ( q0 * gy - q1 * gz + q3 * gx);
 8002d90:	4b43      	ldr	r3, [pc, #268]	@ (8002ea0 <update_ahrs+0x784>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fe f83b 	bl	8000e14 <__aeabi_fmul>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	461c      	mov	r4, r3
 8002da2:	4b3c      	ldr	r3, [pc, #240]	@ (8002e94 <update_ahrs+0x778>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fe f832 	bl	8000e14 <__aeabi_fmul>
 8002db0:	4603      	mov	r3, r0
 8002db2:	4619      	mov	r1, r3
 8002db4:	4620      	mov	r0, r4
 8002db6:	f7fd ff23 	bl	8000c00 <__aeabi_fsub>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	461c      	mov	r4, r3
 8002dbe:	4b37      	ldr	r3, [pc, #220]	@ (8002e9c <update_ahrs+0x780>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fe f824 	bl	8000e14 <__aeabi_fmul>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	f7fd ff17 	bl	8000c04 <__addsf3>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b2f      	ldr	r3, [pc, #188]	@ (8002e98 <update_ahrs+0x77c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4619      	mov	r1, r3
 8002de0:	4610      	mov	r0, r2
 8002de2:	f7fd ff0f 	bl	8000c04 <__addsf3>
 8002de6:	4603      	mov	r3, r0
 8002de8:	461a      	mov	r2, r3
 8002dea:	4b2b      	ldr	r3, [pc, #172]	@ (8002e98 <update_ahrs+0x77c>)
 8002dec:	601a      	str	r2, [r3, #0]
	q3 += ( q0 * gz + q1 * gy - q2 * gx);
 8002dee:	4b2c      	ldr	r3, [pc, #176]	@ (8002ea0 <update_ahrs+0x784>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe f80c 	bl	8000e14 <__aeabi_fmul>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	461c      	mov	r4, r3
 8002e00:	4b24      	ldr	r3, [pc, #144]	@ (8002e94 <update_ahrs+0x778>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe f803 	bl	8000e14 <__aeabi_fmul>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4619      	mov	r1, r3
 8002e12:	4620      	mov	r0, r4
 8002e14:	f7fd fef6 	bl	8000c04 <__addsf3>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	461c      	mov	r4, r3
 8002e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8002e98 <update_ahrs+0x77c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fd fff5 	bl	8000e14 <__aeabi_fmul>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4620      	mov	r0, r4
 8002e30:	f7fd fee6 	bl	8000c00 <__aeabi_fsub>
 8002e34:	4603      	mov	r3, r0
 8002e36:	461a      	mov	r2, r3
 8002e38:	4b18      	ldr	r3, [pc, #96]	@ (8002e9c <update_ahrs+0x780>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4610      	mov	r0, r2
 8002e40:	f7fd fee0 	bl	8000c04 <__addsf3>
 8002e44:	4603      	mov	r3, r0
 8002e46:	461a      	mov	r2, r3
 8002e48:	4b14      	ldr	r3, [pc, #80]	@ (8002e9c <update_ahrs+0x780>)
 8002e4a:	601a      	str	r2, [r3, #0]

	norm = invSqrt_(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002e4c:	4b14      	ldr	r3, [pc, #80]	@ (8002ea0 <update_ahrs+0x784>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a13      	ldr	r2, [pc, #76]	@ (8002ea0 <update_ahrs+0x784>)
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	4611      	mov	r1, r2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd ffdc 	bl	8000e14 <__aeabi_fmul>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	461c      	mov	r4, r3
 8002e60:	4b0c      	ldr	r3, [pc, #48]	@ (8002e94 <update_ahrs+0x778>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0b      	ldr	r2, [pc, #44]	@ (8002e94 <update_ahrs+0x778>)
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	4611      	mov	r1, r2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fd ffd2 	bl	8000e14 <__aeabi_fmul>
 8002e70:	4603      	mov	r3, r0
 8002e72:	4619      	mov	r1, r3
 8002e74:	4620      	mov	r0, r4
 8002e76:	f7fd fec5 	bl	8000c04 <__addsf3>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	461c      	mov	r4, r3
 8002e7e:	e011      	b.n	8002ea4 <update_ahrs+0x788>
 8002e80:	200004e0 	.word	0x200004e0
 8002e84:	200004e4 	.word	0x200004e4
 8002e88:	200004e8 	.word	0x200004e8
 8002e8c:	20000010 	.word	0x20000010
 8002e90:	40a00000 	.word	0x40a00000
 8002e94:	200004f8 	.word	0x200004f8
 8002e98:	200004fc 	.word	0x200004fc
 8002e9c:	20000500 	.word	0x20000500
 8002ea0:	20000014 	.word	0x20000014
 8002ea4:	4b96      	ldr	r3, [pc, #600]	@ (8003100 <update_ahrs+0x9e4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a95      	ldr	r2, [pc, #596]	@ (8003100 <update_ahrs+0x9e4>)
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	4611      	mov	r1, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd ffb0 	bl	8000e14 <__aeabi_fmul>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4620      	mov	r0, r4
 8002eba:	f7fd fea3 	bl	8000c04 <__addsf3>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	461c      	mov	r4, r3
 8002ec2:	4b90      	ldr	r3, [pc, #576]	@ (8003104 <update_ahrs+0x9e8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a8f      	ldr	r2, [pc, #572]	@ (8003104 <update_ahrs+0x9e8>)
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fd ffa1 	bl	8000e14 <__aeabi_fmul>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	f7fd fe94 	bl	8000c04 <__addsf3>
 8002edc:	4603      	mov	r3, r0
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fbf6 	bl	80036d0 <invSqrt_>
 8002ee4:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	q0 *= norm;
 8002ee8:	4b87      	ldr	r3, [pc, #540]	@ (8003108 <update_ahrs+0x9ec>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fd ff8f 	bl	8000e14 <__aeabi_fmul>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	461a      	mov	r2, r3
 8002efa:	4b83      	ldr	r3, [pc, #524]	@ (8003108 <update_ahrs+0x9ec>)
 8002efc:	601a      	str	r2, [r3, #0]
	q1 *= norm;
 8002efe:	4b83      	ldr	r3, [pc, #524]	@ (800310c <update_ahrs+0x9f0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fd ff84 	bl	8000e14 <__aeabi_fmul>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	461a      	mov	r2, r3
 8002f10:	4b7e      	ldr	r3, [pc, #504]	@ (800310c <update_ahrs+0x9f0>)
 8002f12:	601a      	str	r2, [r3, #0]
	q2 *= norm;
 8002f14:	4b7a      	ldr	r3, [pc, #488]	@ (8003100 <update_ahrs+0x9e4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fd ff79 	bl	8000e14 <__aeabi_fmul>
 8002f22:	4603      	mov	r3, r0
 8002f24:	461a      	mov	r2, r3
 8002f26:	4b76      	ldr	r3, [pc, #472]	@ (8003100 <update_ahrs+0x9e4>)
 8002f28:	601a      	str	r2, [r3, #0]
	q3 *= norm;
 8002f2a:	4b76      	ldr	r3, [pc, #472]	@ (8003104 <update_ahrs+0x9e8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fd ff6e 	bl	8000e14 <__aeabi_fmul>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4b71      	ldr	r3, [pc, #452]	@ (8003104 <update_ahrs+0x9e8>)
 8002f3e:	601a      	str	r2, [r3, #0]
	
	float q0q1 = q0*q1;
 8002f40:	4b71      	ldr	r3, [pc, #452]	@ (8003108 <update_ahrs+0x9ec>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a71      	ldr	r2, [pc, #452]	@ (800310c <update_ahrs+0x9f0>)
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd ff62 	bl	8000e14 <__aeabi_fmul>
 8002f50:	4603      	mov	r3, r0
 8002f52:	637b      	str	r3, [r7, #52]	@ 0x34
	float q0q2 = q0*q2;
 8002f54:	4b6c      	ldr	r3, [pc, #432]	@ (8003108 <update_ahrs+0x9ec>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a69      	ldr	r2, [pc, #420]	@ (8003100 <update_ahrs+0x9e4>)
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fd ff58 	bl	8000e14 <__aeabi_fmul>
 8002f64:	4603      	mov	r3, r0
 8002f66:	633b      	str	r3, [r7, #48]	@ 0x30
	float q0q3 = q0*q3;
 8002f68:	4b67      	ldr	r3, [pc, #412]	@ (8003108 <update_ahrs+0x9ec>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a65      	ldr	r2, [pc, #404]	@ (8003104 <update_ahrs+0x9e8>)
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	4611      	mov	r1, r2
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fd ff4e 	bl	8000e14 <__aeabi_fmul>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float q1q1 = q1*q1;
 8002f7c:	4b63      	ldr	r3, [pc, #396]	@ (800310c <update_ahrs+0x9f0>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a62      	ldr	r2, [pc, #392]	@ (800310c <update_ahrs+0x9f0>)
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	4611      	mov	r1, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fd ff44 	bl	8000e14 <__aeabi_fmul>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
	float q1q2 = q1*q2;
 8002f90:	4b5e      	ldr	r3, [pc, #376]	@ (800310c <update_ahrs+0x9f0>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a5a      	ldr	r2, [pc, #360]	@ (8003100 <update_ahrs+0x9e4>)
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fd ff3a 	bl	8000e14 <__aeabi_fmul>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	627b      	str	r3, [r7, #36]	@ 0x24
	float q1q3 = q1*q3;
 8002fa4:	4b59      	ldr	r3, [pc, #356]	@ (800310c <update_ahrs+0x9f0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a56      	ldr	r2, [pc, #344]	@ (8003104 <update_ahrs+0x9e8>)
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	4611      	mov	r1, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fd ff30 	bl	8000e14 <__aeabi_fmul>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	623b      	str	r3, [r7, #32]
	float q2q2 = q2*q2;
 8002fb8:	4b51      	ldr	r3, [pc, #324]	@ (8003100 <update_ahrs+0x9e4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a50      	ldr	r2, [pc, #320]	@ (8003100 <update_ahrs+0x9e4>)
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fd ff26 	bl	8000e14 <__aeabi_fmul>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	61fb      	str	r3, [r7, #28]
	float q2q3 = q2*q3;
 8002fcc:	4b4c      	ldr	r3, [pc, #304]	@ (8003100 <update_ahrs+0x9e4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a4c      	ldr	r2, [pc, #304]	@ (8003104 <update_ahrs+0x9e8>)
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fd ff1c 	bl	8000e14 <__aeabi_fmul>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	61bb      	str	r3, [r7, #24]
	float q3q3 = q3*q3;
 8002fe0:	4b48      	ldr	r3, [pc, #288]	@ (8003104 <update_ahrs+0x9e8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a47      	ldr	r2, [pc, #284]	@ (8003104 <update_ahrs+0x9e8>)
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd ff12 	bl	8000e14 <__aeabi_fmul>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	617b      	str	r3, [r7, #20]

	// Quaternion to Rotation matrix
	dcm[0][0] = 2.0f*(0.5f - q2q2  - q3q3);
 8002ff4:	69f9      	ldr	r1, [r7, #28]
 8002ff6:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8002ffa:	f7fd fe01 	bl	8000c00 <__aeabi_fsub>
 8002ffe:	4603      	mov	r3, r0
 8003000:	6979      	ldr	r1, [r7, #20]
 8003002:	4618      	mov	r0, r3
 8003004:	f7fd fdfc 	bl	8000c00 <__aeabi_fsub>
 8003008:	4603      	mov	r3, r0
 800300a:	4619      	mov	r1, r3
 800300c:	4618      	mov	r0, r3
 800300e:	f7fd fdf9 	bl	8000c04 <__addsf3>
 8003012:	4603      	mov	r3, r0
 8003014:	461a      	mov	r2, r3
 8003016:	4b3e      	ldr	r3, [pc, #248]	@ (8003110 <update_ahrs+0x9f4>)
 8003018:	601a      	str	r2, [r3, #0]
	dcm[1][0] = 2.0f*(q1q2 - q0q3);
 800301a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800301c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800301e:	f7fd fdef 	bl	8000c00 <__aeabi_fsub>
 8003022:	4603      	mov	r3, r0
 8003024:	4619      	mov	r1, r3
 8003026:	4618      	mov	r0, r3
 8003028:	f7fd fdec 	bl	8000c04 <__addsf3>
 800302c:	4603      	mov	r3, r0
 800302e:	461a      	mov	r2, r3
 8003030:	4b37      	ldr	r3, [pc, #220]	@ (8003110 <update_ahrs+0x9f4>)
 8003032:	60da      	str	r2, [r3, #12]
	dcm[2][0] = 2.0f*(q1q3 + q0q2);
 8003034:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003036:	6a38      	ldr	r0, [r7, #32]
 8003038:	f7fd fde4 	bl	8000c04 <__addsf3>
 800303c:	4603      	mov	r3, r0
 800303e:	4619      	mov	r1, r3
 8003040:	4618      	mov	r0, r3
 8003042:	f7fd fddf 	bl	8000c04 <__addsf3>
 8003046:	4603      	mov	r3, r0
 8003048:	461a      	mov	r2, r3
 800304a:	4b31      	ldr	r3, [pc, #196]	@ (8003110 <update_ahrs+0x9f4>)
 800304c:	619a      	str	r2, [r3, #24]
	dcm[0][1] = 2.0f*(q1q2 + q0q3);
 800304e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003050:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003052:	f7fd fdd7 	bl	8000c04 <__addsf3>
 8003056:	4603      	mov	r3, r0
 8003058:	4619      	mov	r1, r3
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd fdd2 	bl	8000c04 <__addsf3>
 8003060:	4603      	mov	r3, r0
 8003062:	461a      	mov	r2, r3
 8003064:	4b2a      	ldr	r3, [pc, #168]	@ (8003110 <update_ahrs+0x9f4>)
 8003066:	605a      	str	r2, [r3, #4]
	dcm[1][1] = 2.0f*(0.5f - q1q1 - q3q3);
 8003068:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800306a:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 800306e:	f7fd fdc7 	bl	8000c00 <__aeabi_fsub>
 8003072:	4603      	mov	r3, r0
 8003074:	6979      	ldr	r1, [r7, #20]
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd fdc2 	bl	8000c00 <__aeabi_fsub>
 800307c:	4603      	mov	r3, r0
 800307e:	4619      	mov	r1, r3
 8003080:	4618      	mov	r0, r3
 8003082:	f7fd fdbf 	bl	8000c04 <__addsf3>
 8003086:	4603      	mov	r3, r0
 8003088:	461a      	mov	r2, r3
 800308a:	4b21      	ldr	r3, [pc, #132]	@ (8003110 <update_ahrs+0x9f4>)
 800308c:	611a      	str	r2, [r3, #16]
	dcm[2][1] = 2.0f*(q2q3 - q0q1);
 800308e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003090:	69b8      	ldr	r0, [r7, #24]
 8003092:	f7fd fdb5 	bl	8000c00 <__aeabi_fsub>
 8003096:	4603      	mov	r3, r0
 8003098:	4619      	mov	r1, r3
 800309a:	4618      	mov	r0, r3
 800309c:	f7fd fdb2 	bl	8000c04 <__addsf3>
 80030a0:	4603      	mov	r3, r0
 80030a2:	461a      	mov	r2, r3
 80030a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003110 <update_ahrs+0x9f4>)
 80030a6:	61da      	str	r2, [r3, #28]
	dcm[0][2] = 2.0f*(q1q3 - q0q2);
 80030a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80030aa:	6a38      	ldr	r0, [r7, #32]
 80030ac:	f7fd fda8 	bl	8000c00 <__aeabi_fsub>
 80030b0:	4603      	mov	r3, r0
 80030b2:	4619      	mov	r1, r3
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fd fda5 	bl	8000c04 <__addsf3>
 80030ba:	4603      	mov	r3, r0
 80030bc:	461a      	mov	r2, r3
 80030be:	4b14      	ldr	r3, [pc, #80]	@ (8003110 <update_ahrs+0x9f4>)
 80030c0:	609a      	str	r2, [r3, #8]
	dcm[1][2] = 2.0f*(q2q3 + q0q1);
 80030c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80030c4:	69b8      	ldr	r0, [r7, #24]
 80030c6:	f7fd fd9d 	bl	8000c04 <__addsf3>
 80030ca:	4603      	mov	r3, r0
 80030cc:	4619      	mov	r1, r3
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd fd98 	bl	8000c04 <__addsf3>
 80030d4:	4603      	mov	r3, r0
 80030d6:	461a      	mov	r2, r3
 80030d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003110 <update_ahrs+0x9f4>)
 80030da:	615a      	str	r2, [r3, #20]
	dcm[2][2] = 2.0f*(0.5f - q1q1 - q2q2);
 80030dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030de:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 80030e2:	f7fd fd8d 	bl	8000c00 <__aeabi_fsub>
 80030e6:	4603      	mov	r3, r0
 80030e8:	69f9      	ldr	r1, [r7, #28]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fd fd88 	bl	8000c00 <__aeabi_fsub>
 80030f0:	4603      	mov	r3, r0
 80030f2:	4619      	mov	r1, r3
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7fd fd85 	bl	8000c04 <__addsf3>
 80030fa:	4603      	mov	r3, r0
 80030fc:	461a      	mov	r2, r3
 80030fe:	e009      	b.n	8003114 <update_ahrs+0x9f8>
 8003100:	200004fc 	.word	0x200004fc
 8003104:	20000500 	.word	0x20000500
 8003108:	20000014 	.word	0x20000014
 800310c:	200004f8 	.word	0x200004f8
 8003110:	20000504 	.word	0x20000504
 8003114:	4ba7      	ldr	r3, [pc, #668]	@ (80033b4 <update_ahrs+0xc98>)
 8003116:	621a      	str	r2, [r3, #32]
	
    // Rotate acceleration from Body frame to earth frame
	int16_t acc_Eframex = dcm[0][0]*accx_ + dcm[1][0]*accy_ + dcm[2][0]*accz_;
 8003118:	4ba6      	ldr	r3, [pc, #664]	@ (80033b4 <update_ahrs+0xc98>)
 800311a:	681c      	ldr	r4, [r3, #0]
 800311c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003120:	4618      	mov	r0, r3
 8003122:	f7fd fe23 	bl	8000d6c <__aeabi_i2f>
 8003126:	4603      	mov	r3, r0
 8003128:	4619      	mov	r1, r3
 800312a:	4620      	mov	r0, r4
 800312c:	f7fd fe72 	bl	8000e14 <__aeabi_fmul>
 8003130:	4603      	mov	r3, r0
 8003132:	461d      	mov	r5, r3
 8003134:	4b9f      	ldr	r3, [pc, #636]	@ (80033b4 <update_ahrs+0xc98>)
 8003136:	68dc      	ldr	r4, [r3, #12]
 8003138:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 800313c:	4618      	mov	r0, r3
 800313e:	f7fd fe15 	bl	8000d6c <__aeabi_i2f>
 8003142:	4603      	mov	r3, r0
 8003144:	4619      	mov	r1, r3
 8003146:	4620      	mov	r0, r4
 8003148:	f7fd fe64 	bl	8000e14 <__aeabi_fmul>
 800314c:	4603      	mov	r3, r0
 800314e:	4619      	mov	r1, r3
 8003150:	4628      	mov	r0, r5
 8003152:	f7fd fd57 	bl	8000c04 <__addsf3>
 8003156:	4603      	mov	r3, r0
 8003158:	461d      	mov	r5, r3
 800315a:	4b96      	ldr	r3, [pc, #600]	@ (80033b4 <update_ahrs+0xc98>)
 800315c:	699c      	ldr	r4, [r3, #24]
 800315e:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 8003162:	4618      	mov	r0, r3
 8003164:	f7fd fe02 	bl	8000d6c <__aeabi_i2f>
 8003168:	4603      	mov	r3, r0
 800316a:	4619      	mov	r1, r3
 800316c:	4620      	mov	r0, r4
 800316e:	f7fd fe51 	bl	8000e14 <__aeabi_fmul>
 8003172:	4603      	mov	r3, r0
 8003174:	4619      	mov	r1, r3
 8003176:	4628      	mov	r0, r5
 8003178:	f7fd fd44 	bl	8000c04 <__addsf3>
 800317c:	4603      	mov	r3, r0
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe f824 	bl	80011cc <__aeabi_f2iz>
 8003184:	4603      	mov	r3, r0
 8003186:	827b      	strh	r3, [r7, #18]
	int16_t acc_Eframey = dcm[0][1]*accx_ + dcm[1][1]*accy_ + dcm[2][1]*accz_;
 8003188:	4b8a      	ldr	r3, [pc, #552]	@ (80033b4 <update_ahrs+0xc98>)
 800318a:	685c      	ldr	r4, [r3, #4]
 800318c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd fdeb 	bl	8000d6c <__aeabi_i2f>
 8003196:	4603      	mov	r3, r0
 8003198:	4619      	mov	r1, r3
 800319a:	4620      	mov	r0, r4
 800319c:	f7fd fe3a 	bl	8000e14 <__aeabi_fmul>
 80031a0:	4603      	mov	r3, r0
 80031a2:	461d      	mov	r5, r3
 80031a4:	4b83      	ldr	r3, [pc, #524]	@ (80033b4 <update_ahrs+0xc98>)
 80031a6:	691c      	ldr	r4, [r3, #16]
 80031a8:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fd fddd 	bl	8000d6c <__aeabi_i2f>
 80031b2:	4603      	mov	r3, r0
 80031b4:	4619      	mov	r1, r3
 80031b6:	4620      	mov	r0, r4
 80031b8:	f7fd fe2c 	bl	8000e14 <__aeabi_fmul>
 80031bc:	4603      	mov	r3, r0
 80031be:	4619      	mov	r1, r3
 80031c0:	4628      	mov	r0, r5
 80031c2:	f7fd fd1f 	bl	8000c04 <__addsf3>
 80031c6:	4603      	mov	r3, r0
 80031c8:	461d      	mov	r5, r3
 80031ca:	4b7a      	ldr	r3, [pc, #488]	@ (80033b4 <update_ahrs+0xc98>)
 80031cc:	69dc      	ldr	r4, [r3, #28]
 80031ce:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd fdca 	bl	8000d6c <__aeabi_i2f>
 80031d8:	4603      	mov	r3, r0
 80031da:	4619      	mov	r1, r3
 80031dc:	4620      	mov	r0, r4
 80031de:	f7fd fe19 	bl	8000e14 <__aeabi_fmul>
 80031e2:	4603      	mov	r3, r0
 80031e4:	4619      	mov	r1, r3
 80031e6:	4628      	mov	r0, r5
 80031e8:	f7fd fd0c 	bl	8000c04 <__addsf3>
 80031ec:	4603      	mov	r3, r0
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd ffec 	bl	80011cc <__aeabi_f2iz>
 80031f4:	4603      	mov	r3, r0
 80031f6:	823b      	strh	r3, [r7, #16]
	int16_t acc_Eframez = dcm[0][2]*accx_ + dcm[1][2]*accy_ + dcm[2][2]*accz_;
 80031f8:	4b6e      	ldr	r3, [pc, #440]	@ (80033b4 <update_ahrs+0xc98>)
 80031fa:	689c      	ldr	r4, [r3, #8]
 80031fc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003200:	4618      	mov	r0, r3
 8003202:	f7fd fdb3 	bl	8000d6c <__aeabi_i2f>
 8003206:	4603      	mov	r3, r0
 8003208:	4619      	mov	r1, r3
 800320a:	4620      	mov	r0, r4
 800320c:	f7fd fe02 	bl	8000e14 <__aeabi_fmul>
 8003210:	4603      	mov	r3, r0
 8003212:	461d      	mov	r5, r3
 8003214:	4b67      	ldr	r3, [pc, #412]	@ (80033b4 <update_ahrs+0xc98>)
 8003216:	695c      	ldr	r4, [r3, #20]
 8003218:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 800321c:	4618      	mov	r0, r3
 800321e:	f7fd fda5 	bl	8000d6c <__aeabi_i2f>
 8003222:	4603      	mov	r3, r0
 8003224:	4619      	mov	r1, r3
 8003226:	4620      	mov	r0, r4
 8003228:	f7fd fdf4 	bl	8000e14 <__aeabi_fmul>
 800322c:	4603      	mov	r3, r0
 800322e:	4619      	mov	r1, r3
 8003230:	4628      	mov	r0, r5
 8003232:	f7fd fce7 	bl	8000c04 <__addsf3>
 8003236:	4603      	mov	r3, r0
 8003238:	461d      	mov	r5, r3
 800323a:	4b5e      	ldr	r3, [pc, #376]	@ (80033b4 <update_ahrs+0xc98>)
 800323c:	6a1c      	ldr	r4, [r3, #32]
 800323e:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 8003242:	4618      	mov	r0, r3
 8003244:	f7fd fd92 	bl	8000d6c <__aeabi_i2f>
 8003248:	4603      	mov	r3, r0
 800324a:	4619      	mov	r1, r3
 800324c:	4620      	mov	r0, r4
 800324e:	f7fd fde1 	bl	8000e14 <__aeabi_fmul>
 8003252:	4603      	mov	r3, r0
 8003254:	4619      	mov	r1, r3
 8003256:	4628      	mov	r0, r5
 8003258:	f7fd fcd4 	bl	8000c04 <__addsf3>
 800325c:	4603      	mov	r3, r0
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd ffb4 	bl	80011cc <__aeabi_f2iz>
 8003264:	4603      	mov	r3, r0
 8003266:	81fb      	strh	r3, [r7, #14]

	const float accTrueScale = 9.8f/2048.0f;
 8003268:	4b53      	ldr	r3, [pc, #332]	@ (80033b8 <update_ahrs+0xc9c>)
 800326a:	60bb      	str	r3, [r7, #8]
	acc_Eframe[X] = acc_Eframex*accTrueScale;
 800326c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003270:	4618      	mov	r0, r3
 8003272:	f7fd fd7b 	bl	8000d6c <__aeabi_i2f>
 8003276:	4603      	mov	r3, r0
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	4618      	mov	r0, r3
 800327c:	f7fd fdca 	bl	8000e14 <__aeabi_fmul>
 8003280:	4603      	mov	r3, r0
 8003282:	461a      	mov	r2, r3
 8003284:	4b4d      	ldr	r3, [pc, #308]	@ (80033bc <update_ahrs+0xca0>)
 8003286:	601a      	str	r2, [r3, #0]
	acc_Eframe[Y] = acc_Eframey*accTrueScale;
 8003288:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800328c:	4618      	mov	r0, r3
 800328e:	f7fd fd6d 	bl	8000d6c <__aeabi_i2f>
 8003292:	4603      	mov	r3, r0
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fd fdbc 	bl	8000e14 <__aeabi_fmul>
 800329c:	4603      	mov	r3, r0
 800329e:	461a      	mov	r2, r3
 80032a0:	4b46      	ldr	r3, [pc, #280]	@ (80033bc <update_ahrs+0xca0>)
 80032a2:	605a      	str	r2, [r3, #4]
	acc_Eframe[Z] = acc_Eframez*accTrueScale;
 80032a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fd fd5f 	bl	8000d6c <__aeabi_i2f>
 80032ae:	4603      	mov	r3, r0
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd fdae 	bl	8000e14 <__aeabi_fmul>
 80032b8:	4603      	mov	r3, r0
 80032ba:	461a      	mov	r2, r3
 80032bc:	4b3f      	ldr	r3, [pc, #252]	@ (80033bc <update_ahrs+0xca0>)
 80032be:	609a      	str	r2, [r3, #8]

	AHRS.pitch = -atan2_approx(-dcm[0][2],sqrtf(1 - dcm[0][2]*dcm[0][2]))*DEG;
 80032c0:	4b3c      	ldr	r3, [pc, #240]	@ (80033b4 <update_ahrs+0xc98>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 80032c8:	4b3a      	ldr	r3, [pc, #232]	@ (80033b4 <update_ahrs+0xc98>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	4a39      	ldr	r2, [pc, #228]	@ (80033b4 <update_ahrs+0xc98>)
 80032ce:	6892      	ldr	r2, [r2, #8]
 80032d0:	4611      	mov	r1, r2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd fd9e 	bl	8000e14 <__aeabi_fmul>
 80032d8:	4603      	mov	r3, r0
 80032da:	4619      	mov	r1, r3
 80032dc:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80032e0:	f7fd fc8e 	bl	8000c00 <__aeabi_fsub>
 80032e4:	4603      	mov	r3, r0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f00f fe88 	bl	8012ffc <sqrtf>
 80032ec:	4603      	mov	r3, r0
 80032ee:	4619      	mov	r1, r3
 80032f0:	4620      	mov	r0, r4
 80032f2:	f000 f92d 	bl	8003550 <atan2_approx>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80032fc:	4930      	ldr	r1, [pc, #192]	@ (80033c0 <update_ahrs+0xca4>)
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fd fd88 	bl	8000e14 <__aeabi_fmul>
 8003304:	4603      	mov	r3, r0
 8003306:	461a      	mov	r2, r3
 8003308:	4b2e      	ldr	r3, [pc, #184]	@ (80033c4 <update_ahrs+0xca8>)
 800330a:	605a      	str	r2, [r3, #4]
	AHRS.roll = -atan2_approx(-dcm[1][2],dcm[2][2])*DEG;
 800330c:	4b29      	ldr	r3, [pc, #164]	@ (80033b4 <update_ahrs+0xc98>)
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003314:	4a27      	ldr	r2, [pc, #156]	@ (80033b4 <update_ahrs+0xc98>)
 8003316:	6a12      	ldr	r2, [r2, #32]
 8003318:	4611      	mov	r1, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f000 f918 	bl	8003550 <atan2_approx>
 8003320:	4603      	mov	r3, r0
 8003322:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003326:	4926      	ldr	r1, [pc, #152]	@ (80033c0 <update_ahrs+0xca4>)
 8003328:	4618      	mov	r0, r3
 800332a:	f7fd fd73 	bl	8000e14 <__aeabi_fmul>
 800332e:	4603      	mov	r3, r0
 8003330:	461a      	mov	r2, r3
 8003332:	4b24      	ldr	r3, [pc, #144]	@ (80033c4 <update_ahrs+0xca8>)
 8003334:	601a      	str	r2, [r3, #0]
	float yaw_ = -atan2_approx(dcm[0][1],dcm[0][0])*DEG;
 8003336:	4b1f      	ldr	r3, [pc, #124]	@ (80033b4 <update_ahrs+0xc98>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	4a1e      	ldr	r2, [pc, #120]	@ (80033b4 <update_ahrs+0xc98>)
 800333c:	6812      	ldr	r2, [r2, #0]
 800333e:	4611      	mov	r1, r2
 8003340:	4618      	mov	r0, r3
 8003342:	f000 f905 	bl	8003550 <atan2_approx>
 8003346:	4603      	mov	r3, r0
 8003348:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800334c:	491c      	ldr	r1, [pc, #112]	@ (80033c0 <update_ahrs+0xca4>)
 800334e:	4618      	mov	r0, r3
 8003350:	f7fd fd60 	bl	8000e14 <__aeabi_fmul>
 8003354:	4603      	mov	r3, r0
 8003356:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	if(yaw_ < 0){
 800335a:	f04f 0100 	mov.w	r1, #0
 800335e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003362:	f7fd fef5 	bl	8001150 <__aeabi_fcmplt>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d007      	beq.n	800337c <update_ahrs+0xc60>
		 yaw_ = 360 + yaw_;
 800336c:	4916      	ldr	r1, [pc, #88]	@ (80033c8 <update_ahrs+0xcac>)
 800336e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003372:	f7fd fc47 	bl	8000c04 <__addsf3>
 8003376:	4603      	mov	r3, r0
 8003378:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	}
	AHRS.yaw =  yaw_;
 800337c:	4a11      	ldr	r2, [pc, #68]	@ (80033c4 <update_ahrs+0xca8>)
 800337e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003382:	6093      	str	r3, [r2, #8]
	AHRS.roll_rate  = gx_/config.gyr_lsb;
 8003384:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003388:	4618      	mov	r0, r3
 800338a:	f7fd fcef 	bl	8000d6c <__aeabi_i2f>
 800338e:	4602      	mov	r2, r0
 8003390:	4b0e      	ldr	r3, [pc, #56]	@ (80033cc <update_ahrs+0xcb0>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	4619      	mov	r1, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f7fd fdf0 	bl	8000f7c <__aeabi_fdiv>
 800339c:	4603      	mov	r3, r0
 800339e:	461a      	mov	r2, r3
 80033a0:	4b08      	ldr	r3, [pc, #32]	@ (80033c4 <update_ahrs+0xca8>)
 80033a2:	60da      	str	r2, [r3, #12]
	AHRS.pitch_rate = -gy_/config.gyr_lsb;
 80033a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80033a8:	425b      	negs	r3, r3
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd fcde 	bl	8000d6c <__aeabi_i2f>
 80033b0:	4602      	mov	r2, r0
 80033b2:	e00d      	b.n	80033d0 <update_ahrs+0xcb4>
 80033b4:	20000504 	.word	0x20000504
 80033b8:	3b9ccccd 	.word	0x3b9ccccd
 80033bc:	200004ec 	.word	0x200004ec
 80033c0:	42652ee0 	.word	0x42652ee0
 80033c4:	200004c8 	.word	0x200004c8
 80033c8:	43b40000 	.word	0x43b40000
 80033cc:	20000018 	.word	0x20000018
 80033d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003410 <update_ahrs+0xcf4>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	4619      	mov	r1, r3
 80033d6:	4610      	mov	r0, r2
 80033d8:	f7fd fdd0 	bl	8000f7c <__aeabi_fdiv>
 80033dc:	4603      	mov	r3, r0
 80033de:	461a      	mov	r2, r3
 80033e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003414 <update_ahrs+0xcf8>)
 80033e2:	611a      	str	r2, [r3, #16]
	AHRS.yaw_rate   = -gz_/config.gyr_lsb;
 80033e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80033e8:	425b      	negs	r3, r3
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd fcbe 	bl	8000d6c <__aeabi_i2f>
 80033f0:	4602      	mov	r2, r0
 80033f2:	4b07      	ldr	r3, [pc, #28]	@ (8003410 <update_ahrs+0xcf4>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	4619      	mov	r1, r3
 80033f8:	4610      	mov	r0, r2
 80033fa:	f7fd fdbf 	bl	8000f7c <__aeabi_fdiv>
 80033fe:	4603      	mov	r3, r0
 8003400:	461a      	mov	r2, r3
 8003402:	4b04      	ldr	r3, [pc, #16]	@ (8003414 <update_ahrs+0xcf8>)
 8003404:	615a      	str	r2, [r3, #20]

}
 8003406:	bf00      	nop
 8003408:	3798      	adds	r7, #152	@ 0x98
 800340a:	46bd      	mov	sp, r7
 800340c:	bdb0      	pop	{r4, r5, r7, pc}
 800340e:	bf00      	nop
 8003410:	20000018 	.word	0x20000018
 8003414:	200004c8 	.word	0x200004c8

08003418 <sin_approx>:
#define sinPolyCoef5  8.333017292e-3f                                          // Double:  8.333017291562218127986291618761571373087e-3
#define sinPolyCoef7 -1.980661520e-4f                                          // Double: -1.980661520135080504411629636078917643846e-4
#define sinPolyCoef9  2.600054768e-6f                                          // Double:  2.600054767890361277123254766503271638682e-6
#endif
float sin_approx(float x)
{
 8003418:	b590      	push	{r4, r7, lr}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
    int32_t xint = x;
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7fd fed3 	bl	80011cc <__aeabi_f2iz>
 8003426:	4603      	mov	r3, r0
 8003428:	60fb      	str	r3, [r7, #12]
    if (xint < -32 || xint > 32) return 0.0f;                               // Stop here on error input (5 * 360 Deg)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f113 0f20 	cmn.w	r3, #32
 8003430:	db02      	blt.n	8003438 <sin_approx+0x20>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2b20      	cmp	r3, #32
 8003436:	dd08      	ble.n	800344a <sin_approx+0x32>
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	e074      	b.n	8003528 <sin_approx+0x110>
    while (x >  M_PIf) x -= (2.0f * M_PIf);                                 // always wrap input angle to -PI..PI
 800343e:	493c      	ldr	r1, [pc, #240]	@ (8003530 <sin_approx+0x118>)
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7fd fbdd 	bl	8000c00 <__aeabi_fsub>
 8003446:	4603      	mov	r3, r0
 8003448:	607b      	str	r3, [r7, #4]
 800344a:	493a      	ldr	r1, [pc, #232]	@ (8003534 <sin_approx+0x11c>)
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7fd fe9d 	bl	800118c <__aeabi_fcmpgt>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1f2      	bne.n	800343e <sin_approx+0x26>
    while (x < -M_PIf) x += (2.0f * M_PIf);
 8003458:	e005      	b.n	8003466 <sin_approx+0x4e>
 800345a:	4935      	ldr	r1, [pc, #212]	@ (8003530 <sin_approx+0x118>)
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7fd fbd1 	bl	8000c04 <__addsf3>
 8003462:	4603      	mov	r3, r0
 8003464:	607b      	str	r3, [r7, #4]
 8003466:	4934      	ldr	r1, [pc, #208]	@ (8003538 <sin_approx+0x120>)
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7fd fe71 	bl	8001150 <__aeabi_fcmplt>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1f2      	bne.n	800345a <sin_approx+0x42>
    if (x >  (0.5f * M_PIf)) x =  (0.5f * M_PIf) - (x - (0.5f * M_PIf));   // We just pick -90..+90 Degree
 8003474:	4931      	ldr	r1, [pc, #196]	@ (800353c <sin_approx+0x124>)
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fd fe88 	bl	800118c <__aeabi_fcmpgt>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00b      	beq.n	800349a <sin_approx+0x82>
 8003482:	492e      	ldr	r1, [pc, #184]	@ (800353c <sin_approx+0x124>)
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7fd fbbb 	bl	8000c00 <__aeabi_fsub>
 800348a:	4603      	mov	r3, r0
 800348c:	4619      	mov	r1, r3
 800348e:	482b      	ldr	r0, [pc, #172]	@ (800353c <sin_approx+0x124>)
 8003490:	f7fd fbb6 	bl	8000c00 <__aeabi_fsub>
 8003494:	4603      	mov	r3, r0
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	e011      	b.n	80034be <sin_approx+0xa6>
    else if (x < -(0.5f * M_PIf)) x = -(0.5f * M_PIf) - ((0.5f * M_PIf) + x);
 800349a:	4929      	ldr	r1, [pc, #164]	@ (8003540 <sin_approx+0x128>)
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7fd fe57 	bl	8001150 <__aeabi_fcmplt>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <sin_approx+0xa6>
 80034a8:	4924      	ldr	r1, [pc, #144]	@ (800353c <sin_approx+0x124>)
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fd fbaa 	bl	8000c04 <__addsf3>
 80034b0:	4603      	mov	r3, r0
 80034b2:	4619      	mov	r1, r3
 80034b4:	4822      	ldr	r0, [pc, #136]	@ (8003540 <sin_approx+0x128>)
 80034b6:	f7fd fba3 	bl	8000c00 <__aeabi_fsub>
 80034ba:	4603      	mov	r3, r0
 80034bc:	607b      	str	r3, [r7, #4]
    float x2 = x * x;
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7fd fca7 	bl	8000e14 <__aeabi_fmul>
 80034c6:	4603      	mov	r3, r0
 80034c8:	60bb      	str	r3, [r7, #8]
    return x + x * x2 * (sinPolyCoef3 + x2 * (sinPolyCoef5 + x2 * (sinPolyCoef7 + x2 * sinPolyCoef9)));
 80034ca:	68b9      	ldr	r1, [r7, #8]
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7fd fca1 	bl	8000e14 <__aeabi_fmul>
 80034d2:	4603      	mov	r3, r0
 80034d4:	461c      	mov	r4, r3
 80034d6:	f04f 0100 	mov.w	r1, #0
 80034da:	68b8      	ldr	r0, [r7, #8]
 80034dc:	f7fd fc9a 	bl	8000e14 <__aeabi_fmul>
 80034e0:	4603      	mov	r3, r0
 80034e2:	4918      	ldr	r1, [pc, #96]	@ (8003544 <sin_approx+0x12c>)
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fd fb8b 	bl	8000c00 <__aeabi_fsub>
 80034ea:	4603      	mov	r3, r0
 80034ec:	68b9      	ldr	r1, [r7, #8]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fd fc90 	bl	8000e14 <__aeabi_fmul>
 80034f4:	4603      	mov	r3, r0
 80034f6:	4914      	ldr	r1, [pc, #80]	@ (8003548 <sin_approx+0x130>)
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fd fb83 	bl	8000c04 <__addsf3>
 80034fe:	4603      	mov	r3, r0
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	4618      	mov	r0, r3
 8003504:	f7fd fc86 	bl	8000e14 <__aeabi_fmul>
 8003508:	4603      	mov	r3, r0
 800350a:	4910      	ldr	r1, [pc, #64]	@ (800354c <sin_approx+0x134>)
 800350c:	4618      	mov	r0, r3
 800350e:	f7fd fb77 	bl	8000c00 <__aeabi_fsub>
 8003512:	4603      	mov	r3, r0
 8003514:	4619      	mov	r1, r3
 8003516:	4620      	mov	r0, r4
 8003518:	f7fd fc7c 	bl	8000e14 <__aeabi_fmul>
 800351c:	4603      	mov	r3, r0
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	4618      	mov	r0, r3
 8003522:	f7fd fb6f 	bl	8000c04 <__addsf3>
 8003526:	4603      	mov	r3, r0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	bd90      	pop	{r4, r7, pc}
 8003530:	40c90fdb 	.word	0x40c90fdb
 8003534:	40490fdb 	.word	0x40490fdb
 8003538:	c0490fdb 	.word	0xc0490fdb
 800353c:	3fc90fdb 	.word	0x3fc90fdb
 8003540:	bfc90fdb 	.word	0xbfc90fdb
 8003544:	3941e792 	.word	0x3941e792
 8003548:	3c083097 	.word	0x3c083097
 800354c:	3e2aa815 	.word	0x3e2aa815

08003550 <atan2_approx>:
// Initial implementation by Crashpilot1000 (https://github.com/Crashpilot1000/HarakiriWebstore1/blob/396715f73c6fcf859e0db0f34e12fe44bace6483/src/mw.c#L1292)
// Polynomial coefficients by Andor (http://www.dsprelated.com/showthread/comp.dsp/21872-1.php) optimized by Ledvinap to save one multiplication
// Max absolute error 0,000027 degree
// atan2_approx maximum absolute error = 7.152557e-07 rads (4.098114e-05 degree)
float atan2_approx(float y, float x)
{
 8003550:	b590      	push	{r4, r7, lr}
 8003552:	b08b      	sub	sp, #44	@ 0x2c
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003560:	623b      	str	r3, [r7, #32]
    absY = fabsf(y);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003568:	61fb      	str	r3, [r7, #28]
    res  = MAX(absX, absY);
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	61bb      	str	r3, [r7, #24]
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	6979      	ldr	r1, [r7, #20]
 8003574:	69b8      	ldr	r0, [r7, #24]
 8003576:	f7fd fe09 	bl	800118c <__aeabi_fcmpgt>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <atan2_approx+0x34>
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	e000      	b.n	8003586 <atan2_approx+0x36>
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	627b      	str	r3, [r7, #36]	@ 0x24
    if (res) res = MIN(absX, absY) / res;
 8003588:	f04f 0100 	mov.w	r1, #0
 800358c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800358e:	f7fd fdd5 	bl	800113c <__aeabi_fcmpeq>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d114      	bne.n	80035c2 <atan2_approx+0x72>
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	68f9      	ldr	r1, [r7, #12]
 80035a2:	6938      	ldr	r0, [r7, #16]
 80035a4:	f7fd fdd4 	bl	8001150 <__aeabi_fcmplt>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <atan2_approx+0x62>
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	e000      	b.n	80035b4 <atan2_approx+0x64>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fd fce0 	bl	8000f7c <__aeabi_fdiv>
 80035bc:	4603      	mov	r3, r0
 80035be:	627b      	str	r3, [r7, #36]	@ 0x24
 80035c0:	e002      	b.n	80035c8 <atan2_approx+0x78>
    else res = 0.0f;
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	627b      	str	r3, [r7, #36]	@ 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 80035c8:	4938      	ldr	r1, [pc, #224]	@ (80036ac <atan2_approx+0x15c>)
 80035ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035cc:	f7fd fc22 	bl	8000e14 <__aeabi_fmul>
 80035d0:	4603      	mov	r3, r0
 80035d2:	4937      	ldr	r1, [pc, #220]	@ (80036b0 <atan2_approx+0x160>)
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fd fb13 	bl	8000c00 <__aeabi_fsub>
 80035da:	4603      	mov	r3, r0
 80035dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fd fc18 	bl	8000e14 <__aeabi_fmul>
 80035e4:	4603      	mov	r3, r0
 80035e6:	4933      	ldr	r1, [pc, #204]	@ (80036b4 <atan2_approx+0x164>)
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fd fb09 	bl	8000c00 <__aeabi_fsub>
 80035ee:	4603      	mov	r3, r0
 80035f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fd fc0e 	bl	8000e14 <__aeabi_fmul>
 80035f8:	4603      	mov	r3, r0
 80035fa:	492f      	ldr	r1, [pc, #188]	@ (80036b8 <atan2_approx+0x168>)
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fd faff 	bl	8000c00 <__aeabi_fsub>
 8003602:	4603      	mov	r3, r0
 8003604:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003606:	4618      	mov	r0, r3
 8003608:	f7fd fc04 	bl	8000e14 <__aeabi_fmul>
 800360c:	4603      	mov	r3, r0
 800360e:	492b      	ldr	r1, [pc, #172]	@ (80036bc <atan2_approx+0x16c>)
 8003610:	4618      	mov	r0, r3
 8003612:	f7fd faf5 	bl	8000c00 <__aeabi_fsub>
 8003616:	4603      	mov	r3, r0
 8003618:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 800361c:	4928      	ldr	r1, [pc, #160]	@ (80036c0 <atan2_approx+0x170>)
 800361e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003620:	f7fd fbf8 	bl	8000e14 <__aeabi_fmul>
 8003624:	4603      	mov	r3, r0
 8003626:	4927      	ldr	r1, [pc, #156]	@ (80036c4 <atan2_approx+0x174>)
 8003628:	4618      	mov	r0, r3
 800362a:	f7fd faeb 	bl	8000c04 <__addsf3>
 800362e:	4603      	mov	r3, r0
 8003630:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003632:	4618      	mov	r0, r3
 8003634:	f7fd fbee 	bl	8000e14 <__aeabi_fmul>
 8003638:	4603      	mov	r3, r0
 800363a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800363e:	4618      	mov	r0, r3
 8003640:	f7fd fae0 	bl	8000c04 <__addsf3>
 8003644:	4603      	mov	r3, r0
 8003646:	4619      	mov	r1, r3
 8003648:	4620      	mov	r0, r4
 800364a:	f7fd fc97 	bl	8000f7c <__aeabi_fdiv>
 800364e:	4603      	mov	r3, r0
 8003650:	627b      	str	r3, [r7, #36]	@ 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 8003652:	6a39      	ldr	r1, [r7, #32]
 8003654:	69f8      	ldr	r0, [r7, #28]
 8003656:	f7fd fd99 	bl	800118c <__aeabi_fcmpgt>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <atan2_approx+0x11c>
 8003660:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003662:	4819      	ldr	r0, [pc, #100]	@ (80036c8 <atan2_approx+0x178>)
 8003664:	f7fd facc 	bl	8000c00 <__aeabi_fsub>
 8003668:	4603      	mov	r3, r0
 800366a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (x < 0) res = M_PIf - res;
 800366c:	f04f 0100 	mov.w	r1, #0
 8003670:	6838      	ldr	r0, [r7, #0]
 8003672:	f7fd fd6d 	bl	8001150 <__aeabi_fcmplt>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <atan2_approx+0x138>
 800367c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800367e:	4813      	ldr	r0, [pc, #76]	@ (80036cc <atan2_approx+0x17c>)
 8003680:	f7fd fabe 	bl	8000c00 <__aeabi_fsub>
 8003684:	4603      	mov	r3, r0
 8003686:	627b      	str	r3, [r7, #36]	@ 0x24
    if (y < 0) res = -res;
 8003688:	f04f 0100 	mov.w	r1, #0
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7fd fd5f 	bl	8001150 <__aeabi_fcmplt>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <atan2_approx+0x150>
 8003698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800369e:	627b      	str	r3, [r7, #36]	@ 0x24
    return res;
 80036a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	372c      	adds	r7, #44	@ 0x2c
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd90      	pop	{r4, r7, pc}
 80036aa:	bf00      	nop
 80036ac:	3d4e0939 	.word	0x3d4e0939
 80036b0:	3e9eb5e3 	.word	0x3e9eb5e3
 80036b4:	3e16fa88 	.word	0x3e16fa88
 80036b8:	3f7ffe45 	.word	0x3f7ffe45
 80036bc:	34a8dfa7 	.word	0x34a8dfa7
 80036c0:	3f24fb99 	.word	0x3f24fb99
 80036c4:	3e16a269 	.word	0x3e16a269
 80036c8:	3fc90fdb 	.word	0x3fc90fdb
 80036cc:	40490fdb 	.word	0x40490fdb

080036d0 <invSqrt_>:
    return (num << 12) / den;
}


float invSqrt_(float x)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 80036d8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7fd fb99 	bl	8000e14 <__aeabi_fmul>
 80036e2:	4603      	mov	r3, r0
 80036e4:	617b      	str	r3, [r7, #20]
	float y = x;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80036ea:	f107 0310 	add.w	r3, r7, #16
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	105a      	asrs	r2, r3, #1
 80036f6:	4b13      	ldr	r3, [pc, #76]	@ (8003744 <invSqrt_+0x74>)
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80036fc:	f107 030c 	add.w	r3, r7, #12
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	6979      	ldr	r1, [r7, #20]
 8003708:	4618      	mov	r0, r3
 800370a:	f7fd fb83 	bl	8000e14 <__aeabi_fmul>
 800370e:	4603      	mov	r3, r0
 8003710:	461a      	mov	r2, r3
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	4619      	mov	r1, r3
 8003716:	4610      	mov	r0, r2
 8003718:	f7fd fb7c 	bl	8000e14 <__aeabi_fmul>
 800371c:	4603      	mov	r3, r0
 800371e:	4619      	mov	r1, r3
 8003720:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 8003724:	f7fd fa6c 	bl	8000c00 <__aeabi_fsub>
 8003728:	4603      	mov	r3, r0
 800372a:	461a      	mov	r2, r3
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4619      	mov	r1, r3
 8003730:	4610      	mov	r0, r2
 8003732:	f7fd fb6f 	bl	8000e14 <__aeabi_fmul>
 8003736:	4603      	mov	r3, r0
 8003738:	613b      	str	r3, [r7, #16]
	//y = y * (1.5f - (halfx * y * y));
	return y;
 800373a:	693b      	ldr	r3, [r7, #16]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	5f3759df 	.word	0x5f3759df

08003748 <constrainf>:
    else
        return amt;
}

static inline float constrainf(float amt, float low, float high)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8003754:	68b9      	ldr	r1, [r7, #8]
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f7fd fcfa 	bl	8001150 <__aeabi_fcmplt>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <constrainf+0x1e>
        return low;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	e009      	b.n	800377a <constrainf+0x32>
    else if (amt > high)
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f7fd fd0f 	bl	800118c <__aeabi_fcmpgt>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <constrainf+0x30>
        return high;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	e000      	b.n	800377a <constrainf+0x32>
    else
        return amt;
 8003778:	68fb      	ldr	r3, [r7, #12]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <pid_init>:
#include "string.h"

#define usTosec(x)    (x *(1e-06f))
#define MAX_WAIT_TIME 500000

void pid_init(pid_t  *pid_in,float kp, float ki, float kd, float f_cut_D, float maxI){
 8003782:	b580      	push	{r7, lr}
 8003784:	b084      	sub	sp, #16
 8003786:	af00      	add	r7, sp, #0
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	607a      	str	r2, [r7, #4]
 800378e:	603b      	str	r3, [r7, #0]
  memset(pid_in,0,sizeof(pid_t));
 8003790:	2224      	movs	r2, #36	@ 0x24
 8003792:	2100      	movs	r1, #0
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f00f fbbb 	bl	8012f10 <memset>
  pid_in->kp = kp;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	601a      	str	r2, [r3, #0]
  pid_in->ki = ki;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	605a      	str	r2, [r3, #4]
  pid_in->kd = kd;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	609a      	str	r2, [r3, #8]
  pid_in->f_cut_D = f_cut_D;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	61da      	str	r2, [r3, #28]
  pid_in->I_range = maxI;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	619a      	str	r2, [r3, #24]
  pid_in->last_input = 0;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	611a      	str	r2, [r3, #16]
  pid_in->D_filted = 0;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	615a      	str	r2, [r3, #20]
  pid_in->init = 1;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2020 	strb.w	r2, [r3, #32]
}
 80037d0:	bf00      	nop
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <pid_calculate>:

float pid_calculate(pid_t *pid_in,float input, float setpoint,float dt){
 80037d8:	b590      	push	{r4, r7, lr}
 80037da:	b08b      	sub	sp, #44	@ 0x2c
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
 80037e4:	603b      	str	r3, [r7, #0]
   if(pid_in->init){
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d009      	beq.n	8003804 <pid_calculate+0x2c>
       pid_in->last_input = input;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	611a      	str	r2, [r3, #16]
       pid_in->init = 0;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2020 	strb.w	r2, [r3, #32]
       return 0.0f;
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	e09e      	b.n	8003942 <pid_calculate+0x16a>
   }

   float error = setpoint - input;
 8003804:	68b9      	ldr	r1, [r7, #8]
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7fd f9fa 	bl	8000c00 <__aeabi_fsub>
 800380c:	4603      	mov	r3, r0
 800380e:	623b      	str	r3, [r7, #32]
   float output = error*pid_in->kp;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4619      	mov	r1, r3
 8003816:	6a38      	ldr	r0, [r7, #32]
 8003818:	f7fd fafc 	bl	8000e14 <__aeabi_fmul>
 800381c:	4603      	mov	r3, r0
 800381e:	627b      	str	r3, [r7, #36]	@ 0x24

   if(pid_in->ki > 0){
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f04f 0100 	mov.w	r1, #0
 8003828:	4618      	mov	r0, r3
 800382a:	f7fd fcaf 	bl	800118c <__aeabi_fcmpgt>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d02b      	beq.n	800388c <pid_calculate+0xb4>
      pid_in->i_term += error *pid_in->ki *dt;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	68dc      	ldr	r4, [r3, #12]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	6a39      	ldr	r1, [r7, #32]
 800383e:	4618      	mov	r0, r3
 8003840:	f7fd fae8 	bl	8000e14 <__aeabi_fmul>
 8003844:	4603      	mov	r3, r0
 8003846:	6839      	ldr	r1, [r7, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f7fd fae3 	bl	8000e14 <__aeabi_fmul>
 800384e:	4603      	mov	r3, r0
 8003850:	4619      	mov	r1, r3
 8003852:	4620      	mov	r0, r4
 8003854:	f7fd f9d6 	bl	8000c04 <__addsf3>
 8003858:	4603      	mov	r3, r0
 800385a:	461a      	mov	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	60da      	str	r2, [r3, #12]
      pid_in->i_term = constrainf(pid_in->i_term,-pid_in->I_range,pid_in->I_range);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	68d8      	ldr	r0, [r3, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	461a      	mov	r2, r3
 8003872:	f7ff ff69 	bl	8003748 <constrainf>
 8003876:	4602      	mov	r2, r0
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	60da      	str	r2, [r3, #12]
      output += pid_in->i_term;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4619      	mov	r1, r3
 8003882:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003884:	f7fd f9be 	bl	8000c04 <__addsf3>
 8003888:	4603      	mov	r3, r0
 800388a:	627b      	str	r3, [r7, #36]	@ 0x24
   }
   if(pid_in->kd > 0){
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f04f 0100 	mov.w	r1, #0
 8003894:	4618      	mov	r0, r3
 8003896:	f7fd fc79 	bl	800118c <__aeabi_fcmpgt>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d04f      	beq.n	8003940 <pid_calculate+0x168>
        // low pass filter
        float RC = 1.0f / (2 *M_PIf *pid_in->f_cut_D);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	4929      	ldr	r1, [pc, #164]	@ (800394c <pid_calculate+0x174>)
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fd fab4 	bl	8000e14 <__aeabi_fmul>
 80038ac:	4603      	mov	r3, r0
 80038ae:	4619      	mov	r1, r3
 80038b0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80038b4:	f7fd fb62 	bl	8000f7c <__aeabi_fdiv>
 80038b8:	4603      	mov	r3, r0
 80038ba:	61fb      	str	r3, [r7, #28]
        float gain_lpf = dt/(RC + dt);
 80038bc:	6839      	ldr	r1, [r7, #0]
 80038be:	69f8      	ldr	r0, [r7, #28]
 80038c0:	f7fd f9a0 	bl	8000c04 <__addsf3>
 80038c4:	4603      	mov	r3, r0
 80038c6:	4619      	mov	r1, r3
 80038c8:	6838      	ldr	r0, [r7, #0]
 80038ca:	f7fd fb57 	bl	8000f7c <__aeabi_fdiv>
 80038ce:	4603      	mov	r3, r0
 80038d0:	61bb      	str	r3, [r7, #24]
        float delta =  (input - pid_in->last_input)*pid_in->kd;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	4619      	mov	r1, r3
 80038d8:	68b8      	ldr	r0, [r7, #8]
 80038da:	f7fd f991 	bl	8000c00 <__aeabi_fsub>
 80038de:	4603      	mov	r3, r0
 80038e0:	461a      	mov	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	4619      	mov	r1, r3
 80038e8:	4610      	mov	r0, r2
 80038ea:	f7fd fa93 	bl	8000e14 <__aeabi_fmul>
 80038ee:	4603      	mov	r3, r0
 80038f0:	617b      	str	r3, [r7, #20]
        pid_in->last_input = input;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	611a      	str	r2, [r3, #16]
        delta /= dt;
 80038f8:	6839      	ldr	r1, [r7, #0]
 80038fa:	6978      	ldr	r0, [r7, #20]
 80038fc:	f7fd fb3e 	bl	8000f7c <__aeabi_fdiv>
 8003900:	4603      	mov	r3, r0
 8003902:	617b      	str	r3, [r7, #20]
        pid_in->D_filted += gain_lpf*(delta - pid_in->D_filted);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	695c      	ldr	r4, [r3, #20]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	4619      	mov	r1, r3
 800390e:	6978      	ldr	r0, [r7, #20]
 8003910:	f7fd f976 	bl	8000c00 <__aeabi_fsub>
 8003914:	4603      	mov	r3, r0
 8003916:	69b9      	ldr	r1, [r7, #24]
 8003918:	4618      	mov	r0, r3
 800391a:	f7fd fa7b 	bl	8000e14 <__aeabi_fmul>
 800391e:	4603      	mov	r3, r0
 8003920:	4619      	mov	r1, r3
 8003922:	4620      	mov	r0, r4
 8003924:	f7fd f96e 	bl	8000c04 <__addsf3>
 8003928:	4603      	mov	r3, r0
 800392a:	461a      	mov	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	615a      	str	r2, [r3, #20]
        output -= pid_in->D_filted;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	4619      	mov	r1, r3
 8003936:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003938:	f7fd f962 	bl	8000c00 <__aeabi_fsub>
 800393c:	4603      	mov	r3, r0
 800393e:	627b      	str	r3, [r7, #36]	@ 0x24
   }
   return output;
 8003940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003942:	4618      	mov	r0, r3
 8003944:	372c      	adds	r7, #44	@ 0x2c
 8003946:	46bd      	mov	sp, r7
 8003948:	bd90      	pop	{r4, r7, pc}
 800394a:	bf00      	nop
 800394c:	40c90fdb 	.word	0x40c90fdb

08003950 <constrain>:
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
    if (amt < low)
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	429a      	cmp	r2, r3
 8003962:	da01      	bge.n	8003968 <constrain+0x18>
        return low;
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	e006      	b.n	8003976 <constrain+0x26>
    else if (amt > high)
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	429a      	cmp	r2, r3
 800396e:	dd01      	ble.n	8003974 <constrain+0x24>
        return high;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	e000      	b.n	8003976 <constrain+0x26>
        return amt;
 8003974:	68fb      	ldr	r3, [r7, #12]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	bc80      	pop	{r7}
 800397e:	4770      	bx	lr

08003980 <initPWM>:
uint8_t pwm_lock_status;

/*
 * init pwm 
 */
void initPWM(TIM_HandleTypeDef *htim){
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
	htimm = htim;
 8003988:	4a1c      	ldr	r2, [pc, #112]	@ (80039fc <initPWM+0x7c>)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6013      	str	r3, [r2, #0]
	pr_status = 1;
 800398e:	4b1c      	ldr	r3, [pc, #112]	@ (8003a00 <initPWM+0x80>)
 8003990:	2201      	movs	r2, #1
 8003992:	701a      	strb	r2, [r3, #0]
	pwm_lock_status = 0;
 8003994:	4b1b      	ldr	r3, [pc, #108]	@ (8003a04 <initPWM+0x84>)
 8003996:	2200      	movs	r2, #0
 8003998:	701a      	strb	r2, [r3, #0]
	pwm_last_update_ms= 0;
 800399a:	4b1b      	ldr	r3, [pc, #108]	@ (8003a08 <initPWM+0x88>)
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(htim,ch1);
 80039a0:	2100      	movs	r1, #0
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f006 fdfa 	bl	800a59c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch2);
 80039a8:	2104      	movs	r1, #4
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f006 fdf6 	bl	800a59c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch3);
 80039b0:	2108      	movs	r1, #8
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f006 fdf2 	bl	800a59c <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(htim,ch4);
	__HAL_TIM_SetAutoreload(htimm,PWM_RELOAD_AFFTER);
 80039b8:	4b10      	ldr	r3, [pc, #64]	@ (80039fc <initPWM+0x7c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f242 7210 	movw	r2, #10000	@ 0x2710
 80039c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80039c4:	4b0d      	ldr	r3, [pc, #52]	@ (80039fc <initPWM+0x7c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80039cc:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SetCompare (htimm,ch1,1000);
 80039ce:	4b0b      	ldr	r3, [pc, #44]	@ (80039fc <initPWM+0x7c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80039d8:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SetCompare (htimm,ch2,1500);
 80039da:	4b08      	ldr	r3, [pc, #32]	@ (80039fc <initPWM+0x7c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80039e4:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SetCompare (htimm,ch3,1500);
 80039e6:	4b05      	ldr	r3, [pc, #20]	@ (80039fc <initPWM+0x7c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80039f0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20000534 	.word	0x20000534
 8003a00:	2000053c 	.word	0x2000053c
 8003a04:	2000053d 	.word	0x2000053d
 8003a08:	20000538 	.word	0x20000538

08003a0c <writePwm>:


void writePwm(uint32_t Channel,int16_t dulty,int8_t invert)
{     if( invert){
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	807b      	strh	r3, [r7, #2]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	707b      	strb	r3, [r7, #1]
 8003a1c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d009      	beq.n	8003a38 <writePwm+0x2c>
	    dulty -= 1000;
 8003a24:	887b      	ldrh	r3, [r7, #2]
 8003a26:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	807b      	strh	r3, [r7, #2]
	    dulty  = 2000 - dulty; 
 8003a2e:	887b      	ldrh	r3, [r7, #2]
 8003a30:	f5c3 63fa 	rsb	r3, r3, #2000	@ 0x7d0
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	807b      	strh	r3, [r7, #2]
      }
	  dulty = constrain(dulty,1000,2000);
 8003a38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a3c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003a40:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff ff83 	bl	8003950 <constrain>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d106      	bne.n	8003a62 <writePwm+0x56>
 8003a54:	4b12      	ldr	r3, [pc, #72]	@ (8003aa0 <writePwm+0x94>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003a5e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003a60:	e019      	b.n	8003a96 <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d106      	bne.n	8003a76 <writePwm+0x6a>
 8003a68:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa0 <writePwm+0x94>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a72:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003a74:	e00f      	b.n	8003a96 <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d106      	bne.n	8003a8a <writePwm+0x7e>
 8003a7c:	4b08      	ldr	r3, [pc, #32]	@ (8003aa0 <writePwm+0x94>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a86:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003a88:	e005      	b.n	8003a96 <writePwm+0x8a>
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
 8003a8a:	4b05      	ldr	r3, [pc, #20]	@ (8003aa0 <writePwm+0x94>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a94:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20000534 	.word	0x20000534

08003aa4 <write_pwm_ctrl>:

void write_pwm_ctrl(uint16_t throtlle,uint16_t servoL,uint16_t servoR){
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	80fb      	strh	r3, [r7, #6]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	80bb      	strh	r3, [r7, #4]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	807b      	strh	r3, [r7, #2]
      if(pr_status || pwm_lock_status){
 8003ab6:	4b17      	ldr	r3, [pc, #92]	@ (8003b14 <write_pwm_ctrl+0x70>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d103      	bne.n	8003ac6 <write_pwm_ctrl+0x22>
 8003abe:	4b16      	ldr	r3, [pc, #88]	@ (8003b18 <write_pwm_ctrl+0x74>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d008      	beq.n	8003ad8 <write_pwm_ctrl+0x34>
           pwm_last_update_ms = HAL_GetTick();
 8003ac6:	f002 fae9 	bl	800609c <HAL_GetTick>
 8003aca:	4603      	mov	r3, r0
 8003acc:	4a13      	ldr	r2, [pc, #76]	@ (8003b1c <write_pwm_ctrl+0x78>)
 8003ace:	6013      	str	r3, [r2, #0]
		   pr_status = 0;
 8003ad0:	4b10      	ldr	r3, [pc, #64]	@ (8003b14 <write_pwm_ctrl+0x70>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	701a      	strb	r2, [r3, #0]
		   return;
 8003ad6:	e019      	b.n	8003b0c <write_pwm_ctrl+0x68>
	  }
	 writePwm(TIM_CHANNEL_1,throtlle,INVERT);
 8003ad8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003adc:	2201      	movs	r2, #1
 8003ade:	4619      	mov	r1, r3
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	f7ff ff93 	bl	8003a0c <writePwm>
     writePwm(TIM_CHANNEL_2,servoL,INVERT);
 8003ae6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	4619      	mov	r1, r3
 8003aee:	2004      	movs	r0, #4
 8003af0:	f7ff ff8c 	bl	8003a0c <writePwm>
     writePwm(TIM_CHANNEL_3,servoR,NOT_INVERT);
 8003af4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003af8:	2200      	movs	r2, #0
 8003afa:	4619      	mov	r1, r3
 8003afc:	2008      	movs	r0, #8
 8003afe:	f7ff ff85 	bl	8003a0c <writePwm>
	pwm_last_update_ms = HAL_GetTick();
 8003b02:	f002 facb 	bl	800609c <HAL_GetTick>
 8003b06:	4603      	mov	r3, r0
 8003b08:	4a04      	ldr	r2, [pc, #16]	@ (8003b1c <write_pwm_ctrl+0x78>)
 8003b0a:	6013      	str	r3, [r2, #0]
}
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	2000053c 	.word	0x2000053c
 8003b18:	2000053d 	.word	0x2000053d
 8003b1c:	20000538 	.word	0x20000538

08003b20 <timer_start>:
  boottime.sec   = setoverFlow(sec_L,59);
  boottime.min   = setoverFlow((sec_L/60),59);
  boottime.hour  = setoverFlow((sec_L/3600),23);
}

void timer_start(TIM_HandleTypeDef *htimz){
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	htimmz = htimz;
 8003b28:	4a05      	ldr	r2, [pc, #20]	@ (8003b40 <timer_start+0x20>)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htimmz);
 8003b2e:	4b04      	ldr	r3, [pc, #16]	@ (8003b40 <timer_start+0x20>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f006 fc7a 	bl	800a42c <HAL_TIM_Base_Start_IT>
}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20000540 	.word	0x20000540

08003b44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b7c <MX_DMA_Init+0x38>)
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	4a0b      	ldr	r2, [pc, #44]	@ (8003b7c <MX_DMA_Init+0x38>)
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	6153      	str	r3, [r2, #20]
 8003b56:	4b09      	ldr	r3, [pc, #36]	@ (8003b7c <MX_DMA_Init+0x38>)
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	607b      	str	r3, [r7, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8003b62:	2200      	movs	r2, #0
 8003b64:	2105      	movs	r1, #5
 8003b66:	200e      	movs	r0, #14
 8003b68:	f002 fb7b 	bl	8006262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003b6c:	200e      	movs	r0, #14
 8003b6e:	f002 fb94 	bl	800629a <HAL_NVIC_EnableIRQ>

}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40021000 	.word	0x40021000

08003b80 <HAL_UART_RxCpltCallback>:
#include "../flight/plane.h"

// IQR function
//----------------------------------IQR--Handler-----------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
    if(huart == ibus_uart_port())
 8003b88:	f7fd fb8e 	bl	80012a8 <ibus_uart_port>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d102      	bne.n	8003b9a <HAL_UART_RxCpltCallback+0x1a>
	{
		ibus_calback();
 8003b94:	f7fd fb92 	bl	80012bc <ibus_calback>
    }
    else if(huart == gps_uart_port()){
        gps_callback();
    }
}
 8003b98:	e007      	b.n	8003baa <HAL_UART_RxCpltCallback+0x2a>
    else if(huart == gps_uart_port()){
 8003b9a:	f7fe fb23 	bl	80021e4 <gps_uart_port>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d101      	bne.n	8003baa <HAL_UART_RxCpltCallback+0x2a>
        gps_callback();
 8003ba6:	f7fe fb27 	bl	80021f8 <gps_callback>
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
    if(huart == &huart1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a04      	ldr	r2, [pc, #16]	@ (8003bd0 <HAL_UART_TxCpltCallback+0x1c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d101      	bne.n	8003bc8 <HAL_UART_TxCpltCallback+0x14>
	{
		mavlink_tx_cpl_callback();
 8003bc4:	f002 fa36 	bl	8006034 <mavlink_tx_cpl_callback>
    }
}
 8003bc8:	bf00      	nop
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	200009e8 	.word	0x200009e8

08003bd4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4a06      	ldr	r2, [pc, #24]	@ (8003bfc <vApplicationGetIdleTaskMemory+0x28>)
 8003be4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	4a05      	ldr	r2, [pc, #20]	@ (8003c00 <vApplicationGetIdleTaskMemory+0x2c>)
 8003bea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2280      	movs	r2, #128	@ 0x80
 8003bf0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003bf2:	bf00      	nop
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr
 8003bfc:	2000055c 	.word	0x2000055c
 8003c00:	200005b0 	.word	0x200005b0

08003c04 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003c04:	b5b0      	push	{r4, r5, r7, lr}
 8003c06:	b0a4      	sub	sp, #144	@ 0x90
 8003c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	 timer_start(&htim7);
 8003c0a:	4832      	ldr	r0, [pc, #200]	@ (8003cd4 <MX_FREERTOS_Init+0xd0>)
 8003c0c:	f7ff ff88 	bl	8003b20 <timer_start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task1 */
  osThreadDef(task1, ahrs_task, osPriorityHigh, 0, 128);
 8003c10:	4b31      	ldr	r3, [pc, #196]	@ (8003cd8 <MX_FREERTOS_Init+0xd4>)
 8003c12:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8003c16:	461d      	mov	r5, r3
 8003c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 8003c24:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003c28:	2100      	movs	r1, #0
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f00c fb9b 	bl	8010366 <osThreadCreate>
 8003c30:	4603      	mov	r3, r0
 8003c32:	4a2a      	ldr	r2, [pc, #168]	@ (8003cdc <MX_FREERTOS_Init+0xd8>)
 8003c34:	6013      	str	r3, [r2, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, blackbox, osPriorityLow, 0, 512);
 8003c36:	4b2a      	ldr	r3, [pc, #168]	@ (8003ce0 <MX_FREERTOS_Init+0xdc>)
 8003c38:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8003c3c:	461d      	mov	r5, r3
 8003c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 8003c4a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003c4e:	2100      	movs	r1, #0
 8003c50:	4618      	mov	r0, r3
 8003c52:	f00c fb88 	bl	8010366 <osThreadCreate>
 8003c56:	4603      	mov	r3, r0
 8003c58:	4a22      	ldr	r2, [pc, #136]	@ (8003ce4 <MX_FREERTOS_Init+0xe0>)
 8003c5a:	6013      	str	r3, [r2, #0]

  /* definition and creation of task3 */
  osThreadDef(task3, led_indicate, osPriorityLow, 0, 128);
 8003c5c:	4b22      	ldr	r3, [pc, #136]	@ (8003ce8 <MX_FREERTOS_Init+0xe4>)
 8003c5e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8003c62:	461d      	mov	r5, r3
 8003c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task3Handle = osThreadCreate(osThread(task3), NULL);
 8003c70:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003c74:	2100      	movs	r1, #0
 8003c76:	4618      	mov	r0, r3
 8003c78:	f00c fb75 	bl	8010366 <osThreadCreate>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003cec <MX_FREERTOS_Init+0xe8>)
 8003c80:	6013      	str	r3, [r2, #0]

  /* definition and creation of task4 */
  osThreadDef(task4, read_sensor, osPriorityRealtime, 0, 128);
 8003c82:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf0 <MX_FREERTOS_Init+0xec>)
 8003c84:	f107 0420 	add.w	r4, r7, #32
 8003c88:	461d      	mov	r5, r3
 8003c8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task4Handle = osThreadCreate(osThread(task4), NULL);
 8003c96:	f107 0320 	add.w	r3, r7, #32
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f00c fb62 	bl	8010366 <osThreadCreate>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	4a13      	ldr	r2, [pc, #76]	@ (8003cf4 <MX_FREERTOS_Init+0xf0>)
 8003ca6:	6013      	str	r3, [r2, #0]

  /* definition and creation of task5 */
  osThreadDef(task5, mavlinkOSD, osPriorityNormal, 0, 128);
 8003ca8:	4b13      	ldr	r3, [pc, #76]	@ (8003cf8 <MX_FREERTOS_Init+0xf4>)
 8003caa:	1d3c      	adds	r4, r7, #4
 8003cac:	461d      	mov	r5, r3
 8003cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cb2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003cb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task5Handle = osThreadCreate(osThread(task5), NULL);
 8003cba:	1d3b      	adds	r3, r7, #4
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f00c fb51 	bl	8010366 <osThreadCreate>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	4a0d      	ldr	r2, [pc, #52]	@ (8003cfc <MX_FREERTOS_Init+0xf8>)
 8003cc8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8003cca:	bf00      	nop
 8003ccc:	3790      	adds	r7, #144	@ 0x90
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	200009a0 	.word	0x200009a0
 8003cd8:	080132f8 	.word	0x080132f8
 8003cdc:	20000548 	.word	0x20000548
 8003ce0:	0801331c 	.word	0x0801331c
 8003ce4:	2000054c 	.word	0x2000054c
 8003ce8:	08013340 	.word	0x08013340
 8003cec:	20000550 	.word	0x20000550
 8003cf0:	08013364 	.word	0x08013364
 8003cf4:	20000554 	.word	0x20000554
 8003cf8:	08013388 	.word	0x08013388
 8003cfc:	20000558 	.word	0x20000558

08003d00 <ahrs_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ahrs_task */
void ahrs_task(void const * argument)
{
 8003d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d04:	b08c      	sub	sp, #48	@ 0x30
 8003d06:	af06      	add	r7, sp, #24
 8003d08:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ahrs_task */
	ibus_init(&huart2);
 8003d0a:	483f      	ldr	r0, [pc, #252]	@ (8003e08 <ahrs_task+0x108>)
 8003d0c:	f7fd faa4 	bl	8001258 <ibus_init>
	gps_init(&huart3,57600);
 8003d10:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8003d14:	483d      	ldr	r0, [pc, #244]	@ (8003e0c <ahrs_task+0x10c>)
 8003d16:	f7fe f9f9 	bl	800210c <gps_init>
	attitude_ctrl_init();
 8003d1a:	f001 fc1b 	bl	8005554 <attitude_ctrl_init>
	initPWM(&htim3);
 8003d1e:	483c      	ldr	r0, [pc, #240]	@ (8003e10 <ahrs_task+0x110>)
 8003d20:	f7ff fe2e 	bl	8003980 <initPWM>
	//ms5611_init(&hi2c2);
	last_call = micros();
 8003d24:	4b3b      	ldr	r3, [pc, #236]	@ (8003e14 <ahrs_task+0x114>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d2c:	4b3a      	ldr	r3, [pc, #232]	@ (8003e18 <ahrs_task+0x118>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4413      	add	r3, r2
 8003d32:	4a3a      	ldr	r2, [pc, #232]	@ (8003e1c <ahrs_task+0x11c>)
 8003d34:	6013      	str	r3, [r2, #0]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10; // 100 hz loop
 8003d36:	230a      	movs	r3, #10
 8003d38:	613b      	str	r3, [r7, #16]
	xLastWakeTime = xTaskGetTickCount();
 8003d3a:	f00d feb9 	bl	8011ab0 <xTaskGetTickCount>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4); // for debug

    float dt = (micros() - last_call)*(1e-6f);
 8003d42:	4b34      	ldr	r3, [pc, #208]	@ (8003e14 <ahrs_task+0x114>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d4a:	4b33      	ldr	r3, [pc, #204]	@ (8003e18 <ahrs_task+0x118>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	441a      	add	r2, r3
 8003d50:	4b32      	ldr	r3, [pc, #200]	@ (8003e1c <ahrs_task+0x11c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fd f804 	bl	8000d64 <__aeabi_ui2f>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	4930      	ldr	r1, [pc, #192]	@ (8003e20 <ahrs_task+0x120>)
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fd f857 	bl	8000e14 <__aeabi_fmul>
 8003d66:	4603      	mov	r3, r0
 8003d68:	617b      	str	r3, [r7, #20]
    last_call = micros();
 8003d6a:	4b2a      	ldr	r3, [pc, #168]	@ (8003e14 <ahrs_task+0x114>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d72:	4b29      	ldr	r3, [pc, #164]	@ (8003e18 <ahrs_task+0x118>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4413      	add	r3, r2
 8003d78:	4a28      	ldr	r2, [pc, #160]	@ (8003e1c <ahrs_task+0x11c>)
 8003d7a:	6013      	str	r3, [r2, #0]
    if(dt < 0)
 8003d7c:	f04f 0100 	mov.w	r1, #0
 8003d80:	6978      	ldr	r0, [r7, #20]
 8003d82:	f7fd f9e5 	bl	8001150 <__aeabi_fcmplt>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <ahrs_task+0x92>
		dt = 0;
 8003d8c:	f04f 0300 	mov.w	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
	//timer_calculate_boottime();
    //ms5611_start();
    ibusFrameComplete();
 8003d92:	f7fd faef 	bl	8001374 <ibusFrameComplete>
    update_ahrs(gyro_imu[0],gyro_imu[1],gyro_imu[2],acc_imu[0],acc_imu[1],acc_imu[2],mag_raw[0],mag_raw[1],mag_raw[2],dt);
 8003d96:	4b23      	ldr	r3, [pc, #140]	@ (8003e24 <ahrs_task+0x124>)
 8003d98:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003d9c:	4b21      	ldr	r3, [pc, #132]	@ (8003e24 <ahrs_task+0x124>)
 8003d9e:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 8003da2:	4b20      	ldr	r3, [pc, #128]	@ (8003e24 <ahrs_task+0x124>)
 8003da4:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 8003da8:	4b1f      	ldr	r3, [pc, #124]	@ (8003e28 <ahrs_task+0x128>)
 8003daa:	f9b3 8000 	ldrsh.w	r8, [r3]
 8003dae:	4b1e      	ldr	r3, [pc, #120]	@ (8003e28 <ahrs_task+0x128>)
 8003db0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003db4:	4a1c      	ldr	r2, [pc, #112]	@ (8003e28 <ahrs_task+0x128>)
 8003db6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8003dba:	491c      	ldr	r1, [pc, #112]	@ (8003e2c <ahrs_task+0x12c>)
 8003dbc:	f9b1 1000 	ldrsh.w	r1, [r1]
 8003dc0:	481a      	ldr	r0, [pc, #104]	@ (8003e2c <ahrs_task+0x12c>)
 8003dc2:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8003dc6:	4c19      	ldr	r4, [pc, #100]	@ (8003e2c <ahrs_task+0x12c>)
 8003dc8:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
 8003dcc:	697d      	ldr	r5, [r7, #20]
 8003dce:	9505      	str	r5, [sp, #20]
 8003dd0:	9404      	str	r4, [sp, #16]
 8003dd2:	9003      	str	r0, [sp, #12]
 8003dd4:	9102      	str	r1, [sp, #8]
 8003dd6:	9201      	str	r2, [sp, #4]
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	4643      	mov	r3, r8
 8003ddc:	4672      	mov	r2, lr
 8003dde:	4661      	mov	r1, ip
 8003de0:	4630      	mov	r0, r6
 8003de2:	f7fe fc9b 	bl	800271c <update_ahrs>
    //attitude_ctrl(dt);
	rate_stabilize(dt);
 8003de6:	6978      	ldr	r0, [r7, #20]
 8003de8:	f001 fc2a 	bl	8005640 <rate_stabilize>
    }else{
    	 vTaskResume(task2Handle);
    }
 */
    //vTaskSuspend(NULL);
    vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8003dec:	f107 030c 	add.w	r3, r7, #12
 8003df0:	6939      	ldr	r1, [r7, #16]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f00d fc04 	bl	8011600 <vTaskDelayUntil>
    stack_task_ahrs = uxTaskGetStackHighWaterMark( NULL );
 8003df8:	2000      	movs	r0, #0
 8003dfa:	f00e f933 	bl	8012064 <uxTaskGetStackHighWaterMark>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	4b0b      	ldr	r3, [pc, #44]	@ (8003e30 <ahrs_task+0x130>)
 8003e04:	801a      	strh	r2, [r3, #0]
  {
 8003e06:	e79c      	b.n	8003d42 <ahrs_task+0x42>
 8003e08:	20000a30 	.word	0x20000a30
 8003e0c:	20000a78 	.word	0x20000a78
 8003e10:	20000958 	.word	0x20000958
 8003e14:	20000540 	.word	0x20000540
 8003e18:	20000544 	.word	0x20000544
 8003e1c:	200007d4 	.word	0x200007d4
 8003e20:	358637bd 	.word	0x358637bd
 8003e24:	200007bc 	.word	0x200007bc
 8003e28:	200007c4 	.word	0x200007c4
 8003e2c:	200007cc 	.word	0x200007cc
 8003e30:	200007b0 	.word	0x200007b0

08003e34 <blackbox>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blackbox */
void blackbox(void const * argument)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blackbox */

	vTaskSuspend(NULL);
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	f00d fc95 	bl	801176c <vTaskSuspend>
	black_box_init();
 8003e42:	f7fd fcb1 	bl	80017a8 <black_box_init>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50;  // 25 ms
 8003e46:	2332      	movs	r3, #50	@ 0x32
 8003e48:	617b      	str	r3, [r7, #20]
	xLastWakeTime = xTaskGetTickCount();
 8003e4a:	f00d fe31 	bl	8011ab0 <xTaskGetTickCount>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	uint32_t current_time = micros();
 8003e52:	4b66      	ldr	r3, [pc, #408]	@ (8003fec <blackbox+0x1b8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e5a:	4b65      	ldr	r3, [pc, #404]	@ (8003ff0 <blackbox+0x1bc>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4413      	add	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
    if(black_box_reset){
 8003e62:	4b64      	ldr	r3, [pc, #400]	@ (8003ff4 <blackbox+0x1c0>)
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d005      	beq.n	8003e76 <blackbox+0x42>
    	black_box_pack_str("----new data-----\n");
 8003e6a:	4863      	ldr	r0, [pc, #396]	@ (8003ff8 <blackbox+0x1c4>)
 8003e6c:	f7fd fd5c 	bl	8001928 <black_box_pack_str>
    	black_box_reset = FALSE;
 8003e70:	4b60      	ldr	r3, [pc, #384]	@ (8003ff4 <blackbox+0x1c0>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	701a      	strb	r2, [r3, #0]
    }
	black_box_pack_int((int)AHRS.roll*100);
 8003e76:	4b61      	ldr	r3, [pc, #388]	@ (8003ffc <blackbox+0x1c8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fd f9a6 	bl	80011cc <__aeabi_f2iz>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2264      	movs	r2, #100	@ 0x64
 8003e84:	fb02 f303 	mul.w	r3, r2, r3
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fd fcb5 	bl	80017f8 <black_box_pack_int>
	black_box_pack_char(' ');
 8003e8e:	2020      	movs	r0, #32
 8003e90:	f7fd fd82 	bl	8001998 <black_box_pack_char>
	black_box_pack_int((int)roll_desired*100);
 8003e94:	4b5a      	ldr	r3, [pc, #360]	@ (8004000 <blackbox+0x1cc>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fd f997 	bl	80011cc <__aeabi_f2iz>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2264      	movs	r2, #100	@ 0x64
 8003ea2:	fb02 f303 	mul.w	r3, r2, r3
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fd fca6 	bl	80017f8 <black_box_pack_int>
	black_box_pack_char(' ');
 8003eac:	2020      	movs	r0, #32
 8003eae:	f7fd fd73 	bl	8001998 <black_box_pack_char>
	black_box_pack_int((int)AHRS.pitch*100);
 8003eb2:	4b52      	ldr	r3, [pc, #328]	@ (8003ffc <blackbox+0x1c8>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fd f988 	bl	80011cc <__aeabi_f2iz>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2264      	movs	r2, #100	@ 0x64
 8003ec0:	fb02 f303 	mul.w	r3, r2, r3
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7fd fc97 	bl	80017f8 <black_box_pack_int>
	black_box_pack_char(' ');
 8003eca:	2020      	movs	r0, #32
 8003ecc:	f7fd fd64 	bl	8001998 <black_box_pack_char>
	black_box_pack_int((int)pitch_desired*100);
 8003ed0:	4b4c      	ldr	r3, [pc, #304]	@ (8004004 <blackbox+0x1d0>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fd f979 	bl	80011cc <__aeabi_f2iz>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2264      	movs	r2, #100	@ 0x64
 8003ede:	fb02 f303 	mul.w	r3, r2, r3
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fd fc88 	bl	80017f8 <black_box_pack_int>
	black_box_pack_char(' ');
 8003ee8:	2020      	movs	r0, #32
 8003eea:	f7fd fd55 	bl	8001998 <black_box_pack_char>
	black_box_pack_int((int)pitch_desired*100);
 8003eee:	4b45      	ldr	r3, [pc, #276]	@ (8004004 <blackbox+0x1d0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fd f96a 	bl	80011cc <__aeabi_f2iz>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2264      	movs	r2, #100	@ 0x64
 8003efc:	fb02 f303 	mul.w	r3, r2, r3
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fd fc79 	bl	80017f8 <black_box_pack_int>
	black_box_pack_char(' ');
 8003f06:	2020      	movs	r0, #32
 8003f08:	f7fd fd46 	bl	8001998 <black_box_pack_char>
	black_box_pack_int((int)pitch_desired*100);
 8003f0c:	4b3d      	ldr	r3, [pc, #244]	@ (8004004 <blackbox+0x1d0>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fd f95b 	bl	80011cc <__aeabi_f2iz>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2264      	movs	r2, #100	@ 0x64
 8003f1a:	fb02 f303 	mul.w	r3, r2, r3
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fd fc6a 	bl	80017f8 <black_box_pack_int>
	black_box_pack_char(' ');
 8003f24:	2020      	movs	r0, #32
 8003f26:	f7fd fd37 	bl	8001998 <black_box_pack_char>
	black_box_pack_int((int)pitch_desired*100);
 8003f2a:	4b36      	ldr	r3, [pc, #216]	@ (8004004 <blackbox+0x1d0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fd f94c 	bl	80011cc <__aeabi_f2iz>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2264      	movs	r2, #100	@ 0x64
 8003f38:	fb02 f303 	mul.w	r3, r2, r3
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fd fc5b 	bl	80017f8 <black_box_pack_int>
	black_box_pack_char(' ');
 8003f42:	2020      	movs	r0, #32
 8003f44:	f7fd fd28 	bl	8001998 <black_box_pack_char>
	black_box_pack_int((int)pitch_desired*100);
 8003f48:	4b2e      	ldr	r3, [pc, #184]	@ (8004004 <blackbox+0x1d0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fd f93d 	bl	80011cc <__aeabi_f2iz>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2264      	movs	r2, #100	@ 0x64
 8003f56:	fb02 f303 	mul.w	r3, r2, r3
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fd fc4c 	bl	80017f8 <black_box_pack_int>
	black_box_pack_char(' ');
 8003f60:	2020      	movs	r0, #32
 8003f62:	f7fd fd19 	bl	8001998 <black_box_pack_char>
	black_box_pack_int((int)pitch_desired*100);
 8003f66:	4b27      	ldr	r3, [pc, #156]	@ (8004004 <blackbox+0x1d0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fd f92e 	bl	80011cc <__aeabi_f2iz>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2264      	movs	r2, #100	@ 0x64
 8003f74:	fb02 f303 	mul.w	r3, r2, r3
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fd fc3d 	bl	80017f8 <black_box_pack_int>
	black_box_pack_char(' ');
 8003f7e:	2020      	movs	r0, #32
 8003f80:	f7fd fd0a 	bl	8001998 <black_box_pack_char>
	black_box_pack_int((int)(ab_speed_filted*10));
 8003f84:	4b20      	ldr	r3, [pc, #128]	@ (8004008 <blackbox+0x1d4>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4920      	ldr	r1, [pc, #128]	@ (800400c <blackbox+0x1d8>)
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fc ff42 	bl	8000e14 <__aeabi_fmul>
 8003f90:	4603      	mov	r3, r0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fd f91a 	bl	80011cc <__aeabi_f2iz>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fd fc2c 	bl	80017f8 <black_box_pack_int>
	black_box_pack_char('\n');
 8003fa0:	200a      	movs	r0, #10
 8003fa2:	f7fd fcf9 	bl	8001998 <black_box_pack_char>
	black_box_load();
 8003fa6:	f7fd fd11 	bl	80019cc <black_box_load>

	write_time = micros() - current_time;
 8003faa:	4b10      	ldr	r3, [pc, #64]	@ (8003fec <blackbox+0x1b8>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8003ff0 <blackbox+0x1bc>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	441a      	add	r2, r3
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	4a14      	ldr	r2, [pc, #80]	@ (8004010 <blackbox+0x1dc>)
 8003fbe:	6013      	str	r3, [r2, #0]
	if(write_time > 10){
 8003fc0:	4b13      	ldr	r3, [pc, #76]	@ (8004010 <blackbox+0x1dc>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b0a      	cmp	r3, #10
 8003fc6:	d903      	bls.n	8003fd0 <blackbox+0x19c>
	   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003fc8:	2120      	movs	r1, #32
 8003fca:	4812      	ldr	r0, [pc, #72]	@ (8004014 <blackbox+0x1e0>)
 8003fcc:	f002 ffbb 	bl	8006f46 <HAL_GPIO_TogglePin>
	}

	vTaskDelayUntil( &xLastWakeTime, xFrequency);
 8003fd0:	f107 030c 	add.w	r3, r7, #12
 8003fd4:	6979      	ldr	r1, [r7, #20]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f00d fb12 	bl	8011600 <vTaskDelayUntil>
    stack_task_blackbox = uxTaskGetStackHighWaterMark( NULL );
 8003fdc:	2000      	movs	r0, #0
 8003fde:	f00e f841 	bl	8012064 <uxTaskGetStackHighWaterMark>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8004018 <blackbox+0x1e4>)
 8003fe8:	801a      	strh	r2, [r3, #0]
  {
 8003fea:	e732      	b.n	8003e52 <blackbox+0x1e>
 8003fec:	20000540 	.word	0x20000540
 8003ff0:	20000544 	.word	0x20000544
 8003ff4:	200007d8 	.word	0x200007d8
 8003ff8:	080133a4 	.word	0x080133a4
 8003ffc:	200004c8 	.word	0x200004c8
 8004000:	20000b04 	.word	0x20000b04
 8004004:	20000b08 	.word	0x20000b08
 8004008:	20000be8 	.word	0x20000be8
 800400c:	41200000 	.word	0x41200000
 8004010:	200007dc 	.word	0x200007dc
 8004014:	40010800 	.word	0x40010800
 8004018:	200007b8 	.word	0x200007b8

0800401c <led_indicate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_indicate */
void led_indicate(void const * argument)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
	}
	*/
	if(_gps.fix > 1){
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	}
	stack_task_led = uxTaskGetStackHighWaterMark( NULL );
 8004024:	2000      	movs	r0, #0
 8004026:	f00e f81d 	bl	8012064 <uxTaskGetStackHighWaterMark>
 800402a:	4603      	mov	r3, r0
 800402c:	b29a      	uxth	r2, r3
 800402e:	4b05      	ldr	r3, [pc, #20]	@ (8004044 <led_indicate+0x28>)
 8004030:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8004032:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004036:	4804      	ldr	r0, [pc, #16]	@ (8004048 <led_indicate+0x2c>)
 8004038:	f002 ff85 	bl	8006f46 <HAL_GPIO_TogglePin>
    osDelay(100);
 800403c:	2064      	movs	r0, #100	@ 0x64
 800403e:	f00c f9de 	bl	80103fe <osDelay>
	if(_gps.fix > 1){
 8004042:	e7ef      	b.n	8004024 <led_indicate+0x8>
 8004044:	200007b2 	.word	0x200007b2
 8004048:	40011000 	.word	0x40011000
 800404c:	00000000 	.word	0x00000000

08004050 <read_sensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_sensor */
void read_sensor(void const * argument)
{
 8004050:	b5b0      	push	{r4, r5, r7, lr}
 8004052:	b08e      	sub	sp, #56	@ 0x38
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN read_sensor */
  /* Infinite loop */
	int16_t gyso_offset[3] = {0,0,0};
 8004058:	2300      	movs	r3, #0
 800405a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800405c:	2300      	movs	r3, #0
 800405e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004060:	2300      	movs	r3, #0
 8004062:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	axis3_t raw;
	uint8_t sample_count = 0;
 8004064:	2300      	movs	r3, #0
 8004066:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	int32_t gyro_add[3] = {0,0,0};
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	2300      	movs	r3, #0
 8004070:	61bb      	str	r3, [r7, #24]
 8004072:	2300      	movs	r3, #0
 8004074:	61fb      	str	r3, [r7, #28]
	uint8_t first_loop = 1;
 8004076:	2301      	movs	r3, #1
 8004078:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	compassInit();
 800407c:	f7fd fd40 	bl	8001b00 <compassInit>
	mpu6050_init(&hi2c2);
 8004080:	488f      	ldr	r0, [pc, #572]	@ (80042c0 <read_sensor+0x270>)
 8004082:	f7fd fa5d 	bl	8001540 <mpu6050_init>
	HAL_Delay(2000);
 8004086:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800408a:	f002 f811 	bl	80060b0 <HAL_Delay>
	imu_calibrate(&gyso_offset[0],&gyso_offset[1],&gyso_offset[2]);
 800408e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004092:	1d1a      	adds	r2, r3, #4
 8004094:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004098:	1c99      	adds	r1, r3, #2
 800409a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fe fad4 	bl	800264c <imu_calibrate>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 2;
 80040a4:	2302      	movs	r3, #2
 80040a6:	633b      	str	r3, [r7, #48]	@ 0x30
	xLastWakeTime = xTaskGetTickCount();
 80040a8:	f00d fd02 	bl	8011ab0 <xTaskGetTickCount>
 80040ac:	4603      	mov	r3, r0
 80040ae:	613b      	str	r3, [r7, #16]

	for(;;)
	{
		mpu6050_gyro_get_raw(&raw);
 80040b0:	f107 0320 	add.w	r3, r7, #32
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fd fa95 	bl	80015e4 <mpu6050_gyro_get_raw>
		gyro_add[0] += (raw.x - gyso_offset[0]);
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80040c0:	4619      	mov	r1, r3
 80040c2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80040c6:	1acb      	subs	r3, r1, r3
 80040c8:	4413      	add	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]
		gyro_add[1] += (raw.y - gyso_offset[1]);
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80040d2:	4619      	mov	r1, r3
 80040d4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80040d8:	1acb      	subs	r3, r1, r3
 80040da:	4413      	add	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
		gyro_add[2] += (raw.z - gyso_offset[2]);
 80040de:	69fa      	ldr	r2, [r7, #28]
 80040e0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80040e4:	4619      	mov	r1, r3
 80040e6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80040ea:	1acb      	subs	r3, r1, r3
 80040ec:	4413      	add	r3, r2
 80040ee:	61fb      	str	r3, [r7, #28]
		sample_count ++;
 80040f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80040f4:	3301      	adds	r3, #1
 80040f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if(sample_count >= 5){
 80040fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d937      	bls.n	8004172 <read_sensor+0x122>
		   axis3_t mag;
		   compass_get(&mag);
 8004102:	f107 0308 	add.w	r3, r7, #8
 8004106:	4618      	mov	r0, r3
 8004108:	f7fd fd36 	bl	8001b78 <compass_get>
		   mag_raw[0] = mag.x;
 800410c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004110:	4b6c      	ldr	r3, [pc, #432]	@ (80042c4 <read_sensor+0x274>)
 8004112:	801a      	strh	r2, [r3, #0]
		   mag_raw[1] = mag.y;
 8004114:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004118:	4b6a      	ldr	r3, [pc, #424]	@ (80042c4 <read_sensor+0x274>)
 800411a:	805a      	strh	r2, [r3, #2]
		   mag_raw[2] = mag.z;
 800411c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004120:	4b68      	ldr	r3, [pc, #416]	@ (80042c4 <read_sensor+0x274>)
 8004122:	809a      	strh	r2, [r3, #4]

		   gyro_imu[0] = (int16_t)(gyro_add[0]/5);
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	4a68      	ldr	r2, [pc, #416]	@ (80042c8 <read_sensor+0x278>)
 8004128:	fb82 1203 	smull	r1, r2, r2, r3
 800412c:	1052      	asrs	r2, r2, #1
 800412e:	17db      	asrs	r3, r3, #31
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	b21a      	sxth	r2, r3
 8004134:	4b65      	ldr	r3, [pc, #404]	@ (80042cc <read_sensor+0x27c>)
 8004136:	801a      	strh	r2, [r3, #0]
		   gyro_imu[1] = (int16_t)(gyro_add[1]/5);
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	4a63      	ldr	r2, [pc, #396]	@ (80042c8 <read_sensor+0x278>)
 800413c:	fb82 1203 	smull	r1, r2, r2, r3
 8004140:	1052      	asrs	r2, r2, #1
 8004142:	17db      	asrs	r3, r3, #31
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	b21a      	sxth	r2, r3
 8004148:	4b60      	ldr	r3, [pc, #384]	@ (80042cc <read_sensor+0x27c>)
 800414a:	805a      	strh	r2, [r3, #2]
		   gyro_imu[2] = (int16_t)(gyro_add[2]/5);
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	4a5e      	ldr	r2, [pc, #376]	@ (80042c8 <read_sensor+0x278>)
 8004150:	fb82 1203 	smull	r1, r2, r2, r3
 8004154:	1052      	asrs	r2, r2, #1
 8004156:	17db      	asrs	r3, r3, #31
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	b21a      	sxth	r2, r3
 800415c:	4b5b      	ldr	r3, [pc, #364]	@ (80042cc <read_sensor+0x27c>)
 800415e:	809a      	strh	r2, [r3, #4]
		   gyro_add[0] = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]
		   gyro_add[1] = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	61bb      	str	r3, [r7, #24]
		   gyro_add[2] = 0;
 8004168:	2300      	movs	r3, #0
 800416a:	61fb      	str	r3, [r7, #28]
		   sample_count = 0;
 800416c:	2300      	movs	r3, #0
 800416e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		   //vTaskResume(task1Handle);
		}

		raw.x = 0;
 8004172:	2300      	movs	r3, #0
 8004174:	843b      	strh	r3, [r7, #32]
		raw.y = 0;
 8004176:	2300      	movs	r3, #0
 8004178:	847b      	strh	r3, [r7, #34]	@ 0x22
		raw.z = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	84bb      	strh	r3, [r7, #36]	@ 0x24

		mpu6050_acc_get_raw(&raw);
 800417e:	f107 0320 	add.w	r3, r7, #32
 8004182:	4618      	mov	r0, r3
 8004184:	f7fd fa6a 	bl	800165c <mpu6050_acc_get_raw>
		if(first_loop){
 8004188:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00e      	beq.n	80041ae <read_sensor+0x15e>
			acc_imu[0] = raw.x;
 8004190:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004194:	4b4e      	ldr	r3, [pc, #312]	@ (80042d0 <read_sensor+0x280>)
 8004196:	801a      	strh	r2, [r3, #0]
			acc_imu[1] = raw.y;
 8004198:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 800419c:	4b4c      	ldr	r3, [pc, #304]	@ (80042d0 <read_sensor+0x280>)
 800419e:	805a      	strh	r2, [r3, #2]
			acc_imu[2] = raw.z;
 80041a0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80041a4:	4b4a      	ldr	r3, [pc, #296]	@ (80042d0 <read_sensor+0x280>)
 80041a6:	809a      	strh	r2, [r3, #4]
			first_loop = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		}
		// low pass filter
		acc_imu[0] += 0.1*(raw.x - acc_imu[0]);
 80041ae:	4b48      	ldr	r3, [pc, #288]	@ (80042d0 <read_sensor+0x280>)
 80041b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fc f98d 	bl	80004d4 <__aeabi_i2d>
 80041ba:	4604      	mov	r4, r0
 80041bc:	460d      	mov	r5, r1
 80041be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80041c2:	461a      	mov	r2, r3
 80041c4:	4b42      	ldr	r3, [pc, #264]	@ (80042d0 <read_sensor+0x280>)
 80041c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fc f981 	bl	80004d4 <__aeabi_i2d>
 80041d2:	a339      	add	r3, pc, #228	@ (adr r3, 80042b8 <read_sensor+0x268>)
 80041d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d8:	f7fc f9e6 	bl	80005a8 <__aeabi_dmul>
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	4620      	mov	r0, r4
 80041e2:	4629      	mov	r1, r5
 80041e4:	f7fc f82a 	bl	800023c <__adddf3>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4610      	mov	r0, r2
 80041ee:	4619      	mov	r1, r3
 80041f0:	f7fc fc8a 	bl	8000b08 <__aeabi_d2iz>
 80041f4:	4603      	mov	r3, r0
 80041f6:	b21a      	sxth	r2, r3
 80041f8:	4b35      	ldr	r3, [pc, #212]	@ (80042d0 <read_sensor+0x280>)
 80041fa:	801a      	strh	r2, [r3, #0]
		acc_imu[1] += 0.1*(raw.y - acc_imu[1]);
 80041fc:	4b34      	ldr	r3, [pc, #208]	@ (80042d0 <read_sensor+0x280>)
 80041fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004202:	4618      	mov	r0, r3
 8004204:	f7fc f966 	bl	80004d4 <__aeabi_i2d>
 8004208:	4604      	mov	r4, r0
 800420a:	460d      	mov	r5, r1
 800420c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8004210:	461a      	mov	r2, r3
 8004212:	4b2f      	ldr	r3, [pc, #188]	@ (80042d0 <read_sensor+0x280>)
 8004214:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	4618      	mov	r0, r3
 800421c:	f7fc f95a 	bl	80004d4 <__aeabi_i2d>
 8004220:	a325      	add	r3, pc, #148	@ (adr r3, 80042b8 <read_sensor+0x268>)
 8004222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004226:	f7fc f9bf 	bl	80005a8 <__aeabi_dmul>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	4620      	mov	r0, r4
 8004230:	4629      	mov	r1, r5
 8004232:	f7fc f803 	bl	800023c <__adddf3>
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	4610      	mov	r0, r2
 800423c:	4619      	mov	r1, r3
 800423e:	f7fc fc63 	bl	8000b08 <__aeabi_d2iz>
 8004242:	4603      	mov	r3, r0
 8004244:	b21a      	sxth	r2, r3
 8004246:	4b22      	ldr	r3, [pc, #136]	@ (80042d0 <read_sensor+0x280>)
 8004248:	805a      	strh	r2, [r3, #2]
		acc_imu[2] += 0.1*(raw.z - acc_imu[2]);
 800424a:	4b21      	ldr	r3, [pc, #132]	@ (80042d0 <read_sensor+0x280>)
 800424c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004250:	4618      	mov	r0, r3
 8004252:	f7fc f93f 	bl	80004d4 <__aeabi_i2d>
 8004256:	4604      	mov	r4, r0
 8004258:	460d      	mov	r5, r1
 800425a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800425e:	461a      	mov	r2, r3
 8004260:	4b1b      	ldr	r3, [pc, #108]	@ (80042d0 <read_sensor+0x280>)
 8004262:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	4618      	mov	r0, r3
 800426a:	f7fc f933 	bl	80004d4 <__aeabi_i2d>
 800426e:	a312      	add	r3, pc, #72	@ (adr r3, 80042b8 <read_sensor+0x268>)
 8004270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004274:	f7fc f998 	bl	80005a8 <__aeabi_dmul>
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	4620      	mov	r0, r4
 800427e:	4629      	mov	r1, r5
 8004280:	f7fb ffdc 	bl	800023c <__adddf3>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4610      	mov	r0, r2
 800428a:	4619      	mov	r1, r3
 800428c:	f7fc fc3c 	bl	8000b08 <__aeabi_d2iz>
 8004290:	4603      	mov	r3, r0
 8004292:	b21a      	sxth	r2, r3
 8004294:	4b0e      	ldr	r3, [pc, #56]	@ (80042d0 <read_sensor+0x280>)
 8004296:	809a      	strh	r2, [r3, #4]
	    stack_task_sensor = uxTaskGetStackHighWaterMark( NULL );
 8004298:	2000      	movs	r0, #0
 800429a:	f00d fee3 	bl	8012064 <uxTaskGetStackHighWaterMark>
 800429e:	4603      	mov	r3, r0
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	4b0c      	ldr	r3, [pc, #48]	@ (80042d4 <read_sensor+0x284>)
 80042a4:	801a      	strh	r2, [r3, #0]
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 80042a6:	f107 0310 	add.w	r3, r7, #16
 80042aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80042ac:	4618      	mov	r0, r3
 80042ae:	f00d f9a7 	bl	8011600 <vTaskDelayUntil>
		mpu6050_gyro_get_raw(&raw);
 80042b2:	e6fd      	b.n	80040b0 <read_sensor+0x60>
 80042b4:	f3af 8000 	nop.w
 80042b8:	9999999a 	.word	0x9999999a
 80042bc:	3fb99999 	.word	0x3fb99999
 80042c0:	20000834 	.word	0x20000834
 80042c4:	200007cc 	.word	0x200007cc
 80042c8:	66666667 	.word	0x66666667
 80042cc:	200007bc 	.word	0x200007bc
 80042d0:	200007c4 	.word	0x200007c4
 80042d4:	200007b4 	.word	0x200007b4

080042d8 <mavlinkOSD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_mavlinkOSD */
void mavlinkOSD(void const * argument)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN mavlinkOSD */
	mavlinkInit(1,1,&huart1,57600);
 80042e0:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 80042e4:	4a0f      	ldr	r2, [pc, #60]	@ (8004324 <mavlinkOSD+0x4c>)
 80042e6:	2101      	movs	r1, #1
 80042e8:	2001      	movs	r0, #1
 80042ea:	f001 fd51 	bl	8005d90 <mavlinkInit>
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50;  // 25 ms
 80042ee:	2332      	movs	r3, #50	@ 0x32
 80042f0:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 80042f2:	f00d fbdd 	bl	8011ab0 <xTaskGetTickCount>
 80042f6:	4603      	mov	r3, r0
 80042f8:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80042fa:	2110      	movs	r1, #16
 80042fc:	480a      	ldr	r0, [pc, #40]	@ (8004328 <mavlinkOSD+0x50>)
 80042fe:	f002 fe22 	bl	8006f46 <HAL_GPIO_TogglePin>
	mavlink_osd();
 8004302:	f001 fd7b 	bl	8005dfc <mavlink_osd>
	//mavlink_send_heartbeat();
	vTaskDelayUntil( &xLastWakeTime, xFrequency);
 8004306:	f107 0308 	add.w	r3, r7, #8
 800430a:	68f9      	ldr	r1, [r7, #12]
 800430c:	4618      	mov	r0, r3
 800430e:	f00d f977 	bl	8011600 <vTaskDelayUntil>
    stack_task_mavOSD = uxTaskGetStackHighWaterMark( NULL );
 8004312:	2000      	movs	r0, #0
 8004314:	f00d fea6 	bl	8012064 <uxTaskGetStackHighWaterMark>
 8004318:	4603      	mov	r3, r0
 800431a:	b29a      	uxth	r2, r3
 800431c:	4b03      	ldr	r3, [pc, #12]	@ (800432c <mavlinkOSD+0x54>)
 800431e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8004320:	bf00      	nop
 8004322:	e7ea      	b.n	80042fa <mavlinkOSD+0x22>
 8004324:	200009e8 	.word	0x200009e8
 8004328:	40010800 	.word	0x40010800
 800432c:	200007b6 	.word	0x200007b6

08004330 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b088      	sub	sp, #32
 8004334:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004336:	f107 0310 	add.w	r3, r7, #16
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	605a      	str	r2, [r3, #4]
 8004340:	609a      	str	r2, [r3, #8]
 8004342:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004344:	4b46      	ldr	r3, [pc, #280]	@ (8004460 <MX_GPIO_Init+0x130>)
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	4a45      	ldr	r2, [pc, #276]	@ (8004460 <MX_GPIO_Init+0x130>)
 800434a:	f043 0310 	orr.w	r3, r3, #16
 800434e:	6193      	str	r3, [r2, #24]
 8004350:	4b43      	ldr	r3, [pc, #268]	@ (8004460 <MX_GPIO_Init+0x130>)
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	f003 0310 	and.w	r3, r3, #16
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800435c:	4b40      	ldr	r3, [pc, #256]	@ (8004460 <MX_GPIO_Init+0x130>)
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	4a3f      	ldr	r2, [pc, #252]	@ (8004460 <MX_GPIO_Init+0x130>)
 8004362:	f043 0304 	orr.w	r3, r3, #4
 8004366:	6193      	str	r3, [r2, #24]
 8004368:	4b3d      	ldr	r3, [pc, #244]	@ (8004460 <MX_GPIO_Init+0x130>)
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	60bb      	str	r3, [r7, #8]
 8004372:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004374:	4b3a      	ldr	r3, [pc, #232]	@ (8004460 <MX_GPIO_Init+0x130>)
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	4a39      	ldr	r2, [pc, #228]	@ (8004460 <MX_GPIO_Init+0x130>)
 800437a:	f043 0308 	orr.w	r3, r3, #8
 800437e:	6193      	str	r3, [r2, #24]
 8004380:	4b37      	ldr	r3, [pc, #220]	@ (8004460 <MX_GPIO_Init+0x130>)
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	f003 0308 	and.w	r3, r3, #8
 8004388:	607b      	str	r3, [r7, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800438c:	4b34      	ldr	r3, [pc, #208]	@ (8004460 <MX_GPIO_Init+0x130>)
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	4a33      	ldr	r2, [pc, #204]	@ (8004460 <MX_GPIO_Init+0x130>)
 8004392:	f043 0320 	orr.w	r3, r3, #32
 8004396:	6193      	str	r3, [r2, #24]
 8004398:	4b31      	ldr	r3, [pc, #196]	@ (8004460 <MX_GPIO_Init+0x130>)
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	f003 0320 	and.w	r3, r3, #32
 80043a0:	603b      	str	r3, [r7, #0]
 80043a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80043a4:	2200      	movs	r2, #0
 80043a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80043aa:	482e      	ldr	r0, [pc, #184]	@ (8004464 <MX_GPIO_Init+0x134>)
 80043ac:	f002 fdb3 	bl	8006f16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80043b0:	2200      	movs	r2, #0
 80043b2:	2130      	movs	r1, #48	@ 0x30
 80043b4:	482c      	ldr	r0, [pc, #176]	@ (8004468 <MX_GPIO_Init+0x138>)
 80043b6:	f002 fdae 	bl	8006f16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80043ba:	2200      	movs	r2, #0
 80043bc:	21c0      	movs	r1, #192	@ 0xc0
 80043be:	482b      	ldr	r0, [pc, #172]	@ (800446c <MX_GPIO_Init+0x13c>)
 80043c0:	f002 fda9 	bl	8006f16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80043c4:	2200      	movs	r2, #0
 80043c6:	2118      	movs	r1, #24
 80043c8:	4829      	ldr	r0, [pc, #164]	@ (8004470 <MX_GPIO_Init+0x140>)
 80043ca:	f002 fda4 	bl	8006f16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80043ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80043d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043d4:	2301      	movs	r3, #1
 80043d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d8:	2300      	movs	r3, #0
 80043da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043dc:	2302      	movs	r3, #2
 80043de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043e0:	f107 0310 	add.w	r3, r7, #16
 80043e4:	4619      	mov	r1, r3
 80043e6:	481f      	ldr	r0, [pc, #124]	@ (8004464 <MX_GPIO_Init+0x134>)
 80043e8:	f002 fbea 	bl	8006bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80043ec:	2330      	movs	r3, #48	@ 0x30
 80043ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043f0:	2301      	movs	r3, #1
 80043f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f4:	2300      	movs	r3, #0
 80043f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043f8:	2302      	movs	r3, #2
 80043fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043fc:	f107 0310 	add.w	r3, r7, #16
 8004400:	4619      	mov	r1, r3
 8004402:	4819      	ldr	r0, [pc, #100]	@ (8004468 <MX_GPIO_Init+0x138>)
 8004404:	f002 fbdc 	bl	8006bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004408:	23c0      	movs	r3, #192	@ 0xc0
 800440a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800440c:	2301      	movs	r3, #1
 800440e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004410:	2300      	movs	r3, #0
 8004412:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004414:	2302      	movs	r3, #2
 8004416:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004418:	f107 0310 	add.w	r3, r7, #16
 800441c:	4619      	mov	r1, r3
 800441e:	4813      	ldr	r0, [pc, #76]	@ (800446c <MX_GPIO_Init+0x13c>)
 8004420:	f002 fbce 	bl	8006bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004424:	2318      	movs	r3, #24
 8004426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004428:	2301      	movs	r3, #1
 800442a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442c:	2300      	movs	r3, #0
 800442e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004430:	2302      	movs	r3, #2
 8004432:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004434:	f107 0310 	add.w	r3, r7, #16
 8004438:	4619      	mov	r1, r3
 800443a:	480d      	ldr	r0, [pc, #52]	@ (8004470 <MX_GPIO_Init+0x140>)
 800443c:	f002 fbc0 	bl	8006bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004440:	2320      	movs	r3, #32
 8004442:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004448:	2302      	movs	r3, #2
 800444a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800444c:	f107 0310 	add.w	r3, r7, #16
 8004450:	4619      	mov	r1, r3
 8004452:	4807      	ldr	r0, [pc, #28]	@ (8004470 <MX_GPIO_Init+0x140>)
 8004454:	f002 fbb4 	bl	8006bc0 <HAL_GPIO_Init>

}
 8004458:	bf00      	nop
 800445a:	3720      	adds	r7, #32
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40021000 	.word	0x40021000
 8004464:	40011000 	.word	0x40011000
 8004468:	40010800 	.word	0x40010800
 800446c:	40011400 	.word	0x40011400
 8004470:	40010c00 	.word	0x40010c00

08004474 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004478:	4b12      	ldr	r3, [pc, #72]	@ (80044c4 <MX_I2C1_Init+0x50>)
 800447a:	4a13      	ldr	r2, [pc, #76]	@ (80044c8 <MX_I2C1_Init+0x54>)
 800447c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800447e:	4b11      	ldr	r3, [pc, #68]	@ (80044c4 <MX_I2C1_Init+0x50>)
 8004480:	4a12      	ldr	r2, [pc, #72]	@ (80044cc <MX_I2C1_Init+0x58>)
 8004482:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004484:	4b0f      	ldr	r3, [pc, #60]	@ (80044c4 <MX_I2C1_Init+0x50>)
 8004486:	2200      	movs	r2, #0
 8004488:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800448a:	4b0e      	ldr	r3, [pc, #56]	@ (80044c4 <MX_I2C1_Init+0x50>)
 800448c:	2200      	movs	r2, #0
 800448e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004490:	4b0c      	ldr	r3, [pc, #48]	@ (80044c4 <MX_I2C1_Init+0x50>)
 8004492:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004496:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004498:	4b0a      	ldr	r3, [pc, #40]	@ (80044c4 <MX_I2C1_Init+0x50>)
 800449a:	2200      	movs	r2, #0
 800449c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800449e:	4b09      	ldr	r3, [pc, #36]	@ (80044c4 <MX_I2C1_Init+0x50>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80044a4:	4b07      	ldr	r3, [pc, #28]	@ (80044c4 <MX_I2C1_Init+0x50>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80044aa:	4b06      	ldr	r3, [pc, #24]	@ (80044c4 <MX_I2C1_Init+0x50>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80044b0:	4804      	ldr	r0, [pc, #16]	@ (80044c4 <MX_I2C1_Init+0x50>)
 80044b2:	f002 fd61 	bl	8006f78 <HAL_I2C_Init>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80044bc:	f000 f92a 	bl	8004714 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80044c0:	bf00      	nop
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	200007e0 	.word	0x200007e0
 80044c8:	40005400 	.word	0x40005400
 80044cc:	00061a80 	.word	0x00061a80

080044d0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80044d4:	4b12      	ldr	r3, [pc, #72]	@ (8004520 <MX_I2C2_Init+0x50>)
 80044d6:	4a13      	ldr	r2, [pc, #76]	@ (8004524 <MX_I2C2_Init+0x54>)
 80044d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80044da:	4b11      	ldr	r3, [pc, #68]	@ (8004520 <MX_I2C2_Init+0x50>)
 80044dc:	4a12      	ldr	r2, [pc, #72]	@ (8004528 <MX_I2C2_Init+0x58>)
 80044de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80044e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004520 <MX_I2C2_Init+0x50>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80044e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004520 <MX_I2C2_Init+0x50>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80044ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004520 <MX_I2C2_Init+0x50>)
 80044ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80044f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80044f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004520 <MX_I2C2_Init+0x50>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80044fa:	4b09      	ldr	r3, [pc, #36]	@ (8004520 <MX_I2C2_Init+0x50>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004500:	4b07      	ldr	r3, [pc, #28]	@ (8004520 <MX_I2C2_Init+0x50>)
 8004502:	2200      	movs	r2, #0
 8004504:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004506:	4b06      	ldr	r3, [pc, #24]	@ (8004520 <MX_I2C2_Init+0x50>)
 8004508:	2200      	movs	r2, #0
 800450a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800450c:	4804      	ldr	r0, [pc, #16]	@ (8004520 <MX_I2C2_Init+0x50>)
 800450e:	f002 fd33 	bl	8006f78 <HAL_I2C_Init>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004518:	f000 f8fc 	bl	8004714 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800451c:	bf00      	nop
 800451e:	bd80      	pop	{r7, pc}
 8004520:	20000834 	.word	0x20000834
 8004524:	40005800 	.word	0x40005800
 8004528:	00061a80 	.word	0x00061a80

0800452c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08a      	sub	sp, #40	@ 0x28
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004534:	f107 0318 	add.w	r3, r7, #24
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	605a      	str	r2, [r3, #4]
 800453e:	609a      	str	r2, [r3, #8]
 8004540:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a2b      	ldr	r2, [pc, #172]	@ (80045f4 <HAL_I2C_MspInit+0xc8>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d124      	bne.n	8004596 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800454c:	4b2a      	ldr	r3, [pc, #168]	@ (80045f8 <HAL_I2C_MspInit+0xcc>)
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	4a29      	ldr	r2, [pc, #164]	@ (80045f8 <HAL_I2C_MspInit+0xcc>)
 8004552:	f043 0308 	orr.w	r3, r3, #8
 8004556:	6193      	str	r3, [r2, #24]
 8004558:	4b27      	ldr	r3, [pc, #156]	@ (80045f8 <HAL_I2C_MspInit+0xcc>)
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	f003 0308 	and.w	r3, r3, #8
 8004560:	617b      	str	r3, [r7, #20]
 8004562:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004564:	23c0      	movs	r3, #192	@ 0xc0
 8004566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004568:	2312      	movs	r3, #18
 800456a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800456c:	2303      	movs	r3, #3
 800456e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004570:	f107 0318 	add.w	r3, r7, #24
 8004574:	4619      	mov	r1, r3
 8004576:	4821      	ldr	r0, [pc, #132]	@ (80045fc <HAL_I2C_MspInit+0xd0>)
 8004578:	f002 fb22 	bl	8006bc0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800457c:	4b1e      	ldr	r3, [pc, #120]	@ (80045f8 <HAL_I2C_MspInit+0xcc>)
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	4a1d      	ldr	r2, [pc, #116]	@ (80045f8 <HAL_I2C_MspInit+0xcc>)
 8004582:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004586:	61d3      	str	r3, [r2, #28]
 8004588:	4b1b      	ldr	r3, [pc, #108]	@ (80045f8 <HAL_I2C_MspInit+0xcc>)
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004590:	613b      	str	r3, [r7, #16]
 8004592:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004594:	e029      	b.n	80045ea <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a19      	ldr	r2, [pc, #100]	@ (8004600 <HAL_I2C_MspInit+0xd4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d124      	bne.n	80045ea <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045a0:	4b15      	ldr	r3, [pc, #84]	@ (80045f8 <HAL_I2C_MspInit+0xcc>)
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	4a14      	ldr	r2, [pc, #80]	@ (80045f8 <HAL_I2C_MspInit+0xcc>)
 80045a6:	f043 0308 	orr.w	r3, r3, #8
 80045aa:	6193      	str	r3, [r2, #24]
 80045ac:	4b12      	ldr	r3, [pc, #72]	@ (80045f8 <HAL_I2C_MspInit+0xcc>)
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	f003 0308 	and.w	r3, r3, #8
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80045b8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80045bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045be:	2312      	movs	r3, #18
 80045c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045c2:	2303      	movs	r3, #3
 80045c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045c6:	f107 0318 	add.w	r3, r7, #24
 80045ca:	4619      	mov	r1, r3
 80045cc:	480b      	ldr	r0, [pc, #44]	@ (80045fc <HAL_I2C_MspInit+0xd0>)
 80045ce:	f002 faf7 	bl	8006bc0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80045d2:	4b09      	ldr	r3, [pc, #36]	@ (80045f8 <HAL_I2C_MspInit+0xcc>)
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	4a08      	ldr	r2, [pc, #32]	@ (80045f8 <HAL_I2C_MspInit+0xcc>)
 80045d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80045dc:	61d3      	str	r3, [r2, #28]
 80045de:	4b06      	ldr	r3, [pc, #24]	@ (80045f8 <HAL_I2C_MspInit+0xcc>)
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045e6:	60bb      	str	r3, [r7, #8]
 80045e8:	68bb      	ldr	r3, [r7, #8]
}
 80045ea:	bf00      	nop
 80045ec:	3728      	adds	r7, #40	@ 0x28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40005400 	.word	0x40005400
 80045f8:	40021000 	.word	0x40021000
 80045fc:	40010c00 	.word	0x40010c00
 8004600:	40005800 	.word	0x40005800

08004604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004608:	f001 fd20 	bl	800604c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800460c:	f000 f81c 	bl	8004648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004610:	f7ff fe8e 	bl	8004330 <MX_GPIO_Init>
  MX_DMA_Init();
 8004614:	f7ff fa96 	bl	8003b44 <MX_DMA_Init>
  MX_I2C1_Init();
 8004618:	f7ff ff2c 	bl	8004474 <MX_I2C1_Init>
  MX_I2C2_Init();
 800461c:	f7ff ff58 	bl	80044d0 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8004620:	f000 f87e 	bl	8004720 <MX_SDIO_SD_Init>
  MX_TIM7_Init();
 8004624:	f000 fad4 	bl	8004bd0 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8004628:	f000 fb96 	bl	8004d58 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800462c:	f000 fbbe 	bl	8004dac <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8004630:	f000 fbe6 	bl	8004e00 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8004634:	f000 fa40 	bl	8004ab8 <MX_TIM3_Init>
  MX_FATFS_Init();
 8004638:	f008 fb56 	bl	800cce8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800463c:	f7ff fae2 	bl	8003c04 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004640:	f00b fe8a 	bl	8010358 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004644:	bf00      	nop
 8004646:	e7fd      	b.n	8004644 <main+0x40>

08004648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b090      	sub	sp, #64	@ 0x40
 800464c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800464e:	f107 0318 	add.w	r3, r7, #24
 8004652:	2228      	movs	r2, #40	@ 0x28
 8004654:	2100      	movs	r1, #0
 8004656:	4618      	mov	r0, r3
 8004658:	f00e fc5a 	bl	8012f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800465c:	1d3b      	adds	r3, r7, #4
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	605a      	str	r2, [r3, #4]
 8004664:	609a      	str	r2, [r3, #8]
 8004666:	60da      	str	r2, [r3, #12]
 8004668:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800466a:	2301      	movs	r3, #1
 800466c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800466e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004672:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004674:	2300      	movs	r3, #0
 8004676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004678:	2301      	movs	r3, #1
 800467a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800467c:	2302      	movs	r3, #2
 800467e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004680:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004684:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004686:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800468a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800468c:	f107 0318 	add.w	r3, r7, #24
 8004690:	4618      	mov	r0, r3
 8004692:	f004 fab3 	bl	8008bfc <HAL_RCC_OscConfig>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800469c:	f000 f83a 	bl	8004714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80046a0:	230f      	movs	r3, #15
 80046a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80046a4:	2302      	movs	r3, #2
 80046a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80046a8:	2300      	movs	r3, #0
 80046aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80046ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80046b6:	1d3b      	adds	r3, r7, #4
 80046b8:	2102      	movs	r1, #2
 80046ba:	4618      	mov	r0, r3
 80046bc:	f004 fd20 	bl	8009100 <HAL_RCC_ClockConfig>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80046c6:	f000 f825 	bl	8004714 <Error_Handler>
  }
}
 80046ca:	bf00      	nop
 80046cc:	3740      	adds	r7, #64	@ 0x40
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046e4:	d102      	bne.n	80046ec <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80046e6:	f001 fcc7 	bl	8006078 <HAL_IncTick>
  else if(htim->Instance == TIM7){
	  TIMER_CALLBACK();
  }

  /* USER CODE END Callback 1 */
}
 80046ea:	e00b      	b.n	8004704 <HAL_TIM_PeriodElapsedCallback+0x30>
  else if(htim->Instance == TIM7){
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a06      	ldr	r2, [pc, #24]	@ (800470c <HAL_TIM_PeriodElapsedCallback+0x38>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d106      	bne.n	8004704 <HAL_TIM_PeriodElapsedCallback+0x30>
	  TIMER_CALLBACK();
 80046f6:	4b06      	ldr	r3, [pc, #24]	@ (8004710 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80046fe:	33ff      	adds	r3, #255	@ 0xff
 8004700:	4a03      	ldr	r2, [pc, #12]	@ (8004710 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8004702:	6013      	str	r3, [r2, #0]
}
 8004704:	bf00      	nop
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40001400 	.word	0x40001400
 8004710:	20000544 	.word	0x20000544

08004714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004718:	b672      	cpsid	i
}
 800471a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800471c:	bf00      	nop
 800471e:	e7fd      	b.n	800471c <Error_Handler+0x8>

08004720 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004724:	4b0d      	ldr	r3, [pc, #52]	@ (800475c <MX_SDIO_SD_Init+0x3c>)
 8004726:	4a0e      	ldr	r2, [pc, #56]	@ (8004760 <MX_SDIO_SD_Init+0x40>)
 8004728:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800472a:	4b0c      	ldr	r3, [pc, #48]	@ (800475c <MX_SDIO_SD_Init+0x3c>)
 800472c:	2200      	movs	r2, #0
 800472e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004730:	4b0a      	ldr	r3, [pc, #40]	@ (800475c <MX_SDIO_SD_Init+0x3c>)
 8004732:	2200      	movs	r2, #0
 8004734:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004736:	4b09      	ldr	r3, [pc, #36]	@ (800475c <MX_SDIO_SD_Init+0x3c>)
 8004738:	2200      	movs	r2, #0
 800473a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800473c:	4b07      	ldr	r3, [pc, #28]	@ (800475c <MX_SDIO_SD_Init+0x3c>)
 800473e:	2200      	movs	r2, #0
 8004740:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004742:	4b06      	ldr	r3, [pc, #24]	@ (800475c <MX_SDIO_SD_Init+0x3c>)
 8004744:	2200      	movs	r2, #0
 8004746:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 255;
 8004748:	4b04      	ldr	r3, [pc, #16]	@ (800475c <MX_SDIO_SD_Init+0x3c>)
 800474a:	22ff      	movs	r2, #255	@ 0xff
 800474c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.ClockDiv = 100;
 800474e:	4b03      	ldr	r3, [pc, #12]	@ (800475c <MX_SDIO_SD_Init+0x3c>)
 8004750:	2264      	movs	r2, #100	@ 0x64
 8004752:	619a      	str	r2, [r3, #24]
  /* USER CODE END SDIO_Init 2 */

}
 8004754:	bf00      	nop
 8004756:	46bd      	mov	sp, r7
 8004758:	bc80      	pop	{r7}
 800475a:	4770      	bx	lr
 800475c:	20000888 	.word	0x20000888
 8004760:	40018000 	.word	0x40018000

08004764 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08a      	sub	sp, #40	@ 0x28
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800476c:	f107 0318 	add.w	r3, r7, #24
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	605a      	str	r2, [r3, #4]
 8004776:	609a      	str	r2, [r3, #8]
 8004778:	60da      	str	r2, [r3, #12]
  if(sdHandle->Instance==SDIO)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a22      	ldr	r2, [pc, #136]	@ (8004808 <HAL_SD_MspInit+0xa4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d13c      	bne.n	80047fe <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004784:	4b21      	ldr	r3, [pc, #132]	@ (800480c <HAL_SD_MspInit+0xa8>)
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	4a20      	ldr	r2, [pc, #128]	@ (800480c <HAL_SD_MspInit+0xa8>)
 800478a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800478e:	6153      	str	r3, [r2, #20]
 8004790:	4b1e      	ldr	r3, [pc, #120]	@ (800480c <HAL_SD_MspInit+0xa8>)
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800479c:	4b1b      	ldr	r3, [pc, #108]	@ (800480c <HAL_SD_MspInit+0xa8>)
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	4a1a      	ldr	r2, [pc, #104]	@ (800480c <HAL_SD_MspInit+0xa8>)
 80047a2:	f043 0310 	orr.w	r3, r3, #16
 80047a6:	6193      	str	r3, [r2, #24]
 80047a8:	4b18      	ldr	r3, [pc, #96]	@ (800480c <HAL_SD_MspInit+0xa8>)
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	f003 0310 	and.w	r3, r3, #16
 80047b0:	613b      	str	r3, [r7, #16]
 80047b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80047b4:	4b15      	ldr	r3, [pc, #84]	@ (800480c <HAL_SD_MspInit+0xa8>)
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	4a14      	ldr	r2, [pc, #80]	@ (800480c <HAL_SD_MspInit+0xa8>)
 80047ba:	f043 0320 	orr.w	r3, r3, #32
 80047be:	6193      	str	r3, [r2, #24]
 80047c0:	4b12      	ldr	r3, [pc, #72]	@ (800480c <HAL_SD_MspInit+0xa8>)
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80047cc:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 80047d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d2:	2302      	movs	r3, #2
 80047d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047d6:	2303      	movs	r3, #3
 80047d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047da:	f107 0318 	add.w	r3, r7, #24
 80047de:	4619      	mov	r1, r3
 80047e0:	480b      	ldr	r0, [pc, #44]	@ (8004810 <HAL_SD_MspInit+0xac>)
 80047e2:	f002 f9ed 	bl	8006bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80047e6:	2304      	movs	r3, #4
 80047e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ea:	2302      	movs	r3, #2
 80047ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047ee:	2303      	movs	r3, #3
 80047f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047f2:	f107 0318 	add.w	r3, r7, #24
 80047f6:	4619      	mov	r1, r3
 80047f8:	4806      	ldr	r0, [pc, #24]	@ (8004814 <HAL_SD_MspInit+0xb0>)
 80047fa:	f002 f9e1 	bl	8006bc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80047fe:	bf00      	nop
 8004800:	3728      	adds	r7, #40	@ 0x28
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	40018000 	.word	0x40018000
 800480c:	40021000 	.word	0x40021000
 8004810:	40011000 	.word	0x40011000
 8004814:	40011400 	.word	0x40011400

08004818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800481e:	4b18      	ldr	r3, [pc, #96]	@ (8004880 <HAL_MspInit+0x68>)
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	4a17      	ldr	r2, [pc, #92]	@ (8004880 <HAL_MspInit+0x68>)
 8004824:	f043 0301 	orr.w	r3, r3, #1
 8004828:	6193      	str	r3, [r2, #24]
 800482a:	4b15      	ldr	r3, [pc, #84]	@ (8004880 <HAL_MspInit+0x68>)
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	60bb      	str	r3, [r7, #8]
 8004834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004836:	4b12      	ldr	r3, [pc, #72]	@ (8004880 <HAL_MspInit+0x68>)
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	4a11      	ldr	r2, [pc, #68]	@ (8004880 <HAL_MspInit+0x68>)
 800483c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004840:	61d3      	str	r3, [r2, #28]
 8004842:	4b0f      	ldr	r3, [pc, #60]	@ (8004880 <HAL_MspInit+0x68>)
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800484a:	607b      	str	r3, [r7, #4]
 800484c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800484e:	2200      	movs	r2, #0
 8004850:	210f      	movs	r1, #15
 8004852:	f06f 0001 	mvn.w	r0, #1
 8004856:	f001 fd04 	bl	8006262 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800485a:	4b0a      	ldr	r3, [pc, #40]	@ (8004884 <HAL_MspInit+0x6c>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	4a04      	ldr	r2, [pc, #16]	@ (8004884 <HAL_MspInit+0x6c>)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004876:	bf00      	nop
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40021000 	.word	0x40021000
 8004884:	40010000 	.word	0x40010000

08004888 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08e      	sub	sp, #56	@ 0x38
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800489e:	4b34      	ldr	r3, [pc, #208]	@ (8004970 <HAL_InitTick+0xe8>)
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	4a33      	ldr	r2, [pc, #204]	@ (8004970 <HAL_InitTick+0xe8>)
 80048a4:	f043 0301 	orr.w	r3, r3, #1
 80048a8:	61d3      	str	r3, [r2, #28]
 80048aa:	4b31      	ldr	r3, [pc, #196]	@ (8004970 <HAL_InitTick+0xe8>)
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80048b6:	f107 0210 	add.w	r2, r7, #16
 80048ba:	f107 0314 	add.w	r3, r7, #20
 80048be:	4611      	mov	r1, r2
 80048c0:	4618      	mov	r0, r3
 80048c2:	f004 fd8d 	bl	80093e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80048ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d103      	bne.n	80048d8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80048d0:	f004 fd5e 	bl	8009390 <HAL_RCC_GetPCLK1Freq>
 80048d4:	6378      	str	r0, [r7, #52]	@ 0x34
 80048d6:	e004      	b.n	80048e2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80048d8:	f004 fd5a 	bl	8009390 <HAL_RCC_GetPCLK1Freq>
 80048dc:	4603      	mov	r3, r0
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80048e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048e4:	4a23      	ldr	r2, [pc, #140]	@ (8004974 <HAL_InitTick+0xec>)
 80048e6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ea:	0c9b      	lsrs	r3, r3, #18
 80048ec:	3b01      	subs	r3, #1
 80048ee:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80048f0:	4b21      	ldr	r3, [pc, #132]	@ (8004978 <HAL_InitTick+0xf0>)
 80048f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80048f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80048f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004978 <HAL_InitTick+0xf0>)
 80048fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80048fe:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8004900:	4a1d      	ldr	r2, [pc, #116]	@ (8004978 <HAL_InitTick+0xf0>)
 8004902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004904:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8004906:	4b1c      	ldr	r3, [pc, #112]	@ (8004978 <HAL_InitTick+0xf0>)
 8004908:	2200      	movs	r2, #0
 800490a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800490c:	4b1a      	ldr	r3, [pc, #104]	@ (8004978 <HAL_InitTick+0xf0>)
 800490e:	2200      	movs	r2, #0
 8004910:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004912:	4b19      	ldr	r3, [pc, #100]	@ (8004978 <HAL_InitTick+0xf0>)
 8004914:	2200      	movs	r2, #0
 8004916:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8004918:	4817      	ldr	r0, [pc, #92]	@ (8004978 <HAL_InitTick+0xf0>)
 800491a:	f005 fd37 	bl	800a38c <HAL_TIM_Base_Init>
 800491e:	4603      	mov	r3, r0
 8004920:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004924:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004928:	2b00      	cmp	r3, #0
 800492a:	d11b      	bne.n	8004964 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800492c:	4812      	ldr	r0, [pc, #72]	@ (8004978 <HAL_InitTick+0xf0>)
 800492e:	f005 fd7d 	bl	800a42c <HAL_TIM_Base_Start_IT>
 8004932:	4603      	mov	r3, r0
 8004934:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004938:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800493c:	2b00      	cmp	r3, #0
 800493e:	d111      	bne.n	8004964 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004940:	201c      	movs	r0, #28
 8004942:	f001 fcaa 	bl	800629a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b0f      	cmp	r3, #15
 800494a:	d808      	bhi.n	800495e <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800494c:	2200      	movs	r2, #0
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	201c      	movs	r0, #28
 8004952:	f001 fc86 	bl	8006262 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004956:	4a09      	ldr	r2, [pc, #36]	@ (800497c <HAL_InitTick+0xf4>)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	e002      	b.n	8004964 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004964:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004968:	4618      	mov	r0, r3
 800496a:	3738      	adds	r7, #56	@ 0x38
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40021000 	.word	0x40021000
 8004974:	431bde83 	.word	0x431bde83
 8004978:	2000090c 	.word	0x2000090c
 800497c:	20000038 	.word	0x20000038

08004980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004984:	bf00      	nop
 8004986:	e7fd      	b.n	8004984 <NMI_Handler+0x4>

08004988 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800498c:	bf00      	nop
 800498e:	e7fd      	b.n	800498c <HardFault_Handler+0x4>

08004990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004994:	bf00      	nop
 8004996:	e7fd      	b.n	8004994 <MemManage_Handler+0x4>

08004998 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800499c:	bf00      	nop
 800499e:	e7fd      	b.n	800499c <BusFault_Handler+0x4>

080049a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049a4:	bf00      	nop
 80049a6:	e7fd      	b.n	80049a4 <UsageFault_Handler+0x4>

080049a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049ac:	bf00      	nop
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bc80      	pop	{r7}
 80049b2:	4770      	bx	lr

080049b4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80049b8:	4802      	ldr	r0, [pc, #8]	@ (80049c4 <DMA1_Channel4_IRQHandler+0x10>)
 80049ba:	f001 fe97 	bl	80066ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80049be:	bf00      	nop
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20000ac0 	.word	0x20000ac0

080049c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80049cc:	4802      	ldr	r0, [pc, #8]	@ (80049d8 <TIM2_IRQHandler+0x10>)
 80049ce:	f005 fe9f 	bl	800a710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80049d2:	bf00      	nop
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	2000090c 	.word	0x2000090c

080049dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80049e0:	4802      	ldr	r0, [pc, #8]	@ (80049ec <TIM3_IRQHandler+0x10>)
 80049e2:	f005 fe95 	bl	800a710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80049e6:	bf00      	nop
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20000958 	.word	0x20000958

080049f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80049f4:	4802      	ldr	r0, [pc, #8]	@ (8004a00 <USART1_IRQHandler+0x10>)
 80049f6:	f006 fe07 	bl	800b608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80049fa:	bf00      	nop
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	200009e8 	.word	0x200009e8

08004a04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004a08:	4802      	ldr	r0, [pc, #8]	@ (8004a14 <USART2_IRQHandler+0x10>)
 8004a0a:	f006 fdfd 	bl	800b608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004a0e:	bf00      	nop
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20000a30 	.word	0x20000a30

08004a18 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004a1c:	4802      	ldr	r0, [pc, #8]	@ (8004a28 <USART3_IRQHandler+0x10>)
 8004a1e:	f006 fdf3 	bl	800b608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004a22:	bf00      	nop
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20000a78 	.word	0x20000a78

08004a2c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004a30:	4802      	ldr	r0, [pc, #8]	@ (8004a3c <TIM7_IRQHandler+0x10>)
 8004a32:	f005 fe6d 	bl	800a710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004a36:	bf00      	nop
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	200009a0 	.word	0x200009a0

08004a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a48:	4a14      	ldr	r2, [pc, #80]	@ (8004a9c <_sbrk+0x5c>)
 8004a4a:	4b15      	ldr	r3, [pc, #84]	@ (8004aa0 <_sbrk+0x60>)
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a54:	4b13      	ldr	r3, [pc, #76]	@ (8004aa4 <_sbrk+0x64>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d102      	bne.n	8004a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a5c:	4b11      	ldr	r3, [pc, #68]	@ (8004aa4 <_sbrk+0x64>)
 8004a5e:	4a12      	ldr	r2, [pc, #72]	@ (8004aa8 <_sbrk+0x68>)
 8004a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a62:	4b10      	ldr	r3, [pc, #64]	@ (8004aa4 <_sbrk+0x64>)
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4413      	add	r3, r2
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d207      	bcs.n	8004a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a70:	f00e fa66 	bl	8012f40 <__errno>
 8004a74:	4603      	mov	r3, r0
 8004a76:	220c      	movs	r2, #12
 8004a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a7e:	e009      	b.n	8004a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a80:	4b08      	ldr	r3, [pc, #32]	@ (8004aa4 <_sbrk+0x64>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a86:	4b07      	ldr	r3, [pc, #28]	@ (8004aa4 <_sbrk+0x64>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	4a05      	ldr	r2, [pc, #20]	@ (8004aa4 <_sbrk+0x64>)
 8004a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a92:	68fb      	ldr	r3, [r7, #12]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	2000c000 	.word	0x2000c000
 8004aa0:	00004000 	.word	0x00004000
 8004aa4:	20000954 	.word	0x20000954
 8004aa8:	20002d78 	.word	0x20002d78

08004aac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ab0:	bf00      	nop
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr

08004ab8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b08e      	sub	sp, #56	@ 0x38
 8004abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004abe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	605a      	str	r2, [r3, #4]
 8004ac8:	609a      	str	r2, [r3, #8]
 8004aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004acc:	f107 0320 	add.w	r3, r7, #32
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ad6:	1d3b      	adds	r3, r7, #4
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	605a      	str	r2, [r3, #4]
 8004ade:	609a      	str	r2, [r3, #8]
 8004ae0:	60da      	str	r2, [r3, #12]
 8004ae2:	611a      	str	r2, [r3, #16]
 8004ae4:	615a      	str	r2, [r3, #20]
 8004ae6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004ae8:	4b37      	ldr	r3, [pc, #220]	@ (8004bc8 <MX_TIM3_Init+0x110>)
 8004aea:	4a38      	ldr	r2, [pc, #224]	@ (8004bcc <MX_TIM3_Init+0x114>)
 8004aec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8004aee:	4b36      	ldr	r3, [pc, #216]	@ (8004bc8 <MX_TIM3_Init+0x110>)
 8004af0:	2247      	movs	r2, #71	@ 0x47
 8004af2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004af4:	4b34      	ldr	r3, [pc, #208]	@ (8004bc8 <MX_TIM3_Init+0x110>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004afa:	4b33      	ldr	r3, [pc, #204]	@ (8004bc8 <MX_TIM3_Init+0x110>)
 8004afc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b02:	4b31      	ldr	r3, [pc, #196]	@ (8004bc8 <MX_TIM3_Init+0x110>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b08:	4b2f      	ldr	r3, [pc, #188]	@ (8004bc8 <MX_TIM3_Init+0x110>)
 8004b0a:	2280      	movs	r2, #128	@ 0x80
 8004b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004b0e:	482e      	ldr	r0, [pc, #184]	@ (8004bc8 <MX_TIM3_Init+0x110>)
 8004b10:	f005 fc3c 	bl	800a38c <HAL_TIM_Base_Init>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004b1a:	f7ff fdfb 	bl	8004714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004b24:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4827      	ldr	r0, [pc, #156]	@ (8004bc8 <MX_TIM3_Init+0x110>)
 8004b2c:	f005 ffba 	bl	800aaa4 <HAL_TIM_ConfigClockSource>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004b36:	f7ff fded 	bl	8004714 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004b3a:	4823      	ldr	r0, [pc, #140]	@ (8004bc8 <MX_TIM3_Init+0x110>)
 8004b3c:	f005 fcd6 	bl	800a4ec <HAL_TIM_PWM_Init>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004b46:	f7ff fde5 	bl	8004714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004b52:	f107 0320 	add.w	r3, r7, #32
 8004b56:	4619      	mov	r1, r3
 8004b58:	481b      	ldr	r0, [pc, #108]	@ (8004bc8 <MX_TIM3_Init+0x110>)
 8004b5a:	f006 fb6f 	bl	800b23c <HAL_TIMEx_MasterConfigSynchronization>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004b64:	f7ff fdd6 	bl	8004714 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b68:	2360      	movs	r3, #96	@ 0x60
 8004b6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b74:	2300      	movs	r3, #0
 8004b76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b78:	1d3b      	adds	r3, r7, #4
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4812      	ldr	r0, [pc, #72]	@ (8004bc8 <MX_TIM3_Init+0x110>)
 8004b80:	f005 fece 	bl	800a920 <HAL_TIM_PWM_ConfigChannel>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004b8a:	f7ff fdc3 	bl	8004714 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004b8e:	1d3b      	adds	r3, r7, #4
 8004b90:	2204      	movs	r2, #4
 8004b92:	4619      	mov	r1, r3
 8004b94:	480c      	ldr	r0, [pc, #48]	@ (8004bc8 <MX_TIM3_Init+0x110>)
 8004b96:	f005 fec3 	bl	800a920 <HAL_TIM_PWM_ConfigChannel>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004ba0:	f7ff fdb8 	bl	8004714 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004ba4:	1d3b      	adds	r3, r7, #4
 8004ba6:	2208      	movs	r2, #8
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4807      	ldr	r0, [pc, #28]	@ (8004bc8 <MX_TIM3_Init+0x110>)
 8004bac:	f005 feb8 	bl	800a920 <HAL_TIM_PWM_ConfigChannel>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8004bb6:	f7ff fdad 	bl	8004714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004bba:	4803      	ldr	r0, [pc, #12]	@ (8004bc8 <MX_TIM3_Init+0x110>)
 8004bbc:	f000 f880 	bl	8004cc0 <HAL_TIM_MspPostInit>

}
 8004bc0:	bf00      	nop
 8004bc2:	3738      	adds	r7, #56	@ 0x38
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	20000958 	.word	0x20000958
 8004bcc:	40000400 	.word	0x40000400

08004bd0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bd6:	463b      	mov	r3, r7
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004bde:	4b15      	ldr	r3, [pc, #84]	@ (8004c34 <MX_TIM7_Init+0x64>)
 8004be0:	4a15      	ldr	r2, [pc, #84]	@ (8004c38 <MX_TIM7_Init+0x68>)
 8004be2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8004be4:	4b13      	ldr	r3, [pc, #76]	@ (8004c34 <MX_TIM7_Init+0x64>)
 8004be6:	2247      	movs	r2, #71	@ 0x47
 8004be8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bea:	4b12      	ldr	r3, [pc, #72]	@ (8004c34 <MX_TIM7_Init+0x64>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8004bf0:	4b10      	ldr	r3, [pc, #64]	@ (8004c34 <MX_TIM7_Init+0x64>)
 8004bf2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bf6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8004c34 <MX_TIM7_Init+0x64>)
 8004bfa:	2280      	movs	r2, #128	@ 0x80
 8004bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004bfe:	480d      	ldr	r0, [pc, #52]	@ (8004c34 <MX_TIM7_Init+0x64>)
 8004c00:	f005 fbc4 	bl	800a38c <HAL_TIM_Base_Init>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8004c0a:	f7ff fd83 	bl	8004714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c12:	2300      	movs	r3, #0
 8004c14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004c16:	463b      	mov	r3, r7
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4806      	ldr	r0, [pc, #24]	@ (8004c34 <MX_TIM7_Init+0x64>)
 8004c1c:	f006 fb0e 	bl	800b23c <HAL_TIMEx_MasterConfigSynchronization>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8004c26:	f7ff fd75 	bl	8004714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004c2a:	bf00      	nop
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	200009a0 	.word	0x200009a0
 8004c38:	40001400 	.word	0x40001400

08004c3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a1a      	ldr	r2, [pc, #104]	@ (8004cb4 <HAL_TIM_Base_MspInit+0x78>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d114      	bne.n	8004c78 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8004cb8 <HAL_TIM_Base_MspInit+0x7c>)
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	4a19      	ldr	r2, [pc, #100]	@ (8004cb8 <HAL_TIM_Base_MspInit+0x7c>)
 8004c54:	f043 0302 	orr.w	r3, r3, #2
 8004c58:	61d3      	str	r3, [r2, #28]
 8004c5a:	4b17      	ldr	r3, [pc, #92]	@ (8004cb8 <HAL_TIM_Base_MspInit+0x7c>)
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004c66:	2200      	movs	r2, #0
 8004c68:	2105      	movs	r1, #5
 8004c6a:	201d      	movs	r0, #29
 8004c6c:	f001 faf9 	bl	8006262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004c70:	201d      	movs	r0, #29
 8004c72:	f001 fb12 	bl	800629a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8004c76:	e018      	b.n	8004caa <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a0f      	ldr	r2, [pc, #60]	@ (8004cbc <HAL_TIM_Base_MspInit+0x80>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d113      	bne.n	8004caa <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004c82:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb8 <HAL_TIM_Base_MspInit+0x7c>)
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	4a0c      	ldr	r2, [pc, #48]	@ (8004cb8 <HAL_TIM_Base_MspInit+0x7c>)
 8004c88:	f043 0320 	orr.w	r3, r3, #32
 8004c8c:	61d3      	str	r3, [r2, #28]
 8004c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb8 <HAL_TIM_Base_MspInit+0x7c>)
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	f003 0320 	and.w	r3, r3, #32
 8004c96:	60bb      	str	r3, [r7, #8]
 8004c98:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	2105      	movs	r1, #5
 8004c9e:	2037      	movs	r0, #55	@ 0x37
 8004ca0:	f001 fadf 	bl	8006262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004ca4:	2037      	movs	r0, #55	@ 0x37
 8004ca6:	f001 faf8 	bl	800629a <HAL_NVIC_EnableIRQ>
}
 8004caa:	bf00      	nop
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40000400 	.word	0x40000400
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	40001400 	.word	0x40001400

08004cc0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cc8:	f107 0310 	add.w	r3, r7, #16
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	605a      	str	r2, [r3, #4]
 8004cd2:	609a      	str	r2, [r3, #8]
 8004cd4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a1b      	ldr	r2, [pc, #108]	@ (8004d48 <HAL_TIM_MspPostInit+0x88>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d12f      	bne.n	8004d40 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8004d4c <HAL_TIM_MspPostInit+0x8c>)
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	4a19      	ldr	r2, [pc, #100]	@ (8004d4c <HAL_TIM_MspPostInit+0x8c>)
 8004ce6:	f043 0304 	orr.w	r3, r3, #4
 8004cea:	6193      	str	r3, [r2, #24]
 8004cec:	4b17      	ldr	r3, [pc, #92]	@ (8004d4c <HAL_TIM_MspPostInit+0x8c>)
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cf8:	4b14      	ldr	r3, [pc, #80]	@ (8004d4c <HAL_TIM_MspPostInit+0x8c>)
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	4a13      	ldr	r2, [pc, #76]	@ (8004d4c <HAL_TIM_MspPostInit+0x8c>)
 8004cfe:	f043 0308 	orr.w	r3, r3, #8
 8004d02:	6193      	str	r3, [r2, #24]
 8004d04:	4b11      	ldr	r3, [pc, #68]	@ (8004d4c <HAL_TIM_MspPostInit+0x8c>)
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	f003 0308 	and.w	r3, r3, #8
 8004d0c:	60bb      	str	r3, [r7, #8]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004d10:	23c0      	movs	r3, #192	@ 0xc0
 8004d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d14:	2302      	movs	r3, #2
 8004d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d18:	2302      	movs	r3, #2
 8004d1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d1c:	f107 0310 	add.w	r3, r7, #16
 8004d20:	4619      	mov	r1, r3
 8004d22:	480b      	ldr	r0, [pc, #44]	@ (8004d50 <HAL_TIM_MspPostInit+0x90>)
 8004d24:	f001 ff4c 	bl	8006bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d30:	2302      	movs	r3, #2
 8004d32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d34:	f107 0310 	add.w	r3, r7, #16
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4806      	ldr	r0, [pc, #24]	@ (8004d54 <HAL_TIM_MspPostInit+0x94>)
 8004d3c:	f001 ff40 	bl	8006bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004d40:	bf00      	nop
 8004d42:	3720      	adds	r7, #32
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	40000400 	.word	0x40000400
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	40010800 	.word	0x40010800
 8004d54:	40010c00 	.word	0x40010c00

08004d58 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004d5c:	4b11      	ldr	r3, [pc, #68]	@ (8004da4 <MX_USART1_UART_Init+0x4c>)
 8004d5e:	4a12      	ldr	r2, [pc, #72]	@ (8004da8 <MX_USART1_UART_Init+0x50>)
 8004d60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004d62:	4b10      	ldr	r3, [pc, #64]	@ (8004da4 <MX_USART1_UART_Init+0x4c>)
 8004d64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004d68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8004da4 <MX_USART1_UART_Init+0x4c>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004d70:	4b0c      	ldr	r3, [pc, #48]	@ (8004da4 <MX_USART1_UART_Init+0x4c>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004d76:	4b0b      	ldr	r3, [pc, #44]	@ (8004da4 <MX_USART1_UART_Init+0x4c>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004d7c:	4b09      	ldr	r3, [pc, #36]	@ (8004da4 <MX_USART1_UART_Init+0x4c>)
 8004d7e:	220c      	movs	r2, #12
 8004d80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d82:	4b08      	ldr	r3, [pc, #32]	@ (8004da4 <MX_USART1_UART_Init+0x4c>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d88:	4b06      	ldr	r3, [pc, #24]	@ (8004da4 <MX_USART1_UART_Init+0x4c>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004d8e:	4805      	ldr	r0, [pc, #20]	@ (8004da4 <MX_USART1_UART_Init+0x4c>)
 8004d90:	f006 fad2 	bl	800b338 <HAL_UART_Init>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004d9a:	f7ff fcbb 	bl	8004714 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004d9e:	bf00      	nop
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	200009e8 	.word	0x200009e8
 8004da8:	40013800 	.word	0x40013800

08004dac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004db0:	4b11      	ldr	r3, [pc, #68]	@ (8004df8 <MX_USART2_UART_Init+0x4c>)
 8004db2:	4a12      	ldr	r2, [pc, #72]	@ (8004dfc <MX_USART2_UART_Init+0x50>)
 8004db4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004db6:	4b10      	ldr	r3, [pc, #64]	@ (8004df8 <MX_USART2_UART_Init+0x4c>)
 8004db8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004dbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8004df8 <MX_USART2_UART_Init+0x4c>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8004df8 <MX_USART2_UART_Init+0x4c>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004dca:	4b0b      	ldr	r3, [pc, #44]	@ (8004df8 <MX_USART2_UART_Init+0x4c>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004dd0:	4b09      	ldr	r3, [pc, #36]	@ (8004df8 <MX_USART2_UART_Init+0x4c>)
 8004dd2:	220c      	movs	r2, #12
 8004dd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004dd6:	4b08      	ldr	r3, [pc, #32]	@ (8004df8 <MX_USART2_UART_Init+0x4c>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ddc:	4b06      	ldr	r3, [pc, #24]	@ (8004df8 <MX_USART2_UART_Init+0x4c>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004de2:	4805      	ldr	r0, [pc, #20]	@ (8004df8 <MX_USART2_UART_Init+0x4c>)
 8004de4:	f006 faa8 	bl	800b338 <HAL_UART_Init>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004dee:	f7ff fc91 	bl	8004714 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004df2:	bf00      	nop
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20000a30 	.word	0x20000a30
 8004dfc:	40004400 	.word	0x40004400

08004e00 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004e04:	4b11      	ldr	r3, [pc, #68]	@ (8004e4c <MX_USART3_UART_Init+0x4c>)
 8004e06:	4a12      	ldr	r2, [pc, #72]	@ (8004e50 <MX_USART3_UART_Init+0x50>)
 8004e08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004e0a:	4b10      	ldr	r3, [pc, #64]	@ (8004e4c <MX_USART3_UART_Init+0x4c>)
 8004e0c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004e10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004e12:	4b0e      	ldr	r3, [pc, #56]	@ (8004e4c <MX_USART3_UART_Init+0x4c>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004e18:	4b0c      	ldr	r3, [pc, #48]	@ (8004e4c <MX_USART3_UART_Init+0x4c>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e4c <MX_USART3_UART_Init+0x4c>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004e24:	4b09      	ldr	r3, [pc, #36]	@ (8004e4c <MX_USART3_UART_Init+0x4c>)
 8004e26:	220c      	movs	r2, #12
 8004e28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e2a:	4b08      	ldr	r3, [pc, #32]	@ (8004e4c <MX_USART3_UART_Init+0x4c>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e30:	4b06      	ldr	r3, [pc, #24]	@ (8004e4c <MX_USART3_UART_Init+0x4c>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004e36:	4805      	ldr	r0, [pc, #20]	@ (8004e4c <MX_USART3_UART_Init+0x4c>)
 8004e38:	f006 fa7e 	bl	800b338 <HAL_UART_Init>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004e42:	f7ff fc67 	bl	8004714 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004e46:	bf00      	nop
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	20000a78 	.word	0x20000a78
 8004e50:	40004800 	.word	0x40004800

08004e54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08e      	sub	sp, #56	@ 0x38
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	605a      	str	r2, [r3, #4]
 8004e66:	609a      	str	r2, [r3, #8]
 8004e68:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a7c      	ldr	r2, [pc, #496]	@ (8005060 <HAL_UART_MspInit+0x20c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d161      	bne.n	8004f38 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004e74:	4b7b      	ldr	r3, [pc, #492]	@ (8005064 <HAL_UART_MspInit+0x210>)
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	4a7a      	ldr	r2, [pc, #488]	@ (8005064 <HAL_UART_MspInit+0x210>)
 8004e7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e7e:	6193      	str	r3, [r2, #24]
 8004e80:	4b78      	ldr	r3, [pc, #480]	@ (8005064 <HAL_UART_MspInit+0x210>)
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e88:	623b      	str	r3, [r7, #32]
 8004e8a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e8c:	4b75      	ldr	r3, [pc, #468]	@ (8005064 <HAL_UART_MspInit+0x210>)
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	4a74      	ldr	r2, [pc, #464]	@ (8005064 <HAL_UART_MspInit+0x210>)
 8004e92:	f043 0304 	orr.w	r3, r3, #4
 8004e96:	6193      	str	r3, [r2, #24]
 8004e98:	4b72      	ldr	r3, [pc, #456]	@ (8005064 <HAL_UART_MspInit+0x210>)
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	61fb      	str	r3, [r7, #28]
 8004ea2:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004ea4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eaa:	2302      	movs	r3, #2
 8004eac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	486b      	ldr	r0, [pc, #428]	@ (8005068 <HAL_UART_MspInit+0x214>)
 8004eba:	f001 fe81 	bl	8006bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004ebe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ecc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4865      	ldr	r0, [pc, #404]	@ (8005068 <HAL_UART_MspInit+0x214>)
 8004ed4:	f001 fe74 	bl	8006bc0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004ed8:	4b64      	ldr	r3, [pc, #400]	@ (800506c <HAL_UART_MspInit+0x218>)
 8004eda:	4a65      	ldr	r2, [pc, #404]	@ (8005070 <HAL_UART_MspInit+0x21c>)
 8004edc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ede:	4b63      	ldr	r3, [pc, #396]	@ (800506c <HAL_UART_MspInit+0x218>)
 8004ee0:	2210      	movs	r2, #16
 8004ee2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ee4:	4b61      	ldr	r3, [pc, #388]	@ (800506c <HAL_UART_MspInit+0x218>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004eea:	4b60      	ldr	r3, [pc, #384]	@ (800506c <HAL_UART_MspInit+0x218>)
 8004eec:	2280      	movs	r2, #128	@ 0x80
 8004eee:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ef0:	4b5e      	ldr	r3, [pc, #376]	@ (800506c <HAL_UART_MspInit+0x218>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ef6:	4b5d      	ldr	r3, [pc, #372]	@ (800506c <HAL_UART_MspInit+0x218>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004efc:	4b5b      	ldr	r3, [pc, #364]	@ (800506c <HAL_UART_MspInit+0x218>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004f02:	4b5a      	ldr	r3, [pc, #360]	@ (800506c <HAL_UART_MspInit+0x218>)
 8004f04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004f08:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004f0a:	4858      	ldr	r0, [pc, #352]	@ (800506c <HAL_UART_MspInit+0x218>)
 8004f0c:	f001 f9d4 	bl	80062b8 <HAL_DMA_Init>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8004f16:	f7ff fbfd 	bl	8004714 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a53      	ldr	r2, [pc, #332]	@ (800506c <HAL_UART_MspInit+0x218>)
 8004f1e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f20:	4a52      	ldr	r2, [pc, #328]	@ (800506c <HAL_UART_MspInit+0x218>)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004f26:	2200      	movs	r2, #0
 8004f28:	2105      	movs	r1, #5
 8004f2a:	2025      	movs	r0, #37	@ 0x25
 8004f2c:	f001 f999 	bl	8006262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004f30:	2025      	movs	r0, #37	@ 0x25
 8004f32:	f001 f9b2 	bl	800629a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004f36:	e08e      	b.n	8005056 <HAL_UART_MspInit+0x202>
  else if(uartHandle->Instance==USART2)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a4d      	ldr	r2, [pc, #308]	@ (8005074 <HAL_UART_MspInit+0x220>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d138      	bne.n	8004fb4 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f42:	4b48      	ldr	r3, [pc, #288]	@ (8005064 <HAL_UART_MspInit+0x210>)
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	4a47      	ldr	r2, [pc, #284]	@ (8005064 <HAL_UART_MspInit+0x210>)
 8004f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f4c:	61d3      	str	r3, [r2, #28]
 8004f4e:	4b45      	ldr	r3, [pc, #276]	@ (8005064 <HAL_UART_MspInit+0x210>)
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f56:	61bb      	str	r3, [r7, #24]
 8004f58:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f5a:	4b42      	ldr	r3, [pc, #264]	@ (8005064 <HAL_UART_MspInit+0x210>)
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	4a41      	ldr	r2, [pc, #260]	@ (8005064 <HAL_UART_MspInit+0x210>)
 8004f60:	f043 0304 	orr.w	r3, r3, #4
 8004f64:	6193      	str	r3, [r2, #24]
 8004f66:	4b3f      	ldr	r3, [pc, #252]	@ (8005064 <HAL_UART_MspInit+0x210>)
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004f72:	2304      	movs	r3, #4
 8004f74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f76:	2302      	movs	r3, #2
 8004f78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f82:	4619      	mov	r1, r3
 8004f84:	4838      	ldr	r0, [pc, #224]	@ (8005068 <HAL_UART_MspInit+0x214>)
 8004f86:	f001 fe1b 	bl	8006bc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004f8a:	2308      	movs	r3, #8
 8004f8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f92:	2300      	movs	r3, #0
 8004f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	4832      	ldr	r0, [pc, #200]	@ (8005068 <HAL_UART_MspInit+0x214>)
 8004f9e:	f001 fe0f 	bl	8006bc0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2105      	movs	r1, #5
 8004fa6:	2026      	movs	r0, #38	@ 0x26
 8004fa8:	f001 f95b 	bl	8006262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004fac:	2026      	movs	r0, #38	@ 0x26
 8004fae:	f001 f974 	bl	800629a <HAL_NVIC_EnableIRQ>
}
 8004fb2:	e050      	b.n	8005056 <HAL_UART_MspInit+0x202>
  else if(uartHandle->Instance==USART3)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a2f      	ldr	r2, [pc, #188]	@ (8005078 <HAL_UART_MspInit+0x224>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d14b      	bne.n	8005056 <HAL_UART_MspInit+0x202>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004fbe:	4b29      	ldr	r3, [pc, #164]	@ (8005064 <HAL_UART_MspInit+0x210>)
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	4a28      	ldr	r2, [pc, #160]	@ (8005064 <HAL_UART_MspInit+0x210>)
 8004fc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fc8:	61d3      	str	r3, [r2, #28]
 8004fca:	4b26      	ldr	r3, [pc, #152]	@ (8005064 <HAL_UART_MspInit+0x210>)
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004fd6:	4b23      	ldr	r3, [pc, #140]	@ (8005064 <HAL_UART_MspInit+0x210>)
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	4a22      	ldr	r2, [pc, #136]	@ (8005064 <HAL_UART_MspInit+0x210>)
 8004fdc:	f043 0320 	orr.w	r3, r3, #32
 8004fe0:	6193      	str	r3, [r2, #24]
 8004fe2:	4b20      	ldr	r3, [pc, #128]	@ (8005064 <HAL_UART_MspInit+0x210>)
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	f003 0320 	and.w	r3, r3, #32
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004fee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ffc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005000:	4619      	mov	r1, r3
 8005002:	481e      	ldr	r0, [pc, #120]	@ (800507c <HAL_UART_MspInit+0x228>)
 8005004:	f001 fddc 	bl	8006bc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005008:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800500c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800500e:	2300      	movs	r3, #0
 8005010:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005012:	2300      	movs	r3, #0
 8005014:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005016:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800501a:	4619      	mov	r1, r3
 800501c:	4817      	ldr	r0, [pc, #92]	@ (800507c <HAL_UART_MspInit+0x228>)
 800501e:	f001 fdcf 	bl	8006bc0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_ENABLE();
 8005022:	4b17      	ldr	r3, [pc, #92]	@ (8005080 <HAL_UART_MspInit+0x22c>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	637b      	str	r3, [r7, #52]	@ 0x34
 8005028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800502a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800502e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005032:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8005036:	637b      	str	r3, [r7, #52]	@ 0x34
 8005038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800503a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800503e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005040:	4a0f      	ldr	r2, [pc, #60]	@ (8005080 <HAL_UART_MspInit+0x22c>)
 8005042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005044:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005046:	2200      	movs	r2, #0
 8005048:	2105      	movs	r1, #5
 800504a:	2027      	movs	r0, #39	@ 0x27
 800504c:	f001 f909 	bl	8006262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005050:	2027      	movs	r0, #39	@ 0x27
 8005052:	f001 f922 	bl	800629a <HAL_NVIC_EnableIRQ>
}
 8005056:	bf00      	nop
 8005058:	3738      	adds	r7, #56	@ 0x38
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40013800 	.word	0x40013800
 8005064:	40021000 	.word	0x40021000
 8005068:	40010800 	.word	0x40010800
 800506c:	20000ac0 	.word	0x20000ac0
 8005070:	40020044 	.word	0x40020044
 8005074:	40004400 	.word	0x40004400
 8005078:	40004800 	.word	0x40004800
 800507c:	40011400 	.word	0x40011400
 8005080:	40010000 	.word	0x40010000

08005084 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005084:	f7ff fd12 	bl	8004aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005088:	480b      	ldr	r0, [pc, #44]	@ (80050b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800508a:	490c      	ldr	r1, [pc, #48]	@ (80050bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800508c:	4a0c      	ldr	r2, [pc, #48]	@ (80050c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800508e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005090:	e002      	b.n	8005098 <LoopCopyDataInit>

08005092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005096:	3304      	adds	r3, #4

08005098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800509a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800509c:	d3f9      	bcc.n	8005092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800509e:	4a09      	ldr	r2, [pc, #36]	@ (80050c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80050a0:	4c09      	ldr	r4, [pc, #36]	@ (80050c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80050a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050a4:	e001      	b.n	80050aa <LoopFillZerobss>

080050a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050a8:	3204      	adds	r2, #4

080050aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050ac:	d3fb      	bcc.n	80050a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80050ae:	f00d ff4d 	bl	8012f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80050b2:	f7ff faa7 	bl	8004604 <main>
  bx lr
 80050b6:	4770      	bx	lr
  ldr r0, =_sdata
 80050b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050bc:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80050c0:	08013a64 	.word	0x08013a64
  ldr r2, =_sbss
 80050c4:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80050c8:	20002d78 	.word	0x20002d78

080050cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80050cc:	e7fe      	b.n	80050cc <ADC1_2_IRQHandler>
	...

080050d0 <AT24Cxx_get_max_addr>:
#include <stdio.h>

#include "AT24Cxx_stm32_hal.h"

uint16_t AT24Cxx_get_max_addr ( AT24Cxx_device_t* dev )
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	791b      	ldrb	r3, [r3, #4]
 80050dc:	2b05      	cmp	r3, #5
 80050de:	d820      	bhi.n	8005122 <AT24Cxx_get_max_addr+0x52>
 80050e0:	a201      	add	r2, pc, #4	@ (adr r2, 80050e8 <AT24Cxx_get_max_addr+0x18>)
 80050e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e6:	bf00      	nop
 80050e8:	08005101 	.word	0x08005101
 80050ec:	08005105 	.word	0x08005105
 80050f0:	0800510b 	.word	0x0800510b
 80050f4:	08005111 	.word	0x08005111
 80050f8:	08005117 	.word	0x08005117
 80050fc:	0800511d 	.word	0x0800511d
	case AT24C01:
		return AT24C01_MAX_ADDR;
 8005100:	237f      	movs	r3, #127	@ 0x7f
 8005102:	e00f      	b.n	8005124 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C32:
		return AT24C32_MAX_ADDR;
 8005104:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005108:	e00c      	b.n	8005124 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C64:
		return AT24C64_MAX_ADDR;
 800510a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800510e:	e009      	b.n	8005124 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C128:
		return AT24C128_MAX_ADDR;
 8005110:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8005114:	e006      	b.n	8005124 <AT24Cxx_get_max_addr+0x54>
		break;
	case AT24C256:
		return AT24C256_MAX_ADDR;
 8005116:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800511a:	e003      	b.n	8005124 <AT24Cxx_get_max_addr+0x54>
		break;
		//not supported yet, will overflow
	case AT24C512:
		return AT24C512_MAX_ADDR;
 800511c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005120:	e000      	b.n	8005124 <AT24Cxx_get_max_addr+0x54>
		break;
	default:
		return 0;
 8005122:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 8005124:	4618      	mov	r0, r3
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	bc80      	pop	{r7}
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop

08005130 <AT24Cxx_get_pg_size>:

uint16_t AT24Cxx_get_pg_size ( AT24Cxx_device_t* dev )
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
	switch(dev->dev_model){
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	791b      	ldrb	r3, [r3, #4]
 800513c:	2b05      	cmp	r3, #5
 800513e:	d81b      	bhi.n	8005178 <AT24Cxx_get_pg_size+0x48>
 8005140:	a201      	add	r2, pc, #4	@ (adr r2, 8005148 <AT24Cxx_get_pg_size+0x18>)
 8005142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005146:	bf00      	nop
 8005148:	08005161 	.word	0x08005161
 800514c:	08005165 	.word	0x08005165
 8005150:	08005169 	.word	0x08005169
 8005154:	0800516d 	.word	0x0800516d
 8005158:	08005171 	.word	0x08005171
 800515c:	08005175 	.word	0x08005175
	case AT24C01:
		return AT24C01_PG_SIZE;
 8005160:	2308      	movs	r3, #8
 8005162:	e00a      	b.n	800517a <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C32:
		return AT24C32_PG_SIZE;
 8005164:	2320      	movs	r3, #32
 8005166:	e008      	b.n	800517a <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C64:
		return AT24C64_PG_SIZE;
 8005168:	2320      	movs	r3, #32
 800516a:	e006      	b.n	800517a <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C128:
		return AT24C128_PG_SIZE;
 800516c:	2340      	movs	r3, #64	@ 0x40
 800516e:	e004      	b.n	800517a <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C256:
		return AT24C256_PG_SIZE;
 8005170:	2340      	movs	r3, #64	@ 0x40
 8005172:	e002      	b.n	800517a <AT24Cxx_get_pg_size+0x4a>
		break;
	case AT24C512:
		//not supported yet, will overflow
		return AT24C512_PG_SIZE;
 8005174:	2380      	movs	r3, #128	@ 0x80
 8005176:	e000      	b.n	800517a <AT24Cxx_get_pg_size+0x4a>
		break;
	default:
		return 0;
 8005178:	2300      	movs	r3, #0
		break;
	}
	return 0;
}
 800517a:	4618      	mov	r0, r3
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr

08005184 <AT24Cxx_init>:

AT24Cxx_ERR_TypeDef AT24Cxx_init( AT24Cxx_devices_t* devices, 
	uint8_t init_dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	460b      	mov	r3, r1
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	72fb      	strb	r3, [r7, #11]
	//adds first device to AT32Cxx_devices array
	//further devices should be added by calling AT24Cxx_add_dev()
	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 8005192:	2114      	movs	r1, #20
 8005194:	2001      	movs	r0, #1
 8005196:	f00d fdf1 	bl	8012d7c <calloc>
 800519a:	4603      	mov	r3, r0
 800519c:	613b      	str	r3, [r7, #16]
	if ( at == NULL )
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d102      	bne.n	80051aa <AT24Cxx_init+0x26>
		return at_init_err;
 80051a4:	f04f 33ff 	mov.w	r3, #4294967295
 80051a8:	e028      	b.n	80051fc <AT24Cxx_init+0x78>

	for(uint8_t i = 0; i < 8; i++)
 80051aa:	2300      	movs	r3, #0
 80051ac:	75fb      	strb	r3, [r7, #23]
 80051ae:	e007      	b.n	80051c0 <AT24Cxx_init+0x3c>
			devices->devices[i] = 0x00;
 80051b0:	7dfa      	ldrb	r2, [r7, #23]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2100      	movs	r1, #0
 80051b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i = 0; i < 8; i++)
 80051ba:	7dfb      	ldrb	r3, [r7, #23]
 80051bc:	3301      	adds	r3, #1
 80051be:	75fb      	strb	r3, [r7, #23]
 80051c0:	7dfb      	ldrb	r3, [r7, #23]
 80051c2:	2b07      	cmp	r3, #7
 80051c4:	d9f4      	bls.n	80051b0 <AT24Cxx_init+0x2c>

	at->dev_addr = init_dev_addr;
 80051c6:	7afb      	ldrb	r3, [r7, #11]
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	2200      	movs	r2, #0
 80051d2:	60da      	str	r2, [r3, #12]
	at->prev_dev = NULL;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	2200      	movs	r2, #0
 80051d8:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	2205      	movs	r2, #5
 80051de:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	2201      	movs	r2, #1
 80051ea:	721a      	strb	r2, [r3, #8]
	devices->dev_count = 1;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[0] = at;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	601a      	str	r2, [r3, #0]

	return at_ok;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <AT24Cxx_add_dev>:

AT24Cxx_ERR_TypeDef AT24Cxx_add_dev( AT24Cxx_devices_t* devices, 
	uint8_t dev_addr, I2C_HandleTypeDef* i2c_handle)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	460b      	mov	r3, r1
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	72fb      	strb	r3, [r7, #11]
	if(devices->dev_count == 0 || devices->dev_count > 8)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d004      	beq.n	8005226 <AT24Cxx_add_dev+0x22>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005222:	2b08      	cmp	r3, #8
 8005224:	d902      	bls.n	800522c <AT24Cxx_add_dev+0x28>
		return at_add_dev_err;
 8005226:	f06f 0301 	mvn.w	r3, #1
 800522a:	e03e      	b.n	80052aa <AT24Cxx_add_dev+0xa6>

	AT24Cxx_device_t *at = (AT24Cxx_device_t*)calloc(1, sizeof(AT24Cxx_device_t));
 800522c:	2114      	movs	r1, #20
 800522e:	2001      	movs	r0, #1
 8005230:	f00d fda4 	bl	8012d7c <calloc>
 8005234:	4603      	mov	r3, r0
 8005236:	617b      	str	r3, [r7, #20]
	if ( at == NULL )
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d102      	bne.n	8005244 <AT24Cxx_add_dev+0x40>
		return at_add_dev_err;
 800523e:	f06f 0301 	mvn.w	r3, #1
 8005242:	e032      	b.n	80052aa <AT24Cxx_add_dev+0xa6>

	at->dev_addr = dev_addr;
 8005244:	7afb      	ldrb	r3, [r7, #11]
 8005246:	b29a      	uxth	r2, r3
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	80da      	strh	r2, [r3, #6]
	at->next_dev = NULL;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	2200      	movs	r2, #0
 8005250:	60da      	str	r2, [r3, #12]
	at->prev_dev = devices->devices[devices->dev_count-1];
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005258:	1e5a      	subs	r2, r3, #1
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	611a      	str	r2, [r3, #16]
	at->dev_model = AT24Cxx_USED_MODEL;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	2205      	movs	r2, #5
 8005268:	711a      	strb	r2, [r3, #4]
	at->dev_port = i2c_handle;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	601a      	str	r2, [r3, #0]
	at->initialized = true;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	2201      	movs	r2, #1
 8005274:	721a      	strb	r2, [r3, #8]
	devices->dev_count++;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f893 3020 	ldrb.w	r3, [r3, #32]
 800527c:	3301      	adds	r3, #1
 800527e:	b2da      	uxtb	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f883 2020 	strb.w	r2, [r3, #32]
	devices->devices[devices->dev_count-1] = at;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f893 3020 	ldrb.w	r3, [r3, #32]
 800528c:	1e5a      	subs	r2, r3, #1
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6979      	ldr	r1, [r7, #20]
 8005292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	//update previous device's next device
	devices->devices[devices->dev_count-2]->next_dev = at;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800529c:	1e9a      	subs	r2, r3, #2
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	60da      	str	r2, [r3, #12]
	return at_ok;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <AT24Cxx_write_byte_buffer>:
	return at_w_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_write_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 80052b2:	b5b0      	push	{r4, r5, r7, lr}
 80052b4:	b08a      	sub	sp, #40	@ 0x28
 80052b6:	af04      	add	r7, sp, #16
 80052b8:	60f8      	str	r0, [r7, #12]
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	4611      	mov	r1, r2
 80052be:	461a      	mov	r2, r3
 80052c0:	460b      	mov	r3, r1
 80052c2:	80fb      	strh	r3, [r7, #6]
 80052c4:	4613      	mov	r3, r2
 80052c6:	80bb      	strh	r3, [r7, #4]
	//TODO checks

	uint8_t page_size = AT24Cxx_get_pg_size(dev);
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f7ff ff31 	bl	8005130 <AT24Cxx_get_pg_size>
 80052ce:	4603      	mov	r3, r0
 80052d0:	75bb      	strb	r3, [r7, #22]

	uint8_t page_remaining = page_size - mem_addr % page_size;
 80052d2:	88fb      	ldrh	r3, [r7, #6]
 80052d4:	7dba      	ldrb	r2, [r7, #22]
 80052d6:	fb93 f1f2 	sdiv	r1, r3, r2
 80052da:	fb01 f202 	mul.w	r2, r1, r2
 80052de:	1a9b      	subs	r3, r3, r2
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	7dba      	ldrb	r2, [r7, #22]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	757b      	strb	r3, [r7, #21]

	uint8_t page_writes = (buf_length - page_remaining) / page_size;
 80052e8:	88ba      	ldrh	r2, [r7, #4]
 80052ea:	7d7b      	ldrb	r3, [r7, #21]
 80052ec:	1ad2      	subs	r2, r2, r3
 80052ee:	7dbb      	ldrb	r3, [r7, #22]
 80052f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80052f4:	753b      	strb	r3, [r7, #20]
	uint8_t remainder_writes = (buf_length - page_remaining) % page_size;
 80052f6:	88ba      	ldrh	r2, [r7, #4]
 80052f8:	7d7b      	ldrb	r3, [r7, #21]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	7dba      	ldrb	r2, [r7, #22]
 80052fe:	fb93 f1f2 	sdiv	r1, r3, r2
 8005302:	fb01 f202 	mul.w	r2, r1, r2
 8005306:	1a9b      	subs	r3, r3, r2
 8005308:	74fb      	strb	r3, [r7, #19]

	//finish first page
	if((mem_addr + page_remaining) > 0x00 &&
 800530a:	88fa      	ldrh	r2, [r7, #6]
 800530c:	7d7b      	ldrb	r3, [r7, #21]
 800530e:	4413      	add	r3, r2
 8005310:	2b00      	cmp	r3, #0
 8005312:	dd23      	ble.n	800535c <AT24Cxx_write_byte_buffer+0xaa>
		(mem_addr + page_remaining) < AT24Cxx_get_max_addr(dev)){
 8005314:	88fa      	ldrh	r2, [r7, #6]
 8005316:	7d7b      	ldrb	r3, [r7, #21]
 8005318:	18d4      	adds	r4, r2, r3
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f7ff fed8 	bl	80050d0 <AT24Cxx_get_max_addr>
 8005320:	4603      	mov	r3, r0
	if((mem_addr + page_remaining) > 0x00 &&
 8005322:	429c      	cmp	r4, r3
 8005324:	da1a      	bge.n	800535c <AT24Cxx_write_byte_buffer+0xaa>

		while(HAL_I2C_Mem_Write(dev->dev_port,
 8005326:	bf00      	nop
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	88db      	ldrh	r3, [r3, #6]
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	b21b      	sxth	r3, r3
 8005334:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8005338:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Write(dev->dev_port,
 800533a:	b299      	uxth	r1, r3
 800533c:	7d7b      	ldrb	r3, [r7, #21]
 800533e:	b29b      	uxth	r3, r3
 8005340:	88fa      	ldrh	r2, [r7, #6]
 8005342:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8005346:	9402      	str	r4, [sp, #8]
 8005348:	9301      	str	r3, [sp, #4]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	2310      	movs	r3, #16
 8005350:	f002 fac0 	bl	80078d4 <HAL_I2C_Mem_Write>
 8005354:	4603      	mov	r3, r0
				(uint16_t) mem_addr,
				I2C_MEMADD_SIZE_16BIT,
				data_buf,
				page_remaining,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1e6      	bne.n	8005328 <AT24Cxx_write_byte_buffer+0x76>
	if((mem_addr + page_remaining) > 0x00 &&
 800535a:	e002      	b.n	8005362 <AT24Cxx_write_byte_buffer+0xb0>
	}else return at_w_bytes_err;
 800535c:	f06f 0304 	mvn.w	r3, #4
 8005360:	e0a5      	b.n	80054ae <AT24Cxx_write_byte_buffer+0x1fc>

	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 8005362:	2300      	movs	r3, #0
 8005364:	75fb      	strb	r3, [r7, #23]
 8005366:	e04e      	b.n	8005406 <AT24Cxx_write_byte_buffer+0x154>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8005368:	88fa      	ldrh	r2, [r7, #6]
 800536a:	7d7b      	ldrb	r3, [r7, #21]
 800536c:	441a      	add	r2, r3
 800536e:	7dfb      	ldrb	r3, [r7, #23]
 8005370:	7db9      	ldrb	r1, [r7, #22]
 8005372:	fb01 f303 	mul.w	r3, r1, r3
 8005376:	4413      	add	r3, r2
 8005378:	2b00      	cmp	r3, #0
 800537a:	dd3e      	ble.n	80053fa <AT24Cxx_write_byte_buffer+0x148>
			(mem_addr + page_remaining + (current_page * page_size)) < AT24Cxx_get_max_addr(dev)){
 800537c:	88fa      	ldrh	r2, [r7, #6]
 800537e:	7d7b      	ldrb	r3, [r7, #21]
 8005380:	441a      	add	r2, r3
 8005382:	7dfb      	ldrb	r3, [r7, #23]
 8005384:	7db9      	ldrb	r1, [r7, #22]
 8005386:	fb01 f303 	mul.w	r3, r1, r3
 800538a:	18d4      	adds	r4, r2, r3
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f7ff fe9f 	bl	80050d0 <AT24Cxx_get_max_addr>
 8005392:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 8005394:	429c      	cmp	r4, r3
 8005396:	da30      	bge.n	80053fa <AT24Cxx_write_byte_buffer+0x148>

				while(HAL_I2C_Mem_Write(dev->dev_port,
 8005398:	bf00      	nop
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6818      	ldr	r0, [r3, #0]
					AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	88db      	ldrh	r3, [r3, #6]
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	b21b      	sxth	r3, r3
 80053a6:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80053aa:	b21b      	sxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 80053ac:	b29c      	uxth	r4, r3
					(uint16_t) mem_addr + page_remaining + (current_page * page_size),
 80053ae:	7d7b      	ldrb	r3, [r7, #21]
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	4413      	add	r3, r2
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	7dfb      	ldrb	r3, [r7, #23]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	7db9      	ldrb	r1, [r7, #22]
 80053be:	b289      	uxth	r1, r1
 80053c0:	fb01 f303 	mul.w	r3, r1, r3
 80053c4:	b29b      	uxth	r3, r3
				while(HAL_I2C_Mem_Write(dev->dev_port,
 80053c6:	4413      	add	r3, r2
 80053c8:	b29d      	uxth	r5, r3
					I2C_MEMADD_SIZE_16BIT,
					data_buf + page_remaining + (current_page * page_size),
 80053ca:	7d7b      	ldrb	r3, [r7, #21]
 80053cc:	7dfa      	ldrb	r2, [r7, #23]
 80053ce:	7db9      	ldrb	r1, [r7, #22]
 80053d0:	fb01 f202 	mul.w	r2, r1, r2
 80053d4:	4413      	add	r3, r2
				while(HAL_I2C_Mem_Write(dev->dev_port,
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	4413      	add	r3, r2
 80053da:	7dba      	ldrb	r2, [r7, #22]
 80053dc:	b292      	uxth	r2, r2
 80053de:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80053e2:	9102      	str	r1, [sp, #8]
 80053e4:	9201      	str	r2, [sp, #4]
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	2310      	movs	r3, #16
 80053ea:	462a      	mov	r2, r5
 80053ec:	4621      	mov	r1, r4
 80053ee:	f002 fa71 	bl	80078d4 <HAL_I2C_Mem_Write>
 80053f2:	4603      	mov	r3, r0
					page_size,
					AT24Cxx_I2C_TIMOUT) != HAL_OK);
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1d0      	bne.n	800539a <AT24Cxx_write_byte_buffer+0xe8>
		if((mem_addr + page_remaining + (current_page * page_size)) > 0x00 &&
 80053f8:	e002      	b.n	8005400 <AT24Cxx_write_byte_buffer+0x14e>
		}else return at_w_bytes_err;
 80053fa:	f06f 0304 	mvn.w	r3, #4
 80053fe:	e056      	b.n	80054ae <AT24Cxx_write_byte_buffer+0x1fc>
	for(uint8_t current_page = 0; current_page < page_writes; current_page++){
 8005400:	7dfb      	ldrb	r3, [r7, #23]
 8005402:	3301      	adds	r3, #1
 8005404:	75fb      	strb	r3, [r7, #23]
 8005406:	7dfa      	ldrb	r2, [r7, #23]
 8005408:	7d3b      	ldrb	r3, [r7, #20]
 800540a:	429a      	cmp	r2, r3
 800540c:	d3ac      	bcc.n	8005368 <AT24Cxx_write_byte_buffer+0xb6>
	}

	if(remainder_writes){
 800540e:	7cfb      	ldrb	r3, [r7, #19]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d04b      	beq.n	80054ac <AT24Cxx_write_byte_buffer+0x1fa>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8005414:	88fa      	ldrh	r2, [r7, #6]
 8005416:	7d7b      	ldrb	r3, [r7, #21]
 8005418:	441a      	add	r2, r3
 800541a:	7d3b      	ldrb	r3, [r7, #20]
 800541c:	7db9      	ldrb	r1, [r7, #22]
 800541e:	fb01 f303 	mul.w	r3, r1, r3
 8005422:	4413      	add	r3, r2
 8005424:	2b00      	cmp	r3, #0
 8005426:	dd3e      	ble.n	80054a6 <AT24Cxx_write_byte_buffer+0x1f4>
			(mem_addr + page_remaining + (page_writes * page_size)) < AT24Cxx_get_max_addr(dev)){
 8005428:	88fa      	ldrh	r2, [r7, #6]
 800542a:	7d7b      	ldrb	r3, [r7, #21]
 800542c:	441a      	add	r2, r3
 800542e:	7d3b      	ldrb	r3, [r7, #20]
 8005430:	7db9      	ldrb	r1, [r7, #22]
 8005432:	fb01 f303 	mul.w	r3, r1, r3
 8005436:	18d4      	adds	r4, r2, r3
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f7ff fe49 	bl	80050d0 <AT24Cxx_get_max_addr>
 800543e:	4603      	mov	r3, r0
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 8005440:	429c      	cmp	r4, r3
 8005442:	da30      	bge.n	80054a6 <AT24Cxx_write_byte_buffer+0x1f4>

			while(HAL_I2C_Mem_Write(dev->dev_port,
 8005444:	bf00      	nop
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_W | (dev->dev_addr << 1) ,
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	88db      	ldrh	r3, [r3, #6]
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	b21b      	sxth	r3, r3
 8005452:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8005456:	b21b      	sxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 8005458:	b29c      	uxth	r4, r3
				(uint16_t) mem_addr + page_remaining + (page_writes * page_size),
 800545a:	7d7b      	ldrb	r3, [r7, #21]
 800545c:	b29a      	uxth	r2, r3
 800545e:	88fb      	ldrh	r3, [r7, #6]
 8005460:	4413      	add	r3, r2
 8005462:	b29a      	uxth	r2, r3
 8005464:	7d3b      	ldrb	r3, [r7, #20]
 8005466:	b29b      	uxth	r3, r3
 8005468:	7db9      	ldrb	r1, [r7, #22]
 800546a:	b289      	uxth	r1, r1
 800546c:	fb01 f303 	mul.w	r3, r1, r3
 8005470:	b29b      	uxth	r3, r3
			while(HAL_I2C_Mem_Write(dev->dev_port,
 8005472:	4413      	add	r3, r2
 8005474:	b29d      	uxth	r5, r3
				I2C_MEMADD_SIZE_16BIT,
				data_buf + page_remaining + (page_writes * page_size),
 8005476:	7d7b      	ldrb	r3, [r7, #21]
 8005478:	7d3a      	ldrb	r2, [r7, #20]
 800547a:	7db9      	ldrb	r1, [r7, #22]
 800547c:	fb01 f202 	mul.w	r2, r1, r2
 8005480:	4413      	add	r3, r2
			while(HAL_I2C_Mem_Write(dev->dev_port,
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	4413      	add	r3, r2
 8005486:	7cfa      	ldrb	r2, [r7, #19]
 8005488:	b292      	uxth	r2, r2
 800548a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800548e:	9102      	str	r1, [sp, #8]
 8005490:	9201      	str	r2, [sp, #4]
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	2310      	movs	r3, #16
 8005496:	462a      	mov	r2, r5
 8005498:	4621      	mov	r1, r4
 800549a:	f002 fa1b 	bl	80078d4 <HAL_I2C_Mem_Write>
 800549e:	4603      	mov	r3, r0
				remainder_writes,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1d0      	bne.n	8005446 <AT24Cxx_write_byte_buffer+0x194>
		if((mem_addr + page_remaining + (page_writes * page_size)) > 0x00 &&
 80054a4:	e002      	b.n	80054ac <AT24Cxx_write_byte_buffer+0x1fa>
		}else return at_w_bytes_err;
 80054a6:	f06f 0304 	mvn.w	r3, #4
 80054aa:	e000      	b.n	80054ae <AT24Cxx_write_byte_buffer+0x1fc>
	}

	return at_ok;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bdb0      	pop	{r4, r5, r7, pc}

080054b6 <AT24Cxx_read_byte_buffer>:
	return at_r_byte_err;
}

AT24Cxx_ERR_TypeDef AT24Cxx_read_byte_buffer( AT24Cxx_device_t* dev,
		uint8_t* data_buf, uint16_t mem_addr, uint16_t buf_length)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b088      	sub	sp, #32
 80054ba:	af04      	add	r7, sp, #16
 80054bc:	60f8      	str	r0, [r7, #12]
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	4611      	mov	r1, r2
 80054c2:	461a      	mov	r2, r3
 80054c4:	460b      	mov	r3, r1
 80054c6:	80fb      	strh	r3, [r7, #6]
 80054c8:	4613      	mov	r3, r2
 80054ca:	80bb      	strh	r3, [r7, #4]
	if(mem_addr > 0x00 && mem_addr < AT24Cxx_get_max_addr(dev)){
 80054cc:	88fb      	ldrh	r3, [r7, #6]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d022      	beq.n	8005518 <AT24Cxx_read_byte_buffer+0x62>
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f7ff fdfc 	bl	80050d0 <AT24Cxx_get_max_addr>
 80054d8:	4603      	mov	r3, r0
 80054da:	461a      	mov	r2, r3
 80054dc:	88fb      	ldrh	r3, [r7, #6]
 80054de:	4293      	cmp	r3, r2
 80054e0:	d21a      	bcs.n	8005518 <AT24Cxx_read_byte_buffer+0x62>
		while(HAL_I2C_Mem_Read(dev->dev_port,
 80054e2:	bf00      	nop
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6818      	ldr	r0, [r3, #0]
				AT24Cxx_BASE_ADDR_R | (dev->dev_addr << 1) ,
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	88db      	ldrh	r3, [r3, #6]
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	b21b      	sxth	r3, r3
 80054f0:	f043 03a1 	orr.w	r3, r3, #161	@ 0xa1
 80054f4:	b21b      	sxth	r3, r3
		while(HAL_I2C_Mem_Read(dev->dev_port,
 80054f6:	b299      	uxth	r1, r3
 80054f8:	88fa      	ldrh	r2, [r7, #6]
 80054fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80054fe:	9302      	str	r3, [sp, #8]
 8005500:	88bb      	ldrh	r3, [r7, #4]
 8005502:	9301      	str	r3, [sp, #4]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	2310      	movs	r3, #16
 800550a:	f002 fadd 	bl	8007ac8 <HAL_I2C_Mem_Read>
 800550e:	4603      	mov	r3, r0
				(uint16_t) mem_addr, I2C_MEMADD_SIZE_16BIT, data_buf, buf_length,
				AT24Cxx_I2C_TIMOUT) != HAL_OK);
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1e7      	bne.n	80054e4 <AT24Cxx_read_byte_buffer+0x2e>
		return at_ok;
 8005514:	2300      	movs	r3, #0
 8005516:	e001      	b.n	800551c <AT24Cxx_read_byte_buffer+0x66>
	}
	return at_r_bytes_err;
 8005518:	f06f 0306 	mvn.w	r3, #6
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <constrain>:
int16_t qPercent(fix12_t q);
int16_t qMultiply(fix12_t q, int16_t input);
fix12_t qConstruct(int16_t num, int16_t den);

static int constrain(int amt, int low, int high)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	429a      	cmp	r2, r3
 8005536:	da01      	bge.n	800553c <constrain+0x18>
        return low;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	e006      	b.n	800554a <constrain+0x26>
    else if (amt > high)
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	429a      	cmp	r2, r3
 8005542:	dd01      	ble.n	8005548 <constrain+0x24>
        return high;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	e000      	b.n	800554a <constrain+0x26>
    else
        return amt;
 8005548:	68fb      	ldr	r3, [r7, #12]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr

08005554 <attitude_ctrl_init>:

float ab_speed_filted;

float v_estimate;

void attitude_ctrl_init(){
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af02      	add	r7, sp, #8

   speed_filter_reset = TRUE;
 800555a:	4b2d      	ldr	r3, [pc, #180]	@ (8005610 <attitude_ctrl_init+0xbc>)
 800555c:	2201      	movs	r2, #1
 800555e:	701a      	strb	r2, [r3, #0]
   ab_speed_filted = 0.0f;
 8005560:	4b2c      	ldr	r3, [pc, #176]	@ (8005614 <attitude_ctrl_init+0xc0>)
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	601a      	str	r2, [r3, #0]
   // init pid 
   pid_init(&roll_angle_pid,4,0,0,F_CUT_OFF,100);
 8005568:	4b2b      	ldr	r3, [pc, #172]	@ (8005618 <attitude_ctrl_init+0xc4>)
 800556a:	9301      	str	r3, [sp, #4]
 800556c:	f04f 0300 	mov.w	r3, #0
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	f04f 0300 	mov.w	r3, #0
 8005576:	f04f 0200 	mov.w	r2, #0
 800557a:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800557e:	4827      	ldr	r0, [pc, #156]	@ (800561c <attitude_ctrl_init+0xc8>)
 8005580:	f7fe f8ff 	bl	8003782 <pid_init>
   pid_init(&roll_rate_pid,5,2.5,0,F_CUT_OFF,300);
 8005584:	4b26      	ldr	r3, [pc, #152]	@ (8005620 <attitude_ctrl_init+0xcc>)
 8005586:	9301      	str	r3, [sp, #4]
 8005588:	f04f 0300 	mov.w	r3, #0
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	f04f 0300 	mov.w	r3, #0
 8005592:	4a24      	ldr	r2, [pc, #144]	@ (8005624 <attitude_ctrl_init+0xd0>)
 8005594:	4924      	ldr	r1, [pc, #144]	@ (8005628 <attitude_ctrl_init+0xd4>)
 8005596:	4825      	ldr	r0, [pc, #148]	@ (800562c <attitude_ctrl_init+0xd8>)
 8005598:	f7fe f8f3 	bl	8003782 <pid_init>

   pid_init(&pitch_angle_pid,4,0,0,F_CUT_OFF,100);
 800559c:	4b1e      	ldr	r3, [pc, #120]	@ (8005618 <attitude_ctrl_init+0xc4>)
 800559e:	9301      	str	r3, [sp, #4]
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	f04f 0300 	mov.w	r3, #0
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80055b2:	481f      	ldr	r0, [pc, #124]	@ (8005630 <attitude_ctrl_init+0xdc>)
 80055b4:	f7fe f8e5 	bl	8003782 <pid_init>
   pid_init(&pitch_rate_pid,5,2.5,0,F_CUT_OFF,300);
 80055b8:	4b19      	ldr	r3, [pc, #100]	@ (8005620 <attitude_ctrl_init+0xcc>)
 80055ba:	9301      	str	r3, [sp, #4]
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	f04f 0300 	mov.w	r3, #0
 80055c6:	4a17      	ldr	r2, [pc, #92]	@ (8005624 <attitude_ctrl_init+0xd0>)
 80055c8:	4917      	ldr	r1, [pc, #92]	@ (8005628 <attitude_ctrl_init+0xd4>)
 80055ca:	481a      	ldr	r0, [pc, #104]	@ (8005634 <attitude_ctrl_init+0xe0>)
 80055cc:	f7fe f8d9 	bl	8003782 <pid_init>

   // rate 
   pid_init(&roll_rate_t,4,0,0,F_CUT_OFF,300);
 80055d0:	4b13      	ldr	r3, [pc, #76]	@ (8005620 <attitude_ctrl_init+0xcc>)
 80055d2:	9301      	str	r3, [sp, #4]
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	f04f 0300 	mov.w	r3, #0
 80055de:	f04f 0200 	mov.w	r2, #0
 80055e2:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80055e6:	4814      	ldr	r0, [pc, #80]	@ (8005638 <attitude_ctrl_init+0xe4>)
 80055e8:	f7fe f8cb 	bl	8003782 <pid_init>
   pid_init(&pitch_rate_t,4,0,0,F_CUT_OFF,300);
 80055ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005620 <attitude_ctrl_init+0xcc>)
 80055ee:	9301      	str	r3, [sp, #4]
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	f04f 0300 	mov.w	r3, #0
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8005602:	480e      	ldr	r0, [pc, #56]	@ (800563c <attitude_ctrl_init+0xe8>)
 8005604:	f7fe f8bd 	bl	8003782 <pid_init>

}
 8005608:	bf00      	nop
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	20000b0c 	.word	0x20000b0c
 8005614:	20000be8 	.word	0x20000be8
 8005618:	42c80000 	.word	0x42c80000
 800561c:	20000b58 	.word	0x20000b58
 8005620:	43960000 	.word	0x43960000
 8005624:	40200000 	.word	0x40200000
 8005628:	40a00000 	.word	0x40a00000
 800562c:	20000b10 	.word	0x20000b10
 8005630:	20000b7c 	.word	0x20000b7c
 8005634:	20000b34 	.word	0x20000b34
 8005638:	20000ba0 	.word	0x20000ba0
 800563c:	20000bc4 	.word	0x20000bc4

08005640 <rate_stabilize>:
        //pitch axis
        float p_angle_pid =  pid_calculate(&pitch_angle_pid,pitch_measurement,pitch_desired + pitch_trim,dt);
        float p_rate_pid  = -pid_calculate(&pitch_rate_pid,-pitch_rate_measurement,p_angle_pid,dt);
*/

void rate_stabilize(float dt){
 8005640:	b590      	push	{r4, r7, lr}
 8005642:	b08f      	sub	sp, #60	@ 0x3c
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
    uint16_t servoL;
    uint16_t servoR;

    v_estimate = dynamic_speed_esitmate(dt);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f8e1 	bl	8005810 <dynamic_speed_esitmate>
 800564e:	4603      	mov	r3, r0
 8005650:	4a67      	ldr	r2, [pc, #412]	@ (80057f0 <rate_stabilize+0x1b0>)
 8005652:	6013      	str	r3, [r2, #0]

    if(ibusChannelData[CH5] > CHANNEL_HIGH ){
 8005654:	4b67      	ldr	r3, [pc, #412]	@ (80057f4 <rate_stabilize+0x1b4>)
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 800565c:	4293      	cmp	r3, r2
 800565e:	f240 8088 	bls.w	8005772 <rate_stabilize+0x132>
        float roll_rate_measurement = AHRS.roll_rate;
 8005662:	4b65      	ldr	r3, [pc, #404]	@ (80057f8 <rate_stabilize+0x1b8>)
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	62bb      	str	r3, [r7, #40]	@ 0x28
        float pitch_rate_measurement = AHRS.pitch_rate;
 8005668:	4b63      	ldr	r3, [pc, #396]	@ (80057f8 <rate_stabilize+0x1b8>)
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	627b      	str	r3, [r7, #36]	@ 0x24

        float roll_rate_desired = ((int)ibusChannelData[0] - 1500)*0.5f;
 800566e:	4b61      	ldr	r3, [pc, #388]	@ (80057f4 <rate_stabilize+0x1b4>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8005676:	4618      	mov	r0, r3
 8005678:	f7fb fb78 	bl	8000d6c <__aeabi_i2f>
 800567c:	4603      	mov	r3, r0
 800567e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005682:	4618      	mov	r0, r3
 8005684:	f7fb fbc6 	bl	8000e14 <__aeabi_fmul>
 8005688:	4603      	mov	r3, r0
 800568a:	623b      	str	r3, [r7, #32]
        float pitch_rate_desired = ((int)ibusChannelData[1] - 1500)*-0.5f;
 800568c:	4b59      	ldr	r3, [pc, #356]	@ (80057f4 <rate_stabilize+0x1b4>)
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8005694:	4618      	mov	r0, r3
 8005696:	f7fb fb69 	bl	8000d6c <__aeabi_i2f>
 800569a:	4603      	mov	r3, r0
 800569c:	f04f 413f 	mov.w	r1, #3204448256	@ 0xbf000000
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7fb fbb7 	bl	8000e14 <__aeabi_fmul>
 80056a6:	4603      	mov	r3, r0
 80056a8:	61fb      	str	r3, [r7, #28]

        // pid scale with velocity
        float pid_velo_scale = 1.0/(1 + sq(v_estimate)*0.0035f);
 80056aa:	4b51      	ldr	r3, [pc, #324]	@ (80057f0 <rate_stabilize+0x1b0>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a50      	ldr	r2, [pc, #320]	@ (80057f0 <rate_stabilize+0x1b0>)
 80056b0:	6812      	ldr	r2, [r2, #0]
 80056b2:	4611      	mov	r1, r2
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7fb fbad 	bl	8000e14 <__aeabi_fmul>
 80056ba:	4603      	mov	r3, r0
 80056bc:	494f      	ldr	r1, [pc, #316]	@ (80057fc <rate_stabilize+0x1bc>)
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fb fba8 	bl	8000e14 <__aeabi_fmul>
 80056c4:	4603      	mov	r3, r0
 80056c6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fb fa9a 	bl	8000c04 <__addsf3>
 80056d0:	4603      	mov	r3, r0
 80056d2:	4619      	mov	r1, r3
 80056d4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80056d8:	f7fb fc50 	bl	8000f7c <__aeabi_fdiv>
 80056dc:	4603      	mov	r3, r0
 80056de:	61bb      	str	r3, [r7, #24]

        float r_rate  =  pid_calculate(&roll_rate_t, roll_rate_measurement,roll_rate_desired,dt);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a3a      	ldr	r2, [r7, #32]
 80056e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056e6:	4846      	ldr	r0, [pc, #280]	@ (8005800 <rate_stabilize+0x1c0>)
 80056e8:	f7fe f876 	bl	80037d8 <pid_calculate>
 80056ec:	6178      	str	r0, [r7, #20]
        float p_rate  =  pid_calculate(&pitch_rate_t, pitch_rate_measurement,pitch_rate_desired,dt);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69fa      	ldr	r2, [r7, #28]
 80056f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056f4:	4843      	ldr	r0, [pc, #268]	@ (8005804 <rate_stabilize+0x1c4>)
 80056f6:	f7fe f86f 	bl	80037d8 <pid_calculate>
 80056fa:	6138      	str	r0, [r7, #16]
        
        r_rate *= pid_velo_scale;
 80056fc:	69b9      	ldr	r1, [r7, #24]
 80056fe:	6978      	ldr	r0, [r7, #20]
 8005700:	f7fb fb88 	bl	8000e14 <__aeabi_fmul>
 8005704:	4603      	mov	r3, r0
 8005706:	617b      	str	r3, [r7, #20]
        p_rate *= pid_velo_scale;
 8005708:	69b9      	ldr	r1, [r7, #24]
 800570a:	6938      	ldr	r0, [r7, #16]
 800570c:	f7fb fb82 	bl	8000e14 <__aeabi_fmul>
 8005710:	4603      	mov	r3, r0
 8005712:	613b      	str	r3, [r7, #16]

        int s1 = 1500 - ibusChannelData[CH2];
 8005714:	4b37      	ldr	r3, [pc, #220]	@ (80057f4 <rate_stabilize+0x1b4>)
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 800571c:	3304      	adds	r3, #4
 800571e:	60fb      	str	r3, [r7, #12]

        servoL = 1500 - r_rate + s1;// - pitch_pid_filted;
 8005720:	6979      	ldr	r1, [r7, #20]
 8005722:	4839      	ldr	r0, [pc, #228]	@ (8005808 <rate_stabilize+0x1c8>)
 8005724:	f7fb fa6c 	bl	8000c00 <__aeabi_fsub>
 8005728:	4603      	mov	r3, r0
 800572a:	461c      	mov	r4, r3
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f7fb fb1d 	bl	8000d6c <__aeabi_i2f>
 8005732:	4603      	mov	r3, r0
 8005734:	4619      	mov	r1, r3
 8005736:	4620      	mov	r0, r4
 8005738:	f7fb fa64 	bl	8000c04 <__addsf3>
 800573c:	4603      	mov	r3, r0
 800573e:	4618      	mov	r0, r3
 8005740:	f7fb fd6a 	bl	8001218 <__aeabi_f2uiz>
 8005744:	4603      	mov	r3, r0
 8005746:	86fb      	strh	r3, [r7, #54]	@ 0x36
        servoR = 1500 + r_rate + s1;// - pitch_pid_filted;
 8005748:	492f      	ldr	r1, [pc, #188]	@ (8005808 <rate_stabilize+0x1c8>)
 800574a:	6978      	ldr	r0, [r7, #20]
 800574c:	f7fb fa5a 	bl	8000c04 <__addsf3>
 8005750:	4603      	mov	r3, r0
 8005752:	461c      	mov	r4, r3
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f7fb fb09 	bl	8000d6c <__aeabi_i2f>
 800575a:	4603      	mov	r3, r0
 800575c:	4619      	mov	r1, r3
 800575e:	4620      	mov	r0, r4
 8005760:	f7fb fa50 	bl	8000c04 <__addsf3>
 8005764:	4603      	mov	r3, r0
 8005766:	4618      	mov	r0, r3
 8005768:	f7fb fd56 	bl	8001218 <__aeabi_f2uiz>
 800576c:	4603      	mov	r3, r0
 800576e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005770:	e01d      	b.n	80057ae <rate_stabilize+0x16e>
        
     }else{
        int s1 = 1500 - ibusChannelData[CH1];
 8005772:	4b20      	ldr	r3, [pc, #128]	@ (80057f4 <rate_stabilize+0x1b4>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 800577a:	3304      	adds	r3, #4
 800577c:	633b      	str	r3, [r7, #48]	@ 0x30
        int s2 = 1500 - ibusChannelData[CH2];
 800577e:	4b1d      	ldr	r3, [pc, #116]	@ (80057f4 <rate_stabilize+0x1b4>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8005786:	3304      	adds	r3, #4
 8005788:	62fb      	str	r3, [r7, #44]	@ 0x2c
            
        servoL = 1500 + s1 + s2;
 800578a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578c:	b29a      	uxth	r2, r3
 800578e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005790:	b29b      	uxth	r3, r3
 8005792:	4413      	add	r3, r2
 8005794:	b29b      	uxth	r3, r3
 8005796:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800579a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        servoR = 1500 - s1 + s2;
 800579c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800579e:	b29a      	uxth	r2, r3
 80057a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 80057ac:	86bb      	strh	r3, [r7, #52]	@ 0x34
    }

    servoL = constrain(servoL,SERVO_MIN_PWM,SERVO_MAX_PWM);
 80057ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80057b0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80057b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7ff feb3 	bl	8005524 <constrain>
 80057be:	4603      	mov	r3, r0
 80057c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    servoR = constrain(servoR,SERVO_MIN_PWM,SERVO_MAX_PWM);
 80057c2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80057c4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80057c8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7ff fea9 	bl	8005524 <constrain>
 80057d2:	4603      	mov	r3, r0
 80057d4:	86bb      	strh	r3, [r7, #52]	@ 0x34

    write_pwm_ctrl(ibusChannelData[CH3],servoL,servoR);
 80057d6:	4b07      	ldr	r3, [pc, #28]	@ (80057f4 <rate_stabilize+0x1b4>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	b29b      	uxth	r3, r3
 80057dc:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80057de:	8ef9      	ldrh	r1, [r7, #54]	@ 0x36
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7fe f95f 	bl	8003aa4 <write_pwm_ctrl>

}
 80057e6:	bf00      	nop
 80057e8:	373c      	adds	r7, #60	@ 0x3c
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd90      	pop	{r4, r7, pc}
 80057ee:	bf00      	nop
 80057f0:	20000bec 	.word	0x20000bec
 80057f4:	200000d0 	.word	0x200000d0
 80057f8:	200004c8 	.word	0x200004c8
 80057fc:	3b656042 	.word	0x3b656042
 8005800:	20000ba0 	.word	0x20000ba0
 8005804:	20000bc4 	.word	0x20000bc4
 8005808:	44bb8000 	.word	0x44bb8000
 800580c:	00000000 	.word	0x00000000

08005810 <dynamic_speed_esitmate>:
static float Cd = 0.01;
static float weigh = 0.8; // kg

static float velocity = 0;

float dynamic_speed_esitmate(float dt){
 8005810:	b5b0      	push	{r4, r5, r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
    float Thrust = (float)(ibusChannelData[CH3] - 1000) * 0.009;
 8005818:	4b41      	ldr	r3, [pc, #260]	@ (8005920 <dynamic_speed_esitmate+0x110>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8005820:	4618      	mov	r0, r3
 8005822:	f7fb fa9f 	bl	8000d64 <__aeabi_ui2f>
 8005826:	4603      	mov	r3, r0
 8005828:	4618      	mov	r0, r3
 800582a:	f7fa fe65 	bl	80004f8 <__aeabi_f2d>
 800582e:	a33a      	add	r3, pc, #232	@ (adr r3, 8005918 <dynamic_speed_esitmate+0x108>)
 8005830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005834:	f7fa feb8 	bl	80005a8 <__aeabi_dmul>
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	4610      	mov	r0, r2
 800583e:	4619      	mov	r1, r3
 8005840:	f7fb f98a 	bl	8000b58 <__aeabi_d2f>
 8005844:	4603      	mov	r3, r0
 8005846:	60fb      	str	r3, [r7, #12]
    float acc = (Thrust - sign(velocity)*sq(velocity)*Cd + weigh * gravity * sin_approx(AHRS.pitch*RAD))/weigh;
 8005848:	4b36      	ldr	r3, [pc, #216]	@ (8005924 <dynamic_speed_esitmate+0x114>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f04f 0100 	mov.w	r1, #0
 8005850:	4618      	mov	r0, r3
 8005852:	f7fb fc9b 	bl	800118c <__aeabi_fcmpgt>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <dynamic_speed_esitmate+0x52>
 800585c:	f04f 547e 	mov.w	r4, #1065353216	@ 0x3f800000
 8005860:	e000      	b.n	8005864 <dynamic_speed_esitmate+0x54>
 8005862:	4c31      	ldr	r4, [pc, #196]	@ (8005928 <dynamic_speed_esitmate+0x118>)
 8005864:	4b2f      	ldr	r3, [pc, #188]	@ (8005924 <dynamic_speed_esitmate+0x114>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a2e      	ldr	r2, [pc, #184]	@ (8005924 <dynamic_speed_esitmate+0x114>)
 800586a:	6812      	ldr	r2, [r2, #0]
 800586c:	4611      	mov	r1, r2
 800586e:	4618      	mov	r0, r3
 8005870:	f7fb fad0 	bl	8000e14 <__aeabi_fmul>
 8005874:	4603      	mov	r3, r0
 8005876:	4619      	mov	r1, r3
 8005878:	4620      	mov	r0, r4
 800587a:	f7fb facb 	bl	8000e14 <__aeabi_fmul>
 800587e:	4603      	mov	r3, r0
 8005880:	461a      	mov	r2, r3
 8005882:	4b2a      	ldr	r3, [pc, #168]	@ (800592c <dynamic_speed_esitmate+0x11c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4619      	mov	r1, r3
 8005888:	4610      	mov	r0, r2
 800588a:	f7fb fac3 	bl	8000e14 <__aeabi_fmul>
 800588e:	4603      	mov	r3, r0
 8005890:	4619      	mov	r1, r3
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f7fb f9b4 	bl	8000c00 <__aeabi_fsub>
 8005898:	4603      	mov	r3, r0
 800589a:	461c      	mov	r4, r3
 800589c:	4b24      	ldr	r3, [pc, #144]	@ (8005930 <dynamic_speed_esitmate+0x120>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a24      	ldr	r2, [pc, #144]	@ (8005934 <dynamic_speed_esitmate+0x124>)
 80058a2:	6812      	ldr	r2, [r2, #0]
 80058a4:	4611      	mov	r1, r2
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fb fab4 	bl	8000e14 <__aeabi_fmul>
 80058ac:	4603      	mov	r3, r0
 80058ae:	461d      	mov	r5, r3
 80058b0:	4b21      	ldr	r3, [pc, #132]	@ (8005938 <dynamic_speed_esitmate+0x128>)
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	4921      	ldr	r1, [pc, #132]	@ (800593c <dynamic_speed_esitmate+0x12c>)
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fb faac 	bl	8000e14 <__aeabi_fmul>
 80058bc:	4603      	mov	r3, r0
 80058be:	4618      	mov	r0, r3
 80058c0:	f7fd fdaa 	bl	8003418 <sin_approx>
 80058c4:	4603      	mov	r3, r0
 80058c6:	4619      	mov	r1, r3
 80058c8:	4628      	mov	r0, r5
 80058ca:	f7fb faa3 	bl	8000e14 <__aeabi_fmul>
 80058ce:	4603      	mov	r3, r0
 80058d0:	4619      	mov	r1, r3
 80058d2:	4620      	mov	r0, r4
 80058d4:	f7fb f996 	bl	8000c04 <__addsf3>
 80058d8:	4603      	mov	r3, r0
 80058da:	461a      	mov	r2, r3
 80058dc:	4b14      	ldr	r3, [pc, #80]	@ (8005930 <dynamic_speed_esitmate+0x120>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4619      	mov	r1, r3
 80058e2:	4610      	mov	r0, r2
 80058e4:	f7fb fb4a 	bl	8000f7c <__aeabi_fdiv>
 80058e8:	4603      	mov	r3, r0
 80058ea:	60bb      	str	r3, [r7, #8]
    velocity += acc*dt;
 80058ec:	6879      	ldr	r1, [r7, #4]
 80058ee:	68b8      	ldr	r0, [r7, #8]
 80058f0:	f7fb fa90 	bl	8000e14 <__aeabi_fmul>
 80058f4:	4603      	mov	r3, r0
 80058f6:	461a      	mov	r2, r3
 80058f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005924 <dynamic_speed_esitmate+0x114>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4619      	mov	r1, r3
 80058fe:	4610      	mov	r0, r2
 8005900:	f7fb f980 	bl	8000c04 <__addsf3>
 8005904:	4603      	mov	r3, r0
 8005906:	461a      	mov	r2, r3
 8005908:	4b06      	ldr	r3, [pc, #24]	@ (8005924 <dynamic_speed_esitmate+0x114>)
 800590a:	601a      	str	r2, [r3, #0]
    return velocity;
 800590c:	4b05      	ldr	r3, [pc, #20]	@ (8005924 <dynamic_speed_esitmate+0x114>)
 800590e:	681b      	ldr	r3, [r3, #0]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bdb0      	pop	{r4, r5, r7, pc}
 8005918:	8d4fdf3b 	.word	0x8d4fdf3b
 800591c:	3f826e97 	.word	0x3f826e97
 8005920:	200000d0 	.word	0x200000d0
 8005924:	20000bf0 	.word	0x20000bf0
 8005928:	bf800000 	.word	0xbf800000
 800592c:	20000030 	.word	0x20000030
 8005930:	20000034 	.word	0x20000034
 8005934:	2000002c 	.word	0x2000002c
 8005938:	200004c8 	.word	0x200004c8
 800593c:	3c8efa35 	.word	0x3c8efa35

08005940 <mapI>:
}


#define Feq2Sec(F) (1.0f/F)

static int32_t mapI(int val, int min_in,int max_in,int min_out, int max_out){
 8005940:	b480      	push	{r7}
 8005942:	b087      	sub	sp, #28
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
 800594c:	603b      	str	r3, [r7, #0]
   int out = (val - min_in)*(max_out - min_out)/(max_in - min_in);
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	6a39      	ldr	r1, [r7, #32]
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	1a8a      	subs	r2, r1, r2
 800595a:	fb03 f202 	mul.w	r2, r3, r2
 800595e:	6879      	ldr	r1, [r7, #4]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	1acb      	subs	r3, r1, r3
 8005964:	fb92 f3f3 	sdiv	r3, r2, r3
 8005968:	617b      	str	r3, [r7, #20]
}
 800596a:	bf00      	nop
 800596c:	4618      	mov	r0, r3
 800596e:	371c      	adds	r7, #28
 8005970:	46bd      	mov	sp, r7
 8005972:	bc80      	pop	{r7}
 8005974:	4770      	bx	lr

08005976 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8005976:	b480      	push	{r7}
 8005978:	b085      	sub	sp, #20
 800597a:	af00      	add	r7, sp, #0
 800597c:	4603      	mov	r3, r0
 800597e:	6039      	str	r1, [r7, #0]
 8005980:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	b2da      	uxtb	r2, r3
 8005988:	79fb      	ldrb	r3, [r7, #7]
 800598a:	4053      	eors	r3, r2
 800598c:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 800598e:	7bfb      	ldrb	r3, [r7, #15]
 8005990:	011b      	lsls	r3, r3, #4
 8005992:	b25a      	sxtb	r2, r3
 8005994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005998:	4053      	eors	r3, r2
 800599a:	b25b      	sxtb	r3, r3
 800599c:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	0a1b      	lsrs	r3, r3, #8
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	b21a      	sxth	r2, r3
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
 80059aa:	021b      	lsls	r3, r3, #8
 80059ac:	b21b      	sxth	r3, r3
 80059ae:	4053      	eors	r3, r2
 80059b0:	b21a      	sxth	r2, r3
 80059b2:	7bfb      	ldrb	r3, [r7, #15]
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	b21b      	sxth	r3, r3
 80059b8:	4053      	eors	r3, r2
 80059ba:	b21a      	sxth	r2, r3
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
 80059be:	091b      	lsrs	r3, r3, #4
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	b21b      	sxth	r3, r3
 80059c4:	4053      	eors	r3, r2
 80059c6:	b21b      	sxth	r3, r3
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	801a      	strh	r2, [r3, #0]
}
 80059ce:	bf00      	nop
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bc80      	pop	{r7}
 80059d6:	4770      	bx	lr

080059d8 <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80059e6:	801a      	strh	r2, [r3, #0]
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bc80      	pop	{r7}
 80059f0:	4770      	bx	lr

080059f2 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b084      	sub	sp, #16
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	460b      	mov	r3, r1
 80059fc:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 80059fe:	f107 030e 	add.w	r3, r7, #14
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff ffe8 	bl	80059d8 <crc_init>
	while (length--) {
 8005a08:	e009      	b.n	8005a1e <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	f107 020e 	add.w	r2, r7, #14
 8005a16:	4611      	mov	r1, r2
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7ff ffac 	bl	8005976 <crc_accumulate>
	while (length--) {
 8005a1e:	887b      	ldrh	r3, [r7, #2]
 8005a20:	1e5a      	subs	r2, r3, #1
 8005a22:	807a      	strh	r2, [r7, #2]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1f0      	bne.n	8005a0a <crc_calculate+0x18>
        }
        return crcTmp;
 8005a28:	89fb      	ldrh	r3, [r7, #14]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b086      	sub	sp, #24
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	60f8      	str	r0, [r7, #12]
 8005a3a:	60b9      	str	r1, [r7, #8]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	617b      	str	r3, [r7, #20]
	while (length--) {
 8005a44:	e007      	b.n	8005a56 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	617a      	str	r2, [r7, #20]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	68f9      	ldr	r1, [r7, #12]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7ff ff90 	bl	8005976 <crc_accumulate>
	while (length--) {
 8005a56:	88fb      	ldrh	r3, [r7, #6]
 8005a58:	1e5a      	subs	r2, r3, #1
 8005a5a:	80fa      	strh	r2, [r7, #6]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1f2      	bne.n	8005a46 <crc_accumulate_buffer+0x14>
        }
}
 8005a60:	bf00      	nop
 8005a62:	bf00      	nop
 8005a64:	3718      	adds	r7, #24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
	...

08005a6c <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	4603      	mov	r3, r0
 8005a74:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8005a76:	79fa      	ldrb	r2, [r7, #7]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	4413      	add	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4a03      	ldr	r2, [pc, #12]	@ (8005a90 <mavlink_get_channel_status+0x24>)
 8005a82:	4413      	add	r3, r2
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bc80      	pop	{r7}
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	20000dd8 	.word	0x20000dd8

08005a94 <mavlink_finalize_message_chan>:
						      uint8_t chan, uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						      uint8_t chan, uint8_t length)
#endif
{
 8005a94:	b590      	push	{r4, r7, lr}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	4608      	mov	r0, r1
 8005a9e:	4611      	mov	r1, r2
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	70fb      	strb	r3, [r7, #3]
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	70bb      	strb	r3, [r7, #2]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	707b      	strb	r3, [r7, #1]
	// This code part is the same for all messages;
	msg->magic = MAVLINK_STX;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	22fe      	movs	r2, #254	@ 0xfe
 8005ab2:	709a      	strb	r2, [r3, #2]
	msg->len = length;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	7e3a      	ldrb	r2, [r7, #24]
 8005ab8:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	78fa      	ldrb	r2, [r7, #3]
 8005abe:	715a      	strb	r2, [r3, #5]
	msg->compid = component_id;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	78ba      	ldrb	r2, [r7, #2]
 8005ac4:	719a      	strb	r2, [r3, #6]
	// One sequence number per component
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 8005ac6:	787b      	ldrb	r3, [r7, #1]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7ff ffcf 	bl	8005a6c <mavlink_get_channel_status>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	799a      	ldrb	r2, [r3, #6]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	711a      	strb	r2, [r3, #4]
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 8005ad6:	787b      	ldrb	r3, [r7, #1]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7ff ffc7 	bl	8005a6c <mavlink_get_channel_status>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	799c      	ldrb	r4, [r3, #6]
 8005ae2:	787b      	ldrb	r3, [r7, #1]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7ff ffc1 	bl	8005a6c <mavlink_get_channel_status>
 8005aea:	4603      	mov	r3, r0
 8005aec:	1c62      	adds	r2, r4, #1
 8005aee:	b2d2      	uxtb	r2, r2
 8005af0:	719a      	strb	r2, [r3, #6]
	msg->checksum = crc_calculate(((const uint8_t*)(msg)) + 3, MAVLINK_CORE_HEADER_LEN);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	3303      	adds	r3, #3
 8005af6:	2105      	movs	r1, #5
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff ff7a 	bl	80059f2 <crc_calculate>
 8005afe:	4603      	mov	r3, r0
 8005b00:	461a      	mov	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	801a      	strh	r2, [r3, #0]
	crc_accumulate_buffer(&msg->checksum, _MAV_PAYLOAD(msg), msg->len);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f103 0108 	add.w	r1, r3, #8
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	78db      	ldrb	r3, [r3, #3]
 8005b12:	461a      	mov	r2, r3
 8005b14:	f7ff ff8d 	bl	8005a32 <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &msg->checksum);
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	7f3b      	ldrb	r3, [r7, #28]
 8005b1c:	4611      	mov	r1, r2
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff ff29 	bl	8005976 <crc_accumulate>
#endif
	mavlink_ck_a(msg) = (uint8_t)(msg->checksum & 0xFF);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	b299      	uxth	r1, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3308      	adds	r3, #8
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	78d2      	ldrb	r2, [r2, #3]
 8005b32:	4413      	add	r3, r2
 8005b34:	b2ca      	uxtb	r2, r1
 8005b36:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(msg->checksum >> 8);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	0a1b      	lsrs	r3, r3, #8
 8005b40:	b299      	uxth	r1, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f103 0208 	add.w	r2, r3, #8
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	78db      	ldrb	r3, [r3, #3]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	4413      	add	r3, r2
 8005b50:	b2ca      	uxtb	r2, r1
 8005b52:	701a      	strb	r2, [r3, #0]

	return length + MAVLINK_NUM_NON_PAYLOAD_BYTES;
 8005b54:	7e3b      	ldrb	r3, [r7, #24]
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	3308      	adds	r3, #8
 8005b5a:	b29b      	uxth	r3, r3
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd90      	pop	{r4, r7, pc}

08005b64 <mavlink_finalize_message>:
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
#if MAVLINK_CRC_EXTRA
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t length, uint8_t crc_extra)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af02      	add	r7, sp, #8
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	4608      	mov	r0, r1
 8005b6e:	4611      	mov	r1, r2
 8005b70:	461a      	mov	r2, r3
 8005b72:	4603      	mov	r3, r0
 8005b74:	70fb      	strb	r3, [r7, #3]
 8005b76:	460b      	mov	r3, r1
 8005b78:	70bb      	strb	r3, [r7, #2]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	707b      	strb	r3, [r7, #1]
	return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, length, crc_extra);
 8005b7e:	78ba      	ldrb	r2, [r7, #2]
 8005b80:	78f9      	ldrb	r1, [r7, #3]
 8005b82:	7c3b      	ldrb	r3, [r7, #16]
 8005b84:	9301      	str	r3, [sp, #4]
 8005b86:	787b      	ldrb	r3, [r7, #1]
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7ff ff81 	bl	8005a94 <mavlink_finalize_message_chan>
 8005b92:	4603      	mov	r3, r0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buffer, const mavlink_message_t *msg)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
	memcpy(buffer, (const uint8_t *)&msg->magic, MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	1c99      	adds	r1, r3, #2
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	78db      	ldrb	r3, [r3, #3]
 8005bae:	3306      	adds	r3, #6
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f00d f9f0 	bl	8012f98 <memcpy>

	uint8_t *ck = buffer + (MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	78db      	ldrb	r3, [r3, #3]
 8005bbc:	3306      	adds	r3, #6
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]

	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	0a1b      	lsrs	r3, r3, #8
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3301      	adds	r3, #1
 8005be0:	b2d2      	uxtb	r2, r2
 8005be2:	701a      	strb	r2, [r3, #0]

	return MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)msg->len;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	78db      	ldrb	r3, [r3, #3]
 8005be8:	3308      	adds	r3, #8
 8005bea:	b29b      	uxth	r3, r3
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <mavlink_msg_heartbeat_pack>:
 * @param system_status System status flag, see MAV_STATE ENUM
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b088      	sub	sp, #32
 8005bf8:	af02      	add	r7, sp, #8
 8005bfa:	603a      	str	r2, [r7, #0]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	4603      	mov	r3, r0
 8005c00:	71fb      	strb	r3, [r7, #7]
 8005c02:	460b      	mov	r3, r1
 8005c04:	71bb      	strb	r3, [r7, #6]
 8005c06:	4613      	mov	r3, r2
 8005c08:	717b      	strb	r3, [r7, #5]
	_mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
	mavlink_heartbeat_t packet;
	packet.custom_mode = custom_mode;
 8005c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c0c:	60fb      	str	r3, [r7, #12]
	packet.type = type;
 8005c0e:	797b      	ldrb	r3, [r7, #5]
 8005c10:	743b      	strb	r3, [r7, #16]
	packet.autopilot = autopilot;
 8005c12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005c16:	747b      	strb	r3, [r7, #17]
	packet.base_mode = base_mode;
 8005c18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c1c:	74bb      	strb	r3, [r7, #18]
	packet.system_status = system_status;
 8005c1e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005c22:	74fb      	strb	r3, [r7, #19]
	packet.mavlink_version = 3;
 8005c24:	2303      	movs	r3, #3
 8005c26:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	3308      	adds	r3, #8
 8005c2c:	f107 010c 	add.w	r1, r7, #12
 8005c30:	2209      	movs	r2, #9
 8005c32:	4618      	mov	r0, r3
 8005c34:	f00d f9b0 	bl	8012f98 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 8005c3e:	79ba      	ldrb	r2, [r7, #6]
 8005c40:	79f9      	ldrb	r1, [r7, #7]
 8005c42:	2332      	movs	r3, #50	@ 0x32
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	2309      	movs	r3, #9
 8005c48:	6838      	ldr	r0, [r7, #0]
 8005c4a:	f7ff ff8b 	bl	8005b64 <mavlink_finalize_message>
 8005c4e:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#endif
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <mavlink_msg_attitude_pack>:
 * @param yawspeed Yaw angular speed (rad/s)
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_attitude_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint32_t time_boot_ms, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b08e      	sub	sp, #56	@ 0x38
 8005c5c:	af02      	add	r7, sp, #8
 8005c5e:	60ba      	str	r2, [r7, #8]
 8005c60:	607b      	str	r3, [r7, #4]
 8005c62:	4603      	mov	r3, r0
 8005c64:	73fb      	strb	r3, [r7, #15]
 8005c66:	460b      	mov	r3, r1
 8005c68:	73bb      	strb	r3, [r7, #14]
	_mav_put_float(buf, 24, yawspeed);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_ATTITUDE_LEN);
#else
	mavlink_attitude_t packet;
	packet.time_boot_ms = time_boot_ms;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	617b      	str	r3, [r7, #20]
	packet.roll = roll;
 8005c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c70:	61bb      	str	r3, [r7, #24]
	packet.pitch = pitch;
 8005c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c74:	61fb      	str	r3, [r7, #28]
	packet.yaw = yaw;
 8005c76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c78:	623b      	str	r3, [r7, #32]
	packet.rollspeed = rollspeed;
 8005c7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c7c:	627b      	str	r3, [r7, #36]	@ 0x24
	packet.pitchspeed = pitchspeed;
 8005c7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c80:	62bb      	str	r3, [r7, #40]	@ 0x28
	packet.yawspeed = yawspeed;
 8005c82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c84:	62fb      	str	r3, [r7, #44]	@ 0x2c

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_ATTITUDE_LEN);
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	3308      	adds	r3, #8
 8005c8a:	f107 0114 	add.w	r1, r7, #20
 8005c8e:	221c      	movs	r2, #28
 8005c90:	4618      	mov	r0, r3
 8005c92:	f00d f981 	bl	8012f98 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_ATTITUDE;
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	221e      	movs	r2, #30
 8005c9a:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_ATTITUDE_LEN, MAVLINK_MSG_ID_ATTITUDE_CRC);
 8005c9c:	7bba      	ldrb	r2, [r7, #14]
 8005c9e:	7bf9      	ldrb	r1, [r7, #15]
 8005ca0:	2327      	movs	r3, #39	@ 0x27
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	231c      	movs	r3, #28
 8005ca6:	68b8      	ldr	r0, [r7, #8]
 8005ca8:	f7ff ff5c 	bl	8005b64 <mavlink_finalize_message>
 8005cac:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_ATTITUDE_LEN);
#endif
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3730      	adds	r7, #48	@ 0x30
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <mavlink_msg_rc_channels_raw_pack>:
 * @param rssi Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_rc_channels_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint32_t time_boot_ms, uint8_t port, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint8_t rssi)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b08c      	sub	sp, #48	@ 0x30
 8005cba:	af02      	add	r7, sp, #8
 8005cbc:	60ba      	str	r2, [r7, #8]
 8005cbe:	607b      	str	r3, [r7, #4]
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	73fb      	strb	r3, [r7, #15]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	73bb      	strb	r3, [r7, #14]
	_mav_put_uint8_t(buf, 21, rssi);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#else
	mavlink_rc_channels_raw_t packet;
	packet.time_boot_ms = time_boot_ms;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	613b      	str	r3, [r7, #16]
	packet.chan1_raw = chan1_raw;
 8005ccc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005cce:	82bb      	strh	r3, [r7, #20]
	packet.chan2_raw = chan2_raw;
 8005cd0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005cd2:	82fb      	strh	r3, [r7, #22]
	packet.chan3_raw = chan3_raw;
 8005cd4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005cd6:	833b      	strh	r3, [r7, #24]
	packet.chan4_raw = chan4_raw;
 8005cd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005cdc:	837b      	strh	r3, [r7, #26]
	packet.chan5_raw = chan5_raw;
 8005cde:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005ce2:	83bb      	strh	r3, [r7, #28]
	packet.chan6_raw = chan6_raw;
 8005ce4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005ce8:	83fb      	strh	r3, [r7, #30]
	packet.chan7_raw = chan7_raw;
 8005cea:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005cee:	843b      	strh	r3, [r7, #32]
	packet.chan8_raw = chan8_raw;
 8005cf0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005cf4:	847b      	strh	r3, [r7, #34]	@ 0x22
	packet.port = port;
 8005cf6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005cfa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	packet.rssi = rssi;
 8005cfe:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8005d02:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	3308      	adds	r3, #8
 8005d0a:	f107 0110 	add.w	r1, r7, #16
 8005d0e:	2216      	movs	r2, #22
 8005d10:	4618      	mov	r0, r3
 8005d12:	f00d f941 	bl	8012f98 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_RC_CHANNELS_RAW;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	2223      	movs	r2, #35	@ 0x23
 8005d1a:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN, MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC);
 8005d1c:	7bba      	ldrb	r2, [r7, #14]
 8005d1e:	7bf9      	ldrb	r1, [r7, #15]
 8005d20:	23f4      	movs	r3, #244	@ 0xf4
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	2316      	movs	r3, #22
 8005d26:	68b8      	ldr	r0, [r7, #8]
 8005d28:	f7ff ff1c 	bl	8005b64 <mavlink_finalize_message>
 8005d2c:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#endif
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3728      	adds	r7, #40	@ 0x28
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <mavlink_msg_vfr_hud_pack>:
 * @param climb Current climb rate in meters/second
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_vfr_hud_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b08c      	sub	sp, #48	@ 0x30
 8005d3a:	af02      	add	r7, sp, #8
 8005d3c:	60ba      	str	r2, [r7, #8]
 8005d3e:	607b      	str	r3, [r7, #4]
 8005d40:	4603      	mov	r3, r0
 8005d42:	73fb      	strb	r3, [r7, #15]
 8005d44:	460b      	mov	r3, r1
 8005d46:	73bb      	strb	r3, [r7, #14]
	_mav_put_uint16_t(buf, 18, throttle);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_VFR_HUD_LEN);
#else
	mavlink_vfr_hud_t packet;
	packet.airspeed = airspeed;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	617b      	str	r3, [r7, #20]
	packet.groundspeed = groundspeed;
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4e:	61bb      	str	r3, [r7, #24]
	packet.alt = alt;
 8005d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d52:	61fb      	str	r3, [r7, #28]
	packet.climb = climb;
 8005d54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d56:	623b      	str	r3, [r7, #32]
	packet.heading = heading;
 8005d58:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005d5a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	packet.throttle = throttle;
 8005d5c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005d5e:	84fb      	strh	r3, [r7, #38]	@ 0x26

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_VFR_HUD_LEN);
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	3308      	adds	r3, #8
 8005d64:	f107 0114 	add.w	r1, r7, #20
 8005d68:	2214      	movs	r2, #20
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f00d f914 	bl	8012f98 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_VFR_HUD;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	224a      	movs	r2, #74	@ 0x4a
 8005d74:	71da      	strb	r2, [r3, #7]
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
 8005d76:	7bba      	ldrb	r2, [r7, #14]
 8005d78:	7bf9      	ldrb	r1, [r7, #15]
 8005d7a:	2314      	movs	r3, #20
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	2314      	movs	r3, #20
 8005d80:	68b8      	ldr	r0, [r7, #8]
 8005d82:	f7ff feef 	bl	8005b64 <mavlink_finalize_message>
 8005d86:	4603      	mov	r3, r0
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_VFR_HUD_LEN);
#endif
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3728      	adds	r7, #40	@ 0x28
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <mavlinkInit>:
static int isTxcpl;
uint32_t send_time_us;

extern float v_estimate;

void mavlinkInit(uint8_t syss_id, uint8_t comm_id,UART_HandleTypeDef *uartt,uint32_t baudrate){
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60ba      	str	r2, [r7, #8]
 8005d98:	607b      	str	r3, [r7, #4]
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	73fb      	strb	r3, [r7, #15]
 8005d9e:	460b      	mov	r3, r1
 8005da0:	73bb      	strb	r3, [r7, #14]
    isTxcpl = 1;
 8005da2:	4b10      	ldr	r3, [pc, #64]	@ (8005de4 <mavlinkInit+0x54>)
 8005da4:	2201      	movs	r2, #1
 8005da6:	601a      	str	r2, [r3, #0]
    index_ =0;
 8005da8:	4b0f      	ldr	r3, [pc, #60]	@ (8005de8 <mavlinkInit+0x58>)
 8005daa:	2200      	movs	r2, #0
 8005dac:	701a      	strb	r2, [r3, #0]
	sys_id  = syss_id;
 8005dae:	4a0f      	ldr	r2, [pc, #60]	@ (8005dec <mavlinkInit+0x5c>)
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
 8005db2:	7013      	strb	r3, [r2, #0]
    com_id  = comm_id;
 8005db4:	4a0e      	ldr	r2, [pc, #56]	@ (8005df0 <mavlinkInit+0x60>)
 8005db6:	7bbb      	ldrb	r3, [r7, #14]
 8005db8:	7013      	strb	r3, [r2, #0]
	uart = uartt;
 8005dba:	4a0e      	ldr	r2, [pc, #56]	@ (8005df4 <mavlinkInit+0x64>)
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	6013      	str	r3, [r2, #0]
    uartt->Init.BaudRate = baudrate;
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(uartt);
 8005dc6:	68b8      	ldr	r0, [r7, #8]
 8005dc8:	f005 fab6 	bl	800b338 <HAL_UART_Init>
	HAL_UART_Receive_IT(uart, &data,1);
 8005dcc:	4b09      	ldr	r3, [pc, #36]	@ (8005df4 <mavlinkInit+0x64>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	4909      	ldr	r1, [pc, #36]	@ (8005df8 <mavlinkInit+0x68>)
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f005 fb82 	bl	800b4de <HAL_UART_Receive_IT>
}
 8005dda:	bf00      	nop
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20000dd4 	.word	0x20000dd4
 8005de8:	20000d05 	.word	0x20000d05
 8005dec:	20000d06 	.word	0x20000d06
 8005df0:	20000d07 	.word	0x20000d07
 8005df4:	20000d08 	.word	0x20000d08
 8005df8:	20000d04 	.word	0x20000d04

08005dfc <mavlink_osd>:
*   Attitude
*   GPS 
*   RC signal
*   heartbeat
*/
void mavlink_osd(){
 8005dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dfe:	b093      	sub	sp, #76	@ 0x4c
 8005e00:	af0a      	add	r7, sp, #40	@ 0x28
	static uint8_t count_ = 0;
	static uint8_t count2_ = 0;
	if(isTxcpl)
 8005e02:	4b7c      	ldr	r3, [pc, #496]	@ (8005ff4 <mavlink_osd+0x1f8>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 80ef 	beq.w	8005fea <mavlink_osd+0x1ee>
	{
		switch (count_)
 8005e0c:	4b7a      	ldr	r3, [pc, #488]	@ (8005ff8 <mavlink_osd+0x1fc>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d071      	beq.n	8005ef8 <mavlink_osd+0xfc>
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	f300 80d8 	bgt.w	8005fca <mavlink_osd+0x1ce>
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d002      	beq.n	8005e24 <mavlink_osd+0x28>
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d02f      	beq.n	8005e82 <mavlink_osd+0x86>
 8005e22:	e0d2      	b.n	8005fca <mavlink_osd+0x1ce>
		{
		// fast display
		case 0:  
			mavlink_msg_attitude_pack(sys_id,com_id,&msg,0,AHRS.roll*RAD,AHRS.pitch*RAD,0,0,0,0);
 8005e24:	4b75      	ldr	r3, [pc, #468]	@ (8005ffc <mavlink_osd+0x200>)
 8005e26:	781c      	ldrb	r4, [r3, #0]
 8005e28:	4b75      	ldr	r3, [pc, #468]	@ (8006000 <mavlink_osd+0x204>)
 8005e2a:	781d      	ldrb	r5, [r3, #0]
 8005e2c:	4b75      	ldr	r3, [pc, #468]	@ (8006004 <mavlink_osd+0x208>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4975      	ldr	r1, [pc, #468]	@ (8006008 <mavlink_osd+0x20c>)
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fa ffee 	bl	8000e14 <__aeabi_fmul>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	461e      	mov	r6, r3
 8005e3c:	4b71      	ldr	r3, [pc, #452]	@ (8006004 <mavlink_osd+0x208>)
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	4971      	ldr	r1, [pc, #452]	@ (8006008 <mavlink_osd+0x20c>)
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fa ffe6 	bl	8000e14 <__aeabi_fmul>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	f04f 0300 	mov.w	r3, #0
 8005e50:	9305      	str	r3, [sp, #20]
 8005e52:	f04f 0300 	mov.w	r3, #0
 8005e56:	9304      	str	r3, [sp, #16]
 8005e58:	f04f 0300 	mov.w	r3, #0
 8005e5c:	9303      	str	r3, [sp, #12]
 8005e5e:	f04f 0300 	mov.w	r3, #0
 8005e62:	9302      	str	r3, [sp, #8]
 8005e64:	9201      	str	r2, [sp, #4]
 8005e66:	9600      	str	r6, [sp, #0]
 8005e68:	2300      	movs	r3, #0
 8005e6a:	4a68      	ldr	r2, [pc, #416]	@ (800600c <mavlink_osd+0x210>)
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	4620      	mov	r0, r4
 8005e70:	f7ff fef2 	bl	8005c58 <mavlink_msg_attitude_pack>
			count_ ++;
 8005e74:	4b60      	ldr	r3, [pc, #384]	@ (8005ff8 <mavlink_osd+0x1fc>)
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	4b5e      	ldr	r3, [pc, #376]	@ (8005ff8 <mavlink_osd+0x1fc>)
 8005e7e:	701a      	strb	r2, [r3, #0]
			break;
 8005e80:	e0a3      	b.n	8005fca <mavlink_osd+0x1ce>
		case 1:  
			float airspeed = 314;    // osd in km/h
 8005e82:	4b63      	ldr	r3, [pc, #396]	@ (8006010 <mavlink_osd+0x214>)
 8005e84:	61bb      	str	r3, [r7, #24]
			float groundspeed = 57;  // osd in km/h
 8005e86:	4b63      	ldr	r3, [pc, #396]	@ (8006014 <mavlink_osd+0x218>)
 8005e88:	617b      	str	r3, [r7, #20]
			uint16_t throttle = (ibusChannelData[CH3] - 1000)*0.1f;
 8005e8a:	4b63      	ldr	r3, [pc, #396]	@ (8006018 <mavlink_osd+0x21c>)
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fa ff66 	bl	8000d64 <__aeabi_ui2f>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	4960      	ldr	r1, [pc, #384]	@ (800601c <mavlink_osd+0x220>)
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fa ffb9 	bl	8000e14 <__aeabi_fmul>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7fb f9b7 	bl	8001218 <__aeabi_f2uiz>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	827b      	strh	r3, [r7, #18]
			float alt = 333;
 8005eae:	4b5c      	ldr	r3, [pc, #368]	@ (8006020 <mavlink_osd+0x224>)
 8005eb0:	60fb      	str	r3, [r7, #12]
			float climb = 5;
 8005eb2:	4b5c      	ldr	r3, [pc, #368]	@ (8006024 <mavlink_osd+0x228>)
 8005eb4:	60bb      	str	r3, [r7, #8]
			mavlink_msg_vfr_hud_pack(sys_id,com_id,&msg,
 8005eb6:	4b51      	ldr	r3, [pc, #324]	@ (8005ffc <mavlink_osd+0x200>)
 8005eb8:	781c      	ldrb	r4, [r3, #0]
 8005eba:	4b51      	ldr	r3, [pc, #324]	@ (8006000 <mavlink_osd+0x204>)
 8005ebc:	781d      	ldrb	r5, [r3, #0]
						airspeed, groundspeed,AHRS.yaw, throttle,alt, climb);
 8005ebe:	4b51      	ldr	r3, [pc, #324]	@ (8006004 <mavlink_osd+0x208>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
			mavlink_msg_vfr_hud_pack(sys_id,com_id,&msg,
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fb f982 	bl	80011cc <__aeabi_f2iz>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	b21b      	sxth	r3, r3
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	9204      	str	r2, [sp, #16]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	9203      	str	r2, [sp, #12]
 8005ed4:	8a7a      	ldrh	r2, [r7, #18]
 8005ed6:	9202      	str	r2, [sp, #8]
 8005ed8:	9301      	str	r3, [sp, #4]
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	4a4a      	ldr	r2, [pc, #296]	@ (800600c <mavlink_osd+0x210>)
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	f7ff ff26 	bl	8005d36 <mavlink_msg_vfr_hud_pack>
			count_ ++;
 8005eea:	4b43      	ldr	r3, [pc, #268]	@ (8005ff8 <mavlink_osd+0x1fc>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	4b41      	ldr	r3, [pc, #260]	@ (8005ff8 <mavlink_osd+0x1fc>)
 8005ef4:	701a      	strb	r2, [r3, #0]
			break;
 8005ef6:	e068      	b.n	8005fca <mavlink_osd+0x1ce>
		case 2:
			switch (count2_)
 8005ef8:	4b4b      	ldr	r3, [pc, #300]	@ (8006028 <mavlink_osd+0x22c>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d046      	beq.n	8005f8e <mavlink_osd+0x192>
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	dc5f      	bgt.n	8005fc4 <mavlink_osd+0x1c8>
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <mavlink_osd+0x112>
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d007      	beq.n	8005f1c <mavlink_osd+0x120>
 8005f0c:	e05a      	b.n	8005fc4 <mavlink_osd+0x1c8>
			{
			case 0:
				//mavlink_msg_gps_raw_int_pack(sys_id,com_id,&msg,
				//						0, _gps.fix,_gps.position[0],_gps.position[1],1200,
				//						1 , 1 , 2200,0 ,abs(v_estimate));
				count2_ ++;
 8005f0e:	4b46      	ldr	r3, [pc, #280]	@ (8006028 <mavlink_osd+0x22c>)
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	3301      	adds	r3, #1
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	4b44      	ldr	r3, [pc, #272]	@ (8006028 <mavlink_osd+0x22c>)
 8005f18:	701a      	strb	r2, [r3, #0]

				break;
 8005f1a:	e053      	b.n	8005fc4 <mavlink_osd+0x1c8>
			case 1:
			    uint8_t rssi = mapI(ibusChannelData[CH11],1000,2000,0,255);
 8005f1c:	4b3e      	ldr	r3, [pc, #248]	@ (8006018 <mavlink_osd+0x21c>)
 8005f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f20:	4618      	mov	r0, r3
 8005f22:	23ff      	movs	r3, #255	@ 0xff
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	2300      	movs	r3, #0
 8005f28:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005f2c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005f30:	f7ff fd06 	bl	8005940 <mapI>
 8005f34:	4603      	mov	r3, r0
 8005f36:	773b      	strb	r3, [r7, #28]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 8005f38:	4b30      	ldr	r3, [pc, #192]	@ (8005ffc <mavlink_osd+0x200>)
 8005f3a:	781c      	ldrb	r4, [r3, #0]
 8005f3c:	4b30      	ldr	r3, [pc, #192]	@ (8006000 <mavlink_osd+0x204>)
 8005f3e:	781d      	ldrb	r5, [r3, #0]
						0,0,ibusChannelData[CH4],ibusChannelData[CH7],ibusChannelData[CH8], 
 8005f40:	4b35      	ldr	r3, [pc, #212]	@ (8006018 <mavlink_osd+0x21c>)
 8005f42:	68db      	ldr	r3, [r3, #12]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 8005f44:	b29b      	uxth	r3, r3
						0,0,ibusChannelData[CH4],ibusChannelData[CH7],ibusChannelData[CH8], 
 8005f46:	4a34      	ldr	r2, [pc, #208]	@ (8006018 <mavlink_osd+0x21c>)
 8005f48:	6992      	ldr	r2, [r2, #24]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 8005f4a:	b292      	uxth	r2, r2
						0,0,ibusChannelData[CH4],ibusChannelData[CH7],ibusChannelData[CH8], 
 8005f4c:	4932      	ldr	r1, [pc, #200]	@ (8006018 <mavlink_osd+0x21c>)
 8005f4e:	69c9      	ldr	r1, [r1, #28]
				mavlink_msg_rc_channels_raw_pack(sys_id,com_id,&msg,
 8005f50:	b289      	uxth	r1, r1
 8005f52:	7f38      	ldrb	r0, [r7, #28]
 8005f54:	9009      	str	r0, [sp, #36]	@ 0x24
 8005f56:	2000      	movs	r0, #0
 8005f58:	9008      	str	r0, [sp, #32]
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	9007      	str	r0, [sp, #28]
 8005f5e:	2000      	movs	r0, #0
 8005f60:	9006      	str	r0, [sp, #24]
 8005f62:	2000      	movs	r0, #0
 8005f64:	9005      	str	r0, [sp, #20]
 8005f66:	2000      	movs	r0, #0
 8005f68:	9004      	str	r0, [sp, #16]
 8005f6a:	9103      	str	r1, [sp, #12]
 8005f6c:	9202      	str	r2, [sp, #8]
 8005f6e:	9301      	str	r3, [sp, #4]
 8005f70:	2300      	movs	r3, #0
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	2300      	movs	r3, #0
 8005f76:	4a25      	ldr	r2, [pc, #148]	@ (800600c <mavlink_osd+0x210>)
 8005f78:	4629      	mov	r1, r5
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	f7ff fe9b 	bl	8005cb6 <mavlink_msg_rc_channels_raw_pack>
						0,0,0,
						0,0,rssi);
				count2_ ++;
 8005f80:	4b29      	ldr	r3, [pc, #164]	@ (8006028 <mavlink_osd+0x22c>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	3301      	adds	r3, #1
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	4b27      	ldr	r3, [pc, #156]	@ (8006028 <mavlink_osd+0x22c>)
 8005f8a:	701a      	strb	r2, [r3, #0]
				break;
 8005f8c:	e01a      	b.n	8005fc4 <mavlink_osd+0x1c8>
			case 2: // send heartbeat
				uint8_t type = MAV_TYPE_FIXED_WING;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	77fb      	strb	r3, [r7, #31]
				uint8_t autopilot = MAV_AUTOPILOT_GENERIC;
 8005f92:	2300      	movs	r3, #0
 8005f94:	77bb      	strb	r3, [r7, #30]
				uint8_t base_mode = MAV_MODE_FLAG_TEST_ENABLED;
 8005f96:	2302      	movs	r3, #2
 8005f98:	777b      	strb	r3, [r7, #29]
				mavlink_msg_heartbeat_pack(sys_id,com_id,&msg,type,autopilot,base_mode,base_mode, MAV_STATE_UNINIT);
 8005f9a:	4b18      	ldr	r3, [pc, #96]	@ (8005ffc <mavlink_osd+0x200>)
 8005f9c:	7818      	ldrb	r0, [r3, #0]
 8005f9e:	4b18      	ldr	r3, [pc, #96]	@ (8006000 <mavlink_osd+0x204>)
 8005fa0:	7819      	ldrb	r1, [r3, #0]
 8005fa2:	7f7b      	ldrb	r3, [r7, #29]
 8005fa4:	7ffa      	ldrb	r2, [r7, #31]
 8005fa6:	2400      	movs	r4, #0
 8005fa8:	9403      	str	r4, [sp, #12]
 8005faa:	9302      	str	r3, [sp, #8]
 8005fac:	7f7b      	ldrb	r3, [r7, #29]
 8005fae:	9301      	str	r3, [sp, #4]
 8005fb0:	7fbb      	ldrb	r3, [r7, #30]
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	4a15      	ldr	r2, [pc, #84]	@ (800600c <mavlink_osd+0x210>)
 8005fb8:	f7ff fe1c 	bl	8005bf4 <mavlink_msg_heartbeat_pack>
				count2_ = 0;
 8005fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8006028 <mavlink_osd+0x22c>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	701a      	strb	r2, [r3, #0]
				break;
 8005fc2:	bf00      	nop
				                                     0,q,0,0,0,thrust);
		        count2_ = 0;
				break;
			*/
			}
			count_ = 0;
 8005fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff8 <mavlink_osd+0x1fc>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	701a      	strb	r2, [r3, #0]
		}
		uint16_t len_data = mavlink_msg_to_send_buffer(buffer__,&msg);
 8005fca:	4910      	ldr	r1, [pc, #64]	@ (800600c <mavlink_osd+0x210>)
 8005fcc:	4817      	ldr	r0, [pc, #92]	@ (800602c <mavlink_osd+0x230>)
 8005fce:	f7ff fde5 	bl	8005b9c <mavlink_msg_to_send_buffer>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	80fb      	strh	r3, [r7, #6]
	    HAL_UART_Transmit_DMA(uart,buffer__,len_data);
 8005fd6:	4b16      	ldr	r3, [pc, #88]	@ (8006030 <mavlink_osd+0x234>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	88fa      	ldrh	r2, [r7, #6]
 8005fdc:	4913      	ldr	r1, [pc, #76]	@ (800602c <mavlink_osd+0x230>)
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f005 faa2 	bl	800b528 <HAL_UART_Transmit_DMA>
	    isTxcpl = 0;
 8005fe4:	4b03      	ldr	r3, [pc, #12]	@ (8005ff4 <mavlink_osd+0x1f8>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	601a      	str	r2, [r3, #0]
	}
}
 8005fea:	bf00      	nop
 8005fec:	3724      	adds	r7, #36	@ 0x24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	20000dd4 	.word	0x20000dd4
 8005ff8:	20000e08 	.word	0x20000e08
 8005ffc:	20000d06 	.word	0x20000d06
 8006000:	20000d07 	.word	0x20000d07
 8006004:	200004c8 	.word	0x200004c8
 8006008:	3c8efa35 	.word	0x3c8efa35
 800600c:	20000bf4 	.word	0x20000bf4
 8006010:	439d0000 	.word	0x439d0000
 8006014:	42640000 	.word	0x42640000
 8006018:	200000d0 	.word	0x200000d0
 800601c:	3dcccccd 	.word	0x3dcccccd
 8006020:	43a68000 	.word	0x43a68000
 8006024:	40a00000 	.word	0x40a00000
 8006028:	20000e09 	.word	0x20000e09
 800602c:	20000d0c 	.word	0x20000d0c
 8006030:	20000d08 	.word	0x20000d08

08006034 <mavlink_tx_cpl_callback>:
/*
 * 
 */
uint32_t temp;
void mavlink_tx_cpl_callback()
{   
 8006034:	b480      	push	{r7}
 8006036:	af00      	add	r7, sp, #0
	//send_time_us = millis() - temp;
	//temp = millis();
	isTxcpl = 1;
 8006038:	4b03      	ldr	r3, [pc, #12]	@ (8006048 <mavlink_tx_cpl_callback+0x14>)
 800603a:	2201      	movs	r2, #1
 800603c:	601a      	str	r2, [r3, #0]
}
 800603e:	bf00      	nop
 8006040:	46bd      	mov	sp, r7
 8006042:	bc80      	pop	{r7}
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	20000dd4 	.word	0x20000dd4

0800604c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006050:	4b08      	ldr	r3, [pc, #32]	@ (8006074 <HAL_Init+0x28>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a07      	ldr	r2, [pc, #28]	@ (8006074 <HAL_Init+0x28>)
 8006056:	f043 0310 	orr.w	r3, r3, #16
 800605a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800605c:	2003      	movs	r0, #3
 800605e:	f000 f8f5 	bl	800624c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006062:	200f      	movs	r0, #15
 8006064:	f7fe fc10 	bl	8004888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006068:	f7fe fbd6 	bl	8004818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	40022000 	.word	0x40022000

08006078 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006078:	b480      	push	{r7}
 800607a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800607c:	4b05      	ldr	r3, [pc, #20]	@ (8006094 <HAL_IncTick+0x1c>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	461a      	mov	r2, r3
 8006082:	4b05      	ldr	r3, [pc, #20]	@ (8006098 <HAL_IncTick+0x20>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4413      	add	r3, r2
 8006088:	4a03      	ldr	r2, [pc, #12]	@ (8006098 <HAL_IncTick+0x20>)
 800608a:	6013      	str	r3, [r2, #0]
}
 800608c:	bf00      	nop
 800608e:	46bd      	mov	sp, r7
 8006090:	bc80      	pop	{r7}
 8006092:	4770      	bx	lr
 8006094:	2000003c 	.word	0x2000003c
 8006098:	20000e0c 	.word	0x20000e0c

0800609c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800609c:	b480      	push	{r7}
 800609e:	af00      	add	r7, sp, #0
  return uwTick;
 80060a0:	4b02      	ldr	r3, [pc, #8]	@ (80060ac <HAL_GetTick+0x10>)
 80060a2:	681b      	ldr	r3, [r3, #0]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bc80      	pop	{r7}
 80060aa:	4770      	bx	lr
 80060ac:	20000e0c 	.word	0x20000e0c

080060b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80060b8:	f7ff fff0 	bl	800609c <HAL_GetTick>
 80060bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c8:	d005      	beq.n	80060d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80060ca:	4b0a      	ldr	r3, [pc, #40]	@ (80060f4 <HAL_Delay+0x44>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	461a      	mov	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4413      	add	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80060d6:	bf00      	nop
 80060d8:	f7ff ffe0 	bl	800609c <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d8f7      	bhi.n	80060d8 <HAL_Delay+0x28>
  {
  }
}
 80060e8:	bf00      	nop
 80060ea:	bf00      	nop
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	2000003c 	.word	0x2000003c

080060f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f003 0307 	and.w	r3, r3, #7
 8006106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006108:	4b0c      	ldr	r3, [pc, #48]	@ (800613c <__NVIC_SetPriorityGrouping+0x44>)
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006114:	4013      	ands	r3, r2
 8006116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006120:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006124:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800612a:	4a04      	ldr	r2, [pc, #16]	@ (800613c <__NVIC_SetPriorityGrouping+0x44>)
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	60d3      	str	r3, [r2, #12]
}
 8006130:	bf00      	nop
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	bc80      	pop	{r7}
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	e000ed00 	.word	0xe000ed00

08006140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006144:	4b04      	ldr	r3, [pc, #16]	@ (8006158 <__NVIC_GetPriorityGrouping+0x18>)
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	0a1b      	lsrs	r3, r3, #8
 800614a:	f003 0307 	and.w	r3, r3, #7
}
 800614e:	4618      	mov	r0, r3
 8006150:	46bd      	mov	sp, r7
 8006152:	bc80      	pop	{r7}
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	e000ed00 	.word	0xe000ed00

0800615c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	4603      	mov	r3, r0
 8006164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800616a:	2b00      	cmp	r3, #0
 800616c:	db0b      	blt.n	8006186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800616e:	79fb      	ldrb	r3, [r7, #7]
 8006170:	f003 021f 	and.w	r2, r3, #31
 8006174:	4906      	ldr	r1, [pc, #24]	@ (8006190 <__NVIC_EnableIRQ+0x34>)
 8006176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800617a:	095b      	lsrs	r3, r3, #5
 800617c:	2001      	movs	r0, #1
 800617e:	fa00 f202 	lsl.w	r2, r0, r2
 8006182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006186:	bf00      	nop
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	bc80      	pop	{r7}
 800618e:	4770      	bx	lr
 8006190:	e000e100 	.word	0xe000e100

08006194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	4603      	mov	r3, r0
 800619c:	6039      	str	r1, [r7, #0]
 800619e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	db0a      	blt.n	80061be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	490c      	ldr	r1, [pc, #48]	@ (80061e0 <__NVIC_SetPriority+0x4c>)
 80061ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061b2:	0112      	lsls	r2, r2, #4
 80061b4:	b2d2      	uxtb	r2, r2
 80061b6:	440b      	add	r3, r1
 80061b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80061bc:	e00a      	b.n	80061d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	4908      	ldr	r1, [pc, #32]	@ (80061e4 <__NVIC_SetPriority+0x50>)
 80061c4:	79fb      	ldrb	r3, [r7, #7]
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	3b04      	subs	r3, #4
 80061cc:	0112      	lsls	r2, r2, #4
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	440b      	add	r3, r1
 80061d2:	761a      	strb	r2, [r3, #24]
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	bc80      	pop	{r7}
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	e000e100 	.word	0xe000e100
 80061e4:	e000ed00 	.word	0xe000ed00

080061e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b089      	sub	sp, #36	@ 0x24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f003 0307 	and.w	r3, r3, #7
 80061fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	f1c3 0307 	rsb	r3, r3, #7
 8006202:	2b04      	cmp	r3, #4
 8006204:	bf28      	it	cs
 8006206:	2304      	movcs	r3, #4
 8006208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	3304      	adds	r3, #4
 800620e:	2b06      	cmp	r3, #6
 8006210:	d902      	bls.n	8006218 <NVIC_EncodePriority+0x30>
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	3b03      	subs	r3, #3
 8006216:	e000      	b.n	800621a <NVIC_EncodePriority+0x32>
 8006218:	2300      	movs	r3, #0
 800621a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800621c:	f04f 32ff 	mov.w	r2, #4294967295
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	fa02 f303 	lsl.w	r3, r2, r3
 8006226:	43da      	mvns	r2, r3
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	401a      	ands	r2, r3
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006230:	f04f 31ff 	mov.w	r1, #4294967295
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	fa01 f303 	lsl.w	r3, r1, r3
 800623a:	43d9      	mvns	r1, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006240:	4313      	orrs	r3, r2
         );
}
 8006242:	4618      	mov	r0, r3
 8006244:	3724      	adds	r7, #36	@ 0x24
 8006246:	46bd      	mov	sp, r7
 8006248:	bc80      	pop	{r7}
 800624a:	4770      	bx	lr

0800624c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7ff ff4f 	bl	80060f8 <__NVIC_SetPriorityGrouping>
}
 800625a:	bf00      	nop
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006262:	b580      	push	{r7, lr}
 8006264:	b086      	sub	sp, #24
 8006266:	af00      	add	r7, sp, #0
 8006268:	4603      	mov	r3, r0
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	607a      	str	r2, [r7, #4]
 800626e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006270:	2300      	movs	r3, #0
 8006272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006274:	f7ff ff64 	bl	8006140 <__NVIC_GetPriorityGrouping>
 8006278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	68b9      	ldr	r1, [r7, #8]
 800627e:	6978      	ldr	r0, [r7, #20]
 8006280:	f7ff ffb2 	bl	80061e8 <NVIC_EncodePriority>
 8006284:	4602      	mov	r2, r0
 8006286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800628a:	4611      	mov	r1, r2
 800628c:	4618      	mov	r0, r3
 800628e:	f7ff ff81 	bl	8006194 <__NVIC_SetPriority>
}
 8006292:	bf00      	nop
 8006294:	3718      	adds	r7, #24
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b082      	sub	sp, #8
 800629e:	af00      	add	r7, sp, #0
 80062a0:	4603      	mov	r3, r0
 80062a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80062a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7ff ff57 	bl	800615c <__NVIC_EnableIRQ>
}
 80062ae:	bf00      	nop
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
	...

080062b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e059      	b.n	8006382 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	4b2d      	ldr	r3, [pc, #180]	@ (800638c <HAL_DMA_Init+0xd4>)
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d80f      	bhi.n	80062fa <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	461a      	mov	r2, r3
 80062e0:	4b2b      	ldr	r3, [pc, #172]	@ (8006390 <HAL_DMA_Init+0xd8>)
 80062e2:	4413      	add	r3, r2
 80062e4:	4a2b      	ldr	r2, [pc, #172]	@ (8006394 <HAL_DMA_Init+0xdc>)
 80062e6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ea:	091b      	lsrs	r3, r3, #4
 80062ec:	009a      	lsls	r2, r3, #2
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a28      	ldr	r2, [pc, #160]	@ (8006398 <HAL_DMA_Init+0xe0>)
 80062f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80062f8:	e00e      	b.n	8006318 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	4b26      	ldr	r3, [pc, #152]	@ (800639c <HAL_DMA_Init+0xe4>)
 8006302:	4413      	add	r3, r2
 8006304:	4a23      	ldr	r2, [pc, #140]	@ (8006394 <HAL_DMA_Init+0xdc>)
 8006306:	fba2 2303 	umull	r2, r3, r2, r3
 800630a:	091b      	lsrs	r3, r3, #4
 800630c:	009a      	lsls	r2, r3, #2
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a22      	ldr	r2, [pc, #136]	@ (80063a0 <HAL_DMA_Init+0xe8>)
 8006316:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2202      	movs	r2, #2
 800631c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800632e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006332:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800633c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006348:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006354:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4313      	orrs	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	bc80      	pop	{r7}
 800638a:	4770      	bx	lr
 800638c:	40020407 	.word	0x40020407
 8006390:	bffdfff8 	.word	0xbffdfff8
 8006394:	cccccccd 	.word	0xcccccccd
 8006398:	40020000 	.word	0x40020000
 800639c:	bffdfbf8 	.word	0xbffdfbf8
 80063a0:	40020400 	.word	0x40020400

080063a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
 80063b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d101      	bne.n	80063c4 <HAL_DMA_Start_IT+0x20>
 80063c0:	2302      	movs	r3, #2
 80063c2:	e04b      	b.n	800645c <HAL_DMA_Start_IT+0xb8>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d13a      	bne.n	800644e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 0201 	bic.w	r2, r2, #1
 80063f4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	68b9      	ldr	r1, [r7, #8]
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 fbb1 	bl	8006b64 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006406:	2b00      	cmp	r3, #0
 8006408:	d008      	beq.n	800641c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f042 020e 	orr.w	r2, r2, #14
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	e00f      	b.n	800643c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 0204 	bic.w	r2, r2, #4
 800642a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f042 020a 	orr.w	r2, r2, #10
 800643a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f042 0201 	orr.w	r2, r2, #1
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	e005      	b.n	800645a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006456:	2302      	movs	r3, #2
 8006458:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800645a:	7dfb      	ldrb	r3, [r7, #23]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3718      	adds	r7, #24
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800646c:	2300      	movs	r3, #0
 800646e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b02      	cmp	r3, #2
 800647a:	d008      	beq.n	800648e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2204      	movs	r2, #4
 8006480:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e020      	b.n	80064d0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 020e 	bic.w	r2, r2, #14
 800649c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0201 	bic.w	r2, r2, #1
 80064ac:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064b6:	2101      	movs	r1, #1
 80064b8:	fa01 f202 	lsl.w	r2, r1, r2
 80064bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bc80      	pop	{r7}
 80064d8:	4770      	bx	lr
	...

080064dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064e4:	2300      	movs	r3, #0
 80064e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d005      	beq.n	8006500 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2204      	movs	r2, #4
 80064f8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	73fb      	strb	r3, [r7, #15]
 80064fe:	e0d6      	b.n	80066ae <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 020e 	bic.w	r2, r2, #14
 800650e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0201 	bic.w	r2, r2, #1
 800651e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	461a      	mov	r2, r3
 8006526:	4b64      	ldr	r3, [pc, #400]	@ (80066b8 <HAL_DMA_Abort_IT+0x1dc>)
 8006528:	429a      	cmp	r2, r3
 800652a:	d958      	bls.n	80065de <HAL_DMA_Abort_IT+0x102>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a62      	ldr	r2, [pc, #392]	@ (80066bc <HAL_DMA_Abort_IT+0x1e0>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d04f      	beq.n	80065d6 <HAL_DMA_Abort_IT+0xfa>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a61      	ldr	r2, [pc, #388]	@ (80066c0 <HAL_DMA_Abort_IT+0x1e4>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d048      	beq.n	80065d2 <HAL_DMA_Abort_IT+0xf6>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a5f      	ldr	r2, [pc, #380]	@ (80066c4 <HAL_DMA_Abort_IT+0x1e8>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d040      	beq.n	80065cc <HAL_DMA_Abort_IT+0xf0>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a5e      	ldr	r2, [pc, #376]	@ (80066c8 <HAL_DMA_Abort_IT+0x1ec>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d038      	beq.n	80065c6 <HAL_DMA_Abort_IT+0xea>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a5c      	ldr	r2, [pc, #368]	@ (80066cc <HAL_DMA_Abort_IT+0x1f0>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d030      	beq.n	80065c0 <HAL_DMA_Abort_IT+0xe4>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a5b      	ldr	r2, [pc, #364]	@ (80066d0 <HAL_DMA_Abort_IT+0x1f4>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d028      	beq.n	80065ba <HAL_DMA_Abort_IT+0xde>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a52      	ldr	r2, [pc, #328]	@ (80066b8 <HAL_DMA_Abort_IT+0x1dc>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d020      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xd8>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a57      	ldr	r2, [pc, #348]	@ (80066d4 <HAL_DMA_Abort_IT+0x1f8>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d019      	beq.n	80065b0 <HAL_DMA_Abort_IT+0xd4>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a55      	ldr	r2, [pc, #340]	@ (80066d8 <HAL_DMA_Abort_IT+0x1fc>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d012      	beq.n	80065ac <HAL_DMA_Abort_IT+0xd0>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a54      	ldr	r2, [pc, #336]	@ (80066dc <HAL_DMA_Abort_IT+0x200>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d00a      	beq.n	80065a6 <HAL_DMA_Abort_IT+0xca>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a52      	ldr	r2, [pc, #328]	@ (80066e0 <HAL_DMA_Abort_IT+0x204>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d102      	bne.n	80065a0 <HAL_DMA_Abort_IT+0xc4>
 800659a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800659e:	e01b      	b.n	80065d8 <HAL_DMA_Abort_IT+0xfc>
 80065a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80065a4:	e018      	b.n	80065d8 <HAL_DMA_Abort_IT+0xfc>
 80065a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80065aa:	e015      	b.n	80065d8 <HAL_DMA_Abort_IT+0xfc>
 80065ac:	2310      	movs	r3, #16
 80065ae:	e013      	b.n	80065d8 <HAL_DMA_Abort_IT+0xfc>
 80065b0:	2301      	movs	r3, #1
 80065b2:	e011      	b.n	80065d8 <HAL_DMA_Abort_IT+0xfc>
 80065b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80065b8:	e00e      	b.n	80065d8 <HAL_DMA_Abort_IT+0xfc>
 80065ba:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80065be:	e00b      	b.n	80065d8 <HAL_DMA_Abort_IT+0xfc>
 80065c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80065c4:	e008      	b.n	80065d8 <HAL_DMA_Abort_IT+0xfc>
 80065c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80065ca:	e005      	b.n	80065d8 <HAL_DMA_Abort_IT+0xfc>
 80065cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80065d0:	e002      	b.n	80065d8 <HAL_DMA_Abort_IT+0xfc>
 80065d2:	2310      	movs	r3, #16
 80065d4:	e000      	b.n	80065d8 <HAL_DMA_Abort_IT+0xfc>
 80065d6:	2301      	movs	r3, #1
 80065d8:	4a42      	ldr	r2, [pc, #264]	@ (80066e4 <HAL_DMA_Abort_IT+0x208>)
 80065da:	6053      	str	r3, [r2, #4]
 80065dc:	e057      	b.n	800668e <HAL_DMA_Abort_IT+0x1b2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a36      	ldr	r2, [pc, #216]	@ (80066bc <HAL_DMA_Abort_IT+0x1e0>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d04f      	beq.n	8006688 <HAL_DMA_Abort_IT+0x1ac>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a34      	ldr	r2, [pc, #208]	@ (80066c0 <HAL_DMA_Abort_IT+0x1e4>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d048      	beq.n	8006684 <HAL_DMA_Abort_IT+0x1a8>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a33      	ldr	r2, [pc, #204]	@ (80066c4 <HAL_DMA_Abort_IT+0x1e8>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d040      	beq.n	800667e <HAL_DMA_Abort_IT+0x1a2>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a31      	ldr	r2, [pc, #196]	@ (80066c8 <HAL_DMA_Abort_IT+0x1ec>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d038      	beq.n	8006678 <HAL_DMA_Abort_IT+0x19c>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a30      	ldr	r2, [pc, #192]	@ (80066cc <HAL_DMA_Abort_IT+0x1f0>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d030      	beq.n	8006672 <HAL_DMA_Abort_IT+0x196>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a2e      	ldr	r2, [pc, #184]	@ (80066d0 <HAL_DMA_Abort_IT+0x1f4>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d028      	beq.n	800666c <HAL_DMA_Abort_IT+0x190>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a26      	ldr	r2, [pc, #152]	@ (80066b8 <HAL_DMA_Abort_IT+0x1dc>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d020      	beq.n	8006666 <HAL_DMA_Abort_IT+0x18a>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a2a      	ldr	r2, [pc, #168]	@ (80066d4 <HAL_DMA_Abort_IT+0x1f8>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d019      	beq.n	8006662 <HAL_DMA_Abort_IT+0x186>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a29      	ldr	r2, [pc, #164]	@ (80066d8 <HAL_DMA_Abort_IT+0x1fc>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d012      	beq.n	800665e <HAL_DMA_Abort_IT+0x182>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a27      	ldr	r2, [pc, #156]	@ (80066dc <HAL_DMA_Abort_IT+0x200>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d00a      	beq.n	8006658 <HAL_DMA_Abort_IT+0x17c>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a26      	ldr	r2, [pc, #152]	@ (80066e0 <HAL_DMA_Abort_IT+0x204>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d102      	bne.n	8006652 <HAL_DMA_Abort_IT+0x176>
 800664c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006650:	e01b      	b.n	800668a <HAL_DMA_Abort_IT+0x1ae>
 8006652:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006656:	e018      	b.n	800668a <HAL_DMA_Abort_IT+0x1ae>
 8006658:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800665c:	e015      	b.n	800668a <HAL_DMA_Abort_IT+0x1ae>
 800665e:	2310      	movs	r3, #16
 8006660:	e013      	b.n	800668a <HAL_DMA_Abort_IT+0x1ae>
 8006662:	2301      	movs	r3, #1
 8006664:	e011      	b.n	800668a <HAL_DMA_Abort_IT+0x1ae>
 8006666:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800666a:	e00e      	b.n	800668a <HAL_DMA_Abort_IT+0x1ae>
 800666c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006670:	e00b      	b.n	800668a <HAL_DMA_Abort_IT+0x1ae>
 8006672:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006676:	e008      	b.n	800668a <HAL_DMA_Abort_IT+0x1ae>
 8006678:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800667c:	e005      	b.n	800668a <HAL_DMA_Abort_IT+0x1ae>
 800667e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006682:	e002      	b.n	800668a <HAL_DMA_Abort_IT+0x1ae>
 8006684:	2310      	movs	r3, #16
 8006686:	e000      	b.n	800668a <HAL_DMA_Abort_IT+0x1ae>
 8006688:	2301      	movs	r3, #1
 800668a:	4a17      	ldr	r2, [pc, #92]	@ (80066e8 <HAL_DMA_Abort_IT+0x20c>)
 800668c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	4798      	blx	r3
    } 
  }
  return status;
 80066ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	40020080 	.word	0x40020080
 80066bc:	40020008 	.word	0x40020008
 80066c0:	4002001c 	.word	0x4002001c
 80066c4:	40020030 	.word	0x40020030
 80066c8:	40020044 	.word	0x40020044
 80066cc:	40020058 	.word	0x40020058
 80066d0:	4002006c 	.word	0x4002006c
 80066d4:	40020408 	.word	0x40020408
 80066d8:	4002041c 	.word	0x4002041c
 80066dc:	40020430 	.word	0x40020430
 80066e0:	40020444 	.word	0x40020444
 80066e4:	40020400 	.word	0x40020400
 80066e8:	40020000 	.word	0x40020000

080066ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006708:	2204      	movs	r2, #4
 800670a:	409a      	lsls	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4013      	ands	r3, r2
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 80f1 	beq.w	80068f8 <HAL_DMA_IRQHandler+0x20c>
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	f003 0304 	and.w	r3, r3, #4
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 80eb 	beq.w	80068f8 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0320 	and.w	r3, r3, #32
 800672c:	2b00      	cmp	r3, #0
 800672e:	d107      	bne.n	8006740 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 0204 	bic.w	r2, r2, #4
 800673e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	461a      	mov	r2, r3
 8006746:	4b5f      	ldr	r3, [pc, #380]	@ (80068c4 <HAL_DMA_IRQHandler+0x1d8>)
 8006748:	429a      	cmp	r2, r3
 800674a:	d958      	bls.n	80067fe <HAL_DMA_IRQHandler+0x112>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a5d      	ldr	r2, [pc, #372]	@ (80068c8 <HAL_DMA_IRQHandler+0x1dc>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d04f      	beq.n	80067f6 <HAL_DMA_IRQHandler+0x10a>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a5c      	ldr	r2, [pc, #368]	@ (80068cc <HAL_DMA_IRQHandler+0x1e0>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d048      	beq.n	80067f2 <HAL_DMA_IRQHandler+0x106>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a5a      	ldr	r2, [pc, #360]	@ (80068d0 <HAL_DMA_IRQHandler+0x1e4>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d040      	beq.n	80067ec <HAL_DMA_IRQHandler+0x100>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a59      	ldr	r2, [pc, #356]	@ (80068d4 <HAL_DMA_IRQHandler+0x1e8>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d038      	beq.n	80067e6 <HAL_DMA_IRQHandler+0xfa>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a57      	ldr	r2, [pc, #348]	@ (80068d8 <HAL_DMA_IRQHandler+0x1ec>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d030      	beq.n	80067e0 <HAL_DMA_IRQHandler+0xf4>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a56      	ldr	r2, [pc, #344]	@ (80068dc <HAL_DMA_IRQHandler+0x1f0>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d028      	beq.n	80067da <HAL_DMA_IRQHandler+0xee>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a4d      	ldr	r2, [pc, #308]	@ (80068c4 <HAL_DMA_IRQHandler+0x1d8>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d020      	beq.n	80067d4 <HAL_DMA_IRQHandler+0xe8>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a52      	ldr	r2, [pc, #328]	@ (80068e0 <HAL_DMA_IRQHandler+0x1f4>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d019      	beq.n	80067d0 <HAL_DMA_IRQHandler+0xe4>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a50      	ldr	r2, [pc, #320]	@ (80068e4 <HAL_DMA_IRQHandler+0x1f8>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d012      	beq.n	80067cc <HAL_DMA_IRQHandler+0xe0>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a4f      	ldr	r2, [pc, #316]	@ (80068e8 <HAL_DMA_IRQHandler+0x1fc>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d00a      	beq.n	80067c6 <HAL_DMA_IRQHandler+0xda>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a4d      	ldr	r2, [pc, #308]	@ (80068ec <HAL_DMA_IRQHandler+0x200>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d102      	bne.n	80067c0 <HAL_DMA_IRQHandler+0xd4>
 80067ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80067be:	e01b      	b.n	80067f8 <HAL_DMA_IRQHandler+0x10c>
 80067c0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80067c4:	e018      	b.n	80067f8 <HAL_DMA_IRQHandler+0x10c>
 80067c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067ca:	e015      	b.n	80067f8 <HAL_DMA_IRQHandler+0x10c>
 80067cc:	2340      	movs	r3, #64	@ 0x40
 80067ce:	e013      	b.n	80067f8 <HAL_DMA_IRQHandler+0x10c>
 80067d0:	2304      	movs	r3, #4
 80067d2:	e011      	b.n	80067f8 <HAL_DMA_IRQHandler+0x10c>
 80067d4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80067d8:	e00e      	b.n	80067f8 <HAL_DMA_IRQHandler+0x10c>
 80067da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80067de:	e00b      	b.n	80067f8 <HAL_DMA_IRQHandler+0x10c>
 80067e0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80067e4:	e008      	b.n	80067f8 <HAL_DMA_IRQHandler+0x10c>
 80067e6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80067ea:	e005      	b.n	80067f8 <HAL_DMA_IRQHandler+0x10c>
 80067ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067f0:	e002      	b.n	80067f8 <HAL_DMA_IRQHandler+0x10c>
 80067f2:	2340      	movs	r3, #64	@ 0x40
 80067f4:	e000      	b.n	80067f8 <HAL_DMA_IRQHandler+0x10c>
 80067f6:	2304      	movs	r3, #4
 80067f8:	4a3d      	ldr	r2, [pc, #244]	@ (80068f0 <HAL_DMA_IRQHandler+0x204>)
 80067fa:	6053      	str	r3, [r2, #4]
 80067fc:	e057      	b.n	80068ae <HAL_DMA_IRQHandler+0x1c2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a31      	ldr	r2, [pc, #196]	@ (80068c8 <HAL_DMA_IRQHandler+0x1dc>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d04f      	beq.n	80068a8 <HAL_DMA_IRQHandler+0x1bc>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a2f      	ldr	r2, [pc, #188]	@ (80068cc <HAL_DMA_IRQHandler+0x1e0>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d048      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x1b8>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a2e      	ldr	r2, [pc, #184]	@ (80068d0 <HAL_DMA_IRQHandler+0x1e4>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d040      	beq.n	800689e <HAL_DMA_IRQHandler+0x1b2>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a2c      	ldr	r2, [pc, #176]	@ (80068d4 <HAL_DMA_IRQHandler+0x1e8>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d038      	beq.n	8006898 <HAL_DMA_IRQHandler+0x1ac>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a2b      	ldr	r2, [pc, #172]	@ (80068d8 <HAL_DMA_IRQHandler+0x1ec>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d030      	beq.n	8006892 <HAL_DMA_IRQHandler+0x1a6>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a29      	ldr	r2, [pc, #164]	@ (80068dc <HAL_DMA_IRQHandler+0x1f0>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d028      	beq.n	800688c <HAL_DMA_IRQHandler+0x1a0>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a21      	ldr	r2, [pc, #132]	@ (80068c4 <HAL_DMA_IRQHandler+0x1d8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d020      	beq.n	8006886 <HAL_DMA_IRQHandler+0x19a>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a25      	ldr	r2, [pc, #148]	@ (80068e0 <HAL_DMA_IRQHandler+0x1f4>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d019      	beq.n	8006882 <HAL_DMA_IRQHandler+0x196>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a24      	ldr	r2, [pc, #144]	@ (80068e4 <HAL_DMA_IRQHandler+0x1f8>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d012      	beq.n	800687e <HAL_DMA_IRQHandler+0x192>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a22      	ldr	r2, [pc, #136]	@ (80068e8 <HAL_DMA_IRQHandler+0x1fc>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d00a      	beq.n	8006878 <HAL_DMA_IRQHandler+0x18c>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a21      	ldr	r2, [pc, #132]	@ (80068ec <HAL_DMA_IRQHandler+0x200>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d102      	bne.n	8006872 <HAL_DMA_IRQHandler+0x186>
 800686c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006870:	e01b      	b.n	80068aa <HAL_DMA_IRQHandler+0x1be>
 8006872:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006876:	e018      	b.n	80068aa <HAL_DMA_IRQHandler+0x1be>
 8006878:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800687c:	e015      	b.n	80068aa <HAL_DMA_IRQHandler+0x1be>
 800687e:	2340      	movs	r3, #64	@ 0x40
 8006880:	e013      	b.n	80068aa <HAL_DMA_IRQHandler+0x1be>
 8006882:	2304      	movs	r3, #4
 8006884:	e011      	b.n	80068aa <HAL_DMA_IRQHandler+0x1be>
 8006886:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800688a:	e00e      	b.n	80068aa <HAL_DMA_IRQHandler+0x1be>
 800688c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006890:	e00b      	b.n	80068aa <HAL_DMA_IRQHandler+0x1be>
 8006892:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006896:	e008      	b.n	80068aa <HAL_DMA_IRQHandler+0x1be>
 8006898:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800689c:	e005      	b.n	80068aa <HAL_DMA_IRQHandler+0x1be>
 800689e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80068a2:	e002      	b.n	80068aa <HAL_DMA_IRQHandler+0x1be>
 80068a4:	2340      	movs	r3, #64	@ 0x40
 80068a6:	e000      	b.n	80068aa <HAL_DMA_IRQHandler+0x1be>
 80068a8:	2304      	movs	r3, #4
 80068aa:	4a12      	ldr	r2, [pc, #72]	@ (80068f4 <HAL_DMA_IRQHandler+0x208>)
 80068ac:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 8136 	beq.w	8006b24 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80068c0:	e130      	b.n	8006b24 <HAL_DMA_IRQHandler+0x438>
 80068c2:	bf00      	nop
 80068c4:	40020080 	.word	0x40020080
 80068c8:	40020008 	.word	0x40020008
 80068cc:	4002001c 	.word	0x4002001c
 80068d0:	40020030 	.word	0x40020030
 80068d4:	40020044 	.word	0x40020044
 80068d8:	40020058 	.word	0x40020058
 80068dc:	4002006c 	.word	0x4002006c
 80068e0:	40020408 	.word	0x40020408
 80068e4:	4002041c 	.word	0x4002041c
 80068e8:	40020430 	.word	0x40020430
 80068ec:	40020444 	.word	0x40020444
 80068f0:	40020400 	.word	0x40020400
 80068f4:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fc:	2202      	movs	r2, #2
 80068fe:	409a      	lsls	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4013      	ands	r3, r2
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 80dd 	beq.w	8006ac4 <HAL_DMA_IRQHandler+0x3d8>
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 80d7 	beq.w	8006ac4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0320 	and.w	r3, r3, #32
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10b      	bne.n	800693c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f022 020a 	bic.w	r2, r2, #10
 8006932:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	461a      	mov	r2, r3
 8006942:	4b7b      	ldr	r3, [pc, #492]	@ (8006b30 <HAL_DMA_IRQHandler+0x444>)
 8006944:	429a      	cmp	r2, r3
 8006946:	d958      	bls.n	80069fa <HAL_DMA_IRQHandler+0x30e>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a79      	ldr	r2, [pc, #484]	@ (8006b34 <HAL_DMA_IRQHandler+0x448>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d04f      	beq.n	80069f2 <HAL_DMA_IRQHandler+0x306>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a78      	ldr	r2, [pc, #480]	@ (8006b38 <HAL_DMA_IRQHandler+0x44c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d048      	beq.n	80069ee <HAL_DMA_IRQHandler+0x302>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a76      	ldr	r2, [pc, #472]	@ (8006b3c <HAL_DMA_IRQHandler+0x450>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d040      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x2fc>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a75      	ldr	r2, [pc, #468]	@ (8006b40 <HAL_DMA_IRQHandler+0x454>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d038      	beq.n	80069e2 <HAL_DMA_IRQHandler+0x2f6>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a73      	ldr	r2, [pc, #460]	@ (8006b44 <HAL_DMA_IRQHandler+0x458>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d030      	beq.n	80069dc <HAL_DMA_IRQHandler+0x2f0>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a72      	ldr	r2, [pc, #456]	@ (8006b48 <HAL_DMA_IRQHandler+0x45c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d028      	beq.n	80069d6 <HAL_DMA_IRQHandler+0x2ea>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a69      	ldr	r2, [pc, #420]	@ (8006b30 <HAL_DMA_IRQHandler+0x444>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d020      	beq.n	80069d0 <HAL_DMA_IRQHandler+0x2e4>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a6e      	ldr	r2, [pc, #440]	@ (8006b4c <HAL_DMA_IRQHandler+0x460>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d019      	beq.n	80069cc <HAL_DMA_IRQHandler+0x2e0>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a6c      	ldr	r2, [pc, #432]	@ (8006b50 <HAL_DMA_IRQHandler+0x464>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d012      	beq.n	80069c8 <HAL_DMA_IRQHandler+0x2dc>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a6b      	ldr	r2, [pc, #428]	@ (8006b54 <HAL_DMA_IRQHandler+0x468>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d00a      	beq.n	80069c2 <HAL_DMA_IRQHandler+0x2d6>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a69      	ldr	r2, [pc, #420]	@ (8006b58 <HAL_DMA_IRQHandler+0x46c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d102      	bne.n	80069bc <HAL_DMA_IRQHandler+0x2d0>
 80069b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80069ba:	e01b      	b.n	80069f4 <HAL_DMA_IRQHandler+0x308>
 80069bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80069c0:	e018      	b.n	80069f4 <HAL_DMA_IRQHandler+0x308>
 80069c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069c6:	e015      	b.n	80069f4 <HAL_DMA_IRQHandler+0x308>
 80069c8:	2320      	movs	r3, #32
 80069ca:	e013      	b.n	80069f4 <HAL_DMA_IRQHandler+0x308>
 80069cc:	2302      	movs	r3, #2
 80069ce:	e011      	b.n	80069f4 <HAL_DMA_IRQHandler+0x308>
 80069d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80069d4:	e00e      	b.n	80069f4 <HAL_DMA_IRQHandler+0x308>
 80069d6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80069da:	e00b      	b.n	80069f4 <HAL_DMA_IRQHandler+0x308>
 80069dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80069e0:	e008      	b.n	80069f4 <HAL_DMA_IRQHandler+0x308>
 80069e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80069e6:	e005      	b.n	80069f4 <HAL_DMA_IRQHandler+0x308>
 80069e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069ec:	e002      	b.n	80069f4 <HAL_DMA_IRQHandler+0x308>
 80069ee:	2320      	movs	r3, #32
 80069f0:	e000      	b.n	80069f4 <HAL_DMA_IRQHandler+0x308>
 80069f2:	2302      	movs	r3, #2
 80069f4:	4a59      	ldr	r2, [pc, #356]	@ (8006b5c <HAL_DMA_IRQHandler+0x470>)
 80069f6:	6053      	str	r3, [r2, #4]
 80069f8:	e057      	b.n	8006aaa <HAL_DMA_IRQHandler+0x3be>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a4d      	ldr	r2, [pc, #308]	@ (8006b34 <HAL_DMA_IRQHandler+0x448>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d04f      	beq.n	8006aa4 <HAL_DMA_IRQHandler+0x3b8>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a4b      	ldr	r2, [pc, #300]	@ (8006b38 <HAL_DMA_IRQHandler+0x44c>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d048      	beq.n	8006aa0 <HAL_DMA_IRQHandler+0x3b4>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a4a      	ldr	r2, [pc, #296]	@ (8006b3c <HAL_DMA_IRQHandler+0x450>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d040      	beq.n	8006a9a <HAL_DMA_IRQHandler+0x3ae>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a48      	ldr	r2, [pc, #288]	@ (8006b40 <HAL_DMA_IRQHandler+0x454>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d038      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x3a8>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a47      	ldr	r2, [pc, #284]	@ (8006b44 <HAL_DMA_IRQHandler+0x458>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d030      	beq.n	8006a8e <HAL_DMA_IRQHandler+0x3a2>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a45      	ldr	r2, [pc, #276]	@ (8006b48 <HAL_DMA_IRQHandler+0x45c>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d028      	beq.n	8006a88 <HAL_DMA_IRQHandler+0x39c>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a3d      	ldr	r2, [pc, #244]	@ (8006b30 <HAL_DMA_IRQHandler+0x444>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d020      	beq.n	8006a82 <HAL_DMA_IRQHandler+0x396>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a41      	ldr	r2, [pc, #260]	@ (8006b4c <HAL_DMA_IRQHandler+0x460>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d019      	beq.n	8006a7e <HAL_DMA_IRQHandler+0x392>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a40      	ldr	r2, [pc, #256]	@ (8006b50 <HAL_DMA_IRQHandler+0x464>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d012      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x38e>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a3e      	ldr	r2, [pc, #248]	@ (8006b54 <HAL_DMA_IRQHandler+0x468>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d00a      	beq.n	8006a74 <HAL_DMA_IRQHandler+0x388>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a3d      	ldr	r2, [pc, #244]	@ (8006b58 <HAL_DMA_IRQHandler+0x46c>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d102      	bne.n	8006a6e <HAL_DMA_IRQHandler+0x382>
 8006a68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006a6c:	e01b      	b.n	8006aa6 <HAL_DMA_IRQHandler+0x3ba>
 8006a6e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006a72:	e018      	b.n	8006aa6 <HAL_DMA_IRQHandler+0x3ba>
 8006a74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a78:	e015      	b.n	8006aa6 <HAL_DMA_IRQHandler+0x3ba>
 8006a7a:	2320      	movs	r3, #32
 8006a7c:	e013      	b.n	8006aa6 <HAL_DMA_IRQHandler+0x3ba>
 8006a7e:	2302      	movs	r3, #2
 8006a80:	e011      	b.n	8006aa6 <HAL_DMA_IRQHandler+0x3ba>
 8006a82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a86:	e00e      	b.n	8006aa6 <HAL_DMA_IRQHandler+0x3ba>
 8006a88:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006a8c:	e00b      	b.n	8006aa6 <HAL_DMA_IRQHandler+0x3ba>
 8006a8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006a92:	e008      	b.n	8006aa6 <HAL_DMA_IRQHandler+0x3ba>
 8006a94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006a98:	e005      	b.n	8006aa6 <HAL_DMA_IRQHandler+0x3ba>
 8006a9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a9e:	e002      	b.n	8006aa6 <HAL_DMA_IRQHandler+0x3ba>
 8006aa0:	2320      	movs	r3, #32
 8006aa2:	e000      	b.n	8006aa6 <HAL_DMA_IRQHandler+0x3ba>
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	4a2e      	ldr	r2, [pc, #184]	@ (8006b60 <HAL_DMA_IRQHandler+0x474>)
 8006aa8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d034      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006ac2:	e02f      	b.n	8006b24 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac8:	2208      	movs	r2, #8
 8006aca:	409a      	lsls	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4013      	ands	r3, r2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d028      	beq.n	8006b26 <HAL_DMA_IRQHandler+0x43a>
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	f003 0308 	and.w	r3, r3, #8
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d023      	beq.n	8006b26 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 020e 	bic.w	r2, r2, #14
 8006aec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006af6:	2101      	movs	r1, #1
 8006af8:	fa01 f202 	lsl.w	r2, r1, r2
 8006afc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d004      	beq.n	8006b26 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	4798      	blx	r3
    }
  }
  return;
 8006b24:	bf00      	nop
 8006b26:	bf00      	nop
}
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	40020080 	.word	0x40020080
 8006b34:	40020008 	.word	0x40020008
 8006b38:	4002001c 	.word	0x4002001c
 8006b3c:	40020030 	.word	0x40020030
 8006b40:	40020044 	.word	0x40020044
 8006b44:	40020058 	.word	0x40020058
 8006b48:	4002006c 	.word	0x4002006c
 8006b4c:	40020408 	.word	0x40020408
 8006b50:	4002041c 	.word	0x4002041c
 8006b54:	40020430 	.word	0x40020430
 8006b58:	40020444 	.word	0x40020444
 8006b5c:	40020400 	.word	0x40020400
 8006b60:	40020000 	.word	0x40020000

08006b64 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
 8006b70:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b7a:	2101      	movs	r1, #1
 8006b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8006b80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2b10      	cmp	r3, #16
 8006b90:	d108      	bne.n	8006ba4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006ba2:	e007      	b.n	8006bb4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	60da      	str	r2, [r3, #12]
}
 8006bb4:	bf00      	nop
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bc80      	pop	{r7}
 8006bbc:	4770      	bx	lr
	...

08006bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b08b      	sub	sp, #44	@ 0x2c
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006bd2:	e179      	b.n	8006ec8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69fa      	ldr	r2, [r7, #28]
 8006be4:	4013      	ands	r3, r2
 8006be6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	f040 8168 	bne.w	8006ec2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	4a96      	ldr	r2, [pc, #600]	@ (8006e50 <HAL_GPIO_Init+0x290>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d05e      	beq.n	8006cba <HAL_GPIO_Init+0xfa>
 8006bfc:	4a94      	ldr	r2, [pc, #592]	@ (8006e50 <HAL_GPIO_Init+0x290>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d875      	bhi.n	8006cee <HAL_GPIO_Init+0x12e>
 8006c02:	4a94      	ldr	r2, [pc, #592]	@ (8006e54 <HAL_GPIO_Init+0x294>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d058      	beq.n	8006cba <HAL_GPIO_Init+0xfa>
 8006c08:	4a92      	ldr	r2, [pc, #584]	@ (8006e54 <HAL_GPIO_Init+0x294>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d86f      	bhi.n	8006cee <HAL_GPIO_Init+0x12e>
 8006c0e:	4a92      	ldr	r2, [pc, #584]	@ (8006e58 <HAL_GPIO_Init+0x298>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d052      	beq.n	8006cba <HAL_GPIO_Init+0xfa>
 8006c14:	4a90      	ldr	r2, [pc, #576]	@ (8006e58 <HAL_GPIO_Init+0x298>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d869      	bhi.n	8006cee <HAL_GPIO_Init+0x12e>
 8006c1a:	4a90      	ldr	r2, [pc, #576]	@ (8006e5c <HAL_GPIO_Init+0x29c>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d04c      	beq.n	8006cba <HAL_GPIO_Init+0xfa>
 8006c20:	4a8e      	ldr	r2, [pc, #568]	@ (8006e5c <HAL_GPIO_Init+0x29c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d863      	bhi.n	8006cee <HAL_GPIO_Init+0x12e>
 8006c26:	4a8e      	ldr	r2, [pc, #568]	@ (8006e60 <HAL_GPIO_Init+0x2a0>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d046      	beq.n	8006cba <HAL_GPIO_Init+0xfa>
 8006c2c:	4a8c      	ldr	r2, [pc, #560]	@ (8006e60 <HAL_GPIO_Init+0x2a0>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d85d      	bhi.n	8006cee <HAL_GPIO_Init+0x12e>
 8006c32:	2b12      	cmp	r3, #18
 8006c34:	d82a      	bhi.n	8006c8c <HAL_GPIO_Init+0xcc>
 8006c36:	2b12      	cmp	r3, #18
 8006c38:	d859      	bhi.n	8006cee <HAL_GPIO_Init+0x12e>
 8006c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c40 <HAL_GPIO_Init+0x80>)
 8006c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c40:	08006cbb 	.word	0x08006cbb
 8006c44:	08006c95 	.word	0x08006c95
 8006c48:	08006ca7 	.word	0x08006ca7
 8006c4c:	08006ce9 	.word	0x08006ce9
 8006c50:	08006cef 	.word	0x08006cef
 8006c54:	08006cef 	.word	0x08006cef
 8006c58:	08006cef 	.word	0x08006cef
 8006c5c:	08006cef 	.word	0x08006cef
 8006c60:	08006cef 	.word	0x08006cef
 8006c64:	08006cef 	.word	0x08006cef
 8006c68:	08006cef 	.word	0x08006cef
 8006c6c:	08006cef 	.word	0x08006cef
 8006c70:	08006cef 	.word	0x08006cef
 8006c74:	08006cef 	.word	0x08006cef
 8006c78:	08006cef 	.word	0x08006cef
 8006c7c:	08006cef 	.word	0x08006cef
 8006c80:	08006cef 	.word	0x08006cef
 8006c84:	08006c9d 	.word	0x08006c9d
 8006c88:	08006cb1 	.word	0x08006cb1
 8006c8c:	4a75      	ldr	r2, [pc, #468]	@ (8006e64 <HAL_GPIO_Init+0x2a4>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d013      	beq.n	8006cba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006c92:	e02c      	b.n	8006cee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	623b      	str	r3, [r7, #32]
          break;
 8006c9a:	e029      	b.n	8006cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	623b      	str	r3, [r7, #32]
          break;
 8006ca4:	e024      	b.n	8006cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	3308      	adds	r3, #8
 8006cac:	623b      	str	r3, [r7, #32]
          break;
 8006cae:	e01f      	b.n	8006cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	330c      	adds	r3, #12
 8006cb6:	623b      	str	r3, [r7, #32]
          break;
 8006cb8:	e01a      	b.n	8006cf0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d102      	bne.n	8006cc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006cc2:	2304      	movs	r3, #4
 8006cc4:	623b      	str	r3, [r7, #32]
          break;
 8006cc6:	e013      	b.n	8006cf0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d105      	bne.n	8006cdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006cd0:	2308      	movs	r3, #8
 8006cd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	69fa      	ldr	r2, [r7, #28]
 8006cd8:	611a      	str	r2, [r3, #16]
          break;
 8006cda:	e009      	b.n	8006cf0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006cdc:	2308      	movs	r3, #8
 8006cde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	69fa      	ldr	r2, [r7, #28]
 8006ce4:	615a      	str	r2, [r3, #20]
          break;
 8006ce6:	e003      	b.n	8006cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	623b      	str	r3, [r7, #32]
          break;
 8006cec:	e000      	b.n	8006cf0 <HAL_GPIO_Init+0x130>
          break;
 8006cee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	2bff      	cmp	r3, #255	@ 0xff
 8006cf4:	d801      	bhi.n	8006cfa <HAL_GPIO_Init+0x13a>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	e001      	b.n	8006cfe <HAL_GPIO_Init+0x13e>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	2bff      	cmp	r3, #255	@ 0xff
 8006d04:	d802      	bhi.n	8006d0c <HAL_GPIO_Init+0x14c>
 8006d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	e002      	b.n	8006d12 <HAL_GPIO_Init+0x152>
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0e:	3b08      	subs	r3, #8
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	210f      	movs	r1, #15
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d20:	43db      	mvns	r3, r3
 8006d22:	401a      	ands	r2, r3
 8006d24:	6a39      	ldr	r1, [r7, #32]
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	fa01 f303 	lsl.w	r3, r1, r3
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 80c1 	beq.w	8006ec2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006d40:	4b49      	ldr	r3, [pc, #292]	@ (8006e68 <HAL_GPIO_Init+0x2a8>)
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	4a48      	ldr	r2, [pc, #288]	@ (8006e68 <HAL_GPIO_Init+0x2a8>)
 8006d46:	f043 0301 	orr.w	r3, r3, #1
 8006d4a:	6193      	str	r3, [r2, #24]
 8006d4c:	4b46      	ldr	r3, [pc, #280]	@ (8006e68 <HAL_GPIO_Init+0x2a8>)
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	60bb      	str	r3, [r7, #8]
 8006d56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006d58:	4a44      	ldr	r2, [pc, #272]	@ (8006e6c <HAL_GPIO_Init+0x2ac>)
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5c:	089b      	lsrs	r3, r3, #2
 8006d5e:	3302      	adds	r3, #2
 8006d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d68:	f003 0303 	and.w	r3, r3, #3
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	220f      	movs	r2, #15
 8006d70:	fa02 f303 	lsl.w	r3, r2, r3
 8006d74:	43db      	mvns	r3, r3
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	4013      	ands	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a3c      	ldr	r2, [pc, #240]	@ (8006e70 <HAL_GPIO_Init+0x2b0>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d01f      	beq.n	8006dc4 <HAL_GPIO_Init+0x204>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a3b      	ldr	r2, [pc, #236]	@ (8006e74 <HAL_GPIO_Init+0x2b4>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d019      	beq.n	8006dc0 <HAL_GPIO_Init+0x200>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a3a      	ldr	r2, [pc, #232]	@ (8006e78 <HAL_GPIO_Init+0x2b8>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d013      	beq.n	8006dbc <HAL_GPIO_Init+0x1fc>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a39      	ldr	r2, [pc, #228]	@ (8006e7c <HAL_GPIO_Init+0x2bc>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d00d      	beq.n	8006db8 <HAL_GPIO_Init+0x1f8>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a38      	ldr	r2, [pc, #224]	@ (8006e80 <HAL_GPIO_Init+0x2c0>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d007      	beq.n	8006db4 <HAL_GPIO_Init+0x1f4>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a37      	ldr	r2, [pc, #220]	@ (8006e84 <HAL_GPIO_Init+0x2c4>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d101      	bne.n	8006db0 <HAL_GPIO_Init+0x1f0>
 8006dac:	2305      	movs	r3, #5
 8006dae:	e00a      	b.n	8006dc6 <HAL_GPIO_Init+0x206>
 8006db0:	2306      	movs	r3, #6
 8006db2:	e008      	b.n	8006dc6 <HAL_GPIO_Init+0x206>
 8006db4:	2304      	movs	r3, #4
 8006db6:	e006      	b.n	8006dc6 <HAL_GPIO_Init+0x206>
 8006db8:	2303      	movs	r3, #3
 8006dba:	e004      	b.n	8006dc6 <HAL_GPIO_Init+0x206>
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	e002      	b.n	8006dc6 <HAL_GPIO_Init+0x206>
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e000      	b.n	8006dc6 <HAL_GPIO_Init+0x206>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dc8:	f002 0203 	and.w	r2, r2, #3
 8006dcc:	0092      	lsls	r2, r2, #2
 8006dce:	4093      	lsls	r3, r2
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006dd6:	4925      	ldr	r1, [pc, #148]	@ (8006e6c <HAL_GPIO_Init+0x2ac>)
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dda:	089b      	lsrs	r3, r3, #2
 8006ddc:	3302      	adds	r3, #2
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d006      	beq.n	8006dfe <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006df0:	4b25      	ldr	r3, [pc, #148]	@ (8006e88 <HAL_GPIO_Init+0x2c8>)
 8006df2:	689a      	ldr	r2, [r3, #8]
 8006df4:	4924      	ldr	r1, [pc, #144]	@ (8006e88 <HAL_GPIO_Init+0x2c8>)
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	608b      	str	r3, [r1, #8]
 8006dfc:	e006      	b.n	8006e0c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006dfe:	4b22      	ldr	r3, [pc, #136]	@ (8006e88 <HAL_GPIO_Init+0x2c8>)
 8006e00:	689a      	ldr	r2, [r3, #8]
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	43db      	mvns	r3, r3
 8006e06:	4920      	ldr	r1, [pc, #128]	@ (8006e88 <HAL_GPIO_Init+0x2c8>)
 8006e08:	4013      	ands	r3, r2
 8006e0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d006      	beq.n	8006e26 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006e18:	4b1b      	ldr	r3, [pc, #108]	@ (8006e88 <HAL_GPIO_Init+0x2c8>)
 8006e1a:	68da      	ldr	r2, [r3, #12]
 8006e1c:	491a      	ldr	r1, [pc, #104]	@ (8006e88 <HAL_GPIO_Init+0x2c8>)
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	60cb      	str	r3, [r1, #12]
 8006e24:	e006      	b.n	8006e34 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006e26:	4b18      	ldr	r3, [pc, #96]	@ (8006e88 <HAL_GPIO_Init+0x2c8>)
 8006e28:	68da      	ldr	r2, [r3, #12]
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	43db      	mvns	r3, r3
 8006e2e:	4916      	ldr	r1, [pc, #88]	@ (8006e88 <HAL_GPIO_Init+0x2c8>)
 8006e30:	4013      	ands	r3, r2
 8006e32:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d025      	beq.n	8006e8c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006e40:	4b11      	ldr	r3, [pc, #68]	@ (8006e88 <HAL_GPIO_Init+0x2c8>)
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	4910      	ldr	r1, [pc, #64]	@ (8006e88 <HAL_GPIO_Init+0x2c8>)
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	604b      	str	r3, [r1, #4]
 8006e4c:	e025      	b.n	8006e9a <HAL_GPIO_Init+0x2da>
 8006e4e:	bf00      	nop
 8006e50:	10320000 	.word	0x10320000
 8006e54:	10310000 	.word	0x10310000
 8006e58:	10220000 	.word	0x10220000
 8006e5c:	10210000 	.word	0x10210000
 8006e60:	10120000 	.word	0x10120000
 8006e64:	10110000 	.word	0x10110000
 8006e68:	40021000 	.word	0x40021000
 8006e6c:	40010000 	.word	0x40010000
 8006e70:	40010800 	.word	0x40010800
 8006e74:	40010c00 	.word	0x40010c00
 8006e78:	40011000 	.word	0x40011000
 8006e7c:	40011400 	.word	0x40011400
 8006e80:	40011800 	.word	0x40011800
 8006e84:	40011c00 	.word	0x40011c00
 8006e88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006e8c:	4b15      	ldr	r3, [pc, #84]	@ (8006ee4 <HAL_GPIO_Init+0x324>)
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	43db      	mvns	r3, r3
 8006e94:	4913      	ldr	r1, [pc, #76]	@ (8006ee4 <HAL_GPIO_Init+0x324>)
 8006e96:	4013      	ands	r3, r2
 8006e98:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d006      	beq.n	8006eb4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8006ee4 <HAL_GPIO_Init+0x324>)
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	490e      	ldr	r1, [pc, #56]	@ (8006ee4 <HAL_GPIO_Init+0x324>)
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	600b      	str	r3, [r1, #0]
 8006eb2:	e006      	b.n	8006ec2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee4 <HAL_GPIO_Init+0x324>)
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	43db      	mvns	r3, r3
 8006ebc:	4909      	ldr	r1, [pc, #36]	@ (8006ee4 <HAL_GPIO_Init+0x324>)
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ece:	fa22 f303 	lsr.w	r3, r2, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f47f ae7e 	bne.w	8006bd4 <HAL_GPIO_Init+0x14>
  }
}
 8006ed8:	bf00      	nop
 8006eda:	bf00      	nop
 8006edc:	372c      	adds	r7, #44	@ 0x2c
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bc80      	pop	{r7}
 8006ee2:	4770      	bx	lr
 8006ee4:	40010400 	.word	0x40010400

08006ee8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	887b      	ldrh	r3, [r7, #2]
 8006efa:	4013      	ands	r3, r2
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d002      	beq.n	8006f06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006f00:	2301      	movs	r3, #1
 8006f02:	73fb      	strb	r3, [r7, #15]
 8006f04:	e001      	b.n	8006f0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f06:	2300      	movs	r3, #0
 8006f08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bc80      	pop	{r7}
 8006f14:	4770      	bx	lr

08006f16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
 8006f1e:	460b      	mov	r3, r1
 8006f20:	807b      	strh	r3, [r7, #2]
 8006f22:	4613      	mov	r3, r2
 8006f24:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006f26:	787b      	ldrb	r3, [r7, #1]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d003      	beq.n	8006f34 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f2c:	887a      	ldrh	r2, [r7, #2]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006f32:	e003      	b.n	8006f3c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006f34:	887b      	ldrh	r3, [r7, #2]
 8006f36:	041a      	lsls	r2, r3, #16
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	611a      	str	r2, [r3, #16]
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bc80      	pop	{r7}
 8006f44:	4770      	bx	lr

08006f46 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b085      	sub	sp, #20
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	460b      	mov	r3, r1
 8006f50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006f58:	887a      	ldrh	r2, [r7, #2]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	041a      	lsls	r2, r3, #16
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	43d9      	mvns	r1, r3
 8006f64:	887b      	ldrh	r3, [r7, #2]
 8006f66:	400b      	ands	r3, r1
 8006f68:	431a      	orrs	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	611a      	str	r2, [r3, #16]
}
 8006f6e:	bf00      	nop
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bc80      	pop	{r7}
 8006f76:	4770      	bx	lr

08006f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e12b      	b.n	80071e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d106      	bne.n	8006fa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7fd fac4 	bl	800452c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2224      	movs	r2, #36	@ 0x24
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 0201 	bic.w	r2, r2, #1
 8006fba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006fca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006fda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006fdc:	f002 f9d8 	bl	8009390 <HAL_RCC_GetPCLK1Freq>
 8006fe0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	4a81      	ldr	r2, [pc, #516]	@ (80071ec <HAL_I2C_Init+0x274>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d807      	bhi.n	8006ffc <HAL_I2C_Init+0x84>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	4a80      	ldr	r2, [pc, #512]	@ (80071f0 <HAL_I2C_Init+0x278>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	bf94      	ite	ls
 8006ff4:	2301      	movls	r3, #1
 8006ff6:	2300      	movhi	r3, #0
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	e006      	b.n	800700a <HAL_I2C_Init+0x92>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4a7d      	ldr	r2, [pc, #500]	@ (80071f4 <HAL_I2C_Init+0x27c>)
 8007000:	4293      	cmp	r3, r2
 8007002:	bf94      	ite	ls
 8007004:	2301      	movls	r3, #1
 8007006:	2300      	movhi	r3, #0
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e0e7      	b.n	80071e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4a78      	ldr	r2, [pc, #480]	@ (80071f8 <HAL_I2C_Init+0x280>)
 8007016:	fba2 2303 	umull	r2, r3, r2, r3
 800701a:	0c9b      	lsrs	r3, r3, #18
 800701c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	430a      	orrs	r2, r1
 8007030:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	4a6a      	ldr	r2, [pc, #424]	@ (80071ec <HAL_I2C_Init+0x274>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d802      	bhi.n	800704c <HAL_I2C_Init+0xd4>
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	3301      	adds	r3, #1
 800704a:	e009      	b.n	8007060 <HAL_I2C_Init+0xe8>
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007052:	fb02 f303 	mul.w	r3, r2, r3
 8007056:	4a69      	ldr	r2, [pc, #420]	@ (80071fc <HAL_I2C_Init+0x284>)
 8007058:	fba2 2303 	umull	r2, r3, r2, r3
 800705c:	099b      	lsrs	r3, r3, #6
 800705e:	3301      	adds	r3, #1
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	6812      	ldr	r2, [r2, #0]
 8007064:	430b      	orrs	r3, r1
 8007066:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	69db      	ldr	r3, [r3, #28]
 800706e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007072:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	495c      	ldr	r1, [pc, #368]	@ (80071ec <HAL_I2C_Init+0x274>)
 800707c:	428b      	cmp	r3, r1
 800707e:	d819      	bhi.n	80070b4 <HAL_I2C_Init+0x13c>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	1e59      	subs	r1, r3, #1
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	005b      	lsls	r3, r3, #1
 800708a:	fbb1 f3f3 	udiv	r3, r1, r3
 800708e:	1c59      	adds	r1, r3, #1
 8007090:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007094:	400b      	ands	r3, r1
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00a      	beq.n	80070b0 <HAL_I2C_Init+0x138>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	1e59      	subs	r1, r3, #1
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80070a8:	3301      	adds	r3, #1
 80070aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070ae:	e051      	b.n	8007154 <HAL_I2C_Init+0x1dc>
 80070b0:	2304      	movs	r3, #4
 80070b2:	e04f      	b.n	8007154 <HAL_I2C_Init+0x1dc>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d111      	bne.n	80070e0 <HAL_I2C_Init+0x168>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	1e58      	subs	r0, r3, #1
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6859      	ldr	r1, [r3, #4]
 80070c4:	460b      	mov	r3, r1
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	440b      	add	r3, r1
 80070ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80070ce:	3301      	adds	r3, #1
 80070d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	bf0c      	ite	eq
 80070d8:	2301      	moveq	r3, #1
 80070da:	2300      	movne	r3, #0
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	e012      	b.n	8007106 <HAL_I2C_Init+0x18e>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	1e58      	subs	r0, r3, #1
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6859      	ldr	r1, [r3, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	440b      	add	r3, r1
 80070ee:	0099      	lsls	r1, r3, #2
 80070f0:	440b      	add	r3, r1
 80070f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80070f6:	3301      	adds	r3, #1
 80070f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	bf0c      	ite	eq
 8007100:	2301      	moveq	r3, #1
 8007102:	2300      	movne	r3, #0
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d001      	beq.n	800710e <HAL_I2C_Init+0x196>
 800710a:	2301      	movs	r3, #1
 800710c:	e022      	b.n	8007154 <HAL_I2C_Init+0x1dc>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10e      	bne.n	8007134 <HAL_I2C_Init+0x1bc>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	1e58      	subs	r0, r3, #1
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6859      	ldr	r1, [r3, #4]
 800711e:	460b      	mov	r3, r1
 8007120:	005b      	lsls	r3, r3, #1
 8007122:	440b      	add	r3, r1
 8007124:	fbb0 f3f3 	udiv	r3, r0, r3
 8007128:	3301      	adds	r3, #1
 800712a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800712e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007132:	e00f      	b.n	8007154 <HAL_I2C_Init+0x1dc>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	1e58      	subs	r0, r3, #1
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6859      	ldr	r1, [r3, #4]
 800713c:	460b      	mov	r3, r1
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	440b      	add	r3, r1
 8007142:	0099      	lsls	r1, r3, #2
 8007144:	440b      	add	r3, r1
 8007146:	fbb0 f3f3 	udiv	r3, r0, r3
 800714a:	3301      	adds	r3, #1
 800714c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007150:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007154:	6879      	ldr	r1, [r7, #4]
 8007156:	6809      	ldr	r1, [r1, #0]
 8007158:	4313      	orrs	r3, r2
 800715a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	69da      	ldr	r2, [r3, #28]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	431a      	orrs	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	430a      	orrs	r2, r1
 8007176:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007182:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	6911      	ldr	r1, [r2, #16]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	68d2      	ldr	r2, [r2, #12]
 800718e:	4311      	orrs	r1, r2
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	6812      	ldr	r2, [r2, #0]
 8007194:	430b      	orrs	r3, r1
 8007196:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	695a      	ldr	r2, [r3, #20]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	431a      	orrs	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0201 	orr.w	r2, r2, #1
 80071c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2220      	movs	r2, #32
 80071ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	000186a0 	.word	0x000186a0
 80071f0:	001e847f 	.word	0x001e847f
 80071f4:	003d08ff 	.word	0x003d08ff
 80071f8:	431bde83 	.word	0x431bde83
 80071fc:	10624dd3 	.word	0x10624dd3

08007200 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b088      	sub	sp, #32
 8007204:	af02      	add	r7, sp, #8
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	607a      	str	r2, [r7, #4]
 800720a:	461a      	mov	r2, r3
 800720c:	460b      	mov	r3, r1
 800720e:	817b      	strh	r3, [r7, #10]
 8007210:	4613      	mov	r3, r2
 8007212:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007214:	f7fe ff42 	bl	800609c <HAL_GetTick>
 8007218:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b20      	cmp	r3, #32
 8007224:	f040 80e0 	bne.w	80073e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	2319      	movs	r3, #25
 800722e:	2201      	movs	r2, #1
 8007230:	4970      	ldr	r1, [pc, #448]	@ (80073f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f001 faac 	bl	8008790 <I2C_WaitOnFlagUntilTimeout>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d001      	beq.n	8007242 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800723e:	2302      	movs	r3, #2
 8007240:	e0d3      	b.n	80073ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007248:	2b01      	cmp	r3, #1
 800724a:	d101      	bne.n	8007250 <HAL_I2C_Master_Transmit+0x50>
 800724c:	2302      	movs	r3, #2
 800724e:	e0cc      	b.n	80073ea <HAL_I2C_Master_Transmit+0x1ea>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0301 	and.w	r3, r3, #1
 8007262:	2b01      	cmp	r3, #1
 8007264:	d007      	beq.n	8007276 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f042 0201 	orr.w	r2, r2, #1
 8007274:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007284:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2221      	movs	r2, #33	@ 0x21
 800728a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2210      	movs	r2, #16
 8007292:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	893a      	ldrh	r2, [r7, #8]
 80072a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	4a50      	ldr	r2, [pc, #320]	@ (80073f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80072b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80072b8:	8979      	ldrh	r1, [r7, #10]
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	6a3a      	ldr	r2, [r7, #32]
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 ff98 	bl	80081f4 <I2C_MasterRequestWrite>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e08d      	b.n	80073ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072ce:	2300      	movs	r3, #0
 80072d0:	613b      	str	r3, [r7, #16]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	695b      	ldr	r3, [r3, #20]
 80072d8:	613b      	str	r3, [r7, #16]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	613b      	str	r3, [r7, #16]
 80072e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80072e4:	e066      	b.n	80073b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	6a39      	ldr	r1, [r7, #32]
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f001 fb6a 	bl	80089c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00d      	beq.n	8007312 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072fa:	2b04      	cmp	r3, #4
 80072fc:	d107      	bne.n	800730e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800730c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e06b      	b.n	80073ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007316:	781a      	ldrb	r2, [r3, #0]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007322:	1c5a      	adds	r2, r3, #1
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800732c:	b29b      	uxth	r3, r3
 800732e:	3b01      	subs	r3, #1
 8007330:	b29a      	uxth	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800733a:	3b01      	subs	r3, #1
 800733c:	b29a      	uxth	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	f003 0304 	and.w	r3, r3, #4
 800734c:	2b04      	cmp	r3, #4
 800734e:	d11b      	bne.n	8007388 <HAL_I2C_Master_Transmit+0x188>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007354:	2b00      	cmp	r3, #0
 8007356:	d017      	beq.n	8007388 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735c:	781a      	ldrb	r2, [r3, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007368:	1c5a      	adds	r2, r3, #1
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007372:	b29b      	uxth	r3, r3
 8007374:	3b01      	subs	r3, #1
 8007376:	b29a      	uxth	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007380:	3b01      	subs	r3, #1
 8007382:	b29a      	uxth	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007388:	697a      	ldr	r2, [r7, #20]
 800738a:	6a39      	ldr	r1, [r7, #32]
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f001 fb61 	bl	8008a54 <I2C_WaitOnBTFFlagUntilTimeout>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00d      	beq.n	80073b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800739c:	2b04      	cmp	r3, #4
 800739e:	d107      	bne.n	80073b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e01a      	b.n	80073ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d194      	bne.n	80072e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80073e4:	2300      	movs	r3, #0
 80073e6:	e000      	b.n	80073ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80073e8:	2302      	movs	r3, #2
  }
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3718      	adds	r7, #24
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	00100002 	.word	0x00100002
 80073f8:	ffff0000 	.word	0xffff0000

080073fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b08c      	sub	sp, #48	@ 0x30
 8007400:	af02      	add	r7, sp, #8
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	607a      	str	r2, [r7, #4]
 8007406:	461a      	mov	r2, r3
 8007408:	460b      	mov	r3, r1
 800740a:	817b      	strh	r3, [r7, #10]
 800740c:	4613      	mov	r3, r2
 800740e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8007410:	2300      	movs	r3, #0
 8007412:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007414:	f7fe fe42 	bl	800609c <HAL_GetTick>
 8007418:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b20      	cmp	r3, #32
 8007424:	f040 824b 	bne.w	80078be <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742a:	9300      	str	r3, [sp, #0]
 800742c:	2319      	movs	r3, #25
 800742e:	2201      	movs	r2, #1
 8007430:	497f      	ldr	r1, [pc, #508]	@ (8007630 <HAL_I2C_Master_Receive+0x234>)
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f001 f9ac 	bl	8008790 <I2C_WaitOnFlagUntilTimeout>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d001      	beq.n	8007442 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800743e:	2302      	movs	r3, #2
 8007440:	e23e      	b.n	80078c0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007448:	2b01      	cmp	r3, #1
 800744a:	d101      	bne.n	8007450 <HAL_I2C_Master_Receive+0x54>
 800744c:	2302      	movs	r3, #2
 800744e:	e237      	b.n	80078c0 <HAL_I2C_Master_Receive+0x4c4>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	2b01      	cmp	r3, #1
 8007464:	d007      	beq.n	8007476 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f042 0201 	orr.w	r2, r2, #1
 8007474:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007484:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2222      	movs	r2, #34	@ 0x22
 800748a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2210      	movs	r2, #16
 8007492:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	893a      	ldrh	r2, [r7, #8]
 80074a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	4a5f      	ldr	r2, [pc, #380]	@ (8007634 <HAL_I2C_Master_Receive+0x238>)
 80074b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80074b8:	8979      	ldrh	r1, [r7, #10]
 80074ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 ff1a 	bl	80082f8 <I2C_MasterRequestRead>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e1f8      	b.n	80078c0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d113      	bne.n	80074fe <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074d6:	2300      	movs	r3, #0
 80074d8:	61fb      	str	r3, [r7, #28]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	61fb      	str	r3, [r7, #28]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	699b      	ldr	r3, [r3, #24]
 80074e8:	61fb      	str	r3, [r7, #28]
 80074ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	e1cc      	b.n	8007898 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007502:	2b01      	cmp	r3, #1
 8007504:	d11e      	bne.n	8007544 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007514:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007516:	b672      	cpsid	i
}
 8007518:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800751a:	2300      	movs	r3, #0
 800751c:	61bb      	str	r3, [r7, #24]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	695b      	ldr	r3, [r3, #20]
 8007524:	61bb      	str	r3, [r7, #24]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	61bb      	str	r3, [r7, #24]
 800752e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800753e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007540:	b662      	cpsie	i
}
 8007542:	e035      	b.n	80075b0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007548:	2b02      	cmp	r3, #2
 800754a:	d11e      	bne.n	800758a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800755a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800755c:	b672      	cpsid	i
}
 800755e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007560:	2300      	movs	r3, #0
 8007562:	617b      	str	r3, [r7, #20]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	617b      	str	r3, [r7, #20]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	617b      	str	r3, [r7, #20]
 8007574:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007584:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007586:	b662      	cpsie	i
}
 8007588:	e012      	b.n	80075b0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007598:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800759a:	2300      	movs	r3, #0
 800759c:	613b      	str	r3, [r7, #16]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	695b      	ldr	r3, [r3, #20]
 80075a4:	613b      	str	r3, [r7, #16]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	613b      	str	r3, [r7, #16]
 80075ae:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80075b0:	e172      	b.n	8007898 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	f200 811f 	bhi.w	80077fa <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d123      	bne.n	800760c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f001 fa8b 	bl	8008ae4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d001      	beq.n	80075d8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e173      	b.n	80078c0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	691a      	ldr	r2, [r3, #16]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075f4:	3b01      	subs	r3, #1
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007600:	b29b      	uxth	r3, r3
 8007602:	3b01      	subs	r3, #1
 8007604:	b29a      	uxth	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800760a:	e145      	b.n	8007898 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007610:	2b02      	cmp	r3, #2
 8007612:	d152      	bne.n	80076ba <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761a:	2200      	movs	r2, #0
 800761c:	4906      	ldr	r1, [pc, #24]	@ (8007638 <HAL_I2C_Master_Receive+0x23c>)
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f001 f8b6 	bl	8008790 <I2C_WaitOnFlagUntilTimeout>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d008      	beq.n	800763c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e148      	b.n	80078c0 <HAL_I2C_Master_Receive+0x4c4>
 800762e:	bf00      	nop
 8007630:	00100002 	.word	0x00100002
 8007634:	ffff0000 	.word	0xffff0000
 8007638:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800763c:	b672      	cpsid	i
}
 800763e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800764e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	691a      	ldr	r2, [r3, #16]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800765a:	b2d2      	uxtb	r2, r2
 800765c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007662:	1c5a      	adds	r2, r3, #1
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800766c:	3b01      	subs	r3, #1
 800766e:	b29a      	uxth	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007678:	b29b      	uxth	r3, r3
 800767a:	3b01      	subs	r3, #1
 800767c:	b29a      	uxth	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007682:	b662      	cpsie	i
}
 8007684:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	691a      	ldr	r2, [r3, #16]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007690:	b2d2      	uxtb	r2, r2
 8007692:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007698:	1c5a      	adds	r2, r3, #1
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076a2:	3b01      	subs	r3, #1
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	3b01      	subs	r3, #1
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80076b8:	e0ee      	b.n	8007898 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80076ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c0:	2200      	movs	r2, #0
 80076c2:	4981      	ldr	r1, [pc, #516]	@ (80078c8 <HAL_I2C_Master_Receive+0x4cc>)
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f001 f863 	bl	8008790 <I2C_WaitOnFlagUntilTimeout>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d001      	beq.n	80076d4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e0f5      	b.n	80078c0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80076e4:	b672      	cpsid	i
}
 80076e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	691a      	ldr	r2, [r3, #16]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f2:	b2d2      	uxtb	r2, r2
 80076f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076fa:	1c5a      	adds	r2, r3, #1
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007704:	3b01      	subs	r3, #1
 8007706:	b29a      	uxth	r2, r3
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007710:	b29b      	uxth	r3, r3
 8007712:	3b01      	subs	r3, #1
 8007714:	b29a      	uxth	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800771a:	4b6c      	ldr	r3, [pc, #432]	@ (80078cc <HAL_I2C_Master_Receive+0x4d0>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	08db      	lsrs	r3, r3, #3
 8007720:	4a6b      	ldr	r2, [pc, #428]	@ (80078d0 <HAL_I2C_Master_Receive+0x4d4>)
 8007722:	fba2 2303 	umull	r2, r3, r2, r3
 8007726:	0a1a      	lsrs	r2, r3, #8
 8007728:	4613      	mov	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	00da      	lsls	r2, r3, #3
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	3b01      	subs	r3, #1
 8007738:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800773a:	6a3b      	ldr	r3, [r7, #32]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d118      	bne.n	8007772 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2220      	movs	r2, #32
 800774a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800775a:	f043 0220 	orr.w	r2, r3, #32
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8007762:	b662      	cpsie	i
}
 8007764:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e0a6      	b.n	80078c0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	2b04      	cmp	r3, #4
 800777e:	d1d9      	bne.n	8007734 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800778e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	691a      	ldr	r2, [r3, #16]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800779a:	b2d2      	uxtb	r2, r2
 800779c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a2:	1c5a      	adds	r2, r3, #1
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077ac:	3b01      	subs	r3, #1
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	3b01      	subs	r3, #1
 80077bc:	b29a      	uxth	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80077c2:	b662      	cpsie	i
}
 80077c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	691a      	ldr	r2, [r3, #16]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d0:	b2d2      	uxtb	r2, r2
 80077d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d8:	1c5a      	adds	r2, r3, #1
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077e2:	3b01      	subs	r3, #1
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	3b01      	subs	r3, #1
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80077f8:	e04e      	b.n	8007898 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f001 f970 	bl	8008ae4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d001      	beq.n	800780e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e058      	b.n	80078c0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	691a      	ldr	r2, [r3, #16]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007818:	b2d2      	uxtb	r2, r2
 800781a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007820:	1c5a      	adds	r2, r3, #1
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800782a:	3b01      	subs	r3, #1
 800782c:	b29a      	uxth	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007836:	b29b      	uxth	r3, r3
 8007838:	3b01      	subs	r3, #1
 800783a:	b29a      	uxth	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	f003 0304 	and.w	r3, r3, #4
 800784a:	2b04      	cmp	r3, #4
 800784c:	d124      	bne.n	8007898 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007852:	2b03      	cmp	r3, #3
 8007854:	d107      	bne.n	8007866 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007864:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	691a      	ldr	r2, [r3, #16]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007870:	b2d2      	uxtb	r2, r2
 8007872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007878:	1c5a      	adds	r2, r3, #1
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007882:	3b01      	subs	r3, #1
 8007884:	b29a      	uxth	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800788e:	b29b      	uxth	r3, r3
 8007890:	3b01      	subs	r3, #1
 8007892:	b29a      	uxth	r2, r3
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800789c:	2b00      	cmp	r3, #0
 800789e:	f47f ae88 	bne.w	80075b2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2220      	movs	r2, #32
 80078a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80078ba:	2300      	movs	r3, #0
 80078bc:	e000      	b.n	80078c0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80078be:	2302      	movs	r3, #2
  }
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3728      	adds	r7, #40	@ 0x28
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	00010004 	.word	0x00010004
 80078cc:	20000028 	.word	0x20000028
 80078d0:	14f8b589 	.word	0x14f8b589

080078d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b088      	sub	sp, #32
 80078d8:	af02      	add	r7, sp, #8
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	4608      	mov	r0, r1
 80078de:	4611      	mov	r1, r2
 80078e0:	461a      	mov	r2, r3
 80078e2:	4603      	mov	r3, r0
 80078e4:	817b      	strh	r3, [r7, #10]
 80078e6:	460b      	mov	r3, r1
 80078e8:	813b      	strh	r3, [r7, #8]
 80078ea:	4613      	mov	r3, r2
 80078ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80078ee:	f7fe fbd5 	bl	800609c <HAL_GetTick>
 80078f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b20      	cmp	r3, #32
 80078fe:	f040 80d9 	bne.w	8007ab4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	2319      	movs	r3, #25
 8007908:	2201      	movs	r2, #1
 800790a:	496d      	ldr	r1, [pc, #436]	@ (8007ac0 <HAL_I2C_Mem_Write+0x1ec>)
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 ff3f 	bl	8008790 <I2C_WaitOnFlagUntilTimeout>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d001      	beq.n	800791c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007918:	2302      	movs	r3, #2
 800791a:	e0cc      	b.n	8007ab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007922:	2b01      	cmp	r3, #1
 8007924:	d101      	bne.n	800792a <HAL_I2C_Mem_Write+0x56>
 8007926:	2302      	movs	r3, #2
 8007928:	e0c5      	b.n	8007ab6 <HAL_I2C_Mem_Write+0x1e2>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 0301 	and.w	r3, r3, #1
 800793c:	2b01      	cmp	r3, #1
 800793e:	d007      	beq.n	8007950 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f042 0201 	orr.w	r2, r2, #1
 800794e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800795e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2221      	movs	r2, #33	@ 0x21
 8007964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2240      	movs	r2, #64	@ 0x40
 800796c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6a3a      	ldr	r2, [r7, #32]
 800797a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007980:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007986:	b29a      	uxth	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	4a4d      	ldr	r2, [pc, #308]	@ (8007ac4 <HAL_I2C_Mem_Write+0x1f0>)
 8007990:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007992:	88f8      	ldrh	r0, [r7, #6]
 8007994:	893a      	ldrh	r2, [r7, #8]
 8007996:	8979      	ldrh	r1, [r7, #10]
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	9301      	str	r3, [sp, #4]
 800799c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799e:	9300      	str	r3, [sp, #0]
 80079a0:	4603      	mov	r3, r0
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f000 fd76 	bl	8008494 <I2C_RequestMemoryWrite>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d052      	beq.n	8007a54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e081      	b.n	8007ab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f001 f804 	bl	80089c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00d      	beq.n	80079de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c6:	2b04      	cmp	r3, #4
 80079c8:	d107      	bne.n	80079da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e06b      	b.n	8007ab6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079e2:	781a      	ldrb	r2, [r3, #0]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ee:	1c5a      	adds	r2, r3, #1
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079f8:	3b01      	subs	r3, #1
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	3b01      	subs	r3, #1
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	695b      	ldr	r3, [r3, #20]
 8007a14:	f003 0304 	and.w	r3, r3, #4
 8007a18:	2b04      	cmp	r3, #4
 8007a1a:	d11b      	bne.n	8007a54 <HAL_I2C_Mem_Write+0x180>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d017      	beq.n	8007a54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a28:	781a      	ldrb	r2, [r3, #0]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a34:	1c5a      	adds	r2, r3, #1
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1aa      	bne.n	80079b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f000 fff7 	bl	8008a54 <I2C_WaitOnBTFFlagUntilTimeout>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00d      	beq.n	8007a88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a70:	2b04      	cmp	r3, #4
 8007a72:	d107      	bne.n	8007a84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e016      	b.n	8007ab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	e000      	b.n	8007ab6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007ab4:	2302      	movs	r3, #2
  }
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	00100002 	.word	0x00100002
 8007ac4:	ffff0000 	.word	0xffff0000

08007ac8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b08c      	sub	sp, #48	@ 0x30
 8007acc:	af02      	add	r7, sp, #8
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	4608      	mov	r0, r1
 8007ad2:	4611      	mov	r1, r2
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	817b      	strh	r3, [r7, #10]
 8007ada:	460b      	mov	r3, r1
 8007adc:	813b      	strh	r3, [r7, #8]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ae6:	f7fe fad9 	bl	800609c <HAL_GetTick>
 8007aea:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b20      	cmp	r3, #32
 8007af6:	f040 8244 	bne.w	8007f82 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	2319      	movs	r3, #25
 8007b00:	2201      	movs	r2, #1
 8007b02:	4982      	ldr	r1, [pc, #520]	@ (8007d0c <HAL_I2C_Mem_Read+0x244>)
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 fe43 	bl	8008790 <I2C_WaitOnFlagUntilTimeout>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8007b10:	2302      	movs	r3, #2
 8007b12:	e237      	b.n	8007f84 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d101      	bne.n	8007b22 <HAL_I2C_Mem_Read+0x5a>
 8007b1e:	2302      	movs	r3, #2
 8007b20:	e230      	b.n	8007f84 <HAL_I2C_Mem_Read+0x4bc>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d007      	beq.n	8007b48 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f042 0201 	orr.w	r2, r2, #1
 8007b46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2222      	movs	r2, #34	@ 0x22
 8007b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2240      	movs	r2, #64	@ 0x40
 8007b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007b78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	4a62      	ldr	r2, [pc, #392]	@ (8007d10 <HAL_I2C_Mem_Read+0x248>)
 8007b88:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b8a:	88f8      	ldrh	r0, [r7, #6]
 8007b8c:	893a      	ldrh	r2, [r7, #8]
 8007b8e:	8979      	ldrh	r1, [r7, #10]
 8007b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b92:	9301      	str	r3, [sp, #4]
 8007b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	4603      	mov	r3, r0
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f000 fd10 	bl	80085c0 <I2C_RequestMemoryRead>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d001      	beq.n	8007baa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e1ec      	b.n	8007f84 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d113      	bne.n	8007bda <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	61fb      	str	r3, [r7, #28]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	61fb      	str	r3, [r7, #28]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	61fb      	str	r3, [r7, #28]
 8007bc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bd6:	601a      	str	r2, [r3, #0]
 8007bd8:	e1c0      	b.n	8007f5c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d11e      	bne.n	8007c20 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007bf0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007bf2:	b672      	cpsid	i
}
 8007bf4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	61bb      	str	r3, [r7, #24]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	61bb      	str	r3, [r7, #24]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	61bb      	str	r3, [r7, #24]
 8007c0a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007c1c:	b662      	cpsie	i
}
 8007c1e:	e035      	b.n	8007c8c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d11e      	bne.n	8007c66 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007c38:	b672      	cpsid	i
}
 8007c3a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	617b      	str	r3, [r7, #20]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	617b      	str	r3, [r7, #20]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	617b      	str	r3, [r7, #20]
 8007c50:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007c62:	b662      	cpsie	i
}
 8007c64:	e012      	b.n	8007c8c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007c74:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c76:	2300      	movs	r3, #0
 8007c78:	613b      	str	r3, [r7, #16]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	695b      	ldr	r3, [r3, #20]
 8007c80:	613b      	str	r3, [r7, #16]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	613b      	str	r3, [r7, #16]
 8007c8a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8007c8c:	e166      	b.n	8007f5c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c92:	2b03      	cmp	r3, #3
 8007c94:	f200 811f 	bhi.w	8007ed6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d123      	bne.n	8007ce8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ca2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f000 ff1d 	bl	8008ae4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d001      	beq.n	8007cb4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e167      	b.n	8007f84 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	691a      	ldr	r2, [r3, #16]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cbe:	b2d2      	uxtb	r2, r2
 8007cc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc6:	1c5a      	adds	r2, r3, #1
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007ce6:	e139      	b.n	8007f5c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d152      	bne.n	8007d96 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	4906      	ldr	r1, [pc, #24]	@ (8007d14 <HAL_I2C_Mem_Read+0x24c>)
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 fd48 	bl	8008790 <I2C_WaitOnFlagUntilTimeout>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d008      	beq.n	8007d18 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e13c      	b.n	8007f84 <HAL_I2C_Mem_Read+0x4bc>
 8007d0a:	bf00      	nop
 8007d0c:	00100002 	.word	0x00100002
 8007d10:	ffff0000 	.word	0xffff0000
 8007d14:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007d18:	b672      	cpsid	i
}
 8007d1a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	691a      	ldr	r2, [r3, #16]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d36:	b2d2      	uxtb	r2, r2
 8007d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d3e:	1c5a      	adds	r2, r3, #1
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	3b01      	subs	r3, #1
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007d5e:	b662      	cpsie	i
}
 8007d60:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	691a      	ldr	r2, [r3, #16]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d6c:	b2d2      	uxtb	r2, r2
 8007d6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d74:	1c5a      	adds	r2, r3, #1
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007d94:	e0e2      	b.n	8007f5c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d98:	9300      	str	r3, [sp, #0]
 8007d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	497b      	ldr	r1, [pc, #492]	@ (8007f8c <HAL_I2C_Mem_Read+0x4c4>)
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f000 fcf5 	bl	8008790 <I2C_WaitOnFlagUntilTimeout>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d001      	beq.n	8007db0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e0e9      	b.n	8007f84 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dbe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007dc0:	b672      	cpsid	i
}
 8007dc2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	691a      	ldr	r2, [r3, #16]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dce:	b2d2      	uxtb	r2, r2
 8007dd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd6:	1c5a      	adds	r2, r3, #1
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007de0:	3b01      	subs	r3, #1
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	3b01      	subs	r3, #1
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007df6:	4b66      	ldr	r3, [pc, #408]	@ (8007f90 <HAL_I2C_Mem_Read+0x4c8>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	08db      	lsrs	r3, r3, #3
 8007dfc:	4a65      	ldr	r2, [pc, #404]	@ (8007f94 <HAL_I2C_Mem_Read+0x4cc>)
 8007dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007e02:	0a1a      	lsrs	r2, r3, #8
 8007e04:	4613      	mov	r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4413      	add	r3, r2
 8007e0a:	00da      	lsls	r2, r3, #3
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007e10:	6a3b      	ldr	r3, [r7, #32]
 8007e12:	3b01      	subs	r3, #1
 8007e14:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d118      	bne.n	8007e4e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2220      	movs	r2, #32
 8007e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e36:	f043 0220 	orr.w	r2, r3, #32
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8007e3e:	b662      	cpsie	i
}
 8007e40:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e09a      	b.n	8007f84 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	695b      	ldr	r3, [r3, #20]
 8007e54:	f003 0304 	and.w	r3, r3, #4
 8007e58:	2b04      	cmp	r3, #4
 8007e5a:	d1d9      	bne.n	8007e10 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	691a      	ldr	r2, [r3, #16]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e76:	b2d2      	uxtb	r2, r2
 8007e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e7e:	1c5a      	adds	r2, r3, #1
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	3b01      	subs	r3, #1
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007e9e:	b662      	cpsie	i
}
 8007ea0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	691a      	ldr	r2, [r3, #16]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eac:	b2d2      	uxtb	r2, r2
 8007eae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb4:	1c5a      	adds	r2, r3, #1
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007ed4:	e042      	b.n	8007f5c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ed8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f000 fe02 	bl	8008ae4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e04c      	b.n	8007f84 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	691a      	ldr	r2, [r3, #16]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef4:	b2d2      	uxtb	r2, r2
 8007ef6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007efc:	1c5a      	adds	r2, r3, #1
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f06:	3b01      	subs	r3, #1
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	3b01      	subs	r3, #1
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	f003 0304 	and.w	r3, r3, #4
 8007f26:	2b04      	cmp	r3, #4
 8007f28:	d118      	bne.n	8007f5c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	691a      	ldr	r2, [r3, #16]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f34:	b2d2      	uxtb	r2, r2
 8007f36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f3c:	1c5a      	adds	r2, r3, #1
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f46:	3b01      	subs	r3, #1
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	3b01      	subs	r3, #1
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f47f ae94 	bne.w	8007c8e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2220      	movs	r2, #32
 8007f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	e000      	b.n	8007f84 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8007f82:	2302      	movs	r3, #2
  }
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3728      	adds	r7, #40	@ 0x28
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	00010004 	.word	0x00010004
 8007f90:	20000028 	.word	0x20000028
 8007f94:	14f8b589 	.word	0x14f8b589

08007f98 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b08a      	sub	sp, #40	@ 0x28
 8007f9c:	af02      	add	r7, sp, #8
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	607a      	str	r2, [r7, #4]
 8007fa2:	603b      	str	r3, [r7, #0]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007fa8:	f7fe f878 	bl	800609c <HAL_GetTick>
 8007fac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b20      	cmp	r3, #32
 8007fbc:	f040 8111 	bne.w	80081e2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	2319      	movs	r3, #25
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	4988      	ldr	r1, [pc, #544]	@ (80081ec <HAL_I2C_IsDeviceReady+0x254>)
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f000 fbe0 	bl	8008790 <I2C_WaitOnFlagUntilTimeout>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007fd6:	2302      	movs	r3, #2
 8007fd8:	e104      	b.n	80081e4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d101      	bne.n	8007fe8 <HAL_I2C_IsDeviceReady+0x50>
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	e0fd      	b.n	80081e4 <HAL_I2C_IsDeviceReady+0x24c>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d007      	beq.n	800800e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f042 0201 	orr.w	r2, r2, #1
 800800c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800801c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2224      	movs	r2, #36	@ 0x24
 8008022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	4a70      	ldr	r2, [pc, #448]	@ (80081f0 <HAL_I2C_IsDeviceReady+0x258>)
 8008030:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008040:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2200      	movs	r2, #0
 800804a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f000 fb9e 	bl	8008790 <I2C_WaitOnFlagUntilTimeout>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00d      	beq.n	8008076 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008064:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008068:	d103      	bne.n	8008072 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008070:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e0b6      	b.n	80081e4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008076:	897b      	ldrh	r3, [r7, #10]
 8008078:	b2db      	uxtb	r3, r3
 800807a:	461a      	mov	r2, r3
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008084:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8008086:	f7fe f809 	bl	800609c <HAL_GetTick>
 800808a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	695b      	ldr	r3, [r3, #20]
 8008092:	f003 0302 	and.w	r3, r3, #2
 8008096:	2b02      	cmp	r3, #2
 8008098:	bf0c      	ite	eq
 800809a:	2301      	moveq	r3, #1
 800809c:	2300      	movne	r3, #0
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	695b      	ldr	r3, [r3, #20]
 80080a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080b0:	bf0c      	ite	eq
 80080b2:	2301      	moveq	r3, #1
 80080b4:	2300      	movne	r3, #0
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80080ba:	e025      	b.n	8008108 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80080bc:	f7fd ffee 	bl	800609c <HAL_GetTick>
 80080c0:	4602      	mov	r2, r0
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d302      	bcc.n	80080d2 <HAL_I2C_IsDeviceReady+0x13a>
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d103      	bne.n	80080da <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	22a0      	movs	r2, #160	@ 0xa0
 80080d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	695b      	ldr	r3, [r3, #20]
 80080e0:	f003 0302 	and.w	r3, r3, #2
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	bf0c      	ite	eq
 80080e8:	2301      	moveq	r3, #1
 80080ea:	2300      	movne	r3, #0
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080fe:	bf0c      	ite	eq
 8008100:	2301      	moveq	r3, #1
 8008102:	2300      	movne	r3, #0
 8008104:	b2db      	uxtb	r3, r3
 8008106:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800810e:	b2db      	uxtb	r3, r3
 8008110:	2ba0      	cmp	r3, #160	@ 0xa0
 8008112:	d005      	beq.n	8008120 <HAL_I2C_IsDeviceReady+0x188>
 8008114:	7dfb      	ldrb	r3, [r7, #23]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d102      	bne.n	8008120 <HAL_I2C_IsDeviceReady+0x188>
 800811a:	7dbb      	ldrb	r3, [r7, #22]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d0cd      	beq.n	80080bc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2220      	movs	r2, #32
 8008124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	f003 0302 	and.w	r3, r3, #2
 8008132:	2b02      	cmp	r3, #2
 8008134:	d129      	bne.n	800818a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008144:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008146:	2300      	movs	r3, #0
 8008148:	613b      	str	r3, [r7, #16]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	695b      	ldr	r3, [r3, #20]
 8008150:	613b      	str	r3, [r7, #16]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	613b      	str	r3, [r7, #16]
 800815a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	9300      	str	r3, [sp, #0]
 8008160:	2319      	movs	r3, #25
 8008162:	2201      	movs	r2, #1
 8008164:	4921      	ldr	r1, [pc, #132]	@ (80081ec <HAL_I2C_IsDeviceReady+0x254>)
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f000 fb12 	bl	8008790 <I2C_WaitOnFlagUntilTimeout>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e036      	b.n	80081e4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2220      	movs	r2, #32
 800817a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	e02c      	b.n	80081e4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008198:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80081a2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	2319      	movs	r3, #25
 80081aa:	2201      	movs	r2, #1
 80081ac:	490f      	ldr	r1, [pc, #60]	@ (80081ec <HAL_I2C_IsDeviceReady+0x254>)
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f000 faee 	bl	8008790 <I2C_WaitOnFlagUntilTimeout>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d001      	beq.n	80081be <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e012      	b.n	80081e4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	3301      	adds	r3, #1
 80081c2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80081c4:	69ba      	ldr	r2, [r7, #24]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	f4ff af32 	bcc.w	8008032 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2220      	movs	r2, #32
 80081d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e000      	b.n	80081e4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80081e2:	2302      	movs	r3, #2
  }
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3720      	adds	r7, #32
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	00100002 	.word	0x00100002
 80081f0:	ffff0000 	.word	0xffff0000

080081f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b088      	sub	sp, #32
 80081f8:	af02      	add	r7, sp, #8
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	607a      	str	r2, [r7, #4]
 80081fe:	603b      	str	r3, [r7, #0]
 8008200:	460b      	mov	r3, r1
 8008202:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008208:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	2b08      	cmp	r3, #8
 800820e:	d006      	beq.n	800821e <I2C_MasterRequestWrite+0x2a>
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d003      	beq.n	800821e <I2C_MasterRequestWrite+0x2a>
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800821c:	d108      	bne.n	8008230 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800822c:	601a      	str	r2, [r3, #0]
 800822e:	e00b      	b.n	8008248 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008234:	2b12      	cmp	r3, #18
 8008236:	d107      	bne.n	8008248 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008246:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f000 fa9b 	bl	8008790 <I2C_WaitOnFlagUntilTimeout>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00d      	beq.n	800827c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800826a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800826e:	d103      	bne.n	8008278 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008276:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008278:	2303      	movs	r3, #3
 800827a:	e035      	b.n	80082e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008284:	d108      	bne.n	8008298 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008286:	897b      	ldrh	r3, [r7, #10]
 8008288:	b2db      	uxtb	r3, r3
 800828a:	461a      	mov	r2, r3
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008294:	611a      	str	r2, [r3, #16]
 8008296:	e01b      	b.n	80082d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008298:	897b      	ldrh	r3, [r7, #10]
 800829a:	11db      	asrs	r3, r3, #7
 800829c:	b2db      	uxtb	r3, r3
 800829e:	f003 0306 	and.w	r3, r3, #6
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	f063 030f 	orn	r3, r3, #15
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	490e      	ldr	r1, [pc, #56]	@ (80082f0 <I2C_MasterRequestWrite+0xfc>)
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	f000 fae4 	bl	8008884 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d001      	beq.n	80082c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e010      	b.n	80082e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80082c6:	897b      	ldrh	r3, [r7, #10]
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	4907      	ldr	r1, [pc, #28]	@ (80082f4 <I2C_MasterRequestWrite+0x100>)
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f000 fad4 	bl	8008884 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e000      	b.n	80082e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3718      	adds	r7, #24
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	00010008 	.word	0x00010008
 80082f4:	00010002 	.word	0x00010002

080082f8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b088      	sub	sp, #32
 80082fc:	af02      	add	r7, sp, #8
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	607a      	str	r2, [r7, #4]
 8008302:	603b      	str	r3, [r7, #0]
 8008304:	460b      	mov	r3, r1
 8008306:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800830c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800831c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	2b08      	cmp	r3, #8
 8008322:	d006      	beq.n	8008332 <I2C_MasterRequestRead+0x3a>
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d003      	beq.n	8008332 <I2C_MasterRequestRead+0x3a>
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008330:	d108      	bne.n	8008344 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008340:	601a      	str	r2, [r3, #0]
 8008342:	e00b      	b.n	800835c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008348:	2b11      	cmp	r3, #17
 800834a:	d107      	bne.n	800835c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800835a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f000 fa11 	bl	8008790 <I2C_WaitOnFlagUntilTimeout>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00d      	beq.n	8008390 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800837e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008382:	d103      	bne.n	800838c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800838a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e079      	b.n	8008484 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008398:	d108      	bne.n	80083ac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800839a:	897b      	ldrh	r3, [r7, #10]
 800839c:	b2db      	uxtb	r3, r3
 800839e:	f043 0301 	orr.w	r3, r3, #1
 80083a2:	b2da      	uxtb	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	611a      	str	r2, [r3, #16]
 80083aa:	e05f      	b.n	800846c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80083ac:	897b      	ldrh	r3, [r7, #10]
 80083ae:	11db      	asrs	r3, r3, #7
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	f003 0306 	and.w	r3, r3, #6
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	f063 030f 	orn	r3, r3, #15
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	4930      	ldr	r1, [pc, #192]	@ (800848c <I2C_MasterRequestRead+0x194>)
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f000 fa5a 	bl	8008884 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d001      	beq.n	80083da <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e054      	b.n	8008484 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80083da:	897b      	ldrh	r3, [r7, #10]
 80083dc:	b2da      	uxtb	r2, r3
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	4929      	ldr	r1, [pc, #164]	@ (8008490 <I2C_MasterRequestRead+0x198>)
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f000 fa4a 	bl	8008884 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d001      	beq.n	80083fa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e044      	b.n	8008484 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083fa:	2300      	movs	r3, #0
 80083fc:	613b      	str	r3, [r7, #16]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	695b      	ldr	r3, [r3, #20]
 8008404:	613b      	str	r3, [r7, #16]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	613b      	str	r3, [r7, #16]
 800840e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800841e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 f9af 	bl	8008790 <I2C_WaitOnFlagUntilTimeout>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00d      	beq.n	8008454 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008446:	d103      	bne.n	8008450 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800844e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8008450:	2303      	movs	r3, #3
 8008452:	e017      	b.n	8008484 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008454:	897b      	ldrh	r3, [r7, #10]
 8008456:	11db      	asrs	r3, r3, #7
 8008458:	b2db      	uxtb	r3, r3
 800845a:	f003 0306 	and.w	r3, r3, #6
 800845e:	b2db      	uxtb	r3, r3
 8008460:	f063 030e 	orn	r3, r3, #14
 8008464:	b2da      	uxtb	r2, r3
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	4907      	ldr	r1, [pc, #28]	@ (8008490 <I2C_MasterRequestRead+0x198>)
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f000 fa06 	bl	8008884 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d001      	beq.n	8008482 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e000      	b.n	8008484 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3718      	adds	r7, #24
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	00010008 	.word	0x00010008
 8008490:	00010002 	.word	0x00010002

08008494 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b088      	sub	sp, #32
 8008498:	af02      	add	r7, sp, #8
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	4608      	mov	r0, r1
 800849e:	4611      	mov	r1, r2
 80084a0:	461a      	mov	r2, r3
 80084a2:	4603      	mov	r3, r0
 80084a4:	817b      	strh	r3, [r7, #10]
 80084a6:	460b      	mov	r3, r1
 80084a8:	813b      	strh	r3, [r7, #8]
 80084aa:	4613      	mov	r3, r2
 80084ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80084bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80084be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	6a3b      	ldr	r3, [r7, #32]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f000 f960 	bl	8008790 <I2C_WaitOnFlagUntilTimeout>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00d      	beq.n	80084f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084e4:	d103      	bne.n	80084ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80084ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e05f      	b.n	80085b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80084f2:	897b      	ldrh	r3, [r7, #10]
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	461a      	mov	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008500:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008504:	6a3a      	ldr	r2, [r7, #32]
 8008506:	492d      	ldr	r1, [pc, #180]	@ (80085bc <I2C_RequestMemoryWrite+0x128>)
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	f000 f9bb 	bl	8008884 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d001      	beq.n	8008518 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e04c      	b.n	80085b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008518:	2300      	movs	r3, #0
 800851a:	617b      	str	r3, [r7, #20]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	617b      	str	r3, [r7, #20]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	617b      	str	r3, [r7, #20]
 800852c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800852e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008530:	6a39      	ldr	r1, [r7, #32]
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	f000 fa46 	bl	80089c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00d      	beq.n	800855a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008542:	2b04      	cmp	r3, #4
 8008544:	d107      	bne.n	8008556 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008554:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e02b      	b.n	80085b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800855a:	88fb      	ldrh	r3, [r7, #6]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d105      	bne.n	800856c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008560:	893b      	ldrh	r3, [r7, #8]
 8008562:	b2da      	uxtb	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	611a      	str	r2, [r3, #16]
 800856a:	e021      	b.n	80085b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800856c:	893b      	ldrh	r3, [r7, #8]
 800856e:	0a1b      	lsrs	r3, r3, #8
 8008570:	b29b      	uxth	r3, r3
 8008572:	b2da      	uxtb	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800857a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800857c:	6a39      	ldr	r1, [r7, #32]
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f000 fa20 	bl	80089c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00d      	beq.n	80085a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800858e:	2b04      	cmp	r3, #4
 8008590:	d107      	bne.n	80085a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80085a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e005      	b.n	80085b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80085a6:	893b      	ldrh	r3, [r7, #8]
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3718      	adds	r7, #24
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	00010002 	.word	0x00010002

080085c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b088      	sub	sp, #32
 80085c4:	af02      	add	r7, sp, #8
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	4608      	mov	r0, r1
 80085ca:	4611      	mov	r1, r2
 80085cc:	461a      	mov	r2, r3
 80085ce:	4603      	mov	r3, r0
 80085d0:	817b      	strh	r3, [r7, #10]
 80085d2:	460b      	mov	r3, r1
 80085d4:	813b      	strh	r3, [r7, #8]
 80085d6:	4613      	mov	r3, r2
 80085d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80085e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80085fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	6a3b      	ldr	r3, [r7, #32]
 8008600:	2200      	movs	r2, #0
 8008602:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f000 f8c2 	bl	8008790 <I2C_WaitOnFlagUntilTimeout>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00d      	beq.n	800862e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800861c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008620:	d103      	bne.n	800862a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008628:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	e0aa      	b.n	8008784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800862e:	897b      	ldrh	r3, [r7, #10]
 8008630:	b2db      	uxtb	r3, r3
 8008632:	461a      	mov	r2, r3
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800863c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800863e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008640:	6a3a      	ldr	r2, [r7, #32]
 8008642:	4952      	ldr	r1, [pc, #328]	@ (800878c <I2C_RequestMemoryRead+0x1cc>)
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	f000 f91d 	bl	8008884 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d001      	beq.n	8008654 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e097      	b.n	8008784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008654:	2300      	movs	r3, #0
 8008656:	617b      	str	r3, [r7, #20]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	695b      	ldr	r3, [r3, #20]
 800865e:	617b      	str	r3, [r7, #20]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	617b      	str	r3, [r7, #20]
 8008668:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800866a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800866c:	6a39      	ldr	r1, [r7, #32]
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f000 f9a8 	bl	80089c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00d      	beq.n	8008696 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800867e:	2b04      	cmp	r3, #4
 8008680:	d107      	bne.n	8008692 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008690:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e076      	b.n	8008784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008696:	88fb      	ldrh	r3, [r7, #6]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d105      	bne.n	80086a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800869c:	893b      	ldrh	r3, [r7, #8]
 800869e:	b2da      	uxtb	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	611a      	str	r2, [r3, #16]
 80086a6:	e021      	b.n	80086ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80086a8:	893b      	ldrh	r3, [r7, #8]
 80086aa:	0a1b      	lsrs	r3, r3, #8
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	b2da      	uxtb	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086b8:	6a39      	ldr	r1, [r7, #32]
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f000 f982 	bl	80089c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00d      	beq.n	80086e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ca:	2b04      	cmp	r3, #4
 80086cc:	d107      	bne.n	80086de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	e050      	b.n	8008784 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80086e2:	893b      	ldrh	r3, [r7, #8]
 80086e4:	b2da      	uxtb	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086ee:	6a39      	ldr	r1, [r7, #32]
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f000 f967 	bl	80089c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00d      	beq.n	8008718 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008700:	2b04      	cmp	r3, #4
 8008702:	d107      	bne.n	8008714 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008712:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e035      	b.n	8008784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008726:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872a:	9300      	str	r3, [sp, #0]
 800872c:	6a3b      	ldr	r3, [r7, #32]
 800872e:	2200      	movs	r2, #0
 8008730:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f000 f82b 	bl	8008790 <I2C_WaitOnFlagUntilTimeout>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00d      	beq.n	800875c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800874a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800874e:	d103      	bne.n	8008758 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008756:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	e013      	b.n	8008784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800875c:	897b      	ldrh	r3, [r7, #10]
 800875e:	b2db      	uxtb	r3, r3
 8008760:	f043 0301 	orr.w	r3, r3, #1
 8008764:	b2da      	uxtb	r2, r3
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800876c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876e:	6a3a      	ldr	r2, [r7, #32]
 8008770:	4906      	ldr	r1, [pc, #24]	@ (800878c <I2C_RequestMemoryRead+0x1cc>)
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f000 f886 	bl	8008884 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d001      	beq.n	8008782 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e000      	b.n	8008784 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3718      	adds	r7, #24
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	00010002 	.word	0x00010002

08008790 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	603b      	str	r3, [r7, #0]
 800879c:	4613      	mov	r3, r2
 800879e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087a0:	e048      	b.n	8008834 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a8:	d044      	beq.n	8008834 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087aa:	f7fd fc77 	bl	800609c <HAL_GetTick>
 80087ae:	4602      	mov	r2, r0
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d302      	bcc.n	80087c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d139      	bne.n	8008834 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	0c1b      	lsrs	r3, r3, #16
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d10d      	bne.n	80087e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	695b      	ldr	r3, [r3, #20]
 80087d0:	43da      	mvns	r2, r3
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	4013      	ands	r3, r2
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	2b00      	cmp	r3, #0
 80087da:	bf0c      	ite	eq
 80087dc:	2301      	moveq	r3, #1
 80087de:	2300      	movne	r3, #0
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	461a      	mov	r2, r3
 80087e4:	e00c      	b.n	8008800 <I2C_WaitOnFlagUntilTimeout+0x70>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	43da      	mvns	r2, r3
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	4013      	ands	r3, r2
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	bf0c      	ite	eq
 80087f8:	2301      	moveq	r3, #1
 80087fa:	2300      	movne	r3, #0
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	461a      	mov	r2, r3
 8008800:	79fb      	ldrb	r3, [r7, #7]
 8008802:	429a      	cmp	r2, r3
 8008804:	d116      	bne.n	8008834 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2200      	movs	r2, #0
 800880a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2220      	movs	r2, #32
 8008810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2200      	movs	r2, #0
 8008818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008820:	f043 0220 	orr.w	r2, r3, #32
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	e023      	b.n	800887c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	0c1b      	lsrs	r3, r3, #16
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b01      	cmp	r3, #1
 800883c:	d10d      	bne.n	800885a <I2C_WaitOnFlagUntilTimeout+0xca>
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	695b      	ldr	r3, [r3, #20]
 8008844:	43da      	mvns	r2, r3
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	4013      	ands	r3, r2
 800884a:	b29b      	uxth	r3, r3
 800884c:	2b00      	cmp	r3, #0
 800884e:	bf0c      	ite	eq
 8008850:	2301      	moveq	r3, #1
 8008852:	2300      	movne	r3, #0
 8008854:	b2db      	uxtb	r3, r3
 8008856:	461a      	mov	r2, r3
 8008858:	e00c      	b.n	8008874 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	43da      	mvns	r2, r3
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	4013      	ands	r3, r2
 8008866:	b29b      	uxth	r3, r3
 8008868:	2b00      	cmp	r3, #0
 800886a:	bf0c      	ite	eq
 800886c:	2301      	moveq	r3, #1
 800886e:	2300      	movne	r3, #0
 8008870:	b2db      	uxtb	r3, r3
 8008872:	461a      	mov	r2, r3
 8008874:	79fb      	ldrb	r3, [r7, #7]
 8008876:	429a      	cmp	r2, r3
 8008878:	d093      	beq.n	80087a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
 8008890:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008892:	e071      	b.n	8008978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	695b      	ldr	r3, [r3, #20]
 800889a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800889e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088a2:	d123      	bne.n	80088ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80088bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2220      	movs	r2, #32
 80088c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088d8:	f043 0204 	orr.w	r2, r3, #4
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e067      	b.n	80089bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f2:	d041      	beq.n	8008978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088f4:	f7fd fbd2 	bl	800609c <HAL_GetTick>
 80088f8:	4602      	mov	r2, r0
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	429a      	cmp	r2, r3
 8008902:	d302      	bcc.n	800890a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d136      	bne.n	8008978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	0c1b      	lsrs	r3, r3, #16
 800890e:	b2db      	uxtb	r3, r3
 8008910:	2b01      	cmp	r3, #1
 8008912:	d10c      	bne.n	800892e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	43da      	mvns	r2, r3
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	4013      	ands	r3, r2
 8008920:	b29b      	uxth	r3, r3
 8008922:	2b00      	cmp	r3, #0
 8008924:	bf14      	ite	ne
 8008926:	2301      	movne	r3, #1
 8008928:	2300      	moveq	r3, #0
 800892a:	b2db      	uxtb	r3, r3
 800892c:	e00b      	b.n	8008946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	699b      	ldr	r3, [r3, #24]
 8008934:	43da      	mvns	r2, r3
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	4013      	ands	r3, r2
 800893a:	b29b      	uxth	r3, r3
 800893c:	2b00      	cmp	r3, #0
 800893e:	bf14      	ite	ne
 8008940:	2301      	movne	r3, #1
 8008942:	2300      	moveq	r3, #0
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b00      	cmp	r3, #0
 8008948:	d016      	beq.n	8008978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2220      	movs	r2, #32
 8008954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008964:	f043 0220 	orr.w	r2, r3, #32
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	e021      	b.n	80089bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	0c1b      	lsrs	r3, r3, #16
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b01      	cmp	r3, #1
 8008980:	d10c      	bne.n	800899c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	695b      	ldr	r3, [r3, #20]
 8008988:	43da      	mvns	r2, r3
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	4013      	ands	r3, r2
 800898e:	b29b      	uxth	r3, r3
 8008990:	2b00      	cmp	r3, #0
 8008992:	bf14      	ite	ne
 8008994:	2301      	movne	r3, #1
 8008996:	2300      	moveq	r3, #0
 8008998:	b2db      	uxtb	r3, r3
 800899a:	e00b      	b.n	80089b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	43da      	mvns	r2, r3
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	4013      	ands	r3, r2
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	bf14      	ite	ne
 80089ae:	2301      	movne	r3, #1
 80089b0:	2300      	moveq	r3, #0
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f47f af6d 	bne.w	8008894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089d0:	e034      	b.n	8008a3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80089d2:	68f8      	ldr	r0, [r7, #12]
 80089d4:	f000 f8e3 	bl	8008b9e <I2C_IsAcknowledgeFailed>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d001      	beq.n	80089e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e034      	b.n	8008a4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e8:	d028      	beq.n	8008a3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089ea:	f7fd fb57 	bl	800609c <HAL_GetTick>
 80089ee:	4602      	mov	r2, r0
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d302      	bcc.n	8008a00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d11d      	bne.n	8008a3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a0a:	2b80      	cmp	r3, #128	@ 0x80
 8008a0c:	d016      	beq.n	8008a3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2220      	movs	r2, #32
 8008a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a28:	f043 0220 	orr.w	r2, r3, #32
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e007      	b.n	8008a4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	695b      	ldr	r3, [r3, #20]
 8008a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a46:	2b80      	cmp	r3, #128	@ 0x80
 8008a48:	d1c3      	bne.n	80089d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a60:	e034      	b.n	8008acc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	f000 f89b 	bl	8008b9e <I2C_IsAcknowledgeFailed>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e034      	b.n	8008adc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a78:	d028      	beq.n	8008acc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a7a:	f7fd fb0f 	bl	800609c <HAL_GetTick>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d302      	bcc.n	8008a90 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d11d      	bne.n	8008acc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	f003 0304 	and.w	r3, r3, #4
 8008a9a:	2b04      	cmp	r3, #4
 8008a9c:	d016      	beq.n	8008acc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2220      	movs	r2, #32
 8008aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ab8:	f043 0220 	orr.w	r2, r3, #32
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e007      	b.n	8008adc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	695b      	ldr	r3, [r3, #20]
 8008ad2:	f003 0304 	and.w	r3, r3, #4
 8008ad6:	2b04      	cmp	r3, #4
 8008ad8:	d1c3      	bne.n	8008a62 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008af0:	e049      	b.n	8008b86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	695b      	ldr	r3, [r3, #20]
 8008af8:	f003 0310 	and.w	r3, r3, #16
 8008afc:	2b10      	cmp	r3, #16
 8008afe:	d119      	bne.n	8008b34 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f06f 0210 	mvn.w	r2, #16
 8008b08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2220      	movs	r2, #32
 8008b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e030      	b.n	8008b96 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b34:	f7fd fab2 	bl	800609c <HAL_GetTick>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d302      	bcc.n	8008b4a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d11d      	bne.n	8008b86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b54:	2b40      	cmp	r3, #64	@ 0x40
 8008b56:	d016      	beq.n	8008b86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2220      	movs	r2, #32
 8008b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b72:	f043 0220 	orr.w	r2, r3, #32
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e007      	b.n	8008b96 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	695b      	ldr	r3, [r3, #20]
 8008b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b90:	2b40      	cmp	r3, #64	@ 0x40
 8008b92:	d1ae      	bne.n	8008af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b083      	sub	sp, #12
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bb4:	d11b      	bne.n	8008bee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008bbe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2220      	movs	r2, #32
 8008bca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bda:	f043 0204 	orr.w	r2, r3, #4
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e000      	b.n	8008bf0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bc80      	pop	{r7}
 8008bf8:	4770      	bx	lr
	...

08008bfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b086      	sub	sp, #24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d101      	bne.n	8008c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e272      	b.n	80090f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 0301 	and.w	r3, r3, #1
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f000 8087 	beq.w	8008d2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008c1c:	4b92      	ldr	r3, [pc, #584]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	f003 030c 	and.w	r3, r3, #12
 8008c24:	2b04      	cmp	r3, #4
 8008c26:	d00c      	beq.n	8008c42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008c28:	4b8f      	ldr	r3, [pc, #572]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	f003 030c 	and.w	r3, r3, #12
 8008c30:	2b08      	cmp	r3, #8
 8008c32:	d112      	bne.n	8008c5a <HAL_RCC_OscConfig+0x5e>
 8008c34:	4b8c      	ldr	r3, [pc, #560]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c40:	d10b      	bne.n	8008c5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c42:	4b89      	ldr	r3, [pc, #548]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d06c      	beq.n	8008d28 <HAL_RCC_OscConfig+0x12c>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d168      	bne.n	8008d28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e24c      	b.n	80090f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c62:	d106      	bne.n	8008c72 <HAL_RCC_OscConfig+0x76>
 8008c64:	4b80      	ldr	r3, [pc, #512]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a7f      	ldr	r2, [pc, #508]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008c6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c6e:	6013      	str	r3, [r2, #0]
 8008c70:	e02e      	b.n	8008cd0 <HAL_RCC_OscConfig+0xd4>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d10c      	bne.n	8008c94 <HAL_RCC_OscConfig+0x98>
 8008c7a:	4b7b      	ldr	r3, [pc, #492]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a7a      	ldr	r2, [pc, #488]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008c80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c84:	6013      	str	r3, [r2, #0]
 8008c86:	4b78      	ldr	r3, [pc, #480]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a77      	ldr	r2, [pc, #476]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008c8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c90:	6013      	str	r3, [r2, #0]
 8008c92:	e01d      	b.n	8008cd0 <HAL_RCC_OscConfig+0xd4>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c9c:	d10c      	bne.n	8008cb8 <HAL_RCC_OscConfig+0xbc>
 8008c9e:	4b72      	ldr	r3, [pc, #456]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a71      	ldr	r2, [pc, #452]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008ca4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008ca8:	6013      	str	r3, [r2, #0]
 8008caa:	4b6f      	ldr	r3, [pc, #444]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a6e      	ldr	r2, [pc, #440]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008cb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008cb4:	6013      	str	r3, [r2, #0]
 8008cb6:	e00b      	b.n	8008cd0 <HAL_RCC_OscConfig+0xd4>
 8008cb8:	4b6b      	ldr	r3, [pc, #428]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a6a      	ldr	r2, [pc, #424]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008cbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008cc2:	6013      	str	r3, [r2, #0]
 8008cc4:	4b68      	ldr	r3, [pc, #416]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a67      	ldr	r2, [pc, #412]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008cca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008cce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d013      	beq.n	8008d00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cd8:	f7fd f9e0 	bl	800609c <HAL_GetTick>
 8008cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cde:	e008      	b.n	8008cf2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ce0:	f7fd f9dc 	bl	800609c <HAL_GetTick>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	1ad3      	subs	r3, r2, r3
 8008cea:	2b64      	cmp	r3, #100	@ 0x64
 8008cec:	d901      	bls.n	8008cf2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008cee:	2303      	movs	r3, #3
 8008cf0:	e200      	b.n	80090f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cf2:	4b5d      	ldr	r3, [pc, #372]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d0f0      	beq.n	8008ce0 <HAL_RCC_OscConfig+0xe4>
 8008cfe:	e014      	b.n	8008d2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d00:	f7fd f9cc 	bl	800609c <HAL_GetTick>
 8008d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d06:	e008      	b.n	8008d1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d08:	f7fd f9c8 	bl	800609c <HAL_GetTick>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	2b64      	cmp	r3, #100	@ 0x64
 8008d14:	d901      	bls.n	8008d1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008d16:	2303      	movs	r3, #3
 8008d18:	e1ec      	b.n	80090f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d1a:	4b53      	ldr	r3, [pc, #332]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1f0      	bne.n	8008d08 <HAL_RCC_OscConfig+0x10c>
 8008d26:	e000      	b.n	8008d2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f003 0302 	and.w	r3, r3, #2
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d063      	beq.n	8008dfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008d36:	4b4c      	ldr	r3, [pc, #304]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	f003 030c 	and.w	r3, r3, #12
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00b      	beq.n	8008d5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008d42:	4b49      	ldr	r3, [pc, #292]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	f003 030c 	and.w	r3, r3, #12
 8008d4a:	2b08      	cmp	r3, #8
 8008d4c:	d11c      	bne.n	8008d88 <HAL_RCC_OscConfig+0x18c>
 8008d4e:	4b46      	ldr	r3, [pc, #280]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d116      	bne.n	8008d88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d5a:	4b43      	ldr	r3, [pc, #268]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 0302 	and.w	r3, r3, #2
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d005      	beq.n	8008d72 <HAL_RCC_OscConfig+0x176>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	691b      	ldr	r3, [r3, #16]
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d001      	beq.n	8008d72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e1c0      	b.n	80090f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d72:	4b3d      	ldr	r3, [pc, #244]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	00db      	lsls	r3, r3, #3
 8008d80:	4939      	ldr	r1, [pc, #228]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008d82:	4313      	orrs	r3, r2
 8008d84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d86:	e03a      	b.n	8008dfe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	691b      	ldr	r3, [r3, #16]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d020      	beq.n	8008dd2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d90:	4b36      	ldr	r3, [pc, #216]	@ (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008d92:	2201      	movs	r2, #1
 8008d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d96:	f7fd f981 	bl	800609c <HAL_GetTick>
 8008d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d9c:	e008      	b.n	8008db0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d9e:	f7fd f97d 	bl	800609c <HAL_GetTick>
 8008da2:	4602      	mov	r2, r0
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	1ad3      	subs	r3, r2, r3
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d901      	bls.n	8008db0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008dac:	2303      	movs	r3, #3
 8008dae:	e1a1      	b.n	80090f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008db0:	4b2d      	ldr	r3, [pc, #180]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 0302 	and.w	r3, r3, #2
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d0f0      	beq.n	8008d9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dbc:	4b2a      	ldr	r3, [pc, #168]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	695b      	ldr	r3, [r3, #20]
 8008dc8:	00db      	lsls	r3, r3, #3
 8008dca:	4927      	ldr	r1, [pc, #156]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	600b      	str	r3, [r1, #0]
 8008dd0:	e015      	b.n	8008dfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008dd2:	4b26      	ldr	r3, [pc, #152]	@ (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008dd8:	f7fd f960 	bl	800609c <HAL_GetTick>
 8008ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008dde:	e008      	b.n	8008df2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008de0:	f7fd f95c 	bl	800609c <HAL_GetTick>
 8008de4:	4602      	mov	r2, r0
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d901      	bls.n	8008df2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e180      	b.n	80090f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008df2:	4b1d      	ldr	r3, [pc, #116]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f003 0302 	and.w	r3, r3, #2
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d1f0      	bne.n	8008de0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 0308 	and.w	r3, r3, #8
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d03a      	beq.n	8008e80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d019      	beq.n	8008e46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e12:	4b17      	ldr	r3, [pc, #92]	@ (8008e70 <HAL_RCC_OscConfig+0x274>)
 8008e14:	2201      	movs	r2, #1
 8008e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e18:	f7fd f940 	bl	800609c <HAL_GetTick>
 8008e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e1e:	e008      	b.n	8008e32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e20:	f7fd f93c 	bl	800609c <HAL_GetTick>
 8008e24:	4602      	mov	r2, r0
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	1ad3      	subs	r3, r2, r3
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d901      	bls.n	8008e32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	e160      	b.n	80090f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e32:	4b0d      	ldr	r3, [pc, #52]	@ (8008e68 <HAL_RCC_OscConfig+0x26c>)
 8008e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e36:	f003 0302 	and.w	r3, r3, #2
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d0f0      	beq.n	8008e20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008e3e:	2001      	movs	r0, #1
 8008e40:	f000 fafe 	bl	8009440 <RCC_Delay>
 8008e44:	e01c      	b.n	8008e80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e46:	4b0a      	ldr	r3, [pc, #40]	@ (8008e70 <HAL_RCC_OscConfig+0x274>)
 8008e48:	2200      	movs	r2, #0
 8008e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e4c:	f7fd f926 	bl	800609c <HAL_GetTick>
 8008e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e52:	e00f      	b.n	8008e74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e54:	f7fd f922 	bl	800609c <HAL_GetTick>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d908      	bls.n	8008e74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008e62:	2303      	movs	r3, #3
 8008e64:	e146      	b.n	80090f4 <HAL_RCC_OscConfig+0x4f8>
 8008e66:	bf00      	nop
 8008e68:	40021000 	.word	0x40021000
 8008e6c:	42420000 	.word	0x42420000
 8008e70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e74:	4b92      	ldr	r3, [pc, #584]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8008e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e78:	f003 0302 	and.w	r3, r3, #2
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d1e9      	bne.n	8008e54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 0304 	and.w	r3, r3, #4
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f000 80a6 	beq.w	8008fda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e92:	4b8b      	ldr	r3, [pc, #556]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8008e94:	69db      	ldr	r3, [r3, #28]
 8008e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10d      	bne.n	8008eba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e9e:	4b88      	ldr	r3, [pc, #544]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8008ea0:	69db      	ldr	r3, [r3, #28]
 8008ea2:	4a87      	ldr	r2, [pc, #540]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8008ea4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ea8:	61d3      	str	r3, [r2, #28]
 8008eaa:	4b85      	ldr	r3, [pc, #532]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8008eac:	69db      	ldr	r3, [r3, #28]
 8008eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008eb2:	60bb      	str	r3, [r7, #8]
 8008eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008eba:	4b82      	ldr	r3, [pc, #520]	@ (80090c4 <HAL_RCC_OscConfig+0x4c8>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d118      	bne.n	8008ef8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ec6:	4b7f      	ldr	r3, [pc, #508]	@ (80090c4 <HAL_RCC_OscConfig+0x4c8>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a7e      	ldr	r2, [pc, #504]	@ (80090c4 <HAL_RCC_OscConfig+0x4c8>)
 8008ecc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ed0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ed2:	f7fd f8e3 	bl	800609c <HAL_GetTick>
 8008ed6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ed8:	e008      	b.n	8008eec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008eda:	f7fd f8df 	bl	800609c <HAL_GetTick>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	2b64      	cmp	r3, #100	@ 0x64
 8008ee6:	d901      	bls.n	8008eec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	e103      	b.n	80090f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008eec:	4b75      	ldr	r3, [pc, #468]	@ (80090c4 <HAL_RCC_OscConfig+0x4c8>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d0f0      	beq.n	8008eda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d106      	bne.n	8008f0e <HAL_RCC_OscConfig+0x312>
 8008f00:	4b6f      	ldr	r3, [pc, #444]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8008f02:	6a1b      	ldr	r3, [r3, #32]
 8008f04:	4a6e      	ldr	r2, [pc, #440]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8008f06:	f043 0301 	orr.w	r3, r3, #1
 8008f0a:	6213      	str	r3, [r2, #32]
 8008f0c:	e02d      	b.n	8008f6a <HAL_RCC_OscConfig+0x36e>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d10c      	bne.n	8008f30 <HAL_RCC_OscConfig+0x334>
 8008f16:	4b6a      	ldr	r3, [pc, #424]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8008f18:	6a1b      	ldr	r3, [r3, #32]
 8008f1a:	4a69      	ldr	r2, [pc, #420]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8008f1c:	f023 0301 	bic.w	r3, r3, #1
 8008f20:	6213      	str	r3, [r2, #32]
 8008f22:	4b67      	ldr	r3, [pc, #412]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8008f24:	6a1b      	ldr	r3, [r3, #32]
 8008f26:	4a66      	ldr	r2, [pc, #408]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8008f28:	f023 0304 	bic.w	r3, r3, #4
 8008f2c:	6213      	str	r3, [r2, #32]
 8008f2e:	e01c      	b.n	8008f6a <HAL_RCC_OscConfig+0x36e>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	2b05      	cmp	r3, #5
 8008f36:	d10c      	bne.n	8008f52 <HAL_RCC_OscConfig+0x356>
 8008f38:	4b61      	ldr	r3, [pc, #388]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8008f3a:	6a1b      	ldr	r3, [r3, #32]
 8008f3c:	4a60      	ldr	r2, [pc, #384]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8008f3e:	f043 0304 	orr.w	r3, r3, #4
 8008f42:	6213      	str	r3, [r2, #32]
 8008f44:	4b5e      	ldr	r3, [pc, #376]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8008f46:	6a1b      	ldr	r3, [r3, #32]
 8008f48:	4a5d      	ldr	r2, [pc, #372]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8008f4a:	f043 0301 	orr.w	r3, r3, #1
 8008f4e:	6213      	str	r3, [r2, #32]
 8008f50:	e00b      	b.n	8008f6a <HAL_RCC_OscConfig+0x36e>
 8008f52:	4b5b      	ldr	r3, [pc, #364]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8008f54:	6a1b      	ldr	r3, [r3, #32]
 8008f56:	4a5a      	ldr	r2, [pc, #360]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8008f58:	f023 0301 	bic.w	r3, r3, #1
 8008f5c:	6213      	str	r3, [r2, #32]
 8008f5e:	4b58      	ldr	r3, [pc, #352]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8008f60:	6a1b      	ldr	r3, [r3, #32]
 8008f62:	4a57      	ldr	r2, [pc, #348]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8008f64:	f023 0304 	bic.w	r3, r3, #4
 8008f68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d015      	beq.n	8008f9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f72:	f7fd f893 	bl	800609c <HAL_GetTick>
 8008f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f78:	e00a      	b.n	8008f90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f7a:	f7fd f88f 	bl	800609c <HAL_GetTick>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	1ad3      	subs	r3, r2, r3
 8008f84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d901      	bls.n	8008f90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	e0b1      	b.n	80090f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f90:	4b4b      	ldr	r3, [pc, #300]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8008f92:	6a1b      	ldr	r3, [r3, #32]
 8008f94:	f003 0302 	and.w	r3, r3, #2
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d0ee      	beq.n	8008f7a <HAL_RCC_OscConfig+0x37e>
 8008f9c:	e014      	b.n	8008fc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f9e:	f7fd f87d 	bl	800609c <HAL_GetTick>
 8008fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008fa4:	e00a      	b.n	8008fbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fa6:	f7fd f879 	bl	800609c <HAL_GetTick>
 8008faa:	4602      	mov	r2, r0
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d901      	bls.n	8008fbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e09b      	b.n	80090f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008fbc:	4b40      	ldr	r3, [pc, #256]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8008fbe:	6a1b      	ldr	r3, [r3, #32]
 8008fc0:	f003 0302 	and.w	r3, r3, #2
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1ee      	bne.n	8008fa6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008fc8:	7dfb      	ldrb	r3, [r7, #23]
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d105      	bne.n	8008fda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008fce:	4b3c      	ldr	r3, [pc, #240]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8008fd0:	69db      	ldr	r3, [r3, #28]
 8008fd2:	4a3b      	ldr	r2, [pc, #236]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8008fd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008fd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	69db      	ldr	r3, [r3, #28]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f000 8087 	beq.w	80090f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008fe4:	4b36      	ldr	r3, [pc, #216]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	f003 030c 	and.w	r3, r3, #12
 8008fec:	2b08      	cmp	r3, #8
 8008fee:	d061      	beq.n	80090b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	69db      	ldr	r3, [r3, #28]
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d146      	bne.n	8009086 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ff8:	4b33      	ldr	r3, [pc, #204]	@ (80090c8 <HAL_RCC_OscConfig+0x4cc>)
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ffe:	f7fd f84d 	bl	800609c <HAL_GetTick>
 8009002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009004:	e008      	b.n	8009018 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009006:	f7fd f849 	bl	800609c <HAL_GetTick>
 800900a:	4602      	mov	r2, r0
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	2b02      	cmp	r3, #2
 8009012:	d901      	bls.n	8009018 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8009014:	2303      	movs	r3, #3
 8009016:	e06d      	b.n	80090f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009018:	4b29      	ldr	r3, [pc, #164]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009020:	2b00      	cmp	r3, #0
 8009022:	d1f0      	bne.n	8009006 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a1b      	ldr	r3, [r3, #32]
 8009028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800902c:	d108      	bne.n	8009040 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800902e:	4b24      	ldr	r3, [pc, #144]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	4921      	ldr	r1, [pc, #132]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 800903c:	4313      	orrs	r3, r2
 800903e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009040:	4b1f      	ldr	r3, [pc, #124]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6a19      	ldr	r1, [r3, #32]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009050:	430b      	orrs	r3, r1
 8009052:	491b      	ldr	r1, [pc, #108]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 8009054:	4313      	orrs	r3, r2
 8009056:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009058:	4b1b      	ldr	r3, [pc, #108]	@ (80090c8 <HAL_RCC_OscConfig+0x4cc>)
 800905a:	2201      	movs	r2, #1
 800905c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800905e:	f7fd f81d 	bl	800609c <HAL_GetTick>
 8009062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009064:	e008      	b.n	8009078 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009066:	f7fd f819 	bl	800609c <HAL_GetTick>
 800906a:	4602      	mov	r2, r0
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	1ad3      	subs	r3, r2, r3
 8009070:	2b02      	cmp	r3, #2
 8009072:	d901      	bls.n	8009078 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e03d      	b.n	80090f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009078:	4b11      	ldr	r3, [pc, #68]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009080:	2b00      	cmp	r3, #0
 8009082:	d0f0      	beq.n	8009066 <HAL_RCC_OscConfig+0x46a>
 8009084:	e035      	b.n	80090f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009086:	4b10      	ldr	r3, [pc, #64]	@ (80090c8 <HAL_RCC_OscConfig+0x4cc>)
 8009088:	2200      	movs	r2, #0
 800908a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800908c:	f7fd f806 	bl	800609c <HAL_GetTick>
 8009090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009092:	e008      	b.n	80090a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009094:	f7fd f802 	bl	800609c <HAL_GetTick>
 8009098:	4602      	mov	r2, r0
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	2b02      	cmp	r3, #2
 80090a0:	d901      	bls.n	80090a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80090a2:	2303      	movs	r3, #3
 80090a4:	e026      	b.n	80090f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80090a6:	4b06      	ldr	r3, [pc, #24]	@ (80090c0 <HAL_RCC_OscConfig+0x4c4>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1f0      	bne.n	8009094 <HAL_RCC_OscConfig+0x498>
 80090b2:	e01e      	b.n	80090f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	69db      	ldr	r3, [r3, #28]
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d107      	bne.n	80090cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	e019      	b.n	80090f4 <HAL_RCC_OscConfig+0x4f8>
 80090c0:	40021000 	.word	0x40021000
 80090c4:	40007000 	.word	0x40007000
 80090c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80090cc:	4b0b      	ldr	r3, [pc, #44]	@ (80090fc <HAL_RCC_OscConfig+0x500>)
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a1b      	ldr	r3, [r3, #32]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d106      	bne.n	80090ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d001      	beq.n	80090f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e000      	b.n	80090f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3718      	adds	r7, #24
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	40021000 	.word	0x40021000

08009100 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d101      	bne.n	8009114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	e0d0      	b.n	80092b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009114:	4b6a      	ldr	r3, [pc, #424]	@ (80092c0 <HAL_RCC_ClockConfig+0x1c0>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 0307 	and.w	r3, r3, #7
 800911c:	683a      	ldr	r2, [r7, #0]
 800911e:	429a      	cmp	r2, r3
 8009120:	d910      	bls.n	8009144 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009122:	4b67      	ldr	r3, [pc, #412]	@ (80092c0 <HAL_RCC_ClockConfig+0x1c0>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f023 0207 	bic.w	r2, r3, #7
 800912a:	4965      	ldr	r1, [pc, #404]	@ (80092c0 <HAL_RCC_ClockConfig+0x1c0>)
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	4313      	orrs	r3, r2
 8009130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009132:	4b63      	ldr	r3, [pc, #396]	@ (80092c0 <HAL_RCC_ClockConfig+0x1c0>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 0307 	and.w	r3, r3, #7
 800913a:	683a      	ldr	r2, [r7, #0]
 800913c:	429a      	cmp	r2, r3
 800913e:	d001      	beq.n	8009144 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	e0b8      	b.n	80092b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 0302 	and.w	r3, r3, #2
 800914c:	2b00      	cmp	r3, #0
 800914e:	d020      	beq.n	8009192 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 0304 	and.w	r3, r3, #4
 8009158:	2b00      	cmp	r3, #0
 800915a:	d005      	beq.n	8009168 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800915c:	4b59      	ldr	r3, [pc, #356]	@ (80092c4 <HAL_RCC_ClockConfig+0x1c4>)
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	4a58      	ldr	r2, [pc, #352]	@ (80092c4 <HAL_RCC_ClockConfig+0x1c4>)
 8009162:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009166:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f003 0308 	and.w	r3, r3, #8
 8009170:	2b00      	cmp	r3, #0
 8009172:	d005      	beq.n	8009180 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009174:	4b53      	ldr	r3, [pc, #332]	@ (80092c4 <HAL_RCC_ClockConfig+0x1c4>)
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	4a52      	ldr	r2, [pc, #328]	@ (80092c4 <HAL_RCC_ClockConfig+0x1c4>)
 800917a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800917e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009180:	4b50      	ldr	r3, [pc, #320]	@ (80092c4 <HAL_RCC_ClockConfig+0x1c4>)
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	494d      	ldr	r1, [pc, #308]	@ (80092c4 <HAL_RCC_ClockConfig+0x1c4>)
 800918e:	4313      	orrs	r3, r2
 8009190:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 0301 	and.w	r3, r3, #1
 800919a:	2b00      	cmp	r3, #0
 800919c:	d040      	beq.n	8009220 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d107      	bne.n	80091b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091a6:	4b47      	ldr	r3, [pc, #284]	@ (80092c4 <HAL_RCC_ClockConfig+0x1c4>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d115      	bne.n	80091de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e07f      	b.n	80092b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d107      	bne.n	80091ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091be:	4b41      	ldr	r3, [pc, #260]	@ (80092c4 <HAL_RCC_ClockConfig+0x1c4>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d109      	bne.n	80091de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e073      	b.n	80092b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091ce:	4b3d      	ldr	r3, [pc, #244]	@ (80092c4 <HAL_RCC_ClockConfig+0x1c4>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0302 	and.w	r3, r3, #2
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d101      	bne.n	80091de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	e06b      	b.n	80092b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80091de:	4b39      	ldr	r3, [pc, #228]	@ (80092c4 <HAL_RCC_ClockConfig+0x1c4>)
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	f023 0203 	bic.w	r2, r3, #3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	4936      	ldr	r1, [pc, #216]	@ (80092c4 <HAL_RCC_ClockConfig+0x1c4>)
 80091ec:	4313      	orrs	r3, r2
 80091ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80091f0:	f7fc ff54 	bl	800609c <HAL_GetTick>
 80091f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091f6:	e00a      	b.n	800920e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091f8:	f7fc ff50 	bl	800609c <HAL_GetTick>
 80091fc:	4602      	mov	r2, r0
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009206:	4293      	cmp	r3, r2
 8009208:	d901      	bls.n	800920e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800920a:	2303      	movs	r3, #3
 800920c:	e053      	b.n	80092b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800920e:	4b2d      	ldr	r3, [pc, #180]	@ (80092c4 <HAL_RCC_ClockConfig+0x1c4>)
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	f003 020c 	and.w	r2, r3, #12
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	429a      	cmp	r2, r3
 800921e:	d1eb      	bne.n	80091f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009220:	4b27      	ldr	r3, [pc, #156]	@ (80092c0 <HAL_RCC_ClockConfig+0x1c0>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 0307 	and.w	r3, r3, #7
 8009228:	683a      	ldr	r2, [r7, #0]
 800922a:	429a      	cmp	r2, r3
 800922c:	d210      	bcs.n	8009250 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800922e:	4b24      	ldr	r3, [pc, #144]	@ (80092c0 <HAL_RCC_ClockConfig+0x1c0>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f023 0207 	bic.w	r2, r3, #7
 8009236:	4922      	ldr	r1, [pc, #136]	@ (80092c0 <HAL_RCC_ClockConfig+0x1c0>)
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	4313      	orrs	r3, r2
 800923c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800923e:	4b20      	ldr	r3, [pc, #128]	@ (80092c0 <HAL_RCC_ClockConfig+0x1c0>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f003 0307 	and.w	r3, r3, #7
 8009246:	683a      	ldr	r2, [r7, #0]
 8009248:	429a      	cmp	r2, r3
 800924a:	d001      	beq.n	8009250 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	e032      	b.n	80092b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 0304 	and.w	r3, r3, #4
 8009258:	2b00      	cmp	r3, #0
 800925a:	d008      	beq.n	800926e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800925c:	4b19      	ldr	r3, [pc, #100]	@ (80092c4 <HAL_RCC_ClockConfig+0x1c4>)
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	4916      	ldr	r1, [pc, #88]	@ (80092c4 <HAL_RCC_ClockConfig+0x1c4>)
 800926a:	4313      	orrs	r3, r2
 800926c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f003 0308 	and.w	r3, r3, #8
 8009276:	2b00      	cmp	r3, #0
 8009278:	d009      	beq.n	800928e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800927a:	4b12      	ldr	r3, [pc, #72]	@ (80092c4 <HAL_RCC_ClockConfig+0x1c4>)
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	691b      	ldr	r3, [r3, #16]
 8009286:	00db      	lsls	r3, r3, #3
 8009288:	490e      	ldr	r1, [pc, #56]	@ (80092c4 <HAL_RCC_ClockConfig+0x1c4>)
 800928a:	4313      	orrs	r3, r2
 800928c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800928e:	f000 f821 	bl	80092d4 <HAL_RCC_GetSysClockFreq>
 8009292:	4602      	mov	r2, r0
 8009294:	4b0b      	ldr	r3, [pc, #44]	@ (80092c4 <HAL_RCC_ClockConfig+0x1c4>)
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	091b      	lsrs	r3, r3, #4
 800929a:	f003 030f 	and.w	r3, r3, #15
 800929e:	490a      	ldr	r1, [pc, #40]	@ (80092c8 <HAL_RCC_ClockConfig+0x1c8>)
 80092a0:	5ccb      	ldrb	r3, [r1, r3]
 80092a2:	fa22 f303 	lsr.w	r3, r2, r3
 80092a6:	4a09      	ldr	r2, [pc, #36]	@ (80092cc <HAL_RCC_ClockConfig+0x1cc>)
 80092a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80092aa:	4b09      	ldr	r3, [pc, #36]	@ (80092d0 <HAL_RCC_ClockConfig+0x1d0>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7fb faea 	bl	8004888 <HAL_InitTick>

  return HAL_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	40022000 	.word	0x40022000
 80092c4:	40021000 	.word	0x40021000
 80092c8:	080134cc 	.word	0x080134cc
 80092cc:	20000028 	.word	0x20000028
 80092d0:	20000038 	.word	0x20000038

080092d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b087      	sub	sp, #28
 80092d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80092da:	2300      	movs	r3, #0
 80092dc:	60fb      	str	r3, [r7, #12]
 80092de:	2300      	movs	r3, #0
 80092e0:	60bb      	str	r3, [r7, #8]
 80092e2:	2300      	movs	r3, #0
 80092e4:	617b      	str	r3, [r7, #20]
 80092e6:	2300      	movs	r3, #0
 80092e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80092ea:	2300      	movs	r3, #0
 80092ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80092ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009368 <HAL_RCC_GetSysClockFreq+0x94>)
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f003 030c 	and.w	r3, r3, #12
 80092fa:	2b04      	cmp	r3, #4
 80092fc:	d002      	beq.n	8009304 <HAL_RCC_GetSysClockFreq+0x30>
 80092fe:	2b08      	cmp	r3, #8
 8009300:	d003      	beq.n	800930a <HAL_RCC_GetSysClockFreq+0x36>
 8009302:	e027      	b.n	8009354 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009304:	4b19      	ldr	r3, [pc, #100]	@ (800936c <HAL_RCC_GetSysClockFreq+0x98>)
 8009306:	613b      	str	r3, [r7, #16]
      break;
 8009308:	e027      	b.n	800935a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	0c9b      	lsrs	r3, r3, #18
 800930e:	f003 030f 	and.w	r3, r3, #15
 8009312:	4a17      	ldr	r2, [pc, #92]	@ (8009370 <HAL_RCC_GetSysClockFreq+0x9c>)
 8009314:	5cd3      	ldrb	r3, [r2, r3]
 8009316:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800931e:	2b00      	cmp	r3, #0
 8009320:	d010      	beq.n	8009344 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009322:	4b11      	ldr	r3, [pc, #68]	@ (8009368 <HAL_RCC_GetSysClockFreq+0x94>)
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	0c5b      	lsrs	r3, r3, #17
 8009328:	f003 0301 	and.w	r3, r3, #1
 800932c:	4a11      	ldr	r2, [pc, #68]	@ (8009374 <HAL_RCC_GetSysClockFreq+0xa0>)
 800932e:	5cd3      	ldrb	r3, [r2, r3]
 8009330:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4a0d      	ldr	r2, [pc, #52]	@ (800936c <HAL_RCC_GetSysClockFreq+0x98>)
 8009336:	fb03 f202 	mul.w	r2, r3, r2
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009340:	617b      	str	r3, [r7, #20]
 8009342:	e004      	b.n	800934e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a0c      	ldr	r2, [pc, #48]	@ (8009378 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009348:	fb02 f303 	mul.w	r3, r2, r3
 800934c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	613b      	str	r3, [r7, #16]
      break;
 8009352:	e002      	b.n	800935a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009354:	4b05      	ldr	r3, [pc, #20]	@ (800936c <HAL_RCC_GetSysClockFreq+0x98>)
 8009356:	613b      	str	r3, [r7, #16]
      break;
 8009358:	bf00      	nop
    }
  }
  return sysclockfreq;
 800935a:	693b      	ldr	r3, [r7, #16]
}
 800935c:	4618      	mov	r0, r3
 800935e:	371c      	adds	r7, #28
 8009360:	46bd      	mov	sp, r7
 8009362:	bc80      	pop	{r7}
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	40021000 	.word	0x40021000
 800936c:	007a1200 	.word	0x007a1200
 8009370:	080134e4 	.word	0x080134e4
 8009374:	080134f4 	.word	0x080134f4
 8009378:	003d0900 	.word	0x003d0900

0800937c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800937c:	b480      	push	{r7}
 800937e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009380:	4b02      	ldr	r3, [pc, #8]	@ (800938c <HAL_RCC_GetHCLKFreq+0x10>)
 8009382:	681b      	ldr	r3, [r3, #0]
}
 8009384:	4618      	mov	r0, r3
 8009386:	46bd      	mov	sp, r7
 8009388:	bc80      	pop	{r7}
 800938a:	4770      	bx	lr
 800938c:	20000028 	.word	0x20000028

08009390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009394:	f7ff fff2 	bl	800937c <HAL_RCC_GetHCLKFreq>
 8009398:	4602      	mov	r2, r0
 800939a:	4b05      	ldr	r3, [pc, #20]	@ (80093b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	0a1b      	lsrs	r3, r3, #8
 80093a0:	f003 0307 	and.w	r3, r3, #7
 80093a4:	4903      	ldr	r1, [pc, #12]	@ (80093b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80093a6:	5ccb      	ldrb	r3, [r1, r3]
 80093a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	40021000 	.word	0x40021000
 80093b4:	080134dc 	.word	0x080134dc

080093b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80093bc:	f7ff ffde 	bl	800937c <HAL_RCC_GetHCLKFreq>
 80093c0:	4602      	mov	r2, r0
 80093c2:	4b05      	ldr	r3, [pc, #20]	@ (80093d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	0adb      	lsrs	r3, r3, #11
 80093c8:	f003 0307 	and.w	r3, r3, #7
 80093cc:	4903      	ldr	r1, [pc, #12]	@ (80093dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80093ce:	5ccb      	ldrb	r3, [r1, r3]
 80093d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	40021000 	.word	0x40021000
 80093dc:	080134dc 	.word	0x080134dc

080093e0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	220f      	movs	r2, #15
 80093ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80093f0:	4b11      	ldr	r3, [pc, #68]	@ (8009438 <HAL_RCC_GetClockConfig+0x58>)
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	f003 0203 	and.w	r2, r3, #3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80093fc:	4b0e      	ldr	r3, [pc, #56]	@ (8009438 <HAL_RCC_GetClockConfig+0x58>)
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009408:	4b0b      	ldr	r3, [pc, #44]	@ (8009438 <HAL_RCC_GetClockConfig+0x58>)
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009414:	4b08      	ldr	r3, [pc, #32]	@ (8009438 <HAL_RCC_GetClockConfig+0x58>)
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	08db      	lsrs	r3, r3, #3
 800941a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009422:	4b06      	ldr	r3, [pc, #24]	@ (800943c <HAL_RCC_GetClockConfig+0x5c>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 0207 	and.w	r2, r3, #7
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800942e:	bf00      	nop
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	bc80      	pop	{r7}
 8009436:	4770      	bx	lr
 8009438:	40021000 	.word	0x40021000
 800943c:	40022000 	.word	0x40022000

08009440 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009448:	4b0a      	ldr	r3, [pc, #40]	@ (8009474 <RCC_Delay+0x34>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a0a      	ldr	r2, [pc, #40]	@ (8009478 <RCC_Delay+0x38>)
 800944e:	fba2 2303 	umull	r2, r3, r2, r3
 8009452:	0a5b      	lsrs	r3, r3, #9
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	fb02 f303 	mul.w	r3, r2, r3
 800945a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800945c:	bf00      	nop
  }
  while (Delay --);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	1e5a      	subs	r2, r3, #1
 8009462:	60fa      	str	r2, [r7, #12]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1f9      	bne.n	800945c <RCC_Delay+0x1c>
}
 8009468:	bf00      	nop
 800946a:	bf00      	nop
 800946c:	3714      	adds	r7, #20
 800946e:	46bd      	mov	sp, r7
 8009470:	bc80      	pop	{r7}
 8009472:	4770      	bx	lr
 8009474:	20000028 	.word	0x20000028
 8009478:	10624dd3 	.word	0x10624dd3

0800947c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d101      	bne.n	800948e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	e022      	b.n	80094d4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b00      	cmp	r3, #0
 8009498:	d105      	bne.n	80094a6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f7fb f95f 	bl	8004764 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2203      	movs	r2, #3
 80094aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f814 	bl	80094dc <HAL_SD_InitCard>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d001      	beq.n	80094be <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e00a      	b.n	80094d4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2201      	movs	r2, #1
 80094ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3708      	adds	r7, #8
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80094dc:	b5b0      	push	{r4, r5, r7, lr}
 80094de:	b08e      	sub	sp, #56	@ 0x38
 80094e0:	af04      	add	r7, sp, #16
 80094e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80094e4:	2300      	movs	r3, #0
 80094e6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80094e8:	2300      	movs	r3, #0
 80094ea:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80094ec:	2300      	movs	r3, #0
 80094ee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80094f0:	2300      	movs	r3, #0
 80094f2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80094f4:	2300      	movs	r3, #0
 80094f6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80094f8:	2376      	movs	r3, #118	@ 0x76
 80094fa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681d      	ldr	r5, [r3, #0]
 8009500:	466c      	mov	r4, sp
 8009502:	f107 0314 	add.w	r3, r7, #20
 8009506:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800950a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800950e:	f107 0308 	add.w	r3, r7, #8
 8009512:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009514:	4628      	mov	r0, r5
 8009516:	f002 fec3 	bl	800c2a0 <SDIO_Init>
 800951a:	4603      	mov	r3, r0
 800951c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8009520:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	e04f      	b.n	80095cc <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800952c:	4b29      	ldr	r3, [pc, #164]	@ (80095d4 <HAL_SD_InitCard+0xf8>)
 800952e:	2200      	movs	r2, #0
 8009530:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4618      	mov	r0, r3
 8009538:	f002 fef8 	bl	800c32c <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800953c:	4b25      	ldr	r3, [pc, #148]	@ (80095d4 <HAL_SD_InitCard+0xf8>)
 800953e:	2201      	movs	r2, #1
 8009540:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009542:	2002      	movs	r0, #2
 8009544:	f7fc fdb4 	bl	80060b0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 fe69 	bl	800a220 <SD_PowerON>
 800954e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009550:	6a3b      	ldr	r3, [r7, #32]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00b      	beq.n	800956e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2201      	movs	r2, #1
 800955a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009562:	6a3b      	ldr	r3, [r7, #32]
 8009564:	431a      	orrs	r2, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	e02e      	b.n	80095cc <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 fd87 	bl	800a082 <SD_InitCard>
 8009574:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009576:	6a3b      	ldr	r3, [r7, #32]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d00b      	beq.n	8009594 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009588:	6a3b      	ldr	r3, [r7, #32]
 800958a:	431a      	orrs	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	e01b      	b.n	80095cc <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800959c:	4618      	mov	r0, r3
 800959e:	f002 ff51 	bl	800c444 <SDMMC_CmdBlockLength>
 80095a2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095a4:	6a3b      	ldr	r3, [r7, #32]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00f      	beq.n	80095ca <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4a0a      	ldr	r2, [pc, #40]	@ (80095d8 <HAL_SD_InitCard+0xfc>)
 80095b0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095b6:	6a3b      	ldr	r3, [r7, #32]
 80095b8:	431a      	orrs	r2, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2201      	movs	r2, #1
 80095c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
 80095c8:	e000      	b.n	80095cc <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3728      	adds	r7, #40	@ 0x28
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bdb0      	pop	{r4, r5, r7, pc}
 80095d4:	423000a0 	.word	0x423000a0
 80095d8:	004005ff 	.word	0x004005ff

080095dc <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b092      	sub	sp, #72	@ 0x48
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
 80095e8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80095ea:	f7fc fd57 	bl	800609c <HAL_GetTick>
 80095ee:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d107      	bne.n	800960e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009602:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e1bd      	b.n	800998a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009614:	b2db      	uxtb	r3, r3
 8009616:	2b01      	cmp	r3, #1
 8009618:	f040 81b0 	bne.w	800997c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009622:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	441a      	add	r2, r3
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800962c:	429a      	cmp	r2, r3
 800962e:	d907      	bls.n	8009640 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009634:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	e1a4      	b.n	800998a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2203      	movs	r2, #3
 8009644:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2200      	movs	r2, #0
 800964e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009654:	2b01      	cmp	r3, #1
 8009656:	d002      	beq.n	800965e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8009658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800965a:	025b      	lsls	r3, r3, #9
 800965c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800965e:	f04f 33ff 	mov.w	r3, #4294967295
 8009662:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	025b      	lsls	r3, r3, #9
 8009668:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800966a:	2390      	movs	r3, #144	@ 0x90
 800966c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800966e:	2302      	movs	r3, #2
 8009670:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009672:	2300      	movs	r3, #0
 8009674:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009676:	2301      	movs	r3, #1
 8009678:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f107 0214 	add.w	r2, r7, #20
 8009682:	4611      	mov	r1, r2
 8009684:	4618      	mov	r0, r3
 8009686:	f002 feb2 	bl	800c3ee <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	2b01      	cmp	r3, #1
 800968e:	d90a      	bls.n	80096a6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2202      	movs	r2, #2
 8009694:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800969c:	4618      	mov	r0, r3
 800969e:	f002 ff15 	bl	800c4cc <SDMMC_CmdReadMultiBlock>
 80096a2:	6478      	str	r0, [r7, #68]	@ 0x44
 80096a4:	e009      	b.n	80096ba <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2201      	movs	r2, #1
 80096aa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80096b2:	4618      	mov	r0, r3
 80096b4:	f002 fee8 	bl	800c488 <SDMMC_CmdReadSingleBlock>
 80096b8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80096ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d012      	beq.n	80096e6 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a7a      	ldr	r2, [pc, #488]	@ (80098b0 <HAL_SD_ReadBlocks+0x2d4>)
 80096c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096ce:	431a      	orrs	r2, r3
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2200      	movs	r2, #0
 80096e0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e151      	b.n	800998a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80096e6:	69bb      	ldr	r3, [r7, #24]
 80096e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80096ea:	e061      	b.n	80097b0 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d03c      	beq.n	8009774 <HAL_SD_ReadBlocks+0x198>
 80096fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d039      	beq.n	8009774 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8009700:	2300      	movs	r3, #0
 8009702:	643b      	str	r3, [r7, #64]	@ 0x40
 8009704:	e033      	b.n	800976e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4618      	mov	r0, r3
 800970c:	f002 fdf2 	bl	800c2f4 <SDIO_ReadFIFO>
 8009710:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009714:	b2da      	uxtb	r2, r3
 8009716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009718:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800971a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800971c:	3301      	adds	r3, #1
 800971e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009722:	3b01      	subs	r3, #1
 8009724:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009728:	0a1b      	lsrs	r3, r3, #8
 800972a:	b2da      	uxtb	r2, r3
 800972c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800972e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009732:	3301      	adds	r3, #1
 8009734:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009738:	3b01      	subs	r3, #1
 800973a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800973c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800973e:	0c1b      	lsrs	r3, r3, #16
 8009740:	b2da      	uxtb	r2, r3
 8009742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009744:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009748:	3301      	adds	r3, #1
 800974a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800974c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800974e:	3b01      	subs	r3, #1
 8009750:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009754:	0e1b      	lsrs	r3, r3, #24
 8009756:	b2da      	uxtb	r2, r3
 8009758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800975a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800975c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800975e:	3301      	adds	r3, #1
 8009760:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009764:	3b01      	subs	r3, #1
 8009766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8009768:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800976a:	3301      	adds	r3, #1
 800976c:	643b      	str	r3, [r7, #64]	@ 0x40
 800976e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009770:	2b07      	cmp	r3, #7
 8009772:	d9c8      	bls.n	8009706 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009774:	f7fc fc92 	bl	800609c <HAL_GetTick>
 8009778:	4602      	mov	r2, r0
 800977a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800977c:	1ad3      	subs	r3, r2, r3
 800977e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009780:	429a      	cmp	r2, r3
 8009782:	d902      	bls.n	800978a <HAL_SD_ReadBlocks+0x1ae>
 8009784:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009786:	2b00      	cmp	r3, #0
 8009788:	d112      	bne.n	80097b0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a48      	ldr	r2, [pc, #288]	@ (80098b0 <HAL_SD_ReadBlocks+0x2d4>)
 8009790:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009796:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2201      	movs	r2, #1
 80097a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2200      	movs	r2, #0
 80097aa:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80097ac:	2303      	movs	r3, #3
 80097ae:	e0ec      	b.n	800998a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097b6:	f240 332a 	movw	r3, #810	@ 0x32a
 80097ba:	4013      	ands	r3, r2
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d095      	beq.n	80096ec <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d022      	beq.n	8009814 <HAL_SD_ReadBlocks+0x238>
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d91f      	bls.n	8009814 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097d8:	2b03      	cmp	r3, #3
 80097da:	d01b      	beq.n	8009814 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4618      	mov	r0, r3
 80097e2:	f002 fed9 	bl	800c598 <SDMMC_CmdStopTransfer>
 80097e6:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80097e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d012      	beq.n	8009814 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a2f      	ldr	r2, [pc, #188]	@ (80098b0 <HAL_SD_ReadBlocks+0x2d4>)
 80097f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097fc:	431a      	orrs	r2, r3
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2201      	movs	r2, #1
 8009806:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2200      	movs	r2, #0
 800980e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	e0ba      	b.n	800998a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800981a:	f003 0308 	and.w	r3, r3, #8
 800981e:	2b00      	cmp	r3, #0
 8009820:	d012      	beq.n	8009848 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a22      	ldr	r2, [pc, #136]	@ (80098b0 <HAL_SD_ReadBlocks+0x2d4>)
 8009828:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800982e:	f043 0208 	orr.w	r2, r3, #8
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2201      	movs	r2, #1
 800983a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2200      	movs	r2, #0
 8009842:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	e0a0      	b.n	800998a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800984e:	f003 0302 	and.w	r3, r3, #2
 8009852:	2b00      	cmp	r3, #0
 8009854:	d012      	beq.n	800987c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a15      	ldr	r2, [pc, #84]	@ (80098b0 <HAL_SD_ReadBlocks+0x2d4>)
 800985c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009862:	f043 0202 	orr.w	r2, r3, #2
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2201      	movs	r2, #1
 800986e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2200      	movs	r2, #0
 8009876:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	e086      	b.n	800998a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009882:	f003 0320 	and.w	r3, r3, #32
 8009886:	2b00      	cmp	r3, #0
 8009888:	d063      	beq.n	8009952 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a08      	ldr	r2, [pc, #32]	@ (80098b0 <HAL_SD_ReadBlocks+0x2d4>)
 8009890:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009896:	f043 0220 	orr.w	r2, r3, #32
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2201      	movs	r2, #1
 80098a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2200      	movs	r2, #0
 80098aa:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80098ac:	2301      	movs	r3, #1
 80098ae:	e06c      	b.n	800998a <HAL_SD_ReadBlocks+0x3ae>
 80098b0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4618      	mov	r0, r3
 80098ba:	f002 fd1b 	bl	800c2f4 <SDIO_ReadFIFO>
 80098be:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80098c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098c2:	b2da      	uxtb	r2, r3
 80098c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098c6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80098c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098ca:	3301      	adds	r3, #1
 80098cc:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80098ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098d0:	3b01      	subs	r3, #1
 80098d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80098d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d6:	0a1b      	lsrs	r3, r3, #8
 80098d8:	b2da      	uxtb	r2, r3
 80098da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098dc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80098de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098e0:	3301      	adds	r3, #1
 80098e2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80098e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098e6:	3b01      	subs	r3, #1
 80098e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80098ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ec:	0c1b      	lsrs	r3, r3, #16
 80098ee:	b2da      	uxtb	r2, r3
 80098f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098f2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80098f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098f6:	3301      	adds	r3, #1
 80098f8:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80098fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098fc:	3b01      	subs	r3, #1
 80098fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009902:	0e1b      	lsrs	r3, r3, #24
 8009904:	b2da      	uxtb	r2, r3
 8009906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009908:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800990a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800990c:	3301      	adds	r3, #1
 800990e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009912:	3b01      	subs	r3, #1
 8009914:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009916:	f7fc fbc1 	bl	800609c <HAL_GetTick>
 800991a:	4602      	mov	r2, r0
 800991c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009922:	429a      	cmp	r2, r3
 8009924:	d902      	bls.n	800992c <HAL_SD_ReadBlocks+0x350>
 8009926:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009928:	2b00      	cmp	r3, #0
 800992a:	d112      	bne.n	8009952 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a18      	ldr	r2, [pc, #96]	@ (8009994 <HAL_SD_ReadBlocks+0x3b8>)
 8009932:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009938:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	e01b      	b.n	800998a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009958:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800995c:	2b00      	cmp	r3, #0
 800995e:	d002      	beq.n	8009966 <HAL_SD_ReadBlocks+0x38a>
 8009960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009962:	2b00      	cmp	r3, #0
 8009964:	d1a6      	bne.n	80098b4 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800996e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	e006      	b.n	800998a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009980:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009988:	2301      	movs	r3, #1
  }
}
 800998a:	4618      	mov	r0, r3
 800998c:	3748      	adds	r7, #72	@ 0x48
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	004005ff 	.word	0x004005ff

08009998 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b092      	sub	sp, #72	@ 0x48
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	607a      	str	r2, [r7, #4]
 80099a4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80099a6:	f7fc fb79 	bl	800609c <HAL_GetTick>
 80099aa:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d107      	bne.n	80099ca <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099be:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	e166      	b.n	8009c98 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	f040 8159 	bne.w	8009c8a <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2200      	movs	r2, #0
 80099dc:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80099de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	441a      	add	r2, r3
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d907      	bls.n	80099fc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099f0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	e14d      	b.n	8009c98 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2203      	movs	r2, #3
 8009a00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d002      	beq.n	8009a1a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a16:	025b      	lsls	r3, r3, #9
 8009a18:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a1e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	025b      	lsls	r3, r3, #9
 8009a24:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009a26:	2390      	movs	r3, #144	@ 0x90
 8009a28:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009a32:	2301      	movs	r3, #1
 8009a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f107 0218 	add.w	r2, r7, #24
 8009a3e:	4611      	mov	r1, r2
 8009a40:	4618      	mov	r0, r3
 8009a42:	f002 fcd4 	bl	800c3ee <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d90a      	bls.n	8009a62 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2220      	movs	r2, #32
 8009a50:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f002 fd7b 	bl	800c554 <SDMMC_CmdWriteMultiBlock>
 8009a5e:	6478      	str	r0, [r7, #68]	@ 0x44
 8009a60:	e009      	b.n	8009a76 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2210      	movs	r2, #16
 8009a66:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f002 fd4e 	bl	800c510 <SDMMC_CmdWriteSingleBlock>
 8009a74:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d012      	beq.n	8009aa2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a87      	ldr	r2, [pc, #540]	@ (8009ca0 <HAL_SD_WriteBlocks+0x308>)
 8009a82:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a8a:	431a      	orrs	r2, r3
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2201      	movs	r2, #1
 8009a94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e0fa      	b.n	8009c98 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009aa6:	e065      	b.n	8009b74 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d040      	beq.n	8009b38 <HAL_SD_WriteBlocks+0x1a0>
 8009ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d03d      	beq.n	8009b38 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8009abc:	2300      	movs	r3, #0
 8009abe:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ac0:	e037      	b.n	8009b32 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8009ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aca:	3301      	adds	r3, #1
 8009acc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	021a      	lsls	r2, r3, #8
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	041a      	lsls	r2, r3, #16
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	4313      	orrs	r3, r2
 8009af6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009afa:	3301      	adds	r3, #1
 8009afc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b00:	3b01      	subs	r3, #1
 8009b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	061a      	lsls	r2, r3, #24
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b12:	3301      	adds	r3, #1
 8009b14:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f107 0214 	add.w	r2, r7, #20
 8009b24:	4611      	mov	r1, r2
 8009b26:	4618      	mov	r0, r3
 8009b28:	f002 fbf0 	bl	800c30c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009b2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b2e:	3301      	adds	r3, #1
 8009b30:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b34:	2b07      	cmp	r3, #7
 8009b36:	d9c4      	bls.n	8009ac2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009b38:	f7fc fab0 	bl	800609c <HAL_GetTick>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d902      	bls.n	8009b4e <HAL_SD_WriteBlocks+0x1b6>
 8009b48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d112      	bne.n	8009b74 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a53      	ldr	r2, [pc, #332]	@ (8009ca0 <HAL_SD_WriteBlocks+0x308>)
 8009b54:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b5c:	431a      	orrs	r2, r3
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2201      	movs	r2, #1
 8009b66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e091      	b.n	8009c98 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b7a:	f240 331a 	movw	r3, #794	@ 0x31a
 8009b7e:	4013      	ands	r3, r2
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d091      	beq.n	8009aa8 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d022      	beq.n	8009bd8 <HAL_SD_WriteBlocks+0x240>
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d91f      	bls.n	8009bd8 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b9c:	2b03      	cmp	r3, #3
 8009b9e:	d01b      	beq.n	8009bd8 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f002 fcf7 	bl	800c598 <SDMMC_CmdStopTransfer>
 8009baa:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009bac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d012      	beq.n	8009bd8 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a3a      	ldr	r2, [pc, #232]	@ (8009ca0 <HAL_SD_WriteBlocks+0x308>)
 8009bb8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009bbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bc0:	431a      	orrs	r2, r3
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e05f      	b.n	8009c98 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bde:	f003 0308 	and.w	r3, r3, #8
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d012      	beq.n	8009c0c <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a2d      	ldr	r2, [pc, #180]	@ (8009ca0 <HAL_SD_WriteBlocks+0x308>)
 8009bec:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bf2:	f043 0208 	orr.w	r2, r3, #8
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2200      	movs	r2, #0
 8009c06:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e045      	b.n	8009c98 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c12:	f003 0302 	and.w	r3, r3, #2
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d012      	beq.n	8009c40 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a20      	ldr	r2, [pc, #128]	@ (8009ca0 <HAL_SD_WriteBlocks+0x308>)
 8009c20:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c26:	f043 0202 	orr.w	r2, r3, #2
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e02b      	b.n	8009c98 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c46:	f003 0310 	and.w	r3, r3, #16
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d012      	beq.n	8009c74 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a13      	ldr	r2, [pc, #76]	@ (8009ca0 <HAL_SD_WriteBlocks+0x308>)
 8009c54:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c5a:	f043 0210 	orr.w	r2, r3, #16
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2201      	movs	r2, #1
 8009c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	e011      	b.n	8009c98 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009c7c:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2201      	movs	r2, #1
 8009c82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8009c86:	2300      	movs	r3, #0
 8009c88:	e006      	b.n	8009c98 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c8e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
  }
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3748      	adds	r7, #72	@ 0x48
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	004005ff 	.word	0x004005ff

08009ca4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cb2:	0f9b      	lsrs	r3, r3, #30
 8009cb4:	b2da      	uxtb	r2, r3
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cbe:	0e9b      	lsrs	r3, r3, #26
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	f003 030f 	and.w	r3, r3, #15
 8009cc6:	b2da      	uxtb	r2, r3
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cd0:	0e1b      	lsrs	r3, r3, #24
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	f003 0303 	and.w	r3, r3, #3
 8009cd8:	b2da      	uxtb	r2, r3
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ce2:	0c1b      	lsrs	r3, r3, #16
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cee:	0a1b      	lsrs	r3, r3, #8
 8009cf0:	b2da      	uxtb	r2, r3
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cfa:	b2da      	uxtb	r2, r3
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d04:	0d1b      	lsrs	r3, r3, #20
 8009d06:	b29a      	uxth	r2, r3
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d10:	0c1b      	lsrs	r3, r3, #16
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	f003 030f 	and.w	r3, r3, #15
 8009d18:	b2da      	uxtb	r2, r3
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d22:	0bdb      	lsrs	r3, r3, #15
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	f003 0301 	and.w	r3, r3, #1
 8009d2a:	b2da      	uxtb	r2, r3
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d34:	0b9b      	lsrs	r3, r3, #14
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	f003 0301 	and.w	r3, r3, #1
 8009d3c:	b2da      	uxtb	r2, r3
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d46:	0b5b      	lsrs	r3, r3, #13
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	f003 0301 	and.w	r3, r3, #1
 8009d4e:	b2da      	uxtb	r2, r3
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d58:	0b1b      	lsrs	r3, r3, #12
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	f003 0301 	and.w	r3, r3, #1
 8009d60:	b2da      	uxtb	r2, r3
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d163      	bne.n	8009e3c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d78:	009a      	lsls	r2, r3, #2
 8009d7a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009d7e:	4013      	ands	r3, r2
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8009d84:	0f92      	lsrs	r2, r2, #30
 8009d86:	431a      	orrs	r2, r3
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d90:	0edb      	lsrs	r3, r3, #27
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	f003 0307 	and.w	r3, r3, #7
 8009d98:	b2da      	uxtb	r2, r3
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009da2:	0e1b      	lsrs	r3, r3, #24
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	f003 0307 	and.w	r3, r3, #7
 8009daa:	b2da      	uxtb	r2, r3
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009db4:	0d5b      	lsrs	r3, r3, #21
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	f003 0307 	and.w	r3, r3, #7
 8009dbc:	b2da      	uxtb	r2, r3
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dc6:	0c9b      	lsrs	r3, r3, #18
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	f003 0307 	and.w	r3, r3, #7
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dd8:	0bdb      	lsrs	r3, r3, #15
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	f003 0307 	and.w	r3, r3, #7
 8009de0:	b2da      	uxtb	r2, r3
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	1c5a      	adds	r2, r3, #1
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	7e1b      	ldrb	r3, [r3, #24]
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	f003 0307 	and.w	r3, r3, #7
 8009dfa:	3302      	adds	r3, #2
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009e06:	fb03 f202 	mul.w	r2, r3, r2
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	7a1b      	ldrb	r3, [r3, #8]
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	f003 030f 	and.w	r3, r3, #15
 8009e18:	2201      	movs	r2, #1
 8009e1a:	409a      	lsls	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8009e28:	0a52      	lsrs	r2, r2, #9
 8009e2a:	fb03 f202 	mul.w	r2, r3, r2
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e38:	661a      	str	r2, [r3, #96]	@ 0x60
 8009e3a:	e031      	b.n	8009ea0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d11d      	bne.n	8009e80 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e48:	041b      	lsls	r3, r3, #16
 8009e4a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e52:	0c1b      	lsrs	r3, r3, #16
 8009e54:	431a      	orrs	r2, r3
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	691b      	ldr	r3, [r3, #16]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	029a      	lsls	r2, r3, #10
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e74:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	661a      	str	r2, [r3, #96]	@ 0x60
 8009e7e:	e00f      	b.n	8009ea0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a58      	ldr	r2, [pc, #352]	@ (8009fe8 <HAL_SD_GetCardCSD+0x344>)
 8009e86:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e8c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e09d      	b.n	8009fdc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ea4:	0b9b      	lsrs	r3, r3, #14
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	f003 0301 	and.w	r3, r3, #1
 8009eac:	b2da      	uxtb	r2, r3
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009eb6:	09db      	lsrs	r3, r3, #7
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ece:	b2da      	uxtb	r2, r3
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ed8:	0fdb      	lsrs	r3, r3, #31
 8009eda:	b2da      	uxtb	r2, r3
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ee4:	0f5b      	lsrs	r3, r3, #29
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	f003 0303 	and.w	r3, r3, #3
 8009eec:	b2da      	uxtb	r2, r3
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ef6:	0e9b      	lsrs	r3, r3, #26
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	f003 0307 	and.w	r3, r3, #7
 8009efe:	b2da      	uxtb	r2, r3
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f08:	0d9b      	lsrs	r3, r3, #22
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	f003 030f 	and.w	r3, r3, #15
 8009f10:	b2da      	uxtb	r2, r3
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f1a:	0d5b      	lsrs	r3, r3, #21
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	f003 0301 	and.w	r3, r3, #1
 8009f22:	b2da      	uxtb	r2, r3
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f36:	0c1b      	lsrs	r3, r3, #16
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	f003 0301 	and.w	r3, r3, #1
 8009f3e:	b2da      	uxtb	r2, r3
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f4a:	0bdb      	lsrs	r3, r3, #15
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	f003 0301 	and.w	r3, r3, #1
 8009f52:	b2da      	uxtb	r2, r3
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f5e:	0b9b      	lsrs	r3, r3, #14
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	f003 0301 	and.w	r3, r3, #1
 8009f66:	b2da      	uxtb	r2, r3
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f72:	0b5b      	lsrs	r3, r3, #13
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	f003 0301 	and.w	r3, r3, #1
 8009f7a:	b2da      	uxtb	r2, r3
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f86:	0b1b      	lsrs	r3, r3, #12
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	f003 0301 	and.w	r3, r3, #1
 8009f8e:	b2da      	uxtb	r2, r3
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f9a:	0a9b      	lsrs	r3, r3, #10
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	f003 0303 	and.w	r3, r3, #3
 8009fa2:	b2da      	uxtb	r2, r3
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fae:	0a1b      	lsrs	r3, r3, #8
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	f003 0303 	and.w	r3, r3, #3
 8009fb6:	b2da      	uxtb	r2, r3
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fc2:	085b      	lsrs	r3, r3, #1
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fca:	b2da      	uxtb	r2, r3
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bc80      	pop	{r7}
 8009fe4:	4770      	bx	lr
 8009fe6:	bf00      	nop
 8009fe8:	004005ff 	.word	0x004005ff

08009fec <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bc80      	pop	{r7}
 800a040:	4770      	bx	lr

0800a042 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b086      	sub	sp, #24
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a04a:	2300      	movs	r3, #0
 800a04c:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a04e:	f107 030c 	add.w	r3, r7, #12
 800a052:	4619      	mov	r1, r3
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 f971 	bl	800a33c <SD_SendStatus>
 800a05a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d005      	beq.n	800a06e <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	431a      	orrs	r2, r3
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	0a5b      	lsrs	r3, r3, #9
 800a072:	f003 030f 	and.w	r3, r3, #15
 800a076:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a078:	693b      	ldr	r3, [r7, #16]
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3718      	adds	r7, #24
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a082:	b5b0      	push	{r4, r5, r7, lr}
 800a084:	b094      	sub	sp, #80	@ 0x50
 800a086:	af04      	add	r7, sp, #16
 800a088:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a08a:	2301      	movs	r3, #1
 800a08c:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4618      	mov	r0, r3
 800a094:	f002 f957 	bl	800c346 <SDIO_GetPowerState>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d102      	bne.n	800a0a4 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a09e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a0a2:	e0b8      	b.n	800a216 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0a8:	2b03      	cmp	r3, #3
 800a0aa:	d02f      	beq.n	800a10c <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f002 fb38 	bl	800c726 <SDMMC_CmdSendCID>
 800a0b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d001      	beq.n	800a0c2 <SD_InitCard+0x40>
    {
      return errorstate;
 800a0be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0c0:	e0a9      	b.n	800a216 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2100      	movs	r1, #0
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f002 f97e 	bl	800c3ca <SDIO_GetResponse>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2104      	movs	r1, #4
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f002 f975 	bl	800c3ca <SDIO_GetResponse>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2108      	movs	r1, #8
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f002 f96c 	bl	800c3ca <SDIO_GetResponse>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	210c      	movs	r1, #12
 800a0fe:	4618      	mov	r0, r3
 800a100:	f002 f963 	bl	800c3ca <SDIO_GetResponse>
 800a104:	4602      	mov	r2, r0
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a110:	2b03      	cmp	r3, #3
 800a112:	d00d      	beq.n	800a130 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f107 020e 	add.w	r2, r7, #14
 800a11c:	4611      	mov	r1, r2
 800a11e:	4618      	mov	r0, r3
 800a120:	f002 fb3e 	bl	800c7a0 <SDMMC_CmdSetRelAdd>
 800a124:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d001      	beq.n	800a130 <SD_InitCard+0xae>
    {
      return errorstate;
 800a12c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a12e:	e072      	b.n	800a216 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a134:	2b03      	cmp	r3, #3
 800a136:	d036      	beq.n	800a1a6 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a138:	89fb      	ldrh	r3, [r7, #14]
 800a13a:	461a      	mov	r2, r3
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a148:	041b      	lsls	r3, r3, #16
 800a14a:	4619      	mov	r1, r3
 800a14c:	4610      	mov	r0, r2
 800a14e:	f002 fb08 	bl	800c762 <SDMMC_CmdSendCSD>
 800a152:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a154:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a156:	2b00      	cmp	r3, #0
 800a158:	d001      	beq.n	800a15e <SD_InitCard+0xdc>
    {
      return errorstate;
 800a15a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a15c:	e05b      	b.n	800a216 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2100      	movs	r1, #0
 800a164:	4618      	mov	r0, r3
 800a166:	f002 f930 	bl	800c3ca <SDIO_GetResponse>
 800a16a:	4602      	mov	r2, r0
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2104      	movs	r1, #4
 800a176:	4618      	mov	r0, r3
 800a178:	f002 f927 	bl	800c3ca <SDIO_GetResponse>
 800a17c:	4602      	mov	r2, r0
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2108      	movs	r1, #8
 800a188:	4618      	mov	r0, r3
 800a18a:	f002 f91e 	bl	800c3ca <SDIO_GetResponse>
 800a18e:	4602      	mov	r2, r0
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	210c      	movs	r1, #12
 800a19a:	4618      	mov	r0, r3
 800a19c:	f002 f915 	bl	800c3ca <SDIO_GetResponse>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2104      	movs	r1, #4
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f002 f90c 	bl	800c3ca <SDIO_GetResponse>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	0d1a      	lsrs	r2, r3, #20
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a1ba:	f107 0310 	add.w	r3, r7, #16
 800a1be:	4619      	mov	r1, r3
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f7ff fd6f 	bl	8009ca4 <HAL_SD_GetCardCSD>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d002      	beq.n	800a1d2 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a1cc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a1d0:	e021      	b.n	800a216 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6819      	ldr	r1, [r3, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1da:	041b      	lsls	r3, r3, #16
 800a1dc:	2200      	movs	r2, #0
 800a1de:	461c      	mov	r4, r3
 800a1e0:	4615      	mov	r5, r2
 800a1e2:	4622      	mov	r2, r4
 800a1e4:	462b      	mov	r3, r5
 800a1e6:	4608      	mov	r0, r1
 800a1e8:	f002 f9f8 	bl	800c5dc <SDMMC_CmdSelDesel>
 800a1ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d001      	beq.n	800a1f8 <SD_InitCard+0x176>
  {
    return errorstate;
 800a1f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1f6:	e00e      	b.n	800a216 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681d      	ldr	r5, [r3, #0]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	466c      	mov	r4, sp
 800a200:	f103 0210 	add.w	r2, r3, #16
 800a204:	ca07      	ldmia	r2, {r0, r1, r2}
 800a206:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a20a:	3304      	adds	r3, #4
 800a20c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a20e:	4628      	mov	r0, r5
 800a210:	f002 f846 	bl	800c2a0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3740      	adds	r7, #64	@ 0x40
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a220 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b086      	sub	sp, #24
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a228:	2300      	movs	r3, #0
 800a22a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a22c:	2300      	movs	r3, #0
 800a22e:	617b      	str	r3, [r7, #20]
 800a230:	2300      	movs	r3, #0
 800a232:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4618      	mov	r0, r3
 800a23a:	f002 f9f2 	bl	800c622 <SDMMC_CmdGoIdleState>
 800a23e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d001      	beq.n	800a24a <SD_PowerON+0x2a>
  {
    return errorstate;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	e072      	b.n	800a330 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4618      	mov	r0, r3
 800a250:	f002 fa05 	bl	800c65e <SDMMC_CmdOperCond>
 800a254:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00d      	beq.n	800a278 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4618      	mov	r0, r3
 800a268:	f002 f9db 	bl	800c622 <SDMMC_CmdGoIdleState>
 800a26c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d004      	beq.n	800a27e <SD_PowerON+0x5e>
    {
      return errorstate;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	e05b      	b.n	800a330 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2201      	movs	r2, #1
 800a27c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a282:	2b01      	cmp	r3, #1
 800a284:	d137      	bne.n	800a2f6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2100      	movs	r1, #0
 800a28c:	4618      	mov	r0, r3
 800a28e:	f002 fa05 	bl	800c69c <SDMMC_CmdAppCommand>
 800a292:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d02d      	beq.n	800a2f6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a29a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a29e:	e047      	b.n	800a330 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2100      	movs	r1, #0
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f002 f9f8 	bl	800c69c <SDMMC_CmdAppCommand>
 800a2ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d001      	beq.n	800a2b8 <SD_PowerON+0x98>
    {
      return errorstate;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	e03b      	b.n	800a330 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	491e      	ldr	r1, [pc, #120]	@ (800a338 <SD_PowerON+0x118>)
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f002 fa0e 	bl	800c6e0 <SDMMC_CmdAppOperCommand>
 800a2c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d002      	beq.n	800a2d2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a2cc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a2d0:	e02e      	b.n	800a330 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2100      	movs	r1, #0
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f002 f876 	bl	800c3ca <SDIO_GetResponse>
 800a2de:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	0fdb      	lsrs	r3, r3, #31
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d101      	bne.n	800a2ec <SD_PowerON+0xcc>
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e000      	b.n	800a2ee <SD_PowerON+0xce>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	613b      	str	r3, [r7, #16]

    count++;
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d802      	bhi.n	800a306 <SD_PowerON+0xe6>
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d0cc      	beq.n	800a2a0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d902      	bls.n	800a316 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a310:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a314:	e00c      	b.n	800a330 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d003      	beq.n	800a328 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2201      	movs	r2, #1
 800a324:	645a      	str	r2, [r3, #68]	@ 0x44
 800a326:	e002      	b.n	800a32e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	3718      	adds	r7, #24
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	c1100000 	.word	0xc1100000

0800a33c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d102      	bne.n	800a352 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a34c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a350:	e018      	b.n	800a384 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a35a:	041b      	lsls	r3, r3, #16
 800a35c:	4619      	mov	r1, r3
 800a35e:	4610      	mov	r0, r2
 800a360:	f002 fa3f 	bl	800c7e2 <SDMMC_CmdSendStatus>
 800a364:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d001      	beq.n	800a370 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	e009      	b.n	800a384 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	2100      	movs	r1, #0
 800a376:	4618      	mov	r0, r3
 800a378:	f002 f827 	bl	800c3ca <SDIO_GetResponse>
 800a37c:	4602      	mov	r2, r0
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a382:	2300      	movs	r3, #0
}
 800a384:	4618      	mov	r0, r3
 800a386:	3710      	adds	r7, #16
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d101      	bne.n	800a39e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a39a:	2301      	movs	r3, #1
 800a39c:	e041      	b.n	800a422 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d106      	bne.n	800a3b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f7fa fc42 	bl	8004c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2202      	movs	r2, #2
 800a3bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	3304      	adds	r3, #4
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	4610      	mov	r0, r2
 800a3cc:	f000 fc56 	bl	800ac7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2201      	movs	r2, #1
 800a404:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2201      	movs	r2, #1
 800a414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2201      	movs	r2, #1
 800a41c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3708      	adds	r7, #8
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
	...

0800a42c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d001      	beq.n	800a444 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a440:	2301      	movs	r3, #1
 800a442:	e044      	b.n	800a4ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2202      	movs	r2, #2
 800a448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	68da      	ldr	r2, [r3, #12]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f042 0201 	orr.w	r2, r2, #1
 800a45a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a1d      	ldr	r2, [pc, #116]	@ (800a4d8 <HAL_TIM_Base_Start_IT+0xac>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d018      	beq.n	800a498 <HAL_TIM_Base_Start_IT+0x6c>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a1c      	ldr	r2, [pc, #112]	@ (800a4dc <HAL_TIM_Base_Start_IT+0xb0>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d013      	beq.n	800a498 <HAL_TIM_Base_Start_IT+0x6c>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a478:	d00e      	beq.n	800a498 <HAL_TIM_Base_Start_IT+0x6c>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a18      	ldr	r2, [pc, #96]	@ (800a4e0 <HAL_TIM_Base_Start_IT+0xb4>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d009      	beq.n	800a498 <HAL_TIM_Base_Start_IT+0x6c>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a16      	ldr	r2, [pc, #88]	@ (800a4e4 <HAL_TIM_Base_Start_IT+0xb8>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d004      	beq.n	800a498 <HAL_TIM_Base_Start_IT+0x6c>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a15      	ldr	r2, [pc, #84]	@ (800a4e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d111      	bne.n	800a4bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	f003 0307 	and.w	r3, r3, #7
 800a4a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2b06      	cmp	r3, #6
 800a4a8:	d010      	beq.n	800a4cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f042 0201 	orr.w	r2, r2, #1
 800a4b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4ba:	e007      	b.n	800a4cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f042 0201 	orr.w	r2, r2, #1
 800a4ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3714      	adds	r7, #20
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bc80      	pop	{r7}
 800a4d6:	4770      	bx	lr
 800a4d8:	40012c00 	.word	0x40012c00
 800a4dc:	40013400 	.word	0x40013400
 800a4e0:	40000400 	.word	0x40000400
 800a4e4:	40000800 	.word	0x40000800
 800a4e8:	40000c00 	.word	0x40000c00

0800a4ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d101      	bne.n	800a4fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e041      	b.n	800a582 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a504:	b2db      	uxtb	r3, r3
 800a506:	2b00      	cmp	r3, #0
 800a508:	d106      	bne.n	800a518 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 f839 	bl	800a58a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2202      	movs	r2, #2
 800a51c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	3304      	adds	r3, #4
 800a528:	4619      	mov	r1, r3
 800a52a:	4610      	mov	r0, r2
 800a52c:	f000 fba6 	bl	800ac7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2201      	movs	r2, #1
 800a534:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2201      	movs	r2, #1
 800a55c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a580:	2300      	movs	r3, #0
}
 800a582:	4618      	mov	r0, r3
 800a584:	3708      	adds	r7, #8
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a58a:	b480      	push	{r7}
 800a58c:	b083      	sub	sp, #12
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a592:	bf00      	nop
 800a594:	370c      	adds	r7, #12
 800a596:	46bd      	mov	sp, r7
 800a598:	bc80      	pop	{r7}
 800a59a:	4770      	bx	lr

0800a59c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d109      	bne.n	800a5c0 <HAL_TIM_PWM_Start+0x24>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	bf14      	ite	ne
 800a5b8:	2301      	movne	r3, #1
 800a5ba:	2300      	moveq	r3, #0
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	e022      	b.n	800a606 <HAL_TIM_PWM_Start+0x6a>
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	2b04      	cmp	r3, #4
 800a5c4:	d109      	bne.n	800a5da <HAL_TIM_PWM_Start+0x3e>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	bf14      	ite	ne
 800a5d2:	2301      	movne	r3, #1
 800a5d4:	2300      	moveq	r3, #0
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	e015      	b.n	800a606 <HAL_TIM_PWM_Start+0x6a>
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	2b08      	cmp	r3, #8
 800a5de:	d109      	bne.n	800a5f4 <HAL_TIM_PWM_Start+0x58>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	bf14      	ite	ne
 800a5ec:	2301      	movne	r3, #1
 800a5ee:	2300      	moveq	r3, #0
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	e008      	b.n	800a606 <HAL_TIM_PWM_Start+0x6a>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	bf14      	ite	ne
 800a600:	2301      	movne	r3, #1
 800a602:	2300      	moveq	r3, #0
 800a604:	b2db      	uxtb	r3, r3
 800a606:	2b00      	cmp	r3, #0
 800a608:	d001      	beq.n	800a60e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a60a:	2301      	movs	r3, #1
 800a60c:	e072      	b.n	800a6f4 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d104      	bne.n	800a61e <HAL_TIM_PWM_Start+0x82>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2202      	movs	r2, #2
 800a618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a61c:	e013      	b.n	800a646 <HAL_TIM_PWM_Start+0xaa>
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	2b04      	cmp	r3, #4
 800a622:	d104      	bne.n	800a62e <HAL_TIM_PWM_Start+0x92>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2202      	movs	r2, #2
 800a628:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a62c:	e00b      	b.n	800a646 <HAL_TIM_PWM_Start+0xaa>
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	2b08      	cmp	r3, #8
 800a632:	d104      	bne.n	800a63e <HAL_TIM_PWM_Start+0xa2>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2202      	movs	r2, #2
 800a638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a63c:	e003      	b.n	800a646 <HAL_TIM_PWM_Start+0xaa>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2202      	movs	r2, #2
 800a642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2201      	movs	r2, #1
 800a64c:	6839      	ldr	r1, [r7, #0]
 800a64e:	4618      	mov	r0, r3
 800a650:	f000 fdd0 	bl	800b1f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a28      	ldr	r2, [pc, #160]	@ (800a6fc <HAL_TIM_PWM_Start+0x160>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d004      	beq.n	800a668 <HAL_TIM_PWM_Start+0xcc>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a27      	ldr	r2, [pc, #156]	@ (800a700 <HAL_TIM_PWM_Start+0x164>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d101      	bne.n	800a66c <HAL_TIM_PWM_Start+0xd0>
 800a668:	2301      	movs	r3, #1
 800a66a:	e000      	b.n	800a66e <HAL_TIM_PWM_Start+0xd2>
 800a66c:	2300      	movs	r3, #0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d007      	beq.n	800a682 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a680:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a1d      	ldr	r2, [pc, #116]	@ (800a6fc <HAL_TIM_PWM_Start+0x160>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d018      	beq.n	800a6be <HAL_TIM_PWM_Start+0x122>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a1b      	ldr	r2, [pc, #108]	@ (800a700 <HAL_TIM_PWM_Start+0x164>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d013      	beq.n	800a6be <HAL_TIM_PWM_Start+0x122>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a69e:	d00e      	beq.n	800a6be <HAL_TIM_PWM_Start+0x122>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a17      	ldr	r2, [pc, #92]	@ (800a704 <HAL_TIM_PWM_Start+0x168>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d009      	beq.n	800a6be <HAL_TIM_PWM_Start+0x122>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a16      	ldr	r2, [pc, #88]	@ (800a708 <HAL_TIM_PWM_Start+0x16c>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d004      	beq.n	800a6be <HAL_TIM_PWM_Start+0x122>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a14      	ldr	r2, [pc, #80]	@ (800a70c <HAL_TIM_PWM_Start+0x170>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d111      	bne.n	800a6e2 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	f003 0307 	and.w	r3, r3, #7
 800a6c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2b06      	cmp	r3, #6
 800a6ce:	d010      	beq.n	800a6f2 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f042 0201 	orr.w	r2, r2, #1
 800a6de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6e0:	e007      	b.n	800a6f2 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f042 0201 	orr.w	r2, r2, #1
 800a6f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a6f2:	2300      	movs	r3, #0
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3710      	adds	r7, #16
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	40012c00 	.word	0x40012c00
 800a700:	40013400 	.word	0x40013400
 800a704:	40000400 	.word	0x40000400
 800a708:	40000800 	.word	0x40000800
 800a70c:	40000c00 	.word	0x40000c00

0800a710 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	691b      	ldr	r3, [r3, #16]
 800a71e:	f003 0302 	and.w	r3, r3, #2
 800a722:	2b02      	cmp	r3, #2
 800a724:	d122      	bne.n	800a76c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	f003 0302 	and.w	r3, r3, #2
 800a730:	2b02      	cmp	r3, #2
 800a732:	d11b      	bne.n	800a76c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f06f 0202 	mvn.w	r2, #2
 800a73c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2201      	movs	r2, #1
 800a742:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	699b      	ldr	r3, [r3, #24]
 800a74a:	f003 0303 	and.w	r3, r3, #3
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d003      	beq.n	800a75a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 fa76 	bl	800ac44 <HAL_TIM_IC_CaptureCallback>
 800a758:	e005      	b.n	800a766 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 fa69 	bl	800ac32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 fa78 	bl	800ac56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2200      	movs	r2, #0
 800a76a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	691b      	ldr	r3, [r3, #16]
 800a772:	f003 0304 	and.w	r3, r3, #4
 800a776:	2b04      	cmp	r3, #4
 800a778:	d122      	bne.n	800a7c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	68db      	ldr	r3, [r3, #12]
 800a780:	f003 0304 	and.w	r3, r3, #4
 800a784:	2b04      	cmp	r3, #4
 800a786:	d11b      	bne.n	800a7c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f06f 0204 	mvn.w	r2, #4
 800a790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2202      	movs	r2, #2
 800a796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	699b      	ldr	r3, [r3, #24]
 800a79e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d003      	beq.n	800a7ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 fa4c 	bl	800ac44 <HAL_TIM_IC_CaptureCallback>
 800a7ac:	e005      	b.n	800a7ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 fa3f 	bl	800ac32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 fa4e 	bl	800ac56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	f003 0308 	and.w	r3, r3, #8
 800a7ca:	2b08      	cmp	r3, #8
 800a7cc:	d122      	bne.n	800a814 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	f003 0308 	and.w	r3, r3, #8
 800a7d8:	2b08      	cmp	r3, #8
 800a7da:	d11b      	bne.n	800a814 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f06f 0208 	mvn.w	r2, #8
 800a7e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2204      	movs	r2, #4
 800a7ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	69db      	ldr	r3, [r3, #28]
 800a7f2:	f003 0303 	and.w	r3, r3, #3
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d003      	beq.n	800a802 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 fa22 	bl	800ac44 <HAL_TIM_IC_CaptureCallback>
 800a800:	e005      	b.n	800a80e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 fa15 	bl	800ac32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 fa24 	bl	800ac56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	f003 0310 	and.w	r3, r3, #16
 800a81e:	2b10      	cmp	r3, #16
 800a820:	d122      	bne.n	800a868 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	f003 0310 	and.w	r3, r3, #16
 800a82c:	2b10      	cmp	r3, #16
 800a82e:	d11b      	bne.n	800a868 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f06f 0210 	mvn.w	r2, #16
 800a838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2208      	movs	r2, #8
 800a83e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	69db      	ldr	r3, [r3, #28]
 800a846:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d003      	beq.n	800a856 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 f9f8 	bl	800ac44 <HAL_TIM_IC_CaptureCallback>
 800a854:	e005      	b.n	800a862 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 f9eb 	bl	800ac32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 f9fa 	bl	800ac56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	f003 0301 	and.w	r3, r3, #1
 800a872:	2b01      	cmp	r3, #1
 800a874:	d10e      	bne.n	800a894 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	f003 0301 	and.w	r3, r3, #1
 800a880:	2b01      	cmp	r3, #1
 800a882:	d107      	bne.n	800a894 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f06f 0201 	mvn.w	r2, #1
 800a88c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f7f9 ff20 	bl	80046d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	691b      	ldr	r3, [r3, #16]
 800a89a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a89e:	2b80      	cmp	r3, #128	@ 0x80
 800a8a0:	d10e      	bne.n	800a8c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8ac:	2b80      	cmp	r3, #128	@ 0x80
 800a8ae:	d107      	bne.n	800a8c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a8b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 fd33 	bl	800b326 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	691b      	ldr	r3, [r3, #16]
 800a8c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8ca:	2b40      	cmp	r3, #64	@ 0x40
 800a8cc:	d10e      	bne.n	800a8ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8d8:	2b40      	cmp	r3, #64	@ 0x40
 800a8da:	d107      	bne.n	800a8ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a8e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 f9be 	bl	800ac68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	691b      	ldr	r3, [r3, #16]
 800a8f2:	f003 0320 	and.w	r3, r3, #32
 800a8f6:	2b20      	cmp	r3, #32
 800a8f8:	d10e      	bne.n	800a918 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	f003 0320 	and.w	r3, r3, #32
 800a904:	2b20      	cmp	r3, #32
 800a906:	d107      	bne.n	800a918 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f06f 0220 	mvn.w	r2, #32
 800a910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 fcfe 	bl	800b314 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a918:	bf00      	nop
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b086      	sub	sp, #24
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a92c:	2300      	movs	r3, #0
 800a92e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a936:	2b01      	cmp	r3, #1
 800a938:	d101      	bne.n	800a93e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a93a:	2302      	movs	r3, #2
 800a93c:	e0ae      	b.n	800aa9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2201      	movs	r2, #1
 800a942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2b0c      	cmp	r3, #12
 800a94a:	f200 809f 	bhi.w	800aa8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a94e:	a201      	add	r2, pc, #4	@ (adr r2, 800a954 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a954:	0800a989 	.word	0x0800a989
 800a958:	0800aa8d 	.word	0x0800aa8d
 800a95c:	0800aa8d 	.word	0x0800aa8d
 800a960:	0800aa8d 	.word	0x0800aa8d
 800a964:	0800a9c9 	.word	0x0800a9c9
 800a968:	0800aa8d 	.word	0x0800aa8d
 800a96c:	0800aa8d 	.word	0x0800aa8d
 800a970:	0800aa8d 	.word	0x0800aa8d
 800a974:	0800aa0b 	.word	0x0800aa0b
 800a978:	0800aa8d 	.word	0x0800aa8d
 800a97c:	0800aa8d 	.word	0x0800aa8d
 800a980:	0800aa8d 	.word	0x0800aa8d
 800a984:	0800aa4b 	.word	0x0800aa4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	68b9      	ldr	r1, [r7, #8]
 800a98e:	4618      	mov	r0, r3
 800a990:	f000 f9ee 	bl	800ad70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	699a      	ldr	r2, [r3, #24]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f042 0208 	orr.w	r2, r2, #8
 800a9a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	699a      	ldr	r2, [r3, #24]
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f022 0204 	bic.w	r2, r2, #4
 800a9b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	6999      	ldr	r1, [r3, #24]
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	691a      	ldr	r2, [r3, #16]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	430a      	orrs	r2, r1
 800a9c4:	619a      	str	r2, [r3, #24]
      break;
 800a9c6:	e064      	b.n	800aa92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	68b9      	ldr	r1, [r7, #8]
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f000 fa3e 	bl	800ae50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	699a      	ldr	r2, [r3, #24]
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a9e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	699a      	ldr	r2, [r3, #24]
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a9f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	6999      	ldr	r1, [r3, #24]
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	691b      	ldr	r3, [r3, #16]
 800a9fe:	021a      	lsls	r2, r3, #8
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	430a      	orrs	r2, r1
 800aa06:	619a      	str	r2, [r3, #24]
      break;
 800aa08:	e043      	b.n	800aa92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	68b9      	ldr	r1, [r7, #8]
 800aa10:	4618      	mov	r0, r3
 800aa12:	f000 fa91 	bl	800af38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	69da      	ldr	r2, [r3, #28]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f042 0208 	orr.w	r2, r2, #8
 800aa24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	69da      	ldr	r2, [r3, #28]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f022 0204 	bic.w	r2, r2, #4
 800aa34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	69d9      	ldr	r1, [r3, #28]
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	691a      	ldr	r2, [r3, #16]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	430a      	orrs	r2, r1
 800aa46:	61da      	str	r2, [r3, #28]
      break;
 800aa48:	e023      	b.n	800aa92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	68b9      	ldr	r1, [r7, #8]
 800aa50:	4618      	mov	r0, r3
 800aa52:	f000 fae5 	bl	800b020 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	69da      	ldr	r2, [r3, #28]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aa64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	69da      	ldr	r2, [r3, #28]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	69d9      	ldr	r1, [r3, #28]
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	691b      	ldr	r3, [r3, #16]
 800aa80:	021a      	lsls	r2, r3, #8
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	430a      	orrs	r2, r1
 800aa88:	61da      	str	r2, [r3, #28]
      break;
 800aa8a:	e002      	b.n	800aa92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	75fb      	strb	r3, [r7, #23]
      break;
 800aa90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aa9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3718      	adds	r7, #24
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aaae:	2300      	movs	r3, #0
 800aab0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d101      	bne.n	800aac0 <HAL_TIM_ConfigClockSource+0x1c>
 800aabc:	2302      	movs	r3, #2
 800aabe:	e0b4      	b.n	800ac2a <HAL_TIM_ConfigClockSource+0x186>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2202      	movs	r2, #2
 800aacc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800aade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aae6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	68ba      	ldr	r2, [r7, #8]
 800aaee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aaf8:	d03e      	beq.n	800ab78 <HAL_TIM_ConfigClockSource+0xd4>
 800aafa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aafe:	f200 8087 	bhi.w	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
 800ab02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab06:	f000 8086 	beq.w	800ac16 <HAL_TIM_ConfigClockSource+0x172>
 800ab0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab0e:	d87f      	bhi.n	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
 800ab10:	2b70      	cmp	r3, #112	@ 0x70
 800ab12:	d01a      	beq.n	800ab4a <HAL_TIM_ConfigClockSource+0xa6>
 800ab14:	2b70      	cmp	r3, #112	@ 0x70
 800ab16:	d87b      	bhi.n	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
 800ab18:	2b60      	cmp	r3, #96	@ 0x60
 800ab1a:	d050      	beq.n	800abbe <HAL_TIM_ConfigClockSource+0x11a>
 800ab1c:	2b60      	cmp	r3, #96	@ 0x60
 800ab1e:	d877      	bhi.n	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
 800ab20:	2b50      	cmp	r3, #80	@ 0x50
 800ab22:	d03c      	beq.n	800ab9e <HAL_TIM_ConfigClockSource+0xfa>
 800ab24:	2b50      	cmp	r3, #80	@ 0x50
 800ab26:	d873      	bhi.n	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
 800ab28:	2b40      	cmp	r3, #64	@ 0x40
 800ab2a:	d058      	beq.n	800abde <HAL_TIM_ConfigClockSource+0x13a>
 800ab2c:	2b40      	cmp	r3, #64	@ 0x40
 800ab2e:	d86f      	bhi.n	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
 800ab30:	2b30      	cmp	r3, #48	@ 0x30
 800ab32:	d064      	beq.n	800abfe <HAL_TIM_ConfigClockSource+0x15a>
 800ab34:	2b30      	cmp	r3, #48	@ 0x30
 800ab36:	d86b      	bhi.n	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
 800ab38:	2b20      	cmp	r3, #32
 800ab3a:	d060      	beq.n	800abfe <HAL_TIM_ConfigClockSource+0x15a>
 800ab3c:	2b20      	cmp	r3, #32
 800ab3e:	d867      	bhi.n	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d05c      	beq.n	800abfe <HAL_TIM_ConfigClockSource+0x15a>
 800ab44:	2b10      	cmp	r3, #16
 800ab46:	d05a      	beq.n	800abfe <HAL_TIM_ConfigClockSource+0x15a>
 800ab48:	e062      	b.n	800ac10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ab5a:	f000 fb2c 	bl	800b1b6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ab6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	68ba      	ldr	r2, [r7, #8]
 800ab74:	609a      	str	r2, [r3, #8]
      break;
 800ab76:	e04f      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ab88:	f000 fb15 	bl	800b1b6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	689a      	ldr	r2, [r3, #8]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ab9a:	609a      	str	r2, [r3, #8]
      break;
 800ab9c:	e03c      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800abaa:	461a      	mov	r2, r3
 800abac:	f000 fa8c 	bl	800b0c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2150      	movs	r1, #80	@ 0x50
 800abb6:	4618      	mov	r0, r3
 800abb8:	f000 fae3 	bl	800b182 <TIM_ITRx_SetConfig>
      break;
 800abbc:	e02c      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800abca:	461a      	mov	r2, r3
 800abcc:	f000 faaa 	bl	800b124 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2160      	movs	r1, #96	@ 0x60
 800abd6:	4618      	mov	r0, r3
 800abd8:	f000 fad3 	bl	800b182 <TIM_ITRx_SetConfig>
      break;
 800abdc:	e01c      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800abea:	461a      	mov	r2, r3
 800abec:	f000 fa6c 	bl	800b0c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2140      	movs	r1, #64	@ 0x40
 800abf6:	4618      	mov	r0, r3
 800abf8:	f000 fac3 	bl	800b182 <TIM_ITRx_SetConfig>
      break;
 800abfc:	e00c      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4619      	mov	r1, r3
 800ac08:	4610      	mov	r0, r2
 800ac0a:	f000 faba 	bl	800b182 <TIM_ITRx_SetConfig>
      break;
 800ac0e:	e003      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	73fb      	strb	r3, [r7, #15]
      break;
 800ac14:	e000      	b.n	800ac18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ac16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ac28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}

0800ac32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac32:	b480      	push	{r7}
 800ac34:	b083      	sub	sp, #12
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac3a:	bf00      	nop
 800ac3c:	370c      	adds	r7, #12
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bc80      	pop	{r7}
 800ac42:	4770      	bx	lr

0800ac44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac4c:	bf00      	nop
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bc80      	pop	{r7}
 800ac54:	4770      	bx	lr

0800ac56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac56:	b480      	push	{r7}
 800ac58:	b083      	sub	sp, #12
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac5e:	bf00      	nop
 800ac60:	370c      	adds	r7, #12
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bc80      	pop	{r7}
 800ac66:	4770      	bx	lr

0800ac68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac70:	bf00      	nop
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bc80      	pop	{r7}
 800ac78:	4770      	bx	lr
	...

0800ac7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b085      	sub	sp, #20
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	4a33      	ldr	r2, [pc, #204]	@ (800ad5c <TIM_Base_SetConfig+0xe0>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d013      	beq.n	800acbc <TIM_Base_SetConfig+0x40>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	4a32      	ldr	r2, [pc, #200]	@ (800ad60 <TIM_Base_SetConfig+0xe4>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d00f      	beq.n	800acbc <TIM_Base_SetConfig+0x40>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aca2:	d00b      	beq.n	800acbc <TIM_Base_SetConfig+0x40>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	4a2f      	ldr	r2, [pc, #188]	@ (800ad64 <TIM_Base_SetConfig+0xe8>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d007      	beq.n	800acbc <TIM_Base_SetConfig+0x40>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4a2e      	ldr	r2, [pc, #184]	@ (800ad68 <TIM_Base_SetConfig+0xec>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d003      	beq.n	800acbc <TIM_Base_SetConfig+0x40>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	4a2d      	ldr	r2, [pc, #180]	@ (800ad6c <TIM_Base_SetConfig+0xf0>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d108      	bne.n	800acce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	4313      	orrs	r3, r2
 800accc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4a22      	ldr	r2, [pc, #136]	@ (800ad5c <TIM_Base_SetConfig+0xe0>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d013      	beq.n	800acfe <TIM_Base_SetConfig+0x82>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	4a21      	ldr	r2, [pc, #132]	@ (800ad60 <TIM_Base_SetConfig+0xe4>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d00f      	beq.n	800acfe <TIM_Base_SetConfig+0x82>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ace4:	d00b      	beq.n	800acfe <TIM_Base_SetConfig+0x82>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	4a1e      	ldr	r2, [pc, #120]	@ (800ad64 <TIM_Base_SetConfig+0xe8>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d007      	beq.n	800acfe <TIM_Base_SetConfig+0x82>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	4a1d      	ldr	r2, [pc, #116]	@ (800ad68 <TIM_Base_SetConfig+0xec>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d003      	beq.n	800acfe <TIM_Base_SetConfig+0x82>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	4a1c      	ldr	r2, [pc, #112]	@ (800ad6c <TIM_Base_SetConfig+0xf0>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d108      	bne.n	800ad10 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	695b      	ldr	r3, [r3, #20]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	689a      	ldr	r2, [r3, #8]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a09      	ldr	r2, [pc, #36]	@ (800ad5c <TIM_Base_SetConfig+0xe0>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d003      	beq.n	800ad44 <TIM_Base_SetConfig+0xc8>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4a08      	ldr	r2, [pc, #32]	@ (800ad60 <TIM_Base_SetConfig+0xe4>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d103      	bne.n	800ad4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	691a      	ldr	r2, [r3, #16]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	615a      	str	r2, [r3, #20]
}
 800ad52:	bf00      	nop
 800ad54:	3714      	adds	r7, #20
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bc80      	pop	{r7}
 800ad5a:	4770      	bx	lr
 800ad5c:	40012c00 	.word	0x40012c00
 800ad60:	40013400 	.word	0x40013400
 800ad64:	40000400 	.word	0x40000400
 800ad68:	40000800 	.word	0x40000800
 800ad6c:	40000c00 	.word	0x40000c00

0800ad70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b087      	sub	sp, #28
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6a1b      	ldr	r3, [r3, #32]
 800ad7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6a1b      	ldr	r3, [r3, #32]
 800ad84:	f023 0201 	bic.w	r2, r3, #1
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	699b      	ldr	r3, [r3, #24]
 800ad96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f023 0303 	bic.w	r3, r3, #3
 800ada6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	68fa      	ldr	r2, [r7, #12]
 800adae:	4313      	orrs	r3, r2
 800adb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	f023 0302 	bic.w	r3, r3, #2
 800adb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	697a      	ldr	r2, [r7, #20]
 800adc0:	4313      	orrs	r3, r2
 800adc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a20      	ldr	r2, [pc, #128]	@ (800ae48 <TIM_OC1_SetConfig+0xd8>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d003      	beq.n	800add4 <TIM_OC1_SetConfig+0x64>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	4a1f      	ldr	r2, [pc, #124]	@ (800ae4c <TIM_OC1_SetConfig+0xdc>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d10c      	bne.n	800adee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	f023 0308 	bic.w	r3, r3, #8
 800adda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	68db      	ldr	r3, [r3, #12]
 800ade0:	697a      	ldr	r2, [r7, #20]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	f023 0304 	bic.w	r3, r3, #4
 800adec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	4a15      	ldr	r2, [pc, #84]	@ (800ae48 <TIM_OC1_SetConfig+0xd8>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d003      	beq.n	800adfe <TIM_OC1_SetConfig+0x8e>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4a14      	ldr	r2, [pc, #80]	@ (800ae4c <TIM_OC1_SetConfig+0xdc>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d111      	bne.n	800ae22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ae0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	695b      	ldr	r3, [r3, #20]
 800ae12:	693a      	ldr	r2, [r7, #16]
 800ae14:	4313      	orrs	r3, r2
 800ae16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	699b      	ldr	r3, [r3, #24]
 800ae1c:	693a      	ldr	r2, [r7, #16]
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	693a      	ldr	r2, [r7, #16]
 800ae26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	685a      	ldr	r2, [r3, #4]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	697a      	ldr	r2, [r7, #20]
 800ae3a:	621a      	str	r2, [r3, #32]
}
 800ae3c:	bf00      	nop
 800ae3e:	371c      	adds	r7, #28
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bc80      	pop	{r7}
 800ae44:	4770      	bx	lr
 800ae46:	bf00      	nop
 800ae48:	40012c00 	.word	0x40012c00
 800ae4c:	40013400 	.word	0x40013400

0800ae50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b087      	sub	sp, #28
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6a1b      	ldr	r3, [r3, #32]
 800ae5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6a1b      	ldr	r3, [r3, #32]
 800ae64:	f023 0210 	bic.w	r2, r3, #16
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	699b      	ldr	r3, [r3, #24]
 800ae76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	021b      	lsls	r3, r3, #8
 800ae8e:	68fa      	ldr	r2, [r7, #12]
 800ae90:	4313      	orrs	r3, r2
 800ae92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	f023 0320 	bic.w	r3, r3, #32
 800ae9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	011b      	lsls	r3, r3, #4
 800aea2:	697a      	ldr	r2, [r7, #20]
 800aea4:	4313      	orrs	r3, r2
 800aea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	4a21      	ldr	r2, [pc, #132]	@ (800af30 <TIM_OC2_SetConfig+0xe0>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d003      	beq.n	800aeb8 <TIM_OC2_SetConfig+0x68>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4a20      	ldr	r2, [pc, #128]	@ (800af34 <TIM_OC2_SetConfig+0xe4>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d10d      	bne.n	800aed4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	011b      	lsls	r3, r3, #4
 800aec6:	697a      	ldr	r2, [r7, #20]
 800aec8:	4313      	orrs	r3, r2
 800aeca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aed2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a16      	ldr	r2, [pc, #88]	@ (800af30 <TIM_OC2_SetConfig+0xe0>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d003      	beq.n	800aee4 <TIM_OC2_SetConfig+0x94>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4a15      	ldr	r2, [pc, #84]	@ (800af34 <TIM_OC2_SetConfig+0xe4>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d113      	bne.n	800af0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aeea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aef2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	695b      	ldr	r3, [r3, #20]
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	693a      	ldr	r2, [r7, #16]
 800aefc:	4313      	orrs	r3, r2
 800aefe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	699b      	ldr	r3, [r3, #24]
 800af04:	009b      	lsls	r3, r3, #2
 800af06:	693a      	ldr	r2, [r7, #16]
 800af08:	4313      	orrs	r3, r2
 800af0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	693a      	ldr	r2, [r7, #16]
 800af10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	68fa      	ldr	r2, [r7, #12]
 800af16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	685a      	ldr	r2, [r3, #4]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	697a      	ldr	r2, [r7, #20]
 800af24:	621a      	str	r2, [r3, #32]
}
 800af26:	bf00      	nop
 800af28:	371c      	adds	r7, #28
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bc80      	pop	{r7}
 800af2e:	4770      	bx	lr
 800af30:	40012c00 	.word	0x40012c00
 800af34:	40013400 	.word	0x40013400

0800af38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af38:	b480      	push	{r7}
 800af3a:	b087      	sub	sp, #28
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6a1b      	ldr	r3, [r3, #32]
 800af46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6a1b      	ldr	r3, [r3, #32]
 800af4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	69db      	ldr	r3, [r3, #28]
 800af5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f023 0303 	bic.w	r3, r3, #3
 800af6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	68fa      	ldr	r2, [r7, #12]
 800af76:	4313      	orrs	r3, r2
 800af78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800af80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	689b      	ldr	r3, [r3, #8]
 800af86:	021b      	lsls	r3, r3, #8
 800af88:	697a      	ldr	r2, [r7, #20]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4a21      	ldr	r2, [pc, #132]	@ (800b018 <TIM_OC3_SetConfig+0xe0>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d003      	beq.n	800af9e <TIM_OC3_SetConfig+0x66>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	4a20      	ldr	r2, [pc, #128]	@ (800b01c <TIM_OC3_SetConfig+0xe4>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d10d      	bne.n	800afba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800afa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	021b      	lsls	r3, r3, #8
 800afac:	697a      	ldr	r2, [r7, #20]
 800afae:	4313      	orrs	r3, r2
 800afb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800afb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	4a16      	ldr	r2, [pc, #88]	@ (800b018 <TIM_OC3_SetConfig+0xe0>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d003      	beq.n	800afca <TIM_OC3_SetConfig+0x92>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	4a15      	ldr	r2, [pc, #84]	@ (800b01c <TIM_OC3_SetConfig+0xe4>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d113      	bne.n	800aff2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800afd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800afd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	695b      	ldr	r3, [r3, #20]
 800afde:	011b      	lsls	r3, r3, #4
 800afe0:	693a      	ldr	r2, [r7, #16]
 800afe2:	4313      	orrs	r3, r2
 800afe4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	699b      	ldr	r3, [r3, #24]
 800afea:	011b      	lsls	r3, r3, #4
 800afec:	693a      	ldr	r2, [r7, #16]
 800afee:	4313      	orrs	r3, r2
 800aff0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	693a      	ldr	r2, [r7, #16]
 800aff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	68fa      	ldr	r2, [r7, #12]
 800affc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	685a      	ldr	r2, [r3, #4]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	697a      	ldr	r2, [r7, #20]
 800b00a:	621a      	str	r2, [r3, #32]
}
 800b00c:	bf00      	nop
 800b00e:	371c      	adds	r7, #28
 800b010:	46bd      	mov	sp, r7
 800b012:	bc80      	pop	{r7}
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	40012c00 	.word	0x40012c00
 800b01c:	40013400 	.word	0x40013400

0800b020 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b020:	b480      	push	{r7}
 800b022:	b087      	sub	sp, #28
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6a1b      	ldr	r3, [r3, #32]
 800b02e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6a1b      	ldr	r3, [r3, #32]
 800b034:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	69db      	ldr	r3, [r3, #28]
 800b046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b04e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	021b      	lsls	r3, r3, #8
 800b05e:	68fa      	ldr	r2, [r7, #12]
 800b060:	4313      	orrs	r3, r2
 800b062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b06a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	031b      	lsls	r3, r3, #12
 800b072:	693a      	ldr	r2, [r7, #16]
 800b074:	4313      	orrs	r3, r2
 800b076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	4a11      	ldr	r2, [pc, #68]	@ (800b0c0 <TIM_OC4_SetConfig+0xa0>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d003      	beq.n	800b088 <TIM_OC4_SetConfig+0x68>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	4a10      	ldr	r2, [pc, #64]	@ (800b0c4 <TIM_OC4_SetConfig+0xa4>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d109      	bne.n	800b09c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b08e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	695b      	ldr	r3, [r3, #20]
 800b094:	019b      	lsls	r3, r3, #6
 800b096:	697a      	ldr	r2, [r7, #20]
 800b098:	4313      	orrs	r3, r2
 800b09a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	697a      	ldr	r2, [r7, #20]
 800b0a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	68fa      	ldr	r2, [r7, #12]
 800b0a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	685a      	ldr	r2, [r3, #4]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	693a      	ldr	r2, [r7, #16]
 800b0b4:	621a      	str	r2, [r3, #32]
}
 800b0b6:	bf00      	nop
 800b0b8:	371c      	adds	r7, #28
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bc80      	pop	{r7}
 800b0be:	4770      	bx	lr
 800b0c0:	40012c00 	.word	0x40012c00
 800b0c4:	40013400 	.word	0x40013400

0800b0c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b087      	sub	sp, #28
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	6a1b      	ldr	r3, [r3, #32]
 800b0d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	6a1b      	ldr	r3, [r3, #32]
 800b0de:	f023 0201 	bic.w	r2, r3, #1
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	699b      	ldr	r3, [r3, #24]
 800b0ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b0f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	011b      	lsls	r3, r3, #4
 800b0f8:	693a      	ldr	r2, [r7, #16]
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	f023 030a 	bic.w	r3, r3, #10
 800b104:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b106:	697a      	ldr	r2, [r7, #20]
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	4313      	orrs	r3, r2
 800b10c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	693a      	ldr	r2, [r7, #16]
 800b112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	697a      	ldr	r2, [r7, #20]
 800b118:	621a      	str	r2, [r3, #32]
}
 800b11a:	bf00      	nop
 800b11c:	371c      	adds	r7, #28
 800b11e:	46bd      	mov	sp, r7
 800b120:	bc80      	pop	{r7}
 800b122:	4770      	bx	lr

0800b124 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b124:	b480      	push	{r7}
 800b126:	b087      	sub	sp, #28
 800b128:	af00      	add	r7, sp, #0
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	6a1b      	ldr	r3, [r3, #32]
 800b134:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	6a1b      	ldr	r3, [r3, #32]
 800b13a:	f023 0210 	bic.w	r2, r3, #16
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	699b      	ldr	r3, [r3, #24]
 800b146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b14e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	031b      	lsls	r3, r3, #12
 800b154:	693a      	ldr	r2, [r7, #16]
 800b156:	4313      	orrs	r3, r2
 800b158:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b160:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	011b      	lsls	r3, r3, #4
 800b166:	697a      	ldr	r2, [r7, #20]
 800b168:	4313      	orrs	r3, r2
 800b16a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	693a      	ldr	r2, [r7, #16]
 800b170:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	697a      	ldr	r2, [r7, #20]
 800b176:	621a      	str	r2, [r3, #32]
}
 800b178:	bf00      	nop
 800b17a:	371c      	adds	r7, #28
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bc80      	pop	{r7}
 800b180:	4770      	bx	lr

0800b182 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b182:	b480      	push	{r7}
 800b184:	b085      	sub	sp, #20
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
 800b18a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b198:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b19a:	683a      	ldr	r2, [r7, #0]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	f043 0307 	orr.w	r3, r3, #7
 800b1a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	68fa      	ldr	r2, [r7, #12]
 800b1aa:	609a      	str	r2, [r3, #8]
}
 800b1ac:	bf00      	nop
 800b1ae:	3714      	adds	r7, #20
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bc80      	pop	{r7}
 800b1b4:	4770      	bx	lr

0800b1b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b1b6:	b480      	push	{r7}
 800b1b8:	b087      	sub	sp, #28
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	60f8      	str	r0, [r7, #12]
 800b1be:	60b9      	str	r1, [r7, #8]
 800b1c0:	607a      	str	r2, [r7, #4]
 800b1c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b1d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	021a      	lsls	r2, r3, #8
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	431a      	orrs	r2, r3
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	697a      	ldr	r2, [r7, #20]
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	697a      	ldr	r2, [r7, #20]
 800b1e8:	609a      	str	r2, [r3, #8]
}
 800b1ea:	bf00      	nop
 800b1ec:	371c      	adds	r7, #28
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bc80      	pop	{r7}
 800b1f2:	4770      	bx	lr

0800b1f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b087      	sub	sp, #28
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	f003 031f 	and.w	r3, r3, #31
 800b206:	2201      	movs	r2, #1
 800b208:	fa02 f303 	lsl.w	r3, r2, r3
 800b20c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	6a1a      	ldr	r2, [r3, #32]
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	43db      	mvns	r3, r3
 800b216:	401a      	ands	r2, r3
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	6a1a      	ldr	r2, [r3, #32]
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	f003 031f 	and.w	r3, r3, #31
 800b226:	6879      	ldr	r1, [r7, #4]
 800b228:	fa01 f303 	lsl.w	r3, r1, r3
 800b22c:	431a      	orrs	r2, r3
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	621a      	str	r2, [r3, #32]
}
 800b232:	bf00      	nop
 800b234:	371c      	adds	r7, #28
 800b236:	46bd      	mov	sp, r7
 800b238:	bc80      	pop	{r7}
 800b23a:	4770      	bx	lr

0800b23c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b085      	sub	sp, #20
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d101      	bne.n	800b254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b250:	2302      	movs	r3, #2
 800b252:	e050      	b.n	800b2f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2201      	movs	r2, #1
 800b258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2202      	movs	r2, #2
 800b260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b27a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	4313      	orrs	r3, r2
 800b284:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a1b      	ldr	r2, [pc, #108]	@ (800b300 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d018      	beq.n	800b2ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a19      	ldr	r2, [pc, #100]	@ (800b304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d013      	beq.n	800b2ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2aa:	d00e      	beq.n	800b2ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a15      	ldr	r2, [pc, #84]	@ (800b308 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d009      	beq.n	800b2ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a14      	ldr	r2, [pc, #80]	@ (800b30c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d004      	beq.n	800b2ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4a12      	ldr	r2, [pc, #72]	@ (800b310 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d10c      	bne.n	800b2e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b2d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	68ba      	ldr	r2, [r7, #8]
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	68ba      	ldr	r2, [r7, #8]
 800b2e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b2f4:	2300      	movs	r3, #0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3714      	adds	r7, #20
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bc80      	pop	{r7}
 800b2fe:	4770      	bx	lr
 800b300:	40012c00 	.word	0x40012c00
 800b304:	40013400 	.word	0x40013400
 800b308:	40000400 	.word	0x40000400
 800b30c:	40000800 	.word	0x40000800
 800b310:	40000c00 	.word	0x40000c00

0800b314 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b31c:	bf00      	nop
 800b31e:	370c      	adds	r7, #12
 800b320:	46bd      	mov	sp, r7
 800b322:	bc80      	pop	{r7}
 800b324:	4770      	bx	lr

0800b326 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b326:	b480      	push	{r7}
 800b328:	b083      	sub	sp, #12
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b32e:	bf00      	nop
 800b330:	370c      	adds	r7, #12
 800b332:	46bd      	mov	sp, r7
 800b334:	bc80      	pop	{r7}
 800b336:	4770      	bx	lr

0800b338 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d101      	bne.n	800b34a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b346:	2301      	movs	r3, #1
 800b348:	e042      	b.n	800b3d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b350:	b2db      	uxtb	r3, r3
 800b352:	2b00      	cmp	r3, #0
 800b354:	d106      	bne.n	800b364 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f7f9 fd78 	bl	8004e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2224      	movs	r2, #36	@ 0x24
 800b368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	68da      	ldr	r2, [r3, #12]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b37a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 ff01 	bl	800c184 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	691a      	ldr	r2, [r3, #16]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b390:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	695a      	ldr	r2, [r3, #20]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b3a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	68da      	ldr	r2, [r3, #12]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b3b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2220      	movs	r2, #32
 800b3bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2220      	movs	r2, #32
 800b3c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b3ce:	2300      	movs	r3, #0
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3708      	adds	r7, #8
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b08a      	sub	sp, #40	@ 0x28
 800b3dc:	af02      	add	r7, sp, #8
 800b3de:	60f8      	str	r0, [r7, #12]
 800b3e0:	60b9      	str	r1, [r7, #8]
 800b3e2:	603b      	str	r3, [r7, #0]
 800b3e4:	4613      	mov	r3, r2
 800b3e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	2b20      	cmp	r3, #32
 800b3f6:	d16d      	bne.n	800b4d4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d002      	beq.n	800b404 <HAL_UART_Transmit+0x2c>
 800b3fe:	88fb      	ldrh	r3, [r7, #6]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d101      	bne.n	800b408 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b404:	2301      	movs	r3, #1
 800b406:	e066      	b.n	800b4d6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2200      	movs	r2, #0
 800b40c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2221      	movs	r2, #33	@ 0x21
 800b412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b416:	f7fa fe41 	bl	800609c <HAL_GetTick>
 800b41a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	88fa      	ldrh	r2, [r7, #6]
 800b420:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	88fa      	ldrh	r2, [r7, #6]
 800b426:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b430:	d108      	bne.n	800b444 <HAL_UART_Transmit+0x6c>
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	691b      	ldr	r3, [r3, #16]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d104      	bne.n	800b444 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b43a:	2300      	movs	r3, #0
 800b43c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	61bb      	str	r3, [r7, #24]
 800b442:	e003      	b.n	800b44c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b448:	2300      	movs	r3, #0
 800b44a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b44c:	e02a      	b.n	800b4a4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	9300      	str	r3, [sp, #0]
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	2200      	movs	r2, #0
 800b456:	2180      	movs	r1, #128	@ 0x80
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	f000 fc29 	bl	800bcb0 <UART_WaitOnFlagUntilTimeout>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d001      	beq.n	800b468 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800b464:	2303      	movs	r3, #3
 800b466:	e036      	b.n	800b4d6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d10b      	bne.n	800b486 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b46e:	69bb      	ldr	r3, [r7, #24]
 800b470:	881b      	ldrh	r3, [r3, #0]
 800b472:	461a      	mov	r2, r3
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b47c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b47e:	69bb      	ldr	r3, [r7, #24]
 800b480:	3302      	adds	r3, #2
 800b482:	61bb      	str	r3, [r7, #24]
 800b484:	e007      	b.n	800b496 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b486:	69fb      	ldr	r3, [r7, #28]
 800b488:	781a      	ldrb	r2, [r3, #0]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	3301      	adds	r3, #1
 800b494:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b49a:	b29b      	uxth	r3, r3
 800b49c:	3b01      	subs	r3, #1
 800b49e:	b29a      	uxth	r2, r3
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d1cf      	bne.n	800b44e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	9300      	str	r3, [sp, #0]
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	2140      	movs	r1, #64	@ 0x40
 800b4b8:	68f8      	ldr	r0, [r7, #12]
 800b4ba:	f000 fbf9 	bl	800bcb0 <UART_WaitOnFlagUntilTimeout>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d001      	beq.n	800b4c8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800b4c4:	2303      	movs	r3, #3
 800b4c6:	e006      	b.n	800b4d6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2220      	movs	r2, #32
 800b4cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	e000      	b.n	800b4d6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800b4d4:	2302      	movs	r3, #2
  }
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3720      	adds	r7, #32
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}

0800b4de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b4de:	b580      	push	{r7, lr}
 800b4e0:	b084      	sub	sp, #16
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	60f8      	str	r0, [r7, #12]
 800b4e6:	60b9      	str	r1, [r7, #8]
 800b4e8:	4613      	mov	r3, r2
 800b4ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	2b20      	cmp	r3, #32
 800b4f6:	d112      	bne.n	800b51e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d002      	beq.n	800b504 <HAL_UART_Receive_IT+0x26>
 800b4fe:	88fb      	ldrh	r3, [r7, #6]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d101      	bne.n	800b508 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b504:	2301      	movs	r3, #1
 800b506:	e00b      	b.n	800b520 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2200      	movs	r2, #0
 800b50c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b50e:	88fb      	ldrh	r3, [r7, #6]
 800b510:	461a      	mov	r2, r3
 800b512:	68b9      	ldr	r1, [r7, #8]
 800b514:	68f8      	ldr	r0, [r7, #12]
 800b516:	f000 fc39 	bl	800bd8c <UART_Start_Receive_IT>
 800b51a:	4603      	mov	r3, r0
 800b51c:	e000      	b.n	800b520 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800b51e:	2302      	movs	r3, #2
  }
}
 800b520:	4618      	mov	r0, r3
 800b522:	3710      	adds	r7, #16
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b08c      	sub	sp, #48	@ 0x30
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	4613      	mov	r3, r2
 800b534:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	2b20      	cmp	r3, #32
 800b540:	d156      	bne.n	800b5f0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d002      	beq.n	800b54e <HAL_UART_Transmit_DMA+0x26>
 800b548:	88fb      	ldrh	r3, [r7, #6]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d101      	bne.n	800b552 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	e04f      	b.n	800b5f2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800b552:	68ba      	ldr	r2, [r7, #8]
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	88fa      	ldrh	r2, [r7, #6]
 800b55c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	88fa      	ldrh	r2, [r7, #6]
 800b562:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2200      	movs	r2, #0
 800b568:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2221      	movs	r2, #33	@ 0x21
 800b56e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b576:	4a21      	ldr	r2, [pc, #132]	@ (800b5fc <HAL_UART_Transmit_DMA+0xd4>)
 800b578:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b57e:	4a20      	ldr	r2, [pc, #128]	@ (800b600 <HAL_UART_Transmit_DMA+0xd8>)
 800b580:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b586:	4a1f      	ldr	r2, [pc, #124]	@ (800b604 <HAL_UART_Transmit_DMA+0xdc>)
 800b588:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b58e:	2200      	movs	r2, #0
 800b590:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800b592:	f107 0308 	add.w	r3, r7, #8
 800b596:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800b59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b59e:	6819      	ldr	r1, [r3, #0]
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	3304      	adds	r3, #4
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	88fb      	ldrh	r3, [r7, #6]
 800b5aa:	f7fa fefb 	bl	80063a4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b5b6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	3314      	adds	r3, #20
 800b5be:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c0:	69bb      	ldr	r3, [r7, #24]
 800b5c2:	e853 3f00 	ldrex	r3, [r3]
 800b5c6:	617b      	str	r3, [r7, #20]
   return(result);
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	3314      	adds	r3, #20
 800b5d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b5d8:	627a      	str	r2, [r7, #36]	@ 0x24
 800b5da:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5dc:	6a39      	ldr	r1, [r7, #32]
 800b5de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5e0:	e841 2300 	strex	r3, r2, [r1]
 800b5e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b5e6:	69fb      	ldr	r3, [r7, #28]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d1e5      	bne.n	800b5b8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	e000      	b.n	800b5f2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800b5f0:	2302      	movs	r3, #2
  }
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3730      	adds	r7, #48	@ 0x30
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	0800bb67 	.word	0x0800bb67
 800b600:	0800bc01 	.word	0x0800bc01
 800b604:	0800bc1d 	.word	0x0800bc1d

0800b608 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b0ba      	sub	sp, #232	@ 0xe8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	68db      	ldr	r3, [r3, #12]
 800b620:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	695b      	ldr	r3, [r3, #20]
 800b62a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b62e:	2300      	movs	r3, #0
 800b630:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b634:	2300      	movs	r3, #0
 800b636:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b63a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b63e:	f003 030f 	and.w	r3, r3, #15
 800b642:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b646:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d10f      	bne.n	800b66e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b64e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b652:	f003 0320 	and.w	r3, r3, #32
 800b656:	2b00      	cmp	r3, #0
 800b658:	d009      	beq.n	800b66e <HAL_UART_IRQHandler+0x66>
 800b65a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b65e:	f003 0320 	and.w	r3, r3, #32
 800b662:	2b00      	cmp	r3, #0
 800b664:	d003      	beq.n	800b66e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 fccd 	bl	800c006 <UART_Receive_IT>
      return;
 800b66c:	e25b      	b.n	800bb26 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b66e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b672:	2b00      	cmp	r3, #0
 800b674:	f000 80de 	beq.w	800b834 <HAL_UART_IRQHandler+0x22c>
 800b678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b67c:	f003 0301 	and.w	r3, r3, #1
 800b680:	2b00      	cmp	r3, #0
 800b682:	d106      	bne.n	800b692 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b688:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	f000 80d1 	beq.w	800b834 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b696:	f003 0301 	and.w	r3, r3, #1
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d00b      	beq.n	800b6b6 <HAL_UART_IRQHandler+0xae>
 800b69e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b6a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d005      	beq.n	800b6b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6ae:	f043 0201 	orr.w	r2, r3, #1
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b6b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6ba:	f003 0304 	and.w	r3, r3, #4
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d00b      	beq.n	800b6da <HAL_UART_IRQHandler+0xd2>
 800b6c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b6c6:	f003 0301 	and.w	r3, r3, #1
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d005      	beq.n	800b6da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6d2:	f043 0202 	orr.w	r2, r3, #2
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b6da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6de:	f003 0302 	and.w	r3, r3, #2
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d00b      	beq.n	800b6fe <HAL_UART_IRQHandler+0xf6>
 800b6e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b6ea:	f003 0301 	and.w	r3, r3, #1
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d005      	beq.n	800b6fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6f6:	f043 0204 	orr.w	r2, r3, #4
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b6fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b702:	f003 0308 	and.w	r3, r3, #8
 800b706:	2b00      	cmp	r3, #0
 800b708:	d011      	beq.n	800b72e <HAL_UART_IRQHandler+0x126>
 800b70a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b70e:	f003 0320 	and.w	r3, r3, #32
 800b712:	2b00      	cmp	r3, #0
 800b714:	d105      	bne.n	800b722 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b71a:	f003 0301 	and.w	r3, r3, #1
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d005      	beq.n	800b72e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b726:	f043 0208 	orr.w	r2, r3, #8
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b732:	2b00      	cmp	r3, #0
 800b734:	f000 81f2 	beq.w	800bb1c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b73c:	f003 0320 	and.w	r3, r3, #32
 800b740:	2b00      	cmp	r3, #0
 800b742:	d008      	beq.n	800b756 <HAL_UART_IRQHandler+0x14e>
 800b744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b748:	f003 0320 	and.w	r3, r3, #32
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d002      	beq.n	800b756 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 fc58 	bl	800c006 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	695b      	ldr	r3, [r3, #20]
 800b75c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b760:	2b00      	cmp	r3, #0
 800b762:	bf14      	ite	ne
 800b764:	2301      	movne	r3, #1
 800b766:	2300      	moveq	r3, #0
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b772:	f003 0308 	and.w	r3, r3, #8
 800b776:	2b00      	cmp	r3, #0
 800b778:	d103      	bne.n	800b782 <HAL_UART_IRQHandler+0x17a>
 800b77a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d04f      	beq.n	800b822 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 fb62 	bl	800be4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	695b      	ldr	r3, [r3, #20]
 800b78e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b792:	2b00      	cmp	r3, #0
 800b794:	d041      	beq.n	800b81a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	3314      	adds	r3, #20
 800b79c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b7a4:	e853 3f00 	ldrex	r3, [r3]
 800b7a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b7ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b7b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	3314      	adds	r3, #20
 800b7be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b7c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b7c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b7ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b7d2:	e841 2300 	strex	r3, r2, [r1]
 800b7d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b7da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d1d9      	bne.n	800b796 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d013      	beq.n	800b812 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7ee:	4a7e      	ldr	r2, [pc, #504]	@ (800b9e8 <HAL_UART_IRQHandler+0x3e0>)
 800b7f0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7fa fe70 	bl	80064dc <HAL_DMA_Abort_IT>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d016      	beq.n	800b830 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b80c:	4610      	mov	r0, r2
 800b80e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b810:	e00e      	b.n	800b830 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 f993 	bl	800bb3e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b818:	e00a      	b.n	800b830 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f000 f98f 	bl	800bb3e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b820:	e006      	b.n	800b830 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 f98b 	bl	800bb3e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2200      	movs	r2, #0
 800b82c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b82e:	e175      	b.n	800bb1c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b830:	bf00      	nop
    return;
 800b832:	e173      	b.n	800bb1c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b838:	2b01      	cmp	r3, #1
 800b83a:	f040 814f 	bne.w	800badc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b83e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b842:	f003 0310 	and.w	r3, r3, #16
 800b846:	2b00      	cmp	r3, #0
 800b848:	f000 8148 	beq.w	800badc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b84c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b850:	f003 0310 	and.w	r3, r3, #16
 800b854:	2b00      	cmp	r3, #0
 800b856:	f000 8141 	beq.w	800badc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b85a:	2300      	movs	r3, #0
 800b85c:	60bb      	str	r3, [r7, #8]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	60bb      	str	r3, [r7, #8]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	60bb      	str	r3, [r7, #8]
 800b86e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	695b      	ldr	r3, [r3, #20]
 800b876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	f000 80b6 	beq.w	800b9ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b88c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b890:	2b00      	cmp	r3, #0
 800b892:	f000 8145 	beq.w	800bb20 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b89a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	f080 813e 	bcs.w	800bb20 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b8aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8b0:	699b      	ldr	r3, [r3, #24]
 800b8b2:	2b20      	cmp	r3, #32
 800b8b4:	f000 8088 	beq.w	800b9c8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	330c      	adds	r3, #12
 800b8be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b8c6:	e853 3f00 	ldrex	r3, [r3]
 800b8ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b8ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b8d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b8d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	330c      	adds	r3, #12
 800b8e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b8e4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b8e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b8f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b8f4:	e841 2300 	strex	r3, r2, [r1]
 800b8f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b8fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b900:	2b00      	cmp	r3, #0
 800b902:	d1d9      	bne.n	800b8b8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	3314      	adds	r3, #20
 800b90a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b90c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b90e:	e853 3f00 	ldrex	r3, [r3]
 800b912:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b914:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b916:	f023 0301 	bic.w	r3, r3, #1
 800b91a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	3314      	adds	r3, #20
 800b924:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b928:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b92c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b92e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b930:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b934:	e841 2300 	strex	r3, r2, [r1]
 800b938:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b93a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d1e1      	bne.n	800b904 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	3314      	adds	r3, #20
 800b946:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b948:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b94a:	e853 3f00 	ldrex	r3, [r3]
 800b94e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b950:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b952:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b956:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	3314      	adds	r3, #20
 800b960:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b964:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b966:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b968:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b96a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b96c:	e841 2300 	strex	r3, r2, [r1]
 800b970:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b972:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b974:	2b00      	cmp	r3, #0
 800b976:	d1e3      	bne.n	800b940 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2220      	movs	r2, #32
 800b97c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2200      	movs	r2, #0
 800b984:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	330c      	adds	r3, #12
 800b98c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b98e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b990:	e853 3f00 	ldrex	r3, [r3]
 800b994:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b996:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b998:	f023 0310 	bic.w	r3, r3, #16
 800b99c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	330c      	adds	r3, #12
 800b9a6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b9aa:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b9ac:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b9b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b9b2:	e841 2300 	strex	r3, r2, [r1]
 800b9b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b9b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d1e3      	bne.n	800b986 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7fa fd4e 	bl	8006464 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2202      	movs	r2, #2
 800b9cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	1ad3      	subs	r3, r2, r3
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	4619      	mov	r1, r3
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 f8b6 	bl	800bb50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b9e4:	e09c      	b.n	800bb20 <HAL_UART_IRQHandler+0x518>
 800b9e6:	bf00      	nop
 800b9e8:	0800bf11 	.word	0x0800bf11
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	1ad3      	subs	r3, r2, r3
 800b9f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ba00:	b29b      	uxth	r3, r3
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	f000 808e 	beq.w	800bb24 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800ba08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	f000 8089 	beq.w	800bb24 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	330c      	adds	r3, #12
 800ba18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba1c:	e853 3f00 	ldrex	r3, [r3]
 800ba20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ba22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	330c      	adds	r3, #12
 800ba32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800ba36:	647a      	str	r2, [r7, #68]	@ 0x44
 800ba38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ba3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba3e:	e841 2300 	strex	r3, r2, [r1]
 800ba42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ba44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d1e3      	bne.n	800ba12 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	3314      	adds	r3, #20
 800ba50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba54:	e853 3f00 	ldrex	r3, [r3]
 800ba58:	623b      	str	r3, [r7, #32]
   return(result);
 800ba5a:	6a3b      	ldr	r3, [r7, #32]
 800ba5c:	f023 0301 	bic.w	r3, r3, #1
 800ba60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	3314      	adds	r3, #20
 800ba6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ba6e:	633a      	str	r2, [r7, #48]	@ 0x30
 800ba70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba76:	e841 2300 	strex	r3, r2, [r1]
 800ba7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ba7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1e3      	bne.n	800ba4a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2220      	movs	r2, #32
 800ba86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	330c      	adds	r3, #12
 800ba96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	e853 3f00 	ldrex	r3, [r3]
 800ba9e:	60fb      	str	r3, [r7, #12]
   return(result);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f023 0310 	bic.w	r3, r3, #16
 800baa6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	330c      	adds	r3, #12
 800bab0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800bab4:	61fa      	str	r2, [r7, #28]
 800bab6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab8:	69b9      	ldr	r1, [r7, #24]
 800baba:	69fa      	ldr	r2, [r7, #28]
 800babc:	e841 2300 	strex	r3, r2, [r1]
 800bac0:	617b      	str	r3, [r7, #20]
   return(result);
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d1e3      	bne.n	800ba90 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2202      	movs	r2, #2
 800bacc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bace:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bad2:	4619      	mov	r1, r3
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 f83b 	bl	800bb50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bada:	e023      	b.n	800bb24 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800badc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d009      	beq.n	800bafc <HAL_UART_IRQHandler+0x4f4>
 800bae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800baec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d003      	beq.n	800bafc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 fa1f 	bl	800bf38 <UART_Transmit_IT>
    return;
 800bafa:	e014      	b.n	800bb26 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bafc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d00e      	beq.n	800bb26 <HAL_UART_IRQHandler+0x51e>
 800bb08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d008      	beq.n	800bb26 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 fa5e 	bl	800bfd6 <UART_EndTransmit_IT>
    return;
 800bb1a:	e004      	b.n	800bb26 <HAL_UART_IRQHandler+0x51e>
    return;
 800bb1c:	bf00      	nop
 800bb1e:	e002      	b.n	800bb26 <HAL_UART_IRQHandler+0x51e>
      return;
 800bb20:	bf00      	nop
 800bb22:	e000      	b.n	800bb26 <HAL_UART_IRQHandler+0x51e>
      return;
 800bb24:	bf00      	nop
  }
}
 800bb26:	37e8      	adds	r7, #232	@ 0xe8
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b083      	sub	sp, #12
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800bb34:	bf00      	nop
 800bb36:	370c      	adds	r7, #12
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bc80      	pop	{r7}
 800bb3c:	4770      	bx	lr

0800bb3e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bb3e:	b480      	push	{r7}
 800bb40:	b083      	sub	sp, #12
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bb46:	bf00      	nop
 800bb48:	370c      	adds	r7, #12
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bc80      	pop	{r7}
 800bb4e:	4770      	bx	lr

0800bb50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	460b      	mov	r3, r1
 800bb5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bb5c:	bf00      	nop
 800bb5e:	370c      	adds	r7, #12
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bc80      	pop	{r7}
 800bb64:	4770      	bx	lr

0800bb66 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b090      	sub	sp, #64	@ 0x40
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f003 0320 	and.w	r3, r3, #32
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d137      	bne.n	800bbf2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800bb82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb84:	2200      	movs	r2, #0
 800bb86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bb88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	3314      	adds	r3, #20
 800bb8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb92:	e853 3f00 	ldrex	r3, [r3]
 800bb96:	623b      	str	r3, [r7, #32]
   return(result);
 800bb98:	6a3b      	ldr	r3, [r7, #32]
 800bb9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	3314      	adds	r3, #20
 800bba6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bba8:	633a      	str	r2, [r7, #48]	@ 0x30
 800bbaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bbae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbb0:	e841 2300 	strex	r3, r2, [r1]
 800bbb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bbb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d1e5      	bne.n	800bb88 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bbbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	330c      	adds	r3, #12
 800bbc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	e853 3f00 	ldrex	r3, [r3]
 800bbca:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbd2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	330c      	adds	r3, #12
 800bbda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bbdc:	61fa      	str	r2, [r7, #28]
 800bbde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe0:	69b9      	ldr	r1, [r7, #24]
 800bbe2:	69fa      	ldr	r2, [r7, #28]
 800bbe4:	e841 2300 	strex	r3, r2, [r1]
 800bbe8:	617b      	str	r3, [r7, #20]
   return(result);
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d1e5      	bne.n	800bbbc <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bbf0:	e002      	b.n	800bbf8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800bbf2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bbf4:	f7f7 ffde 	bl	8003bb4 <HAL_UART_TxCpltCallback>
}
 800bbf8:	bf00      	nop
 800bbfa:	3740      	adds	r7, #64	@ 0x40
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc0c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f7ff ff8c 	bl	800bb2c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc14:	bf00      	nop
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800bc24:	2300      	movs	r3, #0
 800bc26:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc2c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	695b      	ldr	r3, [r3, #20]
 800bc34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	bf14      	ite	ne
 800bc3c:	2301      	movne	r3, #1
 800bc3e:	2300      	moveq	r3, #0
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bc4a:	b2db      	uxtb	r3, r3
 800bc4c:	2b21      	cmp	r3, #33	@ 0x21
 800bc4e:	d108      	bne.n	800bc62 <UART_DMAError+0x46>
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d005      	beq.n	800bc62 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800bc5c:	68b8      	ldr	r0, [r7, #8]
 800bc5e:	f000 f8ce 	bl	800bdfe <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	695b      	ldr	r3, [r3, #20]
 800bc68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	bf14      	ite	ne
 800bc70:	2301      	movne	r3, #1
 800bc72:	2300      	moveq	r3, #0
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	2b22      	cmp	r3, #34	@ 0x22
 800bc82:	d108      	bne.n	800bc96 <UART_DMAError+0x7a>
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d005      	beq.n	800bc96 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800bc90:	68b8      	ldr	r0, [r7, #8]
 800bc92:	f000 f8db 	bl	800be4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc9a:	f043 0210 	orr.w	r2, r3, #16
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bca2:	68b8      	ldr	r0, [r7, #8]
 800bca4:	f7ff ff4b 	bl	800bb3e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bca8:	bf00      	nop
 800bcaa:	3710      	adds	r7, #16
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b090      	sub	sp, #64	@ 0x40
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	603b      	str	r3, [r7, #0]
 800bcbc:	4613      	mov	r3, r2
 800bcbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bcc0:	e050      	b.n	800bd64 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bcc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bcc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcc8:	d04c      	beq.n	800bd64 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bcca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d007      	beq.n	800bce0 <UART_WaitOnFlagUntilTimeout+0x30>
 800bcd0:	f7fa f9e4 	bl	800609c <HAL_GetTick>
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	1ad3      	subs	r3, r2, r3
 800bcda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d241      	bcs.n	800bd64 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	330c      	adds	r3, #12
 800bce6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcea:	e853 3f00 	ldrex	r3, [r3]
 800bcee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bcf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800bcf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	330c      	adds	r3, #12
 800bcfe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bd00:	637a      	str	r2, [r7, #52]	@ 0x34
 800bd02:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bd06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd08:	e841 2300 	strex	r3, r2, [r1]
 800bd0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bd0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d1e5      	bne.n	800bce0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	3314      	adds	r3, #20
 800bd1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	e853 3f00 	ldrex	r3, [r3]
 800bd22:	613b      	str	r3, [r7, #16]
   return(result);
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	f023 0301 	bic.w	r3, r3, #1
 800bd2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	3314      	adds	r3, #20
 800bd32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bd34:	623a      	str	r2, [r7, #32]
 800bd36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd38:	69f9      	ldr	r1, [r7, #28]
 800bd3a:	6a3a      	ldr	r2, [r7, #32]
 800bd3c:	e841 2300 	strex	r3, r2, [r1]
 800bd40:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd42:	69bb      	ldr	r3, [r7, #24]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d1e5      	bne.n	800bd14 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2220      	movs	r2, #32
 800bd4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2220      	movs	r2, #32
 800bd54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800bd60:	2303      	movs	r3, #3
 800bd62:	e00f      	b.n	800bd84 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	4013      	ands	r3, r2
 800bd6e:	68ba      	ldr	r2, [r7, #8]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	bf0c      	ite	eq
 800bd74:	2301      	moveq	r3, #1
 800bd76:	2300      	movne	r3, #0
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	79fb      	ldrb	r3, [r7, #7]
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d09f      	beq.n	800bcc2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bd82:	2300      	movs	r3, #0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3740      	adds	r7, #64	@ 0x40
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b085      	sub	sp, #20
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	60f8      	str	r0, [r7, #12]
 800bd94:	60b9      	str	r1, [r7, #8]
 800bd96:	4613      	mov	r3, r2
 800bd98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	68ba      	ldr	r2, [r7, #8]
 800bd9e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	88fa      	ldrh	r2, [r7, #6]
 800bda4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	88fa      	ldrh	r2, [r7, #6]
 800bdaa:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	2222      	movs	r2, #34	@ 0x22
 800bdb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	691b      	ldr	r3, [r3, #16]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d007      	beq.n	800bdd2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	68da      	ldr	r2, [r3, #12]
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bdd0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	695a      	ldr	r2, [r3, #20]
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f042 0201 	orr.w	r2, r2, #1
 800bde0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	68da      	ldr	r2, [r3, #12]
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f042 0220 	orr.w	r2, r2, #32
 800bdf0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bdf2:	2300      	movs	r3, #0
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3714      	adds	r7, #20
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bc80      	pop	{r7}
 800bdfc:	4770      	bx	lr

0800bdfe <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bdfe:	b480      	push	{r7}
 800be00:	b089      	sub	sp, #36	@ 0x24
 800be02:	af00      	add	r7, sp, #0
 800be04:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	330c      	adds	r3, #12
 800be0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	e853 3f00 	ldrex	r3, [r3]
 800be14:	60bb      	str	r3, [r7, #8]
   return(result);
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800be1c:	61fb      	str	r3, [r7, #28]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	330c      	adds	r3, #12
 800be24:	69fa      	ldr	r2, [r7, #28]
 800be26:	61ba      	str	r2, [r7, #24]
 800be28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be2a:	6979      	ldr	r1, [r7, #20]
 800be2c:	69ba      	ldr	r2, [r7, #24]
 800be2e:	e841 2300 	strex	r3, r2, [r1]
 800be32:	613b      	str	r3, [r7, #16]
   return(result);
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d1e5      	bne.n	800be06 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2220      	movs	r2, #32
 800be3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800be42:	bf00      	nop
 800be44:	3724      	adds	r7, #36	@ 0x24
 800be46:	46bd      	mov	sp, r7
 800be48:	bc80      	pop	{r7}
 800be4a:	4770      	bx	lr

0800be4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b095      	sub	sp, #84	@ 0x54
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	330c      	adds	r3, #12
 800be5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be5e:	e853 3f00 	ldrex	r3, [r3]
 800be62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800be64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	330c      	adds	r3, #12
 800be72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800be74:	643a      	str	r2, [r7, #64]	@ 0x40
 800be76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800be7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800be7c:	e841 2300 	strex	r3, r2, [r1]
 800be80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be84:	2b00      	cmp	r3, #0
 800be86:	d1e5      	bne.n	800be54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	3314      	adds	r3, #20
 800be8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be90:	6a3b      	ldr	r3, [r7, #32]
 800be92:	e853 3f00 	ldrex	r3, [r3]
 800be96:	61fb      	str	r3, [r7, #28]
   return(result);
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	f023 0301 	bic.w	r3, r3, #1
 800be9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	3314      	adds	r3, #20
 800bea6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bea8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800beaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800beae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800beb0:	e841 2300 	strex	r3, r2, [r1]
 800beb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800beb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d1e5      	bne.n	800be88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d119      	bne.n	800bef8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	330c      	adds	r3, #12
 800beca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	e853 3f00 	ldrex	r3, [r3]
 800bed2:	60bb      	str	r3, [r7, #8]
   return(result);
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	f023 0310 	bic.w	r3, r3, #16
 800beda:	647b      	str	r3, [r7, #68]	@ 0x44
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	330c      	adds	r3, #12
 800bee2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bee4:	61ba      	str	r2, [r7, #24]
 800bee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bee8:	6979      	ldr	r1, [r7, #20]
 800beea:	69ba      	ldr	r2, [r7, #24]
 800beec:	e841 2300 	strex	r3, r2, [r1]
 800bef0:	613b      	str	r3, [r7, #16]
   return(result);
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d1e5      	bne.n	800bec4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2220      	movs	r2, #32
 800befc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2200      	movs	r2, #0
 800bf04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800bf06:	bf00      	nop
 800bf08:	3754      	adds	r7, #84	@ 0x54
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bc80      	pop	{r7}
 800bf0e:	4770      	bx	lr

0800bf10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2200      	movs	r2, #0
 800bf22:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2200      	movs	r2, #0
 800bf28:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf2a:	68f8      	ldr	r0, [r7, #12]
 800bf2c:	f7ff fe07 	bl	800bb3e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf30:	bf00      	nop
 800bf32:	3710      	adds	r7, #16
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b085      	sub	sp, #20
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	2b21      	cmp	r3, #33	@ 0x21
 800bf4a:	d13e      	bne.n	800bfca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	689b      	ldr	r3, [r3, #8]
 800bf50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf54:	d114      	bne.n	800bf80 <UART_Transmit_IT+0x48>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	691b      	ldr	r3, [r3, #16]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d110      	bne.n	800bf80 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6a1b      	ldr	r3, [r3, #32]
 800bf62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	881b      	ldrh	r3, [r3, #0]
 800bf68:	461a      	mov	r2, r3
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf72:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6a1b      	ldr	r3, [r3, #32]
 800bf78:	1c9a      	adds	r2, r3, #2
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	621a      	str	r2, [r3, #32]
 800bf7e:	e008      	b.n	800bf92 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6a1b      	ldr	r3, [r3, #32]
 800bf84:	1c59      	adds	r1, r3, #1
 800bf86:	687a      	ldr	r2, [r7, #4]
 800bf88:	6211      	str	r1, [r2, #32]
 800bf8a:	781a      	ldrb	r2, [r3, #0]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bf96:	b29b      	uxth	r3, r3
 800bf98:	3b01      	subs	r3, #1
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d10f      	bne.n	800bfc6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	68da      	ldr	r2, [r3, #12]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bfb4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	68da      	ldr	r2, [r3, #12]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bfc4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	e000      	b.n	800bfcc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bfca:	2302      	movs	r3, #2
  }
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3714      	adds	r7, #20
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bc80      	pop	{r7}
 800bfd4:	4770      	bx	lr

0800bfd6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bfd6:	b580      	push	{r7, lr}
 800bfd8:	b082      	sub	sp, #8
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	68da      	ldr	r2, [r3, #12]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bfec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2220      	movs	r2, #32
 800bff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f7f7 fddc 	bl	8003bb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bffc:	2300      	movs	r3, #0
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3708      	adds	r7, #8
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}

0800c006 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c006:	b580      	push	{r7, lr}
 800c008:	b08c      	sub	sp, #48	@ 0x30
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c014:	b2db      	uxtb	r3, r3
 800c016:	2b22      	cmp	r3, #34	@ 0x22
 800c018:	f040 80ae 	bne.w	800c178 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c024:	d117      	bne.n	800c056 <UART_Receive_IT+0x50>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	691b      	ldr	r3, [r3, #16]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d113      	bne.n	800c056 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c02e:	2300      	movs	r3, #0
 800c030:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c036:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	b29b      	uxth	r3, r3
 800c040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c044:	b29a      	uxth	r2, r3
 800c046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c048:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c04e:	1c9a      	adds	r2, r3, #2
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	629a      	str	r2, [r3, #40]	@ 0x28
 800c054:	e026      	b.n	800c0a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c05a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800c05c:	2300      	movs	r3, #0
 800c05e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c068:	d007      	beq.n	800c07a <UART_Receive_IT+0x74>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	689b      	ldr	r3, [r3, #8]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d10a      	bne.n	800c088 <UART_Receive_IT+0x82>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	691b      	ldr	r3, [r3, #16]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d106      	bne.n	800c088 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	b2da      	uxtb	r2, r3
 800c082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c084:	701a      	strb	r2, [r3, #0]
 800c086:	e008      	b.n	800c09a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c094:	b2da      	uxtb	r2, r3
 800c096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c098:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c09e:	1c5a      	adds	r2, r3, #1
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	3b01      	subs	r3, #1
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d15d      	bne.n	800c174 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	68da      	ldr	r2, [r3, #12]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f022 0220 	bic.w	r2, r2, #32
 800c0c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	68da      	ldr	r2, [r3, #12]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c0d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	695a      	ldr	r2, [r3, #20]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f022 0201 	bic.w	r2, r2, #1
 800c0e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2220      	movs	r2, #32
 800c0ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d135      	bne.n	800c16a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2200      	movs	r2, #0
 800c102:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	330c      	adds	r3, #12
 800c10a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	e853 3f00 	ldrex	r3, [r3]
 800c112:	613b      	str	r3, [r7, #16]
   return(result);
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	f023 0310 	bic.w	r3, r3, #16
 800c11a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	330c      	adds	r3, #12
 800c122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c124:	623a      	str	r2, [r7, #32]
 800c126:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c128:	69f9      	ldr	r1, [r7, #28]
 800c12a:	6a3a      	ldr	r2, [r7, #32]
 800c12c:	e841 2300 	strex	r3, r2, [r1]
 800c130:	61bb      	str	r3, [r7, #24]
   return(result);
 800c132:	69bb      	ldr	r3, [r7, #24]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d1e5      	bne.n	800c104 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f003 0310 	and.w	r3, r3, #16
 800c142:	2b10      	cmp	r3, #16
 800c144:	d10a      	bne.n	800c15c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c146:	2300      	movs	r3, #0
 800c148:	60fb      	str	r3, [r7, #12]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	60fb      	str	r3, [r7, #12]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	60fb      	str	r3, [r7, #12]
 800c15a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c160:	4619      	mov	r1, r3
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f7ff fcf4 	bl	800bb50 <HAL_UARTEx_RxEventCallback>
 800c168:	e002      	b.n	800c170 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f7f7 fd08 	bl	8003b80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c170:	2300      	movs	r3, #0
 800c172:	e002      	b.n	800c17a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c174:	2300      	movs	r3, #0
 800c176:	e000      	b.n	800c17a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c178:	2302      	movs	r3, #2
  }
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3730      	adds	r7, #48	@ 0x30
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
	...

0800c184 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b084      	sub	sp, #16
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	691b      	ldr	r3, [r3, #16]
 800c192:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	68da      	ldr	r2, [r3, #12]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	430a      	orrs	r2, r1
 800c1a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	689a      	ldr	r2, [r3, #8]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	691b      	ldr	r3, [r3, #16]
 800c1aa:	431a      	orrs	r2, r3
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	695b      	ldr	r3, [r3, #20]
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	68db      	ldr	r3, [r3, #12]
 800c1ba:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800c1be:	f023 030c 	bic.w	r3, r3, #12
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	6812      	ldr	r2, [r2, #0]
 800c1c6:	68b9      	ldr	r1, [r7, #8]
 800c1c8:	430b      	orrs	r3, r1
 800c1ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	695b      	ldr	r3, [r3, #20]
 800c1d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	699a      	ldr	r2, [r3, #24]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	430a      	orrs	r2, r1
 800c1e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4a2c      	ldr	r2, [pc, #176]	@ (800c298 <UART_SetConfig+0x114>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d103      	bne.n	800c1f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c1ec:	f7fd f8e4 	bl	80093b8 <HAL_RCC_GetPCLK2Freq>
 800c1f0:	60f8      	str	r0, [r7, #12]
 800c1f2:	e002      	b.n	800c1fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c1f4:	f7fd f8cc 	bl	8009390 <HAL_RCC_GetPCLK1Freq>
 800c1f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c1fa:	68fa      	ldr	r2, [r7, #12]
 800c1fc:	4613      	mov	r3, r2
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	4413      	add	r3, r2
 800c202:	009a      	lsls	r2, r3, #2
 800c204:	441a      	add	r2, r3
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c210:	4a22      	ldr	r2, [pc, #136]	@ (800c29c <UART_SetConfig+0x118>)
 800c212:	fba2 2303 	umull	r2, r3, r2, r3
 800c216:	095b      	lsrs	r3, r3, #5
 800c218:	0119      	lsls	r1, r3, #4
 800c21a:	68fa      	ldr	r2, [r7, #12]
 800c21c:	4613      	mov	r3, r2
 800c21e:	009b      	lsls	r3, r3, #2
 800c220:	4413      	add	r3, r2
 800c222:	009a      	lsls	r2, r3, #2
 800c224:	441a      	add	r2, r3
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c230:	4b1a      	ldr	r3, [pc, #104]	@ (800c29c <UART_SetConfig+0x118>)
 800c232:	fba3 0302 	umull	r0, r3, r3, r2
 800c236:	095b      	lsrs	r3, r3, #5
 800c238:	2064      	movs	r0, #100	@ 0x64
 800c23a:	fb00 f303 	mul.w	r3, r0, r3
 800c23e:	1ad3      	subs	r3, r2, r3
 800c240:	011b      	lsls	r3, r3, #4
 800c242:	3332      	adds	r3, #50	@ 0x32
 800c244:	4a15      	ldr	r2, [pc, #84]	@ (800c29c <UART_SetConfig+0x118>)
 800c246:	fba2 2303 	umull	r2, r3, r2, r3
 800c24a:	095b      	lsrs	r3, r3, #5
 800c24c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c250:	4419      	add	r1, r3
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	4613      	mov	r3, r2
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	4413      	add	r3, r2
 800c25a:	009a      	lsls	r2, r3, #2
 800c25c:	441a      	add	r2, r3
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	009b      	lsls	r3, r3, #2
 800c264:	fbb2 f2f3 	udiv	r2, r2, r3
 800c268:	4b0c      	ldr	r3, [pc, #48]	@ (800c29c <UART_SetConfig+0x118>)
 800c26a:	fba3 0302 	umull	r0, r3, r3, r2
 800c26e:	095b      	lsrs	r3, r3, #5
 800c270:	2064      	movs	r0, #100	@ 0x64
 800c272:	fb00 f303 	mul.w	r3, r0, r3
 800c276:	1ad3      	subs	r3, r2, r3
 800c278:	011b      	lsls	r3, r3, #4
 800c27a:	3332      	adds	r3, #50	@ 0x32
 800c27c:	4a07      	ldr	r2, [pc, #28]	@ (800c29c <UART_SetConfig+0x118>)
 800c27e:	fba2 2303 	umull	r2, r3, r2, r3
 800c282:	095b      	lsrs	r3, r3, #5
 800c284:	f003 020f 	and.w	r2, r3, #15
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	440a      	add	r2, r1
 800c28e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c290:	bf00      	nop
 800c292:	3710      	adds	r7, #16
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}
 800c298:	40013800 	.word	0x40013800
 800c29c:	51eb851f 	.word	0x51eb851f

0800c2a0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c2a0:	b084      	sub	sp, #16
 800c2a2:	b480      	push	{r7}
 800c2a4:	b085      	sub	sp, #20
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
 800c2aa:	f107 001c 	add.w	r0, r7, #28
 800c2ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c2b6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c2b8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c2ba:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800c2be:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800c2c2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c2c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800c2c6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c2c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800c2ca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c2cc:	68fa      	ldr	r2, [r7, #12]
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800c2da:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c2de:	68fa      	ldr	r2, [r7, #12]
 800c2e0:	431a      	orrs	r2, r3
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c2e6:	2300      	movs	r3, #0
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3714      	adds	r7, #20
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bc80      	pop	{r7}
 800c2f0:	b004      	add	sp, #16
 800c2f2:	4770      	bx	lr

0800c2f4 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800c302:	4618      	mov	r0, r3
 800c304:	370c      	adds	r7, #12
 800c306:	46bd      	mov	sp, r7
 800c308:	bc80      	pop	{r7}
 800c30a:	4770      	bx	lr

0800c30c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c30c:	b480      	push	{r7}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800c320:	2300      	movs	r3, #0
}
 800c322:	4618      	mov	r0, r3
 800c324:	370c      	adds	r7, #12
 800c326:	46bd      	mov	sp, r7
 800c328:	bc80      	pop	{r7}
 800c32a:	4770      	bx	lr

0800c32c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c32c:	b480      	push	{r7}
 800c32e:	b083      	sub	sp, #12
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2203      	movs	r2, #3
 800c338:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c33a:	2300      	movs	r3, #0
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	370c      	adds	r7, #12
 800c340:	46bd      	mov	sp, r7
 800c342:	bc80      	pop	{r7}
 800c344:	4770      	bx	lr

0800c346 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c346:	b480      	push	{r7}
 800c348:	b083      	sub	sp, #12
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f003 0303 	and.w	r3, r3, #3
}
 800c356:	4618      	mov	r0, r3
 800c358:	370c      	adds	r7, #12
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bc80      	pop	{r7}
 800c35e:	4770      	bx	lr

0800c360 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c360:	b480      	push	{r7}
 800c362:	b085      	sub	sp, #20
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c36a:	2300      	movs	r3, #0
 800c36c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c37e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c384:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c38a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c38c:	68fa      	ldr	r2, [r7, #12]
 800c38e:	4313      	orrs	r3, r2
 800c390:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	68db      	ldr	r3, [r3, #12]
 800c396:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800c39a:	f023 030f 	bic.w	r3, r3, #15
 800c39e:	68fa      	ldr	r2, [r7, #12]
 800c3a0:	431a      	orrs	r2, r3
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c3a6:	2300      	movs	r3, #0
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3714      	adds	r7, #20
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bc80      	pop	{r7}
 800c3b0:	4770      	bx	lr

0800c3b2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c3b2:	b480      	push	{r7}
 800c3b4:	b083      	sub	sp, #12
 800c3b6:	af00      	add	r7, sp, #0
 800c3b8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	691b      	ldr	r3, [r3, #16]
 800c3be:	b2db      	uxtb	r3, r3
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bc80      	pop	{r7}
 800c3c8:	4770      	bx	lr

0800c3ca <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c3ca:	b480      	push	{r7}
 800c3cc:	b085      	sub	sp, #20
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
 800c3d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	3314      	adds	r3, #20
 800c3d8:	461a      	mov	r2, r3
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	4413      	add	r3, r2
 800c3de:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
}  
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3714      	adds	r7, #20
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bc80      	pop	{r7}
 800c3ec:	4770      	bx	lr

0800c3ee <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c3ee:	b480      	push	{r7}
 800c3f0:	b085      	sub	sp, #20
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
 800c3f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	685a      	ldr	r2, [r3, #4]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c414:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c41a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c420:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c422:	68fa      	ldr	r2, [r7, #12]
 800c424:	4313      	orrs	r3, r2
 800c426:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c42c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	431a      	orrs	r2, r3
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c438:	2300      	movs	r3, #0

}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3714      	adds	r7, #20
 800c43e:	46bd      	mov	sp, r7
 800c440:	bc80      	pop	{r7}
 800c442:	4770      	bx	lr

0800c444 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b088      	sub	sp, #32
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
 800c44c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c452:	2310      	movs	r3, #16
 800c454:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c456:	2340      	movs	r3, #64	@ 0x40
 800c458:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c45a:	2300      	movs	r3, #0
 800c45c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c45e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c462:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c464:	f107 0308 	add.w	r3, r7, #8
 800c468:	4619      	mov	r1, r3
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f7ff ff78 	bl	800c360 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800c470:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c474:	2110      	movs	r1, #16
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 f9d6 	bl	800c828 <SDMMC_GetCmdResp1>
 800c47c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c47e:	69fb      	ldr	r3, [r7, #28]
}
 800c480:	4618      	mov	r0, r3
 800c482:	3720      	adds	r7, #32
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}

0800c488 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b088      	sub	sp, #32
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c496:	2311      	movs	r3, #17
 800c498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c49a:	2340      	movs	r3, #64	@ 0x40
 800c49c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c4a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c4a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c4a8:	f107 0308 	add.w	r3, r7, #8
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f7ff ff56 	bl	800c360 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c4b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c4b8:	2111      	movs	r1, #17
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 f9b4 	bl	800c828 <SDMMC_GetCmdResp1>
 800c4c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4c2:	69fb      	ldr	r3, [r7, #28]
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3720      	adds	r7, #32
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b088      	sub	sp, #32
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c4da:	2312      	movs	r3, #18
 800c4dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c4de:	2340      	movs	r3, #64	@ 0x40
 800c4e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c4e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c4ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c4ec:	f107 0308 	add.w	r3, r7, #8
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f7ff ff34 	bl	800c360 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c4f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c4fc:	2112      	movs	r1, #18
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f000 f992 	bl	800c828 <SDMMC_GetCmdResp1>
 800c504:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c506:	69fb      	ldr	r3, [r7, #28]
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3720      	adds	r7, #32
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b088      	sub	sp, #32
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c51e:	2318      	movs	r3, #24
 800c520:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c522:	2340      	movs	r3, #64	@ 0x40
 800c524:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c526:	2300      	movs	r3, #0
 800c528:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c52a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c52e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c530:	f107 0308 	add.w	r3, r7, #8
 800c534:	4619      	mov	r1, r3
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f7ff ff12 	bl	800c360 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c53c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c540:	2118      	movs	r1, #24
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f000 f970 	bl	800c828 <SDMMC_GetCmdResp1>
 800c548:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c54a:	69fb      	ldr	r3, [r7, #28]
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3720      	adds	r7, #32
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}

0800c554 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b088      	sub	sp, #32
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c562:	2319      	movs	r3, #25
 800c564:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c566:	2340      	movs	r3, #64	@ 0x40
 800c568:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c56a:	2300      	movs	r3, #0
 800c56c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c56e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c572:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c574:	f107 0308 	add.w	r3, r7, #8
 800c578:	4619      	mov	r1, r3
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f7ff fef0 	bl	800c360 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c580:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c584:	2119      	movs	r1, #25
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f000 f94e 	bl	800c828 <SDMMC_GetCmdResp1>
 800c58c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c58e:	69fb      	ldr	r3, [r7, #28]
}
 800c590:	4618      	mov	r0, r3
 800c592:	3720      	adds	r7, #32
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}

0800c598 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b088      	sub	sp, #32
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c5a4:	230c      	movs	r3, #12
 800c5a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c5a8:	2340      	movs	r3, #64	@ 0x40
 800c5aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c5b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c5b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c5b6:	f107 0308 	add.w	r3, r7, #8
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f7ff fecf 	bl	800c360 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800c5c2:	4a05      	ldr	r2, [pc, #20]	@ (800c5d8 <SDMMC_CmdStopTransfer+0x40>)
 800c5c4:	210c      	movs	r1, #12
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f000 f92e 	bl	800c828 <SDMMC_GetCmdResp1>
 800c5cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5ce:	69fb      	ldr	r3, [r7, #28]
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3720      	adds	r7, #32
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}
 800c5d8:	05f5e100 	.word	0x05f5e100

0800c5dc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b08a      	sub	sp, #40	@ 0x28
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	60f8      	str	r0, [r7, #12]
 800c5e4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c5ec:	2307      	movs	r3, #7
 800c5ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c5f0:	2340      	movs	r3, #64	@ 0x40
 800c5f2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c5f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c5fc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c5fe:	f107 0310 	add.w	r3, r7, #16
 800c602:	4619      	mov	r1, r3
 800c604:	68f8      	ldr	r0, [r7, #12]
 800c606:	f7ff feab 	bl	800c360 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800c60a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c60e:	2107      	movs	r1, #7
 800c610:	68f8      	ldr	r0, [r7, #12]
 800c612:	f000 f909 	bl	800c828 <SDMMC_GetCmdResp1>
 800c616:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800c618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3728      	adds	r7, #40	@ 0x28
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800c622:	b580      	push	{r7, lr}
 800c624:	b088      	sub	sp, #32
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c62a:	2300      	movs	r3, #0
 800c62c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c62e:	2300      	movs	r3, #0
 800c630:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800c632:	2300      	movs	r3, #0
 800c634:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c636:	2300      	movs	r3, #0
 800c638:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c63a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c63e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c640:	f107 0308 	add.w	r3, r7, #8
 800c644:	4619      	mov	r1, r3
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f7ff fe8a 	bl	800c360 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f000 fb21 	bl	800cc94 <SDMMC_GetCmdError>
 800c652:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c654:	69fb      	ldr	r3, [r7, #28]
}
 800c656:	4618      	mov	r0, r3
 800c658:	3720      	adds	r7, #32
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}

0800c65e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800c65e:	b580      	push	{r7, lr}
 800c660:	b088      	sub	sp, #32
 800c662:	af00      	add	r7, sp, #0
 800c664:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c666:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800c66a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c66c:	2308      	movs	r3, #8
 800c66e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c670:	2340      	movs	r3, #64	@ 0x40
 800c672:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c674:	2300      	movs	r3, #0
 800c676:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c678:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c67c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c67e:	f107 0308 	add.w	r3, r7, #8
 800c682:	4619      	mov	r1, r3
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f7ff fe6b 	bl	800c360 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f000 fab4 	bl	800cbf8 <SDMMC_GetCmdResp7>
 800c690:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c692:	69fb      	ldr	r3, [r7, #28]
}
 800c694:	4618      	mov	r0, r3
 800c696:	3720      	adds	r7, #32
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b088      	sub	sp, #32
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c6aa:	2337      	movs	r3, #55	@ 0x37
 800c6ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c6ae:	2340      	movs	r3, #64	@ 0x40
 800c6b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c6b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c6bc:	f107 0308 	add.w	r3, r7, #8
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f7ff fe4c 	bl	800c360 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800c6c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c6cc:	2137      	movs	r1, #55	@ 0x37
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 f8aa 	bl	800c828 <SDMMC_GetCmdResp1>
 800c6d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6d6:	69fb      	ldr	r3, [r7, #28]
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3720      	adds	r7, #32
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b088      	sub	sp, #32
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c6f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c6f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c6f6:	2329      	movs	r3, #41	@ 0x29
 800c6f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c6fa:	2340      	movs	r3, #64	@ 0x40
 800c6fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c6fe:	2300      	movs	r3, #0
 800c700:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c702:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c706:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c708:	f107 0308 	add.w	r3, r7, #8
 800c70c:	4619      	mov	r1, r3
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f7ff fe26 	bl	800c360 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f000 f9bd 	bl	800ca94 <SDMMC_GetCmdResp3>
 800c71a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c71c:	69fb      	ldr	r3, [r7, #28]
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3720      	adds	r7, #32
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}

0800c726 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800c726:	b580      	push	{r7, lr}
 800c728:	b088      	sub	sp, #32
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c72e:	2300      	movs	r3, #0
 800c730:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c732:	2302      	movs	r3, #2
 800c734:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c736:	23c0      	movs	r3, #192	@ 0xc0
 800c738:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c73a:	2300      	movs	r3, #0
 800c73c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c73e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c742:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c744:	f107 0308 	add.w	r3, r7, #8
 800c748:	4619      	mov	r1, r3
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f7ff fe08 	bl	800c360 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f000 f957 	bl	800ca04 <SDMMC_GetCmdResp2>
 800c756:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c758:	69fb      	ldr	r3, [r7, #28]
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3720      	adds	r7, #32
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}

0800c762 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c762:	b580      	push	{r7, lr}
 800c764:	b088      	sub	sp, #32
 800c766:	af00      	add	r7, sp, #0
 800c768:	6078      	str	r0, [r7, #4]
 800c76a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c770:	2309      	movs	r3, #9
 800c772:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c774:	23c0      	movs	r3, #192	@ 0xc0
 800c776:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c778:	2300      	movs	r3, #0
 800c77a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c77c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c780:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c782:	f107 0308 	add.w	r3, r7, #8
 800c786:	4619      	mov	r1, r3
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f7ff fde9 	bl	800c360 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 f938 	bl	800ca04 <SDMMC_GetCmdResp2>
 800c794:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c796:	69fb      	ldr	r3, [r7, #28]
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3720      	adds	r7, #32
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b088      	sub	sp, #32
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c7ae:	2303      	movs	r3, #3
 800c7b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c7b2:	2340      	movs	r3, #64	@ 0x40
 800c7b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c7ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c7be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c7c0:	f107 0308 	add.w	r3, r7, #8
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f7ff fdca 	bl	800c360 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c7cc:	683a      	ldr	r2, [r7, #0]
 800c7ce:	2103      	movs	r1, #3
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 f99b 	bl	800cb0c <SDMMC_GetCmdResp6>
 800c7d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7d8:	69fb      	ldr	r3, [r7, #28]
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3720      	adds	r7, #32
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b088      	sub	sp, #32
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
 800c7ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c7f0:	230d      	movs	r3, #13
 800c7f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c7f4:	2340      	movs	r3, #64	@ 0x40
 800c7f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c7fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c800:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c802:	f107 0308 	add.w	r3, r7, #8
 800c806:	4619      	mov	r1, r3
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f7ff fda9 	bl	800c360 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800c80e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c812:	210d      	movs	r1, #13
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 f807 	bl	800c828 <SDMMC_GetCmdResp1>
 800c81a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c81c:	69fb      	ldr	r3, [r7, #28]
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3720      	adds	r7, #32
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
	...

0800c828 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b088      	sub	sp, #32
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	460b      	mov	r3, r1
 800c832:	607a      	str	r2, [r7, #4]
 800c834:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c836:	4b70      	ldr	r3, [pc, #448]	@ (800c9f8 <SDMMC_GetCmdResp1+0x1d0>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a70      	ldr	r2, [pc, #448]	@ (800c9fc <SDMMC_GetCmdResp1+0x1d4>)
 800c83c:	fba2 2303 	umull	r2, r3, r2, r3
 800c840:	0a5a      	lsrs	r2, r3, #9
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	fb02 f303 	mul.w	r3, r2, r3
 800c848:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c84a:	69fb      	ldr	r3, [r7, #28]
 800c84c:	1e5a      	subs	r2, r3, #1
 800c84e:	61fa      	str	r2, [r7, #28]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d102      	bne.n	800c85a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c854:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c858:	e0c9      	b.n	800c9ee <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c85e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c860:	69bb      	ldr	r3, [r7, #24]
 800c862:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c866:	2b00      	cmp	r3, #0
 800c868:	d0ef      	beq.n	800c84a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c86a:	69bb      	ldr	r3, [r7, #24]
 800c86c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c870:	2b00      	cmp	r3, #0
 800c872:	d1ea      	bne.n	800c84a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c878:	f003 0304 	and.w	r3, r3, #4
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d004      	beq.n	800c88a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2204      	movs	r2, #4
 800c884:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c886:	2304      	movs	r3, #4
 800c888:	e0b1      	b.n	800c9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c88e:	f003 0301 	and.w	r3, r3, #1
 800c892:	2b00      	cmp	r3, #0
 800c894:	d004      	beq.n	800c8a0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2201      	movs	r2, #1
 800c89a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c89c:	2301      	movs	r3, #1
 800c89e:	e0a6      	b.n	800c9ee <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	22c5      	movs	r2, #197	@ 0xc5
 800c8a4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c8a6:	68f8      	ldr	r0, [r7, #12]
 800c8a8:	f7ff fd83 	bl	800c3b2 <SDIO_GetCommandResponse>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	461a      	mov	r2, r3
 800c8b0:	7afb      	ldrb	r3, [r7, #11]
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d001      	beq.n	800c8ba <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	e099      	b.n	800c9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c8ba:	2100      	movs	r1, #0
 800c8bc:	68f8      	ldr	r0, [r7, #12]
 800c8be:	f7ff fd84 	bl	800c3ca <SDIO_GetResponse>
 800c8c2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c8c4:	697a      	ldr	r2, [r7, #20]
 800c8c6:	4b4e      	ldr	r3, [pc, #312]	@ (800ca00 <SDMMC_GetCmdResp1+0x1d8>)
 800c8c8:	4013      	ands	r3, r2
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d101      	bne.n	800c8d2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	e08d      	b.n	800c9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	da02      	bge.n	800c8de <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c8d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c8dc:	e087      	b.n	800c9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d001      	beq.n	800c8ec <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c8e8:	2340      	movs	r3, #64	@ 0x40
 800c8ea:	e080      	b.n	800c9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d001      	beq.n	800c8fa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c8f6:	2380      	movs	r3, #128	@ 0x80
 800c8f8:	e079      	b.n	800c9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c900:	2b00      	cmp	r3, #0
 800c902:	d002      	beq.n	800c90a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c904:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c908:	e071      	b.n	800c9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c910:	2b00      	cmp	r3, #0
 800c912:	d002      	beq.n	800c91a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c914:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c918:	e069      	b.n	800c9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c920:	2b00      	cmp	r3, #0
 800c922:	d002      	beq.n	800c92a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c924:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c928:	e061      	b.n	800c9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c930:	2b00      	cmp	r3, #0
 800c932:	d002      	beq.n	800c93a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c934:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c938:	e059      	b.n	800c9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c940:	2b00      	cmp	r3, #0
 800c942:	d002      	beq.n	800c94a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c944:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c948:	e051      	b.n	800c9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c950:	2b00      	cmp	r3, #0
 800c952:	d002      	beq.n	800c95a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c954:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c958:	e049      	b.n	800c9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c960:	2b00      	cmp	r3, #0
 800c962:	d002      	beq.n	800c96a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c964:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c968:	e041      	b.n	800c9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c970:	2b00      	cmp	r3, #0
 800c972:	d002      	beq.n	800c97a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c974:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c978:	e039      	b.n	800c9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c980:	2b00      	cmp	r3, #0
 800c982:	d002      	beq.n	800c98a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c984:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c988:	e031      	b.n	800c9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c990:	2b00      	cmp	r3, #0
 800c992:	d002      	beq.n	800c99a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c994:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800c998:	e029      	b.n	800c9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d002      	beq.n	800c9aa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c9a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c9a8:	e021      	b.n	800c9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d002      	beq.n	800c9ba <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c9b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c9b8:	e019      	b.n	800c9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d002      	beq.n	800c9ca <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c9c4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800c9c8:	e011      	b.n	800c9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d002      	beq.n	800c9da <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c9d4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c9d8:	e009      	b.n	800c9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	f003 0308 	and.w	r3, r3, #8
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d002      	beq.n	800c9ea <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c9e4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800c9e8:	e001      	b.n	800c9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c9ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3720      	adds	r7, #32
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
 800c9f6:	bf00      	nop
 800c9f8:	20000028 	.word	0x20000028
 800c9fc:	10624dd3 	.word	0x10624dd3
 800ca00:	fdffe008 	.word	0xfdffe008

0800ca04 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b085      	sub	sp, #20
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ca0c:	4b1f      	ldr	r3, [pc, #124]	@ (800ca8c <SDMMC_GetCmdResp2+0x88>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a1f      	ldr	r2, [pc, #124]	@ (800ca90 <SDMMC_GetCmdResp2+0x8c>)
 800ca12:	fba2 2303 	umull	r2, r3, r2, r3
 800ca16:	0a5b      	lsrs	r3, r3, #9
 800ca18:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca1c:	fb02 f303 	mul.w	r3, r2, r3
 800ca20:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	1e5a      	subs	r2, r3, #1
 800ca26:	60fa      	str	r2, [r7, #12]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d102      	bne.n	800ca32 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca2c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ca30:	e026      	b.n	800ca80 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca36:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d0ef      	beq.n	800ca22 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d1ea      	bne.n	800ca22 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca50:	f003 0304 	and.w	r3, r3, #4
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d004      	beq.n	800ca62 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2204      	movs	r2, #4
 800ca5c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca5e:	2304      	movs	r3, #4
 800ca60:	e00e      	b.n	800ca80 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca66:	f003 0301 	and.w	r3, r3, #1
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d004      	beq.n	800ca78 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2201      	movs	r2, #1
 800ca72:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca74:	2301      	movs	r3, #1
 800ca76:	e003      	b.n	800ca80 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	22c5      	movs	r2, #197	@ 0xc5
 800ca7c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ca7e:	2300      	movs	r3, #0
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3714      	adds	r7, #20
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bc80      	pop	{r7}
 800ca88:	4770      	bx	lr
 800ca8a:	bf00      	nop
 800ca8c:	20000028 	.word	0x20000028
 800ca90:	10624dd3 	.word	0x10624dd3

0800ca94 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b085      	sub	sp, #20
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ca9c:	4b19      	ldr	r3, [pc, #100]	@ (800cb04 <SDMMC_GetCmdResp3+0x70>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4a19      	ldr	r2, [pc, #100]	@ (800cb08 <SDMMC_GetCmdResp3+0x74>)
 800caa2:	fba2 2303 	umull	r2, r3, r2, r3
 800caa6:	0a5b      	lsrs	r3, r3, #9
 800caa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800caac:	fb02 f303 	mul.w	r3, r2, r3
 800cab0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	1e5a      	subs	r2, r3, #1
 800cab6:	60fa      	str	r2, [r7, #12]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d102      	bne.n	800cac2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cabc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cac0:	e01b      	b.n	800cafa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cac6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d0ef      	beq.n	800cab2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d1ea      	bne.n	800cab2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cae0:	f003 0304 	and.w	r3, r3, #4
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d004      	beq.n	800caf2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2204      	movs	r2, #4
 800caec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800caee:	2304      	movs	r3, #4
 800caf0:	e003      	b.n	800cafa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	22c5      	movs	r2, #197	@ 0xc5
 800caf6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800caf8:	2300      	movs	r3, #0
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3714      	adds	r7, #20
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bc80      	pop	{r7}
 800cb02:	4770      	bx	lr
 800cb04:	20000028 	.word	0x20000028
 800cb08:	10624dd3 	.word	0x10624dd3

0800cb0c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b088      	sub	sp, #32
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	60f8      	str	r0, [r7, #12]
 800cb14:	460b      	mov	r3, r1
 800cb16:	607a      	str	r2, [r7, #4]
 800cb18:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cb1a:	4b35      	ldr	r3, [pc, #212]	@ (800cbf0 <SDMMC_GetCmdResp6+0xe4>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	4a35      	ldr	r2, [pc, #212]	@ (800cbf4 <SDMMC_GetCmdResp6+0xe8>)
 800cb20:	fba2 2303 	umull	r2, r3, r2, r3
 800cb24:	0a5b      	lsrs	r3, r3, #9
 800cb26:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb2a:	fb02 f303 	mul.w	r3, r2, r3
 800cb2e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800cb30:	69fb      	ldr	r3, [r7, #28]
 800cb32:	1e5a      	subs	r2, r3, #1
 800cb34:	61fa      	str	r2, [r7, #28]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d102      	bne.n	800cb40 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cb3a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cb3e:	e052      	b.n	800cbe6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb44:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cb46:	69bb      	ldr	r3, [r7, #24]
 800cb48:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d0ef      	beq.n	800cb30 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cb50:	69bb      	ldr	r3, [r7, #24]
 800cb52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d1ea      	bne.n	800cb30 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb5e:	f003 0304 	and.w	r3, r3, #4
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d004      	beq.n	800cb70 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	2204      	movs	r2, #4
 800cb6a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cb6c:	2304      	movs	r3, #4
 800cb6e:	e03a      	b.n	800cbe6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb74:	f003 0301 	and.w	r3, r3, #1
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d004      	beq.n	800cb86 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2201      	movs	r2, #1
 800cb80:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb82:	2301      	movs	r3, #1
 800cb84:	e02f      	b.n	800cbe6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800cb86:	68f8      	ldr	r0, [r7, #12]
 800cb88:	f7ff fc13 	bl	800c3b2 <SDIO_GetCommandResponse>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	461a      	mov	r2, r3
 800cb90:	7afb      	ldrb	r3, [r7, #11]
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d001      	beq.n	800cb9a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb96:	2301      	movs	r3, #1
 800cb98:	e025      	b.n	800cbe6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	22c5      	movs	r2, #197	@ 0xc5
 800cb9e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800cba0:	2100      	movs	r1, #0
 800cba2:	68f8      	ldr	r0, [r7, #12]
 800cba4:	f7ff fc11 	bl	800c3ca <SDIO_GetResponse>
 800cba8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d106      	bne.n	800cbc2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	0c1b      	lsrs	r3, r3, #16
 800cbb8:	b29a      	uxth	r2, r3
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	e011      	b.n	800cbe6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d002      	beq.n	800cbd2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cbcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cbd0:	e009      	b.n	800cbe6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d002      	beq.n	800cbe2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cbdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cbe0:	e001      	b.n	800cbe6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cbe2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3720      	adds	r7, #32
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	20000028 	.word	0x20000028
 800cbf4:	10624dd3 	.word	0x10624dd3

0800cbf8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b085      	sub	sp, #20
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc00:	4b22      	ldr	r3, [pc, #136]	@ (800cc8c <SDMMC_GetCmdResp7+0x94>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4a22      	ldr	r2, [pc, #136]	@ (800cc90 <SDMMC_GetCmdResp7+0x98>)
 800cc06:	fba2 2303 	umull	r2, r3, r2, r3
 800cc0a:	0a5b      	lsrs	r3, r3, #9
 800cc0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc10:	fb02 f303 	mul.w	r3, r2, r3
 800cc14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	1e5a      	subs	r2, r3, #1
 800cc1a:	60fa      	str	r2, [r7, #12]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d102      	bne.n	800cc26 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc20:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cc24:	e02c      	b.n	800cc80 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc2a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d0ef      	beq.n	800cc16 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d1ea      	bne.n	800cc16 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc44:	f003 0304 	and.w	r3, r3, #4
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d004      	beq.n	800cc56 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2204      	movs	r2, #4
 800cc50:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc52:	2304      	movs	r3, #4
 800cc54:	e014      	b.n	800cc80 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc5a:	f003 0301 	and.w	r3, r3, #1
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d004      	beq.n	800cc6c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2201      	movs	r2, #1
 800cc66:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	e009      	b.n	800cc80 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d002      	beq.n	800cc7e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2240      	movs	r2, #64	@ 0x40
 800cc7c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cc7e:	2300      	movs	r3, #0
  
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3714      	adds	r7, #20
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bc80      	pop	{r7}
 800cc88:	4770      	bx	lr
 800cc8a:	bf00      	nop
 800cc8c:	20000028 	.word	0x20000028
 800cc90:	10624dd3 	.word	0x10624dd3

0800cc94 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b085      	sub	sp, #20
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc9c:	4b10      	ldr	r3, [pc, #64]	@ (800cce0 <SDMMC_GetCmdError+0x4c>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a10      	ldr	r2, [pc, #64]	@ (800cce4 <SDMMC_GetCmdError+0x50>)
 800cca2:	fba2 2303 	umull	r2, r3, r2, r3
 800cca6:	0a5b      	lsrs	r3, r3, #9
 800cca8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ccac:	fb02 f303 	mul.w	r3, r2, r3
 800ccb0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	1e5a      	subs	r2, r3, #1
 800ccb6:	60fa      	str	r2, [r7, #12]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d102      	bne.n	800ccc2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ccbc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ccc0:	e009      	b.n	800ccd6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d0f1      	beq.n	800ccb2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	22c5      	movs	r2, #197	@ 0xc5
 800ccd2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800ccd4:	2300      	movs	r3, #0
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3714      	adds	r7, #20
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bc80      	pop	{r7}
 800ccde:	4770      	bx	lr
 800cce0:	20000028 	.word	0x20000028
 800cce4:	10624dd3 	.word	0x10624dd3

0800cce8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ccec:	4904      	ldr	r1, [pc, #16]	@ (800cd00 <MX_FATFS_Init+0x18>)
 800ccee:	4805      	ldr	r0, [pc, #20]	@ (800cd04 <MX_FATFS_Init+0x1c>)
 800ccf0:	f003 f958 	bl	800ffa4 <FATFS_LinkDriver>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	4b03      	ldr	r3, [pc, #12]	@ (800cd08 <MX_FATFS_Init+0x20>)
 800ccfa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ccfc:	bf00      	nop
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	20000e14 	.word	0x20000e14
 800cd04:	08013588 	.word	0x08013588
 800cd08:	20000e10 	.word	0x20000e10

0800cd0c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cd10:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bc80      	pop	{r7}
 800cd18:	4770      	bx	lr
	...

0800cd1c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b082      	sub	sp, #8
 800cd20:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cd22:	2300      	movs	r3, #0
 800cd24:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800cd26:	f000 f86b 	bl	800ce00 <BSP_SD_IsDetected>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	d001      	beq.n	800cd34 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800cd30:	2301      	movs	r3, #1
 800cd32:	e005      	b.n	800cd40 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800cd34:	4804      	ldr	r0, [pc, #16]	@ (800cd48 <BSP_SD_Init+0x2c>)
 800cd36:	f7fc fba1 	bl	800947c <HAL_SD_Init>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800cd3e:	79fb      	ldrb	r3, [r7, #7]
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3708      	adds	r7, #8
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	20000888 	.word	0x20000888

0800cd4c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b088      	sub	sp, #32
 800cd50:	af02      	add	r7, sp, #8
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	607a      	str	r2, [r7, #4]
 800cd58:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	9300      	str	r3, [sp, #0]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	68ba      	ldr	r2, [r7, #8]
 800cd66:	68f9      	ldr	r1, [r7, #12]
 800cd68:	4806      	ldr	r0, [pc, #24]	@ (800cd84 <BSP_SD_ReadBlocks+0x38>)
 800cd6a:	f7fc fc37 	bl	80095dc <HAL_SD_ReadBlocks>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d001      	beq.n	800cd78 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cd74:	2301      	movs	r3, #1
 800cd76:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cd78:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3718      	adds	r7, #24
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	bf00      	nop
 800cd84:	20000888 	.word	0x20000888

0800cd88 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b088      	sub	sp, #32
 800cd8c:	af02      	add	r7, sp, #8
 800cd8e:	60f8      	str	r0, [r7, #12]
 800cd90:	60b9      	str	r1, [r7, #8]
 800cd92:	607a      	str	r2, [r7, #4]
 800cd94:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cd96:	2300      	movs	r3, #0
 800cd98:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	9300      	str	r3, [sp, #0]
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	68ba      	ldr	r2, [r7, #8]
 800cda2:	68f9      	ldr	r1, [r7, #12]
 800cda4:	4806      	ldr	r0, [pc, #24]	@ (800cdc0 <BSP_SD_WriteBlocks+0x38>)
 800cda6:	f7fc fdf7 	bl	8009998 <HAL_SD_WriteBlocks>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d001      	beq.n	800cdb4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cdb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3718      	adds	r7, #24
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}
 800cdbe:	bf00      	nop
 800cdc0:	20000888 	.word	0x20000888

0800cdc4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cdc8:	4805      	ldr	r0, [pc, #20]	@ (800cde0 <BSP_SD_GetCardState+0x1c>)
 800cdca:	f7fd f93a 	bl	800a042 <HAL_SD_GetCardState>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	2b04      	cmp	r3, #4
 800cdd2:	bf14      	ite	ne
 800cdd4:	2301      	movne	r3, #1
 800cdd6:	2300      	moveq	r3, #0
 800cdd8:	b2db      	uxtb	r3, r3
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	bd80      	pop	{r7, pc}
 800cdde:	bf00      	nop
 800cde0:	20000888 	.word	0x20000888

0800cde4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b082      	sub	sp, #8
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800cdec:	6879      	ldr	r1, [r7, #4]
 800cdee:	4803      	ldr	r0, [pc, #12]	@ (800cdfc <BSP_SD_GetCardInfo+0x18>)
 800cdf0:	f7fd f8fc 	bl	8009fec <HAL_SD_GetCardInfo>
}
 800cdf4:	bf00      	nop
 800cdf6:	3708      	adds	r7, #8
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}
 800cdfc:	20000888 	.word	0x20000888

0800ce00 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b083      	sub	sp, #12
 800ce04:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ce06:	2301      	movs	r3, #1
 800ce08:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800ce0a:	79fb      	ldrb	r3, [r7, #7]
 800ce0c:	b2db      	uxtb	r3, r3
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	370c      	adds	r7, #12
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bc80      	pop	{r7}
 800ce16:	4770      	bx	lr

0800ce18 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	4603      	mov	r3, r0
 800ce20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ce22:	79fb      	ldrb	r3, [r7, #7]
 800ce24:	4a08      	ldr	r2, [pc, #32]	@ (800ce48 <disk_status+0x30>)
 800ce26:	009b      	lsls	r3, r3, #2
 800ce28:	4413      	add	r3, r2
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	79fa      	ldrb	r2, [r7, #7]
 800ce30:	4905      	ldr	r1, [pc, #20]	@ (800ce48 <disk_status+0x30>)
 800ce32:	440a      	add	r2, r1
 800ce34:	7a12      	ldrb	r2, [r2, #8]
 800ce36:	4610      	mov	r0, r2
 800ce38:	4798      	blx	r3
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ce3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3710      	adds	r7, #16
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	20001298 	.word	0x20001298

0800ce4c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	4603      	mov	r3, r0
 800ce54:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ce56:	2300      	movs	r3, #0
 800ce58:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800ce5a:	79fb      	ldrb	r3, [r7, #7]
 800ce5c:	4a0d      	ldr	r2, [pc, #52]	@ (800ce94 <disk_initialize+0x48>)
 800ce5e:	5cd3      	ldrb	r3, [r2, r3]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d111      	bne.n	800ce88 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800ce64:	79fb      	ldrb	r3, [r7, #7]
 800ce66:	4a0b      	ldr	r2, [pc, #44]	@ (800ce94 <disk_initialize+0x48>)
 800ce68:	2101      	movs	r1, #1
 800ce6a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ce6c:	79fb      	ldrb	r3, [r7, #7]
 800ce6e:	4a09      	ldr	r2, [pc, #36]	@ (800ce94 <disk_initialize+0x48>)
 800ce70:	009b      	lsls	r3, r3, #2
 800ce72:	4413      	add	r3, r2
 800ce74:	685b      	ldr	r3, [r3, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	79fa      	ldrb	r2, [r7, #7]
 800ce7a:	4906      	ldr	r1, [pc, #24]	@ (800ce94 <disk_initialize+0x48>)
 800ce7c:	440a      	add	r2, r1
 800ce7e:	7a12      	ldrb	r2, [r2, #8]
 800ce80:	4610      	mov	r0, r2
 800ce82:	4798      	blx	r3
 800ce84:	4603      	mov	r3, r0
 800ce86:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ce88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3710      	adds	r7, #16
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}
 800ce92:	bf00      	nop
 800ce94:	20001298 	.word	0x20001298

0800ce98 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ce98:	b590      	push	{r4, r7, lr}
 800ce9a:	b087      	sub	sp, #28
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	60b9      	str	r1, [r7, #8]
 800cea0:	607a      	str	r2, [r7, #4]
 800cea2:	603b      	str	r3, [r7, #0]
 800cea4:	4603      	mov	r3, r0
 800cea6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cea8:	7bfb      	ldrb	r3, [r7, #15]
 800ceaa:	4a0a      	ldr	r2, [pc, #40]	@ (800ced4 <disk_read+0x3c>)
 800ceac:	009b      	lsls	r3, r3, #2
 800ceae:	4413      	add	r3, r2
 800ceb0:	685b      	ldr	r3, [r3, #4]
 800ceb2:	689c      	ldr	r4, [r3, #8]
 800ceb4:	7bfb      	ldrb	r3, [r7, #15]
 800ceb6:	4a07      	ldr	r2, [pc, #28]	@ (800ced4 <disk_read+0x3c>)
 800ceb8:	4413      	add	r3, r2
 800ceba:	7a18      	ldrb	r0, [r3, #8]
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	68b9      	ldr	r1, [r7, #8]
 800cec2:	47a0      	blx	r4
 800cec4:	4603      	mov	r3, r0
 800cec6:	75fb      	strb	r3, [r7, #23]
  return res;
 800cec8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	371c      	adds	r7, #28
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd90      	pop	{r4, r7, pc}
 800ced2:	bf00      	nop
 800ced4:	20001298 	.word	0x20001298

0800ced8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ced8:	b590      	push	{r4, r7, lr}
 800ceda:	b087      	sub	sp, #28
 800cedc:	af00      	add	r7, sp, #0
 800cede:	60b9      	str	r1, [r7, #8]
 800cee0:	607a      	str	r2, [r7, #4]
 800cee2:	603b      	str	r3, [r7, #0]
 800cee4:	4603      	mov	r3, r0
 800cee6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cee8:	7bfb      	ldrb	r3, [r7, #15]
 800ceea:	4a0a      	ldr	r2, [pc, #40]	@ (800cf14 <disk_write+0x3c>)
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	4413      	add	r3, r2
 800cef0:	685b      	ldr	r3, [r3, #4]
 800cef2:	68dc      	ldr	r4, [r3, #12]
 800cef4:	7bfb      	ldrb	r3, [r7, #15]
 800cef6:	4a07      	ldr	r2, [pc, #28]	@ (800cf14 <disk_write+0x3c>)
 800cef8:	4413      	add	r3, r2
 800cefa:	7a18      	ldrb	r0, [r3, #8]
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	68b9      	ldr	r1, [r7, #8]
 800cf02:	47a0      	blx	r4
 800cf04:	4603      	mov	r3, r0
 800cf06:	75fb      	strb	r3, [r7, #23]
  return res;
 800cf08:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	371c      	adds	r7, #28
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd90      	pop	{r4, r7, pc}
 800cf12:	bf00      	nop
 800cf14:	20001298 	.word	0x20001298

0800cf18 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b084      	sub	sp, #16
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	4603      	mov	r3, r0
 800cf20:	603a      	str	r2, [r7, #0]
 800cf22:	71fb      	strb	r3, [r7, #7]
 800cf24:	460b      	mov	r3, r1
 800cf26:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cf28:	79fb      	ldrb	r3, [r7, #7]
 800cf2a:	4a09      	ldr	r2, [pc, #36]	@ (800cf50 <disk_ioctl+0x38>)
 800cf2c:	009b      	lsls	r3, r3, #2
 800cf2e:	4413      	add	r3, r2
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	691b      	ldr	r3, [r3, #16]
 800cf34:	79fa      	ldrb	r2, [r7, #7]
 800cf36:	4906      	ldr	r1, [pc, #24]	@ (800cf50 <disk_ioctl+0x38>)
 800cf38:	440a      	add	r2, r1
 800cf3a:	7a10      	ldrb	r0, [r2, #8]
 800cf3c:	79b9      	ldrb	r1, [r7, #6]
 800cf3e:	683a      	ldr	r2, [r7, #0]
 800cf40:	4798      	blx	r3
 800cf42:	4603      	mov	r3, r0
 800cf44:	73fb      	strb	r3, [r7, #15]
  return res;
 800cf46:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3710      	adds	r7, #16
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}
 800cf50:	20001298 	.word	0x20001298

0800cf54 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cf54:	b480      	push	{r7}
 800cf56:	b087      	sub	sp, #28
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	60f8      	str	r0, [r7, #12]
 800cf5c:	60b9      	str	r1, [r7, #8]
 800cf5e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800cf68:	e007      	b.n	800cf7a <mem_cpy+0x26>
		*d++ = *s++;
 800cf6a:	693a      	ldr	r2, [r7, #16]
 800cf6c:	1c53      	adds	r3, r2, #1
 800cf6e:	613b      	str	r3, [r7, #16]
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	1c59      	adds	r1, r3, #1
 800cf74:	6179      	str	r1, [r7, #20]
 800cf76:	7812      	ldrb	r2, [r2, #0]
 800cf78:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	1e5a      	subs	r2, r3, #1
 800cf7e:	607a      	str	r2, [r7, #4]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d1f2      	bne.n	800cf6a <mem_cpy+0x16>
}
 800cf84:	bf00      	nop
 800cf86:	bf00      	nop
 800cf88:	371c      	adds	r7, #28
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bc80      	pop	{r7}
 800cf8e:	4770      	bx	lr

0800cf90 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cf90:	b480      	push	{r7}
 800cf92:	b087      	sub	sp, #28
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	60b9      	str	r1, [r7, #8]
 800cf9a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800cfa0:	e005      	b.n	800cfae <mem_set+0x1e>
		*d++ = (BYTE)val;
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	1c5a      	adds	r2, r3, #1
 800cfa6:	617a      	str	r2, [r7, #20]
 800cfa8:	68ba      	ldr	r2, [r7, #8]
 800cfaa:	b2d2      	uxtb	r2, r2
 800cfac:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	1e5a      	subs	r2, r3, #1
 800cfb2:	607a      	str	r2, [r7, #4]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d1f4      	bne.n	800cfa2 <mem_set+0x12>
}
 800cfb8:	bf00      	nop
 800cfba:	bf00      	nop
 800cfbc:	371c      	adds	r7, #28
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bc80      	pop	{r7}
 800cfc2:	4770      	bx	lr

0800cfc4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800cfc4:	b480      	push	{r7}
 800cfc6:	b089      	sub	sp, #36	@ 0x24
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	60f8      	str	r0, [r7, #12]
 800cfcc:	60b9      	str	r1, [r7, #8]
 800cfce:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	61fb      	str	r3, [r7, #28]
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800cfdc:	bf00      	nop
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	1e5a      	subs	r2, r3, #1
 800cfe2:	607a      	str	r2, [r7, #4]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d00d      	beq.n	800d004 <mem_cmp+0x40>
 800cfe8:	69fb      	ldr	r3, [r7, #28]
 800cfea:	1c5a      	adds	r2, r3, #1
 800cfec:	61fa      	str	r2, [r7, #28]
 800cfee:	781b      	ldrb	r3, [r3, #0]
 800cff0:	4619      	mov	r1, r3
 800cff2:	69bb      	ldr	r3, [r7, #24]
 800cff4:	1c5a      	adds	r2, r3, #1
 800cff6:	61ba      	str	r2, [r7, #24]
 800cff8:	781b      	ldrb	r3, [r3, #0]
 800cffa:	1acb      	subs	r3, r1, r3
 800cffc:	617b      	str	r3, [r7, #20]
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d0ec      	beq.n	800cfde <mem_cmp+0x1a>
	return r;
 800d004:	697b      	ldr	r3, [r7, #20]
}
 800d006:	4618      	mov	r0, r3
 800d008:	3724      	adds	r7, #36	@ 0x24
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bc80      	pop	{r7}
 800d00e:	4770      	bx	lr

0800d010 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d01a:	e002      	b.n	800d022 <chk_chr+0x12>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	3301      	adds	r3, #1
 800d020:	607b      	str	r3, [r7, #4]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d005      	beq.n	800d036 <chk_chr+0x26>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	781b      	ldrb	r3, [r3, #0]
 800d02e:	461a      	mov	r2, r3
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	4293      	cmp	r3, r2
 800d034:	d1f2      	bne.n	800d01c <chk_chr+0xc>
	return *str;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	781b      	ldrb	r3, [r3, #0]
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	370c      	adds	r7, #12
 800d03e:	46bd      	mov	sp, r7
 800d040:	bc80      	pop	{r7}
 800d042:	4770      	bx	lr

0800d044 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800d052:	4618      	mov	r0, r3
 800d054:	f003 f938 	bl	80102c8 <ff_req_grant>
 800d058:	4603      	mov	r3, r0
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3708      	adds	r7, #8
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}

0800d062 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800d062:	b580      	push	{r7, lr}
 800d064:	b082      	sub	sp, #8
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
 800d06a:	460b      	mov	r3, r1
 800d06c:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d011      	beq.n	800d098 <unlock_fs+0x36>
 800d074:	78fb      	ldrb	r3, [r7, #3]
 800d076:	2b0c      	cmp	r3, #12
 800d078:	d00e      	beq.n	800d098 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 800d07a:	78fb      	ldrb	r3, [r7, #3]
 800d07c:	2b0b      	cmp	r3, #11
 800d07e:	d00b      	beq.n	800d098 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 800d080:	78fb      	ldrb	r3, [r7, #3]
 800d082:	2b09      	cmp	r3, #9
 800d084:	d008      	beq.n	800d098 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 800d086:	78fb      	ldrb	r3, [r7, #3]
 800d088:	2b0f      	cmp	r3, #15
 800d08a:	d005      	beq.n	800d098 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800d092:	4618      	mov	r0, r3
 800d094:	f003 f92d 	bl	80102f2 <ff_rel_grant>
	}
}
 800d098:	bf00      	nop
 800d09a:	3708      	adds	r7, #8
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b085      	sub	sp, #20
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	60bb      	str	r3, [r7, #8]
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	60fb      	str	r3, [r7, #12]
 800d0b2:	e038      	b.n	800d126 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800d0b4:	492f      	ldr	r1, [pc, #188]	@ (800d174 <chk_lock+0xd4>)
 800d0b6:	68fa      	ldr	r2, [r7, #12]
 800d0b8:	4613      	mov	r3, r2
 800d0ba:	005b      	lsls	r3, r3, #1
 800d0bc:	4413      	add	r3, r2
 800d0be:	009b      	lsls	r3, r3, #2
 800d0c0:	440b      	add	r3, r1
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d029      	beq.n	800d11c <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800d0c8:	492a      	ldr	r1, [pc, #168]	@ (800d174 <chk_lock+0xd4>)
 800d0ca:	68fa      	ldr	r2, [r7, #12]
 800d0cc:	4613      	mov	r3, r2
 800d0ce:	005b      	lsls	r3, r3, #1
 800d0d0:	4413      	add	r3, r2
 800d0d2:	009b      	lsls	r3, r3, #2
 800d0d4:	440b      	add	r3, r1
 800d0d6:	681a      	ldr	r2, [r3, #0]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	d11e      	bne.n	800d120 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800d0e2:	4924      	ldr	r1, [pc, #144]	@ (800d174 <chk_lock+0xd4>)
 800d0e4:	68fa      	ldr	r2, [r7, #12]
 800d0e6:	4613      	mov	r3, r2
 800d0e8:	005b      	lsls	r3, r3, #1
 800d0ea:	4413      	add	r3, r2
 800d0ec:	009b      	lsls	r3, r3, #2
 800d0ee:	440b      	add	r3, r1
 800d0f0:	3304      	adds	r3, #4
 800d0f2:	681a      	ldr	r2, [r3, #0]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	d110      	bne.n	800d120 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800d0fe:	491d      	ldr	r1, [pc, #116]	@ (800d174 <chk_lock+0xd4>)
 800d100:	68fa      	ldr	r2, [r7, #12]
 800d102:	4613      	mov	r3, r2
 800d104:	005b      	lsls	r3, r3, #1
 800d106:	4413      	add	r3, r2
 800d108:	009b      	lsls	r3, r3, #2
 800d10a:	440b      	add	r3, r1
 800d10c:	3308      	adds	r3, #8
 800d10e:	881a      	ldrh	r2, [r3, #0]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
				Files[i].clu == dp->sclust &&
 800d116:	429a      	cmp	r2, r3
 800d118:	d102      	bne.n	800d120 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800d11a:	e007      	b.n	800d12c <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800d11c:	2301      	movs	r3, #1
 800d11e:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	3301      	adds	r3, #1
 800d124:	60fb      	str	r3, [r7, #12]
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	2b01      	cmp	r3, #1
 800d12a:	d9c3      	bls.n	800d0b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2b02      	cmp	r3, #2
 800d130:	d109      	bne.n	800d146 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d102      	bne.n	800d13e <chk_lock+0x9e>
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	2b02      	cmp	r3, #2
 800d13c:	d101      	bne.n	800d142 <chk_lock+0xa2>
 800d13e:	2300      	movs	r3, #0
 800d140:	e013      	b.n	800d16a <chk_lock+0xca>
 800d142:	2312      	movs	r3, #18
 800d144:	e011      	b.n	800d16a <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d10b      	bne.n	800d164 <chk_lock+0xc4>
 800d14c:	4909      	ldr	r1, [pc, #36]	@ (800d174 <chk_lock+0xd4>)
 800d14e:	68fa      	ldr	r2, [r7, #12]
 800d150:	4613      	mov	r3, r2
 800d152:	005b      	lsls	r3, r3, #1
 800d154:	4413      	add	r3, r2
 800d156:	009b      	lsls	r3, r3, #2
 800d158:	440b      	add	r3, r1
 800d15a:	330a      	adds	r3, #10
 800d15c:	881b      	ldrh	r3, [r3, #0]
 800d15e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d162:	d101      	bne.n	800d168 <chk_lock+0xc8>
 800d164:	2310      	movs	r3, #16
 800d166:	e000      	b.n	800d16a <chk_lock+0xca>
 800d168:	2300      	movs	r3, #0
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3714      	adds	r7, #20
 800d16e:	46bd      	mov	sp, r7
 800d170:	bc80      	pop	{r7}
 800d172:	4770      	bx	lr
 800d174:	20001280 	.word	0x20001280

0800d178 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d178:	b480      	push	{r7}
 800d17a:	b083      	sub	sp, #12
 800d17c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d17e:	2300      	movs	r3, #0
 800d180:	607b      	str	r3, [r7, #4]
 800d182:	e002      	b.n	800d18a <enq_lock+0x12>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	3301      	adds	r3, #1
 800d188:	607b      	str	r3, [r7, #4]
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2b01      	cmp	r3, #1
 800d18e:	d809      	bhi.n	800d1a4 <enq_lock+0x2c>
 800d190:	490a      	ldr	r1, [pc, #40]	@ (800d1bc <enq_lock+0x44>)
 800d192:	687a      	ldr	r2, [r7, #4]
 800d194:	4613      	mov	r3, r2
 800d196:	005b      	lsls	r3, r3, #1
 800d198:	4413      	add	r3, r2
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	440b      	add	r3, r1
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d1ef      	bne.n	800d184 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2b02      	cmp	r3, #2
 800d1a8:	bf14      	ite	ne
 800d1aa:	2301      	movne	r3, #1
 800d1ac:	2300      	moveq	r3, #0
 800d1ae:	b2db      	uxtb	r3, r3
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	370c      	adds	r7, #12
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bc80      	pop	{r7}
 800d1b8:	4770      	bx	lr
 800d1ba:	bf00      	nop
 800d1bc:	20001280 	.word	0x20001280

0800d1c0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b085      	sub	sp, #20
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	60fb      	str	r3, [r7, #12]
 800d1ce:	e02b      	b.n	800d228 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800d1d0:	4955      	ldr	r1, [pc, #340]	@ (800d328 <inc_lock+0x168>)
 800d1d2:	68fa      	ldr	r2, [r7, #12]
 800d1d4:	4613      	mov	r3, r2
 800d1d6:	005b      	lsls	r3, r3, #1
 800d1d8:	4413      	add	r3, r2
 800d1da:	009b      	lsls	r3, r3, #2
 800d1dc:	440b      	add	r3, r1
 800d1de:	681a      	ldr	r2, [r3, #0]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d11b      	bne.n	800d222 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800d1ea:	494f      	ldr	r1, [pc, #316]	@ (800d328 <inc_lock+0x168>)
 800d1ec:	68fa      	ldr	r2, [r7, #12]
 800d1ee:	4613      	mov	r3, r2
 800d1f0:	005b      	lsls	r3, r3, #1
 800d1f2:	4413      	add	r3, r2
 800d1f4:	009b      	lsls	r3, r3, #2
 800d1f6:	440b      	add	r3, r1
 800d1f8:	3304      	adds	r3, #4
 800d1fa:	681a      	ldr	r2, [r3, #0]
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
		if (Files[i].fs == dp->fs &&
 800d202:	429a      	cmp	r2, r3
 800d204:	d10d      	bne.n	800d222 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800d206:	4948      	ldr	r1, [pc, #288]	@ (800d328 <inc_lock+0x168>)
 800d208:	68fa      	ldr	r2, [r7, #12]
 800d20a:	4613      	mov	r3, r2
 800d20c:	005b      	lsls	r3, r3, #1
 800d20e:	4413      	add	r3, r2
 800d210:	009b      	lsls	r3, r3, #2
 800d212:	440b      	add	r3, r1
 800d214:	3308      	adds	r3, #8
 800d216:	881a      	ldrh	r2, [r3, #0]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
			Files[i].clu == dp->sclust &&
 800d21e:	429a      	cmp	r2, r3
 800d220:	d006      	beq.n	800d230 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	3301      	adds	r3, #1
 800d226:	60fb      	str	r3, [r7, #12]
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	d9d0      	bls.n	800d1d0 <inc_lock+0x10>
 800d22e:	e000      	b.n	800d232 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800d230:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2b02      	cmp	r3, #2
 800d236:	d145      	bne.n	800d2c4 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d238:	2300      	movs	r3, #0
 800d23a:	60fb      	str	r3, [r7, #12]
 800d23c:	e002      	b.n	800d244 <inc_lock+0x84>
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	3301      	adds	r3, #1
 800d242:	60fb      	str	r3, [r7, #12]
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	2b01      	cmp	r3, #1
 800d248:	d809      	bhi.n	800d25e <inc_lock+0x9e>
 800d24a:	4937      	ldr	r1, [pc, #220]	@ (800d328 <inc_lock+0x168>)
 800d24c:	68fa      	ldr	r2, [r7, #12]
 800d24e:	4613      	mov	r3, r2
 800d250:	005b      	lsls	r3, r3, #1
 800d252:	4413      	add	r3, r2
 800d254:	009b      	lsls	r3, r3, #2
 800d256:	440b      	add	r3, r1
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d1ef      	bne.n	800d23e <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	2b02      	cmp	r3, #2
 800d262:	d101      	bne.n	800d268 <inc_lock+0xa8>
 800d264:	2300      	movs	r3, #0
 800d266:	e05a      	b.n	800d31e <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
 800d26e:	482e      	ldr	r0, [pc, #184]	@ (800d328 <inc_lock+0x168>)
 800d270:	68fa      	ldr	r2, [r7, #12]
 800d272:	4613      	mov	r3, r2
 800d274:	005b      	lsls	r3, r3, #1
 800d276:	4413      	add	r3, r2
 800d278:	009b      	lsls	r3, r3, #2
 800d27a:	4403      	add	r3, r0
 800d27c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 800d284:	4828      	ldr	r0, [pc, #160]	@ (800d328 <inc_lock+0x168>)
 800d286:	68fa      	ldr	r2, [r7, #12]
 800d288:	4613      	mov	r3, r2
 800d28a:	005b      	lsls	r3, r3, #1
 800d28c:	4413      	add	r3, r2
 800d28e:	009b      	lsls	r3, r3, #2
 800d290:	4403      	add	r3, r0
 800d292:	3304      	adds	r3, #4
 800d294:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f8b3 0206 	ldrh.w	r0, [r3, #518]	@ 0x206
 800d29c:	4922      	ldr	r1, [pc, #136]	@ (800d328 <inc_lock+0x168>)
 800d29e:	68fa      	ldr	r2, [r7, #12]
 800d2a0:	4613      	mov	r3, r2
 800d2a2:	005b      	lsls	r3, r3, #1
 800d2a4:	4413      	add	r3, r2
 800d2a6:	009b      	lsls	r3, r3, #2
 800d2a8:	440b      	add	r3, r1
 800d2aa:	3308      	adds	r3, #8
 800d2ac:	4602      	mov	r2, r0
 800d2ae:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800d2b0:	491d      	ldr	r1, [pc, #116]	@ (800d328 <inc_lock+0x168>)
 800d2b2:	68fa      	ldr	r2, [r7, #12]
 800d2b4:	4613      	mov	r3, r2
 800d2b6:	005b      	lsls	r3, r3, #1
 800d2b8:	4413      	add	r3, r2
 800d2ba:	009b      	lsls	r3, r3, #2
 800d2bc:	440b      	add	r3, r1
 800d2be:	330a      	adds	r3, #10
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d00c      	beq.n	800d2e4 <inc_lock+0x124>
 800d2ca:	4917      	ldr	r1, [pc, #92]	@ (800d328 <inc_lock+0x168>)
 800d2cc:	68fa      	ldr	r2, [r7, #12]
 800d2ce:	4613      	mov	r3, r2
 800d2d0:	005b      	lsls	r3, r3, #1
 800d2d2:	4413      	add	r3, r2
 800d2d4:	009b      	lsls	r3, r3, #2
 800d2d6:	440b      	add	r3, r1
 800d2d8:	330a      	adds	r3, #10
 800d2da:	881b      	ldrh	r3, [r3, #0]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d001      	beq.n	800d2e4 <inc_lock+0x124>
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	e01c      	b.n	800d31e <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d10b      	bne.n	800d302 <inc_lock+0x142>
 800d2ea:	490f      	ldr	r1, [pc, #60]	@ (800d328 <inc_lock+0x168>)
 800d2ec:	68fa      	ldr	r2, [r7, #12]
 800d2ee:	4613      	mov	r3, r2
 800d2f0:	005b      	lsls	r3, r3, #1
 800d2f2:	4413      	add	r3, r2
 800d2f4:	009b      	lsls	r3, r3, #2
 800d2f6:	440b      	add	r3, r1
 800d2f8:	330a      	adds	r3, #10
 800d2fa:	881b      	ldrh	r3, [r3, #0]
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	b299      	uxth	r1, r3
 800d300:	e001      	b.n	800d306 <inc_lock+0x146>
 800d302:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d306:	4808      	ldr	r0, [pc, #32]	@ (800d328 <inc_lock+0x168>)
 800d308:	68fa      	ldr	r2, [r7, #12]
 800d30a:	4613      	mov	r3, r2
 800d30c:	005b      	lsls	r3, r3, #1
 800d30e:	4413      	add	r3, r2
 800d310:	009b      	lsls	r3, r3, #2
 800d312:	4403      	add	r3, r0
 800d314:	330a      	adds	r3, #10
 800d316:	460a      	mov	r2, r1
 800d318:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	3301      	adds	r3, #1
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3714      	adds	r7, #20
 800d322:	46bd      	mov	sp, r7
 800d324:	bc80      	pop	{r7}
 800d326:	4770      	bx	lr
 800d328:	20001280 	.word	0x20001280

0800d32c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b085      	sub	sp, #20
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d334:	2300      	movs	r3, #0
 800d336:	60fb      	str	r3, [r7, #12]
 800d338:	e016      	b.n	800d368 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d33a:	4910      	ldr	r1, [pc, #64]	@ (800d37c <clear_lock+0x50>)
 800d33c:	68fa      	ldr	r2, [r7, #12]
 800d33e:	4613      	mov	r3, r2
 800d340:	005b      	lsls	r3, r3, #1
 800d342:	4413      	add	r3, r2
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	440b      	add	r3, r1
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d108      	bne.n	800d362 <clear_lock+0x36>
 800d350:	490a      	ldr	r1, [pc, #40]	@ (800d37c <clear_lock+0x50>)
 800d352:	68fa      	ldr	r2, [r7, #12]
 800d354:	4613      	mov	r3, r2
 800d356:	005b      	lsls	r3, r3, #1
 800d358:	4413      	add	r3, r2
 800d35a:	009b      	lsls	r3, r3, #2
 800d35c:	440b      	add	r3, r1
 800d35e:	2200      	movs	r2, #0
 800d360:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	3301      	adds	r3, #1
 800d366:	60fb      	str	r3, [r7, #12]
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	2b01      	cmp	r3, #1
 800d36c:	d9e5      	bls.n	800d33a <clear_lock+0xe>
	}
}
 800d36e:	bf00      	nop
 800d370:	bf00      	nop
 800d372:	3714      	adds	r7, #20
 800d374:	46bd      	mov	sp, r7
 800d376:	bc80      	pop	{r7}
 800d378:	4770      	bx	lr
 800d37a:	bf00      	nop
 800d37c:	20001280 	.word	0x20001280

0800d380 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b086      	sub	sp, #24
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d388:	2300      	movs	r3, #0
 800d38a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 800d392:	2b00      	cmp	r3, #0
 800d394:	d038      	beq.n	800d408 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 800d39c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800d3a4:	6879      	ldr	r1, [r7, #4]
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	697a      	ldr	r2, [r7, #20]
 800d3aa:	f7ff fd95 	bl	800ced8 <disk_write>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d002      	beq.n	800d3ba <sync_window+0x3a>
			res = FR_DISK_ERR;
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	73fb      	strb	r3, [r7, #15]
 800d3b8:	e026      	b.n	800d408 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800d3c8:	697a      	ldr	r2, [r7, #20]
 800d3ca:	1ad2      	subs	r2, r2, r3
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d218      	bcs.n	800d408 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800d3dc:	613b      	str	r3, [r7, #16]
 800d3de:	e010      	b.n	800d402 <sync_window+0x82>
					wsect += fs->fsize;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800d3e6:	697a      	ldr	r2, [r7, #20]
 800d3e8:	4413      	add	r3, r2
 800d3ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800d3f2:	6879      	ldr	r1, [r7, #4]
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	697a      	ldr	r2, [r7, #20]
 800d3f8:	f7ff fd6e 	bl	800ced8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	3b01      	subs	r3, #1
 800d400:	613b      	str	r3, [r7, #16]
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	2b01      	cmp	r3, #1
 800d406:	d8eb      	bhi.n	800d3e0 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800d408:	7bfb      	ldrb	r3, [r7, #15]
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	3718      	adds	r7, #24
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}

0800d412 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800d412:	b580      	push	{r7, lr}
 800d414:	b084      	sub	sp, #16
 800d416:	af00      	add	r7, sp, #0
 800d418:	6078      	str	r0, [r7, #4]
 800d41a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d41c:	2300      	movs	r3, #0
 800d41e:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 800d426:	683a      	ldr	r2, [r7, #0]
 800d428:	429a      	cmp	r2, r3
 800d42a:	d01b      	beq.n	800d464 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	f7ff ffa7 	bl	800d380 <sync_window>
 800d432:	4603      	mov	r3, r0
 800d434:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d436:	7bfb      	ldrb	r3, [r7, #15]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d113      	bne.n	800d464 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800d442:	6879      	ldr	r1, [r7, #4]
 800d444:	2301      	movs	r3, #1
 800d446:	683a      	ldr	r2, [r7, #0]
 800d448:	f7ff fd26 	bl	800ce98 <disk_read>
 800d44c:	4603      	mov	r3, r0
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d004      	beq.n	800d45c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d452:	f04f 33ff 	mov.w	r3, #4294967295
 800d456:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d458:	2301      	movs	r3, #1
 800d45a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	683a      	ldr	r2, [r7, #0]
 800d460:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
		}
	}
	return res;
 800d464:	7bfb      	ldrb	r3, [r7, #15]
}
 800d466:	4618      	mov	r0, r3
 800d468:	3710      	adds	r7, #16
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}

0800d46e <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800d46e:	b580      	push	{r7, lr}
 800d470:	b084      	sub	sp, #16
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f7ff ff82 	bl	800d380 <sync_window>
 800d47c:	4603      	mov	r3, r0
 800d47e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d480:	7bfb      	ldrb	r3, [r7, #15]
 800d482:	2b00      	cmp	r3, #0
 800d484:	f040 809b 	bne.w	800d5be <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d48e:	2b03      	cmp	r3, #3
 800d490:	f040 8088 	bne.w	800d5a4 <sync_fs+0x136>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800d49a:	2b01      	cmp	r3, #1
 800d49c:	f040 8082 	bne.w	800d5a4 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d4a6:	2100      	movs	r1, #0
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f7ff fd71 	bl	800cf90 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2255      	movs	r2, #85	@ 0x55
 800d4b2:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	22aa      	movs	r2, #170	@ 0xaa
 800d4ba:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2252      	movs	r2, #82	@ 0x52
 800d4c2:	701a      	strb	r2, [r3, #0]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2252      	movs	r2, #82	@ 0x52
 800d4c8:	705a      	strb	r2, [r3, #1]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2261      	movs	r2, #97	@ 0x61
 800d4ce:	709a      	strb	r2, [r3, #2]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2241      	movs	r2, #65	@ 0x41
 800d4d4:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2272      	movs	r2, #114	@ 0x72
 800d4da:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2272      	movs	r2, #114	@ 0x72
 800d4e2:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2241      	movs	r2, #65	@ 0x41
 800d4ea:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2261      	movs	r2, #97	@ 0x61
 800d4f2:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d4fc:	b2da      	uxtb	r2, r3
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d50a:	b29b      	uxth	r3, r3
 800d50c:	0a1b      	lsrs	r3, r3, #8
 800d50e:	b29b      	uxth	r3, r3
 800d510:	b2da      	uxtb	r2, r3
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d51e:	0c1b      	lsrs	r3, r3, #16
 800d520:	b2da      	uxtb	r2, r3
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d52e:	0e1b      	lsrs	r3, r3, #24
 800d530:	b2da      	uxtb	r2, r3
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d53e:	b2da      	uxtb	r2, r3
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d54c:	b29b      	uxth	r3, r3
 800d54e:	0a1b      	lsrs	r3, r3, #8
 800d550:	b29b      	uxth	r3, r3
 800d552:	b2da      	uxtb	r2, r3
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d560:	0c1b      	lsrs	r3, r3, #16
 800d562:	b2da      	uxtb	r2, r3
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d570:	0e1b      	lsrs	r3, r3, #24
 800d572:	b2da      	uxtb	r2, r3
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800d580:	1c5a      	adds	r2, r3, #1
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800d58e:	6879      	ldr	r1, [r7, #4]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 800d596:	2301      	movs	r3, #1
 800d598:	f7ff fc9e 	bl	800ced8 <disk_write>
			fs->fsi_flag = 0;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2200      	movs	r2, #0
 800d5a0:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	2100      	movs	r1, #0
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7ff fcb2 	bl	800cf18 <disk_ioctl>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d001      	beq.n	800d5be <sync_fs+0x150>
			res = FR_DISK_ERR;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d5be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3710      	adds	r7, #16
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b083      	sub	sp, #12
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	3b02      	subs	r3, #2
 800d5d6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800d5de:	3b02      	subs	r3, #2
 800d5e0:	683a      	ldr	r2, [r7, #0]
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d301      	bcc.n	800d5ea <clust2sect+0x22>
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	e00a      	b.n	800d600 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	fb03 f202 	mul.w	r2, r3, r2
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800d5fe:	4413      	add	r3, r2
}
 800d600:	4618      	mov	r0, r3
 800d602:	370c      	adds	r7, #12
 800d604:	46bd      	mov	sp, r7
 800d606:	bc80      	pop	{r7}
 800d608:	4770      	bx	lr

0800d60a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800d60a:	b580      	push	{r7, lr}
 800d60c:	b086      	sub	sp, #24
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]
 800d612:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	2b01      	cmp	r3, #1
 800d618:	d905      	bls.n	800d626 <get_fat+0x1c>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800d620:	683a      	ldr	r2, [r7, #0]
 800d622:	429a      	cmp	r2, r3
 800d624:	d302      	bcc.n	800d62c <get_fat+0x22>
		val = 1;	/* Internal error */
 800d626:	2301      	movs	r3, #1
 800d628:	617b      	str	r3, [r7, #20]
 800d62a:	e0a2      	b.n	800d772 <get_fat+0x168>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d62c:	f04f 33ff 	mov.w	r3, #4294967295
 800d630:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d638:	2b03      	cmp	r3, #3
 800d63a:	d067      	beq.n	800d70c <get_fat+0x102>
 800d63c:	2b03      	cmp	r3, #3
 800d63e:	f300 808e 	bgt.w	800d75e <get_fat+0x154>
 800d642:	2b01      	cmp	r3, #1
 800d644:	d002      	beq.n	800d64c <get_fat+0x42>
 800d646:	2b02      	cmp	r3, #2
 800d648:	d03f      	beq.n	800d6ca <get_fat+0xc0>
 800d64a:	e088      	b.n	800d75e <get_fat+0x154>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	60fb      	str	r3, [r7, #12]
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	085b      	lsrs	r3, r3, #1
 800d654:	68fa      	ldr	r2, [r7, #12]
 800d656:	4413      	add	r3, r2
 800d658:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	0a5b      	lsrs	r3, r3, #9
 800d664:	4413      	add	r3, r2
 800d666:	4619      	mov	r1, r3
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f7ff fed2 	bl	800d412 <move_window>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b00      	cmp	r3, #0
 800d672:	d177      	bne.n	800d764 <get_fat+0x15a>
			wc = fs->win.d8[bc++ % SS(fs)];
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	1c5a      	adds	r2, r3, #1
 800d678:	60fa      	str	r2, [r7, #12]
 800d67a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	5cd3      	ldrb	r3, [r2, r3]
 800d682:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	0a5b      	lsrs	r3, r3, #9
 800d68e:	4413      	add	r3, r2
 800d690:	4619      	mov	r1, r3
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f7ff febd 	bl	800d412 <move_window>
 800d698:	4603      	mov	r3, r0
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d164      	bne.n	800d768 <get_fat+0x15e>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6a4:	687a      	ldr	r2, [r7, #4]
 800d6a6:	5cd3      	ldrb	r3, [r2, r3]
 800d6a8:	021b      	lsls	r3, r3, #8
 800d6aa:	68ba      	ldr	r2, [r7, #8]
 800d6ac:	4313      	orrs	r3, r2
 800d6ae:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	f003 0301 	and.w	r3, r3, #1
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d002      	beq.n	800d6c0 <get_fat+0xb6>
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	091b      	lsrs	r3, r3, #4
 800d6be:	e002      	b.n	800d6c6 <get_fat+0xbc>
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d6c6:	617b      	str	r3, [r7, #20]
			break;
 800d6c8:	e053      	b.n	800d772 <get_fat+0x168>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	0a1b      	lsrs	r3, r3, #8
 800d6d4:	4413      	add	r3, r2
 800d6d6:	4619      	mov	r1, r3
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f7ff fe9a 	bl	800d412 <move_window>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d143      	bne.n	800d76c <get_fat+0x162>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	005b      	lsls	r3, r3, #1
 800d6e8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d6ec:	687a      	ldr	r2, [r7, #4]
 800d6ee:	4413      	add	r3, r2
 800d6f0:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	021b      	lsls	r3, r3, #8
 800d6fa:	b21a      	sxth	r2, r3
 800d6fc:	693b      	ldr	r3, [r7, #16]
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	b21b      	sxth	r3, r3
 800d702:	4313      	orrs	r3, r2
 800d704:	b21b      	sxth	r3, r3
 800d706:	b29b      	uxth	r3, r3
 800d708:	617b      	str	r3, [r7, #20]
			break;
 800d70a:	e032      	b.n	800d772 <get_fat+0x168>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	09db      	lsrs	r3, r3, #7
 800d716:	4413      	add	r3, r2
 800d718:	4619      	mov	r1, r3
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f7ff fe79 	bl	800d412 <move_window>
 800d720:	4603      	mov	r3, r0
 800d722:	2b00      	cmp	r3, #0
 800d724:	d124      	bne.n	800d770 <get_fat+0x166>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	009b      	lsls	r3, r3, #2
 800d72a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d72e:	687a      	ldr	r2, [r7, #4]
 800d730:	4413      	add	r3, r2
 800d732:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	3303      	adds	r3, #3
 800d738:	781b      	ldrb	r3, [r3, #0]
 800d73a:	061a      	lsls	r2, r3, #24
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	3302      	adds	r3, #2
 800d740:	781b      	ldrb	r3, [r3, #0]
 800d742:	041b      	lsls	r3, r3, #16
 800d744:	431a      	orrs	r2, r3
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	3301      	adds	r3, #1
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	021b      	lsls	r3, r3, #8
 800d74e:	4313      	orrs	r3, r2
 800d750:	693a      	ldr	r2, [r7, #16]
 800d752:	7812      	ldrb	r2, [r2, #0]
 800d754:	4313      	orrs	r3, r2
 800d756:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d75a:	617b      	str	r3, [r7, #20]
			break;
 800d75c:	e009      	b.n	800d772 <get_fat+0x168>

		default:
			val = 1;	/* Internal error */
 800d75e:	2301      	movs	r3, #1
 800d760:	617b      	str	r3, [r7, #20]
 800d762:	e006      	b.n	800d772 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d764:	bf00      	nop
 800d766:	e004      	b.n	800d772 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d768:	bf00      	nop
 800d76a:	e002      	b.n	800d772 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d76c:	bf00      	nop
 800d76e:	e000      	b.n	800d772 <get_fat+0x168>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d770:	bf00      	nop
		}
	}

	return val;
 800d772:	697b      	ldr	r3, [r7, #20]
}
 800d774:	4618      	mov	r0, r3
 800d776:	3718      	adds	r7, #24
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b088      	sub	sp, #32
 800d780:	af00      	add	r7, sp, #0
 800d782:	60f8      	str	r0, [r7, #12]
 800d784:	60b9      	str	r1, [r7, #8]
 800d786:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d905      	bls.n	800d79a <put_fat+0x1e>
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800d794:	68ba      	ldr	r2, [r7, #8]
 800d796:	429a      	cmp	r2, r3
 800d798:	d302      	bcc.n	800d7a0 <put_fat+0x24>
		res = FR_INT_ERR;
 800d79a:	2302      	movs	r3, #2
 800d79c:	77fb      	strb	r3, [r7, #31]
 800d79e:	e0f6      	b.n	800d98e <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d7a6:	2b03      	cmp	r3, #3
 800d7a8:	f000 809e 	beq.w	800d8e8 <put_fat+0x16c>
 800d7ac:	2b03      	cmp	r3, #3
 800d7ae:	f300 80e4 	bgt.w	800d97a <put_fat+0x1fe>
 800d7b2:	2b01      	cmp	r3, #1
 800d7b4:	d002      	beq.n	800d7bc <put_fat+0x40>
 800d7b6:	2b02      	cmp	r3, #2
 800d7b8:	d06f      	beq.n	800d89a <put_fat+0x11e>
 800d7ba:	e0de      	b.n	800d97a <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	617b      	str	r3, [r7, #20]
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	085b      	lsrs	r3, r3, #1
 800d7c4:	697a      	ldr	r2, [r7, #20]
 800d7c6:	4413      	add	r3, r2
 800d7c8:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	0a5b      	lsrs	r3, r3, #9
 800d7d4:	4413      	add	r3, r2
 800d7d6:	4619      	mov	r1, r3
 800d7d8:	68f8      	ldr	r0, [r7, #12]
 800d7da:	f7ff fe1a 	bl	800d412 <move_window>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d7e2:	7ffb      	ldrb	r3, [r7, #31]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	f040 80cb 	bne.w	800d980 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	1c5a      	adds	r2, r3, #1
 800d7ee:	617a      	str	r2, [r7, #20]
 800d7f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7f4:	68fa      	ldr	r2, [r7, #12]
 800d7f6:	4413      	add	r3, r2
 800d7f8:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	f003 0301 	and.w	r3, r3, #1
 800d800:	2b00      	cmp	r3, #0
 800d802:	d00d      	beq.n	800d820 <put_fat+0xa4>
 800d804:	69bb      	ldr	r3, [r7, #24]
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	b25b      	sxtb	r3, r3
 800d80a:	f003 030f 	and.w	r3, r3, #15
 800d80e:	b25a      	sxtb	r2, r3
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	b2db      	uxtb	r3, r3
 800d814:	011b      	lsls	r3, r3, #4
 800d816:	b25b      	sxtb	r3, r3
 800d818:	4313      	orrs	r3, r2
 800d81a:	b25b      	sxtb	r3, r3
 800d81c:	b2db      	uxtb	r3, r3
 800d81e:	e001      	b.n	800d824 <put_fat+0xa8>
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	b2db      	uxtb	r3, r3
 800d824:	69ba      	ldr	r2, [r7, #24]
 800d826:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	2201      	movs	r2, #1
 800d82c:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	0a5b      	lsrs	r3, r3, #9
 800d83a:	4413      	add	r3, r2
 800d83c:	4619      	mov	r1, r3
 800d83e:	68f8      	ldr	r0, [r7, #12]
 800d840:	f7ff fde7 	bl	800d412 <move_window>
 800d844:	4603      	mov	r3, r0
 800d846:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d848:	7ffb      	ldrb	r3, [r7, #31]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	f040 809a 	bne.w	800d984 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d856:	68fa      	ldr	r2, [r7, #12]
 800d858:	4413      	add	r3, r2
 800d85a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	f003 0301 	and.w	r3, r3, #1
 800d862:	2b00      	cmp	r3, #0
 800d864:	d003      	beq.n	800d86e <put_fat+0xf2>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	091b      	lsrs	r3, r3, #4
 800d86a:	b2db      	uxtb	r3, r3
 800d86c:	e00e      	b.n	800d88c <put_fat+0x110>
 800d86e:	69bb      	ldr	r3, [r7, #24]
 800d870:	781b      	ldrb	r3, [r3, #0]
 800d872:	b25b      	sxtb	r3, r3
 800d874:	f023 030f 	bic.w	r3, r3, #15
 800d878:	b25a      	sxtb	r2, r3
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	0a1b      	lsrs	r3, r3, #8
 800d87e:	b25b      	sxtb	r3, r3
 800d880:	f003 030f 	and.w	r3, r3, #15
 800d884:	b25b      	sxtb	r3, r3
 800d886:	4313      	orrs	r3, r2
 800d888:	b25b      	sxtb	r3, r3
 800d88a:	b2db      	uxtb	r3, r3
 800d88c:	69ba      	ldr	r2, [r7, #24]
 800d88e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2201      	movs	r2, #1
 800d894:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800d898:	e079      	b.n	800d98e <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	0a1b      	lsrs	r3, r3, #8
 800d8a4:	4413      	add	r3, r2
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	68f8      	ldr	r0, [r7, #12]
 800d8aa:	f7ff fdb2 	bl	800d412 <move_window>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d8b2:	7ffb      	ldrb	r3, [r7, #31]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d167      	bne.n	800d988 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	005b      	lsls	r3, r3, #1
 800d8bc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d8c0:	68fa      	ldr	r2, [r7, #12]
 800d8c2:	4413      	add	r3, r2
 800d8c4:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	b2da      	uxtb	r2, r3
 800d8ca:	69bb      	ldr	r3, [r7, #24]
 800d8cc:	701a      	strb	r2, [r3, #0]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	0a1b      	lsrs	r3, r3, #8
 800d8d4:	b29a      	uxth	r2, r3
 800d8d6:	69bb      	ldr	r3, [r7, #24]
 800d8d8:	3301      	adds	r3, #1
 800d8da:	b2d2      	uxtb	r2, r2
 800d8dc:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	2201      	movs	r2, #1
 800d8e2:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800d8e6:	e052      	b.n	800d98e <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	09db      	lsrs	r3, r3, #7
 800d8f2:	4413      	add	r3, r2
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	68f8      	ldr	r0, [r7, #12]
 800d8f8:	f7ff fd8b 	bl	800d412 <move_window>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d900:	7ffb      	ldrb	r3, [r7, #31]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d142      	bne.n	800d98c <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d90e:	68fa      	ldr	r2, [r7, #12]
 800d910:	4413      	add	r3, r2
 800d912:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800d914:	69bb      	ldr	r3, [r7, #24]
 800d916:	3303      	adds	r3, #3
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	061a      	lsls	r2, r3, #24
 800d91c:	69bb      	ldr	r3, [r7, #24]
 800d91e:	3302      	adds	r3, #2
 800d920:	781b      	ldrb	r3, [r3, #0]
 800d922:	041b      	lsls	r3, r3, #16
 800d924:	431a      	orrs	r2, r3
 800d926:	69bb      	ldr	r3, [r7, #24]
 800d928:	3301      	adds	r3, #1
 800d92a:	781b      	ldrb	r3, [r3, #0]
 800d92c:	021b      	lsls	r3, r3, #8
 800d92e:	4313      	orrs	r3, r2
 800d930:	69ba      	ldr	r2, [r7, #24]
 800d932:	7812      	ldrb	r2, [r2, #0]
 800d934:	4313      	orrs	r3, r2
 800d936:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d93a:	687a      	ldr	r2, [r7, #4]
 800d93c:	4313      	orrs	r3, r2
 800d93e:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	b2da      	uxtb	r2, r3
 800d944:	69bb      	ldr	r3, [r7, #24]
 800d946:	701a      	strb	r2, [r3, #0]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	b29b      	uxth	r3, r3
 800d94c:	0a1b      	lsrs	r3, r3, #8
 800d94e:	b29a      	uxth	r2, r3
 800d950:	69bb      	ldr	r3, [r7, #24]
 800d952:	3301      	adds	r3, #1
 800d954:	b2d2      	uxtb	r2, r2
 800d956:	701a      	strb	r2, [r3, #0]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	0c1a      	lsrs	r2, r3, #16
 800d95c:	69bb      	ldr	r3, [r7, #24]
 800d95e:	3302      	adds	r3, #2
 800d960:	b2d2      	uxtb	r2, r2
 800d962:	701a      	strb	r2, [r3, #0]
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	0e1a      	lsrs	r2, r3, #24
 800d968:	69bb      	ldr	r3, [r7, #24]
 800d96a:	3303      	adds	r3, #3
 800d96c:	b2d2      	uxtb	r2, r2
 800d96e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	2201      	movs	r2, #1
 800d974:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800d978:	e009      	b.n	800d98e <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800d97a:	2302      	movs	r3, #2
 800d97c:	77fb      	strb	r3, [r7, #31]
 800d97e:	e006      	b.n	800d98e <put_fat+0x212>
			if (res != FR_OK) break;
 800d980:	bf00      	nop
 800d982:	e004      	b.n	800d98e <put_fat+0x212>
			if (res != FR_OK) break;
 800d984:	bf00      	nop
 800d986:	e002      	b.n	800d98e <put_fat+0x212>
			if (res != FR_OK) break;
 800d988:	bf00      	nop
 800d98a:	e000      	b.n	800d98e <put_fat+0x212>
			if (res != FR_OK) break;
 800d98c:	bf00      	nop
		}
	}

	return res;
 800d98e:	7ffb      	ldrb	r3, [r7, #31]
}
 800d990:	4618      	mov	r0, r3
 800d992:	3720      	adds	r7, #32
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b084      	sub	sp, #16
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d905      	bls.n	800d9b4 <remove_chain+0x1c>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800d9ae:	683a      	ldr	r2, [r7, #0]
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d302      	bcc.n	800d9ba <remove_chain+0x22>
		res = FR_INT_ERR;
 800d9b4:	2302      	movs	r3, #2
 800d9b6:	73fb      	strb	r3, [r7, #15]
 800d9b8:	e043      	b.n	800da42 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800d9be:	e036      	b.n	800da2e <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800d9c0:	6839      	ldr	r1, [r7, #0]
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f7ff fe21 	bl	800d60a <get_fat>
 800d9c8:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d035      	beq.n	800da3c <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	2b01      	cmp	r3, #1
 800d9d4:	d102      	bne.n	800d9dc <remove_chain+0x44>
 800d9d6:	2302      	movs	r3, #2
 800d9d8:	73fb      	strb	r3, [r7, #15]
 800d9da:	e032      	b.n	800da42 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9e2:	d102      	bne.n	800d9ea <remove_chain+0x52>
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	73fb      	strb	r3, [r7, #15]
 800d9e8:	e02b      	b.n	800da42 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	6839      	ldr	r1, [r7, #0]
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f7ff fec4 	bl	800d77c <put_fat>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800d9f8:	7bfb      	ldrb	r3, [r7, #15]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d120      	bne.n	800da40 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800da04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da08:	d00f      	beq.n	800da2a <remove_chain+0x92>
				fs->free_clust++;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800da10:	1c5a      	adds	r2, r3, #1
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				fs->fsi_flag |= 1;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800da1e:	f043 0301 	orr.w	r3, r3, #1
 800da22:	b2da      	uxtb	r2, r3
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800da34:	683a      	ldr	r2, [r7, #0]
 800da36:	429a      	cmp	r2, r3
 800da38:	d3c2      	bcc.n	800d9c0 <remove_chain+0x28>
 800da3a:	e002      	b.n	800da42 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800da3c:	bf00      	nop
 800da3e:	e000      	b.n	800da42 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800da40:	bf00      	nop
		}
	}

	return res;
 800da42:	7bfb      	ldrb	r3, [r7, #15]
}
 800da44:	4618      	mov	r0, r3
 800da46:	3710      	adds	r7, #16
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b086      	sub	sp, #24
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d10f      	bne.n	800da7c <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800da62:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d005      	beq.n	800da76 <create_chain+0x2a>
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800da70:	693a      	ldr	r2, [r7, #16]
 800da72:	429a      	cmp	r2, r3
 800da74:	d31c      	bcc.n	800dab0 <create_chain+0x64>
 800da76:	2301      	movs	r3, #1
 800da78:	613b      	str	r3, [r7, #16]
 800da7a:	e019      	b.n	800dab0 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800da7c:	6839      	ldr	r1, [r7, #0]
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f7ff fdc3 	bl	800d60a <get_fat>
 800da84:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	2b01      	cmp	r3, #1
 800da8a:	d801      	bhi.n	800da90 <create_chain+0x44>
 800da8c:	2301      	movs	r3, #1
 800da8e:	e076      	b.n	800db7e <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da96:	d101      	bne.n	800da9c <create_chain+0x50>
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	e070      	b.n	800db7e <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800daa2:	68ba      	ldr	r2, [r7, #8]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d201      	bcs.n	800daac <create_chain+0x60>
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	e068      	b.n	800db7e <create_chain+0x132>
		scl = clst;
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800dab0:	693b      	ldr	r3, [r7, #16]
 800dab2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	3301      	adds	r3, #1
 800dab8:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800dac0:	697a      	ldr	r2, [r7, #20]
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d307      	bcc.n	800dad6 <create_chain+0x8a>
			ncl = 2;
 800dac6:	2302      	movs	r3, #2
 800dac8:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800daca:	697a      	ldr	r2, [r7, #20]
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	429a      	cmp	r2, r3
 800dad0:	d901      	bls.n	800dad6 <create_chain+0x8a>
 800dad2:	2300      	movs	r3, #0
 800dad4:	e053      	b.n	800db7e <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800dad6:	6979      	ldr	r1, [r7, #20]
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f7ff fd96 	bl	800d60a <get_fat>
 800dade:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00e      	beq.n	800db04 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daec:	d002      	beq.n	800daf4 <create_chain+0xa8>
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d101      	bne.n	800daf8 <create_chain+0xac>
			return cs;
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	e042      	b.n	800db7e <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800daf8:	697a      	ldr	r2, [r7, #20]
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d1d9      	bne.n	800dab4 <create_chain+0x68>
 800db00:	2300      	movs	r3, #0
 800db02:	e03c      	b.n	800db7e <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800db04:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800db06:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 800db0a:	6979      	ldr	r1, [r7, #20]
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f7ff fe35 	bl	800d77c <put_fat>
 800db12:	4603      	mov	r3, r0
 800db14:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800db16:	7bfb      	ldrb	r3, [r7, #15]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d109      	bne.n	800db30 <create_chain+0xe4>
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d006      	beq.n	800db30 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800db22:	697a      	ldr	r2, [r7, #20]
 800db24:	6839      	ldr	r1, [r7, #0]
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f7ff fe28 	bl	800d77c <put_fat>
 800db2c:	4603      	mov	r3, r0
 800db2e:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800db30:	7bfb      	ldrb	r3, [r7, #15]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d11a      	bne.n	800db6c <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	697a      	ldr	r2, [r7, #20]
 800db3a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800db44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db48:	d018      	beq.n	800db7c <create_chain+0x130>
			fs->free_clust--;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800db50:	1e5a      	subs	r2, r3, #1
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
			fs->fsi_flag |= 1;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800db5e:	f043 0301 	orr.w	r3, r3, #1
 800db62:	b2da      	uxtb	r2, r3
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
 800db6a:	e007      	b.n	800db7c <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800db6c:	7bfb      	ldrb	r3, [r7, #15]
 800db6e:	2b01      	cmp	r3, #1
 800db70:	d102      	bne.n	800db78 <create_chain+0x12c>
 800db72:	f04f 33ff 	mov.w	r3, #4294967295
 800db76:	e000      	b.n	800db7a <create_chain+0x12e>
 800db78:	2301      	movs	r3, #1
 800db7a:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800db7c:	697b      	ldr	r3, [r7, #20]
}
 800db7e:	4618      	mov	r0, r3
 800db80:	3718      	adds	r7, #24
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}

0800db86 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800db86:	b480      	push	{r7}
 800db88:	b087      	sub	sp, #28
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	6078      	str	r0, [r7, #4]
 800db8e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800db96:	3304      	adds	r3, #4
 800db98:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	0a5b      	lsrs	r3, r3, #9
 800db9e:	687a      	ldr	r2, [r7, #4]
 800dba0:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 800dba4:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800dba8:	fbb3 f3f2 	udiv	r3, r3, r2
 800dbac:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	1d1a      	adds	r2, r3, #4
 800dbb2:	613a      	str	r2, [r7, #16]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d101      	bne.n	800dbc2 <clmt_clust+0x3c>
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	e010      	b.n	800dbe4 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800dbc2:	697a      	ldr	r2, [r7, #20]
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	d307      	bcc.n	800dbda <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800dbca:	697a      	ldr	r2, [r7, #20]
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	1ad3      	subs	r3, r2, r3
 800dbd0:	617b      	str	r3, [r7, #20]
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	3304      	adds	r3, #4
 800dbd6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dbd8:	e7e9      	b.n	800dbae <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800dbda:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dbdc:	693b      	ldr	r3, [r7, #16]
 800dbde:	681a      	ldr	r2, [r3, #0]
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	4413      	add	r3, r2
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	371c      	adds	r7, #28
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bc80      	pop	{r7}
 800dbec:	4770      	bx	lr

0800dbee <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800dbee:	b580      	push	{r7, lr}
 800dbf0:	b086      	sub	sp, #24
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
 800dbf6:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	b29a      	uxth	r2, r3
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800dc08:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	d007      	beq.n	800dc20 <dir_sdi+0x32>
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800dc16:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800dc1a:	697a      	ldr	r2, [r7, #20]
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	d301      	bcc.n	800dc24 <dir_sdi+0x36>
		return FR_INT_ERR;
 800dc20:	2302      	movs	r3, #2
 800dc22:	e074      	b.n	800dd0e <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d10c      	bne.n	800dc44 <dir_sdi+0x56>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800dc30:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800dc34:	2b03      	cmp	r3, #3
 800dc36:	d105      	bne.n	800dc44 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800dc3e:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800dc42:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d111      	bne.n	800dc6e <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800dc50:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800dc54:	461a      	mov	r2, r3
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d301      	bcc.n	800dc60 <dir_sdi+0x72>
			return FR_INT_ERR;
 800dc5c:	2302      	movs	r3, #2
 800dc5e:	e056      	b.n	800dd0e <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800dc66:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800dc6a:	613b      	str	r3, [r7, #16]
 800dc6c:	e032      	b.n	800dcd4 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800dc74:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800dc78:	011b      	lsls	r3, r3, #4
 800dc7a:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800dc7c:	e01e      	b.n	800dcbc <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800dc84:	6979      	ldr	r1, [r7, #20]
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7ff fcbf 	bl	800d60a <get_fat>
 800dc8c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc94:	d101      	bne.n	800dc9a <dir_sdi+0xac>
 800dc96:	2301      	movs	r3, #1
 800dc98:	e039      	b.n	800dd0e <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	2b01      	cmp	r3, #1
 800dc9e:	d907      	bls.n	800dcb0 <dir_sdi+0xc2>
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800dca6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800dcaa:	697a      	ldr	r2, [r7, #20]
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d301      	bcc.n	800dcb4 <dir_sdi+0xc6>
				return FR_INT_ERR;
 800dcb0:	2302      	movs	r3, #2
 800dcb2:	e02c      	b.n	800dd0e <dir_sdi+0x120>
			idx -= ic;
 800dcb4:	683a      	ldr	r2, [r7, #0]
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	1ad3      	subs	r3, r2, r3
 800dcba:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800dcbc:	683a      	ldr	r2, [r7, #0]
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d2dc      	bcs.n	800dc7e <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800dcca:	6979      	ldr	r1, [r7, #20]
 800dccc:	4618      	mov	r0, r3
 800dcce:	f7ff fc7b 	bl	800d5c8 <clust2sect>
 800dcd2:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	697a      	ldr	r2, [r7, #20]
 800dcd8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	if (!sect) return FR_INT_ERR;
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d101      	bne.n	800dce6 <dir_sdi+0xf8>
 800dce2:	2302      	movs	r3, #2
 800dce4:	e013      	b.n	800dd0e <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	091a      	lsrs	r2, r3, #4
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	441a      	add	r2, r3
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	f003 030f 	and.w	r3, r3, #15
 800dd02:	015b      	lsls	r3, r3, #5
 800dd04:	441a      	add	r2, r3
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 800dd0c:	2300      	movs	r3, #0
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3718      	adds	r7, #24
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}

0800dd16 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800dd16:	b590      	push	{r4, r7, lr}
 800dd18:	b087      	sub	sp, #28
 800dd1a:	af00      	add	r7, sp, #0
 800dd1c:	6078      	str	r0, [r7, #4]
 800dd1e:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 800dd26:	3301      	adds	r3, #1
 800dd28:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	b29b      	uxth	r3, r3
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d004      	beq.n	800dd3c <dir_next+0x26>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d101      	bne.n	800dd40 <dir_next+0x2a>
		return FR_NO_FILE;
 800dd3c:	2304      	movs	r3, #4
 800dd3e:	e0dd      	b.n	800defc <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	f003 030f 	and.w	r3, r3, #15
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	f040 80c6 	bne.w	800ded8 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800dd52:	1c5a      	adds	r2, r3, #1
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

		if (!dp->clust) {		/* Static table */
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d10b      	bne.n	800dd7c <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800dd6a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800dd6e:	461a      	mov	r2, r3
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	4293      	cmp	r3, r2
 800dd74:	f0c0 80b0 	bcc.w	800ded8 <dir_next+0x1c2>
				return FR_NO_FILE;
 800dd78:	2304      	movs	r3, #4
 800dd7a:	e0bf      	b.n	800defc <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	091b      	lsrs	r3, r3, #4
 800dd80:	687a      	ldr	r2, [r7, #4]
 800dd82:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 800dd86:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800dd8a:	3a01      	subs	r2, #1
 800dd8c:	4013      	ands	r3, r2
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	f040 80a2 	bne.w	800ded8 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800dda0:	4619      	mov	r1, r3
 800dda2:	4610      	mov	r0, r2
 800dda4:	f7ff fc31 	bl	800d60a <get_fat>
 800dda8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	2b01      	cmp	r3, #1
 800ddae:	d801      	bhi.n	800ddb4 <dir_next+0x9e>
 800ddb0:	2302      	movs	r3, #2
 800ddb2:	e0a3      	b.n	800defc <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddba:	d101      	bne.n	800ddc0 <dir_next+0xaa>
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	e09d      	b.n	800defc <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ddc6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ddca:	697a      	ldr	r2, [r7, #20]
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d374      	bcc.n	800deba <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d101      	bne.n	800ddda <dir_next+0xc4>
 800ddd6:	2304      	movs	r3, #4
 800ddd8:	e090      	b.n	800defc <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800dde6:	4619      	mov	r1, r3
 800dde8:	4610      	mov	r0, r2
 800ddea:	f7ff fe2f 	bl	800da4c <create_chain>
 800ddee:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ddf0:	697b      	ldr	r3, [r7, #20]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d101      	bne.n	800ddfa <dir_next+0xe4>
 800ddf6:	2307      	movs	r3, #7
 800ddf8:	e080      	b.n	800defc <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d101      	bne.n	800de04 <dir_next+0xee>
 800de00:	2302      	movs	r3, #2
 800de02:	e07b      	b.n	800defc <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800de04:	697b      	ldr	r3, [r7, #20]
 800de06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de0a:	d101      	bne.n	800de10 <dir_next+0xfa>
 800de0c:	2301      	movs	r3, #1
 800de0e:	e075      	b.n	800defc <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800de16:	4618      	mov	r0, r3
 800de18:	f7ff fab2 	bl	800d380 <sync_window>
 800de1c:	4603      	mov	r3, r0
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d001      	beq.n	800de26 <dir_next+0x110>
 800de22:	2301      	movs	r3, #1
 800de24:	e06a      	b.n	800defc <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800de2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800de30:	2100      	movs	r1, #0
 800de32:	4618      	mov	r0, r3
 800de34:	f7ff f8ac 	bl	800cf90 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
 800de44:	6979      	ldr	r1, [r7, #20]
 800de46:	4610      	mov	r0, r2
 800de48:	f7ff fbbe 	bl	800d5c8 <clust2sect>
 800de4c:	4603      	mov	r3, r0
 800de4e:	f8c4 3230 	str.w	r3, [r4, #560]	@ 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800de52:	2300      	movs	r3, #0
 800de54:	613b      	str	r3, [r7, #16]
 800de56:	e01b      	b.n	800de90 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800de5e:	2201      	movs	r2, #1
 800de60:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800de6a:	4618      	mov	r0, r3
 800de6c:	f7ff fa88 	bl	800d380 <sync_window>
 800de70:	4603      	mov	r3, r0
 800de72:	2b00      	cmp	r3, #0
 800de74:	d001      	beq.n	800de7a <dir_next+0x164>
 800de76:	2301      	movs	r3, #1
 800de78:	e040      	b.n	800defc <dir_next+0x1e6>
						dp->fs->winsect++;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800de80:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 800de84:	3201      	adds	r2, #1
 800de86:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	3301      	adds	r3, #1
 800de8e:	613b      	str	r3, [r7, #16]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800de96:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800de9a:	461a      	mov	r2, r3
 800de9c:	693b      	ldr	r3, [r7, #16]
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d3da      	bcc.n	800de58 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800dea8:	f8d3 1230 	ldr.w	r1, [r3, #560]	@ 0x230
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800deb2:	693a      	ldr	r2, [r7, #16]
 800deb4:	1a8a      	subs	r2, r1, r2
 800deb6:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	697a      	ldr	r2, [r7, #20]
 800debe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800dec8:	6979      	ldr	r1, [r7, #20]
 800deca:	4618      	mov	r0, r3
 800decc:	f7ff fb7c 	bl	800d5c8 <clust2sect>
 800ded0:	4602      	mov	r2, r0
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	b29a      	uxth	r2, r3
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800dee8:	461a      	mov	r2, r3
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	f003 030f 	and.w	r3, r3, #15
 800def0:	015b      	lsls	r3, r3, #5
 800def2:	441a      	add	r2, r3
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 800defa:	2300      	movs	r3, #0
}
 800defc:	4618      	mov	r0, r3
 800defe:	371c      	adds	r7, #28
 800df00:	46bd      	mov	sp, r7
 800df02:	bd90      	pop	{r4, r7, pc}

0800df04 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b084      	sub	sp, #16
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800df0e:	2100      	movs	r1, #0
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f7ff fe6c 	bl	800dbee <dir_sdi>
 800df16:	4603      	mov	r3, r0
 800df18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800df1a:	7bfb      	ldrb	r3, [r7, #15]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d131      	bne.n	800df84 <dir_alloc+0x80>
		n = 0;
 800df20:	2300      	movs	r3, #0
 800df22:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800df30:	4619      	mov	r1, r3
 800df32:	4610      	mov	r0, r2
 800df34:	f7ff fa6d 	bl	800d412 <move_window>
 800df38:	4603      	mov	r3, r0
 800df3a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800df3c:	7bfb      	ldrb	r3, [r7, #15]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d11f      	bne.n	800df82 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800df48:	781b      	ldrb	r3, [r3, #0]
 800df4a:	2be5      	cmp	r3, #229	@ 0xe5
 800df4c:	d005      	beq.n	800df5a <dir_alloc+0x56>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800df54:	781b      	ldrb	r3, [r3, #0]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d107      	bne.n	800df6a <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	3301      	adds	r3, #1
 800df5e:	60bb      	str	r3, [r7, #8]
 800df60:	68ba      	ldr	r2, [r7, #8]
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	429a      	cmp	r2, r3
 800df66:	d102      	bne.n	800df6e <dir_alloc+0x6a>
 800df68:	e00c      	b.n	800df84 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800df6a:	2300      	movs	r3, #0
 800df6c:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800df6e:	2101      	movs	r1, #1
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f7ff fed0 	bl	800dd16 <dir_next>
 800df76:	4603      	mov	r3, r0
 800df78:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800df7a:	7bfb      	ldrb	r3, [r7, #15]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d0d1      	beq.n	800df24 <dir_alloc+0x20>
 800df80:	e000      	b.n	800df84 <dir_alloc+0x80>
			if (res != FR_OK) break;
 800df82:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800df84:	7bfb      	ldrb	r3, [r7, #15]
 800df86:	2b04      	cmp	r3, #4
 800df88:	d101      	bne.n	800df8e <dir_alloc+0x8a>
 800df8a:	2307      	movs	r3, #7
 800df8c:	73fb      	strb	r3, [r7, #15]
	return res;
 800df8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800df90:	4618      	mov	r0, r3
 800df92:	3710      	adds	r7, #16
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}

0800df98 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800df98:	b480      	push	{r7}
 800df9a:	b085      	sub	sp, #20
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
 800dfa0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	331b      	adds	r3, #27
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	021b      	lsls	r3, r3, #8
 800dfaa:	b21a      	sxth	r2, r3
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	331a      	adds	r3, #26
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	b21b      	sxth	r3, r3
 800dfb4:	4313      	orrs	r3, r2
 800dfb6:	b21b      	sxth	r3, r3
 800dfb8:	b29b      	uxth	r3, r3
 800dfba:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800dfc2:	2b03      	cmp	r3, #3
 800dfc4:	d10f      	bne.n	800dfe6 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	3315      	adds	r3, #21
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	021b      	lsls	r3, r3, #8
 800dfce:	b21a      	sxth	r2, r3
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	3314      	adds	r3, #20
 800dfd4:	781b      	ldrb	r3, [r3, #0]
 800dfd6:	b21b      	sxth	r3, r3
 800dfd8:	4313      	orrs	r3, r2
 800dfda:	b21b      	sxth	r3, r3
 800dfdc:	b29b      	uxth	r3, r3
 800dfde:	041b      	lsls	r3, r3, #16
 800dfe0:	68fa      	ldr	r2, [r7, #12]
 800dfe2:	4313      	orrs	r3, r2
 800dfe4:	60fb      	str	r3, [r7, #12]

	return cl;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3714      	adds	r7, #20
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bc80      	pop	{r7}
 800dff0:	4770      	bx	lr

0800dff2 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800dff2:	b480      	push	{r7}
 800dff4:	b083      	sub	sp, #12
 800dff6:	af00      	add	r7, sp, #0
 800dff8:	6078      	str	r0, [r7, #4]
 800dffa:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	331a      	adds	r3, #26
 800e000:	683a      	ldr	r2, [r7, #0]
 800e002:	b2d2      	uxtb	r2, r2
 800e004:	701a      	strb	r2, [r3, #0]
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	b29b      	uxth	r3, r3
 800e00a:	0a1b      	lsrs	r3, r3, #8
 800e00c:	b29a      	uxth	r2, r3
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	331b      	adds	r3, #27
 800e012:	b2d2      	uxtb	r2, r2
 800e014:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	0c1a      	lsrs	r2, r3, #16
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	3314      	adds	r3, #20
 800e01e:	b2d2      	uxtb	r2, r2
 800e020:	701a      	strb	r2, [r3, #0]
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	0c1b      	lsrs	r3, r3, #16
 800e026:	b29b      	uxth	r3, r3
 800e028:	0a1b      	lsrs	r3, r3, #8
 800e02a:	b29a      	uxth	r2, r3
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	3315      	adds	r3, #21
 800e030:	b2d2      	uxtb	r2, r2
 800e032:	701a      	strb	r2, [r3, #0]
}
 800e034:	bf00      	nop
 800e036:	370c      	adds	r7, #12
 800e038:	46bd      	mov	sp, r7
 800e03a:	bc80      	pop	{r7}
 800e03c:	4770      	bx	lr
	...

0800e040 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b086      	sub	sp, #24
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e052:	1e5a      	subs	r2, r3, #1
 800e054:	4613      	mov	r3, r2
 800e056:	005b      	lsls	r3, r3, #1
 800e058:	4413      	add	r3, r2
 800e05a:	009b      	lsls	r3, r3, #2
 800e05c:	4413      	add	r3, r2
 800e05e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800e060:	2300      	movs	r3, #0
 800e062:	613b      	str	r3, [r7, #16]
 800e064:	2301      	movs	r3, #1
 800e066:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800e068:	4a2b      	ldr	r2, [pc, #172]	@ (800e118 <cmp_lfn+0xd8>)
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	4413      	add	r3, r2
 800e06e:	781b      	ldrb	r3, [r3, #0]
 800e070:	3301      	adds	r3, #1
 800e072:	683a      	ldr	r2, [r7, #0]
 800e074:	4413      	add	r3, r2
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	021b      	lsls	r3, r3, #8
 800e07a:	b21a      	sxth	r2, r3
 800e07c:	4926      	ldr	r1, [pc, #152]	@ (800e118 <cmp_lfn+0xd8>)
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	440b      	add	r3, r1
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	4619      	mov	r1, r3
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	440b      	add	r3, r1
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	b21b      	sxth	r3, r3
 800e08e:	4313      	orrs	r3, r2
 800e090:	b21b      	sxth	r3, r3
 800e092:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800e094:	89fb      	ldrh	r3, [r7, #14]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d019      	beq.n	800e0ce <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800e09a:	89bb      	ldrh	r3, [r7, #12]
 800e09c:	4618      	mov	r0, r3
 800e09e:	f002 f8b9 	bl	8010214 <ff_wtoupper>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800e0a6:	697b      	ldr	r3, [r7, #20]
 800e0a8:	2bfe      	cmp	r3, #254	@ 0xfe
 800e0aa:	d80e      	bhi.n	800e0ca <cmp_lfn+0x8a>
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	1c5a      	adds	r2, r3, #1
 800e0b0:	617a      	str	r2, [r7, #20]
 800e0b2:	005b      	lsls	r3, r3, #1
 800e0b4:	687a      	ldr	r2, [r7, #4]
 800e0b6:	4413      	add	r3, r2
 800e0b8:	881b      	ldrh	r3, [r3, #0]
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f002 f8aa 	bl	8010214 <ff_wtoupper>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	89fb      	ldrh	r3, [r7, #14]
 800e0c6:	4293      	cmp	r3, r2
 800e0c8:	d008      	beq.n	800e0dc <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	e01f      	b.n	800e10e <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800e0ce:	89bb      	ldrh	r3, [r7, #12]
 800e0d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e0d4:	4293      	cmp	r3, r2
 800e0d6:	d001      	beq.n	800e0dc <cmp_lfn+0x9c>
 800e0d8:	2300      	movs	r3, #0
 800e0da:	e018      	b.n	800e10e <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800e0dc:	693b      	ldr	r3, [r7, #16]
 800e0de:	3301      	adds	r3, #1
 800e0e0:	613b      	str	r3, [r7, #16]
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	2b0c      	cmp	r3, #12
 800e0e6:	d9bf      	bls.n	800e068 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d00b      	beq.n	800e10c <cmp_lfn+0xcc>
 800e0f4:	89fb      	ldrh	r3, [r7, #14]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d008      	beq.n	800e10c <cmp_lfn+0xcc>
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	005b      	lsls	r3, r3, #1
 800e0fe:	687a      	ldr	r2, [r7, #4]
 800e100:	4413      	add	r3, r2
 800e102:	881b      	ldrh	r3, [r3, #0]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d001      	beq.n	800e10c <cmp_lfn+0xcc>
		return 0;
 800e108:	2300      	movs	r3, #0
 800e10a:	e000      	b.n	800e10e <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800e10c:	2301      	movs	r3, #1
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3718      	adds	r7, #24
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}
 800e116:	bf00      	nop
 800e118:	08013578 	.word	0x08013578

0800e11c <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800e11c:	b480      	push	{r7}
 800e11e:	b089      	sub	sp, #36	@ 0x24
 800e120:	af00      	add	r7, sp, #0
 800e122:	60f8      	str	r0, [r7, #12]
 800e124:	60b9      	str	r1, [r7, #8]
 800e126:	4611      	mov	r1, r2
 800e128:	461a      	mov	r2, r3
 800e12a:	460b      	mov	r3, r1
 800e12c:	71fb      	strb	r3, [r7, #7]
 800e12e:	4613      	mov	r3, r2
 800e130:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	330d      	adds	r3, #13
 800e136:	79ba      	ldrb	r2, [r7, #6]
 800e138:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	330b      	adds	r3, #11
 800e13e:	220f      	movs	r2, #15
 800e140:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	330c      	adds	r3, #12
 800e146:	2200      	movs	r2, #0
 800e148:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	331a      	adds	r3, #26
 800e14e:	2200      	movs	r2, #0
 800e150:	701a      	strb	r2, [r3, #0]
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	331b      	adds	r3, #27
 800e156:	2200      	movs	r2, #0
 800e158:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800e15a:	79fb      	ldrb	r3, [r7, #7]
 800e15c:	1e5a      	subs	r2, r3, #1
 800e15e:	4613      	mov	r3, r2
 800e160:	005b      	lsls	r3, r3, #1
 800e162:	4413      	add	r3, r2
 800e164:	009b      	lsls	r3, r3, #2
 800e166:	4413      	add	r3, r2
 800e168:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e16a:	2300      	movs	r3, #0
 800e16c:	82fb      	strh	r3, [r7, #22]
 800e16e:	2300      	movs	r3, #0
 800e170:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800e172:	8afb      	ldrh	r3, [r7, #22]
 800e174:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e178:	4293      	cmp	r3, r2
 800e17a:	d007      	beq.n	800e18c <fit_lfn+0x70>
 800e17c:	69fb      	ldr	r3, [r7, #28]
 800e17e:	1c5a      	adds	r2, r3, #1
 800e180:	61fa      	str	r2, [r7, #28]
 800e182:	005b      	lsls	r3, r3, #1
 800e184:	68fa      	ldr	r2, [r7, #12]
 800e186:	4413      	add	r3, r2
 800e188:	881b      	ldrh	r3, [r3, #0]
 800e18a:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800e18c:	4a1c      	ldr	r2, [pc, #112]	@ (800e200 <fit_lfn+0xe4>)
 800e18e:	69bb      	ldr	r3, [r7, #24]
 800e190:	4413      	add	r3, r2
 800e192:	781b      	ldrb	r3, [r3, #0]
 800e194:	461a      	mov	r2, r3
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	4413      	add	r3, r2
 800e19a:	8afa      	ldrh	r2, [r7, #22]
 800e19c:	b2d2      	uxtb	r2, r2
 800e19e:	701a      	strb	r2, [r3, #0]
 800e1a0:	8afb      	ldrh	r3, [r7, #22]
 800e1a2:	0a1b      	lsrs	r3, r3, #8
 800e1a4:	b299      	uxth	r1, r3
 800e1a6:	4a16      	ldr	r2, [pc, #88]	@ (800e200 <fit_lfn+0xe4>)
 800e1a8:	69bb      	ldr	r3, [r7, #24]
 800e1aa:	4413      	add	r3, r2
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	3301      	adds	r3, #1
 800e1b0:	68ba      	ldr	r2, [r7, #8]
 800e1b2:	4413      	add	r3, r2
 800e1b4:	b2ca      	uxtb	r2, r1
 800e1b6:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800e1b8:	8afb      	ldrh	r3, [r7, #22]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d102      	bne.n	800e1c4 <fit_lfn+0xa8>
 800e1be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e1c2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e1c4:	69bb      	ldr	r3, [r7, #24]
 800e1c6:	3301      	adds	r3, #1
 800e1c8:	61bb      	str	r3, [r7, #24]
 800e1ca:	69bb      	ldr	r3, [r7, #24]
 800e1cc:	2b0c      	cmp	r3, #12
 800e1ce:	d9d0      	bls.n	800e172 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800e1d0:	8afb      	ldrh	r3, [r7, #22]
 800e1d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d006      	beq.n	800e1e8 <fit_lfn+0xcc>
 800e1da:	69fb      	ldr	r3, [r7, #28]
 800e1dc:	005b      	lsls	r3, r3, #1
 800e1de:	68fa      	ldr	r2, [r7, #12]
 800e1e0:	4413      	add	r3, r2
 800e1e2:	881b      	ldrh	r3, [r3, #0]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d103      	bne.n	800e1f0 <fit_lfn+0xd4>
 800e1e8:	79fb      	ldrb	r3, [r7, #7]
 800e1ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1ee:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	79fa      	ldrb	r2, [r7, #7]
 800e1f4:	701a      	strb	r2, [r3, #0]
}
 800e1f6:	bf00      	nop
 800e1f8:	3724      	adds	r7, #36	@ 0x24
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bc80      	pop	{r7}
 800e1fe:	4770      	bx	lr
 800e200:	08013578 	.word	0x08013578

0800e204 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b08c      	sub	sp, #48	@ 0x30
 800e208:	af00      	add	r7, sp, #0
 800e20a:	60f8      	str	r0, [r7, #12]
 800e20c:	60b9      	str	r1, [r7, #8]
 800e20e:	607a      	str	r2, [r7, #4]
 800e210:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e212:	220b      	movs	r2, #11
 800e214:	68b9      	ldr	r1, [r7, #8]
 800e216:	68f8      	ldr	r0, [r7, #12]
 800e218:	f7fe fe9c 	bl	800cf54 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	2b05      	cmp	r3, #5
 800e220:	d92b      	bls.n	800e27a <gen_numname+0x76>
		sr = seq;
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e226:	e022      	b.n	800e26e <gen_numname+0x6a>
			wc = *lfn++;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	1c9a      	adds	r2, r3, #2
 800e22c:	607a      	str	r2, [r7, #4]
 800e22e:	881b      	ldrh	r3, [r3, #0]
 800e230:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800e232:	2300      	movs	r3, #0
 800e234:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e236:	e017      	b.n	800e268 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	005a      	lsls	r2, r3, #1
 800e23c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e23e:	f003 0301 	and.w	r3, r3, #1
 800e242:	4413      	add	r3, r2
 800e244:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e246:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e248:	085b      	lsrs	r3, r3, #1
 800e24a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e252:	2b00      	cmp	r3, #0
 800e254:	d005      	beq.n	800e262 <gen_numname+0x5e>
 800e256:	69fb      	ldr	r3, [r7, #28]
 800e258:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800e25c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800e260:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e264:	3301      	adds	r3, #1
 800e266:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e26a:	2b0f      	cmp	r3, #15
 800e26c:	d9e4      	bls.n	800e238 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	881b      	ldrh	r3, [r3, #0]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d1d8      	bne.n	800e228 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e276:	69fb      	ldr	r3, [r7, #28]
 800e278:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e27a:	2307      	movs	r3, #7
 800e27c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	b2db      	uxtb	r3, r3
 800e282:	f003 030f 	and.w	r3, r3, #15
 800e286:	b2db      	uxtb	r3, r3
 800e288:	3330      	adds	r3, #48	@ 0x30
 800e28a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800e28e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e292:	2b39      	cmp	r3, #57	@ 0x39
 800e294:	d904      	bls.n	800e2a0 <gen_numname+0x9c>
 800e296:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e29a:	3307      	adds	r3, #7
 800e29c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800e2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2a2:	1e5a      	subs	r2, r3, #1
 800e2a4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e2a6:	3330      	adds	r3, #48	@ 0x30
 800e2a8:	443b      	add	r3, r7
 800e2aa:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800e2ae:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	091b      	lsrs	r3, r3, #4
 800e2b6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d1df      	bne.n	800e27e <gen_numname+0x7a>
	ns[i] = '~';
 800e2be:	f107 0214 	add.w	r2, r7, #20
 800e2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2c4:	4413      	add	r3, r2
 800e2c6:	227e      	movs	r2, #126	@ 0x7e
 800e2c8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800e2ce:	e002      	b.n	800e2d6 <gen_numname+0xd2>
 800e2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800e2d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d205      	bcs.n	800e2ea <gen_numname+0xe6>
 800e2de:	68fa      	ldr	r2, [r7, #12]
 800e2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2e2:	4413      	add	r3, r2
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	2b20      	cmp	r3, #32
 800e2e8:	d1f2      	bne.n	800e2d0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ec:	2b07      	cmp	r3, #7
 800e2ee:	d807      	bhi.n	800e300 <gen_numname+0xfc>
 800e2f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2f2:	1c5a      	adds	r2, r3, #1
 800e2f4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e2f6:	3330      	adds	r3, #48	@ 0x30
 800e2f8:	443b      	add	r3, r7
 800e2fa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e2fe:	e000      	b.n	800e302 <gen_numname+0xfe>
 800e300:	2120      	movs	r1, #32
 800e302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e304:	1c5a      	adds	r2, r3, #1
 800e306:	627a      	str	r2, [r7, #36]	@ 0x24
 800e308:	68fa      	ldr	r2, [r7, #12]
 800e30a:	4413      	add	r3, r2
 800e30c:	460a      	mov	r2, r1
 800e30e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e312:	2b07      	cmp	r3, #7
 800e314:	d9e9      	bls.n	800e2ea <gen_numname+0xe6>
}
 800e316:	bf00      	nop
 800e318:	bf00      	nop
 800e31a:	3730      	adds	r7, #48	@ 0x30
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}

0800e320 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e320:	b480      	push	{r7}
 800e322:	b085      	sub	sp, #20
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e328:	2300      	movs	r3, #0
 800e32a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e32c:	230b      	movs	r3, #11
 800e32e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800e330:	7bfb      	ldrb	r3, [r7, #15]
 800e332:	b2da      	uxtb	r2, r3
 800e334:	0852      	lsrs	r2, r2, #1
 800e336:	01db      	lsls	r3, r3, #7
 800e338:	4313      	orrs	r3, r2
 800e33a:	b2da      	uxtb	r2, r3
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	1c59      	adds	r1, r3, #1
 800e340:	6079      	str	r1, [r7, #4]
 800e342:	781b      	ldrb	r3, [r3, #0]
 800e344:	4413      	add	r3, r2
 800e346:	73fb      	strb	r3, [r7, #15]
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	3b01      	subs	r3, #1
 800e34c:	60bb      	str	r3, [r7, #8]
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d1ed      	bne.n	800e330 <sum_sfn+0x10>
	return sum;
 800e354:	7bfb      	ldrb	r3, [r7, #15]
}
 800e356:	4618      	mov	r0, r3
 800e358:	3714      	adds	r7, #20
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bc80      	pop	{r7}
 800e35e:	4770      	bx	lr

0800e360 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b086      	sub	sp, #24
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e368:	2100      	movs	r1, #0
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f7ff fc3f 	bl	800dbee <dir_sdi>
 800e370:	4603      	mov	r3, r0
 800e372:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e374:	7dfb      	ldrb	r3, [r7, #23]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d001      	beq.n	800e37e <dir_find+0x1e>
 800e37a:	7dfb      	ldrb	r3, [r7, #23]
 800e37c:	e0ac      	b.n	800e4d8 <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800e37e:	23ff      	movs	r3, #255	@ 0xff
 800e380:	753b      	strb	r3, [r7, #20]
 800e382:	7d3b      	ldrb	r3, [r7, #20]
 800e384:	757b      	strb	r3, [r7, #21]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e38c:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e39c:	4619      	mov	r1, r3
 800e39e:	4610      	mov	r0, r2
 800e3a0:	f7ff f837 	bl	800d412 <move_window>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e3a8:	7dfb      	ldrb	r3, [r7, #23]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	f040 808e 	bne.w	800e4cc <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e3b6:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800e3b8:	693b      	ldr	r3, [r7, #16]
 800e3ba:	781b      	ldrb	r3, [r3, #0]
 800e3bc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e3be:	7dbb      	ldrb	r3, [r7, #22]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d102      	bne.n	800e3ca <dir_find+0x6a>
 800e3c4:	2304      	movs	r3, #4
 800e3c6:	75fb      	strb	r3, [r7, #23]
 800e3c8:	e085      	b.n	800e4d6 <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	330b      	adds	r3, #11
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e3d4:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e3d6:	7dbb      	ldrb	r3, [r7, #22]
 800e3d8:	2be5      	cmp	r3, #229	@ 0xe5
 800e3da:	d007      	beq.n	800e3ec <dir_find+0x8c>
 800e3dc:	7bfb      	ldrb	r3, [r7, #15]
 800e3de:	f003 0308 	and.w	r3, r3, #8
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d00a      	beq.n	800e3fc <dir_find+0x9c>
 800e3e6:	7bfb      	ldrb	r3, [r7, #15]
 800e3e8:	2b0f      	cmp	r3, #15
 800e3ea:	d007      	beq.n	800e3fc <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800e3ec:	23ff      	movs	r3, #255	@ 0xff
 800e3ee:	757b      	strb	r3, [r7, #21]
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e3f6:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
 800e3fa:	e05c      	b.n	800e4b6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e3fc:	7bfb      	ldrb	r3, [r7, #15]
 800e3fe:	2b0f      	cmp	r3, #15
 800e400:	d133      	bne.n	800e46a <dir_find+0x10a>
				if (dp->lfn) {
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d054      	beq.n	800e4b6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e40c:	7dbb      	ldrb	r3, [r7, #22]
 800e40e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e412:	2b00      	cmp	r3, #0
 800e414:	d00e      	beq.n	800e434 <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 800e416:	693b      	ldr	r3, [r7, #16]
 800e418:	7b5b      	ldrb	r3, [r3, #13]
 800e41a:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800e41c:	7dbb      	ldrb	r3, [r7, #22]
 800e41e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e422:	75bb      	strb	r3, [r7, #22]
 800e424:	7dbb      	ldrb	r3, [r7, #22]
 800e426:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800e434:	7dba      	ldrb	r2, [r7, #22]
 800e436:	7d7b      	ldrb	r3, [r7, #21]
 800e438:	429a      	cmp	r2, r3
 800e43a:	d113      	bne.n	800e464 <dir_find+0x104>
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	330d      	adds	r3, #13
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	7d3a      	ldrb	r2, [r7, #20]
 800e444:	429a      	cmp	r2, r3
 800e446:	d10d      	bne.n	800e464 <dir_find+0x104>
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800e44e:	6939      	ldr	r1, [r7, #16]
 800e450:	4618      	mov	r0, r3
 800e452:	f7ff fdf5 	bl	800e040 <cmp_lfn>
 800e456:	4603      	mov	r3, r0
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d003      	beq.n	800e464 <dir_find+0x104>
 800e45c:	7d7b      	ldrb	r3, [r7, #21]
 800e45e:	3b01      	subs	r3, #1
 800e460:	b2db      	uxtb	r3, r3
 800e462:	e000      	b.n	800e466 <dir_find+0x106>
 800e464:	23ff      	movs	r3, #255	@ 0xff
 800e466:	757b      	strb	r3, [r7, #21]
 800e468:	e025      	b.n	800e4b6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800e46a:	7d7b      	ldrb	r3, [r7, #21]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d107      	bne.n	800e480 <dir_find+0x120>
 800e470:	6938      	ldr	r0, [r7, #16]
 800e472:	f7ff ff55 	bl	800e320 <sum_sfn>
 800e476:	4603      	mov	r3, r0
 800e478:	461a      	mov	r2, r3
 800e47a:	7d3b      	ldrb	r3, [r7, #20]
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d027      	beq.n	800e4d0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e486:	330b      	adds	r3, #11
 800e488:	781b      	ldrb	r3, [r3, #0]
 800e48a:	f003 0301 	and.w	r3, r3, #1
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d10a      	bne.n	800e4a8 <dir_find+0x148>
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e498:	220b      	movs	r2, #11
 800e49a:	4619      	mov	r1, r3
 800e49c:	6938      	ldr	r0, [r7, #16]
 800e49e:	f7fe fd91 	bl	800cfc4 <mem_cmp>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d015      	beq.n	800e4d4 <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800e4a8:	23ff      	movs	r3, #255	@ 0xff
 800e4aa:	757b      	strb	r3, [r7, #21]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e4b2:	f8a3 2224 	strh.w	r2, [r3, #548]	@ 0x224
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800e4b6:	2100      	movs	r1, #0
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f7ff fc2c 	bl	800dd16 <dir_next>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e4c2:	7dfb      	ldrb	r3, [r7, #23]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	f43f af63 	beq.w	800e390 <dir_find+0x30>
 800e4ca:	e004      	b.n	800e4d6 <dir_find+0x176>
		if (res != FR_OK) break;
 800e4cc:	bf00      	nop
 800e4ce:	e002      	b.n	800e4d6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800e4d0:	bf00      	nop
 800e4d2:	e000      	b.n	800e4d6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800e4d4:	bf00      	nop

	return res;
 800e4d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3718      	adds	r7, #24
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}

0800e4e0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b08c      	sub	sp, #48	@ 0x30
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e4ee:	623b      	str	r3, [r7, #32]
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800e4f6:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800e4f8:	f107 030c 	add.w	r3, r7, #12
 800e4fc:	220c      	movs	r2, #12
 800e4fe:	6a39      	ldr	r1, [r7, #32]
 800e500:	4618      	mov	r0, r3
 800e502:	f7fe fd27 	bl	800cf54 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e506:	7dfb      	ldrb	r3, [r7, #23]
 800e508:	f003 0301 	and.w	r3, r3, #1
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d037      	beq.n	800e580 <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800e510:	6a3b      	ldr	r3, [r7, #32]
 800e512:	330b      	adds	r3, #11
 800e514:	2200      	movs	r2, #0
 800e516:	701a      	strb	r2, [r3, #0]
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2200      	movs	r2, #0
 800e51c:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
		for (n = 1; n < 100; n++) {
 800e520:	2301      	movs	r3, #1
 800e522:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e524:	e013      	b.n	800e54e <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800e526:	f107 010c 	add.w	r1, r7, #12
 800e52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e52c:	69fa      	ldr	r2, [r7, #28]
 800e52e:	6a38      	ldr	r0, [r7, #32]
 800e530:	f7ff fe68 	bl	800e204 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f7ff ff13 	bl	800e360 <dir_find>
 800e53a:	4603      	mov	r3, r0
 800e53c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800e540:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e544:	2b00      	cmp	r3, #0
 800e546:	d106      	bne.n	800e556 <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 800e548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e54a:	3301      	adds	r3, #1
 800e54c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e54e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e550:	2b63      	cmp	r3, #99	@ 0x63
 800e552:	d9e8      	bls.n	800e526 <dir_register+0x46>
 800e554:	e000      	b.n	800e558 <dir_register+0x78>
			if (res != FR_OK) break;
 800e556:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e55a:	2b64      	cmp	r3, #100	@ 0x64
 800e55c:	d101      	bne.n	800e562 <dir_register+0x82>
 800e55e:	2307      	movs	r3, #7
 800e560:	e0c5      	b.n	800e6ee <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e562:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e566:	2b04      	cmp	r3, #4
 800e568:	d002      	beq.n	800e570 <dir_register+0x90>
 800e56a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e56e:	e0be      	b.n	800e6ee <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800e570:	6a3b      	ldr	r3, [r7, #32]
 800e572:	330b      	adds	r3, #11
 800e574:	7dfa      	ldrb	r2, [r7, #23]
 800e576:	701a      	strb	r2, [r3, #0]
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	69fa      	ldr	r2, [r7, #28]
 800e57c:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800e580:	7dfb      	ldrb	r3, [r7, #23]
 800e582:	f003 0302 	and.w	r3, r3, #2
 800e586:	2b00      	cmp	r3, #0
 800e588:	d014      	beq.n	800e5b4 <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 800e58a:	2300      	movs	r3, #0
 800e58c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e58e:	e002      	b.n	800e596 <dir_register+0xb6>
 800e590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e592:	3301      	adds	r3, #1
 800e594:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e598:	005b      	lsls	r3, r3, #1
 800e59a:	69fa      	ldr	r2, [r7, #28]
 800e59c:	4413      	add	r3, r2
 800e59e:	881b      	ldrh	r3, [r3, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d1f5      	bne.n	800e590 <dir_register+0xb0>
		nent = (n + 25) / 13;
 800e5a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5a6:	3319      	adds	r3, #25
 800e5a8:	4a53      	ldr	r2, [pc, #332]	@ (800e6f8 <dir_register+0x218>)
 800e5aa:	fba2 2303 	umull	r2, r3, r2, r3
 800e5ae:	089b      	lsrs	r3, r3, #2
 800e5b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e5b2:	e001      	b.n	800e5b8 <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e5b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f7ff fca2 	bl	800df04 <dir_alloc>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e5c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d153      	bne.n	800e676 <dir_register+0x196>
 800e5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5d0:	3b01      	subs	r3, #1
 800e5d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d04d      	beq.n	800e676 <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 800e5e0:	461a      	mov	r2, r3
 800e5e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5e4:	1ad3      	subs	r3, r2, r3
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f7ff fb00 	bl	800dbee <dir_sdi>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800e5f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d13c      	bne.n	800e676 <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e602:	4618      	mov	r0, r3
 800e604:	f7ff fe8c 	bl	800e320 <sum_sfn>
 800e608:	4603      	mov	r3, r0
 800e60a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e618:	4619      	mov	r1, r3
 800e61a:	4610      	mov	r0, r2
 800e61c:	f7fe fef9 	bl	800d412 <move_window>
 800e620:	4603      	mov	r3, r0
 800e622:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800e626:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d122      	bne.n	800e674 <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f8d3 1214 	ldr.w	r1, [r3, #532]	@ 0x214
 800e63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e63c:	b2da      	uxtb	r2, r3
 800e63e:	7efb      	ldrb	r3, [r7, #27]
 800e640:	f7ff fd6c 	bl	800e11c <fit_lfn>
				dp->fs->wflag = 1;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e64a:	2201      	movs	r2, #1
 800e64c:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = dir_next(dp, 0);	/* Next entry */
 800e650:	2100      	movs	r1, #0
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f7ff fb5f 	bl	800dd16 <dir_next>
 800e658:	4603      	mov	r3, r0
 800e65a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800e65e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e662:	2b00      	cmp	r3, #0
 800e664:	d107      	bne.n	800e676 <dir_register+0x196>
 800e666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e668:	3b01      	subs	r3, #1
 800e66a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d1cc      	bne.n	800e60c <dir_register+0x12c>
 800e672:	e000      	b.n	800e676 <dir_register+0x196>
				if (res != FR_OK) break;
 800e674:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800e676:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d135      	bne.n	800e6ea <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e68a:	4619      	mov	r1, r3
 800e68c:	4610      	mov	r0, r2
 800e68e:	f7fe fec0 	bl	800d412 <move_window>
 800e692:	4603      	mov	r3, r0
 800e694:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800e698:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d124      	bne.n	800e6ea <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e6a6:	2220      	movs	r2, #32
 800e6a8:	2100      	movs	r1, #0
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7fe fc70 	bl	800cf90 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f8d3 0214 	ldr.w	r0, [r3, #532]	@ 0x214
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e6bc:	220b      	movs	r2, #11
 800e6be:	4619      	mov	r1, r3
 800e6c0:	f7fe fc48 	bl	800cf54 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e6ca:	330b      	adds	r3, #11
 800e6cc:	781a      	ldrb	r2, [r3, #0]
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e6d4:	330c      	adds	r3, #12
 800e6d6:	f002 0218 	and.w	r2, r2, #24
 800e6da:	b2d2      	uxtb	r2, r2
 800e6dc:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800e6e4:	2201      	movs	r2, #1
 800e6e6:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		}
	}

	return res;
 800e6ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3730      	adds	r7, #48	@ 0x30
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	4ec4ec4f 	.word	0x4ec4ec4f

0800e6fc <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b08a      	sub	sp, #40	@ 0x28
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
 800e704:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	613b      	str	r3, [r7, #16]
 800e70c:	e002      	b.n	800e714 <create_name+0x18>
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	3301      	adds	r3, #1
 800e712:	613b      	str	r3, [r7, #16]
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	2b2f      	cmp	r3, #47	@ 0x2f
 800e71a:	d0f8      	beq.n	800e70e <create_name+0x12>
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	781b      	ldrb	r3, [r3, #0]
 800e720:	2b5c      	cmp	r3, #92	@ 0x5c
 800e722:	d0f4      	beq.n	800e70e <create_name+0x12>
	lfn = dp->lfn;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800e72a:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800e72c:	2300      	movs	r3, #0
 800e72e:	617b      	str	r3, [r7, #20]
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e734:	69bb      	ldr	r3, [r7, #24]
 800e736:	1c5a      	adds	r2, r3, #1
 800e738:	61ba      	str	r2, [r7, #24]
 800e73a:	693a      	ldr	r2, [r7, #16]
 800e73c:	4413      	add	r3, r2
 800e73e:	781b      	ldrb	r3, [r3, #0]
 800e740:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800e742:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e744:	2b1f      	cmp	r3, #31
 800e746:	d92f      	bls.n	800e7a8 <create_name+0xac>
 800e748:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e74a:	2b2f      	cmp	r3, #47	@ 0x2f
 800e74c:	d02c      	beq.n	800e7a8 <create_name+0xac>
 800e74e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e750:	2b5c      	cmp	r3, #92	@ 0x5c
 800e752:	d029      	beq.n	800e7a8 <create_name+0xac>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	2bfe      	cmp	r3, #254	@ 0xfe
 800e758:	d901      	bls.n	800e75e <create_name+0x62>
			return FR_INVALID_NAME;
 800e75a:	2306      	movs	r3, #6
 800e75c:	e182      	b.n	800ea64 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e75e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e760:	b2db      	uxtb	r3, r3
 800e762:	84bb      	strh	r3, [r7, #36]	@ 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e764:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e766:	2101      	movs	r1, #1
 800e768:	4618      	mov	r0, r3
 800e76a:	f001 fd19 	bl	80101a0 <ff_convert>
 800e76e:	4603      	mov	r3, r0
 800e770:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e772:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e774:	2b00      	cmp	r3, #0
 800e776:	d101      	bne.n	800e77c <create_name+0x80>
 800e778:	2306      	movs	r3, #6
 800e77a:	e173      	b.n	800ea64 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800e77c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e77e:	2b7f      	cmp	r3, #127	@ 0x7f
 800e780:	d809      	bhi.n	800e796 <create_name+0x9a>
 800e782:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e784:	4619      	mov	r1, r3
 800e786:	488e      	ldr	r0, [pc, #568]	@ (800e9c0 <create_name+0x2c4>)
 800e788:	f7fe fc42 	bl	800d010 <chk_chr>
 800e78c:	4603      	mov	r3, r0
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d001      	beq.n	800e796 <create_name+0x9a>
			return FR_INVALID_NAME;
 800e792:	2306      	movs	r3, #6
 800e794:	e166      	b.n	800ea64 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	1c5a      	adds	r2, r3, #1
 800e79a:	617a      	str	r2, [r7, #20]
 800e79c:	005b      	lsls	r3, r3, #1
 800e79e:	68fa      	ldr	r2, [r7, #12]
 800e7a0:	4413      	add	r3, r2
 800e7a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e7a4:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e7a6:	e7c5      	b.n	800e734 <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e7a8:	693a      	ldr	r2, [r7, #16]
 800e7aa:	69bb      	ldr	r3, [r7, #24]
 800e7ac:	441a      	add	r2, r3
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800e7b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e7b4:	2b1f      	cmp	r3, #31
 800e7b6:	d801      	bhi.n	800e7bc <create_name+0xc0>
 800e7b8:	2304      	movs	r3, #4
 800e7ba:	e000      	b.n	800e7be <create_name+0xc2>
 800e7bc:	2300      	movs	r3, #0
 800e7be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800e7c2:	e011      	b.n	800e7e8 <create_name+0xec>
		w = lfn[di - 1];
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e7ca:	3b01      	subs	r3, #1
 800e7cc:	005b      	lsls	r3, r3, #1
 800e7ce:	68fa      	ldr	r2, [r7, #12]
 800e7d0:	4413      	add	r3, r2
 800e7d2:	881b      	ldrh	r3, [r3, #0]
 800e7d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800e7d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e7d8:	2b20      	cmp	r3, #32
 800e7da:	d002      	beq.n	800e7e2 <create_name+0xe6>
 800e7dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e7de:	2b2e      	cmp	r3, #46	@ 0x2e
 800e7e0:	d106      	bne.n	800e7f0 <create_name+0xf4>
		di--;
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	3b01      	subs	r3, #1
 800e7e6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d1ea      	bne.n	800e7c4 <create_name+0xc8>
 800e7ee:	e000      	b.n	800e7f2 <create_name+0xf6>
		if (w != ' ' && w != '.') break;
 800e7f0:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d101      	bne.n	800e7fc <create_name+0x100>
 800e7f8:	2306      	movs	r3, #6
 800e7fa:	e133      	b.n	800ea64 <create_name+0x368>

	lfn[di] = 0;						/* LFN is created */
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	005b      	lsls	r3, r3, #1
 800e800:	68fa      	ldr	r2, [r7, #12]
 800e802:	4413      	add	r3, r2
 800e804:	2200      	movs	r2, #0
 800e806:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e80e:	220b      	movs	r2, #11
 800e810:	2120      	movs	r1, #32
 800e812:	4618      	mov	r0, r3
 800e814:	f7fe fbbc 	bl	800cf90 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e818:	2300      	movs	r3, #0
 800e81a:	61bb      	str	r3, [r7, #24]
 800e81c:	e002      	b.n	800e824 <create_name+0x128>
 800e81e:	69bb      	ldr	r3, [r7, #24]
 800e820:	3301      	adds	r3, #1
 800e822:	61bb      	str	r3, [r7, #24]
 800e824:	69bb      	ldr	r3, [r7, #24]
 800e826:	005b      	lsls	r3, r3, #1
 800e828:	68fa      	ldr	r2, [r7, #12]
 800e82a:	4413      	add	r3, r2
 800e82c:	881b      	ldrh	r3, [r3, #0]
 800e82e:	2b20      	cmp	r3, #32
 800e830:	d0f5      	beq.n	800e81e <create_name+0x122>
 800e832:	69bb      	ldr	r3, [r7, #24]
 800e834:	005b      	lsls	r3, r3, #1
 800e836:	68fa      	ldr	r2, [r7, #12]
 800e838:	4413      	add	r3, r2
 800e83a:	881b      	ldrh	r3, [r3, #0]
 800e83c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e83e:	d0ee      	beq.n	800e81e <create_name+0x122>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e840:	69bb      	ldr	r3, [r7, #24]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d009      	beq.n	800e85a <create_name+0x15e>
 800e846:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e84a:	f043 0303 	orr.w	r3, r3, #3
 800e84e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e852:	e002      	b.n	800e85a <create_name+0x15e>
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	3b01      	subs	r3, #1
 800e858:	617b      	str	r3, [r7, #20]
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d009      	beq.n	800e874 <create_name+0x178>
 800e860:	697b      	ldr	r3, [r7, #20]
 800e862:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e866:	3b01      	subs	r3, #1
 800e868:	005b      	lsls	r3, r3, #1
 800e86a:	68fa      	ldr	r2, [r7, #12]
 800e86c:	4413      	add	r3, r2
 800e86e:	881b      	ldrh	r3, [r3, #0]
 800e870:	2b2e      	cmp	r3, #46	@ 0x2e
 800e872:	d1ef      	bne.n	800e854 <create_name+0x158>

	b = i = 0; ni = 8;
 800e874:	2300      	movs	r3, #0
 800e876:	623b      	str	r3, [r7, #32]
 800e878:	2300      	movs	r3, #0
 800e87a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e87e:	2308      	movs	r3, #8
 800e880:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e882:	69bb      	ldr	r3, [r7, #24]
 800e884:	1c5a      	adds	r2, r3, #1
 800e886:	61ba      	str	r2, [r7, #24]
 800e888:	005b      	lsls	r3, r3, #1
 800e88a:	68fa      	ldr	r2, [r7, #12]
 800e88c:	4413      	add	r3, r2
 800e88e:	881b      	ldrh	r3, [r3, #0]
 800e890:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e892:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e894:	2b00      	cmp	r3, #0
 800e896:	f000 8090 	beq.w	800e9ba <create_name+0x2be>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e89a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e89c:	2b20      	cmp	r3, #32
 800e89e:	d006      	beq.n	800e8ae <create_name+0x1b2>
 800e8a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e8a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800e8a4:	d10a      	bne.n	800e8bc <create_name+0x1c0>
 800e8a6:	69ba      	ldr	r2, [r7, #24]
 800e8a8:	697b      	ldr	r3, [r7, #20]
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d006      	beq.n	800e8bc <create_name+0x1c0>
			cf |= NS_LOSS | NS_LFN; continue;
 800e8ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e8b2:	f043 0303 	orr.w	r3, r3, #3
 800e8b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e8ba:	e07d      	b.n	800e9b8 <create_name+0x2bc>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e8bc:	6a3a      	ldr	r2, [r7, #32]
 800e8be:	69fb      	ldr	r3, [r7, #28]
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	d203      	bcs.n	800e8cc <create_name+0x1d0>
 800e8c4:	69ba      	ldr	r2, [r7, #24]
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d123      	bne.n	800e914 <create_name+0x218>
			if (ni == 11) {				/* Long extension */
 800e8cc:	69fb      	ldr	r3, [r7, #28]
 800e8ce:	2b0b      	cmp	r3, #11
 800e8d0:	d106      	bne.n	800e8e0 <create_name+0x1e4>
				cf |= NS_LOSS | NS_LFN; break;
 800e8d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e8d6:	f043 0303 	orr.w	r3, r3, #3
 800e8da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e8de:	e076      	b.n	800e9ce <create_name+0x2d2>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e8e0:	69ba      	ldr	r2, [r7, #24]
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	d005      	beq.n	800e8f4 <create_name+0x1f8>
 800e8e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e8ec:	f043 0303 	orr.w	r3, r3, #3
 800e8f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800e8f4:	69ba      	ldr	r2, [r7, #24]
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d867      	bhi.n	800e9cc <create_name+0x2d0>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e8fc:	697b      	ldr	r3, [r7, #20]
 800e8fe:	61bb      	str	r3, [r7, #24]
 800e900:	2308      	movs	r3, #8
 800e902:	623b      	str	r3, [r7, #32]
 800e904:	230b      	movs	r3, #11
 800e906:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e908:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e90c:	009b      	lsls	r3, r3, #2
 800e90e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e912:	e051      	b.n	800e9b8 <create_name+0x2bc>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e914:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e916:	2b7f      	cmp	r3, #127	@ 0x7f
 800e918:	d914      	bls.n	800e944 <create_name+0x248>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e91a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e91c:	2100      	movs	r1, #0
 800e91e:	4618      	mov	r0, r3
 800e920:	f001 fc3e 	bl	80101a0 <ff_convert>
 800e924:	4603      	mov	r3, r0
 800e926:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e928:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d004      	beq.n	800e938 <create_name+0x23c>
 800e92e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e930:	3b80      	subs	r3, #128	@ 0x80
 800e932:	4a24      	ldr	r2, [pc, #144]	@ (800e9c4 <create_name+0x2c8>)
 800e934:	5cd3      	ldrb	r3, [r2, r3]
 800e936:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e938:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e93c:	f043 0302 	orr.w	r3, r3, #2
 800e940:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e944:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e946:	2b00      	cmp	r3, #0
 800e948:	d007      	beq.n	800e95a <create_name+0x25e>
 800e94a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e94c:	4619      	mov	r1, r3
 800e94e:	481e      	ldr	r0, [pc, #120]	@ (800e9c8 <create_name+0x2cc>)
 800e950:	f7fe fb5e 	bl	800d010 <chk_chr>
 800e954:	4603      	mov	r3, r0
 800e956:	2b00      	cmp	r3, #0
 800e958:	d008      	beq.n	800e96c <create_name+0x270>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e95a:	235f      	movs	r3, #95	@ 0x5f
 800e95c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800e95e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e962:	f043 0303 	orr.w	r3, r3, #3
 800e966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e96a:	e01b      	b.n	800e9a4 <create_name+0x2a8>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e96c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e96e:	2b40      	cmp	r3, #64	@ 0x40
 800e970:	d909      	bls.n	800e986 <create_name+0x28a>
 800e972:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e974:	2b5a      	cmp	r3, #90	@ 0x5a
 800e976:	d806      	bhi.n	800e986 <create_name+0x28a>
					b |= 2;
 800e978:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e97c:	f043 0302 	orr.w	r3, r3, #2
 800e980:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e984:	e00e      	b.n	800e9a4 <create_name+0x2a8>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e986:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e988:	2b60      	cmp	r3, #96	@ 0x60
 800e98a:	d90b      	bls.n	800e9a4 <create_name+0x2a8>
 800e98c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e98e:	2b7a      	cmp	r3, #122	@ 0x7a
 800e990:	d808      	bhi.n	800e9a4 <create_name+0x2a8>
						b |= 1; w -= 0x20;
 800e992:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e996:	f043 0301 	orr.w	r3, r3, #1
 800e99a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e99e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9a0:	3b20      	subs	r3, #32
 800e9a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800e9aa:	6a3b      	ldr	r3, [r7, #32]
 800e9ac:	1c59      	adds	r1, r3, #1
 800e9ae:	6239      	str	r1, [r7, #32]
 800e9b0:	4413      	add	r3, r2
 800e9b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e9b4:	b2d2      	uxtb	r2, r2
 800e9b6:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800e9b8:	e763      	b.n	800e882 <create_name+0x186>
		if (!w) break;					/* Break on end of the LFN */
 800e9ba:	bf00      	nop
 800e9bc:	e007      	b.n	800e9ce <create_name+0x2d2>
 800e9be:	bf00      	nop
 800e9c0:	080133b8 	.word	0x080133b8
 800e9c4:	080134f8 	.word	0x080134f8
 800e9c8:	080133c4 	.word	0x080133c4
			if (si > di) break;			/* No extension */
 800e9cc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	2be5      	cmp	r3, #229	@ 0xe5
 800e9d8:	d104      	bne.n	800e9e4 <create_name+0x2e8>
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800e9e0:	2205      	movs	r2, #5
 800e9e2:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800e9e4:	69fb      	ldr	r3, [r7, #28]
 800e9e6:	2b08      	cmp	r3, #8
 800e9e8:	d104      	bne.n	800e9f4 <create_name+0x2f8>
 800e9ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e9ee:	009b      	lsls	r3, r3, #2
 800e9f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800e9f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e9f8:	f003 030c 	and.w	r3, r3, #12
 800e9fc:	2b0c      	cmp	r3, #12
 800e9fe:	d005      	beq.n	800ea0c <create_name+0x310>
 800ea00:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ea04:	f003 0303 	and.w	r3, r3, #3
 800ea08:	2b03      	cmp	r3, #3
 800ea0a:	d105      	bne.n	800ea18 <create_name+0x31c>
		cf |= NS_LFN;
 800ea0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea10:	f043 0302 	orr.w	r3, r3, #2
 800ea14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ea18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea1c:	f003 0302 	and.w	r3, r3, #2
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d117      	bne.n	800ea54 <create_name+0x358>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ea24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ea28:	f003 0303 	and.w	r3, r3, #3
 800ea2c:	2b01      	cmp	r3, #1
 800ea2e:	d105      	bne.n	800ea3c <create_name+0x340>
 800ea30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea34:	f043 0310 	orr.w	r3, r3, #16
 800ea38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ea3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ea40:	f003 030c 	and.w	r3, r3, #12
 800ea44:	2b04      	cmp	r3, #4
 800ea46:	d105      	bne.n	800ea54 <create_name+0x358>
 800ea48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea4c:	f043 0308 	orr.w	r3, r3, #8
 800ea50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ea5a:	330b      	adds	r3, #11
 800ea5c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ea60:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ea62:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3728      	adds	r7, #40	@ 0x28
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}

0800ea6c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	781b      	ldrb	r3, [r3, #0]
 800ea7a:	2b2f      	cmp	r3, #47	@ 0x2f
 800ea7c:	d003      	beq.n	800ea86 <follow_path+0x1a>
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	2b5c      	cmp	r3, #92	@ 0x5c
 800ea84:	d102      	bne.n	800ea8c <follow_path+0x20>
		path++;
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	3301      	adds	r3, #1
 800ea8a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	2b1f      	cmp	r3, #31
 800ea9a:	d80a      	bhi.n	800eab2 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800ea9c:	2100      	movs	r1, #0
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f7ff f8a5 	bl	800dbee <dir_sdi>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800eab0:	e045      	b.n	800eb3e <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eab2:	463b      	mov	r3, r7
 800eab4:	4619      	mov	r1, r3
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f7ff fe20 	bl	800e6fc <create_name>
 800eabc:	4603      	mov	r3, r0
 800eabe:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800eac0:	7bfb      	ldrb	r3, [r7, #15]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d136      	bne.n	800eb34 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	f7ff fc4a 	bl	800e360 <dir_find>
 800eacc:	4603      	mov	r3, r0
 800eace:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ead6:	7adb      	ldrb	r3, [r3, #11]
 800ead8:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800eada:	7bfb      	ldrb	r3, [r7, #15]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d00a      	beq.n	800eaf6 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800eae0:	7bfb      	ldrb	r3, [r7, #15]
 800eae2:	2b04      	cmp	r3, #4
 800eae4:	d128      	bne.n	800eb38 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800eae6:	7bbb      	ldrb	r3, [r7, #14]
 800eae8:	f003 0304 	and.w	r3, r3, #4
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d123      	bne.n	800eb38 <follow_path+0xcc>
 800eaf0:	2305      	movs	r3, #5
 800eaf2:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800eaf4:	e020      	b.n	800eb38 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eaf6:	7bbb      	ldrb	r3, [r7, #14]
 800eaf8:	f003 0304 	and.w	r3, r3, #4
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d11d      	bne.n	800eb3c <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800eb06:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	330b      	adds	r3, #11
 800eb0c:	781b      	ldrb	r3, [r3, #0]
 800eb0e:	f003 0310 	and.w	r3, r3, #16
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d102      	bne.n	800eb1c <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800eb16:	2305      	movs	r3, #5
 800eb18:	73fb      	strb	r3, [r7, #15]
 800eb1a:	e010      	b.n	800eb3e <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800eb22:	68b9      	ldr	r1, [r7, #8]
 800eb24:	4618      	mov	r0, r3
 800eb26:	f7ff fa37 	bl	800df98 <ld_clust>
 800eb2a:	4602      	mov	r2, r0
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eb32:	e7be      	b.n	800eab2 <follow_path+0x46>
			if (res != FR_OK) break;
 800eb34:	bf00      	nop
 800eb36:	e002      	b.n	800eb3e <follow_path+0xd2>
				break;
 800eb38:	bf00      	nop
 800eb3a:	e000      	b.n	800eb3e <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eb3c:	bf00      	nop
		}
	}

	return res;
 800eb3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3710      	adds	r7, #16
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}

0800eb48 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b087      	sub	sp, #28
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800eb50:	f04f 33ff 	mov.w	r3, #4294967295
 800eb54:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d031      	beq.n	800ebc2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	617b      	str	r3, [r7, #20]
 800eb64:	e002      	b.n	800eb6c <get_ldnumber+0x24>
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	3301      	adds	r3, #1
 800eb6a:	617b      	str	r3, [r7, #20]
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	781b      	ldrb	r3, [r3, #0]
 800eb70:	2b1f      	cmp	r3, #31
 800eb72:	d903      	bls.n	800eb7c <get_ldnumber+0x34>
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	781b      	ldrb	r3, [r3, #0]
 800eb78:	2b3a      	cmp	r3, #58	@ 0x3a
 800eb7a:	d1f4      	bne.n	800eb66 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800eb7c:	697b      	ldr	r3, [r7, #20]
 800eb7e:	781b      	ldrb	r3, [r3, #0]
 800eb80:	2b3a      	cmp	r3, #58	@ 0x3a
 800eb82:	d11c      	bne.n	800ebbe <get_ldnumber+0x76>
			tp = *path;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	1c5a      	adds	r2, r3, #1
 800eb8e:	60fa      	str	r2, [r7, #12]
 800eb90:	781b      	ldrb	r3, [r3, #0]
 800eb92:	3b30      	subs	r3, #48	@ 0x30
 800eb94:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	2b09      	cmp	r3, #9
 800eb9a:	d80e      	bhi.n	800ebba <get_ldnumber+0x72>
 800eb9c:	68fa      	ldr	r2, [r7, #12]
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	429a      	cmp	r2, r3
 800eba2:	d10a      	bne.n	800ebba <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d107      	bne.n	800ebba <get_ldnumber+0x72>
					vol = (int)i;
 800ebaa:	68bb      	ldr	r3, [r7, #8]
 800ebac:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	3301      	adds	r3, #1
 800ebb2:	617b      	str	r3, [r7, #20]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	697a      	ldr	r2, [r7, #20]
 800ebb8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	e002      	b.n	800ebc4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ebc2:	693b      	ldr	r3, [r7, #16]
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	371c      	adds	r7, #28
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bc80      	pop	{r7}
 800ebcc:	4770      	bx	lr
	...

0800ebd0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b082      	sub	sp, #8
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f04f 32ff 	mov.w	r2, #4294967295
 800ebe8:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800ebec:	6839      	ldr	r1, [r7, #0]
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f7fe fc0f 	bl	800d412 <move_window>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d001      	beq.n	800ebfe <check_fs+0x2e>
		return 3;
 800ebfa:	2303      	movs	r3, #3
 800ebfc:	e04a      	b.n	800ec94 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ec04:	3301      	adds	r3, #1
 800ec06:	781b      	ldrb	r3, [r3, #0]
 800ec08:	021b      	lsls	r3, r3, #8
 800ec0a:	b21a      	sxth	r2, r3
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 800ec12:	b21b      	sxth	r3, r3
 800ec14:	4313      	orrs	r3, r2
 800ec16:	b21b      	sxth	r3, r3
 800ec18:	4a20      	ldr	r2, [pc, #128]	@ (800ec9c <check_fs+0xcc>)
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d001      	beq.n	800ec22 <check_fs+0x52>
		return 2;
 800ec1e:	2302      	movs	r3, #2
 800ec20:	e038      	b.n	800ec94 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	3336      	adds	r3, #54	@ 0x36
 800ec26:	3303      	adds	r3, #3
 800ec28:	781b      	ldrb	r3, [r3, #0]
 800ec2a:	061a      	lsls	r2, r3, #24
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	3336      	adds	r3, #54	@ 0x36
 800ec30:	3302      	adds	r3, #2
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	041b      	lsls	r3, r3, #16
 800ec36:	431a      	orrs	r2, r3
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	3336      	adds	r3, #54	@ 0x36
 800ec3c:	3301      	adds	r3, #1
 800ec3e:	781b      	ldrb	r3, [r3, #0]
 800ec40:	021b      	lsls	r3, r3, #8
 800ec42:	4313      	orrs	r3, r2
 800ec44:	687a      	ldr	r2, [r7, #4]
 800ec46:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 800ec4a:	4313      	orrs	r3, r2
 800ec4c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ec50:	4a13      	ldr	r2, [pc, #76]	@ (800eca0 <check_fs+0xd0>)
 800ec52:	4293      	cmp	r3, r2
 800ec54:	d101      	bne.n	800ec5a <check_fs+0x8a>
		return 0;
 800ec56:	2300      	movs	r3, #0
 800ec58:	e01c      	b.n	800ec94 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	3352      	adds	r3, #82	@ 0x52
 800ec5e:	3303      	adds	r3, #3
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	061a      	lsls	r2, r3, #24
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	3352      	adds	r3, #82	@ 0x52
 800ec68:	3302      	adds	r3, #2
 800ec6a:	781b      	ldrb	r3, [r3, #0]
 800ec6c:	041b      	lsls	r3, r3, #16
 800ec6e:	431a      	orrs	r2, r3
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	3352      	adds	r3, #82	@ 0x52
 800ec74:	3301      	adds	r3, #1
 800ec76:	781b      	ldrb	r3, [r3, #0]
 800ec78:	021b      	lsls	r3, r3, #8
 800ec7a:	4313      	orrs	r3, r2
 800ec7c:	687a      	ldr	r2, [r7, #4]
 800ec7e:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 800ec82:	4313      	orrs	r3, r2
 800ec84:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ec88:	4a05      	ldr	r2, [pc, #20]	@ (800eca0 <check_fs+0xd0>)
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	d101      	bne.n	800ec92 <check_fs+0xc2>
		return 0;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	e000      	b.n	800ec94 <check_fs+0xc4>

	return 1;
 800ec92:	2301      	movs	r3, #1
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	3708      	adds	r7, #8
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}
 800ec9c:	ffffaa55 	.word	0xffffaa55
 800eca0:	00544146 	.word	0x00544146

0800eca4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b096      	sub	sp, #88	@ 0x58
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	60f8      	str	r0, [r7, #12]
 800ecac:	60b9      	str	r1, [r7, #8]
 800ecae:	4613      	mov	r3, r2
 800ecb0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ecb8:	68b8      	ldr	r0, [r7, #8]
 800ecba:	f7ff ff45 	bl	800eb48 <get_ldnumber>
 800ecbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ecc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	da01      	bge.n	800ecca <find_volume+0x26>
 800ecc6:	230b      	movs	r3, #11
 800ecc8:	e2b0      	b.n	800f22c <find_volume+0x588>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ecca:	4aa1      	ldr	r2, [pc, #644]	@ (800ef50 <find_volume+0x2ac>)
 800eccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecd2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ecd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d101      	bne.n	800ecde <find_volume+0x3a>
 800ecda:	230c      	movs	r3, #12
 800ecdc:	e2a6      	b.n	800f22c <find_volume+0x588>

	ENTER_FF(fs);						/* Lock the volume */
 800ecde:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ece0:	f7fe f9b0 	bl	800d044 <lock_fs>
 800ece4:	4603      	mov	r3, r0
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d101      	bne.n	800ecee <find_volume+0x4a>
 800ecea:	230f      	movs	r3, #15
 800ecec:	e29e      	b.n	800f22c <find_volume+0x588>
	*rfs = fs;							/* Return pointer to the file system object */
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ecf2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800ecf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecf6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d01b      	beq.n	800ed36 <find_volume+0x92>
		stat = disk_status(fs->drv);
 800ecfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed00:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7fe f887 	bl	800ce18 <disk_status>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ed10:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ed14:	f003 0301 	and.w	r3, r3, #1
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d10c      	bne.n	800ed36 <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800ed1c:	79fb      	ldrb	r3, [r7, #7]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d007      	beq.n	800ed32 <find_volume+0x8e>
 800ed22:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ed26:	f003 0304 	and.w	r3, r3, #4
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d001      	beq.n	800ed32 <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 800ed2e:	230a      	movs	r3, #10
 800ed30:	e27c      	b.n	800f22c <find_volume+0x588>
			return FR_OK;				/* The file system object is valid */
 800ed32:	2300      	movs	r3, #0
 800ed34:	e27a      	b.n	800f22c <find_volume+0x588>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ed36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed38:	2200      	movs	r2, #0
 800ed3a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ed3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed40:	b2da      	uxtb	r2, r3
 800ed42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed44:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ed48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed4a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f7fe f87c 	bl	800ce4c <disk_initialize>
 800ed54:	4603      	mov	r3, r0
 800ed56:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800ed5a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ed5e:	f003 0301 	and.w	r3, r3, #1
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d001      	beq.n	800ed6a <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ed66:	2303      	movs	r3, #3
 800ed68:	e260      	b.n	800f22c <find_volume+0x588>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800ed6a:	79fb      	ldrb	r3, [r7, #7]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d007      	beq.n	800ed80 <find_volume+0xdc>
 800ed70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ed74:	f003 0304 	and.w	r3, r3, #4
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d001      	beq.n	800ed80 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800ed7c:	230a      	movs	r3, #10
 800ed7e:	e255      	b.n	800f22c <find_volume+0x588>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800ed80:	2300      	movs	r3, #0
 800ed82:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800ed84:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ed86:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ed88:	f7ff ff22 	bl	800ebd0 <check_fs>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800ed92:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ed96:	2b01      	cmp	r3, #1
 800ed98:	d153      	bne.n	800ee42 <find_volume+0x19e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ed9e:	e028      	b.n	800edf2 <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800eda0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eda2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eda4:	011b      	lsls	r3, r3, #4
 800eda6:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800edaa:	4413      	add	r3, r2
 800edac:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800edae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edb0:	3304      	adds	r3, #4
 800edb2:	781b      	ldrb	r3, [r3, #0]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d012      	beq.n	800edde <find_volume+0x13a>
 800edb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edba:	330b      	adds	r3, #11
 800edbc:	781b      	ldrb	r3, [r3, #0]
 800edbe:	061a      	lsls	r2, r3, #24
 800edc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edc2:	330a      	adds	r3, #10
 800edc4:	781b      	ldrb	r3, [r3, #0]
 800edc6:	041b      	lsls	r3, r3, #16
 800edc8:	431a      	orrs	r2, r3
 800edca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edcc:	3309      	adds	r3, #9
 800edce:	781b      	ldrb	r3, [r3, #0]
 800edd0:	021b      	lsls	r3, r3, #8
 800edd2:	4313      	orrs	r3, r2
 800edd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800edd6:	3208      	adds	r2, #8
 800edd8:	7812      	ldrb	r2, [r2, #0]
 800edda:	431a      	orrs	r2, r3
 800eddc:	e000      	b.n	800ede0 <find_volume+0x13c>
 800edde:	2200      	movs	r2, #0
 800ede0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ede2:	009b      	lsls	r3, r3, #2
 800ede4:	3358      	adds	r3, #88	@ 0x58
 800ede6:	443b      	add	r3, r7
 800ede8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800edec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800edee:	3301      	adds	r3, #1
 800edf0:	643b      	str	r3, [r7, #64]	@ 0x40
 800edf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800edf4:	2b03      	cmp	r3, #3
 800edf6:	d9d3      	bls.n	800eda0 <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800edf8:	2300      	movs	r3, #0
 800edfa:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800edfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d002      	beq.n	800ee08 <find_volume+0x164>
 800ee02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee04:	3b01      	subs	r3, #1
 800ee06:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800ee08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee0a:	009b      	lsls	r3, r3, #2
 800ee0c:	3358      	adds	r3, #88	@ 0x58
 800ee0e:	443b      	add	r3, r7
 800ee10:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ee14:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800ee16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d005      	beq.n	800ee28 <find_volume+0x184>
 800ee1c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ee1e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ee20:	f7ff fed6 	bl	800ebd0 <check_fs>
 800ee24:	4603      	mov	r3, r0
 800ee26:	e000      	b.n	800ee2a <find_volume+0x186>
 800ee28:	2302      	movs	r3, #2
 800ee2a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800ee2e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d005      	beq.n	800ee42 <find_volume+0x19e>
 800ee36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee38:	3301      	adds	r3, #1
 800ee3a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ee3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee3e:	2b03      	cmp	r3, #3
 800ee40:	d9e2      	bls.n	800ee08 <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ee42:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ee46:	2b03      	cmp	r3, #3
 800ee48:	d101      	bne.n	800ee4e <find_volume+0x1aa>
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	e1ee      	b.n	800f22c <find_volume+0x588>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800ee4e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d001      	beq.n	800ee5a <find_volume+0x1b6>
 800ee56:	230d      	movs	r3, #13
 800ee58:	e1e8      	b.n	800f22c <find_volume+0x588>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ee5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee5c:	7b1b      	ldrb	r3, [r3, #12]
 800ee5e:	021b      	lsls	r3, r3, #8
 800ee60:	b21a      	sxth	r2, r3
 800ee62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee64:	7adb      	ldrb	r3, [r3, #11]
 800ee66:	b21b      	sxth	r3, r3
 800ee68:	4313      	orrs	r3, r2
 800ee6a:	b21b      	sxth	r3, r3
 800ee6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ee70:	d001      	beq.n	800ee76 <find_volume+0x1d2>
		return FR_NO_FILESYSTEM;
 800ee72:	230d      	movs	r3, #13
 800ee74:	e1da      	b.n	800f22c <find_volume+0x588>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800ee76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee78:	7ddb      	ldrb	r3, [r3, #23]
 800ee7a:	021b      	lsls	r3, r3, #8
 800ee7c:	b21a      	sxth	r2, r3
 800ee7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee80:	7d9b      	ldrb	r3, [r3, #22]
 800ee82:	b21b      	sxth	r3, r3
 800ee84:	4313      	orrs	r3, r2
 800ee86:	b21b      	sxth	r3, r3
 800ee88:	b29b      	uxth	r3, r3
 800ee8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800ee8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d112      	bne.n	800eeb8 <find_volume+0x214>
 800ee92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee94:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800ee98:	061a      	lsls	r2, r3, #24
 800ee9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee9c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800eea0:	041b      	lsls	r3, r3, #16
 800eea2:	431a      	orrs	r2, r3
 800eea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eea6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800eeaa:	021b      	lsls	r3, r3, #8
 800eeac:	4313      	orrs	r3, r2
 800eeae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eeb0:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800eeb4:	4313      	orrs	r3, r2
 800eeb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 800eeb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800eebc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800eec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eec2:	7c1a      	ldrb	r2, [r3, #16]
 800eec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eec6:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800eeca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eecc:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800eed0:	2b01      	cmp	r3, #1
 800eed2:	d006      	beq.n	800eee2 <find_volume+0x23e>
 800eed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eed6:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800eeda:	2b02      	cmp	r3, #2
 800eedc:	d001      	beq.n	800eee2 <find_volume+0x23e>
		return FR_NO_FILESYSTEM;
 800eede:	230d      	movs	r3, #13
 800eee0:	e1a4      	b.n	800f22c <find_volume+0x588>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800eee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eee4:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 800eee8:	461a      	mov	r2, r3
 800eeea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eeec:	fb02 f303 	mul.w	r3, r2, r3
 800eef0:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800eef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eef4:	7b5a      	ldrb	r2, [r3, #13]
 800eef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eef8:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800eefc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eefe:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d00a      	beq.n	800ef1c <find_volume+0x278>
 800ef06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef08:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800ef0c:	461a      	mov	r2, r3
 800ef0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef10:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800ef14:	3b01      	subs	r3, #1
 800ef16:	4013      	ands	r3, r2
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d001      	beq.n	800ef20 <find_volume+0x27c>
		return FR_NO_FILESYSTEM;
 800ef1c:	230d      	movs	r3, #13
 800ef1e:	e185      	b.n	800f22c <find_volume+0x588>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800ef20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef22:	7c9b      	ldrb	r3, [r3, #18]
 800ef24:	021b      	lsls	r3, r3, #8
 800ef26:	b21a      	sxth	r2, r3
 800ef28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef2a:	7c5b      	ldrb	r3, [r3, #17]
 800ef2c:	b21b      	sxth	r3, r3
 800ef2e:	4313      	orrs	r3, r2
 800ef30:	b21b      	sxth	r3, r3
 800ef32:	b29a      	uxth	r2, r3
 800ef34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef36:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800ef3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef3c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800ef40:	f003 030f 	and.w	r3, r3, #15
 800ef44:	b29b      	uxth	r3, r3
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d004      	beq.n	800ef54 <find_volume+0x2b0>
		return FR_NO_FILESYSTEM;
 800ef4a:	230d      	movs	r3, #13
 800ef4c:	e16e      	b.n	800f22c <find_volume+0x588>
 800ef4e:	bf00      	nop
 800ef50:	20001278 	.word	0x20001278

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800ef54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef56:	7d1b      	ldrb	r3, [r3, #20]
 800ef58:	021b      	lsls	r3, r3, #8
 800ef5a:	b21a      	sxth	r2, r3
 800ef5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef5e:	7cdb      	ldrb	r3, [r3, #19]
 800ef60:	b21b      	sxth	r3, r3
 800ef62:	4313      	orrs	r3, r2
 800ef64:	b21b      	sxth	r3, r3
 800ef66:	b29b      	uxth	r3, r3
 800ef68:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800ef6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d112      	bne.n	800ef96 <find_volume+0x2f2>
 800ef70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef72:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800ef76:	061a      	lsls	r2, r3, #24
 800ef78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef7a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800ef7e:	041b      	lsls	r3, r3, #16
 800ef80:	431a      	orrs	r2, r3
 800ef82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef84:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800ef88:	021b      	lsls	r3, r3, #8
 800ef8a:	4313      	orrs	r3, r2
 800ef8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ef8e:	f892 2020 	ldrb.w	r2, [r2, #32]
 800ef92:	4313      	orrs	r3, r2
 800ef94:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800ef96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef98:	7bdb      	ldrb	r3, [r3, #15]
 800ef9a:	021b      	lsls	r3, r3, #8
 800ef9c:	b21a      	sxth	r2, r3
 800ef9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efa0:	7b9b      	ldrb	r3, [r3, #14]
 800efa2:	b21b      	sxth	r3, r3
 800efa4:	4313      	orrs	r3, r2
 800efa6:	b21b      	sxth	r3, r3
 800efa8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800efaa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800efac:	2b00      	cmp	r3, #0
 800efae:	d101      	bne.n	800efb4 <find_volume+0x310>
 800efb0:	230d      	movs	r3, #13
 800efb2:	e13b      	b.n	800f22c <find_volume+0x588>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800efb4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800efb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800efb8:	4413      	add	r3, r2
 800efba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800efbc:	f8b2 2208 	ldrh.w	r2, [r2, #520]	@ 0x208
 800efc0:	0912      	lsrs	r2, r2, #4
 800efc2:	b292      	uxth	r2, r2
 800efc4:	4413      	add	r3, r2
 800efc6:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800efc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800efca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efcc:	429a      	cmp	r2, r3
 800efce:	d201      	bcs.n	800efd4 <find_volume+0x330>
 800efd0:	230d      	movs	r3, #13
 800efd2:	e12b      	b.n	800f22c <find_volume+0x588>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800efd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800efd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efd8:	1ad3      	subs	r3, r2, r3
 800efda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800efdc:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800efe0:	fbb3 f3f2 	udiv	r3, r3, r2
 800efe4:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800efe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d101      	bne.n	800eff0 <find_volume+0x34c>
 800efec:	230d      	movs	r3, #13
 800efee:	e11d      	b.n	800f22c <find_volume+0x588>
	fmt = FS_FAT12;
 800eff0:	2301      	movs	r3, #1
 800eff2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800eff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eff8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800effc:	4293      	cmp	r3, r2
 800effe:	d902      	bls.n	800f006 <find_volume+0x362>
 800f000:	2302      	movs	r3, #2
 800f002:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800f006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f008:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f00c:	4293      	cmp	r3, r2
 800f00e:	d902      	bls.n	800f016 <find_volume+0x372>
 800f010:	2303      	movs	r3, #3
 800f012:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800f016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f018:	1c9a      	adds	r2, r3, #2
 800f01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f01c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
	fs->volbase = bsect;								/* Volume start sector */
 800f020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f022:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f024:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800f028:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f02a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f02c:	441a      	add	r2, r3
 800f02e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f030:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 800f034:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f038:	441a      	add	r2, r3
 800f03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f03c:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
	if (fmt == FS_FAT32) {
 800f040:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f044:	2b03      	cmp	r3, #3
 800f046:	d121      	bne.n	800f08c <find_volume+0x3e8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800f048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f04a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d001      	beq.n	800f056 <find_volume+0x3b2>
 800f052:	230d      	movs	r3, #13
 800f054:	e0ea      	b.n	800f22c <find_volume+0x588>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800f056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f058:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f05c:	061a      	lsls	r2, r3, #24
 800f05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f060:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800f064:	041b      	lsls	r3, r3, #16
 800f066:	431a      	orrs	r2, r3
 800f068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f06a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f06e:	021b      	lsls	r3, r3, #8
 800f070:	4313      	orrs	r3, r2
 800f072:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f074:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 800f078:	431a      	orrs	r2, r3
 800f07a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f07c:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800f080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f082:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f086:	009b      	lsls	r3, r3, #2
 800f088:	647b      	str	r3, [r7, #68]	@ 0x44
 800f08a:	e025      	b.n	800f0d8 <find_volume+0x434>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800f08c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f08e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800f092:	2b00      	cmp	r3, #0
 800f094:	d101      	bne.n	800f09a <find_volume+0x3f6>
 800f096:	230d      	movs	r3, #13
 800f098:	e0c8      	b.n	800f22c <find_volume+0x588>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800f09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f09c:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800f0a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f0a2:	441a      	add	r2, r3
 800f0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0a6:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f0aa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f0ae:	2b02      	cmp	r3, #2
 800f0b0:	d104      	bne.n	800f0bc <find_volume+0x418>
 800f0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0b4:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f0b8:	005b      	lsls	r3, r3, #1
 800f0ba:	e00c      	b.n	800f0d6 <find_volume+0x432>
 800f0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0be:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800f0c2:	4613      	mov	r3, r2
 800f0c4:	005b      	lsls	r3, r3, #1
 800f0c6:	4413      	add	r3, r2
 800f0c8:	085a      	lsrs	r2, r3, #1
 800f0ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0cc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800f0d0:	f003 0301 	and.w	r3, r3, #1
 800f0d4:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800f0d6:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800f0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0da:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800f0de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f0e0:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800f0e4:	0a5b      	lsrs	r3, r3, #9
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d201      	bcs.n	800f0ee <find_volume+0x44a>
		return FR_NO_FILESYSTEM;
 800f0ea:	230d      	movs	r3, #13
 800f0ec:	e09e      	b.n	800f22c <find_volume+0x588>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800f0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0f0:	f04f 32ff 	mov.w	r2, #4294967295
 800f0f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800f0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0fa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800f0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f100:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800f104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f106:	2280      	movs	r2, #128	@ 0x80
 800f108:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800f10c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f110:	2b03      	cmp	r3, #3
 800f112:	d177      	bne.n	800f204 <find_volume+0x560>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800f114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f116:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f11a:	021b      	lsls	r3, r3, #8
 800f11c:	b21a      	sxth	r2, r3
 800f11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f120:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f124:	b21b      	sxth	r3, r3
 800f126:	4313      	orrs	r3, r2
 800f128:	b21b      	sxth	r3, r3
 800f12a:	2b01      	cmp	r3, #1
 800f12c:	d16a      	bne.n	800f204 <find_volume+0x560>
		&& move_window(fs, bsect + 1) == FR_OK)
 800f12e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f130:	3301      	adds	r3, #1
 800f132:	4619      	mov	r1, r3
 800f134:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f136:	f7fe f96c 	bl	800d412 <move_window>
 800f13a:	4603      	mov	r3, r0
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d161      	bne.n	800f204 <find_volume+0x560>
	{
		fs->fsi_flag = 0;
 800f140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f142:	2200      	movs	r2, #0
 800f144:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f14a:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 800f14e:	021b      	lsls	r3, r3, #8
 800f150:	b21a      	sxth	r2, r3
 800f152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f154:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 800f158:	b21b      	sxth	r3, r3
 800f15a:	4313      	orrs	r3, r2
 800f15c:	b21b      	sxth	r3, r3
 800f15e:	4a35      	ldr	r2, [pc, #212]	@ (800f234 <find_volume+0x590>)
 800f160:	4293      	cmp	r3, r2
 800f162:	d14f      	bne.n	800f204 <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800f164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f166:	78db      	ldrb	r3, [r3, #3]
 800f168:	061a      	lsls	r2, r3, #24
 800f16a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f16c:	789b      	ldrb	r3, [r3, #2]
 800f16e:	041b      	lsls	r3, r3, #16
 800f170:	431a      	orrs	r2, r3
 800f172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f174:	785b      	ldrb	r3, [r3, #1]
 800f176:	021b      	lsls	r3, r3, #8
 800f178:	4313      	orrs	r3, r2
 800f17a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f17c:	7812      	ldrb	r2, [r2, #0]
 800f17e:	4313      	orrs	r3, r2
 800f180:	4a2d      	ldr	r2, [pc, #180]	@ (800f238 <find_volume+0x594>)
 800f182:	4293      	cmp	r3, r2
 800f184:	d13e      	bne.n	800f204 <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800f186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f188:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 800f18c:	061a      	lsls	r2, r3, #24
 800f18e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f190:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 800f194:	041b      	lsls	r3, r3, #16
 800f196:	431a      	orrs	r2, r3
 800f198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f19a:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 800f19e:	021b      	lsls	r3, r3, #8
 800f1a0:	4313      	orrs	r3, r2
 800f1a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f1a4:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 800f1a8:	4313      	orrs	r3, r2
 800f1aa:	4a24      	ldr	r2, [pc, #144]	@ (800f23c <find_volume+0x598>)
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d129      	bne.n	800f204 <find_volume+0x560>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800f1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1b2:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 800f1b6:	061a      	lsls	r2, r3, #24
 800f1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ba:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 800f1be:	041b      	lsls	r3, r3, #16
 800f1c0:	431a      	orrs	r2, r3
 800f1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1c4:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 800f1c8:	021b      	lsls	r3, r3, #8
 800f1ca:	4313      	orrs	r3, r2
 800f1cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f1ce:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 800f1d2:	431a      	orrs	r2, r3
 800f1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800f1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1dc:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 800f1e0:	061a      	lsls	r2, r3, #24
 800f1e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1e4:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 800f1e8:	041b      	lsls	r3, r3, #16
 800f1ea:	431a      	orrs	r2, r3
 800f1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ee:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 800f1f2:	021b      	lsls	r3, r3, #8
 800f1f4:	4313      	orrs	r3, r2
 800f1f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f1f8:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 800f1fc:	431a      	orrs	r2, r3
 800f1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f200:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800f204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f206:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800f20a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800f20e:	4b0c      	ldr	r3, [pc, #48]	@ (800f240 <find_volume+0x59c>)
 800f210:	881b      	ldrh	r3, [r3, #0]
 800f212:	3301      	adds	r3, #1
 800f214:	b29a      	uxth	r2, r3
 800f216:	4b0a      	ldr	r3, [pc, #40]	@ (800f240 <find_volume+0x59c>)
 800f218:	801a      	strh	r2, [r3, #0]
 800f21a:	4b09      	ldr	r3, [pc, #36]	@ (800f240 <find_volume+0x59c>)
 800f21c:	881a      	ldrh	r2, [r3, #0]
 800f21e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f220:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800f224:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f226:	f7fe f881 	bl	800d32c <clear_lock>
#endif

	return FR_OK;
 800f22a:	2300      	movs	r3, #0
}
 800f22c:	4618      	mov	r0, r3
 800f22e:	3758      	adds	r7, #88	@ 0x58
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}
 800f234:	ffffaa55 	.word	0xffffaa55
 800f238:	41615252 	.word	0x41615252
 800f23c:	61417272 	.word	0x61417272
 800f240:	2000127c 	.word	0x2000127c

0800f244 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b084      	sub	sp, #16
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d022      	beq.n	800f29c <validate+0x58>
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d01d      	beq.n	800f29c <validate+0x58>
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f266:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d016      	beq.n	800f29c <validate+0x58>
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f274:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 800f27e:	429a      	cmp	r2, r3
 800f280:	d10c      	bne.n	800f29c <validate+0x58>
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f288:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800f28c:	4618      	mov	r0, r3
 800f28e:	f7fd fdc3 	bl	800ce18 <disk_status>
 800f292:	4603      	mov	r3, r0
 800f294:	f003 0301 	and.w	r3, r3, #1
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d001      	beq.n	800f2a0 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800f29c:	2309      	movs	r3, #9
 800f29e:	e00b      	b.n	800f2b8 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f7fd fecc 	bl	800d044 <lock_fs>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d101      	bne.n	800f2b6 <validate+0x72>
 800f2b2:	230f      	movs	r3, #15
 800f2b4:	e000      	b.n	800f2b8 <validate+0x74>

	return FR_OK;
 800f2b6:	2300      	movs	r3, #0
}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	3710      	adds	r7, #16
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}

0800f2c0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b088      	sub	sp, #32
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	60f8      	str	r0, [r7, #12]
 800f2c8:	60b9      	str	r1, [r7, #8]
 800f2ca:	4613      	mov	r3, r2
 800f2cc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800f2d2:	f107 0310 	add.w	r3, r7, #16
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7ff fc36 	bl	800eb48 <get_ldnumber>
 800f2dc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f2de:	69fb      	ldr	r3, [r7, #28]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	da01      	bge.n	800f2e8 <f_mount+0x28>
 800f2e4:	230b      	movs	r3, #11
 800f2e6:	e04c      	b.n	800f382 <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f2e8:	4a28      	ldr	r2, [pc, #160]	@ (800f38c <f_mount+0xcc>)
 800f2ea:	69fb      	ldr	r3, [r7, #28]
 800f2ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2f0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f2f2:	69bb      	ldr	r3, [r7, #24]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d011      	beq.n	800f31c <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 800f2f8:	69b8      	ldr	r0, [r7, #24]
 800f2fa:	f7fe f817 	bl	800d32c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800f2fe:	69bb      	ldr	r3, [r7, #24]
 800f300:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800f304:	4618      	mov	r0, r3
 800f306:	f000 ffd3 	bl	80102b0 <ff_del_syncobj>
 800f30a:	4603      	mov	r3, r0
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d101      	bne.n	800f314 <f_mount+0x54>
 800f310:	2302      	movs	r3, #2
 800f312:	e036      	b.n	800f382 <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f314:	69bb      	ldr	r3, [r7, #24]
 800f316:	2200      	movs	r2, #0
 800f318:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	}

	if (fs) {
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d011      	beq.n	800f346 <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	2200      	movs	r2, #0
 800f326:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800f32a:	69fb      	ldr	r3, [r7, #28]
 800f32c:	b2da      	uxtb	r2, r3
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 800f334:	4619      	mov	r1, r3
 800f336:	4610      	mov	r0, r2
 800f338:	f000 ff9a 	bl	8010270 <ff_cre_syncobj>
 800f33c:	4603      	mov	r3, r0
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d101      	bne.n	800f346 <f_mount+0x86>
 800f342:	2302      	movs	r3, #2
 800f344:	e01d      	b.n	800f382 <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f346:	68fa      	ldr	r2, [r7, #12]
 800f348:	4910      	ldr	r1, [pc, #64]	@ (800f38c <f_mount+0xcc>)
 800f34a:	69fb      	ldr	r3, [r7, #28]
 800f34c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d002      	beq.n	800f35c <f_mount+0x9c>
 800f356:	79fb      	ldrb	r3, [r7, #7]
 800f358:	2b01      	cmp	r3, #1
 800f35a:	d001      	beq.n	800f360 <f_mount+0xa0>
 800f35c:	2300      	movs	r3, #0
 800f35e:	e010      	b.n	800f382 <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800f360:	f107 0108 	add.w	r1, r7, #8
 800f364:	f107 030c 	add.w	r3, r7, #12
 800f368:	2200      	movs	r2, #0
 800f36a:	4618      	mov	r0, r3
 800f36c:	f7ff fc9a 	bl	800eca4 <find_volume>
 800f370:	4603      	mov	r3, r0
 800f372:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	7dfa      	ldrb	r2, [r7, #23]
 800f378:	4611      	mov	r1, r2
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7fd fe71 	bl	800d062 <unlock_fs>
 800f380:	7dfb      	ldrb	r3, [r7, #23]
}
 800f382:	4618      	mov	r0, r3
 800f384:	3720      	adds	r7, #32
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}
 800f38a:	bf00      	nop
 800f38c:	20001278 	.word	0x20001278

0800f390 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	f5ad 6d8b 	sub.w	sp, sp, #1112	@ 0x458
 800f396:	af00      	add	r7, sp, #0
 800f398:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f39c:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f3a0:	6018      	str	r0, [r3, #0]
 800f3a2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f3a6:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 800f3aa:	6019      	str	r1, [r3, #0]
 800f3ac:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f3b0:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800f3b4:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800f3b6:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f3ba:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d101      	bne.n	800f3c8 <f_open+0x38>
 800f3c4:	2309      	movs	r3, #9
 800f3c6:	e267      	b.n	800f898 <f_open+0x508>
	fp->fs = 0;			/* Clear file object */
 800f3c8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f3cc:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800f3d8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f3dc:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800f3e0:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 800f3e4:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 800f3e8:	7812      	ldrb	r2, [r2, #0]
 800f3ea:	f002 021f 	and.w	r2, r2, #31
 800f3ee:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800f3f0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f3f4:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800f3f8:	781b      	ldrb	r3, [r3, #0]
 800f3fa:	f023 0301 	bic.w	r3, r3, #1
 800f3fe:	b2da      	uxtb	r2, r3
 800f400:	f107 0108 	add.w	r1, r7, #8
 800f404:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800f408:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800f40c:	4618      	mov	r0, r3
 800f40e:	f7ff fc49 	bl	800eca4 <find_volume>
 800f412:	4603      	mov	r3, r0
 800f414:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800f418:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	f040 822d 	bne.w	800f87c <f_open+0x4ec>
		INIT_BUF(dj);
 800f422:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f426:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f42a:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 800f42e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
 800f432:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f436:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f43a:	f107 0214 	add.w	r2, r7, #20
 800f43e:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
		res = follow_path(&dj, path);	/* Follow the file path */
 800f442:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f446:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 800f44a:	681a      	ldr	r2, [r3, #0]
 800f44c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800f450:	4611      	mov	r1, r2
 800f452:	4618      	mov	r0, r3
 800f454:	f7ff fb0a 	bl	800ea6c <follow_path>
 800f458:	4603      	mov	r3, r0
 800f45a:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
		dir = dj.dir;
 800f45e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f462:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f466:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f46a:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f46e:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800f472:	2b00      	cmp	r3, #0
 800f474:	d11b      	bne.n	800f4ae <f_open+0x11e>
			if (!dir)	/* Default directory itself */
 800f476:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d103      	bne.n	800f486 <f_open+0xf6>
				res = FR_INVALID_NAME;
 800f47e:	2306      	movs	r3, #6
 800f480:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 800f484:	e013      	b.n	800f4ae <f_open+0x11e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f486:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f48a:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800f48e:	781b      	ldrb	r3, [r3, #0]
 800f490:	2b01      	cmp	r3, #1
 800f492:	bf8c      	ite	hi
 800f494:	2301      	movhi	r3, #1
 800f496:	2300      	movls	r3, #0
 800f498:	b2db      	uxtb	r3, r3
 800f49a:	461a      	mov	r2, r3
 800f49c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800f4a0:	4611      	mov	r1, r2
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7fd fdfc 	bl	800d0a0 <chk_lock>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f4ae:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f4b2:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	f003 031c 	and.w	r3, r3, #28
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	f000 80e6 	beq.w	800f68e <f_open+0x2fe>
			if (res != FR_OK) {					/* No file, create new */
 800f4c2:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d027      	beq.n	800f51a <f_open+0x18a>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800f4ca:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800f4ce:	2b04      	cmp	r3, #4
 800f4d0:	d10e      	bne.n	800f4f0 <f_open+0x160>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f4d2:	f7fd fe51 	bl	800d178 <enq_lock>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d006      	beq.n	800f4ea <f_open+0x15a>
 800f4dc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f7fe fffd 	bl	800e4e0 <dir_register>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	e000      	b.n	800f4ec <f_open+0x15c>
 800f4ea:	2312      	movs	r3, #18
 800f4ec:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f4f0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f4f4:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800f4f8:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 800f4fc:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 800f500:	7812      	ldrb	r2, [r2, #0]
 800f502:	f042 0208 	orr.w	r2, r2, #8
 800f506:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800f508:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f50c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f510:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f514:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
 800f518:	e017      	b.n	800f54a <f_open+0x1ba>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f51a:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f51e:	330b      	adds	r3, #11
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	f003 0311 	and.w	r3, r3, #17
 800f526:	2b00      	cmp	r3, #0
 800f528:	d003      	beq.n	800f532 <f_open+0x1a2>
					res = FR_DENIED;
 800f52a:	2307      	movs	r3, #7
 800f52c:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 800f530:	e00b      	b.n	800f54a <f_open+0x1ba>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800f532:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f536:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800f53a:	781b      	ldrb	r3, [r3, #0]
 800f53c:	f003 0304 	and.w	r3, r3, #4
 800f540:	2b00      	cmp	r3, #0
 800f542:	d002      	beq.n	800f54a <f_open+0x1ba>
						res = FR_EXIST;
 800f544:	2308      	movs	r3, #8
 800f546:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f54a:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800f54e:	2b00      	cmp	r3, #0
 800f550:	f040 80c1 	bne.w	800f6d6 <f_open+0x346>
 800f554:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f558:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	f003 0308 	and.w	r3, r3, #8
 800f562:	2b00      	cmp	r3, #0
 800f564:	f000 80b7 	beq.w	800f6d6 <f_open+0x346>
				dw = GET_FATTIME();				/* Created time */
 800f568:	f7fd fbd0 	bl	800cd0c <get_fattime>
 800f56c:	f8c7 044c 	str.w	r0, [r7, #1100]	@ 0x44c
				ST_DWORD(dir + DIR_CrtTime, dw);
 800f570:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f574:	330e      	adds	r3, #14
 800f576:	f8d7 244c 	ldr.w	r2, [r7, #1100]	@ 0x44c
 800f57a:	b2d2      	uxtb	r2, r2
 800f57c:	701a      	strb	r2, [r3, #0]
 800f57e:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 800f582:	b29b      	uxth	r3, r3
 800f584:	0a1b      	lsrs	r3, r3, #8
 800f586:	b29a      	uxth	r2, r3
 800f588:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f58c:	330f      	adds	r3, #15
 800f58e:	b2d2      	uxtb	r2, r2
 800f590:	701a      	strb	r2, [r3, #0]
 800f592:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 800f596:	0c1a      	lsrs	r2, r3, #16
 800f598:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f59c:	3310      	adds	r3, #16
 800f59e:	b2d2      	uxtb	r2, r2
 800f5a0:	701a      	strb	r2, [r3, #0]
 800f5a2:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 800f5a6:	0e1a      	lsrs	r2, r3, #24
 800f5a8:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f5ac:	3311      	adds	r3, #17
 800f5ae:	b2d2      	uxtb	r2, r2
 800f5b0:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800f5b2:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f5b6:	330b      	adds	r3, #11
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800f5bc:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f5c0:	331c      	adds	r3, #28
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	701a      	strb	r2, [r3, #0]
 800f5c6:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f5ca:	331d      	adds	r3, #29
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	701a      	strb	r2, [r3, #0]
 800f5d0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f5d4:	331e      	adds	r3, #30
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	701a      	strb	r2, [r3, #0]
 800f5da:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f5de:	331f      	adds	r3, #31
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800f5e4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f5e8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f5ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f5f0:	f8d7 1450 	ldr.w	r1, [r7, #1104]	@ 0x450
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f7fe fccf 	bl	800df98 <ld_clust>
 800f5fa:	f8c7 0448 	str.w	r0, [r7, #1096]	@ 0x448
				st_clust(dir, 0);				/* cluster = 0 */
 800f5fe:	2100      	movs	r1, #0
 800f600:	f8d7 0450 	ldr.w	r0, [r7, #1104]	@ 0x450
 800f604:	f7fe fcf5 	bl	800dff2 <st_clust>
				dj.fs->wflag = 1;
 800f608:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f60c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f610:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f614:	2201      	movs	r2, #1
 800f616:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800f61a:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d059      	beq.n	800f6d6 <f_open+0x346>
					dw = dj.fs->winsect;
 800f622:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f626:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f62a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f62e:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 800f632:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
					res = remove_chain(dj.fs, cl);
 800f636:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f63a:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f63e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f642:	f8d7 1448 	ldr.w	r1, [r7, #1096]	@ 0x448
 800f646:	4618      	mov	r0, r3
 800f648:	f7fe f9a6 	bl	800d998 <remove_chain>
 800f64c:	4603      	mov	r3, r0
 800f64e:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
					if (res == FR_OK) {
 800f652:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800f656:	2b00      	cmp	r3, #0
 800f658:	d13d      	bne.n	800f6d6 <f_open+0x346>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800f65a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f65e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f662:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f666:	f8d7 2448 	ldr.w	r2, [r7, #1096]	@ 0x448
 800f66a:	3a01      	subs	r2, #1
 800f66c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
						res = move_window(dj.fs, dw);
 800f670:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f674:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f678:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f67c:	f8d7 144c 	ldr.w	r1, [r7, #1100]	@ 0x44c
 800f680:	4618      	mov	r0, r3
 800f682:	f7fd fec6 	bl	800d412 <move_window>
 800f686:	4603      	mov	r3, r0
 800f688:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 800f68c:	e023      	b.n	800f6d6 <f_open+0x346>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800f68e:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800f692:	2b00      	cmp	r3, #0
 800f694:	d11f      	bne.n	800f6d6 <f_open+0x346>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800f696:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f69a:	330b      	adds	r3, #11
 800f69c:	781b      	ldrb	r3, [r3, #0]
 800f69e:	f003 0310 	and.w	r3, r3, #16
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d003      	beq.n	800f6ae <f_open+0x31e>
					res = FR_NO_FILE;
 800f6a6:	2304      	movs	r3, #4
 800f6a8:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 800f6ac:	e013      	b.n	800f6d6 <f_open+0x346>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800f6ae:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f6b2:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800f6b6:	781b      	ldrb	r3, [r3, #0]
 800f6b8:	f003 0302 	and.w	r3, r3, #2
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d00a      	beq.n	800f6d6 <f_open+0x346>
 800f6c0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f6c4:	330b      	adds	r3, #11
 800f6c6:	781b      	ldrb	r3, [r3, #0]
 800f6c8:	f003 0301 	and.w	r3, r3, #1
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d002      	beq.n	800f6d6 <f_open+0x346>
						res = FR_DENIED;
 800f6d0:	2307      	movs	r3, #7
 800f6d2:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
				}
			}
		}
		if (res == FR_OK) {
 800f6d6:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d151      	bne.n	800f782 <f_open+0x3f2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f6de:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f6e2:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	f003 0308 	and.w	r3, r3, #8
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d00b      	beq.n	800f708 <f_open+0x378>
				mode |= FA__WRITTEN;
 800f6f0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f6f4:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800f6f8:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 800f6fc:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 800f700:	7812      	ldrb	r2, [r2, #0]
 800f702:	f042 0220 	orr.w	r2, r2, #32
 800f706:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800f708:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f70c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f710:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f714:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 800f718:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f71c:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
			fp->dir_ptr = dir;
 800f726:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f72a:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 800f734:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f738:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f73c:	f2a3 4351 	subw	r3, r3, #1105	@ 0x451
 800f740:	781b      	ldrb	r3, [r3, #0]
 800f742:	2b01      	cmp	r3, #1
 800f744:	bf8c      	ite	hi
 800f746:	2301      	movhi	r3, #1
 800f748:	2300      	movls	r3, #0
 800f74a:	b2db      	uxtb	r3, r3
 800f74c:	461a      	mov	r2, r3
 800f74e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800f752:	4611      	mov	r1, r2
 800f754:	4618      	mov	r0, r3
 800f756:	f7fd fd33 	bl	800d1c0 <inc_lock>
 800f75a:	4602      	mov	r2, r0
 800f75c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f760:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800f76a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f76e:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d102      	bne.n	800f782 <f_open+0x3f2>
 800f77c:	2302      	movs	r3, #2
 800f77e:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800f782:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800f786:	2b00      	cmp	r3, #0
 800f788:	d178      	bne.n	800f87c <f_open+0x4ec>
			fp->flag = mode;					/* File access mode */
 800f78a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f78e:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 800f798:	f2a2 4251 	subw	r2, r2, #1105	@ 0x451
 800f79c:	7812      	ldrb	r2, [r2, #0]
 800f79e:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			fp->err = 0;						/* Clear error flag */
 800f7a2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f7a6:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800f7b2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f7b6:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f7ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f7be:	f8d7 1450 	ldr.w	r1, [r7, #1104]	@ 0x450
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f7fe fbe8 	bl	800df98 <ld_clust>
 800f7c8:	4602      	mov	r2, r0
 800f7ca:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f7ce:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800f7d8:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f7dc:	331f      	adds	r3, #31
 800f7de:	781b      	ldrb	r3, [r3, #0]
 800f7e0:	061a      	lsls	r2, r3, #24
 800f7e2:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f7e6:	331e      	adds	r3, #30
 800f7e8:	781b      	ldrb	r3, [r3, #0]
 800f7ea:	041b      	lsls	r3, r3, #16
 800f7ec:	431a      	orrs	r2, r3
 800f7ee:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 800f7f2:	331d      	adds	r3, #29
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	021b      	lsls	r3, r3, #8
 800f7f8:	4313      	orrs	r3, r2
 800f7fa:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 800f7fe:	321c      	adds	r2, #28
 800f800:	7812      	ldrb	r2, [r2, #0]
 800f802:	431a      	orrs	r2, r3
 800f804:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f808:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
			fp->fptr = 0;						/* File pointer */
 800f812:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f816:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	2200      	movs	r2, #0
 800f81e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			fp->dsect = 0;
 800f822:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f826:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	2200      	movs	r2, #0
 800f82e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800f832:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f836:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	2200      	movs	r2, #0
 800f83e:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800f842:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f846:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f84a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800f84e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f852:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
			fp->id = fp->fs->id;
 800f85c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f860:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f86a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800f86e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f872:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800f87c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800f880:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800f884:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f888:	f897 2457 	ldrb.w	r2, [r7, #1111]	@ 0x457
 800f88c:	4611      	mov	r1, r2
 800f88e:	4618      	mov	r0, r3
 800f890:	f7fd fbe7 	bl	800d062 <unlock_fs>
 800f894:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
}
 800f898:	4618      	mov	r0, r3
 800f89a:	f507 678b 	add.w	r7, r7, #1112	@ 0x458
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	bd80      	pop	{r7, pc}

0800f8a2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f8a2:	b580      	push	{r7, lr}
 800f8a4:	b08a      	sub	sp, #40	@ 0x28
 800f8a6:	af00      	add	r7, sp, #0
 800f8a8:	60f8      	str	r0, [r7, #12]
 800f8aa:	60b9      	str	r1, [r7, #8]
 800f8ac:	607a      	str	r2, [r7, #4]
 800f8ae:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800f8b0:	68bb      	ldr	r3, [r7, #8]
 800f8b2:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800f8ba:	68f8      	ldr	r0, [r7, #12]
 800f8bc:	f7ff fcc2 	bl	800f244 <validate>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800f8c4:	7dfb      	ldrb	r3, [r7, #23]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d009      	beq.n	800f8de <f_write+0x3c>
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f8d0:	7dfa      	ldrb	r2, [r7, #23]
 800f8d2:	4611      	mov	r1, r2
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f7fd fbc4 	bl	800d062 <unlock_fs>
 800f8da:	7dfb      	ldrb	r3, [r7, #23]
 800f8dc:	e1d4      	b.n	800fc88 <f_write+0x3e6>
	if (fp->err)							/* Check error */
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d00d      	beq.n	800f904 <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	4610      	mov	r0, r2
 800f8f8:	f7fd fbb3 	bl	800d062 <unlock_fs>
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 800f902:	e1c1      	b.n	800fc88 <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800f90a:	f003 0302 	and.w	r3, r3, #2
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d108      	bne.n	800f924 <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f918:	2107      	movs	r1, #7
 800f91a:	4618      	mov	r0, r3
 800f91c:	f7fd fba1 	bl	800d062 <unlock_fs>
 800f920:	2307      	movs	r3, #7
 800f922:	e1b1      	b.n	800fc88 <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	441a      	add	r2, r3
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800f934:	429a      	cmp	r2, r3
 800f936:	f080 8182 	bcs.w	800fc3e <f_write+0x39c>
 800f93a:	2300      	movs	r3, #0
 800f93c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800f93e:	e17e      	b.n	800fc3e <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800f946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	f040 813e 	bne.w	800fbcc <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800f956:	0a5b      	lsrs	r3, r3, #9
 800f958:	b2da      	uxtb	r2, r3
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f960:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800f964:	3b01      	subs	r3, #1
 800f966:	b2db      	uxtb	r3, r3
 800f968:	4013      	ands	r3, r2
 800f96a:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800f96c:	7dbb      	ldrb	r3, [r7, #22]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d15f      	bne.n	800fa32 <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d10f      	bne.n	800f99c <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f982:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800f984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f986:	2b00      	cmp	r3, #0
 800f988:	d121      	bne.n	800f9ce <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f990:	2100      	movs	r1, #0
 800f992:	4618      	mov	r0, r3
 800f994:	f7fe f85a 	bl	800da4c <create_chain>
 800f998:	6278      	str	r0, [r7, #36]	@ 0x24
 800f99a:	e018      	b.n	800f9ce <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d008      	beq.n	800f9b8 <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800f9ac:	4619      	mov	r1, r3
 800f9ae:	68f8      	ldr	r0, [r7, #12]
 800f9b0:	f7fe f8e9 	bl	800db86 <clmt_clust>
 800f9b4:	6278      	str	r0, [r7, #36]	@ 0x24
 800f9b6:	e00a      	b.n	800f9ce <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f9c4:	4619      	mov	r1, r3
 800f9c6:	4610      	mov	r0, r2
 800f9c8:	f7fe f840 	bl	800da4c <create_chain>
 800f9cc:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f9ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	f000 8139 	beq.w	800fc48 <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800f9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9d8:	2b01      	cmp	r3, #1
 800f9da:	d10c      	bne.n	800f9f6 <f_write+0x154>
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	2202      	movs	r2, #2
 800f9e0:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800f9ea:	2102      	movs	r1, #2
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f7fd fb38 	bl	800d062 <unlock_fs>
 800f9f2:	2302      	movs	r3, #2
 800f9f4:	e148      	b.n	800fc88 <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800f9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9fc:	d10c      	bne.n	800fa18 <f_write+0x176>
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	2201      	movs	r2, #1
 800fa02:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fa0c:	2101      	movs	r1, #1
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f7fd fb27 	bl	800d062 <unlock_fs>
 800fa14:	2301      	movs	r3, #1
 800fa16:	e137      	b.n	800fc88 <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa1c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d103      	bne.n	800fa32 <f_write+0x190>
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa2e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800fa38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d024      	beq.n	800fa8a <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fa46:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800fa4a:	68f9      	ldr	r1, [r7, #12]
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800fa52:	2301      	movs	r3, #1
 800fa54:	f7fd fa40 	bl	800ced8 <disk_write>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d00c      	beq.n	800fa78 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	2201      	movs	r2, #1
 800fa62:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fa6c:	2101      	movs	r1, #1
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f7fd faf7 	bl	800d062 <unlock_fs>
 800fa74:	2301      	movs	r3, #1
 800fa76:	e107      	b.n	800fc88 <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800fa7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fa82:	b2da      	uxtb	r2, r3
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fa96:	4619      	mov	r1, r3
 800fa98:	4610      	mov	r0, r2
 800fa9a:	f7fd fd95 	bl	800d5c8 <clust2sect>
 800fa9e:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d10c      	bne.n	800fac0 <f_write+0x21e>
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	2202      	movs	r2, #2
 800faaa:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fab4:	2102      	movs	r1, #2
 800fab6:	4618      	mov	r0, r3
 800fab8:	f7fd fad3 	bl	800d062 <unlock_fs>
 800fabc:	2302      	movs	r3, #2
 800fabe:	e0e3      	b.n	800fc88 <f_write+0x3e6>
			sect += csect;
 800fac0:	7dbb      	ldrb	r3, [r7, #22]
 800fac2:	693a      	ldr	r2, [r7, #16]
 800fac4:	4413      	add	r3, r2
 800fac6:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	0a5b      	lsrs	r3, r3, #9
 800facc:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800face:	69fb      	ldr	r3, [r7, #28]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d04f      	beq.n	800fb74 <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800fad4:	7dba      	ldrb	r2, [r7, #22]
 800fad6:	69fb      	ldr	r3, [r7, #28]
 800fad8:	4413      	add	r3, r2
 800fada:	68fa      	ldr	r2, [r7, #12]
 800fadc:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 800fae0:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 800fae4:	4293      	cmp	r3, r2
 800fae6:	d908      	bls.n	800fafa <f_write+0x258>
					cc = fp->fs->csize - csect;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800faee:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800faf2:	461a      	mov	r2, r3
 800faf4:	7dbb      	ldrb	r3, [r7, #22]
 800faf6:	1ad3      	subs	r3, r2, r3
 800faf8:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fb00:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800fb04:	69fb      	ldr	r3, [r7, #28]
 800fb06:	693a      	ldr	r2, [r7, #16]
 800fb08:	69b9      	ldr	r1, [r7, #24]
 800fb0a:	f7fd f9e5 	bl	800ced8 <disk_write>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d00c      	beq.n	800fb2e <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	2201      	movs	r2, #1
 800fb18:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fb22:	2101      	movs	r1, #1
 800fb24:	4618      	mov	r0, r3
 800fb26:	f7fd fa9c 	bl	800d062 <unlock_fs>
 800fb2a:	2301      	movs	r3, #1
 800fb2c:	e0ac      	b.n	800fc88 <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800fb34:	693b      	ldr	r3, [r7, #16]
 800fb36:	1ad3      	subs	r3, r2, r3
 800fb38:	69fa      	ldr	r2, [r7, #28]
 800fb3a:	429a      	cmp	r2, r3
 800fb3c:	d916      	bls.n	800fb6c <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800fb3e:	68f8      	ldr	r0, [r7, #12]
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800fb46:	693b      	ldr	r3, [r7, #16]
 800fb48:	1ad3      	subs	r3, r2, r3
 800fb4a:	025b      	lsls	r3, r3, #9
 800fb4c:	69ba      	ldr	r2, [r7, #24]
 800fb4e:	4413      	add	r3, r2
 800fb50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fb54:	4619      	mov	r1, r3
 800fb56:	f7fd f9fd 	bl	800cf54 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800fb60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb64:	b2da      	uxtb	r2, r3
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800fb6c:	69fb      	ldr	r3, [r7, #28]
 800fb6e:	025b      	lsls	r3, r3, #9
 800fb70:	623b      	str	r3, [r7, #32]
				continue;
 800fb72:	e04e      	b.n	800fc12 <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800fb7a:	693a      	ldr	r2, [r7, #16]
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d021      	beq.n	800fbc4 <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800fb8c:	429a      	cmp	r2, r3
 800fb8e:	d219      	bcs.n	800fbc4 <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fb96:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800fb9a:	68f9      	ldr	r1, [r7, #12]
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	693a      	ldr	r2, [r7, #16]
 800fba0:	f7fd f97a 	bl	800ce98 <disk_read>
 800fba4:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d00c      	beq.n	800fbc4 <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	2201      	movs	r2, #1
 800fbae:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fbb8:	2101      	movs	r1, #1
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7fd fa51 	bl	800d062 <unlock_fs>
 800fbc0:	2301      	movs	r3, #1
 800fbc2:	e061      	b.n	800fc88 <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	693a      	ldr	r2, [r7, #16]
 800fbc8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800fbd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbd6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800fbda:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800fbdc:	6a3a      	ldr	r2, [r7, #32]
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d901      	bls.n	800fbe8 <f_write+0x346>
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800fbee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbf2:	68fa      	ldr	r2, [r7, #12]
 800fbf4:	4413      	add	r3, r2
 800fbf6:	6a3a      	ldr	r2, [r7, #32]
 800fbf8:	69b9      	ldr	r1, [r7, #24]
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f7fd f9aa 	bl	800cf54 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800fc06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc0a:	b2da      	uxtb	r2, r3
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800fc12:	69ba      	ldr	r2, [r7, #24]
 800fc14:	6a3b      	ldr	r3, [r7, #32]
 800fc16:	4413      	add	r3, r2
 800fc18:	61bb      	str	r3, [r7, #24]
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800fc20:	6a3b      	ldr	r3, [r7, #32]
 800fc22:	441a      	add	r2, r3
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	681a      	ldr	r2, [r3, #0]
 800fc2e:	6a3b      	ldr	r3, [r7, #32]
 800fc30:	441a      	add	r2, r3
 800fc32:	683b      	ldr	r3, [r7, #0]
 800fc34:	601a      	str	r2, [r3, #0]
 800fc36:	687a      	ldr	r2, [r7, #4]
 800fc38:	6a3b      	ldr	r3, [r7, #32]
 800fc3a:	1ad3      	subs	r3, r2, r3
 800fc3c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	f47f ae7d 	bne.w	800f940 <f_write+0x9e>
 800fc46:	e000      	b.n	800fc4a <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fc48:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800fc56:	429a      	cmp	r2, r3
 800fc58:	d905      	bls.n	800fc66 <f_write+0x3c4>
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800fc6c:	f043 0320 	orr.w	r3, r3, #32
 800fc70:	b2da      	uxtb	r2, r3
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206

	LEAVE_FF(fp->fs, FR_OK);
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fc7e:	2100      	movs	r1, #0
 800fc80:	4618      	mov	r0, r3
 800fc82:	f7fd f9ee 	bl	800d062 <unlock_fs>
 800fc86:	2300      	movs	r3, #0
}
 800fc88:	4618      	mov	r0, r3
 800fc8a:	3728      	adds	r7, #40	@ 0x28
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}

0800fc90 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b086      	sub	sp, #24
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800fc98:	6878      	ldr	r0, [r7, #4]
 800fc9a:	f7ff fad3 	bl	800f244 <validate>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fca2:	7dfb      	ldrb	r3, [r7, #23]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	f040 80af 	bne.w	800fe08 <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800fcb0:	f003 0320 	and.w	r3, r3, #32
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	f000 80a7 	beq.w	800fe08 <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800fcc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d020      	beq.n	800fd0a <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fcce:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 800fcd2:	6879      	ldr	r1, [r7, #4]
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800fcda:	2301      	movs	r3, #1
 800fcdc:	f7fd f8fc 	bl	800ced8 <disk_write>
 800fce0:	4603      	mov	r3, r0
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d008      	beq.n	800fcf8 <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fcec:	2101      	movs	r1, #1
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f7fd f9b7 	bl	800d062 <unlock_fs>
 800fcf4:	2301      	movs	r3, #1
 800fcf6:	e090      	b.n	800fe1a <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800fcfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fd02:	b2da      	uxtb	r2, r3
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800fd16:	4619      	mov	r1, r3
 800fd18:	4610      	mov	r0, r2
 800fd1a:	f7fd fb7a 	bl	800d412 <move_window>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800fd22:	7dfb      	ldrb	r3, [r7, #23]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d16f      	bne.n	800fe08 <f_sync+0x178>
				dir = fp->dir_ptr;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800fd2e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800fd30:	693b      	ldr	r3, [r7, #16]
 800fd32:	330b      	adds	r3, #11
 800fd34:	781a      	ldrb	r2, [r3, #0]
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	330b      	adds	r3, #11
 800fd3a:	f042 0220 	orr.w	r2, r2, #32
 800fd3e:	b2d2      	uxtb	r2, r2
 800fd40:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	331c      	adds	r3, #28
 800fd4c:	b2d2      	uxtb	r2, r2
 800fd4e:	701a      	strb	r2, [r3, #0]
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800fd56:	b29b      	uxth	r3, r3
 800fd58:	0a1b      	lsrs	r3, r3, #8
 800fd5a:	b29a      	uxth	r2, r3
 800fd5c:	693b      	ldr	r3, [r7, #16]
 800fd5e:	331d      	adds	r3, #29
 800fd60:	b2d2      	uxtb	r2, r2
 800fd62:	701a      	strb	r2, [r3, #0]
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800fd6a:	0c1a      	lsrs	r2, r3, #16
 800fd6c:	693b      	ldr	r3, [r7, #16]
 800fd6e:	331e      	adds	r3, #30
 800fd70:	b2d2      	uxtb	r2, r2
 800fd72:	701a      	strb	r2, [r3, #0]
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800fd7a:	0e1a      	lsrs	r2, r3, #24
 800fd7c:	693b      	ldr	r3, [r7, #16]
 800fd7e:	331f      	adds	r3, #31
 800fd80:	b2d2      	uxtb	r2, r2
 800fd82:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800fd8a:	4619      	mov	r1, r3
 800fd8c:	6938      	ldr	r0, [r7, #16]
 800fd8e:	f7fe f930 	bl	800dff2 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800fd92:	f7fc ffbb 	bl	800cd0c <get_fattime>
 800fd96:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800fd98:	693b      	ldr	r3, [r7, #16]
 800fd9a:	3316      	adds	r3, #22
 800fd9c:	68fa      	ldr	r2, [r7, #12]
 800fd9e:	b2d2      	uxtb	r2, r2
 800fda0:	701a      	strb	r2, [r3, #0]
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	b29b      	uxth	r3, r3
 800fda6:	0a1b      	lsrs	r3, r3, #8
 800fda8:	b29a      	uxth	r2, r3
 800fdaa:	693b      	ldr	r3, [r7, #16]
 800fdac:	3317      	adds	r3, #23
 800fdae:	b2d2      	uxtb	r2, r2
 800fdb0:	701a      	strb	r2, [r3, #0]
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	0c1a      	lsrs	r2, r3, #16
 800fdb6:	693b      	ldr	r3, [r7, #16]
 800fdb8:	3318      	adds	r3, #24
 800fdba:	b2d2      	uxtb	r2, r2
 800fdbc:	701a      	strb	r2, [r3, #0]
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	0e1a      	lsrs	r2, r3, #24
 800fdc2:	693b      	ldr	r3, [r7, #16]
 800fdc4:	3319      	adds	r3, #25
 800fdc6:	b2d2      	uxtb	r2, r2
 800fdc8:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800fdca:	693b      	ldr	r3, [r7, #16]
 800fdcc:	3312      	adds	r3, #18
 800fdce:	2200      	movs	r2, #0
 800fdd0:	701a      	strb	r2, [r3, #0]
 800fdd2:	693b      	ldr	r3, [r7, #16]
 800fdd4:	3313      	adds	r3, #19
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800fde0:	f023 0320 	bic.w	r3, r3, #32
 800fde4:	b2da      	uxtb	r2, r3
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				fp->fs->wflag = 1;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fdf2:	2201      	movs	r2, #1
 800fdf4:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = sync_fs(fp->fs);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f7fd fb35 	bl	800d46e <sync_fs>
 800fe04:	4603      	mov	r3, r0
 800fe06:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800fe0e:	7dfa      	ldrb	r2, [r7, #23]
 800fe10:	4611      	mov	r1, r2
 800fe12:	4618      	mov	r0, r3
 800fe14:	f7fd f925 	bl	800d062 <unlock_fs>
 800fe18:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	3718      	adds	r7, #24
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}

0800fe22 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800fe22:	b580      	push	{r7, lr}
 800fe24:	b084      	sub	sp, #16
 800fe26:	af00      	add	r7, sp, #0
 800fe28:	6078      	str	r0, [r7, #4]
 800fe2a:	460b      	mov	r3, r1
 800fe2c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800fe2e:	78fb      	ldrb	r3, [r7, #3]
 800fe30:	2b0a      	cmp	r3, #10
 800fe32:	d103      	bne.n	800fe3c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800fe34:	210d      	movs	r1, #13
 800fe36:	6878      	ldr	r0, [r7, #4]
 800fe38:	f7ff fff3 	bl	800fe22 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	685b      	ldr	r3, [r3, #4]
 800fe40:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	db25      	blt.n	800fe94 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	1c5a      	adds	r2, r3, #1
 800fe4c:	60fa      	str	r2, [r7, #12]
 800fe4e:	687a      	ldr	r2, [r7, #4]
 800fe50:	4413      	add	r3, r2
 800fe52:	78fa      	ldrb	r2, [r7, #3]
 800fe54:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	2b3c      	cmp	r3, #60	@ 0x3c
 800fe5a:	dd12      	ble.n	800fe82 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	6818      	ldr	r0, [r3, #0]
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f103 010c 	add.w	r1, r3, #12
 800fe66:	68fa      	ldr	r2, [r7, #12]
 800fe68:	f107 0308 	add.w	r3, r7, #8
 800fe6c:	f7ff fd19 	bl	800f8a2 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800fe70:	68ba      	ldr	r2, [r7, #8]
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d101      	bne.n	800fe7c <putc_bfd+0x5a>
 800fe78:	2300      	movs	r3, #0
 800fe7a:	e001      	b.n	800fe80 <putc_bfd+0x5e>
 800fe7c:	f04f 33ff 	mov.w	r3, #4294967295
 800fe80:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	68fa      	ldr	r2, [r7, #12]
 800fe86:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	689b      	ldr	r3, [r3, #8]
 800fe8c:	1c5a      	adds	r2, r3, #1
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	609a      	str	r2, [r3, #8]
 800fe92:	e000      	b.n	800fe96 <putc_bfd+0x74>
	if (i < 0) return;
 800fe94:	bf00      	nop
}
 800fe96:	3710      	adds	r7, #16
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}

0800fe9c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800fe9c:	b590      	push	{r4, r7, lr}
 800fe9e:	b097      	sub	sp, #92	@ 0x5c
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
 800fea4:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800feaa:	2300      	movs	r3, #0
 800feac:	613b      	str	r3, [r7, #16]
 800feae:	693b      	ldr	r3, [r7, #16]
 800feb0:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800feb2:	e009      	b.n	800fec8 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	1c5a      	adds	r2, r3, #1
 800feb8:	607a      	str	r2, [r7, #4]
 800feba:	781a      	ldrb	r2, [r3, #0]
 800febc:	f107 030c 	add.w	r3, r7, #12
 800fec0:	4611      	mov	r1, r2
 800fec2:	4618      	mov	r0, r3
 800fec4:	f7ff ffad 	bl	800fe22 <putc_bfd>
	while (*str)			/* Put the string */
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	781b      	ldrb	r3, [r3, #0]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d1f1      	bne.n	800feb4 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	db15      	blt.n	800ff02 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800fed6:	68f8      	ldr	r0, [r7, #12]
 800fed8:	693b      	ldr	r3, [r7, #16]
 800feda:	461c      	mov	r4, r3
 800fedc:	f107 0208 	add.w	r2, r7, #8
 800fee0:	f107 030c 	add.w	r3, r7, #12
 800fee4:	f103 010c 	add.w	r1, r3, #12
 800fee8:	4613      	mov	r3, r2
 800feea:	4622      	mov	r2, r4
 800feec:	f7ff fcd9 	bl	800f8a2 <f_write>
 800fef0:	4603      	mov	r3, r0
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d105      	bne.n	800ff02 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800fef6:	693b      	ldr	r3, [r7, #16]
 800fef8:	68ba      	ldr	r2, [r7, #8]
 800fefa:	4293      	cmp	r3, r2
 800fefc:	d101      	bne.n	800ff02 <f_puts+0x66>
 800fefe:	697b      	ldr	r3, [r7, #20]
 800ff00:	e001      	b.n	800ff06 <f_puts+0x6a>
	return EOF;
 800ff02:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ff06:	4618      	mov	r0, r3
 800ff08:	375c      	adds	r7, #92	@ 0x5c
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd90      	pop	{r4, r7, pc}
	...

0800ff10 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ff10:	b480      	push	{r7}
 800ff12:	b087      	sub	sp, #28
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	60f8      	str	r0, [r7, #12]
 800ff18:	60b9      	str	r1, [r7, #8]
 800ff1a:	4613      	mov	r3, r2
 800ff1c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ff1e:	2301      	movs	r3, #1
 800ff20:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ff22:	2300      	movs	r3, #0
 800ff24:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800ff26:	4b1e      	ldr	r3, [pc, #120]	@ (800ffa0 <FATFS_LinkDriverEx+0x90>)
 800ff28:	7a5b      	ldrb	r3, [r3, #9]
 800ff2a:	b2db      	uxtb	r3, r3
 800ff2c:	2b01      	cmp	r3, #1
 800ff2e:	d831      	bhi.n	800ff94 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ff30:	4b1b      	ldr	r3, [pc, #108]	@ (800ffa0 <FATFS_LinkDriverEx+0x90>)
 800ff32:	7a5b      	ldrb	r3, [r3, #9]
 800ff34:	b2db      	uxtb	r3, r3
 800ff36:	461a      	mov	r2, r3
 800ff38:	4b19      	ldr	r3, [pc, #100]	@ (800ffa0 <FATFS_LinkDriverEx+0x90>)
 800ff3a:	2100      	movs	r1, #0
 800ff3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800ff3e:	4b18      	ldr	r3, [pc, #96]	@ (800ffa0 <FATFS_LinkDriverEx+0x90>)
 800ff40:	7a5b      	ldrb	r3, [r3, #9]
 800ff42:	b2db      	uxtb	r3, r3
 800ff44:	4a16      	ldr	r2, [pc, #88]	@ (800ffa0 <FATFS_LinkDriverEx+0x90>)
 800ff46:	009b      	lsls	r3, r3, #2
 800ff48:	4413      	add	r3, r2
 800ff4a:	68fa      	ldr	r2, [r7, #12]
 800ff4c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800ff4e:	4b14      	ldr	r3, [pc, #80]	@ (800ffa0 <FATFS_LinkDriverEx+0x90>)
 800ff50:	7a5b      	ldrb	r3, [r3, #9]
 800ff52:	b2db      	uxtb	r3, r3
 800ff54:	461a      	mov	r2, r3
 800ff56:	4b12      	ldr	r3, [pc, #72]	@ (800ffa0 <FATFS_LinkDriverEx+0x90>)
 800ff58:	4413      	add	r3, r2
 800ff5a:	79fa      	ldrb	r2, [r7, #7]
 800ff5c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ff5e:	4b10      	ldr	r3, [pc, #64]	@ (800ffa0 <FATFS_LinkDriverEx+0x90>)
 800ff60:	7a5b      	ldrb	r3, [r3, #9]
 800ff62:	b2db      	uxtb	r3, r3
 800ff64:	1c5a      	adds	r2, r3, #1
 800ff66:	b2d1      	uxtb	r1, r2
 800ff68:	4a0d      	ldr	r2, [pc, #52]	@ (800ffa0 <FATFS_LinkDriverEx+0x90>)
 800ff6a:	7251      	strb	r1, [r2, #9]
 800ff6c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ff6e:	7dbb      	ldrb	r3, [r7, #22]
 800ff70:	3330      	adds	r3, #48	@ 0x30
 800ff72:	b2da      	uxtb	r2, r3
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	3301      	adds	r3, #1
 800ff7c:	223a      	movs	r2, #58	@ 0x3a
 800ff7e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	3302      	adds	r3, #2
 800ff84:	222f      	movs	r2, #47	@ 0x2f
 800ff86:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	3303      	adds	r3, #3
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ff90:	2300      	movs	r3, #0
 800ff92:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800ff94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	371c      	adds	r7, #28
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bc80      	pop	{r7}
 800ff9e:	4770      	bx	lr
 800ffa0:	20001298 	.word	0x20001298

0800ffa4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b082      	sub	sp, #8
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ffae:	2200      	movs	r2, #0
 800ffb0:	6839      	ldr	r1, [r7, #0]
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f7ff ffac 	bl	800ff10 <FATFS_LinkDriverEx>
 800ffb8:	4603      	mov	r3, r0
}
 800ffba:	4618      	mov	r0, r3
 800ffbc:	3708      	adds	r7, #8
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	bd80      	pop	{r7, pc}
	...

0800ffc4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	4603      	mov	r3, r0
 800ffcc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ffce:	4b0b      	ldr	r3, [pc, #44]	@ (800fffc <SD_initialize+0x38>)
 800ffd0:	2201      	movs	r2, #1
 800ffd2:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 800ffd4:	f7fc fea2 	bl	800cd1c <BSP_SD_Init>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d107      	bne.n	800ffee <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ffde:	4b07      	ldr	r3, [pc, #28]	@ (800fffc <SD_initialize+0x38>)
 800ffe0:	781b      	ldrb	r3, [r3, #0]
 800ffe2:	b2db      	uxtb	r3, r3
 800ffe4:	f023 0301 	bic.w	r3, r3, #1
 800ffe8:	b2da      	uxtb	r2, r3
 800ffea:	4b04      	ldr	r3, [pc, #16]	@ (800fffc <SD_initialize+0x38>)
 800ffec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ffee:	4b03      	ldr	r3, [pc, #12]	@ (800fffc <SD_initialize+0x38>)
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	b2db      	uxtb	r3, r3
}
 800fff4:	4618      	mov	r0, r3
 800fff6:	3708      	adds	r7, #8
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}
 800fffc:	2000003d 	.word	0x2000003d

08010000 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b082      	sub	sp, #8
 8010004:	af00      	add	r7, sp, #0
 8010006:	4603      	mov	r3, r0
 8010008:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801000a:	4b0b      	ldr	r3, [pc, #44]	@ (8010038 <SD_status+0x38>)
 801000c:	2201      	movs	r2, #1
 801000e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010010:	f7fc fed8 	bl	800cdc4 <BSP_SD_GetCardState>
 8010014:	4603      	mov	r3, r0
 8010016:	2b00      	cmp	r3, #0
 8010018:	d107      	bne.n	801002a <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801001a:	4b07      	ldr	r3, [pc, #28]	@ (8010038 <SD_status+0x38>)
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	b2db      	uxtb	r3, r3
 8010020:	f023 0301 	bic.w	r3, r3, #1
 8010024:	b2da      	uxtb	r2, r3
 8010026:	4b04      	ldr	r3, [pc, #16]	@ (8010038 <SD_status+0x38>)
 8010028:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 801002a:	4b03      	ldr	r3, [pc, #12]	@ (8010038 <SD_status+0x38>)
 801002c:	781b      	ldrb	r3, [r3, #0]
 801002e:	b2db      	uxtb	r3, r3
}
 8010030:	4618      	mov	r0, r3
 8010032:	3708      	adds	r7, #8
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}
 8010038:	2000003d 	.word	0x2000003d

0801003c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b086      	sub	sp, #24
 8010040:	af00      	add	r7, sp, #0
 8010042:	60b9      	str	r1, [r7, #8]
 8010044:	607a      	str	r2, [r7, #4]
 8010046:	603b      	str	r3, [r7, #0]
 8010048:	4603      	mov	r3, r0
 801004a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801004c:	2301      	movs	r3, #1
 801004e:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8010050:	4b0f      	ldr	r3, [pc, #60]	@ (8010090 <SD_read+0x54>)
 8010052:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8010054:	4b0f      	ldr	r3, [pc, #60]	@ (8010094 <SD_read+0x58>)
 8010056:	683a      	ldr	r2, [r7, #0]
 8010058:	6879      	ldr	r1, [r7, #4]
 801005a:	68b8      	ldr	r0, [r7, #8]
 801005c:	f7fc fe76 	bl	800cd4c <BSP_SD_ReadBlocks>
 8010060:	4603      	mov	r3, r0
 8010062:	2b00      	cmp	r3, #0
 8010064:	d10e      	bne.n	8010084 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010066:	e006      	b.n	8010076 <SD_read+0x3a>
    {
      if (timeout-- == 0)
 8010068:	693b      	ldr	r3, [r7, #16]
 801006a:	1e5a      	subs	r2, r3, #1
 801006c:	613a      	str	r2, [r7, #16]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d101      	bne.n	8010076 <SD_read+0x3a>
      {
        return RES_ERROR;
 8010072:	2301      	movs	r3, #1
 8010074:	e007      	b.n	8010086 <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010076:	f7fc fea5 	bl	800cdc4 <BSP_SD_GetCardState>
 801007a:	4603      	mov	r3, r0
 801007c:	2b00      	cmp	r3, #0
 801007e:	d1f3      	bne.n	8010068 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 8010080:	2300      	movs	r3, #0
 8010082:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8010084:	7dfb      	ldrb	r3, [r7, #23]
}
 8010086:	4618      	mov	r0, r3
 8010088:	3718      	adds	r7, #24
 801008a:	46bd      	mov	sp, r7
 801008c:	bd80      	pop	{r7, pc}
 801008e:	bf00      	nop
 8010090:	000186a0 	.word	0x000186a0
 8010094:	05f5e100 	.word	0x05f5e100

08010098 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b086      	sub	sp, #24
 801009c:	af00      	add	r7, sp, #0
 801009e:	60b9      	str	r1, [r7, #8]
 80100a0:	607a      	str	r2, [r7, #4]
 80100a2:	603b      	str	r3, [r7, #0]
 80100a4:	4603      	mov	r3, r0
 80100a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80100a8:	2301      	movs	r3, #1
 80100aa:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 80100ac:	4b0f      	ldr	r3, [pc, #60]	@ (80100ec <SD_write+0x54>)
 80100ae:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 80100b0:	4b0f      	ldr	r3, [pc, #60]	@ (80100f0 <SD_write+0x58>)
 80100b2:	683a      	ldr	r2, [r7, #0]
 80100b4:	6879      	ldr	r1, [r7, #4]
 80100b6:	68b8      	ldr	r0, [r7, #8]
 80100b8:	f7fc fe66 	bl	800cd88 <BSP_SD_WriteBlocks>
 80100bc:	4603      	mov	r3, r0
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d10e      	bne.n	80100e0 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 80100c2:	e006      	b.n	80100d2 <SD_write+0x3a>
    {
      if (timeout-- == 0)
 80100c4:	693b      	ldr	r3, [r7, #16]
 80100c6:	1e5a      	subs	r2, r3, #1
 80100c8:	613a      	str	r2, [r7, #16]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d101      	bne.n	80100d2 <SD_write+0x3a>
      {
        return RES_ERROR;
 80100ce:	2301      	movs	r3, #1
 80100d0:	e007      	b.n	80100e2 <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 80100d2:	f7fc fe77 	bl	800cdc4 <BSP_SD_GetCardState>
 80100d6:	4603      	mov	r3, r0
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d1f3      	bne.n	80100c4 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 80100dc:	2300      	movs	r3, #0
 80100de:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 80100e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80100e2:	4618      	mov	r0, r3
 80100e4:	3718      	adds	r7, #24
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}
 80100ea:	bf00      	nop
 80100ec:	000186a0 	.word	0x000186a0
 80100f0:	05f5e100 	.word	0x05f5e100

080100f4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b08c      	sub	sp, #48	@ 0x30
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	4603      	mov	r3, r0
 80100fc:	603a      	str	r2, [r7, #0]
 80100fe:	71fb      	strb	r3, [r7, #7]
 8010100:	460b      	mov	r3, r1
 8010102:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010104:	2301      	movs	r3, #1
 8010106:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801010a:	4b24      	ldr	r3, [pc, #144]	@ (801019c <SD_ioctl+0xa8>)
 801010c:	781b      	ldrb	r3, [r3, #0]
 801010e:	b2db      	uxtb	r3, r3
 8010110:	f003 0301 	and.w	r3, r3, #1
 8010114:	2b00      	cmp	r3, #0
 8010116:	d001      	beq.n	801011c <SD_ioctl+0x28>
 8010118:	2303      	movs	r3, #3
 801011a:	e03b      	b.n	8010194 <SD_ioctl+0xa0>
  
  switch (cmd)
 801011c:	79bb      	ldrb	r3, [r7, #6]
 801011e:	2b03      	cmp	r3, #3
 8010120:	d833      	bhi.n	801018a <SD_ioctl+0x96>
 8010122:	a201      	add	r2, pc, #4	@ (adr r2, 8010128 <SD_ioctl+0x34>)
 8010124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010128:	08010139 	.word	0x08010139
 801012c:	08010141 	.word	0x08010141
 8010130:	08010159 	.word	0x08010159
 8010134:	08010173 	.word	0x08010173
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010138:	2300      	movs	r3, #0
 801013a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801013e:	e027      	b.n	8010190 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010140:	f107 030c 	add.w	r3, r7, #12
 8010144:	4618      	mov	r0, r3
 8010146:	f7fc fe4d 	bl	800cde4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801014a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010150:	2300      	movs	r3, #0
 8010152:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010156:	e01b      	b.n	8010190 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010158:	f107 030c 	add.w	r3, r7, #12
 801015c:	4618      	mov	r0, r3
 801015e:	f7fc fe41 	bl	800cde4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010164:	b29a      	uxth	r2, r3
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801016a:	2300      	movs	r3, #0
 801016c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010170:	e00e      	b.n	8010190 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010172:	f107 030c 	add.w	r3, r7, #12
 8010176:	4618      	mov	r0, r3
 8010178:	f7fc fe34 	bl	800cde4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 801017c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010182:	2300      	movs	r3, #0
 8010184:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010188:	e002      	b.n	8010190 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 801018a:	2304      	movs	r3, #4
 801018c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }
  
  return res;
 8010190:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010194:	4618      	mov	r0, r3
 8010196:	3730      	adds	r7, #48	@ 0x30
 8010198:	46bd      	mov	sp, r7
 801019a:	bd80      	pop	{r7, pc}
 801019c:	2000003d 	.word	0x2000003d

080101a0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 80101a0:	b480      	push	{r7}
 80101a2:	b085      	sub	sp, #20
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	4603      	mov	r3, r0
 80101a8:	6039      	str	r1, [r7, #0]
 80101aa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80101ac:	88fb      	ldrh	r3, [r7, #6]
 80101ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80101b0:	d802      	bhi.n	80101b8 <ff_convert+0x18>
		c = chr;
 80101b2:	88fb      	ldrh	r3, [r7, #6]
 80101b4:	81fb      	strh	r3, [r7, #14]
 80101b6:	e025      	b.n	8010204 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d00b      	beq.n	80101d6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80101be:	88fb      	ldrh	r3, [r7, #6]
 80101c0:	2bff      	cmp	r3, #255	@ 0xff
 80101c2:	d805      	bhi.n	80101d0 <ff_convert+0x30>
 80101c4:	88fb      	ldrh	r3, [r7, #6]
 80101c6:	3b80      	subs	r3, #128	@ 0x80
 80101c8:	4a11      	ldr	r2, [pc, #68]	@ (8010210 <ff_convert+0x70>)
 80101ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101ce:	e000      	b.n	80101d2 <ff_convert+0x32>
 80101d0:	2300      	movs	r3, #0
 80101d2:	81fb      	strh	r3, [r7, #14]
 80101d4:	e016      	b.n	8010204 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 80101d6:	2300      	movs	r3, #0
 80101d8:	81fb      	strh	r3, [r7, #14]
 80101da:	e009      	b.n	80101f0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80101dc:	89fb      	ldrh	r3, [r7, #14]
 80101de:	4a0c      	ldr	r2, [pc, #48]	@ (8010210 <ff_convert+0x70>)
 80101e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101e4:	88fa      	ldrh	r2, [r7, #6]
 80101e6:	429a      	cmp	r2, r3
 80101e8:	d006      	beq.n	80101f8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80101ea:	89fb      	ldrh	r3, [r7, #14]
 80101ec:	3301      	adds	r3, #1
 80101ee:	81fb      	strh	r3, [r7, #14]
 80101f0:	89fb      	ldrh	r3, [r7, #14]
 80101f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80101f4:	d9f2      	bls.n	80101dc <ff_convert+0x3c>
 80101f6:	e000      	b.n	80101fa <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80101f8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80101fa:	89fb      	ldrh	r3, [r7, #14]
 80101fc:	3380      	adds	r3, #128	@ 0x80
 80101fe:	b29b      	uxth	r3, r3
 8010200:	b2db      	uxtb	r3, r3
 8010202:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010204:	89fb      	ldrh	r3, [r7, #14]
}
 8010206:	4618      	mov	r0, r3
 8010208:	3714      	adds	r7, #20
 801020a:	46bd      	mov	sp, r7
 801020c:	bc80      	pop	{r7}
 801020e:	4770      	bx	lr
 8010210:	0801359c 	.word	0x0801359c

08010214 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8010214:	b480      	push	{r7}
 8010216:	b085      	sub	sp, #20
 8010218:	af00      	add	r7, sp, #0
 801021a:	4603      	mov	r3, r0
 801021c:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 801021e:	2300      	movs	r3, #0
 8010220:	60fb      	str	r3, [r7, #12]
 8010222:	e002      	b.n	801022a <ff_wtoupper+0x16>
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	3301      	adds	r3, #1
 8010228:	60fb      	str	r3, [r7, #12]
 801022a:	4a0f      	ldr	r2, [pc, #60]	@ (8010268 <ff_wtoupper+0x54>)
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d006      	beq.n	8010244 <ff_wtoupper+0x30>
 8010236:	4a0c      	ldr	r2, [pc, #48]	@ (8010268 <ff_wtoupper+0x54>)
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801023e:	88fa      	ldrh	r2, [r7, #6]
 8010240:	429a      	cmp	r2, r3
 8010242:	d1ef      	bne.n	8010224 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8010244:	4a08      	ldr	r2, [pc, #32]	@ (8010268 <ff_wtoupper+0x54>)
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d004      	beq.n	801025a <ff_wtoupper+0x46>
 8010250:	4a06      	ldr	r2, [pc, #24]	@ (801026c <ff_wtoupper+0x58>)
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010258:	e000      	b.n	801025c <ff_wtoupper+0x48>
 801025a:	88fb      	ldrh	r3, [r7, #6]
}
 801025c:	4618      	mov	r0, r3
 801025e:	3714      	adds	r7, #20
 8010260:	46bd      	mov	sp, r7
 8010262:	bc80      	pop	{r7}
 8010264:	4770      	bx	lr
 8010266:	bf00      	nop
 8010268:	0801369c 	.word	0x0801369c
 801026c:	0801387c 	.word	0x0801387c

08010270 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b086      	sub	sp, #24
 8010274:	af00      	add	r7, sp, #0
 8010276:	4603      	mov	r3, r0
 8010278:	6039      	str	r1, [r7, #0]
 801027a:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 801027c:	2300      	movs	r3, #0
 801027e:	60fb      	str	r3, [r7, #12]
 8010280:	2300      	movs	r3, #0
 8010282:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 8010284:	f107 030c 	add.w	r3, r7, #12
 8010288:	2101      	movs	r1, #1
 801028a:	4618      	mov	r0, r3
 801028c:	f000 f8cb 	bl	8010426 <osSemaphoreCreate>
 8010290:	4602      	mov	r2, r0
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	2b00      	cmp	r3, #0
 801029c:	bf14      	ite	ne
 801029e:	2301      	movne	r3, #1
 80102a0:	2300      	moveq	r3, #0
 80102a2:	b2db      	uxtb	r3, r3
 80102a4:	617b      	str	r3, [r7, #20]
  
  return ret;
 80102a6:	697b      	ldr	r3, [r7, #20]
}
 80102a8:	4618      	mov	r0, r3
 80102aa:	3718      	adds	r7, #24
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b082      	sub	sp, #8
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 80102b8:	6878      	ldr	r0, [r7, #4]
 80102ba:	f000 f96b 	bl	8010594 <osSemaphoreDelete>
  return 1;
 80102be:	2301      	movs	r3, #1
}
 80102c0:	4618      	mov	r0, r3
 80102c2:	3708      	adds	r7, #8
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}

080102c8 <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b084      	sub	sp, #16
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80102d0:	2300      	movs	r3, #0
 80102d2:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80102d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80102d8:	6878      	ldr	r0, [r7, #4]
 80102da:	f000 f8d7 	bl	801048c <osSemaphoreWait>
 80102de:	4603      	mov	r3, r0
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d101      	bne.n	80102e8 <ff_req_grant+0x20>
  {
    ret = 1;
 80102e4:	2301      	movs	r3, #1
 80102e6:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80102e8:	68fb      	ldr	r3, [r7, #12]
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	3710      	adds	r7, #16
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd80      	pop	{r7, pc}

080102f2 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80102f2:	b580      	push	{r7, lr}
 80102f4:	b082      	sub	sp, #8
 80102f6:	af00      	add	r7, sp, #0
 80102f8:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 80102fa:	6878      	ldr	r0, [r7, #4]
 80102fc:	f000 f914 	bl	8010528 <osSemaphoreRelease>
}
 8010300:	bf00      	nop
 8010302:	3708      	adds	r7, #8
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}

08010308 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010308:	b480      	push	{r7}
 801030a:	b085      	sub	sp, #20
 801030c:	af00      	add	r7, sp, #0
 801030e:	4603      	mov	r3, r0
 8010310:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010312:	2300      	movs	r3, #0
 8010314:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801031a:	2b84      	cmp	r3, #132	@ 0x84
 801031c:	d005      	beq.n	801032a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801031e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	4413      	add	r3, r2
 8010326:	3303      	adds	r3, #3
 8010328:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801032a:	68fb      	ldr	r3, [r7, #12]
}
 801032c:	4618      	mov	r0, r3
 801032e:	3714      	adds	r7, #20
 8010330:	46bd      	mov	sp, r7
 8010332:	bc80      	pop	{r7}
 8010334:	4770      	bx	lr

08010336 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8010336:	b480      	push	{r7}
 8010338:	b083      	sub	sp, #12
 801033a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801033c:	f3ef 8305 	mrs	r3, IPSR
 8010340:	607b      	str	r3, [r7, #4]
  return(result);
 8010342:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8010344:	2b00      	cmp	r3, #0
 8010346:	bf14      	ite	ne
 8010348:	2301      	movne	r3, #1
 801034a:	2300      	moveq	r3, #0
 801034c:	b2db      	uxtb	r3, r3
}
 801034e:	4618      	mov	r0, r3
 8010350:	370c      	adds	r7, #12
 8010352:	46bd      	mov	sp, r7
 8010354:	bc80      	pop	{r7}
 8010356:	4770      	bx	lr

08010358 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801035c:	f001 fa9a 	bl	8011894 <vTaskStartScheduler>
  
  return osOK;
 8010360:	2300      	movs	r3, #0
}
 8010362:	4618      	mov	r0, r3
 8010364:	bd80      	pop	{r7, pc}

08010366 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010366:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010368:	b089      	sub	sp, #36	@ 0x24
 801036a:	af04      	add	r7, sp, #16
 801036c:	6078      	str	r0, [r7, #4]
 801036e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	695b      	ldr	r3, [r3, #20]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d020      	beq.n	80103ba <osThreadCreate+0x54>
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	699b      	ldr	r3, [r3, #24]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d01c      	beq.n	80103ba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	685c      	ldr	r4, [r3, #4]
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	691e      	ldr	r6, [r3, #16]
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010392:	4618      	mov	r0, r3
 8010394:	f7ff ffb8 	bl	8010308 <makeFreeRtosPriority>
 8010398:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	695b      	ldr	r3, [r3, #20]
 801039e:	687a      	ldr	r2, [r7, #4]
 80103a0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80103a2:	9202      	str	r2, [sp, #8]
 80103a4:	9301      	str	r3, [sp, #4]
 80103a6:	9100      	str	r1, [sp, #0]
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	4632      	mov	r2, r6
 80103ac:	4629      	mov	r1, r5
 80103ae:	4620      	mov	r0, r4
 80103b0:	f000 ff90 	bl	80112d4 <xTaskCreateStatic>
 80103b4:	4603      	mov	r3, r0
 80103b6:	60fb      	str	r3, [r7, #12]
 80103b8:	e01c      	b.n	80103f4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	685c      	ldr	r4, [r3, #4]
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80103c6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80103ce:	4618      	mov	r0, r3
 80103d0:	f7ff ff9a 	bl	8010308 <makeFreeRtosPriority>
 80103d4:	4602      	mov	r2, r0
 80103d6:	f107 030c 	add.w	r3, r7, #12
 80103da:	9301      	str	r3, [sp, #4]
 80103dc:	9200      	str	r2, [sp, #0]
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	4632      	mov	r2, r6
 80103e2:	4629      	mov	r1, r5
 80103e4:	4620      	mov	r0, r4
 80103e6:	f000 ffd4 	bl	8011392 <xTaskCreate>
 80103ea:	4603      	mov	r3, r0
 80103ec:	2b01      	cmp	r3, #1
 80103ee:	d001      	beq.n	80103f4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80103f0:	2300      	movs	r3, #0
 80103f2:	e000      	b.n	80103f6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80103f4:	68fb      	ldr	r3, [r7, #12]
}
 80103f6:	4618      	mov	r0, r3
 80103f8:	3714      	adds	r7, #20
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080103fe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80103fe:	b580      	push	{r7, lr}
 8010400:	b084      	sub	sp, #16
 8010402:	af00      	add	r7, sp, #0
 8010404:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d001      	beq.n	8010414 <osDelay+0x16>
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	e000      	b.n	8010416 <osDelay+0x18>
 8010414:	2301      	movs	r3, #1
 8010416:	4618      	mov	r0, r3
 8010418:	f001 f972 	bl	8011700 <vTaskDelay>
  
  return osOK;
 801041c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801041e:	4618      	mov	r0, r3
 8010420:	3710      	adds	r7, #16
 8010422:	46bd      	mov	sp, r7
 8010424:	bd80      	pop	{r7, pc}

08010426 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8010426:	b580      	push	{r7, lr}
 8010428:	b086      	sub	sp, #24
 801042a:	af02      	add	r7, sp, #8
 801042c:	6078      	str	r0, [r7, #4]
 801042e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	685b      	ldr	r3, [r3, #4]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d00f      	beq.n	8010458 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8010438:	683b      	ldr	r3, [r7, #0]
 801043a:	2b01      	cmp	r3, #1
 801043c:	d10a      	bne.n	8010454 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	685b      	ldr	r3, [r3, #4]
 8010442:	2203      	movs	r2, #3
 8010444:	9200      	str	r2, [sp, #0]
 8010446:	2200      	movs	r2, #0
 8010448:	2100      	movs	r1, #0
 801044a:	2001      	movs	r0, #1
 801044c:	f000 f9ce 	bl	80107ec <xQueueGenericCreateStatic>
 8010450:	4603      	mov	r3, r0
 8010452:	e016      	b.n	8010482 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8010454:	2300      	movs	r3, #0
 8010456:	e014      	b.n	8010482 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	2b01      	cmp	r3, #1
 801045c:	d110      	bne.n	8010480 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 801045e:	2203      	movs	r2, #3
 8010460:	2100      	movs	r1, #0
 8010462:	2001      	movs	r0, #1
 8010464:	f000 fa3e 	bl	80108e4 <xQueueGenericCreate>
 8010468:	60f8      	str	r0, [r7, #12]
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d005      	beq.n	801047c <osSemaphoreCreate+0x56>
 8010470:	2300      	movs	r3, #0
 8010472:	2200      	movs	r2, #0
 8010474:	2100      	movs	r1, #0
 8010476:	68f8      	ldr	r0, [r7, #12]
 8010478:	f000 fa92 	bl	80109a0 <xQueueGenericSend>
      return sema;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	e000      	b.n	8010482 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8010480:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8010482:	4618      	mov	r0, r3
 8010484:	3710      	adds	r7, #16
 8010486:	46bd      	mov	sp, r7
 8010488:	bd80      	pop	{r7, pc}
	...

0801048c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b084      	sub	sp, #16
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8010496:	2300      	movs	r3, #0
 8010498:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d101      	bne.n	80104a4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80104a0:	2380      	movs	r3, #128	@ 0x80
 80104a2:	e03a      	b.n	801051a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80104a4:	2300      	movs	r3, #0
 80104a6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104ae:	d103      	bne.n	80104b8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80104b0:	f04f 33ff 	mov.w	r3, #4294967295
 80104b4:	60fb      	str	r3, [r7, #12]
 80104b6:	e009      	b.n	80104cc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d006      	beq.n	80104cc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d101      	bne.n	80104cc <osSemaphoreWait+0x40>
      ticks = 1;
 80104c8:	2301      	movs	r3, #1
 80104ca:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80104cc:	f7ff ff33 	bl	8010336 <inHandlerMode>
 80104d0:	4603      	mov	r3, r0
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d017      	beq.n	8010506 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80104d6:	f107 0308 	add.w	r3, r7, #8
 80104da:	461a      	mov	r2, r3
 80104dc:	2100      	movs	r1, #0
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f000 fd00 	bl	8010ee4 <xQueueReceiveFromISR>
 80104e4:	4603      	mov	r3, r0
 80104e6:	2b01      	cmp	r3, #1
 80104e8:	d001      	beq.n	80104ee <osSemaphoreWait+0x62>
      return osErrorOS;
 80104ea:	23ff      	movs	r3, #255	@ 0xff
 80104ec:	e015      	b.n	801051a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80104ee:	68bb      	ldr	r3, [r7, #8]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d011      	beq.n	8010518 <osSemaphoreWait+0x8c>
 80104f4:	4b0b      	ldr	r3, [pc, #44]	@ (8010524 <osSemaphoreWait+0x98>)
 80104f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80104fa:	601a      	str	r2, [r3, #0]
 80104fc:	f3bf 8f4f 	dsb	sy
 8010500:	f3bf 8f6f 	isb	sy
 8010504:	e008      	b.n	8010518 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8010506:	68f9      	ldr	r1, [r7, #12]
 8010508:	6878      	ldr	r0, [r7, #4]
 801050a:	f000 fbdb 	bl	8010cc4 <xQueueSemaphoreTake>
 801050e:	4603      	mov	r3, r0
 8010510:	2b01      	cmp	r3, #1
 8010512:	d001      	beq.n	8010518 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8010514:	23ff      	movs	r3, #255	@ 0xff
 8010516:	e000      	b.n	801051a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8010518:	2300      	movs	r3, #0
}
 801051a:	4618      	mov	r0, r3
 801051c:	3710      	adds	r7, #16
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}
 8010522:	bf00      	nop
 8010524:	e000ed04 	.word	0xe000ed04

08010528 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b084      	sub	sp, #16
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8010530:	2300      	movs	r3, #0
 8010532:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8010534:	2300      	movs	r3, #0
 8010536:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8010538:	f7ff fefd 	bl	8010336 <inHandlerMode>
 801053c:	4603      	mov	r3, r0
 801053e:	2b00      	cmp	r3, #0
 8010540:	d016      	beq.n	8010570 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8010542:	f107 0308 	add.w	r3, r7, #8
 8010546:	4619      	mov	r1, r3
 8010548:	6878      	ldr	r0, [r7, #4]
 801054a:	f000 fb2b 	bl	8010ba4 <xQueueGiveFromISR>
 801054e:	4603      	mov	r3, r0
 8010550:	2b01      	cmp	r3, #1
 8010552:	d001      	beq.n	8010558 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8010554:	23ff      	movs	r3, #255	@ 0xff
 8010556:	e017      	b.n	8010588 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010558:	68bb      	ldr	r3, [r7, #8]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d013      	beq.n	8010586 <osSemaphoreRelease+0x5e>
 801055e:	4b0c      	ldr	r3, [pc, #48]	@ (8010590 <osSemaphoreRelease+0x68>)
 8010560:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010564:	601a      	str	r2, [r3, #0]
 8010566:	f3bf 8f4f 	dsb	sy
 801056a:	f3bf 8f6f 	isb	sy
 801056e:	e00a      	b.n	8010586 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8010570:	2300      	movs	r3, #0
 8010572:	2200      	movs	r2, #0
 8010574:	2100      	movs	r1, #0
 8010576:	6878      	ldr	r0, [r7, #4]
 8010578:	f000 fa12 	bl	80109a0 <xQueueGenericSend>
 801057c:	4603      	mov	r3, r0
 801057e:	2b01      	cmp	r3, #1
 8010580:	d001      	beq.n	8010586 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8010582:	23ff      	movs	r3, #255	@ 0xff
 8010584:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8010586:	68fb      	ldr	r3, [r7, #12]
}
 8010588:	4618      	mov	r0, r3
 801058a:	3710      	adds	r7, #16
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}
 8010590:	e000ed04 	.word	0xe000ed04

08010594 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b082      	sub	sp, #8
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 801059c:	f7ff fecb 	bl	8010336 <inHandlerMode>
 80105a0:	4603      	mov	r3, r0
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d001      	beq.n	80105aa <osSemaphoreDelete+0x16>
    return osErrorISR;
 80105a6:	2382      	movs	r3, #130	@ 0x82
 80105a8:	e003      	b.n	80105b2 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80105aa:	6878      	ldr	r0, [r7, #4]
 80105ac:	f000 fd1c 	bl	8010fe8 <vQueueDelete>

  return osOK; 
 80105b0:	2300      	movs	r3, #0
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	3708      	adds	r7, #8
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}

080105ba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80105ba:	b480      	push	{r7}
 80105bc:	b083      	sub	sp, #12
 80105be:	af00      	add	r7, sp, #0
 80105c0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f103 0208 	add.w	r2, r3, #8
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f04f 32ff 	mov.w	r2, #4294967295
 80105d2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f103 0208 	add.w	r2, r3, #8
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f103 0208 	add.w	r2, r3, #8
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2200      	movs	r2, #0
 80105ec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80105ee:	bf00      	nop
 80105f0:	370c      	adds	r7, #12
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bc80      	pop	{r7}
 80105f6:	4770      	bx	lr

080105f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80105f8:	b480      	push	{r7}
 80105fa:	b083      	sub	sp, #12
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2200      	movs	r2, #0
 8010604:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010606:	bf00      	nop
 8010608:	370c      	adds	r7, #12
 801060a:	46bd      	mov	sp, r7
 801060c:	bc80      	pop	{r7}
 801060e:	4770      	bx	lr

08010610 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010610:	b480      	push	{r7}
 8010612:	b085      	sub	sp, #20
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
 8010618:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	685b      	ldr	r3, [r3, #4]
 801061e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	68fa      	ldr	r2, [r7, #12]
 8010624:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	689a      	ldr	r2, [r3, #8]
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	689b      	ldr	r3, [r3, #8]
 8010632:	683a      	ldr	r2, [r7, #0]
 8010634:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	683a      	ldr	r2, [r7, #0]
 801063a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	687a      	ldr	r2, [r7, #4]
 8010640:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	1c5a      	adds	r2, r3, #1
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	601a      	str	r2, [r3, #0]
}
 801064c:	bf00      	nop
 801064e:	3714      	adds	r7, #20
 8010650:	46bd      	mov	sp, r7
 8010652:	bc80      	pop	{r7}
 8010654:	4770      	bx	lr

08010656 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010656:	b480      	push	{r7}
 8010658:	b085      	sub	sp, #20
 801065a:	af00      	add	r7, sp, #0
 801065c:	6078      	str	r0, [r7, #4]
 801065e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010660:	683b      	ldr	r3, [r7, #0]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	f1b3 3fff 	cmp.w	r3, #4294967295
 801066c:	d103      	bne.n	8010676 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	691b      	ldr	r3, [r3, #16]
 8010672:	60fb      	str	r3, [r7, #12]
 8010674:	e00c      	b.n	8010690 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	3308      	adds	r3, #8
 801067a:	60fb      	str	r3, [r7, #12]
 801067c:	e002      	b.n	8010684 <vListInsert+0x2e>
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	685b      	ldr	r3, [r3, #4]
 8010682:	60fb      	str	r3, [r7, #12]
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	685b      	ldr	r3, [r3, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	68ba      	ldr	r2, [r7, #8]
 801068c:	429a      	cmp	r2, r3
 801068e:	d2f6      	bcs.n	801067e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	685a      	ldr	r2, [r3, #4]
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	685b      	ldr	r3, [r3, #4]
 801069c:	683a      	ldr	r2, [r7, #0]
 801069e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	68fa      	ldr	r2, [r7, #12]
 80106a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	683a      	ldr	r2, [r7, #0]
 80106aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80106ac:	683b      	ldr	r3, [r7, #0]
 80106ae:	687a      	ldr	r2, [r7, #4]
 80106b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	1c5a      	adds	r2, r3, #1
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	601a      	str	r2, [r3, #0]
}
 80106bc:	bf00      	nop
 80106be:	3714      	adds	r7, #20
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bc80      	pop	{r7}
 80106c4:	4770      	bx	lr

080106c6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80106c6:	b480      	push	{r7}
 80106c8:	b085      	sub	sp, #20
 80106ca:	af00      	add	r7, sp, #0
 80106cc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	691b      	ldr	r3, [r3, #16]
 80106d2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	685b      	ldr	r3, [r3, #4]
 80106d8:	687a      	ldr	r2, [r7, #4]
 80106da:	6892      	ldr	r2, [r2, #8]
 80106dc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	689b      	ldr	r3, [r3, #8]
 80106e2:	687a      	ldr	r2, [r7, #4]
 80106e4:	6852      	ldr	r2, [r2, #4]
 80106e6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	685b      	ldr	r3, [r3, #4]
 80106ec:	687a      	ldr	r2, [r7, #4]
 80106ee:	429a      	cmp	r2, r3
 80106f0:	d103      	bne.n	80106fa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	689a      	ldr	r2, [r3, #8]
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	2200      	movs	r2, #0
 80106fe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	1e5a      	subs	r2, r3, #1
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	681b      	ldr	r3, [r3, #0]
}
 801070e:	4618      	mov	r0, r3
 8010710:	3714      	adds	r7, #20
 8010712:	46bd      	mov	sp, r7
 8010714:	bc80      	pop	{r7}
 8010716:	4770      	bx	lr

08010718 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b084      	sub	sp, #16
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
 8010720:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d10b      	bne.n	8010744 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801072c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010730:	f383 8811 	msr	BASEPRI, r3
 8010734:	f3bf 8f6f 	isb	sy
 8010738:	f3bf 8f4f 	dsb	sy
 801073c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801073e:	bf00      	nop
 8010740:	bf00      	nop
 8010742:	e7fd      	b.n	8010740 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010744:	f002 f83a 	bl	80127bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	681a      	ldr	r2, [r3, #0]
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010750:	68f9      	ldr	r1, [r7, #12]
 8010752:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010754:	fb01 f303 	mul.w	r3, r1, r3
 8010758:	441a      	add	r2, r3
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	2200      	movs	r2, #0
 8010762:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	681a      	ldr	r2, [r3, #0]
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	681a      	ldr	r2, [r3, #0]
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010774:	3b01      	subs	r3, #1
 8010776:	68f9      	ldr	r1, [r7, #12]
 8010778:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801077a:	fb01 f303 	mul.w	r3, r1, r3
 801077e:	441a      	add	r2, r3
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	22ff      	movs	r2, #255	@ 0xff
 8010788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	22ff      	movs	r2, #255	@ 0xff
 8010790:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d114      	bne.n	80107c4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	691b      	ldr	r3, [r3, #16]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d01a      	beq.n	80107d8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	3310      	adds	r3, #16
 80107a6:	4618      	mov	r0, r3
 80107a8:	f001 fad0 	bl	8011d4c <xTaskRemoveFromEventList>
 80107ac:	4603      	mov	r3, r0
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d012      	beq.n	80107d8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80107b2:	4b0d      	ldr	r3, [pc, #52]	@ (80107e8 <xQueueGenericReset+0xd0>)
 80107b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80107b8:	601a      	str	r2, [r3, #0]
 80107ba:	f3bf 8f4f 	dsb	sy
 80107be:	f3bf 8f6f 	isb	sy
 80107c2:	e009      	b.n	80107d8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	3310      	adds	r3, #16
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7ff fef6 	bl	80105ba <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	3324      	adds	r3, #36	@ 0x24
 80107d2:	4618      	mov	r0, r3
 80107d4:	f7ff fef1 	bl	80105ba <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80107d8:	f002 f820 	bl	801281c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80107dc:	2301      	movs	r3, #1
}
 80107de:	4618      	mov	r0, r3
 80107e0:	3710      	adds	r7, #16
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}
 80107e6:	bf00      	nop
 80107e8:	e000ed04 	.word	0xe000ed04

080107ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b08e      	sub	sp, #56	@ 0x38
 80107f0:	af02      	add	r7, sp, #8
 80107f2:	60f8      	str	r0, [r7, #12]
 80107f4:	60b9      	str	r1, [r7, #8]
 80107f6:	607a      	str	r2, [r7, #4]
 80107f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d10b      	bne.n	8010818 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8010800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010804:	f383 8811 	msr	BASEPRI, r3
 8010808:	f3bf 8f6f 	isb	sy
 801080c:	f3bf 8f4f 	dsb	sy
 8010810:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010812:	bf00      	nop
 8010814:	bf00      	nop
 8010816:	e7fd      	b.n	8010814 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010818:	683b      	ldr	r3, [r7, #0]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d10b      	bne.n	8010836 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 801081e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010822:	f383 8811 	msr	BASEPRI, r3
 8010826:	f3bf 8f6f 	isb	sy
 801082a:	f3bf 8f4f 	dsb	sy
 801082e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010830:	bf00      	nop
 8010832:	bf00      	nop
 8010834:	e7fd      	b.n	8010832 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d002      	beq.n	8010842 <xQueueGenericCreateStatic+0x56>
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d001      	beq.n	8010846 <xQueueGenericCreateStatic+0x5a>
 8010842:	2301      	movs	r3, #1
 8010844:	e000      	b.n	8010848 <xQueueGenericCreateStatic+0x5c>
 8010846:	2300      	movs	r3, #0
 8010848:	2b00      	cmp	r3, #0
 801084a:	d10b      	bne.n	8010864 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 801084c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010850:	f383 8811 	msr	BASEPRI, r3
 8010854:	f3bf 8f6f 	isb	sy
 8010858:	f3bf 8f4f 	dsb	sy
 801085c:	623b      	str	r3, [r7, #32]
}
 801085e:	bf00      	nop
 8010860:	bf00      	nop
 8010862:	e7fd      	b.n	8010860 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d102      	bne.n	8010870 <xQueueGenericCreateStatic+0x84>
 801086a:	68bb      	ldr	r3, [r7, #8]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d101      	bne.n	8010874 <xQueueGenericCreateStatic+0x88>
 8010870:	2301      	movs	r3, #1
 8010872:	e000      	b.n	8010876 <xQueueGenericCreateStatic+0x8a>
 8010874:	2300      	movs	r3, #0
 8010876:	2b00      	cmp	r3, #0
 8010878:	d10b      	bne.n	8010892 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 801087a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801087e:	f383 8811 	msr	BASEPRI, r3
 8010882:	f3bf 8f6f 	isb	sy
 8010886:	f3bf 8f4f 	dsb	sy
 801088a:	61fb      	str	r3, [r7, #28]
}
 801088c:	bf00      	nop
 801088e:	bf00      	nop
 8010890:	e7fd      	b.n	801088e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010892:	2348      	movs	r3, #72	@ 0x48
 8010894:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	2b48      	cmp	r3, #72	@ 0x48
 801089a:	d00b      	beq.n	80108b4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 801089c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108a0:	f383 8811 	msr	BASEPRI, r3
 80108a4:	f3bf 8f6f 	isb	sy
 80108a8:	f3bf 8f4f 	dsb	sy
 80108ac:	61bb      	str	r3, [r7, #24]
}
 80108ae:	bf00      	nop
 80108b0:	bf00      	nop
 80108b2:	e7fd      	b.n	80108b0 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80108b4:	683b      	ldr	r3, [r7, #0]
 80108b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80108b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d00d      	beq.n	80108da <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80108be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108c0:	2201      	movs	r2, #1
 80108c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80108c6:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80108ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108cc:	9300      	str	r3, [sp, #0]
 80108ce:	4613      	mov	r3, r2
 80108d0:	687a      	ldr	r2, [r7, #4]
 80108d2:	68b9      	ldr	r1, [r7, #8]
 80108d4:	68f8      	ldr	r0, [r7, #12]
 80108d6:	f000 f844 	bl	8010962 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80108da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80108dc:	4618      	mov	r0, r3
 80108de:	3730      	adds	r7, #48	@ 0x30
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd80      	pop	{r7, pc}

080108e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b08a      	sub	sp, #40	@ 0x28
 80108e8:	af02      	add	r7, sp, #8
 80108ea:	60f8      	str	r0, [r7, #12]
 80108ec:	60b9      	str	r1, [r7, #8]
 80108ee:	4613      	mov	r3, r2
 80108f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d10b      	bne.n	8010910 <xQueueGenericCreate+0x2c>
	__asm volatile
 80108f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108fc:	f383 8811 	msr	BASEPRI, r3
 8010900:	f3bf 8f6f 	isb	sy
 8010904:	f3bf 8f4f 	dsb	sy
 8010908:	613b      	str	r3, [r7, #16]
}
 801090a:	bf00      	nop
 801090c:	bf00      	nop
 801090e:	e7fd      	b.n	801090c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010910:	68bb      	ldr	r3, [r7, #8]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d102      	bne.n	801091c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010916:	2300      	movs	r3, #0
 8010918:	61fb      	str	r3, [r7, #28]
 801091a:	e004      	b.n	8010926 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	68ba      	ldr	r2, [r7, #8]
 8010920:	fb02 f303 	mul.w	r3, r2, r3
 8010924:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8010926:	69fb      	ldr	r3, [r7, #28]
 8010928:	3348      	adds	r3, #72	@ 0x48
 801092a:	4618      	mov	r0, r3
 801092c:	f002 f848 	bl	80129c0 <pvPortMalloc>
 8010930:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010932:	69bb      	ldr	r3, [r7, #24]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d00f      	beq.n	8010958 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8010938:	69bb      	ldr	r3, [r7, #24]
 801093a:	3348      	adds	r3, #72	@ 0x48
 801093c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801093e:	69bb      	ldr	r3, [r7, #24]
 8010940:	2200      	movs	r2, #0
 8010942:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010946:	79fa      	ldrb	r2, [r7, #7]
 8010948:	69bb      	ldr	r3, [r7, #24]
 801094a:	9300      	str	r3, [sp, #0]
 801094c:	4613      	mov	r3, r2
 801094e:	697a      	ldr	r2, [r7, #20]
 8010950:	68b9      	ldr	r1, [r7, #8]
 8010952:	68f8      	ldr	r0, [r7, #12]
 8010954:	f000 f805 	bl	8010962 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8010958:	69bb      	ldr	r3, [r7, #24]
	}
 801095a:	4618      	mov	r0, r3
 801095c:	3720      	adds	r7, #32
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}

08010962 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010962:	b580      	push	{r7, lr}
 8010964:	b084      	sub	sp, #16
 8010966:	af00      	add	r7, sp, #0
 8010968:	60f8      	str	r0, [r7, #12]
 801096a:	60b9      	str	r1, [r7, #8]
 801096c:	607a      	str	r2, [r7, #4]
 801096e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010970:	68bb      	ldr	r3, [r7, #8]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d103      	bne.n	801097e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010976:	69bb      	ldr	r3, [r7, #24]
 8010978:	69ba      	ldr	r2, [r7, #24]
 801097a:	601a      	str	r2, [r3, #0]
 801097c:	e002      	b.n	8010984 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801097e:	69bb      	ldr	r3, [r7, #24]
 8010980:	687a      	ldr	r2, [r7, #4]
 8010982:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010984:	69bb      	ldr	r3, [r7, #24]
 8010986:	68fa      	ldr	r2, [r7, #12]
 8010988:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801098a:	69bb      	ldr	r3, [r7, #24]
 801098c:	68ba      	ldr	r2, [r7, #8]
 801098e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010990:	2101      	movs	r1, #1
 8010992:	69b8      	ldr	r0, [r7, #24]
 8010994:	f7ff fec0 	bl	8010718 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010998:	bf00      	nop
 801099a:	3710      	adds	r7, #16
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}

080109a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b08e      	sub	sp, #56	@ 0x38
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	60f8      	str	r0, [r7, #12]
 80109a8:	60b9      	str	r1, [r7, #8]
 80109aa:	607a      	str	r2, [r7, #4]
 80109ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80109ae:	2300      	movs	r3, #0
 80109b0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80109b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d10b      	bne.n	80109d4 <xQueueGenericSend+0x34>
	__asm volatile
 80109bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109c0:	f383 8811 	msr	BASEPRI, r3
 80109c4:	f3bf 8f6f 	isb	sy
 80109c8:	f3bf 8f4f 	dsb	sy
 80109cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80109ce:	bf00      	nop
 80109d0:	bf00      	nop
 80109d2:	e7fd      	b.n	80109d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80109d4:	68bb      	ldr	r3, [r7, #8]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d103      	bne.n	80109e2 <xQueueGenericSend+0x42>
 80109da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d101      	bne.n	80109e6 <xQueueGenericSend+0x46>
 80109e2:	2301      	movs	r3, #1
 80109e4:	e000      	b.n	80109e8 <xQueueGenericSend+0x48>
 80109e6:	2300      	movs	r3, #0
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d10b      	bne.n	8010a04 <xQueueGenericSend+0x64>
	__asm volatile
 80109ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109f0:	f383 8811 	msr	BASEPRI, r3
 80109f4:	f3bf 8f6f 	isb	sy
 80109f8:	f3bf 8f4f 	dsb	sy
 80109fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80109fe:	bf00      	nop
 8010a00:	bf00      	nop
 8010a02:	e7fd      	b.n	8010a00 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	2b02      	cmp	r3, #2
 8010a08:	d103      	bne.n	8010a12 <xQueueGenericSend+0x72>
 8010a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a0e:	2b01      	cmp	r3, #1
 8010a10:	d101      	bne.n	8010a16 <xQueueGenericSend+0x76>
 8010a12:	2301      	movs	r3, #1
 8010a14:	e000      	b.n	8010a18 <xQueueGenericSend+0x78>
 8010a16:	2300      	movs	r3, #0
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d10b      	bne.n	8010a34 <xQueueGenericSend+0x94>
	__asm volatile
 8010a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a20:	f383 8811 	msr	BASEPRI, r3
 8010a24:	f3bf 8f6f 	isb	sy
 8010a28:	f3bf 8f4f 	dsb	sy
 8010a2c:	623b      	str	r3, [r7, #32]
}
 8010a2e:	bf00      	nop
 8010a30:	bf00      	nop
 8010a32:	e7fd      	b.n	8010a30 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010a34:	f001 fb86 	bl	8012144 <xTaskGetSchedulerState>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d102      	bne.n	8010a44 <xQueueGenericSend+0xa4>
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d101      	bne.n	8010a48 <xQueueGenericSend+0xa8>
 8010a44:	2301      	movs	r3, #1
 8010a46:	e000      	b.n	8010a4a <xQueueGenericSend+0xaa>
 8010a48:	2300      	movs	r3, #0
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d10b      	bne.n	8010a66 <xQueueGenericSend+0xc6>
	__asm volatile
 8010a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a52:	f383 8811 	msr	BASEPRI, r3
 8010a56:	f3bf 8f6f 	isb	sy
 8010a5a:	f3bf 8f4f 	dsb	sy
 8010a5e:	61fb      	str	r3, [r7, #28]
}
 8010a60:	bf00      	nop
 8010a62:	bf00      	nop
 8010a64:	e7fd      	b.n	8010a62 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010a66:	f001 fea9 	bl	80127bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d302      	bcc.n	8010a7c <xQueueGenericSend+0xdc>
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	2b02      	cmp	r3, #2
 8010a7a:	d129      	bne.n	8010ad0 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010a7c:	683a      	ldr	r2, [r7, #0]
 8010a7e:	68b9      	ldr	r1, [r7, #8]
 8010a80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010a82:	f000 faec 	bl	801105e <prvCopyDataToQueue>
 8010a86:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d010      	beq.n	8010ab2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a92:	3324      	adds	r3, #36	@ 0x24
 8010a94:	4618      	mov	r0, r3
 8010a96:	f001 f959 	bl	8011d4c <xTaskRemoveFromEventList>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d013      	beq.n	8010ac8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010aa0:	4b3f      	ldr	r3, [pc, #252]	@ (8010ba0 <xQueueGenericSend+0x200>)
 8010aa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010aa6:	601a      	str	r2, [r3, #0]
 8010aa8:	f3bf 8f4f 	dsb	sy
 8010aac:	f3bf 8f6f 	isb	sy
 8010ab0:	e00a      	b.n	8010ac8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d007      	beq.n	8010ac8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010ab8:	4b39      	ldr	r3, [pc, #228]	@ (8010ba0 <xQueueGenericSend+0x200>)
 8010aba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010abe:	601a      	str	r2, [r3, #0]
 8010ac0:	f3bf 8f4f 	dsb	sy
 8010ac4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010ac8:	f001 fea8 	bl	801281c <vPortExitCritical>
				return pdPASS;
 8010acc:	2301      	movs	r3, #1
 8010ace:	e063      	b.n	8010b98 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d103      	bne.n	8010ade <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010ad6:	f001 fea1 	bl	801281c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010ada:	2300      	movs	r3, #0
 8010adc:	e05c      	b.n	8010b98 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d106      	bne.n	8010af2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010ae4:	f107 0314 	add.w	r3, r7, #20
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f001 f993 	bl	8011e14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010aee:	2301      	movs	r3, #1
 8010af0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010af2:	f001 fe93 	bl	801281c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010af6:	f000 ff2f 	bl	8011958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010afa:	f001 fe5f 	bl	80127bc <vPortEnterCritical>
 8010afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010b04:	b25b      	sxtb	r3, r3
 8010b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b0a:	d103      	bne.n	8010b14 <xQueueGenericSend+0x174>
 8010b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b0e:	2200      	movs	r2, #0
 8010b10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010b1a:	b25b      	sxtb	r3, r3
 8010b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b20:	d103      	bne.n	8010b2a <xQueueGenericSend+0x18a>
 8010b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b24:	2200      	movs	r2, #0
 8010b26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010b2a:	f001 fe77 	bl	801281c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010b2e:	1d3a      	adds	r2, r7, #4
 8010b30:	f107 0314 	add.w	r3, r7, #20
 8010b34:	4611      	mov	r1, r2
 8010b36:	4618      	mov	r0, r3
 8010b38:	f001 f982 	bl	8011e40 <xTaskCheckForTimeOut>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d124      	bne.n	8010b8c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010b42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010b44:	f000 fb83 	bl	801124e <prvIsQueueFull>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d018      	beq.n	8010b80 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b50:	3310      	adds	r3, #16
 8010b52:	687a      	ldr	r2, [r7, #4]
 8010b54:	4611      	mov	r1, r2
 8010b56:	4618      	mov	r0, r3
 8010b58:	f001 f8d2 	bl	8011d00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010b5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010b5e:	f000 fb0e 	bl	801117e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010b62:	f000 ff07 	bl	8011974 <xTaskResumeAll>
 8010b66:	4603      	mov	r3, r0
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	f47f af7c 	bne.w	8010a66 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8010b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8010ba0 <xQueueGenericSend+0x200>)
 8010b70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010b74:	601a      	str	r2, [r3, #0]
 8010b76:	f3bf 8f4f 	dsb	sy
 8010b7a:	f3bf 8f6f 	isb	sy
 8010b7e:	e772      	b.n	8010a66 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010b80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010b82:	f000 fafc 	bl	801117e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010b86:	f000 fef5 	bl	8011974 <xTaskResumeAll>
 8010b8a:	e76c      	b.n	8010a66 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010b8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010b8e:	f000 faf6 	bl	801117e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010b92:	f000 feef 	bl	8011974 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010b96:	2300      	movs	r3, #0
		}
	}
}
 8010b98:	4618      	mov	r0, r3
 8010b9a:	3738      	adds	r7, #56	@ 0x38
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	bd80      	pop	{r7, pc}
 8010ba0:	e000ed04 	.word	0xe000ed04

08010ba4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b08e      	sub	sp, #56	@ 0x38
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
 8010bac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d10b      	bne.n	8010bd0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8010bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bbc:	f383 8811 	msr	BASEPRI, r3
 8010bc0:	f3bf 8f6f 	isb	sy
 8010bc4:	f3bf 8f4f 	dsb	sy
 8010bc8:	623b      	str	r3, [r7, #32]
}
 8010bca:	bf00      	nop
 8010bcc:	bf00      	nop
 8010bce:	e7fd      	b.n	8010bcc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d00b      	beq.n	8010bf0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8010bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bdc:	f383 8811 	msr	BASEPRI, r3
 8010be0:	f3bf 8f6f 	isb	sy
 8010be4:	f3bf 8f4f 	dsb	sy
 8010be8:	61fb      	str	r3, [r7, #28]
}
 8010bea:	bf00      	nop
 8010bec:	bf00      	nop
 8010bee:	e7fd      	b.n	8010bec <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8010bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d103      	bne.n	8010c00 <xQueueGiveFromISR+0x5c>
 8010bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bfa:	685b      	ldr	r3, [r3, #4]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d101      	bne.n	8010c04 <xQueueGiveFromISR+0x60>
 8010c00:	2301      	movs	r3, #1
 8010c02:	e000      	b.n	8010c06 <xQueueGiveFromISR+0x62>
 8010c04:	2300      	movs	r3, #0
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d10b      	bne.n	8010c22 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8010c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c0e:	f383 8811 	msr	BASEPRI, r3
 8010c12:	f3bf 8f6f 	isb	sy
 8010c16:	f3bf 8f4f 	dsb	sy
 8010c1a:	61bb      	str	r3, [r7, #24]
}
 8010c1c:	bf00      	nop
 8010c1e:	bf00      	nop
 8010c20:	e7fd      	b.n	8010c1e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010c22:	f001 fe8d 	bl	8012940 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010c26:	f3ef 8211 	mrs	r2, BASEPRI
 8010c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c2e:	f383 8811 	msr	BASEPRI, r3
 8010c32:	f3bf 8f6f 	isb	sy
 8010c36:	f3bf 8f4f 	dsb	sy
 8010c3a:	617a      	str	r2, [r7, #20]
 8010c3c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010c3e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c46:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	d22b      	bcs.n	8010caa <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010c58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c5e:	1c5a      	adds	r2, r3, #1
 8010c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c62:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010c64:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c6c:	d112      	bne.n	8010c94 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d016      	beq.n	8010ca4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c78:	3324      	adds	r3, #36	@ 0x24
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f001 f866 	bl	8011d4c <xTaskRemoveFromEventList>
 8010c80:	4603      	mov	r3, r0
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d00e      	beq.n	8010ca4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d00b      	beq.n	8010ca4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	2201      	movs	r2, #1
 8010c90:	601a      	str	r2, [r3, #0]
 8010c92:	e007      	b.n	8010ca4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010c94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c98:	3301      	adds	r3, #1
 8010c9a:	b2db      	uxtb	r3, r3
 8010c9c:	b25a      	sxtb	r2, r3
 8010c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ca0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010ca4:	2301      	movs	r3, #1
 8010ca6:	637b      	str	r3, [r7, #52]	@ 0x34
 8010ca8:	e001      	b.n	8010cae <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010caa:	2300      	movs	r3, #0
 8010cac:	637b      	str	r3, [r7, #52]	@ 0x34
 8010cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cb0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010cb8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	3738      	adds	r7, #56	@ 0x38
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}

08010cc4 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b08e      	sub	sp, #56	@ 0x38
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
 8010ccc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010cce:	2300      	movs	r3, #0
 8010cd0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d10b      	bne.n	8010cf8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8010ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ce4:	f383 8811 	msr	BASEPRI, r3
 8010ce8:	f3bf 8f6f 	isb	sy
 8010cec:	f3bf 8f4f 	dsb	sy
 8010cf0:	623b      	str	r3, [r7, #32]
}
 8010cf2:	bf00      	nop
 8010cf4:	bf00      	nop
 8010cf6:	e7fd      	b.n	8010cf4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d00b      	beq.n	8010d18 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8010d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d04:	f383 8811 	msr	BASEPRI, r3
 8010d08:	f3bf 8f6f 	isb	sy
 8010d0c:	f3bf 8f4f 	dsb	sy
 8010d10:	61fb      	str	r3, [r7, #28]
}
 8010d12:	bf00      	nop
 8010d14:	bf00      	nop
 8010d16:	e7fd      	b.n	8010d14 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010d18:	f001 fa14 	bl	8012144 <xTaskGetSchedulerState>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d102      	bne.n	8010d28 <xQueueSemaphoreTake+0x64>
 8010d22:	683b      	ldr	r3, [r7, #0]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d101      	bne.n	8010d2c <xQueueSemaphoreTake+0x68>
 8010d28:	2301      	movs	r3, #1
 8010d2a:	e000      	b.n	8010d2e <xQueueSemaphoreTake+0x6a>
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d10b      	bne.n	8010d4a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8010d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d36:	f383 8811 	msr	BASEPRI, r3
 8010d3a:	f3bf 8f6f 	isb	sy
 8010d3e:	f3bf 8f4f 	dsb	sy
 8010d42:	61bb      	str	r3, [r7, #24]
}
 8010d44:	bf00      	nop
 8010d46:	bf00      	nop
 8010d48:	e7fd      	b.n	8010d46 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8010d4a:	f001 fd37 	bl	80127bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d52:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d024      	beq.n	8010da4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d5c:	1e5a      	subs	r2, r3, #1
 8010d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d60:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d104      	bne.n	8010d74 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8010d6a:	f001 fbb9 	bl	80124e0 <pvTaskIncrementMutexHeldCount>
 8010d6e:	4602      	mov	r2, r0
 8010d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d72:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d76:	691b      	ldr	r3, [r3, #16]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d00f      	beq.n	8010d9c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d7e:	3310      	adds	r3, #16
 8010d80:	4618      	mov	r0, r3
 8010d82:	f000 ffe3 	bl	8011d4c <xTaskRemoveFromEventList>
 8010d86:	4603      	mov	r3, r0
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d007      	beq.n	8010d9c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010d8c:	4b54      	ldr	r3, [pc, #336]	@ (8010ee0 <xQueueSemaphoreTake+0x21c>)
 8010d8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010d92:	601a      	str	r2, [r3, #0]
 8010d94:	f3bf 8f4f 	dsb	sy
 8010d98:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010d9c:	f001 fd3e 	bl	801281c <vPortExitCritical>
				return pdPASS;
 8010da0:	2301      	movs	r3, #1
 8010da2:	e098      	b.n	8010ed6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010da4:	683b      	ldr	r3, [r7, #0]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d112      	bne.n	8010dd0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d00b      	beq.n	8010dc8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8010db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010db4:	f383 8811 	msr	BASEPRI, r3
 8010db8:	f3bf 8f6f 	isb	sy
 8010dbc:	f3bf 8f4f 	dsb	sy
 8010dc0:	617b      	str	r3, [r7, #20]
}
 8010dc2:	bf00      	nop
 8010dc4:	bf00      	nop
 8010dc6:	e7fd      	b.n	8010dc4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010dc8:	f001 fd28 	bl	801281c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010dcc:	2300      	movs	r3, #0
 8010dce:	e082      	b.n	8010ed6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d106      	bne.n	8010de4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010dd6:	f107 030c 	add.w	r3, r7, #12
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f001 f81a 	bl	8011e14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010de0:	2301      	movs	r3, #1
 8010de2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010de4:	f001 fd1a 	bl	801281c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010de8:	f000 fdb6 	bl	8011958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010dec:	f001 fce6 	bl	80127bc <vPortEnterCritical>
 8010df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010df2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010df6:	b25b      	sxtb	r3, r3
 8010df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dfc:	d103      	bne.n	8010e06 <xQueueSemaphoreTake+0x142>
 8010dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e00:	2200      	movs	r2, #0
 8010e02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010e0c:	b25b      	sxtb	r3, r3
 8010e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e12:	d103      	bne.n	8010e1c <xQueueSemaphoreTake+0x158>
 8010e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e16:	2200      	movs	r2, #0
 8010e18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010e1c:	f001 fcfe 	bl	801281c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010e20:	463a      	mov	r2, r7
 8010e22:	f107 030c 	add.w	r3, r7, #12
 8010e26:	4611      	mov	r1, r2
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f001 f809 	bl	8011e40 <xTaskCheckForTimeOut>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d132      	bne.n	8010e9a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010e36:	f000 f9f4 	bl	8011222 <prvIsQueueEmpty>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d026      	beq.n	8010e8e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d109      	bne.n	8010e5c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8010e48:	f001 fcb8 	bl	80127bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8010e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e4e:	685b      	ldr	r3, [r3, #4]
 8010e50:	4618      	mov	r0, r3
 8010e52:	f001 f995 	bl	8012180 <xTaskPriorityInherit>
 8010e56:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8010e58:	f001 fce0 	bl	801281c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e5e:	3324      	adds	r3, #36	@ 0x24
 8010e60:	683a      	ldr	r2, [r7, #0]
 8010e62:	4611      	mov	r1, r2
 8010e64:	4618      	mov	r0, r3
 8010e66:	f000 ff4b 	bl	8011d00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010e6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010e6c:	f000 f987 	bl	801117e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010e70:	f000 fd80 	bl	8011974 <xTaskResumeAll>
 8010e74:	4603      	mov	r3, r0
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	f47f af67 	bne.w	8010d4a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8010e7c:	4b18      	ldr	r3, [pc, #96]	@ (8010ee0 <xQueueSemaphoreTake+0x21c>)
 8010e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010e82:	601a      	str	r2, [r3, #0]
 8010e84:	f3bf 8f4f 	dsb	sy
 8010e88:	f3bf 8f6f 	isb	sy
 8010e8c:	e75d      	b.n	8010d4a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010e8e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010e90:	f000 f975 	bl	801117e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010e94:	f000 fd6e 	bl	8011974 <xTaskResumeAll>
 8010e98:	e757      	b.n	8010d4a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010e9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010e9c:	f000 f96f 	bl	801117e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010ea0:	f000 fd68 	bl	8011974 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010ea4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010ea6:	f000 f9bc 	bl	8011222 <prvIsQueueEmpty>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	f43f af4c 	beq.w	8010d4a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d00d      	beq.n	8010ed4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8010eb8:	f001 fc80 	bl	80127bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010ebc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010ebe:	f000 f8b7 	bl	8011030 <prvGetDisinheritPriorityAfterTimeout>
 8010ec2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8010ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ec6:	685b      	ldr	r3, [r3, #4]
 8010ec8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f001 fa66 	bl	801239c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010ed0:	f001 fca4 	bl	801281c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010ed4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	3738      	adds	r7, #56	@ 0x38
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bd80      	pop	{r7, pc}
 8010ede:	bf00      	nop
 8010ee0:	e000ed04 	.word	0xe000ed04

08010ee4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b08e      	sub	sp, #56	@ 0x38
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	60f8      	str	r0, [r7, #12]
 8010eec:	60b9      	str	r1, [r7, #8]
 8010eee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d10b      	bne.n	8010f12 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8010efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010efe:	f383 8811 	msr	BASEPRI, r3
 8010f02:	f3bf 8f6f 	isb	sy
 8010f06:	f3bf 8f4f 	dsb	sy
 8010f0a:	623b      	str	r3, [r7, #32]
}
 8010f0c:	bf00      	nop
 8010f0e:	bf00      	nop
 8010f10:	e7fd      	b.n	8010f0e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010f12:	68bb      	ldr	r3, [r7, #8]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d103      	bne.n	8010f20 <xQueueReceiveFromISR+0x3c>
 8010f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d101      	bne.n	8010f24 <xQueueReceiveFromISR+0x40>
 8010f20:	2301      	movs	r3, #1
 8010f22:	e000      	b.n	8010f26 <xQueueReceiveFromISR+0x42>
 8010f24:	2300      	movs	r3, #0
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d10b      	bne.n	8010f42 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8010f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f2e:	f383 8811 	msr	BASEPRI, r3
 8010f32:	f3bf 8f6f 	isb	sy
 8010f36:	f3bf 8f4f 	dsb	sy
 8010f3a:	61fb      	str	r3, [r7, #28]
}
 8010f3c:	bf00      	nop
 8010f3e:	bf00      	nop
 8010f40:	e7fd      	b.n	8010f3e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010f42:	f001 fcfd 	bl	8012940 <vPortValidateInterruptPriority>
	__asm volatile
 8010f46:	f3ef 8211 	mrs	r2, BASEPRI
 8010f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f4e:	f383 8811 	msr	BASEPRI, r3
 8010f52:	f3bf 8f6f 	isb	sy
 8010f56:	f3bf 8f4f 	dsb	sy
 8010f5a:	61ba      	str	r2, [r7, #24]
 8010f5c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010f5e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f66:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d02f      	beq.n	8010fce <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010f74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010f78:	68b9      	ldr	r1, [r7, #8]
 8010f7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010f7c:	f000 f8d9 	bl	8011132 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f82:	1e5a      	subs	r2, r3, #1
 8010f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f86:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010f88:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f90:	d112      	bne.n	8010fb8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f94:	691b      	ldr	r3, [r3, #16]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d016      	beq.n	8010fc8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f9c:	3310      	adds	r3, #16
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	f000 fed4 	bl	8011d4c <xTaskRemoveFromEventList>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d00e      	beq.n	8010fc8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d00b      	beq.n	8010fc8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	2201      	movs	r2, #1
 8010fb4:	601a      	str	r2, [r3, #0]
 8010fb6:	e007      	b.n	8010fc8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010fbc:	3301      	adds	r3, #1
 8010fbe:	b2db      	uxtb	r3, r3
 8010fc0:	b25a      	sxtb	r2, r3
 8010fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8010fc8:	2301      	movs	r3, #1
 8010fca:	637b      	str	r3, [r7, #52]	@ 0x34
 8010fcc:	e001      	b.n	8010fd2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8010fce:	2300      	movs	r3, #0
 8010fd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8010fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fd4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010fd6:	693b      	ldr	r3, [r7, #16]
 8010fd8:	f383 8811 	msr	BASEPRI, r3
}
 8010fdc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	3738      	adds	r7, #56	@ 0x38
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}

08010fe8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b084      	sub	sp, #16
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d10b      	bne.n	8011012 <vQueueDelete+0x2a>
	__asm volatile
 8010ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ffe:	f383 8811 	msr	BASEPRI, r3
 8011002:	f3bf 8f6f 	isb	sy
 8011006:	f3bf 8f4f 	dsb	sy
 801100a:	60bb      	str	r3, [r7, #8]
}
 801100c:	bf00      	nop
 801100e:	bf00      	nop
 8011010:	e7fd      	b.n	801100e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011012:	68f8      	ldr	r0, [r7, #12]
 8011014:	f000 f934 	bl	8011280 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 801101e:	2b00      	cmp	r3, #0
 8011020:	d102      	bne.n	8011028 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8011022:	68f8      	ldr	r0, [r7, #12]
 8011024:	f001 fd94 	bl	8012b50 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011028:	bf00      	nop
 801102a:	3710      	adds	r7, #16
 801102c:	46bd      	mov	sp, r7
 801102e:	bd80      	pop	{r7, pc}

08011030 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011030:	b480      	push	{r7}
 8011032:	b085      	sub	sp, #20
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801103c:	2b00      	cmp	r3, #0
 801103e:	d006      	beq.n	801104e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	f1c3 0307 	rsb	r3, r3, #7
 801104a:	60fb      	str	r3, [r7, #12]
 801104c:	e001      	b.n	8011052 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801104e:	2300      	movs	r3, #0
 8011050:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011052:	68fb      	ldr	r3, [r7, #12]
	}
 8011054:	4618      	mov	r0, r3
 8011056:	3714      	adds	r7, #20
 8011058:	46bd      	mov	sp, r7
 801105a:	bc80      	pop	{r7}
 801105c:	4770      	bx	lr

0801105e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801105e:	b580      	push	{r7, lr}
 8011060:	b086      	sub	sp, #24
 8011062:	af00      	add	r7, sp, #0
 8011064:	60f8      	str	r0, [r7, #12]
 8011066:	60b9      	str	r1, [r7, #8]
 8011068:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801106a:	2300      	movs	r3, #0
 801106c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011072:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011078:	2b00      	cmp	r3, #0
 801107a:	d10d      	bne.n	8011098 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d14d      	bne.n	8011120 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	685b      	ldr	r3, [r3, #4]
 8011088:	4618      	mov	r0, r3
 801108a:	f001 f8ff 	bl	801228c <xTaskPriorityDisinherit>
 801108e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	2200      	movs	r2, #0
 8011094:	605a      	str	r2, [r3, #4]
 8011096:	e043      	b.n	8011120 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d119      	bne.n	80110d2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	6898      	ldr	r0, [r3, #8]
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80110a6:	461a      	mov	r2, r3
 80110a8:	68b9      	ldr	r1, [r7, #8]
 80110aa:	f001 ff75 	bl	8012f98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	689a      	ldr	r2, [r3, #8]
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80110b6:	441a      	add	r2, r3
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	689a      	ldr	r2, [r3, #8]
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	685b      	ldr	r3, [r3, #4]
 80110c4:	429a      	cmp	r2, r3
 80110c6:	d32b      	bcc.n	8011120 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	681a      	ldr	r2, [r3, #0]
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	609a      	str	r2, [r3, #8]
 80110d0:	e026      	b.n	8011120 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	68d8      	ldr	r0, [r3, #12]
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80110da:	461a      	mov	r2, r3
 80110dc:	68b9      	ldr	r1, [r7, #8]
 80110de:	f001 ff5b 	bl	8012f98 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	68da      	ldr	r2, [r3, #12]
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80110ea:	425b      	negs	r3, r3
 80110ec:	441a      	add	r2, r3
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	68da      	ldr	r2, [r3, #12]
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	429a      	cmp	r2, r3
 80110fc:	d207      	bcs.n	801110e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	685a      	ldr	r2, [r3, #4]
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011106:	425b      	negs	r3, r3
 8011108:	441a      	add	r2, r3
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	2b02      	cmp	r3, #2
 8011112:	d105      	bne.n	8011120 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011114:	693b      	ldr	r3, [r7, #16]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d002      	beq.n	8011120 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801111a:	693b      	ldr	r3, [r7, #16]
 801111c:	3b01      	subs	r3, #1
 801111e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011120:	693b      	ldr	r3, [r7, #16]
 8011122:	1c5a      	adds	r2, r3, #1
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8011128:	697b      	ldr	r3, [r7, #20]
}
 801112a:	4618      	mov	r0, r3
 801112c:	3718      	adds	r7, #24
 801112e:	46bd      	mov	sp, r7
 8011130:	bd80      	pop	{r7, pc}

08011132 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011132:	b580      	push	{r7, lr}
 8011134:	b082      	sub	sp, #8
 8011136:	af00      	add	r7, sp, #0
 8011138:	6078      	str	r0, [r7, #4]
 801113a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011140:	2b00      	cmp	r3, #0
 8011142:	d018      	beq.n	8011176 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	68da      	ldr	r2, [r3, #12]
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801114c:	441a      	add	r2, r3
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	68da      	ldr	r2, [r3, #12]
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	685b      	ldr	r3, [r3, #4]
 801115a:	429a      	cmp	r2, r3
 801115c:	d303      	bcc.n	8011166 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	681a      	ldr	r2, [r3, #0]
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	68d9      	ldr	r1, [r3, #12]
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801116e:	461a      	mov	r2, r3
 8011170:	6838      	ldr	r0, [r7, #0]
 8011172:	f001 ff11 	bl	8012f98 <memcpy>
	}
}
 8011176:	bf00      	nop
 8011178:	3708      	adds	r7, #8
 801117a:	46bd      	mov	sp, r7
 801117c:	bd80      	pop	{r7, pc}

0801117e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801117e:	b580      	push	{r7, lr}
 8011180:	b084      	sub	sp, #16
 8011182:	af00      	add	r7, sp, #0
 8011184:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011186:	f001 fb19 	bl	80127bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011190:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011192:	e011      	b.n	80111b8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011198:	2b00      	cmp	r3, #0
 801119a:	d012      	beq.n	80111c2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	3324      	adds	r3, #36	@ 0x24
 80111a0:	4618      	mov	r0, r3
 80111a2:	f000 fdd3 	bl	8011d4c <xTaskRemoveFromEventList>
 80111a6:	4603      	mov	r3, r0
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d001      	beq.n	80111b0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80111ac:	f000 feac 	bl	8011f08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80111b0:	7bfb      	ldrb	r3, [r7, #15]
 80111b2:	3b01      	subs	r3, #1
 80111b4:	b2db      	uxtb	r3, r3
 80111b6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80111b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	dce9      	bgt.n	8011194 <prvUnlockQueue+0x16>
 80111c0:	e000      	b.n	80111c4 <prvUnlockQueue+0x46>
					break;
 80111c2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	22ff      	movs	r2, #255	@ 0xff
 80111c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80111cc:	f001 fb26 	bl	801281c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80111d0:	f001 faf4 	bl	80127bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80111da:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80111dc:	e011      	b.n	8011202 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	691b      	ldr	r3, [r3, #16]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d012      	beq.n	801120c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	3310      	adds	r3, #16
 80111ea:	4618      	mov	r0, r3
 80111ec:	f000 fdae 	bl	8011d4c <xTaskRemoveFromEventList>
 80111f0:	4603      	mov	r3, r0
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d001      	beq.n	80111fa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80111f6:	f000 fe87 	bl	8011f08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80111fa:	7bbb      	ldrb	r3, [r7, #14]
 80111fc:	3b01      	subs	r3, #1
 80111fe:	b2db      	uxtb	r3, r3
 8011200:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011202:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011206:	2b00      	cmp	r3, #0
 8011208:	dce9      	bgt.n	80111de <prvUnlockQueue+0x60>
 801120a:	e000      	b.n	801120e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801120c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	22ff      	movs	r2, #255	@ 0xff
 8011212:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8011216:	f001 fb01 	bl	801281c <vPortExitCritical>
}
 801121a:	bf00      	nop
 801121c:	3710      	adds	r7, #16
 801121e:	46bd      	mov	sp, r7
 8011220:	bd80      	pop	{r7, pc}

08011222 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011222:	b580      	push	{r7, lr}
 8011224:	b084      	sub	sp, #16
 8011226:	af00      	add	r7, sp, #0
 8011228:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801122a:	f001 fac7 	bl	80127bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011232:	2b00      	cmp	r3, #0
 8011234:	d102      	bne.n	801123c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011236:	2301      	movs	r3, #1
 8011238:	60fb      	str	r3, [r7, #12]
 801123a:	e001      	b.n	8011240 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801123c:	2300      	movs	r3, #0
 801123e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011240:	f001 faec 	bl	801281c <vPortExitCritical>

	return xReturn;
 8011244:	68fb      	ldr	r3, [r7, #12]
}
 8011246:	4618      	mov	r0, r3
 8011248:	3710      	adds	r7, #16
 801124a:	46bd      	mov	sp, r7
 801124c:	bd80      	pop	{r7, pc}

0801124e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801124e:	b580      	push	{r7, lr}
 8011250:	b084      	sub	sp, #16
 8011252:	af00      	add	r7, sp, #0
 8011254:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011256:	f001 fab1 	bl	80127bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011262:	429a      	cmp	r2, r3
 8011264:	d102      	bne.n	801126c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011266:	2301      	movs	r3, #1
 8011268:	60fb      	str	r3, [r7, #12]
 801126a:	e001      	b.n	8011270 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801126c:	2300      	movs	r3, #0
 801126e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011270:	f001 fad4 	bl	801281c <vPortExitCritical>

	return xReturn;
 8011274:	68fb      	ldr	r3, [r7, #12]
}
 8011276:	4618      	mov	r0, r3
 8011278:	3710      	adds	r7, #16
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}
	...

08011280 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011280:	b480      	push	{r7}
 8011282:	b085      	sub	sp, #20
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011288:	2300      	movs	r3, #0
 801128a:	60fb      	str	r3, [r7, #12]
 801128c:	e016      	b.n	80112bc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801128e:	4a10      	ldr	r2, [pc, #64]	@ (80112d0 <vQueueUnregisterQueue+0x50>)
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	00db      	lsls	r3, r3, #3
 8011294:	4413      	add	r3, r2
 8011296:	685b      	ldr	r3, [r3, #4]
 8011298:	687a      	ldr	r2, [r7, #4]
 801129a:	429a      	cmp	r2, r3
 801129c:	d10b      	bne.n	80112b6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801129e:	4a0c      	ldr	r2, [pc, #48]	@ (80112d0 <vQueueUnregisterQueue+0x50>)
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	2100      	movs	r1, #0
 80112a4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80112a8:	4a09      	ldr	r2, [pc, #36]	@ (80112d0 <vQueueUnregisterQueue+0x50>)
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	00db      	lsls	r3, r3, #3
 80112ae:	4413      	add	r3, r2
 80112b0:	2200      	movs	r2, #0
 80112b2:	605a      	str	r2, [r3, #4]
				break;
 80112b4:	e006      	b.n	80112c4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	3301      	adds	r3, #1
 80112ba:	60fb      	str	r3, [r7, #12]
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	2b07      	cmp	r3, #7
 80112c0:	d9e5      	bls.n	801128e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80112c2:	bf00      	nop
 80112c4:	bf00      	nop
 80112c6:	3714      	adds	r7, #20
 80112c8:	46bd      	mov	sp, r7
 80112ca:	bc80      	pop	{r7}
 80112cc:	4770      	bx	lr
 80112ce:	bf00      	nop
 80112d0:	200012a4 	.word	0x200012a4

080112d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b08e      	sub	sp, #56	@ 0x38
 80112d8:	af04      	add	r7, sp, #16
 80112da:	60f8      	str	r0, [r7, #12]
 80112dc:	60b9      	str	r1, [r7, #8]
 80112de:	607a      	str	r2, [r7, #4]
 80112e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80112e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d10b      	bne.n	8011300 <xTaskCreateStatic+0x2c>
	__asm volatile
 80112e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112ec:	f383 8811 	msr	BASEPRI, r3
 80112f0:	f3bf 8f6f 	isb	sy
 80112f4:	f3bf 8f4f 	dsb	sy
 80112f8:	623b      	str	r3, [r7, #32]
}
 80112fa:	bf00      	nop
 80112fc:	bf00      	nop
 80112fe:	e7fd      	b.n	80112fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011302:	2b00      	cmp	r3, #0
 8011304:	d10b      	bne.n	801131e <xTaskCreateStatic+0x4a>
	__asm volatile
 8011306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801130a:	f383 8811 	msr	BASEPRI, r3
 801130e:	f3bf 8f6f 	isb	sy
 8011312:	f3bf 8f4f 	dsb	sy
 8011316:	61fb      	str	r3, [r7, #28]
}
 8011318:	bf00      	nop
 801131a:	bf00      	nop
 801131c:	e7fd      	b.n	801131a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801131e:	2354      	movs	r3, #84	@ 0x54
 8011320:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011322:	693b      	ldr	r3, [r7, #16]
 8011324:	2b54      	cmp	r3, #84	@ 0x54
 8011326:	d00b      	beq.n	8011340 <xTaskCreateStatic+0x6c>
	__asm volatile
 8011328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801132c:	f383 8811 	msr	BASEPRI, r3
 8011330:	f3bf 8f6f 	isb	sy
 8011334:	f3bf 8f4f 	dsb	sy
 8011338:	61bb      	str	r3, [r7, #24]
}
 801133a:	bf00      	nop
 801133c:	bf00      	nop
 801133e:	e7fd      	b.n	801133c <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011342:	2b00      	cmp	r3, #0
 8011344:	d01e      	beq.n	8011384 <xTaskCreateStatic+0xb0>
 8011346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011348:	2b00      	cmp	r3, #0
 801134a:	d01b      	beq.n	8011384 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801134c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801134e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011352:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011354:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011358:	2202      	movs	r2, #2
 801135a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801135e:	2300      	movs	r3, #0
 8011360:	9303      	str	r3, [sp, #12]
 8011362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011364:	9302      	str	r3, [sp, #8]
 8011366:	f107 0314 	add.w	r3, r7, #20
 801136a:	9301      	str	r3, [sp, #4]
 801136c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801136e:	9300      	str	r3, [sp, #0]
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	687a      	ldr	r2, [r7, #4]
 8011374:	68b9      	ldr	r1, [r7, #8]
 8011376:	68f8      	ldr	r0, [r7, #12]
 8011378:	f000 f850 	bl	801141c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801137c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801137e:	f000 f8d5 	bl	801152c <prvAddNewTaskToReadyList>
 8011382:	e001      	b.n	8011388 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8011384:	2300      	movs	r3, #0
 8011386:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011388:	697b      	ldr	r3, [r7, #20]
	}
 801138a:	4618      	mov	r0, r3
 801138c:	3728      	adds	r7, #40	@ 0x28
 801138e:	46bd      	mov	sp, r7
 8011390:	bd80      	pop	{r7, pc}

08011392 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011392:	b580      	push	{r7, lr}
 8011394:	b08c      	sub	sp, #48	@ 0x30
 8011396:	af04      	add	r7, sp, #16
 8011398:	60f8      	str	r0, [r7, #12]
 801139a:	60b9      	str	r1, [r7, #8]
 801139c:	603b      	str	r3, [r7, #0]
 801139e:	4613      	mov	r3, r2
 80113a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80113a2:	88fb      	ldrh	r3, [r7, #6]
 80113a4:	009b      	lsls	r3, r3, #2
 80113a6:	4618      	mov	r0, r3
 80113a8:	f001 fb0a 	bl	80129c0 <pvPortMalloc>
 80113ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80113ae:	697b      	ldr	r3, [r7, #20]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d00e      	beq.n	80113d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80113b4:	2054      	movs	r0, #84	@ 0x54
 80113b6:	f001 fb03 	bl	80129c0 <pvPortMalloc>
 80113ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80113bc:	69fb      	ldr	r3, [r7, #28]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d003      	beq.n	80113ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80113c2:	69fb      	ldr	r3, [r7, #28]
 80113c4:	697a      	ldr	r2, [r7, #20]
 80113c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80113c8:	e005      	b.n	80113d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80113ca:	6978      	ldr	r0, [r7, #20]
 80113cc:	f001 fbc0 	bl	8012b50 <vPortFree>
 80113d0:	e001      	b.n	80113d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80113d2:	2300      	movs	r3, #0
 80113d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80113d6:	69fb      	ldr	r3, [r7, #28]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d017      	beq.n	801140c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80113dc:	69fb      	ldr	r3, [r7, #28]
 80113de:	2200      	movs	r2, #0
 80113e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80113e4:	88fa      	ldrh	r2, [r7, #6]
 80113e6:	2300      	movs	r3, #0
 80113e8:	9303      	str	r3, [sp, #12]
 80113ea:	69fb      	ldr	r3, [r7, #28]
 80113ec:	9302      	str	r3, [sp, #8]
 80113ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113f0:	9301      	str	r3, [sp, #4]
 80113f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113f4:	9300      	str	r3, [sp, #0]
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	68b9      	ldr	r1, [r7, #8]
 80113fa:	68f8      	ldr	r0, [r7, #12]
 80113fc:	f000 f80e 	bl	801141c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011400:	69f8      	ldr	r0, [r7, #28]
 8011402:	f000 f893 	bl	801152c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011406:	2301      	movs	r3, #1
 8011408:	61bb      	str	r3, [r7, #24]
 801140a:	e002      	b.n	8011412 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801140c:	f04f 33ff 	mov.w	r3, #4294967295
 8011410:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011412:	69bb      	ldr	r3, [r7, #24]
	}
 8011414:	4618      	mov	r0, r3
 8011416:	3720      	adds	r7, #32
 8011418:	46bd      	mov	sp, r7
 801141a:	bd80      	pop	{r7, pc}

0801141c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b088      	sub	sp, #32
 8011420:	af00      	add	r7, sp, #0
 8011422:	60f8      	str	r0, [r7, #12]
 8011424:	60b9      	str	r1, [r7, #8]
 8011426:	607a      	str	r2, [r7, #4]
 8011428:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801142a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801142c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	009b      	lsls	r3, r3, #2
 8011432:	461a      	mov	r2, r3
 8011434:	21a5      	movs	r1, #165	@ 0xa5
 8011436:	f001 fd6b 	bl	8012f10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 801143a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801143c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011444:	3b01      	subs	r3, #1
 8011446:	009b      	lsls	r3, r3, #2
 8011448:	4413      	add	r3, r2
 801144a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 801144c:	69bb      	ldr	r3, [r7, #24]
 801144e:	f023 0307 	bic.w	r3, r3, #7
 8011452:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011454:	69bb      	ldr	r3, [r7, #24]
 8011456:	f003 0307 	and.w	r3, r3, #7
 801145a:	2b00      	cmp	r3, #0
 801145c:	d00b      	beq.n	8011476 <prvInitialiseNewTask+0x5a>
	__asm volatile
 801145e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011462:	f383 8811 	msr	BASEPRI, r3
 8011466:	f3bf 8f6f 	isb	sy
 801146a:	f3bf 8f4f 	dsb	sy
 801146e:	617b      	str	r3, [r7, #20]
}
 8011470:	bf00      	nop
 8011472:	bf00      	nop
 8011474:	e7fd      	b.n	8011472 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011476:	2300      	movs	r3, #0
 8011478:	61fb      	str	r3, [r7, #28]
 801147a:	e012      	b.n	80114a2 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801147c:	68ba      	ldr	r2, [r7, #8]
 801147e:	69fb      	ldr	r3, [r7, #28]
 8011480:	4413      	add	r3, r2
 8011482:	7819      	ldrb	r1, [r3, #0]
 8011484:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011486:	69fb      	ldr	r3, [r7, #28]
 8011488:	4413      	add	r3, r2
 801148a:	3334      	adds	r3, #52	@ 0x34
 801148c:	460a      	mov	r2, r1
 801148e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8011490:	68ba      	ldr	r2, [r7, #8]
 8011492:	69fb      	ldr	r3, [r7, #28]
 8011494:	4413      	add	r3, r2
 8011496:	781b      	ldrb	r3, [r3, #0]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d006      	beq.n	80114aa <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801149c:	69fb      	ldr	r3, [r7, #28]
 801149e:	3301      	adds	r3, #1
 80114a0:	61fb      	str	r3, [r7, #28]
 80114a2:	69fb      	ldr	r3, [r7, #28]
 80114a4:	2b0f      	cmp	r3, #15
 80114a6:	d9e9      	bls.n	801147c <prvInitialiseNewTask+0x60>
 80114a8:	e000      	b.n	80114ac <prvInitialiseNewTask+0x90>
		{
			break;
 80114aa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80114ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114ae:	2200      	movs	r2, #0
 80114b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80114b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114b6:	2b06      	cmp	r3, #6
 80114b8:	d901      	bls.n	80114be <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80114ba:	2306      	movs	r3, #6
 80114bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80114be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80114c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80114c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80114c8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80114ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114cc:	2200      	movs	r2, #0
 80114ce:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80114d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114d2:	3304      	adds	r3, #4
 80114d4:	4618      	mov	r0, r3
 80114d6:	f7ff f88f 	bl	80105f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80114da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114dc:	3318      	adds	r3, #24
 80114de:	4618      	mov	r0, r3
 80114e0:	f7ff f88a 	bl	80105f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80114e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80114e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114ec:	f1c3 0207 	rsb	r2, r3, #7
 80114f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80114f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80114f8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80114fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114fc:	2200      	movs	r2, #0
 80114fe:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011502:	2200      	movs	r2, #0
 8011504:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011508:	683a      	ldr	r2, [r7, #0]
 801150a:	68f9      	ldr	r1, [r7, #12]
 801150c:	69b8      	ldr	r0, [r7, #24]
 801150e:	f001 f861 	bl	80125d4 <pxPortInitialiseStack>
 8011512:	4602      	mov	r2, r0
 8011514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011516:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8011518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801151a:	2b00      	cmp	r3, #0
 801151c:	d002      	beq.n	8011524 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801151e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011520:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011522:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011524:	bf00      	nop
 8011526:	3720      	adds	r7, #32
 8011528:	46bd      	mov	sp, r7
 801152a:	bd80      	pop	{r7, pc}

0801152c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b082      	sub	sp, #8
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011534:	f001 f942 	bl	80127bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011538:	4b2a      	ldr	r3, [pc, #168]	@ (80115e4 <prvAddNewTaskToReadyList+0xb8>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	3301      	adds	r3, #1
 801153e:	4a29      	ldr	r2, [pc, #164]	@ (80115e4 <prvAddNewTaskToReadyList+0xb8>)
 8011540:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011542:	4b29      	ldr	r3, [pc, #164]	@ (80115e8 <prvAddNewTaskToReadyList+0xbc>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d109      	bne.n	801155e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801154a:	4a27      	ldr	r2, [pc, #156]	@ (80115e8 <prvAddNewTaskToReadyList+0xbc>)
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011550:	4b24      	ldr	r3, [pc, #144]	@ (80115e4 <prvAddNewTaskToReadyList+0xb8>)
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	2b01      	cmp	r3, #1
 8011556:	d110      	bne.n	801157a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011558:	f000 fcfa 	bl	8011f50 <prvInitialiseTaskLists>
 801155c:	e00d      	b.n	801157a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801155e:	4b23      	ldr	r3, [pc, #140]	@ (80115ec <prvAddNewTaskToReadyList+0xc0>)
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d109      	bne.n	801157a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011566:	4b20      	ldr	r3, [pc, #128]	@ (80115e8 <prvAddNewTaskToReadyList+0xbc>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011570:	429a      	cmp	r2, r3
 8011572:	d802      	bhi.n	801157a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011574:	4a1c      	ldr	r2, [pc, #112]	@ (80115e8 <prvAddNewTaskToReadyList+0xbc>)
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801157a:	4b1d      	ldr	r3, [pc, #116]	@ (80115f0 <prvAddNewTaskToReadyList+0xc4>)
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	3301      	adds	r3, #1
 8011580:	4a1b      	ldr	r2, [pc, #108]	@ (80115f0 <prvAddNewTaskToReadyList+0xc4>)
 8011582:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011588:	2201      	movs	r2, #1
 801158a:	409a      	lsls	r2, r3
 801158c:	4b19      	ldr	r3, [pc, #100]	@ (80115f4 <prvAddNewTaskToReadyList+0xc8>)
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	4313      	orrs	r3, r2
 8011592:	4a18      	ldr	r2, [pc, #96]	@ (80115f4 <prvAddNewTaskToReadyList+0xc8>)
 8011594:	6013      	str	r3, [r2, #0]
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801159a:	4613      	mov	r3, r2
 801159c:	009b      	lsls	r3, r3, #2
 801159e:	4413      	add	r3, r2
 80115a0:	009b      	lsls	r3, r3, #2
 80115a2:	4a15      	ldr	r2, [pc, #84]	@ (80115f8 <prvAddNewTaskToReadyList+0xcc>)
 80115a4:	441a      	add	r2, r3
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	3304      	adds	r3, #4
 80115aa:	4619      	mov	r1, r3
 80115ac:	4610      	mov	r0, r2
 80115ae:	f7ff f82f 	bl	8010610 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80115b2:	f001 f933 	bl	801281c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80115b6:	4b0d      	ldr	r3, [pc, #52]	@ (80115ec <prvAddNewTaskToReadyList+0xc0>)
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d00e      	beq.n	80115dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80115be:	4b0a      	ldr	r3, [pc, #40]	@ (80115e8 <prvAddNewTaskToReadyList+0xbc>)
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115c8:	429a      	cmp	r2, r3
 80115ca:	d207      	bcs.n	80115dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80115cc:	4b0b      	ldr	r3, [pc, #44]	@ (80115fc <prvAddNewTaskToReadyList+0xd0>)
 80115ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80115d2:	601a      	str	r2, [r3, #0]
 80115d4:	f3bf 8f4f 	dsb	sy
 80115d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80115dc:	bf00      	nop
 80115de:	3708      	adds	r7, #8
 80115e0:	46bd      	mov	sp, r7
 80115e2:	bd80      	pop	{r7, pc}
 80115e4:	200013e4 	.word	0x200013e4
 80115e8:	200012e4 	.word	0x200012e4
 80115ec:	200013f0 	.word	0x200013f0
 80115f0:	20001400 	.word	0x20001400
 80115f4:	200013ec 	.word	0x200013ec
 80115f8:	200012e8 	.word	0x200012e8
 80115fc:	e000ed04 	.word	0xe000ed04

08011600 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8011600:	b580      	push	{r7, lr}
 8011602:	b08a      	sub	sp, #40	@ 0x28
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
 8011608:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801160a:	2300      	movs	r3, #0
 801160c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d10b      	bne.n	801162c <vTaskDelayUntil+0x2c>
	__asm volatile
 8011614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011618:	f383 8811 	msr	BASEPRI, r3
 801161c:	f3bf 8f6f 	isb	sy
 8011620:	f3bf 8f4f 	dsb	sy
 8011624:	617b      	str	r3, [r7, #20]
}
 8011626:	bf00      	nop
 8011628:	bf00      	nop
 801162a:	e7fd      	b.n	8011628 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 801162c:	683b      	ldr	r3, [r7, #0]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d10b      	bne.n	801164a <vTaskDelayUntil+0x4a>
	__asm volatile
 8011632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011636:	f383 8811 	msr	BASEPRI, r3
 801163a:	f3bf 8f6f 	isb	sy
 801163e:	f3bf 8f4f 	dsb	sy
 8011642:	613b      	str	r3, [r7, #16]
}
 8011644:	bf00      	nop
 8011646:	bf00      	nop
 8011648:	e7fd      	b.n	8011646 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 801164a:	4b2a      	ldr	r3, [pc, #168]	@ (80116f4 <vTaskDelayUntil+0xf4>)
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d00b      	beq.n	801166a <vTaskDelayUntil+0x6a>
	__asm volatile
 8011652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011656:	f383 8811 	msr	BASEPRI, r3
 801165a:	f3bf 8f6f 	isb	sy
 801165e:	f3bf 8f4f 	dsb	sy
 8011662:	60fb      	str	r3, [r7, #12]
}
 8011664:	bf00      	nop
 8011666:	bf00      	nop
 8011668:	e7fd      	b.n	8011666 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 801166a:	f000 f975 	bl	8011958 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801166e:	4b22      	ldr	r3, [pc, #136]	@ (80116f8 <vTaskDelayUntil+0xf8>)
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	683a      	ldr	r2, [r7, #0]
 801167a:	4413      	add	r3, r2
 801167c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	6a3a      	ldr	r2, [r7, #32]
 8011684:	429a      	cmp	r2, r3
 8011686:	d20b      	bcs.n	80116a0 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	69fa      	ldr	r2, [r7, #28]
 801168e:	429a      	cmp	r2, r3
 8011690:	d211      	bcs.n	80116b6 <vTaskDelayUntil+0xb6>
 8011692:	69fa      	ldr	r2, [r7, #28]
 8011694:	6a3b      	ldr	r3, [r7, #32]
 8011696:	429a      	cmp	r2, r3
 8011698:	d90d      	bls.n	80116b6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 801169a:	2301      	movs	r3, #1
 801169c:	627b      	str	r3, [r7, #36]	@ 0x24
 801169e:	e00a      	b.n	80116b6 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	69fa      	ldr	r2, [r7, #28]
 80116a6:	429a      	cmp	r2, r3
 80116a8:	d303      	bcc.n	80116b2 <vTaskDelayUntil+0xb2>
 80116aa:	69fa      	ldr	r2, [r7, #28]
 80116ac:	6a3b      	ldr	r3, [r7, #32]
 80116ae:	429a      	cmp	r2, r3
 80116b0:	d901      	bls.n	80116b6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80116b2:	2301      	movs	r3, #1
 80116b4:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	69fa      	ldr	r2, [r7, #28]
 80116ba:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80116bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d006      	beq.n	80116d0 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80116c2:	69fa      	ldr	r2, [r7, #28]
 80116c4:	6a3b      	ldr	r3, [r7, #32]
 80116c6:	1ad3      	subs	r3, r2, r3
 80116c8:	2100      	movs	r1, #0
 80116ca:	4618      	mov	r0, r3
 80116cc:	f000 ff1c 	bl	8012508 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80116d0:	f000 f950 	bl	8011974 <xTaskResumeAll>
 80116d4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80116d6:	69bb      	ldr	r3, [r7, #24]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d107      	bne.n	80116ec <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80116dc:	4b07      	ldr	r3, [pc, #28]	@ (80116fc <vTaskDelayUntil+0xfc>)
 80116de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80116e2:	601a      	str	r2, [r3, #0]
 80116e4:	f3bf 8f4f 	dsb	sy
 80116e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80116ec:	bf00      	nop
 80116ee:	3728      	adds	r7, #40	@ 0x28
 80116f0:	46bd      	mov	sp, r7
 80116f2:	bd80      	pop	{r7, pc}
 80116f4:	2000140c 	.word	0x2000140c
 80116f8:	200013e8 	.word	0x200013e8
 80116fc:	e000ed04 	.word	0xe000ed04

08011700 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011700:	b580      	push	{r7, lr}
 8011702:	b084      	sub	sp, #16
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011708:	2300      	movs	r3, #0
 801170a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d018      	beq.n	8011744 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011712:	4b14      	ldr	r3, [pc, #80]	@ (8011764 <vTaskDelay+0x64>)
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d00b      	beq.n	8011732 <vTaskDelay+0x32>
	__asm volatile
 801171a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801171e:	f383 8811 	msr	BASEPRI, r3
 8011722:	f3bf 8f6f 	isb	sy
 8011726:	f3bf 8f4f 	dsb	sy
 801172a:	60bb      	str	r3, [r7, #8]
}
 801172c:	bf00      	nop
 801172e:	bf00      	nop
 8011730:	e7fd      	b.n	801172e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011732:	f000 f911 	bl	8011958 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011736:	2100      	movs	r1, #0
 8011738:	6878      	ldr	r0, [r7, #4]
 801173a:	f000 fee5 	bl	8012508 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801173e:	f000 f919 	bl	8011974 <xTaskResumeAll>
 8011742:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d107      	bne.n	801175a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801174a:	4b07      	ldr	r3, [pc, #28]	@ (8011768 <vTaskDelay+0x68>)
 801174c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011750:	601a      	str	r2, [r3, #0]
 8011752:	f3bf 8f4f 	dsb	sy
 8011756:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801175a:	bf00      	nop
 801175c:	3710      	adds	r7, #16
 801175e:	46bd      	mov	sp, r7
 8011760:	bd80      	pop	{r7, pc}
 8011762:	bf00      	nop
 8011764:	2000140c 	.word	0x2000140c
 8011768:	e000ed04 	.word	0xe000ed04

0801176c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801176c:	b580      	push	{r7, lr}
 801176e:	b084      	sub	sp, #16
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8011774:	f001 f822 	bl	80127bc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d102      	bne.n	8011784 <vTaskSuspend+0x18>
 801177e:	4b3d      	ldr	r3, [pc, #244]	@ (8011874 <vTaskSuspend+0x108>)
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	e000      	b.n	8011786 <vTaskSuspend+0x1a>
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	3304      	adds	r3, #4
 801178c:	4618      	mov	r0, r3
 801178e:	f7fe ff9a 	bl	80106c6 <uxListRemove>
 8011792:	4603      	mov	r3, r0
 8011794:	2b00      	cmp	r3, #0
 8011796:	d115      	bne.n	80117c4 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801179c:	4936      	ldr	r1, [pc, #216]	@ (8011878 <vTaskSuspend+0x10c>)
 801179e:	4613      	mov	r3, r2
 80117a0:	009b      	lsls	r3, r3, #2
 80117a2:	4413      	add	r3, r2
 80117a4:	009b      	lsls	r3, r3, #2
 80117a6:	440b      	add	r3, r1
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d10a      	bne.n	80117c4 <vTaskSuspend+0x58>
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117b2:	2201      	movs	r2, #1
 80117b4:	fa02 f303 	lsl.w	r3, r2, r3
 80117b8:	43da      	mvns	r2, r3
 80117ba:	4b30      	ldr	r3, [pc, #192]	@ (801187c <vTaskSuspend+0x110>)
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	4013      	ands	r3, r2
 80117c0:	4a2e      	ldr	r2, [pc, #184]	@ (801187c <vTaskSuspend+0x110>)
 80117c2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d004      	beq.n	80117d6 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	3318      	adds	r3, #24
 80117d0:	4618      	mov	r0, r3
 80117d2:	f7fe ff78 	bl	80106c6 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	3304      	adds	r3, #4
 80117da:	4619      	mov	r1, r3
 80117dc:	4828      	ldr	r0, [pc, #160]	@ (8011880 <vTaskSuspend+0x114>)
 80117de:	f7fe ff17 	bl	8010610 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80117e8:	b2db      	uxtb	r3, r3
 80117ea:	2b01      	cmp	r3, #1
 80117ec:	d103      	bne.n	80117f6 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	2200      	movs	r2, #0
 80117f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80117f6:	f001 f811 	bl	801281c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80117fa:	4b22      	ldr	r3, [pc, #136]	@ (8011884 <vTaskSuspend+0x118>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d005      	beq.n	801180e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8011802:	f000 ffdb 	bl	80127bc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8011806:	f000 fc79 	bl	80120fc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801180a:	f001 f807 	bl	801281c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801180e:	4b19      	ldr	r3, [pc, #100]	@ (8011874 <vTaskSuspend+0x108>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	68fa      	ldr	r2, [r7, #12]
 8011814:	429a      	cmp	r2, r3
 8011816:	d128      	bne.n	801186a <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8011818:	4b1a      	ldr	r3, [pc, #104]	@ (8011884 <vTaskSuspend+0x118>)
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d018      	beq.n	8011852 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8011820:	4b19      	ldr	r3, [pc, #100]	@ (8011888 <vTaskSuspend+0x11c>)
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d00b      	beq.n	8011840 <vTaskSuspend+0xd4>
	__asm volatile
 8011828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801182c:	f383 8811 	msr	BASEPRI, r3
 8011830:	f3bf 8f6f 	isb	sy
 8011834:	f3bf 8f4f 	dsb	sy
 8011838:	60bb      	str	r3, [r7, #8]
}
 801183a:	bf00      	nop
 801183c:	bf00      	nop
 801183e:	e7fd      	b.n	801183c <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8011840:	4b12      	ldr	r3, [pc, #72]	@ (801188c <vTaskSuspend+0x120>)
 8011842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011846:	601a      	str	r2, [r3, #0]
 8011848:	f3bf 8f4f 	dsb	sy
 801184c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011850:	e00b      	b.n	801186a <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8011852:	4b0b      	ldr	r3, [pc, #44]	@ (8011880 <vTaskSuspend+0x114>)
 8011854:	681a      	ldr	r2, [r3, #0]
 8011856:	4b0e      	ldr	r3, [pc, #56]	@ (8011890 <vTaskSuspend+0x124>)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	429a      	cmp	r2, r3
 801185c:	d103      	bne.n	8011866 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 801185e:	4b05      	ldr	r3, [pc, #20]	@ (8011874 <vTaskSuspend+0x108>)
 8011860:	2200      	movs	r2, #0
 8011862:	601a      	str	r2, [r3, #0]
	}
 8011864:	e001      	b.n	801186a <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8011866:	f000 f9ef 	bl	8011c48 <vTaskSwitchContext>
	}
 801186a:	bf00      	nop
 801186c:	3710      	adds	r7, #16
 801186e:	46bd      	mov	sp, r7
 8011870:	bd80      	pop	{r7, pc}
 8011872:	bf00      	nop
 8011874:	200012e4 	.word	0x200012e4
 8011878:	200012e8 	.word	0x200012e8
 801187c:	200013ec 	.word	0x200013ec
 8011880:	200013d0 	.word	0x200013d0
 8011884:	200013f0 	.word	0x200013f0
 8011888:	2000140c 	.word	0x2000140c
 801188c:	e000ed04 	.word	0xe000ed04
 8011890:	200013e4 	.word	0x200013e4

08011894 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b08a      	sub	sp, #40	@ 0x28
 8011898:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801189a:	2300      	movs	r3, #0
 801189c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801189e:	2300      	movs	r3, #0
 80118a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80118a2:	463a      	mov	r2, r7
 80118a4:	1d39      	adds	r1, r7, #4
 80118a6:	f107 0308 	add.w	r3, r7, #8
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7f2 f992 	bl	8003bd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80118b0:	6839      	ldr	r1, [r7, #0]
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	68ba      	ldr	r2, [r7, #8]
 80118b6:	9202      	str	r2, [sp, #8]
 80118b8:	9301      	str	r3, [sp, #4]
 80118ba:	2300      	movs	r3, #0
 80118bc:	9300      	str	r3, [sp, #0]
 80118be:	2300      	movs	r3, #0
 80118c0:	460a      	mov	r2, r1
 80118c2:	491f      	ldr	r1, [pc, #124]	@ (8011940 <vTaskStartScheduler+0xac>)
 80118c4:	481f      	ldr	r0, [pc, #124]	@ (8011944 <vTaskStartScheduler+0xb0>)
 80118c6:	f7ff fd05 	bl	80112d4 <xTaskCreateStatic>
 80118ca:	4603      	mov	r3, r0
 80118cc:	4a1e      	ldr	r2, [pc, #120]	@ (8011948 <vTaskStartScheduler+0xb4>)
 80118ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80118d0:	4b1d      	ldr	r3, [pc, #116]	@ (8011948 <vTaskStartScheduler+0xb4>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d002      	beq.n	80118de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80118d8:	2301      	movs	r3, #1
 80118da:	617b      	str	r3, [r7, #20]
 80118dc:	e001      	b.n	80118e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80118de:	2300      	movs	r3, #0
 80118e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	2b01      	cmp	r3, #1
 80118e6:	d116      	bne.n	8011916 <vTaskStartScheduler+0x82>
	__asm volatile
 80118e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118ec:	f383 8811 	msr	BASEPRI, r3
 80118f0:	f3bf 8f6f 	isb	sy
 80118f4:	f3bf 8f4f 	dsb	sy
 80118f8:	613b      	str	r3, [r7, #16]
}
 80118fa:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80118fc:	4b13      	ldr	r3, [pc, #76]	@ (801194c <vTaskStartScheduler+0xb8>)
 80118fe:	f04f 32ff 	mov.w	r2, #4294967295
 8011902:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011904:	4b12      	ldr	r3, [pc, #72]	@ (8011950 <vTaskStartScheduler+0xbc>)
 8011906:	2201      	movs	r2, #1
 8011908:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 801190a:	4b12      	ldr	r3, [pc, #72]	@ (8011954 <vTaskStartScheduler+0xc0>)
 801190c:	2200      	movs	r2, #0
 801190e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011910:	f000 fee2 	bl	80126d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011914:	e00f      	b.n	8011936 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011916:	697b      	ldr	r3, [r7, #20]
 8011918:	f1b3 3fff 	cmp.w	r3, #4294967295
 801191c:	d10b      	bne.n	8011936 <vTaskStartScheduler+0xa2>
	__asm volatile
 801191e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011922:	f383 8811 	msr	BASEPRI, r3
 8011926:	f3bf 8f6f 	isb	sy
 801192a:	f3bf 8f4f 	dsb	sy
 801192e:	60fb      	str	r3, [r7, #12]
}
 8011930:	bf00      	nop
 8011932:	bf00      	nop
 8011934:	e7fd      	b.n	8011932 <vTaskStartScheduler+0x9e>
}
 8011936:	bf00      	nop
 8011938:	3718      	adds	r7, #24
 801193a:	46bd      	mov	sp, r7
 801193c:	bd80      	pop	{r7, pc}
 801193e:	bf00      	nop
 8011940:	08013400 	.word	0x08013400
 8011944:	08011f21 	.word	0x08011f21
 8011948:	20001408 	.word	0x20001408
 801194c:	20001404 	.word	0x20001404
 8011950:	200013f0 	.word	0x200013f0
 8011954:	200013e8 	.word	0x200013e8

08011958 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011958:	b480      	push	{r7}
 801195a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801195c:	4b04      	ldr	r3, [pc, #16]	@ (8011970 <vTaskSuspendAll+0x18>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	3301      	adds	r3, #1
 8011962:	4a03      	ldr	r2, [pc, #12]	@ (8011970 <vTaskSuspendAll+0x18>)
 8011964:	6013      	str	r3, [r2, #0]
}
 8011966:	bf00      	nop
 8011968:	46bd      	mov	sp, r7
 801196a:	bc80      	pop	{r7}
 801196c:	4770      	bx	lr
 801196e:	bf00      	nop
 8011970:	2000140c 	.word	0x2000140c

08011974 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b084      	sub	sp, #16
 8011978:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801197a:	2300      	movs	r3, #0
 801197c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801197e:	2300      	movs	r3, #0
 8011980:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011982:	4b42      	ldr	r3, [pc, #264]	@ (8011a8c <xTaskResumeAll+0x118>)
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d10b      	bne.n	80119a2 <xTaskResumeAll+0x2e>
	__asm volatile
 801198a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801198e:	f383 8811 	msr	BASEPRI, r3
 8011992:	f3bf 8f6f 	isb	sy
 8011996:	f3bf 8f4f 	dsb	sy
 801199a:	603b      	str	r3, [r7, #0]
}
 801199c:	bf00      	nop
 801199e:	bf00      	nop
 80119a0:	e7fd      	b.n	801199e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80119a2:	f000 ff0b 	bl	80127bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80119a6:	4b39      	ldr	r3, [pc, #228]	@ (8011a8c <xTaskResumeAll+0x118>)
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	3b01      	subs	r3, #1
 80119ac:	4a37      	ldr	r2, [pc, #220]	@ (8011a8c <xTaskResumeAll+0x118>)
 80119ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80119b0:	4b36      	ldr	r3, [pc, #216]	@ (8011a8c <xTaskResumeAll+0x118>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d161      	bne.n	8011a7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80119b8:	4b35      	ldr	r3, [pc, #212]	@ (8011a90 <xTaskResumeAll+0x11c>)
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d05d      	beq.n	8011a7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80119c0:	e02e      	b.n	8011a20 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80119c2:	4b34      	ldr	r3, [pc, #208]	@ (8011a94 <xTaskResumeAll+0x120>)
 80119c4:	68db      	ldr	r3, [r3, #12]
 80119c6:	68db      	ldr	r3, [r3, #12]
 80119c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	3318      	adds	r3, #24
 80119ce:	4618      	mov	r0, r3
 80119d0:	f7fe fe79 	bl	80106c6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	3304      	adds	r3, #4
 80119d8:	4618      	mov	r0, r3
 80119da:	f7fe fe74 	bl	80106c6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119e2:	2201      	movs	r2, #1
 80119e4:	409a      	lsls	r2, r3
 80119e6:	4b2c      	ldr	r3, [pc, #176]	@ (8011a98 <xTaskResumeAll+0x124>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	4313      	orrs	r3, r2
 80119ec:	4a2a      	ldr	r2, [pc, #168]	@ (8011a98 <xTaskResumeAll+0x124>)
 80119ee:	6013      	str	r3, [r2, #0]
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80119f4:	4613      	mov	r3, r2
 80119f6:	009b      	lsls	r3, r3, #2
 80119f8:	4413      	add	r3, r2
 80119fa:	009b      	lsls	r3, r3, #2
 80119fc:	4a27      	ldr	r2, [pc, #156]	@ (8011a9c <xTaskResumeAll+0x128>)
 80119fe:	441a      	add	r2, r3
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	3304      	adds	r3, #4
 8011a04:	4619      	mov	r1, r3
 8011a06:	4610      	mov	r0, r2
 8011a08:	f7fe fe02 	bl	8010610 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a10:	4b23      	ldr	r3, [pc, #140]	@ (8011aa0 <xTaskResumeAll+0x12c>)
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a16:	429a      	cmp	r2, r3
 8011a18:	d302      	bcc.n	8011a20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011a1a:	4b22      	ldr	r3, [pc, #136]	@ (8011aa4 <xTaskResumeAll+0x130>)
 8011a1c:	2201      	movs	r2, #1
 8011a1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011a20:	4b1c      	ldr	r3, [pc, #112]	@ (8011a94 <xTaskResumeAll+0x120>)
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d1cc      	bne.n	80119c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d001      	beq.n	8011a32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011a2e:	f000 fb65 	bl	80120fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011a32:	4b1d      	ldr	r3, [pc, #116]	@ (8011aa8 <xTaskResumeAll+0x134>)
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d010      	beq.n	8011a60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011a3e:	f000 f845 	bl	8011acc <xTaskIncrementTick>
 8011a42:	4603      	mov	r3, r0
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d002      	beq.n	8011a4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011a48:	4b16      	ldr	r3, [pc, #88]	@ (8011aa4 <xTaskResumeAll+0x130>)
 8011a4a:	2201      	movs	r2, #1
 8011a4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	3b01      	subs	r3, #1
 8011a52:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d1f1      	bne.n	8011a3e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8011a5a:	4b13      	ldr	r3, [pc, #76]	@ (8011aa8 <xTaskResumeAll+0x134>)
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011a60:	4b10      	ldr	r3, [pc, #64]	@ (8011aa4 <xTaskResumeAll+0x130>)
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d009      	beq.n	8011a7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011a68:	2301      	movs	r3, #1
 8011a6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8011aac <xTaskResumeAll+0x138>)
 8011a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a72:	601a      	str	r2, [r3, #0]
 8011a74:	f3bf 8f4f 	dsb	sy
 8011a78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011a7c:	f000 fece 	bl	801281c <vPortExitCritical>

	return xAlreadyYielded;
 8011a80:	68bb      	ldr	r3, [r7, #8]
}
 8011a82:	4618      	mov	r0, r3
 8011a84:	3710      	adds	r7, #16
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bd80      	pop	{r7, pc}
 8011a8a:	bf00      	nop
 8011a8c:	2000140c 	.word	0x2000140c
 8011a90:	200013e4 	.word	0x200013e4
 8011a94:	200013a4 	.word	0x200013a4
 8011a98:	200013ec 	.word	0x200013ec
 8011a9c:	200012e8 	.word	0x200012e8
 8011aa0:	200012e4 	.word	0x200012e4
 8011aa4:	200013f8 	.word	0x200013f8
 8011aa8:	200013f4 	.word	0x200013f4
 8011aac:	e000ed04 	.word	0xe000ed04

08011ab0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011ab0:	b480      	push	{r7}
 8011ab2:	b083      	sub	sp, #12
 8011ab4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011ab6:	4b04      	ldr	r3, [pc, #16]	@ (8011ac8 <xTaskGetTickCount+0x18>)
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011abc:	687b      	ldr	r3, [r7, #4]
}
 8011abe:	4618      	mov	r0, r3
 8011ac0:	370c      	adds	r7, #12
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	bc80      	pop	{r7}
 8011ac6:	4770      	bx	lr
 8011ac8:	200013e8 	.word	0x200013e8

08011acc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b086      	sub	sp, #24
 8011ad0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ad6:	4b51      	ldr	r3, [pc, #324]	@ (8011c1c <xTaskIncrementTick+0x150>)
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	f040 808e 	bne.w	8011bfc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011ae0:	4b4f      	ldr	r3, [pc, #316]	@ (8011c20 <xTaskIncrementTick+0x154>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	3301      	adds	r3, #1
 8011ae6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011ae8:	4a4d      	ldr	r2, [pc, #308]	@ (8011c20 <xTaskIncrementTick+0x154>)
 8011aea:	693b      	ldr	r3, [r7, #16]
 8011aec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011aee:	693b      	ldr	r3, [r7, #16]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d121      	bne.n	8011b38 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8011af4:	4b4b      	ldr	r3, [pc, #300]	@ (8011c24 <xTaskIncrementTick+0x158>)
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d00b      	beq.n	8011b16 <xTaskIncrementTick+0x4a>
	__asm volatile
 8011afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b02:	f383 8811 	msr	BASEPRI, r3
 8011b06:	f3bf 8f6f 	isb	sy
 8011b0a:	f3bf 8f4f 	dsb	sy
 8011b0e:	603b      	str	r3, [r7, #0]
}
 8011b10:	bf00      	nop
 8011b12:	bf00      	nop
 8011b14:	e7fd      	b.n	8011b12 <xTaskIncrementTick+0x46>
 8011b16:	4b43      	ldr	r3, [pc, #268]	@ (8011c24 <xTaskIncrementTick+0x158>)
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	60fb      	str	r3, [r7, #12]
 8011b1c:	4b42      	ldr	r3, [pc, #264]	@ (8011c28 <xTaskIncrementTick+0x15c>)
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	4a40      	ldr	r2, [pc, #256]	@ (8011c24 <xTaskIncrementTick+0x158>)
 8011b22:	6013      	str	r3, [r2, #0]
 8011b24:	4a40      	ldr	r2, [pc, #256]	@ (8011c28 <xTaskIncrementTick+0x15c>)
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	6013      	str	r3, [r2, #0]
 8011b2a:	4b40      	ldr	r3, [pc, #256]	@ (8011c2c <xTaskIncrementTick+0x160>)
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	3301      	adds	r3, #1
 8011b30:	4a3e      	ldr	r2, [pc, #248]	@ (8011c2c <xTaskIncrementTick+0x160>)
 8011b32:	6013      	str	r3, [r2, #0]
 8011b34:	f000 fae2 	bl	80120fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011b38:	4b3d      	ldr	r3, [pc, #244]	@ (8011c30 <xTaskIncrementTick+0x164>)
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	693a      	ldr	r2, [r7, #16]
 8011b3e:	429a      	cmp	r2, r3
 8011b40:	d34d      	bcc.n	8011bde <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011b42:	4b38      	ldr	r3, [pc, #224]	@ (8011c24 <xTaskIncrementTick+0x158>)
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d101      	bne.n	8011b50 <xTaskIncrementTick+0x84>
 8011b4c:	2301      	movs	r3, #1
 8011b4e:	e000      	b.n	8011b52 <xTaskIncrementTick+0x86>
 8011b50:	2300      	movs	r3, #0
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d004      	beq.n	8011b60 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b56:	4b36      	ldr	r3, [pc, #216]	@ (8011c30 <xTaskIncrementTick+0x164>)
 8011b58:	f04f 32ff 	mov.w	r2, #4294967295
 8011b5c:	601a      	str	r2, [r3, #0]
					break;
 8011b5e:	e03e      	b.n	8011bde <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011b60:	4b30      	ldr	r3, [pc, #192]	@ (8011c24 <xTaskIncrementTick+0x158>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	68db      	ldr	r3, [r3, #12]
 8011b66:	68db      	ldr	r3, [r3, #12]
 8011b68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011b6a:	68bb      	ldr	r3, [r7, #8]
 8011b6c:	685b      	ldr	r3, [r3, #4]
 8011b6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011b70:	693a      	ldr	r2, [r7, #16]
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	429a      	cmp	r2, r3
 8011b76:	d203      	bcs.n	8011b80 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011b78:	4a2d      	ldr	r2, [pc, #180]	@ (8011c30 <xTaskIncrementTick+0x164>)
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	6013      	str	r3, [r2, #0]
						break;
 8011b7e:	e02e      	b.n	8011bde <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011b80:	68bb      	ldr	r3, [r7, #8]
 8011b82:	3304      	adds	r3, #4
 8011b84:	4618      	mov	r0, r3
 8011b86:	f7fe fd9e 	bl	80106c6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011b8a:	68bb      	ldr	r3, [r7, #8]
 8011b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d004      	beq.n	8011b9c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011b92:	68bb      	ldr	r3, [r7, #8]
 8011b94:	3318      	adds	r3, #24
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7fe fd95 	bl	80106c6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011b9c:	68bb      	ldr	r3, [r7, #8]
 8011b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ba0:	2201      	movs	r2, #1
 8011ba2:	409a      	lsls	r2, r3
 8011ba4:	4b23      	ldr	r3, [pc, #140]	@ (8011c34 <xTaskIncrementTick+0x168>)
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	4313      	orrs	r3, r2
 8011baa:	4a22      	ldr	r2, [pc, #136]	@ (8011c34 <xTaskIncrementTick+0x168>)
 8011bac:	6013      	str	r3, [r2, #0]
 8011bae:	68bb      	ldr	r3, [r7, #8]
 8011bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011bb2:	4613      	mov	r3, r2
 8011bb4:	009b      	lsls	r3, r3, #2
 8011bb6:	4413      	add	r3, r2
 8011bb8:	009b      	lsls	r3, r3, #2
 8011bba:	4a1f      	ldr	r2, [pc, #124]	@ (8011c38 <xTaskIncrementTick+0x16c>)
 8011bbc:	441a      	add	r2, r3
 8011bbe:	68bb      	ldr	r3, [r7, #8]
 8011bc0:	3304      	adds	r3, #4
 8011bc2:	4619      	mov	r1, r3
 8011bc4:	4610      	mov	r0, r2
 8011bc6:	f7fe fd23 	bl	8010610 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011bca:	68bb      	ldr	r3, [r7, #8]
 8011bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011bce:	4b1b      	ldr	r3, [pc, #108]	@ (8011c3c <xTaskIncrementTick+0x170>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bd4:	429a      	cmp	r2, r3
 8011bd6:	d3b4      	bcc.n	8011b42 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8011bd8:	2301      	movs	r3, #1
 8011bda:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011bdc:	e7b1      	b.n	8011b42 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011bde:	4b17      	ldr	r3, [pc, #92]	@ (8011c3c <xTaskIncrementTick+0x170>)
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011be4:	4914      	ldr	r1, [pc, #80]	@ (8011c38 <xTaskIncrementTick+0x16c>)
 8011be6:	4613      	mov	r3, r2
 8011be8:	009b      	lsls	r3, r3, #2
 8011bea:	4413      	add	r3, r2
 8011bec:	009b      	lsls	r3, r3, #2
 8011bee:	440b      	add	r3, r1
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	2b01      	cmp	r3, #1
 8011bf4:	d907      	bls.n	8011c06 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8011bf6:	2301      	movs	r3, #1
 8011bf8:	617b      	str	r3, [r7, #20]
 8011bfa:	e004      	b.n	8011c06 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011bfc:	4b10      	ldr	r3, [pc, #64]	@ (8011c40 <xTaskIncrementTick+0x174>)
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	3301      	adds	r3, #1
 8011c02:	4a0f      	ldr	r2, [pc, #60]	@ (8011c40 <xTaskIncrementTick+0x174>)
 8011c04:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011c06:	4b0f      	ldr	r3, [pc, #60]	@ (8011c44 <xTaskIncrementTick+0x178>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d001      	beq.n	8011c12 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8011c0e:	2301      	movs	r3, #1
 8011c10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011c12:	697b      	ldr	r3, [r7, #20]
}
 8011c14:	4618      	mov	r0, r3
 8011c16:	3718      	adds	r7, #24
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd80      	pop	{r7, pc}
 8011c1c:	2000140c 	.word	0x2000140c
 8011c20:	200013e8 	.word	0x200013e8
 8011c24:	2000139c 	.word	0x2000139c
 8011c28:	200013a0 	.word	0x200013a0
 8011c2c:	200013fc 	.word	0x200013fc
 8011c30:	20001404 	.word	0x20001404
 8011c34:	200013ec 	.word	0x200013ec
 8011c38:	200012e8 	.word	0x200012e8
 8011c3c:	200012e4 	.word	0x200012e4
 8011c40:	200013f4 	.word	0x200013f4
 8011c44:	200013f8 	.word	0x200013f8

08011c48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011c48:	b480      	push	{r7}
 8011c4a:	b087      	sub	sp, #28
 8011c4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011c4e:	4b27      	ldr	r3, [pc, #156]	@ (8011cec <vTaskSwitchContext+0xa4>)
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d003      	beq.n	8011c5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011c56:	4b26      	ldr	r3, [pc, #152]	@ (8011cf0 <vTaskSwitchContext+0xa8>)
 8011c58:	2201      	movs	r2, #1
 8011c5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011c5c:	e040      	b.n	8011ce0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8011c5e:	4b24      	ldr	r3, [pc, #144]	@ (8011cf0 <vTaskSwitchContext+0xa8>)
 8011c60:	2200      	movs	r2, #0
 8011c62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8011c64:	4b23      	ldr	r3, [pc, #140]	@ (8011cf4 <vTaskSwitchContext+0xac>)
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	fab3 f383 	clz	r3, r3
 8011c70:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011c72:	7afb      	ldrb	r3, [r7, #11]
 8011c74:	f1c3 031f 	rsb	r3, r3, #31
 8011c78:	617b      	str	r3, [r7, #20]
 8011c7a:	491f      	ldr	r1, [pc, #124]	@ (8011cf8 <vTaskSwitchContext+0xb0>)
 8011c7c:	697a      	ldr	r2, [r7, #20]
 8011c7e:	4613      	mov	r3, r2
 8011c80:	009b      	lsls	r3, r3, #2
 8011c82:	4413      	add	r3, r2
 8011c84:	009b      	lsls	r3, r3, #2
 8011c86:	440b      	add	r3, r1
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d10b      	bne.n	8011ca6 <vTaskSwitchContext+0x5e>
	__asm volatile
 8011c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c92:	f383 8811 	msr	BASEPRI, r3
 8011c96:	f3bf 8f6f 	isb	sy
 8011c9a:	f3bf 8f4f 	dsb	sy
 8011c9e:	607b      	str	r3, [r7, #4]
}
 8011ca0:	bf00      	nop
 8011ca2:	bf00      	nop
 8011ca4:	e7fd      	b.n	8011ca2 <vTaskSwitchContext+0x5a>
 8011ca6:	697a      	ldr	r2, [r7, #20]
 8011ca8:	4613      	mov	r3, r2
 8011caa:	009b      	lsls	r3, r3, #2
 8011cac:	4413      	add	r3, r2
 8011cae:	009b      	lsls	r3, r3, #2
 8011cb0:	4a11      	ldr	r2, [pc, #68]	@ (8011cf8 <vTaskSwitchContext+0xb0>)
 8011cb2:	4413      	add	r3, r2
 8011cb4:	613b      	str	r3, [r7, #16]
 8011cb6:	693b      	ldr	r3, [r7, #16]
 8011cb8:	685b      	ldr	r3, [r3, #4]
 8011cba:	685a      	ldr	r2, [r3, #4]
 8011cbc:	693b      	ldr	r3, [r7, #16]
 8011cbe:	605a      	str	r2, [r3, #4]
 8011cc0:	693b      	ldr	r3, [r7, #16]
 8011cc2:	685a      	ldr	r2, [r3, #4]
 8011cc4:	693b      	ldr	r3, [r7, #16]
 8011cc6:	3308      	adds	r3, #8
 8011cc8:	429a      	cmp	r2, r3
 8011cca:	d104      	bne.n	8011cd6 <vTaskSwitchContext+0x8e>
 8011ccc:	693b      	ldr	r3, [r7, #16]
 8011cce:	685b      	ldr	r3, [r3, #4]
 8011cd0:	685a      	ldr	r2, [r3, #4]
 8011cd2:	693b      	ldr	r3, [r7, #16]
 8011cd4:	605a      	str	r2, [r3, #4]
 8011cd6:	693b      	ldr	r3, [r7, #16]
 8011cd8:	685b      	ldr	r3, [r3, #4]
 8011cda:	68db      	ldr	r3, [r3, #12]
 8011cdc:	4a07      	ldr	r2, [pc, #28]	@ (8011cfc <vTaskSwitchContext+0xb4>)
 8011cde:	6013      	str	r3, [r2, #0]
}
 8011ce0:	bf00      	nop
 8011ce2:	371c      	adds	r7, #28
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bc80      	pop	{r7}
 8011ce8:	4770      	bx	lr
 8011cea:	bf00      	nop
 8011cec:	2000140c 	.word	0x2000140c
 8011cf0:	200013f8 	.word	0x200013f8
 8011cf4:	200013ec 	.word	0x200013ec
 8011cf8:	200012e8 	.word	0x200012e8
 8011cfc:	200012e4 	.word	0x200012e4

08011d00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b084      	sub	sp, #16
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
 8011d08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d10b      	bne.n	8011d28 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8011d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d14:	f383 8811 	msr	BASEPRI, r3
 8011d18:	f3bf 8f6f 	isb	sy
 8011d1c:	f3bf 8f4f 	dsb	sy
 8011d20:	60fb      	str	r3, [r7, #12]
}
 8011d22:	bf00      	nop
 8011d24:	bf00      	nop
 8011d26:	e7fd      	b.n	8011d24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011d28:	4b07      	ldr	r3, [pc, #28]	@ (8011d48 <vTaskPlaceOnEventList+0x48>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	3318      	adds	r3, #24
 8011d2e:	4619      	mov	r1, r3
 8011d30:	6878      	ldr	r0, [r7, #4]
 8011d32:	f7fe fc90 	bl	8010656 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011d36:	2101      	movs	r1, #1
 8011d38:	6838      	ldr	r0, [r7, #0]
 8011d3a:	f000 fbe5 	bl	8012508 <prvAddCurrentTaskToDelayedList>
}
 8011d3e:	bf00      	nop
 8011d40:	3710      	adds	r7, #16
 8011d42:	46bd      	mov	sp, r7
 8011d44:	bd80      	pop	{r7, pc}
 8011d46:	bf00      	nop
 8011d48:	200012e4 	.word	0x200012e4

08011d4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b086      	sub	sp, #24
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	68db      	ldr	r3, [r3, #12]
 8011d58:	68db      	ldr	r3, [r3, #12]
 8011d5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011d5c:	693b      	ldr	r3, [r7, #16]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d10b      	bne.n	8011d7a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8011d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d66:	f383 8811 	msr	BASEPRI, r3
 8011d6a:	f3bf 8f6f 	isb	sy
 8011d6e:	f3bf 8f4f 	dsb	sy
 8011d72:	60fb      	str	r3, [r7, #12]
}
 8011d74:	bf00      	nop
 8011d76:	bf00      	nop
 8011d78:	e7fd      	b.n	8011d76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011d7a:	693b      	ldr	r3, [r7, #16]
 8011d7c:	3318      	adds	r3, #24
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f7fe fca1 	bl	80106c6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011d84:	4b1d      	ldr	r3, [pc, #116]	@ (8011dfc <xTaskRemoveFromEventList+0xb0>)
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d11c      	bne.n	8011dc6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011d8c:	693b      	ldr	r3, [r7, #16]
 8011d8e:	3304      	adds	r3, #4
 8011d90:	4618      	mov	r0, r3
 8011d92:	f7fe fc98 	bl	80106c6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011d96:	693b      	ldr	r3, [r7, #16]
 8011d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d9a:	2201      	movs	r2, #1
 8011d9c:	409a      	lsls	r2, r3
 8011d9e:	4b18      	ldr	r3, [pc, #96]	@ (8011e00 <xTaskRemoveFromEventList+0xb4>)
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	4313      	orrs	r3, r2
 8011da4:	4a16      	ldr	r2, [pc, #88]	@ (8011e00 <xTaskRemoveFromEventList+0xb4>)
 8011da6:	6013      	str	r3, [r2, #0]
 8011da8:	693b      	ldr	r3, [r7, #16]
 8011daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011dac:	4613      	mov	r3, r2
 8011dae:	009b      	lsls	r3, r3, #2
 8011db0:	4413      	add	r3, r2
 8011db2:	009b      	lsls	r3, r3, #2
 8011db4:	4a13      	ldr	r2, [pc, #76]	@ (8011e04 <xTaskRemoveFromEventList+0xb8>)
 8011db6:	441a      	add	r2, r3
 8011db8:	693b      	ldr	r3, [r7, #16]
 8011dba:	3304      	adds	r3, #4
 8011dbc:	4619      	mov	r1, r3
 8011dbe:	4610      	mov	r0, r2
 8011dc0:	f7fe fc26 	bl	8010610 <vListInsertEnd>
 8011dc4:	e005      	b.n	8011dd2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011dc6:	693b      	ldr	r3, [r7, #16]
 8011dc8:	3318      	adds	r3, #24
 8011dca:	4619      	mov	r1, r3
 8011dcc:	480e      	ldr	r0, [pc, #56]	@ (8011e08 <xTaskRemoveFromEventList+0xbc>)
 8011dce:	f7fe fc1f 	bl	8010610 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011dd2:	693b      	ldr	r3, [r7, #16]
 8011dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8011e0c <xTaskRemoveFromEventList+0xc0>)
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	d905      	bls.n	8011dec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011de0:	2301      	movs	r3, #1
 8011de2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011de4:	4b0a      	ldr	r3, [pc, #40]	@ (8011e10 <xTaskRemoveFromEventList+0xc4>)
 8011de6:	2201      	movs	r2, #1
 8011de8:	601a      	str	r2, [r3, #0]
 8011dea:	e001      	b.n	8011df0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011dec:	2300      	movs	r3, #0
 8011dee:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8011df0:	697b      	ldr	r3, [r7, #20]
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	3718      	adds	r7, #24
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd80      	pop	{r7, pc}
 8011dfa:	bf00      	nop
 8011dfc:	2000140c 	.word	0x2000140c
 8011e00:	200013ec 	.word	0x200013ec
 8011e04:	200012e8 	.word	0x200012e8
 8011e08:	200013a4 	.word	0x200013a4
 8011e0c:	200012e4 	.word	0x200012e4
 8011e10:	200013f8 	.word	0x200013f8

08011e14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011e14:	b480      	push	{r7}
 8011e16:	b083      	sub	sp, #12
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011e1c:	4b06      	ldr	r3, [pc, #24]	@ (8011e38 <vTaskInternalSetTimeOutState+0x24>)
 8011e1e:	681a      	ldr	r2, [r3, #0]
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011e24:	4b05      	ldr	r3, [pc, #20]	@ (8011e3c <vTaskInternalSetTimeOutState+0x28>)
 8011e26:	681a      	ldr	r2, [r3, #0]
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	605a      	str	r2, [r3, #4]
}
 8011e2c:	bf00      	nop
 8011e2e:	370c      	adds	r7, #12
 8011e30:	46bd      	mov	sp, r7
 8011e32:	bc80      	pop	{r7}
 8011e34:	4770      	bx	lr
 8011e36:	bf00      	nop
 8011e38:	200013fc 	.word	0x200013fc
 8011e3c:	200013e8 	.word	0x200013e8

08011e40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b088      	sub	sp, #32
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
 8011e48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d10b      	bne.n	8011e68 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8011e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e54:	f383 8811 	msr	BASEPRI, r3
 8011e58:	f3bf 8f6f 	isb	sy
 8011e5c:	f3bf 8f4f 	dsb	sy
 8011e60:	613b      	str	r3, [r7, #16]
}
 8011e62:	bf00      	nop
 8011e64:	bf00      	nop
 8011e66:	e7fd      	b.n	8011e64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d10b      	bne.n	8011e86 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8011e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e72:	f383 8811 	msr	BASEPRI, r3
 8011e76:	f3bf 8f6f 	isb	sy
 8011e7a:	f3bf 8f4f 	dsb	sy
 8011e7e:	60fb      	str	r3, [r7, #12]
}
 8011e80:	bf00      	nop
 8011e82:	bf00      	nop
 8011e84:	e7fd      	b.n	8011e82 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8011e86:	f000 fc99 	bl	80127bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8011f00 <xTaskCheckForTimeOut+0xc0>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	685b      	ldr	r3, [r3, #4]
 8011e94:	69ba      	ldr	r2, [r7, #24]
 8011e96:	1ad3      	subs	r3, r2, r3
 8011e98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011e9a:	683b      	ldr	r3, [r7, #0]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ea2:	d102      	bne.n	8011eaa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	61fb      	str	r3, [r7, #28]
 8011ea8:	e023      	b.n	8011ef2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	681a      	ldr	r2, [r3, #0]
 8011eae:	4b15      	ldr	r3, [pc, #84]	@ (8011f04 <xTaskCheckForTimeOut+0xc4>)
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	429a      	cmp	r2, r3
 8011eb4:	d007      	beq.n	8011ec6 <xTaskCheckForTimeOut+0x86>
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	685b      	ldr	r3, [r3, #4]
 8011eba:	69ba      	ldr	r2, [r7, #24]
 8011ebc:	429a      	cmp	r2, r3
 8011ebe:	d302      	bcc.n	8011ec6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011ec0:	2301      	movs	r3, #1
 8011ec2:	61fb      	str	r3, [r7, #28]
 8011ec4:	e015      	b.n	8011ef2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011ec6:	683b      	ldr	r3, [r7, #0]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	697a      	ldr	r2, [r7, #20]
 8011ecc:	429a      	cmp	r2, r3
 8011ece:	d20b      	bcs.n	8011ee8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011ed0:	683b      	ldr	r3, [r7, #0]
 8011ed2:	681a      	ldr	r2, [r3, #0]
 8011ed4:	697b      	ldr	r3, [r7, #20]
 8011ed6:	1ad2      	subs	r2, r2, r3
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011edc:	6878      	ldr	r0, [r7, #4]
 8011ede:	f7ff ff99 	bl	8011e14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	61fb      	str	r3, [r7, #28]
 8011ee6:	e004      	b.n	8011ef2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8011ee8:	683b      	ldr	r3, [r7, #0]
 8011eea:	2200      	movs	r2, #0
 8011eec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011eee:	2301      	movs	r3, #1
 8011ef0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011ef2:	f000 fc93 	bl	801281c <vPortExitCritical>

	return xReturn;
 8011ef6:	69fb      	ldr	r3, [r7, #28]
}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3720      	adds	r7, #32
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}
 8011f00:	200013e8 	.word	0x200013e8
 8011f04:	200013fc 	.word	0x200013fc

08011f08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011f08:	b480      	push	{r7}
 8011f0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011f0c:	4b03      	ldr	r3, [pc, #12]	@ (8011f1c <vTaskMissedYield+0x14>)
 8011f0e:	2201      	movs	r2, #1
 8011f10:	601a      	str	r2, [r3, #0]
}
 8011f12:	bf00      	nop
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bc80      	pop	{r7}
 8011f18:	4770      	bx	lr
 8011f1a:	bf00      	nop
 8011f1c:	200013f8 	.word	0x200013f8

08011f20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b082      	sub	sp, #8
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011f28:	f000 f852 	bl	8011fd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011f2c:	4b06      	ldr	r3, [pc, #24]	@ (8011f48 <prvIdleTask+0x28>)
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	2b01      	cmp	r3, #1
 8011f32:	d9f9      	bls.n	8011f28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011f34:	4b05      	ldr	r3, [pc, #20]	@ (8011f4c <prvIdleTask+0x2c>)
 8011f36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011f3a:	601a      	str	r2, [r3, #0]
 8011f3c:	f3bf 8f4f 	dsb	sy
 8011f40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011f44:	e7f0      	b.n	8011f28 <prvIdleTask+0x8>
 8011f46:	bf00      	nop
 8011f48:	200012e8 	.word	0x200012e8
 8011f4c:	e000ed04 	.word	0xe000ed04

08011f50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b082      	sub	sp, #8
 8011f54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011f56:	2300      	movs	r3, #0
 8011f58:	607b      	str	r3, [r7, #4]
 8011f5a:	e00c      	b.n	8011f76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011f5c:	687a      	ldr	r2, [r7, #4]
 8011f5e:	4613      	mov	r3, r2
 8011f60:	009b      	lsls	r3, r3, #2
 8011f62:	4413      	add	r3, r2
 8011f64:	009b      	lsls	r3, r3, #2
 8011f66:	4a12      	ldr	r2, [pc, #72]	@ (8011fb0 <prvInitialiseTaskLists+0x60>)
 8011f68:	4413      	add	r3, r2
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f7fe fb25 	bl	80105ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	3301      	adds	r3, #1
 8011f74:	607b      	str	r3, [r7, #4]
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	2b06      	cmp	r3, #6
 8011f7a:	d9ef      	bls.n	8011f5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011f7c:	480d      	ldr	r0, [pc, #52]	@ (8011fb4 <prvInitialiseTaskLists+0x64>)
 8011f7e:	f7fe fb1c 	bl	80105ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011f82:	480d      	ldr	r0, [pc, #52]	@ (8011fb8 <prvInitialiseTaskLists+0x68>)
 8011f84:	f7fe fb19 	bl	80105ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011f88:	480c      	ldr	r0, [pc, #48]	@ (8011fbc <prvInitialiseTaskLists+0x6c>)
 8011f8a:	f7fe fb16 	bl	80105ba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011f8e:	480c      	ldr	r0, [pc, #48]	@ (8011fc0 <prvInitialiseTaskLists+0x70>)
 8011f90:	f7fe fb13 	bl	80105ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011f94:	480b      	ldr	r0, [pc, #44]	@ (8011fc4 <prvInitialiseTaskLists+0x74>)
 8011f96:	f7fe fb10 	bl	80105ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8011fc8 <prvInitialiseTaskLists+0x78>)
 8011f9c:	4a05      	ldr	r2, [pc, #20]	@ (8011fb4 <prvInitialiseTaskLists+0x64>)
 8011f9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8011fcc <prvInitialiseTaskLists+0x7c>)
 8011fa2:	4a05      	ldr	r2, [pc, #20]	@ (8011fb8 <prvInitialiseTaskLists+0x68>)
 8011fa4:	601a      	str	r2, [r3, #0]
}
 8011fa6:	bf00      	nop
 8011fa8:	3708      	adds	r7, #8
 8011faa:	46bd      	mov	sp, r7
 8011fac:	bd80      	pop	{r7, pc}
 8011fae:	bf00      	nop
 8011fb0:	200012e8 	.word	0x200012e8
 8011fb4:	20001374 	.word	0x20001374
 8011fb8:	20001388 	.word	0x20001388
 8011fbc:	200013a4 	.word	0x200013a4
 8011fc0:	200013b8 	.word	0x200013b8
 8011fc4:	200013d0 	.word	0x200013d0
 8011fc8:	2000139c 	.word	0x2000139c
 8011fcc:	200013a0 	.word	0x200013a0

08011fd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b082      	sub	sp, #8
 8011fd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011fd6:	e019      	b.n	801200c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011fd8:	f000 fbf0 	bl	80127bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8011fdc:	4b10      	ldr	r3, [pc, #64]	@ (8012020 <prvCheckTasksWaitingTermination+0x50>)
 8011fde:	68db      	ldr	r3, [r3, #12]
 8011fe0:	68db      	ldr	r3, [r3, #12]
 8011fe2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	3304      	adds	r3, #4
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f7fe fb6c 	bl	80106c6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011fee:	4b0d      	ldr	r3, [pc, #52]	@ (8012024 <prvCheckTasksWaitingTermination+0x54>)
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	3b01      	subs	r3, #1
 8011ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8012024 <prvCheckTasksWaitingTermination+0x54>)
 8011ff6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8012028 <prvCheckTasksWaitingTermination+0x58>)
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	3b01      	subs	r3, #1
 8011ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8012028 <prvCheckTasksWaitingTermination+0x58>)
 8012000:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012002:	f000 fc0b 	bl	801281c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	f000 f848 	bl	801209c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801200c:	4b06      	ldr	r3, [pc, #24]	@ (8012028 <prvCheckTasksWaitingTermination+0x58>)
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d1e1      	bne.n	8011fd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012014:	bf00      	nop
 8012016:	bf00      	nop
 8012018:	3708      	adds	r7, #8
 801201a:	46bd      	mov	sp, r7
 801201c:	bd80      	pop	{r7, pc}
 801201e:	bf00      	nop
 8012020:	200013b8 	.word	0x200013b8
 8012024:	200013e4 	.word	0x200013e4
 8012028:	200013cc 	.word	0x200013cc

0801202c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 801202c:	b480      	push	{r7}
 801202e:	b085      	sub	sp, #20
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8012034:	2300      	movs	r3, #0
 8012036:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8012038:	e005      	b.n	8012046 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	3301      	adds	r3, #1
 801203e:	607b      	str	r3, [r7, #4]
			ulCount++;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	3301      	adds	r3, #1
 8012044:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	781b      	ldrb	r3, [r3, #0]
 801204a:	2ba5      	cmp	r3, #165	@ 0xa5
 801204c:	d0f5      	beq.n	801203a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	089b      	lsrs	r3, r3, #2
 8012052:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	b29b      	uxth	r3, r3
	}
 8012058:	4618      	mov	r0, r3
 801205a:	3714      	adds	r7, #20
 801205c:	46bd      	mov	sp, r7
 801205e:	bc80      	pop	{r7}
 8012060:	4770      	bx	lr
	...

08012064 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8012064:	b580      	push	{r7, lr}
 8012066:	b086      	sub	sp, #24
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d102      	bne.n	8012078 <uxTaskGetStackHighWaterMark+0x14>
 8012072:	4b09      	ldr	r3, [pc, #36]	@ (8012098 <uxTaskGetStackHighWaterMark+0x34>)
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	e000      	b.n	801207a <uxTaskGetStackHighWaterMark+0x16>
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 801207c:	697b      	ldr	r3, [r7, #20]
 801207e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012080:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8012082:	6938      	ldr	r0, [r7, #16]
 8012084:	f7ff ffd2 	bl	801202c <prvTaskCheckFreeStackSpace>
 8012088:	4603      	mov	r3, r0
 801208a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 801208c:	68fb      	ldr	r3, [r7, #12]
	}
 801208e:	4618      	mov	r0, r3
 8012090:	3718      	adds	r7, #24
 8012092:	46bd      	mov	sp, r7
 8012094:	bd80      	pop	{r7, pc}
 8012096:	bf00      	nop
 8012098:	200012e4 	.word	0x200012e4

0801209c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801209c:	b580      	push	{r7, lr}
 801209e:	b084      	sub	sp, #16
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d108      	bne.n	80120c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80120b2:	4618      	mov	r0, r3
 80120b4:	f000 fd4c 	bl	8012b50 <vPortFree>
				vPortFree( pxTCB );
 80120b8:	6878      	ldr	r0, [r7, #4]
 80120ba:	f000 fd49 	bl	8012b50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80120be:	e019      	b.n	80120f4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80120c6:	2b01      	cmp	r3, #1
 80120c8:	d103      	bne.n	80120d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80120ca:	6878      	ldr	r0, [r7, #4]
 80120cc:	f000 fd40 	bl	8012b50 <vPortFree>
	}
 80120d0:	e010      	b.n	80120f4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80120d8:	2b02      	cmp	r3, #2
 80120da:	d00b      	beq.n	80120f4 <prvDeleteTCB+0x58>
	__asm volatile
 80120dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120e0:	f383 8811 	msr	BASEPRI, r3
 80120e4:	f3bf 8f6f 	isb	sy
 80120e8:	f3bf 8f4f 	dsb	sy
 80120ec:	60fb      	str	r3, [r7, #12]
}
 80120ee:	bf00      	nop
 80120f0:	bf00      	nop
 80120f2:	e7fd      	b.n	80120f0 <prvDeleteTCB+0x54>
	}
 80120f4:	bf00      	nop
 80120f6:	3710      	adds	r7, #16
 80120f8:	46bd      	mov	sp, r7
 80120fa:	bd80      	pop	{r7, pc}

080120fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80120fc:	b480      	push	{r7}
 80120fe:	b083      	sub	sp, #12
 8012100:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012102:	4b0e      	ldr	r3, [pc, #56]	@ (801213c <prvResetNextTaskUnblockTime+0x40>)
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d101      	bne.n	8012110 <prvResetNextTaskUnblockTime+0x14>
 801210c:	2301      	movs	r3, #1
 801210e:	e000      	b.n	8012112 <prvResetNextTaskUnblockTime+0x16>
 8012110:	2300      	movs	r3, #0
 8012112:	2b00      	cmp	r3, #0
 8012114:	d004      	beq.n	8012120 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012116:	4b0a      	ldr	r3, [pc, #40]	@ (8012140 <prvResetNextTaskUnblockTime+0x44>)
 8012118:	f04f 32ff 	mov.w	r2, #4294967295
 801211c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801211e:	e008      	b.n	8012132 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012120:	4b06      	ldr	r3, [pc, #24]	@ (801213c <prvResetNextTaskUnblockTime+0x40>)
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	68db      	ldr	r3, [r3, #12]
 8012126:	68db      	ldr	r3, [r3, #12]
 8012128:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	685b      	ldr	r3, [r3, #4]
 801212e:	4a04      	ldr	r2, [pc, #16]	@ (8012140 <prvResetNextTaskUnblockTime+0x44>)
 8012130:	6013      	str	r3, [r2, #0]
}
 8012132:	bf00      	nop
 8012134:	370c      	adds	r7, #12
 8012136:	46bd      	mov	sp, r7
 8012138:	bc80      	pop	{r7}
 801213a:	4770      	bx	lr
 801213c:	2000139c 	.word	0x2000139c
 8012140:	20001404 	.word	0x20001404

08012144 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012144:	b480      	push	{r7}
 8012146:	b083      	sub	sp, #12
 8012148:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801214a:	4b0b      	ldr	r3, [pc, #44]	@ (8012178 <xTaskGetSchedulerState+0x34>)
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d102      	bne.n	8012158 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012152:	2301      	movs	r3, #1
 8012154:	607b      	str	r3, [r7, #4]
 8012156:	e008      	b.n	801216a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012158:	4b08      	ldr	r3, [pc, #32]	@ (801217c <xTaskGetSchedulerState+0x38>)
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d102      	bne.n	8012166 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012160:	2302      	movs	r3, #2
 8012162:	607b      	str	r3, [r7, #4]
 8012164:	e001      	b.n	801216a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012166:	2300      	movs	r3, #0
 8012168:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801216a:	687b      	ldr	r3, [r7, #4]
	}
 801216c:	4618      	mov	r0, r3
 801216e:	370c      	adds	r7, #12
 8012170:	46bd      	mov	sp, r7
 8012172:	bc80      	pop	{r7}
 8012174:	4770      	bx	lr
 8012176:	bf00      	nop
 8012178:	200013f0 	.word	0x200013f0
 801217c:	2000140c 	.word	0x2000140c

08012180 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012180:	b580      	push	{r7, lr}
 8012182:	b084      	sub	sp, #16
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801218c:	2300      	movs	r3, #0
 801218e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d06e      	beq.n	8012274 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012196:	68bb      	ldr	r3, [r7, #8]
 8012198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801219a:	4b39      	ldr	r3, [pc, #228]	@ (8012280 <xTaskPriorityInherit+0x100>)
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121a0:	429a      	cmp	r2, r3
 80121a2:	d25e      	bcs.n	8012262 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80121a4:	68bb      	ldr	r3, [r7, #8]
 80121a6:	699b      	ldr	r3, [r3, #24]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	db06      	blt.n	80121ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121ac:	4b34      	ldr	r3, [pc, #208]	@ (8012280 <xTaskPriorityInherit+0x100>)
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121b2:	f1c3 0207 	rsb	r2, r3, #7
 80121b6:	68bb      	ldr	r3, [r7, #8]
 80121b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80121ba:	68bb      	ldr	r3, [r7, #8]
 80121bc:	6959      	ldr	r1, [r3, #20]
 80121be:	68bb      	ldr	r3, [r7, #8]
 80121c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80121c2:	4613      	mov	r3, r2
 80121c4:	009b      	lsls	r3, r3, #2
 80121c6:	4413      	add	r3, r2
 80121c8:	009b      	lsls	r3, r3, #2
 80121ca:	4a2e      	ldr	r2, [pc, #184]	@ (8012284 <xTaskPriorityInherit+0x104>)
 80121cc:	4413      	add	r3, r2
 80121ce:	4299      	cmp	r1, r3
 80121d0:	d101      	bne.n	80121d6 <xTaskPriorityInherit+0x56>
 80121d2:	2301      	movs	r3, #1
 80121d4:	e000      	b.n	80121d8 <xTaskPriorityInherit+0x58>
 80121d6:	2300      	movs	r3, #0
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d03a      	beq.n	8012252 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80121dc:	68bb      	ldr	r3, [r7, #8]
 80121de:	3304      	adds	r3, #4
 80121e0:	4618      	mov	r0, r3
 80121e2:	f7fe fa70 	bl	80106c6 <uxListRemove>
 80121e6:	4603      	mov	r3, r0
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d115      	bne.n	8012218 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80121ec:	68bb      	ldr	r3, [r7, #8]
 80121ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80121f0:	4924      	ldr	r1, [pc, #144]	@ (8012284 <xTaskPriorityInherit+0x104>)
 80121f2:	4613      	mov	r3, r2
 80121f4:	009b      	lsls	r3, r3, #2
 80121f6:	4413      	add	r3, r2
 80121f8:	009b      	lsls	r3, r3, #2
 80121fa:	440b      	add	r3, r1
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d10a      	bne.n	8012218 <xTaskPriorityInherit+0x98>
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012206:	2201      	movs	r2, #1
 8012208:	fa02 f303 	lsl.w	r3, r2, r3
 801220c:	43da      	mvns	r2, r3
 801220e:	4b1e      	ldr	r3, [pc, #120]	@ (8012288 <xTaskPriorityInherit+0x108>)
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	4013      	ands	r3, r2
 8012214:	4a1c      	ldr	r2, [pc, #112]	@ (8012288 <xTaskPriorityInherit+0x108>)
 8012216:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012218:	4b19      	ldr	r3, [pc, #100]	@ (8012280 <xTaskPriorityInherit+0x100>)
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801221e:	68bb      	ldr	r3, [r7, #8]
 8012220:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012222:	68bb      	ldr	r3, [r7, #8]
 8012224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012226:	2201      	movs	r2, #1
 8012228:	409a      	lsls	r2, r3
 801222a:	4b17      	ldr	r3, [pc, #92]	@ (8012288 <xTaskPriorityInherit+0x108>)
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	4313      	orrs	r3, r2
 8012230:	4a15      	ldr	r2, [pc, #84]	@ (8012288 <xTaskPriorityInherit+0x108>)
 8012232:	6013      	str	r3, [r2, #0]
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012238:	4613      	mov	r3, r2
 801223a:	009b      	lsls	r3, r3, #2
 801223c:	4413      	add	r3, r2
 801223e:	009b      	lsls	r3, r3, #2
 8012240:	4a10      	ldr	r2, [pc, #64]	@ (8012284 <xTaskPriorityInherit+0x104>)
 8012242:	441a      	add	r2, r3
 8012244:	68bb      	ldr	r3, [r7, #8]
 8012246:	3304      	adds	r3, #4
 8012248:	4619      	mov	r1, r3
 801224a:	4610      	mov	r0, r2
 801224c:	f7fe f9e0 	bl	8010610 <vListInsertEnd>
 8012250:	e004      	b.n	801225c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012252:	4b0b      	ldr	r3, [pc, #44]	@ (8012280 <xTaskPriorityInherit+0x100>)
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012258:	68bb      	ldr	r3, [r7, #8]
 801225a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801225c:	2301      	movs	r3, #1
 801225e:	60fb      	str	r3, [r7, #12]
 8012260:	e008      	b.n	8012274 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012266:	4b06      	ldr	r3, [pc, #24]	@ (8012280 <xTaskPriorityInherit+0x100>)
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801226c:	429a      	cmp	r2, r3
 801226e:	d201      	bcs.n	8012274 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012270:	2301      	movs	r3, #1
 8012272:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012274:	68fb      	ldr	r3, [r7, #12]
	}
 8012276:	4618      	mov	r0, r3
 8012278:	3710      	adds	r7, #16
 801227a:	46bd      	mov	sp, r7
 801227c:	bd80      	pop	{r7, pc}
 801227e:	bf00      	nop
 8012280:	200012e4 	.word	0x200012e4
 8012284:	200012e8 	.word	0x200012e8
 8012288:	200013ec 	.word	0x200013ec

0801228c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801228c:	b580      	push	{r7, lr}
 801228e:	b086      	sub	sp, #24
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012298:	2300      	movs	r3, #0
 801229a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d070      	beq.n	8012384 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80122a2:	4b3b      	ldr	r3, [pc, #236]	@ (8012390 <xTaskPriorityDisinherit+0x104>)
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	693a      	ldr	r2, [r7, #16]
 80122a8:	429a      	cmp	r2, r3
 80122aa:	d00b      	beq.n	80122c4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80122ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122b0:	f383 8811 	msr	BASEPRI, r3
 80122b4:	f3bf 8f6f 	isb	sy
 80122b8:	f3bf 8f4f 	dsb	sy
 80122bc:	60fb      	str	r3, [r7, #12]
}
 80122be:	bf00      	nop
 80122c0:	bf00      	nop
 80122c2:	e7fd      	b.n	80122c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80122c4:	693b      	ldr	r3, [r7, #16]
 80122c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d10b      	bne.n	80122e4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80122cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122d0:	f383 8811 	msr	BASEPRI, r3
 80122d4:	f3bf 8f6f 	isb	sy
 80122d8:	f3bf 8f4f 	dsb	sy
 80122dc:	60bb      	str	r3, [r7, #8]
}
 80122de:	bf00      	nop
 80122e0:	bf00      	nop
 80122e2:	e7fd      	b.n	80122e0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80122e4:	693b      	ldr	r3, [r7, #16]
 80122e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80122e8:	1e5a      	subs	r2, r3, #1
 80122ea:	693b      	ldr	r3, [r7, #16]
 80122ec:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80122ee:	693b      	ldr	r3, [r7, #16]
 80122f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80122f2:	693b      	ldr	r3, [r7, #16]
 80122f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80122f6:	429a      	cmp	r2, r3
 80122f8:	d044      	beq.n	8012384 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80122fa:	693b      	ldr	r3, [r7, #16]
 80122fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d140      	bne.n	8012384 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012302:	693b      	ldr	r3, [r7, #16]
 8012304:	3304      	adds	r3, #4
 8012306:	4618      	mov	r0, r3
 8012308:	f7fe f9dd 	bl	80106c6 <uxListRemove>
 801230c:	4603      	mov	r3, r0
 801230e:	2b00      	cmp	r3, #0
 8012310:	d115      	bne.n	801233e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012312:	693b      	ldr	r3, [r7, #16]
 8012314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012316:	491f      	ldr	r1, [pc, #124]	@ (8012394 <xTaskPriorityDisinherit+0x108>)
 8012318:	4613      	mov	r3, r2
 801231a:	009b      	lsls	r3, r3, #2
 801231c:	4413      	add	r3, r2
 801231e:	009b      	lsls	r3, r3, #2
 8012320:	440b      	add	r3, r1
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d10a      	bne.n	801233e <xTaskPriorityDisinherit+0xb2>
 8012328:	693b      	ldr	r3, [r7, #16]
 801232a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801232c:	2201      	movs	r2, #1
 801232e:	fa02 f303 	lsl.w	r3, r2, r3
 8012332:	43da      	mvns	r2, r3
 8012334:	4b18      	ldr	r3, [pc, #96]	@ (8012398 <xTaskPriorityDisinherit+0x10c>)
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	4013      	ands	r3, r2
 801233a:	4a17      	ldr	r2, [pc, #92]	@ (8012398 <xTaskPriorityDisinherit+0x10c>)
 801233c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801233e:	693b      	ldr	r3, [r7, #16]
 8012340:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012342:	693b      	ldr	r3, [r7, #16]
 8012344:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012346:	693b      	ldr	r3, [r7, #16]
 8012348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801234a:	f1c3 0207 	rsb	r2, r3, #7
 801234e:	693b      	ldr	r3, [r7, #16]
 8012350:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012352:	693b      	ldr	r3, [r7, #16]
 8012354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012356:	2201      	movs	r2, #1
 8012358:	409a      	lsls	r2, r3
 801235a:	4b0f      	ldr	r3, [pc, #60]	@ (8012398 <xTaskPriorityDisinherit+0x10c>)
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	4313      	orrs	r3, r2
 8012360:	4a0d      	ldr	r2, [pc, #52]	@ (8012398 <xTaskPriorityDisinherit+0x10c>)
 8012362:	6013      	str	r3, [r2, #0]
 8012364:	693b      	ldr	r3, [r7, #16]
 8012366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012368:	4613      	mov	r3, r2
 801236a:	009b      	lsls	r3, r3, #2
 801236c:	4413      	add	r3, r2
 801236e:	009b      	lsls	r3, r3, #2
 8012370:	4a08      	ldr	r2, [pc, #32]	@ (8012394 <xTaskPriorityDisinherit+0x108>)
 8012372:	441a      	add	r2, r3
 8012374:	693b      	ldr	r3, [r7, #16]
 8012376:	3304      	adds	r3, #4
 8012378:	4619      	mov	r1, r3
 801237a:	4610      	mov	r0, r2
 801237c:	f7fe f948 	bl	8010610 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012380:	2301      	movs	r3, #1
 8012382:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012384:	697b      	ldr	r3, [r7, #20]
	}
 8012386:	4618      	mov	r0, r3
 8012388:	3718      	adds	r7, #24
 801238a:	46bd      	mov	sp, r7
 801238c:	bd80      	pop	{r7, pc}
 801238e:	bf00      	nop
 8012390:	200012e4 	.word	0x200012e4
 8012394:	200012e8 	.word	0x200012e8
 8012398:	200013ec 	.word	0x200013ec

0801239c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801239c:	b580      	push	{r7, lr}
 801239e:	b088      	sub	sp, #32
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
 80123a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80123aa:	2301      	movs	r3, #1
 80123ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	f000 808a 	beq.w	80124ca <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80123b6:	69bb      	ldr	r3, [r7, #24]
 80123b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d10b      	bne.n	80123d6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 80123be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123c2:	f383 8811 	msr	BASEPRI, r3
 80123c6:	f3bf 8f6f 	isb	sy
 80123ca:	f3bf 8f4f 	dsb	sy
 80123ce:	60fb      	str	r3, [r7, #12]
}
 80123d0:	bf00      	nop
 80123d2:	bf00      	nop
 80123d4:	e7fd      	b.n	80123d2 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80123d6:	69bb      	ldr	r3, [r7, #24]
 80123d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80123da:	683a      	ldr	r2, [r7, #0]
 80123dc:	429a      	cmp	r2, r3
 80123de:	d902      	bls.n	80123e6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80123e0:	683b      	ldr	r3, [r7, #0]
 80123e2:	61fb      	str	r3, [r7, #28]
 80123e4:	e002      	b.n	80123ec <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80123e6:	69bb      	ldr	r3, [r7, #24]
 80123e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80123ea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80123ec:	69bb      	ldr	r3, [r7, #24]
 80123ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123f0:	69fa      	ldr	r2, [r7, #28]
 80123f2:	429a      	cmp	r2, r3
 80123f4:	d069      	beq.n	80124ca <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80123f6:	69bb      	ldr	r3, [r7, #24]
 80123f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80123fa:	697a      	ldr	r2, [r7, #20]
 80123fc:	429a      	cmp	r2, r3
 80123fe:	d164      	bne.n	80124ca <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012400:	4b34      	ldr	r3, [pc, #208]	@ (80124d4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	69ba      	ldr	r2, [r7, #24]
 8012406:	429a      	cmp	r2, r3
 8012408:	d10b      	bne.n	8012422 <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 801240a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801240e:	f383 8811 	msr	BASEPRI, r3
 8012412:	f3bf 8f6f 	isb	sy
 8012416:	f3bf 8f4f 	dsb	sy
 801241a:	60bb      	str	r3, [r7, #8]
}
 801241c:	bf00      	nop
 801241e:	bf00      	nop
 8012420:	e7fd      	b.n	801241e <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012422:	69bb      	ldr	r3, [r7, #24]
 8012424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012426:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012428:	69bb      	ldr	r3, [r7, #24]
 801242a:	69fa      	ldr	r2, [r7, #28]
 801242c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801242e:	69bb      	ldr	r3, [r7, #24]
 8012430:	699b      	ldr	r3, [r3, #24]
 8012432:	2b00      	cmp	r3, #0
 8012434:	db04      	blt.n	8012440 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012436:	69fb      	ldr	r3, [r7, #28]
 8012438:	f1c3 0207 	rsb	r2, r3, #7
 801243c:	69bb      	ldr	r3, [r7, #24]
 801243e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012440:	69bb      	ldr	r3, [r7, #24]
 8012442:	6959      	ldr	r1, [r3, #20]
 8012444:	693a      	ldr	r2, [r7, #16]
 8012446:	4613      	mov	r3, r2
 8012448:	009b      	lsls	r3, r3, #2
 801244a:	4413      	add	r3, r2
 801244c:	009b      	lsls	r3, r3, #2
 801244e:	4a22      	ldr	r2, [pc, #136]	@ (80124d8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8012450:	4413      	add	r3, r2
 8012452:	4299      	cmp	r1, r3
 8012454:	d101      	bne.n	801245a <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8012456:	2301      	movs	r3, #1
 8012458:	e000      	b.n	801245c <vTaskPriorityDisinheritAfterTimeout+0xc0>
 801245a:	2300      	movs	r3, #0
 801245c:	2b00      	cmp	r3, #0
 801245e:	d034      	beq.n	80124ca <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012460:	69bb      	ldr	r3, [r7, #24]
 8012462:	3304      	adds	r3, #4
 8012464:	4618      	mov	r0, r3
 8012466:	f7fe f92e 	bl	80106c6 <uxListRemove>
 801246a:	4603      	mov	r3, r0
 801246c:	2b00      	cmp	r3, #0
 801246e:	d115      	bne.n	801249c <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012470:	69bb      	ldr	r3, [r7, #24]
 8012472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012474:	4918      	ldr	r1, [pc, #96]	@ (80124d8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8012476:	4613      	mov	r3, r2
 8012478:	009b      	lsls	r3, r3, #2
 801247a:	4413      	add	r3, r2
 801247c:	009b      	lsls	r3, r3, #2
 801247e:	440b      	add	r3, r1
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d10a      	bne.n	801249c <vTaskPriorityDisinheritAfterTimeout+0x100>
 8012486:	69bb      	ldr	r3, [r7, #24]
 8012488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801248a:	2201      	movs	r2, #1
 801248c:	fa02 f303 	lsl.w	r3, r2, r3
 8012490:	43da      	mvns	r2, r3
 8012492:	4b12      	ldr	r3, [pc, #72]	@ (80124dc <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	4013      	ands	r3, r2
 8012498:	4a10      	ldr	r2, [pc, #64]	@ (80124dc <vTaskPriorityDisinheritAfterTimeout+0x140>)
 801249a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801249c:	69bb      	ldr	r3, [r7, #24]
 801249e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124a0:	2201      	movs	r2, #1
 80124a2:	409a      	lsls	r2, r3
 80124a4:	4b0d      	ldr	r3, [pc, #52]	@ (80124dc <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	4313      	orrs	r3, r2
 80124aa:	4a0c      	ldr	r2, [pc, #48]	@ (80124dc <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80124ac:	6013      	str	r3, [r2, #0]
 80124ae:	69bb      	ldr	r3, [r7, #24]
 80124b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80124b2:	4613      	mov	r3, r2
 80124b4:	009b      	lsls	r3, r3, #2
 80124b6:	4413      	add	r3, r2
 80124b8:	009b      	lsls	r3, r3, #2
 80124ba:	4a07      	ldr	r2, [pc, #28]	@ (80124d8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80124bc:	441a      	add	r2, r3
 80124be:	69bb      	ldr	r3, [r7, #24]
 80124c0:	3304      	adds	r3, #4
 80124c2:	4619      	mov	r1, r3
 80124c4:	4610      	mov	r0, r2
 80124c6:	f7fe f8a3 	bl	8010610 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80124ca:	bf00      	nop
 80124cc:	3720      	adds	r7, #32
 80124ce:	46bd      	mov	sp, r7
 80124d0:	bd80      	pop	{r7, pc}
 80124d2:	bf00      	nop
 80124d4:	200012e4 	.word	0x200012e4
 80124d8:	200012e8 	.word	0x200012e8
 80124dc:	200013ec 	.word	0x200013ec

080124e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80124e0:	b480      	push	{r7}
 80124e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80124e4:	4b07      	ldr	r3, [pc, #28]	@ (8012504 <pvTaskIncrementMutexHeldCount+0x24>)
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d004      	beq.n	80124f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80124ec:	4b05      	ldr	r3, [pc, #20]	@ (8012504 <pvTaskIncrementMutexHeldCount+0x24>)
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80124f2:	3201      	adds	r2, #1
 80124f4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80124f6:	4b03      	ldr	r3, [pc, #12]	@ (8012504 <pvTaskIncrementMutexHeldCount+0x24>)
 80124f8:	681b      	ldr	r3, [r3, #0]
	}
 80124fa:	4618      	mov	r0, r3
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bc80      	pop	{r7}
 8012500:	4770      	bx	lr
 8012502:	bf00      	nop
 8012504:	200012e4 	.word	0x200012e4

08012508 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b084      	sub	sp, #16
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
 8012510:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012512:	4b29      	ldr	r3, [pc, #164]	@ (80125b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012518:	4b28      	ldr	r3, [pc, #160]	@ (80125bc <prvAddCurrentTaskToDelayedList+0xb4>)
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	3304      	adds	r3, #4
 801251e:	4618      	mov	r0, r3
 8012520:	f7fe f8d1 	bl	80106c6 <uxListRemove>
 8012524:	4603      	mov	r3, r0
 8012526:	2b00      	cmp	r3, #0
 8012528:	d10b      	bne.n	8012542 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 801252a:	4b24      	ldr	r3, [pc, #144]	@ (80125bc <prvAddCurrentTaskToDelayedList+0xb4>)
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012530:	2201      	movs	r2, #1
 8012532:	fa02 f303 	lsl.w	r3, r2, r3
 8012536:	43da      	mvns	r2, r3
 8012538:	4b21      	ldr	r3, [pc, #132]	@ (80125c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	4013      	ands	r3, r2
 801253e:	4a20      	ldr	r2, [pc, #128]	@ (80125c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012540:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012548:	d10a      	bne.n	8012560 <prvAddCurrentTaskToDelayedList+0x58>
 801254a:	683b      	ldr	r3, [r7, #0]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d007      	beq.n	8012560 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012550:	4b1a      	ldr	r3, [pc, #104]	@ (80125bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	3304      	adds	r3, #4
 8012556:	4619      	mov	r1, r3
 8012558:	481a      	ldr	r0, [pc, #104]	@ (80125c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801255a:	f7fe f859 	bl	8010610 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801255e:	e026      	b.n	80125ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012560:	68fa      	ldr	r2, [r7, #12]
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	4413      	add	r3, r2
 8012566:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012568:	4b14      	ldr	r3, [pc, #80]	@ (80125bc <prvAddCurrentTaskToDelayedList+0xb4>)
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	68ba      	ldr	r2, [r7, #8]
 801256e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012570:	68ba      	ldr	r2, [r7, #8]
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	429a      	cmp	r2, r3
 8012576:	d209      	bcs.n	801258c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012578:	4b13      	ldr	r3, [pc, #76]	@ (80125c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 801257a:	681a      	ldr	r2, [r3, #0]
 801257c:	4b0f      	ldr	r3, [pc, #60]	@ (80125bc <prvAddCurrentTaskToDelayedList+0xb4>)
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	3304      	adds	r3, #4
 8012582:	4619      	mov	r1, r3
 8012584:	4610      	mov	r0, r2
 8012586:	f7fe f866 	bl	8010656 <vListInsert>
}
 801258a:	e010      	b.n	80125ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801258c:	4b0f      	ldr	r3, [pc, #60]	@ (80125cc <prvAddCurrentTaskToDelayedList+0xc4>)
 801258e:	681a      	ldr	r2, [r3, #0]
 8012590:	4b0a      	ldr	r3, [pc, #40]	@ (80125bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	3304      	adds	r3, #4
 8012596:	4619      	mov	r1, r3
 8012598:	4610      	mov	r0, r2
 801259a:	f7fe f85c 	bl	8010656 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801259e:	4b0c      	ldr	r3, [pc, #48]	@ (80125d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	68ba      	ldr	r2, [r7, #8]
 80125a4:	429a      	cmp	r2, r3
 80125a6:	d202      	bcs.n	80125ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80125a8:	4a09      	ldr	r2, [pc, #36]	@ (80125d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80125aa:	68bb      	ldr	r3, [r7, #8]
 80125ac:	6013      	str	r3, [r2, #0]
}
 80125ae:	bf00      	nop
 80125b0:	3710      	adds	r7, #16
 80125b2:	46bd      	mov	sp, r7
 80125b4:	bd80      	pop	{r7, pc}
 80125b6:	bf00      	nop
 80125b8:	200013e8 	.word	0x200013e8
 80125bc:	200012e4 	.word	0x200012e4
 80125c0:	200013ec 	.word	0x200013ec
 80125c4:	200013d0 	.word	0x200013d0
 80125c8:	200013a0 	.word	0x200013a0
 80125cc:	2000139c 	.word	0x2000139c
 80125d0:	20001404 	.word	0x20001404

080125d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80125d4:	b480      	push	{r7}
 80125d6:	b085      	sub	sp, #20
 80125d8:	af00      	add	r7, sp, #0
 80125da:	60f8      	str	r0, [r7, #12]
 80125dc:	60b9      	str	r1, [r7, #8]
 80125de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	3b04      	subs	r3, #4
 80125e4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80125ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	3b04      	subs	r3, #4
 80125f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80125f4:	68bb      	ldr	r3, [r7, #8]
 80125f6:	f023 0201 	bic.w	r2, r3, #1
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	3b04      	subs	r3, #4
 8012602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012604:	4a08      	ldr	r2, [pc, #32]	@ (8012628 <pxPortInitialiseStack+0x54>)
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	3b14      	subs	r3, #20
 801260e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012610:	687a      	ldr	r2, [r7, #4]
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	3b20      	subs	r3, #32
 801261a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801261c:	68fb      	ldr	r3, [r7, #12]
}
 801261e:	4618      	mov	r0, r3
 8012620:	3714      	adds	r7, #20
 8012622:	46bd      	mov	sp, r7
 8012624:	bc80      	pop	{r7}
 8012626:	4770      	bx	lr
 8012628:	0801262d 	.word	0x0801262d

0801262c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801262c:	b480      	push	{r7}
 801262e:	b085      	sub	sp, #20
 8012630:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8012632:	2300      	movs	r3, #0
 8012634:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012636:	4b12      	ldr	r3, [pc, #72]	@ (8012680 <prvTaskExitError+0x54>)
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801263e:	d00b      	beq.n	8012658 <prvTaskExitError+0x2c>
	__asm volatile
 8012640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012644:	f383 8811 	msr	BASEPRI, r3
 8012648:	f3bf 8f6f 	isb	sy
 801264c:	f3bf 8f4f 	dsb	sy
 8012650:	60fb      	str	r3, [r7, #12]
}
 8012652:	bf00      	nop
 8012654:	bf00      	nop
 8012656:	e7fd      	b.n	8012654 <prvTaskExitError+0x28>
	__asm volatile
 8012658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801265c:	f383 8811 	msr	BASEPRI, r3
 8012660:	f3bf 8f6f 	isb	sy
 8012664:	f3bf 8f4f 	dsb	sy
 8012668:	60bb      	str	r3, [r7, #8]
}
 801266a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801266c:	bf00      	nop
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d0fc      	beq.n	801266e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012674:	bf00      	nop
 8012676:	bf00      	nop
 8012678:	3714      	adds	r7, #20
 801267a:	46bd      	mov	sp, r7
 801267c:	bc80      	pop	{r7}
 801267e:	4770      	bx	lr
 8012680:	20000040 	.word	0x20000040
	...

08012690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012690:	4b07      	ldr	r3, [pc, #28]	@ (80126b0 <pxCurrentTCBConst2>)
 8012692:	6819      	ldr	r1, [r3, #0]
 8012694:	6808      	ldr	r0, [r1, #0]
 8012696:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801269a:	f380 8809 	msr	PSP, r0
 801269e:	f3bf 8f6f 	isb	sy
 80126a2:	f04f 0000 	mov.w	r0, #0
 80126a6:	f380 8811 	msr	BASEPRI, r0
 80126aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80126ae:	4770      	bx	lr

080126b0 <pxCurrentTCBConst2>:
 80126b0:	200012e4 	.word	0x200012e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80126b4:	bf00      	nop
 80126b6:	bf00      	nop

080126b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80126b8:	4806      	ldr	r0, [pc, #24]	@ (80126d4 <prvPortStartFirstTask+0x1c>)
 80126ba:	6800      	ldr	r0, [r0, #0]
 80126bc:	6800      	ldr	r0, [r0, #0]
 80126be:	f380 8808 	msr	MSP, r0
 80126c2:	b662      	cpsie	i
 80126c4:	b661      	cpsie	f
 80126c6:	f3bf 8f4f 	dsb	sy
 80126ca:	f3bf 8f6f 	isb	sy
 80126ce:	df00      	svc	0
 80126d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80126d2:	bf00      	nop
 80126d4:	e000ed08 	.word	0xe000ed08

080126d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80126d8:	b580      	push	{r7, lr}
 80126da:	b084      	sub	sp, #16
 80126dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80126de:	4b32      	ldr	r3, [pc, #200]	@ (80127a8 <xPortStartScheduler+0xd0>)
 80126e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	781b      	ldrb	r3, [r3, #0]
 80126e6:	b2db      	uxtb	r3, r3
 80126e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	22ff      	movs	r2, #255	@ 0xff
 80126ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	781b      	ldrb	r3, [r3, #0]
 80126f4:	b2db      	uxtb	r3, r3
 80126f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80126f8:	78fb      	ldrb	r3, [r7, #3]
 80126fa:	b2db      	uxtb	r3, r3
 80126fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8012700:	b2da      	uxtb	r2, r3
 8012702:	4b2a      	ldr	r3, [pc, #168]	@ (80127ac <xPortStartScheduler+0xd4>)
 8012704:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012706:	4b2a      	ldr	r3, [pc, #168]	@ (80127b0 <xPortStartScheduler+0xd8>)
 8012708:	2207      	movs	r2, #7
 801270a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801270c:	e009      	b.n	8012722 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 801270e:	4b28      	ldr	r3, [pc, #160]	@ (80127b0 <xPortStartScheduler+0xd8>)
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	3b01      	subs	r3, #1
 8012714:	4a26      	ldr	r2, [pc, #152]	@ (80127b0 <xPortStartScheduler+0xd8>)
 8012716:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012718:	78fb      	ldrb	r3, [r7, #3]
 801271a:	b2db      	uxtb	r3, r3
 801271c:	005b      	lsls	r3, r3, #1
 801271e:	b2db      	uxtb	r3, r3
 8012720:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012722:	78fb      	ldrb	r3, [r7, #3]
 8012724:	b2db      	uxtb	r3, r3
 8012726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801272a:	2b80      	cmp	r3, #128	@ 0x80
 801272c:	d0ef      	beq.n	801270e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801272e:	4b20      	ldr	r3, [pc, #128]	@ (80127b0 <xPortStartScheduler+0xd8>)
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	f1c3 0307 	rsb	r3, r3, #7
 8012736:	2b04      	cmp	r3, #4
 8012738:	d00b      	beq.n	8012752 <xPortStartScheduler+0x7a>
	__asm volatile
 801273a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801273e:	f383 8811 	msr	BASEPRI, r3
 8012742:	f3bf 8f6f 	isb	sy
 8012746:	f3bf 8f4f 	dsb	sy
 801274a:	60bb      	str	r3, [r7, #8]
}
 801274c:	bf00      	nop
 801274e:	bf00      	nop
 8012750:	e7fd      	b.n	801274e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012752:	4b17      	ldr	r3, [pc, #92]	@ (80127b0 <xPortStartScheduler+0xd8>)
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	021b      	lsls	r3, r3, #8
 8012758:	4a15      	ldr	r2, [pc, #84]	@ (80127b0 <xPortStartScheduler+0xd8>)
 801275a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801275c:	4b14      	ldr	r3, [pc, #80]	@ (80127b0 <xPortStartScheduler+0xd8>)
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012764:	4a12      	ldr	r2, [pc, #72]	@ (80127b0 <xPortStartScheduler+0xd8>)
 8012766:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	b2da      	uxtb	r2, r3
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012770:	4b10      	ldr	r3, [pc, #64]	@ (80127b4 <xPortStartScheduler+0xdc>)
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	4a0f      	ldr	r2, [pc, #60]	@ (80127b4 <xPortStartScheduler+0xdc>)
 8012776:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801277a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801277c:	4b0d      	ldr	r3, [pc, #52]	@ (80127b4 <xPortStartScheduler+0xdc>)
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	4a0c      	ldr	r2, [pc, #48]	@ (80127b4 <xPortStartScheduler+0xdc>)
 8012782:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012786:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012788:	f000 f8b8 	bl	80128fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801278c:	4b0a      	ldr	r3, [pc, #40]	@ (80127b8 <xPortStartScheduler+0xe0>)
 801278e:	2200      	movs	r2, #0
 8012790:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012792:	f7ff ff91 	bl	80126b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012796:	f7ff fa57 	bl	8011c48 <vTaskSwitchContext>
	prvTaskExitError();
 801279a:	f7ff ff47 	bl	801262c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801279e:	2300      	movs	r3, #0
}
 80127a0:	4618      	mov	r0, r3
 80127a2:	3710      	adds	r7, #16
 80127a4:	46bd      	mov	sp, r7
 80127a6:	bd80      	pop	{r7, pc}
 80127a8:	e000e400 	.word	0xe000e400
 80127ac:	20001410 	.word	0x20001410
 80127b0:	20001414 	.word	0x20001414
 80127b4:	e000ed20 	.word	0xe000ed20
 80127b8:	20000040 	.word	0x20000040

080127bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80127bc:	b480      	push	{r7}
 80127be:	b083      	sub	sp, #12
 80127c0:	af00      	add	r7, sp, #0
	__asm volatile
 80127c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127c6:	f383 8811 	msr	BASEPRI, r3
 80127ca:	f3bf 8f6f 	isb	sy
 80127ce:	f3bf 8f4f 	dsb	sy
 80127d2:	607b      	str	r3, [r7, #4]
}
 80127d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80127d6:	4b0f      	ldr	r3, [pc, #60]	@ (8012814 <vPortEnterCritical+0x58>)
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	3301      	adds	r3, #1
 80127dc:	4a0d      	ldr	r2, [pc, #52]	@ (8012814 <vPortEnterCritical+0x58>)
 80127de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80127e0:	4b0c      	ldr	r3, [pc, #48]	@ (8012814 <vPortEnterCritical+0x58>)
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	2b01      	cmp	r3, #1
 80127e6:	d110      	bne.n	801280a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80127e8:	4b0b      	ldr	r3, [pc, #44]	@ (8012818 <vPortEnterCritical+0x5c>)
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	b2db      	uxtb	r3, r3
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d00b      	beq.n	801280a <vPortEnterCritical+0x4e>
	__asm volatile
 80127f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127f6:	f383 8811 	msr	BASEPRI, r3
 80127fa:	f3bf 8f6f 	isb	sy
 80127fe:	f3bf 8f4f 	dsb	sy
 8012802:	603b      	str	r3, [r7, #0]
}
 8012804:	bf00      	nop
 8012806:	bf00      	nop
 8012808:	e7fd      	b.n	8012806 <vPortEnterCritical+0x4a>
	}
}
 801280a:	bf00      	nop
 801280c:	370c      	adds	r7, #12
 801280e:	46bd      	mov	sp, r7
 8012810:	bc80      	pop	{r7}
 8012812:	4770      	bx	lr
 8012814:	20000040 	.word	0x20000040
 8012818:	e000ed04 	.word	0xe000ed04

0801281c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801281c:	b480      	push	{r7}
 801281e:	b083      	sub	sp, #12
 8012820:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012822:	4b12      	ldr	r3, [pc, #72]	@ (801286c <vPortExitCritical+0x50>)
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d10b      	bne.n	8012842 <vPortExitCritical+0x26>
	__asm volatile
 801282a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801282e:	f383 8811 	msr	BASEPRI, r3
 8012832:	f3bf 8f6f 	isb	sy
 8012836:	f3bf 8f4f 	dsb	sy
 801283a:	607b      	str	r3, [r7, #4]
}
 801283c:	bf00      	nop
 801283e:	bf00      	nop
 8012840:	e7fd      	b.n	801283e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012842:	4b0a      	ldr	r3, [pc, #40]	@ (801286c <vPortExitCritical+0x50>)
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	3b01      	subs	r3, #1
 8012848:	4a08      	ldr	r2, [pc, #32]	@ (801286c <vPortExitCritical+0x50>)
 801284a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801284c:	4b07      	ldr	r3, [pc, #28]	@ (801286c <vPortExitCritical+0x50>)
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d105      	bne.n	8012860 <vPortExitCritical+0x44>
 8012854:	2300      	movs	r3, #0
 8012856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	f383 8811 	msr	BASEPRI, r3
}
 801285e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012860:	bf00      	nop
 8012862:	370c      	adds	r7, #12
 8012864:	46bd      	mov	sp, r7
 8012866:	bc80      	pop	{r7}
 8012868:	4770      	bx	lr
 801286a:	bf00      	nop
 801286c:	20000040 	.word	0x20000040

08012870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012870:	f3ef 8009 	mrs	r0, PSP
 8012874:	f3bf 8f6f 	isb	sy
 8012878:	4b0d      	ldr	r3, [pc, #52]	@ (80128b0 <pxCurrentTCBConst>)
 801287a:	681a      	ldr	r2, [r3, #0]
 801287c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8012880:	6010      	str	r0, [r2, #0]
 8012882:	e92d 4008 	stmdb	sp!, {r3, lr}
 8012886:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801288a:	f380 8811 	msr	BASEPRI, r0
 801288e:	f7ff f9db 	bl	8011c48 <vTaskSwitchContext>
 8012892:	f04f 0000 	mov.w	r0, #0
 8012896:	f380 8811 	msr	BASEPRI, r0
 801289a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801289e:	6819      	ldr	r1, [r3, #0]
 80128a0:	6808      	ldr	r0, [r1, #0]
 80128a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80128a6:	f380 8809 	msr	PSP, r0
 80128aa:	f3bf 8f6f 	isb	sy
 80128ae:	4770      	bx	lr

080128b0 <pxCurrentTCBConst>:
 80128b0:	200012e4 	.word	0x200012e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80128b4:	bf00      	nop
 80128b6:	bf00      	nop

080128b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b082      	sub	sp, #8
 80128bc:	af00      	add	r7, sp, #0
	__asm volatile
 80128be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128c2:	f383 8811 	msr	BASEPRI, r3
 80128c6:	f3bf 8f6f 	isb	sy
 80128ca:	f3bf 8f4f 	dsb	sy
 80128ce:	607b      	str	r3, [r7, #4]
}
 80128d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80128d2:	f7ff f8fb 	bl	8011acc <xTaskIncrementTick>
 80128d6:	4603      	mov	r3, r0
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d003      	beq.n	80128e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80128dc:	4b06      	ldr	r3, [pc, #24]	@ (80128f8 <SysTick_Handler+0x40>)
 80128de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80128e2:	601a      	str	r2, [r3, #0]
 80128e4:	2300      	movs	r3, #0
 80128e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	f383 8811 	msr	BASEPRI, r3
}
 80128ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80128f0:	bf00      	nop
 80128f2:	3708      	adds	r7, #8
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}
 80128f8:	e000ed04 	.word	0xe000ed04

080128fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80128fc:	b480      	push	{r7}
 80128fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012900:	4b0a      	ldr	r3, [pc, #40]	@ (801292c <vPortSetupTimerInterrupt+0x30>)
 8012902:	2200      	movs	r2, #0
 8012904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012906:	4b0a      	ldr	r3, [pc, #40]	@ (8012930 <vPortSetupTimerInterrupt+0x34>)
 8012908:	2200      	movs	r2, #0
 801290a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801290c:	4b09      	ldr	r3, [pc, #36]	@ (8012934 <vPortSetupTimerInterrupt+0x38>)
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	4a09      	ldr	r2, [pc, #36]	@ (8012938 <vPortSetupTimerInterrupt+0x3c>)
 8012912:	fba2 2303 	umull	r2, r3, r2, r3
 8012916:	099b      	lsrs	r3, r3, #6
 8012918:	4a08      	ldr	r2, [pc, #32]	@ (801293c <vPortSetupTimerInterrupt+0x40>)
 801291a:	3b01      	subs	r3, #1
 801291c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801291e:	4b03      	ldr	r3, [pc, #12]	@ (801292c <vPortSetupTimerInterrupt+0x30>)
 8012920:	2207      	movs	r2, #7
 8012922:	601a      	str	r2, [r3, #0]
}
 8012924:	bf00      	nop
 8012926:	46bd      	mov	sp, r7
 8012928:	bc80      	pop	{r7}
 801292a:	4770      	bx	lr
 801292c:	e000e010 	.word	0xe000e010
 8012930:	e000e018 	.word	0xe000e018
 8012934:	20000028 	.word	0x20000028
 8012938:	10624dd3 	.word	0x10624dd3
 801293c:	e000e014 	.word	0xe000e014

08012940 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012940:	b480      	push	{r7}
 8012942:	b085      	sub	sp, #20
 8012944:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012946:	f3ef 8305 	mrs	r3, IPSR
 801294a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	2b0f      	cmp	r3, #15
 8012950:	d915      	bls.n	801297e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012952:	4a17      	ldr	r2, [pc, #92]	@ (80129b0 <vPortValidateInterruptPriority+0x70>)
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	4413      	add	r3, r2
 8012958:	781b      	ldrb	r3, [r3, #0]
 801295a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801295c:	4b15      	ldr	r3, [pc, #84]	@ (80129b4 <vPortValidateInterruptPriority+0x74>)
 801295e:	781b      	ldrb	r3, [r3, #0]
 8012960:	7afa      	ldrb	r2, [r7, #11]
 8012962:	429a      	cmp	r2, r3
 8012964:	d20b      	bcs.n	801297e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8012966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801296a:	f383 8811 	msr	BASEPRI, r3
 801296e:	f3bf 8f6f 	isb	sy
 8012972:	f3bf 8f4f 	dsb	sy
 8012976:	607b      	str	r3, [r7, #4]
}
 8012978:	bf00      	nop
 801297a:	bf00      	nop
 801297c:	e7fd      	b.n	801297a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801297e:	4b0e      	ldr	r3, [pc, #56]	@ (80129b8 <vPortValidateInterruptPriority+0x78>)
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8012986:	4b0d      	ldr	r3, [pc, #52]	@ (80129bc <vPortValidateInterruptPriority+0x7c>)
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	429a      	cmp	r2, r3
 801298c:	d90b      	bls.n	80129a6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 801298e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012992:	f383 8811 	msr	BASEPRI, r3
 8012996:	f3bf 8f6f 	isb	sy
 801299a:	f3bf 8f4f 	dsb	sy
 801299e:	603b      	str	r3, [r7, #0]
}
 80129a0:	bf00      	nop
 80129a2:	bf00      	nop
 80129a4:	e7fd      	b.n	80129a2 <vPortValidateInterruptPriority+0x62>
	}
 80129a6:	bf00      	nop
 80129a8:	3714      	adds	r7, #20
 80129aa:	46bd      	mov	sp, r7
 80129ac:	bc80      	pop	{r7}
 80129ae:	4770      	bx	lr
 80129b0:	e000e3f0 	.word	0xe000e3f0
 80129b4:	20001410 	.word	0x20001410
 80129b8:	e000ed0c 	.word	0xe000ed0c
 80129bc:	20001414 	.word	0x20001414

080129c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b08a      	sub	sp, #40	@ 0x28
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80129c8:	2300      	movs	r3, #0
 80129ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80129cc:	f7fe ffc4 	bl	8011958 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80129d0:	4b5a      	ldr	r3, [pc, #360]	@ (8012b3c <pvPortMalloc+0x17c>)
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d101      	bne.n	80129dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80129d8:	f000 f916 	bl	8012c08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80129dc:	4b58      	ldr	r3, [pc, #352]	@ (8012b40 <pvPortMalloc+0x180>)
 80129de:	681a      	ldr	r2, [r3, #0]
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	4013      	ands	r3, r2
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	f040 8090 	bne.w	8012b0a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d01e      	beq.n	8012a2e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80129f0:	2208      	movs	r2, #8
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	4413      	add	r3, r2
 80129f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	f003 0307 	and.w	r3, r3, #7
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d015      	beq.n	8012a2e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	f023 0307 	bic.w	r3, r3, #7
 8012a08:	3308      	adds	r3, #8
 8012a0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	f003 0307 	and.w	r3, r3, #7
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d00b      	beq.n	8012a2e <pvPortMalloc+0x6e>
	__asm volatile
 8012a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a1a:	f383 8811 	msr	BASEPRI, r3
 8012a1e:	f3bf 8f6f 	isb	sy
 8012a22:	f3bf 8f4f 	dsb	sy
 8012a26:	617b      	str	r3, [r7, #20]
}
 8012a28:	bf00      	nop
 8012a2a:	bf00      	nop
 8012a2c:	e7fd      	b.n	8012a2a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d06a      	beq.n	8012b0a <pvPortMalloc+0x14a>
 8012a34:	4b43      	ldr	r3, [pc, #268]	@ (8012b44 <pvPortMalloc+0x184>)
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	687a      	ldr	r2, [r7, #4]
 8012a3a:	429a      	cmp	r2, r3
 8012a3c:	d865      	bhi.n	8012b0a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012a3e:	4b42      	ldr	r3, [pc, #264]	@ (8012b48 <pvPortMalloc+0x188>)
 8012a40:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012a42:	4b41      	ldr	r3, [pc, #260]	@ (8012b48 <pvPortMalloc+0x188>)
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012a48:	e004      	b.n	8012a54 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a4c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a56:	685b      	ldr	r3, [r3, #4]
 8012a58:	687a      	ldr	r2, [r7, #4]
 8012a5a:	429a      	cmp	r2, r3
 8012a5c:	d903      	bls.n	8012a66 <pvPortMalloc+0xa6>
 8012a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d1f1      	bne.n	8012a4a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012a66:	4b35      	ldr	r3, [pc, #212]	@ (8012b3c <pvPortMalloc+0x17c>)
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	d04c      	beq.n	8012b0a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012a70:	6a3b      	ldr	r3, [r7, #32]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	2208      	movs	r2, #8
 8012a76:	4413      	add	r3, r2
 8012a78:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a7c:	681a      	ldr	r2, [r3, #0]
 8012a7e:	6a3b      	ldr	r3, [r7, #32]
 8012a80:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a84:	685a      	ldr	r2, [r3, #4]
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	1ad2      	subs	r2, r2, r3
 8012a8a:	2308      	movs	r3, #8
 8012a8c:	005b      	lsls	r3, r3, #1
 8012a8e:	429a      	cmp	r2, r3
 8012a90:	d920      	bls.n	8012ad4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	4413      	add	r3, r2
 8012a98:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012a9a:	69bb      	ldr	r3, [r7, #24]
 8012a9c:	f003 0307 	and.w	r3, r3, #7
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d00b      	beq.n	8012abc <pvPortMalloc+0xfc>
	__asm volatile
 8012aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012aa8:	f383 8811 	msr	BASEPRI, r3
 8012aac:	f3bf 8f6f 	isb	sy
 8012ab0:	f3bf 8f4f 	dsb	sy
 8012ab4:	613b      	str	r3, [r7, #16]
}
 8012ab6:	bf00      	nop
 8012ab8:	bf00      	nop
 8012aba:	e7fd      	b.n	8012ab8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012abe:	685a      	ldr	r2, [r3, #4]
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	1ad2      	subs	r2, r2, r3
 8012ac4:	69bb      	ldr	r3, [r7, #24]
 8012ac6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012aca:	687a      	ldr	r2, [r7, #4]
 8012acc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012ace:	69b8      	ldr	r0, [r7, #24]
 8012ad0:	f000 f8fc 	bl	8012ccc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8012b44 <pvPortMalloc+0x184>)
 8012ad6:	681a      	ldr	r2, [r3, #0]
 8012ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ada:	685b      	ldr	r3, [r3, #4]
 8012adc:	1ad3      	subs	r3, r2, r3
 8012ade:	4a19      	ldr	r2, [pc, #100]	@ (8012b44 <pvPortMalloc+0x184>)
 8012ae0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012ae2:	4b18      	ldr	r3, [pc, #96]	@ (8012b44 <pvPortMalloc+0x184>)
 8012ae4:	681a      	ldr	r2, [r3, #0]
 8012ae6:	4b19      	ldr	r3, [pc, #100]	@ (8012b4c <pvPortMalloc+0x18c>)
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	429a      	cmp	r2, r3
 8012aec:	d203      	bcs.n	8012af6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012aee:	4b15      	ldr	r3, [pc, #84]	@ (8012b44 <pvPortMalloc+0x184>)
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	4a16      	ldr	r2, [pc, #88]	@ (8012b4c <pvPortMalloc+0x18c>)
 8012af4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012af8:	685a      	ldr	r2, [r3, #4]
 8012afa:	4b11      	ldr	r3, [pc, #68]	@ (8012b40 <pvPortMalloc+0x180>)
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	431a      	orrs	r2, r3
 8012b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b02:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b06:	2200      	movs	r2, #0
 8012b08:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012b0a:	f7fe ff33 	bl	8011974 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012b0e:	69fb      	ldr	r3, [r7, #28]
 8012b10:	f003 0307 	and.w	r3, r3, #7
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d00b      	beq.n	8012b30 <pvPortMalloc+0x170>
	__asm volatile
 8012b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b1c:	f383 8811 	msr	BASEPRI, r3
 8012b20:	f3bf 8f6f 	isb	sy
 8012b24:	f3bf 8f4f 	dsb	sy
 8012b28:	60fb      	str	r3, [r7, #12]
}
 8012b2a:	bf00      	nop
 8012b2c:	bf00      	nop
 8012b2e:	e7fd      	b.n	8012b2c <pvPortMalloc+0x16c>
	return pvReturn;
 8012b30:	69fb      	ldr	r3, [r7, #28]
}
 8012b32:	4618      	mov	r0, r3
 8012b34:	3728      	adds	r7, #40	@ 0x28
 8012b36:	46bd      	mov	sp, r7
 8012b38:	bd80      	pop	{r7, pc}
 8012b3a:	bf00      	nop
 8012b3c:	20002c20 	.word	0x20002c20
 8012b40:	20002c2c 	.word	0x20002c2c
 8012b44:	20002c24 	.word	0x20002c24
 8012b48:	20002c18 	.word	0x20002c18
 8012b4c:	20002c28 	.word	0x20002c28

08012b50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b086      	sub	sp, #24
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d04a      	beq.n	8012bf8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012b62:	2308      	movs	r3, #8
 8012b64:	425b      	negs	r3, r3
 8012b66:	697a      	ldr	r2, [r7, #20]
 8012b68:	4413      	add	r3, r2
 8012b6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012b6c:	697b      	ldr	r3, [r7, #20]
 8012b6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012b70:	693b      	ldr	r3, [r7, #16]
 8012b72:	685a      	ldr	r2, [r3, #4]
 8012b74:	4b22      	ldr	r3, [pc, #136]	@ (8012c00 <vPortFree+0xb0>)
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	4013      	ands	r3, r2
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d10b      	bne.n	8012b96 <vPortFree+0x46>
	__asm volatile
 8012b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b82:	f383 8811 	msr	BASEPRI, r3
 8012b86:	f3bf 8f6f 	isb	sy
 8012b8a:	f3bf 8f4f 	dsb	sy
 8012b8e:	60fb      	str	r3, [r7, #12]
}
 8012b90:	bf00      	nop
 8012b92:	bf00      	nop
 8012b94:	e7fd      	b.n	8012b92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012b96:	693b      	ldr	r3, [r7, #16]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d00b      	beq.n	8012bb6 <vPortFree+0x66>
	__asm volatile
 8012b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ba2:	f383 8811 	msr	BASEPRI, r3
 8012ba6:	f3bf 8f6f 	isb	sy
 8012baa:	f3bf 8f4f 	dsb	sy
 8012bae:	60bb      	str	r3, [r7, #8]
}
 8012bb0:	bf00      	nop
 8012bb2:	bf00      	nop
 8012bb4:	e7fd      	b.n	8012bb2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012bb6:	693b      	ldr	r3, [r7, #16]
 8012bb8:	685a      	ldr	r2, [r3, #4]
 8012bba:	4b11      	ldr	r3, [pc, #68]	@ (8012c00 <vPortFree+0xb0>)
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	4013      	ands	r3, r2
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d019      	beq.n	8012bf8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012bc4:	693b      	ldr	r3, [r7, #16]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d115      	bne.n	8012bf8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012bcc:	693b      	ldr	r3, [r7, #16]
 8012bce:	685a      	ldr	r2, [r3, #4]
 8012bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8012c00 <vPortFree+0xb0>)
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	43db      	mvns	r3, r3
 8012bd6:	401a      	ands	r2, r3
 8012bd8:	693b      	ldr	r3, [r7, #16]
 8012bda:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012bdc:	f7fe febc 	bl	8011958 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012be0:	693b      	ldr	r3, [r7, #16]
 8012be2:	685a      	ldr	r2, [r3, #4]
 8012be4:	4b07      	ldr	r3, [pc, #28]	@ (8012c04 <vPortFree+0xb4>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	4413      	add	r3, r2
 8012bea:	4a06      	ldr	r2, [pc, #24]	@ (8012c04 <vPortFree+0xb4>)
 8012bec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012bee:	6938      	ldr	r0, [r7, #16]
 8012bf0:	f000 f86c 	bl	8012ccc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012bf4:	f7fe febe 	bl	8011974 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012bf8:	bf00      	nop
 8012bfa:	3718      	adds	r7, #24
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}
 8012c00:	20002c2c 	.word	0x20002c2c
 8012c04:	20002c24 	.word	0x20002c24

08012c08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012c08:	b480      	push	{r7}
 8012c0a:	b085      	sub	sp, #20
 8012c0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012c0e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8012c12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012c14:	4b27      	ldr	r3, [pc, #156]	@ (8012cb4 <prvHeapInit+0xac>)
 8012c16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	f003 0307 	and.w	r3, r3, #7
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d00c      	beq.n	8012c3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	3307      	adds	r3, #7
 8012c26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	f023 0307 	bic.w	r3, r3, #7
 8012c2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012c30:	68ba      	ldr	r2, [r7, #8]
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	1ad3      	subs	r3, r2, r3
 8012c36:	4a1f      	ldr	r2, [pc, #124]	@ (8012cb4 <prvHeapInit+0xac>)
 8012c38:	4413      	add	r3, r2
 8012c3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012c40:	4a1d      	ldr	r2, [pc, #116]	@ (8012cb8 <prvHeapInit+0xb0>)
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012c46:	4b1c      	ldr	r3, [pc, #112]	@ (8012cb8 <prvHeapInit+0xb0>)
 8012c48:	2200      	movs	r2, #0
 8012c4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	68ba      	ldr	r2, [r7, #8]
 8012c50:	4413      	add	r3, r2
 8012c52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012c54:	2208      	movs	r2, #8
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	1a9b      	subs	r3, r3, r2
 8012c5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	f023 0307 	bic.w	r3, r3, #7
 8012c62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	4a15      	ldr	r2, [pc, #84]	@ (8012cbc <prvHeapInit+0xb4>)
 8012c68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012c6a:	4b14      	ldr	r3, [pc, #80]	@ (8012cbc <prvHeapInit+0xb4>)
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	2200      	movs	r2, #0
 8012c70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012c72:	4b12      	ldr	r3, [pc, #72]	@ (8012cbc <prvHeapInit+0xb4>)
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	2200      	movs	r2, #0
 8012c78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012c7e:	683b      	ldr	r3, [r7, #0]
 8012c80:	68fa      	ldr	r2, [r7, #12]
 8012c82:	1ad2      	subs	r2, r2, r3
 8012c84:	683b      	ldr	r3, [r7, #0]
 8012c86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012c88:	4b0c      	ldr	r3, [pc, #48]	@ (8012cbc <prvHeapInit+0xb4>)
 8012c8a:	681a      	ldr	r2, [r3, #0]
 8012c8c:	683b      	ldr	r3, [r7, #0]
 8012c8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012c90:	683b      	ldr	r3, [r7, #0]
 8012c92:	685b      	ldr	r3, [r3, #4]
 8012c94:	4a0a      	ldr	r2, [pc, #40]	@ (8012cc0 <prvHeapInit+0xb8>)
 8012c96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012c98:	683b      	ldr	r3, [r7, #0]
 8012c9a:	685b      	ldr	r3, [r3, #4]
 8012c9c:	4a09      	ldr	r2, [pc, #36]	@ (8012cc4 <prvHeapInit+0xbc>)
 8012c9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012ca0:	4b09      	ldr	r3, [pc, #36]	@ (8012cc8 <prvHeapInit+0xc0>)
 8012ca2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8012ca6:	601a      	str	r2, [r3, #0]
}
 8012ca8:	bf00      	nop
 8012caa:	3714      	adds	r7, #20
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bc80      	pop	{r7}
 8012cb0:	4770      	bx	lr
 8012cb2:	bf00      	nop
 8012cb4:	20001418 	.word	0x20001418
 8012cb8:	20002c18 	.word	0x20002c18
 8012cbc:	20002c20 	.word	0x20002c20
 8012cc0:	20002c28 	.word	0x20002c28
 8012cc4:	20002c24 	.word	0x20002c24
 8012cc8:	20002c2c 	.word	0x20002c2c

08012ccc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012ccc:	b480      	push	{r7}
 8012cce:	b085      	sub	sp, #20
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012cd4:	4b27      	ldr	r3, [pc, #156]	@ (8012d74 <prvInsertBlockIntoFreeList+0xa8>)
 8012cd6:	60fb      	str	r3, [r7, #12]
 8012cd8:	e002      	b.n	8012ce0 <prvInsertBlockIntoFreeList+0x14>
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	60fb      	str	r3, [r7, #12]
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	687a      	ldr	r2, [r7, #4]
 8012ce6:	429a      	cmp	r2, r3
 8012ce8:	d8f7      	bhi.n	8012cda <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	685b      	ldr	r3, [r3, #4]
 8012cf2:	68ba      	ldr	r2, [r7, #8]
 8012cf4:	4413      	add	r3, r2
 8012cf6:	687a      	ldr	r2, [r7, #4]
 8012cf8:	429a      	cmp	r2, r3
 8012cfa:	d108      	bne.n	8012d0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	685a      	ldr	r2, [r3, #4]
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	685b      	ldr	r3, [r3, #4]
 8012d04:	441a      	add	r2, r3
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	685b      	ldr	r3, [r3, #4]
 8012d16:	68ba      	ldr	r2, [r7, #8]
 8012d18:	441a      	add	r2, r3
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	429a      	cmp	r2, r3
 8012d20:	d118      	bne.n	8012d54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	681a      	ldr	r2, [r3, #0]
 8012d26:	4b14      	ldr	r3, [pc, #80]	@ (8012d78 <prvInsertBlockIntoFreeList+0xac>)
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	429a      	cmp	r2, r3
 8012d2c:	d00d      	beq.n	8012d4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	685a      	ldr	r2, [r3, #4]
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	685b      	ldr	r3, [r3, #4]
 8012d38:	441a      	add	r2, r3
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	681a      	ldr	r2, [r3, #0]
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	601a      	str	r2, [r3, #0]
 8012d48:	e008      	b.n	8012d5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8012d78 <prvInsertBlockIntoFreeList+0xac>)
 8012d4c:	681a      	ldr	r2, [r3, #0]
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	601a      	str	r2, [r3, #0]
 8012d52:	e003      	b.n	8012d5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	681a      	ldr	r2, [r3, #0]
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012d5c:	68fa      	ldr	r2, [r7, #12]
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	429a      	cmp	r2, r3
 8012d62:	d002      	beq.n	8012d6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	687a      	ldr	r2, [r7, #4]
 8012d68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012d6a:	bf00      	nop
 8012d6c:	3714      	adds	r7, #20
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	bc80      	pop	{r7}
 8012d72:	4770      	bx	lr
 8012d74:	20002c18 	.word	0x20002c18
 8012d78:	20002c20 	.word	0x20002c20

08012d7c <calloc>:
 8012d7c:	4b02      	ldr	r3, [pc, #8]	@ (8012d88 <calloc+0xc>)
 8012d7e:	460a      	mov	r2, r1
 8012d80:	4601      	mov	r1, r0
 8012d82:	6818      	ldr	r0, [r3, #0]
 8012d84:	f000 b802 	b.w	8012d8c <_calloc_r>
 8012d88:	20000044 	.word	0x20000044

08012d8c <_calloc_r>:
 8012d8c:	b570      	push	{r4, r5, r6, lr}
 8012d8e:	fba1 5402 	umull	r5, r4, r1, r2
 8012d92:	b93c      	cbnz	r4, 8012da4 <_calloc_r+0x18>
 8012d94:	4629      	mov	r1, r5
 8012d96:	f000 f82f 	bl	8012df8 <_malloc_r>
 8012d9a:	4606      	mov	r6, r0
 8012d9c:	b928      	cbnz	r0, 8012daa <_calloc_r+0x1e>
 8012d9e:	2600      	movs	r6, #0
 8012da0:	4630      	mov	r0, r6
 8012da2:	bd70      	pop	{r4, r5, r6, pc}
 8012da4:	220c      	movs	r2, #12
 8012da6:	6002      	str	r2, [r0, #0]
 8012da8:	e7f9      	b.n	8012d9e <_calloc_r+0x12>
 8012daa:	462a      	mov	r2, r5
 8012dac:	4621      	mov	r1, r4
 8012dae:	f000 f8af 	bl	8012f10 <memset>
 8012db2:	e7f5      	b.n	8012da0 <_calloc_r+0x14>

08012db4 <sbrk_aligned>:
 8012db4:	b570      	push	{r4, r5, r6, lr}
 8012db6:	4e0f      	ldr	r6, [pc, #60]	@ (8012df4 <sbrk_aligned+0x40>)
 8012db8:	460c      	mov	r4, r1
 8012dba:	6831      	ldr	r1, [r6, #0]
 8012dbc:	4605      	mov	r5, r0
 8012dbe:	b911      	cbnz	r1, 8012dc6 <sbrk_aligned+0x12>
 8012dc0:	f000 f8ae 	bl	8012f20 <_sbrk_r>
 8012dc4:	6030      	str	r0, [r6, #0]
 8012dc6:	4621      	mov	r1, r4
 8012dc8:	4628      	mov	r0, r5
 8012dca:	f000 f8a9 	bl	8012f20 <_sbrk_r>
 8012dce:	1c43      	adds	r3, r0, #1
 8012dd0:	d103      	bne.n	8012dda <sbrk_aligned+0x26>
 8012dd2:	f04f 34ff 	mov.w	r4, #4294967295
 8012dd6:	4620      	mov	r0, r4
 8012dd8:	bd70      	pop	{r4, r5, r6, pc}
 8012dda:	1cc4      	adds	r4, r0, #3
 8012ddc:	f024 0403 	bic.w	r4, r4, #3
 8012de0:	42a0      	cmp	r0, r4
 8012de2:	d0f8      	beq.n	8012dd6 <sbrk_aligned+0x22>
 8012de4:	1a21      	subs	r1, r4, r0
 8012de6:	4628      	mov	r0, r5
 8012de8:	f000 f89a 	bl	8012f20 <_sbrk_r>
 8012dec:	3001      	adds	r0, #1
 8012dee:	d1f2      	bne.n	8012dd6 <sbrk_aligned+0x22>
 8012df0:	e7ef      	b.n	8012dd2 <sbrk_aligned+0x1e>
 8012df2:	bf00      	nop
 8012df4:	20002c30 	.word	0x20002c30

08012df8 <_malloc_r>:
 8012df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012dfc:	1ccd      	adds	r5, r1, #3
 8012dfe:	f025 0503 	bic.w	r5, r5, #3
 8012e02:	3508      	adds	r5, #8
 8012e04:	2d0c      	cmp	r5, #12
 8012e06:	bf38      	it	cc
 8012e08:	250c      	movcc	r5, #12
 8012e0a:	2d00      	cmp	r5, #0
 8012e0c:	4606      	mov	r6, r0
 8012e0e:	db01      	blt.n	8012e14 <_malloc_r+0x1c>
 8012e10:	42a9      	cmp	r1, r5
 8012e12:	d904      	bls.n	8012e1e <_malloc_r+0x26>
 8012e14:	230c      	movs	r3, #12
 8012e16:	6033      	str	r3, [r6, #0]
 8012e18:	2000      	movs	r0, #0
 8012e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012ef4 <_malloc_r+0xfc>
 8012e22:	f000 f869 	bl	8012ef8 <__malloc_lock>
 8012e26:	f8d8 3000 	ldr.w	r3, [r8]
 8012e2a:	461c      	mov	r4, r3
 8012e2c:	bb44      	cbnz	r4, 8012e80 <_malloc_r+0x88>
 8012e2e:	4629      	mov	r1, r5
 8012e30:	4630      	mov	r0, r6
 8012e32:	f7ff ffbf 	bl	8012db4 <sbrk_aligned>
 8012e36:	1c43      	adds	r3, r0, #1
 8012e38:	4604      	mov	r4, r0
 8012e3a:	d158      	bne.n	8012eee <_malloc_r+0xf6>
 8012e3c:	f8d8 4000 	ldr.w	r4, [r8]
 8012e40:	4627      	mov	r7, r4
 8012e42:	2f00      	cmp	r7, #0
 8012e44:	d143      	bne.n	8012ece <_malloc_r+0xd6>
 8012e46:	2c00      	cmp	r4, #0
 8012e48:	d04b      	beq.n	8012ee2 <_malloc_r+0xea>
 8012e4a:	6823      	ldr	r3, [r4, #0]
 8012e4c:	4639      	mov	r1, r7
 8012e4e:	4630      	mov	r0, r6
 8012e50:	eb04 0903 	add.w	r9, r4, r3
 8012e54:	f000 f864 	bl	8012f20 <_sbrk_r>
 8012e58:	4581      	cmp	r9, r0
 8012e5a:	d142      	bne.n	8012ee2 <_malloc_r+0xea>
 8012e5c:	6821      	ldr	r1, [r4, #0]
 8012e5e:	4630      	mov	r0, r6
 8012e60:	1a6d      	subs	r5, r5, r1
 8012e62:	4629      	mov	r1, r5
 8012e64:	f7ff ffa6 	bl	8012db4 <sbrk_aligned>
 8012e68:	3001      	adds	r0, #1
 8012e6a:	d03a      	beq.n	8012ee2 <_malloc_r+0xea>
 8012e6c:	6823      	ldr	r3, [r4, #0]
 8012e6e:	442b      	add	r3, r5
 8012e70:	6023      	str	r3, [r4, #0]
 8012e72:	f8d8 3000 	ldr.w	r3, [r8]
 8012e76:	685a      	ldr	r2, [r3, #4]
 8012e78:	bb62      	cbnz	r2, 8012ed4 <_malloc_r+0xdc>
 8012e7a:	f8c8 7000 	str.w	r7, [r8]
 8012e7e:	e00f      	b.n	8012ea0 <_malloc_r+0xa8>
 8012e80:	6822      	ldr	r2, [r4, #0]
 8012e82:	1b52      	subs	r2, r2, r5
 8012e84:	d420      	bmi.n	8012ec8 <_malloc_r+0xd0>
 8012e86:	2a0b      	cmp	r2, #11
 8012e88:	d917      	bls.n	8012eba <_malloc_r+0xc2>
 8012e8a:	1961      	adds	r1, r4, r5
 8012e8c:	42a3      	cmp	r3, r4
 8012e8e:	6025      	str	r5, [r4, #0]
 8012e90:	bf18      	it	ne
 8012e92:	6059      	strne	r1, [r3, #4]
 8012e94:	6863      	ldr	r3, [r4, #4]
 8012e96:	bf08      	it	eq
 8012e98:	f8c8 1000 	streq.w	r1, [r8]
 8012e9c:	5162      	str	r2, [r4, r5]
 8012e9e:	604b      	str	r3, [r1, #4]
 8012ea0:	4630      	mov	r0, r6
 8012ea2:	f000 f82f 	bl	8012f04 <__malloc_unlock>
 8012ea6:	f104 000b 	add.w	r0, r4, #11
 8012eaa:	1d23      	adds	r3, r4, #4
 8012eac:	f020 0007 	bic.w	r0, r0, #7
 8012eb0:	1ac2      	subs	r2, r0, r3
 8012eb2:	bf1c      	itt	ne
 8012eb4:	1a1b      	subne	r3, r3, r0
 8012eb6:	50a3      	strne	r3, [r4, r2]
 8012eb8:	e7af      	b.n	8012e1a <_malloc_r+0x22>
 8012eba:	6862      	ldr	r2, [r4, #4]
 8012ebc:	42a3      	cmp	r3, r4
 8012ebe:	bf0c      	ite	eq
 8012ec0:	f8c8 2000 	streq.w	r2, [r8]
 8012ec4:	605a      	strne	r2, [r3, #4]
 8012ec6:	e7eb      	b.n	8012ea0 <_malloc_r+0xa8>
 8012ec8:	4623      	mov	r3, r4
 8012eca:	6864      	ldr	r4, [r4, #4]
 8012ecc:	e7ae      	b.n	8012e2c <_malloc_r+0x34>
 8012ece:	463c      	mov	r4, r7
 8012ed0:	687f      	ldr	r7, [r7, #4]
 8012ed2:	e7b6      	b.n	8012e42 <_malloc_r+0x4a>
 8012ed4:	461a      	mov	r2, r3
 8012ed6:	685b      	ldr	r3, [r3, #4]
 8012ed8:	42a3      	cmp	r3, r4
 8012eda:	d1fb      	bne.n	8012ed4 <_malloc_r+0xdc>
 8012edc:	2300      	movs	r3, #0
 8012ede:	6053      	str	r3, [r2, #4]
 8012ee0:	e7de      	b.n	8012ea0 <_malloc_r+0xa8>
 8012ee2:	230c      	movs	r3, #12
 8012ee4:	4630      	mov	r0, r6
 8012ee6:	6033      	str	r3, [r6, #0]
 8012ee8:	f000 f80c 	bl	8012f04 <__malloc_unlock>
 8012eec:	e794      	b.n	8012e18 <_malloc_r+0x20>
 8012eee:	6005      	str	r5, [r0, #0]
 8012ef0:	e7d6      	b.n	8012ea0 <_malloc_r+0xa8>
 8012ef2:	bf00      	nop
 8012ef4:	20002c34 	.word	0x20002c34

08012ef8 <__malloc_lock>:
 8012ef8:	4801      	ldr	r0, [pc, #4]	@ (8012f00 <__malloc_lock+0x8>)
 8012efa:	f000 b84b 	b.w	8012f94 <__retarget_lock_acquire_recursive>
 8012efe:	bf00      	nop
 8012f00:	20002d74 	.word	0x20002d74

08012f04 <__malloc_unlock>:
 8012f04:	4801      	ldr	r0, [pc, #4]	@ (8012f0c <__malloc_unlock+0x8>)
 8012f06:	f000 b846 	b.w	8012f96 <__retarget_lock_release_recursive>
 8012f0a:	bf00      	nop
 8012f0c:	20002d74 	.word	0x20002d74

08012f10 <memset>:
 8012f10:	4603      	mov	r3, r0
 8012f12:	4402      	add	r2, r0
 8012f14:	4293      	cmp	r3, r2
 8012f16:	d100      	bne.n	8012f1a <memset+0xa>
 8012f18:	4770      	bx	lr
 8012f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8012f1e:	e7f9      	b.n	8012f14 <memset+0x4>

08012f20 <_sbrk_r>:
 8012f20:	b538      	push	{r3, r4, r5, lr}
 8012f22:	2300      	movs	r3, #0
 8012f24:	4d05      	ldr	r5, [pc, #20]	@ (8012f3c <_sbrk_r+0x1c>)
 8012f26:	4604      	mov	r4, r0
 8012f28:	4608      	mov	r0, r1
 8012f2a:	602b      	str	r3, [r5, #0]
 8012f2c:	f7f1 fd88 	bl	8004a40 <_sbrk>
 8012f30:	1c43      	adds	r3, r0, #1
 8012f32:	d102      	bne.n	8012f3a <_sbrk_r+0x1a>
 8012f34:	682b      	ldr	r3, [r5, #0]
 8012f36:	b103      	cbz	r3, 8012f3a <_sbrk_r+0x1a>
 8012f38:	6023      	str	r3, [r4, #0]
 8012f3a:	bd38      	pop	{r3, r4, r5, pc}
 8012f3c:	20002d70 	.word	0x20002d70

08012f40 <__errno>:
 8012f40:	4b01      	ldr	r3, [pc, #4]	@ (8012f48 <__errno+0x8>)
 8012f42:	6818      	ldr	r0, [r3, #0]
 8012f44:	4770      	bx	lr
 8012f46:	bf00      	nop
 8012f48:	20000044 	.word	0x20000044

08012f4c <__libc_init_array>:
 8012f4c:	b570      	push	{r4, r5, r6, lr}
 8012f4e:	2600      	movs	r6, #0
 8012f50:	4d0c      	ldr	r5, [pc, #48]	@ (8012f84 <__libc_init_array+0x38>)
 8012f52:	4c0d      	ldr	r4, [pc, #52]	@ (8012f88 <__libc_init_array+0x3c>)
 8012f54:	1b64      	subs	r4, r4, r5
 8012f56:	10a4      	asrs	r4, r4, #2
 8012f58:	42a6      	cmp	r6, r4
 8012f5a:	d109      	bne.n	8012f70 <__libc_init_array+0x24>
 8012f5c:	f000 f9ae 	bl	80132bc <_init>
 8012f60:	2600      	movs	r6, #0
 8012f62:	4d0a      	ldr	r5, [pc, #40]	@ (8012f8c <__libc_init_array+0x40>)
 8012f64:	4c0a      	ldr	r4, [pc, #40]	@ (8012f90 <__libc_init_array+0x44>)
 8012f66:	1b64      	subs	r4, r4, r5
 8012f68:	10a4      	asrs	r4, r4, #2
 8012f6a:	42a6      	cmp	r6, r4
 8012f6c:	d105      	bne.n	8012f7a <__libc_init_array+0x2e>
 8012f6e:	bd70      	pop	{r4, r5, r6, pc}
 8012f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f74:	4798      	blx	r3
 8012f76:	3601      	adds	r6, #1
 8012f78:	e7ee      	b.n	8012f58 <__libc_init_array+0xc>
 8012f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f7e:	4798      	blx	r3
 8012f80:	3601      	adds	r6, #1
 8012f82:	e7f2      	b.n	8012f6a <__libc_init_array+0x1e>
 8012f84:	08013a5c 	.word	0x08013a5c
 8012f88:	08013a5c 	.word	0x08013a5c
 8012f8c:	08013a5c 	.word	0x08013a5c
 8012f90:	08013a60 	.word	0x08013a60

08012f94 <__retarget_lock_acquire_recursive>:
 8012f94:	4770      	bx	lr

08012f96 <__retarget_lock_release_recursive>:
 8012f96:	4770      	bx	lr

08012f98 <memcpy>:
 8012f98:	440a      	add	r2, r1
 8012f9a:	4291      	cmp	r1, r2
 8012f9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012fa0:	d100      	bne.n	8012fa4 <memcpy+0xc>
 8012fa2:	4770      	bx	lr
 8012fa4:	b510      	push	{r4, lr}
 8012fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012faa:	4291      	cmp	r1, r2
 8012fac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012fb0:	d1f9      	bne.n	8012fa6 <memcpy+0xe>
 8012fb2:	bd10      	pop	{r4, pc}

08012fb4 <sqrt>:
 8012fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fb6:	4606      	mov	r6, r0
 8012fb8:	460f      	mov	r7, r1
 8012fba:	f000 f839 	bl	8013030 <__ieee754_sqrt>
 8012fbe:	4632      	mov	r2, r6
 8012fc0:	4604      	mov	r4, r0
 8012fc2:	460d      	mov	r5, r1
 8012fc4:	463b      	mov	r3, r7
 8012fc6:	4630      	mov	r0, r6
 8012fc8:	4639      	mov	r1, r7
 8012fca:	f7ed fd87 	bl	8000adc <__aeabi_dcmpun>
 8012fce:	b990      	cbnz	r0, 8012ff6 <sqrt+0x42>
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	4630      	mov	r0, r6
 8012fd6:	4639      	mov	r1, r7
 8012fd8:	f7ed fd58 	bl	8000a8c <__aeabi_dcmplt>
 8012fdc:	b158      	cbz	r0, 8012ff6 <sqrt+0x42>
 8012fde:	f7ff ffaf 	bl	8012f40 <__errno>
 8012fe2:	2321      	movs	r3, #33	@ 0x21
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	6003      	str	r3, [r0, #0]
 8012fe8:	2300      	movs	r3, #0
 8012fea:	4610      	mov	r0, r2
 8012fec:	4619      	mov	r1, r3
 8012fee:	f7ed fc05 	bl	80007fc <__aeabi_ddiv>
 8012ff2:	4604      	mov	r4, r0
 8012ff4:	460d      	mov	r5, r1
 8012ff6:	4620      	mov	r0, r4
 8012ff8:	4629      	mov	r1, r5
 8012ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012ffc <sqrtf>:
 8012ffc:	b538      	push	{r3, r4, r5, lr}
 8012ffe:	4605      	mov	r5, r0
 8013000:	f000 f8ec 	bl	80131dc <__ieee754_sqrtf>
 8013004:	4629      	mov	r1, r5
 8013006:	4604      	mov	r4, r0
 8013008:	4628      	mov	r0, r5
 801300a:	f7ee f8c9 	bl	80011a0 <__aeabi_fcmpun>
 801300e:	b968      	cbnz	r0, 801302c <sqrtf+0x30>
 8013010:	2100      	movs	r1, #0
 8013012:	4628      	mov	r0, r5
 8013014:	f7ee f89c 	bl	8001150 <__aeabi_fcmplt>
 8013018:	b140      	cbz	r0, 801302c <sqrtf+0x30>
 801301a:	f7ff ff91 	bl	8012f40 <__errno>
 801301e:	2321      	movs	r3, #33	@ 0x21
 8013020:	2100      	movs	r1, #0
 8013022:	6003      	str	r3, [r0, #0]
 8013024:	4608      	mov	r0, r1
 8013026:	f7ed ffa9 	bl	8000f7c <__aeabi_fdiv>
 801302a:	4604      	mov	r4, r0
 801302c:	4620      	mov	r0, r4
 801302e:	bd38      	pop	{r3, r4, r5, pc}

08013030 <__ieee754_sqrt>:
 8013030:	4a67      	ldr	r2, [pc, #412]	@ (80131d0 <__ieee754_sqrt+0x1a0>)
 8013032:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013036:	438a      	bics	r2, r1
 8013038:	4606      	mov	r6, r0
 801303a:	460f      	mov	r7, r1
 801303c:	460b      	mov	r3, r1
 801303e:	4604      	mov	r4, r0
 8013040:	d10e      	bne.n	8013060 <__ieee754_sqrt+0x30>
 8013042:	4602      	mov	r2, r0
 8013044:	f7ed fab0 	bl	80005a8 <__aeabi_dmul>
 8013048:	4602      	mov	r2, r0
 801304a:	460b      	mov	r3, r1
 801304c:	4630      	mov	r0, r6
 801304e:	4639      	mov	r1, r7
 8013050:	f7ed f8f4 	bl	800023c <__adddf3>
 8013054:	4606      	mov	r6, r0
 8013056:	460f      	mov	r7, r1
 8013058:	4630      	mov	r0, r6
 801305a:	4639      	mov	r1, r7
 801305c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013060:	2900      	cmp	r1, #0
 8013062:	dc0c      	bgt.n	801307e <__ieee754_sqrt+0x4e>
 8013064:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8013068:	4302      	orrs	r2, r0
 801306a:	d0f5      	beq.n	8013058 <__ieee754_sqrt+0x28>
 801306c:	b189      	cbz	r1, 8013092 <__ieee754_sqrt+0x62>
 801306e:	4602      	mov	r2, r0
 8013070:	f7ed f8e2 	bl	8000238 <__aeabi_dsub>
 8013074:	4602      	mov	r2, r0
 8013076:	460b      	mov	r3, r1
 8013078:	f7ed fbc0 	bl	80007fc <__aeabi_ddiv>
 801307c:	e7ea      	b.n	8013054 <__ieee754_sqrt+0x24>
 801307e:	150a      	asrs	r2, r1, #20
 8013080:	d115      	bne.n	80130ae <__ieee754_sqrt+0x7e>
 8013082:	2100      	movs	r1, #0
 8013084:	e009      	b.n	801309a <__ieee754_sqrt+0x6a>
 8013086:	0ae3      	lsrs	r3, r4, #11
 8013088:	3a15      	subs	r2, #21
 801308a:	0564      	lsls	r4, r4, #21
 801308c:	2b00      	cmp	r3, #0
 801308e:	d0fa      	beq.n	8013086 <__ieee754_sqrt+0x56>
 8013090:	e7f7      	b.n	8013082 <__ieee754_sqrt+0x52>
 8013092:	460a      	mov	r2, r1
 8013094:	e7fa      	b.n	801308c <__ieee754_sqrt+0x5c>
 8013096:	005b      	lsls	r3, r3, #1
 8013098:	3101      	adds	r1, #1
 801309a:	02d8      	lsls	r0, r3, #11
 801309c:	d5fb      	bpl.n	8013096 <__ieee754_sqrt+0x66>
 801309e:	1e48      	subs	r0, r1, #1
 80130a0:	1a12      	subs	r2, r2, r0
 80130a2:	f1c1 0020 	rsb	r0, r1, #32
 80130a6:	fa24 f000 	lsr.w	r0, r4, r0
 80130aa:	4303      	orrs	r3, r0
 80130ac:	408c      	lsls	r4, r1
 80130ae:	2600      	movs	r6, #0
 80130b0:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80130b4:	2116      	movs	r1, #22
 80130b6:	07d2      	lsls	r2, r2, #31
 80130b8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80130bc:	4632      	mov	r2, r6
 80130be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80130c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80130c6:	bf5c      	itt	pl
 80130c8:	005b      	lslpl	r3, r3, #1
 80130ca:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80130ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80130d2:	bf58      	it	pl
 80130d4:	0064      	lslpl	r4, r4, #1
 80130d6:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80130da:	107f      	asrs	r7, r7, #1
 80130dc:	0064      	lsls	r4, r4, #1
 80130de:	1815      	adds	r5, r2, r0
 80130e0:	429d      	cmp	r5, r3
 80130e2:	bfde      	ittt	le
 80130e4:	182a      	addle	r2, r5, r0
 80130e6:	1b5b      	suble	r3, r3, r5
 80130e8:	1836      	addle	r6, r6, r0
 80130ea:	0fe5      	lsrs	r5, r4, #31
 80130ec:	3901      	subs	r1, #1
 80130ee:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80130f2:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80130f6:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80130fa:	d1f0      	bne.n	80130de <__ieee754_sqrt+0xae>
 80130fc:	460d      	mov	r5, r1
 80130fe:	f04f 0a20 	mov.w	sl, #32
 8013102:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8013106:	429a      	cmp	r2, r3
 8013108:	eb01 0c00 	add.w	ip, r1, r0
 801310c:	db02      	blt.n	8013114 <__ieee754_sqrt+0xe4>
 801310e:	d113      	bne.n	8013138 <__ieee754_sqrt+0x108>
 8013110:	45a4      	cmp	ip, r4
 8013112:	d811      	bhi.n	8013138 <__ieee754_sqrt+0x108>
 8013114:	f1bc 0f00 	cmp.w	ip, #0
 8013118:	eb0c 0100 	add.w	r1, ip, r0
 801311c:	da42      	bge.n	80131a4 <__ieee754_sqrt+0x174>
 801311e:	2900      	cmp	r1, #0
 8013120:	db40      	blt.n	80131a4 <__ieee754_sqrt+0x174>
 8013122:	f102 0e01 	add.w	lr, r2, #1
 8013126:	1a9b      	subs	r3, r3, r2
 8013128:	4672      	mov	r2, lr
 801312a:	45a4      	cmp	ip, r4
 801312c:	bf88      	it	hi
 801312e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8013132:	eba4 040c 	sub.w	r4, r4, ip
 8013136:	4405      	add	r5, r0
 8013138:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 801313c:	f1ba 0a01 	subs.w	sl, sl, #1
 8013140:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8013144:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8013148:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801314c:	d1db      	bne.n	8013106 <__ieee754_sqrt+0xd6>
 801314e:	431c      	orrs	r4, r3
 8013150:	d01a      	beq.n	8013188 <__ieee754_sqrt+0x158>
 8013152:	4c20      	ldr	r4, [pc, #128]	@ (80131d4 <__ieee754_sqrt+0x1a4>)
 8013154:	f8df b080 	ldr.w	fp, [pc, #128]	@ 80131d8 <__ieee754_sqrt+0x1a8>
 8013158:	e9d4 0100 	ldrd	r0, r1, [r4]
 801315c:	e9db 2300 	ldrd	r2, r3, [fp]
 8013160:	f7ed f86a 	bl	8000238 <__aeabi_dsub>
 8013164:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013168:	4602      	mov	r2, r0
 801316a:	460b      	mov	r3, r1
 801316c:	4640      	mov	r0, r8
 801316e:	4649      	mov	r1, r9
 8013170:	f7ed fc96 	bl	8000aa0 <__aeabi_dcmple>
 8013174:	b140      	cbz	r0, 8013188 <__ieee754_sqrt+0x158>
 8013176:	e9d4 0100 	ldrd	r0, r1, [r4]
 801317a:	e9db 2300 	ldrd	r2, r3, [fp]
 801317e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8013182:	d111      	bne.n	80131a8 <__ieee754_sqrt+0x178>
 8013184:	4655      	mov	r5, sl
 8013186:	3601      	adds	r6, #1
 8013188:	1072      	asrs	r2, r6, #1
 801318a:	086b      	lsrs	r3, r5, #1
 801318c:	07f1      	lsls	r1, r6, #31
 801318e:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8013192:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8013196:	bf48      	it	mi
 8013198:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801319c:	4618      	mov	r0, r3
 801319e:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 80131a2:	e757      	b.n	8013054 <__ieee754_sqrt+0x24>
 80131a4:	4696      	mov	lr, r2
 80131a6:	e7be      	b.n	8013126 <__ieee754_sqrt+0xf6>
 80131a8:	f7ed f848 	bl	800023c <__adddf3>
 80131ac:	e9d4 8900 	ldrd	r8, r9, [r4]
 80131b0:	4602      	mov	r2, r0
 80131b2:	460b      	mov	r3, r1
 80131b4:	4640      	mov	r0, r8
 80131b6:	4649      	mov	r1, r9
 80131b8:	f7ed fc68 	bl	8000a8c <__aeabi_dcmplt>
 80131bc:	b120      	cbz	r0, 80131c8 <__ieee754_sqrt+0x198>
 80131be:	1ca8      	adds	r0, r5, #2
 80131c0:	bf08      	it	eq
 80131c2:	3601      	addeq	r6, #1
 80131c4:	3502      	adds	r5, #2
 80131c6:	e7df      	b.n	8013188 <__ieee754_sqrt+0x158>
 80131c8:	1c6b      	adds	r3, r5, #1
 80131ca:	f023 0501 	bic.w	r5, r3, #1
 80131ce:	e7db      	b.n	8013188 <__ieee754_sqrt+0x158>
 80131d0:	7ff00000 	.word	0x7ff00000
 80131d4:	200000a0 	.word	0x200000a0
 80131d8:	20000098 	.word	0x20000098

080131dc <__ieee754_sqrtf>:
 80131dc:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80131e0:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80131e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131e8:	4603      	mov	r3, r0
 80131ea:	4604      	mov	r4, r0
 80131ec:	d30a      	bcc.n	8013204 <__ieee754_sqrtf+0x28>
 80131ee:	4601      	mov	r1, r0
 80131f0:	f7ed fe10 	bl	8000e14 <__aeabi_fmul>
 80131f4:	4601      	mov	r1, r0
 80131f6:	4620      	mov	r0, r4
 80131f8:	f7ed fd04 	bl	8000c04 <__addsf3>
 80131fc:	4604      	mov	r4, r0
 80131fe:	4620      	mov	r0, r4
 8013200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013204:	2a00      	cmp	r2, #0
 8013206:	d0fa      	beq.n	80131fe <__ieee754_sqrtf+0x22>
 8013208:	2800      	cmp	r0, #0
 801320a:	da06      	bge.n	801321a <__ieee754_sqrtf+0x3e>
 801320c:	4601      	mov	r1, r0
 801320e:	f7ed fcf7 	bl	8000c00 <__aeabi_fsub>
 8013212:	4601      	mov	r1, r0
 8013214:	f7ed feb2 	bl	8000f7c <__aeabi_fdiv>
 8013218:	e7f0      	b.n	80131fc <__ieee754_sqrtf+0x20>
 801321a:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 801321e:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8013222:	d03e      	beq.n	80132a2 <__ieee754_sqrtf+0xc6>
 8013224:	2400      	movs	r4, #0
 8013226:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 801322a:	07ca      	lsls	r2, r1, #31
 801322c:	f04f 0019 	mov.w	r0, #25
 8013230:	4626      	mov	r6, r4
 8013232:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8013236:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801323a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801323e:	bf58      	it	pl
 8013240:	005b      	lslpl	r3, r3, #1
 8013242:	106d      	asrs	r5, r5, #1
 8013244:	005b      	lsls	r3, r3, #1
 8013246:	1872      	adds	r2, r6, r1
 8013248:	429a      	cmp	r2, r3
 801324a:	bfcf      	iteee	gt
 801324c:	461a      	movgt	r2, r3
 801324e:	1856      	addle	r6, r2, r1
 8013250:	1864      	addle	r4, r4, r1
 8013252:	1a9a      	suble	r2, r3, r2
 8013254:	3801      	subs	r0, #1
 8013256:	ea4f 0342 	mov.w	r3, r2, lsl #1
 801325a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801325e:	d1f2      	bne.n	8013246 <__ieee754_sqrtf+0x6a>
 8013260:	b1ba      	cbz	r2, 8013292 <__ieee754_sqrtf+0xb6>
 8013262:	4e14      	ldr	r6, [pc, #80]	@ (80132b4 <__ieee754_sqrtf+0xd8>)
 8013264:	4f14      	ldr	r7, [pc, #80]	@ (80132b8 <__ieee754_sqrtf+0xdc>)
 8013266:	6830      	ldr	r0, [r6, #0]
 8013268:	6839      	ldr	r1, [r7, #0]
 801326a:	f7ed fcc9 	bl	8000c00 <__aeabi_fsub>
 801326e:	f8d6 8000 	ldr.w	r8, [r6]
 8013272:	4601      	mov	r1, r0
 8013274:	4640      	mov	r0, r8
 8013276:	f7ed ff75 	bl	8001164 <__aeabi_fcmple>
 801327a:	b150      	cbz	r0, 8013292 <__ieee754_sqrtf+0xb6>
 801327c:	6830      	ldr	r0, [r6, #0]
 801327e:	6839      	ldr	r1, [r7, #0]
 8013280:	f7ed fcc0 	bl	8000c04 <__addsf3>
 8013284:	6836      	ldr	r6, [r6, #0]
 8013286:	4601      	mov	r1, r0
 8013288:	4630      	mov	r0, r6
 801328a:	f7ed ff61 	bl	8001150 <__aeabi_fcmplt>
 801328e:	b168      	cbz	r0, 80132ac <__ieee754_sqrtf+0xd0>
 8013290:	3402      	adds	r4, #2
 8013292:	1064      	asrs	r4, r4, #1
 8013294:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8013298:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 801329c:	e7af      	b.n	80131fe <__ieee754_sqrtf+0x22>
 801329e:	005b      	lsls	r3, r3, #1
 80132a0:	3201      	adds	r2, #1
 80132a2:	0218      	lsls	r0, r3, #8
 80132a4:	d5fb      	bpl.n	801329e <__ieee754_sqrtf+0xc2>
 80132a6:	3a01      	subs	r2, #1
 80132a8:	1a89      	subs	r1, r1, r2
 80132aa:	e7bb      	b.n	8013224 <__ieee754_sqrtf+0x48>
 80132ac:	3401      	adds	r4, #1
 80132ae:	f024 0401 	bic.w	r4, r4, #1
 80132b2:	e7ee      	b.n	8013292 <__ieee754_sqrtf+0xb6>
 80132b4:	200000ac 	.word	0x200000ac
 80132b8:	200000a8 	.word	0x200000a8

080132bc <_init>:
 80132bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132be:	bf00      	nop
 80132c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132c2:	bc08      	pop	{r3}
 80132c4:	469e      	mov	lr, r3
 80132c6:	4770      	bx	lr

080132c8 <_fini>:
 80132c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132ca:	bf00      	nop
 80132cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132ce:	bc08      	pop	{r3}
 80132d0:	469e      	mov	lr, r3
 80132d2:	4770      	bx	lr
